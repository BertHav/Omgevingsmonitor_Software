
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000234b8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003130  08023578  08023578  00024578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080266a8  080266a8  00028428  2**0
                  CONTENTS
  4 .ARM          00000008  080266a8  080266a8  000276a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080266b0  080266b0  00028428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080266b0  080266b0  000276b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080266b4  080266b4  000276b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000428  20000000  080266b8  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fb0  20000428  08026ae0  00028428  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200033d8  08026ae0  000293d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00028428  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003414d  00000000  00000000  00028450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000937b  00000000  00000000  0005c59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad8  00000000  00000000  00065918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fca  00000000  00000000  000683f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b76  00000000  00000000  0006a3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041bb2  00000000  00000000  0008cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0979  00000000  00000000  000ceae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016f45b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae8c  00000000  00000000  0016f50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017a405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017c981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000428 	.word	0x20000428
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023560 	.word	0x08023560

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000042c 	.word	0x2000042c
 8000104:	08023560 	.word	0x08023560

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08025888 	.word	0x08025888
 8000e0c:	080258c8 	.word	0x080258c8
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08025904 	.word	0x08025904
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8003654:	4b02      	ldr	r3, [pc, #8]	@ (8003660 <forceNTPupdate+0x10>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000028 	.word	0x20000028

08003664 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 800366c:	f00b fd82 	bl	800f174 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <setESPTimeStamp+0x20>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000618 	.word	0x20000618

08003688 <setCharges>:
void setCharges(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800368c:	f002 ff26 	bl	80064dc <ReadBatteryVoltage>
 8003690:	1c02      	adds	r2, r0, #0
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <setCharges+0x3c>)
 8003694:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 8003696:	f002 ff83 	bl	80065a0 <ReadSolarVoltage>
 800369a:	0003      	movs	r3, r0
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fe8f 	bl	80033c0 <__aeabi_i2d>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <setCharges+0x40>)
 80036a6:	f7fe fb85 	bl	8001db4 <__aeabi_ddiv>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f7ff ff1f 	bl	80034f4 <__aeabi_d2f>
 80036b6:	1c02      	adds	r2, r0, #0
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <setCharges+0x44>)
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	20000570 	.word	0x20000570
 80036c8:	408f4000 	.word	0x408f4000
 80036cc:	20000574 	.word	0x20000574

080036d0 <checkEEprom>:
bool checkEEprom(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <checkEEprom+0x5c>)
 80036d8:	4815      	ldr	r0, [pc, #84]	@ (8003730 <checkEEprom+0x60>)
 80036da:	220c      	movs	r2, #12
 80036dc:	0019      	movs	r1, r3
 80036de:	f003 ff03 	bl	80074e8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00e      	b.n	8003708 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <checkEEprom+0x5c>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <checkEEprom+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <checkEEprom+0x64>)
 80036fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	3201      	adds	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d9ec      	bls.n	80036ea <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <checkEEprom+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	425a      	negs	r2, r3
 8003716:	4153      	adcs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <checkEEprom+0x68>)
 800371c:	701a      	strb	r2, [r3, #0]
  return test;
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <checkEEprom+0x68>)
 8003720:	781b      	ldrb	r3, [r3, #0]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000658 	.word	0x20000658
 8003730:	0808000c 	.word	0x0808000c
 8003734:	20000664 	.word	0x20000664
 8003738:	20000668 	.word	0x20000668

0800373c <checkName>:
bool checkName(){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <checkName+0x5c>)
 8003744:	4815      	ldr	r0, [pc, #84]	@ (800379c <checkName+0x60>)
 8003746:	2220      	movs	r2, #32
 8003748:	0019      	movs	r1, r3
 800374a:	f003 fecd 	bl	80074e8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e00e      	b.n	8003774 <checkName+0x38>
    configSum += nameConfig[i];
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <checkName+0x5c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	001a      	movs	r2, r3
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <checkName+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <checkName+0x64>)
 8003768:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	3201      	adds	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b0b      	cmp	r3, #11
 800377a:	d9ec      	bls.n	8003756 <checkName+0x1a>
  }
  test = (configSum != 0);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <checkName+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	4193      	sbcs	r3, r2
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <checkName+0x68>)
 8003788:	701a      	strb	r2, [r3, #0]
  return test;
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <checkName+0x68>)
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	2000066c 	.word	0x2000066c
 800379c:	08080090 	.word	0x08080090
 80037a0:	2000068c 	.word	0x2000068c
 80037a4:	20000690 	.word	0x20000690

080037a8 <setHIDS>:


void setHIDS(float temp, float humid){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <setHIDS+0x20>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <setHIDS+0x20>)
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000624 	.word	0x20000624

080037cc <setVOC>:

void setVOC(uint16_t voc) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <setVOC+0x30>)
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <setVOC+0x30>)
 80037e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80037e4:	1dba      	adds	r2, r7, #6
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <setVOC+0x30>)
 80037ee:	1dba      	adds	r2, r7, #6
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000624 	.word	0x20000624

08003800 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <setMic+0x28>)
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <setMic+0x28>)
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 8003818:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <setMic+0x28>)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000624 	.word	0x20000624

0800382c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	0002      	movs	r2, r0
 8003834:	1dbb      	adds	r3, r7, #6
 8003836:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd fec7 	bl	80015d0 <__aeabi_i2f>
 8003842:	1c03      	adds	r3, r0, #0
 8003844:	490d      	ldr	r1, [pc, #52]	@ (800387c <setPM2p5+0x50>)
 8003846:	1c18      	adds	r0, r3, #0
 8003848:	f7fd f9c4 	bl	8000bd4 <__aeabi_fdiv>
 800384c:	1c03      	adds	r3, r0, #0
 800384e:	1c1a      	adds	r2, r3, #0
 8003850:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <setPM2p5+0x54>)
 8003852:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <setPM2p5+0x54>)
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <setPM2p5+0x54>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	1c19      	adds	r1, r3, #0
 800385e:	1c10      	adds	r0, r2, #0
 8003860:	f7fc fe7a 	bl	8000558 <__aeabi_fcmpgt>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d100      	bne.n	800386a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8003868:	e003      	b.n	8003872 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800386a:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <setPM2p5+0x54>)
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <setPM2p5+0x54>)
 8003870:	60da      	str	r2, [r3, #12]
}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	41200000 	.word	0x41200000
 8003880:	20000624 	.word	0x20000624

08003884 <setPM10>:

void setPM10(uint16_t PM10) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	0002      	movs	r2, r0
 800388c:	1dbb      	adds	r3, r7, #6
 800388e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8003890:	1dbb      	adds	r3, r7, #6
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fe9b 	bl	80015d0 <__aeabi_i2f>
 800389a:	1c03      	adds	r3, r0, #0
 800389c:	490d      	ldr	r1, [pc, #52]	@ (80038d4 <setPM10+0x50>)
 800389e:	1c18      	adds	r0, r3, #0
 80038a0:	f7fd f998 	bl	8000bd4 <__aeabi_fdiv>
 80038a4:	1c03      	adds	r3, r0, #0
 80038a6:	1c1a      	adds	r2, r3, #0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <setPM10+0x54>)
 80038aa:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80038ac:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <setPM10+0x54>)
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <setPM10+0x54>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	1c19      	adds	r1, r3, #0
 80038b6:	1c10      	adds	r0, r2, #0
 80038b8:	f7fc fe4e 	bl	8000558 <__aeabi_fcmpgt>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d100      	bne.n	80038c2 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80038c0:	e003      	b.n	80038ca <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80038c2:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <setPM10+0x54>)
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <setPM10+0x54>)
 80038c8:	615a      	str	r2, [r3, #20]
}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	41200000 	.word	0x41200000
 80038d8:	20000624 	.word	0x20000624

080038dc <setNOx>:

void setNOx(uint16_t nox) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	0002      	movs	r2, r0
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <setNOx+0x30>)
 80038ea:	1dba      	adds	r2, r7, #6
 80038ec:	8812      	ldrh	r2, [r2, #0]
 80038ee:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 80038f0:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setNOx+0x30>)
 80038f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d903      	bls.n	8003904 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <setNOx+0x30>)
 80038fe:	1dba      	adds	r2, r7, #6
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000624 	.word	0x20000624

08003910 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8003914:	f005 fd34 	bl	8009380 <sen5x_Get_sen5x_enable_state>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d008      	beq.n	800392e <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 800391c:	4b07      	ldr	r3, [pc, #28]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 8003928:	4b04      	ldr	r3, [pc, #16]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800392a:	2200      	movs	r2, #0
 800392c:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.VOCIndexmax = 0;
 800392e:	4b03      	ldr	r3, [pc, #12]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003930:	2200      	movs	r2, #0
 8003932:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000624 	.word	0x20000624

08003940 <SetConfigMode>:

void SetConfigMode(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <SetConfigMode+0x30>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	4053      	eors	r3, r2
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003952:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <SetConfigMode+0x34>)
 8003954:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <SetConfigMode+0x38>)
 8003956:	0019      	movs	r1, r3
 8003958:	2003      	movs	r0, #3
 800395a:	f00a ffc7 	bl	800e8ec <CreateLine>
  }
  ReconfigSet = true;
 800395e:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <SetConfigMode+0x30>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <SetConfigMode+0x3c>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	2000054f 	.word	0x2000054f
 8003974:	08023578 	.word	0x08023578
 8003978:	08023598 	.word	0x08023598
 800397c:	200001f7 	.word	0x200001f7

08003980 <GetReconfigMode>:

bool GetReconfigMode() {
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003984:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <GetReconfigMode+0x10>)
 8003986:	781b      	ldrb	r3, [r3, #0]
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	2000054f 	.word	0x2000054f

08003994 <ESP_GetUID>:

void ESP_GetUID(){
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003998:	f00b fc36 	bl	800f208 <HAL_GetUIDw0>
 800399c:	0002      	movs	r2, r0
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <ESP_GetUID+0x28>)
 80039a0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039a2:	f00b fc3b 	bl	800f21c <HAL_GetUIDw1>
 80039a6:	0002      	movs	r2, r0
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <ESP_GetUID+0x28>)
 80039aa:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039ac:	f00b fc40 	bl	800f230 <HAL_GetUIDw2>
 80039b0:	0002      	movs	r2, r0
 80039b2:	4b02      	ldr	r3, [pc, #8]	@ (80039bc <ESP_GetUID+0x28>)
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000558 	.word	0x20000558

080039c0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039c8:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <ESP_Init+0x2c>)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039ce:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <ESP_Init+0x30>)
 80039d0:	2202      	movs	r2, #2
 80039d2:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80039d4:	f7ff ffde 	bl	8003994 <ESP_GetUID>
  beurs = checkEEprom();
 80039d8:	f7ff fe7a 	bl	80036d0 <checkEEprom>
 80039dc:	0003      	movs	r3, r0
 80039de:	001a      	movs	r2, r3
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <ESP_Init+0x34>)
 80039e2:	701a      	strb	r2, [r3, #0]
}
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000444 	.word	0x20000444
 80039f0:	20000030 	.word	0x20000030
 80039f4:	20000552 	.word	0x20000552

080039f8 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	000a      	movs	r2, r1
 8003a02:	1cbb      	adds	r3, r7, #2
 8003a04:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <ESP_Send+0x54>)
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	250f      	movs	r5, #15
 8003a0c:	197c      	adds	r4, r7, r5
 8003a0e:	1cbb      	adds	r3, r7, #2
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0019      	movs	r1, r3
 8003a16:	f013 fed7 	bl	80177c8 <HAL_UART_Transmit_DMA>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a26:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <ESP_Send+0x58>)
 8003a28:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <ESP_Send+0x5c>)
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f00a ff5d 	bl	800e8ec <CreateLine>
    return false;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e006      	b.n	8003a44 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <ESP_Send+0x60>)
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f01c fc3d 	bl	80202bc <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8003a42:	2301      	movs	r3, #1
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	20000444 	.word	0x20000444
 8003a50:	0802359c 	.word	0x0802359c
 8003a54:	080235bc 	.word	0x080235bc
 8003a58:	080235c0 	.word	0x080235c0

08003a5c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	000a      	movs	r2, r1
 8003a66:	1cbb      	adds	r3, r7, #2
 8003a68:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003a6a:	4b45      	ldr	r3, [pc, #276]	@ (8003b80 <ESP_Receive+0x124>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003a70:	260f      	movs	r6, #15
 8003a72:	19bb      	adds	r3, r7, r6
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a78:	4b42      	ldr	r3, [pc, #264]	@ (8003b84 <ESP_Receive+0x128>)
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	250e      	movs	r5, #14
 8003a7e:	197c      	adds	r4, r7, r5
 8003a80:	1cbb      	adds	r3, r7, #2
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	0019      	movs	r1, r3
 8003a88:	f013 ff2e 	bl	80178e8 <HAL_UART_Receive_DMA>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a90:	002c      	movs	r4, r5
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d100      	bne.n	8003a9c <ESP_Receive+0x40>
 8003a9a:	e06c      	b.n	8003b76 <ESP_Receive+0x11a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003a9c:	4b39      	ldr	r3, [pc, #228]	@ (8003b84 <ESP_Receive+0x128>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2284      	movs	r2, #132	@ 0x84
 8003aa2:	589b      	ldr	r3, [r3, r2]
 8003aa4:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <ESP_Receive+0x12c>)
 8003aa6:	4939      	ldr	r1, [pc, #228]	@ (8003b8c <ESP_Receive+0x130>)
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	f00a ff1f 	bl	800e8ec <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d008      	beq.n	8003aca <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003ab8:	4a35      	ldr	r2, [pc, #212]	@ (8003b90 <ESP_Receive+0x134>)
 8003aba:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <ESP_Receive+0x130>)
 8003abc:	0019      	movs	r1, r3
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f00a ff14 	bl	800e8ec <CreateLine>
      reset = true;
 8003ac4:	19bb      	adds	r3, r7, r6
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003aca:	230e      	movs	r3, #14
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d005      	beq.n	8003ae2 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b94 <ESP_Receive+0x138>)
 8003ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b8c <ESP_Receive+0x130>)
 8003ada:	0019      	movs	r1, r3
 8003adc:	2001      	movs	r0, #1
 8003ade:	f00a ff05 	bl	800e8ec <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003ae2:	230e      	movs	r3, #14
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	4013      	ands	r3, r2
 8003aec:	d005      	beq.n	8003afa <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003aee:	4a2a      	ldr	r2, [pc, #168]	@ (8003b98 <ESP_Receive+0x13c>)
 8003af0:	4b26      	ldr	r3, [pc, #152]	@ (8003b8c <ESP_Receive+0x130>)
 8003af2:	0019      	movs	r1, r3
 8003af4:	2001      	movs	r0, #1
 8003af6:	f00a fef9 	bl	800e8ec <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003afa:	230e      	movs	r3, #14
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2208      	movs	r2, #8
 8003b02:	4013      	ands	r3, r2
 8003b04:	d005      	beq.n	8003b12 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b06:	4a25      	ldr	r2, [pc, #148]	@ (8003b9c <ESP_Receive+0x140>)
 8003b08:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <ESP_Receive+0x130>)
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f00a feed 	bl	800e8ec <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b12:	230e      	movs	r3, #14
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d005      	beq.n	8003b2a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ba0 <ESP_Receive+0x144>)
 8003b20:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <ESP_Receive+0x130>)
 8003b22:	0019      	movs	r1, r3
 8003b24:	2001      	movs	r0, #1
 8003b26:	f00a fee1 	bl	800e8ec <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b2a:	230e      	movs	r3, #14
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2220      	movs	r2, #32
 8003b32:	4013      	ands	r3, r2
 8003b34:	d005      	beq.n	8003b42 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b36:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba4 <ESP_Receive+0x148>)
 8003b38:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <ESP_Receive+0x130>)
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f00a fed5 	bl	800e8ec <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b42:	230e      	movs	r3, #14
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2240      	movs	r2, #64	@ 0x40
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d005      	beq.n	8003b5a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003b4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ba8 <ESP_Receive+0x14c>)
 8003b50:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <ESP_Receive+0x130>)
 8003b52:	0019      	movs	r1, r3
 8003b54:	2001      	movs	r0, #1
 8003b56:	f00a fec9 	bl	800e8ec <CreateLine>
    }
#endif
    if (reset) {
 8003b5a:	230f      	movs	r3, #15
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <ESP_Receive+0x110>
      SetAllREDLED();
 8003b64:	f009 fe40 	bl	800d7e8 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003b68:	f00b ffcd 	bl	800fb06 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003b6c:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <ESP_Receive+0x124>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
    return false;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <ESP_Receive+0x11c>
  }
  return true;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b005      	add	sp, #20
 8003b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b80:	20000448 	.word	0x20000448
 8003b84:	20000444 	.word	0x20000444
 8003b88:	080235d0 	.word	0x080235d0
 8003b8c:	080235bc 	.word	0x080235bc
 8003b90:	08023600 	.word	0x08023600
 8003b94:	08023624 	.word	0x08023624
 8003b98:	08023648 	.word	0x08023648
 8003b9c:	0802366c 	.word	0x0802366c
 8003ba0:	08023690 	.word	0x08023690
 8003ba4:	080236bc 	.word	0x080236bc
 8003ba8:	080236ec 	.word	0x080236ec

08003bac <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003bb4:	4b39      	ldr	r3, [pc, #228]	@ (8003c9c <HAL_UART_ErrorCallback+0xf0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d16b      	bne.n	8003c96 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2284      	movs	r2, #132	@ 0x84
 8003bc2:	589b      	ldr	r3, [r3, r2]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d065      	beq.n	8003c94 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2284      	movs	r2, #132	@ 0x84
 8003bcc:	589b      	ldr	r3, [r3, r2]
 8003bce:	4a34      	ldr	r2, [pc, #208]	@ (8003ca0 <HAL_UART_ErrorCallback+0xf4>)
 8003bd0:	4934      	ldr	r1, [pc, #208]	@ (8003ca4 <HAL_UART_ErrorCallback+0xf8>)
 8003bd2:	2003      	movs	r0, #3
 8003bd4:	f00a fe8a 	bl	800e8ec <CreateLine>
    switch (huart->ErrorCode) {
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2284      	movs	r2, #132	@ 0x84
 8003bdc:	589b      	ldr	r3, [r3, r2]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d851      	bhi.n	8003c86 <HAL_UART_ErrorCallback+0xda>
 8003be2:	009a      	lsls	r2, r3, #2
 8003be4:	4b30      	ldr	r3, [pc, #192]	@ (8003ca8 <HAL_UART_ErrorCallback+0xfc>)
 8003be6:	18d3      	adds	r3, r2, r3
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8003bec:	4a2f      	ldr	r2, [pc, #188]	@ (8003cac <HAL_UART_ErrorCallback+0x100>)
 8003bee:	4b30      	ldr	r3, [pc, #192]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f00a fe7a 	bl	800e8ec <CreateLine>
        break;
 8003bf8:	e04d      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8003bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb4 <HAL_UART_ErrorCallback+0x108>)
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003bfe:	0019      	movs	r1, r3
 8003c00:	2001      	movs	r0, #1
 8003c02:	f00a fe73 	bl	800e8ec <CreateLine>
        break;
 8003c06:	e046      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8003c08:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb8 <HAL_UART_ErrorCallback+0x10c>)
 8003c0a:	4b29      	ldr	r3, [pc, #164]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f00a fe6c 	bl	800e8ec <CreateLine>
        break;
 8003c14:	e03f      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8003c16:	4a29      	ldr	r2, [pc, #164]	@ (8003cbc <HAL_UART_ErrorCallback+0x110>)
 8003c18:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f00a fe65 	bl	800e8ec <CreateLine>
        break;
 8003c22:	e038      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8003c24:	4a26      	ldr	r2, [pc, #152]	@ (8003cc0 <HAL_UART_ErrorCallback+0x114>)
 8003c26:	4b22      	ldr	r3, [pc, #136]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c28:	0019      	movs	r1, r3
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f00a fe5e 	bl	800e8ec <CreateLine>
        break;
 8003c30:	e031      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8003c32:	4a24      	ldr	r2, [pc, #144]	@ (8003cc4 <HAL_UART_ErrorCallback+0x118>)
 8003c34:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c36:	0019      	movs	r1, r3
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f00a fe57 	bl	800e8ec <CreateLine>
        break;
 8003c3e:	e02a      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8003c40:	4a21      	ldr	r2, [pc, #132]	@ (8003cc8 <HAL_UART_ErrorCallback+0x11c>)
 8003c42:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c44:	0019      	movs	r1, r3
 8003c46:	2001      	movs	r0, #1
 8003c48:	f00a fe50 	bl	800e8ec <CreateLine>
        break;
 8003c4c:	e023      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ccc <HAL_UART_ErrorCallback+0x120>)
 8003c50:	4b17      	ldr	r3, [pc, #92]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c52:	0019      	movs	r1, r3
 8003c54:	2001      	movs	r0, #1
 8003c56:	f00a fe49 	bl	800e8ec <CreateLine>
        break;
 8003c5a:	e01c      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd0 <HAL_UART_ErrorCallback+0x124>)
 8003c5e:	4b14      	ldr	r3, [pc, #80]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c60:	0019      	movs	r1, r3
 8003c62:	2001      	movs	r0, #1
 8003c64:	f00a fe42 	bl	800e8ec <CreateLine>
        break;
 8003c68:	e015      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8003c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd4 <HAL_UART_ErrorCallback+0x128>)
 8003c6c:	4b10      	ldr	r3, [pc, #64]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c6e:	0019      	movs	r1, r3
 8003c70:	2001      	movs	r0, #1
 8003c72:	f00a fe3b 	bl	800e8ec <CreateLine>
        break;
 8003c76:	e00e      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8003c78:	4a17      	ldr	r2, [pc, #92]	@ (8003cd8 <HAL_UART_ErrorCallback+0x12c>)
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	2001      	movs	r0, #1
 8003c80:	f00a fe34 	bl	800e8ec <CreateLine>
        break;
 8003c84:	e007      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8003c86:	4a15      	ldr	r2, [pc, #84]	@ (8003cdc <HAL_UART_ErrorCallback+0x130>)
 8003c88:	4b09      	ldr	r3, [pc, #36]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f00a fe2d 	bl	800e8ec <CreateLine>
 8003c92:	e000      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      return;
 8003c94:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000444 	.word	0x20000444
 8003ca0:	0802371c 	.word	0x0802371c
 8003ca4:	08023598 	.word	0x08023598
 8003ca8:	080259d0 	.word	0x080259d0
 8003cac:	0802374c 	.word	0x0802374c
 8003cb0:	080235bc 	.word	0x080235bc
 8003cb4:	08023780 	.word	0x08023780
 8003cb8:	080237ac 	.word	0x080237ac
 8003cbc:	080237e0 	.word	0x080237e0
 8003cc0:	0802380c 	.word	0x0802380c
 8003cc4:	08023834 	.word	0x08023834
 8003cc8:	08023864 	.word	0x08023864
 8003ccc:	0802389c 	.word	0x0802389c
 8003cd0:	080238d4 	.word	0x080238d4
 8003cd4:	080238fc 	.word	0x080238fc
 8003cd8:	08023924 	.word	0x08023924
 8003cdc:	08023950 	.word	0x08023950

08003ce0 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e010      	b.n	8003d12 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	001a      	movs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	1898      	adds	r0, r3, r2
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	18d3      	adds	r3, r2, r3
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	001a      	movs	r2, r3
 8003d04:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <uint8ArrayToString+0x44>)
 8003d06:	0019      	movs	r1, r3
 8003d08:	f01c fb48 	bl	802039c <siprintf>
  for (int i = 0; i < 12; i++) {
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b0b      	cmp	r3, #11
 8003d16:	ddeb      	ble.n	8003cf0 <uint8ArrayToString+0x10>
  }
}
 8003d18:	46c0      	nop			@ (mov r8, r8)
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b004      	add	sp, #16
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	08023974 	.word	0x08023974

08003d28 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8003d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2a:	b089      	sub	sp, #36	@ 0x24
 8003d2c:	af04      	add	r7, sp, #16
 8003d2e:	6039      	str	r1, [r7, #0]
 8003d30:	0011      	movs	r1, r2
 8003d32:	1dfb      	adds	r3, r7, #7
 8003d34:	1c02      	adds	r2, r0, #0
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	1dbb      	adds	r3, r7, #6
 8003d3a:	1c0a      	adds	r2, r1, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d3e:	4b20      	ldr	r3, [pc, #128]	@ (8003dc0 <CreateMessage+0x98>)
 8003d40:	4820      	ldr	r0, [pc, #128]	@ (8003dc4 <CreateMessage+0x9c>)
 8003d42:	220c      	movs	r2, #12
 8003d44:	0019      	movs	r1, r3
 8003d46:	f003 fbcf 	bl	80074e8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <CreateMessage+0xa0>)
 8003d4c:	481f      	ldr	r0, [pc, #124]	@ (8003dcc <CreateMessage+0xa4>)
 8003d4e:	220c      	movs	r2, #12
 8003d50:	0019      	movs	r1, r3
 8003d52:	f003 fbc9 	bl	80074e8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003d56:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd0 <CreateMessage+0xa8>)
 8003d58:	481e      	ldr	r0, [pc, #120]	@ (8003dd4 <CreateMessage+0xac>)
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	f003 fbc3 	bl	80074e8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003d62:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <CreateMessage+0xb0>)
 8003d64:	481d      	ldr	r0, [pc, #116]	@ (8003ddc <CreateMessage+0xb4>)
 8003d66:	220c      	movs	r2, #12
 8003d68:	0019      	movs	r1, r3
 8003d6a:	f003 fbbd 	bl	80074e8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003de0 <CreateMessage+0xb8>)
 8003d70:	481c      	ldr	r0, [pc, #112]	@ (8003de4 <CreateMessage+0xbc>)
 8003d72:	220c      	movs	r2, #12
 8003d74:	0019      	movs	r1, r3
 8003d76:	f003 fbb7 	bl	80074e8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <CreateMessage+0xc0>)
 8003d7c:	481b      	ldr	r0, [pc, #108]	@ (8003dec <CreateMessage+0xc4>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	0019      	movs	r1, r3
 8003d82:	f003 fbb1 	bl	80074e8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003d86:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <CreateMessage+0xc8>)
 8003d88:	481a      	ldr	r0, [pc, #104]	@ (8003df4 <CreateMessage+0xcc>)
 8003d8a:	220c      	movs	r2, #12
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	f003 fbab 	bl	80074e8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003d92:	4b19      	ldr	r3, [pc, #100]	@ (8003df8 <CreateMessage+0xd0>)
 8003d94:	4819      	ldr	r0, [pc, #100]	@ (8003dfc <CreateMessage+0xd4>)
 8003d96:	220c      	movs	r2, #12
 8003d98:	0019      	movs	r1, r3
 8003d9a:	f003 fba5 	bl	80074e8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003d9e:	4b18      	ldr	r3, [pc, #96]	@ (8003e00 <CreateMessage+0xd8>)
 8003da0:	4818      	ldr	r0, [pc, #96]	@ (8003e04 <CreateMessage+0xdc>)
 8003da2:	220c      	movs	r2, #12
 8003da4:	0019      	movs	r1, r3
 8003da6:	f003 fb9f 	bl	80074e8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003daa:	f7ff fcc7 	bl	800373c <checkName>
 8003dae:	1e03      	subs	r3, r0, #0
 8003db0:	d02e      	beq.n	8003e10 <CreateMessage+0xe8>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003db2:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <CreateMessage+0xe0>)
 8003db4:	4815      	ldr	r0, [pc, #84]	@ (8003e0c <CreateMessage+0xe4>)
 8003db6:	2220      	movs	r2, #32
 8003db8:	0019      	movs	r1, r3
 8003dba:	f003 fb95 	bl	80074e8 <ReadUint8ArrayEEprom>
 8003dbe:	e02d      	b.n	8003e1c <CreateMessage+0xf4>
 8003dc0:	20000694 	.word	0x20000694
 8003dc4:	0808000c 	.word	0x0808000c
 8003dc8:	200006a0 	.word	0x200006a0
 8003dcc:	08080018 	.word	0x08080018
 8003dd0:	200006ac 	.word	0x200006ac
 8003dd4:	08080048 	.word	0x08080048
 8003dd8:	200006b8 	.word	0x200006b8
 8003ddc:	08080030 	.word	0x08080030
 8003de0:	200006c4 	.word	0x200006c4
 8003de4:	0808006c 	.word	0x0808006c
 8003de8:	200006d0 	.word	0x200006d0
 8003dec:	08080078 	.word	0x08080078
 8003df0:	200006dc 	.word	0x200006dc
 8003df4:	08080024 	.word	0x08080024
 8003df8:	200006e8 	.word	0x200006e8
 8003dfc:	08080054 	.word	0x08080054
 8003e00:	200006f4 	.word	0x200006f4
 8003e04:	08080060 	.word	0x08080060
 8003e08:	20000700 	.word	0x20000700
 8003e0c:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e10:	4bed      	ldr	r3, [pc, #948]	@ (80041c8 <CreateMessage+0x4a0>)
 8003e12:	4aee      	ldr	r2, [pc, #952]	@ (80041cc <CreateMessage+0x4a4>)
 8003e14:	6811      	ldr	r1, [r2, #0]
 8003e16:	6019      	str	r1, [r3, #0]
 8003e18:	7912      	ldrb	r2, [r2, #4]
 8003e1a:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003e1c:	f7ff fc34 	bl	8003688 <setCharges>
  uint16_t index = 0;
 8003e20:	260e      	movs	r6, #14
 8003e22:	19bb      	adds	r3, r7, r6
 8003e24:	2200      	movs	r2, #0
 8003e26:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e28:	19bb      	adds	r3, r7, r6
 8003e2a:	881a      	ldrh	r2, [r3, #0]
 8003e2c:	4be8      	ldr	r3, [pc, #928]	@ (80041d0 <CreateMessage+0x4a8>)
 8003e2e:	18d3      	adds	r3, r2, r3
 8003e30:	4ae8      	ldr	r2, [pc, #928]	@ (80041d4 <CreateMessage+0x4ac>)
 8003e32:	0011      	movs	r1, r2
 8003e34:	0018      	movs	r0, r3
 8003e36:	f01c fab1 	bl	802039c <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  uint8ArrayToString(Buffer, tempConfig);
 8003e3a:	4ae7      	ldr	r2, [pc, #924]	@ (80041d8 <CreateMessage+0x4b0>)
 8003e3c:	4be7      	ldr	r3, [pc, #924]	@ (80041dc <CreateMessage+0x4b4>)
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff ff4d 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003e46:	4be6      	ldr	r3, [pc, #920]	@ (80041e0 <CreateMessage+0x4b8>)
 8003e48:	689c      	ldr	r4, [r3, #8]
 8003e4a:	4be6      	ldr	r3, [pc, #920]	@ (80041e4 <CreateMessage+0x4bc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	1c18      	adds	r0, r3, #0
 8003e50:	f7ff fb08 	bl	8003464 <__aeabi_f2d>
 8003e54:	0002      	movs	r2, r0
 8003e56:	000b      	movs	r3, r1
 8003e58:	4ddb      	ldr	r5, [pc, #876]	@ (80041c8 <CreateMessage+0x4a0>)
 8003e5a:	49e3      	ldr	r1, [pc, #908]	@ (80041e8 <CreateMessage+0x4c0>)
 8003e5c:	48e3      	ldr	r0, [pc, #908]	@ (80041ec <CreateMessage+0x4c4>)
 8003e5e:	9202      	str	r2, [sp, #8]
 8003e60:	9303      	str	r3, [sp, #12]
 8003e62:	4bde      	ldr	r3, [pc, #888]	@ (80041dc <CreateMessage+0x4b4>)
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	002b      	movs	r3, r5
 8003e68:	0022      	movs	r2, r4
 8003e6a:	f01c fa97 	bl	802039c <siprintf>
#endif
index = strlen(message);
 8003e6e:	4bd8      	ldr	r3, [pc, #864]	@ (80041d0 <CreateMessage+0x4a8>)
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7fc f97b 	bl	800016c <strlen>
 8003e76:	0002      	movs	r2, r0
 8003e78:	19bb      	adds	r3, r7, r6
 8003e7a:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003e7c:	1dbb      	adds	r3, r7, #6
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d019      	beq.n	8003eb8 <CreateMessage+0x190>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003e84:	4bd2      	ldr	r3, [pc, #840]	@ (80041d0 <CreateMessage+0x4a8>)
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7fc f970 	bl	800016c <strlen>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	4bcf      	ldr	r3, [pc, #828]	@ (80041d0 <CreateMessage+0x4a8>)
 8003e92:	0011      	movs	r1, r2
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7ff fdaf 	bl	80039f8 <ESP_Send>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	4bd4      	ldr	r3, [pc, #848]	@ (80041f0 <CreateMessage+0x4c8>)
 8003ea0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003ea2:	4bd4      	ldr	r3, [pc, #848]	@ (80041f4 <CreateMessage+0x4cc>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	4bd1      	ldr	r3, [pc, #836]	@ (80041f0 <CreateMessage+0x4c8>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	4013      	ands	r3, r2
 8003eae:	1e5a      	subs	r2, r3, #1
 8003eb0:	4193      	sbcs	r3, r2
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	4bcf      	ldr	r3, [pc, #828]	@ (80041f4 <CreateMessage+0x4cc>)
 8003eb6:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8003eb8:	4acf      	ldr	r2, [pc, #828]	@ (80041f8 <CreateMessage+0x4d0>)
 8003eba:	4bc8      	ldr	r3, [pc, #800]	@ (80041dc <CreateMessage+0x4b4>)
 8003ebc:	0011      	movs	r1, r2
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7ff ff0e 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003ec4:	4bc6      	ldr	r3, [pc, #792]	@ (80041e0 <CreateMessage+0x4b8>)
 8003ec6:	689c      	ldr	r4, [r3, #8]
 8003ec8:	4bc6      	ldr	r3, [pc, #792]	@ (80041e4 <CreateMessage+0x4bc>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	1c18      	adds	r0, r3, #0
 8003ece:	f7ff fac9 	bl	8003464 <__aeabi_f2d>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	000b      	movs	r3, r1
 8003ed6:	4dbc      	ldr	r5, [pc, #752]	@ (80041c8 <CreateMessage+0x4a0>)
 8003ed8:	49c8      	ldr	r1, [pc, #800]	@ (80041fc <CreateMessage+0x4d4>)
 8003eda:	48bd      	ldr	r0, [pc, #756]	@ (80041d0 <CreateMessage+0x4a8>)
 8003edc:	9202      	str	r2, [sp, #8]
 8003ede:	9303      	str	r3, [sp, #12]
 8003ee0:	4bbe      	ldr	r3, [pc, #760]	@ (80041dc <CreateMessage+0x4b4>)
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	002b      	movs	r3, r5
 8003ee6:	0022      	movs	r2, r4
 8003ee8:	f01c fa58 	bl	802039c <siprintf>
#endif
  index += strlen(message);
 8003eec:	4bb8      	ldr	r3, [pc, #736]	@ (80041d0 <CreateMessage+0x4a8>)
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7fc f93c 	bl	800016c <strlen>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	b299      	uxth	r1, r3
 8003ef8:	220e      	movs	r2, #14
 8003efa:	18bb      	adds	r3, r7, r2
 8003efc:	18ba      	adds	r2, r7, r2
 8003efe:	8812      	ldrh	r2, [r2, #0]
 8003f00:	188a      	adds	r2, r1, r2
 8003f02:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f04:	1dbb      	adds	r3, r7, #6
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d019      	beq.n	8003f40 <CreateMessage+0x218>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f0c:	4bb0      	ldr	r3, [pc, #704]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7fc f92c 	bl	800016c <strlen>
 8003f14:	0003      	movs	r3, r0
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	4bad      	ldr	r3, [pc, #692]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff fd6b 	bl	80039f8 <ESP_Send>
 8003f22:	0003      	movs	r3, r0
 8003f24:	001a      	movs	r2, r3
 8003f26:	4bb2      	ldr	r3, [pc, #712]	@ (80041f0 <CreateMessage+0x4c8>)
 8003f28:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003f2a:	4bb2      	ldr	r3, [pc, #712]	@ (80041f4 <CreateMessage+0x4cc>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	001a      	movs	r2, r3
 8003f30:	4baf      	ldr	r3, [pc, #700]	@ (80041f0 <CreateMessage+0x4c8>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4013      	ands	r3, r2
 8003f36:	1e5a      	subs	r2, r3, #1
 8003f38:	4193      	sbcs	r3, r2
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	4bad      	ldr	r3, [pc, #692]	@ (80041f4 <CreateMessage+0x4cc>)
 8003f3e:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8003f40:	4aaf      	ldr	r2, [pc, #700]	@ (8004200 <CreateMessage+0x4d8>)
 8003f42:	4ba6      	ldr	r3, [pc, #664]	@ (80041dc <CreateMessage+0x4b4>)
 8003f44:	0011      	movs	r1, r2
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff feca 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndexmax);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8003f4c:	4ba4      	ldr	r3, [pc, #656]	@ (80041e0 <CreateMessage+0x4b8>)
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	4ba4      	ldr	r3, [pc, #656]	@ (80041e4 <CreateMessage+0x4bc>)
 8003f52:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003f54:	4c9c      	ldr	r4, [pc, #624]	@ (80041c8 <CreateMessage+0x4a0>)
 8003f56:	49ab      	ldr	r1, [pc, #684]	@ (8004204 <CreateMessage+0x4dc>)
 8003f58:	489d      	ldr	r0, [pc, #628]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	4b9f      	ldr	r3, [pc, #636]	@ (80041dc <CreateMessage+0x4b4>)
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	0023      	movs	r3, r4
 8003f62:	f01c fa1b 	bl	802039c <siprintf>
#endif
  index += strlen(message);
 8003f66:	4b9a      	ldr	r3, [pc, #616]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7fc f8ff 	bl	800016c <strlen>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	b299      	uxth	r1, r3
 8003f72:	220e      	movs	r2, #14
 8003f74:	18bb      	adds	r3, r7, r2
 8003f76:	18ba      	adds	r2, r7, r2
 8003f78:	8812      	ldrh	r2, [r2, #0]
 8003f7a:	188a      	adds	r2, r1, r2
 8003f7c:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f7e:	1dbb      	adds	r3, r7, #6
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d019      	beq.n	8003fba <CreateMessage+0x292>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f86:	4b92      	ldr	r3, [pc, #584]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fc f8ef 	bl	800016c <strlen>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	4b8f      	ldr	r3, [pc, #572]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f94:	0011      	movs	r1, r2
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7ff fd2e 	bl	80039f8 <ESP_Send>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	4b93      	ldr	r3, [pc, #588]	@ (80041f0 <CreateMessage+0x4c8>)
 8003fa2:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003fa4:	4b93      	ldr	r3, [pc, #588]	@ (80041f4 <CreateMessage+0x4cc>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	001a      	movs	r2, r3
 8003faa:	4b91      	ldr	r3, [pc, #580]	@ (80041f0 <CreateMessage+0x4c8>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	1e5a      	subs	r2, r3, #1
 8003fb2:	4193      	sbcs	r3, r2
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	4b8f      	ldr	r3, [pc, #572]	@ (80041f4 <CreateMessage+0x4cc>)
 8003fb8:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, soundConfig);
 8003fba:	4a93      	ldr	r2, [pc, #588]	@ (8004208 <CreateMessage+0x4e0>)
 8003fbc:	4b87      	ldr	r3, [pc, #540]	@ (80041dc <CreateMessage+0x4b4>)
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff fe8d 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8003fc6:	4b86      	ldr	r3, [pc, #536]	@ (80041e0 <CreateMessage+0x4b8>)
 8003fc8:	689c      	ldr	r4, [r3, #8]
 8003fca:	4b86      	ldr	r3, [pc, #536]	@ (80041e4 <CreateMessage+0x4bc>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	1c18      	adds	r0, r3, #0
 8003fd0:	f7ff fa48 	bl	8003464 <__aeabi_f2d>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	000b      	movs	r3, r1
 8003fd8:	4d7b      	ldr	r5, [pc, #492]	@ (80041c8 <CreateMessage+0x4a0>)
 8003fda:	498c      	ldr	r1, [pc, #560]	@ (800420c <CreateMessage+0x4e4>)
 8003fdc:	487c      	ldr	r0, [pc, #496]	@ (80041d0 <CreateMessage+0x4a8>)
 8003fde:	9202      	str	r2, [sp, #8]
 8003fe0:	9303      	str	r3, [sp, #12]
 8003fe2:	4b7e      	ldr	r3, [pc, #504]	@ (80041dc <CreateMessage+0x4b4>)
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	002b      	movs	r3, r5
 8003fe8:	0022      	movs	r2, r4
 8003fea:	f01c f9d7 	bl	802039c <siprintf>
#endif
  index += strlen(message);
 8003fee:	4b78      	ldr	r3, [pc, #480]	@ (80041d0 <CreateMessage+0x4a8>)
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7fc f8bb 	bl	800016c <strlen>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	b299      	uxth	r1, r3
 8003ffa:	220e      	movs	r2, #14
 8003ffc:	18bb      	adds	r3, r7, r2
 8003ffe:	18ba      	adds	r2, r7, r2
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	188a      	adds	r2, r1, r2
 8004004:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004006:	1dbb      	adds	r3, r7, #6
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d019      	beq.n	8004042 <CreateMessage+0x31a>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800400e:	4b70      	ldr	r3, [pc, #448]	@ (80041d0 <CreateMessage+0x4a8>)
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc f8ab 	bl	800016c <strlen>
 8004016:	0003      	movs	r3, r0
 8004018:	b29a      	uxth	r2, r3
 800401a:	4b6d      	ldr	r3, [pc, #436]	@ (80041d0 <CreateMessage+0x4a8>)
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f7ff fcea 	bl	80039f8 <ESP_Send>
 8004024:	0003      	movs	r3, r0
 8004026:	001a      	movs	r2, r3
 8004028:	4b71      	ldr	r3, [pc, #452]	@ (80041f0 <CreateMessage+0x4c8>)
 800402a:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800402c:	4b71      	ldr	r3, [pc, #452]	@ (80041f4 <CreateMessage+0x4cc>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	001a      	movs	r2, r3
 8004032:	4b6f      	ldr	r3, [pc, #444]	@ (80041f0 <CreateMessage+0x4c8>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4013      	ands	r3, r2
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	4193      	sbcs	r3, r2
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b6d      	ldr	r3, [pc, #436]	@ (80041f4 <CreateMessage+0x4cc>)
 8004040:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8004042:	1dfb      	adds	r3, r7, #7
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	4053      	eors	r3, r2
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d100      	bne.n	8004052 <CreateMessage+0x32a>
 8004050:	e14a      	b.n	80042e8 <CreateMessage+0x5c0>
    uint8ArrayToString(Buffer, solarConfig);
 8004052:	4a6f      	ldr	r2, [pc, #444]	@ (8004210 <CreateMessage+0x4e8>)
 8004054:	4b61      	ldr	r3, [pc, #388]	@ (80041dc <CreateMessage+0x4b4>)
 8004056:	0011      	movs	r1, r2
 8004058:	0018      	movs	r0, r3
 800405a:	f7ff fe41 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 800405e:	4b60      	ldr	r3, [pc, #384]	@ (80041e0 <CreateMessage+0x4b8>)
 8004060:	689c      	ldr	r4, [r3, #8]
 8004062:	4b6c      	ldr	r3, [pc, #432]	@ (8004214 <CreateMessage+0x4ec>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1c18      	adds	r0, r3, #0
 8004068:	f7ff f9fc 	bl	8003464 <__aeabi_f2d>
 800406c:	0002      	movs	r2, r0
 800406e:	000b      	movs	r3, r1
 8004070:	4d55      	ldr	r5, [pc, #340]	@ (80041c8 <CreateMessage+0x4a0>)
 8004072:	4969      	ldr	r1, [pc, #420]	@ (8004218 <CreateMessage+0x4f0>)
 8004074:	4856      	ldr	r0, [pc, #344]	@ (80041d0 <CreateMessage+0x4a8>)
 8004076:	9202      	str	r2, [sp, #8]
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	4b58      	ldr	r3, [pc, #352]	@ (80041dc <CreateMessage+0x4b4>)
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	002b      	movs	r3, r5
 8004080:	0022      	movs	r2, r4
 8004082:	f01c f98b 	bl	802039c <siprintf>
#endif
    index += strlen(message);
 8004086:	4b52      	ldr	r3, [pc, #328]	@ (80041d0 <CreateMessage+0x4a8>)
 8004088:	0018      	movs	r0, r3
 800408a:	f7fc f86f 	bl	800016c <strlen>
 800408e:	0003      	movs	r3, r0
 8004090:	b299      	uxth	r1, r3
 8004092:	220e      	movs	r2, #14
 8004094:	18bb      	adds	r3, r7, r2
 8004096:	18ba      	adds	r2, r7, r2
 8004098:	8812      	ldrh	r2, [r2, #0]
 800409a:	188a      	adds	r2, r1, r2
 800409c:	801a      	strh	r2, [r3, #0]
    if (send) {
 800409e:	1dbb      	adds	r3, r7, #6
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d019      	beq.n	80040da <CreateMessage+0x3b2>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80040a6:	4b4a      	ldr	r3, [pc, #296]	@ (80041d0 <CreateMessage+0x4a8>)
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7fc f85f 	bl	800016c <strlen>
 80040ae:	0003      	movs	r3, r0
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <CreateMessage+0x4a8>)
 80040b4:	0011      	movs	r1, r2
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff fc9e 	bl	80039f8 <ESP_Send>
 80040bc:	0003      	movs	r3, r0
 80040be:	001a      	movs	r2, r3
 80040c0:	4b4b      	ldr	r3, [pc, #300]	@ (80041f0 <CreateMessage+0x4c8>)
 80040c2:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80040c4:	4b4b      	ldr	r3, [pc, #300]	@ (80041f4 <CreateMessage+0x4cc>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	001a      	movs	r2, r3
 80040ca:	4b49      	ldr	r3, [pc, #292]	@ (80041f0 <CreateMessage+0x4c8>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	4013      	ands	r3, r2
 80040d0:	1e5a      	subs	r2, r3, #1
 80040d2:	4193      	sbcs	r3, r2
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	4b47      	ldr	r3, [pc, #284]	@ (80041f4 <CreateMessage+0x4cc>)
 80040d8:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 80040da:	4b50      	ldr	r3, [pc, #320]	@ (800421c <CreateMessage+0x4f4>)
 80040dc:	791b      	ldrb	r3, [r3, #4]
 80040de:	2b35      	cmp	r3, #53	@ 0x35
 80040e0:	d140      	bne.n	8004164 <CreateMessage+0x43c>
 80040e2:	f002 fab1 	bl	8006648 <Check_USB_PowerOn>
 80040e6:	1e03      	subs	r3, r0, #0
 80040e8:	d03c      	beq.n	8004164 <CreateMessage+0x43c>
      uint8ArrayToString(Buffer, noxConfig);
 80040ea:	4a4d      	ldr	r2, [pc, #308]	@ (8004220 <CreateMessage+0x4f8>)
 80040ec:	4b3b      	ldr	r3, [pc, #236]	@ (80041dc <CreateMessage+0x4b4>)
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff fdf5 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 80040f6:	4b3a      	ldr	r3, [pc, #232]	@ (80041e0 <CreateMessage+0x4b8>)
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	4b3a      	ldr	r3, [pc, #232]	@ (80041e4 <CreateMessage+0x4bc>)
 80040fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040fe:	4c32      	ldr	r4, [pc, #200]	@ (80041c8 <CreateMessage+0x4a0>)
 8004100:	4948      	ldr	r1, [pc, #288]	@ (8004224 <CreateMessage+0x4fc>)
 8004102:	4833      	ldr	r0, [pc, #204]	@ (80041d0 <CreateMessage+0x4a8>)
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	4b35      	ldr	r3, [pc, #212]	@ (80041dc <CreateMessage+0x4b4>)
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	0023      	movs	r3, r4
 800410c:	f01c f946 	bl	802039c <siprintf>
#endif
      index += strlen(message);
 8004110:	4b2f      	ldr	r3, [pc, #188]	@ (80041d0 <CreateMessage+0x4a8>)
 8004112:	0018      	movs	r0, r3
 8004114:	f7fc f82a 	bl	800016c <strlen>
 8004118:	0003      	movs	r3, r0
 800411a:	b299      	uxth	r1, r3
 800411c:	220e      	movs	r2, #14
 800411e:	18bb      	adds	r3, r7, r2
 8004120:	18ba      	adds	r2, r7, r2
 8004122:	8812      	ldrh	r2, [r2, #0]
 8004124:	188a      	adds	r2, r1, r2
 8004126:	801a      	strh	r2, [r3, #0]
      if (send) {
 8004128:	1dbb      	adds	r3, r7, #6
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d019      	beq.n	8004164 <CreateMessage+0x43c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8004130:	4b27      	ldr	r3, [pc, #156]	@ (80041d0 <CreateMessage+0x4a8>)
 8004132:	0018      	movs	r0, r3
 8004134:	f7fc f81a 	bl	800016c <strlen>
 8004138:	0003      	movs	r3, r0
 800413a:	b29a      	uxth	r2, r3
 800413c:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <CreateMessage+0x4a8>)
 800413e:	0011      	movs	r1, r2
 8004140:	0018      	movs	r0, r3
 8004142:	f7ff fc59 	bl	80039f8 <ESP_Send>
 8004146:	0003      	movs	r3, r0
 8004148:	001a      	movs	r2, r3
 800414a:	4b29      	ldr	r3, [pc, #164]	@ (80041f0 <CreateMessage+0x4c8>)
 800414c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800414e:	4b29      	ldr	r3, [pc, #164]	@ (80041f4 <CreateMessage+0x4cc>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	001a      	movs	r2, r3
 8004154:	4b26      	ldr	r3, [pc, #152]	@ (80041f0 <CreateMessage+0x4c8>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4013      	ands	r3, r2
 800415a:	1e5a      	subs	r2, r3, #1
 800415c:	4193      	sbcs	r3, r2
 800415e:	b2da      	uxtb	r2, r3
 8004160:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <CreateMessage+0x4cc>)
 8004162:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 8004164:	f005 f90c 	bl	8009380 <sen5x_Get_sen5x_enable_state>
 8004168:	1e03      	subs	r3, r0, #0
 800416a:	d100      	bne.n	800416e <CreateMessage+0x446>
 800416c:	e0bc      	b.n	80042e8 <CreateMessage+0x5c0>
      uint8ArrayToString(Buffer, PM2Config);
 800416e:	4a2e      	ldr	r2, [pc, #184]	@ (8004228 <CreateMessage+0x500>)
 8004170:	4b1a      	ldr	r3, [pc, #104]	@ (80041dc <CreateMessage+0x4b4>)
 8004172:	0011      	movs	r1, r2
 8004174:	0018      	movs	r0, r3
 8004176:	f7ff fdb3 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 800417a:	4b19      	ldr	r3, [pc, #100]	@ (80041e0 <CreateMessage+0x4b8>)
 800417c:	689c      	ldr	r4, [r3, #8]
 800417e:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <CreateMessage+0x4bc>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	1c18      	adds	r0, r3, #0
 8004184:	f7ff f96e 	bl	8003464 <__aeabi_f2d>
 8004188:	0002      	movs	r2, r0
 800418a:	000b      	movs	r3, r1
 800418c:	4d0e      	ldr	r5, [pc, #56]	@ (80041c8 <CreateMessage+0x4a0>)
 800418e:	4927      	ldr	r1, [pc, #156]	@ (800422c <CreateMessage+0x504>)
 8004190:	480f      	ldr	r0, [pc, #60]	@ (80041d0 <CreateMessage+0x4a8>)
 8004192:	9202      	str	r2, [sp, #8]
 8004194:	9303      	str	r3, [sp, #12]
 8004196:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <CreateMessage+0x4b4>)
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	002b      	movs	r3, r5
 800419c:	0022      	movs	r2, r4
 800419e:	f01c f8fd 	bl	802039c <siprintf>
#endif
      index += strlen(message);
 80041a2:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <CreateMessage+0x4a8>)
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7fb ffe1 	bl	800016c <strlen>
 80041aa:	0003      	movs	r3, r0
 80041ac:	b299      	uxth	r1, r3
 80041ae:	220e      	movs	r2, #14
 80041b0:	18bb      	adds	r3, r7, r2
 80041b2:	18ba      	adds	r2, r7, r2
 80041b4:	8812      	ldrh	r2, [r2, #0]
 80041b6:	188a      	adds	r2, r1, r2
 80041b8:	801a      	strh	r2, [r3, #0]
      if (send) {
 80041ba:	1dbb      	adds	r3, r7, #6
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d04e      	beq.n	8004260 <CreateMessage+0x538>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80041c2:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <CreateMessage+0x4a8>)
 80041c4:	0018      	movs	r0, r3
 80041c6:	e033      	b.n	8004230 <CreateMessage+0x508>
 80041c8:	20000700 	.word	0x20000700
 80041cc:	08025964 	.word	0x08025964
 80041d0:	20000578 	.word	0x20000578
 80041d4:	0802397c 	.word	0x0802397c
 80041d8:	20000694 	.word	0x20000694
 80041dc:	20000720 	.word	0x20000720
 80041e0:	20000558 	.word	0x20000558
 80041e4:	20000624 	.word	0x20000624
 80041e8:	08023980 	.word	0x08023980
 80041ec:	20000579 	.word	0x20000579
 80041f0:	20000739 	.word	0x20000739
 80041f4:	20000031 	.word	0x20000031
 80041f8:	200006a0 	.word	0x200006a0
 80041fc:	080239d4 	.word	0x080239d4
 8004200:	200006b8 	.word	0x200006b8
 8004204:	08023a2c 	.word	0x08023a2c
 8004208:	200006ac 	.word	0x200006ac
 800420c:	08023a80 	.word	0x08023a80
 8004210:	200006d0 	.word	0x200006d0
 8004214:	20000574 	.word	0x20000574
 8004218:	08023adc 	.word	0x08023adc
 800421c:	20000c88 	.word	0x20000c88
 8004220:	200006dc 	.word	0x200006dc
 8004224:	08023b3c 	.word	0x08023b3c
 8004228:	200006e8 	.word	0x200006e8
 800422c:	08023b90 	.word	0x08023b90
 8004230:	f7fb ff9c 	bl	800016c <strlen>
 8004234:	0003      	movs	r3, r0
 8004236:	b29a      	uxth	r2, r3
 8004238:	4b59      	ldr	r3, [pc, #356]	@ (80043a0 <CreateMessage+0x678>)
 800423a:	0011      	movs	r1, r2
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff fbdb 	bl	80039f8 <ESP_Send>
 8004242:	0003      	movs	r3, r0
 8004244:	001a      	movs	r2, r3
 8004246:	4b57      	ldr	r3, [pc, #348]	@ (80043a4 <CreateMessage+0x67c>)
 8004248:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800424a:	4b57      	ldr	r3, [pc, #348]	@ (80043a8 <CreateMessage+0x680>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	001a      	movs	r2, r3
 8004250:	4b54      	ldr	r3, [pc, #336]	@ (80043a4 <CreateMessage+0x67c>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	4013      	ands	r3, r2
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	4193      	sbcs	r3, r2
 800425a:	b2da      	uxtb	r2, r3
 800425c:	4b52      	ldr	r3, [pc, #328]	@ (80043a8 <CreateMessage+0x680>)
 800425e:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 8004260:	4a52      	ldr	r2, [pc, #328]	@ (80043ac <CreateMessage+0x684>)
 8004262:	4b53      	ldr	r3, [pc, #332]	@ (80043b0 <CreateMessage+0x688>)
 8004264:	0011      	movs	r1, r2
 8004266:	0018      	movs	r0, r3
 8004268:	f7ff fd3a 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 800426c:	4b51      	ldr	r3, [pc, #324]	@ (80043b4 <CreateMessage+0x68c>)
 800426e:	689c      	ldr	r4, [r3, #8]
 8004270:	4b51      	ldr	r3, [pc, #324]	@ (80043b8 <CreateMessage+0x690>)
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	1c18      	adds	r0, r3, #0
 8004276:	f7ff f8f5 	bl	8003464 <__aeabi_f2d>
 800427a:	0002      	movs	r2, r0
 800427c:	000b      	movs	r3, r1
 800427e:	4d4f      	ldr	r5, [pc, #316]	@ (80043bc <CreateMessage+0x694>)
 8004280:	494f      	ldr	r1, [pc, #316]	@ (80043c0 <CreateMessage+0x698>)
 8004282:	4847      	ldr	r0, [pc, #284]	@ (80043a0 <CreateMessage+0x678>)
 8004284:	9202      	str	r2, [sp, #8]
 8004286:	9303      	str	r3, [sp, #12]
 8004288:	4b49      	ldr	r3, [pc, #292]	@ (80043b0 <CreateMessage+0x688>)
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	002b      	movs	r3, r5
 800428e:	0022      	movs	r2, r4
 8004290:	f01c f884 	bl	802039c <siprintf>
#endif
      index += strlen(message);
 8004294:	4b42      	ldr	r3, [pc, #264]	@ (80043a0 <CreateMessage+0x678>)
 8004296:	0018      	movs	r0, r3
 8004298:	f7fb ff68 	bl	800016c <strlen>
 800429c:	0003      	movs	r3, r0
 800429e:	b299      	uxth	r1, r3
 80042a0:	220e      	movs	r2, #14
 80042a2:	18bb      	adds	r3, r7, r2
 80042a4:	18ba      	adds	r2, r7, r2
 80042a6:	8812      	ldrh	r2, [r2, #0]
 80042a8:	188a      	adds	r2, r1, r2
 80042aa:	801a      	strh	r2, [r3, #0]
      if (send) {
 80042ac:	1dbb      	adds	r3, r7, #6
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d019      	beq.n	80042e8 <CreateMessage+0x5c0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80042b4:	4b3a      	ldr	r3, [pc, #232]	@ (80043a0 <CreateMessage+0x678>)
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7fb ff58 	bl	800016c <strlen>
 80042bc:	0003      	movs	r3, r0
 80042be:	b29a      	uxth	r2, r3
 80042c0:	4b37      	ldr	r3, [pc, #220]	@ (80043a0 <CreateMessage+0x678>)
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff fb97 	bl	80039f8 <ESP_Send>
 80042ca:	0003      	movs	r3, r0
 80042cc:	001a      	movs	r2, r3
 80042ce:	4b35      	ldr	r3, [pc, #212]	@ (80043a4 <CreateMessage+0x67c>)
 80042d0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80042d2:	4b35      	ldr	r3, [pc, #212]	@ (80043a8 <CreateMessage+0x680>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	001a      	movs	r2, r3
 80042d8:	4b32      	ldr	r3, [pc, #200]	@ (80043a4 <CreateMessage+0x67c>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	4013      	ands	r3, r2
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	4193      	sbcs	r3, r2
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	4b30      	ldr	r3, [pc, #192]	@ (80043a8 <CreateMessage+0x680>)
 80042e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 80042e8:	4a36      	ldr	r2, [pc, #216]	@ (80043c4 <CreateMessage+0x69c>)
 80042ea:	4b31      	ldr	r3, [pc, #196]	@ (80043b0 <CreateMessage+0x688>)
 80042ec:	0011      	movs	r1, r2
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7ff fcf6 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 80042f4:	4b2f      	ldr	r3, [pc, #188]	@ (80043b4 <CreateMessage+0x68c>)
 80042f6:	689c      	ldr	r4, [r3, #8]
 80042f8:	4b33      	ldr	r3, [pc, #204]	@ (80043c8 <CreateMessage+0x6a0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	1c18      	adds	r0, r3, #0
 80042fe:	f7ff f8b1 	bl	8003464 <__aeabi_f2d>
 8004302:	0002      	movs	r2, r0
 8004304:	000b      	movs	r3, r1
 8004306:	4d2d      	ldr	r5, [pc, #180]	@ (80043bc <CreateMessage+0x694>)
 8004308:	4930      	ldr	r1, [pc, #192]	@ (80043cc <CreateMessage+0x6a4>)
 800430a:	4825      	ldr	r0, [pc, #148]	@ (80043a0 <CreateMessage+0x678>)
 800430c:	9202      	str	r2, [sp, #8]
 800430e:	9303      	str	r3, [sp, #12]
 8004310:	4b27      	ldr	r3, [pc, #156]	@ (80043b0 <CreateMessage+0x688>)
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	002b      	movs	r3, r5
 8004316:	0022      	movs	r2, r4
 8004318:	f01c f840 	bl	802039c <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 800431c:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <CreateMessage+0x678>)
 800431e:	0018      	movs	r0, r3
 8004320:	f7fb ff24 	bl	800016c <strlen>
 8004324:	0002      	movs	r2, r0
 8004326:	4b1e      	ldr	r3, [pc, #120]	@ (80043a0 <CreateMessage+0x678>)
 8004328:	18d3      	adds	r3, r2, r3
 800432a:	4a29      	ldr	r2, [pc, #164]	@ (80043d0 <CreateMessage+0x6a8>)
 800432c:	0011      	movs	r1, r2
 800432e:	0018      	movs	r0, r3
 8004330:	f01c f834 	bl	802039c <siprintf>
  index += strlen(message);
 8004334:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <CreateMessage+0x678>)
 8004336:	0018      	movs	r0, r3
 8004338:	f7fb ff18 	bl	800016c <strlen>
 800433c:	0003      	movs	r3, r0
 800433e:	b299      	uxth	r1, r3
 8004340:	220e      	movs	r2, #14
 8004342:	18bb      	adds	r3, r7, r2
 8004344:	18ba      	adds	r2, r7, r2
 8004346:	8812      	ldrh	r2, [r2, #0]
 8004348:	188a      	adds	r2, r1, r2
 800434a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800434c:	1dbb      	adds	r3, r7, #6
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d019      	beq.n	8004388 <CreateMessage+0x660>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004354:	4b12      	ldr	r3, [pc, #72]	@ (80043a0 <CreateMessage+0x678>)
 8004356:	0018      	movs	r0, r3
 8004358:	f7fb ff08 	bl	800016c <strlen>
 800435c:	0003      	movs	r3, r0
 800435e:	b29a      	uxth	r2, r3
 8004360:	4b0f      	ldr	r3, [pc, #60]	@ (80043a0 <CreateMessage+0x678>)
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff fb47 	bl	80039f8 <ESP_Send>
 800436a:	0003      	movs	r3, r0
 800436c:	001a      	movs	r2, r3
 800436e:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <CreateMessage+0x67c>)
 8004370:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004372:	4b0d      	ldr	r3, [pc, #52]	@ (80043a8 <CreateMessage+0x680>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	001a      	movs	r2, r3
 8004378:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <CreateMessage+0x67c>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	4013      	ands	r3, r2
 800437e:	1e5a      	subs	r2, r3, #1
 8004380:	4193      	sbcs	r3, r2
 8004382:	b2da      	uxtb	r2, r3
 8004384:	4b08      	ldr	r3, [pc, #32]	@ (80043a8 <CreateMessage+0x680>)
 8004386:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8004388:	4b07      	ldr	r3, [pc, #28]	@ (80043a8 <CreateMessage+0x680>)
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	701a      	strb	r2, [r3, #0]
  return index;
 8004390:	230e      	movs	r3, #14
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	881b      	ldrh	r3, [r3, #0]
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b005      	add	sp, #20
 800439c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	20000578 	.word	0x20000578
 80043a4:	20000739 	.word	0x20000739
 80043a8:	20000031 	.word	0x20000031
 80043ac:	200006f4 	.word	0x200006f4
 80043b0:	20000720 	.word	0x20000720
 80043b4:	20000558 	.word	0x20000558
 80043b8:	20000624 	.word	0x20000624
 80043bc:	20000700 	.word	0x20000700
 80043c0:	08023bec 	.word	0x08023bec
 80043c4:	200006c4 	.word	0x200006c4
 80043c8:	20000570 	.word	0x20000570
 80043cc:	08023c48 	.word	0x08023c48
 80043d0:	08023ca0 	.word	0x08023ca0

080043d4 <StartProg>:

void StartProg(){
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80043d8:	2064      	movs	r0, #100	@ 0x64
 80043da:	f00a fed5 	bl	800f188 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80043de:	4b15      	ldr	r3, [pc, #84]	@ (8004434 <StartProg+0x60>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	2101      	movs	r1, #1
 80043e4:	0018      	movs	r0, r3
 80043e6:	f00c f956 	bl	8010696 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80043ea:	2064      	movs	r0, #100	@ 0x64
 80043ec:	f00a fecc 	bl	800f188 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80043f0:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <StartProg+0x60>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	2102      	movs	r1, #2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f00c f94d 	bl	8010696 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80043fc:	23fa      	movs	r3, #250	@ 0xfa
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	0018      	movs	r0, r3
 8004402:	f00a fec1 	bl	800f188 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004406:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <StartProg+0x60>)
 8004408:	2201      	movs	r2, #1
 800440a:	2101      	movs	r1, #1
 800440c:	0018      	movs	r0, r3
 800440e:	f00c f942 	bl	8010696 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004412:	23fa      	movs	r3, #250	@ 0xfa
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	0018      	movs	r0, r3
 8004418:	f00a feb6 	bl	800f188 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 800441c:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <StartProg+0x60>)
 800441e:	2201      	movs	r2, #1
 8004420:	2102      	movs	r1, #2
 8004422:	0018      	movs	r0, r3
 8004424:	f00c f937 	bl	8010696 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004428:	2028      	movs	r0, #40	@ 0x28
 800442a:	f00a fead 	bl	800f188 <HAL_Delay>
}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	50001c00 	.word	0x50001c00

08004438 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443a:	b0d9      	sub	sp, #356	@ 0x164
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	0008      	movs	r0, r1
 8004442:	0011      	movs	r1, r2
 8004444:	4ba4      	ldr	r3, [pc, #656]	@ (80046d8 <ParseBuffer+0x2a0>)
 8004446:	24b0      	movs	r4, #176	@ 0xb0
 8004448:	0064      	lsls	r4, r4, #1
 800444a:	191b      	adds	r3, r3, r4
 800444c:	19db      	adds	r3, r3, r7
 800444e:	1c02      	adds	r2, r0, #0
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	4ba2      	ldr	r3, [pc, #648]	@ (80046dc <ParseBuffer+0x2a4>)
 8004454:	191b      	adds	r3, r3, r4
 8004456:	19db      	adds	r3, r3, r7
 8004458:	1c0a      	adds	r2, r1, #0
 800445a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800445c:	2380      	movs	r3, #128	@ 0x80
 800445e:	005a      	lsls	r2, r3, #1
 8004460:	2348      	movs	r3, #72	@ 0x48
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	2100      	movs	r1, #0
 8004466:	0018      	movs	r0, r3
 8004468:	f01c f8dc 	bl	8020624 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800446c:	2360      	movs	r3, #96	@ 0x60
 800446e:	33ff      	adds	r3, #255	@ 0xff
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	2203      	movs	r2, #3
 8004474:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004476:	23ae      	movs	r3, #174	@ 0xae
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	2200      	movs	r2, #0
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	e013      	b.n	80044aa <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004482:	20ae      	movs	r0, #174	@ 0xae
 8004484:	0040      	lsls	r0, r0, #1
 8004486:	183b      	adds	r3, r7, r0
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	18d2      	adds	r2, r2, r3
 800448e:	183b      	adds	r3, r7, r0
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	7811      	ldrb	r1, [r2, #0]
 8004494:	4a92      	ldr	r2, [pc, #584]	@ (80046e0 <ParseBuffer+0x2a8>)
 8004496:	24b0      	movs	r4, #176	@ 0xb0
 8004498:	0064      	lsls	r4, r4, #1
 800449a:	1912      	adds	r2, r2, r4
 800449c:	19d2      	adds	r2, r2, r7
 800449e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80044a0:	183b      	adds	r3, r7, r0
 80044a2:	881a      	ldrh	r2, [r3, #0]
 80044a4:	183b      	adds	r3, r7, r0
 80044a6:	3201      	adds	r2, #1
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	23ae      	movs	r3, #174	@ 0xae
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	18fa      	adds	r2, r7, r3
 80044b0:	4b89      	ldr	r3, [pc, #548]	@ (80046d8 <ParseBuffer+0x2a0>)
 80044b2:	21b0      	movs	r1, #176	@ 0xb0
 80044b4:	0049      	lsls	r1, r1, #1
 80044b6:	185b      	adds	r3, r3, r1
 80044b8:	19db      	adds	r3, r3, r7
 80044ba:	8812      	ldrh	r2, [r2, #0]
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d3df      	bcc.n	8004482 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80044c2:	4b85      	ldr	r3, [pc, #532]	@ (80046d8 <ParseBuffer+0x2a0>)
 80044c4:	185b      	adds	r3, r3, r1
 80044c6:	19db      	adds	r3, r3, r7
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	4a85      	ldr	r2, [pc, #532]	@ (80046e0 <ParseBuffer+0x2a8>)
 80044cc:	1852      	adds	r2, r2, r1
 80044ce:	19d2      	adds	r2, r2, r7
 80044d0:	2100      	movs	r1, #0
 80044d2:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80044d4:	f00a fa84 	bl	800e9e0 <GetVerboseLevel>
 80044d8:	0003      	movs	r3, r0
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d106      	bne.n	80044ec <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 80044de:	2348      	movs	r3, #72	@ 0x48
 80044e0:	18fa      	adds	r2, r7, r3
 80044e2:	4b80      	ldr	r3, [pc, #512]	@ (80046e4 <ParseBuffer+0x2ac>)
 80044e4:	0011      	movs	r1, r2
 80044e6:	0018      	movs	r0, r3
 80044e8:	f01b fee8 	bl	80202bc <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	26ac      	movs	r6, #172	@ 0xac
 80044f0:	0076      	lsls	r6, r6, #1
 80044f2:	19ba      	adds	r2, r7, r6
 80044f4:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80044f6:	4b7c      	ldr	r3, [pc, #496]	@ (80046e8 <ParseBuffer+0x2b0>)
 80044f8:	25b0      	movs	r5, #176	@ 0xb0
 80044fa:	006d      	lsls	r5, r5, #1
 80044fc:	195b      	adds	r3, r3, r5
 80044fe:	19db      	adds	r3, r3, r7
 8004500:	4a7a      	ldr	r2, [pc, #488]	@ (80046ec <ParseBuffer+0x2b4>)
 8004502:	8811      	ldrh	r1, [r2, #0]
 8004504:	8019      	strh	r1, [r3, #0]
 8004506:	7892      	ldrb	r2, [r2, #2]
 8004508:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 800450a:	4b79      	ldr	r3, [pc, #484]	@ (80046f0 <ParseBuffer+0x2b8>)
 800450c:	195b      	adds	r3, r3, r5
 800450e:	19db      	adds	r3, r3, r7
 8004510:	4a78      	ldr	r2, [pc, #480]	@ (80046f4 <ParseBuffer+0x2bc>)
 8004512:	6811      	ldr	r1, [r2, #0]
 8004514:	6019      	str	r1, [r3, #0]
 8004516:	8892      	ldrh	r2, [r2, #4]
 8004518:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 800451a:	4b77      	ldr	r3, [pc, #476]	@ (80046f8 <ParseBuffer+0x2c0>)
 800451c:	195b      	adds	r3, r3, r5
 800451e:	19db      	adds	r3, r3, r7
 8004520:	4a76      	ldr	r2, [pc, #472]	@ (80046fc <ParseBuffer+0x2c4>)
 8004522:	6811      	ldr	r1, [r2, #0]
 8004524:	6019      	str	r1, [r3, #0]
 8004526:	7912      	ldrb	r2, [r2, #4]
 8004528:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800452a:	4b75      	ldr	r3, [pc, #468]	@ (8004700 <ParseBuffer+0x2c8>)
 800452c:	195b      	adds	r3, r3, r5
 800452e:	19db      	adds	r3, r3, r7
 8004530:	4a74      	ldr	r2, [pc, #464]	@ (8004704 <ParseBuffer+0x2cc>)
 8004532:	6811      	ldr	r1, [r2, #0]
 8004534:	6019      	str	r1, [r3, #0]
 8004536:	8892      	ldrh	r2, [r2, #4]
 8004538:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800453a:	4b73      	ldr	r3, [pc, #460]	@ (8004708 <ParseBuffer+0x2d0>)
 800453c:	195b      	adds	r3, r3, r5
 800453e:	19db      	adds	r3, r3, r7
 8004540:	223e      	movs	r2, #62	@ 0x3e
 8004542:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004544:	4b71      	ldr	r3, [pc, #452]	@ (800470c <ParseBuffer+0x2d4>)
 8004546:	195b      	adds	r3, r3, r5
 8004548:	19db      	adds	r3, r3, r7
 800454a:	4a71      	ldr	r2, [pc, #452]	@ (8004710 <ParseBuffer+0x2d8>)
 800454c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800454e:	c313      	stmia	r3!, {r0, r1, r4}
 8004550:	8811      	ldrh	r1, [r2, #0]
 8004552:	8019      	strh	r1, [r3, #0]
 8004554:	7892      	ldrb	r2, [r2, #2]
 8004556:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004558:	4b6e      	ldr	r3, [pc, #440]	@ (8004714 <ParseBuffer+0x2dc>)
 800455a:	195b      	adds	r3, r3, r5
 800455c:	19db      	adds	r3, r3, r7
 800455e:	4a6e      	ldr	r2, [pc, #440]	@ (8004718 <ParseBuffer+0x2e0>)
 8004560:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004562:	c313      	stmia	r3!, {r0, r1, r4}
 8004564:	8812      	ldrh	r2, [r2, #0]
 8004566:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004568:	4b5c      	ldr	r3, [pc, #368]	@ (80046dc <ParseBuffer+0x2a4>)
 800456a:	195b      	adds	r3, r3, r5
 800456c:	19db      	adds	r3, r3, r7
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8004574:	2344      	movs	r3, #68	@ 0x44
 8004576:	18fa      	adds	r2, r7, r3
 8004578:	2348      	movs	r3, #72	@ 0x48
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	0011      	movs	r1, r2
 800457e:	0018      	movs	r0, r3
 8004580:	f01c f88b 	bl	802069a <strstr>
 8004584:	0003      	movs	r3, r0
 8004586:	19ba      	adds	r2, r7, r6
 8004588:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 800458a:	4b54      	ldr	r3, [pc, #336]	@ (80046dc <ParseBuffer+0x2a4>)
 800458c:	22b0      	movs	r2, #176	@ 0xb0
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	189b      	adds	r3, r3, r2
 8004592:	19db      	adds	r3, r3, r7
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d10c      	bne.n	80045b4 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 800459a:	232c      	movs	r3, #44	@ 0x2c
 800459c:	18fa      	adds	r2, r7, r3
 800459e:	2348      	movs	r3, #72	@ 0x48
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	0011      	movs	r1, r2
 80045a4:	0018      	movs	r0, r3
 80045a6:	f01c f878 	bl	802069a <strstr>
 80045aa:	0003      	movs	r3, r0
 80045ac:	22ac      	movs	r2, #172	@ 0xac
 80045ae:	0052      	lsls	r2, r2, #1
 80045b0:	18ba      	adds	r2, r7, r2
 80045b2:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80045b4:	4b49      	ldr	r3, [pc, #292]	@ (80046dc <ParseBuffer+0x2a4>)
 80045b6:	22b0      	movs	r2, #176	@ 0xb0
 80045b8:	0052      	lsls	r2, r2, #1
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	19db      	adds	r3, r3, r7
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d10c      	bne.n	80045de <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80045c4:	2328      	movs	r3, #40	@ 0x28
 80045c6:	18fa      	adds	r2, r7, r3
 80045c8:	2348      	movs	r3, #72	@ 0x48
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	0011      	movs	r1, r2
 80045ce:	0018      	movs	r0, r3
 80045d0:	f01c f863 	bl	802069a <strstr>
 80045d4:	0003      	movs	r3, r0
 80045d6:	22ac      	movs	r2, #172	@ 0xac
 80045d8:	0052      	lsls	r2, r2, #1
 80045da:	18ba      	adds	r2, r7, r2
 80045dc:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80045de:	4b3f      	ldr	r3, [pc, #252]	@ (80046dc <ParseBuffer+0x2a4>)
 80045e0:	22b0      	movs	r2, #176	@ 0xb0
 80045e2:	0052      	lsls	r2, r2, #1
 80045e4:	189b      	adds	r3, r3, r2
 80045e6:	19db      	adds	r3, r3, r7
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d10c      	bne.n	8004608 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 80045ee:	2308      	movs	r3, #8
 80045f0:	18fa      	adds	r2, r7, r3
 80045f2:	2348      	movs	r3, #72	@ 0x48
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	0011      	movs	r1, r2
 80045f8:	0018      	movs	r0, r3
 80045fa:	f01c f84e 	bl	802069a <strstr>
 80045fe:	0003      	movs	r3, r0
 8004600:	22ac      	movs	r2, #172	@ 0xac
 8004602:	0052      	lsls	r2, r2, #1
 8004604:	18ba      	adds	r2, r7, r2
 8004606:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004608:	233c      	movs	r3, #60	@ 0x3c
 800460a:	18fa      	adds	r2, r7, r3
 800460c:	2448      	movs	r4, #72	@ 0x48
 800460e:	193b      	adds	r3, r7, r4
 8004610:	0011      	movs	r1, r2
 8004612:	0018      	movs	r0, r3
 8004614:	f01c f841 	bl	802069a <strstr>
 8004618:	0003      	movs	r3, r0
 800461a:	22aa      	movs	r2, #170	@ 0xaa
 800461c:	0052      	lsls	r2, r2, #1
 800461e:	18ba      	adds	r2, r7, r2
 8004620:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004622:	2318      	movs	r3, #24
 8004624:	18fa      	adds	r2, r7, r3
 8004626:	193b      	adds	r3, r7, r4
 8004628:	0011      	movs	r1, r2
 800462a:	0018      	movs	r0, r3
 800462c:	f01c f835 	bl	802069a <strstr>
 8004630:	0003      	movs	r3, r0
 8004632:	22a8      	movs	r2, #168	@ 0xa8
 8004634:	0052      	lsls	r2, r2, #1
 8004636:	18ba      	adds	r2, r7, r2
 8004638:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 800463a:	4a38      	ldr	r2, [pc, #224]	@ (800471c <ParseBuffer+0x2e4>)
 800463c:	193b      	adds	r3, r7, r4
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f01c f82a 	bl	802069a <strstr>
 8004646:	0003      	movs	r3, r0
 8004648:	22a6      	movs	r2, #166	@ 0xa6
 800464a:	0052      	lsls	r2, r2, #1
 800464c:	18ba      	adds	r2, r7, r2
 800464e:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004650:	2334      	movs	r3, #52	@ 0x34
 8004652:	18fa      	adds	r2, r7, r3
 8004654:	193b      	adds	r3, r7, r4
 8004656:	0011      	movs	r1, r2
 8004658:	0018      	movs	r0, r3
 800465a:	f01c f81e 	bl	802069a <strstr>
 800465e:	0003      	movs	r3, r0
 8004660:	22a4      	movs	r2, #164	@ 0xa4
 8004662:	0052      	lsls	r2, r2, #1
 8004664:	18ba      	adds	r2, r7, r2
 8004666:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004668:	4b1b      	ldr	r3, [pc, #108]	@ (80046d8 <ParseBuffer+0x2a0>)
 800466a:	21b0      	movs	r1, #176	@ 0xb0
 800466c:	0049      	lsls	r1, r1, #1
 800466e:	185b      	adds	r3, r3, r1
 8004670:	19db      	adds	r3, r3, r7
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d800      	bhi.n	800467a <ParseBuffer+0x242>
 8004678:	e0bf      	b.n	80047fa <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 800467a:	22ac      	movs	r2, #172	@ 0xac
 800467c:	0052      	lsls	r2, r2, #1
 800467e:	18bb      	adds	r3, r7, r2
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d052      	beq.n	800472c <ParseBuffer+0x2f4>
 8004686:	18bb      	adds	r3, r7, r2
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b4f      	cmp	r3, #79	@ 0x4f
 800468e:	d14d      	bne.n	800472c <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004690:	2360      	movs	r3, #96	@ 0x60
 8004692:	33ff      	adds	r3, #255	@ 0xff
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 800469a:	4b21      	ldr	r3, [pc, #132]	@ (8004720 <ParseBuffer+0x2e8>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b12      	cmp	r3, #18
 80046a0:	d144      	bne.n	800472c <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <ParseBuffer+0x2a0>)
 80046a4:	185b      	adds	r3, r3, r1
 80046a6:	19db      	adds	r3, r3, r7
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	2b2b      	cmp	r3, #43	@ 0x2b
 80046ac:	d10b      	bne.n	80046c6 <ParseBuffer+0x28e>
 80046ae:	4b0c      	ldr	r3, [pc, #48]	@ (80046e0 <ParseBuffer+0x2a8>)
 80046b0:	185b      	adds	r3, r3, r1
 80046b2:	19db      	adds	r3, r3, r7
 80046b4:	2221      	movs	r2, #33	@ 0x21
 80046b6:	5c9b      	ldrb	r3, [r3, r2]
 80046b8:	2b32      	cmp	r3, #50	@ 0x32
 80046ba:	d104      	bne.n	80046c6 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80046bc:	193b      	adds	r3, r7, r4
 80046be:	0018      	movs	r0, r3
 80046c0:	f002 f92e 	bl	8006920 <ParseTime>
 80046c4:	e032      	b.n	800472c <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 80046c6:	4a17      	ldr	r2, [pc, #92]	@ (8004724 <ParseBuffer+0x2ec>)
 80046c8:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <ParseBuffer+0x2f0>)
 80046ca:	0019      	movs	r1, r3
 80046cc:	2001      	movs	r0, #1
 80046ce:	f00a f90d 	bl	800e8ec <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80046d2:	2306      	movs	r3, #6
 80046d4:	e095      	b.n	8004802 <ParseBuffer+0x3ca>
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	fffffea2 	.word	0xfffffea2
 80046dc:	fffffea1 	.word	0xfffffea1
 80046e0:	fffffee8 	.word	0xfffffee8
 80046e4:	08023ca4 	.word	0x08023ca4
 80046e8:	fffffee4 	.word	0xfffffee4
 80046ec:	08023cd0 	.word	0x08023cd0
 80046f0:	fffffedc 	.word	0xfffffedc
 80046f4:	08023cd4 	.word	0x08023cd4
 80046f8:	fffffed4 	.word	0xfffffed4
 80046fc:	08023cdc 	.word	0x08023cdc
 8004700:	fffffecc 	.word	0xfffffecc
 8004704:	08023ce4 	.word	0x08023ce4
 8004708:	fffffec8 	.word	0xfffffec8
 800470c:	fffffeb8 	.word	0xfffffeb8
 8004710:	08023cec 	.word	0x08023cec
 8004714:	fffffea8 	.word	0xfffffea8
 8004718:	08023cfc 	.word	0x08023cfc
 800471c:	08025944 	.word	0x08025944
 8004720:	2000061e 	.word	0x2000061e
 8004724:	08023cbc 	.word	0x08023cbc
 8004728:	080235bc 	.word	0x080235bc
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800472c:	22ac      	movs	r2, #172	@ 0xac
 800472e:	0052      	lsls	r2, r2, #1
 8004730:	18bb      	adds	r3, r7, r2
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <ParseBuffer+0x314>
 8004738:	18bb      	adds	r3, r7, r2
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b72      	cmp	r3, #114	@ 0x72
 8004740:	d104      	bne.n	800474c <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 8004742:	2360      	movs	r3, #96	@ 0x60
 8004744:	33ff      	adds	r3, #255	@ 0xff
 8004746:	18fb      	adds	r3, r7, r3
 8004748:	2202      	movs	r2, #2
 800474a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 800474c:	22ac      	movs	r2, #172	@ 0xac
 800474e:	0052      	lsls	r2, r2, #1
 8004750:	18bb      	adds	r3, r7, r2
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d009      	beq.n	800476c <ParseBuffer+0x334>
 8004758:	18bb      	adds	r3, r7, r2
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004760:	d104      	bne.n	800476c <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 8004762:	2360      	movs	r3, #96	@ 0x60
 8004764:	33ff      	adds	r3, #255	@ 0xff
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2205      	movs	r2, #5
 800476a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 800476c:	22ac      	movs	r2, #172	@ 0xac
 800476e:	0052      	lsls	r2, r2, #1
 8004770:	18bb      	adds	r3, r7, r2
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <ParseBuffer+0x354>
 8004778:	18bb      	adds	r3, r7, r2
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004780:	d104      	bne.n	800478c <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 8004782:	2360      	movs	r3, #96	@ 0x60
 8004784:	33ff      	adds	r3, #255	@ 0xff
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	220b      	movs	r2, #11
 800478a:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 800478c:	22aa      	movs	r2, #170	@ 0xaa
 800478e:	0052      	lsls	r2, r2, #1
 8004790:	18bb      	adds	r3, r7, r2
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <ParseBuffer+0x36a>
 8004798:	18bb      	adds	r3, r7, r2
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b45      	cmp	r3, #69	@ 0x45
 80047a0:	d00a      	beq.n	80047b8 <ParseBuffer+0x380>
 80047a2:	22a4      	movs	r2, #164	@ 0xa4
 80047a4:	0052      	lsls	r2, r2, #1
 80047a6:	18bb      	adds	r3, r7, r2
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <ParseBuffer+0x38a>
 80047ae:	18bb      	adds	r3, r7, r2
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b46      	cmp	r3, #70	@ 0x46
 80047b6:	d104      	bne.n	80047c2 <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 80047b8:	2360      	movs	r3, #96	@ 0x60
 80047ba:	33ff      	adds	r3, #255	@ 0xff
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80047c2:	22a8      	movs	r2, #168	@ 0xa8
 80047c4:	0052      	lsls	r2, r2, #1
 80047c6:	18bb      	adds	r3, r7, r2
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <ParseBuffer+0x3a6>
 80047ce:	18bb      	adds	r3, r7, r2
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b57      	cmp	r3, #87	@ 0x57
 80047d6:	d102      	bne.n	80047de <ParseBuffer+0x3a6>
      ConnectionMade = true;
 80047d8:	4b0c      	ldr	r3, [pc, #48]	@ (800480c <ParseBuffer+0x3d4>)
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80047de:	22a6      	movs	r2, #166	@ 0xa6
 80047e0:	0052      	lsls	r2, r2, #1
 80047e2:	18bb      	adds	r3, r7, r2
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <ParseBuffer+0x3c2>
 80047ea:	18bb      	adds	r3, r7, r2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b32      	cmp	r3, #50	@ 0x32
 80047f2:	d102      	bne.n	80047fa <ParseBuffer+0x3c2>
      beurs = true;
 80047f4:	4b06      	ldr	r3, [pc, #24]	@ (8004810 <ParseBuffer+0x3d8>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80047fa:	2360      	movs	r3, #96	@ 0x60
 80047fc:	33ff      	adds	r3, #255	@ 0xff
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	781b      	ldrb	r3, [r3, #0]

}
 8004802:	0018      	movs	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	b059      	add	sp, #356	@ 0x164
 8004808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800480a:	46c0      	nop			@ (mov r8, r8)
 800480c:	20000550 	.word	0x20000550
 8004810:	20000552 	.word	0x20000552

08004814 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800481a:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <PollAwake+0x34>)
 800481c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f7fb fca3 	bl	800016c <strlen>
 8004826:	0003      	movs	r3, r0
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0011      	movs	r1, r2
 800482e:	0018      	movs	r0, r3
 8004830:	f7ff f8e2 	bl	80039f8 <ESP_Send>
 8004834:	1e03      	subs	r3, r0, #0
 8004836:	d001      	beq.n	800483c <PollAwake+0x28>
    return true;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <PollAwake+0x2a>
  }
  else{
    return false;
 800483c:	2300      	movs	r3, #0
  }
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b002      	add	sp, #8
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	08023d0c 	.word	0x08023d0c

0800484c <RFPower>:

bool RFPower(){
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <RFPower+0x34>)
 8004854:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f7fb fc87 	bl	800016c <strlen>
 800485e:	0003      	movs	r3, r0
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0011      	movs	r1, r2
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff f8c6 	bl	80039f8 <ESP_Send>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d001      	beq.n	8004874 <RFPower+0x28>
    return true;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <RFPower+0x2a>
  }
  else{
    return false;
 8004874:	2300      	movs	r3, #0
  }
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	08023d14 	.word	0x08023d14

08004884 <CheckRFPower>:

bool CheckRFPower(){
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <CheckRFPower+0x34>)
 800488c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0018      	movs	r0, r3
 8004892:	f7fb fc6b 	bl	800016c <strlen>
 8004896:	0003      	movs	r3, r0
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0011      	movs	r1, r2
 800489e:	0018      	movs	r0, r3
 80048a0:	f7ff f8aa 	bl	80039f8 <ESP_Send>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d001      	beq.n	80048ac <CheckRFPower+0x28>
    return true;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <CheckRFPower+0x2a>
  }
  else{
    return false;
 80048ac:	2300      	movs	r3, #0
  }
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b002      	add	sp, #8
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	08023d24 	.word	0x08023d24

080048bc <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80048c2:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <ATRestore+0x34>)
 80048c4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7fb fc4f 	bl	800016c <strlen>
 80048ce:	0003      	movs	r3, r0
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0011      	movs	r1, r2
 80048d6:	0018      	movs	r0, r3
 80048d8:	f7ff f88e 	bl	80039f8 <ESP_Send>
 80048dc:	1e03      	subs	r3, r0, #0
 80048de:	d001      	beq.n	80048e4 <ATRestore+0x28>
    return true;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <ATRestore+0x2a>
  }
  else{
    return false;
 80048e4:	2300      	movs	r3, #0
  }
}
 80048e6:	0018      	movs	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b002      	add	sp, #8
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	08023d34 	.word	0x08023d34

080048f4 <CWINIT>:

bool CWINIT(){
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80048fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <CWINIT+0x34>)
 80048fc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	0018      	movs	r0, r3
 8004902:	f7fb fc33 	bl	800016c <strlen>
 8004906:	0003      	movs	r3, r0
 8004908:	b29a      	uxth	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	0011      	movs	r1, r2
 800490e:	0018      	movs	r0, r3
 8004910:	f7ff f872 	bl	80039f8 <ESP_Send>
 8004914:	1e03      	subs	r3, r0, #0
 8004916:	d001      	beq.n	800491c <CWINIT+0x28>
    return true;
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <CWINIT+0x2a>
  }
  else{
    return false;
 800491c:	2300      	movs	r3, #0
  }
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b002      	add	sp, #8
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	08023d44 	.word	0x08023d44

0800492c <CWMODE1>:

bool CWMODE1(){
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004932:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <CWMODE1+0x34>)
 8004934:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f7fb fc17 	bl	800016c <strlen>
 800493e:	0003      	movs	r3, r0
 8004940:	b29a      	uxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0011      	movs	r1, r2
 8004946:	0018      	movs	r0, r3
 8004948:	f7ff f856 	bl	80039f8 <ESP_Send>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d001      	beq.n	8004954 <CWMODE1+0x28>
    return true;
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004954:	2300      	movs	r3, #0
  }
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b002      	add	sp, #8
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	08023d54 	.word	0x08023d54

08004964 <CWMODE2>:

bool CWMODE2(){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <CWMODE2+0x34>)
 800496c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0018      	movs	r0, r3
 8004972:	f7fb fbfb 	bl	800016c <strlen>
 8004976:	0003      	movs	r3, r0
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0011      	movs	r1, r2
 800497e:	0018      	movs	r0, r3
 8004980:	f7ff f83a 	bl	80039f8 <ESP_Send>
 8004984:	1e03      	subs	r3, r0, #0
 8004986:	d001      	beq.n	800498c <CWMODE2+0x28>
    return true;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <CWMODE2+0x2a>
  }
  else{
    return false;
 800498c:	2300      	movs	r3, #0
  }
}
 800498e:	0018      	movs	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	b002      	add	sp, #8
 8004994:	bd80      	pop	{r7, pc}
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	08023d64 	.word	0x08023d64

0800499c <CWAUTOCONN>:

bool CWAUTOCONN(){
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80049a2:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <CWAUTOCONN+0x34>)
 80049a4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7fb fbdf 	bl	800016c <strlen>
 80049ae:	0003      	movs	r3, r0
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	0011      	movs	r1, r2
 80049b6:	0018      	movs	r0, r3
 80049b8:	f7ff f81e 	bl	80039f8 <ESP_Send>
 80049bc:	1e03      	subs	r3, r0, #0
 80049be:	d001      	beq.n	80049c4 <CWAUTOCONN+0x28>
    return true;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80049c4:	2300      	movs	r3, #0
  }
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b002      	add	sp, #8
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	08023d74 	.word	0x08023d74

080049d4 <CWJAP>:

bool CWJAP(){
 80049d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d6:	46c6      	mov	lr, r8
 80049d8:	b500      	push	{lr}
 80049da:	b0a2      	sub	sp, #136	@ 0x88
 80049dc:	af00      	add	r7, sp, #0
 80049de:	466b      	mov	r3, sp
 80049e0:	4698      	mov	r8, r3
  beursTest = true;
 80049e2:	4b39      	ldr	r3, [pc, #228]	@ (8004ac8 <CWJAP+0xf4>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80049e8:	2618      	movs	r6, #24
 80049ea:	19bb      	adds	r3, r7, r6
 80049ec:	2264      	movs	r2, #100	@ 0x64
 80049ee:	2100      	movs	r1, #0
 80049f0:	0018      	movs	r0, r3
 80049f2:	f01b fe17 	bl	8020624 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80049f6:	4b35      	ldr	r3, [pc, #212]	@ (8004acc <CWJAP+0xf8>)
 80049f8:	4a35      	ldr	r2, [pc, #212]	@ (8004ad0 <CWJAP+0xfc>)
 80049fa:	4936      	ldr	r1, [pc, #216]	@ (8004ad4 <CWJAP+0x100>)
 80049fc:	19b8      	adds	r0, r7, r6
 80049fe:	f01b fccd 	bl	802039c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004a02:	19bb      	adds	r3, r7, r6
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7fb fbb1 	bl	800016c <strlen>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	216f      	movs	r1, #111	@ 0x6f
 8004a0e:	0030      	movs	r0, r6
 8004a10:	180b      	adds	r3, r1, r0
 8004a12:	19db      	adds	r3, r3, r7
 8004a14:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004a16:	180b      	adds	r3, r1, r0
 8004a18:	19db      	adds	r3, r3, r7
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	1e5a      	subs	r2, r3, #1
 8004a20:	2180      	movs	r1, #128	@ 0x80
 8004a22:	1879      	adds	r1, r7, r1
 8004a24:	600a      	str	r2, [r1, #0]
 8004a26:	001a      	movs	r2, r3
 8004a28:	60ba      	str	r2, [r7, #8]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	60fa      	str	r2, [r7, #12]
 8004a2e:	68b8      	ldr	r0, [r7, #8]
 8004a30:	68f9      	ldr	r1, [r7, #12]
 8004a32:	0002      	movs	r2, r0
 8004a34:	0f52      	lsrs	r2, r2, #29
 8004a36:	000e      	movs	r6, r1
 8004a38:	00f6      	lsls	r6, r6, #3
 8004a3a:	617e      	str	r6, [r7, #20]
 8004a3c:	697e      	ldr	r6, [r7, #20]
 8004a3e:	4316      	orrs	r6, r2
 8004a40:	617e      	str	r6, [r7, #20]
 8004a42:	0002      	movs	r2, r0
 8004a44:	00d2      	lsls	r2, r2, #3
 8004a46:	613a      	str	r2, [r7, #16]
 8004a48:	001a      	movs	r2, r3
 8004a4a:	603a      	str	r2, [r7, #0]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	6838      	ldr	r0, [r7, #0]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	0002      	movs	r2, r0
 8004a56:	0f52      	lsrs	r2, r2, #29
 8004a58:	000e      	movs	r6, r1
 8004a5a:	00f5      	lsls	r5, r6, #3
 8004a5c:	4315      	orrs	r5, r2
 8004a5e:	0002      	movs	r2, r0
 8004a60:	00d4      	lsls	r4, r2, #3
 8004a62:	3307      	adds	r3, #7
 8004a64:	08db      	lsrs	r3, r3, #3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	466a      	mov	r2, sp
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	469d      	mov	sp, r3
 8004a6e:	466b      	mov	r3, sp
 8004a70:	3300      	adds	r3, #0
 8004a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004a74:	246f      	movs	r4, #111	@ 0x6f
 8004a76:	2518      	movs	r5, #24
 8004a78:	1963      	adds	r3, r4, r5
 8004a7a:	19db      	adds	r3, r3, r7
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	001a      	movs	r2, r3
 8004a82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a84:	2100      	movs	r1, #0
 8004a86:	0018      	movs	r0, r3
 8004a88:	f01b fdcc 	bl	8020624 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004a8c:	1963      	adds	r3, r4, r5
 8004a8e:	19db      	adds	r3, r3, r7
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	1979      	adds	r1, r7, r5
 8004a94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a96:	0018      	movs	r0, r3
 8004a98:	f01b fdeb 	bl	8020672 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004a9c:	1963      	adds	r3, r4, r5
 8004a9e:	19db      	adds	r3, r3, r7
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aa6:	0011      	movs	r1, r2
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7fe ffa5 	bl	80039f8 <ESP_Send>
 8004aae:	1e03      	subs	r3, r0, #0
 8004ab0:	d001      	beq.n	8004ab6 <CWJAP+0xe2>
    return true;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <CWJAP+0xe4>
  }
  else{
    return false;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	46c5      	mov	sp, r8
  }
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b022      	add	sp, #136	@ 0x88
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	46b8      	mov	r8, r7
 8004ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	20000551 	.word	0x20000551
 8004acc:	08025950 	.word	0x08025950
 8004ad0:	08025944 	.word	0x08025944
 8004ad4:	08023d88 	.word	0x08023d88

08004ad8 <CWMODE3>:

bool CWMODE3(){
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004ade:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <CWMODE3+0x34>)
 8004ae0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7fb fb41 	bl	800016c <strlen>
 8004aea:	0003      	movs	r3, r0
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0011      	movs	r1, r2
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fe ff80 	bl	80039f8 <ESP_Send>
 8004af8:	1e03      	subs	r3, r0, #0
 8004afa:	d001      	beq.n	8004b00 <CWMODE3+0x28>
    return true;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004b00:	2300      	movs	r3, #0
  }
}
 8004b02:	0018      	movs	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b002      	add	sp, #8
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	08023da0 	.word	0x08023da0

08004b10 <CWSTATE>:

bool CWSTATE(){
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004b16:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <CWSTATE+0x34>)
 8004b18:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7fb fb25 	bl	800016c <strlen>
 8004b22:	0003      	movs	r3, r0
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	0011      	movs	r1, r2
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7fe ff64 	bl	80039f8 <ESP_Send>
 8004b30:	1e03      	subs	r3, r0, #0
 8004b32:	d001      	beq.n	8004b38 <CWSTATE+0x28>
    return true;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004b38:	2300      	movs	r3, #0
  }
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b002      	add	sp, #8
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	08023db0 	.word	0x08023db0

08004b48 <CWSAP>:

bool CWSAP(){
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <CWSAP+0x34>)
 8004b50:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7fb fb09 	bl	800016c <strlen>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0011      	movs	r1, r2
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7fe ff48 	bl	80039f8 <ESP_Send>
 8004b68:	1e03      	subs	r3, r0, #0
 8004b6a:	d001      	beq.n	8004b70 <CWSAP+0x28>
    return true;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <CWSAP+0x2a>
  }
  else{
    return false;
 8004b70:	2300      	movs	r3, #0
  }
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b002      	add	sp, #8
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	08023dc0 	.word	0x08023dc0

08004b80 <CIPMUX>:

bool CIPMUX(){
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004b86:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <CIPMUX+0x34>)
 8004b88:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fb faed 	bl	800016c <strlen>
 8004b92:	0003      	movs	r3, r0
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	0011      	movs	r1, r2
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fe ff2c 	bl	80039f8 <ESP_Send>
 8004ba0:	1e03      	subs	r3, r0, #0
 8004ba2:	d001      	beq.n	8004ba8 <CIPMUX+0x28>
    return true;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <CIPMUX+0x2a>
  }
  else{
    return false;
 8004ba8:	2300      	movs	r3, #0
  }
}
 8004baa:	0018      	movs	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b002      	add	sp, #8
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	08023de4 	.word	0x08023de4

08004bb8 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <WEBSERVER+0x34>)
 8004bc0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f7fb fad1 	bl	800016c <strlen>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	0011      	movs	r1, r2
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f7fe ff10 	bl	80039f8 <ESP_Send>
 8004bd8:	1e03      	subs	r3, r0, #0
 8004bda:	d001      	beq.n	8004be0 <WEBSERVER+0x28>
    return true;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004be0:	2300      	movs	r3, #0
  }
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	08023df4 	.word	0x08023df4

08004bf0 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8004bf6:	1cfb      	adds	r3, r7, #3
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8004bfc:	4b26      	ldr	r3, [pc, #152]	@ (8004c98 <HTTPCPOST+0xa8>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	1dbc      	adds	r4, r7, #6
 8004c02:	1cf9      	adds	r1, r7, #3
 8004c04:	2200      	movs	r2, #0
 8004c06:	0018      	movs	r0, r3
 8004c08:	f7ff f88e 	bl	8003d28 <CreateMessage>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004c10:	4b21      	ldr	r3, [pc, #132]	@ (8004c98 <HTTPCPOST+0xa8>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004c18:	1dbb      	adds	r3, r7, #6
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004c9c <HTTPCPOST+0xac>)
 8004c1e:	4920      	ldr	r1, [pc, #128]	@ (8004ca0 <HTTPCPOST+0xb0>)
 8004c20:	4820      	ldr	r0, [pc, #128]	@ (8004ca4 <HTTPCPOST+0xb4>)
 8004c22:	f01b fbbb 	bl	802039c <siprintf>
 8004c26:	e015      	b.n	8004c54 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004c28:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca8 <HTTPCPOST+0xb8>)
 8004c2a:	4820      	ldr	r0, [pc, #128]	@ (8004cac <HTTPCPOST+0xbc>)
 8004c2c:	220c      	movs	r2, #12
 8004c2e:	0019      	movs	r1, r3
 8004c30:	f002 fc5a 	bl	80074e8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004c34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca8 <HTTPCPOST+0xb8>)
 8004c36:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb0 <HTTPCPOST+0xc0>)
 8004c38:	0011      	movs	r1, r2
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7ff f850 	bl	8003ce0 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004c40:	1dbb      	adds	r3, r7, #6
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	4c1a      	ldr	r4, [pc, #104]	@ (8004cb0 <HTTPCPOST+0xc0>)
 8004c46:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb4 <HTTPCPOST+0xc4>)
 8004c48:	491b      	ldr	r1, [pc, #108]	@ (8004cb8 <HTTPCPOST+0xc8>)
 8004c4a:	4816      	ldr	r0, [pc, #88]	@ (8004ca4 <HTTPCPOST+0xb4>)
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	0023      	movs	r3, r4
 8004c50:	f01b fba4 	bl	802039c <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8004c54:	4b13      	ldr	r3, [pc, #76]	@ (8004ca4 <HTTPCPOST+0xb4>)
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7fb fa88 	bl	800016c <strlen>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	8818      	ldrh	r0, [r3, #0]
 8004c66:	1cfb      	adds	r3, r7, #3
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	4a14      	ldr	r2, [pc, #80]	@ (8004cbc <HTTPCPOST+0xcc>)
 8004c6c:	4914      	ldr	r1, [pc, #80]	@ (8004cc0 <HTTPCPOST+0xd0>)
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	0003      	movs	r3, r0
 8004c72:	2003      	movs	r0, #3
 8004c74:	f009 fe3a 	bl	800e8ec <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8004c78:	1d3b      	adds	r3, r7, #4
 8004c7a:	881a      	ldrh	r2, [r3, #0]
 8004c7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <HTTPCPOST+0xb4>)
 8004c7e:	0011      	movs	r1, r2
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7fe feb9 	bl	80039f8 <ESP_Send>
 8004c86:	1e03      	subs	r3, r0, #0
 8004c88:	d001      	beq.n	8004c8e <HTTPCPOST+0x9e>
    return true;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8004c8e:	2300      	movs	r3, #0
  }
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b003      	add	sp, #12
 8004c96:	bd90      	pop	{r4, r7, pc}
 8004c98:	20000552 	.word	0x20000552
 8004c9c:	0802596c 	.word	0x0802596c
 8004ca0:	08023e0c 	.word	0x08023e0c
 8004ca4:	20000578 	.word	0x20000578
 8004ca8:	2000073c 	.word	0x2000073c
 8004cac:	08080000 	.word	0x08080000
 8004cb0:	20000748 	.word	0x20000748
 8004cb4:	080259a8 	.word	0x080259a8
 8004cb8:	08023e44 	.word	0x08023e44
 8004cbc:	08023e84 	.word	0x08023e84
 8004cc0:	08023598 	.word	0x08023598

08004cc4 <SENDDATA>:

bool SENDDATA(){
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af02      	add	r7, sp, #8
  bool result = false;
 8004cca:	1dfb      	adds	r3, r7, #7
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d0c <SENDDATA+0x48>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	1df9      	adds	r1, r7, #7
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7ff f825 	bl	8003d28 <CreateMessage>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d10 <SENDDATA+0x4c>)
 8004ce4:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8004ce6:	1dfb      	adds	r3, r7, #7
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	0018      	movs	r0, r3
 8004cec:	4b08      	ldr	r3, [pc, #32]	@ (8004d10 <SENDDATA+0x4c>)
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	4a08      	ldr	r2, [pc, #32]	@ (8004d14 <SENDDATA+0x50>)
 8004cf2:	4909      	ldr	r1, [pc, #36]	@ (8004d18 <SENDDATA+0x54>)
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	2003      	movs	r0, #3
 8004cfa:	f009 fdf7 	bl	800e8ec <CreateLine>
  return result;
 8004cfe:	1dfb      	adds	r3, r7, #7
 8004d00:	781b      	ldrb	r3, [r3, #0]
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b002      	add	sp, #8
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	20000552 	.word	0x20000552
 8004d10:	2000056c 	.word	0x2000056c
 8004d14:	08023ee0 	.word	0x08023ee0
 8004d18:	08023598 	.word	0x08023598

08004d1c <SLEEP>:

bool SLEEP(){
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004d22:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <SLEEP+0x34>)
 8004d24:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f7fb fa1f 	bl	800016c <strlen>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	0011      	movs	r1, r2
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7fe fe5e 	bl	80039f8 <ESP_Send>
 8004d3c:	1e03      	subs	r3, r0, #0
 8004d3e:	d001      	beq.n	8004d44 <SLEEP+0x28>
    return true;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <SLEEP+0x2a>
  }
  else{
    return false;
 8004d44:	2300      	movs	r3, #0
  }
}
 8004d46:	0018      	movs	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b002      	add	sp, #8
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			@ (mov r8, r8)
 8004d50:	08023f1c 	.word	0x08023f1c

08004d54 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <CIPSNTPCFG+0x3c>)
 8004d5c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fb fa03 	bl	800016c <strlen>
 8004d66:	0003      	movs	r3, r0
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0011      	movs	r1, r2
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f7fe fe42 	bl	80039f8 <ESP_Send>
 8004d74:	1e03      	subs	r3, r0, #0
 8004d76:	d006      	beq.n	8004d86 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004d78:	23fa      	movs	r3, #250	@ 0xfa
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f00a fa03 	bl	800f188 <HAL_Delay>
    return true;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004d86:	2300      	movs	r3, #0
  }
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	08023f2c 	.word	0x08023f2c

08004d94 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <CIPSNTPTIME+0x34>)
 8004d9c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	0018      	movs	r0, r3
 8004da2:	f7fb f9e3 	bl	800016c <strlen>
 8004da6:	0003      	movs	r3, r0
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0011      	movs	r1, r2
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7fe fe22 	bl	80039f8 <ESP_Send>
 8004db4:	1e03      	subs	r3, r0, #0
 8004db6:	d001      	beq.n	8004dbc <CIPSNTPTIME+0x28>
    return true;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004dbc:	2300      	movs	r3, #0
  }
}
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b002      	add	sp, #8
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	08023f7c 	.word	0x08023f7c

08004dcc <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <CIPSNTPINTV+0x34>)
 8004dd4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7fb f9c7 	bl	800016c <strlen>
 8004dde:	0003      	movs	r3, r0
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	0011      	movs	r1, r2
 8004de6:	0018      	movs	r0, r3
 8004de8:	f7fe fe06 	bl	80039f8 <ESP_Send>
 8004dec:	1e03      	subs	r3, r0, #0
 8004dee:	d001      	beq.n	8004df4 <CIPSNTPINTV+0x28>
    return true;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004df4:	2300      	movs	r3, #0
  }
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b002      	add	sp, #8
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	08023f90 	.word	0x08023f90

08004e04 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004e04:	b5b0      	push	{r4, r5, r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	1dfb      	adds	r3, r7, #7
 8004e0e:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004e10:	4b6c      	ldr	r3, [pc, #432]	@ (8004fc4 <DMA_ProcessBuffer+0x1c0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	200e      	movs	r0, #14
 8004e1a:	183b      	adds	r3, r7, r0
 8004e1c:	2180      	movs	r1, #128	@ 0x80
 8004e1e:	0049      	lsls	r1, r1, #1
 8004e20:	1a8a      	subs	r2, r1, r2
 8004e22:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004e24:	230d      	movs	r3, #13
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	2203      	movs	r2, #3
 8004e2a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004e2c:	183b      	adds	r3, r7, r0
 8004e2e:	881a      	ldrh	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	@ 0x80
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d903      	bls.n	8004e40 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004e38:	183b      	adds	r3, r7, r0
 8004e3a:	2280      	movs	r2, #128	@ 0x80
 8004e3c:	0052      	lsls	r2, r2, #1
 8004e3e:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004e40:	4b61      	ldr	r3, [pc, #388]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	001a      	movs	r2, r3
 8004e48:	230e      	movs	r3, #14
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d131      	bne.n	8004eb6 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004e52:	4b5e      	ldr	r3, [pc, #376]	@ (8004fcc <DMA_ProcessBuffer+0x1c8>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b14      	cmp	r3, #20
 8004e58:	d91b      	bls.n	8004e92 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8004fcc <DMA_ProcessBuffer+0x1c8>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004e60:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd0 <DMA_ProcessBuffer+0x1cc>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d107      	bne.n	8004e78 <DMA_ProcessBuffer+0x74>
 8004e68:	4b5a      	ldr	r3, [pc, #360]	@ (8004fd4 <DMA_ProcessBuffer+0x1d0>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004e70:	230d      	movs	r3, #13
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	2207      	movs	r2, #7
 8004e76:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004e78:	4b55      	ldr	r3, [pc, #340]	@ (8004fd0 <DMA_ProcessBuffer+0x1cc>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d103      	bne.n	8004e88 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004e80:	4b55      	ldr	r3, [pc, #340]	@ (8004fd8 <DMA_ProcessBuffer+0x1d4>)
 8004e82:	220b      	movs	r2, #11
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e016      	b.n	8004eb6 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004e88:	230d      	movs	r3, #13
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	2206      	movs	r2, #6
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e011      	b.n	8004eb6 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004e92:	4b4e      	ldr	r3, [pc, #312]	@ (8004fcc <DMA_ProcessBuffer+0x1c8>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004fcc <DMA_ProcessBuffer+0x1c8>)
 8004e9c:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004e9e:	f00a f969 	bl	800f174 <HAL_GetTick>
 8004ea2:	0003      	movs	r3, r0
 8004ea4:	33f5      	adds	r3, #245	@ 0xf5
 8004ea6:	33ff      	adds	r3, #255	@ 0xff
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8004fdc <DMA_ProcessBuffer+0x1d8>)
 8004eac:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004eae:	230d      	movs	r3, #13
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004eb6:	4b44      	ldr	r3, [pc, #272]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	001a      	movs	r2, r3
 8004ebe:	210e      	movs	r1, #14
 8004ec0:	187b      	adds	r3, r7, r1
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d100      	bne.n	8004eca <DMA_ProcessBuffer+0xc6>
 8004ec8:	e075      	b.n	8004fb6 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004eca:	4b40      	ldr	r3, [pc, #256]	@ (8004fcc <DMA_ProcessBuffer+0x1c8>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004ed0:	4b43      	ldr	r3, [pc, #268]	@ (8004fe0 <DMA_ProcessBuffer+0x1dc>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d109      	bne.n	8004ef4 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004ee0:	187b      	adds	r3, r7, r1
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fe0 <DMA_ProcessBuffer+0x1dc>)
 8004ee8:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004eea:	230d      	movs	r3, #13
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	220a      	movs	r2, #10
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e060      	b.n	8004fb6 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe0 <DMA_ProcessBuffer+0x1dc>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	001a      	movs	r2, r3
 8004efc:	210e      	movs	r1, #14
 8004efe:	187b      	adds	r3, r7, r1
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d009      	beq.n	8004f1a <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004f06:	187b      	adds	r3, r7, r1
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	4b34      	ldr	r3, [pc, #208]	@ (8004fe0 <DMA_ProcessBuffer+0x1dc>)
 8004f0e:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004f10:	230d      	movs	r3, #13
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	220a      	movs	r2, #10
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	e04d      	b.n	8004fb6 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	001a      	movs	r2, r3
 8004f22:	210e      	movs	r1, #14
 8004f24:	187b      	adds	r3, r7, r1
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d917      	bls.n	8004f5c <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004f2c:	4b26      	ldr	r3, [pc, #152]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	001a      	movs	r2, r3
 8004f34:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe4 <DMA_ProcessBuffer+0x1e0>)
 8004f36:	18d0      	adds	r0, r2, r3
 8004f38:	4b23      	ldr	r3, [pc, #140]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	001a      	movs	r2, r3
 8004f40:	187b      	adds	r3, r7, r1
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	b299      	uxth	r1, r3
 8004f48:	230d      	movs	r3, #13
 8004f4a:	18fc      	adds	r4, r7, r3
 8004f4c:	1dfb      	adds	r3, r7, #7
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	001a      	movs	r2, r3
 8004f52:	f7ff fa71 	bl	8004438 <ParseBuffer>
 8004f56:	0003      	movs	r3, r0
 8004f58:	7023      	strb	r3, [r4, #0]
 8004f5a:	e026      	b.n	8004faa <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	001a      	movs	r2, r3
 8004f64:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <DMA_ProcessBuffer+0x1e0>)
 8004f66:	18d0      	adds	r0, r2, r3
 8004f68:	4b17      	ldr	r3, [pc, #92]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	001a      	movs	r2, r3
 8004f70:	2380      	movs	r3, #128	@ 0x80
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	b299      	uxth	r1, r3
 8004f78:	250d      	movs	r5, #13
 8004f7a:	197c      	adds	r4, r7, r5
 8004f7c:	1dfb      	adds	r3, r7, #7
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	001a      	movs	r2, r3
 8004f82:	f7ff fa59 	bl	8004438 <ParseBuffer>
 8004f86:	0003      	movs	r3, r0
 8004f88:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004f8a:	210e      	movs	r1, #14
 8004f8c:	187b      	adds	r3, r7, r1
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004f94:	197c      	adds	r4, r7, r5
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	781a      	ldrb	r2, [r3, #0]
 8004f9a:	187b      	adds	r3, r7, r1
 8004f9c:	8819      	ldrh	r1, [r3, #0]
 8004f9e:	4b11      	ldr	r3, [pc, #68]	@ (8004fe4 <DMA_ProcessBuffer+0x1e0>)
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7ff fa49 	bl	8004438 <ParseBuffer>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004faa:	230e      	movs	r3, #14
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004fb4:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004fb6:	230d      	movs	r3, #13
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	781b      	ldrb	r3, [r3, #0]
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b004      	add	sp, #16
 8004fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc4:	20001f1c 	.word	0x20001f1c
 8004fc8:	20000761 	.word	0x20000761
 8004fcc:	2000061c 	.word	0x2000061c
 8004fd0:	2000061e 	.word	0x2000061e
 8004fd4:	20000000 	.word	0x20000000
 8004fd8:	20000030 	.word	0x20000030
 8004fdc:	20000618 	.word	0x20000618
 8004fe0:	20000762 	.word	0x20000762
 8004fe4:	2000044c 	.word	0x2000044c

08004fe8 <clearDMABuffer>:

void clearDMABuffer(){
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004fec:	2380      	movs	r3, #128	@ 0x80
 8004fee:	005a      	lsls	r2, r3, #1
 8004ff0:	4b03      	ldr	r3, [pc, #12]	@ (8005000 <clearDMABuffer+0x18>)
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f01b fb15 	bl	8020624 <memset>
}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	2000044c 	.word	0x2000044c

08005004 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	0002      	movs	r2, r0
 800500c:	1dfb      	adds	r3, r7, #7
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	1dbb      	adds	r3, r7, #6
 8005012:	1c0a      	adds	r2, r1, #0
 8005014:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005016:	210f      	movs	r1, #15
 8005018:	187b      	adds	r3, r7, r1
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800501e:	1dbb      	adds	r3, r7, #6
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d105      	bne.n	8005032 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005026:	187b      	adds	r3, r7, r1
 8005028:	1dfa      	adds	r2, r7, #7
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	4251      	negs	r1, r2
 800502e:	414a      	adcs	r2, r1
 8005030:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8005032:	1dbb      	adds	r3, r7, #6
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d107      	bne.n	800504a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800503a:	230f      	movs	r3, #15
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	1dfa      	adds	r2, r7, #7
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	3a02      	subs	r2, #2
 8005044:	4251      	negs	r1, r2
 8005046:	414a      	adcs	r2, r1
 8005048:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800504a:	1dbb      	adds	r3, r7, #6
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d107      	bne.n	8005062 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8005052:	230f      	movs	r3, #15
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	1dfa      	adds	r2, r7, #7
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	3a05      	subs	r2, #5
 800505c:	4251      	negs	r1, r2
 800505e:	414a      	adcs	r2, r1
 8005060:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8005062:	1dbb      	adds	r3, r7, #6
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b05      	cmp	r3, #5
 8005068:	d107      	bne.n	800507a <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 800506a:	230f      	movs	r3, #15
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	1dfa      	adds	r2, r7, #7
 8005070:	7812      	ldrb	r2, [r2, #0]
 8005072:	3a0b      	subs	r2, #11
 8005074:	4251      	negs	r1, r2
 8005076:	414a      	adcs	r2, r1
 8005078:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800507a:	230f      	movs	r3, #15
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	781b      	ldrb	r3, [r3, #0]
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b004      	add	sp, #16
 8005086:	bd80      	pop	{r7, pc}

08005088 <AT_Send>:

bool AT_Send(AT_Commands state){
 8005088:	b590      	push	{r4, r7, lr}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	0002      	movs	r2, r0
 8005090:	1dfb      	adds	r3, r7, #7
 8005092:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8005094:	230f      	movs	r3, #15
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
  switch (state){
 800509c:	1dfb      	adds	r3, r7, #7
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b14      	cmp	r3, #20
 80050a2:	d900      	bls.n	80050a6 <AT_Send+0x1e>
 80050a4:	e19e      	b.n	80053e4 <AT_Send+0x35c>
 80050a6:	009a      	lsls	r2, r3, #2
 80050a8:	4bd2      	ldr	r3, [pc, #840]	@ (80053f4 <AT_Send+0x36c>)
 80050aa:	18d3      	adds	r3, r2, r3
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80050b0:	4bd1      	ldr	r3, [pc, #836]	@ (80053f8 <AT_Send+0x370>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f009 fbc3 	bl	800e840 <TimestampIsReached>
 80050ba:	1e03      	subs	r3, r0, #0
 80050bc:	d100      	bne.n	80050c0 <AT_Send+0x38>
 80050be:	e190      	b.n	80053e2 <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 80050c0:	4ace      	ldr	r2, [pc, #824]	@ (80053fc <AT_Send+0x374>)
 80050c2:	4bcf      	ldr	r3, [pc, #828]	@ (8005400 <AT_Send+0x378>)
 80050c4:	0019      	movs	r1, r3
 80050c6:	2003      	movs	r0, #3
 80050c8:	f009 fc10 	bl	800e8ec <CreateLine>
    ATCommandSend = PollAwake();
 80050cc:	230f      	movs	r3, #15
 80050ce:	18fc      	adds	r4, r7, r3
 80050d0:	f7ff fba0 	bl	8004814 <PollAwake>
 80050d4:	0003      	movs	r3, r0
 80050d6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80050d8:	f00a f84c 	bl	800f174 <HAL_GetTick>
 80050dc:	0003      	movs	r3, r0
 80050de:	3332      	adds	r3, #50	@ 0x32
 80050e0:	001a      	movs	r2, r3
 80050e2:	4bc5      	ldr	r3, [pc, #788]	@ (80053f8 <AT_Send+0x370>)
 80050e4:	601a      	str	r2, [r3, #0]
  }
  break;
 80050e6:	e17c      	b.n	80053e2 <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80050e8:	4ac6      	ldr	r2, [pc, #792]	@ (8005404 <AT_Send+0x37c>)
 80050ea:	4bc5      	ldr	r3, [pc, #788]	@ (8005400 <AT_Send+0x378>)
 80050ec:	0019      	movs	r1, r3
 80050ee:	2003      	movs	r0, #3
 80050f0:	f009 fbfc 	bl	800e8ec <CreateLine>
    ATCommandSend = RFPower();
 80050f4:	230f      	movs	r3, #15
 80050f6:	18fc      	adds	r4, r7, r3
 80050f8:	f7ff fba8 	bl	800484c <RFPower>
 80050fc:	0003      	movs	r3, r0
 80050fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005100:	f00a f838 	bl	800f174 <HAL_GetTick>
 8005104:	0003      	movs	r3, r0
 8005106:	330a      	adds	r3, #10
 8005108:	001a      	movs	r2, r3
 800510a:	4bbb      	ldr	r3, [pc, #748]	@ (80053f8 <AT_Send+0x370>)
 800510c:	601a      	str	r2, [r3, #0]
    break;
 800510e:	e169      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8005110:	4abd      	ldr	r2, [pc, #756]	@ (8005408 <AT_Send+0x380>)
 8005112:	4bbb      	ldr	r3, [pc, #748]	@ (8005400 <AT_Send+0x378>)
 8005114:	0019      	movs	r1, r3
 8005116:	2003      	movs	r0, #3
 8005118:	f009 fbe8 	bl	800e8ec <CreateLine>
    ATCommandSend = CheckRFPower();
 800511c:	230f      	movs	r3, #15
 800511e:	18fc      	adds	r4, r7, r3
 8005120:	f7ff fbb0 	bl	8004884 <CheckRFPower>
 8005124:	0003      	movs	r3, r0
 8005126:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005128:	f00a f824 	bl	800f174 <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	330a      	adds	r3, #10
 8005130:	001a      	movs	r2, r3
 8005132:	4bb1      	ldr	r3, [pc, #708]	@ (80053f8 <AT_Send+0x370>)
 8005134:	601a      	str	r2, [r3, #0]
    break;
 8005136:	e155      	b.n	80053e4 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8005138:	4ab4      	ldr	r2, [pc, #720]	@ (800540c <AT_Send+0x384>)
 800513a:	4bb1      	ldr	r3, [pc, #708]	@ (8005400 <AT_Send+0x378>)
 800513c:	0019      	movs	r1, r3
 800513e:	2003      	movs	r0, #3
 8005140:	f009 fbd4 	bl	800e8ec <CreateLine>
    ATCommandSend = ATRestore();
 8005144:	230f      	movs	r3, #15
 8005146:	18fc      	adds	r4, r7, r3
 8005148:	f7ff fbb8 	bl	80048bc <ATRestore>
 800514c:	0003      	movs	r3, r0
 800514e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005150:	f00a f810 	bl	800f174 <HAL_GetTick>
 8005154:	0003      	movs	r3, r0
 8005156:	3332      	adds	r3, #50	@ 0x32
 8005158:	001a      	movs	r2, r3
 800515a:	4ba7      	ldr	r3, [pc, #668]	@ (80053f8 <AT_Send+0x370>)
 800515c:	601a      	str	r2, [r3, #0]
    break;
 800515e:	e141      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8005160:	4aab      	ldr	r2, [pc, #684]	@ (8005410 <AT_Send+0x388>)
 8005162:	4ba7      	ldr	r3, [pc, #668]	@ (8005400 <AT_Send+0x378>)
 8005164:	0019      	movs	r1, r3
 8005166:	2003      	movs	r0, #3
 8005168:	f009 fbc0 	bl	800e8ec <CreateLine>
    ATCommandSend = CWINIT();
 800516c:	230f      	movs	r3, #15
 800516e:	18fc      	adds	r4, r7, r3
 8005170:	f7ff fbc0 	bl	80048f4 <CWINIT>
 8005174:	0003      	movs	r3, r0
 8005176:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005178:	f009 fffc 	bl	800f174 <HAL_GetTick>
 800517c:	0003      	movs	r3, r0
 800517e:	33f5      	adds	r3, #245	@ 0xf5
 8005180:	33ff      	adds	r3, #255	@ 0xff
 8005182:	001a      	movs	r2, r3
 8005184:	4b9c      	ldr	r3, [pc, #624]	@ (80053f8 <AT_Send+0x370>)
 8005186:	601a      	str	r2, [r3, #0]
    break;
 8005188:	e12c      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 800518a:	4aa2      	ldr	r2, [pc, #648]	@ (8005414 <AT_Send+0x38c>)
 800518c:	4b9c      	ldr	r3, [pc, #624]	@ (8005400 <AT_Send+0x378>)
 800518e:	0019      	movs	r1, r3
 8005190:	2003      	movs	r0, #3
 8005192:	f009 fbab 	bl	800e8ec <CreateLine>
    ATCommandSend = CWSTATE();
 8005196:	230f      	movs	r3, #15
 8005198:	18fc      	adds	r4, r7, r3
 800519a:	f7ff fcb9 	bl	8004b10 <CWSTATE>
 800519e:	0003      	movs	r3, r0
 80051a0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051a2:	f009 ffe7 	bl	800f174 <HAL_GetTick>
 80051a6:	0003      	movs	r3, r0
 80051a8:	33f5      	adds	r3, #245	@ 0xf5
 80051aa:	33ff      	adds	r3, #255	@ 0xff
 80051ac:	001a      	movs	r2, r3
 80051ae:	4b92      	ldr	r3, [pc, #584]	@ (80053f8 <AT_Send+0x370>)
 80051b0:	601a      	str	r2, [r3, #0]
    break;
 80051b2:	e117      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80051b4:	4a98      	ldr	r2, [pc, #608]	@ (8005418 <AT_Send+0x390>)
 80051b6:	4b92      	ldr	r3, [pc, #584]	@ (8005400 <AT_Send+0x378>)
 80051b8:	0019      	movs	r1, r3
 80051ba:	2003      	movs	r0, #3
 80051bc:	f009 fb96 	bl	800e8ec <CreateLine>
    ATCommandSend = CWMODE1();
 80051c0:	230f      	movs	r3, #15
 80051c2:	18fc      	adds	r4, r7, r3
 80051c4:	f7ff fbb2 	bl	800492c <CWMODE1>
 80051c8:	0003      	movs	r3, r0
 80051ca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051cc:	f009 ffd2 	bl	800f174 <HAL_GetTick>
 80051d0:	0003      	movs	r3, r0
 80051d2:	330a      	adds	r3, #10
 80051d4:	001a      	movs	r2, r3
 80051d6:	4b88      	ldr	r3, [pc, #544]	@ (80053f8 <AT_Send+0x370>)
 80051d8:	601a      	str	r2, [r3, #0]
    break;
 80051da:	e103      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80051dc:	4a8e      	ldr	r2, [pc, #568]	@ (8005418 <AT_Send+0x390>)
 80051de:	4b88      	ldr	r3, [pc, #544]	@ (8005400 <AT_Send+0x378>)
 80051e0:	0019      	movs	r1, r3
 80051e2:	2003      	movs	r0, #3
 80051e4:	f009 fb82 	bl	800e8ec <CreateLine>
    ATCommandSend = CWMODE2();
 80051e8:	230f      	movs	r3, #15
 80051ea:	18fc      	adds	r4, r7, r3
 80051ec:	f7ff fbba 	bl	8004964 <CWMODE2>
 80051f0:	0003      	movs	r3, r0
 80051f2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051f4:	f009 ffbe 	bl	800f174 <HAL_GetTick>
 80051f8:	0003      	movs	r3, r0
 80051fa:	330a      	adds	r3, #10
 80051fc:	001a      	movs	r2, r3
 80051fe:	4b7e      	ldr	r3, [pc, #504]	@ (80053f8 <AT_Send+0x370>)
 8005200:	601a      	str	r2, [r3, #0]
    break;
 8005202:	e0ef      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005204:	4a85      	ldr	r2, [pc, #532]	@ (800541c <AT_Send+0x394>)
 8005206:	4b7e      	ldr	r3, [pc, #504]	@ (8005400 <AT_Send+0x378>)
 8005208:	0019      	movs	r1, r3
 800520a:	2003      	movs	r0, #3
 800520c:	f009 fb6e 	bl	800e8ec <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8005210:	230f      	movs	r3, #15
 8005212:	18fc      	adds	r4, r7, r3
 8005214:	f7ff fbc2 	bl	800499c <CWAUTOCONN>
 8005218:	0003      	movs	r3, r0
 800521a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800521c:	f009 ffaa 	bl	800f174 <HAL_GetTick>
 8005220:	0003      	movs	r3, r0
 8005222:	330a      	adds	r3, #10
 8005224:	001a      	movs	r2, r3
 8005226:	4b74      	ldr	r3, [pc, #464]	@ (80053f8 <AT_Send+0x370>)
 8005228:	601a      	str	r2, [r3, #0]
    break;
 800522a:	e0db      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800522c:	4a7c      	ldr	r2, [pc, #496]	@ (8005420 <AT_Send+0x398>)
 800522e:	4b74      	ldr	r3, [pc, #464]	@ (8005400 <AT_Send+0x378>)
 8005230:	0019      	movs	r1, r3
 8005232:	2003      	movs	r0, #3
 8005234:	f009 fb5a 	bl	800e8ec <CreateLine>
    ATCommandSend = CWJAP();
 8005238:	230f      	movs	r3, #15
 800523a:	18fc      	adds	r4, r7, r3
 800523c:	f7ff fbca 	bl	80049d4 <CWJAP>
 8005240:	0003      	movs	r3, r0
 8005242:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005244:	f009 ff96 	bl	800f174 <HAL_GetTick>
 8005248:	0003      	movs	r3, r0
 800524a:	3332      	adds	r3, #50	@ 0x32
 800524c:	001a      	movs	r2, r3
 800524e:	4b6a      	ldr	r3, [pc, #424]	@ (80053f8 <AT_Send+0x370>)
 8005250:	601a      	str	r2, [r3, #0]
    break;
 8005252:	e0c7      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005254:	4a73      	ldr	r2, [pc, #460]	@ (8005424 <AT_Send+0x39c>)
 8005256:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <AT_Send+0x378>)
 8005258:	0019      	movs	r1, r3
 800525a:	2003      	movs	r0, #3
 800525c:	f009 fb46 	bl	800e8ec <CreateLine>
    ATCommandSend = CWMODE3();
 8005260:	230f      	movs	r3, #15
 8005262:	18fc      	adds	r4, r7, r3
 8005264:	f7ff fc38 	bl	8004ad8 <CWMODE3>
 8005268:	0003      	movs	r3, r0
 800526a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800526c:	f009 ff82 	bl	800f174 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	330a      	adds	r3, #10
 8005274:	001a      	movs	r2, r3
 8005276:	4b60      	ldr	r3, [pc, #384]	@ (80053f8 <AT_Send+0x370>)
 8005278:	601a      	str	r2, [r3, #0]
    break;
 800527a:	e0b3      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800527c:	4a6a      	ldr	r2, [pc, #424]	@ (8005428 <AT_Send+0x3a0>)
 800527e:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <AT_Send+0x378>)
 8005280:	0019      	movs	r1, r3
 8005282:	2003      	movs	r0, #3
 8005284:	f009 fb32 	bl	800e8ec <CreateLine>
    ATCommandSend = CWSAP();
 8005288:	230f      	movs	r3, #15
 800528a:	18fc      	adds	r4, r7, r3
 800528c:	f7ff fc5c 	bl	8004b48 <CWSAP>
 8005290:	0003      	movs	r3, r0
 8005292:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005294:	f009 ff6e 	bl	800f174 <HAL_GetTick>
 8005298:	0003      	movs	r3, r0
 800529a:	330a      	adds	r3, #10
 800529c:	001a      	movs	r2, r3
 800529e:	4b56      	ldr	r3, [pc, #344]	@ (80053f8 <AT_Send+0x370>)
 80052a0:	601a      	str	r2, [r3, #0]
    break;
 80052a2:	e09f      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80052a4:	4a61      	ldr	r2, [pc, #388]	@ (800542c <AT_Send+0x3a4>)
 80052a6:	4b56      	ldr	r3, [pc, #344]	@ (8005400 <AT_Send+0x378>)
 80052a8:	0019      	movs	r1, r3
 80052aa:	2003      	movs	r0, #3
 80052ac:	f009 fb1e 	bl	800e8ec <CreateLine>
    ATCommandSend = CIPMUX();
 80052b0:	230f      	movs	r3, #15
 80052b2:	18fc      	adds	r4, r7, r3
 80052b4:	f7ff fc64 	bl	8004b80 <CIPMUX>
 80052b8:	0003      	movs	r3, r0
 80052ba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052bc:	f009 ff5a 	bl	800f174 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	330a      	adds	r3, #10
 80052c4:	001a      	movs	r2, r3
 80052c6:	4b4c      	ldr	r3, [pc, #304]	@ (80053f8 <AT_Send+0x370>)
 80052c8:	601a      	str	r2, [r3, #0]
    break;
 80052ca:	e08b      	b.n	80053e4 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80052cc:	4a58      	ldr	r2, [pc, #352]	@ (8005430 <AT_Send+0x3a8>)
 80052ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005400 <AT_Send+0x378>)
 80052d0:	0019      	movs	r1, r3
 80052d2:	2003      	movs	r0, #3
 80052d4:	f009 fb0a 	bl	800e8ec <CreateLine>
    ATCommandSend = WEBSERVER();
 80052d8:	230f      	movs	r3, #15
 80052da:	18fc      	adds	r4, r7, r3
 80052dc:	f7ff fc6c 	bl	8004bb8 <WEBSERVER>
 80052e0:	0003      	movs	r3, r0
 80052e2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052e4:	f009 ff46 	bl	800f174 <HAL_GetTick>
 80052e8:	0003      	movs	r3, r0
 80052ea:	330a      	adds	r3, #10
 80052ec:	001a      	movs	r2, r3
 80052ee:	4b42      	ldr	r3, [pc, #264]	@ (80053f8 <AT_Send+0x370>)
 80052f0:	601a      	str	r2, [r3, #0]
    break;
 80052f2:	e077      	b.n	80053e4 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80052f4:	230f      	movs	r3, #15
 80052f6:	18fc      	adds	r4, r7, r3
 80052f8:	f7ff fc7a 	bl	8004bf0 <HTTPCPOST>
 80052fc:	0003      	movs	r3, r0
 80052fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005300:	f009 ff38 	bl	800f174 <HAL_GetTick>
 8005304:	0003      	movs	r3, r0
 8005306:	33f5      	adds	r3, #245	@ 0xf5
 8005308:	33ff      	adds	r3, #255	@ 0xff
 800530a:	001a      	movs	r2, r3
 800530c:	4b3a      	ldr	r3, [pc, #232]	@ (80053f8 <AT_Send+0x370>)
 800530e:	601a      	str	r2, [r3, #0]
    break;
 8005310:	e068      	b.n	80053e4 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 8005312:	4a48      	ldr	r2, [pc, #288]	@ (8005434 <AT_Send+0x3ac>)
 8005314:	4b3a      	ldr	r3, [pc, #232]	@ (8005400 <AT_Send+0x378>)
 8005316:	0019      	movs	r1, r3
 8005318:	2003      	movs	r0, #3
 800531a:	f009 fae7 	bl	800e8ec <CreateLine>
    ATCommandSend = SENDDATA();
 800531e:	230f      	movs	r3, #15
 8005320:	18fc      	adds	r4, r7, r3
 8005322:	f7ff fccf 	bl	8004cc4 <SENDDATA>
 8005326:	0003      	movs	r3, r0
 8005328:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 800532a:	f009 ff23 	bl	800f174 <HAL_GetTick>
 800532e:	0003      	movs	r3, r0
 8005330:	33f5      	adds	r3, #245	@ 0xf5
 8005332:	33ff      	adds	r3, #255	@ 0xff
 8005334:	001a      	movs	r2, r3
 8005336:	4b30      	ldr	r3, [pc, #192]	@ (80053f8 <AT_Send+0x370>)
 8005338:	601a      	str	r2, [r3, #0]
    break;
 800533a:	e053      	b.n	80053e4 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800533c:	4a3e      	ldr	r2, [pc, #248]	@ (8005438 <AT_Send+0x3b0>)
 800533e:	4b30      	ldr	r3, [pc, #192]	@ (8005400 <AT_Send+0x378>)
 8005340:	0019      	movs	r1, r3
 8005342:	2003      	movs	r0, #3
 8005344:	f009 fad2 	bl	800e8ec <CreateLine>
    ATCommandSend = SLEEP();
 8005348:	230f      	movs	r3, #15
 800534a:	18fc      	adds	r4, r7, r3
 800534c:	f7ff fce6 	bl	8004d1c <SLEEP>
 8005350:	0003      	movs	r3, r0
 8005352:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005354:	f009 ff0e 	bl	800f174 <HAL_GetTick>
 8005358:	0003      	movs	r3, r0
 800535a:	330a      	adds	r3, #10
 800535c:	001a      	movs	r2, r3
 800535e:	4b26      	ldr	r3, [pc, #152]	@ (80053f8 <AT_Send+0x370>)
 8005360:	601a      	str	r2, [r3, #0]
    break;
 8005362:	e03f      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8005364:	4a35      	ldr	r2, [pc, #212]	@ (800543c <AT_Send+0x3b4>)
 8005366:	4b26      	ldr	r3, [pc, #152]	@ (8005400 <AT_Send+0x378>)
 8005368:	0019      	movs	r1, r3
 800536a:	2003      	movs	r0, #3
 800536c:	f009 fabe 	bl	800e8ec <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005370:	230f      	movs	r3, #15
 8005372:	18fc      	adds	r4, r7, r3
 8005374:	f7ff fcee 	bl	8004d54 <CIPSNTPCFG>
 8005378:	0003      	movs	r3, r0
 800537a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800537c:	f009 fefa 	bl	800f174 <HAL_GetTick>
 8005380:	0003      	movs	r3, r0
 8005382:	330a      	adds	r3, #10
 8005384:	001a      	movs	r2, r3
 8005386:	4b1c      	ldr	r3, [pc, #112]	@ (80053f8 <AT_Send+0x370>)
 8005388:	601a      	str	r2, [r3, #0]
    break;
 800538a:	e02b      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 800538c:	4a2c      	ldr	r2, [pc, #176]	@ (8005440 <AT_Send+0x3b8>)
 800538e:	4b1c      	ldr	r3, [pc, #112]	@ (8005400 <AT_Send+0x378>)
 8005390:	0019      	movs	r1, r3
 8005392:	2003      	movs	r0, #3
 8005394:	f009 faaa 	bl	800e8ec <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8005398:	230f      	movs	r3, #15
 800539a:	18fc      	adds	r4, r7, r3
 800539c:	f7ff fcfa 	bl	8004d94 <CIPSNTPTIME>
 80053a0:	0003      	movs	r3, r0
 80053a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80053a4:	f009 fee6 	bl	800f174 <HAL_GetTick>
 80053a8:	0003      	movs	r3, r0
 80053aa:	33f5      	adds	r3, #245	@ 0xf5
 80053ac:	33ff      	adds	r3, #255	@ 0xff
 80053ae:	001a      	movs	r2, r3
 80053b0:	4b11      	ldr	r3, [pc, #68]	@ (80053f8 <AT_Send+0x370>)
 80053b2:	601a      	str	r2, [r3, #0]
    break;
 80053b4:	e016      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80053b6:	4a23      	ldr	r2, [pc, #140]	@ (8005444 <AT_Send+0x3bc>)
 80053b8:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <AT_Send+0x378>)
 80053ba:	0019      	movs	r1, r3
 80053bc:	2003      	movs	r0, #3
 80053be:	f009 fa95 	bl	800e8ec <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80053c2:	230f      	movs	r3, #15
 80053c4:	18fc      	adds	r4, r7, r3
 80053c6:	f7ff fd01 	bl	8004dcc <CIPSNTPINTV>
 80053ca:	0003      	movs	r3, r0
 80053cc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053ce:	f009 fed1 	bl	800f174 <HAL_GetTick>
 80053d2:	0003      	movs	r3, r0
 80053d4:	330a      	adds	r3, #10
 80053d6:	001a      	movs	r2, r3
 80053d8:	4b07      	ldr	r3, [pc, #28]	@ (80053f8 <AT_Send+0x370>)
 80053da:	601a      	str	r2, [r3, #0]
    break;
 80053dc:	e002      	b.n	80053e4 <AT_Send+0x35c>

  case AT_END:
    break;
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	e000      	b.n	80053e4 <AT_Send+0x35c>
  break;
 80053e2:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80053e4:	230f      	movs	r3, #15
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	781b      	ldrb	r3, [r3, #0]
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b005      	add	sp, #20
 80053f0:	bd90      	pop	{r4, r7, pc}
 80053f2:	46c0      	nop			@ (mov r8, r8)
 80053f4:	08025a04 	.word	0x08025a04
 80053f8:	20000618 	.word	0x20000618
 80053fc:	08023fa8 	.word	0x08023fa8
 8005400:	08023598 	.word	0x08023598
 8005404:	08023fb4 	.word	0x08023fb4
 8005408:	08023fc8 	.word	0x08023fc8
 800540c:	08023fdc 	.word	0x08023fdc
 8005410:	08023fec 	.word	0x08023fec
 8005414:	08024000 	.word	0x08024000
 8005418:	08024018 	.word	0x08024018
 800541c:	08024030 	.word	0x08024030
 8005420:	08024048 	.word	0x08024048
 8005424:	0802405c 	.word	0x0802405c
 8005428:	08024078 	.word	0x08024078
 800542c:	08024094 	.word	0x08024094
 8005430:	080240b0 	.word	0x080240b0
 8005434:	080240cc 	.word	0x080240cc
 8005438:	080240dc 	.word	0x080240dc
 800543c:	08024100 	.word	0x08024100
 8005440:	08024114 	.word	0x08024114
 8005444:	0802412c 	.word	0x0802412c

08005448 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005448:	b590      	push	{r4, r7, lr}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800544e:	1dfb      	adds	r3, r7, #7
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005454:	4b7d      	ldr	r3, [pc, #500]	@ (800564c <ESP_WakeTest+0x204>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b05      	cmp	r3, #5
 800545a:	d900      	bls.n	800545e <ESP_WakeTest+0x16>
 800545c:	e0d9      	b.n	8005612 <ESP_WakeTest+0x1ca>
 800545e:	009a      	lsls	r2, r3, #2
 8005460:	4b7b      	ldr	r3, [pc, #492]	@ (8005650 <ESP_WakeTest+0x208>)
 8005462:	18d3      	adds	r3, r2, r3
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8005468:	4b7a      	ldr	r3, [pc, #488]	@ (8005654 <ESP_WakeTest+0x20c>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2201      	movs	r2, #1
 800546e:	4053      	eors	r3, r2
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d036      	beq.n	80054e4 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	4877      	ldr	r0, [pc, #476]	@ (8005658 <ESP_WakeTest+0x210>)
 800547c:	2200      	movs	r2, #0
 800547e:	0019      	movs	r1, r3
 8005480:	f00b f909 	bl	8010696 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005484:	2032      	movs	r0, #50	@ 0x32
 8005486:	f009 fe7f 	bl	800f188 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	4872      	ldr	r0, [pc, #456]	@ (8005658 <ESP_WakeTest+0x210>)
 8005490:	2201      	movs	r2, #1
 8005492:	0019      	movs	r1, r3
 8005494:	f00b f8ff 	bl	8010696 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005498:	200a      	movs	r0, #10
 800549a:	f009 fe75 	bl	800f188 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800549e:	4b6f      	ldr	r3, [pc, #444]	@ (800565c <ESP_WakeTest+0x214>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	2101      	movs	r1, #1
 80054a4:	0018      	movs	r0, r3
 80054a6:	f00b f8f6 	bl	8010696 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054aa:	200a      	movs	r0, #10
 80054ac:	f009 fe6c 	bl	800f188 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80054b0:	4b6a      	ldr	r3, [pc, #424]	@ (800565c <ESP_WakeTest+0x214>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	2102      	movs	r1, #2
 80054b6:	0018      	movs	r0, r3
 80054b8:	f00b f8ed 	bl	8010696 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054bc:	200a      	movs	r0, #10
 80054be:	f009 fe63 	bl	800f188 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80054c2:	4b66      	ldr	r3, [pc, #408]	@ (800565c <ESP_WakeTest+0x214>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	2101      	movs	r1, #1
 80054c8:	0018      	movs	r0, r3
 80054ca:	f00b f8e4 	bl	8010696 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80054ce:	f009 fe51 	bl	800f174 <HAL_GetTick>
 80054d2:	0003      	movs	r3, r0
 80054d4:	22af      	movs	r2, #175	@ 0xaf
 80054d6:	0092      	lsls	r2, r2, #2
 80054d8:	189a      	adds	r2, r3, r2
 80054da:	4b61      	ldr	r3, [pc, #388]	@ (8005660 <ESP_WakeTest+0x218>)
 80054dc:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80054de:	4b5d      	ldr	r3, [pc, #372]	@ (8005654 <ESP_WakeTest+0x20c>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80054e4:	2380      	movs	r3, #128	@ 0x80
 80054e6:	005a      	lsls	r2, r3, #1
 80054e8:	4b5e      	ldr	r3, [pc, #376]	@ (8005664 <ESP_WakeTest+0x21c>)
 80054ea:	0011      	movs	r1, r2
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7fe fab5 	bl	8003a5c <ESP_Receive>
 80054f2:	1e03      	subs	r3, r0, #0
 80054f4:	d100      	bne.n	80054f8 <ESP_WakeTest+0xb0>
 80054f6:	e09f      	b.n	8005638 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 80054f8:	4b54      	ldr	r3, [pc, #336]	@ (800564c <ESP_WakeTest+0x204>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80054fe:	e09b      	b.n	8005638 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8005500:	4b57      	ldr	r3, [pc, #348]	@ (8005660 <ESP_WakeTest+0x218>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	0018      	movs	r0, r3
 8005506:	f009 f99b 	bl	800e840 <TimestampIsReached>
 800550a:	1e03      	subs	r3, r0, #0
 800550c:	d100      	bne.n	8005510 <ESP_WakeTest+0xc8>
 800550e:	e095      	b.n	800563c <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8005510:	4b55      	ldr	r3, [pc, #340]	@ (8005668 <ESP_WakeTest+0x220>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	1dfc      	adds	r4, r7, #7
 8005516:	0018      	movs	r0, r3
 8005518:	f7ff fdb6 	bl	8005088 <AT_Send>
 800551c:	0003      	movs	r3, r0
 800551e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005520:	1dfb      	adds	r3, r7, #7
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d100      	bne.n	800552a <ESP_WakeTest+0xe2>
 8005528:	e088      	b.n	800563c <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 800552a:	4b48      	ldr	r3, [pc, #288]	@ (800564c <ESP_WakeTest+0x204>)
 800552c:	2202      	movs	r2, #2
 800552e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005530:	e084      	b.n	800563c <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8005532:	4b4b      	ldr	r3, [pc, #300]	@ (8005660 <ESP_WakeTest+0x218>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	0018      	movs	r0, r3
 8005538:	f009 f982 	bl	800e840 <TimestampIsReached>
 800553c:	1e03      	subs	r3, r0, #0
 800553e:	d100      	bne.n	8005542 <ESP_WakeTest+0xfa>
 8005540:	e07e      	b.n	8005640 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005542:	4b4a      	ldr	r3, [pc, #296]	@ (800566c <ESP_WakeTest+0x224>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	0018      	movs	r0, r3
 8005548:	f7ff fc5c 	bl	8004e04 <DMA_ProcessBuffer>
 800554c:	0003      	movs	r3, r0
 800554e:	001a      	movs	r2, r3
 8005550:	4b47      	ldr	r3, [pc, #284]	@ (8005670 <ESP_WakeTest+0x228>)
 8005552:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005554:	4b46      	ldr	r3, [pc, #280]	@ (8005670 <ESP_WakeTest+0x228>)
 8005556:	781a      	ldrb	r2, [r3, #0]
 8005558:	4b44      	ldr	r3, [pc, #272]	@ (800566c <ESP_WakeTest+0x224>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	1dbc      	adds	r4, r7, #6
 800555e:	0019      	movs	r1, r3
 8005560:	0010      	movs	r0, r2
 8005562:	f7ff fd4f 	bl	8005004 <ATCompare>
 8005566:	0003      	movs	r3, r0
 8005568:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800556a:	4b41      	ldr	r3, [pc, #260]	@ (8005670 <ESP_WakeTest+0x228>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d102      	bne.n	8005578 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8005572:	4b36      	ldr	r3, [pc, #216]	@ (800564c <ESP_WakeTest+0x204>)
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005578:	4b3d      	ldr	r3, [pc, #244]	@ (8005670 <ESP_WakeTest+0x228>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b07      	cmp	r3, #7
 800557e:	d104      	bne.n	800558a <ESP_WakeTest+0x142>
          StartProg();
 8005580:	f7fe ff28 	bl	80043d4 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005584:	4b31      	ldr	r3, [pc, #196]	@ (800564c <ESP_WakeTest+0x204>)
 8005586:	2205      	movs	r2, #5
 8005588:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800558a:	4b39      	ldr	r3, [pc, #228]	@ (8005670 <ESP_WakeTest+0x228>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b03      	cmp	r3, #3
 8005590:	d109      	bne.n	80055a6 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8005592:	f009 fdef 	bl	800f174 <HAL_GetTick>
 8005596:	0003      	movs	r3, r0
 8005598:	3332      	adds	r3, #50	@ 0x32
 800559a:	001a      	movs	r2, r3
 800559c:	4b30      	ldr	r3, [pc, #192]	@ (8005660 <ESP_WakeTest+0x218>)
 800559e:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80055a0:	4b2a      	ldr	r3, [pc, #168]	@ (800564c <ESP_WakeTest+0x204>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80055a6:	1dbb      	adds	r3, r7, #6
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d048      	beq.n	8005640 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80055ae:	4b27      	ldr	r3, [pc, #156]	@ (800564c <ESP_WakeTest+0x204>)
 80055b0:	2203      	movs	r2, #3
 80055b2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80055b4:	e044      	b.n	8005640 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80055b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005674 <ESP_WakeTest+0x22c>)
 80055b8:	22fa      	movs	r2, #250	@ 0xfa
 80055ba:	0112      	lsls	r2, r2, #4
 80055bc:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80055be:	f007 fef1 	bl	800d3a4 <Calculate_LED_ON>
 80055c2:	0003      	movs	r3, r0
 80055c4:	001a      	movs	r2, r3
 80055c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005674 <ESP_WakeTest+0x22c>)
 80055c8:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80055ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005674 <ESP_WakeTest+0x22c>)
 80055cc:	22fa      	movs	r2, #250	@ 0xfa
 80055ce:	0112      	lsls	r2, r2, #4
 80055d0:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80055d2:	4b1e      	ldr	r3, [pc, #120]	@ (800564c <ESP_WakeTest+0x204>)
 80055d4:	2204      	movs	r2, #4
 80055d6:	701a      	strb	r2, [r3, #0]

      break;
 80055d8:	e033      	b.n	8005642 <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80055da:	4b27      	ldr	r3, [pc, #156]	@ (8005678 <ESP_WakeTest+0x230>)
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80055e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005654 <ESP_WakeTest+0x20c>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80055e6:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <ESP_WakeTest+0x214>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	2101      	movs	r1, #1
 80055ec:	0018      	movs	r0, r3
 80055ee:	f00b f852 	bl	8010696 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80055f2:	2380      	movs	r3, #128	@ 0x80
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	4818      	ldr	r0, [pc, #96]	@ (8005658 <ESP_WakeTest+0x210>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	0019      	movs	r1, r3
 80055fc:	f00b f84b 	bl	8010696 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005600:	4b16      	ldr	r3, [pc, #88]	@ (800565c <ESP_WakeTest+0x214>)
 8005602:	2200      	movs	r2, #0
 8005604:	2102      	movs	r1, #2
 8005606:	0018      	movs	r0, r3
 8005608:	f00b f845 	bl	8010696 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 800560c:	f003 f8d2 	bl	80087b4 <SetESPMeasurementDone>
      break;
 8005610:	e017      	b.n	8005642 <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 8005612:	4b0e      	ldr	r3, [pc, #56]	@ (800564c <ESP_WakeTest+0x204>)
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
      break;
 8005618:	e013      	b.n	8005642 <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 800561a:	4b16      	ldr	r3, [pc, #88]	@ (8005674 <ESP_WakeTest+0x22c>)
 800561c:	22fa      	movs	r2, #250	@ 0xfa
 800561e:	0112      	lsls	r2, r2, #4
 8005620:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8005622:	4b14      	ldr	r3, [pc, #80]	@ (8005674 <ESP_WakeTest+0x22c>)
 8005624:	22fa      	movs	r2, #250	@ 0xfa
 8005626:	0112      	lsls	r2, r2, #4
 8005628:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 800562a:	f007 febb 	bl	800d3a4 <Calculate_LED_ON>
 800562e:	0003      	movs	r3, r0
 8005630:	001a      	movs	r2, r3
 8005632:	4b10      	ldr	r3, [pc, #64]	@ (8005674 <ESP_WakeTest+0x22c>)
 8005634:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005636:	e004      	b.n	8005642 <ESP_WakeTest+0x1fa>
      break;
 8005638:	46c0      	nop			@ (mov r8, r8)
 800563a:	e002      	b.n	8005642 <ESP_WakeTest+0x1fa>
      break;
 800563c:	46c0      	nop			@ (mov r8, r8)
 800563e:	e000      	b.n	8005642 <ESP_WakeTest+0x1fa>
      break;
 8005640:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005642:	46c0      	nop			@ (mov r8, r8)
 8005644:	46bd      	mov	sp, r7
 8005646:	b003      	add	sp, #12
 8005648:	bd90      	pop	{r4, r7, pc}
 800564a:	46c0      	nop			@ (mov r8, r8)
 800564c:	20000620 	.word	0x20000620
 8005650:	08025a58 	.word	0x08025a58
 8005654:	2000054c 	.word	0x2000054c
 8005658:	50000800 	.word	0x50000800
 800565c:	50001c00 	.word	0x50001c00
 8005660:	20000618 	.word	0x20000618
 8005664:	2000044c 	.word	0x2000044c
 8005668:	2000061e 	.word	0x2000061e
 800566c:	2000061d 	.word	0x2000061d
 8005670:	20000032 	.word	0x20000032
 8005674:	40000400 	.word	0x40000400
 8005678:	20000000 	.word	0x20000000

0800567c <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 800567c:	b5b0      	push	{r4, r5, r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8005682:	1dfb      	adds	r3, r7, #7
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8005688:	4be2      	ldr	r3, [pc, #904]	@ (8005a14 <ESP_Upkeep+0x398>)
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	4be2      	ldr	r3, [pc, #904]	@ (8005a18 <ESP_Upkeep+0x39c>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d024      	beq.n	80056de <ESP_Upkeep+0x62>
 8005694:	f009 f9a4 	bl	800e9e0 <GetVerboseLevel>
 8005698:	0003      	movs	r3, r0
 800569a:	2b03      	cmp	r3, #3
 800569c:	d11f      	bne.n	80056de <ESP_Upkeep+0x62>
    oldEspState = EspState;
 800569e:	4bdd      	ldr	r3, [pc, #884]	@ (8005a14 <ESP_Upkeep+0x398>)
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	4bdd      	ldr	r3, [pc, #884]	@ (8005a18 <ESP_Upkeep+0x39c>)
 80056a4:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80056a6:	4bdc      	ldr	r3, [pc, #880]	@ (8005a18 <ESP_Upkeep+0x39c>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d103      	bne.n	80056b6 <ESP_Upkeep+0x3a>
 80056ae:	4bdb      	ldr	r3, [pc, #876]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b0e      	cmp	r3, #14
 80056b4:	d013      	beq.n	80056de <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80056b6:	4bd8      	ldr	r3, [pc, #864]	@ (8005a18 <ESP_Upkeep+0x39c>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	001d      	movs	r5, r3
 80056bc:	4bd7      	ldr	r3, [pc, #860]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	0018      	movs	r0, r3
 80056c2:	4bd7      	ldr	r3, [pc, #860]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	001c      	movs	r4, r3
 80056c8:	4bd6      	ldr	r3, [pc, #856]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	4ad6      	ldr	r2, [pc, #856]	@ (8005a28 <ESP_Upkeep+0x3ac>)
 80056ce:	49d7      	ldr	r1, [pc, #860]	@ (8005a2c <ESP_Upkeep+0x3b0>)
 80056d0:	9302      	str	r3, [sp, #8]
 80056d2:	9401      	str	r4, [sp, #4]
 80056d4:	9000      	str	r0, [sp, #0]
 80056d6:	002b      	movs	r3, r5
 80056d8:	2003      	movs	r0, #3
 80056da:	f009 f907 	bl	800e8ec <CreateLine>
    }
  }
  switch (EspState) {
 80056de:	4bcd      	ldr	r3, [pc, #820]	@ (8005a14 <ESP_Upkeep+0x398>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b0f      	cmp	r3, #15
 80056e4:	d901      	bls.n	80056ea <ESP_Upkeep+0x6e>
 80056e6:	f000 fc32 	bl	8005f4e <ESP_Upkeep+0x8d2>
 80056ea:	009a      	lsls	r2, r3, #2
 80056ec:	4bd0      	ldr	r3, [pc, #832]	@ (8005a30 <ESP_Upkeep+0x3b4>)
 80056ee:	18d3      	adds	r3, r2, r3
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80056f4:	4bc7      	ldr	r3, [pc, #796]	@ (8005a14 <ESP_Upkeep+0x398>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	701a      	strb	r2, [r3, #0]
      break;
 80056fa:	f000 fc41 	bl	8005f80 <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 80056fe:	f003 fab9 	bl	8008c74 <DisableConnectedDevices>
      SetESPIndicator();
 8005702:	f007 ffe1 	bl	800d6c8 <SetESPIndicator>
      if(!EspTurnedOn){
 8005706:	4bcb      	ldr	r3, [pc, #812]	@ (8005a34 <ESP_Upkeep+0x3b8>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2201      	movs	r2, #1
 800570c:	4053      	eors	r3, r2
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d036      	beq.n	8005782 <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	48c7      	ldr	r0, [pc, #796]	@ (8005a38 <ESP_Upkeep+0x3bc>)
 800571a:	2200      	movs	r2, #0
 800571c:	0019      	movs	r1, r3
 800571e:	f00a ffba 	bl	8010696 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005722:	2001      	movs	r0, #1
 8005724:	f009 fd30 	bl	800f188 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005728:	2380      	movs	r3, #128	@ 0x80
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	48c2      	ldr	r0, [pc, #776]	@ (8005a38 <ESP_Upkeep+0x3bc>)
 800572e:	2201      	movs	r2, #1
 8005730:	0019      	movs	r1, r3
 8005732:	f00a ffb0 	bl	8010696 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005736:	2001      	movs	r0, #1
 8005738:	f009 fd26 	bl	800f188 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800573c:	4bbf      	ldr	r3, [pc, #764]	@ (8005a3c <ESP_Upkeep+0x3c0>)
 800573e:	2200      	movs	r2, #0
 8005740:	2101      	movs	r1, #1
 8005742:	0018      	movs	r0, r3
 8005744:	f00a ffa7 	bl	8010696 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005748:	2001      	movs	r0, #1
 800574a:	f009 fd1d 	bl	800f188 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800574e:	4bbb      	ldr	r3, [pc, #748]	@ (8005a3c <ESP_Upkeep+0x3c0>)
 8005750:	2201      	movs	r2, #1
 8005752:	2102      	movs	r1, #2
 8005754:	0018      	movs	r0, r3
 8005756:	f00a ff9e 	bl	8010696 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800575a:	2001      	movs	r0, #1
 800575c:	f009 fd14 	bl	800f188 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005760:	4bb6      	ldr	r3, [pc, #728]	@ (8005a3c <ESP_Upkeep+0x3c0>)
 8005762:	2201      	movs	r2, #1
 8005764:	2101      	movs	r1, #1
 8005766:	0018      	movs	r0, r3
 8005768:	f00a ff95 	bl	8010696 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800576c:	f009 fd02 	bl	800f174 <HAL_GetTick>
 8005770:	0003      	movs	r3, r0
 8005772:	22af      	movs	r2, #175	@ 0xaf
 8005774:	0092      	lsls	r2, r2, #2
 8005776:	189a      	adds	r2, r3, r2
 8005778:	4bb1      	ldr	r3, [pc, #708]	@ (8005a40 <ESP_Upkeep+0x3c4>)
 800577a:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800577c:	4bad      	ldr	r3, [pc, #692]	@ (8005a34 <ESP_Upkeep+0x3b8>)
 800577e:	2201      	movs	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005782:	2380      	movs	r3, #128	@ 0x80
 8005784:	005a      	lsls	r2, r3, #1
 8005786:	4baf      	ldr	r3, [pc, #700]	@ (8005a44 <ESP_Upkeep+0x3c8>)
 8005788:	0011      	movs	r1, r2
 800578a:	0018      	movs	r0, r3
 800578c:	f7fe f966 	bl	8003a5c <ESP_Receive>
 8005790:	1e03      	subs	r3, r0, #0
 8005792:	d101      	bne.n	8005798 <ESP_Upkeep+0x11c>
 8005794:	f000 fbe7 	bl	8005f66 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005798:	4b9e      	ldr	r3, [pc, #632]	@ (8005a14 <ESP_Upkeep+0x398>)
 800579a:	220f      	movs	r2, #15
 800579c:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 800579e:	f009 fce9 	bl	800f174 <HAL_GetTick>
 80057a2:	0003      	movs	r3, r0
 80057a4:	22fa      	movs	r2, #250	@ 0xfa
 80057a6:	00d2      	lsls	r2, r2, #3
 80057a8:	189a      	adds	r2, r3, r2
 80057aa:	4ba7      	ldr	r3, [pc, #668]	@ (8005a48 <ESP_Upkeep+0x3cc>)
 80057ac:	601a      	str	r2, [r3, #0]
      }
      break;
 80057ae:	f000 fbda 	bl	8005f66 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80057b2:	2001      	movs	r0, #1
 80057b4:	f7ff fb26 	bl	8004e04 <DMA_ProcessBuffer>
 80057b8:	0003      	movs	r3, r0
 80057ba:	001a      	movs	r2, r3
 80057bc:	4ba3      	ldr	r3, [pc, #652]	@ (8005a4c <ESP_Upkeep+0x3d0>)
 80057be:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80057c0:	4ba2      	ldr	r3, [pc, #648]	@ (8005a4c <ESP_Upkeep+0x3d0>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	1dbc      	adds	r4, r7, #6
 80057c6:	2101      	movs	r1, #1
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7ff fc1b 	bl	8005004 <ATCompare>
 80057ce:	0003      	movs	r3, r0
 80057d0:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80057d2:	1dbb      	adds	r3, r7, #6
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d108      	bne.n	80057ec <ESP_Upkeep+0x170>
 80057da:	4b9b      	ldr	r3, [pc, #620]	@ (8005a48 <ESP_Upkeep+0x3cc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	0018      	movs	r0, r3
 80057e0:	f009 f82e 	bl	800e840 <TimestampIsReached>
 80057e4:	1e03      	subs	r3, r0, #0
 80057e6:	d101      	bne.n	80057ec <ESP_Upkeep+0x170>
 80057e8:	f000 fbbf 	bl	8005f6a <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 80057ec:	4b89      	ldr	r3, [pc, #548]	@ (8005a14 <ESP_Upkeep+0x398>)
 80057ee:	220b      	movs	r2, #11
 80057f0:	701a      	strb	r2, [r3, #0]
        }
        break;
 80057f2:	f000 fbba 	bl	8005f6a <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80057f6:	4b96      	ldr	r3, [pc, #600]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 80057f8:	2209      	movs	r2, #9
 80057fa:	2114      	movs	r1, #20
 80057fc:	0018      	movs	r0, r3
 80057fe:	f01a ff11 	bl	8020624 <memset>
      if(!InitIsDone || WifiReset){
 8005802:	4b94      	ldr	r3, [pc, #592]	@ (8005a54 <ESP_Upkeep+0x3d8>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	4053      	eors	r3, r2
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <ESP_Upkeep+0x19c>
 8005810:	4b91      	ldr	r3, [pc, #580]	@ (8005a58 <ESP_Upkeep+0x3dc>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01a      	beq.n	800584e <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005818:	4b8d      	ldr	r3, [pc, #564]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 800581a:	4a90      	ldr	r2, [pc, #576]	@ (8005a5c <ESP_Upkeep+0x3e0>)
 800581c:	6811      	ldr	r1, [r2, #0]
 800581e:	6019      	str	r1, [r3, #0]
 8005820:	8891      	ldrh	r1, [r2, #4]
 8005822:	8099      	strh	r1, [r3, #4]
 8005824:	7992      	ldrb	r2, [r2, #6]
 8005826:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005828:	4b7a      	ldr	r3, [pc, #488]	@ (8005a14 <ESP_Upkeep+0x398>)
 800582a:	2204      	movs	r2, #4
 800582c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800582e:	4b8c      	ldr	r3, [pc, #560]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005834:	4b7a      	ldr	r3, [pc, #488]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800583a:	4b89      	ldr	r3, [pc, #548]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	001a      	movs	r2, r3
 8005840:	4b83      	ldr	r3, [pc, #524]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 8005842:	5c9a      	ldrb	r2, [r3, r2]
 8005844:	4b75      	ldr	r3, [pc, #468]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 8005846:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005848:	4b76      	ldr	r3, [pc, #472]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800584e:	4b81      	ldr	r3, [pc, #516]	@ (8005a54 <ESP_Upkeep+0x3d8>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01f      	beq.n	8005896 <ESP_Upkeep+0x21a>
 8005856:	4b83      	ldr	r3, [pc, #524]	@ (8005a64 <ESP_Upkeep+0x3e8>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2201      	movs	r2, #1
 800585c:	4053      	eors	r3, r2
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d018      	beq.n	8005896 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005864:	4b7a      	ldr	r3, [pc, #488]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 8005866:	4a80      	ldr	r2, [pc, #512]	@ (8005a68 <ESP_Upkeep+0x3ec>)
 8005868:	6811      	ldr	r1, [r2, #0]
 800586a:	6019      	str	r1, [r3, #0]
 800586c:	8892      	ldrh	r2, [r2, #4]
 800586e:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005870:	4b68      	ldr	r3, [pc, #416]	@ (8005a14 <ESP_Upkeep+0x398>)
 8005872:	2204      	movs	r2, #4
 8005874:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005876:	4b7a      	ldr	r3, [pc, #488]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800587c:	4b68      	ldr	r3, [pc, #416]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005882:	4b77      	ldr	r3, [pc, #476]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	001a      	movs	r2, r3
 8005888:	4b71      	ldr	r3, [pc, #452]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 800588a:	5c9a      	ldrb	r2, [r3, r2]
 800588c:	4b63      	ldr	r3, [pc, #396]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 800588e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005890:	4b64      	ldr	r3, [pc, #400]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005896:	4b6f      	ldr	r3, [pc, #444]	@ (8005a54 <ESP_Upkeep+0x3d8>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d021      	beq.n	80058e2 <ESP_Upkeep+0x266>
 800589e:	4b71      	ldr	r3, [pc, #452]	@ (8005a64 <ESP_Upkeep+0x3e8>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01d      	beq.n	80058e2 <ESP_Upkeep+0x266>
 80058a6:	4b71      	ldr	r3, [pc, #452]	@ (8005a6c <ESP_Upkeep+0x3f0>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2201      	movs	r2, #1
 80058ac:	4053      	eors	r3, r2
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d016      	beq.n	80058e2 <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80058b4:	4b6e      	ldr	r3, [pc, #440]	@ (8005a70 <ESP_Upkeep+0x3f4>)
 80058b6:	881a      	ldrh	r2, [r3, #0]
 80058b8:	4b65      	ldr	r3, [pc, #404]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 80058ba:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80058bc:	4b55      	ldr	r3, [pc, #340]	@ (8005a14 <ESP_Upkeep+0x398>)
 80058be:	2204      	movs	r2, #4
 80058c0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80058c2:	4b67      	ldr	r3, [pc, #412]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80058c8:	4b55      	ldr	r3, [pc, #340]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 80058ca:	2204      	movs	r2, #4
 80058cc:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80058ce:	4b64      	ldr	r3, [pc, #400]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	001a      	movs	r2, r3
 80058d4:	4b5e      	ldr	r3, [pc, #376]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 80058d6:	5c9a      	ldrb	r2, [r3, r2]
 80058d8:	4b50      	ldr	r3, [pc, #320]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 80058da:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80058dc:	4b51      	ldr	r3, [pc, #324]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80058e2:	4b5c      	ldr	r3, [pc, #368]	@ (8005a54 <ESP_Upkeep+0x3d8>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d02c      	beq.n	8005944 <ESP_Upkeep+0x2c8>
 80058ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005a64 <ESP_Upkeep+0x3e8>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d028      	beq.n	8005944 <ESP_Upkeep+0x2c8>
 80058f2:	4b5e      	ldr	r3, [pc, #376]	@ (8005a6c <ESP_Upkeep+0x3f0>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d024      	beq.n	8005944 <ESP_Upkeep+0x2c8>
 80058fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005a74 <ESP_Upkeep+0x3f8>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2201      	movs	r2, #1
 8005900:	4053      	eors	r3, r2
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01d      	beq.n	8005944 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005908:	4b51      	ldr	r3, [pc, #324]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 800590a:	4a5b      	ldr	r2, [pc, #364]	@ (8005a78 <ESP_Upkeep+0x3fc>)
 800590c:	8811      	ldrh	r1, [r2, #0]
 800590e:	8019      	strh	r1, [r3, #0]
 8005910:	7892      	ldrb	r2, [r2, #2]
 8005912:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005914:	4b3f      	ldr	r3, [pc, #252]	@ (8005a14 <ESP_Upkeep+0x398>)
 8005916:	2204      	movs	r2, #4
 8005918:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800591a:	4b51      	ldr	r3, [pc, #324]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005920:	4b3f      	ldr	r3, [pc, #252]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 8005922:	2202      	movs	r2, #2
 8005924:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005926:	f009 fc25 	bl	800f174 <HAL_GetTick>
 800592a:	0002      	movs	r2, r0
 800592c:	4b53      	ldr	r3, [pc, #332]	@ (8005a7c <ESP_Upkeep+0x400>)
 800592e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005930:	4b4b      	ldr	r3, [pc, #300]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	001a      	movs	r2, r3
 8005936:	4b46      	ldr	r3, [pc, #280]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 8005938:	5c9a      	ldrb	r2, [r3, r2]
 800593a:	4b38      	ldr	r3, [pc, #224]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 800593c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800593e:	4b39      	ldr	r3, [pc, #228]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005944:	4b43      	ldr	r3, [pc, #268]	@ (8005a54 <ESP_Upkeep+0x3d8>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d027      	beq.n	800599c <ESP_Upkeep+0x320>
 800594c:	4b45      	ldr	r3, [pc, #276]	@ (8005a64 <ESP_Upkeep+0x3e8>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d023      	beq.n	800599c <ESP_Upkeep+0x320>
 8005954:	4b45      	ldr	r3, [pc, #276]	@ (8005a6c <ESP_Upkeep+0x3f0>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01f      	beq.n	800599c <ESP_Upkeep+0x320>
 800595c:	4b45      	ldr	r3, [pc, #276]	@ (8005a74 <ESP_Upkeep+0x3f8>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01b      	beq.n	800599c <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005964:	4b46      	ldr	r3, [pc, #280]	@ (8005a80 <ESP_Upkeep+0x404>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4b39      	ldr	r3, [pc, #228]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 800596a:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800596c:	4b29      	ldr	r3, [pc, #164]	@ (8005a14 <ESP_Upkeep+0x398>)
 800596e:	2204      	movs	r2, #4
 8005970:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005972:	4b3b      	ldr	r3, [pc, #236]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005978:	4b29      	ldr	r3, [pc, #164]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 800597a:	2205      	movs	r2, #5
 800597c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800597e:	f009 fbf9 	bl	800f174 <HAL_GetTick>
 8005982:	0002      	movs	r2, r0
 8005984:	4b3d      	ldr	r3, [pc, #244]	@ (8005a7c <ESP_Upkeep+0x400>)
 8005986:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005988:	4b35      	ldr	r3, [pc, #212]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	001a      	movs	r2, r3
 800598e:	4b30      	ldr	r3, [pc, #192]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 8005990:	5c9a      	ldrb	r2, [r3, r2]
 8005992:	4b22      	ldr	r3, [pc, #136]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 8005994:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005996:	4b23      	ldr	r3, [pc, #140]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 800599c:	4b39      	ldr	r3, [pc, #228]	@ (8005a84 <ESP_Upkeep+0x408>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d100      	bne.n	80059a6 <ESP_Upkeep+0x32a>
 80059a4:	e2e3      	b.n	8005f6e <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80059a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 80059a8:	4a37      	ldr	r2, [pc, #220]	@ (8005a88 <ESP_Upkeep+0x40c>)
 80059aa:	6811      	ldr	r1, [r2, #0]
 80059ac:	6019      	str	r1, [r3, #0]
 80059ae:	7912      	ldrb	r2, [r2, #4]
 80059b0:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80059b2:	4a36      	ldr	r2, [pc, #216]	@ (8005a8c <ESP_Upkeep+0x410>)
 80059b4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <ESP_Upkeep+0x3b0>)
 80059b6:	0019      	movs	r1, r3
 80059b8:	2003      	movs	r0, #3
 80059ba:	f008 ff97 	bl	800e8ec <CreateLine>
        DisableConnectedDevices();
 80059be:	f003 f959 	bl	8008c74 <DisableConnectedDevices>
        usblog = false;
 80059c2:	4b33      	ldr	r3, [pc, #204]	@ (8005a90 <ESP_Upkeep+0x414>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80059c8:	4b12      	ldr	r3, [pc, #72]	@ (8005a14 <ESP_Upkeep+0x398>)
 80059ca:	2204      	movs	r2, #4
 80059cc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80059ce:	4b24      	ldr	r3, [pc, #144]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80059d4:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 80059d6:	2203      	movs	r2, #3
 80059d8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059da:	4b21      	ldr	r3, [pc, #132]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	001a      	movs	r2, r3
 80059e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 80059e2:	5c9a      	ldrb	r2, [r3, r2]
 80059e4:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 80059e6:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
      }
    break;
 80059ee:	e2be      	b.n	8005f6e <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 80059f0:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	1dfc      	adds	r4, r7, #7
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7ff fb46 	bl	8005088 <AT_Send>
 80059fc:	0003      	movs	r3, r0
 80059fe:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005a00:	1dfb      	adds	r3, r7, #7
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d100      	bne.n	8005a0a <ESP_Upkeep+0x38e>
 8005a08:	e2b3      	b.n	8005f72 <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005a0a:	4b02      	ldr	r3, [pc, #8]	@ (8005a14 <ESP_Upkeep+0x398>)
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005a10:	e2af      	b.n	8005f72 <ESP_Upkeep+0x8f6>
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	20000030 	.word	0x20000030
 8005a18:	20000002 	.word	0x20000002
 8005a1c:	2000061e 	.word	0x2000061e
 8005a20:	2000061f 	.word	0x2000061f
 8005a24:	2000061d 	.word	0x2000061d
 8005a28:	0802414c 	.word	0x0802414c
 8005a2c:	08023598 	.word	0x08023598
 8005a30:	08025a70 	.word	0x08025a70
 8005a34:	2000054c 	.word	0x2000054c
 8005a38:	50000800 	.word	0x50000800
 8005a3c:	50001c00 	.word	0x50001c00
 8005a40:	20000618 	.word	0x20000618
 8005a44:	2000044c 	.word	0x2000044c
 8005a48:	20000764 	.word	0x20000764
 8005a4c:	20000033 	.word	0x20000033
 8005a50:	20000608 	.word	0x20000608
 8005a54:	2000054d 	.word	0x2000054d
 8005a58:	2000054e 	.word	0x2000054e
 8005a5c:	20000004 	.word	0x20000004
 8005a60:	20000612 	.word	0x20000612
 8005a64:	20000550 	.word	0x20000550
 8005a68:	20000014 	.word	0x20000014
 8005a6c:	20000551 	.word	0x20000551
 8005a70:	20000010 	.word	0x20000010
 8005a74:	20000001 	.word	0x20000001
 8005a78:	2000000c 	.word	0x2000000c
 8005a7c:	20000564 	.word	0x20000564
 8005a80:	20000024 	.word	0x20000024
 8005a84:	2000054f 	.word	0x2000054f
 8005a88:	2000001c 	.word	0x2000001c
 8005a8c:	08024178 	.word	0x08024178
 8005a90:	200001f7 	.word	0x200001f7

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005a94:	4bc9      	ldr	r3, [pc, #804]	@ (8005dbc <ESP_Upkeep+0x740>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <ESP_Upkeep+0x430>
 8005a9c:	4bc8      	ldr	r3, [pc, #800]	@ (8005dc0 <ESP_Upkeep+0x744>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d003      	beq.n	8005aac <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 8005aa4:	4bc7      	ldr	r3, [pc, #796]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005aa6:	220b      	movs	r2, #11
 8005aa8:	701a      	strb	r2, [r3, #0]
        break;
 8005aaa:	e269      	b.n	8005f80 <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8005aac:	4bc6      	ldr	r3, [pc, #792]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f008 fec5 	bl	800e840 <TimestampIsReached>
 8005ab6:	1e03      	subs	r3, r0, #0
 8005ab8:	d100      	bne.n	8005abc <ESP_Upkeep+0x440>
 8005aba:	e25c      	b.n	8005f76 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005abc:	4bc3      	ldr	r3, [pc, #780]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f7ff f99f 	bl	8004e04 <DMA_ProcessBuffer>
 8005ac6:	0003      	movs	r3, r0
 8005ac8:	001a      	movs	r2, r3
 8005aca:	4bc1      	ldr	r3, [pc, #772]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005acc:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005ace:	4bc0      	ldr	r3, [pc, #768]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005ad0:	781a      	ldrb	r2, [r3, #0]
 8005ad2:	4bbe      	ldr	r3, [pc, #760]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	1d7c      	adds	r4, r7, #5
 8005ad8:	0019      	movs	r1, r3
 8005ada:	0010      	movs	r0, r2
 8005adc:	f7ff fa92 	bl	8005004 <ATCompare>
 8005ae0:	0003      	movs	r3, r0
 8005ae2:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005ae4:	4bba      	ldr	r3, [pc, #744]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d138      	bne.n	8005b5e <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005aec:	4bb9      	ldr	r3, [pc, #740]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b0f      	cmp	r3, #15
 8005af2:	d108      	bne.n	8005b06 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005af4:	4bb7      	ldr	r3, [pc, #732]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005af6:	220e      	movs	r2, #14
 8005af8:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005afa:	4bb4      	ldr	r3, [pc, #720]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005afc:	2202      	movs	r2, #2
 8005afe:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005b00:	4bb5      	ldr	r3, [pc, #724]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005b06:	4baf      	ldr	r3, [pc, #700]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005b08:	2204      	movs	r2, #4
 8005b0a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005b0c:	4bb3      	ldr	r3, [pc, #716]	@ (8005ddc <ESP_Upkeep+0x760>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	4bb1      	ldr	r3, [pc, #708]	@ (8005ddc <ESP_Upkeep+0x760>)
 8005b16:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005b18:	4bb0      	ldr	r3, [pc, #704]	@ (8005ddc <ESP_Upkeep+0x760>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d91e      	bls.n	8005b5e <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005b20:	f009 fb28 	bl	800f174 <HAL_GetTick>
 8005b24:	0003      	movs	r3, r0
 8005b26:	4aae      	ldr	r2, [pc, #696]	@ (8005de0 <ESP_Upkeep+0x764>)
 8005b28:	189a      	adds	r2, r3, r2
 8005b2a:	4ba7      	ldr	r3, [pc, #668]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005b2c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005b2e:	4bad      	ldr	r3, [pc, #692]	@ (8005de4 <ESP_Upkeep+0x768>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005b34:	f7ff fa58 	bl	8004fe8 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b38:	f009 fb1c 	bl	800f174 <HAL_GetTick>
 8005b3c:	0002      	movs	r2, r0
 8005b3e:	4baa      	ldr	r3, [pc, #680]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005b40:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005b42:	4ba9      	ldr	r3, [pc, #676]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4ba9      	ldr	r3, [pc, #676]	@ (8005dec <ESP_Upkeep+0x770>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	4aa8      	ldr	r2, [pc, #672]	@ (8005df0 <ESP_Upkeep+0x774>)
 8005b4e:	49a9      	ldr	r1, [pc, #676]	@ (8005df4 <ESP_Upkeep+0x778>)
 8005b50:	2001      	movs	r0, #1
 8005b52:	f008 fecb 	bl	800e8ec <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b56:	4b9b      	ldr	r3, [pc, #620]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005b58:	220d      	movs	r2, #13
 8005b5a:	701a      	strb	r2, [r3, #0]
            break;
 8005b5c:	e210      	b.n	8005f80 <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d106      	bne.n	8005b74 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005b66:	f009 fb05 	bl	800f174 <HAL_GetTick>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	330a      	adds	r3, #10
 8005b6e:	001a      	movs	r2, r3
 8005b70:	4b95      	ldr	r3, [pc, #596]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005b72:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005b74:	4b96      	ldr	r3, [pc, #600]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b0a      	cmp	r3, #10
 8005b7a:	d106      	bne.n	8005b8a <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005b7c:	f009 fafa 	bl	800f174 <HAL_GetTick>
 8005b80:	0003      	movs	r3, r0
 8005b82:	330a      	adds	r3, #10
 8005b84:	001a      	movs	r2, r3
 8005b86:	4b90      	ldr	r3, [pc, #576]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005b88:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005b8a:	4b91      	ldr	r3, [pc, #580]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d14b      	bne.n	8005c2a <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8005b92:	4b99      	ldr	r3, [pc, #612]	@ (8005df8 <ESP_Upkeep+0x77c>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	3301      	adds	r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4b97      	ldr	r3, [pc, #604]	@ (8005df8 <ESP_Upkeep+0x77c>)
 8005b9c:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8005b9e:	4a97      	ldr	r2, [pc, #604]	@ (8005dfc <ESP_Upkeep+0x780>)
 8005ba0:	4b94      	ldr	r3, [pc, #592]	@ (8005df4 <ESP_Upkeep+0x778>)
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	f008 fea1 	bl	800e8ec <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8005baa:	4b93      	ldr	r3, [pc, #588]	@ (8005df8 <ESP_Upkeep+0x77c>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d924      	bls.n	8005bfc <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8005bb2:	f009 fadf 	bl	800f174 <HAL_GetTick>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	4a91      	ldr	r2, [pc, #580]	@ (8005e00 <ESP_Upkeep+0x784>)
 8005bba:	189a      	adds	r2, r3, r2
 8005bbc:	4b82      	ldr	r3, [pc, #520]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005bbe:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005bc0:	4b88      	ldr	r3, [pc, #544]	@ (8005de4 <ESP_Upkeep+0x768>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005bc6:	f7ff fa0f 	bl	8004fe8 <clearDMABuffer>
            stop = HAL_GetTick();
 8005bca:	f009 fad3 	bl	800f174 <HAL_GetTick>
 8005bce:	0002      	movs	r2, r0
 8005bd0:	4b85      	ldr	r3, [pc, #532]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005bd2:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005bd4:	4b84      	ldr	r3, [pc, #528]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	4b84      	ldr	r3, [pc, #528]	@ (8005dec <ESP_Upkeep+0x770>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	4a89      	ldr	r2, [pc, #548]	@ (8005e04 <ESP_Upkeep+0x788>)
 8005be0:	4984      	ldr	r1, [pc, #528]	@ (8005df4 <ESP_Upkeep+0x778>)
 8005be2:	2001      	movs	r0, #1
 8005be4:	f008 fe82 	bl	800e8ec <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005be8:	4b76      	ldr	r3, [pc, #472]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005bea:	220d      	movs	r2, #13
 8005bec:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005bee:	4b79      	ldr	r3, [pc, #484]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005bf0:	2214      	movs	r2, #20
 8005bf2:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005bf4:	4b75      	ldr	r3, [pc, #468]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
            break;
 8005bfa:	e1c1      	b.n	8005f80 <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005bfc:	4b75      	ldr	r3, [pc, #468]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b0f      	cmp	r3, #15
 8005c02:	d003      	beq.n	8005c0c <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005c04:	4b6f      	ldr	r3, [pc, #444]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005c06:	2204      	movs	r2, #4
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	e00e      	b.n	8005c2a <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005c0c:	4b71      	ldr	r3, [pc, #452]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c0e:	220e      	movs	r2, #14
 8005c10:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005c12:	4b71      	ldr	r3, [pc, #452]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005c1c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005c1e:	4b6b      	ldr	r3, [pc, #428]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005c20:	2202      	movs	r2, #2
 8005c22:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005c24:	4b67      	ldr	r3, [pc, #412]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005c26:	2204      	movs	r2, #4
 8005c28:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005c2a:	1d7b      	adds	r3, r7, #5
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d100      	bne.n	8005c34 <ESP_Upkeep+0x5b8>
 8005c32:	e1a0      	b.n	8005f76 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005c34:	4b63      	ldr	r3, [pc, #396]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005c36:	2205      	movs	r2, #5
 8005c38:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005c3a:	e19c      	b.n	8005f76 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005c3c:	4b66      	ldr	r3, [pc, #408]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	3301      	adds	r3, #1
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	4b64      	ldr	r3, [pc, #400]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005c46:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005c48:	4b63      	ldr	r3, [pc, #396]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	001a      	movs	r2, r3
 8005c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8005e08 <ESP_Upkeep+0x78c>)
 8005c50:	5c9a      	ldrb	r2, [r3, r2]
 8005c52:	4b60      	ldr	r3, [pc, #384]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c54:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005c56:	4b5f      	ldr	r3, [pc, #380]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d102      	bne.n	8005c64 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005c64:	4b5b      	ldr	r3, [pc, #364]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b0e      	cmp	r3, #14
 8005c6a:	d102      	bne.n	8005c72 <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005c6c:	4b57      	ldr	r3, [pc, #348]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005c6e:	2202      	movs	r2, #2
 8005c70:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005c72:	4b58      	ldr	r3, [pc, #352]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b0e      	cmp	r3, #14
 8005c78:	d006      	beq.n	8005c88 <ESP_Upkeep+0x60c>
 8005c7a:	4b56      	ldr	r3, [pc, #344]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d002      	beq.n	8005c88 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005c82:	4b52      	ldr	r3, [pc, #328]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005c88:	4b52      	ldr	r3, [pc, #328]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b11      	cmp	r3, #17
 8005c8e:	d102      	bne.n	8005c96 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005c90:	4b4e      	ldr	r3, [pc, #312]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005c92:	2205      	movs	r2, #5
 8005c94:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005c96:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005c98:	2204      	movs	r2, #4
 8005c9a:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b14      	cmp	r3, #20
 8005ca2:	d000      	beq.n	8005ca6 <ESP_Upkeep+0x62a>
 8005ca4:	e169      	b.n	8005f7a <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005ca6:	4b46      	ldr	r3, [pc, #280]	@ (8005dc0 <ESP_Upkeep+0x744>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d124      	bne.n	8005cf8 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005cae:	f009 fa61 	bl	800f174 <HAL_GetTick>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8005de0 <ESP_Upkeep+0x764>)
 8005cb6:	189a      	adds	r2, r3, r2
 8005cb8:	4b43      	ldr	r3, [pc, #268]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005cba:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005cbc:	f7ff f994 	bl	8004fe8 <clearDMABuffer>
          stop = HAL_GetTick();
 8005cc0:	f009 fa58 	bl	800f174 <HAL_GetTick>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	4b48      	ldr	r3, [pc, #288]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005cc8:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005cca:	4b47      	ldr	r3, [pc, #284]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b47      	ldr	r3, [pc, #284]	@ (8005dec <ESP_Upkeep+0x770>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	4a4d      	ldr	r2, [pc, #308]	@ (8005e0c <ESP_Upkeep+0x790>)
 8005cd6:	494e      	ldr	r1, [pc, #312]	@ (8005e10 <ESP_Upkeep+0x794>)
 8005cd8:	2002      	movs	r0, #2
 8005cda:	f008 fe07 	bl	800e8ec <CreateLine>
          ResetdBAmax();
 8005cde:	f002 ffe7 	bl	8008cb0 <ResetdBAmax>
          resetMaxMeasurementValues();
 8005ce2:	f7fd fe15 	bl	8003910 <resetMaxMeasurementValues>
          showTime();
 8005ce6:	f000 fcdf 	bl	80066a8 <showTime>
          ESPTransmitDone = true;
 8005cea:	4b3e      	ldr	r3, [pc, #248]	@ (8005de4 <ESP_Upkeep+0x768>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005cf0:	4b34      	ldr	r3, [pc, #208]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005cf2:	220d      	movs	r2, #13
 8005cf4:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005cf6:	e140      	b.n	8005f7a <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005cf8:	4b31      	ldr	r3, [pc, #196]	@ (8005dc0 <ESP_Upkeep+0x744>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b05      	cmp	r3, #5
 8005cfe:	d12c      	bne.n	8005d5a <ESP_Upkeep+0x6de>
            setTime = false;
 8005d00:	4b44      	ldr	r3, [pc, #272]	@ (8005e14 <ESP_Upkeep+0x798>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005d06:	f009 fa35 	bl	800f174 <HAL_GetTick>
 8005d0a:	0003      	movs	r3, r0
 8005d0c:	4a42      	ldr	r2, [pc, #264]	@ (8005e18 <ESP_Upkeep+0x79c>)
 8005d0e:	189a      	adds	r2, r3, r2
 8005d10:	4b42      	ldr	r3, [pc, #264]	@ (8005e1c <ESP_Upkeep+0x7a0>)
 8005d12:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005d14:	4b41      	ldr	r3, [pc, #260]	@ (8005e1c <ESP_Upkeep+0x7a0>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a41      	ldr	r2, [pc, #260]	@ (8005e20 <ESP_Upkeep+0x7a4>)
 8005d1a:	493d      	ldr	r1, [pc, #244]	@ (8005e10 <ESP_Upkeep+0x794>)
 8005d1c:	2002      	movs	r0, #2
 8005d1e:	f008 fde5 	bl	800e8ec <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005d22:	4b40      	ldr	r3, [pc, #256]	@ (8005e24 <ESP_Upkeep+0x7a8>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4b28      	ldr	r3, [pc, #160]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005d28:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005d2a:	f7ff f95d 	bl	8004fe8 <clearDMABuffer>
            stop = HAL_GetTick();
 8005d2e:	f009 fa21 	bl	800f174 <HAL_GetTick>
 8005d32:	0002      	movs	r2, r0
 8005d34:	4b2c      	ldr	r3, [pc, #176]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005d36:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005d38:	4b2b      	ldr	r3, [pc, #172]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dec <ESP_Upkeep+0x770>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	4a39      	ldr	r2, [pc, #228]	@ (8005e28 <ESP_Upkeep+0x7ac>)
 8005d44:	4932      	ldr	r1, [pc, #200]	@ (8005e10 <ESP_Upkeep+0x794>)
 8005d46:	2002      	movs	r0, #2
 8005d48:	f008 fdd0 	bl	800e8ec <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005d4e:	220d      	movs	r2, #13
 8005d50:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005d52:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc0 <ESP_Upkeep+0x744>)
 8005d54:	2202      	movs	r2, #2
 8005d56:	701a      	strb	r2, [r3, #0]
    break;
 8005d58:	e10f      	b.n	8005f7a <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005d5c:	2209      	movs	r2, #9
 8005d5e:	701a      	strb	r2, [r3, #0]
    break;
 8005d60:	e10b      	b.n	8005f7a <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005d62:	4b32      	ldr	r3, [pc, #200]	@ (8005e2c <ESP_Upkeep+0x7b0>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005d68:	4b31      	ldr	r3, [pc, #196]	@ (8005e30 <ESP_Upkeep+0x7b4>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f00a fc91 	bl	8010696 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005d74:	2001      	movs	r0, #1
 8005d76:	f009 fa07 	bl	800f188 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005d7a:	2380      	movs	r3, #128	@ 0x80
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	482d      	ldr	r0, [pc, #180]	@ (8005e34 <ESP_Upkeep+0x7b8>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	0019      	movs	r1, r3
 8005d84:	f00a fc87 	bl	8010696 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005d88:	2001      	movs	r0, #1
 8005d8a:	f009 f9fd 	bl	800f188 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005d8e:	4b28      	ldr	r3, [pc, #160]	@ (8005e30 <ESP_Upkeep+0x7b4>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	2102      	movs	r1, #2
 8005d94:	0018      	movs	r0, r3
 8005d96:	f00a fc7e 	bl	8010696 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005d9c:	2209      	movs	r2, #9
 8005d9e:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005da0:	f002 ff3e 	bl	8008c20 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005da4:	2001      	movs	r0, #1
 8005da6:	f009 f9ef 	bl	800f188 <HAL_Delay>
      ResetESPIndicator();
 8005daa:	f007 fca5 	bl	800d6f8 <ResetESPIndicator>
      errorcntr = 0;
 8005dae:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <ESP_Upkeep+0x760>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005db4:	4b10      	ldr	r3, [pc, #64]	@ (8005df8 <ESP_Upkeep+0x77c>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
      break;
 8005dba:	e0e1      	b.n	8005f80 <ESP_Upkeep+0x904>
 8005dbc:	2000054f 	.word	0x2000054f
 8005dc0:	2000061f 	.word	0x2000061f
 8005dc4:	20000030 	.word	0x20000030
 8005dc8:	20000618 	.word	0x20000618
 8005dcc:	2000061d 	.word	0x2000061d
 8005dd0:	20000033 	.word	0x20000033
 8005dd4:	2000061e 	.word	0x2000061e
 8005dd8:	20000612 	.word	0x20000612
 8005ddc:	20000613 	.word	0x20000613
 8005de0:	0003a980 	.word	0x0003a980
 8005de4:	20000554 	.word	0x20000554
 8005de8:	20000568 	.word	0x20000568
 8005dec:	20000564 	.word	0x20000564
 8005df0:	080241a8 	.word	0x080241a8
 8005df4:	080235bc 	.word	0x080235bc
 8005df8:	20000614 	.word	0x20000614
 8005dfc:	080241dc 	.word	0x080241dc
 8005e00:	0000c350 	.word	0x0000c350
 8005e04:	08024218 	.word	0x08024218
 8005e08:	20000608 	.word	0x20000608
 8005e0c:	08024248 	.word	0x08024248
 8005e10:	08024260 	.word	0x08024260
 8005e14:	20000001 	.word	0x20000001
 8005e18:	047e7c4f 	.word	0x047e7c4f
 8005e1c:	20000028 	.word	0x20000028
 8005e20:	08024264 	.word	0x08024264
 8005e24:	2000002c 	.word	0x2000002c
 8005e28:	080242a8 	.word	0x080242a8
 8005e2c:	2000054c 	.word	0x2000054c
 8005e30:	50001c00 	.word	0x50001c00
 8005e34:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005e38:	4b54      	ldr	r3, [pc, #336]	@ (8005f8c <ESP_Upkeep+0x910>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f008 fcff 	bl	800e840 <TimestampIsReached>
 8005e42:	1e03      	subs	r3, r0, #0
 8005e44:	d103      	bne.n	8005e4e <ESP_Upkeep+0x7d2>
 8005e46:	4b52      	ldr	r3, [pc, #328]	@ (8005f90 <ESP_Upkeep+0x914>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d043      	beq.n	8005ed6 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005e4e:	4b51      	ldr	r3, [pc, #324]	@ (8005f94 <ESP_Upkeep+0x918>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005e54:	4b50      	ldr	r3, [pc, #320]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8005f9c <ESP_Upkeep+0x920>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005e62:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005e64:	220b      	movs	r2, #11
 8005e66:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005e68:	4b4b      	ldr	r3, [pc, #300]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d108      	bne.n	8005e82 <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005e70:	4b4c      	ldr	r3, [pc, #304]	@ (8005fa4 <ESP_Upkeep+0x928>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005e76:	4b4c      	ldr	r3, [pc, #304]	@ (8005fa8 <ESP_Upkeep+0x92c>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005e7c:	4b48      	ldr	r3, [pc, #288]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005e7e:	220b      	movs	r2, #11
 8005e80:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005e82:	4b45      	ldr	r3, [pc, #276]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d102      	bne.n	8005e90 <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005e8a:	4b45      	ldr	r3, [pc, #276]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005e90:	4b41      	ldr	r3, [pc, #260]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d108      	bne.n	8005eaa <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005e98:	4b41      	ldr	r3, [pc, #260]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005e9a:	220e      	movs	r2, #14
 8005e9c:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005e9e:	4a43      	ldr	r2, [pc, #268]	@ (8005fac <ESP_Upkeep+0x930>)
 8005ea0:	4b43      	ldr	r3, [pc, #268]	@ (8005fb0 <ESP_Upkeep+0x934>)
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	2002      	movs	r0, #2
 8005ea6:	f008 fd21 	bl	800e8ec <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d105      	bne.n	8005ebe <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005eb4:	220b      	movs	r2, #11
 8005eb6:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb4 <ESP_Upkeep+0x938>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ebe:	4b34      	ldr	r3, [pc, #208]	@ (8005f90 <ESP_Upkeep+0x914>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d020      	beq.n	8005f08 <ESP_Upkeep+0x88c>
 8005ec6:	4b34      	ldr	r3, [pc, #208]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d01c      	beq.n	8005f08 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005ece:	4b34      	ldr	r3, [pc, #208]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ed4:	e018      	b.n	8005f08 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005ed6:	4b38      	ldr	r3, [pc, #224]	@ (8005fb8 <ESP_Upkeep+0x93c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	0018      	movs	r0, r3
 8005edc:	f008 fcb0 	bl	800e840 <TimestampIsReached>
 8005ee0:	1e03      	subs	r3, r0, #0
 8005ee2:	d04c      	beq.n	8005f7e <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8005ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d148      	bne.n	8005f7e <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 8005eec:	4b2a      	ldr	r3, [pc, #168]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005eee:	2205      	movs	r2, #5
 8005ef0:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005ef8:	4b24      	ldr	r3, [pc, #144]	@ (8005f8c <ESP_Upkeep+0x910>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b2f      	ldr	r3, [pc, #188]	@ (8005fbc <ESP_Upkeep+0x940>)
 8005efe:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005f00:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc0 <ESP_Upkeep+0x944>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005f06:	e03a      	b.n	8005f7e <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005f08:	46c0      	nop			@ (mov r8, r8)
      break;
 8005f0a:	e038      	b.n	8005f7e <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc4 <ESP_Upkeep+0x948>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2201      	movs	r2, #1
 8005f12:	4053      	eors	r3, r2
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 8005f1a:	4a24      	ldr	r2, [pc, #144]	@ (8005fac <ESP_Upkeep+0x930>)
 8005f1c:	4b24      	ldr	r3, [pc, #144]	@ (8005fb0 <ESP_Upkeep+0x934>)
 8005f1e:	0019      	movs	r1, r3
 8005f20:	2002      	movs	r0, #2
 8005f22:	f008 fce3 	bl	800e8ec <CreateLine>
        msgdone = true;
 8005f26:	4b27      	ldr	r3, [pc, #156]	@ (8005fc4 <ESP_Upkeep+0x948>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005f2c:	f017 f962 	bl	801d1f4 <GetUsbRxPointer>
 8005f30:	0003      	movs	r3, r0
 8005f32:	0018      	movs	r0, r3
 8005f34:	f000 f8c0 	bl	80060b8 <Process_PC_Config>
      break;
 8005f38:	e022      	b.n	8005f80 <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005f3a:	4a23      	ldr	r2, [pc, #140]	@ (8005fc8 <ESP_Upkeep+0x94c>)
 8005f3c:	4b23      	ldr	r3, [pc, #140]	@ (8005fcc <ESP_Upkeep+0x950>)
 8005f3e:	0019      	movs	r1, r3
 8005f40:	2001      	movs	r0, #1
 8005f42:	f008 fcd3 	bl	800e8ec <CreateLine>
      EspState = ESP_STATE_INIT;
 8005f46:	4b16      	ldr	r3, [pc, #88]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005f48:	2202      	movs	r2, #2
 8005f4a:	701a      	strb	r2, [r3, #0]
      break;
 8005f4c:	e018      	b.n	8005f80 <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005f4e:	4a20      	ldr	r2, [pc, #128]	@ (8005fd0 <ESP_Upkeep+0x954>)
 8005f50:	4b1e      	ldr	r3, [pc, #120]	@ (8005fcc <ESP_Upkeep+0x950>)
 8005f52:	0019      	movs	r1, r3
 8005f54:	2001      	movs	r0, #1
 8005f56:	f008 fcc9 	bl	800e8ec <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005f5a:	4b11      	ldr	r3, [pc, #68]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005f5c:	2207      	movs	r2, #7
 8005f5e:	701a      	strb	r2, [r3, #0]
      break;
 8005f60:	e00e      	b.n	8005f80 <ESP_Upkeep+0x904>
      break;
 8005f62:	46c0      	nop			@ (mov r8, r8)
 8005f64:	e00c      	b.n	8005f80 <ESP_Upkeep+0x904>
      break;
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	e00a      	b.n	8005f80 <ESP_Upkeep+0x904>
        break;
 8005f6a:	46c0      	nop			@ (mov r8, r8)
 8005f6c:	e008      	b.n	8005f80 <ESP_Upkeep+0x904>
    break;
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	e006      	b.n	8005f80 <ESP_Upkeep+0x904>
    break;
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	e004      	b.n	8005f80 <ESP_Upkeep+0x904>
      break;
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	e002      	b.n	8005f80 <ESP_Upkeep+0x904>
    break;
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	e000      	b.n	8005f80 <ESP_Upkeep+0x904>
      break;
 8005f7e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005f80:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
}
 8005f84:	0018      	movs	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b002      	add	sp, #8
 8005f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f8c:	20000618 	.word	0x20000618
 8005f90:	2000054f 	.word	0x2000054f
 8005f94:	20000554 	.word	0x20000554
 8005f98:	2000061f 	.word	0x2000061f
 8005f9c:	2000054d 	.word	0x2000054d
 8005fa0:	20000030 	.word	0x20000030
 8005fa4:	20000550 	.word	0x20000550
 8005fa8:	20000552 	.word	0x20000552
 8005fac:	080242c8 	.word	0x080242c8
 8005fb0:	08024260 	.word	0x08024260
 8005fb4:	20000551 	.word	0x20000551
 8005fb8:	20000028 	.word	0x20000028
 8005fbc:	2000002c 	.word	0x2000002c
 8005fc0:	20000001 	.word	0x20000001
 8005fc4:	20000553 	.word	0x20000553
 8005fc8:	080242e0 	.word	0x080242e0
 8005fcc:	080235bc 	.word	0x080235bc
 8005fd0:	080242f4 	.word	0x080242f4

08005fd4 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005fdc:	4b09      	ldr	r3, [pc, #36]	@ (8006004 <I2CSensors_Init+0x30>)
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005fe2:	4a09      	ldr	r2, [pc, #36]	@ (8006008 <I2CSensors_Init+0x34>)
 8005fe4:	4b09      	ldr	r3, [pc, #36]	@ (800600c <I2CSensors_Init+0x38>)
 8005fe6:	0011      	movs	r1, r2
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f008 fde3 	bl	800ebb4 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005fee:	4a06      	ldr	r2, [pc, #24]	@ (8006008 <I2CSensors_Init+0x34>)
 8005ff0:	4b06      	ldr	r3, [pc, #24]	@ (800600c <I2CSensors_Init+0x38>)
 8005ff2:	0011      	movs	r1, r2
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f005 fd6d 	bl	800bad4 <SGP_Init>
}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b002      	add	sp, #8
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	20000768 	.word	0x20000768
 8006008:	08006065 	.word	0x08006065
 800600c:	08006011 	.word	0x08006011

08006010 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006010:	b5b0      	push	{r4, r5, r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6039      	str	r1, [r7, #0]
 8006018:	0011      	movs	r1, r2
 800601a:	1dfb      	adds	r3, r7, #7
 800601c:	1c02      	adds	r2, r0, #0
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	1dbb      	adds	r3, r7, #6
 8006022:	1c0a      	adds	r2, r1, #0
 8006024:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006026:	4b0e      	ldr	r3, [pc, #56]	@ (8006060 <ReadI2C+0x50>)
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	1dfb      	adds	r3, r7, #7
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	18db      	adds	r3, r3, r3
 8006032:	b299      	uxth	r1, r3
 8006034:	1dbb      	adds	r3, r7, #6
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	250f      	movs	r5, #15
 800603c:	197c      	adds	r4, r7, r5
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	f00a ff0e 	bl	8010e60 <HAL_I2C_Master_Receive_DMA>
 8006044:	0003      	movs	r3, r0
 8006046:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006048:	197b      	adds	r3, r7, r5
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <ReadI2C+0x44>
        return false;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <ReadI2C+0x46>
    }
    return true;
 8006054:	2301      	movs	r3, #1
}
 8006056:	0018      	movs	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	b004      	add	sp, #16
 800605c:	bdb0      	pop	{r4, r5, r7, pc}
 800605e:	46c0      	nop			@ (mov r8, r8)
 8006060:	20000768 	.word	0x20000768

08006064 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006064:	b5b0      	push	{r4, r5, r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6039      	str	r1, [r7, #0]
 800606c:	0011      	movs	r1, r2
 800606e:	1dfb      	adds	r3, r7, #7
 8006070:	1c02      	adds	r2, r0, #0
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	1dbb      	adds	r3, r7, #6
 8006076:	1c0a      	adds	r2, r1, #0
 8006078:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800607a:	4b0e      	ldr	r3, [pc, #56]	@ (80060b4 <WriteI2C+0x50>)
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	1dfb      	adds	r3, r7, #7
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	18db      	adds	r3, r3, r3
 8006086:	b299      	uxth	r1, r3
 8006088:	1dbb      	adds	r3, r7, #6
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	250f      	movs	r5, #15
 8006090:	197c      	adds	r4, r7, r5
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	f00a fdde 	bl	8010c54 <HAL_I2C_Master_Transmit_DMA>
 8006098:	0003      	movs	r3, r0
 800609a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800609c:	197b      	adds	r3, r7, r5
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <WriteI2C+0x44>
        return false;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <WriteI2C+0x46>
    }
    return true;
 80060a8:	2301      	movs	r3, #1
}
 80060aa:	0018      	movs	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b004      	add	sp, #16
 80060b0:	bdb0      	pop	{r4, r5, r7, pc}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	20000768 	.word	0x20000768

080060b8 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b0c3      	sub	sp, #268	@ 0x10c
 80060bc:	af3e      	add	r7, sp, #248	@ 0xf8
 80060be:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80060c0:	f017 f8b8 	bl	801d234 <GetUsbRxDataSize>
 80060c4:	0003      	movs	r3, r0
 80060c6:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d971      	bls.n	80061b2 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2123      	movs	r1, #35	@ 0x23
 80060d2:	0018      	movs	r0, r3
 80060d4:	f01a faae 	bl	8020634 <strchr>
 80060d8:	0003      	movs	r3, r0
 80060da:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d065      	beq.n	80061ae <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	785a      	ldrb	r2, [r3, #1]
 80060e6:	4b34      	ldr	r3, [pc, #208]	@ (80061b8 <Process_PC_Config+0x100>)
 80060e8:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	789a      	ldrb	r2, [r3, #2]
 80060ee:	4b32      	ldr	r3, [pc, #200]	@ (80061b8 <Process_PC_Config+0x100>)
 80060f0:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80060f2:	4b31      	ldr	r3, [pc, #196]	@ (80061b8 <Process_PC_Config+0x100>)
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	3305      	adds	r3, #5
 80060f8:	001a      	movs	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d351      	bcc.n	80061a4 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	1cd9      	adds	r1, r3, #3
 8006104:	4b2c      	ldr	r3, [pc, #176]	@ (80061b8 <Process_PC_Config+0x100>)
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	001a      	movs	r2, r3
 800610a:	4b2c      	ldr	r3, [pc, #176]	@ (80061bc <Process_PC_Config+0x104>)
 800610c:	0018      	movs	r0, r3
 800610e:	f01a fb65 	bl	80207dc <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8006112:	4b29      	ldr	r3, [pc, #164]	@ (80061b8 <Process_PC_Config+0x100>)
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	3303      	adds	r3, #3
 8006118:	001a      	movs	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	189b      	adds	r3, r3, r2
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	b21a      	sxth	r2, r3
 8006124:	4b24      	ldr	r3, [pc, #144]	@ (80061b8 <Process_PC_Config+0x100>)
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	3304      	adds	r3, #4
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	18cb      	adds	r3, r1, r3
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	b21b      	sxth	r3, r3
 8006132:	4313      	orrs	r3, r2
 8006134:	b21b      	sxth	r3, r3
 8006136:	b299      	uxth	r1, r3
 8006138:	4a1f      	ldr	r2, [pc, #124]	@ (80061b8 <Process_PC_Config+0x100>)
 800613a:	2381      	movs	r3, #129	@ 0x81
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8006140:	4a1d      	ldr	r2, [pc, #116]	@ (80061b8 <Process_PC_Config+0x100>)
 8006142:	2381      	movs	r3, #129	@ 0x81
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	5ad4      	ldrh	r4, [r2, r3]
 8006148:	4b1b      	ldr	r3, [pc, #108]	@ (80061b8 <Process_PC_Config+0x100>)
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	3303      	adds	r3, #3
 800614e:	b29a      	uxth	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	0011      	movs	r1, r2
 8006154:	0018      	movs	r0, r3
 8006156:	f000 f975 	bl	8006444 <CRC16_ARC>
 800615a:	0003      	movs	r3, r0
 800615c:	429c      	cmp	r4, r3
 800615e:	d007      	beq.n	8006170 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8006160:	4b15      	ldr	r3, [pc, #84]	@ (80061b8 <Process_PC_Config+0x100>)
 8006162:	785a      	ldrb	r2, [r3, #1]
 8006164:	4b15      	ldr	r3, [pc, #84]	@ (80061bc <Process_PC_Config+0x104>)
 8006166:	0019      	movs	r1, r3
 8006168:	2001      	movs	r0, #1
 800616a:	f000 f919 	bl	80063a0 <Create_Message>
 800616e:	e016      	b.n	800619e <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8006170:	4c11      	ldr	r4, [pc, #68]	@ (80061b8 <Process_PC_Config+0x100>)
 8006172:	466b      	mov	r3, sp
 8006174:	0018      	movs	r0, r3
 8006176:	0023      	movs	r3, r4
 8006178:	3310      	adds	r3, #16
 800617a:	22f4      	movs	r2, #244	@ 0xf4
 800617c:	0019      	movs	r1, r3
 800617e:	f01a fb2d 	bl	80207dc <memcpy>
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	6861      	ldr	r1, [r4, #4]
 8006186:	68a2      	ldr	r2, [r4, #8]
 8006188:	68e3      	ldr	r3, [r4, #12]
 800618a:	f000 f819 	bl	80061c0 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <Process_PC_Config+0x100>)
 8006190:	7818      	ldrb	r0, [r3, #0]
 8006192:	4b09      	ldr	r3, [pc, #36]	@ (80061b8 <Process_PC_Config+0x100>)
 8006194:	785a      	ldrb	r2, [r3, #1]
 8006196:	4b09      	ldr	r3, [pc, #36]	@ (80061bc <Process_PC_Config+0x104>)
 8006198:	0019      	movs	r1, r3
 800619a:	f000 f901 	bl	80063a0 <Create_Message>
                }
                ResetUsbRxDataSize();
 800619e:	f017 f831 	bl	801d204 <ResetUsbRxDataSize>
                return;
 80061a2:	e006      	b.n	80061b2 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	0018      	movs	r0, r3
 80061a8:	f017 f84e 	bl	801d248 <GetUsbRxNextChunk>
 80061ac:	e001      	b.n	80061b2 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80061ae:	f017 f829 	bl	801d204 <ResetUsbRxDataSize>
        }
    }
}
 80061b2:	46bd      	mov	sp, r7
 80061b4:	b005      	add	sp, #20
 80061b6:	bd90      	pop	{r4, r7, pc}
 80061b8:	2000076c 	.word	0x2000076c
 80061bc:	2000076e 	.word	0x2000076e

080061c0 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80061c0:	b084      	sub	sp, #16
 80061c2:	b5b0      	push	{r4, r5, r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	2518      	movs	r5, #24
 80061ca:	197c      	adds	r4, r7, r5
 80061cc:	6020      	str	r0, [r4, #0]
 80061ce:	6061      	str	r1, [r4, #4]
 80061d0:	60a2      	str	r2, [r4, #8]
 80061d2:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 80061d4:	197b      	adds	r3, r7, r5
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80061da:	d100      	bne.n	80061de <ProcessCmd+0x1e>
 80061dc:	e09c      	b.n	8006318 <ProcessCmd+0x158>
 80061de:	dd00      	ble.n	80061e2 <ProcessCmd+0x22>
 80061e0:	e0bc      	b.n	800635c <ProcessCmd+0x19c>
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	dc0a      	bgt.n	80061fc <ProcessCmd+0x3c>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da00      	bge.n	80061ec <ProcessCmd+0x2c>
 80061ea:	e0b7      	b.n	800635c <ProcessCmd+0x19c>
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	d900      	bls.n	80061f2 <ProcessCmd+0x32>
 80061f0:	e0b4      	b.n	800635c <ProcessCmd+0x19c>
 80061f2:	009a      	lsls	r2, r3, #2
 80061f4:	4b5d      	ldr	r3, [pc, #372]	@ (800636c <ProcessCmd+0x1ac>)
 80061f6:	18d3      	adds	r3, r2, r3
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	469f      	mov	pc, r3
 80061fc:	2bfd      	cmp	r3, #253	@ 0xfd
 80061fe:	d100      	bne.n	8006202 <ProcessCmd+0x42>
 8006200:	e084      	b.n	800630c <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8006202:	e0ab      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006204:	2118      	movs	r1, #24
 8006206:	187b      	adds	r3, r7, r1
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	001a      	movs	r2, r3
 800620c:	187b      	adds	r3, r7, r1
 800620e:	1c99      	adds	r1, r3, #2
 8006210:	4857      	ldr	r0, [pc, #348]	@ (8006370 <ProcessCmd+0x1b0>)
 8006212:	230c      	movs	r3, #12
 8006214:	f001 f94c 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 8006218:	e0a0      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800621a:	2118      	movs	r1, #24
 800621c:	187b      	adds	r3, r7, r1
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	001a      	movs	r2, r3
 8006222:	187b      	adds	r3, r7, r1
 8006224:	1c99      	adds	r1, r3, #2
 8006226:	4853      	ldr	r0, [pc, #332]	@ (8006374 <ProcessCmd+0x1b4>)
 8006228:	230c      	movs	r3, #12
 800622a:	f001 f941 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 800622e:	e095      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006230:	2118      	movs	r1, #24
 8006232:	187b      	adds	r3, r7, r1
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	001a      	movs	r2, r3
 8006238:	187b      	adds	r3, r7, r1
 800623a:	1c99      	adds	r1, r3, #2
 800623c:	484e      	ldr	r0, [pc, #312]	@ (8006378 <ProcessCmd+0x1b8>)
 800623e:	230c      	movs	r3, #12
 8006240:	f001 f936 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 8006244:	e08a      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006246:	2118      	movs	r1, #24
 8006248:	187b      	adds	r3, r7, r1
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	001a      	movs	r2, r3
 800624e:	187b      	adds	r3, r7, r1
 8006250:	1c99      	adds	r1, r3, #2
 8006252:	484a      	ldr	r0, [pc, #296]	@ (800637c <ProcessCmd+0x1bc>)
 8006254:	230c      	movs	r3, #12
 8006256:	f001 f92b 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 800625a:	e07f      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800625c:	2118      	movs	r1, #24
 800625e:	187b      	adds	r3, r7, r1
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	001a      	movs	r2, r3
 8006264:	187b      	adds	r3, r7, r1
 8006266:	1c99      	adds	r1, r3, #2
 8006268:	4845      	ldr	r0, [pc, #276]	@ (8006380 <ProcessCmd+0x1c0>)
 800626a:	230c      	movs	r3, #12
 800626c:	f001 f920 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 8006270:	e074      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006272:	2118      	movs	r1, #24
 8006274:	187b      	adds	r3, r7, r1
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	001a      	movs	r2, r3
 800627a:	187b      	adds	r3, r7, r1
 800627c:	1c99      	adds	r1, r3, #2
 800627e:	4841      	ldr	r0, [pc, #260]	@ (8006384 <ProcessCmd+0x1c4>)
 8006280:	230c      	movs	r3, #12
 8006282:	f001 f915 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 8006286:	e069      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006288:	2118      	movs	r1, #24
 800628a:	187b      	adds	r3, r7, r1
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	001a      	movs	r2, r3
 8006290:	187b      	adds	r3, r7, r1
 8006292:	1c99      	adds	r1, r3, #2
 8006294:	483c      	ldr	r0, [pc, #240]	@ (8006388 <ProcessCmd+0x1c8>)
 8006296:	230c      	movs	r3, #12
 8006298:	f001 f90a 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 800629c:	e05e      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 800629e:	2118      	movs	r1, #24
 80062a0:	187b      	adds	r3, r7, r1
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	001a      	movs	r2, r3
 80062a6:	187b      	adds	r3, r7, r1
 80062a8:	1c99      	adds	r1, r3, #2
 80062aa:	4838      	ldr	r0, [pc, #224]	@ (800638c <ProcessCmd+0x1cc>)
 80062ac:	2320      	movs	r3, #32
 80062ae:	f001 f8ff 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 80062b2:	e053      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062b4:	2118      	movs	r1, #24
 80062b6:	187b      	adds	r3, r7, r1
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	001a      	movs	r2, r3
 80062bc:	187b      	adds	r3, r7, r1
 80062be:	1c99      	adds	r1, r3, #2
 80062c0:	4833      	ldr	r0, [pc, #204]	@ (8006390 <ProcessCmd+0x1d0>)
 80062c2:	230c      	movs	r3, #12
 80062c4:	f001 f8f4 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 80062c8:	e048      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062ca:	2118      	movs	r1, #24
 80062cc:	187b      	adds	r3, r7, r1
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	001a      	movs	r2, r3
 80062d2:	187b      	adds	r3, r7, r1
 80062d4:	1c99      	adds	r1, r3, #2
 80062d6:	482f      	ldr	r0, [pc, #188]	@ (8006394 <ProcessCmd+0x1d4>)
 80062d8:	230c      	movs	r3, #12
 80062da:	f001 f8e9 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 80062de:	e03d      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062e0:	2118      	movs	r1, #24
 80062e2:	187b      	adds	r3, r7, r1
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	001a      	movs	r2, r3
 80062e8:	187b      	adds	r3, r7, r1
 80062ea:	1c99      	adds	r1, r3, #2
 80062ec:	482a      	ldr	r0, [pc, #168]	@ (8006398 <ProcessCmd+0x1d8>)
 80062ee:	230c      	movs	r3, #12
 80062f0:	f001 f8de 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 80062f4:	e032      	b.n	800635c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062f6:	2118      	movs	r1, #24
 80062f8:	187b      	adds	r3, r7, r1
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	001a      	movs	r2, r3
 80062fe:	187b      	adds	r3, r7, r1
 8006300:	1c99      	adds	r1, r3, #2
 8006302:	4826      	ldr	r0, [pc, #152]	@ (800639c <ProcessCmd+0x1dc>)
 8006304:	230c      	movs	r3, #12
 8006306:	f001 f8d3 	bl	80074b0 <WriteUint8ArrayEepromSafe>
        break;
 800630a:	e027      	b.n	800635c <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 800630c:	4b18      	ldr	r3, [pc, #96]	@ (8006370 <ProcessCmd+0x1b0>)
 800630e:	21bc      	movs	r1, #188	@ 0xbc
 8006310:	0018      	movs	r0, r3
 8006312:	f001 f912 	bl	800753a <ClearEEprom>
        break;
 8006316:	e021      	b.n	800635c <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006318:	2118      	movs	r1, #24
 800631a:	187b      	adds	r3, r7, r1
 800631c:	789b      	ldrb	r3, [r3, #2]
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	b21a      	sxth	r2, r3
 8006322:	187b      	adds	r3, r7, r1
 8006324:	78db      	ldrb	r3, [r3, #3]
 8006326:	b21b      	sxth	r3, r3
 8006328:	4313      	orrs	r3, r2
 800632a:	b21a      	sxth	r2, r3
 800632c:	1dbb      	adds	r3, r7, #6
 800632e:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006330:	1dbb      	adds	r3, r7, #6
 8006332:	881a      	ldrh	r2, [r3, #0]
 8006334:	23c0      	movs	r3, #192	@ 0xc0
 8006336:	015b      	lsls	r3, r3, #5
 8006338:	429a      	cmp	r2, r3
 800633a:	d207      	bcs.n	800634c <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 800633c:	1dbb      	adds	r3, r7, #6
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	4a0b      	ldr	r2, [pc, #44]	@ (8006370 <ProcessCmd+0x1b0>)
 8006342:	0019      	movs	r1, r3
 8006344:	0010      	movs	r0, r2
 8006346:	f001 f8f8 	bl	800753a <ClearEEprom>
            break;
 800634a:	e006      	b.n	800635a <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 800634c:	23c0      	movs	r3, #192	@ 0xc0
 800634e:	015b      	lsls	r3, r3, #5
 8006350:	4a07      	ldr	r2, [pc, #28]	@ (8006370 <ProcessCmd+0x1b0>)
 8006352:	0019      	movs	r1, r3
 8006354:	0010      	movs	r0, r2
 8006356:	f001 f8f0 	bl	800753a <ClearEEprom>
            break;
 800635a:	46c0      	nop			@ (mov r8, r8)
}
 800635c:	46c0      	nop			@ (mov r8, r8)
 800635e:	46bd      	mov	sp, r7
 8006360:	b002      	add	sp, #8
 8006362:	bcb0      	pop	{r4, r5, r7}
 8006364:	bc08      	pop	{r3}
 8006366:	b004      	add	sp, #16
 8006368:	4718      	bx	r3
 800636a:	46c0      	nop			@ (mov r8, r8)
 800636c:	08025ab0 	.word	0x08025ab0
 8006370:	08080000 	.word	0x08080000
 8006374:	0808000c 	.word	0x0808000c
 8006378:	08080018 	.word	0x08080018
 800637c:	08080024 	.word	0x08080024
 8006380:	08080030 	.word	0x08080030
 8006384:	0808003c 	.word	0x0808003c
 8006388:	08080048 	.word	0x08080048
 800638c:	08080090 	.word	0x08080090
 8006390:	08080078 	.word	0x08080078
 8006394:	0808006c 	.word	0x0808006c
 8006398:	08080060 	.word	0x08080060
 800639c:	08080054 	.word	0x08080054

080063a0 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80063a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6039      	str	r1, [r7, #0]
 80063a8:	0011      	movs	r1, r2
 80063aa:	1dfb      	adds	r3, r7, #7
 80063ac:	1c02      	adds	r2, r0, #0
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	1dbb      	adds	r3, r7, #6
 80063b2:	1c0a      	adds	r2, r1, #0
 80063b4:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80063b6:	2223      	movs	r2, #35	@ 0x23
 80063b8:	4b20      	ldr	r3, [pc, #128]	@ (800643c <Create_Message+0x9c>)
 80063ba:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80063bc:	4b1f      	ldr	r3, [pc, #124]	@ (800643c <Create_Message+0x9c>)
 80063be:	1dfa      	adds	r2, r7, #7
 80063c0:	7812      	ldrb	r2, [r2, #0]
 80063c2:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80063c4:	4b1d      	ldr	r3, [pc, #116]	@ (800643c <Create_Message+0x9c>)
 80063c6:	1dba      	adds	r2, r7, #6
 80063c8:	7812      	ldrb	r2, [r2, #0]
 80063ca:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80063cc:	1dbb      	adds	r3, r7, #6
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006440 <Create_Message+0xa0>)
 80063d4:	0018      	movs	r0, r3
 80063d6:	f01a fa01 	bl	80207dc <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80063da:	1dbb      	adds	r3, r7, #6
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	b29a      	uxth	r2, r3
 80063e0:	250e      	movs	r5, #14
 80063e2:	197b      	adds	r3, r7, r5
 80063e4:	3203      	adds	r2, #3
 80063e6:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80063e8:	260c      	movs	r6, #12
 80063ea:	19bc      	adds	r4, r7, r6
 80063ec:	197b      	adds	r3, r7, r5
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	4b12      	ldr	r3, [pc, #72]	@ (800643c <Create_Message+0x9c>)
 80063f2:	0011      	movs	r1, r2
 80063f4:	0018      	movs	r0, r3
 80063f6:	f000 f825 	bl	8006444 <CRC16_ARC>
 80063fa:	0003      	movs	r3, r0
 80063fc:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 80063fe:	0030      	movs	r0, r6
 8006400:	183b      	adds	r3, r7, r0
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	0a1b      	lsrs	r3, r3, #8
 8006406:	b29a      	uxth	r2, r3
 8006408:	197b      	adds	r3, r7, r5
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b2d1      	uxtb	r1, r2
 800640e:	4a0b      	ldr	r2, [pc, #44]	@ (800643c <Create_Message+0x9c>)
 8006410:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006412:	197b      	adds	r3, r7, r5
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	3301      	adds	r3, #1
 8006418:	183a      	adds	r2, r7, r0
 800641a:	8812      	ldrh	r2, [r2, #0]
 800641c:	b2d1      	uxtb	r1, r2
 800641e:	4a07      	ldr	r2, [pc, #28]	@ (800643c <Create_Message+0x9c>)
 8006420:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006422:	197b      	adds	r3, r7, r5
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	3302      	adds	r3, #2
 8006428:	b29a      	uxth	r2, r3
 800642a:	4b04      	ldr	r3, [pc, #16]	@ (800643c <Create_Message+0x9c>)
 800642c:	0011      	movs	r1, r2
 800642e:	0018      	movs	r0, r3
 8006430:	f016 fea6 	bl	801d180 <CDC_Transmit_FS>
}
 8006434:	46c0      	nop			@ (mov r8, r8)
 8006436:	46bd      	mov	sp, r7
 8006438:	b005      	add	sp, #20
 800643a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643c:	20000870 	.word	0x20000870
 8006440:	20000873 	.word	0x20000873

08006444 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	000a      	movs	r2, r1
 800644e:	1cbb      	adds	r3, r7, #2
 8006450:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006452:	2316      	movs	r3, #22
 8006454:	18fb      	adds	r3, r7, r3
 8006456:	2200      	movs	r2, #0
 8006458:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	e02e      	b.n	80064be <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	18d3      	adds	r3, r2, r3
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	0019      	movs	r1, r3
 800646a:	2216      	movs	r2, #22
 800646c:	18bb      	adds	r3, r7, r2
 800646e:	18ba      	adds	r2, r7, r2
 8006470:	8812      	ldrh	r2, [r2, #0]
 8006472:	404a      	eors	r2, r1
 8006474:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e01a      	b.n	80064b2 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 800647c:	2116      	movs	r1, #22
 800647e:	187b      	adds	r3, r7, r1
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	2201      	movs	r2, #1
 8006484:	4013      	ands	r3, r2
 8006486:	d00b      	beq.n	80064a0 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8006488:	187b      	adds	r3, r7, r1
 800648a:	187a      	adds	r2, r7, r1
 800648c:	8812      	ldrh	r2, [r2, #0]
 800648e:	0852      	lsrs	r2, r2, #1
 8006490:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8006492:	187b      	adds	r3, r7, r1
 8006494:	187a      	adds	r2, r7, r1
 8006496:	8812      	ldrh	r2, [r2, #0]
 8006498:	490f      	ldr	r1, [pc, #60]	@ (80064d8 <CRC16_ARC+0x94>)
 800649a:	404a      	eors	r2, r1
 800649c:	801a      	strh	r2, [r3, #0]
 800649e:	e005      	b.n	80064ac <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80064a0:	2216      	movs	r2, #22
 80064a2:	18bb      	adds	r3, r7, r2
 80064a4:	18ba      	adds	r2, r7, r2
 80064a6:	8812      	ldrh	r2, [r2, #0]
 80064a8:	0852      	lsrs	r2, r2, #1
 80064aa:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b07      	cmp	r3, #7
 80064b6:	dde1      	ble.n	800647c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	3301      	adds	r3, #1
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	1cbb      	adds	r3, r7, #2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	dbcb      	blt.n	8006460 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80064c8:	2316      	movs	r3, #22
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	881b      	ldrh	r3, [r3, #0]
}
 80064ce:	0018      	movs	r0, r3
 80064d0:	46bd      	mov	sp, r7
 80064d2:	b006      	add	sp, #24
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	46c0      	nop			@ (mov r8, r8)
 80064d8:	ffffa001 	.word	0xffffa001

080064dc <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 80064e0:	4b26      	ldr	r3, [pc, #152]	@ (800657c <ReadBatteryVoltage+0xa0>)
 80064e2:	4a27      	ldr	r2, [pc, #156]	@ (8006580 <ReadBatteryVoltage+0xa4>)
 80064e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80064e6:	4b25      	ldr	r3, [pc, #148]	@ (800657c <ReadBatteryVoltage+0xa0>)
 80064e8:	2280      	movs	r2, #128	@ 0x80
 80064ea:	0152      	lsls	r2, r2, #5
 80064ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80064ee:	4a23      	ldr	r2, [pc, #140]	@ (800657c <ReadBatteryVoltage+0xa0>)
 80064f0:	4b24      	ldr	r3, [pc, #144]	@ (8006584 <ReadBatteryVoltage+0xa8>)
 80064f2:	0011      	movs	r1, r2
 80064f4:	0018      	movs	r0, r3
 80064f6:	f009 f915 	bl	800f724 <HAL_ADC_ConfigChannel>
 80064fa:	1e03      	subs	r3, r0, #0
 80064fc:	d001      	beq.n	8006502 <ReadBatteryVoltage+0x26>
    Error_Handler();
 80064fe:	f002 f8a3 	bl	8008648 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006502:	4b20      	ldr	r3, [pc, #128]	@ (8006584 <ReadBatteryVoltage+0xa8>)
 8006504:	0018      	movs	r0, r3
 8006506:	f009 f811 	bl	800f52c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800650a:	4b1e      	ldr	r3, [pc, #120]	@ (8006584 <ReadBatteryVoltage+0xa8>)
 800650c:	2101      	movs	r1, #1
 800650e:	0018      	movs	r0, r3
 8006510:	f009 f860 	bl	800f5d4 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006514:	4b1b      	ldr	r3, [pc, #108]	@ (8006584 <ReadBatteryVoltage+0xa8>)
 8006516:	0018      	movs	r0, r3
 8006518:	f009 f8f8 	bl	800f70c <HAL_ADC_GetValue>
 800651c:	0002      	movs	r2, r0
 800651e:	4b1a      	ldr	r3, [pc, #104]	@ (8006588 <ReadBatteryVoltage+0xac>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4353      	muls	r3, r2
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4919      	ldr	r1, [pc, #100]	@ (800658c <ReadBatteryVoltage+0xb0>)
 8006528:	0018      	movs	r0, r3
 800652a:	f7f9 fe3b 	bl	80001a4 <__udivsi3>
 800652e:	0003      	movs	r3, r0
 8006530:	001a      	movs	r2, r3
 8006532:	4b17      	ldr	r3, [pc, #92]	@ (8006590 <ReadBatteryVoltage+0xb4>)
 8006534:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006536:	4b16      	ldr	r3, [pc, #88]	@ (8006590 <ReadBatteryVoltage+0xb4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	0018      	movs	r0, r3
 800653c:	f7fb f894 	bl	8001668 <__aeabi_ui2f>
 8006540:	1c03      	adds	r3, r0, #0
 8006542:	4914      	ldr	r1, [pc, #80]	@ (8006594 <ReadBatteryVoltage+0xb8>)
 8006544:	1c18      	adds	r0, r3, #0
 8006546:	f7fa fb45 	bl	8000bd4 <__aeabi_fdiv>
 800654a:	1c03      	adds	r3, r0, #0
 800654c:	1c1a      	adds	r2, r3, #0
 800654e:	4b12      	ldr	r3, [pc, #72]	@ (8006598 <ReadBatteryVoltage+0xbc>)
 8006550:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006552:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <ReadBatteryVoltage+0xa0>)
 8006554:	4a0a      	ldr	r2, [pc, #40]	@ (8006580 <ReadBatteryVoltage+0xa4>)
 8006556:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006558:	4b08      	ldr	r3, [pc, #32]	@ (800657c <ReadBatteryVoltage+0xa0>)
 800655a:	4a10      	ldr	r2, [pc, #64]	@ (800659c <ReadBatteryVoltage+0xc0>)
 800655c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800655e:	4a07      	ldr	r2, [pc, #28]	@ (800657c <ReadBatteryVoltage+0xa0>)
 8006560:	4b08      	ldr	r3, [pc, #32]	@ (8006584 <ReadBatteryVoltage+0xa8>)
 8006562:	0011      	movs	r1, r2
 8006564:	0018      	movs	r0, r3
 8006566:	f009 f8dd 	bl	800f724 <HAL_ADC_ConfigChannel>
 800656a:	1e03      	subs	r3, r0, #0
 800656c:	d001      	beq.n	8006572 <ReadBatteryVoltage+0x96>
    Error_Handler();
 800656e:	f002 f86b 	bl	8008648 <Error_Handler>
  }
  return trueValue;
 8006572:	4b09      	ldr	r3, [pc, #36]	@ (8006598 <ReadBatteryVoltage+0xbc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 }
 8006576:	1c18      	adds	r0, r3, #0
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000978 	.word	0x20000978
 8006580:	38004000 	.word	0x38004000
 8006584:	200009b4 	.word	0x200009b4
 8006588:	20000034 	.word	0x20000034
 800658c:	00000fff 	.word	0x00000fff
 8006590:	20000980 	.word	0x20000980
 8006594:	447a0000 	.word	0x447a0000
 8006598:	20000984 	.word	0x20000984
 800659c:	00001001 	.word	0x00001001

080065a0 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80065a4:	4b21      	ldr	r3, [pc, #132]	@ (800662c <ReadSolarVoltage+0x8c>)
 80065a6:	4a22      	ldr	r2, [pc, #136]	@ (8006630 <ReadSolarVoltage+0x90>)
 80065a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80065aa:	4b20      	ldr	r3, [pc, #128]	@ (800662c <ReadSolarVoltage+0x8c>)
 80065ac:	2280      	movs	r2, #128	@ 0x80
 80065ae:	0152      	lsls	r2, r2, #5
 80065b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80065b2:	4a1e      	ldr	r2, [pc, #120]	@ (800662c <ReadSolarVoltage+0x8c>)
 80065b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006634 <ReadSolarVoltage+0x94>)
 80065b6:	0011      	movs	r1, r2
 80065b8:	0018      	movs	r0, r3
 80065ba:	f009 f8b3 	bl	800f724 <HAL_ADC_ConfigChannel>
 80065be:	1e03      	subs	r3, r0, #0
 80065c0:	d001      	beq.n	80065c6 <ReadSolarVoltage+0x26>
    Error_Handler();
 80065c2:	f002 f841 	bl	8008648 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80065c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006634 <ReadSolarVoltage+0x94>)
 80065c8:	0018      	movs	r0, r3
 80065ca:	f008 ffaf 	bl	800f52c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80065ce:	4b19      	ldr	r3, [pc, #100]	@ (8006634 <ReadSolarVoltage+0x94>)
 80065d0:	2101      	movs	r1, #1
 80065d2:	0018      	movs	r0, r3
 80065d4:	f008 fffe 	bl	800f5d4 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80065d8:	4b16      	ldr	r3, [pc, #88]	@ (8006634 <ReadSolarVoltage+0x94>)
 80065da:	0018      	movs	r0, r3
 80065dc:	f009 f896 	bl	800f70c <HAL_ADC_GetValue>
 80065e0:	0002      	movs	r2, r0
 80065e2:	4b15      	ldr	r3, [pc, #84]	@ (8006638 <ReadSolarVoltage+0x98>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	435a      	muls	r2, r3
 80065e8:	0013      	movs	r3, r2
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	189b      	adds	r3, r3, r2
 80065ee:	4913      	ldr	r1, [pc, #76]	@ (800663c <ReadSolarVoltage+0x9c>)
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7f9 fdd7 	bl	80001a4 <__udivsi3>
 80065f6:	0003      	movs	r3, r0
 80065f8:	001a      	movs	r2, r3
 80065fa:	4b11      	ldr	r3, [pc, #68]	@ (8006640 <ReadSolarVoltage+0xa0>)
 80065fc:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 80065fe:	4b0b      	ldr	r3, [pc, #44]	@ (800662c <ReadSolarVoltage+0x8c>)
 8006600:	4a0b      	ldr	r2, [pc, #44]	@ (8006630 <ReadSolarVoltage+0x90>)
 8006602:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006604:	4b09      	ldr	r3, [pc, #36]	@ (800662c <ReadSolarVoltage+0x8c>)
 8006606:	4a0f      	ldr	r2, [pc, #60]	@ (8006644 <ReadSolarVoltage+0xa4>)
 8006608:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800660a:	4a08      	ldr	r2, [pc, #32]	@ (800662c <ReadSolarVoltage+0x8c>)
 800660c:	4b09      	ldr	r3, [pc, #36]	@ (8006634 <ReadSolarVoltage+0x94>)
 800660e:	0011      	movs	r1, r2
 8006610:	0018      	movs	r0, r3
 8006612:	f009 f887 	bl	800f724 <HAL_ADC_ConfigChannel>
 8006616:	1e03      	subs	r3, r0, #0
 8006618:	d001      	beq.n	800661e <ReadSolarVoltage+0x7e>
    Error_Handler();
 800661a:	f002 f815 	bl	8008648 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800661e:	4b08      	ldr	r3, [pc, #32]	@ (8006640 <ReadSolarVoltage+0xa0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 }
 8006624:	0018      	movs	r0, r3
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	46c0      	nop			@ (mov r8, r8)
 800662c:	20000978 	.word	0x20000978
 8006630:	3c008000 	.word	0x3c008000
 8006634:	200009b4 	.word	0x200009b4
 8006638:	20000034 	.word	0x20000034
 800663c:	00000fff 	.word	0x00000fff
 8006640:	20000988 	.word	0x20000988
 8006644:	00001001 	.word	0x00001001

08006648 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 800664c:	23a0      	movs	r3, #160	@ 0xa0
 800664e:	05db      	lsls	r3, r3, #23
 8006650:	2180      	movs	r1, #128	@ 0x80
 8006652:	0018      	movs	r0, r3
 8006654:	f00a f802 	bl	801065c <HAL_GPIO_ReadPin>
 8006658:	0003      	movs	r3, r0
 800665a:	1e5a      	subs	r2, r3, #1
 800665c:	4193      	sbcs	r3, r2
 800665e:	b2db      	uxtb	r3, r3
}
 8006660:	0018      	movs	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006666:	b580      	push	{r7, lr}
 8006668:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800666a:	2380      	movs	r3, #128	@ 0x80
 800666c:	021a      	lsls	r2, r3, #8
 800666e:	23a0      	movs	r3, #160	@ 0xa0
 8006670:	05db      	lsls	r3, r3, #23
 8006672:	0011      	movs	r1, r2
 8006674:	0018      	movs	r0, r3
 8006676:	f009 fff1 	bl	801065c <HAL_GPIO_ReadPin>
 800667a:	0003      	movs	r3, r0
 800667c:	1e5a      	subs	r2, r3, #1
 800667e:	4193      	sbcs	r3, r2
 8006680:	b2db      	uxtb	r3, r3
}
 8006682:	0018      	movs	r0, r3
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 800668c:	4b05      	ldr	r3, [pc, #20]	@ (80066a4 <UserButton_Pressed+0x1c>)
 800668e:	2104      	movs	r1, #4
 8006690:	0018      	movs	r0, r3
 8006692:	f009 ffe3 	bl	801065c <HAL_GPIO_ReadPin>
 8006696:	0003      	movs	r3, r0
 8006698:	425a      	negs	r2, r3
 800669a:	4153      	adcs	r3, r2
 800669c:	b2db      	uxtb	r3, r3
}
 800669e:	0018      	movs	r0, r3
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	50000c00 	.word	0x50000c00

080066a8 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80066a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066aa:	46d6      	mov	lr, sl
 80066ac:	464f      	mov	r7, r9
 80066ae:	4646      	mov	r6, r8
 80066b0:	b5c0      	push	{r6, r7, lr}
 80066b2:	b08e      	sub	sp, #56	@ 0x38
 80066b4:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80066b6:	4b21      	ldr	r3, [pc, #132]	@ (800673c <showTime+0x94>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d036      	beq.n	800672c <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80066be:	003a      	movs	r2, r7
 80066c0:	1d3b      	adds	r3, r7, #4
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f000 fa2b 	bl	8006b20 <RTC_GetTime>
  UpdateSystemUptime();
 80066ca:	f000 f83f 	bl	800674c <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80066ce:	003b      	movs	r3, r7
 80066d0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066d2:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80066d4:	003b      	movs	r3, r7
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066da:	4b19      	ldr	r3, [pc, #100]	@ (8006740 <showTime+0x98>)
 80066dc:	0092      	lsls	r2, r2, #2
 80066de:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80066e0:	003b      	movs	r3, r7
 80066e2:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066e4:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80066e6:	1d3b      	adds	r3, r7, #4
 80066e8:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066ea:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80066ec:	1d3b      	adds	r3, r7, #4
 80066ee:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066f0:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80066f2:	1d3b      	adds	r3, r7, #4
 80066f4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066f6:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80066f8:	4b12      	ldr	r3, [pc, #72]	@ (8006744 <showTime+0x9c>)
 80066fa:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066fc:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80066fe:	4b11      	ldr	r3, [pc, #68]	@ (8006744 <showTime+0x9c>)
 8006700:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006702:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006704:	4b0f      	ldr	r3, [pc, #60]	@ (8006744 <showTime+0x9c>)
 8006706:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006708:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800670a:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <showTime+0x9c>)
 800670c:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800670e:	480e      	ldr	r0, [pc, #56]	@ (8006748 <showTime+0xa0>)
 8006710:	9306      	str	r3, [sp, #24]
 8006712:	4643      	mov	r3, r8
 8006714:	9305      	str	r3, [sp, #20]
 8006716:	4663      	mov	r3, ip
 8006718:	9304      	str	r3, [sp, #16]
 800671a:	9603      	str	r6, [sp, #12]
 800671c:	9502      	str	r5, [sp, #8]
 800671e:	9401      	str	r4, [sp, #4]
 8006720:	9100      	str	r1, [sp, #0]
 8006722:	4653      	mov	r3, sl
 8006724:	4649      	mov	r1, r9
 8006726:	f019 fdc9 	bl	80202bc <iprintf>
 800672a:	e000      	b.n	800672e <showTime+0x86>
    return;
 800672c:	46c0      	nop			@ (mov r8, r8)
}
 800672e:	46bd      	mov	sp, r7
 8006730:	b006      	add	sp, #24
 8006732:	bce0      	pop	{r5, r6, r7}
 8006734:	46ba      	mov	sl, r7
 8006736:	46b1      	mov	r9, r6
 8006738:	46a8      	mov	r8, r5
 800673a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800673c:	20000998 	.word	0x20000998
 8006740:	20000054 	.word	0x20000054
 8006744:	2000098c 	.word	0x2000098c
 8006748:	08024370 	.word	0x08024370

0800674c <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8006752:	003a      	movs	r2, r7
 8006754:	1d3b      	adds	r3, r7, #4
 8006756:	0011      	movs	r1, r2
 8006758:	0018      	movs	r0, r3
 800675a:	f000 f9e1 	bl	8006b20 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800675e:	1d3a      	adds	r2, r7, #4
 8006760:	003b      	movs	r3, r7
 8006762:	0011      	movs	r1, r2
 8006764:	0018      	movs	r0, r3
 8006766:	f000 fba7 	bl	8006eb8 <makeTime>
 800676a:	0002      	movs	r2, r0
 800676c:	4b1e      	ldr	r3, [pc, #120]	@ (80067e8 <UpdateSystemUptime+0x9c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	213c      	movs	r1, #60	@ 0x3c
 800677c:	0018      	movs	r0, r3
 800677e:	f7f9 fd97 	bl	80002b0 <__aeabi_uidivmod>
 8006782:	000b      	movs	r3, r1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	4b19      	ldr	r3, [pc, #100]	@ (80067ec <UpdateSystemUptime+0xa0>)
 8006788:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	213c      	movs	r1, #60	@ 0x3c
 800678e:	0018      	movs	r0, r3
 8006790:	f7f9 fd08 	bl	80001a4 <__udivsi3>
 8006794:	0003      	movs	r3, r0
 8006796:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	213c      	movs	r1, #60	@ 0x3c
 800679c:	0018      	movs	r0, r3
 800679e:	f7f9 fd87 	bl	80002b0 <__aeabi_uidivmod>
 80067a2:	000b      	movs	r3, r1
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	4b11      	ldr	r3, [pc, #68]	@ (80067ec <UpdateSystemUptime+0xa0>)
 80067a8:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	213c      	movs	r1, #60	@ 0x3c
 80067ae:	0018      	movs	r0, r3
 80067b0:	f7f9 fcf8 	bl	80001a4 <__udivsi3>
 80067b4:	0003      	movs	r3, r0
 80067b6:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2118      	movs	r1, #24
 80067bc:	0018      	movs	r0, r3
 80067be:	f7f9 fd77 	bl	80002b0 <__aeabi_uidivmod>
 80067c2:	000b      	movs	r3, r1
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	4b09      	ldr	r3, [pc, #36]	@ (80067ec <UpdateSystemUptime+0xa0>)
 80067c8:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	2118      	movs	r1, #24
 80067ce:	0018      	movs	r0, r3
 80067d0:	f7f9 fce8 	bl	80001a4 <__udivsi3>
 80067d4:	0003      	movs	r3, r0
 80067d6:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	b29a      	uxth	r2, r3
 80067dc:	4b03      	ldr	r3, [pc, #12]	@ (80067ec <UpdateSystemUptime+0xa0>)
 80067de:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80067e0:	46c0      	nop			@ (mov r8, r8)
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b008      	add	sp, #32
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000998 	.word	0x20000998
 80067ec:	2000098c 	.word	0x2000098c

080067f0 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80067f0:	b590      	push	{r4, r7, lr}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	0008      	movs	r0, r1
 80067fa:	0011      	movs	r1, r2
 80067fc:	1cfb      	adds	r3, r7, #3
 80067fe:	1c02      	adds	r2, r0, #0
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	1cbb      	adds	r3, r7, #2
 8006804:	1c0a      	adds	r2, r1, #0
 8006806:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006808:	230e      	movs	r3, #14
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	2200      	movs	r2, #0
 800680e:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006810:	230f      	movs	r3, #15
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	1cfa      	adds	r2, r7, #3
 8006816:	7812      	ldrb	r2, [r2, #0]
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	e015      	b.n	8006848 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800681c:	200f      	movs	r0, #15
 800681e:	183b      	adds	r3, r7, r0
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	18d2      	adds	r2, r2, r3
 8006826:	240e      	movs	r4, #14
 8006828:	193b      	adds	r3, r7, r4
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	7811      	ldrb	r1, [r2, #0]
 800682e:	2208      	movs	r2, #8
 8006830:	18ba      	adds	r2, r7, r2
 8006832:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006834:	193b      	adds	r3, r7, r4
 8006836:	781a      	ldrb	r2, [r3, #0]
 8006838:	193b      	adds	r3, r7, r4
 800683a:	3201      	adds	r2, #1
 800683c:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800683e:	183b      	adds	r3, r7, r0
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	183b      	adds	r3, r7, r0
 8006844:	3201      	adds	r2, #1
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	200f      	movs	r0, #15
 800684a:	183a      	adds	r2, r7, r0
 800684c:	1cbb      	adds	r3, r7, #2
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d9e2      	bls.n	800681c <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006856:	230e      	movs	r3, #14
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2208      	movs	r2, #8
 800685e:	18ba      	adds	r2, r7, r2
 8006860:	2100      	movs	r1, #0
 8006862:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006864:	1cfb      	adds	r3, r7, #3
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b13      	cmp	r3, #19
 800686a:	d849      	bhi.n	8006900 <aBuff2int+0x110>
    if (start == 17) { //month
 800686c:	1cfb      	adds	r3, r7, #3
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b11      	cmp	r3, #17
 8006872:	d122      	bne.n	80068ba <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006874:	183b      	adds	r3, r7, r0
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e018      	b.n	80068ae <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800687c:	240f      	movs	r4, #15
 800687e:	193b      	adds	r3, r7, r4
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	4b25      	ldr	r3, [pc, #148]	@ (8006918 <aBuff2int+0x128>)
 8006884:	0092      	lsls	r2, r2, #2
 8006886:	58d2      	ldr	r2, [r2, r3]
 8006888:	2308      	movs	r3, #8
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	0011      	movs	r1, r2
 800688e:	0018      	movs	r0, r3
 8006890:	f7f9 fc62 	bl	8000158 <strcmp>
 8006894:	1e03      	subs	r3, r0, #0
 8006896:	d104      	bne.n	80068a2 <aBuff2int+0xb2>
          return i+1;
 8006898:	193b      	adds	r3, r7, r4
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	3301      	adds	r3, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	e035      	b.n	800690e <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80068a2:	210f      	movs	r1, #15
 80068a4:	187b      	adds	r3, r7, r1
 80068a6:	781a      	ldrb	r2, [r3, #0]
 80068a8:	187b      	adds	r3, r7, r1
 80068aa:	3201      	adds	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	230f      	movs	r3, #15
 80068b0:	18fb      	adds	r3, r7, r3
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b0b      	cmp	r3, #11
 80068b6:	d9e1      	bls.n	800687c <aBuff2int+0x8c>
 80068b8:	e022      	b.n	8006900 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80068ba:	230f      	movs	r3, #15
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e018      	b.n	80068f6 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80068c4:	240f      	movs	r4, #15
 80068c6:	193b      	adds	r3, r7, r4
 80068c8:	781a      	ldrb	r2, [r3, #0]
 80068ca:	4b14      	ldr	r3, [pc, #80]	@ (800691c <aBuff2int+0x12c>)
 80068cc:	0092      	lsls	r2, r2, #2
 80068ce:	58d2      	ldr	r2, [r2, r3]
 80068d0:	2308      	movs	r3, #8
 80068d2:	18fb      	adds	r3, r7, r3
 80068d4:	0011      	movs	r1, r2
 80068d6:	0018      	movs	r0, r3
 80068d8:	f7f9 fc3e 	bl	8000158 <strcmp>
 80068dc:	1e03      	subs	r3, r0, #0
 80068de:	d104      	bne.n	80068ea <aBuff2int+0xfa>
          return i+1;
 80068e0:	193b      	adds	r3, r7, r4
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	e011      	b.n	800690e <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80068ea:	210f      	movs	r1, #15
 80068ec:	187b      	adds	r3, r7, r1
 80068ee:	781a      	ldrb	r2, [r3, #0]
 80068f0:	187b      	adds	r3, r7, r1
 80068f2:	3201      	adds	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	230f      	movs	r3, #15
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b06      	cmp	r3, #6
 80068fe:	d9e1      	bls.n	80068c4 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006900:	2308      	movs	r3, #8
 8006902:	18fb      	adds	r3, r7, r3
 8006904:	0018      	movs	r0, r3
 8006906:	f018 f8fe 	bl	801eb06 <atoi>
 800690a:	0003      	movs	r3, r0
 800690c:	b2db      	uxtb	r3, r3
}
 800690e:	0018      	movs	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	b005      	add	sp, #20
 8006914:	bd90      	pop	{r4, r7, pc}
 8006916:	46c0      	nop			@ (mov r8, r8)
 8006918:	20000054 	.word	0x20000054
 800691c:	20000038 	.word	0x20000038

08006920 <ParseTime>:

void ParseTime(char* buffer) {
 8006920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006922:	b08b      	sub	sp, #44	@ 0x2c
 8006924:	af02      	add	r7, sp, #8
 8006926:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006928:	2408      	movs	r4, #8
 800692a:	193a      	adds	r2, r7, r4
 800692c:	260c      	movs	r6, #12
 800692e:	19bb      	adds	r3, r7, r6
 8006930:	0011      	movs	r1, r2
 8006932:	0018      	movs	r0, r3
 8006934:	f000 f8f4 	bl	8006b20 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2219      	movs	r2, #25
 800693c:	2118      	movs	r1, #24
 800693e:	0018      	movs	r0, r3
 8006940:	f7ff ff56 	bl	80067f0 <aBuff2int>
 8006944:	0003      	movs	r3, r0
 8006946:	001a      	movs	r2, r3
 8006948:	19bb      	adds	r3, r7, r6
 800694a:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	221c      	movs	r2, #28
 8006950:	211b      	movs	r1, #27
 8006952:	0018      	movs	r0, r3
 8006954:	f7ff ff4c 	bl	80067f0 <aBuff2int>
 8006958:	0003      	movs	r3, r0
 800695a:	001a      	movs	r2, r3
 800695c:	19bb      	adds	r3, r7, r6
 800695e:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	221f      	movs	r2, #31
 8006964:	211e      	movs	r1, #30
 8006966:	0018      	movs	r0, r3
 8006968:	f7ff ff42 	bl	80067f0 <aBuff2int>
 800696c:	0003      	movs	r3, r0
 800696e:	001a      	movs	r2, r3
 8006970:	19bb      	adds	r3, r7, r6
 8006972:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2224      	movs	r2, #36	@ 0x24
 8006978:	2123      	movs	r1, #35	@ 0x23
 800697a:	0018      	movs	r0, r3
 800697c:	f7ff ff38 	bl	80067f0 <aBuff2int>
 8006980:	0003      	movs	r3, r0
 8006982:	001a      	movs	r2, r3
 8006984:	0025      	movs	r5, r4
 8006986:	197b      	adds	r3, r7, r5
 8006988:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2213      	movs	r2, #19
 800698e:	2111      	movs	r1, #17
 8006990:	0018      	movs	r0, r3
 8006992:	f7ff ff2d 	bl	80067f0 <aBuff2int>
 8006996:	0003      	movs	r3, r0
 8006998:	001a      	movs	r2, r3
 800699a:	197b      	adds	r3, r7, r5
 800699c:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2216      	movs	r2, #22
 80069a2:	2115      	movs	r1, #21
 80069a4:	0018      	movs	r0, r3
 80069a6:	f7ff ff23 	bl	80067f0 <aBuff2int>
 80069aa:	0003      	movs	r3, r0
 80069ac:	001a      	movs	r2, r3
 80069ae:	197b      	adds	r3, r7, r5
 80069b0:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	220f      	movs	r2, #15
 80069b6:	210d      	movs	r1, #13
 80069b8:	0018      	movs	r0, r3
 80069ba:	f7ff ff19 	bl	80067f0 <aBuff2int>
 80069be:	0003      	movs	r3, r0
 80069c0:	001a      	movs	r2, r3
 80069c2:	197b      	adds	r3, r7, r5
 80069c4:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80069c6:	19bb      	adds	r3, r7, r6
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	001c      	movs	r4, r3
 80069cc:	19bb      	adds	r3, r7, r6
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	0018      	movs	r0, r3
 80069d2:	19bb      	adds	r3, r7, r6
 80069d4:	789b      	ldrb	r3, [r3, #2]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006a48 <ParseTime+0x128>)
 80069d8:	491c      	ldr	r1, [pc, #112]	@ (8006a4c <ParseTime+0x12c>)
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	9000      	str	r0, [sp, #0]
 80069de:	0023      	movs	r3, r4
 80069e0:	2003      	movs	r0, #3
 80069e2:	f007 ff83 	bl	800e8ec <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80069e6:	197b      	adds	r3, r7, r5
 80069e8:	789b      	ldrb	r3, [r3, #2]
 80069ea:	001c      	movs	r4, r3
 80069ec:	197b      	adds	r3, r7, r5
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	0018      	movs	r0, r3
 80069f2:	197b      	adds	r3, r7, r5
 80069f4:	78db      	ldrb	r3, [r3, #3]
 80069f6:	4a16      	ldr	r2, [pc, #88]	@ (8006a50 <ParseTime+0x130>)
 80069f8:	4914      	ldr	r1, [pc, #80]	@ (8006a4c <ParseTime+0x12c>)
 80069fa:	9301      	str	r3, [sp, #4]
 80069fc:	9000      	str	r0, [sp, #0]
 80069fe:	0023      	movs	r3, r4
 8006a00:	2003      	movs	r0, #3
 8006a02:	f007 ff73 	bl	800e8ec <CreateLine>
  RTC_SetTime(&currentTime);
 8006a06:	19bb      	adds	r3, r7, r6
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f000 f825 	bl	8006a58 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8006a0e:	197b      	adds	r3, r7, r5
 8006a10:	0018      	movs	r0, r3
 8006a12:	f000 f847 	bl	8006aa4 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006a16:	197b      	adds	r3, r7, r5
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d101      	bne.n	8006a22 <ParseTime+0x102>
    reset_fanCleaningDone();
 8006a1e:	f002 fd99 	bl	8009554 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8006a22:	4b0c      	ldr	r3, [pc, #48]	@ (8006a54 <ParseTime+0x134>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10a      	bne.n	8006a40 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	18fa      	adds	r2, r7, r3
 8006a2e:	2308      	movs	r3, #8
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	0011      	movs	r1, r2
 8006a34:	0018      	movs	r0, r3
 8006a36:	f000 fa3f 	bl	8006eb8 <makeTime>
 8006a3a:	0002      	movs	r2, r0
 8006a3c:	4b05      	ldr	r3, [pc, #20]	@ (8006a54 <ParseTime+0x134>)
 8006a3e:	601a      	str	r2, [r3, #0]
  }
}
 8006a40:	46c0      	nop			@ (mov r8, r8)
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b009      	add	sp, #36	@ 0x24
 8006a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a48:	080243c8 	.word	0x080243c8
 8006a4c:	08024400 	.word	0x08024400
 8006a50:	08024404 	.word	0x08024404
 8006a54:	20000998 	.word	0x20000998

08006a58 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006a72:	4b09      	ldr	r3, [pc, #36]	@ (8006a98 <RTC_SetTime+0x40>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f00f fc9a 	bl	80163b4 <HAL_RTC_SetTime>
 8006a80:	1e03      	subs	r3, r0, #0
 8006a82:	d005      	beq.n	8006a90 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8006a84:	4a05      	ldr	r2, [pc, #20]	@ (8006a9c <RTC_SetTime+0x44>)
 8006a86:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <RTC_SetTime+0x48>)
 8006a88:	0019      	movs	r1, r3
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	f007 ff2e 	bl	800e8ec <CreateLine>
    }
}
 8006a90:	46c0      	nop			@ (mov r8, r8)
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b002      	add	sp, #8
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20000994 	.word	0x20000994
 8006a9c:	08024438 	.word	0x08024438
 8006aa0:	08024454 	.word	0x08024454

08006aa4 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006aac:	4b16      	ldr	r3, [pc, #88]	@ (8006b08 <RTC_SetDate+0x64>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f00f fd85 	bl	80165c4 <HAL_RTC_SetDate>
 8006aba:	1e03      	subs	r3, r0, #0
 8006abc:	d005      	beq.n	8006aca <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 8006abe:	4a13      	ldr	r2, [pc, #76]	@ (8006b0c <RTC_SetDate+0x68>)
 8006ac0:	4b13      	ldr	r3, [pc, #76]	@ (8006b10 <RTC_SetDate+0x6c>)
 8006ac2:	0019      	movs	r1, r3
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	f007 ff11 	bl	800e8ec <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8006aca:	4b0f      	ldr	r3, [pc, #60]	@ (8006b08 <RTC_SetDate+0x64>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2101      	movs	r1, #1
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f010 f8bd 	bl	8016c50 <HAL_RTCEx_BKUPRead>
 8006ad6:	0003      	movs	r3, r0
 8006ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8006b14 <RTC_SetDate+0x70>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d010      	beq.n	8006b00 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8006ade:	4a0e      	ldr	r2, [pc, #56]	@ (8006b18 <RTC_SetDate+0x74>)
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b1c <RTC_SetDate+0x78>)
 8006ae2:	0019      	movs	r1, r3
 8006ae4:	2003      	movs	r0, #3
 8006ae6:	f007 ff01 	bl	800e8ec <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8006aea:	f00e fbe3 	bl	80152b4 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8006aee:	4b06      	ldr	r3, [pc, #24]	@ (8006b08 <RTC_SetDate+0x64>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a08      	ldr	r2, [pc, #32]	@ (8006b14 <RTC_SetDate+0x70>)
 8006af4:	2101      	movs	r1, #1
 8006af6:	0018      	movs	r0, r3
 8006af8:	f010 f892 	bl	8016c20 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006afc:	f00e fbe8 	bl	80152d0 <HAL_PWR_DisableBkUpAccess>
    }
}
 8006b00:	46c0      	nop			@ (mov r8, r8)
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b002      	add	sp, #8
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20000994 	.word	0x20000994
 8006b0c:	08024458 	.word	0x08024458
 8006b10:	08024454 	.word	0x08024454
 8006b14:	0000bebe 	.word	0x0000bebe
 8006b18:	08024474 	.word	0x08024474
 8006b1c:	08024400 	.word	0x08024400

08006b20 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8006b2a:	250f      	movs	r5, #15
 8006b2c:	197b      	adds	r3, r7, r5
 8006b2e:	2201      	movs	r2, #1
 8006b30:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8006b32:	230e      	movs	r3, #14
 8006b34:	18fb      	adds	r3, r7, r3
 8006b36:	2200      	movs	r2, #0
 8006b38:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8006b3a:	260c      	movs	r6, #12
 8006b3c:	19bc      	adds	r4, r7, r6
 8006b3e:	f006 ff63 	bl	800da08 <powerCheck>
 8006b42:	0003      	movs	r3, r0
 8006b44:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8006b46:	19bb      	adds	r3, r7, r6
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8006b4e:	197b      	adds	r3, r7, r5
 8006b50:	781a      	ldrb	r2, [r3, #0]
 8006b52:	197b      	adds	r3, r7, r5
 8006b54:	3201      	adds	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006b58:	230d      	movs	r3, #13
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	e039      	b.n	8006bd6 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006b62:	4b23      	ldr	r3, [pc, #140]	@ (8006bf0 <RTC_GetTime+0xd0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f00f fccc 	bl	8016508 <HAL_RTC_GetTime>
 8006b70:	1e03      	subs	r3, r0, #0
 8006b72:	d005      	beq.n	8006b80 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006b74:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf4 <RTC_GetTime+0xd4>)
 8006b76:	4b20      	ldr	r3, [pc, #128]	@ (8006bf8 <RTC_GetTime+0xd8>)
 8006b78:	0019      	movs	r1, r3
 8006b7a:	2001      	movs	r0, #1
 8006b7c:	f007 feb6 	bl	800e8ec <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006b80:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf0 <RTC_GetTime+0xd0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	2200      	movs	r2, #0
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f00f fdaf 	bl	80166ec <HAL_RTC_GetDate>
 8006b8e:	1e03      	subs	r3, r0, #0
 8006b90:	d005      	beq.n	8006b9e <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8006b92:	4a1a      	ldr	r2, [pc, #104]	@ (8006bfc <RTC_GetTime+0xdc>)
 8006b94:	4b18      	ldr	r3, [pc, #96]	@ (8006bf8 <RTC_GetTime+0xd8>)
 8006b96:	0019      	movs	r1, r3
 8006b98:	2001      	movs	r0, #1
 8006b9a:	f007 fea7 	bl	800e8ec <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d110      	bne.n	8006bca <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	210e      	movs	r1, #14
 8006bae:	187a      	adds	r2, r7, r1
 8006bb0:	7812      	ldrb	r2, [r2, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d018      	beq.n	8006be8 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	7812      	ldrb	r2, [r2, #0]
 8006bbc:	701a      	strb	r2, [r3, #0]
        t++;
 8006bbe:	210f      	movs	r1, #15
 8006bc0:	187b      	adds	r3, r7, r1
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	187b      	adds	r3, r7, r1
 8006bc6:	3201      	adds	r2, #1
 8006bc8:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8006bca:	210d      	movs	r1, #13
 8006bcc:	187b      	adds	r3, r7, r1
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	187b      	adds	r3, r7, r1
 8006bd2:	3201      	adds	r2, #1
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	230d      	movs	r3, #13
 8006bd8:	18fa      	adds	r2, r7, r3
 8006bda:	230f      	movs	r3, #15
 8006bdc:	18fb      	adds	r3, r7, r3
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3bd      	bcc.n	8006b62 <RTC_GetTime+0x42>
 8006be6:	e000      	b.n	8006bea <RTC_GetTime+0xca>
      }
      else {
        return;
 8006be8:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b005      	add	sp, #20
 8006bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bf0:	20000994 	.word	0x20000994
 8006bf4:	0802448c 	.word	0x0802448c
 8006bf8:	08024454 	.word	0x08024454
 8006bfc:	080244a8 	.word	0x080244a8

08006c00 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006c06:	003a      	movs	r2, r7
 8006c08:	1d3b      	adds	r3, r7, #4
 8006c0a:	0011      	movs	r1, r2
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f7ff ff87 	bl	8006b20 <RTC_GetTime>
  return currentDate.WeekDay;
 8006c12:	003b      	movs	r3, r7
 8006c14:	781b      	ldrb	r3, [r3, #0]
}
 8006c16:	0018      	movs	r0, r3
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	b006      	add	sp, #24
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <getPosixTime>:

uint32_t getPosixTime(void) {
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b086      	sub	sp, #24
 8006c22:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006c24:	003a      	movs	r2, r7
 8006c26:	1d3b      	adds	r3, r7, #4
 8006c28:	0011      	movs	r1, r2
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f7ff ff78 	bl	8006b20 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006c30:	1d3a      	adds	r2, r7, #4
 8006c32:	003b      	movs	r3, r7
 8006c34:	0011      	movs	r1, r2
 8006c36:	0018      	movs	r0, r3
 8006c38:	f000 f93e 	bl	8006eb8 <makeTime>
 8006c3c:	0003      	movs	r3, r0
}
 8006c3e:	0018      	movs	r0, r3
 8006c40:	46bd      	mov	sp, r7
 8006c42:	b006      	add	sp, #24
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4a:	b08d      	sub	sp, #52	@ 0x34
 8006c4c:	af04      	add	r7, sp, #16
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006c52:	240c      	movs	r4, #12
 8006c54:	193a      	adds	r2, r7, r4
 8006c56:	2508      	movs	r5, #8
 8006c58:	1979      	adds	r1, r7, r5
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f000 f9f5 	bl	800704c <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006c62:	002a      	movs	r2, r5
 8006c64:	18bb      	adds	r3, r7, r2
 8006c66:	789b      	ldrb	r3, [r3, #2]
 8006c68:	001e      	movs	r6, r3
 8006c6a:	18bb      	adds	r3, r7, r2
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	469c      	mov	ip, r3
 8006c70:	18bb      	adds	r3, r7, r2
 8006c72:	78db      	ldrb	r3, [r3, #3]
 8006c74:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006c76:	0021      	movs	r1, r4
 8006c78:	187b      	adds	r3, r7, r1
 8006c7a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006c7c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006c7e:	187b      	adds	r3, r7, r1
 8006c80:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006c82:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006c84:	187b      	adds	r3, r7, r1
 8006c86:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006c88:	4906      	ldr	r1, [pc, #24]	@ (8006ca4 <getUTCfromPosixTime+0x5c>)
 8006c8a:	6838      	ldr	r0, [r7, #0]
 8006c8c:	9303      	str	r3, [sp, #12]
 8006c8e:	9502      	str	r5, [sp, #8]
 8006c90:	9401      	str	r4, [sp, #4]
 8006c92:	9200      	str	r2, [sp, #0]
 8006c94:	4663      	mov	r3, ip
 8006c96:	0032      	movs	r2, r6
 8006c98:	f019 fb80 	bl	802039c <siprintf>
}
 8006c9c:	46c0      	nop			@ (mov r8, r8)
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	b009      	add	sp, #36	@ 0x24
 8006ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca4:	080244c4 	.word	0x080244c4

08006ca8 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006cb0:	4b10      	ldr	r3, [pc, #64]	@ (8006cf4 <RTC_SetWakeUpTimer+0x4c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f00f ff17 	bl	8016ae8 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006cba:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf4 <RTC_SetWakeUpTimer+0x4c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	22ff      	movs	r2, #255	@ 0xff
 8006cc4:	401a      	ands	r2, r3
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf4 <RTC_SetWakeUpTimer+0x4c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	490a      	ldr	r1, [pc, #40]	@ (8006cf8 <RTC_SetWakeUpTimer+0x50>)
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <RTC_SetWakeUpTimer+0x54>)
 8006cd4:	2280      	movs	r2, #128	@ 0x80
 8006cd6:	0352      	lsls	r2, r2, #13
 8006cd8:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006cda:	4b06      	ldr	r3, [pc, #24]	@ (8006cf4 <RTC_SetWakeUpTimer+0x4c>)
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	0019      	movs	r1, r3
 8006ce6:	f00f fe27 	bl	8016938 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8006cea:	46c0      	nop			@ (mov r8, r8)
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b002      	add	sp, #8
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	46c0      	nop			@ (mov r8, r8)
 8006cf4:	20000994 	.word	0x20000994
 8006cf8:	fffffb7f 	.word	0xfffffb7f
 8006cfc:	40010400 	.word	0x40010400

08006d00 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006d04:	4a0b      	ldr	r2, [pc, #44]	@ (8006d34 <Enter_Standby_Mode+0x34>)
 8006d06:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <Enter_Standby_Mode+0x38>)
 8006d08:	0019      	movs	r1, r3
 8006d0a:	2003      	movs	r0, #3
 8006d0c:	f007 fdee 	bl	800e8ec <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006d10:	2064      	movs	r0, #100	@ 0x64
 8006d12:	f008 fa39 	bl	800f188 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006d16:	4b09      	ldr	r3, [pc, #36]	@ (8006d3c <Enter_Standby_Mode+0x3c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f00f fee4 	bl	8016ae8 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8006d20:	f000 febc 	bl	8007a9c <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8006d24:	f008 fa54 	bl	800f1d0 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8006d28:	f00e fb3e 	bl	80153a8 <HAL_PWR_EnterSTANDBYMode>
}
 8006d2c:	46c0      	nop			@ (mov r8, r8)
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			@ (mov r8, r8)
 8006d34:	08024518 	.word	0x08024518
 8006d38:	08024400 	.word	0x08024400
 8006d3c:	20000994 	.word	0x20000994

08006d40 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	0002      	movs	r2, r0
 8006d48:	1dbb      	adds	r3, r7, #6
 8006d4a:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006d4c:	4b47      	ldr	r3, [pc, #284]	@ (8006e6c <Enter_Stop_Mode+0x12c>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006d54:	f002 fbd2 	bl	80094fc <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006d58:	f7ff fbc0 	bl	80064dc <ReadBatteryVoltage>
 8006d5c:	1c03      	adds	r3, r0, #0
 8006d5e:	1c18      	adds	r0, r3, #0
 8006d60:	f7fc fb80 	bl	8003464 <__aeabi_f2d>
 8006d64:	0002      	movs	r2, r0
 8006d66:	000b      	movs	r3, r1
 8006d68:	4841      	ldr	r0, [pc, #260]	@ (8006e70 <Enter_Stop_Mode+0x130>)
 8006d6a:	4942      	ldr	r1, [pc, #264]	@ (8006e74 <Enter_Stop_Mode+0x134>)
 8006d6c:	9200      	str	r2, [sp, #0]
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	0002      	movs	r2, r0
 8006d72:	2002      	movs	r0, #2
 8006d74:	f007 fdba 	bl	800e8ec <CreateLine>
  powerDisplay(powerCheck());
 8006d78:	f006 fe46 	bl	800da08 <powerCheck>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f006 fe5e 	bl	800da40 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006d84:	1dbb      	adds	r3, r7, #6
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	4a3b      	ldr	r2, [pc, #236]	@ (8006e78 <Enter_Stop_Mode+0x138>)
 8006d8a:	493c      	ldr	r1, [pc, #240]	@ (8006e7c <Enter_Stop_Mode+0x13c>)
 8006d8c:	2003      	movs	r0, #3
 8006d8e:	f007 fdad 	bl	800e8ec <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006d92:	f7ff ff44 	bl	8006c1e <getPosixTime>
 8006d96:	0002      	movs	r2, r0
 8006d98:	1dbb      	adds	r3, r7, #6
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	18d3      	adds	r3, r2, r3
 8006d9e:	4a38      	ldr	r2, [pc, #224]	@ (8006e80 <Enter_Stop_Mode+0x140>)
 8006da0:	0011      	movs	r1, r2
 8006da2:	0018      	movs	r0, r3
 8006da4:	f7ff ff50 	bl	8006c48 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006da8:	4b35      	ldr	r3, [pc, #212]	@ (8006e80 <Enter_Stop_Mode+0x140>)
 8006daa:	4a36      	ldr	r2, [pc, #216]	@ (8006e84 <Enter_Stop_Mode+0x144>)
 8006dac:	4931      	ldr	r1, [pc, #196]	@ (8006e74 <Enter_Stop_Mode+0x134>)
 8006dae:	2002      	movs	r0, #2
 8006db0:	f007 fd9c 	bl	800e8ec <CreateLine>
  HAL_Delay(100);
 8006db4:	2064      	movs	r0, #100	@ 0x64
 8006db6:	f008 f9e7 	bl	800f188 <HAL_Delay>
  HAL_SuspendTick();
 8006dba:	f008 fa09 	bl	800f1d0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006dbe:	1dbb      	adds	r3, r7, #6
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f7ff ff70 	bl	8006ca8 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006dc8:	2101      	movs	r1, #1
 8006dca:	2001      	movs	r0, #1
 8006dcc:	f00e fa90 	bl	80152f0 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006dd0:	f001 faf4 	bl	80083bc <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006dd4:	f008 fa0a 	bl	800f1ec <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006dd8:	1dbb      	adds	r3, r7, #6
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f002 fb0b 	bl	80093f8 <sen5x_enable>
 8006de2:	1e03      	subs	r3, r0, #0
 8006de4:	d01e      	beq.n	8006e24 <Enter_Stop_Mode+0xe4>
    showTime();
 8006de6:	f7ff fc5f 	bl	80066a8 <showTime>
    set_light_on_state();
 8006dea:	f003 f809 	bl	8009e00 <set_light_on_state>
    if (!userToggle) {
 8006dee:	4b26      	ldr	r3, [pc, #152]	@ (8006e88 <Enter_Stop_Mode+0x148>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2201      	movs	r2, #1
 8006df4:	4053      	eors	r3, r2
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d013      	beq.n	8006e24 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006dfc:	201c      	movs	r0, #28
 8006dfe:	f7ff ff53 	bl	8006ca8 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006e02:	4a1d      	ldr	r2, [pc, #116]	@ (8006e78 <Enter_Stop_Mode+0x138>)
 8006e04:	491d      	ldr	r1, [pc, #116]	@ (8006e7c <Enter_Stop_Mode+0x13c>)
 8006e06:	231c      	movs	r3, #28
 8006e08:	2003      	movs	r0, #3
 8006e0a:	f007 fd6f 	bl	800e8ec <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006e0e:	2101      	movs	r1, #1
 8006e10:	2001      	movs	r0, #1
 8006e12:	f00e fa6d 	bl	80152f0 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006e16:	f001 fad1 	bl	80083bc <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8006e1a:	f008 f9e7 	bl	800f1ec <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 8006e1e:	2000      	movs	r0, #0
 8006e20:	f002 fac8 	bl	80093b4 <setsen5xReadTimer>
    }
  }
  showTime();
 8006e24:	f7ff fc40 	bl	80066a8 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006e28:	f001 ff5e 	bl	8008ce8 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006e2c:	f004 fe48 	bl	800bac0 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006e30:	2000      	movs	r0, #0
 8006e32:	f002 fad1 	bl	80093d8 <setsen5xSamplecounter>
  setESPTimeStamp(4500);
 8006e36:	4b15      	ldr	r3, [pc, #84]	@ (8006e8c <Enter_Stop_Mode+0x14c>)
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f7fc fc13 	bl	8003664 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f004 fe2c 	bl	800ba9c <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006e44:	2000      	movs	r0, #0
 8006e46:	f007 ff15 	bl	800ec74 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f001 ff3a 	bl	8008cc4 <setMICTimeStamp>
  ESPTransmitDone = false;
 8006e50:	4b0f      	ldr	r3, [pc, #60]	@ (8006e90 <Enter_Stop_Mode+0x150>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 3000;
 8006e56:	f008 f98d 	bl	800f174 <HAL_GetTick>
 8006e5a:	0003      	movs	r3, r0
 8006e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e94 <Enter_Stop_Mode+0x154>)
 8006e5e:	189a      	adds	r2, r3, r2
 8006e60:	4b0d      	ldr	r3, [pc, #52]	@ (8006e98 <Enter_Stop_Mode+0x158>)
 8006e62:	601a      	str	r2, [r3, #0]
}
 8006e64:	46c0      	nop			@ (mov r8, r8)
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b002      	add	sp, #8
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20000c85 	.word	0x20000c85
 8006e70:	0802453c 	.word	0x0802453c
 8006e74:	08024554 	.word	0x08024554
 8006e78:	08024558 	.word	0x08024558
 8006e7c:	08024400 	.word	0x08024400
 8006e80:	2000099c 	.word	0x2000099c
 8006e84:	0802457c 	.word	0x0802457c
 8006e88:	20001c16 	.word	0x20001c16
 8006e8c:	00001194 	.word	0x00001194
 8006e90:	20000554 	.word	0x20000554
 8006e94:	00000bb8 	.word	0x00000bb8
 8006e98:	20000be8 	.word	0x20000be8

08006e9c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006ea4:	4b03      	ldr	r3, [pc, #12]	@ (8006eb4 <InitClock+0x18>)
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	601a      	str	r2, [r3, #0]
}
 8006eaa:	46c0      	nop			@ (mov r8, r8)
 8006eac:	46bd      	mov	sp, r7
 8006eae:	b002      	add	sp, #8
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	46c0      	nop			@ (mov r8, r8)
 8006eb4:	20000994 	.word	0x20000994

08006eb8 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	78db      	ldrb	r3, [r3, #3]
 8006ec6:	001a      	movs	r2, r3
 8006ec8:	0013      	movs	r3, r2
 8006eca:	025b      	lsls	r3, r3, #9
 8006ecc:	189b      	adds	r3, r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	189b      	adds	r3, r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	189b      	adds	r3, r3, r2
 8006ed6:	011a      	lsls	r2, r3, #4
 8006ed8:	1ad2      	subs	r2, r2, r3
 8006eda:	01d3      	lsls	r3, r2, #7
 8006edc:	001a      	movs	r2, r3
 8006ede:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e028      	b.n	8006f38 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4a53      	ldr	r2, [pc, #332]	@ (8007038 <makeTime+0x180>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	db21      	blt.n	8006f32 <makeTime+0x7a>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4a52      	ldr	r2, [pc, #328]	@ (800703c <makeTime+0x184>)
 8006ef2:	4694      	mov	ip, r2
 8006ef4:	4463      	add	r3, ip
 8006ef6:	001a      	movs	r2, r3
 8006ef8:	2303      	movs	r3, #3
 8006efa:	4013      	ands	r3, r2
 8006efc:	d119      	bne.n	8006f32 <makeTime+0x7a>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4a4e      	ldr	r2, [pc, #312]	@ (800703c <makeTime+0x184>)
 8006f02:	4694      	mov	ip, r2
 8006f04:	4463      	add	r3, ip
 8006f06:	2164      	movs	r1, #100	@ 0x64
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f7f9 fabb 	bl	8000484 <__aeabi_idivmod>
 8006f0e:	1e0b      	subs	r3, r1, #0
 8006f10:	d10a      	bne.n	8006f28 <makeTime+0x70>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4a49      	ldr	r2, [pc, #292]	@ (800703c <makeTime+0x184>)
 8006f16:	4694      	mov	ip, r2
 8006f18:	4463      	add	r3, ip
 8006f1a:	22c8      	movs	r2, #200	@ 0xc8
 8006f1c:	0051      	lsls	r1, r2, #1
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f7f9 fab0 	bl	8000484 <__aeabi_idivmod>
 8006f24:	1e0b      	subs	r3, r1, #0
 8006f26:	d104      	bne.n	8006f32 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4a45      	ldr	r2, [pc, #276]	@ (8007040 <makeTime+0x188>)
 8006f2c:	4694      	mov	ip, r2
 8006f2e:	4463      	add	r3, ip
 8006f30:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3301      	adds	r3, #1
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	78db      	ldrb	r3, [r3, #3]
 8006f3c:	001a      	movs	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4293      	cmp	r3, r2
 8006f42:	dbd0      	blt.n	8006ee6 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006f44:	2301      	movs	r3, #1
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	e03c      	b.n	8006fc4 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d125      	bne.n	8006f9c <makeTime+0xe4>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	78db      	ldrb	r3, [r3, #3]
 8006f54:	4a39      	ldr	r2, [pc, #228]	@ (800703c <makeTime+0x184>)
 8006f56:	4694      	mov	ip, r2
 8006f58:	4463      	add	r3, ip
 8006f5a:	001a      	movs	r2, r3
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d11c      	bne.n	8006f9c <makeTime+0xe4>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	78db      	ldrb	r3, [r3, #3]
 8006f66:	4a35      	ldr	r2, [pc, #212]	@ (800703c <makeTime+0x184>)
 8006f68:	4694      	mov	ip, r2
 8006f6a:	4463      	add	r3, ip
 8006f6c:	2164      	movs	r1, #100	@ 0x64
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f7f9 fa88 	bl	8000484 <__aeabi_idivmod>
 8006f74:	1e0b      	subs	r3, r1, #0
 8006f76:	d10b      	bne.n	8006f90 <makeTime+0xd8>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	78db      	ldrb	r3, [r3, #3]
 8006f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800703c <makeTime+0x184>)
 8006f7e:	4694      	mov	ip, r2
 8006f80:	4463      	add	r3, ip
 8006f82:	22c8      	movs	r2, #200	@ 0xc8
 8006f84:	0051      	lsls	r1, r2, #1
 8006f86:	0018      	movs	r0, r3
 8006f88:	f7f9 fa7c 	bl	8000484 <__aeabi_idivmod>
 8006f8c:	1e0b      	subs	r3, r1, #0
 8006f8e:	d105      	bne.n	8006f9c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4a2c      	ldr	r2, [pc, #176]	@ (8007044 <makeTime+0x18c>)
 8006f94:	4694      	mov	ip, r2
 8006f96:	4463      	add	r3, ip
 8006f98:	60bb      	str	r3, [r7, #8]
 8006f9a:	e010      	b.n	8006fbe <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	4a29      	ldr	r2, [pc, #164]	@ (8007048 <makeTime+0x190>)
 8006fa2:	5cd3      	ldrb	r3, [r2, r3]
 8006fa4:	001a      	movs	r2, r3
 8006fa6:	0013      	movs	r3, r2
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	189b      	adds	r3, r3, r2
 8006fac:	011a      	lsls	r2, r3, #4
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	0113      	lsls	r3, r2, #4
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	01db      	lsls	r3, r3, #7
 8006fb6:	001a      	movs	r2, r3
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	189b      	adds	r3, r3, r2
 8006fbc:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	785b      	ldrb	r3, [r3, #1]
 8006fc8:	001a      	movs	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	dbbc      	blt.n	8006f4a <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	789b      	ldrb	r3, [r3, #2]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	001a      	movs	r2, r3
 8006fd8:	0013      	movs	r3, r2
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	189b      	adds	r3, r3, r2
 8006fde:	011a      	lsls	r2, r3, #4
 8006fe0:	1ad2      	subs	r2, r2, r3
 8006fe2:	0113      	lsls	r3, r2, #4
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	01db      	lsls	r3, r3, #7
 8006fe8:	001a      	movs	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	189b      	adds	r3, r3, r2
 8006fee:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	001a      	movs	r2, r3
 8006ff6:	0013      	movs	r3, r2
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	011a      	lsls	r2, r3, #4
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	0113      	lsls	r3, r2, #4
 8007002:	001a      	movs	r2, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	189b      	adds	r3, r3, r2
 8007008:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	001a      	movs	r2, r3
 8007010:	0013      	movs	r3, r2
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	001a      	movs	r2, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	189b      	adds	r3, r3, r2
 800701e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	789b      	ldrb	r3, [r3, #2]
 8007024:	001a      	movs	r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	189b      	adds	r3, r3, r2
 800702a:	60bb      	str	r3, [r7, #8]
  return seconds;
 800702c:	68bb      	ldr	r3, [r7, #8]
}
 800702e:	0018      	movs	r0, r3
 8007030:	46bd      	mov	sp, r7
 8007032:	b004      	add	sp, #16
 8007034:	bd80      	pop	{r7, pc}
 8007036:	46c0      	nop			@ (mov r8, r8)
 8007038:	fffff84f 	.word	0xfffff84f
 800703c:	000007b2 	.word	0x000007b2
 8007040:	00015180 	.word	0x00015180
 8007044:	00263b80 	.word	0x00263b80
 8007048:	08025ae4 	.word	0x08025ae4

0800704c <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b089      	sub	sp, #36	@ 0x24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	213c      	movs	r1, #60	@ 0x3c
 8007060:	0018      	movs	r0, r3
 8007062:	f7f9 f925 	bl	80002b0 <__aeabi_uidivmod>
 8007066:	000b      	movs	r3, r1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	213c      	movs	r1, #60	@ 0x3c
 8007072:	0018      	movs	r0, r3
 8007074:	f7f9 f896 	bl	80001a4 <__udivsi3>
 8007078:	0003      	movs	r3, r0
 800707a:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	213c      	movs	r1, #60	@ 0x3c
 8007080:	0018      	movs	r0, r3
 8007082:	f7f9 f915 	bl	80002b0 <__aeabi_uidivmod>
 8007086:	000b      	movs	r3, r1
 8007088:	b2da      	uxtb	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	213c      	movs	r1, #60	@ 0x3c
 8007092:	0018      	movs	r0, r3
 8007094:	f7f9 f886 	bl	80001a4 <__udivsi3>
 8007098:	0003      	movs	r3, r0
 800709a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2118      	movs	r1, #24
 80070a0:	0018      	movs	r0, r3
 80070a2:	f7f9 f905 	bl	80002b0 <__aeabi_uidivmod>
 80070a6:	000b      	movs	r3, r1
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2118      	movs	r1, #24
 80070b2:	0018      	movs	r0, r3
 80070b4:	f7f9 f876 	bl	80001a4 <__udivsi3>
 80070b8:	0003      	movs	r3, r0
 80070ba:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	3b01      	subs	r3, #1
 80070c0:	2107      	movs	r1, #7
 80070c2:	0018      	movs	r0, r3
 80070c4:	f7f9 f8f4 	bl	80002b0 <__aeabi_uidivmod>
 80070c8:	000b      	movs	r3, r1
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	3301      	adds	r3, #1
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	701a      	strb	r2, [r3, #0]
  year = 0;
 80070d4:	231f      	movs	r3, #31
 80070d6:	18fb      	adds	r3, r7, r3
 80070d8:	2200      	movs	r2, #0
 80070da:	701a      	strb	r2, [r3, #0]
  days = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80070e0:	e005      	b.n	80070ee <breakPosixTime+0xa2>
    year++;
 80070e2:	211f      	movs	r1, #31
 80070e4:	187b      	adds	r3, r7, r1
 80070e6:	781a      	ldrb	r2, [r3, #0]
 80070e8:	187b      	adds	r3, r7, r1
 80070ea:	3201      	adds	r2, #1
 80070ec:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80070ee:	241f      	movs	r4, #31
 80070f0:	193b      	adds	r3, r7, r4
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	4a64      	ldr	r2, [pc, #400]	@ (8007288 <breakPosixTime+0x23c>)
 80070f6:	4694      	mov	ip, r2
 80070f8:	4463      	add	r3, ip
 80070fa:	001a      	movs	r2, r3
 80070fc:	2303      	movs	r3, #3
 80070fe:	4013      	ands	r3, r2
 8007100:	d119      	bne.n	8007136 <breakPosixTime+0xea>
 8007102:	193b      	adds	r3, r7, r4
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	4a60      	ldr	r2, [pc, #384]	@ (8007288 <breakPosixTime+0x23c>)
 8007108:	4694      	mov	ip, r2
 800710a:	4463      	add	r3, ip
 800710c:	2164      	movs	r1, #100	@ 0x64
 800710e:	0018      	movs	r0, r3
 8007110:	f7f9 f9b8 	bl	8000484 <__aeabi_idivmod>
 8007114:	1e0b      	subs	r3, r1, #0
 8007116:	d10b      	bne.n	8007130 <breakPosixTime+0xe4>
 8007118:	193b      	adds	r3, r7, r4
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	4a5a      	ldr	r2, [pc, #360]	@ (8007288 <breakPosixTime+0x23c>)
 800711e:	4694      	mov	ip, r2
 8007120:	4463      	add	r3, ip
 8007122:	22c8      	movs	r2, #200	@ 0xc8
 8007124:	0051      	lsls	r1, r2, #1
 8007126:	0018      	movs	r0, r3
 8007128:	f7f9 f9ac 	bl	8000484 <__aeabi_idivmod>
 800712c:	1e0b      	subs	r3, r1, #0
 800712e:	d102      	bne.n	8007136 <breakPosixTime+0xea>
 8007130:	23b7      	movs	r3, #183	@ 0xb7
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	e001      	b.n	800713a <breakPosixTime+0xee>
 8007136:	236e      	movs	r3, #110	@ 0x6e
 8007138:	33ff      	adds	r3, #255	@ 0xff
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	18d3      	adds	r3, r2, r3
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	429a      	cmp	r2, r3
 8007146:	d9cc      	bls.n	80070e2 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	241f      	movs	r4, #31
 800714c:	193a      	adds	r2, r7, r4
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8007152:	193b      	adds	r3, r7, r4
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	4a4c      	ldr	r2, [pc, #304]	@ (8007288 <breakPosixTime+0x23c>)
 8007158:	4694      	mov	ip, r2
 800715a:	4463      	add	r3, ip
 800715c:	001a      	movs	r2, r3
 800715e:	2303      	movs	r3, #3
 8007160:	4013      	ands	r3, r2
 8007162:	d119      	bne.n	8007198 <breakPosixTime+0x14c>
 8007164:	193b      	adds	r3, r7, r4
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	4a47      	ldr	r2, [pc, #284]	@ (8007288 <breakPosixTime+0x23c>)
 800716a:	4694      	mov	ip, r2
 800716c:	4463      	add	r3, ip
 800716e:	2164      	movs	r1, #100	@ 0x64
 8007170:	0018      	movs	r0, r3
 8007172:	f7f9 f987 	bl	8000484 <__aeabi_idivmod>
 8007176:	1e0b      	subs	r3, r1, #0
 8007178:	d10b      	bne.n	8007192 <breakPosixTime+0x146>
 800717a:	193b      	adds	r3, r7, r4
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	4a42      	ldr	r2, [pc, #264]	@ (8007288 <breakPosixTime+0x23c>)
 8007180:	4694      	mov	ip, r2
 8007182:	4463      	add	r3, ip
 8007184:	22c8      	movs	r2, #200	@ 0xc8
 8007186:	0051      	lsls	r1, r2, #1
 8007188:	0018      	movs	r0, r3
 800718a:	f7f9 f97b 	bl	8000484 <__aeabi_idivmod>
 800718e:	1e0b      	subs	r3, r1, #0
 8007190:	d102      	bne.n	8007198 <breakPosixTime+0x14c>
 8007192:	23b7      	movs	r3, #183	@ 0xb7
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	e001      	b.n	800719c <breakPosixTime+0x150>
 8007198:	236e      	movs	r3, #110	@ 0x6e
 800719a:	33ff      	adds	r3, #255	@ 0xff
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	61bb      	str	r3, [r7, #24]

  days=0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
  month=0;
 80071ae:	211e      	movs	r1, #30
 80071b0:	187b      	adds	r3, r7, r1
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 80071b6:	231d      	movs	r3, #29
 80071b8:	18fb      	adds	r3, r7, r3
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 80071be:	187b      	adds	r3, r7, r1
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e048      	b.n	8007258 <breakPosixTime+0x20c>
    if (month==1) { // february
 80071c6:	231e      	movs	r3, #30
 80071c8:	18fb      	adds	r3, r7, r3
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d12a      	bne.n	8007226 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 80071d0:	241f      	movs	r4, #31
 80071d2:	193b      	adds	r3, r7, r4
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007288 <breakPosixTime+0x23c>)
 80071d8:	4694      	mov	ip, r2
 80071da:	4463      	add	r3, ip
 80071dc:	001a      	movs	r2, r3
 80071de:	2303      	movs	r3, #3
 80071e0:	4013      	ands	r3, r2
 80071e2:	d11b      	bne.n	800721c <breakPosixTime+0x1d0>
 80071e4:	193b      	adds	r3, r7, r4
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	4a27      	ldr	r2, [pc, #156]	@ (8007288 <breakPosixTime+0x23c>)
 80071ea:	4694      	mov	ip, r2
 80071ec:	4463      	add	r3, ip
 80071ee:	2164      	movs	r1, #100	@ 0x64
 80071f0:	0018      	movs	r0, r3
 80071f2:	f7f9 f947 	bl	8000484 <__aeabi_idivmod>
 80071f6:	1e0b      	subs	r3, r1, #0
 80071f8:	d10b      	bne.n	8007212 <breakPosixTime+0x1c6>
 80071fa:	193b      	adds	r3, r7, r4
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	4a22      	ldr	r2, [pc, #136]	@ (8007288 <breakPosixTime+0x23c>)
 8007200:	4694      	mov	ip, r2
 8007202:	4463      	add	r3, ip
 8007204:	22c8      	movs	r2, #200	@ 0xc8
 8007206:	0051      	lsls	r1, r2, #1
 8007208:	0018      	movs	r0, r3
 800720a:	f7f9 f93b 	bl	8000484 <__aeabi_idivmod>
 800720e:	1e0b      	subs	r3, r1, #0
 8007210:	d104      	bne.n	800721c <breakPosixTime+0x1d0>
        monthLength=29;
 8007212:	231d      	movs	r3, #29
 8007214:	18fb      	adds	r3, r7, r3
 8007216:	221d      	movs	r2, #29
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e00c      	b.n	8007236 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800721c:	231d      	movs	r3, #29
 800721e:	18fb      	adds	r3, r7, r3
 8007220:	221c      	movs	r2, #28
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	e007      	b.n	8007236 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007226:	231e      	movs	r3, #30
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	781a      	ldrb	r2, [r3, #0]
 800722c:	231d      	movs	r3, #29
 800722e:	18fb      	adds	r3, r7, r3
 8007230:	4916      	ldr	r1, [pc, #88]	@ (800728c <breakPosixTime+0x240>)
 8007232:	5c8a      	ldrb	r2, [r1, r2]
 8007234:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007236:	211d      	movs	r1, #29
 8007238:	187b      	adds	r3, r7, r1
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	429a      	cmp	r2, r3
 8007240:	d310      	bcc.n	8007264 <breakPosixTime+0x218>
      time -= monthLength;
 8007242:	187b      	adds	r3, r7, r1
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800724c:	211e      	movs	r1, #30
 800724e:	187b      	adds	r3, r7, r1
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	187b      	adds	r3, r7, r1
 8007254:	3201      	adds	r2, #1
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	231e      	movs	r3, #30
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b0b      	cmp	r3, #11
 8007260:	d9b1      	bls.n	80071c6 <breakPosixTime+0x17a>
 8007262:	e000      	b.n	8007266 <breakPosixTime+0x21a>
    } else {
        break;
 8007264:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8007266:	231e      	movs	r3, #30
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	b2da      	uxtb	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	3301      	adds	r3, #1
 800727a:	b2da      	uxtb	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	709a      	strb	r2, [r3, #2]
}
 8007280:	46c0      	nop			@ (mov r8, r8)
 8007282:	46bd      	mov	sp, r7
 8007284:	b009      	add	sp, #36	@ 0x24
 8007286:	bd90      	pop	{r4, r7, pc}
 8007288:	000007b2 	.word	0x000007b2
 800728c:	08025ae4 	.word	0x08025ae4

08007290 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007296:	003b      	movs	r3, r7
 8007298:	0018      	movs	r0, r3
 800729a:	2308      	movs	r3, #8
 800729c:	001a      	movs	r2, r3
 800729e:	2100      	movs	r1, #0
 80072a0:	f019 f9c0 	bl	8020624 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80072a4:	4b30      	ldr	r3, [pc, #192]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072a6:	4a31      	ldr	r2, [pc, #196]	@ (800736c <MX_ADC_Init+0xdc>)
 80072a8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80072aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80072b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072b2:	22c0      	movs	r2, #192	@ 0xc0
 80072b4:	0612      	lsls	r2, r2, #24
 80072b6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80072b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80072be:	4b2a      	ldr	r3, [pc, #168]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80072c4:	4b28      	ldr	r3, [pc, #160]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80072ca:	4b27      	ldr	r3, [pc, #156]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80072d0:	4b25      	ldr	r3, [pc, #148]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072d2:	2220      	movs	r2, #32
 80072d4:	2100      	movs	r1, #0
 80072d6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80072d8:	4b23      	ldr	r3, [pc, #140]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072da:	2221      	movs	r2, #33	@ 0x21
 80072dc:	2101      	movs	r1, #1
 80072de:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80072e0:	4b21      	ldr	r3, [pc, #132]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80072e6:	4b20      	ldr	r3, [pc, #128]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072e8:	22c2      	movs	r2, #194	@ 0xc2
 80072ea:	32ff      	adds	r2, #255	@ 0xff
 80072ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80072ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072f0:	222c      	movs	r2, #44	@ 0x2c
 80072f2:	2100      	movs	r1, #0
 80072f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80072f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072f8:	2204      	movs	r2, #4
 80072fa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80072fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007368 <MX_ADC_Init+0xd8>)
 80072fe:	2200      	movs	r2, #0
 8007300:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8007302:	4b19      	ldr	r3, [pc, #100]	@ (8007368 <MX_ADC_Init+0xd8>)
 8007304:	2200      	movs	r2, #0
 8007306:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007308:	4b17      	ldr	r3, [pc, #92]	@ (8007368 <MX_ADC_Init+0xd8>)
 800730a:	2200      	movs	r2, #0
 800730c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800730e:	4b16      	ldr	r3, [pc, #88]	@ (8007368 <MX_ADC_Init+0xd8>)
 8007310:	2200      	movs	r2, #0
 8007312:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007314:	4b14      	ldr	r3, [pc, #80]	@ (8007368 <MX_ADC_Init+0xd8>)
 8007316:	0018      	movs	r0, r3
 8007318:	f007 ff94 	bl	800f244 <HAL_ADC_Init>
 800731c:	1e03      	subs	r3, r0, #0
 800731e:	d001      	beq.n	8007324 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007320:	f001 f992 	bl	8008648 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007324:	003b      	movs	r3, r7
 8007326:	4a12      	ldr	r2, [pc, #72]	@ (8007370 <MX_ADC_Init+0xe0>)
 8007328:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800732a:	003b      	movs	r3, r7
 800732c:	2280      	movs	r2, #128	@ 0x80
 800732e:	0152      	lsls	r2, r2, #5
 8007330:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007332:	003a      	movs	r2, r7
 8007334:	4b0c      	ldr	r3, [pc, #48]	@ (8007368 <MX_ADC_Init+0xd8>)
 8007336:	0011      	movs	r1, r2
 8007338:	0018      	movs	r0, r3
 800733a:	f008 f9f3 	bl	800f724 <HAL_ADC_ConfigChannel>
 800733e:	1e03      	subs	r3, r0, #0
 8007340:	d001      	beq.n	8007346 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8007342:	f001 f981 	bl	8008648 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007346:	003b      	movs	r3, r7
 8007348:	4a0a      	ldr	r2, [pc, #40]	@ (8007374 <MX_ADC_Init+0xe4>)
 800734a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800734c:	003a      	movs	r2, r7
 800734e:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <MX_ADC_Init+0xd8>)
 8007350:	0011      	movs	r1, r2
 8007352:	0018      	movs	r0, r3
 8007354:	f008 f9e6 	bl	800f724 <HAL_ADC_ConfigChannel>
 8007358:	1e03      	subs	r3, r0, #0
 800735a:	d001      	beq.n	8007360 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800735c:	f001 f974 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007360:	46c0      	nop			@ (mov r8, r8)
 8007362:	46bd      	mov	sp, r7
 8007364:	b002      	add	sp, #8
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200009b4 	.word	0x200009b4
 800736c:	40012400 	.word	0x40012400
 8007370:	38004000 	.word	0x38004000
 8007374:	3c008000 	.word	0x3c008000

08007378 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007378:	b590      	push	{r4, r7, lr}
 800737a:	b089      	sub	sp, #36	@ 0x24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007380:	240c      	movs	r4, #12
 8007382:	193b      	adds	r3, r7, r4
 8007384:	0018      	movs	r0, r3
 8007386:	2314      	movs	r3, #20
 8007388:	001a      	movs	r2, r3
 800738a:	2100      	movs	r1, #0
 800738c:	f019 f94a 	bl	8020624 <memset>
  if(adcHandle->Instance==ADC1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a14      	ldr	r2, [pc, #80]	@ (80073e8 <HAL_ADC_MspInit+0x70>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d121      	bne.n	80073de <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800739a:	4b14      	ldr	r3, [pc, #80]	@ (80073ec <HAL_ADC_MspInit+0x74>)
 800739c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800739e:	4b13      	ldr	r3, [pc, #76]	@ (80073ec <HAL_ADC_MspInit+0x74>)
 80073a0:	2180      	movs	r1, #128	@ 0x80
 80073a2:	0089      	lsls	r1, r1, #2
 80073a4:	430a      	orrs	r2, r1
 80073a6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073a8:	4b10      	ldr	r3, [pc, #64]	@ (80073ec <HAL_ADC_MspInit+0x74>)
 80073aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ac:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <HAL_ADC_MspInit+0x74>)
 80073ae:	2104      	movs	r1, #4
 80073b0:	430a      	orrs	r2, r1
 80073b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073b4:	4b0d      	ldr	r3, [pc, #52]	@ (80073ec <HAL_ADC_MspInit+0x74>)
 80073b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b8:	2204      	movs	r2, #4
 80073ba:	4013      	ands	r3, r2
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80073c0:	193b      	adds	r3, r7, r4
 80073c2:	2230      	movs	r2, #48	@ 0x30
 80073c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073c6:	193b      	adds	r3, r7, r4
 80073c8:	2203      	movs	r2, #3
 80073ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073cc:	193b      	adds	r3, r7, r4
 80073ce:	2200      	movs	r2, #0
 80073d0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073d2:	193b      	adds	r3, r7, r4
 80073d4:	4a06      	ldr	r2, [pc, #24]	@ (80073f0 <HAL_ADC_MspInit+0x78>)
 80073d6:	0019      	movs	r1, r3
 80073d8:	0010      	movs	r0, r2
 80073da:	f008 ffc1 	bl	8010360 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80073de:	46c0      	nop			@ (mov r8, r8)
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b009      	add	sp, #36	@ 0x24
 80073e4:	bd90      	pop	{r4, r7, pc}
 80073e6:	46c0      	nop			@ (mov r8, r8)
 80073e8:	40012400 	.word	0x40012400
 80073ec:	40021000 	.word	0x40021000
 80073f0:	50000800 	.word	0x50000800

080073f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80073fa:	4b10      	ldr	r3, [pc, #64]	@ (800743c <MX_DMA_Init+0x48>)
 80073fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073fe:	4b0f      	ldr	r3, [pc, #60]	@ (800743c <MX_DMA_Init+0x48>)
 8007400:	2101      	movs	r1, #1
 8007402:	430a      	orrs	r2, r1
 8007404:	631a      	str	r2, [r3, #48]	@ 0x30
 8007406:	4b0d      	ldr	r3, [pc, #52]	@ (800743c <MX_DMA_Init+0x48>)
 8007408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740a:	2201      	movs	r2, #1
 800740c:	4013      	ands	r3, r2
 800740e:	607b      	str	r3, [r7, #4]
 8007410:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8007412:	2200      	movs	r2, #0
 8007414:	2100      	movs	r1, #0
 8007416:	200a      	movs	r0, #10
 8007418:	f008 fb50 	bl	800fabc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800741c:	200a      	movs	r0, #10
 800741e:	f008 fb62 	bl	800fae6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8007422:	2200      	movs	r2, #0
 8007424:	2103      	movs	r1, #3
 8007426:	200b      	movs	r0, #11
 8007428:	f008 fb48 	bl	800fabc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800742c:	200b      	movs	r0, #11
 800742e:	f008 fb5a 	bl	800fae6 <HAL_NVIC_EnableIRQ>

}
 8007432:	46c0      	nop			@ (mov r8, r8)
 8007434:	46bd      	mov	sp, r7
 8007436:	b002      	add	sp, #8
 8007438:	bd80      	pop	{r7, pc}
 800743a:	46c0      	nop			@ (mov r8, r8)
 800743c:	40021000 	.word	0x40021000

08007440 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	1dbb      	adds	r3, r7, #6
 800744c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800744e:	4b17      	ldr	r3, [pc, #92]	@ (80074ac <WriteUint8ArrayEeprom+0x6c>)
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8007454:	f008 fec4 	bl	80101e0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8007458:	2316      	movs	r3, #22
 800745a:	18fb      	adds	r3, r7, r3
 800745c:	2200      	movs	r2, #0
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	e015      	b.n	800748e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8007462:	4b12      	ldr	r3, [pc, #72]	@ (80074ac <WriteUint8ArrayEeprom+0x6c>)
 8007464:	6819      	ldr	r1, [r3, #0]
 8007466:	2416      	movs	r4, #22
 8007468:	193b      	adds	r3, r7, r4
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	18d3      	adds	r3, r2, r3
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	001a      	movs	r2, r3
 8007474:	2000      	movs	r0, #0
 8007476:	f008 ff1b 	bl	80102b0 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800747a:	4b0c      	ldr	r3, [pc, #48]	@ (80074ac <WriteUint8ArrayEeprom+0x6c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	4b0a      	ldr	r3, [pc, #40]	@ (80074ac <WriteUint8ArrayEeprom+0x6c>)
 8007482:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007484:	193b      	adds	r3, r7, r4
 8007486:	881a      	ldrh	r2, [r3, #0]
 8007488:	193b      	adds	r3, r7, r4
 800748a:	3201      	adds	r2, #1
 800748c:	801a      	strh	r2, [r3, #0]
 800748e:	2316      	movs	r3, #22
 8007490:	18fa      	adds	r2, r7, r3
 8007492:	1dbb      	adds	r3, r7, #6
 8007494:	8812      	ldrh	r2, [r2, #0]
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	429a      	cmp	r2, r3
 800749a:	d3e2      	bcc.n	8007462 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800749c:	f008 fece 	bl	801023c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80074a0:	4b02      	ldr	r3, [pc, #8]	@ (80074ac <WriteUint8ArrayEeprom+0x6c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
}
 80074a4:	0018      	movs	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	b007      	add	sp, #28
 80074aa:	bd90      	pop	{r4, r7, pc}
 80074ac:	20000a10 	.word	0x20000a10

080074b0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	0019      	movs	r1, r3
 80074bc:	1dbb      	adds	r3, r7, #6
 80074be:	801a      	strh	r2, [r3, #0]
 80074c0:	1d3b      	adds	r3, r7, #4
 80074c2:	1c0a      	adds	r2, r1, #0
 80074c4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80074c6:	1dba      	adds	r2, r7, #6
 80074c8:	1d3b      	adds	r3, r7, #4
 80074ca:	8812      	ldrh	r2, [r2, #0]
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d806      	bhi.n	80074e0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80074d2:	1dbb      	adds	r3, r7, #6
 80074d4:	881a      	ldrh	r2, [r3, #0]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	0018      	movs	r0, r3
 80074dc:	f7ff ffb0 	bl	8007440 <WriteUint8ArrayEeprom>
    }
}
 80074e0:	46c0      	nop			@ (mov r8, r8)
 80074e2:	46bd      	mov	sp, r7
 80074e4:	b004      	add	sp, #16
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	1dbb      	adds	r3, r7, #6
 80074f4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 80074f6:	2316      	movs	r3, #22
 80074f8:	18fb      	adds	r3, r7, r3
 80074fa:	2200      	movs	r2, #0
 80074fc:	801a      	strh	r2, [r3, #0]
 80074fe:	e010      	b.n	8007522 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8007500:	2016      	movs	r0, #22
 8007502:	183b      	adds	r3, r7, r0
 8007504:	881a      	ldrh	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	18d3      	adds	r3, r2, r3
 800750a:	0019      	movs	r1, r3
 800750c:	183b      	adds	r3, r7, r0
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	18d3      	adds	r3, r2, r3
 8007514:	780a      	ldrb	r2, [r1, #0]
 8007516:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007518:	183b      	adds	r3, r7, r0
 800751a:	881a      	ldrh	r2, [r3, #0]
 800751c:	183b      	adds	r3, r7, r0
 800751e:	3201      	adds	r2, #1
 8007520:	801a      	strh	r2, [r3, #0]
 8007522:	2316      	movs	r3, #22
 8007524:	18fa      	adds	r2, r7, r3
 8007526:	1dbb      	adds	r3, r7, #6
 8007528:	8812      	ldrh	r2, [r2, #0]
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d3e7      	bcc.n	8007500 <ReadUint8ArrayEEprom+0x18>
    }
}
 8007530:	46c0      	nop			@ (mov r8, r8)
 8007532:	46c0      	nop			@ (mov r8, r8)
 8007534:	46bd      	mov	sp, r7
 8007536:	b006      	add	sp, #24
 8007538:	bd80      	pop	{r7, pc}

0800753a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800753a:	b590      	push	{r4, r7, lr}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	000a      	movs	r2, r1
 8007544:	1cbb      	adds	r3, r7, #2
 8007546:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8007548:	f008 fe4a 	bl	80101e0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800754c:	230e      	movs	r3, #14
 800754e:	18fb      	adds	r3, r7, r3
 8007550:	2200      	movs	r2, #0
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	e00c      	b.n	8007570 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8007556:	240e      	movs	r4, #14
 8007558:	193b      	adds	r3, r7, r4
 800755a:	881a      	ldrh	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	18d3      	adds	r3, r2, r3
 8007560:	0018      	movs	r0, r3
 8007562:	f008 fe79 	bl	8010258 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8007566:	193b      	adds	r3, r7, r4
 8007568:	193a      	adds	r2, r7, r4
 800756a:	8812      	ldrh	r2, [r2, #0]
 800756c:	3204      	adds	r2, #4
 800756e:	801a      	strh	r2, [r3, #0]
 8007570:	230e      	movs	r3, #14
 8007572:	18fa      	adds	r2, r7, r3
 8007574:	1cbb      	adds	r3, r7, #2
 8007576:	8812      	ldrh	r2, [r2, #0]
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d3eb      	bcc.n	8007556 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800757e:	f008 fe5d 	bl	801023c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8007582:	46c0      	nop			@ (mov r8, r8)
 8007584:	46bd      	mov	sp, r7
 8007586:	b005      	add	sp, #20
 8007588:	bd90      	pop	{r4, r7, pc}
	...

0800758c <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b7f      	cmp	r3, #127	@ 0x7f
 800759c:	d901      	bls.n	80075a2 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800759e:	237f      	movs	r3, #127	@ 0x7f
 80075a0:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80075a2:	2017      	movs	r0, #23
 80075a4:	183b      	adds	r3, r7, r0
 80075a6:	490d      	ldr	r1, [pc, #52]	@ (80075dc <accessLUT10log10+0x50>)
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	188a      	adds	r2, r1, r2
 80075ac:	7812      	ldrb	r2, [r2, #0]
 80075ae:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80075b0:	0001      	movs	r1, r0
 80075b2:	187b      	adds	r3, r7, r1
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2206      	movs	r2, #6
 80075b8:	4113      	asrs	r3, r2
 80075ba:	001a      	movs	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 80075c0:	187b      	adds	r3, r7, r1
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2106      	movs	r1, #6
 80075ca:	408b      	lsls	r3, r1
 80075cc:	1ad2      	subs	r2, r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	601a      	str	r2, [r3, #0]
}
 80075d2:	46c0      	nop			@ (mov r8, r8)
 80075d4:	46bd      	mov	sp, r7
 80075d6:	b006      	add	sp, #24
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	46c0      	nop			@ (mov r8, r8)
 80075dc:	08025af0 	.word	0x08025af0

080075e0 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80075e0:	b5b0      	push	{r4, r5, r7, lr}
 80075e2:	b090      	sub	sp, #64	@ 0x40
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6138      	str	r0, [r7, #16]
 80075e8:	6179      	str	r1, [r7, #20]
 80075ea:	60fa      	str	r2, [r7, #12]
 80075ec:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80075ee:	2308      	movs	r3, #8
 80075f0:	001a      	movs	r2, r3
 80075f2:	3a20      	subs	r2, #32
 80075f4:	2a00      	cmp	r2, #0
 80075f6:	db03      	blt.n	8007600 <efficient10log10+0x20>
 80075f8:	2101      	movs	r1, #1
 80075fa:	4091      	lsls	r1, r2
 80075fc:	000d      	movs	r5, r1
 80075fe:	e008      	b.n	8007612 <efficient10log10+0x32>
 8007600:	2220      	movs	r2, #32
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	2101      	movs	r1, #1
 8007606:	40d1      	lsrs	r1, r2
 8007608:	000a      	movs	r2, r1
 800760a:	2100      	movs	r1, #0
 800760c:	4099      	lsls	r1, r3
 800760e:	000d      	movs	r5, r1
 8007610:	4315      	orrs	r5, r2
 8007612:	2201      	movs	r2, #1
 8007614:	409a      	lsls	r2, r3
 8007616:	0014      	movs	r4, r2
 8007618:	2201      	movs	r2, #1
 800761a:	4252      	negs	r2, r2
 800761c:	17d3      	asrs	r3, r2, #31
 800761e:	1912      	adds	r2, r2, r4
 8007620:	416b      	adcs	r3, r5
 8007622:	633a      	str	r2, [r7, #48]	@ 0x30
 8007624:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8007626:	2336      	movs	r3, #54	@ 0x36
 8007628:	2208      	movs	r2, #8
 800762a:	189b      	adds	r3, r3, r2
 800762c:	19db      	adds	r3, r3, r7
 800762e:	2200      	movs	r2, #0
 8007630:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007632:	e017      	b.n	8007664 <efficient10log10+0x84>
    {
        P = P >> 1;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	07db      	lsls	r3, r3, #31
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	0852      	lsrs	r2, r2, #1
 800763c:	603a      	str	r2, [r7, #0]
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	431a      	orrs	r2, r3
 8007642:	603a      	str	r2, [r7, #0]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	607b      	str	r3, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	687c      	ldr	r4, [r7, #4]
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	617c      	str	r4, [r7, #20]
        bShift++;
 8007652:	2136      	movs	r1, #54	@ 0x36
 8007654:	2008      	movs	r0, #8
 8007656:	180b      	adds	r3, r1, r0
 8007658:	19db      	adds	r3, r3, r7
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	180b      	adds	r3, r1, r0
 800765e:	19db      	adds	r3, r3, r7
 8007660:	3201      	adds	r2, #1
 8007662:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007668:	429a      	cmp	r2, r3
 800766a:	d8e3      	bhi.n	8007634 <efficient10log10+0x54>
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007670:	429a      	cmp	r2, r3
 8007672:	d103      	bne.n	800767c <efficient10log10+0x9c>
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	429a      	cmp	r2, r3
 800767a:	d8db      	bhi.n	8007634 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	2308      	movs	r3, #8
 8007680:	3b01      	subs	r3, #1
 8007682:	2101      	movs	r1, #1
 8007684:	4099      	lsls	r1, r3
 8007686:	000b      	movs	r3, r1
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007694:	231c      	movs	r3, #28
 8007696:	2408      	movs	r4, #8
 8007698:	191b      	adds	r3, r3, r4
 800769a:	19da      	adds	r2, r3, r7
 800769c:	2320      	movs	r3, #32
 800769e:	191b      	adds	r3, r3, r4
 80076a0:	19d9      	adds	r1, r3, r7
 80076a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a4:	0018      	movs	r0, r3
 80076a6:	f7ff ff71 	bl	800758c <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80076aa:	2215      	movs	r2, #21
 80076ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ae:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80076b0:	2036      	movs	r0, #54	@ 0x36
 80076b2:	1902      	adds	r2, r0, r4
 80076b4:	19d2      	adds	r2, r2, r7
 80076b6:	8812      	ldrh	r2, [r2, #0]
 80076b8:	2103      	movs	r1, #3
 80076ba:	434a      	muls	r2, r1
 80076bc:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80076be:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 80076c0:	0021      	movs	r1, r4
 80076c2:	1843      	adds	r3, r0, r1
 80076c4:	19db      	adds	r3, r3, r7
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	2201      	movs	r2, #1
 80076ca:	4353      	muls	r3, r2
 80076cc:	2203      	movs	r2, #3
 80076ce:	4113      	asrs	r3, r2
 80076d0:	001a      	movs	r2, r3
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 80076d6:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80076d8:	2314      	movs	r3, #20
 80076da:	185b      	adds	r3, r3, r1
 80076dc:	19da      	adds	r2, r3, r7
 80076de:	2318      	movs	r3, #24
 80076e0:	185b      	adds	r3, r3, r1
 80076e2:	19db      	adds	r3, r3, r7
 80076e4:	0011      	movs	r1, r2
 80076e6:	0018      	movs	r0, r3
 80076e8:	f000 f80a 	bl	8007700 <correctIntFracNumber>
    integerPart[0] = intPart;
 80076ec:	6a3a      	ldr	r2, [r7, #32]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	601a      	str	r2, [r3, #0]
}
 80076f8:	46c0      	nop			@ (mov r8, r8)
 80076fa:	46bd      	mov	sp, r7
 80076fc:	b010      	add	sp, #64	@ 0x40
 80076fe:	bdb0      	pop	{r4, r5, r7, pc}

08007700 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800770a:	e00a      	b.n	8007722 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3b0a      	subs	r3, #10
 800771c:	001a      	movs	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b09      	cmp	r3, #9
 8007728:	dcf0      	bgt.n	800770c <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800772a:	e00a      	b.n	8007742 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	1e5a      	subs	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330a      	adds	r3, #10
 800773c:	001a      	movs	r2, r3
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3309      	adds	r3, #9
 8007748:	dbf0      	blt.n	800772c <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	da0f      	bge.n	8007772 <correctIntFracNumber+0x72>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	dd0b      	ble.n	8007772 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3b0a      	subs	r3, #10
 800776a:	001a      	movs	r2, r3
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007770:	e012      	b.n	8007798 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	dd0e      	ble.n	8007798 <correctIntFracNumber+0x98>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	da0a      	bge.n	8007798 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	1e5a      	subs	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	330a      	adds	r3, #10
 8007792:	001a      	movs	r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	601a      	str	r2, [r3, #0]
}
 8007798:	46c0      	nop			@ (mov r8, r8)
 800779a:	46bd      	mov	sp, r7
 800779c:	b002      	add	sp, #8
 800779e:	bd80      	pop	{r7, pc}

080077a0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80077a0:	b590      	push	{r4, r7, lr}
 80077a2:	b08b      	sub	sp, #44	@ 0x2c
 80077a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077a6:	2414      	movs	r4, #20
 80077a8:	193b      	adds	r3, r7, r4
 80077aa:	0018      	movs	r0, r3
 80077ac:	2314      	movs	r3, #20
 80077ae:	001a      	movs	r2, r3
 80077b0:	2100      	movs	r1, #0
 80077b2:	f018 ff37 	bl	8020624 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80077b6:	4b8a      	ldr	r3, [pc, #552]	@ (80079e0 <MX_GPIO_Init+0x240>)
 80077b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ba:	4b89      	ldr	r3, [pc, #548]	@ (80079e0 <MX_GPIO_Init+0x240>)
 80077bc:	2104      	movs	r1, #4
 80077be:	430a      	orrs	r2, r1
 80077c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077c2:	4b87      	ldr	r3, [pc, #540]	@ (80079e0 <MX_GPIO_Init+0x240>)
 80077c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c6:	2204      	movs	r2, #4
 80077c8:	4013      	ands	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80077ce:	4b84      	ldr	r3, [pc, #528]	@ (80079e0 <MX_GPIO_Init+0x240>)
 80077d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d2:	4b83      	ldr	r3, [pc, #524]	@ (80079e0 <MX_GPIO_Init+0x240>)
 80077d4:	2180      	movs	r1, #128	@ 0x80
 80077d6:	430a      	orrs	r2, r1
 80077d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077da:	4b81      	ldr	r3, [pc, #516]	@ (80079e0 <MX_GPIO_Init+0x240>)
 80077dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077de:	2280      	movs	r2, #128	@ 0x80
 80077e0:	4013      	ands	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80077e6:	4b7e      	ldr	r3, [pc, #504]	@ (80079e0 <MX_GPIO_Init+0x240>)
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	4b7d      	ldr	r3, [pc, #500]	@ (80079e0 <MX_GPIO_Init+0x240>)
 80077ec:	2101      	movs	r1, #1
 80077ee:	430a      	orrs	r2, r1
 80077f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077f2:	4b7b      	ldr	r3, [pc, #492]	@ (80079e0 <MX_GPIO_Init+0x240>)
 80077f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f6:	2201      	movs	r2, #1
 80077f8:	4013      	ands	r3, r2
 80077fa:	60bb      	str	r3, [r7, #8]
 80077fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80077fe:	4b78      	ldr	r3, [pc, #480]	@ (80079e0 <MX_GPIO_Init+0x240>)
 8007800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007802:	4b77      	ldr	r3, [pc, #476]	@ (80079e0 <MX_GPIO_Init+0x240>)
 8007804:	2102      	movs	r1, #2
 8007806:	430a      	orrs	r2, r1
 8007808:	62da      	str	r2, [r3, #44]	@ 0x2c
 800780a:	4b75      	ldr	r3, [pc, #468]	@ (80079e0 <MX_GPIO_Init+0x240>)
 800780c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780e:	2202      	movs	r2, #2
 8007810:	4013      	ands	r3, r2
 8007812:	607b      	str	r3, [r7, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007816:	4b72      	ldr	r3, [pc, #456]	@ (80079e0 <MX_GPIO_Init+0x240>)
 8007818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781a:	4b71      	ldr	r3, [pc, #452]	@ (80079e0 <MX_GPIO_Init+0x240>)
 800781c:	2108      	movs	r1, #8
 800781e:	430a      	orrs	r2, r1
 8007820:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007822:	4b6f      	ldr	r3, [pc, #444]	@ (80079e0 <MX_GPIO_Init+0x240>)
 8007824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007826:	2208      	movs	r2, #8
 8007828:	4013      	ands	r3, r2
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800782e:	4b6d      	ldr	r3, [pc, #436]	@ (80079e4 <MX_GPIO_Init+0x244>)
 8007830:	2201      	movs	r2, #1
 8007832:	2101      	movs	r1, #1
 8007834:	0018      	movs	r0, r3
 8007836:	f008 ff2e 	bl	8010696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800783a:	4b6a      	ldr	r3, [pc, #424]	@ (80079e4 <MX_GPIO_Init+0x244>)
 800783c:	2200      	movs	r2, #0
 800783e:	2102      	movs	r1, #2
 8007840:	0018      	movs	r0, r3
 8007842:	f008 ff28 	bl	8010696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8007846:	4968      	ldr	r1, [pc, #416]	@ (80079e8 <MX_GPIO_Init+0x248>)
 8007848:	4b68      	ldr	r3, [pc, #416]	@ (80079ec <MX_GPIO_Init+0x24c>)
 800784a:	2201      	movs	r2, #1
 800784c:	0018      	movs	r0, r3
 800784e:	f008 ff22 	bl	8010696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007852:	2380      	movs	r3, #128	@ 0x80
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	4866      	ldr	r0, [pc, #408]	@ (80079f0 <MX_GPIO_Init+0x250>)
 8007858:	2201      	movs	r2, #1
 800785a:	0019      	movs	r1, r3
 800785c:	f008 ff1b 	bl	8010696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007860:	2380      	movs	r3, #128	@ 0x80
 8007862:	015b      	lsls	r3, r3, #5
 8007864:	4862      	ldr	r0, [pc, #392]	@ (80079f0 <MX_GPIO_Init+0x250>)
 8007866:	2200      	movs	r2, #0
 8007868:	0019      	movs	r1, r3
 800786a:	f008 ff14 	bl	8010696 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800786e:	193b      	adds	r3, r7, r4
 8007870:	4a60      	ldr	r2, [pc, #384]	@ (80079f4 <MX_GPIO_Init+0x254>)
 8007872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007874:	193b      	adds	r3, r7, r4
 8007876:	2203      	movs	r2, #3
 8007878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787a:	193b      	adds	r3, r7, r4
 800787c:	2200      	movs	r2, #0
 800787e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007880:	193b      	adds	r3, r7, r4
 8007882:	4a5b      	ldr	r2, [pc, #364]	@ (80079f0 <MX_GPIO_Init+0x250>)
 8007884:	0019      	movs	r1, r3
 8007886:	0010      	movs	r0, r2
 8007888:	f008 fd6a 	bl	8010360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800788c:	193b      	adds	r3, r7, r4
 800788e:	2203      	movs	r2, #3
 8007890:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007892:	193b      	adds	r3, r7, r4
 8007894:	2201      	movs	r2, #1
 8007896:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007898:	193b      	adds	r3, r7, r4
 800789a:	2200      	movs	r2, #0
 800789c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800789e:	193b      	adds	r3, r7, r4
 80078a0:	2200      	movs	r2, #0
 80078a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80078a4:	193b      	adds	r3, r7, r4
 80078a6:	4a4f      	ldr	r2, [pc, #316]	@ (80079e4 <MX_GPIO_Init+0x244>)
 80078a8:	0019      	movs	r1, r3
 80078aa:	0010      	movs	r0, r2
 80078ac:	f008 fd58 	bl	8010360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80078b0:	193b      	adds	r3, r7, r4
 80078b2:	2270      	movs	r2, #112	@ 0x70
 80078b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078b6:	193b      	adds	r3, r7, r4
 80078b8:	2203      	movs	r2, #3
 80078ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078bc:	193b      	adds	r3, r7, r4
 80078be:	2200      	movs	r2, #0
 80078c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078c2:	193a      	adds	r2, r7, r4
 80078c4:	23a0      	movs	r3, #160	@ 0xa0
 80078c6:	05db      	lsls	r3, r3, #23
 80078c8:	0011      	movs	r1, r2
 80078ca:	0018      	movs	r0, r3
 80078cc:	f008 fd48 	bl	8010360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80078d0:	193b      	adds	r3, r7, r4
 80078d2:	22c0      	movs	r2, #192	@ 0xc0
 80078d4:	0052      	lsls	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078d8:	193b      	adds	r3, r7, r4
 80078da:	2200      	movs	r2, #0
 80078dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078de:	193b      	adds	r3, r7, r4
 80078e0:	2200      	movs	r2, #0
 80078e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078e4:	193a      	adds	r2, r7, r4
 80078e6:	23a0      	movs	r3, #160	@ 0xa0
 80078e8:	05db      	lsls	r3, r3, #23
 80078ea:	0011      	movs	r1, r2
 80078ec:	0018      	movs	r0, r3
 80078ee:	f008 fd37 	bl	8010360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80078f2:	193b      	adds	r3, r7, r4
 80078f4:	4a3c      	ldr	r2, [pc, #240]	@ (80079e8 <MX_GPIO_Init+0x248>)
 80078f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078f8:	193b      	adds	r3, r7, r4
 80078fa:	2201      	movs	r2, #1
 80078fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fe:	193b      	adds	r3, r7, r4
 8007900:	2200      	movs	r2, #0
 8007902:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007904:	193b      	adds	r3, r7, r4
 8007906:	2200      	movs	r2, #0
 8007908:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800790a:	193b      	adds	r3, r7, r4
 800790c:	4a37      	ldr	r2, [pc, #220]	@ (80079ec <MX_GPIO_Init+0x24c>)
 800790e:	0019      	movs	r1, r3
 8007910:	0010      	movs	r0, r2
 8007912:	f008 fd25 	bl	8010360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8007916:	193b      	adds	r3, r7, r4
 8007918:	4a37      	ldr	r2, [pc, #220]	@ (80079f8 <MX_GPIO_Init+0x258>)
 800791a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800791c:	193b      	adds	r3, r7, r4
 800791e:	2203      	movs	r2, #3
 8007920:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007922:	193b      	adds	r3, r7, r4
 8007924:	2200      	movs	r2, #0
 8007926:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007928:	193b      	adds	r3, r7, r4
 800792a:	4a30      	ldr	r2, [pc, #192]	@ (80079ec <MX_GPIO_Init+0x24c>)
 800792c:	0019      	movs	r1, r3
 800792e:	0010      	movs	r0, r2
 8007930:	f008 fd16 	bl	8010360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007934:	0021      	movs	r1, r4
 8007936:	187b      	adds	r3, r7, r1
 8007938:	2280      	movs	r2, #128	@ 0x80
 800793a:	0092      	lsls	r2, r2, #2
 800793c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800793e:	000c      	movs	r4, r1
 8007940:	193b      	adds	r3, r7, r4
 8007942:	2200      	movs	r2, #0
 8007944:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007946:	193b      	adds	r3, r7, r4
 8007948:	2200      	movs	r2, #0
 800794a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800794c:	193b      	adds	r3, r7, r4
 800794e:	4a28      	ldr	r2, [pc, #160]	@ (80079f0 <MX_GPIO_Init+0x250>)
 8007950:	0019      	movs	r1, r3
 8007952:	0010      	movs	r0, r2
 8007954:	f008 fd04 	bl	8010360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007958:	193b      	adds	r3, r7, r4
 800795a:	2280      	movs	r2, #128	@ 0x80
 800795c:	0212      	lsls	r2, r2, #8
 800795e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007960:	193b      	adds	r3, r7, r4
 8007962:	2288      	movs	r2, #136	@ 0x88
 8007964:	0352      	lsls	r2, r2, #13
 8007966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007968:	193b      	adds	r3, r7, r4
 800796a:	2200      	movs	r2, #0
 800796c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800796e:	193a      	adds	r2, r7, r4
 8007970:	23a0      	movs	r3, #160	@ 0xa0
 8007972:	05db      	lsls	r3, r3, #23
 8007974:	0011      	movs	r1, r2
 8007976:	0018      	movs	r0, r3
 8007978:	f008 fcf2 	bl	8010360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800797c:	0021      	movs	r1, r4
 800797e:	187b      	adds	r3, r7, r1
 8007980:	22c0      	movs	r2, #192	@ 0xc0
 8007982:	0152      	lsls	r2, r2, #5
 8007984:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007986:	000c      	movs	r4, r1
 8007988:	193b      	adds	r3, r7, r4
 800798a:	2201      	movs	r2, #1
 800798c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798e:	193b      	adds	r3, r7, r4
 8007990:	2200      	movs	r2, #0
 8007992:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007994:	193b      	adds	r3, r7, r4
 8007996:	2200      	movs	r2, #0
 8007998:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800799a:	193b      	adds	r3, r7, r4
 800799c:	4a14      	ldr	r2, [pc, #80]	@ (80079f0 <MX_GPIO_Init+0x250>)
 800799e:	0019      	movs	r1, r3
 80079a0:	0010      	movs	r0, r2
 80079a2:	f008 fcdd 	bl	8010360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80079a6:	0021      	movs	r1, r4
 80079a8:	187b      	adds	r3, r7, r1
 80079aa:	2204      	movs	r2, #4
 80079ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079ae:	187b      	adds	r3, r7, r1
 80079b0:	2200      	movs	r2, #0
 80079b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80079b4:	187b      	adds	r3, r7, r1
 80079b6:	2201      	movs	r2, #1
 80079b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80079ba:	187b      	adds	r3, r7, r1
 80079bc:	4a0f      	ldr	r2, [pc, #60]	@ (80079fc <MX_GPIO_Init+0x25c>)
 80079be:	0019      	movs	r1, r3
 80079c0:	0010      	movs	r0, r2
 80079c2:	f008 fccd 	bl	8010360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80079c6:	2200      	movs	r2, #0
 80079c8:	2100      	movs	r1, #0
 80079ca:	2007      	movs	r0, #7
 80079cc:	f008 f876 	bl	800fabc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80079d0:	2007      	movs	r0, #7
 80079d2:	f008 f888 	bl	800fae6 <HAL_NVIC_EnableIRQ>

}
 80079d6:	46c0      	nop			@ (mov r8, r8)
 80079d8:	46bd      	mov	sp, r7
 80079da:	b00b      	add	sp, #44	@ 0x2c
 80079dc:	bd90      	pop	{r4, r7, pc}
 80079de:	46c0      	nop			@ (mov r8, r8)
 80079e0:	40021000 	.word	0x40021000
 80079e4:	50001c00 	.word	0x50001c00
 80079e8:	00000301 	.word	0x00000301
 80079ec:	50000400 	.word	0x50000400
 80079f0:	50000800 	.word	0x50000800
 80079f4:	0000200c 	.word	0x0000200c
 80079f8:	0000403e 	.word	0x0000403e
 80079fc:	50000c00 	.word	0x50000c00

08007a00 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f00f fa1c 	bl	8016e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2108      	movs	r1, #8
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f00f fa17 	bl	8016e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	210c      	movs	r1, #12
 8007a22:	0018      	movs	r0, r3
 8007a24:	f00f fa12 	bl	8016e4c <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8007a28:	2380      	movs	r3, #128	@ 0x80
 8007a2a:	05db      	lsls	r3, r3, #23
 8007a2c:	22fa      	movs	r2, #250	@ 0xfa
 8007a2e:	0112      	lsls	r2, r2, #4
 8007a30:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8007a32:	2380      	movs	r3, #128	@ 0x80
 8007a34:	05db      	lsls	r3, r3, #23
 8007a36:	22fa      	movs	r2, #250	@ 0xfa
 8007a38:	0112      	lsls	r2, r2, #4
 8007a3a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007a3c:	2380      	movs	r3, #128	@ 0x80
 8007a3e:	05db      	lsls	r3, r3, #23
 8007a40:	22fa      	movs	r2, #250	@ 0xfa
 8007a42:	0112      	lsls	r2, r2, #4
 8007a44:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007a46:	2380      	movs	r3, #128	@ 0x80
 8007a48:	05db      	lsls	r3, r3, #23
 8007a4a:	22fa      	movs	r2, #250	@ 0xfa
 8007a4c:	0112      	lsls	r2, r2, #4
 8007a4e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2100      	movs	r1, #0
 8007a54:	0018      	movs	r0, r3
 8007a56:	f00f f9f9 	bl	8016e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2104      	movs	r1, #4
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f00f f9f4 	bl	8016e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2108      	movs	r1, #8
 8007a68:	0018      	movs	r0, r3
 8007a6a:	f00f f9ef 	bl	8016e4c <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a98 <GPIO_InitPWMLEDs+0x98>)
 8007a70:	22fa      	movs	r2, #250	@ 0xfa
 8007a72:	0112      	lsls	r2, r2, #4
 8007a74:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007a76:	4b08      	ldr	r3, [pc, #32]	@ (8007a98 <GPIO_InitPWMLEDs+0x98>)
 8007a78:	22fa      	movs	r2, #250	@ 0xfa
 8007a7a:	0112      	lsls	r2, r2, #4
 8007a7c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8007a7e:	4b06      	ldr	r3, [pc, #24]	@ (8007a98 <GPIO_InitPWMLEDs+0x98>)
 8007a80:	22fa      	movs	r2, #250	@ 0xfa
 8007a82:	0112      	lsls	r2, r2, #4
 8007a84:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007a86:	4b04      	ldr	r3, [pc, #16]	@ (8007a98 <GPIO_InitPWMLEDs+0x98>)
 8007a88:	22fa      	movs	r2, #250	@ 0xfa
 8007a8a:	0112      	lsls	r2, r2, #4
 8007a8c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007a8e:	46c0      	nop			@ (mov r8, r8)
 8007a90:	46bd      	mov	sp, r7
 8007a92:	b002      	add	sp, #8
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	46c0      	nop			@ (mov r8, r8)
 8007a98:	40000400 	.word	0x40000400

08007a9c <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa2:	1d3b      	adds	r3, r7, #4
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	2314      	movs	r3, #20
 8007aa8:	001a      	movs	r2, r3
 8007aaa:	2100      	movs	r1, #0
 8007aac:	f018 fdba 	bl	8020624 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8007ab0:	1d3b      	adds	r3, r7, #4
 8007ab2:	2205      	movs	r2, #5
 8007ab4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ab6:	1d3b      	adds	r3, r7, #4
 8007ab8:	2203      	movs	r2, #3
 8007aba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007abc:	1d3b      	adds	r3, r7, #4
 8007abe:	2200      	movs	r2, #0
 8007ac0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ac2:	1d3a      	adds	r2, r7, #4
 8007ac4:	23a0      	movs	r3, #160	@ 0xa0
 8007ac6:	05db      	lsls	r3, r3, #23
 8007ac8:	0011      	movs	r1, r2
 8007aca:	0018      	movs	r0, r3
 8007acc:	f008 fc48 	bl	8010360 <HAL_GPIO_Init>
}
 8007ad0:	46c0      	nop			@ (mov r8, r8)
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	b006      	add	sp, #24
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007adc:	4b1b      	ldr	r3, [pc, #108]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007ade:	4a1c      	ldr	r2, [pc, #112]	@ (8007b50 <MX_I2C1_Init+0x78>)
 8007ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b54 <MX_I2C1_Init+0x7c>)
 8007ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007ae8:	4b18      	ldr	r3, [pc, #96]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007aee:	4b17      	ldr	r3, [pc, #92]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007af4:	4b15      	ldr	r3, [pc, #84]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007afa:	4b14      	ldr	r3, [pc, #80]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007b00:	4b12      	ldr	r3, [pc, #72]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b06:	4b11      	ldr	r3, [pc, #68]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007b12:	4b0e      	ldr	r3, [pc, #56]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007b14:	0018      	movs	r0, r3
 8007b16:	f008 fdf7 	bl	8010708 <HAL_I2C_Init>
 8007b1a:	1e03      	subs	r3, r0, #0
 8007b1c:	d001      	beq.n	8007b22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007b1e:	f000 fd93 	bl	8008648 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007b22:	4b0a      	ldr	r3, [pc, #40]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007b24:	2100      	movs	r1, #0
 8007b26:	0018      	movs	r0, r3
 8007b28:	f00b f9c8 	bl	8012ebc <HAL_I2CEx_ConfigAnalogFilter>
 8007b2c:	1e03      	subs	r3, r0, #0
 8007b2e:	d001      	beq.n	8007b34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007b30:	f000 fd8a 	bl	8008648 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007b34:	4b05      	ldr	r3, [pc, #20]	@ (8007b4c <MX_I2C1_Init+0x74>)
 8007b36:	2100      	movs	r1, #0
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f00b fa0b 	bl	8012f54 <HAL_I2CEx_ConfigDigitalFilter>
 8007b3e:	1e03      	subs	r3, r0, #0
 8007b40:	d001      	beq.n	8007b46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007b42:	f000 fd81 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007b46:	46c0      	nop			@ (mov r8, r8)
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	20000a14 	.word	0x20000a14
 8007b50:	40005400 	.word	0x40005400
 8007b54:	00503d58 	.word	0x00503d58

08007b58 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007bd0 <MX_I2C2_Init+0x78>)
 8007b60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8007b62:	4b1a      	ldr	r3, [pc, #104]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007b64:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd4 <MX_I2C2_Init+0x7c>)
 8007b66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007b68:	4b18      	ldr	r3, [pc, #96]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b6e:	4b17      	ldr	r3, [pc, #92]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b74:	4b15      	ldr	r3, [pc, #84]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007b7a:	4b14      	ldr	r3, [pc, #80]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007b80:	4b12      	ldr	r3, [pc, #72]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b86:	4b11      	ldr	r3, [pc, #68]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007b92:	4b0e      	ldr	r3, [pc, #56]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007b94:	0018      	movs	r0, r3
 8007b96:	f008 fdb7 	bl	8010708 <HAL_I2C_Init>
 8007b9a:	1e03      	subs	r3, r0, #0
 8007b9c:	d001      	beq.n	8007ba2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007b9e:	f000 fd53 	bl	8008648 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f00b f988 	bl	8012ebc <HAL_I2CEx_ConfigAnalogFilter>
 8007bac:	1e03      	subs	r3, r0, #0
 8007bae:	d001      	beq.n	8007bb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007bb0:	f000 fd4a 	bl	8008648 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007bb4:	4b05      	ldr	r3, [pc, #20]	@ (8007bcc <MX_I2C2_Init+0x74>)
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	0018      	movs	r0, r3
 8007bba:	f00b f9cb 	bl	8012f54 <HAL_I2CEx_ConfigDigitalFilter>
 8007bbe:	1e03      	subs	r3, r0, #0
 8007bc0:	d001      	beq.n	8007bc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007bc2:	f000 fd41 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007bc6:	46c0      	nop			@ (mov r8, r8)
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20000a68 	.word	0x20000a68
 8007bd0:	40005800 	.word	0x40005800
 8007bd4:	00503d58 	.word	0x00503d58

08007bd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007bd8:	b590      	push	{r4, r7, lr}
 8007bda:	b08b      	sub	sp, #44	@ 0x2c
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be0:	2414      	movs	r4, #20
 8007be2:	193b      	adds	r3, r7, r4
 8007be4:	0018      	movs	r0, r3
 8007be6:	2314      	movs	r3, #20
 8007be8:	001a      	movs	r2, r3
 8007bea:	2100      	movs	r1, #0
 8007bec:	f018 fd1a 	bl	8020624 <memset>
  if(i2cHandle->Instance==I2C1)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a5d      	ldr	r2, [pc, #372]	@ (8007d6c <HAL_I2C_MspInit+0x194>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d000      	beq.n	8007bfc <HAL_I2C_MspInit+0x24>
 8007bfa:	e083      	b.n	8007d04 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8007d70 <HAL_I2C_MspInit+0x198>)
 8007bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c00:	4b5b      	ldr	r3, [pc, #364]	@ (8007d70 <HAL_I2C_MspInit+0x198>)
 8007c02:	2102      	movs	r1, #2
 8007c04:	430a      	orrs	r2, r1
 8007c06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007c08:	4b59      	ldr	r3, [pc, #356]	@ (8007d70 <HAL_I2C_MspInit+0x198>)
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	4013      	ands	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]
 8007c12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c14:	0021      	movs	r1, r4
 8007c16:	187b      	adds	r3, r7, r1
 8007c18:	22c0      	movs	r2, #192	@ 0xc0
 8007c1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c1c:	187b      	adds	r3, r7, r1
 8007c1e:	2212      	movs	r2, #18
 8007c20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c22:	187b      	adds	r3, r7, r1
 8007c24:	2200      	movs	r2, #0
 8007c26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c28:	187b      	adds	r3, r7, r1
 8007c2a:	2203      	movs	r2, #3
 8007c2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8007c2e:	187b      	adds	r3, r7, r1
 8007c30:	2201      	movs	r2, #1
 8007c32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c34:	187b      	adds	r3, r7, r1
 8007c36:	4a4f      	ldr	r2, [pc, #316]	@ (8007d74 <HAL_I2C_MspInit+0x19c>)
 8007c38:	0019      	movs	r1, r3
 8007c3a:	0010      	movs	r0, r2
 8007c3c:	f008 fb90 	bl	8010360 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c40:	4b4b      	ldr	r3, [pc, #300]	@ (8007d70 <HAL_I2C_MspInit+0x198>)
 8007c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c44:	4b4a      	ldr	r3, [pc, #296]	@ (8007d70 <HAL_I2C_MspInit+0x198>)
 8007c46:	2180      	movs	r1, #128	@ 0x80
 8007c48:	0389      	lsls	r1, r1, #14
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8007c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c50:	4a4a      	ldr	r2, [pc, #296]	@ (8007d7c <HAL_I2C_MspInit+0x1a4>)
 8007c52:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007c54:	4b48      	ldr	r3, [pc, #288]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c56:	2206      	movs	r2, #6
 8007c58:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c5a:	4b47      	ldr	r3, [pc, #284]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c60:	4b45      	ldr	r3, [pc, #276]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c66:	4b44      	ldr	r3, [pc, #272]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c68:	2280      	movs	r2, #128	@ 0x80
 8007c6a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c6c:	4b42      	ldr	r3, [pc, #264]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c72:	4b41      	ldr	r3, [pc, #260]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007c78:	4b3f      	ldr	r3, [pc, #252]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007c84:	4b3c      	ldr	r3, [pc, #240]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c86:	0018      	movs	r0, r3
 8007c88:	f007 ff4e 	bl	800fb28 <HAL_DMA_Init>
 8007c8c:	1e03      	subs	r3, r0, #0
 8007c8e:	d001      	beq.n	8007c94 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007c90:	f000 fcda 	bl	8008648 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a38      	ldr	r2, [pc, #224]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007c9a:	4b37      	ldr	r3, [pc, #220]	@ (8007d78 <HAL_I2C_MspInit+0x1a0>)
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007ca0:	4b37      	ldr	r3, [pc, #220]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007ca2:	4a38      	ldr	r2, [pc, #224]	@ (8007d84 <HAL_I2C_MspInit+0x1ac>)
 8007ca4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007ca6:	4b36      	ldr	r3, [pc, #216]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007ca8:	2206      	movs	r2, #6
 8007caa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007cac:	4b34      	ldr	r3, [pc, #208]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007cae:	2210      	movs	r2, #16
 8007cb0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cb2:	4b33      	ldr	r3, [pc, #204]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007cb8:	4b31      	ldr	r3, [pc, #196]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007cba:	2280      	movs	r2, #128	@ 0x80
 8007cbc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007cbe:	4b30      	ldr	r3, [pc, #192]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007cca:	4b2d      	ldr	r3, [pc, #180]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f007 ff25 	bl	800fb28 <HAL_DMA_Init>
 8007cde:	1e03      	subs	r3, r0, #0
 8007ce0:	d001      	beq.n	8007ce6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007ce2:	f000 fcb1 	bl	8008648 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a25      	ldr	r2, [pc, #148]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007cea:	639a      	str	r2, [r3, #56]	@ 0x38
 8007cec:	4b24      	ldr	r3, [pc, #144]	@ (8007d80 <HAL_I2C_MspInit+0x1a8>)
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	2017      	movs	r0, #23
 8007cf8:	f007 fee0 	bl	800fabc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007cfc:	2017      	movs	r0, #23
 8007cfe:	f007 fef2 	bl	800fae6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007d02:	e02e      	b.n	8007d62 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1f      	ldr	r2, [pc, #124]	@ (8007d88 <HAL_I2C_MspInit+0x1b0>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d129      	bne.n	8007d62 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d0e:	4b18      	ldr	r3, [pc, #96]	@ (8007d70 <HAL_I2C_MspInit+0x198>)
 8007d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d12:	4b17      	ldr	r3, [pc, #92]	@ (8007d70 <HAL_I2C_MspInit+0x198>)
 8007d14:	2102      	movs	r1, #2
 8007d16:	430a      	orrs	r2, r1
 8007d18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d1a:	4b15      	ldr	r3, [pc, #84]	@ (8007d70 <HAL_I2C_MspInit+0x198>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1e:	2202      	movs	r2, #2
 8007d20:	4013      	ands	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007d26:	2114      	movs	r1, #20
 8007d28:	187b      	adds	r3, r7, r1
 8007d2a:	22c0      	movs	r2, #192	@ 0xc0
 8007d2c:	0112      	lsls	r2, r2, #4
 8007d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d30:	187b      	adds	r3, r7, r1
 8007d32:	2212      	movs	r2, #18
 8007d34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d36:	187b      	adds	r3, r7, r1
 8007d38:	2200      	movs	r2, #0
 8007d3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d3c:	187b      	adds	r3, r7, r1
 8007d3e:	2203      	movs	r2, #3
 8007d40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007d42:	187b      	adds	r3, r7, r1
 8007d44:	2206      	movs	r2, #6
 8007d46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d48:	187b      	adds	r3, r7, r1
 8007d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8007d74 <HAL_I2C_MspInit+0x19c>)
 8007d4c:	0019      	movs	r1, r3
 8007d4e:	0010      	movs	r0, r2
 8007d50:	f008 fb06 	bl	8010360 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007d54:	4b06      	ldr	r3, [pc, #24]	@ (8007d70 <HAL_I2C_MspInit+0x198>)
 8007d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d58:	4b05      	ldr	r3, [pc, #20]	@ (8007d70 <HAL_I2C_MspInit+0x198>)
 8007d5a:	2180      	movs	r1, #128	@ 0x80
 8007d5c:	03c9      	lsls	r1, r1, #15
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007d62:	46c0      	nop			@ (mov r8, r8)
 8007d64:	46bd      	mov	sp, r7
 8007d66:	b00b      	add	sp, #44	@ 0x2c
 8007d68:	bd90      	pop	{r4, r7, pc}
 8007d6a:	46c0      	nop			@ (mov r8, r8)
 8007d6c:	40005400 	.word	0x40005400
 8007d70:	40021000 	.word	0x40021000
 8007d74:	50000400 	.word	0x50000400
 8007d78:	20000abc 	.word	0x20000abc
 8007d7c:	40020030 	.word	0x40020030
 8007d80:	20000b04 	.word	0x20000b04
 8007d84:	4002001c 	.word	0x4002001c
 8007d88:	40005800 	.word	0x40005800

08007d8c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007d90:	4b10      	ldr	r3, [pc, #64]	@ (8007dd4 <MX_I2S2_Init+0x48>)
 8007d92:	4a11      	ldr	r2, [pc, #68]	@ (8007dd8 <MX_I2S2_Init+0x4c>)
 8007d94:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007d96:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd4 <MX_I2S2_Init+0x48>)
 8007d98:	22c0      	movs	r2, #192	@ 0xc0
 8007d9a:	0092      	lsls	r2, r2, #2
 8007d9c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd4 <MX_I2S2_Init+0x48>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007da4:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd4 <MX_I2S2_Init+0x48>)
 8007da6:	2203      	movs	r2, #3
 8007da8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007daa:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd4 <MX_I2S2_Init+0x48>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007db0:	4b08      	ldr	r3, [pc, #32]	@ (8007dd4 <MX_I2S2_Init+0x48>)
 8007db2:	22fa      	movs	r2, #250	@ 0xfa
 8007db4:	0192      	lsls	r2, r2, #6
 8007db6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007db8:	4b06      	ldr	r3, [pc, #24]	@ (8007dd4 <MX_I2S2_Init+0x48>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007dbe:	4b05      	ldr	r3, [pc, #20]	@ (8007dd4 <MX_I2S2_Init+0x48>)
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	f00b f913 	bl	8012fec <HAL_I2S_Init>
 8007dc6:	1e03      	subs	r3, r0, #0
 8007dc8:	d001      	beq.n	8007dce <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007dca:	f000 fc3d 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007dce:	46c0      	nop			@ (mov r8, r8)
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20000b4c 	.word	0x20000b4c
 8007dd8:	40003800 	.word	0x40003800

08007ddc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007ddc:	b590      	push	{r4, r7, lr}
 8007dde:	b089      	sub	sp, #36	@ 0x24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007de4:	240c      	movs	r4, #12
 8007de6:	193b      	adds	r3, r7, r4
 8007de8:	0018      	movs	r0, r3
 8007dea:	2314      	movs	r3, #20
 8007dec:	001a      	movs	r2, r3
 8007dee:	2100      	movs	r1, #0
 8007df0:	f018 fc18 	bl	8020624 <memset>
  if(i2sHandle->Instance==SPI2)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a2d      	ldr	r2, [pc, #180]	@ (8007eb0 <HAL_I2S_MspInit+0xd4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d154      	bne.n	8007ea8 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8007eb4 <HAL_I2S_MspInit+0xd8>)
 8007e00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e02:	4b2c      	ldr	r3, [pc, #176]	@ (8007eb4 <HAL_I2S_MspInit+0xd8>)
 8007e04:	2180      	movs	r1, #128	@ 0x80
 8007e06:	01c9      	lsls	r1, r1, #7
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e0c:	4b29      	ldr	r3, [pc, #164]	@ (8007eb4 <HAL_I2S_MspInit+0xd8>)
 8007e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e10:	4b28      	ldr	r3, [pc, #160]	@ (8007eb4 <HAL_I2S_MspInit+0xd8>)
 8007e12:	2102      	movs	r1, #2
 8007e14:	430a      	orrs	r2, r1
 8007e16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007e18:	4b26      	ldr	r3, [pc, #152]	@ (8007eb4 <HAL_I2S_MspInit+0xd8>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	4013      	ands	r3, r2
 8007e20:	60bb      	str	r3, [r7, #8]
 8007e22:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007e24:	193b      	adds	r3, r7, r4
 8007e26:	22b0      	movs	r2, #176	@ 0xb0
 8007e28:	0212      	lsls	r2, r2, #8
 8007e2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e2c:	0021      	movs	r1, r4
 8007e2e:	187b      	adds	r3, r7, r1
 8007e30:	2202      	movs	r2, #2
 8007e32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e34:	187b      	adds	r3, r7, r1
 8007e36:	2200      	movs	r2, #0
 8007e38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e3a:	187b      	adds	r3, r7, r1
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007e40:	187b      	adds	r3, r7, r1
 8007e42:	2200      	movs	r2, #0
 8007e44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e46:	187b      	adds	r3, r7, r1
 8007e48:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb8 <HAL_I2S_MspInit+0xdc>)
 8007e4a:	0019      	movs	r1, r3
 8007e4c:	0010      	movs	r0, r2
 8007e4e:	f008 fa87 	bl	8010360 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007e52:	4b1a      	ldr	r3, [pc, #104]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007e54:	4a1a      	ldr	r2, [pc, #104]	@ (8007ec0 <HAL_I2S_MspInit+0xe4>)
 8007e56:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007e58:	4b18      	ldr	r3, [pc, #96]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e5e:	4b17      	ldr	r3, [pc, #92]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e64:	4b15      	ldr	r3, [pc, #84]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e6a:	4b14      	ldr	r3, [pc, #80]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007e6c:	2280      	movs	r2, #128	@ 0x80
 8007e6e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007e70:	4b12      	ldr	r3, [pc, #72]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007e72:	2280      	movs	r2, #128	@ 0x80
 8007e74:	0052      	lsls	r2, r2, #1
 8007e76:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007e78:	4b10      	ldr	r3, [pc, #64]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007e7a:	2280      	movs	r2, #128	@ 0x80
 8007e7c:	00d2      	lsls	r2, r2, #3
 8007e7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007e80:	4b0e      	ldr	r3, [pc, #56]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007e82:	2220      	movs	r2, #32
 8007e84:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007e86:	4b0d      	ldr	r3, [pc, #52]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007e8e:	0018      	movs	r0, r3
 8007e90:	f007 fe4a 	bl	800fb28 <HAL_DMA_Init>
 8007e94:	1e03      	subs	r3, r0, #0
 8007e96:	d001      	beq.n	8007e9c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007e98:	f000 fbd6 	bl	8008648 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a07      	ldr	r2, [pc, #28]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007ea0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ea2:	4b06      	ldr	r3, [pc, #24]	@ (8007ebc <HAL_I2S_MspInit+0xe0>)
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007ea8:	46c0      	nop			@ (mov r8, r8)
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	b009      	add	sp, #36	@ 0x24
 8007eae:	bd90      	pop	{r4, r7, pc}
 8007eb0:	40003800 	.word	0x40003800
 8007eb4:	40021000 	.word	0x40021000
 8007eb8:	50000400 	.word	0x50000400
 8007ebc:	20000b88 	.word	0x20000b88
 8007ec0:	40020044 	.word	0x40020044

08007ec4 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  testDone = true;
 8007ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8007f44 <SetTestDone+0x80>)
 8007eca:	2201      	movs	r2, #1
 8007ecc:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8007ece:	23fa      	movs	r3, #250	@ 0xfa
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	f007 f958 	bl	800f188 <HAL_Delay>
  SetDBLED(false, false, true);
 8007ed8:	2201      	movs	r2, #1
 8007eda:	2100      	movs	r1, #0
 8007edc:	2000      	movs	r0, #0
 8007ede:	f005 fadd 	bl	800d49c <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007ee2:	4a19      	ldr	r2, [pc, #100]	@ (8007f48 <SetTestDone+0x84>)
 8007ee4:	23fa      	movs	r3, #250	@ 0xfa
 8007ee6:	0119      	lsls	r1, r3, #4
 8007ee8:	23fa      	movs	r3, #250	@ 0xfa
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	0018      	movs	r0, r3
 8007eee:	f005 faa1 	bl	800d434 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007ef2:	4a15      	ldr	r2, [pc, #84]	@ (8007f48 <SetTestDone+0x84>)
 8007ef4:	23fa      	movs	r3, #250	@ 0xfa
 8007ef6:	0119      	lsls	r1, r3, #4
 8007ef8:	23fa      	movs	r3, #250	@ 0xfa
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	0018      	movs	r0, r3
 8007efe:	f005 fb17 	bl	800d530 <SetVocLED>
  HAL_Delay(500);
 8007f02:	23fa      	movs	r3, #250	@ 0xfa
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	0018      	movs	r0, r3
 8007f08:	f007 f93e 	bl	800f188 <HAL_Delay>
  SetDBLED(false, false, false);
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2100      	movs	r1, #0
 8007f10:	2000      	movs	r0, #0
 8007f12:	f005 fac3 	bl	800d49c <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007f16:	23fa      	movs	r3, #250	@ 0xfa
 8007f18:	011a      	lsls	r2, r3, #4
 8007f1a:	23fa      	movs	r3, #250	@ 0xfa
 8007f1c:	0119      	lsls	r1, r3, #4
 8007f1e:	23fa      	movs	r3, #250	@ 0xfa
 8007f20:	011b      	lsls	r3, r3, #4
 8007f22:	0018      	movs	r0, r3
 8007f24:	f005 fa86 	bl	800d434 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007f28:	23fa      	movs	r3, #250	@ 0xfa
 8007f2a:	011a      	lsls	r2, r3, #4
 8007f2c:	23fa      	movs	r3, #250	@ 0xfa
 8007f2e:	0119      	lsls	r1, r3, #4
 8007f30:	23fa      	movs	r3, #250	@ 0xfa
 8007f32:	011b      	lsls	r3, r3, #4
 8007f34:	0018      	movs	r0, r3
 8007f36:	f005 fafb 	bl	800d530 <SetVocLED>
  InitDone();
 8007f3a:	f005 f9cf 	bl	800d2dc <InitDone>
}
 8007f3e:	46c0      	nop			@ (mov r8, r8)
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000bd0 	.word	0x20000bd0
 8007f48:	00000bb8 	.word	0x00000bb8

08007f4c <FlashLEDs>:

void FlashLEDs(){
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007f52:	1dfb      	adds	r3, r7, #7
 8007f54:	2200      	movs	r2, #0
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	e021      	b.n	8007f9e <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	2001      	movs	r0, #1
 8007f60:	f005 fa9c 	bl	800d49c <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007f64:	4a12      	ldr	r2, [pc, #72]	@ (8007fb0 <FlashLEDs+0x64>)
 8007f66:	23fa      	movs	r3, #250	@ 0xfa
 8007f68:	0119      	lsls	r1, r3, #4
 8007f6a:	23fa      	movs	r3, #250	@ 0xfa
 8007f6c:	011b      	lsls	r3, r3, #4
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f005 fa60 	bl	800d434 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007f74:	4a0e      	ldr	r2, [pc, #56]	@ (8007fb0 <FlashLEDs+0x64>)
 8007f76:	23fa      	movs	r3, #250	@ 0xfa
 8007f78:	0119      	lsls	r1, r3, #4
 8007f7a:	23fa      	movs	r3, #250	@ 0xfa
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f005 fad6 	bl	800d530 <SetVocLED>
    HAL_Delay(250);
 8007f84:	20fa      	movs	r0, #250	@ 0xfa
 8007f86:	f007 f8ff 	bl	800f188 <HAL_Delay>
    SetLEDsOff();
 8007f8a:	f005 fc11 	bl	800d7b0 <SetLEDsOff>
    HAL_Delay(250);
 8007f8e:	20fa      	movs	r0, #250	@ 0xfa
 8007f90:	f007 f8fa 	bl	800f188 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007f94:	1dfb      	adds	r3, r7, #7
 8007f96:	781a      	ldrb	r2, [r3, #0]
 8007f98:	1dfb      	adds	r3, r7, #7
 8007f9a:	3201      	adds	r2, #1
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	1dfb      	adds	r3, r7, #7
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d9d9      	bls.n	8007f5a <FlashLEDs+0xe>
  }
}
 8007fa6:	46c0      	nop			@ (mov r8, r8)
 8007fa8:	46c0      	nop			@ (mov r8, r8)
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b002      	add	sp, #8
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	00000bb8 	.word	0x00000bb8

08007fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007fba:	f007 f875 	bl	800f0a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007fbe:	f000 f9fd 	bl	80083bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007fc2:	f7ff fbed 	bl	80077a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8007fc6:	f7ff fa15 	bl	80073f4 <MX_DMA_Init>
  MX_I2C1_Init();
 8007fca:	f7ff fd85 	bl	8007ad8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007fce:	f7ff fedd 	bl	8007d8c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007fd2:	f006 fa99 	bl	800e508 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007fd6:	f7ff fdbf 	bl	8007b58 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007fda:	f006 f88d 	bl	800e0f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007fde:	f006 f8ff 	bl	800e1e0 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007fe2:	f006 fac5 	bl	800e570 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007fe6:	f7ff f953 	bl	8007290 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007fea:	f015 f829 	bl	801d040 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007fee:	f001 f939 	bl	8009264 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007ff2:	f006 fa53 	bl	800e49c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007ff6:	f006 f971 	bl	800e2dc <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007ffa:	4aca      	ldr	r2, [pc, #808]	@ (8008324 <main+0x370>)
 8007ffc:	4bca      	ldr	r3, [pc, #808]	@ (8008328 <main+0x374>)
 8007ffe:	0011      	movs	r1, r2
 8008000:	0018      	movs	r0, r3
 8008002:	f7ff fcfd 	bl	8007a00 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8008006:	f006 fcf5 	bl	800e9f4 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800800a:	f005 fefd 	bl	800de08 <Battery_Upkeep>
 800800e:	0003      	movs	r3, r0
 8008010:	001a      	movs	r2, r3
 8008012:	4bc6      	ldr	r3, [pc, #792]	@ (800832c <main+0x378>)
 8008014:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8008016:	4bc5      	ldr	r3, [pc, #788]	@ (800832c <main+0x378>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d113      	bne.n	8008046 <main+0x92>
    SetAllREDLED();
 800801e:	f005 fbe3 	bl	800d7e8 <SetAllREDLED>
    Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8008022:	f7fe fa5b 	bl	80064dc <ReadBatteryVoltage>
 8008026:	1c03      	adds	r3, r0, #0
 8008028:	1c18      	adds	r0, r3, #0
 800802a:	f7fb fa1b 	bl	8003464 <__aeabi_f2d>
 800802e:	0002      	movs	r2, r0
 8008030:	000b      	movs	r3, r1
 8008032:	48bf      	ldr	r0, [pc, #764]	@ (8008330 <main+0x37c>)
 8008034:	49bf      	ldr	r1, [pc, #764]	@ (8008334 <main+0x380>)
 8008036:	9200      	str	r2, [sp, #0]
 8008038:	9301      	str	r3, [sp, #4]
 800803a:	0002      	movs	r2, r0
 800803c:	2002      	movs	r0, #2
 800803e:	f006 fc55 	bl	800e8ec <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 8008042:	f7fe fe5d 	bl	8006d00 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8008046:	f7fe fb1f 	bl	8006688 <UserButton_Pressed>
 800804a:	1e03      	subs	r3, r0, #0
 800804c:	d004      	beq.n	8008058 <main+0xa4>
    EnableESPProg();
 800804e:	f015 f8c7 	bl	801d1e0 <EnableESPProg>
    ESP_Programming = true;
 8008052:	4bb9      	ldr	r3, [pc, #740]	@ (8008338 <main+0x384>)
 8008054:	2201      	movs	r2, #1
 8008056:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8008058:	2003      	movs	r0, #3
 800805a:	f006 fcb1 	bl	800e9c0 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800805e:	49b7      	ldr	r1, [pc, #732]	@ (800833c <main+0x388>)
 8008060:	4bb7      	ldr	r3, [pc, #732]	@ (8008340 <main+0x38c>)
 8008062:	2201      	movs	r2, #1
 8008064:	0018      	movs	r0, r3
 8008066:	f00f fb51 	bl	801770c <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800806a:	4bb6      	ldr	r3, [pc, #728]	@ (8008344 <main+0x390>)
 800806c:	0018      	movs	r0, r3
 800806e:	f7fe ff15 	bl	8006e9c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8008072:	4ab5      	ldr	r2, [pc, #724]	@ (8008348 <main+0x394>)
 8008074:	49b5      	ldr	r1, [pc, #724]	@ (800834c <main+0x398>)
 8008076:	48b6      	ldr	r0, [pc, #728]	@ (8008350 <main+0x39c>)
 8008078:	230b      	movs	r3, #11
 800807a:	f004 faa5 	bl	800c5c8 <soundInit>
 800807e:	0003      	movs	r3, r0
 8008080:	001a      	movs	r2, r3
 8008082:	2301      	movs	r3, #1
 8008084:	4053      	eors	r3, r2
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800808c:	4ab1      	ldr	r2, [pc, #708]	@ (8008354 <main+0x3a0>)
 800808e:	4bb2      	ldr	r3, [pc, #712]	@ (8008358 <main+0x3a4>)
 8008090:	21fb      	movs	r1, #251	@ 0xfb
 8008092:	0018      	movs	r0, r3
 8008094:	f006 fce2 	bl	800ea5c <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8008098:	4bb0      	ldr	r3, [pc, #704]	@ (800835c <main+0x3a8>)
 800809a:	4ab1      	ldr	r2, [pc, #708]	@ (8008360 <main+0x3ac>)
 800809c:	49ab      	ldr	r1, [pc, #684]	@ (800834c <main+0x398>)
 800809e:	48b1      	ldr	r0, [pc, #708]	@ (8008364 <main+0x3b0>)
 80080a0:	f000 fb92 	bl	80087c8 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 25000;
 80080a4:	f007 f866 	bl	800f174 <HAL_GetTick>
 80080a8:	0003      	movs	r3, r0
 80080aa:	4aaf      	ldr	r2, [pc, #700]	@ (8008368 <main+0x3b4>)
 80080ac:	189a      	adds	r2, r3, r2
 80080ae:	4baf      	ldr	r3, [pc, #700]	@ (800836c <main+0x3b8>)
 80080b0:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 80080b2:	f7fe fac9 	bl	8006648 <Check_USB_PowerOn>
 80080b6:	0003      	movs	r3, r0
 80080b8:	1e5a      	subs	r2, r3, #1
 80080ba:	4193      	sbcs	r3, r2
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2201      	movs	r2, #1
 80080c0:	4053      	eors	r3, r2
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	1c1a      	adds	r2, r3, #0
 80080c6:	2301      	movs	r3, #1
 80080c8:	4013      	ands	r3, r2
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	4ba8      	ldr	r3, [pc, #672]	@ (8008370 <main+0x3bc>)
 80080ce:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 80080d0:	4ba8      	ldr	r3, [pc, #672]	@ (8008374 <main+0x3c0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	0018      	movs	r0, r3
 80080d6:	f006 fbb3 	bl	800e840 <TimestampIsReached>
 80080da:	1e03      	subs	r3, r0, #0
 80080dc:	d00e      	beq.n	80080fc <main+0x148>
      charge = Battery_Upkeep();
 80080de:	f005 fe93 	bl	800de08 <Battery_Upkeep>
 80080e2:	0003      	movs	r3, r0
 80080e4:	001a      	movs	r2, r3
 80080e6:	4b91      	ldr	r3, [pc, #580]	@ (800832c <main+0x378>)
 80080e8:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 80080ea:	f007 f843 	bl	800f174 <HAL_GetTick>
 80080ee:	0003      	movs	r3, r0
 80080f0:	4aa1      	ldr	r2, [pc, #644]	@ (8008378 <main+0x3c4>)
 80080f2:	189a      	adds	r2, r3, r2
 80080f4:	4b9f      	ldr	r3, [pc, #636]	@ (8008374 <main+0x3c0>)
 80080f6:	601a      	str	r2, [r3, #0]
      showTime();
 80080f8:	f7fe fad6 	bl	80066a8 <showTime>

    }
    configCheck();
 80080fc:	f005 fce8 	bl	800dad0 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8008100:	4b9e      	ldr	r3, [pc, #632]	@ (800837c <main+0x3c8>)
 8008102:	2200      	movs	r2, #0
 8008104:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8008106:	4b89      	ldr	r3, [pc, #548]	@ (800832c <main+0x378>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d003      	beq.n	8008116 <main+0x162>
 800810e:	4b87      	ldr	r3, [pc, #540]	@ (800832c <main+0x378>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <main+0x16c>
          FlashLEDs();
 8008116:	f7ff ff19 	bl	8007f4c <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 800811a:	4b99      	ldr	r3, [pc, #612]	@ (8008380 <main+0x3cc>)
 800811c:	2200      	movs	r2, #0
 800811e:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8008120:	4b82      	ldr	r3, [pc, #520]	@ (800832c <main+0x378>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d109      	bne.n	800813c <main+0x188>
 8008128:	4b96      	ldr	r3, [pc, #600]	@ (8008384 <main+0x3d0>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b09      	cmp	r3, #9
 800812e:	d105      	bne.n	800813c <main+0x188>
          batteryEmpty = true;
 8008130:	4b95      	ldr	r3, [pc, #596]	@ (8008388 <main+0x3d4>)
 8008132:	2201      	movs	r2, #1
 8008134:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8008136:	f7fe fde3 	bl	8006d00 <Enter_Standby_Mode>
 800813a:	e002      	b.n	8008142 <main+0x18e>
        }
        else{
          batteryEmpty = false;
 800813c:	4b92      	ldr	r3, [pc, #584]	@ (8008388 <main+0x3d4>)
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8008142:	4b92      	ldr	r3, [pc, #584]	@ (800838c <main+0x3d8>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d100      	bne.n	800814c <main+0x198>
 800814a:	e0aa      	b.n	80082a2 <main+0x2ee>
 800814c:	4b7a      	ldr	r3, [pc, #488]	@ (8008338 <main+0x384>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2201      	movs	r2, #1
 8008152:	4053      	eors	r3, r2
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d100      	bne.n	800815c <main+0x1a8>
 800815a:	e0a2      	b.n	80082a2 <main+0x2ee>
 800815c:	4b8a      	ldr	r3, [pc, #552]	@ (8008388 <main+0x3d4>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2201      	movs	r2, #1
 8008162:	4053      	eors	r3, r2
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d100      	bne.n	800816c <main+0x1b8>
 800816a:	e09a      	b.n	80082a2 <main+0x2ee>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800816c:	4b80      	ldr	r3, [pc, #512]	@ (8008370 <main+0x3bc>)
 800816e:	781a      	ldrb	r2, [r3, #0]
 8008170:	4b87      	ldr	r3, [pc, #540]	@ (8008390 <main+0x3dc>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d020      	beq.n	80081ba <main+0x206>
        if (IsSGPPresent() && !usbPluggedIn) {
 8008178:	f000 fab8 	bl	80086ec <IsSGPPresent>
 800817c:	1e03      	subs	r3, r0, #0
 800817e:	d009      	beq.n	8008194 <main+0x1e0>
 8008180:	4b83      	ldr	r3, [pc, #524]	@ (8008390 <main+0x3dc>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2201      	movs	r2, #1
 8008186:	4053      	eors	r3, r2
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <main+0x1e0>
          SetVOCSensorDIS_ENA(true);
 800818e:	2001      	movs	r0, #1
 8008190:	f000 fab6 	bl	8008700 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8008194:	4b7f      	ldr	r3, [pc, #508]	@ (8008394 <main+0x3e0>)
 8008196:	791b      	ldrb	r3, [r3, #4]
 8008198:	2b34      	cmp	r3, #52	@ 0x34
 800819a:	d003      	beq.n	80081a4 <main+0x1f0>
 800819c:	4b7d      	ldr	r3, [pc, #500]	@ (8008394 <main+0x3e0>)
 800819e:	791b      	ldrb	r3, [r3, #4]
 80081a0:	2b35      	cmp	r3, #53	@ 0x35
 80081a2:	d106      	bne.n	80081b2 <main+0x1fe>
 80081a4:	4b7a      	ldr	r3, [pc, #488]	@ (8008390 <main+0x3dc>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <main+0x1fe>
          SetVOCSensorDIS_ENA(false);
 80081ac:	2000      	movs	r0, #0
 80081ae:	f000 faa7 	bl	8008700 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 80081b2:	4b77      	ldr	r3, [pc, #476]	@ (8008390 <main+0x3dc>)
 80081b4:	781a      	ldrb	r2, [r3, #0]
 80081b6:	4b6e      	ldr	r3, [pc, #440]	@ (8008370 <main+0x3bc>)
 80081b8:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 80081ba:	4b77      	ldr	r3, [pc, #476]	@ (8008398 <main+0x3e4>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d00d      	beq.n	80081de <main+0x22a>
 80081c2:	4b75      	ldr	r3, [pc, #468]	@ (8008398 <main+0x3e4>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d009      	beq.n	80081de <main+0x22a>
 80081ca:	4b6d      	ldr	r3, [pc, #436]	@ (8008380 <main+0x3cc>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d005      	beq.n	80081de <main+0x22a>
        HIDSstate = HIDS_Upkeep();
 80081d2:	f006 feaf 	bl	800ef34 <HIDS_Upkeep>
 80081d6:	0003      	movs	r3, r0
 80081d8:	001a      	movs	r2, r3
 80081da:	4b70      	ldr	r3, [pc, #448]	@ (800839c <main+0x3e8>)
 80081dc:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 80081de:	4b6f      	ldr	r3, [pc, #444]	@ (800839c <main+0x3e8>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d00d      	beq.n	8008202 <main+0x24e>
 80081e6:	4b6d      	ldr	r3, [pc, #436]	@ (800839c <main+0x3e8>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d009      	beq.n	8008202 <main+0x24e>
 80081ee:	4b64      	ldr	r3, [pc, #400]	@ (8008380 <main+0x3cc>)
 80081f0:	785b      	ldrb	r3, [r3, #1]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <main+0x24e>
        SGPstate = SGP_Upkeep();
 80081f6:	f004 f84d 	bl	800c294 <SGP_Upkeep>
 80081fa:	0003      	movs	r3, r0
 80081fc:	001a      	movs	r2, r3
 80081fe:	4b66      	ldr	r3, [pc, #408]	@ (8008398 <main+0x3e4>)
 8008200:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8008202:	4b5f      	ldr	r3, [pc, #380]	@ (8008380 <main+0x3cc>)
 8008204:	78db      	ldrb	r3, [r3, #3]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d005      	beq.n	8008216 <main+0x262>
        MICstate = Mic_Upkeep();
 800820a:	f000 ff17 	bl	800903c <Mic_Upkeep>
 800820e:	0003      	movs	r3, r0
 8008210:	001a      	movs	r2, r3
 8008212:	4b63      	ldr	r3, [pc, #396]	@ (80083a0 <main+0x3ec>)
 8008214:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8008216:	4b45      	ldr	r3, [pc, #276]	@ (800832c <main+0x378>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d803      	bhi.n	8008226 <main+0x272>
 800821e:	4b57      	ldr	r3, [pc, #348]	@ (800837c <main+0x3c8>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d016      	beq.n	8008254 <main+0x2a0>
 8008226:	4b56      	ldr	r3, [pc, #344]	@ (8008380 <main+0x3cc>)
 8008228:	789b      	ldrb	r3, [r3, #2]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d012      	beq.n	8008254 <main+0x2a0>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800822e:	f001 f8a7 	bl	8009380 <sen5x_Get_sen5x_enable_state>
 8008232:	0003      	movs	r3, r0
 8008234:	001a      	movs	r2, r3
 8008236:	2301      	movs	r3, #1
 8008238:	4053      	eors	r3, r2
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d006      	beq.n	800824e <main+0x29a>
 8008240:	4b53      	ldr	r3, [pc, #332]	@ (8008390 <main+0x3dc>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <main+0x29a>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 8008248:	2000      	movs	r0, #0
 800824a:	f001 f8d5 	bl	80093f8 <sen5x_enable>
        }
        sen5x_statemachine();
 800824e:	f001 fe15 	bl	8009e7c <sen5x_statemachine>
 8008252:	e020      	b.n	8008296 <main+0x2e2>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8008254:	4b35      	ldr	r3, [pc, #212]	@ (800832c <main+0x378>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d81c      	bhi.n	8008296 <main+0x2e2>
 800825c:	4b47      	ldr	r3, [pc, #284]	@ (800837c <main+0x3c8>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2201      	movs	r2, #1
 8008262:	4053      	eors	r3, r2
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d015      	beq.n	8008296 <main+0x2e2>
 800826a:	4b45      	ldr	r3, [pc, #276]	@ (8008380 <main+0x3cc>)
 800826c:	789b      	ldrb	r3, [r3, #2]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d011      	beq.n	8008296 <main+0x2e2>
        Info("Battery level insufficient for sen5x operation");
 8008272:	4a4c      	ldr	r2, [pc, #304]	@ (80083a4 <main+0x3f0>)
 8008274:	4b2f      	ldr	r3, [pc, #188]	@ (8008334 <main+0x380>)
 8008276:	0019      	movs	r1, r3
 8008278:	2002      	movs	r0, #2
 800827a:	f006 fb37 	bl	800e8ec <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800827e:	4b40      	ldr	r3, [pc, #256]	@ (8008380 <main+0x3cc>)
 8008280:	2200      	movs	r2, #0
 8008282:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8008284:	4b48      	ldr	r3, [pc, #288]	@ (80083a8 <main+0x3f4>)
 8008286:	2200      	movs	r2, #0
 8008288:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800828a:	4b48      	ldr	r3, [pc, #288]	@ (80083ac <main+0x3f8>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <main+0x2e2>
          sen5x_Power_Off();
 8008292:	f001 f933 	bl	80094fc <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8008296:	f7fd f9f1 	bl	800567c <ESP_Upkeep>
 800829a:	0003      	movs	r3, r0
 800829c:	001a      	movs	r2, r3
 800829e:	4b39      	ldr	r3, [pc, #228]	@ (8008384 <main+0x3d0>)
 80082a0:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 80082a2:	4b3a      	ldr	r3, [pc, #232]	@ (800838c <main+0x3d8>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2201      	movs	r2, #1
 80082a8:	4053      	eors	r3, r2
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00f      	beq.n	80082d0 <main+0x31c>
 80082b0:	4b21      	ldr	r3, [pc, #132]	@ (8008338 <main+0x384>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2201      	movs	r2, #1
 80082b6:	4053      	eors	r3, r2
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d008      	beq.n	80082d0 <main+0x31c>
 80082be:	4b32      	ldr	r3, [pc, #200]	@ (8008388 <main+0x3d4>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2201      	movs	r2, #1
 80082c4:	4053      	eors	r3, r2
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <main+0x31c>
      Device_Test();  // for device with startup time
 80082cc:	f000 fbc2 	bl	8008a54 <Device_Test>
    }
    if (!usbPluggedIn) {
 80082d0:	4b2f      	ldr	r3, [pc, #188]	@ (8008390 <main+0x3dc>)
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2201      	movs	r2, #1
 80082d6:	4053      	eors	r3, r2
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d100      	bne.n	80082e0 <main+0x32c>
 80082de:	e6f7      	b.n	80080d0 <main+0x11c>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 80082e0:	4b33      	ldr	r3, [pc, #204]	@ (80083b0 <main+0x3fc>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2201      	movs	r2, #1
 80082e6:	4053      	eors	r3, r2
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d100      	bne.n	80082f0 <main+0x33c>
 80082ee:	e6ef      	b.n	80080d0 <main+0x11c>
 80082f0:	f000 fc2e 	bl	8008b50 <AllDevicesReady>
 80082f4:	1e03      	subs	r3, r0, #0
 80082f6:	d100      	bne.n	80082fa <main+0x346>
 80082f8:	e6ea      	b.n	80080d0 <main+0x11c>
 80082fa:	4b2e      	ldr	r3, [pc, #184]	@ (80083b4 <main+0x400>)
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d100      	bne.n	8008304 <main+0x350>
 8008302:	e6e5      	b.n	80080d0 <main+0x11c>
        EnabledConnectedDevices();
 8008304:	f000 fc8c 	bl	8008c20 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8008308:	4b2b      	ldr	r3, [pc, #172]	@ (80083b8 <main+0x404>)
 800830a:	789b      	ldrb	r3, [r3, #2]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <main+0x362>
 8008310:	23d7      	movs	r3, #215	@ 0xd7
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	e001      	b.n	800831a <main+0x366>
 8008316:	23dc      	movs	r3, #220	@ 0xdc
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	0018      	movs	r0, r3
 800831c:	f7fe fd10 	bl	8006d40 <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8008320:	e6d6      	b.n	80080d0 <main+0x11c>
 8008322:	46c0      	nop			@ (mov r8, r8)
 8008324:	20001c74 	.word	0x20001c74
 8008328:	20001c34 	.word	0x20001c34
 800832c:	20000bec 	.word	0x20000bec
 8008330:	0802459c 	.word	0x0802459c
 8008334:	080245b4 	.word	0x080245b4
 8008338:	20000bd1 	.word	0x20000bd1
 800833c:	20000bd8 	.word	0x20000bd8
 8008340:	20001dac 	.word	0x20001dac
 8008344:	20000c60 	.word	0x20000c60
 8008348:	20001cb4 	.word	0x20001cb4
 800834c:	20000b4c 	.word	0x20000b4c
 8008350:	20000b88 	.word	0x20000b88
 8008354:	080245b8 	.word	0x080245b8
 8008358:	08025bc0 	.word	0x08025bc0
 800835c:	20001e64 	.word	0x20001e64
 8008360:	200009b4 	.word	0x200009b4
 8008364:	20000a14 	.word	0x20000a14
 8008368:	000061a8 	.word	0x000061a8
 800836c:	20000be8 	.word	0x20000be8
 8008370:	20000bd3 	.word	0x20000bd3
 8008374:	20000088 	.word	0x20000088
 8008378:	0000c350 	.word	0x0000c350
 800837c:	20000084 	.word	0x20000084
 8008380:	20000bf0 	.word	0x20000bf0
 8008384:	20000bd7 	.word	0x20000bd7
 8008388:	20000bd2 	.word	0x20000bd2
 800838c:	20000bd0 	.word	0x20000bd0
 8008390:	20001c15 	.word	0x20001c15
 8008394:	20000c88 	.word	0x20000c88
 8008398:	20000bd4 	.word	0x20000bd4
 800839c:	20000bd5 	.word	0x20000bd5
 80083a0:	20000bd6 	.word	0x20000bd6
 80083a4:	080245cc 	.word	0x080245cc
 80083a8:	20000c86 	.word	0x20000c86
 80083ac:	20000c85 	.word	0x20000c85
 80083b0:	20001c16 	.word	0x20001c16
 80083b4:	20000554 	.word	0x20000554
 80083b8:	20000bf4 	.word	0x20000bf4

080083bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	b09d      	sub	sp, #116	@ 0x74
 80083c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80083c2:	2438      	movs	r4, #56	@ 0x38
 80083c4:	193b      	adds	r3, r7, r4
 80083c6:	0018      	movs	r0, r3
 80083c8:	2338      	movs	r3, #56	@ 0x38
 80083ca:	001a      	movs	r2, r3
 80083cc:	2100      	movs	r1, #0
 80083ce:	f018 f929 	bl	8020624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80083d2:	2324      	movs	r3, #36	@ 0x24
 80083d4:	18fb      	adds	r3, r7, r3
 80083d6:	0018      	movs	r0, r3
 80083d8:	2314      	movs	r3, #20
 80083da:	001a      	movs	r2, r3
 80083dc:	2100      	movs	r1, #0
 80083de:	f018 f921 	bl	8020624 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80083e2:	003b      	movs	r3, r7
 80083e4:	0018      	movs	r0, r3
 80083e6:	2324      	movs	r3, #36	@ 0x24
 80083e8:	001a      	movs	r2, r3
 80083ea:	2100      	movs	r1, #0
 80083ec:	f018 f91a 	bl	8020624 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80083f0:	4b34      	ldr	r3, [pc, #208]	@ (80084c4 <SystemClock_Config+0x108>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a34      	ldr	r2, [pc, #208]	@ (80084c8 <SystemClock_Config+0x10c>)
 80083f6:	401a      	ands	r2, r3
 80083f8:	4b32      	ldr	r3, [pc, #200]	@ (80084c4 <SystemClock_Config+0x108>)
 80083fa:	2180      	movs	r1, #128	@ 0x80
 80083fc:	0109      	lsls	r1, r1, #4
 80083fe:	430a      	orrs	r2, r1
 8008400:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8008402:	f00c ff57 	bl	80152b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8008406:	4b31      	ldr	r3, [pc, #196]	@ (80084cc <SystemClock_Config+0x110>)
 8008408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800840a:	4a2f      	ldr	r2, [pc, #188]	@ (80084c8 <SystemClock_Config+0x10c>)
 800840c:	401a      	ands	r2, r3
 800840e:	4b2f      	ldr	r3, [pc, #188]	@ (80084cc <SystemClock_Config+0x110>)
 8008410:	2180      	movs	r1, #128	@ 0x80
 8008412:	0149      	lsls	r1, r1, #5
 8008414:	430a      	orrs	r2, r1
 8008416:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008418:	193b      	adds	r3, r7, r4
 800841a:	2226      	movs	r2, #38	@ 0x26
 800841c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800841e:	193b      	adds	r3, r7, r4
 8008420:	2280      	movs	r2, #128	@ 0x80
 8008422:	0052      	lsls	r2, r2, #1
 8008424:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008426:	0021      	movs	r1, r4
 8008428:	187b      	adds	r3, r7, r1
 800842a:	2201      	movs	r2, #1
 800842c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800842e:	187b      	adds	r3, r7, r1
 8008430:	2210      	movs	r2, #16
 8008432:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008434:	187b      	adds	r3, r7, r1
 8008436:	2201      	movs	r2, #1
 8008438:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800843a:	187b      	adds	r3, r7, r1
 800843c:	2200      	movs	r2, #0
 800843e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008440:	187b      	adds	r3, r7, r1
 8008442:	0018      	movs	r0, r3
 8008444:	f00c ffc6 	bl	80153d4 <HAL_RCC_OscConfig>
 8008448:	1e03      	subs	r3, r0, #0
 800844a:	d001      	beq.n	8008450 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800844c:	f000 f8fc 	bl	8008648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008450:	2124      	movs	r1, #36	@ 0x24
 8008452:	187b      	adds	r3, r7, r1
 8008454:	220f      	movs	r2, #15
 8008456:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008458:	187b      	adds	r3, r7, r1
 800845a:	2201      	movs	r2, #1
 800845c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800845e:	187b      	adds	r3, r7, r1
 8008460:	2200      	movs	r2, #0
 8008462:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008464:	187b      	adds	r3, r7, r1
 8008466:	2200      	movs	r2, #0
 8008468:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800846a:	187b      	adds	r3, r7, r1
 800846c:	2200      	movs	r2, #0
 800846e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008470:	187b      	adds	r3, r7, r1
 8008472:	2100      	movs	r1, #0
 8008474:	0018      	movs	r0, r3
 8008476:	f00d fb81 	bl	8015b7c <HAL_RCC_ClockConfig>
 800847a:	1e03      	subs	r3, r0, #0
 800847c:	d001      	beq.n	8008482 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800847e:	f000 f8e3 	bl	8008648 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8008482:	003b      	movs	r3, r7
 8008484:	226d      	movs	r2, #109	@ 0x6d
 8008486:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008488:	003b      	movs	r3, r7
 800848a:	2200      	movs	r2, #0
 800848c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800848e:	003b      	movs	r3, r7
 8008490:	2200      	movs	r2, #0
 8008492:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008494:	003b      	movs	r3, r7
 8008496:	2200      	movs	r2, #0
 8008498:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800849a:	003b      	movs	r3, r7
 800849c:	2280      	movs	r2, #128	@ 0x80
 800849e:	0252      	lsls	r2, r2, #9
 80084a0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80084a2:	003b      	movs	r3, r7
 80084a4:	2280      	movs	r2, #128	@ 0x80
 80084a6:	04d2      	lsls	r2, r2, #19
 80084a8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80084aa:	003b      	movs	r3, r7
 80084ac:	0018      	movs	r0, r3
 80084ae:	f00d fd89 	bl	8015fc4 <HAL_RCCEx_PeriphCLKConfig>
 80084b2:	1e03      	subs	r3, r0, #0
 80084b4:	d001      	beq.n	80084ba <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80084b6:	f000 f8c7 	bl	8008648 <Error_Handler>
  }
}
 80084ba:	46c0      	nop			@ (mov r8, r8)
 80084bc:	46bd      	mov	sp, r7
 80084be:	b01d      	add	sp, #116	@ 0x74
 80084c0:	bd90      	pop	{r4, r7, pc}
 80084c2:	46c0      	nop			@ (mov r8, r8)
 80084c4:	40007000 	.word	0x40007000
 80084c8:	ffffe7ff 	.word	0xffffe7ff
 80084cc:	40021000 	.word	0x40021000

080084d0 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 80084d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008594 <check_cli_command+0xc4>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	3b61      	subs	r3, #97	@ 0x61
 80084da:	2b13      	cmp	r3, #19
 80084dc:	d830      	bhi.n	8008540 <check_cli_command+0x70>
 80084de:	009a      	lsls	r2, r3, #2
 80084e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008598 <check_cli_command+0xc8>)
 80084e2:	18d3      	adds	r3, r2, r3
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 80084e8:	4b2c      	ldr	r3, [pc, #176]	@ (800859c <check_cli_command+0xcc>)
 80084ea:	0018      	movs	r0, r3
 80084ec:	f017 ff4c 	bl	8020388 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 80084f0:	2003      	movs	r0, #3
 80084f2:	f006 fa65 	bl	800e9c0 <SetVerboseLevel>
      break;
 80084f6:	e04a      	b.n	800858e <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 80084f8:	f7fb f8aa 	bl	8003650 <forceNTPupdate>
    break;
 80084fc:	e047      	b.n	800858e <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 80084fe:	4b28      	ldr	r3, [pc, #160]	@ (80085a0 <check_cli_command+0xd0>)
 8008500:	0018      	movs	r0, r3
 8008502:	f017 ff41 	bl	8020388 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8008506:	2002      	movs	r0, #2
 8008508:	f006 fa5a 	bl	800e9c0 <SetVerboseLevel>
      break;
 800850c:	e03f      	b.n	800858e <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800850e:	4b25      	ldr	r3, [pc, #148]	@ (80085a4 <check_cli_command+0xd4>)
 8008510:	0018      	movs	r0, r3
 8008512:	f017 ff39 	bl	8020388 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8008516:	2001      	movs	r0, #1
 8008518:	f006 fa52 	bl	800e9c0 <SetVerboseLevel>
      break;
 800851c:	e037      	b.n	800858e <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800851e:	4b22      	ldr	r3, [pc, #136]	@ (80085a8 <check_cli_command+0xd8>)
 8008520:	0018      	movs	r0, r3
 8008522:	f017 ff31 	bl	8020388 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8008526:	2000      	movs	r0, #0
 8008528:	f006 fa4a 	bl	800e9c0 <SetVerboseLevel>
      break;
 800852c:	e02f      	b.n	800858e <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800852e:	f006 fe21 	bl	800f174 <HAL_GetTick>
 8008532:	0002      	movs	r2, r0
 8008534:	4b1d      	ldr	r3, [pc, #116]	@ (80085ac <check_cli_command+0xdc>)
 8008536:	601a      	str	r2, [r3, #0]
      break;
 8008538:	e029      	b.n	800858e <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800853a:	f7fe f8b5 	bl	80066a8 <showTime>
      break;
 800853e:	e026      	b.n	800858e <check_cli_command+0xbe>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8008540:	4a1b      	ldr	r2, [pc, #108]	@ (80085b0 <check_cli_command+0xe0>)
 8008542:	4b1c      	ldr	r3, [pc, #112]	@ (80085b4 <check_cli_command+0xe4>)
 8008544:	0019      	movs	r1, r3
 8008546:	2001      	movs	r0, #1
 8008548:	f006 f9d0 	bl	800e8ec <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800854c:	4b1a      	ldr	r3, [pc, #104]	@ (80085b8 <check_cli_command+0xe8>)
 800854e:	0018      	movs	r0, r3
 8008550:	f017 ff1a 	bl	8020388 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8008554:	4b19      	ldr	r3, [pc, #100]	@ (80085bc <check_cli_command+0xec>)
 8008556:	0018      	movs	r0, r3
 8008558:	f017 ff16 	bl	8020388 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800855c:	4b18      	ldr	r3, [pc, #96]	@ (80085c0 <check_cli_command+0xf0>)
 800855e:	0018      	movs	r0, r3
 8008560:	f017 ff12 	bl	8020388 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8008564:	4b17      	ldr	r3, [pc, #92]	@ (80085c4 <check_cli_command+0xf4>)
 8008566:	0018      	movs	r0, r3
 8008568:	f017 ff0e 	bl	8020388 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800856c:	4b16      	ldr	r3, [pc, #88]	@ (80085c8 <check_cli_command+0xf8>)
 800856e:	0018      	movs	r0, r3
 8008570:	f017 ff0a 	bl	8020388 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008574:	4b15      	ldr	r3, [pc, #84]	@ (80085cc <check_cli_command+0xfc>)
 8008576:	0018      	movs	r0, r3
 8008578:	f017 ff06 	bl	8020388 <puts>
      printf("s - Start particle measurement\r\n");
 800857c:	4b14      	ldr	r3, [pc, #80]	@ (80085d0 <check_cli_command+0x100>)
 800857e:	0018      	movs	r0, r3
 8008580:	f017 ff02 	bl	8020388 <puts>
      printf("t - Show actual systemtime\r\n");
 8008584:	4b13      	ldr	r3, [pc, #76]	@ (80085d4 <check_cli_command+0x104>)
 8008586:	0018      	movs	r0, r3
 8008588:	f017 fefe 	bl	8020388 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800858c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800858e:	46c0      	nop			@ (mov r8, r8)
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20000bd8 	.word	0x20000bd8
 8008598:	08025b70 	.word	0x08025b70
 800859c:	080245fc 	.word	0x080245fc
 80085a0:	08024618 	.word	0x08024618
 80085a4:	08024634 	.word	0x08024634
 80085a8:	08024654 	.word	0x08024654
 80085ac:	20000c94 	.word	0x20000c94
 80085b0:	08024670 	.word	0x08024670
 80085b4:	080246a0 	.word	0x080246a0
 80085b8:	080246a4 	.word	0x080246a4
 80085bc:	080246bc 	.word	0x080246bc
 80085c0:	080246dc 	.word	0x080246dc
 80085c4:	08024700 	.word	0x08024700
 80085c8:	08024720 	.word	0x08024720
 80085cc:	08024744 	.word	0x08024744
 80085d0:	08024764 	.word	0x08024764
 80085d4:	08024784 	.word	0x08024784

080085d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80085e0:	4908      	ldr	r1, [pc, #32]	@ (8008604 <HAL_UART_RxCpltCallback+0x2c>)
 80085e2:	4b09      	ldr	r3, [pc, #36]	@ (8008608 <HAL_UART_RxCpltCallback+0x30>)
 80085e4:	2201      	movs	r2, #1
 80085e6:	0018      	movs	r0, r3
 80085e8:	f00f f890 	bl	801770c <HAL_UART_Receive_IT>
  check_cli_command();
 80085ec:	f7ff ff70 	bl	80084d0 <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80085f0:	4904      	ldr	r1, [pc, #16]	@ (8008604 <HAL_UART_RxCpltCallback+0x2c>)
 80085f2:	4b05      	ldr	r3, [pc, #20]	@ (8008608 <HAL_UART_RxCpltCallback+0x30>)
 80085f4:	2201      	movs	r2, #1
 80085f6:	0018      	movs	r0, r3
 80085f8:	f00f f888 	bl	801770c <HAL_UART_Receive_IT>
}
 80085fc:	46c0      	nop			@ (mov r8, r8)
 80085fe:	46bd      	mov	sp, r7
 8008600:	b002      	add	sp, #8
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20000bd8 	.word	0x20000bd8
 8008608:	20001dac 	.word	0x20001dac

0800860c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	0002      	movs	r2, r0
 8008614:	1dbb      	adds	r3, r7, #6
 8008616:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008618:	1dbb      	adds	r3, r7, #6
 800861a:	881a      	ldrh	r2, [r3, #0]
 800861c:	2380      	movs	r3, #128	@ 0x80
 800861e:	021b      	lsls	r3, r3, #8
 8008620:	429a      	cmp	r2, r3
 8008622:	d10b      	bne.n	800863c <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 8008624:	f005 fc04 	bl	800de30 <setuserToggle>
    if (GetPMSensorPresence()) {
 8008628:	f000 f84c 	bl	80086c4 <GetPMSensorPresence>
 800862c:	1e03      	subs	r3, r0, #0
 800862e:	d005      	beq.n	800863c <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 8008630:	4b04      	ldr	r3, [pc, #16]	@ (8008644 <HAL_GPIO_EXTI_Callback+0x38>)
 8008632:	2201      	movs	r2, #1
 8008634:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 8008636:	2000      	movs	r0, #0
 8008638:	f000 feac 	bl	8009394 <sen5x_Set_sen5x_state>
    }
  }
}
 800863c:	46c0      	nop			@ (mov r8, r8)
 800863e:	46bd      	mov	sp, r7
 8008640:	b002      	add	sp, #8
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20000bf0 	.word	0x20000bf0

08008648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800864c:	b672      	cpsid	i
}
 800864e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 8008650:	4a05      	ldr	r2, [pc, #20]	@ (8008668 <Error_Handler+0x20>)
 8008652:	4b06      	ldr	r3, [pc, #24]	@ (800866c <Error_Handler+0x24>)
 8008654:	0019      	movs	r1, r3
 8008656:	2001      	movs	r0, #1
 8008658:	f006 f948 	bl	800e8ec <CreateLine>
    HAL_Delay(2500);
 800865c:	4b04      	ldr	r3, [pc, #16]	@ (8008670 <Error_Handler+0x28>)
 800865e:	0018      	movs	r0, r3
 8008660:	f006 fd92 	bl	800f188 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 8008664:	46c0      	nop			@ (mov r8, r8)
 8008666:	e7f3      	b.n	8008650 <Error_Handler+0x8>
 8008668:	080247a0 	.word	0x080247a0
 800866c:	080246a0 	.word	0x080246a0
 8008670:	000009c4 	.word	0x000009c4

08008674 <testInit>:
#include "display.h"

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8008678:	4b10      	ldr	r3, [pc, #64]	@ (80086bc <testInit+0x48>)
 800867a:	2200      	movs	r2, #0
 800867c:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800867e:	4b0f      	ldr	r3, [pc, #60]	@ (80086bc <testInit+0x48>)
 8008680:	2200      	movs	r2, #0
 8008682:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8008684:	4b0d      	ldr	r3, [pc, #52]	@ (80086bc <testInit+0x48>)
 8008686:	2200      	movs	r2, #0
 8008688:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 800868a:	4b0c      	ldr	r3, [pc, #48]	@ (80086bc <testInit+0x48>)
 800868c:	2200      	movs	r2, #0
 800868e:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8008690:	4b0a      	ldr	r3, [pc, #40]	@ (80086bc <testInit+0x48>)
 8008692:	2200      	movs	r2, #0
 8008694:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 8008696:	4b09      	ldr	r3, [pc, #36]	@ (80086bc <testInit+0x48>)
 8008698:	2200      	movs	r2, #0
 800869a:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 800869c:	4b08      	ldr	r3, [pc, #32]	@ (80086c0 <testInit+0x4c>)
 800869e:	2201      	movs	r2, #1
 80086a0:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 80086a2:	4b07      	ldr	r3, [pc, #28]	@ (80086c0 <testInit+0x4c>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 80086a8:	4b05      	ldr	r3, [pc, #20]	@ (80086c0 <testInit+0x4c>)
 80086aa:	2201      	movs	r2, #1
 80086ac:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 80086ae:	4b04      	ldr	r3, [pc, #16]	@ (80086c0 <testInit+0x4c>)
 80086b0:	2201      	movs	r2, #1
 80086b2:	70da      	strb	r2, [r3, #3]
}
 80086b4:	46c0      	nop			@ (mov r8, r8)
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	46c0      	nop			@ (mov r8, r8)
 80086bc:	20000bf4 	.word	0x20000bf4
 80086c0:	20000bf0 	.word	0x20000bf0

080086c4 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 80086c8:	4b02      	ldr	r3, [pc, #8]	@ (80086d4 <GetPMSensorPresence+0x10>)
 80086ca:	789b      	ldrb	r3, [r3, #2]
}
 80086cc:	0018      	movs	r0, r3
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	46c0      	nop			@ (mov r8, r8)
 80086d4:	20000bf4 	.word	0x20000bf4

080086d8 <DisablePMSensor>:

void DisablePMSensor() {
 80086d8:	b580      	push	{r7, lr}
 80086da:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 80086dc:	4b02      	ldr	r3, [pc, #8]	@ (80086e8 <DisablePMSensor+0x10>)
 80086de:	2200      	movs	r2, #0
 80086e0:	709a      	strb	r2, [r3, #2]
}
 80086e2:	46c0      	nop			@ (mov r8, r8)
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	20000bf4 	.word	0x20000bf4

080086ec <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 80086f0:	4b02      	ldr	r3, [pc, #8]	@ (80086fc <IsSGPPresent+0x10>)
 80086f2:	785b      	ldrb	r3, [r3, #1]
}
 80086f4:	0018      	movs	r0, r3
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	46c0      	nop			@ (mov r8, r8)
 80086fc:	20000bf4 	.word	0x20000bf4

08008700 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	0002      	movs	r2, r0
 8008708:	1dfb      	adds	r3, r7, #7
 800870a:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800870c:	4b0b      	ldr	r3, [pc, #44]	@ (800873c <SetVOCSensorDIS_ENA+0x3c>)
 800870e:	1dfa      	adds	r2, r7, #7
 8008710:	7812      	ldrb	r2, [r2, #0]
 8008712:	715a      	strb	r2, [r3, #5]
  Sensor.VOC_measurementEnabled = setting;
 8008714:	4b0a      	ldr	r3, [pc, #40]	@ (8008740 <SetVOCSensorDIS_ENA+0x40>)
 8008716:	1dfa      	adds	r2, r7, #7
 8008718:	7812      	ldrb	r2, [r2, #0]
 800871a:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800871c:	1dfb      	adds	r3, r7, #7
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <SetVOCSensorDIS_ENA+0x28>
 8008724:	4b07      	ldr	r3, [pc, #28]	@ (8008744 <SetVOCSensorDIS_ENA+0x44>)
 8008726:	e000      	b.n	800872a <SetVOCSensorDIS_ENA+0x2a>
 8008728:	4b07      	ldr	r3, [pc, #28]	@ (8008748 <SetVOCSensorDIS_ENA+0x48>)
 800872a:	4a08      	ldr	r2, [pc, #32]	@ (800874c <SetVOCSensorDIS_ENA+0x4c>)
 800872c:	4908      	ldr	r1, [pc, #32]	@ (8008750 <SetVOCSensorDIS_ENA+0x50>)
 800872e:	2003      	movs	r0, #3
 8008730:	f006 f8dc 	bl	800e8ec <CreateLine>
}
 8008734:	46c0      	nop			@ (mov r8, r8)
 8008736:	46bd      	mov	sp, r7
 8008738:	b002      	add	sp, #8
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20000bf4 	.word	0x20000bf4
 8008740:	20000bf0 	.word	0x20000bf0
 8008744:	080247cc 	.word	0x080247cc
 8008748:	080247d4 	.word	0x080247d4
 800874c:	080247e0 	.word	0x080247e0
 8008750:	080247f4 	.word	0x080247f4

08008754 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 8008754:	b580      	push	{r7, lr}
 8008756:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008758:	4b02      	ldr	r3, [pc, #8]	@ (8008764 <IsPMSensorEnabled+0x10>)
 800875a:	789b      	ldrb	r3, [r3, #2]
}
 800875c:	0018      	movs	r0, r3
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	46c0      	nop			@ (mov r8, r8)
 8008764:	20000bf0 	.word	0x20000bf0

08008768 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	0002      	movs	r2, r0
 8008770:	1dfb      	adds	r3, r7, #7
 8008772:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 8008774:	4b05      	ldr	r3, [pc, #20]	@ (800878c <SetVOCSensorStatus+0x24>)
 8008776:	795b      	ldrb	r3, [r3, #5]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800877c:	4b04      	ldr	r3, [pc, #16]	@ (8008790 <SetVOCSensorStatus+0x28>)
 800877e:	1dfa      	adds	r2, r7, #7
 8008780:	7812      	ldrb	r2, [r2, #0]
 8008782:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 8008784:	46c0      	nop			@ (mov r8, r8)
 8008786:	46bd      	mov	sp, r7
 8008788:	b002      	add	sp, #8
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20000bf4 	.word	0x20000bf4
 8008790:	20000bf0 	.word	0x20000bf0

08008794 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	0002      	movs	r2, r0
 800879c:	1dfb      	adds	r3, r7, #7
 800879e:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 80087a0:	4b03      	ldr	r3, [pc, #12]	@ (80087b0 <SetPMSensorStatus+0x1c>)
 80087a2:	1dfa      	adds	r2, r7, #7
 80087a4:	7812      	ldrb	r2, [r2, #0]
 80087a6:	709a      	strb	r2, [r3, #2]
}
 80087a8:	46c0      	nop			@ (mov r8, r8)
 80087aa:	46bd      	mov	sp, r7
 80087ac:	b002      	add	sp, #8
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20000bf0 	.word	0x20000bf0

080087b4 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 80087b8:	4b02      	ldr	r3, [pc, #8]	@ (80087c4 <SetESPMeasurementDone+0x10>)
 80087ba:	2201      	movs	r2, #1
 80087bc:	711a      	strb	r2, [r3, #4]
}
 80087be:	46c0      	nop			@ (mov r8, r8)
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	20000bf4 	.word	0x20000bf4

080087c8 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
  testInit();
 80087d6:	f7ff ff4d 	bl	8008674 <testInit>
  I2CSensors_Init(sensorI2C);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	0018      	movs	r0, r3
 80087de:	f7fd fbf9 	bl	8005fd4 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 80087e2:	f006 fab5 	bl	800ed50 <HIDS_DeviceConnected>
 80087e6:	0003      	movs	r3, r0
 80087e8:	001a      	movs	r2, r3
 80087ea:	2301      	movs	r3, #1
 80087ec:	4053      	eors	r3, r2
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00c      	beq.n	800880e <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 80087f4:	4a7f      	ldr	r2, [pc, #508]	@ (80089f4 <Device_Init+0x22c>)
 80087f6:	4b80      	ldr	r3, [pc, #512]	@ (80089f8 <Device_Init+0x230>)
 80087f8:	0019      	movs	r1, r3
 80087fa:	2001      	movs	r0, #1
 80087fc:	f006 f876 	bl	800e8ec <CreateLine>
     SensorProbe.HT_Present = false;
 8008800:	4b7e      	ldr	r3, [pc, #504]	@ (80089fc <Device_Init+0x234>)
 8008802:	2200      	movs	r2, #0
 8008804:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 8008806:	4b7e      	ldr	r3, [pc, #504]	@ (8008a00 <Device_Init+0x238>)
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	e008      	b.n	8008820 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800880e:	4b7b      	ldr	r3, [pc, #492]	@ (80089fc <Device_Init+0x234>)
 8008810:	2201      	movs	r2, #1
 8008812:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8008814:	4a7b      	ldr	r2, [pc, #492]	@ (8008a04 <Device_Init+0x23c>)
 8008816:	4b7c      	ldr	r3, [pc, #496]	@ (8008a08 <Device_Init+0x240>)
 8008818:	0019      	movs	r1, r3
 800881a:	2003      	movs	r0, #3
 800881c:	f006 f866 	bl	800e8ec <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8008820:	f003 fb2e 	bl	800be80 <SGP_DeviceConnected>
 8008824:	0003      	movs	r3, r0
 8008826:	001a      	movs	r2, r3
 8008828:	2301      	movs	r3, #1
 800882a:	4053      	eors	r3, r2
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00c      	beq.n	800884c <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 8008832:	4b72      	ldr	r3, [pc, #456]	@ (80089fc <Device_Init+0x234>)
 8008834:	2200      	movs	r2, #0
 8008836:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008838:	4a74      	ldr	r2, [pc, #464]	@ (8008a0c <Device_Init+0x244>)
 800883a:	4b6f      	ldr	r3, [pc, #444]	@ (80089f8 <Device_Init+0x230>)
 800883c:	0019      	movs	r1, r3
 800883e:	2001      	movs	r0, #1
 8008840:	f006 f854 	bl	800e8ec <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8008844:	4b6e      	ldr	r3, [pc, #440]	@ (8008a00 <Device_Init+0x238>)
 8008846:	2200      	movs	r2, #0
 8008848:	705a      	strb	r2, [r3, #1]
 800884a:	e00b      	b.n	8008864 <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800884c:	4b6b      	ldr	r3, [pc, #428]	@ (80089fc <Device_Init+0x234>)
 800884e:	2201      	movs	r2, #1
 8008850:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 8008852:	4b6a      	ldr	r3, [pc, #424]	@ (80089fc <Device_Init+0x234>)
 8008854:	2201      	movs	r2, #1
 8008856:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008858:	4a6d      	ldr	r2, [pc, #436]	@ (8008a10 <Device_Init+0x248>)
 800885a:	4b6b      	ldr	r3, [pc, #428]	@ (8008a08 <Device_Init+0x240>)
 800885c:	0019      	movs	r1, r3
 800885e:	2003      	movs	r0, #3
 8008860:	f006 f844 	bl	800e8ec <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 8008864:	4b65      	ldr	r3, [pc, #404]	@ (80089fc <Device_Init+0x234>)
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d009      	beq.n	8008880 <Device_Init+0xb8>
 800886c:	4b63      	ldr	r3, [pc, #396]	@ (80089fc <Device_Init+0x234>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <Device_Init+0xb8>
    SetDBLED(false, true, false);
 8008874:	2200      	movs	r2, #0
 8008876:	2101      	movs	r1, #1
 8008878:	2000      	movs	r0, #0
 800887a:	f004 fe0f 	bl	800d49c <SetDBLED>
 800887e:	e018      	b.n	80088b2 <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 8008880:	2200      	movs	r2, #0
 8008882:	2100      	movs	r1, #0
 8008884:	2001      	movs	r0, #1
 8008886:	f004 fe09 	bl	800d49c <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800888a:	4b62      	ldr	r3, [pc, #392]	@ (8008a14 <Device_Init+0x24c>)
 800888c:	2200      	movs	r2, #0
 800888e:	2101      	movs	r1, #1
 8008890:	0018      	movs	r0, r3
 8008892:	f007 ff00 	bl	8010696 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8008896:	2380      	movs	r3, #128	@ 0x80
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	485e      	ldr	r0, [pc, #376]	@ (8008a14 <Device_Init+0x24c>)
 800889c:	2201      	movs	r2, #1
 800889e:	0019      	movs	r1, r3
 80088a0:	f007 fef9 	bl	8010696 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80088a4:	2380      	movs	r3, #128	@ 0x80
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	485a      	ldr	r0, [pc, #360]	@ (8008a14 <Device_Init+0x24c>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	0019      	movs	r1, r3
 80088ae:	f007 fef2 	bl	8010696 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 80088b2:	4b53      	ldr	r3, [pc, #332]	@ (8008a00 <Device_Init+0x238>)
 80088b4:	78db      	ldrb	r3, [r3, #3]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d028      	beq.n	800890c <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 80088ba:	4a57      	ldr	r2, [pc, #348]	@ (8008a18 <Device_Init+0x250>)
 80088bc:	4b57      	ldr	r3, [pc, #348]	@ (8008a1c <Device_Init+0x254>)
 80088be:	0019      	movs	r1, r3
 80088c0:	2002      	movs	r0, #2
 80088c2:	f006 f813 	bl	800e8ec <CreateLine>
    if (!enableMicrophone(true)) {
 80088c6:	2001      	movs	r0, #1
 80088c8:	f003 fee6 	bl	800c698 <enableMicrophone>
 80088cc:	0003      	movs	r3, r0
 80088ce:	001a      	movs	r2, r3
 80088d0:	2301      	movs	r3, #1
 80088d2:	4053      	eors	r3, r2
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00c      	beq.n	80088f4 <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 80088da:	4a51      	ldr	r2, [pc, #324]	@ (8008a20 <Device_Init+0x258>)
 80088dc:	4b46      	ldr	r3, [pc, #280]	@ (80089f8 <Device_Init+0x230>)
 80088de:	0019      	movs	r1, r3
 80088e0:	2001      	movs	r0, #1
 80088e2:	f006 f803 	bl	800e8ec <CreateLine>
      SensorProbe.MIC_Present = false;
 80088e6:	4b45      	ldr	r3, [pc, #276]	@ (80089fc <Device_Init+0x234>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 80088ec:	4b44      	ldr	r3, [pc, #272]	@ (8008a00 <Device_Init+0x238>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	70da      	strb	r2, [r3, #3]
 80088f2:	e00b      	b.n	800890c <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 80088f4:	4b41      	ldr	r3, [pc, #260]	@ (80089fc <Device_Init+0x234>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 80088fa:	4b41      	ldr	r3, [pc, #260]	@ (8008a00 <Device_Init+0x238>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 8008900:	4a48      	ldr	r2, [pc, #288]	@ (8008a24 <Device_Init+0x25c>)
 8008902:	4b41      	ldr	r3, [pc, #260]	@ (8008a08 <Device_Init+0x240>)
 8008904:	0019      	movs	r1, r3
 8008906:	2003      	movs	r0, #3
 8008908:	f005 fff0 	bl	800e8ec <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800890c:	f000 fe2c 	bl	8009568 <probe_sen5x>
 8008910:	1e03      	subs	r3, r0, #0
 8008912:	d122      	bne.n	800895a <Device_Init+0x192>
    Debug("PM sensor initialised.");
 8008914:	4a44      	ldr	r2, [pc, #272]	@ (8008a28 <Device_Init+0x260>)
 8008916:	4b3c      	ldr	r3, [pc, #240]	@ (8008a08 <Device_Init+0x240>)
 8008918:	0019      	movs	r1, r3
 800891a:	2003      	movs	r0, #3
 800891c:	f005 ffe6 	bl	800e8ec <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8008920:	4b36      	ldr	r3, [pc, #216]	@ (80089fc <Device_Init+0x234>)
 8008922:	2201      	movs	r2, #1
 8008924:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8008926:	4b36      	ldr	r3, [pc, #216]	@ (8008a00 <Device_Init+0x238>)
 8008928:	2201      	movs	r2, #1
 800892a:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800892c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a2c <Device_Init+0x264>)
 800892e:	791b      	ldrb	r3, [r3, #4]
 8008930:	2b34      	cmp	r3, #52	@ 0x34
 8008932:	d003      	beq.n	800893c <Device_Init+0x174>
 8008934:	4b3d      	ldr	r3, [pc, #244]	@ (8008a2c <Device_Init+0x264>)
 8008936:	791b      	ldrb	r3, [r3, #4]
 8008938:	2b35      	cmp	r3, #53	@ 0x35
 800893a:	d11c      	bne.n	8008976 <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800893c:	4a3c      	ldr	r2, [pc, #240]	@ (8008a30 <Device_Init+0x268>)
 800893e:	4b37      	ldr	r3, [pc, #220]	@ (8008a1c <Device_Init+0x254>)
 8008940:	0019      	movs	r1, r3
 8008942:	2002      	movs	r0, #2
 8008944:	f005 ffd2 	bl	800e8ec <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008948:	4b2d      	ldr	r3, [pc, #180]	@ (8008a00 <Device_Init+0x238>)
 800894a:	2200      	movs	r2, #0
 800894c:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800894e:	4b2b      	ldr	r3, [pc, #172]	@ (80089fc <Device_Init+0x234>)
 8008950:	2200      	movs	r2, #0
 8008952:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 8008954:	f003 fc78 	bl	800c248 <SGP_SoftReset>
 8008958:	e00d      	b.n	8008976 <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800895a:	f000 fdcf 	bl	80094fc <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800895e:	4a35      	ldr	r2, [pc, #212]	@ (8008a34 <Device_Init+0x26c>)
 8008960:	4b29      	ldr	r3, [pc, #164]	@ (8008a08 <Device_Init+0x240>)
 8008962:	0019      	movs	r1, r3
 8008964:	2003      	movs	r0, #3
 8008966:	f005 ffc1 	bl	800e8ec <CreateLine>
    SensorProbe.PM_Present = false;
 800896a:	4b24      	ldr	r3, [pc, #144]	@ (80089fc <Device_Init+0x234>)
 800896c:	2200      	movs	r2, #0
 800896e:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008970:	4b23      	ldr	r3, [pc, #140]	@ (8008a00 <Device_Init+0x238>)
 8008972:	2200      	movs	r2, #0
 8008974:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 8008976:	4b21      	ldr	r3, [pc, #132]	@ (80089fc <Device_Init+0x234>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <Device_Init+0x1ba>
 800897e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a38 <Device_Init+0x270>)
 8008980:	e000      	b.n	8008984 <Device_Init+0x1bc>
 8008982:	4b2e      	ldr	r3, [pc, #184]	@ (8008a3c <Device_Init+0x274>)
 8008984:	4a2e      	ldr	r2, [pc, #184]	@ (8008a40 <Device_Init+0x278>)
 8008986:	4925      	ldr	r1, [pc, #148]	@ (8008a1c <Device_Init+0x254>)
 8008988:	2002      	movs	r0, #2
 800898a:	f005 ffaf 	bl	800e8ec <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800898e:	4b1b      	ldr	r3, [pc, #108]	@ (80089fc <Device_Init+0x234>)
 8008990:	785b      	ldrb	r3, [r3, #1]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <Device_Init+0x1d2>
 8008996:	4b28      	ldr	r3, [pc, #160]	@ (8008a38 <Device_Init+0x270>)
 8008998:	e000      	b.n	800899c <Device_Init+0x1d4>
 800899a:	4b28      	ldr	r3, [pc, #160]	@ (8008a3c <Device_Init+0x274>)
 800899c:	4a29      	ldr	r2, [pc, #164]	@ (8008a44 <Device_Init+0x27c>)
 800899e:	491f      	ldr	r1, [pc, #124]	@ (8008a1c <Device_Init+0x254>)
 80089a0:	2002      	movs	r0, #2
 80089a2:	f005 ffa3 	bl	800e8ec <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 80089a6:	4b15      	ldr	r3, [pc, #84]	@ (80089fc <Device_Init+0x234>)
 80089a8:	789b      	ldrb	r3, [r3, #2]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <Device_Init+0x1ea>
 80089ae:	4b22      	ldr	r3, [pc, #136]	@ (8008a38 <Device_Init+0x270>)
 80089b0:	e000      	b.n	80089b4 <Device_Init+0x1ec>
 80089b2:	4b22      	ldr	r3, [pc, #136]	@ (8008a3c <Device_Init+0x274>)
 80089b4:	4a24      	ldr	r2, [pc, #144]	@ (8008a48 <Device_Init+0x280>)
 80089b6:	4919      	ldr	r1, [pc, #100]	@ (8008a1c <Device_Init+0x254>)
 80089b8:	2002      	movs	r0, #2
 80089ba:	f005 ff97 	bl	800e8ec <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 80089be:	4b0f      	ldr	r3, [pc, #60]	@ (80089fc <Device_Init+0x234>)
 80089c0:	78db      	ldrb	r3, [r3, #3]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <Device_Init+0x202>
 80089c6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a38 <Device_Init+0x270>)
 80089c8:	e000      	b.n	80089cc <Device_Init+0x204>
 80089ca:	4b1c      	ldr	r3, [pc, #112]	@ (8008a3c <Device_Init+0x274>)
 80089cc:	4a1f      	ldr	r2, [pc, #124]	@ (8008a4c <Device_Init+0x284>)
 80089ce:	4913      	ldr	r1, [pc, #76]	@ (8008a1c <Device_Init+0x254>)
 80089d0:	2002      	movs	r0, #2
 80089d2:	f005 ff8b 	bl	800e8ec <CreateLine>
  ESP_Init(espUart);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	0018      	movs	r0, r3
 80089da:	f7fa fff1 	bl	80039c0 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 80089de:	4a1c      	ldr	r2, [pc, #112]	@ (8008a50 <Device_Init+0x288>)
 80089e0:	4b09      	ldr	r3, [pc, #36]	@ (8008a08 <Device_Init+0x240>)
 80089e2:	0019      	movs	r1, r3
 80089e4:	2003      	movs	r0, #3
 80089e6:	f005 ff81 	bl	800e8ec <CreateLine>
}
 80089ea:	46c0      	nop			@ (mov r8, r8)
 80089ec:	46bd      	mov	sp, r7
 80089ee:	b004      	add	sp, #16
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	46c0      	nop			@ (mov r8, r8)
 80089f4:	080247f8 	.word	0x080247f8
 80089f8:	08024828 	.word	0x08024828
 80089fc:	20000bf4 	.word	0x20000bf4
 8008a00:	20000bf0 	.word	0x20000bf0
 8008a04:	0802482c 	.word	0x0802482c
 8008a08:	080247f4 	.word	0x080247f4
 8008a0c:	08024858 	.word	0x08024858
 8008a10:	08024874 	.word	0x08024874
 8008a14:	50000400 	.word	0x50000400
 8008a18:	0802488c 	.word	0x0802488c
 8008a1c:	080248b0 	.word	0x080248b0
 8008a20:	080248b4 	.word	0x080248b4
 8008a24:	080248e0 	.word	0x080248e0
 8008a28:	0802490c 	.word	0x0802490c
 8008a2c:	20000c88 	.word	0x20000c88
 8008a30:	08024924 	.word	0x08024924
 8008a34:	08024974 	.word	0x08024974
 8008a38:	08024998 	.word	0x08024998
 8008a3c:	0802499c 	.word	0x0802499c
 8008a40:	080249a0 	.word	0x080249a0
 8008a44:	080249bc 	.word	0x080249bc
 8008a48:	080249d8 	.word	0x080249d8
 8008a4c:	080249f4 	.word	0x080249f4
 8008a50:	08024a10 	.word	0x08024a10

08008a54 <Device_Test>:

void Device_Test(){
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008a58:	4b34      	ldr	r3, [pc, #208]	@ (8008b2c <Device_Test+0xd8>)
 8008a5a:	78db      	ldrb	r3, [r3, #3]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	4053      	eors	r3, r2
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d027      	beq.n	8008ab6 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 8008a66:	f000 fab9 	bl	8008fdc <MIC_TestMeasurementDone>
 8008a6a:	1e03      	subs	r3, r0, #0
 8008a6c:	d011      	beq.n	8008a92 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 8008a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8008b2c <Device_Test+0xd8>)
 8008a70:	2201      	movs	r2, #1
 8008a72:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008a74:	4b2e      	ldr	r3, [pc, #184]	@ (8008b30 <Device_Test+0xdc>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 8008a7a:	f004 fc93 	bl	800d3a4 <Calculate_LED_ON>
 8008a7e:	0003      	movs	r3, r0
 8008a80:	0019      	movs	r1, r3
 8008a82:	23fa      	movs	r3, #250	@ 0xfa
 8008a84:	011a      	lsls	r2, r3, #4
 8008a86:	23fa      	movs	r3, #250	@ 0xfa
 8008a88:	011b      	lsls	r3, r3, #4
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f004 fcd2 	bl	800d434 <SetStatusLED>
 8008a90:	e011      	b.n	8008ab6 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 8008a92:	f003 fddd 	bl	800c650 <micSettlingComplete>
 8008a96:	1e03      	subs	r3, r0, #0
 8008a98:	d00d      	beq.n	8008ab6 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 8008a9a:	4b25      	ldr	r3, [pc, #148]	@ (8008b30 <Device_Test+0xdc>)
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 8008aa0:	f004 fc80 	bl	800d3a4 <Calculate_LED_ON>
 8008aa4:	0003      	movs	r3, r0
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	23fa      	movs	r3, #250	@ 0xfa
 8008aaa:	011a      	lsls	r2, r3, #4
 8008aac:	23fa      	movs	r3, #250	@ 0xfa
 8008aae:	011b      	lsls	r3, r3, #4
 8008ab0:	0019      	movs	r1, r3
 8008ab2:	f004 fcbf 	bl	800d434 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 8008ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8008b2c <Device_Test+0xd8>)
 8008ab8:	791b      	ldrb	r3, [r3, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	4053      	eors	r3, r2
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 8008ac4:	f7fc fcc0 	bl	8005448 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8008ac8:	4b18      	ldr	r3, [pc, #96]	@ (8008b2c <Device_Test+0xd8>)
 8008aca:	791b      	ldrb	r3, [r3, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <Device_Test+0x84>
 8008ad0:	4b16      	ldr	r3, [pc, #88]	@ (8008b2c <Device_Test+0xd8>)
 8008ad2:	78db      	ldrb	r3, [r3, #3]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d106      	bne.n	8008ae6 <Device_Test+0x92>
 8008ad8:	4b16      	ldr	r3, [pc, #88]	@ (8008b34 <Device_Test+0xe0>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	0018      	movs	r0, r3
 8008ade:	f005 feaf 	bl	800e840 <TimestampIsReached>
 8008ae2:	1e03      	subs	r3, r0, #0
 8008ae4:	d01f      	beq.n	8008b26 <Device_Test+0xd2>
    Info("Test completed");
 8008ae6:	4a14      	ldr	r2, [pc, #80]	@ (8008b38 <Device_Test+0xe4>)
 8008ae8:	4b14      	ldr	r3, [pc, #80]	@ (8008b3c <Device_Test+0xe8>)
 8008aea:	0019      	movs	r1, r3
 8008aec:	2002      	movs	r0, #2
 8008aee:	f005 fefd 	bl	800e8ec <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 8008af2:	4b0e      	ldr	r3, [pc, #56]	@ (8008b2c <Device_Test+0xd8>)
 8008af4:	791b      	ldrb	r3, [r3, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <Device_Test+0xaa>
 8008afa:	4b11      	ldr	r3, [pc, #68]	@ (8008b40 <Device_Test+0xec>)
 8008afc:	e000      	b.n	8008b00 <Device_Test+0xac>
 8008afe:	4b11      	ldr	r3, [pc, #68]	@ (8008b44 <Device_Test+0xf0>)
 8008b00:	4a11      	ldr	r2, [pc, #68]	@ (8008b48 <Device_Test+0xf4>)
 8008b02:	490e      	ldr	r1, [pc, #56]	@ (8008b3c <Device_Test+0xe8>)
 8008b04:	2002      	movs	r0, #2
 8008b06:	f005 fef1 	bl	800e8ec <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 8008b0a:	4b08      	ldr	r3, [pc, #32]	@ (8008b2c <Device_Test+0xd8>)
 8008b0c:	78db      	ldrb	r3, [r3, #3]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <Device_Test+0xc2>
 8008b12:	4b0b      	ldr	r3, [pc, #44]	@ (8008b40 <Device_Test+0xec>)
 8008b14:	e000      	b.n	8008b18 <Device_Test+0xc4>
 8008b16:	4b0b      	ldr	r3, [pc, #44]	@ (8008b44 <Device_Test+0xf0>)
 8008b18:	4a0c      	ldr	r2, [pc, #48]	@ (8008b4c <Device_Test+0xf8>)
 8008b1a:	4908      	ldr	r1, [pc, #32]	@ (8008b3c <Device_Test+0xe8>)
 8008b1c:	2002      	movs	r0, #2
 8008b1e:	f005 fee5 	bl	800e8ec <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 8008b22:	f7ff f9cf 	bl	8007ec4 <SetTestDone>
  }
}
 8008b26:	46c0      	nop			@ (mov r8, r8)
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20000bf4 	.word	0x20000bf4
 8008b30:	20000bf0 	.word	0x20000bf0
 8008b34:	20000be8 	.word	0x20000be8
 8008b38:	08024a34 	.word	0x08024a34
 8008b3c:	080248b0 	.word	0x080248b0
 8008b40:	08024a44 	.word	0x08024a44
 8008b44:	08024a4c 	.word	0x08024a4c
 8008b48:	08024a54 	.word	0x08024a54
 8008b4c:	08024a68 	.word	0x08024a68

08008b50 <AllDevicesReady>:

bool AllDevicesReady() {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8008b54:	4b2a      	ldr	r3, [pc, #168]	@ (8008c00 <AllDevicesReady+0xb0>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f005 fe71 	bl	800e840 <TimestampIsReached>
 8008b5e:	1e03      	subs	r3, r0, #0
 8008b60:	d04a      	beq.n	8008bf8 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8008b62:	4b28      	ldr	r3, [pc, #160]	@ (8008c04 <AllDevicesReady+0xb4>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b06      	cmp	r3, #6
 8008b68:	d102      	bne.n	8008b70 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8008b6a:	4b27      	ldr	r3, [pc, #156]	@ (8008c08 <AllDevicesReady+0xb8>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 8008b70:	4b26      	ldr	r3, [pc, #152]	@ (8008c0c <AllDevicesReady+0xbc>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b07      	cmp	r3, #7
 8008b76:	d006      	beq.n	8008b86 <AllDevicesReady+0x36>
 8008b78:	4b25      	ldr	r3, [pc, #148]	@ (8008c10 <AllDevicesReady+0xc0>)
 8008b7a:	795b      	ldrb	r3, [r3, #5]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	4053      	eors	r3, r2
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 8008b86:	4b20      	ldr	r3, [pc, #128]	@ (8008c08 <AllDevicesReady+0xb8>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8008b8c:	4b21      	ldr	r3, [pc, #132]	@ (8008c14 <AllDevicesReady+0xc4>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d102      	bne.n	8008b9a <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 8008b94:	4b1c      	ldr	r3, [pc, #112]	@ (8008c08 <AllDevicesReady+0xb8>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 8008b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8008c18 <AllDevicesReady+0xc8>)
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d102      	bne.n	8008ba8 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 8008ba2:	4b19      	ldr	r3, [pc, #100]	@ (8008c08 <AllDevicesReady+0xb8>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8008ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c1c <AllDevicesReady+0xcc>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b09      	cmp	r3, #9
 8008bae:	d123      	bne.n	8008bf8 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008bb0:	4b15      	ldr	r3, [pc, #84]	@ (8008c08 <AllDevicesReady+0xb8>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	4053      	eors	r3, r2
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d016      	beq.n	8008bec <AllDevicesReady+0x9c>
 8008bbe:	4b12      	ldr	r3, [pc, #72]	@ (8008c08 <AllDevicesReady+0xb8>)
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	4053      	eors	r3, r2
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00f      	beq.n	8008bec <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8008c08 <AllDevicesReady+0xb8>)
 8008bce:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	4053      	eors	r3, r2
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d008      	beq.n	8008bec <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008bda:	4b0b      	ldr	r3, [pc, #44]	@ (8008c08 <AllDevicesReady+0xb8>)
 8008bdc:	78db      	ldrb	r3, [r3, #3]
 8008bde:	2201      	movs	r2, #1
 8008be0:	4053      	eors	r3, r2
 8008be2:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <AllDevicesReady+0x9c>
 8008be8:	2301      	movs	r3, #1
 8008bea:	e000      	b.n	8008bee <AllDevicesReady+0x9e>
 8008bec:	2300      	movs	r3, #0
 8008bee:	1c1a      	adds	r2, r3, #0
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	e000      	b.n	8008bfa <AllDevicesReady+0xaa>
    }
  }
  return false;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20000be8 	.word	0x20000be8
 8008c04:	20000bd5 	.word	0x20000bd5
 8008c08:	20000bf0 	.word	0x20000bf0
 8008c0c:	20000bd4 	.word	0x20000bd4
 8008c10:	20000bf4 	.word	0x20000bf4
 8008c14:	2000008d 	.word	0x2000008d
 8008c18:	20000bd6 	.word	0x20000bd6
 8008c1c:	20000bd7 	.word	0x20000bd7

08008c20 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8008c24:	4b11      	ldr	r3, [pc, #68]	@ (8008c6c <EnabledConnectedDevices+0x4c>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8008c2c:	4b10      	ldr	r3, [pc, #64]	@ (8008c70 <EnabledConnectedDevices+0x50>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 8008c32:	4b0e      	ldr	r3, [pc, #56]	@ (8008c6c <EnabledConnectedDevices+0x4c>)
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d006      	beq.n	8008c48 <EnabledConnectedDevices+0x28>
 8008c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c6c <EnabledConnectedDevices+0x4c>)
 8008c3c:	795b      	ldrb	r3, [r3, #5]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 8008c42:	4b0b      	ldr	r3, [pc, #44]	@ (8008c70 <EnabledConnectedDevices+0x50>)
 8008c44:	2201      	movs	r2, #1
 8008c46:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008c48:	4b08      	ldr	r3, [pc, #32]	@ (8008c6c <EnabledConnectedDevices+0x4c>)
 8008c4a:	789b      	ldrb	r3, [r3, #2]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 8008c50:	4b07      	ldr	r3, [pc, #28]	@ (8008c70 <EnabledConnectedDevices+0x50>)
 8008c52:	2201      	movs	r2, #1
 8008c54:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8008c56:	4b05      	ldr	r3, [pc, #20]	@ (8008c6c <EnabledConnectedDevices+0x4c>)
 8008c58:	78db      	ldrb	r3, [r3, #3]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 8008c5e:	4b04      	ldr	r3, [pc, #16]	@ (8008c70 <EnabledConnectedDevices+0x50>)
 8008c60:	2201      	movs	r2, #1
 8008c62:	70da      	strb	r2, [r3, #3]
  }
}
 8008c64:	46c0      	nop			@ (mov r8, r8)
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	46c0      	nop			@ (mov r8, r8)
 8008c6c:	20000bf4 	.word	0x20000bf4
 8008c70:	20000bf0 	.word	0x20000bf0

08008c74 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8008c78:	4a0a      	ldr	r2, [pc, #40]	@ (8008ca4 <DisableConnectedDevices+0x30>)
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca8 <DisableConnectedDevices+0x34>)
 8008c7c:	0019      	movs	r1, r3
 8008c7e:	2003      	movs	r0, #3
 8008c80:	f005 fe34 	bl	800e8ec <CreateLine>
  Sensor.HT_measurementEnabled = false;
 8008c84:	4b09      	ldr	r3, [pc, #36]	@ (8008cac <DisableConnectedDevices+0x38>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 8008c8a:	4b08      	ldr	r3, [pc, #32]	@ (8008cac <DisableConnectedDevices+0x38>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 8008c90:	4b06      	ldr	r3, [pc, #24]	@ (8008cac <DisableConnectedDevices+0x38>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 8008c96:	4b05      	ldr	r3, [pc, #20]	@ (8008cac <DisableConnectedDevices+0x38>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	70da      	strb	r2, [r3, #3]
}
 8008c9c:	46c0      	nop			@ (mov r8, r8)
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	46c0      	nop			@ (mov r8, r8)
 8008ca4:	08024a7c 	.word	0x08024a7c
 8008ca8:	080247f4 	.word	0x080247f4
 8008cac:	20000bf0 	.word	0x20000bf0

08008cb0 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 8008cb4:	4b02      	ldr	r3, [pc, #8]	@ (8008cc0 <ResetdBAmax+0x10>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
}
 8008cba:	46c0      	nop			@ (mov r8, r8)
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20000c40 	.word	0x20000c40

08008cc4 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 8008ccc:	f006 fa52 	bl	800f174 <HAL_GetTick>
 8008cd0:	0002      	movs	r2, r0
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	18d2      	adds	r2, r2, r3
 8008cd6:	4b03      	ldr	r3, [pc, #12]	@ (8008ce4 <setMICTimeStamp+0x20>)
 8008cd8:	601a      	str	r2, [r3, #0]
}
 8008cda:	46c0      	nop			@ (mov r8, r8)
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	b002      	add	sp, #8
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	46c0      	nop			@ (mov r8, r8)
 8008ce4:	20000c48 	.word	0x20000c48

08008ce8 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  counter = 0;
 8008cec:	4b05      	ldr	r3, [pc, #20]	@ (8008d04 <ResetDBACalculator+0x1c>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 8008cf2:	4b05      	ldr	r3, [pc, #20]	@ (8008d08 <ResetDBACalculator+0x20>)
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 8008cf8:	4b04      	ldr	r3, [pc, #16]	@ (8008d0c <ResetDBACalculator+0x24>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	701a      	strb	r2, [r3, #0]
}
 8008cfe:	46c0      	nop			@ (mov r8, r8)
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	20000c44 	.word	0x20000c44
 8008d08:	2000008c 	.word	0x2000008c
 8008d0c:	20000c45 	.word	0x20000c45

08008d10 <MIC_Print>:

void MIC_Print(void) {
 8008d10:	b5b0      	push	{r4, r5, r7, lr}
 8008d12:	b08a      	sub	sp, #40	@ 0x28
 8008d14:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 8008d16:	4b9f      	ldr	r3, [pc, #636]	@ (8008f94 <MIC_Print+0x284>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	4b9f      	ldr	r3, [pc, #636]	@ (8008f98 <MIC_Print+0x288>)
 8008d1c:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008d1e:	4b9f      	ldr	r3, [pc, #636]	@ (8008f9c <MIC_Print+0x28c>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	001a      	movs	r2, r3
 8008d24:	4b9c      	ldr	r3, [pc, #624]	@ (8008f98 <MIC_Print+0x288>)
 8008d26:	6819      	ldr	r1, [r3, #0]
 8008d28:	4b9d      	ldr	r3, [pc, #628]	@ (8008fa0 <MIC_Print+0x290>)
 8008d2a:	0092      	lsls	r2, r2, #2
 8008d2c:	50d1      	str	r1, [r2, r3]
  counter++;
 8008d2e:	4b9b      	ldr	r3, [pc, #620]	@ (8008f9c <MIC_Print+0x28c>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	3301      	adds	r3, #1
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	4b99      	ldr	r3, [pc, #612]	@ (8008f9c <MIC_Print+0x28c>)
 8008d38:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008d3a:	4b98      	ldr	r3, [pc, #608]	@ (8008f9c <MIC_Print+0x28c>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b09      	cmp	r3, #9
 8008d40:	d80b      	bhi.n	8008d5a <MIC_Print+0x4a>
 8008d42:	4b98      	ldr	r3, [pc, #608]	@ (8008fa4 <MIC_Print+0x294>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	2201      	movs	r2, #1
 8008d48:	4053      	eors	r3, r2
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <MIC_Print+0x4a>
    denominator = counter;
 8008d50:	4b92      	ldr	r3, [pc, #584]	@ (8008f9c <MIC_Print+0x28c>)
 8008d52:	781a      	ldrb	r2, [r3, #0]
 8008d54:	4b94      	ldr	r3, [pc, #592]	@ (8008fa8 <MIC_Print+0x298>)
 8008d56:	701a      	strb	r2, [r3, #0]
 8008d58:	e005      	b.n	8008d66 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008d5a:	4b93      	ldr	r3, [pc, #588]	@ (8008fa8 <MIC_Print+0x298>)
 8008d5c:	220a      	movs	r2, #10
 8008d5e:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008d60:	4b90      	ldr	r3, [pc, #576]	@ (8008fa4 <MIC_Print+0x294>)
 8008d62:	2201      	movs	r2, #1
 8008d64:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 8008d66:	4b91      	ldr	r3, [pc, #580]	@ (8008fac <MIC_Print+0x29c>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008d6c:	230f      	movs	r3, #15
 8008d6e:	18fb      	adds	r3, r7, r3
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]
 8008d74:	e042      	b.n	8008dfc <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 8008d76:	240f      	movs	r4, #15
 8008d78:	193b      	adds	r3, r7, r4
 8008d7a:	781a      	ldrb	r2, [r3, #0]
 8008d7c:	4b88      	ldr	r3, [pc, #544]	@ (8008fa0 <MIC_Print+0x290>)
 8008d7e:	0092      	lsls	r2, r2, #2
 8008d80:	58d2      	ldr	r2, [r2, r3]
 8008d82:	4b8a      	ldr	r3, [pc, #552]	@ (8008fac <MIC_Print+0x29c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	1c19      	adds	r1, r3, #0
 8008d88:	1c10      	adds	r0, r2, #0
 8008d8a:	f7f7 fd99 	bl	80008c0 <__aeabi_fadd>
 8008d8e:	1c03      	adds	r3, r0, #0
 8008d90:	1c1a      	adds	r2, r3, #0
 8008d92:	4b86      	ldr	r3, [pc, #536]	@ (8008fac <MIC_Print+0x29c>)
 8008d94:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008d96:	193b      	adds	r3, r7, r4
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	4b81      	ldr	r3, [pc, #516]	@ (8008fa0 <MIC_Print+0x290>)
 8008d9c:	0092      	lsls	r2, r2, #2
 8008d9e:	58d2      	ldr	r2, [r2, r3]
 8008da0:	4b83      	ldr	r3, [pc, #524]	@ (8008fb0 <MIC_Print+0x2a0>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	1c19      	adds	r1, r3, #0
 8008da6:	1c10      	adds	r0, r2, #0
 8008da8:	f7f7 fbd6 	bl	8000558 <__aeabi_fcmpgt>
 8008dac:	1e03      	subs	r3, r0, #0
 8008dae:	d006      	beq.n	8008dbe <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 8008db0:	193b      	adds	r3, r7, r4
 8008db2:	781a      	ldrb	r2, [r3, #0]
 8008db4:	4b7a      	ldr	r3, [pc, #488]	@ (8008fa0 <MIC_Print+0x290>)
 8008db6:	0092      	lsls	r2, r2, #2
 8008db8:	58d2      	ldr	r2, [r2, r3]
 8008dba:	4b7d      	ldr	r3, [pc, #500]	@ (8008fb0 <MIC_Print+0x2a0>)
 8008dbc:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008dbe:	4b7b      	ldr	r3, [pc, #492]	@ (8008fac <MIC_Print+0x29c>)
 8008dc0:	681c      	ldr	r4, [r3, #0]
 8008dc2:	4b79      	ldr	r3, [pc, #484]	@ (8008fa8 <MIC_Print+0x298>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f7f8 fc4e 	bl	8001668 <__aeabi_ui2f>
 8008dcc:	1c03      	adds	r3, r0, #0
 8008dce:	1c19      	adds	r1, r3, #0
 8008dd0:	1c20      	adds	r0, r4, #0
 8008dd2:	f7f7 feff 	bl	8000bd4 <__aeabi_fdiv>
 8008dd6:	1c03      	adds	r3, r0, #0
 8008dd8:	1c1a      	adds	r2, r3, #0
 8008dda:	4b76      	ldr	r3, [pc, #472]	@ (8008fb4 <MIC_Print+0x2a4>)
 8008ddc:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 8008dde:	4b6e      	ldr	r3, [pc, #440]	@ (8008f98 <MIC_Print+0x288>)
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	4b73      	ldr	r3, [pc, #460]	@ (8008fb0 <MIC_Print+0x2a0>)
 8008de4:	6819      	ldr	r1, [r3, #0]
 8008de6:	4b73      	ldr	r3, [pc, #460]	@ (8008fb4 <MIC_Print+0x2a4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	1c1a      	adds	r2, r3, #0
 8008dec:	f7fa fd08 	bl	8003800 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008df0:	210f      	movs	r1, #15
 8008df2:	187b      	adds	r3, r7, r1
 8008df4:	781a      	ldrb	r2, [r3, #0]
 8008df6:	187b      	adds	r3, r7, r1
 8008df8:	3201      	adds	r2, #1
 8008dfa:	701a      	strb	r2, [r3, #0]
 8008dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8008fa8 <MIC_Print+0x298>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	220f      	movs	r2, #15
 8008e02:	18ba      	adds	r2, r7, r2
 8008e04:	7812      	ldrb	r2, [r2, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d3b5      	bcc.n	8008d76 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008e0a:	4b63      	ldr	r3, [pc, #396]	@ (8008f98 <MIC_Print+0x288>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	1c18      	adds	r0, r3, #0
 8008e10:	f7fa fb28 	bl	8003464 <__aeabi_f2d>
 8008e14:	6038      	str	r0, [r7, #0]
 8008e16:	6079      	str	r1, [r7, #4]
 8008e18:	4b65      	ldr	r3, [pc, #404]	@ (8008fb0 <MIC_Print+0x2a0>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	1c18      	adds	r0, r3, #0
 8008e1e:	f7fa fb21 	bl	8003464 <__aeabi_f2d>
 8008e22:	0004      	movs	r4, r0
 8008e24:	000d      	movs	r5, r1
 8008e26:	4b63      	ldr	r3, [pc, #396]	@ (8008fb4 <MIC_Print+0x2a4>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	1c18      	adds	r0, r3, #0
 8008e2c:	f7fa fb1a 	bl	8003464 <__aeabi_f2d>
 8008e30:	0002      	movs	r2, r0
 8008e32:	000b      	movs	r3, r1
 8008e34:	4960      	ldr	r1, [pc, #384]	@ (8008fb8 <MIC_Print+0x2a8>)
 8008e36:	9204      	str	r2, [sp, #16]
 8008e38:	9305      	str	r3, [sp, #20]
 8008e3a:	9402      	str	r4, [sp, #8]
 8008e3c:	9503      	str	r5, [sp, #12]
 8008e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8008fbc <MIC_Print+0x2ac>)
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	0008      	movs	r0, r1
 8008e48:	f017 fa38 	bl	80202bc <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8008e4c:	4b53      	ldr	r3, [pc, #332]	@ (8008f9c <MIC_Print+0x28c>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b0a      	cmp	r3, #10
 8008e52:	d902      	bls.n	8008e5a <MIC_Print+0x14a>
    counter = 0;
 8008e54:	4b51      	ldr	r3, [pc, #324]	@ (8008f9c <MIC_Print+0x28c>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8008f98 <MIC_Print+0x288>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4958      	ldr	r1, [pc, #352]	@ (8008fc0 <MIC_Print+0x2b0>)
 8008e60:	1c18      	adds	r0, r3, #0
 8008e62:	f7f7 fb83 	bl	800056c <__aeabi_fcmpge>
 8008e66:	1e03      	subs	r3, r0, #0
 8008e68:	d004      	beq.n	8008e74 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	2001      	movs	r0, #1
 8008e70:	f004 fb14 	bl	800d49c <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008e74:	4b48      	ldr	r3, [pc, #288]	@ (8008f98 <MIC_Print+0x288>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4952      	ldr	r1, [pc, #328]	@ (8008fc4 <MIC_Print+0x2b4>)
 8008e7a:	1c18      	adds	r0, r3, #0
 8008e7c:	f7f7 fb76 	bl	800056c <__aeabi_fcmpge>
 8008e80:	1e03      	subs	r3, r0, #0
 8008e82:	d00c      	beq.n	8008e9e <MIC_Print+0x18e>
 8008e84:	4b44      	ldr	r3, [pc, #272]	@ (8008f98 <MIC_Print+0x288>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	494d      	ldr	r1, [pc, #308]	@ (8008fc0 <MIC_Print+0x2b0>)
 8008e8a:	1c18      	adds	r0, r3, #0
 8008e8c:	f7f7 fb50 	bl	8000530 <__aeabi_fcmplt>
 8008e90:	1e03      	subs	r3, r0, #0
 8008e92:	d004      	beq.n	8008e9e <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 8008e94:	2200      	movs	r2, #0
 8008e96:	2100      	movs	r1, #0
 8008e98:	2001      	movs	r0, #1
 8008e9a:	f004 faff 	bl	800d49c <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8008f98 <MIC_Print+0x288>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4949      	ldr	r1, [pc, #292]	@ (8008fc8 <MIC_Print+0x2b8>)
 8008ea4:	1c18      	adds	r0, r3, #0
 8008ea6:	f7f7 fb61 	bl	800056c <__aeabi_fcmpge>
 8008eaa:	1e03      	subs	r3, r0, #0
 8008eac:	d00c      	beq.n	8008ec8 <MIC_Print+0x1b8>
 8008eae:	4b3a      	ldr	r3, [pc, #232]	@ (8008f98 <MIC_Print+0x288>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4944      	ldr	r1, [pc, #272]	@ (8008fc4 <MIC_Print+0x2b4>)
 8008eb4:	1c18      	adds	r0, r3, #0
 8008eb6:	f7f7 fb3b 	bl	8000530 <__aeabi_fcmplt>
 8008eba:	1e03      	subs	r3, r0, #0
 8008ebc:	d004      	beq.n	8008ec8 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	2001      	movs	r0, #1
 8008ec4:	f004 faea 	bl	800d49c <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008ec8:	4b33      	ldr	r3, [pc, #204]	@ (8008f98 <MIC_Print+0x288>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	493f      	ldr	r1, [pc, #252]	@ (8008fcc <MIC_Print+0x2bc>)
 8008ece:	1c18      	adds	r0, r3, #0
 8008ed0:	f7f7 fb4c 	bl	800056c <__aeabi_fcmpge>
 8008ed4:	1e03      	subs	r3, r0, #0
 8008ed6:	d00c      	beq.n	8008ef2 <MIC_Print+0x1e2>
 8008ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8008f98 <MIC_Print+0x288>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	493a      	ldr	r1, [pc, #232]	@ (8008fc8 <MIC_Print+0x2b8>)
 8008ede:	1c18      	adds	r0, r3, #0
 8008ee0:	f7f7 fb26 	bl	8000530 <__aeabi_fcmplt>
 8008ee4:	1e03      	subs	r3, r0, #0
 8008ee6:	d004      	beq.n	8008ef2 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2101      	movs	r1, #1
 8008eec:	2000      	movs	r0, #0
 8008eee:	f004 fad5 	bl	800d49c <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008ef2:	4b29      	ldr	r3, [pc, #164]	@ (8008f98 <MIC_Print+0x288>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4936      	ldr	r1, [pc, #216]	@ (8008fd0 <MIC_Print+0x2c0>)
 8008ef8:	1c18      	adds	r0, r3, #0
 8008efa:	f7f7 fb37 	bl	800056c <__aeabi_fcmpge>
 8008efe:	1e03      	subs	r3, r0, #0
 8008f00:	d00c      	beq.n	8008f1c <MIC_Print+0x20c>
 8008f02:	4b25      	ldr	r3, [pc, #148]	@ (8008f98 <MIC_Print+0x288>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4931      	ldr	r1, [pc, #196]	@ (8008fcc <MIC_Print+0x2bc>)
 8008f08:	1c18      	adds	r0, r3, #0
 8008f0a:	f7f7 fb11 	bl	8000530 <__aeabi_fcmplt>
 8008f0e:	1e03      	subs	r3, r0, #0
 8008f10:	d004      	beq.n	8008f1c <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 8008f12:	2201      	movs	r2, #1
 8008f14:	2101      	movs	r1, #1
 8008f16:	2000      	movs	r0, #0
 8008f18:	f004 fac0 	bl	800d49c <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8008f98 <MIC_Print+0x288>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	492c      	ldr	r1, [pc, #176]	@ (8008fd4 <MIC_Print+0x2c4>)
 8008f22:	1c18      	adds	r0, r3, #0
 8008f24:	f7f7 fb22 	bl	800056c <__aeabi_fcmpge>
 8008f28:	1e03      	subs	r3, r0, #0
 8008f2a:	d00c      	beq.n	8008f46 <MIC_Print+0x236>
 8008f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008f98 <MIC_Print+0x288>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4927      	ldr	r1, [pc, #156]	@ (8008fd0 <MIC_Print+0x2c0>)
 8008f32:	1c18      	adds	r0, r3, #0
 8008f34:	f7f7 fafc 	bl	8000530 <__aeabi_fcmplt>
 8008f38:	1e03      	subs	r3, r0, #0
 8008f3a:	d004      	beq.n	8008f46 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	2100      	movs	r1, #0
 8008f40:	2000      	movs	r0, #0
 8008f42:	f004 faab 	bl	800d49c <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008f46:	4b14      	ldr	r3, [pc, #80]	@ (8008f98 <MIC_Print+0x288>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4923      	ldr	r1, [pc, #140]	@ (8008fd8 <MIC_Print+0x2c8>)
 8008f4c:	1c18      	adds	r0, r3, #0
 8008f4e:	f7f7 fb0d 	bl	800056c <__aeabi_fcmpge>
 8008f52:	1e03      	subs	r3, r0, #0
 8008f54:	d00c      	beq.n	8008f70 <MIC_Print+0x260>
 8008f56:	4b10      	ldr	r3, [pc, #64]	@ (8008f98 <MIC_Print+0x288>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	491e      	ldr	r1, [pc, #120]	@ (8008fd4 <MIC_Print+0x2c4>)
 8008f5c:	1c18      	adds	r0, r3, #0
 8008f5e:	f7f7 fae7 	bl	8000530 <__aeabi_fcmplt>
 8008f62:	1e03      	subs	r3, r0, #0
 8008f64:	d004      	beq.n	8008f70 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 8008f66:	2201      	movs	r2, #1
 8008f68:	2100      	movs	r1, #0
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	f004 fa96 	bl	800d49c <SetDBLED>
  }
  if(dBA < 35){//off
 8008f70:	4b09      	ldr	r3, [pc, #36]	@ (8008f98 <MIC_Print+0x288>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4918      	ldr	r1, [pc, #96]	@ (8008fd8 <MIC_Print+0x2c8>)
 8008f76:	1c18      	adds	r0, r3, #0
 8008f78:	f7f7 fada 	bl	8000530 <__aeabi_fcmplt>
 8008f7c:	1e03      	subs	r3, r0, #0
 8008f7e:	d100      	bne.n	8008f82 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 8008f80:	e004      	b.n	8008f8c <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 8008f82:	2200      	movs	r2, #0
 8008f84:	2100      	movs	r1, #0
 8008f86:	2000      	movs	r0, #0
 8008f88:	f004 fa88 	bl	800d49c <SetDBLED>
}
 8008f8c:	46c0      	nop			@ (mov r8, r8)
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	b004      	add	sp, #16
 8008f92:	bdb0      	pop	{r4, r5, r7, pc}
 8008f94:	20000c3c 	.word	0x20000c3c
 8008f98:	20000c08 	.word	0x20000c08
 8008f9c:	20000c44 	.word	0x20000c44
 8008fa0:	20000c0c 	.word	0x20000c0c
 8008fa4:	20000c45 	.word	0x20000c45
 8008fa8:	2000008c 	.word	0x2000008c
 8008fac:	20000c38 	.word	0x20000c38
 8008fb0:	20000c40 	.word	0x20000c40
 8008fb4:	20000c34 	.word	0x20000c34
 8008fb8:	08024a90 	.word	0x08024a90
 8008fbc:	20000bfc 	.word	0x20000bfc
 8008fc0:	42b40000 	.word	0x42b40000
 8008fc4:	42a00000 	.word	0x42a00000
 8008fc8:	428c0000 	.word	0x428c0000
 8008fcc:	42700000 	.word	0x42700000
 8008fd0:	42480000 	.word	0x42480000
 8008fd4:	42200000 	.word	0x42200000
 8008fd8:	420c0000 	.word	0x420c0000

08008fdc <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008fe2:	4b11      	ldr	r3, [pc, #68]	@ (8009028 <MIC_TestMeasurementDone+0x4c>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	4a10      	ldr	r2, [pc, #64]	@ (800902c <MIC_TestMeasurementDone+0x50>)
 8008fea:	4911      	ldr	r1, [pc, #68]	@ (8009030 <MIC_TestMeasurementDone+0x54>)
 8008fec:	2002      	movs	r0, #2
 8008fee:	f005 fc7d 	bl	800e8ec <CreateLine>
  if(DataReady) {
 8008ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8009028 <MIC_TestMeasurementDone+0x4c>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d010      	beq.n	800901e <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008ffc:	1dfb      	adds	r3, r7, #7
 8008ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8009034 <MIC_TestMeasurementDone+0x58>)
 8009000:	7812      	ldrb	r2, [r2, #0]
 8009002:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8009004:	4b0b      	ldr	r3, [pc, #44]	@ (8009034 <MIC_TestMeasurementDone+0x58>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	b2db      	uxtb	r3, r3
 800900a:	4a0b      	ldr	r2, [pc, #44]	@ (8009038 <MIC_TestMeasurementDone+0x5c>)
 800900c:	4908      	ldr	r1, [pc, #32]	@ (8009030 <MIC_TestMeasurementDone+0x54>)
 800900e:	2002      	movs	r0, #2
 8009010:	f005 fc6c 	bl	800e8ec <CreateLine>
    ResetMICIndicator();
 8009014:	f004 fb30 	bl	800d678 <ResetMICIndicator>
    return Check;
 8009018:	1dfb      	adds	r3, r7, #7
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	e000      	b.n	8009020 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800901e:	2300      	movs	r3, #0
}
 8009020:	0018      	movs	r0, r3
 8009022:	46bd      	mov	sp, r7
 8009024:	b002      	add	sp, #8
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20000d79 	.word	0x20000d79
 800902c:	08024ad8 	.word	0x08024ad8
 8009030:	08024b04 	.word	0x08024b04
 8009034:	20000d7a 	.word	0x20000d7a
 8009038:	08024b08 	.word	0x08024b08

0800903c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8009042:	4b78      	ldr	r3, [pc, #480]	@ (8009224 <Mic_Upkeep+0x1e8>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	2b03      	cmp	r3, #3
 8009048:	d100      	bne.n	800904c <Mic_Upkeep+0x10>
 800904a:	e0b8      	b.n	80091be <Mic_Upkeep+0x182>
 800904c:	dd00      	ble.n	8009050 <Mic_Upkeep+0x14>
 800904e:	e0d3      	b.n	80091f8 <Mic_Upkeep+0x1bc>
 8009050:	2b02      	cmp	r3, #2
 8009052:	d037      	beq.n	80090c4 <Mic_Upkeep+0x88>
 8009054:	dd00      	ble.n	8009058 <Mic_Upkeep+0x1c>
 8009056:	e0cf      	b.n	80091f8 <Mic_Upkeep+0x1bc>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <Mic_Upkeep+0x26>
 800905c:	2b01      	cmp	r3, #1
 800905e:	d014      	beq.n	800908a <Mic_Upkeep+0x4e>
 8009060:	e0ca      	b.n	80091f8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8009062:	2001      	movs	r0, #1
 8009064:	f003 fb18 	bl	800c698 <enableMicrophone>
 8009068:	0003      	movs	r3, r0
 800906a:	001a      	movs	r2, r3
 800906c:	2301      	movs	r3, #1
 800906e:	4053      	eors	r3, r2
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d005      	beq.n	8009082 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8009076:	4a6c      	ldr	r2, [pc, #432]	@ (8009228 <Mic_Upkeep+0x1ec>)
 8009078:	4b6c      	ldr	r3, [pc, #432]	@ (800922c <Mic_Upkeep+0x1f0>)
 800907a:	217f      	movs	r1, #127	@ 0x7f
 800907c:	0018      	movs	r0, r3
 800907e:	f005 fced 	bl	800ea5c <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8009082:	4b68      	ldr	r3, [pc, #416]	@ (8009224 <Mic_Upkeep+0x1e8>)
 8009084:	2201      	movs	r2, #1
 8009086:	701a      	strb	r2, [r3, #0]
    break;
 8009088:	e0c5      	b.n	8009216 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800908a:	f003 fae1 	bl	800c650 <micSettlingComplete>
 800908e:	1e03      	subs	r3, r0, #0
 8009090:	d105      	bne.n	800909e <Mic_Upkeep+0x62>
 8009092:	4b67      	ldr	r3, [pc, #412]	@ (8009230 <Mic_Upkeep+0x1f4>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b00      	cmp	r3, #0
 800909a:	d100      	bne.n	800909e <Mic_Upkeep+0x62>
 800909c:	e0b6      	b.n	800920c <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800909e:	f003 fb65 	bl	800c76c <startSPLcalculation>
 80090a2:	0003      	movs	r3, r0
 80090a4:	001a      	movs	r2, r3
 80090a6:	2301      	movs	r3, #1
 80090a8:	4053      	eors	r3, r2
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80090b0:	4a5d      	ldr	r2, [pc, #372]	@ (8009228 <Mic_Upkeep+0x1ec>)
 80090b2:	4b5e      	ldr	r3, [pc, #376]	@ (800922c <Mic_Upkeep+0x1f0>)
 80090b4:	2188      	movs	r1, #136	@ 0x88
 80090b6:	0018      	movs	r0, r3
 80090b8:	f005 fcd0 	bl	800ea5c <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80090bc:	4b59      	ldr	r3, [pc, #356]	@ (8009224 <Mic_Upkeep+0x1e8>)
 80090be:	2202      	movs	r2, #2
 80090c0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80090c2:	e0a3      	b.n	800920c <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 80090c4:	4b5b      	ldr	r3, [pc, #364]	@ (8009234 <Mic_Upkeep+0x1f8>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	2101      	movs	r1, #1
 80090ca:	0018      	movs	r0, r3
 80090cc:	f003 f9a2 	bl	800c414 <getSoundData>
 80090d0:	1e03      	subs	r3, r0, #0
 80090d2:	d100      	bne.n	80090d6 <Mic_Upkeep+0x9a>
 80090d4:	e09c      	b.n	8009210 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 80090d6:	f003 fa9b 	bl	800c610 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80090da:	4b56      	ldr	r3, [pc, #344]	@ (8009234 <Mic_Upkeep+0x1f8>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	001a      	movs	r2, r3
 80090e0:	4b54      	ldr	r3, [pc, #336]	@ (8009234 <Mic_Upkeep+0x1f8>)
 80090e2:	785b      	ldrb	r3, [r3, #1]
 80090e4:	4954      	ldr	r1, [pc, #336]	@ (8009238 <Mic_Upkeep+0x1fc>)
 80090e6:	0038      	movs	r0, r7
 80090e8:	f017 f958 	bl	802039c <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 80090ec:	4b51      	ldr	r3, [pc, #324]	@ (8009234 <Mic_Upkeep+0x1f8>)
 80090ee:	89db      	ldrh	r3, [r3, #14]
 80090f0:	001a      	movs	r2, r3
 80090f2:	4b50      	ldr	r3, [pc, #320]	@ (8009234 <Mic_Upkeep+0x1f8>)
 80090f4:	7c1b      	ldrb	r3, [r3, #16]
 80090f6:	4951      	ldr	r1, [pc, #324]	@ (800923c <Mic_Upkeep+0x200>)
 80090f8:	4851      	ldr	r0, [pc, #324]	@ (8009240 <Mic_Upkeep+0x204>)
 80090fa:	f017 f94f 	bl	802039c <siprintf>
      dBValue = atof(dBbuffer);
 80090fe:	003b      	movs	r3, r7
 8009100:	0018      	movs	r0, r3
 8009102:	f015 fcfb 	bl	801eafc <atof>
 8009106:	0002      	movs	r2, r0
 8009108:	000b      	movs	r3, r1
 800910a:	0010      	movs	r0, r2
 800910c:	0019      	movs	r1, r3
 800910e:	f7fa f9f1 	bl	80034f4 <__aeabi_d2f>
 8009112:	1c02      	adds	r2, r0, #0
 8009114:	4b4b      	ldr	r3, [pc, #300]	@ (8009244 <Mic_Upkeep+0x208>)
 8009116:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8009118:	4b4a      	ldr	r3, [pc, #296]	@ (8009244 <Mic_Upkeep+0x208>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	494a      	ldr	r1, [pc, #296]	@ (8009248 <Mic_Upkeep+0x20c>)
 800911e:	1c18      	adds	r0, r3, #0
 8009120:	f7f7 ff3e 	bl	8000fa0 <__aeabi_fmul>
 8009124:	1c03      	adds	r3, r0, #0
 8009126:	1c18      	adds	r0, r3, #0
 8009128:	f7fa f99c 	bl	8003464 <__aeabi_f2d>
 800912c:	2200      	movs	r2, #0
 800912e:	4b47      	ldr	r3, [pc, #284]	@ (800924c <Mic_Upkeep+0x210>)
 8009130:	f7f8 fadc 	bl	80016ec <__aeabi_dadd>
 8009134:	0002      	movs	r2, r0
 8009136:	000b      	movs	r3, r1
 8009138:	0010      	movs	r0, r2
 800913a:	0019      	movs	r1, r3
 800913c:	f7fa f904 	bl	8003348 <__aeabi_d2iz>
 8009140:	0003      	movs	r3, r0
 8009142:	0018      	movs	r0, r3
 8009144:	f7fa f93c 	bl	80033c0 <__aeabi_i2d>
 8009148:	2200      	movs	r2, #0
 800914a:	4b41      	ldr	r3, [pc, #260]	@ (8009250 <Mic_Upkeep+0x214>)
 800914c:	f7f8 fe32 	bl	8001db4 <__aeabi_ddiv>
 8009150:	0002      	movs	r2, r0
 8009152:	000b      	movs	r3, r1
 8009154:	0010      	movs	r0, r2
 8009156:	0019      	movs	r1, r3
 8009158:	f7fa f9cc 	bl	80034f4 <__aeabi_d2f>
 800915c:	1c02      	adds	r2, r0, #0
 800915e:	4b39      	ldr	r3, [pc, #228]	@ (8009244 <Mic_Upkeep+0x208>)
 8009160:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8009162:	f7ff fdd5 	bl	8008d10 <MIC_Print>
      if (!startSPLcalculation()) {
 8009166:	f003 fb01 	bl	800c76c <startSPLcalculation>
 800916a:	0003      	movs	r3, r0
 800916c:	001a      	movs	r2, r3
 800916e:	2301      	movs	r3, #1
 8009170:	4053      	eors	r3, r2
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8009178:	4a2b      	ldr	r2, [pc, #172]	@ (8009228 <Mic_Upkeep+0x1ec>)
 800917a:	4b2c      	ldr	r3, [pc, #176]	@ (800922c <Mic_Upkeep+0x1f0>)
 800917c:	2198      	movs	r1, #152	@ 0x98
 800917e:	0018      	movs	r0, r3
 8009180:	f005 fc6c 	bl	800ea5c <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8009184:	2000      	movs	r0, #0
 8009186:	f003 fa87 	bl	800c698 <enableMicrophone>
 800918a:	0003      	movs	r3, r0
 800918c:	001a      	movs	r2, r3
 800918e:	2301      	movs	r3, #1
 8009190:	4053      	eors	r3, r2
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8009198:	4a23      	ldr	r2, [pc, #140]	@ (8009228 <Mic_Upkeep+0x1ec>)
 800919a:	4b24      	ldr	r3, [pc, #144]	@ (800922c <Mic_Upkeep+0x1f0>)
 800919c:	219b      	movs	r1, #155	@ 0x9b
 800919e:	0018      	movs	r0, r3
 80091a0:	f005 fc5c 	bl	800ea5c <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 80091a4:	f005 ffe6 	bl	800f174 <HAL_GetTick>
 80091a8:	0003      	movs	r3, r0
 80091aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009254 <Mic_Upkeep+0x218>)
 80091ac:	189a      	adds	r2, r3, r2
 80091ae:	4b2a      	ldr	r3, [pc, #168]	@ (8009258 <Mic_Upkeep+0x21c>)
 80091b0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80091b2:	4b1c      	ldr	r3, [pc, #112]	@ (8009224 <Mic_Upkeep+0x1e8>)
 80091b4:	2203      	movs	r2, #3
 80091b6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80091b8:	f004 fa5e 	bl	800d678 <ResetMICIndicator>
    }
    break;
 80091bc:	e028      	b.n	8009210 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 80091be:	4b26      	ldr	r3, [pc, #152]	@ (8009258 <Mic_Upkeep+0x21c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	0018      	movs	r0, r3
 80091c4:	f005 fb3c 	bl	800e840 <TimestampIsReached>
 80091c8:	1e03      	subs	r3, r0, #0
 80091ca:	d023      	beq.n	8009214 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 80091cc:	2001      	movs	r0, #1
 80091ce:	f003 fa63 	bl	800c698 <enableMicrophone>
 80091d2:	0003      	movs	r3, r0
 80091d4:	001a      	movs	r2, r3
 80091d6:	2301      	movs	r3, #1
 80091d8:	4053      	eors	r3, r2
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 80091e0:	4a11      	ldr	r2, [pc, #68]	@ (8009228 <Mic_Upkeep+0x1ec>)
 80091e2:	4b12      	ldr	r3, [pc, #72]	@ (800922c <Mic_Upkeep+0x1f0>)
 80091e4:	21a6      	movs	r1, #166	@ 0xa6
 80091e6:	0018      	movs	r0, r3
 80091e8:	f005 fc38 	bl	800ea5c <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 80091ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <Mic_Upkeep+0x1e8>)
 80091ee:	2201      	movs	r2, #1
 80091f0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 80091f2:	f004 f9ff 	bl	800d5f4 <SetMICIndicator>
    }
    break;
 80091f6:	e00d      	b.n	8009214 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 80091f8:	4a18      	ldr	r2, [pc, #96]	@ (800925c <Mic_Upkeep+0x220>)
 80091fa:	4b19      	ldr	r3, [pc, #100]	@ (8009260 <Mic_Upkeep+0x224>)
 80091fc:	0019      	movs	r1, r3
 80091fe:	2003      	movs	r0, #3
 8009200:	f005 fb74 	bl	800e8ec <CreateLine>
    MicState = MIC_STATE_INIT;
 8009204:	4b07      	ldr	r3, [pc, #28]	@ (8009224 <Mic_Upkeep+0x1e8>)
 8009206:	2200      	movs	r2, #0
 8009208:	701a      	strb	r2, [r3, #0]
    break;
 800920a:	e004      	b.n	8009216 <Mic_Upkeep+0x1da>
    break;
 800920c:	46c0      	nop			@ (mov r8, r8)
 800920e:	e002      	b.n	8009216 <Mic_Upkeep+0x1da>
    break;
 8009210:	46c0      	nop			@ (mov r8, r8)
 8009212:	e000      	b.n	8009216 <Mic_Upkeep+0x1da>
    break;
 8009214:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8009216:	4b03      	ldr	r3, [pc, #12]	@ (8009224 <Mic_Upkeep+0x1e8>)
 8009218:	781b      	ldrb	r3, [r3, #0]
}
 800921a:	0018      	movs	r0, r3
 800921c:	46bd      	mov	sp, r7
 800921e:	b002      	add	sp, #8
 8009220:	bd80      	pop	{r7, pc}
 8009222:	46c0      	nop			@ (mov r8, r8)
 8009224:	20000c5e 	.word	0x20000c5e
 8009228:	08024b20 	.word	0x08024b20
 800922c:	08025bc8 	.word	0x08025bc8
 8009230:	20000d79 	.word	0x20000d79
 8009234:	20000c4c 	.word	0x20000c4c
 8009238:	08024b3c 	.word	0x08024b3c
 800923c:	08024b44 	.word	0x08024b44
 8009240:	20000bfc 	.word	0x20000bfc
 8009244:	20000c3c 	.word	0x20000c3c
 8009248:	42c80000 	.word	0x42c80000
 800924c:	3fe00000 	.word	0x3fe00000
 8009250:	40590000 	.word	0x40590000
 8009254:	000002f3 	.word	0x000002f3
 8009258:	20000c48 	.word	0x20000c48
 800925c:	08024b4c 	.word	0x08024b4c
 8009260:	08024b6c 	.word	0x08024b6c

08009264 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800926a:	1d3b      	adds	r3, r7, #4
 800926c:	0018      	movs	r0, r3
 800926e:	2314      	movs	r3, #20
 8009270:	001a      	movs	r2, r3
 8009272:	2100      	movs	r1, #0
 8009274:	f017 f9d6 	bl	8020624 <memset>
  RTC_DateTypeDef sDate = {0};
 8009278:	003b      	movs	r3, r7
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800927e:	4b2e      	ldr	r3, [pc, #184]	@ (8009338 <MX_RTC_Init+0xd4>)
 8009280:	4a2e      	ldr	r2, [pc, #184]	@ (800933c <MX_RTC_Init+0xd8>)
 8009282:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009284:	4b2c      	ldr	r3, [pc, #176]	@ (8009338 <MX_RTC_Init+0xd4>)
 8009286:	2200      	movs	r2, #0
 8009288:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800928a:	4b2b      	ldr	r3, [pc, #172]	@ (8009338 <MX_RTC_Init+0xd4>)
 800928c:	227f      	movs	r2, #127	@ 0x7f
 800928e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009290:	4b29      	ldr	r3, [pc, #164]	@ (8009338 <MX_RTC_Init+0xd4>)
 8009292:	22ff      	movs	r2, #255	@ 0xff
 8009294:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009296:	4b28      	ldr	r3, [pc, #160]	@ (8009338 <MX_RTC_Init+0xd4>)
 8009298:	2200      	movs	r2, #0
 800929a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800929c:	4b26      	ldr	r3, [pc, #152]	@ (8009338 <MX_RTC_Init+0xd4>)
 800929e:	2200      	movs	r2, #0
 80092a0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80092a2:	4b25      	ldr	r3, [pc, #148]	@ (8009338 <MX_RTC_Init+0xd4>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80092a8:	4b23      	ldr	r3, [pc, #140]	@ (8009338 <MX_RTC_Init+0xd4>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80092ae:	4b22      	ldr	r3, [pc, #136]	@ (8009338 <MX_RTC_Init+0xd4>)
 80092b0:	0018      	movs	r0, r3
 80092b2:	f00c ffe3 	bl	801627c <HAL_RTC_Init>
 80092b6:	1e03      	subs	r3, r0, #0
 80092b8:	d001      	beq.n	80092be <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80092ba:	f7ff f9c5 	bl	8008648 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80092be:	1d3b      	adds	r3, r7, #4
 80092c0:	220d      	movs	r2, #13
 80092c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80092c4:	1d3b      	adds	r3, r7, #4
 80092c6:	2200      	movs	r2, #0
 80092c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80092ca:	1d3b      	adds	r3, r7, #4
 80092cc:	2200      	movs	r2, #0
 80092ce:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80092d0:	1d3b      	adds	r3, r7, #4
 80092d2:	2200      	movs	r2, #0
 80092d4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80092d6:	1d3b      	adds	r3, r7, #4
 80092d8:	2200      	movs	r2, #0
 80092da:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80092dc:	1d39      	adds	r1, r7, #4
 80092de:	4b16      	ldr	r3, [pc, #88]	@ (8009338 <MX_RTC_Init+0xd4>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	0018      	movs	r0, r3
 80092e4:	f00d f866 	bl	80163b4 <HAL_RTC_SetTime>
 80092e8:	1e03      	subs	r3, r0, #0
 80092ea:	d001      	beq.n	80092f0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80092ec:	f7ff f9ac 	bl	8008648 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80092f0:	003b      	movs	r3, r7
 80092f2:	2206      	movs	r2, #6
 80092f4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 80092f6:	003b      	movs	r3, r7
 80092f8:	2211      	movs	r2, #17
 80092fa:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 80092fc:	003b      	movs	r3, r7
 80092fe:	2217      	movs	r2, #23
 8009300:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8009302:	003b      	movs	r3, r7
 8009304:	2218      	movs	r2, #24
 8009306:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8009308:	0039      	movs	r1, r7
 800930a:	4b0b      	ldr	r3, [pc, #44]	@ (8009338 <MX_RTC_Init+0xd4>)
 800930c:	2200      	movs	r2, #0
 800930e:	0018      	movs	r0, r3
 8009310:	f00d f958 	bl	80165c4 <HAL_RTC_SetDate>
 8009314:	1e03      	subs	r3, r0, #0
 8009316:	d001      	beq.n	800931c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8009318:	f7ff f996 	bl	8008648 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800931c:	4b06      	ldr	r3, [pc, #24]	@ (8009338 <MX_RTC_Init+0xd4>)
 800931e:	2200      	movs	r2, #0
 8009320:	2100      	movs	r1, #0
 8009322:	0018      	movs	r0, r3
 8009324:	f00d fb08 	bl	8016938 <HAL_RTCEx_SetWakeUpTimer_IT>
 8009328:	1e03      	subs	r3, r0, #0
 800932a:	d001      	beq.n	8009330 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800932c:	f7ff f98c 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009330:	46c0      	nop			@ (mov r8, r8)
 8009332:	46bd      	mov	sp, r7
 8009334:	b006      	add	sp, #24
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20000c60 	.word	0x20000c60
 800933c:	40002800 	.word	0x40002800

08009340 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a0a      	ldr	r2, [pc, #40]	@ (8009378 <HAL_RTC_MspInit+0x38>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d10e      	bne.n	8009370 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009352:	4b0a      	ldr	r3, [pc, #40]	@ (800937c <HAL_RTC_MspInit+0x3c>)
 8009354:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009356:	4b09      	ldr	r3, [pc, #36]	@ (800937c <HAL_RTC_MspInit+0x3c>)
 8009358:	2180      	movs	r1, #128	@ 0x80
 800935a:	02c9      	lsls	r1, r1, #11
 800935c:	430a      	orrs	r2, r1
 800935e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8009360:	2200      	movs	r2, #0
 8009362:	2100      	movs	r1, #0
 8009364:	2002      	movs	r0, #2
 8009366:	f006 fba9 	bl	800fabc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800936a:	2002      	movs	r0, #2
 800936c:	f006 fbbb 	bl	800fae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009370:	46c0      	nop			@ (mov r8, r8)
 8009372:	46bd      	mov	sp, r7
 8009374:	b002      	add	sp, #8
 8009376:	bd80      	pop	{r7, pc}
 8009378:	40002800 	.word	0x40002800
 800937c:	40021000 	.word	0x40021000

08009380 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8009384:	4b02      	ldr	r3, [pc, #8]	@ (8009390 <sen5x_Get_sen5x_enable_state+0x10>)
 8009386:	781b      	ldrb	r3, [r3, #0]
}
 8009388:	0018      	movs	r0, r3
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	46c0      	nop			@ (mov r8, r8)
 8009390:	20000c87 	.word	0x20000c87

08009394 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	0002      	movs	r2, r0
 800939c:	1dfb      	adds	r3, r7, #7
 800939e:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 80093a0:	4b03      	ldr	r3, [pc, #12]	@ (80093b0 <sen5x_Set_sen5x_state+0x1c>)
 80093a2:	1dfa      	adds	r2, r7, #7
 80093a4:	7812      	ldrb	r2, [r2, #0]
 80093a6:	701a      	strb	r2, [r3, #0]
}
 80093a8:	46c0      	nop			@ (mov r8, r8)
 80093aa:	46bd      	mov	sp, r7
 80093ac:	b002      	add	sp, #8
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20000c87 	.word	0x20000c87

080093b4 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 80093bc:	f005 feda 	bl	800f174 <HAL_GetTick>
 80093c0:	0002      	movs	r2, r0
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	18d2      	adds	r2, r2, r3
 80093c6:	4b03      	ldr	r3, [pc, #12]	@ (80093d4 <setsen5xReadTimer+0x20>)
 80093c8:	601a      	str	r2, [r3, #0]
}
 80093ca:	46c0      	nop			@ (mov r8, r8)
 80093cc:	46bd      	mov	sp, r7
 80093ce:	b002      	add	sp, #8
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	46c0      	nop			@ (mov r8, r8)
 80093d4:	20000c94 	.word	0x20000c94

080093d8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	0002      	movs	r2, r0
 80093e0:	1dfb      	adds	r3, r7, #7
 80093e2:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 80093e4:	4b03      	ldr	r3, [pc, #12]	@ (80093f4 <setsen5xSamplecounter+0x1c>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	701a      	strb	r2, [r3, #0]
}
 80093ea:	46c0      	nop			@ (mov r8, r8)
 80093ec:	46bd      	mov	sp, r7
 80093ee:	b002      	add	sp, #8
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	46c0      	nop			@ (mov r8, r8)
 80093f4:	20000c90 	.word	0x20000c90

080093f8 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8009400:	f7ff f9a8 	bl	8008754 <IsPMSensorEnabled>
 8009404:	1e03      	subs	r3, r0, #0
 8009406:	d02c      	beq.n	8009462 <sen5x_enable+0x6a>
    sen5x_Enable = !sen5x_Enable;
 8009408:	4b1d      	ldr	r3, [pc, #116]	@ (8009480 <sen5x_enable+0x88>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	1e5a      	subs	r2, r3, #1
 800940e:	4193      	sbcs	r3, r2
 8009410:	b2db      	uxtb	r3, r3
 8009412:	2201      	movs	r2, #1
 8009414:	4053      	eors	r3, r2
 8009416:	b2db      	uxtb	r3, r3
 8009418:	1c1a      	adds	r2, r3, #0
 800941a:	2301      	movs	r3, #1
 800941c:	4013      	ands	r3, r2
 800941e:	b2da      	uxtb	r2, r3
 8009420:	4b17      	ldr	r3, [pc, #92]	@ (8009480 <sen5x_enable+0x88>)
 8009422:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8009424:	4b16      	ldr	r3, [pc, #88]	@ (8009480 <sen5x_enable+0x88>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <sen5x_enable+0x3c>
      setsen5xReadTimer(0);
 800942c:	2000      	movs	r0, #0
 800942e:	f7ff ffc1 	bl	80093b4 <setsen5xReadTimer>
 8009432:	e009      	b.n	8009448 <sen5x_enable+0x50>
    }
    else {
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 8009434:	f005 fe9e 	bl	800f174 <HAL_GetTick>
 8009438:	0002      	movs	r2, r0
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2164      	movs	r1, #100	@ 0x64
 800943e:	434b      	muls	r3, r1
 8009440:	18d3      	adds	r3, r2, r3
 8009442:	0018      	movs	r0, r3
 8009444:	f7ff ffb6 	bl	80093b4 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 8009448:	4b0d      	ldr	r3, [pc, #52]	@ (8009480 <sen5x_enable+0x88>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <sen5x_enable+0x5c>
 8009450:	4b0c      	ldr	r3, [pc, #48]	@ (8009484 <sen5x_enable+0x8c>)
 8009452:	e000      	b.n	8009456 <sen5x_enable+0x5e>
 8009454:	4b0c      	ldr	r3, [pc, #48]	@ (8009488 <sen5x_enable+0x90>)
 8009456:	4a0d      	ldr	r2, [pc, #52]	@ (800948c <sen5x_enable+0x94>)
 8009458:	490d      	ldr	r1, [pc, #52]	@ (8009490 <sen5x_enable+0x98>)
 800945a:	2002      	movs	r0, #2
 800945c:	f005 fa46 	bl	800e8ec <CreateLine>
 8009460:	e005      	b.n	800946e <sen5x_enable+0x76>
  }
  else {
    Info("sen5x measurement is disabled");
 8009462:	4a0c      	ldr	r2, [pc, #48]	@ (8009494 <sen5x_enable+0x9c>)
 8009464:	4b0a      	ldr	r3, [pc, #40]	@ (8009490 <sen5x_enable+0x98>)
 8009466:	0019      	movs	r1, r3
 8009468:	2002      	movs	r0, #2
 800946a:	f005 fa3f 	bl	800e8ec <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800946e:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <sen5x_enable+0xa0>)
 8009470:	2201      	movs	r2, #1
 8009472:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8009474:	4b02      	ldr	r3, [pc, #8]	@ (8009480 <sen5x_enable+0x88>)
 8009476:	781b      	ldrb	r3, [r3, #0]
}
 8009478:	0018      	movs	r0, r3
 800947a:	46bd      	mov	sp, r7
 800947c:	b002      	add	sp, #8
 800947e:	bd80      	pop	{r7, pc}
 8009480:	20000c87 	.word	0x20000c87
 8009484:	08024b70 	.word	0x08024b70
 8009488:	08024b78 	.word	0x08024b78
 800948c:	08024b84 	.word	0x08024b84
 8009490:	08024ba0 	.word	0x08024ba0
 8009494:	08024ba4 	.word	0x08024ba4
 8009498:	2000008d 	.word	0x2000008d

0800949c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 80094a0:	2380      	movs	r3, #128	@ 0x80
 80094a2:	015b      	lsls	r3, r3, #5
 80094a4:	480f      	ldr	r0, [pc, #60]	@ (80094e4 <sen5x_Power_On+0x48>)
 80094a6:	2201      	movs	r2, #1
 80094a8:	0019      	movs	r1, r3
 80094aa:	f007 f8f4 	bl	8010696 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 80094ae:	4a0e      	ldr	r2, [pc, #56]	@ (80094e8 <sen5x_Power_On+0x4c>)
 80094b0:	4b0e      	ldr	r3, [pc, #56]	@ (80094ec <sen5x_Power_On+0x50>)
 80094b2:	0019      	movs	r1, r3
 80094b4:	2003      	movs	r0, #3
 80094b6:	f005 fa19 	bl	800e8ec <CreateLine>
  HAL_Delay(150);
 80094ba:	2096      	movs	r0, #150	@ 0x96
 80094bc:	f005 fe64 	bl	800f188 <HAL_Delay>
  if (sen5x_device_reset()) {
 80094c0:	f001 f990 	bl	800a7e4 <sen5x_device_reset>
 80094c4:	1e03      	subs	r3, r0, #0
 80094c6:	d006      	beq.n	80094d6 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 80094c8:	4a09      	ldr	r2, [pc, #36]	@ (80094f0 <sen5x_Power_On+0x54>)
 80094ca:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <sen5x_Power_On+0x58>)
 80094cc:	0019      	movs	r1, r3
 80094ce:	2001      	movs	r0, #1
 80094d0:	f005 fa0c 	bl	800e8ec <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 80094d4:	e002      	b.n	80094dc <sen5x_Power_On+0x40>
    sen5x_On = true;
 80094d6:	4b08      	ldr	r3, [pc, #32]	@ (80094f8 <sen5x_Power_On+0x5c>)
 80094d8:	2201      	movs	r2, #1
 80094da:	701a      	strb	r2, [r3, #0]
}
 80094dc:	46c0      	nop			@ (mov r8, r8)
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	46c0      	nop			@ (mov r8, r8)
 80094e4:	50000800 	.word	0x50000800
 80094e8:	08024bc4 	.word	0x08024bc4
 80094ec:	08024be0 	.word	0x08024be0
 80094f0:	08024be4 	.word	0x08024be4
 80094f4:	08024c0c 	.word	0x08024c0c
 80094f8:	20000c85 	.word	0x20000c85

080094fc <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 8009500:	4b0e      	ldr	r3, [pc, #56]	@ (800953c <sen5x_Power_Off+0x40>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d006      	beq.n	8009516 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 8009508:	4a0d      	ldr	r2, [pc, #52]	@ (8009540 <sen5x_Power_Off+0x44>)
 800950a:	4b0e      	ldr	r3, [pc, #56]	@ (8009544 <sen5x_Power_Off+0x48>)
 800950c:	0019      	movs	r1, r3
 800950e:	2003      	movs	r0, #3
 8009510:	f005 f9ec 	bl	800e8ec <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 8009514:	e00f      	b.n	8009536 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 8009516:	4a0c      	ldr	r2, [pc, #48]	@ (8009548 <sen5x_Power_Off+0x4c>)
 8009518:	4b0a      	ldr	r3, [pc, #40]	@ (8009544 <sen5x_Power_Off+0x48>)
 800951a:	0019      	movs	r1, r3
 800951c:	2003      	movs	r0, #3
 800951e:	f005 f9e5 	bl	800e8ec <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8009522:	2380      	movs	r3, #128	@ 0x80
 8009524:	015b      	lsls	r3, r3, #5
 8009526:	4809      	ldr	r0, [pc, #36]	@ (800954c <sen5x_Power_Off+0x50>)
 8009528:	2200      	movs	r2, #0
 800952a:	0019      	movs	r1, r3
 800952c:	f007 f8b3 	bl	8010696 <HAL_GPIO_WritePin>
      sen5x_On = false;
 8009530:	4b07      	ldr	r3, [pc, #28]	@ (8009550 <sen5x_Power_Off+0x54>)
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]
}
 8009536:	46c0      	nop			@ (mov r8, r8)
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	20000c86 	.word	0x20000c86
 8009540:	08024c10 	.word	0x08024c10
 8009544:	08024be0 	.word	0x08024be0
 8009548:	08024c40 	.word	0x08024c40
 800954c:	50000800 	.word	0x50000800
 8009550:	20000c85 	.word	0x20000c85

08009554 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8009558:	4b02      	ldr	r3, [pc, #8]	@ (8009564 <reset_fanCleaningDone+0x10>)
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
}
 800955e:	46c0      	nop			@ (mov r8, r8)
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20000c84 	.word	0x20000c84

08009568 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8009568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800956a:	b093      	sub	sp, #76	@ 0x4c
 800956c:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800956e:	2436      	movs	r4, #54	@ 0x36
 8009570:	193b      	adds	r3, r7, r4
 8009572:	2200      	movs	r2, #0
 8009574:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8009576:	2335      	movs	r3, #53	@ 0x35
 8009578:	18fb      	adds	r3, r7, r3
 800957a:	2220      	movs	r2, #32
 800957c:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800957e:	2334      	movs	r3, #52	@ 0x34
 8009580:	18fb      	adds	r3, r7, r3
 8009582:	2220      	movs	r2, #32
 8009584:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8009586:	f7ff ff89 	bl	800949c <sen5x_Power_On>
  error = sen5x_device_reset();
 800958a:	0025      	movs	r5, r4
 800958c:	193c      	adds	r4, r7, r4
 800958e:	f001 f929 	bl	800a7e4 <sen5x_device_reset>
 8009592:	0003      	movs	r3, r0
 8009594:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009596:	002c      	movs	r4, r5
 8009598:	193b      	adds	r3, r7, r4
 800959a:	2200      	movs	r2, #0
 800959c:	5e9b      	ldrsh	r3, [r3, r2]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00b      	beq.n	80095ba <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 80095a2:	193b      	adds	r3, r7, r4
 80095a4:	2200      	movs	r2, #0
 80095a6:	5e9b      	ldrsh	r3, [r3, r2]
 80095a8:	4a75      	ldr	r2, [pc, #468]	@ (8009780 <probe_sen5x+0x218>)
 80095aa:	4976      	ldr	r1, [pc, #472]	@ (8009784 <probe_sen5x+0x21c>)
 80095ac:	2001      	movs	r0, #1
 80095ae:	f005 f99d 	bl	800e8ec <CreateLine>
      return error;
 80095b2:	193b      	adds	r3, r7, r4
 80095b4:	2200      	movs	r2, #0
 80095b6:	5e9b      	ldrsh	r3, [r3, r2]
 80095b8:	e0de      	b.n	8009778 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 80095ba:	2536      	movs	r5, #54	@ 0x36
 80095bc:	197c      	adds	r4, r7, r5
 80095be:	2335      	movs	r3, #53	@ 0x35
 80095c0:	18fb      	adds	r3, r7, r3
 80095c2:	781a      	ldrb	r2, [r3, #0]
 80095c4:	230c      	movs	r3, #12
 80095c6:	18fb      	adds	r3, r7, r3
 80095c8:	0011      	movs	r1, r2
 80095ca:	0018      	movs	r0, r3
 80095cc:	f000 fff6 	bl	800a5bc <sen5x_get_serial_number>
 80095d0:	0003      	movs	r3, r0
 80095d2:	8023      	strh	r3, [r4, #0]
  if (error) {
 80095d4:	197b      	adds	r3, r7, r5
 80095d6:	2200      	movs	r2, #0
 80095d8:	5e9b      	ldrsh	r3, [r3, r2]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00b      	beq.n	80095f6 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 80095de:	197b      	adds	r3, r7, r5
 80095e0:	2200      	movs	r2, #0
 80095e2:	5e9a      	ldrsh	r2, [r3, r2]
 80095e4:	4b68      	ldr	r3, [pc, #416]	@ (8009788 <probe_sen5x+0x220>)
 80095e6:	0011      	movs	r1, r2
 80095e8:	0018      	movs	r0, r3
 80095ea:	f016 fe67 	bl	80202bc <iprintf>
      return error;
 80095ee:	197b      	adds	r3, r7, r5
 80095f0:	2200      	movs	r2, #0
 80095f2:	5e9b      	ldrsh	r3, [r3, r2]
 80095f4:	e0c0      	b.n	8009778 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 80095f6:	230c      	movs	r3, #12
 80095f8:	18fa      	adds	r2, r7, r3
 80095fa:	4b64      	ldr	r3, [pc, #400]	@ (800978c <probe_sen5x+0x224>)
 80095fc:	0011      	movs	r1, r2
 80095fe:	0018      	movs	r0, r3
 8009600:	f016 fe5c 	bl	80202bc <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8009604:	2536      	movs	r5, #54	@ 0x36
 8009606:	197c      	adds	r4, r7, r5
 8009608:	2334      	movs	r3, #52	@ 0x34
 800960a:	18fb      	adds	r3, r7, r3
 800960c:	781a      	ldrb	r2, [r3, #0]
 800960e:	4b60      	ldr	r3, [pc, #384]	@ (8009790 <probe_sen5x+0x228>)
 8009610:	0011      	movs	r1, r2
 8009612:	0018      	movs	r0, r3
 8009614:	f000 ff7c 	bl	800a510 <sen5x_get_product_name>
 8009618:	0003      	movs	r3, r0
 800961a:	8023      	strh	r3, [r4, #0]
  if (error) {
 800961c:	197b      	adds	r3, r7, r5
 800961e:	2200      	movs	r2, #0
 8009620:	5e9b      	ldrsh	r3, [r3, r2]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00b      	beq.n	800963e <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8009626:	197b      	adds	r3, r7, r5
 8009628:	2200      	movs	r2, #0
 800962a:	5e9a      	ldrsh	r2, [r3, r2]
 800962c:	4b59      	ldr	r3, [pc, #356]	@ (8009794 <probe_sen5x+0x22c>)
 800962e:	0011      	movs	r1, r2
 8009630:	0018      	movs	r0, r3
 8009632:	f016 fe43 	bl	80202bc <iprintf>
      return error;
 8009636:	197b      	adds	r3, r7, r5
 8009638:	2200      	movs	r2, #0
 800963a:	5e9b      	ldrsh	r3, [r3, r2]
 800963c:	e09c      	b.n	8009778 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800963e:	4a54      	ldr	r2, [pc, #336]	@ (8009790 <probe_sen5x+0x228>)
 8009640:	4b55      	ldr	r3, [pc, #340]	@ (8009798 <probe_sen5x+0x230>)
 8009642:	0011      	movs	r1, r2
 8009644:	0018      	movs	r0, r3
 8009646:	f016 fe39 	bl	80202bc <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800964a:	2636      	movs	r6, #54	@ 0x36
 800964c:	19bc      	adds	r4, r7, r6
 800964e:	2308      	movs	r3, #8
 8009650:	18fd      	adds	r5, r7, r3
 8009652:	2309      	movs	r3, #9
 8009654:	18fa      	adds	r2, r7, r3
 8009656:	230a      	movs	r3, #10
 8009658:	18f9      	adds	r1, r7, r3
 800965a:	230b      	movs	r3, #11
 800965c:	18f8      	adds	r0, r7, r3
 800965e:	1d7b      	adds	r3, r7, #5
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	1dbb      	adds	r3, r7, #6
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	1dfb      	adds	r3, r7, #7
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	002b      	movs	r3, r5
 800966c:	f000 fffc 	bl	800a668 <sen5x_get_version>
 8009670:	0003      	movs	r3, r0
 8009672:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8009674:	19bb      	adds	r3, r7, r6
 8009676:	2200      	movs	r2, #0
 8009678:	5e9b      	ldrsh	r3, [r3, r2]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00b      	beq.n	8009696 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800967e:	19bb      	adds	r3, r7, r6
 8009680:	2200      	movs	r2, #0
 8009682:	5e9a      	ldrsh	r2, [r3, r2]
 8009684:	4b45      	ldr	r3, [pc, #276]	@ (800979c <probe_sen5x+0x234>)
 8009686:	0011      	movs	r1, r2
 8009688:	0018      	movs	r0, r3
 800968a:	f016 fe17 	bl	80202bc <iprintf>
      return error;
 800968e:	19bb      	adds	r3, r7, r6
 8009690:	2200      	movs	r2, #0
 8009692:	5e9b      	ldrsh	r3, [r3, r2]
 8009694:	e070      	b.n	8009778 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8009696:	230b      	movs	r3, #11
 8009698:	18fb      	adds	r3, r7, r3
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	0019      	movs	r1, r3
 800969e:	230a      	movs	r3, #10
 80096a0:	18fb      	adds	r3, r7, r3
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	001a      	movs	r2, r3
 80096a6:	2308      	movs	r3, #8
 80096a8:	18fb      	adds	r3, r7, r3
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	001c      	movs	r4, r3
 80096ae:	1dfb      	adds	r3, r7, #7
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	483b      	ldr	r0, [pc, #236]	@ (80097a0 <probe_sen5x+0x238>)
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	0023      	movs	r3, r4
 80096b8:	f016 fe00 	bl	80202bc <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 80096bc:	2300      	movs	r3, #0
 80096be:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 80096c0:	262e      	movs	r6, #46	@ 0x2e
 80096c2:	19bb      	adds	r3, r7, r6
 80096c4:	2200      	movs	r2, #0
 80096c6:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 80096c8:	232c      	movs	r3, #44	@ 0x2c
 80096ca:	18fb      	adds	r3, r7, r3
 80096cc:	2200      	movs	r2, #0
 80096ce:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 80096d0:	4934      	ldr	r1, [pc, #208]	@ (80097a4 <probe_sen5x+0x23c>)
 80096d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096d4:	f7f7 fc64 	bl	8000fa0 <__aeabi_fmul>
 80096d8:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 80096da:	1c18      	adds	r0, r3, #0
 80096dc:	f7f7 ff58 	bl	8001590 <__aeabi_f2iz>
 80096e0:	0003      	movs	r3, r0
 80096e2:	b218      	sxth	r0, r3
 80096e4:	2536      	movs	r5, #54	@ 0x36
 80096e6:	197c      	adds	r4, r7, r5
 80096e8:	232c      	movs	r3, #44	@ 0x2c
 80096ea:	18fb      	adds	r3, r7, r3
 80096ec:	881a      	ldrh	r2, [r3, #0]
 80096ee:	19bb      	adds	r3, r7, r6
 80096f0:	2100      	movs	r1, #0
 80096f2:	5e5b      	ldrsh	r3, [r3, r1]
 80096f4:	0019      	movs	r1, r3
 80096f6:	f000 fea7 	bl	800a448 <sen5x_set_temperature_offset_parameters>
 80096fa:	0003      	movs	r3, r0
 80096fc:	8023      	strh	r3, [r4, #0]
  if (error) {
 80096fe:	197b      	adds	r3, r7, r5
 8009700:	2200      	movs	r2, #0
 8009702:	5e9b      	ldrsh	r3, [r3, r2]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00b      	beq.n	8009720 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8009708:	197b      	adds	r3, r7, r5
 800970a:	2200      	movs	r2, #0
 800970c:	5e9b      	ldrsh	r3, [r3, r2]
 800970e:	4a26      	ldr	r2, [pc, #152]	@ (80097a8 <probe_sen5x+0x240>)
 8009710:	491c      	ldr	r1, [pc, #112]	@ (8009784 <probe_sen5x+0x21c>)
 8009712:	2001      	movs	r0, #1
 8009714:	f005 f8ea 	bl	800e8ec <CreateLine>
      return error;
 8009718:	197b      	adds	r3, r7, r5
 800971a:	2200      	movs	r2, #0
 800971c:	5e9b      	ldrsh	r3, [r3, r2]
 800971e:	e02b      	b.n	8009778 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8009720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009722:	f7f9 fe9f 	bl	8003464 <__aeabi_f2d>
 8009726:	0002      	movs	r2, r0
 8009728:	000b      	movs	r3, r1
 800972a:	4820      	ldr	r0, [pc, #128]	@ (80097ac <probe_sen5x+0x244>)
 800972c:	4920      	ldr	r1, [pc, #128]	@ (80097b0 <probe_sen5x+0x248>)
 800972e:	9200      	str	r2, [sp, #0]
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	0002      	movs	r2, r0
 8009734:	2002      	movs	r0, #2
 8009736:	f005 f8d9 	bl	800e8ec <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800973a:	f7fc ff85 	bl	8006648 <Check_USB_PowerOn>
 800973e:	0003      	movs	r3, r0
 8009740:	001a      	movs	r2, r3
 8009742:	2301      	movs	r3, #1
 8009744:	4053      	eors	r3, r2
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800974c:	f7ff fed6 	bl	80094fc <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 8009750:	f005 fd10 	bl	800f174 <HAL_GetTick>
 8009754:	0003      	movs	r3, r0
 8009756:	22fa      	movs	r2, #250	@ 0xfa
 8009758:	00d2      	lsls	r2, r2, #3
 800975a:	189a      	adds	r2, r3, r2
 800975c:	4b15      	ldr	r3, [pc, #84]	@ (80097b4 <probe_sen5x+0x24c>)
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	e006      	b.n	8009770 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 8009762:	f005 fd07 	bl	800f174 <HAL_GetTick>
 8009766:	0003      	movs	r3, r0
 8009768:	4a13      	ldr	r2, [pc, #76]	@ (80097b8 <probe_sen5x+0x250>)
 800976a:	189a      	adds	r2, r3, r2
 800976c:	4b11      	ldr	r3, [pc, #68]	@ (80097b4 <probe_sen5x+0x24c>)
 800976e:	601a      	str	r2, [r3, #0]
  }
  return error;
 8009770:	2336      	movs	r3, #54	@ 0x36
 8009772:	18fb      	adds	r3, r7, r3
 8009774:	2200      	movs	r2, #0
 8009776:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009778:	0018      	movs	r0, r3
 800977a:	46bd      	mov	sp, r7
 800977c:	b00f      	add	sp, #60	@ 0x3c
 800977e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009780:	08024c5c 	.word	0x08024c5c
 8009784:	08024c0c 	.word	0x08024c0c
 8009788:	08024c88 	.word	0x08024c88
 800978c:	08024cb8 	.word	0x08024cb8
 8009790:	20000c88 	.word	0x20000c88
 8009794:	08024ccc 	.word	0x08024ccc
 8009798:	08024cfc 	.word	0x08024cfc
 800979c:	08024d10 	.word	0x08024d10
 80097a0:	08024d3c 	.word	0x08024d3c
 80097a4:	43480000 	.word	0x43480000
 80097a8:	08024d60 	.word	0x08024d60
 80097ac:	08024da0 	.word	0x08024da0
 80097b0:	08024ba0 	.word	0x08024ba0
 80097b4:	20000c94 	.word	0x20000c94
 80097b8:	00006d60 	.word	0x00006d60

080097bc <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 80097bc:	b590      	push	{r4, r7, lr}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 80097c2:	1dbb      	adds	r3, r7, #6
 80097c4:	2200      	movs	r2, #0
 80097c6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 80097c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009838 <sen5x_lightup_measurement+0x7c>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00b      	beq.n	80097e8 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 80097d0:	4a1a      	ldr	r2, [pc, #104]	@ (800983c <sen5x_lightup_measurement+0x80>)
 80097d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009840 <sen5x_lightup_measurement+0x84>)
 80097d4:	0019      	movs	r1, r3
 80097d6:	2002      	movs	r0, #2
 80097d8:	f005 f888 	bl	800e8ec <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80097dc:	1dbc      	adds	r4, r7, #6
 80097de:	f000 fcbf 	bl	800a160 <sen5x_start_measurement_without_pm>
 80097e2:	0003      	movs	r3, r0
 80097e4:	8023      	strh	r3, [r4, #0]
 80097e6:	e00a      	b.n	80097fe <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 80097e8:	4a16      	ldr	r2, [pc, #88]	@ (8009844 <sen5x_lightup_measurement+0x88>)
 80097ea:	4b15      	ldr	r3, [pc, #84]	@ (8009840 <sen5x_lightup_measurement+0x84>)
 80097ec:	0019      	movs	r1, r3
 80097ee:	2002      	movs	r0, #2
 80097f0:	f005 f87c 	bl	800e8ec <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 80097f4:	1dbc      	adds	r4, r7, #6
 80097f6:	f000 fc85 	bl	800a104 <sen5x_start_measurement>
 80097fa:	0003      	movs	r3, r0
 80097fc:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 80097fe:	1dbb      	adds	r3, r7, #6
 8009800:	2200      	movs	r2, #0
 8009802:	5e9b      	ldrsh	r3, [r3, r2]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d008      	beq.n	800981a <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 8009808:	1dbb      	adds	r3, r7, #6
 800980a:	2200      	movs	r2, #0
 800980c:	5e9b      	ldrsh	r3, [r3, r2]
 800980e:	4a0e      	ldr	r2, [pc, #56]	@ (8009848 <sen5x_lightup_measurement+0x8c>)
 8009810:	490e      	ldr	r1, [pc, #56]	@ (800984c <sen5x_lightup_measurement+0x90>)
 8009812:	2001      	movs	r0, #1
 8009814:	f005 f86a 	bl	800e8ec <CreateLine>
 8009818:	e007      	b.n	800982a <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800981a:	f7fc ff45 	bl	80066a8 <showTime>
    Info("sen5x_start_measurement executed");
 800981e:	4a0c      	ldr	r2, [pc, #48]	@ (8009850 <sen5x_lightup_measurement+0x94>)
 8009820:	4b07      	ldr	r3, [pc, #28]	@ (8009840 <sen5x_lightup_measurement+0x84>)
 8009822:	0019      	movs	r1, r3
 8009824:	2002      	movs	r0, #2
 8009826:	f005 f861 	bl	800e8ec <CreateLine>
  }
  return error;
 800982a:	1dbb      	adds	r3, r7, #6
 800982c:	2200      	movs	r2, #0
 800982e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009830:	0018      	movs	r0, r3
 8009832:	46bd      	mov	sp, r7
 8009834:	b003      	add	sp, #12
 8009836:	bd90      	pop	{r4, r7, pc}
 8009838:	20000c86 	.word	0x20000c86
 800983c:	08024dd8 	.word	0x08024dd8
 8009840:	08024ba0 	.word	0x08024ba0
 8009844:	08024e04 	.word	0x08024e04
 8009848:	08024e24 	.word	0x08024e24
 800984c:	08024c0c 	.word	0x08024c0c
 8009850:	08024e54 	.word	0x08024e54

08009854 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8009854:	b590      	push	{r4, r7, lr}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800985a:	1dbb      	adds	r3, r7, #6
 800985c:	2200      	movs	r2, #0
 800985e:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 8009860:	4b21      	ldr	r3, [pc, #132]	@ (80098e8 <sen5x_extinguish_measurement+0x94>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d01e      	beq.n	80098a6 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 8009868:	4a20      	ldr	r2, [pc, #128]	@ (80098ec <sen5x_extinguish_measurement+0x98>)
 800986a:	4b21      	ldr	r3, [pc, #132]	@ (80098f0 <sen5x_extinguish_measurement+0x9c>)
 800986c:	0019      	movs	r1, r3
 800986e:	2002      	movs	r0, #2
 8009870:	f005 f83c 	bl	800e8ec <CreateLine>
    Info("PM measurement is disabled");
 8009874:	4a1f      	ldr	r2, [pc, #124]	@ (80098f4 <sen5x_extinguish_measurement+0xa0>)
 8009876:	4b1e      	ldr	r3, [pc, #120]	@ (80098f0 <sen5x_extinguish_measurement+0x9c>)
 8009878:	0019      	movs	r1, r3
 800987a:	2002      	movs	r0, #2
 800987c:	f005 f836 	bl	800e8ec <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009880:	1dbc      	adds	r4, r7, #6
 8009882:	f000 fc6d 	bl	800a160 <sen5x_start_measurement_without_pm>
 8009886:	0003      	movs	r3, r0
 8009888:	8023      	strh	r3, [r4, #0]
    if (error) {
 800988a:	1dbb      	adds	r3, r7, #6
 800988c:	2200      	movs	r2, #0
 800988e:	5e9b      	ldrsh	r3, [r3, r2]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d022      	beq.n	80098da <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 8009894:	1dbb      	adds	r3, r7, #6
 8009896:	2200      	movs	r2, #0
 8009898:	5e9b      	ldrsh	r3, [r3, r2]
 800989a:	4a17      	ldr	r2, [pc, #92]	@ (80098f8 <sen5x_extinguish_measurement+0xa4>)
 800989c:	4917      	ldr	r1, [pc, #92]	@ (80098fc <sen5x_extinguish_measurement+0xa8>)
 800989e:	2001      	movs	r0, #1
 80098a0:	f005 f824 	bl	800e8ec <CreateLine>
 80098a4:	e019      	b.n	80098da <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 80098a6:	1dbc      	adds	r4, r7, #6
 80098a8:	f000 fc88 	bl	800a1bc <sen5x_stop_measurement>
 80098ac:	0003      	movs	r3, r0
 80098ae:	8023      	strh	r3, [r4, #0]
    showTime();
 80098b0:	f7fc fefa 	bl	80066a8 <showTime>
    Info("sen5x_stop_measurement executed");
 80098b4:	4a12      	ldr	r2, [pc, #72]	@ (8009900 <sen5x_extinguish_measurement+0xac>)
 80098b6:	4b0e      	ldr	r3, [pc, #56]	@ (80098f0 <sen5x_extinguish_measurement+0x9c>)
 80098b8:	0019      	movs	r1, r3
 80098ba:	2002      	movs	r0, #2
 80098bc:	f005 f816 	bl	800e8ec <CreateLine>
    if (error) {
 80098c0:	1dbb      	adds	r3, r7, #6
 80098c2:	2200      	movs	r2, #0
 80098c4:	5e9b      	ldrsh	r3, [r3, r2]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d007      	beq.n	80098da <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 80098ca:	1dbb      	adds	r3, r7, #6
 80098cc:	2200      	movs	r2, #0
 80098ce:	5e9b      	ldrsh	r3, [r3, r2]
 80098d0:	4a0c      	ldr	r2, [pc, #48]	@ (8009904 <sen5x_extinguish_measurement+0xb0>)
 80098d2:	490a      	ldr	r1, [pc, #40]	@ (80098fc <sen5x_extinguish_measurement+0xa8>)
 80098d4:	2001      	movs	r0, #1
 80098d6:	f005 f809 	bl	800e8ec <CreateLine>
    }
  }
  return error;
 80098da:	1dbb      	adds	r3, r7, #6
 80098dc:	2200      	movs	r2, #0
 80098de:	5e9b      	ldrsh	r3, [r3, r2]
}
 80098e0:	0018      	movs	r0, r3
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b003      	add	sp, #12
 80098e6:	bd90      	pop	{r4, r7, pc}
 80098e8:	20000c86 	.word	0x20000c86
 80098ec:	08024e78 	.word	0x08024e78
 80098f0:	08024ba0 	.word	0x08024ba0
 80098f4:	08024eb0 	.word	0x08024eb0
 80098f8:	08024ecc 	.word	0x08024ecc
 80098fc:	08024c0c 	.word	0x08024c0c
 8009900:	08024f0c 	.word	0x08024f0c
 8009904:	08024f2c 	.word	0x08024f2c

08009908 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8009908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800990a:	b08d      	sub	sp, #52	@ 0x34
 800990c:	af04      	add	r7, sp, #16
 800990e:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8009910:	261e      	movs	r6, #30
 8009912:	19bb      	adds	r3, r7, r6
 8009914:	2200      	movs	r2, #0
 8009916:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8009918:	19bc      	adds	r4, r7, r6
 800991a:	2316      	movs	r3, #22
 800991c:	18fd      	adds	r5, r7, r3
 800991e:	2318      	movs	r3, #24
 8009920:	18fa      	adds	r2, r7, r3
 8009922:	231a      	movs	r3, #26
 8009924:	18f9      	adds	r1, r7, r3
 8009926:	231c      	movs	r3, #28
 8009928:	18f8      	adds	r0, r7, r3
 800992a:	230e      	movs	r3, #14
 800992c:	18fb      	adds	r3, r7, r3
 800992e:	9303      	str	r3, [sp, #12]
 8009930:	2310      	movs	r3, #16
 8009932:	18fb      	adds	r3, r7, r3
 8009934:	9302      	str	r3, [sp, #8]
 8009936:	2312      	movs	r3, #18
 8009938:	18fb      	adds	r3, r7, r3
 800993a:	9301      	str	r3, [sp, #4]
 800993c:	2314      	movs	r3, #20
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	002b      	movs	r3, r5
 8009944:	f000 fcbc 	bl	800a2c0 <sen5x_read_measured_values>
 8009948:	0003      	movs	r3, r0
 800994a:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800994c:	19bb      	adds	r3, r7, r6
 800994e:	2200      	movs	r2, #0
 8009950:	5e9b      	ldrsh	r3, [r3, r2]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <sen5x_read_measurement+0x56>
    return error;
 8009956:	19bb      	adds	r3, r7, r6
 8009958:	2200      	movs	r2, #0
 800995a:	5e9b      	ldrsh	r3, [r3, r2]
 800995c:	e02c      	b.n	80099b8 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800995e:	231c      	movs	r3, #28
 8009960:	18fb      	adds	r3, r7, r3
 8009962:	881a      	ldrh	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009968:	231a      	movs	r3, #26
 800996a:	18fb      	adds	r3, r7, r3
 800996c:	881a      	ldrh	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8009972:	2318      	movs	r3, #24
 8009974:	18fb      	adds	r3, r7, r3
 8009976:	881a      	ldrh	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800997c:	2316      	movs	r3, #22
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	881a      	ldrh	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8009986:	2314      	movs	r3, #20
 8009988:	18fb      	adds	r3, r7, r3
 800998a:	2200      	movs	r2, #0
 800998c:	5e9a      	ldrsh	r2, [r3, r2]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8009992:	2312      	movs	r3, #18
 8009994:	18fb      	adds	r3, r7, r3
 8009996:	2200      	movs	r2, #0
 8009998:	5e9a      	ldrsh	r2, [r3, r2]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800999e:	2310      	movs	r3, #16
 80099a0:	18fb      	adds	r3, r7, r3
 80099a2:	2200      	movs	r2, #0
 80099a4:	5e9a      	ldrsh	r2, [r3, r2]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 80099aa:	230e      	movs	r3, #14
 80099ac:	18fb      	adds	r3, r7, r3
 80099ae:	2200      	movs	r2, #0
 80099b0:	5e9a      	ldrsh	r2, [r3, r2]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	81da      	strh	r2, [r3, #14]
  return 0;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	0018      	movs	r0, r3
 80099ba:	46bd      	mov	sp, r7
 80099bc:	b009      	add	sp, #36	@ 0x24
 80099be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099c0 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80099c4:	4b63      	ldr	r3, [pc, #396]	@ (8009b54 <sen5x_printvalues+0x194>)
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	4a63      	ldr	r2, [pc, #396]	@ (8009b58 <sen5x_printvalues+0x198>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d013      	beq.n	80099f6 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80099ce:	4b61      	ldr	r3, [pc, #388]	@ (8009b54 <sen5x_printvalues+0x194>)
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	0018      	movs	r0, r3
 80099d4:	f7f7 fdfc 	bl	80015d0 <__aeabi_i2f>
 80099d8:	1c03      	adds	r3, r0, #0
 80099da:	4960      	ldr	r1, [pc, #384]	@ (8009b5c <sen5x_printvalues+0x19c>)
 80099dc:	1c18      	adds	r0, r3, #0
 80099de:	f7f7 f8f9 	bl	8000bd4 <__aeabi_fdiv>
 80099e2:	1c03      	adds	r3, r0, #0
 80099e4:	1c18      	adds	r0, r3, #0
 80099e6:	f7f9 fd3d 	bl	8003464 <__aeabi_f2d>
 80099ea:	0002      	movs	r2, r0
 80099ec:	000b      	movs	r3, r1
 80099ee:	495c      	ldr	r1, [pc, #368]	@ (8009b60 <sen5x_printvalues+0x1a0>)
 80099f0:	0008      	movs	r0, r1
 80099f2:	f016 fc63 	bl	80202bc <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 80099f6:	4b57      	ldr	r3, [pc, #348]	@ (8009b54 <sen5x_printvalues+0x194>)
 80099f8:	885b      	ldrh	r3, [r3, #2]
 80099fa:	4a57      	ldr	r2, [pc, #348]	@ (8009b58 <sen5x_printvalues+0x198>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d013      	beq.n	8009a28 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009a00:	4b54      	ldr	r3, [pc, #336]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009a02:	885b      	ldrh	r3, [r3, #2]
 8009a04:	0018      	movs	r0, r3
 8009a06:	f7f7 fde3 	bl	80015d0 <__aeabi_i2f>
 8009a0a:	1c03      	adds	r3, r0, #0
 8009a0c:	4953      	ldr	r1, [pc, #332]	@ (8009b5c <sen5x_printvalues+0x19c>)
 8009a0e:	1c18      	adds	r0, r3, #0
 8009a10:	f7f7 f8e0 	bl	8000bd4 <__aeabi_fdiv>
 8009a14:	1c03      	adds	r3, r0, #0
 8009a16:	1c18      	adds	r0, r3, #0
 8009a18:	f7f9 fd24 	bl	8003464 <__aeabi_f2d>
 8009a1c:	0002      	movs	r2, r0
 8009a1e:	000b      	movs	r3, r1
 8009a20:	4950      	ldr	r1, [pc, #320]	@ (8009b64 <sen5x_printvalues+0x1a4>)
 8009a22:	0008      	movs	r0, r1
 8009a24:	f016 fc4a 	bl	80202bc <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009a28:	4b4a      	ldr	r3, [pc, #296]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009a2a:	889b      	ldrh	r3, [r3, #4]
 8009a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8009b58 <sen5x_printvalues+0x198>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d013      	beq.n	8009a5a <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8009a32:	4b48      	ldr	r3, [pc, #288]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009a34:	889b      	ldrh	r3, [r3, #4]
 8009a36:	0018      	movs	r0, r3
 8009a38:	f7f7 fdca 	bl	80015d0 <__aeabi_i2f>
 8009a3c:	1c03      	adds	r3, r0, #0
 8009a3e:	4947      	ldr	r1, [pc, #284]	@ (8009b5c <sen5x_printvalues+0x19c>)
 8009a40:	1c18      	adds	r0, r3, #0
 8009a42:	f7f7 f8c7 	bl	8000bd4 <__aeabi_fdiv>
 8009a46:	1c03      	adds	r3, r0, #0
 8009a48:	1c18      	adds	r0, r3, #0
 8009a4a:	f7f9 fd0b 	bl	8003464 <__aeabi_f2d>
 8009a4e:	0002      	movs	r2, r0
 8009a50:	000b      	movs	r3, r1
 8009a52:	4945      	ldr	r1, [pc, #276]	@ (8009b68 <sen5x_printvalues+0x1a8>)
 8009a54:	0008      	movs	r0, r1
 8009a56:	f016 fc31 	bl	80202bc <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009a5c:	88db      	ldrh	r3, [r3, #6]
 8009a5e:	4a3e      	ldr	r2, [pc, #248]	@ (8009b58 <sen5x_printvalues+0x198>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d013      	beq.n	8009a8c <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009a64:	4b3b      	ldr	r3, [pc, #236]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009a66:	88db      	ldrh	r3, [r3, #6]
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f7f7 fdb1 	bl	80015d0 <__aeabi_i2f>
 8009a6e:	1c03      	adds	r3, r0, #0
 8009a70:	493a      	ldr	r1, [pc, #232]	@ (8009b5c <sen5x_printvalues+0x19c>)
 8009a72:	1c18      	adds	r0, r3, #0
 8009a74:	f7f7 f8ae 	bl	8000bd4 <__aeabi_fdiv>
 8009a78:	1c03      	adds	r3, r0, #0
 8009a7a:	1c18      	adds	r0, r3, #0
 8009a7c:	f7f9 fcf2 	bl	8003464 <__aeabi_f2d>
 8009a80:	0002      	movs	r2, r0
 8009a82:	000b      	movs	r3, r1
 8009a84:	4939      	ldr	r1, [pc, #228]	@ (8009b6c <sen5x_printvalues+0x1ac>)
 8009a86:	0008      	movs	r0, r1
 8009a88:	f016 fc18 	bl	80202bc <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 8009a8c:	4b31      	ldr	r3, [pc, #196]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009a8e:	2208      	movs	r2, #8
 8009a90:	5e9b      	ldrsh	r3, [r3, r2]
 8009a92:	4a37      	ldr	r2, [pc, #220]	@ (8009b70 <sen5x_printvalues+0x1b0>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d014      	beq.n	8009ac2 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009a98:	4b2e      	ldr	r3, [pc, #184]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009a9a:	2208      	movs	r2, #8
 8009a9c:	5e9b      	ldrsh	r3, [r3, r2]
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	f7f7 fd96 	bl	80015d0 <__aeabi_i2f>
 8009aa4:	1c03      	adds	r3, r0, #0
 8009aa6:	4933      	ldr	r1, [pc, #204]	@ (8009b74 <sen5x_printvalues+0x1b4>)
 8009aa8:	1c18      	adds	r0, r3, #0
 8009aaa:	f7f7 f893 	bl	8000bd4 <__aeabi_fdiv>
 8009aae:	1c03      	adds	r3, r0, #0
 8009ab0:	1c18      	adds	r0, r3, #0
 8009ab2:	f7f9 fcd7 	bl	8003464 <__aeabi_f2d>
 8009ab6:	0002      	movs	r2, r0
 8009ab8:	000b      	movs	r3, r1
 8009aba:	492f      	ldr	r1, [pc, #188]	@ (8009b78 <sen5x_printvalues+0x1b8>)
 8009abc:	0008      	movs	r0, r1
 8009abe:	f016 fbfd 	bl	80202bc <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 8009ac2:	4b24      	ldr	r3, [pc, #144]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009ac4:	220a      	movs	r2, #10
 8009ac6:	5e9b      	ldrsh	r3, [r3, r2]
 8009ac8:	4a29      	ldr	r2, [pc, #164]	@ (8009b70 <sen5x_printvalues+0x1b0>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d014      	beq.n	8009af8 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 8009ace:	4b21      	ldr	r3, [pc, #132]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009ad0:	220a      	movs	r2, #10
 8009ad2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f7f7 fd7b 	bl	80015d0 <__aeabi_i2f>
 8009ada:	1c03      	adds	r3, r0, #0
 8009adc:	4927      	ldr	r1, [pc, #156]	@ (8009b7c <sen5x_printvalues+0x1bc>)
 8009ade:	1c18      	adds	r0, r3, #0
 8009ae0:	f7f7 f878 	bl	8000bd4 <__aeabi_fdiv>
 8009ae4:	1c03      	adds	r3, r0, #0
 8009ae6:	1c18      	adds	r0, r3, #0
 8009ae8:	f7f9 fcbc 	bl	8003464 <__aeabi_f2d>
 8009aec:	0002      	movs	r2, r0
 8009aee:	000b      	movs	r3, r1
 8009af0:	4923      	ldr	r1, [pc, #140]	@ (8009b80 <sen5x_printvalues+0x1c0>)
 8009af2:	0008      	movs	r0, r1
 8009af4:	f016 fbe2 	bl	80202bc <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009af8:	4b16      	ldr	r3, [pc, #88]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009afa:	220c      	movs	r2, #12
 8009afc:	5e9b      	ldrsh	r3, [r3, r2]
 8009afe:	4a1c      	ldr	r2, [pc, #112]	@ (8009b70 <sen5x_printvalues+0x1b0>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d00e      	beq.n	8009b22 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 8009b04:	4b13      	ldr	r3, [pc, #76]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009b06:	220c      	movs	r2, #12
 8009b08:	5e9b      	ldrsh	r3, [r3, r2]
 8009b0a:	210a      	movs	r1, #10
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	f7f6 fbd3 	bl	80002b8 <__divsi3>
 8009b12:	0003      	movs	r3, r0
 8009b14:	b21b      	sxth	r3, r3
 8009b16:	001a      	movs	r2, r3
 8009b18:	4b1a      	ldr	r3, [pc, #104]	@ (8009b84 <sen5x_printvalues+0x1c4>)
 8009b1a:	0011      	movs	r1, r2
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	f016 fbcd 	bl	80202bc <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 8009b22:	4b0c      	ldr	r3, [pc, #48]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009b24:	220e      	movs	r2, #14
 8009b26:	5e9b      	ldrsh	r3, [r3, r2]
 8009b28:	4a11      	ldr	r2, [pc, #68]	@ (8009b70 <sen5x_printvalues+0x1b0>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d00e      	beq.n	8009b4c <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 8009b2e:	4b09      	ldr	r3, [pc, #36]	@ (8009b54 <sen5x_printvalues+0x194>)
 8009b30:	220e      	movs	r2, #14
 8009b32:	5e9b      	ldrsh	r3, [r3, r2]
 8009b34:	210a      	movs	r1, #10
 8009b36:	0018      	movs	r0, r3
 8009b38:	f7f6 fbbe 	bl	80002b8 <__divsi3>
 8009b3c:	0003      	movs	r3, r0
 8009b3e:	b21b      	sxth	r3, r3
 8009b40:	001a      	movs	r2, r3
 8009b42:	4b11      	ldr	r3, [pc, #68]	@ (8009b88 <sen5x_printvalues+0x1c8>)
 8009b44:	0011      	movs	r1, r2
 8009b46:	0018      	movs	r0, r3
 8009b48:	f016 fbb8 	bl	80202bc <iprintf>
  }
}
 8009b4c:	46c0      	nop			@ (mov r8, r8)
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	46c0      	nop			@ (mov r8, r8)
 8009b54:	20000c98 	.word	0x20000c98
 8009b58:	0000ffff 	.word	0x0000ffff
 8009b5c:	41200000 	.word	0x41200000
 8009b60:	08024f5c 	.word	0x08024f5c
 8009b64:	08024f88 	.word	0x08024f88
 8009b68:	08024fb4 	.word	0x08024fb4
 8009b6c:	08024fe0 	.word	0x08024fe0
 8009b70:	00007fff 	.word	0x00007fff
 8009b74:	42c80000 	.word	0x42c80000
 8009b78:	0802500c 	.word	0x0802500c
 8009b7c:	43480000 	.word	0x43480000
 8009b80:	08025030 	.word	0x08025030
 8009b84:	08025058 	.word	0x08025058
 8009b88:	08025070 	.word	0x08025070

08009b8c <sen5xStore>:

void sen5xStore() {
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009b90:	4b2e      	ldr	r3, [pc, #184]	@ (8009c4c <sen5xStore+0xc0>)
 8009b92:	885b      	ldrh	r3, [r3, #2]
 8009b94:	4a2e      	ldr	r2, [pc, #184]	@ (8009c50 <sen5xStore+0xc4>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d004      	beq.n	8009ba4 <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 8009b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8009c4c <sen5xStore+0xc0>)
 8009b9c:	885b      	ldrh	r3, [r3, #2]
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f7f9 fe44 	bl	800382c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009ba4:	4b29      	ldr	r3, [pc, #164]	@ (8009c4c <sen5xStore+0xc0>)
 8009ba6:	88db      	ldrh	r3, [r3, #6]
 8009ba8:	4a29      	ldr	r2, [pc, #164]	@ (8009c50 <sen5xStore+0xc4>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d004      	beq.n	8009bb8 <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 8009bae:	4b27      	ldr	r3, [pc, #156]	@ (8009c4c <sen5xStore+0xc0>)
 8009bb0:	88db      	ldrh	r3, [r3, #6]
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f7f9 fe66 	bl	8003884 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8009bb8:	4b26      	ldr	r3, [pc, #152]	@ (8009c54 <sen5xStore+0xc8>)
 8009bba:	791b      	ldrb	r3, [r3, #4]
 8009bbc:	2b34      	cmp	r3, #52	@ 0x34
 8009bbe:	d003      	beq.n	8009bc8 <sen5xStore+0x3c>
 8009bc0:	4b24      	ldr	r3, [pc, #144]	@ (8009c54 <sen5xStore+0xc8>)
 8009bc2:	791b      	ldrb	r3, [r3, #4]
 8009bc4:	2b35      	cmp	r3, #53	@ 0x35
 8009bc6:	d13d      	bne.n	8009c44 <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 8009bc8:	4b23      	ldr	r3, [pc, #140]	@ (8009c58 <sen5xStore+0xcc>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	4053      	eors	r3, r2
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d103      	bne.n	8009bde <sen5xStore+0x52>
 8009bd6:	4b21      	ldr	r3, [pc, #132]	@ (8009c5c <sen5xStore+0xd0>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d032      	beq.n	8009c44 <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 8009bde:	4b1b      	ldr	r3, [pc, #108]	@ (8009c4c <sen5xStore+0xc0>)
 8009be0:	220c      	movs	r2, #12
 8009be2:	5e9b      	ldrsh	r3, [r3, r2]
 8009be4:	4a1e      	ldr	r2, [pc, #120]	@ (8009c60 <sen5xStore+0xd4>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d019      	beq.n	8009c1e <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 8009bea:	4b18      	ldr	r3, [pc, #96]	@ (8009c4c <sen5xStore+0xc0>)
 8009bec:	220c      	movs	r2, #12
 8009bee:	5e9b      	ldrsh	r3, [r3, r2]
 8009bf0:	210a      	movs	r1, #10
 8009bf2:	0018      	movs	r0, r3
 8009bf4:	f7f6 fb60 	bl	80002b8 <__divsi3>
 8009bf8:	0003      	movs	r3, r0
 8009bfa:	b21b      	sxth	r3, r3
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f003 fe20 	bl	800d844 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 8009c04:	4b11      	ldr	r3, [pc, #68]	@ (8009c4c <sen5xStore+0xc0>)
 8009c06:	220c      	movs	r2, #12
 8009c08:	5e9b      	ldrsh	r3, [r3, r2]
 8009c0a:	210a      	movs	r1, #10
 8009c0c:	0018      	movs	r0, r3
 8009c0e:	f7f6 fb53 	bl	80002b8 <__divsi3>
 8009c12:	0003      	movs	r3, r0
 8009c14:	b21b      	sxth	r3, r3
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f7f9 fdd7 	bl	80037cc <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c4c <sen5xStore+0xc0>)
 8009c20:	220e      	movs	r2, #14
 8009c22:	5e9b      	ldrsh	r3, [r3, r2]
 8009c24:	4a0e      	ldr	r2, [pc, #56]	@ (8009c60 <sen5xStore+0xd4>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d00c      	beq.n	8009c44 <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 8009c2a:	4b08      	ldr	r3, [pc, #32]	@ (8009c4c <sen5xStore+0xc0>)
 8009c2c:	220e      	movs	r2, #14
 8009c2e:	5e9b      	ldrsh	r3, [r3, r2]
 8009c30:	210a      	movs	r1, #10
 8009c32:	0018      	movs	r0, r3
 8009c34:	f7f6 fb40 	bl	80002b8 <__divsi3>
 8009c38:	0003      	movs	r3, r0
 8009c3a:	b21b      	sxth	r3, r3
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	0018      	movs	r0, r3
 8009c40:	f7f9 fe4c 	bl	80038dc <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 8009c44:	46c0      	nop			@ (mov r8, r8)
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	46c0      	nop			@ (mov r8, r8)
 8009c4c:	20000c98 	.word	0x20000c98
 8009c50:	0000ffff 	.word	0x0000ffff
 8009c54:	20000c88 	.word	0x20000c88
 8009c58:	20000c86 	.word	0x20000c86
 8009c5c:	20001c15 	.word	0x20001c15
 8009c60:	00007fff 	.word	0x00007fff

08009c64 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8009c64:	b590      	push	{r4, r7, lr}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af02      	add	r7, sp, #8
 8009c6a:	6039      	str	r1, [r7, #0]
 8009c6c:	0011      	movs	r1, r2
 8009c6e:	1dfb      	adds	r3, r7, #7
 8009c70:	1c02      	adds	r2, r0, #0
 8009c72:	701a      	strb	r2, [r3, #0]
 8009c74:	1d3b      	adds	r3, r7, #4
 8009c76:	1c0a      	adds	r2, r1, #0
 8009c78:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8009c7a:	1dfb      	adds	r3, r7, #7
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	18db      	adds	r3, r3, r3
 8009c82:	b299      	uxth	r1, r3
 8009c84:	1d3b      	adds	r3, r7, #4
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	4805      	ldr	r0, [pc, #20]	@ (8009ca0 <sensirion_i2c_hal_read+0x3c>)
 8009c8c:	2464      	movs	r4, #100	@ 0x64
 8009c8e:	9400      	str	r4, [sp, #0]
 8009c90:	f006 fed8 	bl	8010a44 <HAL_I2C_Master_Receive>
 8009c94:	0003      	movs	r3, r0
 8009c96:	b25b      	sxtb	r3, r3
}
 8009c98:	0018      	movs	r0, r3
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	b003      	add	sp, #12
 8009c9e:	bd90      	pop	{r4, r7, pc}
 8009ca0:	20000a68 	.word	0x20000a68

08009ca4 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009ca4:	b590      	push	{r4, r7, lr}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af02      	add	r7, sp, #8
 8009caa:	6039      	str	r1, [r7, #0]
 8009cac:	0011      	movs	r1, r2
 8009cae:	1dfb      	adds	r3, r7, #7
 8009cb0:	1c02      	adds	r2, r0, #0
 8009cb2:	701a      	strb	r2, [r3, #0]
 8009cb4:	1d3b      	adds	r3, r7, #4
 8009cb6:	1c0a      	adds	r2, r1, #0
 8009cb8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009cba:	1dfb      	adds	r3, r7, #7
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	18db      	adds	r3, r3, r3
 8009cc2:	b299      	uxth	r1, r3
 8009cc4:	1d3b      	adds	r3, r7, #4
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	4805      	ldr	r0, [pc, #20]	@ (8009ce0 <sensirion_i2c_hal_write+0x3c>)
 8009ccc:	2464      	movs	r4, #100	@ 0x64
 8009cce:	9400      	str	r4, [sp, #0]
 8009cd0:	f006 fdb0 	bl	8010834 <HAL_I2C_Master_Transmit>
 8009cd4:	0003      	movs	r3, r0
 8009cd6:	b25b      	sxtb	r3, r3
}
 8009cd8:	0018      	movs	r0, r3
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	b003      	add	sp, #12
 8009cde:	bd90      	pop	{r4, r7, pc}
 8009ce0:	20000a68 	.word	0x20000a68

08009ce4 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	22fa      	movs	r2, #250	@ 0xfa
 8009cf0:	0091      	lsls	r1, r2, #2
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	f7f6 fa56 	bl	80001a4 <__udivsi3>
 8009cf8:	0003      	movs	r3, r0
 8009cfa:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	22fa      	movs	r2, #250	@ 0xfa
 8009d00:	0091      	lsls	r1, r2, #2
 8009d02:	0018      	movs	r0, r3
 8009d04:	f7f6 fad4 	bl	80002b0 <__aeabi_uidivmod>
 8009d08:	1e0b      	subs	r3, r1, #0
 8009d0a:	d002      	beq.n	8009d12 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	0018      	movs	r0, r3
 8009d16:	f005 fa37 	bl	800f188 <HAL_Delay>
}
 8009d1a:	46c0      	nop			@ (mov r8, r8)
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	b004      	add	sp, #16
 8009d20:	bd80      	pop	{r7, pc}
	...

08009d24 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 8009d2e:	1d3b      	adds	r3, r7, #4
 8009d30:	0018      	movs	r0, r3
 8009d32:	f000 fd05 	bl	800a740 <sen5x_read_device_status>
 8009d36:	1e03      	subs	r3, r0, #0
 8009d38:	d007      	beq.n	8009d4a <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8009d3a:	4a28      	ldr	r2, [pc, #160]	@ (8009ddc <sen5x_check_for_errors+0xb8>)
 8009d3c:	4b28      	ldr	r3, [pc, #160]	@ (8009de0 <sen5x_check_for_errors+0xbc>)
 8009d3e:	0019      	movs	r1, r3
 8009d40:	2001      	movs	r0, #1
 8009d42:	f004 fdd3 	bl	800e8ec <CreateLine>
    return true;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e043      	b.n	8009dd2 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <sen5x_check_for_errors+0x30>
    return false;
 8009d50:	2300      	movs	r3, #0
 8009d52:	e03e      	b.n	8009dd2 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	2380      	movs	r3, #128	@ 0x80
 8009d58:	039b      	lsls	r3, r3, #14
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	d005      	beq.n	8009d6a <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 8009d5e:	4a21      	ldr	r2, [pc, #132]	@ (8009de4 <sen5x_check_for_errors+0xc0>)
 8009d60:	4b21      	ldr	r3, [pc, #132]	@ (8009de8 <sen5x_check_for_errors+0xc4>)
 8009d62:	0019      	movs	r1, r3
 8009d64:	2003      	movs	r0, #3
 8009d66:	f004 fdc1 	bl	800e8ec <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	2380      	movs	r3, #128	@ 0x80
 8009d6e:	031b      	lsls	r3, r3, #12
 8009d70:	4013      	ands	r3, r2
 8009d72:	d005      	beq.n	8009d80 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009d74:	4a1d      	ldr	r2, [pc, #116]	@ (8009dec <sen5x_check_for_errors+0xc8>)
 8009d76:	4b1c      	ldr	r3, [pc, #112]	@ (8009de8 <sen5x_check_for_errors+0xc4>)
 8009d78:	0019      	movs	r1, r3
 8009d7a:	2003      	movs	r0, #3
 8009d7c:	f004 fdb6 	bl	800e8ec <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2280      	movs	r2, #128	@ 0x80
 8009d84:	4013      	ands	r3, r2
 8009d86:	d005      	beq.n	8009d94 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009d88:	4a19      	ldr	r2, [pc, #100]	@ (8009df0 <sen5x_check_for_errors+0xcc>)
 8009d8a:	4b17      	ldr	r3, [pc, #92]	@ (8009de8 <sen5x_check_for_errors+0xc4>)
 8009d8c:	0019      	movs	r1, r3
 8009d8e:	2003      	movs	r0, #3
 8009d90:	f004 fdac 	bl	800e8ec <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2240      	movs	r2, #64	@ 0x40
 8009d98:	4013      	ands	r3, r2
 8009d9a:	d005      	beq.n	8009da8 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009d9c:	4a15      	ldr	r2, [pc, #84]	@ (8009df4 <sen5x_check_for_errors+0xd0>)
 8009d9e:	4b12      	ldr	r3, [pc, #72]	@ (8009de8 <sen5x_check_for_errors+0xc4>)
 8009da0:	0019      	movs	r1, r3
 8009da2:	2003      	movs	r0, #3
 8009da4:	f004 fda2 	bl	800e8ec <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2220      	movs	r2, #32
 8009dac:	4013      	ands	r3, r2
 8009dae:	d005      	beq.n	8009dbc <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009db0:	4a11      	ldr	r2, [pc, #68]	@ (8009df8 <sen5x_check_for_errors+0xd4>)
 8009db2:	4b0d      	ldr	r3, [pc, #52]	@ (8009de8 <sen5x_check_for_errors+0xc4>)
 8009db4:	0019      	movs	r1, r3
 8009db6:	2003      	movs	r0, #3
 8009db8:	f004 fd98 	bl	800e8ec <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2210      	movs	r2, #16
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	d005      	beq.n	8009dd0 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8009dfc <sen5x_check_for_errors+0xd8>)
 8009dc6:	4b08      	ldr	r3, [pc, #32]	@ (8009de8 <sen5x_check_for_errors+0xc4>)
 8009dc8:	0019      	movs	r1, r3
 8009dca:	2003      	movs	r0, #3
 8009dcc:	f004 fd8e 	bl	800e8ec <CreateLine>
  }
  return 1;
 8009dd0:	2301      	movs	r3, #1
}
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	b002      	add	sp, #8
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	46c0      	nop			@ (mov r8, r8)
 8009ddc:	08025088 	.word	0x08025088
 8009de0:	08024c0c 	.word	0x08024c0c
 8009de4:	080250b4 	.word	0x080250b4
 8009de8:	08024be0 	.word	0x08024be0
 8009dec:	080250d4 	.word	0x080250d4
 8009df0:	080250f0 	.word	0x080250f0
 8009df4:	08025114 	.word	0x08025114
 8009df8:	08025134 	.word	0x08025134
 8009dfc:	08025148 	.word	0x08025148

08009e00 <set_light_on_state>:

void set_light_on_state(void) {
 8009e00:	b580      	push	{r7, lr}
 8009e02:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009e04:	4b15      	ldr	r3, [pc, #84]	@ (8009e5c <set_light_on_state+0x5c>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	4053      	eors	r3, r2
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d008      	beq.n	8009e24 <set_light_on_state+0x24>
    sen5x_Power_On();
 8009e12:	f7ff fb43 	bl	800949c <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009e16:	4a12      	ldr	r2, [pc, #72]	@ (8009e60 <set_light_on_state+0x60>)
 8009e18:	4b12      	ldr	r3, [pc, #72]	@ (8009e64 <set_light_on_state+0x64>)
 8009e1a:	0019      	movs	r1, r3
 8009e1c:	2003      	movs	r0, #3
 8009e1e:	f004 fd65 	bl	800e8ec <CreateLine>
 8009e22:	e00a      	b.n	8009e3a <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009e24:	f005 f9a6 	bl	800f174 <HAL_GetTick>
 8009e28:	0002      	movs	r2, r0
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e68 <set_light_on_state+0x68>)
 8009e2c:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8009e6c <set_light_on_state+0x6c>)
 8009e30:	4b0c      	ldr	r3, [pc, #48]	@ (8009e64 <set_light_on_state+0x64>)
 8009e32:	0019      	movs	r1, r3
 8009e34:	2003      	movs	r0, #3
 8009e36:	f004 fd59 	bl	800e8ec <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009e3a:	f7ff fcbf 	bl	80097bc <sen5x_lightup_measurement>
 8009e3e:	1e03      	subs	r3, r0, #0
 8009e40:	d005      	beq.n	8009e4e <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009e42:	4a0b      	ldr	r2, [pc, #44]	@ (8009e70 <set_light_on_state+0x70>)
 8009e44:	4b0b      	ldr	r3, [pc, #44]	@ (8009e74 <set_light_on_state+0x74>)
 8009e46:	0019      	movs	r1, r3
 8009e48:	2001      	movs	r0, #1
 8009e4a:	f004 fd4f 	bl	800e8ec <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e78 <set_light_on_state+0x78>)
 8009e50:	2203      	movs	r2, #3
 8009e52:	701a      	strb	r2, [r3, #0]
}
 8009e54:	46c0      	nop			@ (mov r8, r8)
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	46c0      	nop			@ (mov r8, r8)
 8009e5c:	20000c85 	.word	0x20000c85
 8009e60:	08025184 	.word	0x08025184
 8009e64:	08024be0 	.word	0x08024be0
 8009e68:	20000c94 	.word	0x20000c94
 8009e6c:	080251b0 	.word	0x080251b0
 8009e70:	080251c8 	.word	0x080251c8
 8009e74:	08024c0c 	.word	0x08024c0c
 8009e78:	2000008d 	.word	0x2000008d

08009e7c <sen5x_statemachine>:

void sen5x_statemachine() {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009e82:	1dfb      	adds	r3, r7, #7
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009e88:	4b88      	ldr	r3, [pc, #544]	@ (800a0ac <sen5x_statemachine+0x230>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	f004 fcd7 	bl	800e840 <TimestampIsReached>
 8009e92:	1e03      	subs	r3, r0, #0
 8009e94:	d100      	bne.n	8009e98 <sen5x_statemachine+0x1c>
 8009e96:	e105      	b.n	800a0a4 <sen5x_statemachine+0x228>
    switch (PMsamplesState) {
 8009e98:	4b85      	ldr	r3, [pc, #532]	@ (800a0b0 <sen5x_statemachine+0x234>)
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b05      	cmp	r3, #5
 8009e9e:	d900      	bls.n	8009ea2 <sen5x_statemachine+0x26>
 8009ea0:	e100      	b.n	800a0a4 <sen5x_statemachine+0x228>
 8009ea2:	009a      	lsls	r2, r3, #2
 8009ea4:	4b83      	ldr	r3, [pc, #524]	@ (800a0b4 <sen5x_statemachine+0x238>)
 8009ea6:	18d3      	adds	r3, r2, r3
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009eac:	4a82      	ldr	r2, [pc, #520]	@ (800a0b8 <sen5x_statemachine+0x23c>)
 8009eae:	4b83      	ldr	r3, [pc, #524]	@ (800a0bc <sen5x_statemachine+0x240>)
 8009eb0:	0019      	movs	r1, r3
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	f004 fd1a 	bl	800e8ec <CreateLine>
      SetPMSensorStatus(false);
 8009eb8:	2000      	movs	r0, #0
 8009eba:	f7fe fc6b 	bl	8008794 <SetPMSensorStatus>
      DisablePMSensor();
 8009ebe:	f7fe fc0b 	bl	80086d8 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009ec2:	f005 f957 	bl	800f174 <HAL_GetTick>
 8009ec6:	0003      	movs	r3, r0
 8009ec8:	4a7d      	ldr	r2, [pc, #500]	@ (800a0c0 <sen5x_statemachine+0x244>)
 8009eca:	189a      	adds	r2, r3, r2
 8009ecc:	4b77      	ldr	r3, [pc, #476]	@ (800a0ac <sen5x_statemachine+0x230>)
 8009ece:	601a      	str	r2, [r3, #0]
      break;
 8009ed0:	e0e8      	b.n	800a0a4 <sen5x_statemachine+0x228>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009ed2:	f005 f94f 	bl	800f174 <HAL_GetTick>
 8009ed6:	0003      	movs	r3, r0
 8009ed8:	4a7a      	ldr	r2, [pc, #488]	@ (800a0c4 <sen5x_statemachine+0x248>)
 8009eda:	189a      	adds	r2, r3, r2
 8009edc:	4b73      	ldr	r3, [pc, #460]	@ (800a0ac <sen5x_statemachine+0x230>)
 8009ede:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009ee0:	f7ff ff8e 	bl	8009e00 <set_light_on_state>
      break;
 8009ee4:	e0de      	b.n	800a0a4 <sen5x_statemachine+0x228>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 8009ee6:	4b72      	ldr	r3, [pc, #456]	@ (800a0b0 <sen5x_statemachine+0x234>)
 8009ee8:	2202      	movs	r2, #2
 8009eea:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009eec:	4b76      	ldr	r3, [pc, #472]	@ (800a0c8 <sen5x_statemachine+0x24c>)
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2b05      	cmp	r3, #5
 8009ef2:	d905      	bls.n	8009f00 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 8009ef4:	4b6e      	ldr	r3, [pc, #440]	@ (800a0b0 <sen5x_statemachine+0x234>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009efa:	f7ff faff 	bl	80094fc <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 8009efe:	e0ce      	b.n	800a09e <sen5x_statemachine+0x222>
        if (sen5x_check_for_errors()) {
 8009f00:	f7ff ff10 	bl	8009d24 <sen5x_check_for_errors>
 8009f04:	1e03      	subs	r3, r0, #0
 8009f06:	d021      	beq.n	8009f4c <sen5x_statemachine+0xd0>
          if (sen5x_device_reset()) {
 8009f08:	f000 fc6c 	bl	800a7e4 <sen5x_device_reset>
 8009f0c:	1e03      	subs	r3, r0, #0
 8009f0e:	d00f      	beq.n	8009f30 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 8009f10:	4a6e      	ldr	r2, [pc, #440]	@ (800a0cc <sen5x_statemachine+0x250>)
 8009f12:	4b6a      	ldr	r3, [pc, #424]	@ (800a0bc <sen5x_statemachine+0x240>)
 8009f14:	0019      	movs	r1, r3
 8009f16:	2001      	movs	r0, #1
 8009f18:	f004 fce8 	bl	800e8ec <CreateLine>
            sen5xErrors++;
 8009f1c:	4b6a      	ldr	r3, [pc, #424]	@ (800a0c8 <sen5x_statemachine+0x24c>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	3301      	adds	r3, #1
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	4b68      	ldr	r3, [pc, #416]	@ (800a0c8 <sen5x_statemachine+0x24c>)
 8009f26:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 8009f28:	4b61      	ldr	r3, [pc, #388]	@ (800a0b0 <sen5x_statemachine+0x234>)
 8009f2a:	2203      	movs	r2, #3
 8009f2c:	701a      	strb	r2, [r3, #0]
 8009f2e:	e005      	b.n	8009f3c <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 8009f30:	4a67      	ldr	r2, [pc, #412]	@ (800a0d0 <sen5x_statemachine+0x254>)
 8009f32:	4b68      	ldr	r3, [pc, #416]	@ (800a0d4 <sen5x_statemachine+0x258>)
 8009f34:	0019      	movs	r1, r3
 8009f36:	2002      	movs	r0, #2
 8009f38:	f004 fcd8 	bl	800e8ec <CreateLine>
          sen5xReadTimer = HAL_GetTick() + 200;
 8009f3c:	f005 f91a 	bl	800f174 <HAL_GetTick>
 8009f40:	0003      	movs	r3, r0
 8009f42:	33c8      	adds	r3, #200	@ 0xc8
 8009f44:	001a      	movs	r2, r3
 8009f46:	4b59      	ldr	r3, [pc, #356]	@ (800a0ac <sen5x_statemachine+0x230>)
 8009f48:	601a      	str	r2, [r3, #0]
      break;
 8009f4a:	e0a8      	b.n	800a09e <sen5x_statemachine+0x222>
          if (sen5xErrors != 0) {
 8009f4c:	4b5e      	ldr	r3, [pc, #376]	@ (800a0c8 <sen5x_statemachine+0x24c>)
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d100      	bne.n	8009f56 <sen5x_statemachine+0xda>
 8009f54:	e0a3      	b.n	800a09e <sen5x_statemachine+0x222>
            sen5xErrors = 0;
 8009f56:	4b5c      	ldr	r3, [pc, #368]	@ (800a0c8 <sen5x_statemachine+0x24c>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 8009f5c:	4a5e      	ldr	r2, [pc, #376]	@ (800a0d8 <sen5x_statemachine+0x25c>)
 8009f5e:	4b5f      	ldr	r3, [pc, #380]	@ (800a0dc <sen5x_statemachine+0x260>)
 8009f60:	0019      	movs	r1, r3
 8009f62:	2003      	movs	r0, #3
 8009f64:	f004 fcc2 	bl	800e8ec <CreateLine>
      break;
 8009f68:	e099      	b.n	800a09e <sen5x_statemachine+0x222>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009f6a:	1dfb      	adds	r3, r7, #7
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	f000 f955 	bl	800a21c <sen5x_read_data_ready>
      if (data_ready) {
 8009f72:	1dfb      	adds	r3, r7, #7
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d031      	beq.n	8009fde <sen5x_statemachine+0x162>
        SetPMIndicator();
 8009f7a:	f003 fbd3 	bl	800d724 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009f7e:	4b58      	ldr	r3, [pc, #352]	@ (800a0e0 <sen5x_statemachine+0x264>)
 8009f80:	0018      	movs	r0, r3
 8009f82:	f7ff fcc1 	bl	8009908 <sen5x_read_measurement>
 8009f86:	1e03      	subs	r3, r0, #0
 8009f88:	d00b      	beq.n	8009fa2 <sen5x_statemachine+0x126>
          Error("Error executing sen5x_read_measured_values()");
 8009f8a:	4a56      	ldr	r2, [pc, #344]	@ (800a0e4 <sen5x_statemachine+0x268>)
 8009f8c:	4b4b      	ldr	r3, [pc, #300]	@ (800a0bc <sen5x_statemachine+0x240>)
 8009f8e:	0019      	movs	r1, r3
 8009f90:	2001      	movs	r0, #1
 8009f92:	f004 fcab 	bl	800e8ec <CreateLine>
          sen5xErrors++;
 8009f96:	4b4c      	ldr	r3, [pc, #304]	@ (800a0c8 <sen5x_statemachine+0x24c>)
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	4b4a      	ldr	r3, [pc, #296]	@ (800a0c8 <sen5x_statemachine+0x24c>)
 8009fa0:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 8009fa2:	4b51      	ldr	r3, [pc, #324]	@ (800a0e8 <sen5x_statemachine+0x26c>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	4b4f      	ldr	r3, [pc, #316]	@ (800a0e8 <sen5x_statemachine+0x26c>)
 8009fac:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 8009fae:	4b4e      	ldr	r3, [pc, #312]	@ (800a0e8 <sen5x_statemachine+0x26c>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b1f      	cmp	r3, #31
 8009fb4:	d102      	bne.n	8009fbc <sen5x_statemachine+0x140>
          sen5xSamples = 0;  // enable display on serial
 8009fb6:	4b4c      	ldr	r3, [pc, #304]	@ (800a0e8 <sen5x_statemachine+0x26c>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009fbc:	4b4a      	ldr	r3, [pc, #296]	@ (800a0e8 <sen5x_statemachine+0x26c>)
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d901      	bls.n	8009fc8 <sen5x_statemachine+0x14c>
          sen5xStore();
 8009fc4:	f7ff fde2 	bl	8009b8c <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009fc8:	4b47      	ldr	r3, [pc, #284]	@ (800a0e8 <sen5x_statemachine+0x26c>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d106      	bne.n	8009fde <sen5x_statemachine+0x162>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009fd0:	f7ff fcf6 	bl	80099c0 <sen5x_printvalues>
#else
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
          HAL_Delay(1000);
 8009fd4:	23fa      	movs	r3, #250	@ 0xfa
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f005 f8d5 	bl	800f188 <HAL_Delay>
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009fde:	4b43      	ldr	r3, [pc, #268]	@ (800a0ec <sen5x_statemachine+0x270>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d103      	bne.n	8009fee <sen5x_statemachine+0x172>
 8009fe6:	4b40      	ldr	r3, [pc, #256]	@ (800a0e8 <sen5x_statemachine+0x26c>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d959      	bls.n	800a0a2 <sen5x_statemachine+0x226>
        PMsamplesState = CLEAN_FAN;
 8009fee:	4b30      	ldr	r3, [pc, #192]	@ (800a0b0 <sen5x_statemachine+0x234>)
 8009ff0:	2204      	movs	r2, #4
 8009ff2:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009ff4:	e055      	b.n	800a0a2 <sen5x_statemachine+0x226>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009ff6:	f7fc fe03 	bl	8006c00 <RTC_GetWeekday>
 8009ffa:	0003      	movs	r3, r0
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d118      	bne.n	800a032 <sen5x_statemachine+0x1b6>
 800a000:	4b3b      	ldr	r3, [pc, #236]	@ (800a0f0 <sen5x_statemachine+0x274>)
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2201      	movs	r2, #1
 800a006:	4053      	eors	r3, r2
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d011      	beq.n	800a032 <sen5x_statemachine+0x1b6>
        sen5x_start_fan_cleaning();
 800a00e:	f000 f9eb 	bl	800a3e8 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800a012:	4a38      	ldr	r2, [pc, #224]	@ (800a0f4 <sen5x_statemachine+0x278>)
 800a014:	4b2f      	ldr	r3, [pc, #188]	@ (800a0d4 <sen5x_statemachine+0x258>)
 800a016:	0019      	movs	r1, r3
 800a018:	2002      	movs	r0, #2
 800a01a:	f004 fc67 	bl	800e8ec <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 800a01e:	f005 f8a9 	bl	800f174 <HAL_GetTick>
 800a022:	0003      	movs	r3, r0
 800a024:	4a34      	ldr	r2, [pc, #208]	@ (800a0f8 <sen5x_statemachine+0x27c>)
 800a026:	189a      	adds	r2, r3, r2
 800a028:	4b20      	ldr	r3, [pc, #128]	@ (800a0ac <sen5x_statemachine+0x230>)
 800a02a:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800a02c:	4b30      	ldr	r3, [pc, #192]	@ (800a0f0 <sen5x_statemachine+0x274>)
 800a02e:	2201      	movs	r2, #1
 800a030:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 800a032:	4b1f      	ldr	r3, [pc, #124]	@ (800a0b0 <sen5x_statemachine+0x234>)
 800a034:	2205      	movs	r2, #5
 800a036:	701a      	strb	r2, [r3, #0]
      break;
 800a038:	e034      	b.n	800a0a4 <sen5x_statemachine+0x228>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800a03a:	4b2c      	ldr	r3, [pc, #176]	@ (800a0ec <sen5x_statemachine+0x270>)
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2201      	movs	r2, #1
 800a040:	4053      	eors	r3, r2
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b00      	cmp	r3, #0
 800a046:	d01c      	beq.n	800a082 <sen5x_statemachine+0x206>
 800a048:	4b2c      	ldr	r3, [pc, #176]	@ (800a0fc <sen5x_statemachine+0x280>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2201      	movs	r2, #1
 800a04e:	4053      	eors	r3, r2
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	d015      	beq.n	800a082 <sen5x_statemachine+0x206>
        if (sen5x_extinguish_measurement()) {
 800a056:	f7ff fbfd 	bl	8009854 <sen5x_extinguish_measurement>
 800a05a:	1e03      	subs	r3, r0, #0
 800a05c:	d005      	beq.n	800a06a <sen5x_statemachine+0x1ee>
          Error("Error executing sen5x_extinguish_measurement()");
 800a05e:	4a28      	ldr	r2, [pc, #160]	@ (800a100 <sen5x_statemachine+0x284>)
 800a060:	4b16      	ldr	r3, [pc, #88]	@ (800a0bc <sen5x_statemachine+0x240>)
 800a062:	0019      	movs	r1, r3
 800a064:	2001      	movs	r0, #1
 800a066:	f004 fc41 	bl	800e8ec <CreateLine>
        }
        sen5xSamples = 0;
 800a06a:	4b1f      	ldr	r3, [pc, #124]	@ (800a0e8 <sen5x_statemachine+0x26c>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800a070:	f7ff fa44 	bl	80094fc <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800a074:	2000      	movs	r0, #0
 800a076:	f7fe fb8d 	bl	8008794 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800a07a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b0 <sen5x_statemachine+0x234>)
 800a07c:	2201      	movs	r2, #1
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e002      	b.n	800a088 <sen5x_statemachine+0x20c>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800a082:	4b0b      	ldr	r3, [pc, #44]	@ (800a0b0 <sen5x_statemachine+0x234>)
 800a084:	2203      	movs	r2, #3
 800a086:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800a088:	f003 fb72 	bl	800d770 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 800a08c:	f005 f872 	bl	800f174 <HAL_GetTick>
 800a090:	0003      	movs	r3, r0
 800a092:	22fa      	movs	r2, #250	@ 0xfa
 800a094:	0092      	lsls	r2, r2, #2
 800a096:	189a      	adds	r2, r3, r2
 800a098:	4b04      	ldr	r3, [pc, #16]	@ (800a0ac <sen5x_statemachine+0x230>)
 800a09a:	601a      	str	r2, [r3, #0]
    }
  }
}
 800a09c:	e002      	b.n	800a0a4 <sen5x_statemachine+0x228>
      break;
 800a09e:	46c0      	nop			@ (mov r8, r8)
 800a0a0:	e000      	b.n	800a0a4 <sen5x_statemachine+0x228>
      break;
 800a0a2:	46c0      	nop			@ (mov r8, r8)
}
 800a0a4:	46c0      	nop			@ (mov r8, r8)
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	b002      	add	sp, #8
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20000c94 	.word	0x20000c94
 800a0b0:	2000008d 	.word	0x2000008d
 800a0b4:	08025bd4 	.word	0x08025bd4
 800a0b8:	080251f4 	.word	0x080251f4
 800a0bc:	08024c0c 	.word	0x08024c0c
 800a0c0:	002fefd8 	.word	0x002fefd8
 800a0c4:	00005910 	.word	0x00005910
 800a0c8:	20000c91 	.word	0x20000c91
 800a0cc:	08025224 	.word	0x08025224
 800a0d0:	0802523c 	.word	0x0802523c
 800a0d4:	08024ba0 	.word	0x08024ba0
 800a0d8:	08025254 	.word	0x08025254
 800a0dc:	08024be0 	.word	0x08024be0
 800a0e0:	20000c98 	.word	0x20000c98
 800a0e4:	08025268 	.word	0x08025268
 800a0e8:	20000c90 	.word	0x20000c90
 800a0ec:	20001c15 	.word	0x20001c15
 800a0f0:	20000c84 	.word	0x20000c84
 800a0f4:	08025298 	.word	0x08025298
 800a0f8:	00002710 	.word	0x00002710
 800a0fc:	20001c16 	.word	0x20001c16
 800a100:	080252b0 	.word	0x080252b0

0800a104 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800a104:	b590      	push	{r4, r7, lr}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a10a:	1dbb      	adds	r3, r7, #6
 800a10c:	2200      	movs	r2, #0
 800a10e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800a110:	1dbc      	adds	r4, r7, #6
 800a112:	1dbb      	adds	r3, r7, #6
 800a114:	8819      	ldrh	r1, [r3, #0]
 800a116:	003b      	movs	r3, r7
 800a118:	2221      	movs	r2, #33	@ 0x21
 800a11a:	0018      	movs	r0, r3
 800a11c:	f001 fb56 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a120:	0003      	movs	r3, r0
 800a122:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a124:	1d3c      	adds	r4, r7, #4
 800a126:	1dbb      	adds	r3, r7, #6
 800a128:	881a      	ldrh	r2, [r3, #0]
 800a12a:	003b      	movs	r3, r7
 800a12c:	0019      	movs	r1, r3
 800a12e:	2069      	movs	r0, #105	@ 0x69
 800a130:	f001 fbd0 	bl	800b8d4 <sensirion_i2c_write_data>
 800a134:	0003      	movs	r3, r0
 800a136:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a138:	1d3b      	adds	r3, r7, #4
 800a13a:	2200      	movs	r2, #0
 800a13c:	5e9b      	ldrsh	r3, [r3, r2]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d003      	beq.n	800a14a <sen5x_start_measurement+0x46>
        return error;
 800a142:	1d3b      	adds	r3, r7, #4
 800a144:	2200      	movs	r2, #0
 800a146:	5e9b      	ldrsh	r3, [r3, r2]
 800a148:	e004      	b.n	800a154 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800a14a:	4b04      	ldr	r3, [pc, #16]	@ (800a15c <sen5x_start_measurement+0x58>)
 800a14c:	0018      	movs	r0, r3
 800a14e:	f7ff fdc9 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a152:	2300      	movs	r3, #0
}
 800a154:	0018      	movs	r0, r3
 800a156:	46bd      	mov	sp, r7
 800a158:	b003      	add	sp, #12
 800a15a:	bd90      	pop	{r4, r7, pc}
 800a15c:	0000c350 	.word	0x0000c350

0800a160 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800a160:	b590      	push	{r4, r7, lr}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a166:	1dbb      	adds	r3, r7, #6
 800a168:	2200      	movs	r2, #0
 800a16a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800a16c:	1dbc      	adds	r4, r7, #6
 800a16e:	1dbb      	adds	r3, r7, #6
 800a170:	8819      	ldrh	r1, [r3, #0]
 800a172:	003b      	movs	r3, r7
 800a174:	2237      	movs	r2, #55	@ 0x37
 800a176:	0018      	movs	r0, r3
 800a178:	f001 fb28 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a17c:	0003      	movs	r3, r0
 800a17e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a180:	1d3c      	adds	r4, r7, #4
 800a182:	1dbb      	adds	r3, r7, #6
 800a184:	881a      	ldrh	r2, [r3, #0]
 800a186:	003b      	movs	r3, r7
 800a188:	0019      	movs	r1, r3
 800a18a:	2069      	movs	r0, #105	@ 0x69
 800a18c:	f001 fba2 	bl	800b8d4 <sensirion_i2c_write_data>
 800a190:	0003      	movs	r3, r0
 800a192:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a194:	1d3b      	adds	r3, r7, #4
 800a196:	2200      	movs	r2, #0
 800a198:	5e9b      	ldrsh	r3, [r3, r2]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800a19e:	1d3b      	adds	r3, r7, #4
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	5e9b      	ldrsh	r3, [r3, r2]
 800a1a4:	e004      	b.n	800a1b0 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800a1a6:	4b04      	ldr	r3, [pc, #16]	@ (800a1b8 <sen5x_start_measurement_without_pm+0x58>)
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f7ff fd9b 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	b003      	add	sp, #12
 800a1b6:	bd90      	pop	{r4, r7, pc}
 800a1b8:	0000c350 	.word	0x0000c350

0800a1bc <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800a1bc:	b590      	push	{r4, r7, lr}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a1c2:	1dbb      	adds	r3, r7, #6
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800a1c8:	1dbc      	adds	r4, r7, #6
 800a1ca:	2382      	movs	r3, #130	@ 0x82
 800a1cc:	005a      	lsls	r2, r3, #1
 800a1ce:	1dbb      	adds	r3, r7, #6
 800a1d0:	8819      	ldrh	r1, [r3, #0]
 800a1d2:	003b      	movs	r3, r7
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f001 faf9 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a1da:	0003      	movs	r3, r0
 800a1dc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a1de:	1d3c      	adds	r4, r7, #4
 800a1e0:	1dbb      	adds	r3, r7, #6
 800a1e2:	881a      	ldrh	r2, [r3, #0]
 800a1e4:	003b      	movs	r3, r7
 800a1e6:	0019      	movs	r1, r3
 800a1e8:	2069      	movs	r0, #105	@ 0x69
 800a1ea:	f001 fb73 	bl	800b8d4 <sensirion_i2c_write_data>
 800a1ee:	0003      	movs	r3, r0
 800a1f0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1f2:	1d3b      	adds	r3, r7, #4
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	5e9b      	ldrsh	r3, [r3, r2]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <sen5x_stop_measurement+0x48>
        return error;
 800a1fc:	1d3b      	adds	r3, r7, #4
 800a1fe:	2200      	movs	r2, #0
 800a200:	5e9b      	ldrsh	r3, [r3, r2]
 800a202:	e004      	b.n	800a20e <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a204:	4b04      	ldr	r3, [pc, #16]	@ (800a218 <sen5x_stop_measurement+0x5c>)
 800a206:	0018      	movs	r0, r3
 800a208:	f7ff fd6c 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	0018      	movs	r0, r3
 800a210:	46bd      	mov	sp, r7
 800a212:	b003      	add	sp, #12
 800a214:	bd90      	pop	{r4, r7, pc}
 800a216:	46c0      	nop			@ (mov r8, r8)
 800a218:	00030d40 	.word	0x00030d40

0800a21c <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800a21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800a224:	250e      	movs	r5, #14
 800a226:	197b      	adds	r3, r7, r5
 800a228:	2200      	movs	r2, #0
 800a22a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800a22c:	197c      	adds	r4, r7, r5
 800a22e:	4a22      	ldr	r2, [pc, #136]	@ (800a2b8 <sen5x_read_data_ready+0x9c>)
 800a230:	197b      	adds	r3, r7, r5
 800a232:	8819      	ldrh	r1, [r3, #0]
 800a234:	2308      	movs	r3, #8
 800a236:	18fb      	adds	r3, r7, r3
 800a238:	0018      	movs	r0, r3
 800a23a:	f001 fac7 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a23e:	0003      	movs	r3, r0
 800a240:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a242:	260c      	movs	r6, #12
 800a244:	19bc      	adds	r4, r7, r6
 800a246:	197b      	adds	r3, r7, r5
 800a248:	881a      	ldrh	r2, [r3, #0]
 800a24a:	2308      	movs	r3, #8
 800a24c:	18fb      	adds	r3, r7, r3
 800a24e:	0019      	movs	r1, r3
 800a250:	2069      	movs	r0, #105	@ 0x69
 800a252:	f001 fb3f 	bl	800b8d4 <sensirion_i2c_write_data>
 800a256:	0003      	movs	r3, r0
 800a258:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a25a:	19bb      	adds	r3, r7, r6
 800a25c:	2200      	movs	r2, #0
 800a25e:	5e9b      	ldrsh	r3, [r3, r2]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <sen5x_read_data_ready+0x50>
        return error;
 800a264:	19bb      	adds	r3, r7, r6
 800a266:	2200      	movs	r2, #0
 800a268:	5e9b      	ldrsh	r3, [r3, r2]
 800a26a:	e020      	b.n	800a2ae <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a26c:	4b13      	ldr	r3, [pc, #76]	@ (800a2bc <sen5x_read_data_ready+0xa0>)
 800a26e:	0018      	movs	r0, r3
 800a270:	f7ff fd38 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800a274:	250c      	movs	r5, #12
 800a276:	197c      	adds	r4, r7, r5
 800a278:	2308      	movs	r3, #8
 800a27a:	18fb      	adds	r3, r7, r3
 800a27c:	2202      	movs	r2, #2
 800a27e:	0019      	movs	r1, r3
 800a280:	2069      	movs	r0, #105	@ 0x69
 800a282:	f001 fb3f 	bl	800b904 <sensirion_i2c_read_data_inplace>
 800a286:	0003      	movs	r3, r0
 800a288:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a28a:	197b      	adds	r3, r7, r5
 800a28c:	2200      	movs	r2, #0
 800a28e:	5e9b      	ldrsh	r3, [r3, r2]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d003      	beq.n	800a29c <sen5x_read_data_ready+0x80>
        return error;
 800a294:	197b      	adds	r3, r7, r5
 800a296:	2200      	movs	r2, #0
 800a298:	5e9b      	ldrsh	r3, [r3, r2]
 800a29a:	e008      	b.n	800a2ae <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800a29c:	2308      	movs	r3, #8
 800a29e:	18fb      	adds	r3, r7, r3
 800a2a0:	785b      	ldrb	r3, [r3, #1]
 800a2a2:	1e5a      	subs	r2, r3, #1
 800a2a4:	4193      	sbcs	r3, r2
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	b005      	add	sp, #20
 800a2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2b6:	46c0      	nop			@ (mov r8, r8)
 800a2b8:	00000202 	.word	0x00000202
 800a2bc:	00004e20 	.word	0x00004e20

0800a2c0 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800a2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2c2:	b08d      	sub	sp, #52	@ 0x34
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800a2ce:	252e      	movs	r5, #46	@ 0x2e
 800a2d0:	197b      	adds	r3, r7, r5
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800a2d6:	197c      	adds	r4, r7, r5
 800a2d8:	23f1      	movs	r3, #241	@ 0xf1
 800a2da:	009a      	lsls	r2, r3, #2
 800a2dc:	197b      	adds	r3, r7, r5
 800a2de:	8819      	ldrh	r1, [r3, #0]
 800a2e0:	2314      	movs	r3, #20
 800a2e2:	18fb      	adds	r3, r7, r3
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	f001 fa71 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a2ea:	0003      	movs	r3, r0
 800a2ec:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a2ee:	262c      	movs	r6, #44	@ 0x2c
 800a2f0:	19bc      	adds	r4, r7, r6
 800a2f2:	197b      	adds	r3, r7, r5
 800a2f4:	881a      	ldrh	r2, [r3, #0]
 800a2f6:	2314      	movs	r3, #20
 800a2f8:	18fb      	adds	r3, r7, r3
 800a2fa:	0019      	movs	r1, r3
 800a2fc:	2069      	movs	r0, #105	@ 0x69
 800a2fe:	f001 fae9 	bl	800b8d4 <sensirion_i2c_write_data>
 800a302:	0003      	movs	r3, r0
 800a304:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a306:	19bb      	adds	r3, r7, r6
 800a308:	2200      	movs	r2, #0
 800a30a:	5e9b      	ldrsh	r3, [r3, r2]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <sen5x_read_measured_values+0x58>
        return error;
 800a310:	19bb      	adds	r3, r7, r6
 800a312:	2200      	movs	r2, #0
 800a314:	5e9b      	ldrsh	r3, [r3, r2]
 800a316:	e060      	b.n	800a3da <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a318:	4b32      	ldr	r3, [pc, #200]	@ (800a3e4 <sen5x_read_measured_values+0x124>)
 800a31a:	0018      	movs	r0, r3
 800a31c:	f7ff fce2 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800a320:	252c      	movs	r5, #44	@ 0x2c
 800a322:	197c      	adds	r4, r7, r5
 800a324:	2314      	movs	r3, #20
 800a326:	18fb      	adds	r3, r7, r3
 800a328:	2210      	movs	r2, #16
 800a32a:	0019      	movs	r1, r3
 800a32c:	2069      	movs	r0, #105	@ 0x69
 800a32e:	f001 fae9 	bl	800b904 <sensirion_i2c_read_data_inplace>
 800a332:	0003      	movs	r3, r0
 800a334:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a336:	197b      	adds	r3, r7, r5
 800a338:	2200      	movs	r2, #0
 800a33a:	5e9b      	ldrsh	r3, [r3, r2]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d003      	beq.n	800a348 <sen5x_read_measured_values+0x88>
        return error;
 800a340:	197b      	adds	r3, r7, r5
 800a342:	2200      	movs	r2, #0
 800a344:	5e9b      	ldrsh	r3, [r3, r2]
 800a346:	e048      	b.n	800a3da <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800a348:	2414      	movs	r4, #20
 800a34a:	193b      	adds	r3, r7, r4
 800a34c:	0018      	movs	r0, r3
 800a34e:	f000 fa79 	bl	800a844 <sensirion_common_bytes_to_uint16_t>
 800a352:	0003      	movs	r3, r0
 800a354:	001a      	movs	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800a35a:	193b      	adds	r3, r7, r4
 800a35c:	3302      	adds	r3, #2
 800a35e:	0018      	movs	r0, r3
 800a360:	f000 fa70 	bl	800a844 <sensirion_common_bytes_to_uint16_t>
 800a364:	0003      	movs	r3, r0
 800a366:	001a      	movs	r2, r3
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800a36c:	193b      	adds	r3, r7, r4
 800a36e:	3304      	adds	r3, #4
 800a370:	0018      	movs	r0, r3
 800a372:	f000 fa67 	bl	800a844 <sensirion_common_bytes_to_uint16_t>
 800a376:	0003      	movs	r3, r0
 800a378:	001a      	movs	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800a37e:	193b      	adds	r3, r7, r4
 800a380:	3306      	adds	r3, #6
 800a382:	0018      	movs	r0, r3
 800a384:	f000 fa5e 	bl	800a844 <sensirion_common_bytes_to_uint16_t>
 800a388:	0003      	movs	r3, r0
 800a38a:	001a      	movs	r2, r3
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800a390:	193b      	adds	r3, r7, r4
 800a392:	3308      	adds	r3, #8
 800a394:	0018      	movs	r0, r3
 800a396:	f000 fa81 	bl	800a89c <sensirion_common_bytes_to_int16_t>
 800a39a:	0003      	movs	r3, r0
 800a39c:	001a      	movs	r2, r3
 800a39e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3a0:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800a3a2:	193b      	adds	r3, r7, r4
 800a3a4:	330a      	adds	r3, #10
 800a3a6:	0018      	movs	r0, r3
 800a3a8:	f000 fa78 	bl	800a89c <sensirion_common_bytes_to_int16_t>
 800a3ac:	0003      	movs	r3, r0
 800a3ae:	001a      	movs	r2, r3
 800a3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3b2:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800a3b4:	193b      	adds	r3, r7, r4
 800a3b6:	330c      	adds	r3, #12
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	f000 fa6f 	bl	800a89c <sensirion_common_bytes_to_int16_t>
 800a3be:	0003      	movs	r3, r0
 800a3c0:	001a      	movs	r2, r3
 800a3c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3c4:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800a3c6:	193b      	adds	r3, r7, r4
 800a3c8:	330e      	adds	r3, #14
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	f000 fa66 	bl	800a89c <sensirion_common_bytes_to_int16_t>
 800a3d0:	0003      	movs	r3, r0
 800a3d2:	001a      	movs	r2, r3
 800a3d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3d6:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	0018      	movs	r0, r3
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	b00d      	add	sp, #52	@ 0x34
 800a3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e2:	46c0      	nop			@ (mov r8, r8)
 800a3e4:	00004e20 	.word	0x00004e20

0800a3e8 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800a3e8:	b590      	push	{r4, r7, lr}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a3ee:	1dbb      	adds	r3, r7, #6
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800a3f4:	1dbc      	adds	r4, r7, #6
 800a3f6:	4a12      	ldr	r2, [pc, #72]	@ (800a440 <sen5x_start_fan_cleaning+0x58>)
 800a3f8:	1dbb      	adds	r3, r7, #6
 800a3fa:	8819      	ldrh	r1, [r3, #0]
 800a3fc:	003b      	movs	r3, r7
 800a3fe:	0018      	movs	r0, r3
 800a400:	f001 f9e4 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a404:	0003      	movs	r3, r0
 800a406:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a408:	1d3c      	adds	r4, r7, #4
 800a40a:	1dbb      	adds	r3, r7, #6
 800a40c:	881a      	ldrh	r2, [r3, #0]
 800a40e:	003b      	movs	r3, r7
 800a410:	0019      	movs	r1, r3
 800a412:	2069      	movs	r0, #105	@ 0x69
 800a414:	f001 fa5e 	bl	800b8d4 <sensirion_i2c_write_data>
 800a418:	0003      	movs	r3, r0
 800a41a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a41c:	1d3b      	adds	r3, r7, #4
 800a41e:	2200      	movs	r2, #0
 800a420:	5e9b      	ldrsh	r3, [r3, r2]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <sen5x_start_fan_cleaning+0x46>
        return error;
 800a426:	1d3b      	adds	r3, r7, #4
 800a428:	2200      	movs	r2, #0
 800a42a:	5e9b      	ldrsh	r3, [r3, r2]
 800a42c:	e004      	b.n	800a438 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a42e:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <sen5x_start_fan_cleaning+0x5c>)
 800a430:	0018      	movs	r0, r3
 800a432:	f7ff fc57 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a436:	2300      	movs	r3, #0
}
 800a438:	0018      	movs	r0, r3
 800a43a:	46bd      	mov	sp, r7
 800a43c:	b003      	add	sp, #12
 800a43e:	bd90      	pop	{r4, r7, pc}
 800a440:	00005607 	.word	0x00005607
 800a444:	00004e20 	.word	0x00004e20

0800a448 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	0004      	movs	r4, r0
 800a450:	0008      	movs	r0, r1
 800a452:	0011      	movs	r1, r2
 800a454:	1dbb      	adds	r3, r7, #6
 800a456:	1c22      	adds	r2, r4, #0
 800a458:	801a      	strh	r2, [r3, #0]
 800a45a:	1d3b      	adds	r3, r7, #4
 800a45c:	1c02      	adds	r2, r0, #0
 800a45e:	801a      	strh	r2, [r3, #0]
 800a460:	1cbb      	adds	r3, r7, #2
 800a462:	1c0a      	adds	r2, r1, #0
 800a464:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a466:	2516      	movs	r5, #22
 800a468:	197b      	adds	r3, r7, r5
 800a46a:	2200      	movs	r2, #0
 800a46c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a46e:	197c      	adds	r4, r7, r5
 800a470:	4a25      	ldr	r2, [pc, #148]	@ (800a508 <sen5x_set_temperature_offset_parameters+0xc0>)
 800a472:	197b      	adds	r3, r7, r5
 800a474:	8819      	ldrh	r1, [r3, #0]
 800a476:	2608      	movs	r6, #8
 800a478:	19bb      	adds	r3, r7, r6
 800a47a:	0018      	movs	r0, r3
 800a47c:	f001 f9a6 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a480:	0003      	movs	r3, r0
 800a482:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a484:	197c      	adds	r4, r7, r5
 800a486:	1dbb      	adds	r3, r7, #6
 800a488:	2200      	movs	r2, #0
 800a48a:	5e9a      	ldrsh	r2, [r3, r2]
 800a48c:	197b      	adds	r3, r7, r5
 800a48e:	8819      	ldrh	r1, [r3, #0]
 800a490:	19bb      	adds	r3, r7, r6
 800a492:	0018      	movs	r0, r3
 800a494:	f001 fa05 	bl	800b8a2 <sensirion_i2c_add_int16_t_to_buffer>
 800a498:	0003      	movs	r3, r0
 800a49a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a49c:	197c      	adds	r4, r7, r5
 800a49e:	1d3b      	adds	r3, r7, #4
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	5e9a      	ldrsh	r2, [r3, r2]
 800a4a4:	197b      	adds	r3, r7, r5
 800a4a6:	8819      	ldrh	r1, [r3, #0]
 800a4a8:	19bb      	adds	r3, r7, r6
 800a4aa:	0018      	movs	r0, r3
 800a4ac:	f001 f9f9 	bl	800b8a2 <sensirion_i2c_add_int16_t_to_buffer>
 800a4b0:	0003      	movs	r3, r0
 800a4b2:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a4b4:	197c      	adds	r4, r7, r5
 800a4b6:	1cbb      	adds	r3, r7, #2
 800a4b8:	881a      	ldrh	r2, [r3, #0]
 800a4ba:	197b      	adds	r3, r7, r5
 800a4bc:	8819      	ldrh	r1, [r3, #0]
 800a4be:	19bb      	adds	r3, r7, r6
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	f001 f9af 	bl	800b824 <sensirion_i2c_add_uint16_t_to_buffer>
 800a4c6:	0003      	movs	r3, r0
 800a4c8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a4ca:	2214      	movs	r2, #20
 800a4cc:	18bc      	adds	r4, r7, r2
 800a4ce:	197b      	adds	r3, r7, r5
 800a4d0:	881a      	ldrh	r2, [r3, #0]
 800a4d2:	19bb      	adds	r3, r7, r6
 800a4d4:	0019      	movs	r1, r3
 800a4d6:	2069      	movs	r0, #105	@ 0x69
 800a4d8:	f001 f9fc 	bl	800b8d4 <sensirion_i2c_write_data>
 800a4dc:	0003      	movs	r3, r0
 800a4de:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a4e0:	2214      	movs	r2, #20
 800a4e2:	18bb      	adds	r3, r7, r2
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	5e5b      	ldrsh	r3, [r3, r1]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a4ec:	18bb      	adds	r3, r7, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	5e9b      	ldrsh	r3, [r3, r2]
 800a4f2:	e004      	b.n	800a4fe <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a4f4:	4b05      	ldr	r3, [pc, #20]	@ (800a50c <sen5x_set_temperature_offset_parameters+0xc4>)
 800a4f6:	0018      	movs	r0, r3
 800a4f8:	f7ff fbf4 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	0018      	movs	r0, r3
 800a500:	46bd      	mov	sp, r7
 800a502:	b007      	add	sp, #28
 800a504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a506:	46c0      	nop			@ (mov r8, r8)
 800a508:	000060b2 	.word	0x000060b2
 800a50c:	00004e20 	.word	0x00004e20

0800a510 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a512:	b091      	sub	sp, #68	@ 0x44
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	000a      	movs	r2, r1
 800a51a:	1cfb      	adds	r3, r7, #3
 800a51c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a51e:	253e      	movs	r5, #62	@ 0x3e
 800a520:	197b      	adds	r3, r7, r5
 800a522:	2200      	movs	r2, #0
 800a524:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a526:	197c      	adds	r4, r7, r5
 800a528:	4a22      	ldr	r2, [pc, #136]	@ (800a5b4 <sen5x_get_product_name+0xa4>)
 800a52a:	197b      	adds	r3, r7, r5
 800a52c:	8819      	ldrh	r1, [r3, #0]
 800a52e:	230c      	movs	r3, #12
 800a530:	18fb      	adds	r3, r7, r3
 800a532:	0018      	movs	r0, r3
 800a534:	f001 f94a 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a538:	0003      	movs	r3, r0
 800a53a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a53c:	263c      	movs	r6, #60	@ 0x3c
 800a53e:	19bc      	adds	r4, r7, r6
 800a540:	197b      	adds	r3, r7, r5
 800a542:	881a      	ldrh	r2, [r3, #0]
 800a544:	230c      	movs	r3, #12
 800a546:	18fb      	adds	r3, r7, r3
 800a548:	0019      	movs	r1, r3
 800a54a:	2069      	movs	r0, #105	@ 0x69
 800a54c:	f001 f9c2 	bl	800b8d4 <sensirion_i2c_write_data>
 800a550:	0003      	movs	r3, r0
 800a552:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a554:	19bb      	adds	r3, r7, r6
 800a556:	2200      	movs	r2, #0
 800a558:	5e9b      	ldrsh	r3, [r3, r2]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <sen5x_get_product_name+0x56>
        return error;
 800a55e:	19bb      	adds	r3, r7, r6
 800a560:	2200      	movs	r2, #0
 800a562:	5e9b      	ldrsh	r3, [r3, r2]
 800a564:	e021      	b.n	800a5aa <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a566:	4b14      	ldr	r3, [pc, #80]	@ (800a5b8 <sen5x_get_product_name+0xa8>)
 800a568:	0018      	movs	r0, r3
 800a56a:	f7ff fbbb 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a56e:	253c      	movs	r5, #60	@ 0x3c
 800a570:	197c      	adds	r4, r7, r5
 800a572:	230c      	movs	r3, #12
 800a574:	18fb      	adds	r3, r7, r3
 800a576:	2220      	movs	r2, #32
 800a578:	0019      	movs	r1, r3
 800a57a:	2069      	movs	r0, #105	@ 0x69
 800a57c:	f001 f9c2 	bl	800b904 <sensirion_i2c_read_data_inplace>
 800a580:	0003      	movs	r3, r0
 800a582:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a584:	197b      	adds	r3, r7, r5
 800a586:	2200      	movs	r2, #0
 800a588:	5e9b      	ldrsh	r3, [r3, r2]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <sen5x_get_product_name+0x86>
        return error;
 800a58e:	197b      	adds	r3, r7, r5
 800a590:	2200      	movs	r2, #0
 800a592:	5e9b      	ldrsh	r3, [r3, r2]
 800a594:	e009      	b.n	800a5aa <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a596:	1cfb      	adds	r3, r7, #3
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	6879      	ldr	r1, [r7, #4]
 800a59e:	230c      	movs	r3, #12
 800a5a0:	18fb      	adds	r3, r7, r3
 800a5a2:	0018      	movs	r0, r3
 800a5a4:	f000 f988 	bl	800a8b8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	0018      	movs	r0, r3
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	b011      	add	sp, #68	@ 0x44
 800a5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b2:	46c0      	nop			@ (mov r8, r8)
 800a5b4:	0000d014 	.word	0x0000d014
 800a5b8:	0000c350 	.word	0x0000c350

0800a5bc <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5be:	b091      	sub	sp, #68	@ 0x44
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	000a      	movs	r2, r1
 800a5c6:	1cfb      	adds	r3, r7, #3
 800a5c8:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a5ca:	253e      	movs	r5, #62	@ 0x3e
 800a5cc:	197b      	adds	r3, r7, r5
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a5d2:	197c      	adds	r4, r7, r5
 800a5d4:	4a22      	ldr	r2, [pc, #136]	@ (800a660 <sen5x_get_serial_number+0xa4>)
 800a5d6:	197b      	adds	r3, r7, r5
 800a5d8:	8819      	ldrh	r1, [r3, #0]
 800a5da:	230c      	movs	r3, #12
 800a5dc:	18fb      	adds	r3, r7, r3
 800a5de:	0018      	movs	r0, r3
 800a5e0:	f001 f8f4 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a5e4:	0003      	movs	r3, r0
 800a5e6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a5e8:	263c      	movs	r6, #60	@ 0x3c
 800a5ea:	19bc      	adds	r4, r7, r6
 800a5ec:	197b      	adds	r3, r7, r5
 800a5ee:	881a      	ldrh	r2, [r3, #0]
 800a5f0:	230c      	movs	r3, #12
 800a5f2:	18fb      	adds	r3, r7, r3
 800a5f4:	0019      	movs	r1, r3
 800a5f6:	2069      	movs	r0, #105	@ 0x69
 800a5f8:	f001 f96c 	bl	800b8d4 <sensirion_i2c_write_data>
 800a5fc:	0003      	movs	r3, r0
 800a5fe:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a600:	19bb      	adds	r3, r7, r6
 800a602:	2200      	movs	r2, #0
 800a604:	5e9b      	ldrsh	r3, [r3, r2]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <sen5x_get_serial_number+0x56>
        return error;
 800a60a:	19bb      	adds	r3, r7, r6
 800a60c:	2200      	movs	r2, #0
 800a60e:	5e9b      	ldrsh	r3, [r3, r2]
 800a610:	e021      	b.n	800a656 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a612:	4b14      	ldr	r3, [pc, #80]	@ (800a664 <sen5x_get_serial_number+0xa8>)
 800a614:	0018      	movs	r0, r3
 800a616:	f7ff fb65 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a61a:	253c      	movs	r5, #60	@ 0x3c
 800a61c:	197c      	adds	r4, r7, r5
 800a61e:	230c      	movs	r3, #12
 800a620:	18fb      	adds	r3, r7, r3
 800a622:	2220      	movs	r2, #32
 800a624:	0019      	movs	r1, r3
 800a626:	2069      	movs	r0, #105	@ 0x69
 800a628:	f001 f96c 	bl	800b904 <sensirion_i2c_read_data_inplace>
 800a62c:	0003      	movs	r3, r0
 800a62e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a630:	197b      	adds	r3, r7, r5
 800a632:	2200      	movs	r2, #0
 800a634:	5e9b      	ldrsh	r3, [r3, r2]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <sen5x_get_serial_number+0x86>
        return error;
 800a63a:	197b      	adds	r3, r7, r5
 800a63c:	2200      	movs	r2, #0
 800a63e:	5e9b      	ldrsh	r3, [r3, r2]
 800a640:	e009      	b.n	800a656 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a642:	1cfb      	adds	r3, r7, #3
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	b29a      	uxth	r2, r3
 800a648:	6879      	ldr	r1, [r7, #4]
 800a64a:	230c      	movs	r3, #12
 800a64c:	18fb      	adds	r3, r7, r3
 800a64e:	0018      	movs	r0, r3
 800a650:	f000 f932 	bl	800a8b8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a654:	2300      	movs	r3, #0
}
 800a656:	0018      	movs	r0, r3
 800a658:	46bd      	mov	sp, r7
 800a65a:	b011      	add	sp, #68	@ 0x44
 800a65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a65e:	46c0      	nop			@ (mov r8, r8)
 800a660:	0000d033 	.word	0x0000d033
 800a664:	0000c350 	.word	0x0000c350

0800a668 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a66a:	b089      	sub	sp, #36	@ 0x24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a676:	251e      	movs	r5, #30
 800a678:	197b      	adds	r3, r7, r5
 800a67a:	2200      	movs	r2, #0
 800a67c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a67e:	197c      	adds	r4, r7, r5
 800a680:	23d1      	movs	r3, #209	@ 0xd1
 800a682:	021a      	lsls	r2, r3, #8
 800a684:	197b      	adds	r3, r7, r5
 800a686:	8819      	ldrh	r1, [r3, #0]
 800a688:	2310      	movs	r3, #16
 800a68a:	18fb      	adds	r3, r7, r3
 800a68c:	0018      	movs	r0, r3
 800a68e:	f001 f89d 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a692:	0003      	movs	r3, r0
 800a694:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a696:	261c      	movs	r6, #28
 800a698:	19bc      	adds	r4, r7, r6
 800a69a:	197b      	adds	r3, r7, r5
 800a69c:	881a      	ldrh	r2, [r3, #0]
 800a69e:	2310      	movs	r3, #16
 800a6a0:	18fb      	adds	r3, r7, r3
 800a6a2:	0019      	movs	r1, r3
 800a6a4:	2069      	movs	r0, #105	@ 0x69
 800a6a6:	f001 f915 	bl	800b8d4 <sensirion_i2c_write_data>
 800a6aa:	0003      	movs	r3, r0
 800a6ac:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a6ae:	19bb      	adds	r3, r7, r6
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	5e9b      	ldrsh	r3, [r3, r2]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d003      	beq.n	800a6c0 <sen5x_get_version+0x58>
        return error;
 800a6b8:	19bb      	adds	r3, r7, r6
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	5e9b      	ldrsh	r3, [r3, r2]
 800a6be:	e038      	b.n	800a732 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a6c0:	4b1e      	ldr	r3, [pc, #120]	@ (800a73c <sen5x_get_version+0xd4>)
 800a6c2:	0018      	movs	r0, r3
 800a6c4:	f7ff fb0e 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a6c8:	251c      	movs	r5, #28
 800a6ca:	197c      	adds	r4, r7, r5
 800a6cc:	2310      	movs	r3, #16
 800a6ce:	18fb      	adds	r3, r7, r3
 800a6d0:	2208      	movs	r2, #8
 800a6d2:	0019      	movs	r1, r3
 800a6d4:	2069      	movs	r0, #105	@ 0x69
 800a6d6:	f001 f915 	bl	800b904 <sensirion_i2c_read_data_inplace>
 800a6da:	0003      	movs	r3, r0
 800a6dc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a6de:	197b      	adds	r3, r7, r5
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	5e9b      	ldrsh	r3, [r3, r2]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <sen5x_get_version+0x88>
        return error;
 800a6e8:	197b      	adds	r3, r7, r5
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	5e9b      	ldrsh	r3, [r3, r2]
 800a6ee:	e020      	b.n	800a732 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a6f0:	2110      	movs	r1, #16
 800a6f2:	187b      	adds	r3, r7, r1
 800a6f4:	781a      	ldrb	r2, [r3, #0]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a6fa:	187b      	adds	r3, r7, r1
 800a6fc:	785a      	ldrb	r2, [r3, #1]
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a702:	187b      	adds	r3, r7, r1
 800a704:	789b      	ldrb	r3, [r3, #2]
 800a706:	1e5a      	subs	r2, r3, #1
 800a708:	4193      	sbcs	r3, r2
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a710:	187b      	adds	r3, r7, r1
 800a712:	78da      	ldrb	r2, [r3, #3]
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a718:	187b      	adds	r3, r7, r1
 800a71a:	791a      	ldrb	r2, [r3, #4]
 800a71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71e:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a720:	187b      	adds	r3, r7, r1
 800a722:	795a      	ldrb	r2, [r3, #5]
 800a724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a726:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a728:	187b      	adds	r3, r7, r1
 800a72a:	799a      	ldrb	r2, [r3, #6]
 800a72c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a72e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a730:	2300      	movs	r3, #0
}
 800a732:	0018      	movs	r0, r3
 800a734:	46bd      	mov	sp, r7
 800a736:	b009      	add	sp, #36	@ 0x24
 800a738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73a:	46c0      	nop			@ (mov r8, r8)
 800a73c:	00004e20 	.word	0x00004e20

0800a740 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a748:	2516      	movs	r5, #22
 800a74a:	197b      	adds	r3, r7, r5
 800a74c:	2200      	movs	r2, #0
 800a74e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a750:	197c      	adds	r4, r7, r5
 800a752:	4a22      	ldr	r2, [pc, #136]	@ (800a7dc <sen5x_read_device_status+0x9c>)
 800a754:	197b      	adds	r3, r7, r5
 800a756:	8819      	ldrh	r1, [r3, #0]
 800a758:	230c      	movs	r3, #12
 800a75a:	18fb      	adds	r3, r7, r3
 800a75c:	0018      	movs	r0, r3
 800a75e:	f001 f835 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a762:	0003      	movs	r3, r0
 800a764:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a766:	2614      	movs	r6, #20
 800a768:	19bc      	adds	r4, r7, r6
 800a76a:	197b      	adds	r3, r7, r5
 800a76c:	881a      	ldrh	r2, [r3, #0]
 800a76e:	230c      	movs	r3, #12
 800a770:	18fb      	adds	r3, r7, r3
 800a772:	0019      	movs	r1, r3
 800a774:	2069      	movs	r0, #105	@ 0x69
 800a776:	f001 f8ad 	bl	800b8d4 <sensirion_i2c_write_data>
 800a77a:	0003      	movs	r3, r0
 800a77c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a77e:	19bb      	adds	r3, r7, r6
 800a780:	2200      	movs	r2, #0
 800a782:	5e9b      	ldrsh	r3, [r3, r2]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d003      	beq.n	800a790 <sen5x_read_device_status+0x50>
        return error;
 800a788:	19bb      	adds	r3, r7, r6
 800a78a:	2200      	movs	r2, #0
 800a78c:	5e9b      	ldrsh	r3, [r3, r2]
 800a78e:	e020      	b.n	800a7d2 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a790:	4b13      	ldr	r3, [pc, #76]	@ (800a7e0 <sen5x_read_device_status+0xa0>)
 800a792:	0018      	movs	r0, r3
 800a794:	f7ff faa6 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a798:	2514      	movs	r5, #20
 800a79a:	197c      	adds	r4, r7, r5
 800a79c:	230c      	movs	r3, #12
 800a79e:	18fb      	adds	r3, r7, r3
 800a7a0:	2204      	movs	r2, #4
 800a7a2:	0019      	movs	r1, r3
 800a7a4:	2069      	movs	r0, #105	@ 0x69
 800a7a6:	f001 f8ad 	bl	800b904 <sensirion_i2c_read_data_inplace>
 800a7aa:	0003      	movs	r3, r0
 800a7ac:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a7ae:	197b      	adds	r3, r7, r5
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	5e9b      	ldrsh	r3, [r3, r2]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d003      	beq.n	800a7c0 <sen5x_read_device_status+0x80>
        return error;
 800a7b8:	197b      	adds	r3, r7, r5
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	5e9b      	ldrsh	r3, [r3, r2]
 800a7be:	e008      	b.n	800a7d2 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a7c0:	230c      	movs	r3, #12
 800a7c2:	18fb      	adds	r3, r7, r3
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	f000 f850 	bl	800a86a <sensirion_common_bytes_to_uint32_t>
 800a7ca:	0002      	movs	r2, r0
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	b007      	add	sp, #28
 800a7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7da:	46c0      	nop			@ (mov r8, r8)
 800a7dc:	0000d206 	.word	0x0000d206
 800a7e0:	00004e20 	.word	0x00004e20

0800a7e4 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a7e4:	b590      	push	{r4, r7, lr}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a7ea:	1dbb      	adds	r3, r7, #6
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a7f0:	1dbc      	adds	r4, r7, #6
 800a7f2:	4a12      	ldr	r2, [pc, #72]	@ (800a83c <sen5x_device_reset+0x58>)
 800a7f4:	1dbb      	adds	r3, r7, #6
 800a7f6:	8819      	ldrh	r1, [r3, #0]
 800a7f8:	003b      	movs	r3, r7
 800a7fa:	0018      	movs	r0, r3
 800a7fc:	f000 ffe6 	bl	800b7cc <sensirion_i2c_add_command_to_buffer>
 800a800:	0003      	movs	r3, r0
 800a802:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a804:	1d3c      	adds	r4, r7, #4
 800a806:	1dbb      	adds	r3, r7, #6
 800a808:	881a      	ldrh	r2, [r3, #0]
 800a80a:	003b      	movs	r3, r7
 800a80c:	0019      	movs	r1, r3
 800a80e:	2069      	movs	r0, #105	@ 0x69
 800a810:	f001 f860 	bl	800b8d4 <sensirion_i2c_write_data>
 800a814:	0003      	movs	r3, r0
 800a816:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a818:	1d3b      	adds	r3, r7, #4
 800a81a:	2200      	movs	r2, #0
 800a81c:	5e9b      	ldrsh	r3, [r3, r2]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d003      	beq.n	800a82a <sen5x_device_reset+0x46>
        return error;
 800a822:	1d3b      	adds	r3, r7, #4
 800a824:	2200      	movs	r2, #0
 800a826:	5e9b      	ldrsh	r3, [r3, r2]
 800a828:	e004      	b.n	800a834 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a82a:	4b05      	ldr	r3, [pc, #20]	@ (800a840 <sen5x_device_reset+0x5c>)
 800a82c:	0018      	movs	r0, r3
 800a82e:	f7ff fa59 	bl	8009ce4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a832:	2300      	movs	r3, #0
}
 800a834:	0018      	movs	r0, r3
 800a836:	46bd      	mov	sp, r7
 800a838:	b003      	add	sp, #12
 800a83a:	bd90      	pop	{r4, r7, pc}
 800a83c:	0000d304 	.word	0x0000d304
 800a840:	00030d40 	.word	0x00030d40

0800a844 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	021b      	lsls	r3, r3, #8
 800a852:	b21a      	sxth	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	3301      	adds	r3, #1
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	b21b      	sxth	r3, r3
 800a85c:	4313      	orrs	r3, r2
 800a85e:	b21b      	sxth	r3, r3
 800a860:	b29b      	uxth	r3, r3
}
 800a862:	0018      	movs	r0, r3
 800a864:	46bd      	mov	sp, r7
 800a866:	b002      	add	sp, #8
 800a868:	bd80      	pop	{r7, pc}

0800a86a <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b082      	sub	sp, #8
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	061a      	lsls	r2, r3, #24
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3301      	adds	r3, #1
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	041b      	lsls	r3, r3, #16
 800a880:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3302      	adds	r3, #2
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a88a:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	3203      	adds	r2, #3
 800a890:	7812      	ldrb	r2, [r2, #0]
 800a892:	4313      	orrs	r3, r2
}
 800a894:	0018      	movs	r0, r3
 800a896:	46bd      	mov	sp, r7
 800a898:	b002      	add	sp, #8
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	0018      	movs	r0, r3
 800a8a8:	f7ff ffcc 	bl	800a844 <sensirion_common_bytes_to_uint16_t>
 800a8ac:	0003      	movs	r3, r0
 800a8ae:	b21b      	sxth	r3, r3
}
 800a8b0:	0018      	movs	r0, r3
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	b002      	add	sp, #8
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	1dbb      	adds	r3, r7, #6
 800a8c4:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a8c6:	2316      	movs	r3, #22
 800a8c8:	18fb      	adds	r3, r7, r3
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	801a      	strh	r2, [r3, #0]
 800a8ce:	e00f      	b.n	800a8f0 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a8d0:	2016      	movs	r0, #22
 800a8d2:	183b      	adds	r3, r7, r0
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	18d2      	adds	r2, r2, r3
 800a8da:	183b      	adds	r3, r7, r0
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	68b9      	ldr	r1, [r7, #8]
 800a8e0:	18cb      	adds	r3, r1, r3
 800a8e2:	7812      	ldrb	r2, [r2, #0]
 800a8e4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a8e6:	183b      	adds	r3, r7, r0
 800a8e8:	881a      	ldrh	r2, [r3, #0]
 800a8ea:	183b      	adds	r3, r7, r0
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	801a      	strh	r2, [r3, #0]
 800a8f0:	2316      	movs	r3, #22
 800a8f2:	18fa      	adds	r2, r7, r3
 800a8f4:	1dbb      	adds	r3, r7, #6
 800a8f6:	8812      	ldrh	r2, [r2, #0]
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d3e8      	bcc.n	800a8d0 <sensirion_common_copy_bytes+0x18>
    }
}
 800a8fe:	46c0      	nop			@ (mov r8, r8)
 800a900:	46c0      	nop			@ (mov r8, r8)
 800a902:	46bd      	mov	sp, r7
 800a904:	b006      	add	sp, #24
 800a906:	bd80      	pop	{r7, pc}

0800a908 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2b01      	cmp	r3, #1
 800a924:	d113      	bne.n	800a94e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	22fe      	movs	r2, #254	@ 0xfe
 800a92a:	0592      	lsls	r2, r2, #22
 800a92c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	4a1a      	ldr	r2, [pc, #104]	@ (800a99c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a932:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4a1a      	ldr	r2, [pc, #104]	@ (800a9a0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a938:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	4a19      	ldr	r2, [pc, #100]	@ (800a9a4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a93e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4a19      	ldr	r2, [pc, #100]	@ (800a9a8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a944:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4a18      	ldr	r2, [pc, #96]	@ (800a9ac <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a94a:	61da      	str	r2, [r3, #28]
 800a94c:	e011      	b.n	800a972 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4a17      	ldr	r2, [pc, #92]	@ (800a9b0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a952:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4a17      	ldr	r2, [pc, #92]	@ (800a9b4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a958:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4a16      	ldr	r2, [pc, #88]	@ (800a9b8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a95e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4a16      	ldr	r2, [pc, #88]	@ (800a9bc <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a964:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4a15      	ldr	r2, [pc, #84]	@ (800a9c0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a96a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4a15      	ldr	r2, [pc, #84]	@ (800a9c4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a970:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4a14      	ldr	r2, [pc, #80]	@ (800a9c8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a976:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4a14      	ldr	r2, [pc, #80]	@ (800a9cc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a97c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	4a12      	ldr	r2, [pc, #72]	@ (800a9cc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a982:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4a12      	ldr	r2, [pc, #72]	@ (800a9d0 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a988:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	0018      	movs	r0, r3
 800a98e:	f000 f833 	bl	800a9f8 <GasIndexAlgorithm_reset>
}
 800a992:	46c0      	nop			@ (mov r8, r8)
 800a994:	46bd      	mov	sp, r7
 800a996:	b004      	add	sp, #16
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	46c0      	nop			@ (mov r8, r8)
 800a99c:	00002710 	.word	0x00002710
 800a9a0:	44340000 	.word	0x44340000
 800a9a4:	46859800 	.word	0x46859800
 800a9a8:	46a05000 	.word	0x46a05000
 800a9ac:	41f00000 	.word	0x41f00000
 800a9b0:	42c80000 	.word	0x42c80000
 800a9b4:	00004e20 	.word	0x00004e20
 800a9b8:	43340000 	.word	0x43340000
 800a9bc:	4528c000 	.word	0x4528c000
 800a9c0:	45a32000 	.word	0x45a32000
 800a9c4:	43aa0000 	.word	0x43aa0000
 800a9c8:	43660000 	.word	0x43660000
 800a9cc:	41400000 	.word	0x41400000
 800a9d0:	42480000 	.word	0x42480000

0800a9d4 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a9de:	4a05      	ldr	r2, [pc, #20]	@ (800a9f4 <GasIndexAlgorithm_init+0x20>)
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	f7ff ff8f 	bl	800a908 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a9ea:	46c0      	nop			@ (mov r8, r8)
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b002      	add	sp, #8
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	46c0      	nop			@ (mov r8, r8)
 800a9f4:	44610000 	.word	0x44610000

0800a9f8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	0018      	movs	r0, r3
 800aa16:	f000 f805 	bl	800aa24 <GasIndexAlgorithm__init_instances>
}
 800aa1a:	46c0      	nop			@ (mov r8, r8)
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	b002      	add	sp, #8
 800aa20:	bd80      	pop	{r7, pc}
	...

0800aa24 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800aa24:	b590      	push	{r4, r7, lr}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	0018      	movs	r0, r3
 800aa30:	f000 f8e8 	bl	800ac04 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	0018      	movs	r0, r3
 800aa38:	f000 f9a6 	bl	800ad88 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800aa3c:	1c04      	adds	r4, r0, #0
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	0018      	movs	r0, r3
 800aa42:	f000 f9ab 	bl	800ad9c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800aa46:	1c02      	adds	r2, r0, #0
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	1c21      	adds	r1, r4, #0
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	f000 fc3b 	bl	800b2c8 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d107      	bne.n	800aa6a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800aa5a:	23fe      	movs	r3, #254	@ 0xfe
 800aa5c:	059b      	lsls	r3, r3, #22
 800aa5e:	4a0a      	ldr	r2, [pc, #40]	@ (800aa88 <GasIndexAlgorithm__init_instances+0x64>)
 800aa60:	490a      	ldr	r1, [pc, #40]	@ (800aa8c <GasIndexAlgorithm__init_instances+0x68>)
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fc86 	bl	800b374 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800aa68:	e005      	b.n	800aa76 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800aa6a:	4b09      	ldr	r3, [pc, #36]	@ (800aa90 <GasIndexAlgorithm__init_instances+0x6c>)
 800aa6c:	4a09      	ldr	r2, [pc, #36]	@ (800aa94 <GasIndexAlgorithm__init_instances+0x70>)
 800aa6e:	490a      	ldr	r1, [pc, #40]	@ (800aa98 <GasIndexAlgorithm__init_instances+0x74>)
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fc7f 	bl	800b374 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	0018      	movs	r0, r3
 800aa7a:	f000 fd35 	bl	800b4e8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800aa7e:	46c0      	nop			@ (mov r8, r8)
 800aa80:	46bd      	mov	sp, r7
 800aa82:	b003      	add	sp, #12
 800aa84:	bd90      	pop	{r4, r7, pc}
 800aa86:	46c0      	nop			@ (mov r8, r8)
 800aa88:	bc257a78 	.word	0xbc257a78
 800aa8c:	44198000 	.word	0x44198000
 800aa90:	42c80000 	.word	0x42c80000
 800aa94:	bbd4fdf4 	.word	0xbbd4fdf4
 800aa98:	43550000 	.word	0x43550000

0800aa9c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800aa9c:	b590      	push	{r4, r7, lr}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaac:	4952      	ldr	r1, [pc, #328]	@ (800abf8 <GasIndexAlgorithm_process+0x15c>)
 800aaae:	1c18      	adds	r0, r3, #0
 800aab0:	f7f5 fd48 	bl	8000544 <__aeabi_fcmple>
 800aab4:	1e03      	subs	r3, r0, #0
 800aab6:	d00c      	beq.n	800aad2 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	1c19      	adds	r1, r3, #0
 800aac2:	1c10      	adds	r0, r2, #0
 800aac4:	f7f5 fefc 	bl	80008c0 <__aeabi_fadd>
 800aac8:	1c03      	adds	r3, r0, #0
 800aaca:	1c1a      	adds	r2, r3, #0
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	631a      	str	r2, [r3, #48]	@ 0x30
 800aad0:	e080      	b.n	800abd4 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dd25      	ble.n	800ab24 <GasIndexAlgorithm_process+0x88>
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	4a48      	ldr	r2, [pc, #288]	@ (800abfc <GasIndexAlgorithm_process+0x160>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	dc21      	bgt.n	800ab24 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	dc04      	bgt.n	800aaf4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	60bb      	str	r3, [r7, #8]
 800aaf2:	e00d      	b.n	800ab10 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	4a41      	ldr	r2, [pc, #260]	@ (800ac00 <GasIndexAlgorithm_process+0x164>)
 800aafa:	4694      	mov	ip, r2
 800aafc:	4463      	add	r3, ip
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	dd05      	ble.n	800ab10 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	4a3d      	ldr	r2, [pc, #244]	@ (800ac00 <GasIndexAlgorithm_process+0x164>)
 800ab0a:	4694      	mov	ip, r2
 800ab0c:	4463      	add	r3, ip
 800ab0e:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	0018      	movs	r0, r3
 800ab1a:	f7f6 fd59 	bl	80015d0 <__aeabi_i2f>
 800ab1e:	1c02      	adds	r2, r0, #0
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	0018      	movs	r0, r3
 800ab30:	f000 f945 	bl	800adbe <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800ab34:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800ab36:	d014      	beq.n	800ab62 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	1c11      	adds	r1, r2, #0
 800ab40:	0018      	movs	r0, r3
 800ab42:	f000 fbd1 	bl	800b2e8 <GasIndexAlgorithm__mox_model__process>
 800ab46:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	1c11      	adds	r1, r2, #0
 800ab54:	0018      	movs	r0, r3
 800ab56:	f000 fc25 	bl	800b3a4 <GasIndexAlgorithm__sigmoid_scaled__process>
 800ab5a:	1c02      	adds	r2, r0, #0
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ab60:	e003      	b.n	800ab6a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	689a      	ldr	r2, [r3, #8]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	1c11      	adds	r1, r2, #0
 800ab72:	0018      	movs	r0, r3
 800ab74:	f000 fcec 	bl	800b550 <GasIndexAlgorithm__adaptive_lowpass__process>
 800ab78:	1c02      	adds	r2, r0, #0
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab82:	21fc      	movs	r1, #252	@ 0xfc
 800ab84:	0589      	lsls	r1, r1, #22
 800ab86:	1c18      	adds	r0, r3, #0
 800ab88:	f7f5 fcd2 	bl	8000530 <__aeabi_fcmplt>
 800ab8c:	1e03      	subs	r3, r0, #0
 800ab8e:	d003      	beq.n	800ab98 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	22fc      	movs	r2, #252	@ 0xfc
 800ab94:	0592      	lsls	r2, r2, #22
 800ab96:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	1c18      	adds	r0, r3, #0
 800aba0:	f7f5 fcda 	bl	8000558 <__aeabi_fcmpgt>
 800aba4:	1e03      	subs	r3, r0, #0
 800aba6:	d015      	beq.n	800abd4 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	1c11      	adds	r1, r2, #0
 800abb0:	0018      	movs	r0, r3
 800abb2:	f000 fa4f 	bl	800b054 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	0018      	movs	r0, r3
 800abba:	f000 f8e5 	bl	800ad88 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800abbe:	1c04      	adds	r4, r0, #0
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	0018      	movs	r0, r3
 800abc4:	f000 f8ea 	bl	800ad9c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800abc8:	1c02      	adds	r2, r0, #0
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	1c21      	adds	r1, r4, #0
 800abce:	0018      	movs	r0, r3
 800abd0:	f000 fb7a 	bl	800b2c8 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd8:	21fc      	movs	r1, #252	@ 0xfc
 800abda:	0589      	lsls	r1, r1, #22
 800abdc:	1c18      	adds	r0, r3, #0
 800abde:	f7f5 fe6f 	bl	80008c0 <__aeabi_fadd>
 800abe2:	1c03      	adds	r3, r0, #0
 800abe4:	1c18      	adds	r0, r3, #0
 800abe6:	f7f6 fcd3 	bl	8001590 <__aeabi_f2iz>
 800abea:	0002      	movs	r2, r0
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	601a      	str	r2, [r3, #0]
    return;
 800abf0:	46c0      	nop			@ (mov r8, r8)
}
 800abf2:	46bd      	mov	sp, r7
 800abf4:	b005      	add	sp, #20
 800abf6:	bd90      	pop	{r4, r7, pc}
 800abf8:	42340000 	.word	0x42340000
 800abfc:	0000fde7 	.word	0x0000fde7
 800ac00:	00007fff 	.word	0x00007fff

0800ac04 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800ac04:	b5b0      	push	{r4, r5, r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	223c      	movs	r2, #60	@ 0x3c
 800ac10:	2100      	movs	r1, #0
 800ac12:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	4952      	ldr	r1, [pc, #328]	@ (800ad78 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ac2e:	1c18      	adds	r0, r3, #0
 800ac30:	f7f5 ffd0 	bl	8000bd4 <__aeabi_fdiv>
 800ac34:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ac36:	2188      	movs	r1, #136	@ 0x88
 800ac38:	05c9      	lsls	r1, r1, #23
 800ac3a:	1c18      	adds	r0, r3, #0
 800ac3c:	f7f6 f9b0 	bl	8000fa0 <__aeabi_fmul>
 800ac40:	1c03      	adds	r3, r0, #0
 800ac42:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	494a      	ldr	r1, [pc, #296]	@ (800ad78 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ac4e:	1c18      	adds	r0, r3, #0
 800ac50:	f7f5 ffc0 	bl	8000bd4 <__aeabi_fdiv>
 800ac54:	1c03      	adds	r3, r0, #0
 800ac56:	1c19      	adds	r1, r3, #0
 800ac58:	1c20      	adds	r0, r4, #0
 800ac5a:	f7f5 fe31 	bl	80008c0 <__aeabi_fadd>
 800ac5e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ac60:	1c19      	adds	r1, r3, #0
 800ac62:	1c28      	adds	r0, r5, #0
 800ac64:	f7f5 ffb6 	bl	8000bd4 <__aeabi_fdiv>
 800ac68:	1c03      	adds	r3, r0, #0
 800ac6a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	4940      	ldr	r1, [pc, #256]	@ (800ad78 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ac76:	1c18      	adds	r0, r3, #0
 800ac78:	f7f5 ffac 	bl	8000bd4 <__aeabi_fdiv>
 800ac7c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ac7e:	2185      	movs	r1, #133	@ 0x85
 800ac80:	05c9      	lsls	r1, r1, #23
 800ac82:	1c18      	adds	r0, r3, #0
 800ac84:	f7f6 f98c 	bl	8000fa0 <__aeabi_fmul>
 800ac88:	1c03      	adds	r3, r0, #0
 800ac8a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	4938      	ldr	r1, [pc, #224]	@ (800ad78 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ac96:	1c18      	adds	r0, r3, #0
 800ac98:	f7f5 ff9c 	bl	8000bd4 <__aeabi_fdiv>
 800ac9c:	1c03      	adds	r3, r0, #0
 800ac9e:	1c19      	adds	r1, r3, #0
 800aca0:	1c20      	adds	r0, r4, #0
 800aca2:	f7f5 fe0d 	bl	80008c0 <__aeabi_fadd>
 800aca6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800aca8:	1c19      	adds	r1, r3, #0
 800acaa:	1c28      	adds	r0, r5, #0
 800acac:	f7f5 ff92 	bl	8000bd4 <__aeabi_fdiv>
 800acb0:	1c03      	adds	r3, r0, #0
 800acb2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d118      	bne.n	800acf2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800acc4:	2188      	movs	r1, #136	@ 0x88
 800acc6:	05c9      	lsls	r1, r1, #23
 800acc8:	1c18      	adds	r0, r3, #0
 800acca:	f7f6 f969 	bl	8000fa0 <__aeabi_fmul>
 800acce:	1c03      	adds	r3, r0, #0
 800acd0:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800acd6:	4929      	ldr	r1, [pc, #164]	@ (800ad7c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800acd8:	1c18      	adds	r0, r3, #0
 800acda:	f7f5 fdf1 	bl	80008c0 <__aeabi_fadd>
 800acde:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ace0:	1c19      	adds	r1, r3, #0
 800ace2:	1c20      	adds	r0, r4, #0
 800ace4:	f7f5 ff76 	bl	8000bd4 <__aeabi_fdiv>
 800ace8:	1c03      	adds	r3, r0, #0
 800acea:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	655a      	str	r2, [r3, #84]	@ 0x54
 800acf0:	e017      	b.n	800ad22 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800acf6:	2188      	movs	r1, #136	@ 0x88
 800acf8:	05c9      	lsls	r1, r1, #23
 800acfa:	1c18      	adds	r0, r3, #0
 800acfc:	f7f6 f950 	bl	8000fa0 <__aeabi_fmul>
 800ad00:	1c03      	adds	r3, r0, #0
 800ad02:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800ad08:	491d      	ldr	r1, [pc, #116]	@ (800ad80 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800ad0a:	1c18      	adds	r0, r3, #0
 800ad0c:	f7f5 fdd8 	bl	80008c0 <__aeabi_fadd>
 800ad10:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ad12:	1c19      	adds	r1, r3, #0
 800ad14:	1c20      	adds	r0, r4, #0
 800ad16:	f7f5 ff5d 	bl	8000bd4 <__aeabi_fdiv>
 800ad1a:	1c03      	adds	r3, r0, #0
 800ad1c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ad26:	2185      	movs	r1, #133	@ 0x85
 800ad28:	05c9      	lsls	r1, r1, #23
 800ad2a:	1c18      	adds	r0, r3, #0
 800ad2c:	f7f6 f938 	bl	8000fa0 <__aeabi_fmul>
 800ad30:	1c03      	adds	r3, r0, #0
 800ad32:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	4912      	ldr	r1, [pc, #72]	@ (800ad84 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800ad3a:	1c18      	adds	r0, r3, #0
 800ad3c:	f7f5 fdc0 	bl	80008c0 <__aeabi_fadd>
 800ad40:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800ad42:	1c19      	adds	r1, r3, #0
 800ad44:	1c20      	adds	r0, r4, #0
 800ad46:	f7f5 ff45 	bl	8000bd4 <__aeabi_fdiv>
 800ad4a:	1c03      	adds	r3, r0, #0
 800ad4c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800ad70:	46c0      	nop			@ (mov r8, r8)
 800ad72:	46bd      	mov	sp, r7
 800ad74:	b002      	add	sp, #8
 800ad76:	bdb0      	pop	{r4, r5, r7, pc}
 800ad78:	45610000 	.word	0x45610000
 800ad7c:	44960000 	.word	0x44960000
 800ad80:	41a00000 	.word	0x41a00000
 800ad84:	451c4000 	.word	0x451c4000

0800ad88 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800ad94:	1c18      	adds	r0, r3, #0
 800ad96:	46bd      	mov	sp, r7
 800ad98:	b002      	add	sp, #8
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800adac:	1c19      	adds	r1, r3, #0
 800adae:	1c10      	adds	r0, r2, #0
 800adb0:	f7f5 fd86 	bl	80008c0 <__aeabi_fadd>
 800adb4:	1c03      	adds	r3, r0, #0
}
 800adb6:	1c18      	adds	r0, r3, #0
 800adb8:	46bd      	mov	sp, r7
 800adba:	b002      	add	sp, #8
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b082      	sub	sp, #8
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	223c      	movs	r2, #60	@ 0x3c
 800adca:	5c9b      	ldrb	r3, [r3, r2]
}
 800adcc:	0018      	movs	r0, r3
 800adce:	46bd      	mov	sp, r7
 800add0:	b002      	add	sp, #8
 800add2:	bd80      	pop	{r7, pc}

0800add4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800add4:	b5b0      	push	{r4, r5, r7, lr}
 800add6:	b08c      	sub	sp, #48	@ 0x30
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800ade0:	1c19      	adds	r1, r3, #0
 800ade2:	4895      	ldr	r0, [pc, #596]	@ (800b038 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800ade4:	f7f6 fa1a 	bl	800121c <__aeabi_fsub>
 800ade8:	1c03      	adds	r3, r0, #0
 800adea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adf0:	1c19      	adds	r1, r3, #0
 800adf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adf4:	f7f5 fbb0 	bl	8000558 <__aeabi_fcmpgt>
 800adf8:	1e03      	subs	r3, r0, #0
 800adfa:	d00b      	beq.n	800ae14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ae04:	1c19      	adds	r1, r3, #0
 800ae06:	1c10      	adds	r0, r2, #0
 800ae08:	f7f5 fd5a 	bl	80008c0 <__aeabi_fadd>
 800ae0c:	1c03      	adds	r3, r0, #0
 800ae0e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae18:	1c19      	adds	r1, r3, #0
 800ae1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae1c:	f7f5 fb9c 	bl	8000558 <__aeabi_fcmpgt>
 800ae20:	1e03      	subs	r3, r0, #0
 800ae22:	d00b      	beq.n	800ae3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800ae2c:	1c19      	adds	r1, r3, #0
 800ae2e:	1c10      	adds	r0, r2, #0
 800ae30:	f7f5 fd46 	bl	80008c0 <__aeabi_fadd>
 800ae34:	1c03      	adds	r3, r0, #0
 800ae36:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6959      	ldr	r1, [r3, #20]
 800ae40:	4a7e      	ldr	r2, [pc, #504]	@ (800b03c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	0018      	movs	r0, r3
 800ae46:	f000 f9f1 	bl	800b22c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	1c11      	adds	r1, r2, #0
 800ae52:	0018      	movs	r0, r3
 800ae54:	f000 f9fa 	bl	800b24c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ae58:	1c03      	adds	r3, r0, #0
 800ae5a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800ae68:	1c19      	adds	r1, r3, #0
 800ae6a:	1c10      	adds	r0, r2, #0
 800ae6c:	f7f6 f9d6 	bl	800121c <__aeabi_fsub>
 800ae70:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800ae72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae74:	1c18      	adds	r0, r3, #0
 800ae76:	f7f6 f893 	bl	8000fa0 <__aeabi_fmul>
 800ae7a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ae7c:	1c19      	adds	r1, r3, #0
 800ae7e:	1c20      	adds	r0, r4, #0
 800ae80:	f7f5 fd1e 	bl	80008c0 <__aeabi_fadd>
 800ae84:	1c03      	adds	r3, r0, #0
 800ae86:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ae90:	1c19      	adds	r1, r3, #0
 800ae92:	486b      	ldr	r0, [pc, #428]	@ (800b040 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ae94:	f7f6 f9c2 	bl	800121c <__aeabi_fsub>
 800ae98:	1c03      	adds	r3, r0, #0
 800ae9a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	1c11      	adds	r1, r2, #0
 800aea4:	0018      	movs	r0, r3
 800aea6:	f000 f9d1 	bl	800b24c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aeaa:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800aeac:	1c19      	adds	r1, r3, #0
 800aeae:	1c28      	adds	r0, r5, #0
 800aeb0:	f7f6 f876 	bl	8000fa0 <__aeabi_fmul>
 800aeb4:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800aeb6:	1c19      	adds	r1, r3, #0
 800aeb8:	1c20      	adds	r0, r4, #0
 800aeba:	f7f5 fd01 	bl	80008c0 <__aeabi_fadd>
 800aebe:	1c03      	adds	r3, r0, #0
 800aec0:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aec2:	4a60      	ldr	r2, [pc, #384]	@ (800b044 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800aec4:	6a39      	ldr	r1, [r7, #32]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	0018      	movs	r0, r3
 800aeca:	f000 f9af 	bl	800b22c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	1c11      	adds	r1, r2, #0
 800aed6:	0018      	movs	r0, r3
 800aed8:	f000 f9b8 	bl	800b24c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aedc:	1c03      	adds	r3, r0, #0
 800aede:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800aee0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aee2:	69f8      	ldr	r0, [r7, #28]
 800aee4:	f7f6 f85c 	bl	8000fa0 <__aeabi_fmul>
 800aee8:	1c03      	adds	r3, r0, #0
 800aeea:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6999      	ldr	r1, [r3, #24]
 800aef4:	4a51      	ldr	r2, [pc, #324]	@ (800b03c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	0018      	movs	r0, r3
 800aefa:	f000 f997 	bl	800b22c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	1c11      	adds	r1, r2, #0
 800af06:	0018      	movs	r0, r3
 800af08:	f000 f9a0 	bl	800b24c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800af0c:	1c03      	adds	r3, r0, #0
 800af0e:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800af1c:	1c19      	adds	r1, r3, #0
 800af1e:	1c10      	adds	r0, r2, #0
 800af20:	f7f6 f97c 	bl	800121c <__aeabi_fsub>
 800af24:	1c03      	adds	r3, r0, #0
 800af26:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800af28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af2a:	69b8      	ldr	r0, [r7, #24]
 800af2c:	f7f6 f976 	bl	800121c <__aeabi_fsub>
 800af30:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800af32:	1c19      	adds	r1, r3, #0
 800af34:	1c28      	adds	r0, r5, #0
 800af36:	f7f6 f833 	bl	8000fa0 <__aeabi_fmul>
 800af3a:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800af3c:	1c19      	adds	r1, r3, #0
 800af3e:	1c20      	adds	r0, r4, #0
 800af40:	f7f5 fcbe 	bl	80008c0 <__aeabi_fadd>
 800af44:	1c03      	adds	r3, r0, #0
 800af46:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800af50:	1c19      	adds	r1, r3, #0
 800af52:	483b      	ldr	r0, [pc, #236]	@ (800b040 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800af54:	f7f6 f962 	bl	800121c <__aeabi_fsub>
 800af58:	1c03      	adds	r3, r0, #0
 800af5a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	1c11      	adds	r1, r2, #0
 800af64:	0018      	movs	r0, r3
 800af66:	f000 f971 	bl	800b24c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800af6a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800af6c:	1c19      	adds	r1, r3, #0
 800af6e:	1c28      	adds	r0, r5, #0
 800af70:	f7f6 f816 	bl	8000fa0 <__aeabi_fmul>
 800af74:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800af76:	1c19      	adds	r1, r3, #0
 800af78:	1c20      	adds	r0, r4, #0
 800af7a:	f7f5 fca1 	bl	80008c0 <__aeabi_fadd>
 800af7e:	1c03      	adds	r3, r0, #0
 800af80:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800af82:	4a30      	ldr	r2, [pc, #192]	@ (800b044 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800af84:	6939      	ldr	r1, [r7, #16]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	0018      	movs	r0, r3
 800af8a:	f000 f94f 	bl	800b22c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	1c11      	adds	r1, r2, #0
 800af96:	0018      	movs	r0, r3
 800af98:	f000 f958 	bl	800b24c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800af9c:	1c03      	adds	r3, r0, #0
 800af9e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800afa0:	6979      	ldr	r1, [r7, #20]
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f7f5 fffc 	bl	8000fa0 <__aeabi_fmul>
 800afa8:	1c03      	adds	r3, r0, #0
 800afaa:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	4923      	ldr	r1, [pc, #140]	@ (800b048 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800afba:	1c18      	adds	r0, r3, #0
 800afbc:	f7f5 fe0a 	bl	8000bd4 <__aeabi_fdiv>
 800afc0:	1c03      	adds	r3, r0, #0
 800afc2:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800afc4:	69f9      	ldr	r1, [r7, #28]
 800afc6:	20fe      	movs	r0, #254	@ 0xfe
 800afc8:	0580      	lsls	r0, r0, #22
 800afca:	f7f6 f927 	bl	800121c <__aeabi_fsub>
 800afce:	1c03      	adds	r3, r0, #0
 800afd0:	491e      	ldr	r1, [pc, #120]	@ (800b04c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800afd2:	1c18      	adds	r0, r3, #0
 800afd4:	f7f5 ffe4 	bl	8000fa0 <__aeabi_fmul>
 800afd8:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800afda:	491d      	ldr	r1, [pc, #116]	@ (800b050 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800afdc:	1c18      	adds	r0, r3, #0
 800afde:	f7f6 f91d 	bl	800121c <__aeabi_fsub>
 800afe2:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800afe4:	1c19      	adds	r1, r3, #0
 800afe6:	1c28      	adds	r0, r5, #0
 800afe8:	f7f5 ffda 	bl	8000fa0 <__aeabi_fmul>
 800afec:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800afee:	1c19      	adds	r1, r3, #0
 800aff0:	1c20      	adds	r0, r4, #0
 800aff2:	f7f5 fc65 	bl	80008c0 <__aeabi_fadd>
 800aff6:	1c03      	adds	r3, r0, #0
 800aff8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b002:	2100      	movs	r1, #0
 800b004:	1c18      	adds	r0, r3, #0
 800b006:	f7f5 fa93 	bl	8000530 <__aeabi_fcmplt>
 800b00a:	1e03      	subs	r3, r0, #0
 800b00c:	d002      	beq.n	800b014 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b01c:	1c19      	adds	r1, r3, #0
 800b01e:	1c10      	adds	r0, r2, #0
 800b020:	f7f5 fa9a 	bl	8000558 <__aeabi_fcmpgt>
 800b024:	1e03      	subs	r3, r0, #0
 800b026:	d100      	bne.n	800b02a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800b028:	e002      	b.n	800b030 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b030:	46c0      	nop			@ (mov r8, r8)
 800b032:	46bd      	mov	sp, r7
 800b034:	b00c      	add	sp, #48	@ 0x30
 800b036:	bdb0      	pop	{r4, r5, r7, pc}
 800b038:	46fffe00 	.word	0x46fffe00
 800b03c:	3c23d70a 	.word	0x3c23d70a
 800b040:	43ff0000 	.word	0x43ff0000
 800b044:	3db851ec 	.word	0x3db851ec
 800b048:	42700000 	.word	0x42700000
 800b04c:	3fa66666 	.word	0x3fa66666
 800b050:	3e99999a 	.word	0x3e99999a

0800b054 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800b054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	223c      	movs	r2, #60	@ 0x3c
 800b062:	5c9b      	ldrb	r3, [r3, r2]
 800b064:	2201      	movs	r2, #1
 800b066:	4053      	eors	r3, r2
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00a      	beq.n	800b084 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	223c      	movs	r2, #60	@ 0x3c
 800b072:	2101      	movs	r1, #1
 800b074:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	683a      	ldr	r2, [r7, #0]
 800b07a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800b082:	e0c8      	b.n	800b216 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b088:	4965      	ldr	r1, [pc, #404]	@ (800b220 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800b08a:	1c18      	adds	r0, r3, #0
 800b08c:	f7f5 fa6e 	bl	800056c <__aeabi_fcmpge>
 800b090:	1e03      	subs	r3, r0, #0
 800b092:	d107      	bne.n	800b0a4 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800b098:	4962      	ldr	r1, [pc, #392]	@ (800b224 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800b09a:	1c18      	adds	r0, r3, #0
 800b09c:	f7f5 fa52 	bl	8000544 <__aeabi_fcmple>
 800b0a0:	1e03      	subs	r3, r0, #0
 800b0a2:	d00e      	beq.n	800b0c2 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b0ac:	1c19      	adds	r1, r3, #0
 800b0ae:	1c10      	adds	r0, r2, #0
 800b0b0:	f7f5 fc06 	bl	80008c0 <__aeabi_fadd>
 800b0b4:	1c03      	adds	r3, r0, #0
 800b0b6:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0c6:	1c19      	adds	r1, r3, #0
 800b0c8:	6838      	ldr	r0, [r7, #0]
 800b0ca:	f7f6 f8a7 	bl	800121c <__aeabi_fsub>
 800b0ce:	1c03      	adds	r3, r0, #0
 800b0d0:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	0018      	movs	r0, r3
 800b0d6:	f7ff fe7d 	bl	800add4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0de:	1c19      	adds	r1, r3, #0
 800b0e0:	6838      	ldr	r0, [r7, #0]
 800b0e2:	f7f6 f89b 	bl	800121c <__aeabi_fsub>
 800b0e6:	1c03      	adds	r3, r0, #0
 800b0e8:	2185      	movs	r1, #133	@ 0x85
 800b0ea:	05c9      	lsls	r1, r1, #23
 800b0ec:	1c18      	adds	r0, r3, #0
 800b0ee:	f7f5 fd71 	bl	8000bd4 <__aeabi_fdiv>
 800b0f2:	1c03      	adds	r3, r0, #0
 800b0f4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f7f5 fa19 	bl	8000530 <__aeabi_fcmplt>
 800b0fe:	1e03      	subs	r3, r0, #0
 800b100:	d008      	beq.n	800b114 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b106:	68f9      	ldr	r1, [r7, #12]
 800b108:	1c18      	adds	r0, r3, #0
 800b10a:	f7f6 f887 	bl	800121c <__aeabi_fsub>
 800b10e:	1c03      	adds	r3, r0, #0
 800b110:	617b      	str	r3, [r7, #20]
 800b112:	e007      	b.n	800b124 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b118:	1c19      	adds	r1, r3, #0
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7f5 fbd0 	bl	80008c0 <__aeabi_fadd>
 800b120:	1c03      	adds	r3, r0, #0
 800b122:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800b124:	23fe      	movs	r3, #254	@ 0xfe
 800b126:	059b      	lsls	r3, r3, #22
 800b128:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800b12a:	493f      	ldr	r1, [pc, #252]	@ (800b228 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b12c:	6978      	ldr	r0, [r7, #20]
 800b12e:	f7f5 fa13 	bl	8000558 <__aeabi_fcmpgt>
 800b132:	1e03      	subs	r3, r0, #0
 800b134:	d010      	beq.n	800b158 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800b136:	493c      	ldr	r1, [pc, #240]	@ (800b228 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b138:	6978      	ldr	r0, [r7, #20]
 800b13a:	f7f5 fd4b 	bl	8000bd4 <__aeabi_fdiv>
 800b13e:	1c03      	adds	r3, r0, #0
 800b140:	1c1c      	adds	r4, r3, #0
 800b142:	4939      	ldr	r1, [pc, #228]	@ (800b228 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b144:	6978      	ldr	r0, [r7, #20]
 800b146:	f7f5 fd45 	bl	8000bd4 <__aeabi_fdiv>
 800b14a:	1c03      	adds	r3, r0, #0
 800b14c:	1c19      	adds	r1, r3, #0
 800b14e:	1c20      	adds	r0, r4, #0
 800b150:	f7f5 ff26 	bl	8000fa0 <__aeabi_fmul>
 800b154:	1c03      	adds	r3, r0, #0
 800b156:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800b15c:	1c19      	adds	r1, r3, #0
 800b15e:	2085      	movs	r0, #133	@ 0x85
 800b160:	05c0      	lsls	r0, r0, #23
 800b162:	f7f6 f85b 	bl	800121c <__aeabi_fsub>
 800b166:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800b168:	6939      	ldr	r1, [r7, #16]
 800b16a:	1c18      	adds	r0, r3, #0
 800b16c:	f7f5 ff18 	bl	8000fa0 <__aeabi_fmul>
 800b170:	1c03      	adds	r3, r0, #0
 800b172:	1c18      	adds	r0, r3, #0
 800b174:	f018 f820 	bl	80231b8 <sqrtf>
 800b178:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b182:	2185      	movs	r1, #133	@ 0x85
 800b184:	05c9      	lsls	r1, r1, #23
 800b186:	6938      	ldr	r0, [r7, #16]
 800b188:	f7f5 ff0a 	bl	8000fa0 <__aeabi_fmul>
 800b18c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800b18e:	1c19      	adds	r1, r3, #0
 800b190:	1c28      	adds	r0, r5, #0
 800b192:	f7f5 fd1f 	bl	8000bd4 <__aeabi_fdiv>
 800b196:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800b198:	1c19      	adds	r1, r3, #0
 800b19a:	1c20      	adds	r0, r4, #0
 800b19c:	f7f5 ff00 	bl	8000fa0 <__aeabi_fmul>
 800b1a0:	1c03      	adds	r3, r0, #0
 800b1a2:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1a8:	68f9      	ldr	r1, [r7, #12]
 800b1aa:	1c18      	adds	r0, r3, #0
 800b1ac:	f7f5 fef8 	bl	8000fa0 <__aeabi_fmul>
 800b1b0:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800b1b2:	6939      	ldr	r1, [r7, #16]
 800b1b4:	1c18      	adds	r0, r3, #0
 800b1b6:	f7f5 fd0d 	bl	8000bd4 <__aeabi_fdiv>
 800b1ba:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800b1bc:	68f9      	ldr	r1, [r7, #12]
 800b1be:	1c18      	adds	r0, r3, #0
 800b1c0:	f7f5 feee 	bl	8000fa0 <__aeabi_fmul>
 800b1c4:	1c03      	adds	r3, r0, #0
             sqrtf(
 800b1c6:	1c19      	adds	r1, r3, #0
 800b1c8:	1c20      	adds	r0, r4, #0
 800b1ca:	f7f5 fb79 	bl	80008c0 <__aeabi_fadd>
 800b1ce:	1c03      	adds	r3, r0, #0
 800b1d0:	1c18      	adds	r0, r3, #0
 800b1d2:	f017 fff1 	bl	80231b8 <sqrtf>
 800b1d6:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800b1d8:	1c19      	adds	r1, r3, #0
 800b1da:	1c30      	adds	r0, r6, #0
 800b1dc:	f7f5 fee0 	bl	8000fa0 <__aeabi_fmul>
 800b1e0:	1c03      	adds	r3, r0, #0
 800b1e2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1f0:	68f9      	ldr	r1, [r7, #12]
 800b1f2:	1c18      	adds	r0, r3, #0
 800b1f4:	f7f5 fed4 	bl	8000fa0 <__aeabi_fmul>
 800b1f8:	1c03      	adds	r3, r0, #0
 800b1fa:	2182      	movs	r1, #130	@ 0x82
 800b1fc:	05c9      	lsls	r1, r1, #23
 800b1fe:	1c18      	adds	r0, r3, #0
 800b200:	f7f5 fce8 	bl	8000bd4 <__aeabi_fdiv>
 800b204:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800b206:	1c19      	adds	r1, r3, #0
 800b208:	1c20      	adds	r0, r4, #0
 800b20a:	f7f5 fb59 	bl	80008c0 <__aeabi_fadd>
 800b20e:	1c03      	adds	r3, r0, #0
 800b210:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b216:	46c0      	nop			@ (mov r8, r8)
 800b218:	46bd      	mov	sp, r7
 800b21a:	b007      	add	sp, #28
 800b21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b21e:	46c0      	nop			@ (mov r8, r8)
 800b220:	42c80000 	.word	0x42c80000
 800b224:	c2c80000 	.word	0xc2c80000
 800b228:	44b40000 	.word	0x44b40000

0800b22c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b244:	46c0      	nop			@ (mov r8, r8)
 800b246:	46bd      	mov	sp, r7
 800b248:	b004      	add	sp, #16
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800b24c:	b590      	push	{r4, r7, lr}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b25e:	1c19      	adds	r1, r3, #0
 800b260:	6838      	ldr	r0, [r7, #0]
 800b262:	f7f5 ffdb 	bl	800121c <__aeabi_fsub>
 800b266:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800b268:	1c19      	adds	r1, r3, #0
 800b26a:	1c20      	adds	r0, r4, #0
 800b26c:	f7f5 fe98 	bl	8000fa0 <__aeabi_fmul>
 800b270:	1c03      	adds	r3, r0, #0
 800b272:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800b274:	4912      	ldr	r1, [pc, #72]	@ (800b2c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7f5 f95a 	bl	8000530 <__aeabi_fcmplt>
 800b27c:	1e03      	subs	r3, r0, #0
 800b27e:	d002      	beq.n	800b286 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800b280:	23fe      	movs	r3, #254	@ 0xfe
 800b282:	059b      	lsls	r3, r3, #22
 800b284:	e018      	b.n	800b2b8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800b286:	490f      	ldr	r1, [pc, #60]	@ (800b2c4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7f5 f965 	bl	8000558 <__aeabi_fcmpgt>
 800b28e:	1e03      	subs	r3, r0, #0
 800b290:	d001      	beq.n	800b296 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800b292:	2300      	movs	r3, #0
 800b294:	e010      	b.n	800b2b8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	1c18      	adds	r0, r3, #0
 800b29a:	f017 ff65 	bl	8023168 <expf>
 800b29e:	1c03      	adds	r3, r0, #0
 800b2a0:	21fe      	movs	r1, #254	@ 0xfe
 800b2a2:	0589      	lsls	r1, r1, #22
 800b2a4:	1c18      	adds	r0, r3, #0
 800b2a6:	f7f5 fb0b 	bl	80008c0 <__aeabi_fadd>
 800b2aa:	1c03      	adds	r3, r0, #0
 800b2ac:	1c19      	adds	r1, r3, #0
 800b2ae:	20fe      	movs	r0, #254	@ 0xfe
 800b2b0:	0580      	lsls	r0, r0, #22
 800b2b2:	f7f5 fc8f 	bl	8000bd4 <__aeabi_fdiv>
 800b2b6:	1c03      	adds	r3, r0, #0
    }
}
 800b2b8:	1c18      	adds	r0, r3, #0
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	b005      	add	sp, #20
 800b2be:	bd90      	pop	{r4, r7, pc}
 800b2c0:	c2480000 	.word	0xc2480000
 800b2c4:	42480000 	.word	0x42480000

0800b2c8 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b2e0:	46c0      	nop			@ (mov r8, r8)
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	b004      	add	sp, #16
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800b2e8:	b590      	push	{r4, r7, lr}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d114      	bne.n	800b324 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2fe:	1c19      	adds	r1, r3, #0
 800b300:	6838      	ldr	r0, [r7, #0]
 800b302:	f7f5 ff8b 	bl	800121c <__aeabi_fsub>
 800b306:	1c03      	adds	r3, r0, #0
 800b308:	4918      	ldr	r1, [pc, #96]	@ (800b36c <GasIndexAlgorithm__mox_model__process+0x84>)
 800b30a:	1c18      	adds	r0, r3, #0
 800b30c:	f7f5 fc62 	bl	8000bd4 <__aeabi_fdiv>
 800b310:	1c03      	adds	r3, r0, #0
 800b312:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800b318:	1c19      	adds	r1, r3, #0
 800b31a:	1c10      	adds	r0, r2, #0
 800b31c:	f7f5 fe40 	bl	8000fa0 <__aeabi_fmul>
 800b320:	1c03      	adds	r3, r0, #0
 800b322:	e01f      	b.n	800b364 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b328:	1c19      	adds	r1, r3, #0
 800b32a:	6838      	ldr	r0, [r7, #0]
 800b32c:	f7f5 ff76 	bl	800121c <__aeabi_fsub>
 800b330:	1c03      	adds	r3, r0, #0
 800b332:	1c1a      	adds	r2, r3, #0
 800b334:	2380      	movs	r3, #128	@ 0x80
 800b336:	061b      	lsls	r3, r3, #24
 800b338:	4053      	eors	r3, r2
 800b33a:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b340:	490b      	ldr	r1, [pc, #44]	@ (800b370 <GasIndexAlgorithm__mox_model__process+0x88>)
 800b342:	1c18      	adds	r0, r3, #0
 800b344:	f7f5 fabc 	bl	80008c0 <__aeabi_fadd>
 800b348:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b34a:	1c19      	adds	r1, r3, #0
 800b34c:	1c20      	adds	r0, r4, #0
 800b34e:	f7f5 fc41 	bl	8000bd4 <__aeabi_fdiv>
 800b352:	1c03      	adds	r3, r0, #0
 800b354:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800b35a:	1c19      	adds	r1, r3, #0
 800b35c:	1c10      	adds	r0, r2, #0
 800b35e:	f7f5 fe1f 	bl	8000fa0 <__aeabi_fmul>
 800b362:	1c03      	adds	r3, r0, #0
    }
}
 800b364:	1c18      	adds	r0, r3, #0
 800b366:	46bd      	mov	sp, r7
 800b368:	b003      	add	sp, #12
 800b36a:	bd90      	pop	{r4, r7, pc}
 800b36c:	44fa0000 	.word	0x44fa0000
 800b370:	435c0000 	.word	0x435c0000

0800b374 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
 800b380:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2180      	movs	r1, #128	@ 0x80
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2184      	movs	r1, #132	@ 0x84
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2188      	movs	r1, #136	@ 0x88
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	505a      	str	r2, [r3, r1]
}
 800b39a:	46c0      	nop			@ (mov r8, r8)
 800b39c:	46bd      	mov	sp, r7
 800b39e:	b004      	add	sp, #16
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800b3a4:	b590      	push	{r4, r7, lr}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2280      	movs	r2, #128	@ 0x80
 800b3b2:	589c      	ldr	r4, [r3, r2]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2284      	movs	r2, #132	@ 0x84
 800b3b8:	589b      	ldr	r3, [r3, r2]
 800b3ba:	1c19      	adds	r1, r3, #0
 800b3bc:	6838      	ldr	r0, [r7, #0]
 800b3be:	f7f5 ff2d 	bl	800121c <__aeabi_fsub>
 800b3c2:	1c03      	adds	r3, r0, #0
 800b3c4:	1c19      	adds	r1, r3, #0
 800b3c6:	1c20      	adds	r0, r4, #0
 800b3c8:	f7f5 fdea 	bl	8000fa0 <__aeabi_fmul>
 800b3cc:	1c03      	adds	r3, r0, #0
 800b3ce:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800b3d0:	4940      	ldr	r1, [pc, #256]	@ (800b4d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800b3d2:	68b8      	ldr	r0, [r7, #8]
 800b3d4:	f7f5 f8ac 	bl	8000530 <__aeabi_fcmplt>
 800b3d8:	1e03      	subs	r3, r0, #0
 800b3da:	d001      	beq.n	800b3e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800b3dc:	4b3e      	ldr	r3, [pc, #248]	@ (800b4d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b3de:	e075      	b.n	800b4cc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800b3e0:	493e      	ldr	r1, [pc, #248]	@ (800b4dc <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800b3e2:	68b8      	ldr	r0, [r7, #8]
 800b3e4:	f7f5 f8b8 	bl	8000558 <__aeabi_fcmpgt>
 800b3e8:	1e03      	subs	r3, r0, #0
 800b3ea:	d001      	beq.n	800b3f0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	e06d      	b.n	800b4cc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	6838      	ldr	r0, [r7, #0]
 800b3f4:	f7f5 f8ba 	bl	800056c <__aeabi_fcmpge>
 800b3f8:	1e03      	subs	r3, r0, #0
 800b3fa:	d047      	beq.n	800b48c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2288      	movs	r2, #136	@ 0x88
 800b400:	589b      	ldr	r3, [r3, r2]
 800b402:	21fe      	movs	r1, #254	@ 0xfe
 800b404:	0589      	lsls	r1, r1, #22
 800b406:	1c18      	adds	r0, r3, #0
 800b408:	f7f5 f88c 	bl	8000524 <__aeabi_fcmpeq>
 800b40c:	1e03      	subs	r3, r0, #0
 800b40e:	d00e      	beq.n	800b42e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	1c19      	adds	r1, r3, #0
 800b416:	20fe      	movs	r0, #254	@ 0xfe
 800b418:	0580      	lsls	r0, r0, #22
 800b41a:	f7f5 feff 	bl	800121c <__aeabi_fsub>
 800b41e:	1c03      	adds	r3, r0, #0
 800b420:	492f      	ldr	r1, [pc, #188]	@ (800b4e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800b422:	1c18      	adds	r0, r3, #0
 800b424:	f7f5 fdbc 	bl	8000fa0 <__aeabi_fmul>
 800b428:	1c03      	adds	r3, r0, #0
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	e012      	b.n	800b454 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	492c      	ldr	r1, [pc, #176]	@ (800b4e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800b434:	1c18      	adds	r0, r3, #0
 800b436:	f7f5 fdb3 	bl	8000fa0 <__aeabi_fmul>
 800b43a:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800b43c:	1c19      	adds	r1, r3, #0
 800b43e:	4826      	ldr	r0, [pc, #152]	@ (800b4d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b440:	f7f5 feec 	bl	800121c <__aeabi_fsub>
 800b444:	1c03      	adds	r3, r0, #0
 800b446:	2181      	movs	r1, #129	@ 0x81
 800b448:	05c9      	lsls	r1, r1, #23
 800b44a:	1c18      	adds	r0, r3, #0
 800b44c:	f7f5 fbc2 	bl	8000bd4 <__aeabi_fdiv>
 800b450:	1c03      	adds	r3, r0, #0
 800b452:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b454:	4920      	ldr	r1, [pc, #128]	@ (800b4d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f7f5 fa32 	bl	80008c0 <__aeabi_fadd>
 800b45c:	1c03      	adds	r3, r0, #0
 800b45e:	1c1c      	adds	r4, r3, #0
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	1c18      	adds	r0, r3, #0
 800b464:	f017 fe80 	bl	8023168 <expf>
 800b468:	1c03      	adds	r3, r0, #0
 800b46a:	21fe      	movs	r1, #254	@ 0xfe
 800b46c:	0589      	lsls	r1, r1, #22
 800b46e:	1c18      	adds	r0, r3, #0
 800b470:	f7f5 fa26 	bl	80008c0 <__aeabi_fadd>
 800b474:	1c03      	adds	r3, r0, #0
 800b476:	1c19      	adds	r1, r3, #0
 800b478:	1c20      	adds	r0, r4, #0
 800b47a:	f7f5 fbab 	bl	8000bd4 <__aeabi_fdiv>
 800b47e:	1c03      	adds	r3, r0, #0
 800b480:	68f9      	ldr	r1, [r7, #12]
 800b482:	1c18      	adds	r0, r3, #0
 800b484:	f7f5 feca 	bl	800121c <__aeabi_fsub>
 800b488:	1c03      	adds	r3, r0, #0
 800b48a:	e01f      	b.n	800b4cc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2188      	movs	r1, #136	@ 0x88
 800b494:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b496:	1c19      	adds	r1, r3, #0
 800b498:	1c10      	adds	r0, r2, #0
 800b49a:	f7f5 fb9b 	bl	8000bd4 <__aeabi_fdiv>
 800b49e:	1c03      	adds	r3, r0, #0
 800b4a0:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	1c18      	adds	r0, r3, #0
 800b4a6:	f017 fe5f 	bl	8023168 <expf>
 800b4aa:	1c03      	adds	r3, r0, #0
 800b4ac:	21fe      	movs	r1, #254	@ 0xfe
 800b4ae:	0589      	lsls	r1, r1, #22
 800b4b0:	1c18      	adds	r0, r3, #0
 800b4b2:	f7f5 fa05 	bl	80008c0 <__aeabi_fadd>
 800b4b6:	1c03      	adds	r3, r0, #0
 800b4b8:	1c19      	adds	r1, r3, #0
 800b4ba:	4807      	ldr	r0, [pc, #28]	@ (800b4d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b4bc:	f7f5 fb8a 	bl	8000bd4 <__aeabi_fdiv>
 800b4c0:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b4c2:	1c19      	adds	r1, r3, #0
 800b4c4:	1c20      	adds	r0, r4, #0
 800b4c6:	f7f5 fd6b 	bl	8000fa0 <__aeabi_fmul>
 800b4ca:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b4cc:	1c18      	adds	r0, r3, #0
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	b005      	add	sp, #20
 800b4d2:	bd90      	pop	{r4, r7, pc}
 800b4d4:	c2480000 	.word	0xc2480000
 800b4d8:	43fa0000 	.word	0x43fa0000
 800b4dc:	42480000 	.word	0x42480000
 800b4e0:	3f8041ab 	.word	0x3f8041ab
 800b4e4:	40a00000 	.word	0x40a00000

0800b4e8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b4e8:	b590      	push	{r4, r7, lr}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	4913      	ldr	r1, [pc, #76]	@ (800b548 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b4fa:	1c18      	adds	r0, r3, #0
 800b4fc:	f7f5 f9e0 	bl	80008c0 <__aeabi_fadd>
 800b500:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b502:	1c19      	adds	r1, r3, #0
 800b504:	1c20      	adds	r0, r4, #0
 800b506:	f7f5 fb65 	bl	8000bd4 <__aeabi_fdiv>
 800b50a:	1c03      	adds	r3, r0, #0
 800b50c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	228c      	movs	r2, #140	@ 0x8c
 800b512:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	490b      	ldr	r1, [pc, #44]	@ (800b54c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b51e:	1c18      	adds	r0, r3, #0
 800b520:	f7f5 f9ce 	bl	80008c0 <__aeabi_fadd>
 800b524:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b526:	1c19      	adds	r1, r3, #0
 800b528:	1c20      	adds	r0, r4, #0
 800b52a:	f7f5 fb53 	bl	8000bd4 <__aeabi_fdiv>
 800b52e:	1c03      	adds	r3, r0, #0
 800b530:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2290      	movs	r2, #144	@ 0x90
 800b536:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2294      	movs	r2, #148	@ 0x94
 800b53c:	2100      	movs	r1, #0
 800b53e:	5499      	strb	r1, [r3, r2]
}
 800b540:	46c0      	nop			@ (mov r8, r8)
 800b542:	46bd      	mov	sp, r7
 800b544:	b003      	add	sp, #12
 800b546:	bd90      	pop	{r4, r7, pc}
 800b548:	41a00000 	.word	0x41a00000
 800b54c:	43fa0000 	.word	0x43fa0000

0800b550 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b550:	b590      	push	{r4, r7, lr}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2294      	movs	r2, #148	@ 0x94
 800b55e:	5c9b      	ldrb	r3, [r3, r2]
 800b560:	2201      	movs	r2, #1
 800b562:	4053      	eors	r3, r2
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00f      	beq.n	800b58a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2198      	movs	r1, #152	@ 0x98
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	219c      	movs	r1, #156	@ 0x9c
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	21a0      	movs	r1, #160	@ 0xa0
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2294      	movs	r2, #148	@ 0x94
 800b586:	2101      	movs	r1, #1
 800b588:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	228c      	movs	r2, #140	@ 0x8c
 800b58e:	589b      	ldr	r3, [r3, r2]
 800b590:	1c19      	adds	r1, r3, #0
 800b592:	20fe      	movs	r0, #254	@ 0xfe
 800b594:	0580      	lsls	r0, r0, #22
 800b596:	f7f5 fe41 	bl	800121c <__aeabi_fsub>
 800b59a:	1c03      	adds	r3, r0, #0
 800b59c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2298      	movs	r2, #152	@ 0x98
 800b5a2:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b5a4:	1c19      	adds	r1, r3, #0
 800b5a6:	f7f5 fcfb 	bl	8000fa0 <__aeabi_fmul>
 800b5aa:	1c03      	adds	r3, r0, #0
 800b5ac:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	228c      	movs	r2, #140	@ 0x8c
 800b5b2:	589b      	ldr	r3, [r3, r2]
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	1c18      	adds	r0, r3, #0
 800b5b8:	f7f5 fcf2 	bl	8000fa0 <__aeabi_fmul>
 800b5bc:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b5be:	1c19      	adds	r1, r3, #0
 800b5c0:	1c20      	adds	r0, r4, #0
 800b5c2:	f7f5 f97d 	bl	80008c0 <__aeabi_fadd>
 800b5c6:	1c03      	adds	r3, r0, #0
 800b5c8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2298      	movs	r2, #152	@ 0x98
 800b5ce:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2290      	movs	r2, #144	@ 0x90
 800b5d4:	589b      	ldr	r3, [r3, r2]
 800b5d6:	1c19      	adds	r1, r3, #0
 800b5d8:	20fe      	movs	r0, #254	@ 0xfe
 800b5da:	0580      	lsls	r0, r0, #22
 800b5dc:	f7f5 fe1e 	bl	800121c <__aeabi_fsub>
 800b5e0:	1c03      	adds	r3, r0, #0
 800b5e2:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	229c      	movs	r2, #156	@ 0x9c
 800b5e8:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b5ea:	1c19      	adds	r1, r3, #0
 800b5ec:	f7f5 fcd8 	bl	8000fa0 <__aeabi_fmul>
 800b5f0:	1c03      	adds	r3, r0, #0
 800b5f2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2290      	movs	r2, #144	@ 0x90
 800b5f8:	589b      	ldr	r3, [r3, r2]
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	1c18      	adds	r0, r3, #0
 800b5fe:	f7f5 fccf 	bl	8000fa0 <__aeabi_fmul>
 800b602:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b604:	1c19      	adds	r1, r3, #0
 800b606:	1c20      	adds	r0, r4, #0
 800b608:	f7f5 f95a 	bl	80008c0 <__aeabi_fadd>
 800b60c:	1c03      	adds	r3, r0, #0
 800b60e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	229c      	movs	r2, #156	@ 0x9c
 800b614:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2298      	movs	r2, #152	@ 0x98
 800b61a:	589a      	ldr	r2, [r3, r2]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	219c      	movs	r1, #156	@ 0x9c
 800b620:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b622:	1c19      	adds	r1, r3, #0
 800b624:	1c10      	adds	r0, r2, #0
 800b626:	f7f5 fdf9 	bl	800121c <__aeabi_fsub>
 800b62a:	1c03      	adds	r3, r0, #0
 800b62c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b62e:	2100      	movs	r1, #0
 800b630:	6978      	ldr	r0, [r7, #20]
 800b632:	f7f4 ff7d 	bl	8000530 <__aeabi_fcmplt>
 800b636:	1e03      	subs	r3, r0, #0
 800b638:	d004      	beq.n	800b644 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2280      	movs	r2, #128	@ 0x80
 800b63e:	0612      	lsls	r2, r2, #24
 800b640:	4053      	eors	r3, r2
 800b642:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b644:	4923      	ldr	r1, [pc, #140]	@ (800b6d4 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b646:	6978      	ldr	r0, [r7, #20]
 800b648:	f7f5 fcaa 	bl	8000fa0 <__aeabi_fmul>
 800b64c:	1c03      	adds	r3, r0, #0
 800b64e:	1c18      	adds	r0, r3, #0
 800b650:	f017 fd8a 	bl	8023168 <expf>
 800b654:	1c03      	adds	r3, r0, #0
 800b656:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b658:	491f      	ldr	r1, [pc, #124]	@ (800b6d8 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b65a:	6938      	ldr	r0, [r7, #16]
 800b65c:	f7f5 fca0 	bl	8000fa0 <__aeabi_fmul>
 800b660:	1c03      	adds	r3, r0, #0
 800b662:	491e      	ldr	r1, [pc, #120]	@ (800b6dc <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b664:	1c18      	adds	r0, r3, #0
 800b666:	f7f5 f92b 	bl	80008c0 <__aeabi_fadd>
 800b66a:	1c03      	adds	r3, r0, #0
 800b66c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685c      	ldr	r4, [r3, #4]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	68f9      	ldr	r1, [r7, #12]
 800b678:	1c18      	adds	r0, r3, #0
 800b67a:	f7f5 f921 	bl	80008c0 <__aeabi_fadd>
 800b67e:	1c03      	adds	r3, r0, #0
 800b680:	1c19      	adds	r1, r3, #0
 800b682:	1c20      	adds	r0, r4, #0
 800b684:	f7f5 faa6 	bl	8000bd4 <__aeabi_fdiv>
 800b688:	1c03      	adds	r3, r0, #0
 800b68a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b68c:	68b9      	ldr	r1, [r7, #8]
 800b68e:	20fe      	movs	r0, #254	@ 0xfe
 800b690:	0580      	lsls	r0, r0, #22
 800b692:	f7f5 fdc3 	bl	800121c <__aeabi_fsub>
 800b696:	1c03      	adds	r3, r0, #0
 800b698:	1c18      	adds	r0, r3, #0
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	22a0      	movs	r2, #160	@ 0xa0
 800b69e:	589b      	ldr	r3, [r3, r2]
 800b6a0:	1c19      	adds	r1, r3, #0
 800b6a2:	f7f5 fc7d 	bl	8000fa0 <__aeabi_fmul>
 800b6a6:	1c03      	adds	r3, r0, #0
 800b6a8:	1c1c      	adds	r4, r3, #0
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	68b8      	ldr	r0, [r7, #8]
 800b6ae:	f7f5 fc77 	bl	8000fa0 <__aeabi_fmul>
 800b6b2:	1c03      	adds	r3, r0, #0
 800b6b4:	1c19      	adds	r1, r3, #0
 800b6b6:	1c20      	adds	r0, r4, #0
 800b6b8:	f7f5 f902 	bl	80008c0 <__aeabi_fadd>
 800b6bc:	1c03      	adds	r3, r0, #0
 800b6be:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	22a0      	movs	r2, #160	@ 0xa0
 800b6c4:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	22a0      	movs	r2, #160	@ 0xa0
 800b6ca:	589b      	ldr	r3, [r3, r2]
}
 800b6cc:	1c18      	adds	r0, r3, #0
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	b007      	add	sp, #28
 800b6d2:	bd90      	pop	{r4, r7, pc}
 800b6d4:	be4ccccd 	.word	0xbe4ccccd
 800b6d8:	43f00000 	.word	0x43f00000
 800b6dc:	41a00000 	.word	0x41a00000

0800b6e0 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	000a      	movs	r2, r1
 800b6ea:	1cbb      	adds	r3, r7, #2
 800b6ec:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b6ee:	230d      	movs	r3, #13
 800b6f0:	18fb      	adds	r3, r7, r3
 800b6f2:	22ff      	movs	r2, #255	@ 0xff
 800b6f4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b6f6:	230e      	movs	r3, #14
 800b6f8:	18fb      	adds	r3, r7, r3
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	801a      	strh	r2, [r3, #0]
 800b6fe:	e037      	b.n	800b770 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b700:	230e      	movs	r3, #14
 800b702:	18fb      	adds	r3, r7, r3
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	18d3      	adds	r3, r2, r3
 800b70a:	7819      	ldrb	r1, [r3, #0]
 800b70c:	220d      	movs	r2, #13
 800b70e:	18bb      	adds	r3, r7, r2
 800b710:	18ba      	adds	r2, r7, r2
 800b712:	7812      	ldrb	r2, [r2, #0]
 800b714:	404a      	eors	r2, r1
 800b716:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b718:	230c      	movs	r3, #12
 800b71a:	18fb      	adds	r3, r7, r3
 800b71c:	2208      	movs	r2, #8
 800b71e:	701a      	strb	r2, [r3, #0]
 800b720:	e01b      	b.n	800b75a <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b722:	210d      	movs	r1, #13
 800b724:	187b      	adds	r3, r7, r1
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	b25b      	sxtb	r3, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	da09      	bge.n	800b742 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b72e:	187b      	adds	r3, r7, r1
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	b25b      	sxtb	r3, r3
 800b736:	2231      	movs	r2, #49	@ 0x31
 800b738:	4053      	eors	r3, r2
 800b73a:	b25a      	sxtb	r2, r3
 800b73c:	187b      	adds	r3, r7, r1
 800b73e:	701a      	strb	r2, [r3, #0]
 800b740:	e005      	b.n	800b74e <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b742:	230d      	movs	r3, #13
 800b744:	18fa      	adds	r2, r7, r3
 800b746:	18fb      	adds	r3, r7, r3
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	18db      	adds	r3, r3, r3
 800b74c:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b74e:	220c      	movs	r2, #12
 800b750:	18bb      	adds	r3, r7, r2
 800b752:	18ba      	adds	r2, r7, r2
 800b754:	7812      	ldrb	r2, [r2, #0]
 800b756:	3a01      	subs	r2, #1
 800b758:	701a      	strb	r2, [r3, #0]
 800b75a:	230c      	movs	r3, #12
 800b75c:	18fb      	adds	r3, r7, r3
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1de      	bne.n	800b722 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b764:	220e      	movs	r2, #14
 800b766:	18bb      	adds	r3, r7, r2
 800b768:	18ba      	adds	r2, r7, r2
 800b76a:	8812      	ldrh	r2, [r2, #0]
 800b76c:	3201      	adds	r2, #1
 800b76e:	801a      	strh	r2, [r3, #0]
 800b770:	230e      	movs	r3, #14
 800b772:	18fa      	adds	r2, r7, r3
 800b774:	1cbb      	adds	r3, r7, #2
 800b776:	8812      	ldrh	r2, [r2, #0]
 800b778:	881b      	ldrh	r3, [r3, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d3c0      	bcc.n	800b700 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b77e:	230d      	movs	r3, #13
 800b780:	18fb      	adds	r3, r7, r3
 800b782:	781b      	ldrb	r3, [r3, #0]
}
 800b784:	0018      	movs	r0, r3
 800b786:	46bd      	mov	sp, r7
 800b788:	b004      	add	sp, #16
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	0008      	movs	r0, r1
 800b796:	0011      	movs	r1, r2
 800b798:	1cbb      	adds	r3, r7, #2
 800b79a:	1c02      	adds	r2, r0, #0
 800b79c:	801a      	strh	r2, [r3, #0]
 800b79e:	1c7b      	adds	r3, r7, #1
 800b7a0:	1c0a      	adds	r2, r1, #0
 800b7a2:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b7a4:	1cbb      	adds	r3, r7, #2
 800b7a6:	881a      	ldrh	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	0011      	movs	r1, r2
 800b7ac:	0018      	movs	r0, r3
 800b7ae:	f7ff ff97 	bl	800b6e0 <sensirion_i2c_generate_crc>
 800b7b2:	0003      	movs	r3, r0
 800b7b4:	001a      	movs	r2, r3
 800b7b6:	1c7b      	adds	r3, r7, #1
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d001      	beq.n	800b7c2 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e000      	b.n	800b7c4 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	0018      	movs	r0, r3
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	b002      	add	sp, #8
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	0008      	movs	r0, r1
 800b7d6:	0011      	movs	r1, r2
 800b7d8:	1cbb      	adds	r3, r7, #2
 800b7da:	1c02      	adds	r2, r0, #0
 800b7dc:	801a      	strh	r2, [r3, #0]
 800b7de:	003b      	movs	r3, r7
 800b7e0:	1c0a      	adds	r2, r1, #0
 800b7e2:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b7e4:	003b      	movs	r3, r7
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	0a1b      	lsrs	r3, r3, #8
 800b7ea:	b299      	uxth	r1, r3
 800b7ec:	1cbb      	adds	r3, r7, #2
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	1cba      	adds	r2, r7, #2
 800b7f2:	1c58      	adds	r0, r3, #1
 800b7f4:	8010      	strh	r0, [r2, #0]
 800b7f6:	001a      	movs	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	189b      	adds	r3, r3, r2
 800b7fc:	b2ca      	uxtb	r2, r1
 800b7fe:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b800:	1cbb      	adds	r3, r7, #2
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	1cba      	adds	r2, r7, #2
 800b806:	1c59      	adds	r1, r3, #1
 800b808:	8011      	strh	r1, [r2, #0]
 800b80a:	001a      	movs	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	189b      	adds	r3, r3, r2
 800b810:	003a      	movs	r2, r7
 800b812:	8812      	ldrh	r2, [r2, #0]
 800b814:	b2d2      	uxtb	r2, r2
 800b816:	701a      	strb	r2, [r3, #0]
    return offset;
 800b818:	1cbb      	adds	r3, r7, #2
 800b81a:	881b      	ldrh	r3, [r3, #0]
}
 800b81c:	0018      	movs	r0, r3
 800b81e:	46bd      	mov	sp, r7
 800b820:	b002      	add	sp, #8
 800b822:	bd80      	pop	{r7, pc}

0800b824 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b824:	b590      	push	{r4, r7, lr}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	0008      	movs	r0, r1
 800b82e:	0011      	movs	r1, r2
 800b830:	1cbb      	adds	r3, r7, #2
 800b832:	1c02      	adds	r2, r0, #0
 800b834:	801a      	strh	r2, [r3, #0]
 800b836:	003b      	movs	r3, r7
 800b838:	1c0a      	adds	r2, r1, #0
 800b83a:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b83c:	003b      	movs	r3, r7
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	0a1b      	lsrs	r3, r3, #8
 800b842:	b299      	uxth	r1, r3
 800b844:	1cbb      	adds	r3, r7, #2
 800b846:	881b      	ldrh	r3, [r3, #0]
 800b848:	1cba      	adds	r2, r7, #2
 800b84a:	1c58      	adds	r0, r3, #1
 800b84c:	8010      	strh	r0, [r2, #0]
 800b84e:	001a      	movs	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	189b      	adds	r3, r3, r2
 800b854:	b2ca      	uxtb	r2, r1
 800b856:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b858:	1cbb      	adds	r3, r7, #2
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	1cba      	adds	r2, r7, #2
 800b85e:	1c59      	adds	r1, r3, #1
 800b860:	8011      	strh	r1, [r2, #0]
 800b862:	001a      	movs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	189b      	adds	r3, r3, r2
 800b868:	003a      	movs	r2, r7
 800b86a:	8812      	ldrh	r2, [r2, #0]
 800b86c:	b2d2      	uxtb	r2, r2
 800b86e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b870:	1cbb      	adds	r3, r7, #2
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	3b02      	subs	r3, #2
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b87a:	1cbb      	adds	r3, r7, #2
 800b87c:	881b      	ldrh	r3, [r3, #0]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	18d4      	adds	r4, r2, r3
 800b882:	2102      	movs	r1, #2
 800b884:	f7ff ff2c 	bl	800b6e0 <sensirion_i2c_generate_crc>
 800b888:	0003      	movs	r3, r0
 800b88a:	7023      	strb	r3, [r4, #0]
    offset++;
 800b88c:	1cbb      	adds	r3, r7, #2
 800b88e:	881a      	ldrh	r2, [r3, #0]
 800b890:	1cbb      	adds	r3, r7, #2
 800b892:	3201      	adds	r2, #1
 800b894:	801a      	strh	r2, [r3, #0]

    return offset;
 800b896:	1cbb      	adds	r3, r7, #2
 800b898:	881b      	ldrh	r3, [r3, #0]
}
 800b89a:	0018      	movs	r0, r3
 800b89c:	46bd      	mov	sp, r7
 800b89e:	b003      	add	sp, #12
 800b8a0:	bd90      	pop	{r4, r7, pc}

0800b8a2 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b082      	sub	sp, #8
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	0008      	movs	r0, r1
 800b8ac:	0011      	movs	r1, r2
 800b8ae:	1cbb      	adds	r3, r7, #2
 800b8b0:	1c02      	adds	r2, r0, #0
 800b8b2:	801a      	strh	r2, [r3, #0]
 800b8b4:	003b      	movs	r3, r7
 800b8b6:	1c0a      	adds	r2, r1, #0
 800b8b8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b8ba:	003b      	movs	r3, r7
 800b8bc:	881a      	ldrh	r2, [r3, #0]
 800b8be:	1cbb      	adds	r3, r7, #2
 800b8c0:	8819      	ldrh	r1, [r3, #0]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	0018      	movs	r0, r3
 800b8c6:	f7ff ffad 	bl	800b824 <sensirion_i2c_add_uint16_t_to_buffer>
 800b8ca:	0003      	movs	r3, r0
}
 800b8cc:	0018      	movs	r0, r3
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	b002      	add	sp, #8
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6039      	str	r1, [r7, #0]
 800b8dc:	0011      	movs	r1, r2
 800b8de:	1dfb      	adds	r3, r7, #7
 800b8e0:	1c02      	adds	r2, r0, #0
 800b8e2:	701a      	strb	r2, [r3, #0]
 800b8e4:	1d3b      	adds	r3, r7, #4
 800b8e6:	1c0a      	adds	r2, r1, #0
 800b8e8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b8ea:	1d3b      	adds	r3, r7, #4
 800b8ec:	881a      	ldrh	r2, [r3, #0]
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	1dfb      	adds	r3, r7, #7
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	0018      	movs	r0, r3
 800b8f6:	f7fe f9d5 	bl	8009ca4 <sensirion_i2c_hal_write>
 800b8fa:	0003      	movs	r3, r0
}
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	46bd      	mov	sp, r7
 800b900:	b002      	add	sp, #8
 800b902:	bd80      	pop	{r7, pc}

0800b904 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b904:	b5b0      	push	{r4, r5, r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6039      	str	r1, [r7, #0]
 800b90c:	0011      	movs	r1, r2
 800b90e:	1dfb      	adds	r3, r7, #7
 800b910:	1c02      	adds	r2, r0, #0
 800b912:	701a      	strb	r2, [r3, #0]
 800b914:	1d3b      	adds	r3, r7, #4
 800b916:	1c0a      	adds	r2, r1, #0
 800b918:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b91a:	1d3b      	adds	r3, r7, #4
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	085b      	lsrs	r3, r3, #1
 800b920:	b29b      	uxth	r3, r3
 800b922:	220a      	movs	r2, #10
 800b924:	18ba      	adds	r2, r7, r2
 800b926:	1c19      	adds	r1, r3, #0
 800b928:	1c0b      	adds	r3, r1, #0
 800b92a:	18db      	adds	r3, r3, r3
 800b92c:	185b      	adds	r3, r3, r1
 800b92e:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b930:	1d3b      	adds	r3, r7, #4
 800b932:	881b      	ldrh	r3, [r3, #0]
 800b934:	2201      	movs	r2, #1
 800b936:	4013      	ands	r3, r2
 800b938:	b29b      	uxth	r3, r3
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b93e:	2304      	movs	r3, #4
 800b940:	e06b      	b.n	800ba1a <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b942:	230a      	movs	r3, #10
 800b944:	18fb      	adds	r3, r7, r3
 800b946:	881a      	ldrh	r2, [r3, #0]
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	1dfb      	adds	r3, r7, #7
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	0018      	movs	r0, r3
 800b950:	f7fe f988 	bl	8009c64 <sensirion_i2c_hal_read>
 800b954:	0003      	movs	r3, r0
 800b956:	001a      	movs	r2, r3
 800b958:	2108      	movs	r1, #8
 800b95a:	187b      	adds	r3, r7, r1
 800b95c:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b95e:	000a      	movs	r2, r1
 800b960:	18bb      	adds	r3, r7, r2
 800b962:	2100      	movs	r1, #0
 800b964:	5e5b      	ldrsh	r3, [r3, r1]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b96a:	18bb      	adds	r3, r7, r2
 800b96c:	2200      	movs	r2, #0
 800b96e:	5e9b      	ldrsh	r3, [r3, r2]
 800b970:	e053      	b.n	800ba1a <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b972:	230e      	movs	r3, #14
 800b974:	18fb      	adds	r3, r7, r3
 800b976:	2200      	movs	r2, #0
 800b978:	801a      	strh	r2, [r3, #0]
 800b97a:	230c      	movs	r3, #12
 800b97c:	18fb      	adds	r3, r7, r3
 800b97e:	2200      	movs	r2, #0
 800b980:	801a      	strh	r2, [r3, #0]
 800b982:	e041      	b.n	800ba08 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b984:	210e      	movs	r1, #14
 800b986:	187b      	adds	r3, r7, r1
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b98e:	187b      	adds	r3, r7, r1
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	3302      	adds	r3, #2
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	001a      	movs	r2, r3
 800b99c:	2102      	movs	r1, #2
 800b99e:	f7ff fef5 	bl	800b78c <sensirion_i2c_check_crc>
 800b9a2:	0003      	movs	r3, r0
 800b9a4:	001a      	movs	r2, r3
 800b9a6:	2108      	movs	r1, #8
 800b9a8:	187b      	adds	r3, r7, r1
 800b9aa:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b9ac:	000a      	movs	r2, r1
 800b9ae:	18bb      	adds	r3, r7, r2
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	5e5b      	ldrsh	r3, [r3, r1]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b9b8:	18bb      	adds	r3, r7, r2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	5e9b      	ldrsh	r3, [r3, r2]
 800b9be:	e02c      	b.n	800ba1a <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b9c0:	240e      	movs	r4, #14
 800b9c2:	193b      	adds	r3, r7, r4
 800b9c4:	881b      	ldrh	r3, [r3, #0]
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	18d2      	adds	r2, r2, r3
 800b9ca:	250c      	movs	r5, #12
 800b9cc:	197b      	adds	r3, r7, r5
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	1979      	adds	r1, r7, r5
 800b9d2:	1c58      	adds	r0, r3, #1
 800b9d4:	8008      	strh	r0, [r1, #0]
 800b9d6:	0019      	movs	r1, r3
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	185b      	adds	r3, r3, r1
 800b9dc:	7812      	ldrb	r2, [r2, #0]
 800b9de:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b9e0:	193b      	adds	r3, r7, r4
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	18d2      	adds	r2, r2, r3
 800b9ea:	197b      	adds	r3, r7, r5
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	1979      	adds	r1, r7, r5
 800b9f0:	1c58      	adds	r0, r3, #1
 800b9f2:	8008      	strh	r0, [r1, #0]
 800b9f4:	0019      	movs	r1, r3
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	185b      	adds	r3, r3, r1
 800b9fa:	7812      	ldrb	r2, [r2, #0]
 800b9fc:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b9fe:	193b      	adds	r3, r7, r4
 800ba00:	193a      	adds	r2, r7, r4
 800ba02:	8812      	ldrh	r2, [r2, #0]
 800ba04:	3203      	adds	r2, #3
 800ba06:	801a      	strh	r2, [r3, #0]
 800ba08:	230e      	movs	r3, #14
 800ba0a:	18fa      	adds	r2, r7, r3
 800ba0c:	230a      	movs	r3, #10
 800ba0e:	18fb      	adds	r3, r7, r3
 800ba10:	8812      	ldrh	r2, [r2, #0]
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d3b5      	bcc.n	800b984 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	0018      	movs	r0, r3
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	b004      	add	sp, #16
 800ba20:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ba24 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800ba24:	b590      	push	{r4, r7, lr}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6039      	str	r1, [r7, #0]
 800ba2c:	0011      	movs	r1, r2
 800ba2e:	1dfb      	adds	r3, r7, #7
 800ba30:	1c02      	adds	r2, r0, #0
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	1dbb      	adds	r3, r7, #6
 800ba36:	1c0a      	adds	r2, r1, #0
 800ba38:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800ba3a:	4b08      	ldr	r3, [pc, #32]	@ (800ba5c <ReadRegister+0x38>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d008      	beq.n	800ba54 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800ba42:	4b06      	ldr	r3, [pc, #24]	@ (800ba5c <ReadRegister+0x38>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	1dba      	adds	r2, r7, #6
 800ba48:	7814      	ldrb	r4, [r2, #0]
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	1dfa      	adds	r2, r7, #7
 800ba4e:	7810      	ldrb	r0, [r2, #0]
 800ba50:	0022      	movs	r2, r4
 800ba52:	4798      	blx	r3
  }
}
 800ba54:	46c0      	nop			@ (mov r8, r8)
 800ba56:	46bd      	mov	sp, r7
 800ba58:	b003      	add	sp, #12
 800ba5a:	bd90      	pop	{r4, r7, pc}
 800ba5c:	20000cac 	.word	0x20000cac

0800ba60 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800ba60:	b590      	push	{r4, r7, lr}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6039      	str	r1, [r7, #0]
 800ba68:	0011      	movs	r1, r2
 800ba6a:	1dfb      	adds	r3, r7, #7
 800ba6c:	1c02      	adds	r2, r0, #0
 800ba6e:	701a      	strb	r2, [r3, #0]
 800ba70:	1dbb      	adds	r3, r7, #6
 800ba72:	1c0a      	adds	r2, r1, #0
 800ba74:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ba76:	4b08      	ldr	r3, [pc, #32]	@ (800ba98 <WriteRegister+0x38>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d008      	beq.n	800ba90 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800ba7e:	4b06      	ldr	r3, [pc, #24]	@ (800ba98 <WriteRegister+0x38>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	1dba      	adds	r2, r7, #6
 800ba84:	7814      	ldrb	r4, [r2, #0]
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	1dfa      	adds	r2, r7, #7
 800ba8a:	7810      	ldrb	r0, [r2, #0]
 800ba8c:	0022      	movs	r2, r4
 800ba8e:	4798      	blx	r3
  }
}
 800ba90:	46c0      	nop			@ (mov r8, r8)
 800ba92:	46bd      	mov	sp, r7
 800ba94:	b003      	add	sp, #12
 800ba96:	bd90      	pop	{r4, r7, pc}
 800ba98:	20000cb0 	.word	0x20000cb0

0800ba9c <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800baa4:	f003 fb66 	bl	800f174 <HAL_GetTick>
 800baa8:	0002      	movs	r2, r0
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	18d2      	adds	r2, r2, r3
 800baae:	4b03      	ldr	r3, [pc, #12]	@ (800babc <setSGP40TimeStamp+0x20>)
 800bab0:	601a      	str	r2, [r3, #0]
}
 800bab2:	46c0      	nop			@ (mov r8, r8)
 800bab4:	46bd      	mov	sp, r7
 800bab6:	b002      	add	sp, #8
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	20000cc0 	.word	0x20000cc0

0800bac0 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800bac0:	b580      	push	{r7, lr}
 800bac2:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800bac4:	4b02      	ldr	r3, [pc, #8]	@ (800bad0 <ResetSGP40samplecounter+0x10>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	701a      	strb	r2, [r3, #0]
}
 800baca:	46c0      	nop			@ (mov r8, r8)
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	20000cbe 	.word	0x20000cbe

0800bad4 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800bade:	4b07      	ldr	r3, [pc, #28]	@ (800bafc <SGP_Init+0x28>)
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800bae4:	4b06      	ldr	r3, [pc, #24]	@ (800bb00 <SGP_Init+0x2c>)
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800baea:	4b06      	ldr	r3, [pc, #24]	@ (800bb04 <SGP_Init+0x30>)
 800baec:	2100      	movs	r1, #0
 800baee:	0018      	movs	r0, r3
 800baf0:	f7fe ff70 	bl	800a9d4 <GasIndexAlgorithm_init>
}
 800baf4:	46c0      	nop			@ (mov r8, r8)
 800baf6:	46bd      	mov	sp, r7
 800baf8:	b002      	add	sp, #8
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	20000cac 	.word	0x20000cac
 800bb00:	20000cb0 	.word	0x20000cb0
 800bb04:	20000cc8 	.word	0x20000cc8

0800bb08 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800bb0c:	4b07      	ldr	r3, [pc, #28]	@ (800bb2c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d004      	beq.n	800bb1e <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800bb14:	4b06      	ldr	r3, [pc, #24]	@ (800bb30 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800bb16:	22fe      	movs	r2, #254	@ 0xfe
 800bb18:	0592      	lsls	r2, r2, #22
 800bb1a:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800bb1c:	e002      	b.n	800bb24 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800bb1e:	4b04      	ldr	r3, [pc, #16]	@ (800bb30 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800bb20:	4a04      	ldr	r2, [pc, #16]	@ (800bb34 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800bb22:	605a      	str	r2, [r3, #4]
}
 800bb24:	46c0      	nop			@ (mov r8, r8)
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	46c0      	nop			@ (mov r8, r8)
 800bb2c:	20001c15 	.word	0x20001c15
 800bb30:	20000cc8 	.word	0x20000cc8
 800bb34:	44610000 	.word	0x44610000

0800bb38 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800bb3c:	4b13      	ldr	r3, [pc, #76]	@ (800bb8c <SGP_StartMeasurement+0x54>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00d      	beq.n	800bb60 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bb44:	4b12      	ldr	r3, [pc, #72]	@ (800bb90 <SGP_StartMeasurement+0x58>)
 800bb46:	2208      	movs	r2, #8
 800bb48:	0019      	movs	r1, r3
 800bb4a:	2059      	movs	r0, #89	@ 0x59
 800bb4c:	f7ff ff88 	bl	800ba60 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800bb50:	f003 fb10 	bl	800f174 <HAL_GetTick>
 800bb54:	0003      	movs	r3, r0
 800bb56:	331e      	adds	r3, #30
 800bb58:	001a      	movs	r2, r3
 800bb5a:	4b0e      	ldr	r3, [pc, #56]	@ (800bb94 <SGP_StartMeasurement+0x5c>)
 800bb5c:	601a      	str	r2, [r3, #0]
 800bb5e:	e00c      	b.n	800bb7a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bb60:	4b0d      	ldr	r3, [pc, #52]	@ (800bb98 <SGP_StartMeasurement+0x60>)
 800bb62:	2208      	movs	r2, #8
 800bb64:	0019      	movs	r1, r3
 800bb66:	2059      	movs	r0, #89	@ 0x59
 800bb68:	f7ff ff7a 	bl	800ba60 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800bb6c:	f003 fb02 	bl	800f174 <HAL_GetTick>
 800bb70:	0003      	movs	r3, r0
 800bb72:	33aa      	adds	r3, #170	@ 0xaa
 800bb74:	001a      	movs	r2, r3
 800bb76:	4b09      	ldr	r3, [pc, #36]	@ (800bb9c <SGP_StartMeasurement+0x64>)
 800bb78:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800bb7a:	4b09      	ldr	r3, [pc, #36]	@ (800bba0 <SGP_StartMeasurement+0x68>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800bb80:	4b08      	ldr	r3, [pc, #32]	@ (800bba4 <SGP_StartMeasurement+0x6c>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	701a      	strb	r2, [r3, #0]
}
 800bb86:	46c0      	nop			@ (mov r8, r8)
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	20000d70 	.word	0x20000d70
 800bb90:	200000a0 	.word	0x200000a0
 800bb94:	200000b4 	.word	0x200000b4
 800bb98:	20000098 	.word	0x20000098
 800bb9c:	200000ac 	.word	0x200000ac
 800bba0:	20000cc4 	.word	0x20000cc4
 800bba4:	20000cc5 	.word	0x20000cc5

0800bba8 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800bbac:	4b04      	ldr	r3, [pc, #16]	@ (800bbc0 <SGP_HeatedUp+0x18>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	0018      	movs	r0, r3
 800bbb2:	f002 fe45 	bl	800e840 <TimestampIsReached>
 800bbb6:	0003      	movs	r3, r0
}
 800bbb8:	0018      	movs	r0, r3
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	46c0      	nop			@ (mov r8, r8)
 800bbc0:	200000ac 	.word	0x200000ac

0800bbc4 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800bbc8:	4b04      	ldr	r3, [pc, #16]	@ (800bbdc <SGP_MeasurementReady+0x18>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	0018      	movs	r0, r3
 800bbce:	f002 fe37 	bl	800e840 <TimestampIsReached>
 800bbd2:	0003      	movs	r3, r0
}
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	46c0      	nop			@ (mov r8, r8)
 800bbdc:	200000b4 	.word	0x200000b4

0800bbe0 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800bbe4:	4b04      	ldr	r3, [pc, #16]	@ (800bbf8 <SGP_MeasurementDone+0x18>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	0018      	movs	r0, r3
 800bbea:	f002 fe29 	bl	800e840 <TimestampIsReached>
 800bbee:	0003      	movs	r3, r0
}
 800bbf0:	0018      	movs	r0, r3
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	46c0      	nop			@ (mov r8, r8)
 800bbf8:	200000b0 	.word	0x200000b0

0800bbfc <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bc00:	4b04      	ldr	r3, [pc, #16]	@ (800bc14 <SGP_TurnHeaterOff+0x18>)
 800bc02:	2202      	movs	r2, #2
 800bc04:	0019      	movs	r1, r3
 800bc06:	2059      	movs	r0, #89	@ 0x59
 800bc08:	f7ff ff2a 	bl	800ba60 <WriteRegister>
}
 800bc0c:	46c0      	nop			@ (mov r8, r8)
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	46c0      	nop			@ (mov r8, r8)
 800bc14:	20000090 	.word	0x20000090

0800bc18 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800bc18:	b590      	push	{r4, r7, lr}
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	af02      	add	r7, sp, #8
 800bc1e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800bc20:	f7ff ffc2 	bl	800bba8 <SGP_HeatedUp>
 800bc24:	1e03      	subs	r3, r0, #0
 800bc26:	d032      	beq.n	800bc8e <SGP_GetMeasurementValues+0x76>
 800bc28:	4b7f      	ldr	r3, [pc, #508]	@ (800be28 <SGP_GetMeasurementValues+0x210>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	4053      	eors	r3, r2
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d02b      	beq.n	800bc8e <SGP_GetMeasurementValues+0x76>
 800bc36:	4b7d      	ldr	r3, [pc, #500]	@ (800be2c <SGP_GetMeasurementValues+0x214>)
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	4053      	eors	r3, r2
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d024      	beq.n	800bc8e <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800bc44:	4b78      	ldr	r3, [pc, #480]	@ (800be28 <SGP_GetMeasurementValues+0x210>)
 800bc46:	2201      	movs	r2, #1
 800bc48:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800bc4a:	4b79      	ldr	r3, [pc, #484]	@ (800be30 <SGP_GetMeasurementValues+0x218>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00d      	beq.n	800bc6e <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bc52:	4b78      	ldr	r3, [pc, #480]	@ (800be34 <SGP_GetMeasurementValues+0x21c>)
 800bc54:	2208      	movs	r2, #8
 800bc56:	0019      	movs	r1, r3
 800bc58:	2059      	movs	r0, #89	@ 0x59
 800bc5a:	f7ff ff01 	bl	800ba60 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800bc5e:	f003 fa89 	bl	800f174 <HAL_GetTick>
 800bc62:	0003      	movs	r3, r0
 800bc64:	331e      	adds	r3, #30
 800bc66:	001a      	movs	r2, r3
 800bc68:	4b73      	ldr	r3, [pc, #460]	@ (800be38 <SGP_GetMeasurementValues+0x220>)
 800bc6a:	601a      	str	r2, [r3, #0]
 800bc6c:	e00c      	b.n	800bc88 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bc6e:	4b73      	ldr	r3, [pc, #460]	@ (800be3c <SGP_GetMeasurementValues+0x224>)
 800bc70:	2208      	movs	r2, #8
 800bc72:	0019      	movs	r1, r3
 800bc74:	2059      	movs	r0, #89	@ 0x59
 800bc76:	f7ff fef3 	bl	800ba60 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800bc7a:	f003 fa7b 	bl	800f174 <HAL_GetTick>
 800bc7e:	0003      	movs	r3, r0
 800bc80:	331e      	adds	r3, #30
 800bc82:	001a      	movs	r2, r3
 800bc84:	4b6c      	ldr	r3, [pc, #432]	@ (800be38 <SGP_GetMeasurementValues+0x220>)
 800bc86:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800bc88:	4b68      	ldr	r3, [pc, #416]	@ (800be2c <SGP_GetMeasurementValues+0x214>)
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800bc8e:	4b66      	ldr	r3, [pc, #408]	@ (800be28 <SGP_GetMeasurementValues+0x210>)
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d100      	bne.n	800bc98 <SGP_GetMeasurementValues+0x80>
 800bc96:	e0ab      	b.n	800bdf0 <SGP_GetMeasurementValues+0x1d8>
 800bc98:	f7ff ff94 	bl	800bbc4 <SGP_MeasurementReady>
 800bc9c:	1e03      	subs	r3, r0, #0
 800bc9e:	d100      	bne.n	800bca2 <SGP_GetMeasurementValues+0x8a>
 800bca0:	e0a6      	b.n	800bdf0 <SGP_GetMeasurementValues+0x1d8>
 800bca2:	4b67      	ldr	r3, [pc, #412]	@ (800be40 <SGP_GetMeasurementValues+0x228>)
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	2201      	movs	r2, #1
 800bca8:	4053      	eors	r3, r2
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d100      	bne.n	800bcb2 <SGP_GetMeasurementValues+0x9a>
 800bcb0:	e09e      	b.n	800bdf0 <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800bcb2:	4b63      	ldr	r3, [pc, #396]	@ (800be40 <SGP_GetMeasurementValues+0x228>)
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800bcb8:	4b62      	ldr	r3, [pc, #392]	@ (800be44 <SGP_GetMeasurementValues+0x22c>)
 800bcba:	2203      	movs	r2, #3
 800bcbc:	0019      	movs	r1, r3
 800bcbe:	2059      	movs	r0, #89	@ 0x59
 800bcc0:	f7ff feb0 	bl	800ba24 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800bcc4:	4b5f      	ldr	r3, [pc, #380]	@ (800be44 <SGP_GetMeasurementValues+0x22c>)
 800bcc6:	2203      	movs	r2, #3
 800bcc8:	2103      	movs	r1, #3
 800bcca:	0018      	movs	r0, r3
 800bccc:	f000 f918 	bl	800bf00 <CheckCRC>
 800bcd0:	0003      	movs	r3, r0
 800bcd2:	001a      	movs	r2, r3
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	4053      	eors	r3, r2
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d02a      	beq.n	800bd34 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800bcde:	4a5a      	ldr	r2, [pc, #360]	@ (800be48 <SGP_GetMeasurementValues+0x230>)
 800bce0:	4b5a      	ldr	r3, [pc, #360]	@ (800be4c <SGP_GetMeasurementValues+0x234>)
 800bce2:	0019      	movs	r1, r3
 800bce4:	2001      	movs	r0, #1
 800bce6:	f002 fe01 	bl	800e8ec <CreateLine>
      Info("SGP_Measure buffer structure:");
 800bcea:	4a59      	ldr	r2, [pc, #356]	@ (800be50 <SGP_GetMeasurementValues+0x238>)
 800bcec:	4b59      	ldr	r3, [pc, #356]	@ (800be54 <SGP_GetMeasurementValues+0x23c>)
 800bcee:	0019      	movs	r1, r3
 800bcf0:	2002      	movs	r0, #2
 800bcf2:	f002 fdfb 	bl	800e8ec <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800bcf6:	230f      	movs	r3, #15
 800bcf8:	18fb      	adds	r3, r7, r3
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	e012      	b.n	800bd26 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800bd00:	240f      	movs	r4, #15
 800bd02:	193b      	adds	r3, r7, r4
 800bd04:	7818      	ldrb	r0, [r3, #0]
 800bd06:	193b      	adds	r3, r7, r4
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	4a4e      	ldr	r2, [pc, #312]	@ (800be44 <SGP_GetMeasurementValues+0x22c>)
 800bd0c:	5cd3      	ldrb	r3, [r2, r3]
 800bd0e:	4a52      	ldr	r2, [pc, #328]	@ (800be58 <SGP_GetMeasurementValues+0x240>)
 800bd10:	4952      	ldr	r1, [pc, #328]	@ (800be5c <SGP_GetMeasurementValues+0x244>)
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	0003      	movs	r3, r0
 800bd16:	2003      	movs	r0, #3
 800bd18:	f002 fde8 	bl	800e8ec <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800bd1c:	193b      	adds	r3, r7, r4
 800bd1e:	781a      	ldrb	r2, [r3, #0]
 800bd20:	193b      	adds	r3, r7, r4
 800bd22:	3201      	adds	r2, #1
 800bd24:	701a      	strb	r2, [r3, #0]
 800bd26:	230f      	movs	r3, #15
 800bd28:	18fb      	adds	r3, r7, r3
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d9e7      	bls.n	800bd00 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800bd30:	2300      	movs	r3, #0
 800bd32:	e075      	b.n	800be20 <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800bd34:	f003 fa1e 	bl	800f174 <HAL_GetTick>
 800bd38:	0003      	movs	r3, r0
 800bd3a:	22fa      	movs	r2, #250	@ 0xfa
 800bd3c:	0092      	lsls	r2, r2, #2
 800bd3e:	189a      	adds	r2, r3, r2
 800bd40:	4b47      	ldr	r3, [pc, #284]	@ (800be60 <SGP_GetMeasurementValues+0x248>)
 800bd42:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800bd44:	f7ff ff5a 	bl	800bbfc <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800bd48:	4b46      	ldr	r3, [pc, #280]	@ (800be64 <SGP_GetMeasurementValues+0x24c>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	4b44      	ldr	r3, [pc, #272]	@ (800be64 <SGP_GetMeasurementValues+0x24c>)
 800bd52:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800bd54:	4b43      	ldr	r3, [pc, #268]	@ (800be64 <SGP_GetMeasurementValues+0x24c>)
 800bd56:	781a      	ldrb	r2, [r3, #0]
 800bd58:	4b43      	ldr	r3, [pc, #268]	@ (800be68 <SGP_GetMeasurementValues+0x250>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d347      	bcc.n	800bdf0 <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800bd60:	4b38      	ldr	r3, [pc, #224]	@ (800be44 <SGP_GetMeasurementValues+0x22c>)
 800bd62:	785b      	ldrb	r3, [r3, #1]
 800bd64:	021b      	lsls	r3, r3, #8
 800bd66:	b21a      	sxth	r2, r3
 800bd68:	4b36      	ldr	r3, [pc, #216]	@ (800be44 <SGP_GetMeasurementValues+0x22c>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	b21b      	sxth	r3, r3
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	b21a      	sxth	r2, r3
 800bd72:	240c      	movs	r4, #12
 800bd74:	193b      	adds	r3, r7, r4
 800bd76:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800bd7c:	193b      	adds	r3, r7, r4
 800bd7e:	8819      	ldrh	r1, [r3, #0]
 800bd80:	2308      	movs	r3, #8
 800bd82:	18fa      	adds	r2, r7, r3
 800bd84:	4b39      	ldr	r3, [pc, #228]	@ (800be6c <SGP_GetMeasurementValues+0x254>)
 800bd86:	0018      	movs	r0, r3
 800bd88:	f7fe fe88 	bl	800aa9c <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800bd92:	4b37      	ldr	r3, [pc, #220]	@ (800be70 <SGP_GetMeasurementValues+0x258>)
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	3301      	adds	r3, #1
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	4b35      	ldr	r3, [pc, #212]	@ (800be70 <SGP_GetMeasurementValues+0x258>)
 800bd9c:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800bd9e:	4b34      	ldr	r3, [pc, #208]	@ (800be70 <SGP_GetMeasurementValues+0x258>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d10d      	bne.n	800bdc2 <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800bda6:	193b      	adds	r3, r7, r4
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	4a32      	ldr	r2, [pc, #200]	@ (800be74 <SGP_GetMeasurementValues+0x25c>)
 800bdac:	492b      	ldr	r1, [pc, #172]	@ (800be5c <SGP_GetMeasurementValues+0x244>)
 800bdae:	2003      	movs	r0, #3
 800bdb0:	f002 fd9c 	bl	800e8ec <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	4a30      	ldr	r2, [pc, #192]	@ (800be78 <SGP_GetMeasurementValues+0x260>)
 800bdb8:	4928      	ldr	r1, [pc, #160]	@ (800be5c <SGP_GetMeasurementValues+0x244>)
 800bdba:	2003      	movs	r0, #3
 800bdbc:	f002 fd96 	bl	800e8ec <CreateLine>
 800bdc0:	e006      	b.n	800bdd0 <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800bdc2:	4b2b      	ldr	r3, [pc, #172]	@ (800be70 <SGP_GetMeasurementValues+0x258>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b0b      	cmp	r3, #11
 800bdc8:	d102      	bne.n	800bdd0 <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800bdca:	4b29      	ldr	r3, [pc, #164]	@ (800be70 <SGP_GetMeasurementValues+0x258>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	f001 fd35 	bl	800d844 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800bdda:	4b22      	ldr	r3, [pc, #136]	@ (800be64 <SGP_GetMeasurementValues+0x24c>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800bde0:	4b13      	ldr	r3, [pc, #76]	@ (800be30 <SGP_GetMeasurementValues+0x218>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bde6:	4b11      	ldr	r3, [pc, #68]	@ (800be2c <SGP_GetMeasurementValues+0x214>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	701a      	strb	r2, [r3, #0]
      return true;
 800bdec:	2301      	movs	r3, #1
 800bdee:	e017      	b.n	800be20 <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bdf0:	f7ff fef6 	bl	800bbe0 <SGP_MeasurementDone>
 800bdf4:	1e03      	subs	r3, r0, #0
 800bdf6:	d012      	beq.n	800be1e <SGP_GetMeasurementValues+0x206>
 800bdf8:	4b0b      	ldr	r3, [pc, #44]	@ (800be28 <SGP_GetMeasurementValues+0x210>)
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00e      	beq.n	800be1e <SGP_GetMeasurementValues+0x206>
 800be00:	4b0f      	ldr	r3, [pc, #60]	@ (800be40 <SGP_GetMeasurementValues+0x228>)
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00a      	beq.n	800be1e <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800be08:	4a1c      	ldr	r2, [pc, #112]	@ (800be7c <SGP_GetMeasurementValues+0x264>)
 800be0a:	4b14      	ldr	r3, [pc, #80]	@ (800be5c <SGP_GetMeasurementValues+0x244>)
 800be0c:	0019      	movs	r1, r3
 800be0e:	2003      	movs	r0, #3
 800be10:	f002 fd6c 	bl	800e8ec <CreateLine>
    SGP_StartMeasurement();
 800be14:	f7ff fe90 	bl	800bb38 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800be18:	4b04      	ldr	r3, [pc, #16]	@ (800be2c <SGP_GetMeasurementValues+0x214>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	0018      	movs	r0, r3
 800be22:	46bd      	mov	sp, r7
 800be24:	b005      	add	sp, #20
 800be26:	bd90      	pop	{r4, r7, pc}
 800be28:	20000cc4 	.word	0x20000cc4
 800be2c:	20000d71 	.word	0x20000d71
 800be30:	20000d70 	.word	0x20000d70
 800be34:	200000a0 	.word	0x200000a0
 800be38:	200000b4 	.word	0x200000b4
 800be3c:	20000098 	.word	0x20000098
 800be40:	20000cc5 	.word	0x20000cc5
 800be44:	20000cb4 	.word	0x20000cb4
 800be48:	080252e0 	.word	0x080252e0
 800be4c:	08025308 	.word	0x08025308
 800be50:	0802530c 	.word	0x0802530c
 800be54:	0802532c 	.word	0x0802532c
 800be58:	08025330 	.word	0x08025330
 800be5c:	08025350 	.word	0x08025350
 800be60:	200000b0 	.word	0x200000b0
 800be64:	20000cbd 	.word	0x20000cbd
 800be68:	200000aa 	.word	0x200000aa
 800be6c:	20000cc8 	.word	0x20000cc8
 800be70:	20000cbe 	.word	0x20000cbe
 800be74:	08025354 	.word	0x08025354
 800be78:	08025370 	.word	0x08025370
 800be7c:	0802538c 	.word	0x0802538c

0800be80 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800be86:	4b1a      	ldr	r3, [pc, #104]	@ (800bef0 <SGP_DeviceConnected+0x70>)
 800be88:	2202      	movs	r2, #2
 800be8a:	0019      	movs	r1, r3
 800be8c:	2059      	movs	r0, #89	@ 0x59
 800be8e:	f7ff fde7 	bl	800ba60 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800be92:	2001      	movs	r0, #1
 800be94:	f003 f978 	bl	800f188 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800be98:	4b16      	ldr	r3, [pc, #88]	@ (800bef4 <SGP_DeviceConnected+0x74>)
 800be9a:	2209      	movs	r2, #9
 800be9c:	0019      	movs	r1, r3
 800be9e:	2059      	movs	r0, #89	@ 0x59
 800bea0:	f7ff fdc0 	bl	800ba24 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bea4:	1dfb      	adds	r3, r7, #7
 800bea6:	2200      	movs	r2, #0
 800bea8:	701a      	strb	r2, [r3, #0]
 800beaa:	e011      	b.n	800bed0 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800beac:	1dfb      	adds	r3, r7, #7
 800beae:	7818      	ldrb	r0, [r3, #0]
 800beb0:	1dfb      	adds	r3, r7, #7
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	4a0f      	ldr	r2, [pc, #60]	@ (800bef4 <SGP_DeviceConnected+0x74>)
 800beb6:	5cd3      	ldrb	r3, [r2, r3]
 800beb8:	4a0f      	ldr	r2, [pc, #60]	@ (800bef8 <SGP_DeviceConnected+0x78>)
 800beba:	4910      	ldr	r1, [pc, #64]	@ (800befc <SGP_DeviceConnected+0x7c>)
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	0003      	movs	r3, r0
 800bec0:	2002      	movs	r0, #2
 800bec2:	f002 fd13 	bl	800e8ec <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bec6:	1dfb      	adds	r3, r7, #7
 800bec8:	781a      	ldrb	r2, [r3, #0]
 800beca:	1dfb      	adds	r3, r7, #7
 800becc:	3201      	adds	r2, #1
 800bece:	701a      	strb	r2, [r3, #0]
 800bed0:	1dfb      	adds	r3, r7, #7
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	2b08      	cmp	r3, #8
 800bed6:	d9e9      	bls.n	800beac <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bed8:	4b06      	ldr	r3, [pc, #24]	@ (800bef4 <SGP_DeviceConnected+0x74>)
 800beda:	2203      	movs	r2, #3
 800bedc:	2109      	movs	r1, #9
 800bede:	0018      	movs	r0, r3
 800bee0:	f000 f80e 	bl	800bf00 <CheckCRC>
 800bee4:	0003      	movs	r3, r0
}
 800bee6:	0018      	movs	r0, r3
 800bee8:	46bd      	mov	sp, r7
 800beea:	b002      	add	sp, #8
 800beec:	bd80      	pop	{r7, pc}
 800beee:	46c0      	nop			@ (mov r8, r8)
 800bef0:	20000094 	.word	0x20000094
 800bef4:	20000cb4 	.word	0x20000cb4
 800bef8:	080253ac 	.word	0x080253ac
 800befc:	0802532c 	.word	0x0802532c

0800bf00 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bf00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf02:	b08f      	sub	sp, #60	@ 0x3c
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf08:	0008      	movs	r0, r1
 800bf0a:	0011      	movs	r1, r2
 800bf0c:	2323      	movs	r3, #35	@ 0x23
 800bf0e:	18fb      	adds	r3, r7, r3
 800bf10:	1c02      	adds	r2, r0, #0
 800bf12:	701a      	strb	r2, [r3, #0]
 800bf14:	2322      	movs	r3, #34	@ 0x22
 800bf16:	18fb      	adds	r3, r7, r3
 800bf18:	1c0a      	adds	r2, r1, #0
 800bf1a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bf1c:	2317      	movs	r3, #23
 800bf1e:	2220      	movs	r2, #32
 800bf20:	189b      	adds	r3, r3, r2
 800bf22:	19db      	adds	r3, r3, r7
 800bf24:	2200      	movs	r2, #0
 800bf26:	701a      	strb	r2, [r3, #0]
 800bf28:	e09f      	b.n	800c06a <CheckCRC+0x16a>
 800bf2a:	466b      	mov	r3, sp
 800bf2c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bf2e:	2322      	movs	r3, #34	@ 0x22
 800bf30:	18fb      	adds	r3, r7, r3
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	001a      	movs	r2, r3
 800bf36:	3a01      	subs	r2, #1
 800bf38:	633a      	str	r2, [r7, #48]	@ 0x30
 800bf3a:	60bb      	str	r3, [r7, #8]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	60fa      	str	r2, [r7, #12]
 800bf40:	68b8      	ldr	r0, [r7, #8]
 800bf42:	68f9      	ldr	r1, [r7, #12]
 800bf44:	0002      	movs	r2, r0
 800bf46:	0f52      	lsrs	r2, r2, #29
 800bf48:	000c      	movs	r4, r1
 800bf4a:	00e4      	lsls	r4, r4, #3
 800bf4c:	61fc      	str	r4, [r7, #28]
 800bf4e:	69fc      	ldr	r4, [r7, #28]
 800bf50:	4314      	orrs	r4, r2
 800bf52:	61fc      	str	r4, [r7, #28]
 800bf54:	0002      	movs	r2, r0
 800bf56:	00d2      	lsls	r2, r2, #3
 800bf58:	61ba      	str	r2, [r7, #24]
 800bf5a:	603b      	str	r3, [r7, #0]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	6838      	ldr	r0, [r7, #0]
 800bf62:	6879      	ldr	r1, [r7, #4]
 800bf64:	0002      	movs	r2, r0
 800bf66:	0f52      	lsrs	r2, r2, #29
 800bf68:	000c      	movs	r4, r1
 800bf6a:	00e4      	lsls	r4, r4, #3
 800bf6c:	617c      	str	r4, [r7, #20]
 800bf6e:	697c      	ldr	r4, [r7, #20]
 800bf70:	4314      	orrs	r4, r2
 800bf72:	617c      	str	r4, [r7, #20]
 800bf74:	0002      	movs	r2, r0
 800bf76:	00d2      	lsls	r2, r2, #3
 800bf78:	613a      	str	r2, [r7, #16]
 800bf7a:	3307      	adds	r3, #7
 800bf7c:	08db      	lsrs	r3, r3, #3
 800bf7e:	00db      	lsls	r3, r3, #3
 800bf80:	466a      	mov	r2, sp
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	469d      	mov	sp, r3
 800bf86:	466b      	mov	r3, sp
 800bf88:	3300      	adds	r3, #0
 800bf8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bf8c:	2316      	movs	r3, #22
 800bf8e:	2220      	movs	r2, #32
 800bf90:	189b      	adds	r3, r3, r2
 800bf92:	19db      	adds	r3, r3, r7
 800bf94:	2200      	movs	r2, #0
 800bf96:	701a      	strb	r2, [r3, #0]
 800bf98:	e01e      	b.n	800bfd8 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bf9a:	2317      	movs	r3, #23
 800bf9c:	2220      	movs	r2, #32
 800bf9e:	189b      	adds	r3, r3, r2
 800bfa0:	19db      	adds	r3, r3, r7
 800bfa2:	781a      	ldrb	r2, [r3, #0]
 800bfa4:	2116      	movs	r1, #22
 800bfa6:	2320      	movs	r3, #32
 800bfa8:	18cb      	adds	r3, r1, r3
 800bfaa:	19db      	adds	r3, r3, r7
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	18d3      	adds	r3, r2, r3
 800bfb0:	001a      	movs	r2, r3
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb4:	189a      	adds	r2, r3, r2
 800bfb6:	0008      	movs	r0, r1
 800bfb8:	2320      	movs	r3, #32
 800bfba:	18cb      	adds	r3, r1, r3
 800bfbc:	19db      	adds	r3, r3, r7
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	7811      	ldrb	r1, [r2, #0]
 800bfc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfc4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bfc6:	2320      	movs	r3, #32
 800bfc8:	18c3      	adds	r3, r0, r3
 800bfca:	19db      	adds	r3, r3, r7
 800bfcc:	781a      	ldrb	r2, [r3, #0]
 800bfce:	2320      	movs	r3, #32
 800bfd0:	18c3      	adds	r3, r0, r3
 800bfd2:	19db      	adds	r3, r3, r7
 800bfd4:	3201      	adds	r2, #1
 800bfd6:	701a      	strb	r2, [r3, #0]
 800bfd8:	2316      	movs	r3, #22
 800bfda:	2220      	movs	r2, #32
 800bfdc:	189b      	adds	r3, r3, r2
 800bfde:	19da      	adds	r2, r3, r7
 800bfe0:	2322      	movs	r3, #34	@ 0x22
 800bfe2:	18fb      	adds	r3, r7, r3
 800bfe4:	7812      	ldrb	r2, [r2, #0]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d3d6      	bcc.n	800bf9a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bfec:	2417      	movs	r4, #23
 800bfee:	2320      	movs	r3, #32
 800bff0:	18e3      	adds	r3, r4, r3
 800bff2:	19db      	adds	r3, r3, r7
 800bff4:	781a      	ldrb	r2, [r3, #0]
 800bff6:	2322      	movs	r3, #34	@ 0x22
 800bff8:	18fb      	adds	r3, r7, r3
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	18d3      	adds	r3, r2, r3
 800bffe:	3b01      	subs	r3, #1
 800c000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c002:	18d2      	adds	r2, r2, r3
 800c004:	250b      	movs	r5, #11
 800c006:	2320      	movs	r3, #32
 800c008:	18eb      	adds	r3, r5, r3
 800c00a:	19db      	adds	r3, r3, r7
 800c00c:	7812      	ldrb	r2, [r2, #0]
 800c00e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800c010:	2322      	movs	r3, #34	@ 0x22
 800c012:	18fb      	adds	r3, r7, r3
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	3b01      	subs	r3, #1
 800c018:	b2da      	uxtb	r2, r3
 800c01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01c:	0011      	movs	r1, r2
 800c01e:	0018      	movs	r0, r3
 800c020:	f000 f838 	bl	800c094 <CalculateCRC>
 800c024:	0003      	movs	r3, r0
 800c026:	001a      	movs	r2, r3
 800c028:	2320      	movs	r3, #32
 800c02a:	18eb      	adds	r3, r5, r3
 800c02c:	19db      	adds	r3, r3, r7
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	4293      	cmp	r3, r2
 800c032:	d00c      	beq.n	800c04e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800c034:	2320      	movs	r3, #32
 800c036:	18e3      	adds	r3, r4, r3
 800c038:	19db      	adds	r3, r3, r7
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	3301      	adds	r3, #1
 800c03e:	4a13      	ldr	r2, [pc, #76]	@ (800c08c <CheckCRC+0x18c>)
 800c040:	4913      	ldr	r1, [pc, #76]	@ (800c090 <CheckCRC+0x190>)
 800c042:	2001      	movs	r0, #1
 800c044:	f002 fc52 	bl	800e8ec <CreateLine>
      return false;
 800c048:	2300      	movs	r3, #0
 800c04a:	46b5      	mov	sp, r6
 800c04c:	e019      	b.n	800c082 <CheckCRC+0x182>
 800c04e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800c050:	2217      	movs	r2, #23
 800c052:	2320      	movs	r3, #32
 800c054:	18d3      	adds	r3, r2, r3
 800c056:	19db      	adds	r3, r3, r7
 800c058:	2120      	movs	r1, #32
 800c05a:	1852      	adds	r2, r2, r1
 800c05c:	19d1      	adds	r1, r2, r7
 800c05e:	2222      	movs	r2, #34	@ 0x22
 800c060:	18ba      	adds	r2, r7, r2
 800c062:	7809      	ldrb	r1, [r1, #0]
 800c064:	7812      	ldrb	r2, [r2, #0]
 800c066:	188a      	adds	r2, r1, r2
 800c068:	701a      	strb	r2, [r3, #0]
 800c06a:	2317      	movs	r3, #23
 800c06c:	2220      	movs	r2, #32
 800c06e:	189b      	adds	r3, r3, r2
 800c070:	19da      	adds	r2, r3, r7
 800c072:	2323      	movs	r3, #35	@ 0x23
 800c074:	18fb      	adds	r3, r7, r3
 800c076:	7812      	ldrb	r2, [r2, #0]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d200      	bcs.n	800c080 <CheckCRC+0x180>
 800c07e:	e754      	b.n	800bf2a <CheckCRC+0x2a>
    }
  }
  return true;
 800c080:	2301      	movs	r3, #1
}
 800c082:	0018      	movs	r0, r3
 800c084:	46bd      	mov	sp, r7
 800c086:	b00f      	add	sp, #60	@ 0x3c
 800c088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c08a:	46c0      	nop			@ (mov r8, r8)
 800c08c:	080253cc 	.word	0x080253cc
 800c090:	08025308 	.word	0x08025308

0800c094 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	000a      	movs	r2, r1
 800c09e:	1cfb      	adds	r3, r7, #3
 800c0a0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800c0a2:	230f      	movs	r3, #15
 800c0a4:	18fb      	adds	r3, r7, r3
 800c0a6:	22ff      	movs	r2, #255	@ 0xff
 800c0a8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800c0aa:	230e      	movs	r3, #14
 800c0ac:	18fb      	adds	r3, r7, r3
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	701a      	strb	r2, [r3, #0]
 800c0b2:	e037      	b.n	800c124 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800c0b4:	230e      	movs	r3, #14
 800c0b6:	18fb      	adds	r3, r7, r3
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	18d3      	adds	r3, r2, r3
 800c0be:	7819      	ldrb	r1, [r3, #0]
 800c0c0:	220f      	movs	r2, #15
 800c0c2:	18bb      	adds	r3, r7, r2
 800c0c4:	18ba      	adds	r2, r7, r2
 800c0c6:	7812      	ldrb	r2, [r2, #0]
 800c0c8:	404a      	eors	r2, r1
 800c0ca:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800c0cc:	230d      	movs	r3, #13
 800c0ce:	18fb      	adds	r3, r7, r3
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	701a      	strb	r2, [r3, #0]
 800c0d4:	e01b      	b.n	800c10e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800c0d6:	210f      	movs	r1, #15
 800c0d8:	187b      	adds	r3, r7, r1
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	b25b      	sxtb	r3, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	da09      	bge.n	800c0f6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800c0e2:	187b      	adds	r3, r7, r1
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	005b      	lsls	r3, r3, #1
 800c0e8:	b25b      	sxtb	r3, r3
 800c0ea:	2231      	movs	r2, #49	@ 0x31
 800c0ec:	4053      	eors	r3, r2
 800c0ee:	b25a      	sxtb	r2, r3
 800c0f0:	187b      	adds	r3, r7, r1
 800c0f2:	701a      	strb	r2, [r3, #0]
 800c0f4:	e005      	b.n	800c102 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800c0f6:	230f      	movs	r3, #15
 800c0f8:	18fa      	adds	r2, r7, r3
 800c0fa:	18fb      	adds	r3, r7, r3
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	18db      	adds	r3, r3, r3
 800c100:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800c102:	210d      	movs	r1, #13
 800c104:	187b      	adds	r3, r7, r1
 800c106:	781a      	ldrb	r2, [r3, #0]
 800c108:	187b      	adds	r3, r7, r1
 800c10a:	3201      	adds	r2, #1
 800c10c:	701a      	strb	r2, [r3, #0]
 800c10e:	230d      	movs	r3, #13
 800c110:	18fb      	adds	r3, r7, r3
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b07      	cmp	r3, #7
 800c116:	d9de      	bls.n	800c0d6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800c118:	210e      	movs	r1, #14
 800c11a:	187b      	adds	r3, r7, r1
 800c11c:	781a      	ldrb	r2, [r3, #0]
 800c11e:	187b      	adds	r3, r7, r1
 800c120:	3201      	adds	r2, #1
 800c122:	701a      	strb	r2, [r3, #0]
 800c124:	230e      	movs	r3, #14
 800c126:	18fa      	adds	r2, r7, r3
 800c128:	1cfb      	adds	r3, r7, #3
 800c12a:	7812      	ldrb	r2, [r2, #0]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d3c0      	bcc.n	800c0b4 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800c132:	230f      	movs	r3, #15
 800c134:	18fb      	adds	r3, r7, r3
 800c136:	781b      	ldrb	r3, [r3, #0]
}
 800c138:	0018      	movs	r0, r3
 800c13a:	46bd      	mov	sp, r7
 800c13c:	b004      	add	sp, #16
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4936      	ldr	r1, [pc, #216]	@ (800c228 <SGP_SetHT+0xe8>)
 800c150:	1c18      	adds	r0, r3, #0
 800c152:	f7f4 fbb5 	bl	80008c0 <__aeabi_fadd>
 800c156:	1c03      	adds	r3, r0, #0
 800c158:	4934      	ldr	r1, [pc, #208]	@ (800c22c <SGP_SetHT+0xec>)
 800c15a:	1c18      	adds	r0, r3, #0
 800c15c:	f7f4 fd3a 	bl	8000bd4 <__aeabi_fdiv>
 800c160:	1c03      	adds	r3, r0, #0
 800c162:	4933      	ldr	r1, [pc, #204]	@ (800c230 <SGP_SetHT+0xf0>)
 800c164:	1c18      	adds	r0, r3, #0
 800c166:	f7f4 ff1b 	bl	8000fa0 <__aeabi_fmul>
 800c16a:	1c03      	adds	r3, r0, #0
 800c16c:	1c18      	adds	r0, r3, #0
 800c16e:	f7f4 fa55 	bl	800061c <__aeabi_f2uiz>
 800c172:	0003      	movs	r3, r0
 800c174:	b29a      	uxth	r2, r3
 800c176:	4b2f      	ldr	r3, [pc, #188]	@ (800c234 <SGP_SetHT+0xf4>)
 800c178:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	492e      	ldr	r1, [pc, #184]	@ (800c238 <SGP_SetHT+0xf8>)
 800c180:	1c18      	adds	r0, r3, #0
 800c182:	f7f4 fd27 	bl	8000bd4 <__aeabi_fdiv>
 800c186:	1c03      	adds	r3, r0, #0
 800c188:	4929      	ldr	r1, [pc, #164]	@ (800c230 <SGP_SetHT+0xf0>)
 800c18a:	1c18      	adds	r0, r3, #0
 800c18c:	f7f4 ff08 	bl	8000fa0 <__aeabi_fmul>
 800c190:	1c03      	adds	r3, r0, #0
 800c192:	1c18      	adds	r0, r3, #0
 800c194:	f7f4 fa42 	bl	800061c <__aeabi_f2uiz>
 800c198:	0003      	movs	r3, r0
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	4b27      	ldr	r3, [pc, #156]	@ (800c23c <SGP_SetHT+0xfc>)
 800c19e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800c1a0:	4b26      	ldr	r3, [pc, #152]	@ (800c23c <SGP_SetHT+0xfc>)
 800c1a2:	881b      	ldrh	r3, [r3, #0]
 800c1a4:	0a1b      	lsrs	r3, r3, #8
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	4b25      	ldr	r3, [pc, #148]	@ (800c240 <SGP_SetHT+0x100>)
 800c1ac:	709a      	strb	r2, [r3, #2]
 800c1ae:	4b24      	ldr	r3, [pc, #144]	@ (800c240 <SGP_SetHT+0x100>)
 800c1b0:	789a      	ldrb	r2, [r3, #2]
 800c1b2:	210c      	movs	r1, #12
 800c1b4:	187b      	adds	r3, r7, r1
 800c1b6:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800c1b8:	4b20      	ldr	r3, [pc, #128]	@ (800c23c <SGP_SetHT+0xfc>)
 800c1ba:	881b      	ldrh	r3, [r3, #0]
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	4b20      	ldr	r3, [pc, #128]	@ (800c240 <SGP_SetHT+0x100>)
 800c1c0:	70da      	strb	r2, [r3, #3]
 800c1c2:	4b1f      	ldr	r3, [pc, #124]	@ (800c240 <SGP_SetHT+0x100>)
 800c1c4:	78da      	ldrb	r2, [r3, #3]
 800c1c6:	187b      	adds	r3, r7, r1
 800c1c8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800c1ca:	187b      	adds	r3, r7, r1
 800c1cc:	2102      	movs	r1, #2
 800c1ce:	0018      	movs	r0, r3
 800c1d0:	f7ff ff60 	bl	800c094 <CalculateCRC>
 800c1d4:	0003      	movs	r3, r0
 800c1d6:	001a      	movs	r2, r3
 800c1d8:	4b19      	ldr	r3, [pc, #100]	@ (800c240 <SGP_SetHT+0x100>)
 800c1da:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800c1dc:	4b15      	ldr	r3, [pc, #84]	@ (800c234 <SGP_SetHT+0xf4>)
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	0a1b      	lsrs	r3, r3, #8
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	4b16      	ldr	r3, [pc, #88]	@ (800c240 <SGP_SetHT+0x100>)
 800c1e8:	715a      	strb	r2, [r3, #5]
 800c1ea:	4b15      	ldr	r3, [pc, #84]	@ (800c240 <SGP_SetHT+0x100>)
 800c1ec:	795a      	ldrb	r2, [r3, #5]
 800c1ee:	2108      	movs	r1, #8
 800c1f0:	187b      	adds	r3, r7, r1
 800c1f2:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800c1f4:	4b0f      	ldr	r3, [pc, #60]	@ (800c234 <SGP_SetHT+0xf4>)
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	4b11      	ldr	r3, [pc, #68]	@ (800c240 <SGP_SetHT+0x100>)
 800c1fc:	719a      	strb	r2, [r3, #6]
 800c1fe:	4b10      	ldr	r3, [pc, #64]	@ (800c240 <SGP_SetHT+0x100>)
 800c200:	799a      	ldrb	r2, [r3, #6]
 800c202:	187b      	adds	r3, r7, r1
 800c204:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800c206:	187b      	adds	r3, r7, r1
 800c208:	2102      	movs	r1, #2
 800c20a:	0018      	movs	r0, r3
 800c20c:	f7ff ff42 	bl	800c094 <CalculateCRC>
 800c210:	0003      	movs	r3, r0
 800c212:	001a      	movs	r2, r3
 800c214:	4b0a      	ldr	r3, [pc, #40]	@ (800c240 <SGP_SetHT+0x100>)
 800c216:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800c218:	4b0a      	ldr	r3, [pc, #40]	@ (800c244 <SGP_SetHT+0x104>)
 800c21a:	2201      	movs	r2, #1
 800c21c:	701a      	strb	r2, [r3, #0]
}
 800c21e:	46c0      	nop			@ (mov r8, r8)
 800c220:	46bd      	mov	sp, r7
 800c222:	b004      	add	sp, #16
 800c224:	bd80      	pop	{r7, pc}
 800c226:	46c0      	nop			@ (mov r8, r8)
 800c228:	42340000 	.word	0x42340000
 800c22c:	432f0000 	.word	0x432f0000
 800c230:	477fff00 	.word	0x477fff00
 800c234:	20000d6e 	.word	0x20000d6e
 800c238:	42c80000 	.word	0x42c80000
 800c23c:	20000d6c 	.word	0x20000d6c
 800c240:	200000a0 	.word	0x200000a0
 800c244:	20000d70 	.word	0x20000d70

0800c248 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800c248:	b580      	push	{r7, lr}
 800c24a:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800c24c:	4a09      	ldr	r2, [pc, #36]	@ (800c274 <SGP_SoftReset+0x2c>)
 800c24e:	4b0a      	ldr	r3, [pc, #40]	@ (800c278 <SGP_SoftReset+0x30>)
 800c250:	0019      	movs	r1, r3
 800c252:	2003      	movs	r0, #3
 800c254:	f002 fb4a 	bl	800e8ec <CreateLine>
  SGP_TurnHeaterOff();
 800c258:	f7ff fcd0 	bl	800bbfc <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800c25c:	200a      	movs	r0, #10
 800c25e:	f002 ff93 	bl	800f188 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c262:	4b06      	ldr	r3, [pc, #24]	@ (800c27c <SGP_SoftReset+0x34>)
 800c264:	2202      	movs	r2, #2
 800c266:	0019      	movs	r1, r3
 800c268:	2059      	movs	r0, #89	@ 0x59
 800c26a:	f7ff fbf9 	bl	800ba60 <WriteRegister>
}
 800c26e:	46c0      	nop			@ (mov r8, r8)
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	08025474 	.word	0x08025474
 800c278:	08025350 	.word	0x08025350
 800c27c:	200000a8 	.word	0x200000a8

0800c280 <ResetVOCresult>:

void ResetVOCresult(void) {
 800c280:	b580      	push	{r7, lr}
 800c282:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c284:	4b02      	ldr	r3, [pc, #8]	@ (800c290 <ResetVOCresult+0x10>)
 800c286:	2200      	movs	r2, #0
 800c288:	601a      	str	r2, [r3, #0]
}
 800c28a:	46c0      	nop			@ (mov r8, r8)
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	20000d74 	.word	0x20000d74

0800c294 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c298:	4b37      	ldr	r3, [pc, #220]	@ (800c378 <SGP_Upkeep+0xe4>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b07      	cmp	r3, #7
 800c29e:	d85f      	bhi.n	800c360 <SGP_Upkeep+0xcc>
 800c2a0:	009a      	lsls	r2, r3, #2
 800c2a2:	4b36      	ldr	r3, [pc, #216]	@ (800c37c <SGP_Upkeep+0xe8>)
 800c2a4:	18d3      	adds	r3, r2, r3
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c2aa:	4a35      	ldr	r2, [pc, #212]	@ (800c380 <SGP_Upkeep+0xec>)
 800c2ac:	4b35      	ldr	r3, [pc, #212]	@ (800c384 <SGP_Upkeep+0xf0>)
 800c2ae:	0019      	movs	r1, r3
 800c2b0:	2003      	movs	r0, #3
 800c2b2:	f002 fb1b 	bl	800e8ec <CreateLine>
    break;
 800c2b6:	e05a      	b.n	800c36e <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c2b8:	f7ff ffe2 	bl	800c280 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c2bc:	4b2e      	ldr	r3, [pc, #184]	@ (800c378 <SGP_Upkeep+0xe4>)
 800c2be:	2201      	movs	r2, #1
 800c2c0:	701a      	strb	r2, [r3, #0]
    break;
 800c2c2:	e054      	b.n	800c36e <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c2c4:	f7ff fc38 	bl	800bb38 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c2c8:	f001 f966 	bl	800d598 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c2cc:	4b2a      	ldr	r3, [pc, #168]	@ (800c378 <SGP_Upkeep+0xe4>)
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	701a      	strb	r2, [r3, #0]
    break;
 800c2d2:	e04c      	b.n	800c36e <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c2d4:	4b2c      	ldr	r3, [pc, #176]	@ (800c388 <SGP_Upkeep+0xf4>)
 800c2d6:	0018      	movs	r0, r3
 800c2d8:	f7ff fc9e 	bl	800bc18 <SGP_GetMeasurementValues>
 800c2dc:	1e03      	subs	r3, r0, #0
 800c2de:	d043      	beq.n	800c368 <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c2e0:	4b25      	ldr	r3, [pc, #148]	@ (800c378 <SGP_Upkeep+0xe4>)
 800c2e2:	2203      	movs	r2, #3
 800c2e4:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c2e6:	e03f      	b.n	800c368 <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c2e8:	4b27      	ldr	r3, [pc, #156]	@ (800c388 <SGP_Upkeep+0xf4>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	0018      	movs	r0, r3
 800c2f0:	f7f7 fa6c 	bl	80037cc <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c2f4:	4b20      	ldr	r3, [pc, #128]	@ (800c378 <SGP_Upkeep+0xe4>)
 800c2f6:	2206      	movs	r2, #6
 800c2f8:	701a      	strb	r2, [r3, #0]
    break;
 800c2fa:	e038      	b.n	800c36e <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c2fc:	4b1e      	ldr	r3, [pc, #120]	@ (800c378 <SGP_Upkeep+0xe4>)
 800c2fe:	2207      	movs	r2, #7
 800c300:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c302:	4b22      	ldr	r3, [pc, #136]	@ (800c38c <SGP_Upkeep+0xf8>)
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	2b01      	cmp	r3, #1
 800c308:	d112      	bne.n	800c330 <SGP_Upkeep+0x9c>
 800c30a:	4b21      	ldr	r3, [pc, #132]	@ (800c390 <SGP_Upkeep+0xfc>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	2201      	movs	r2, #1
 800c310:	4053      	eors	r3, r2
 800c312:	b2db      	uxtb	r3, r3
 800c314:	2b00      	cmp	r3, #0
 800c316:	d00b      	beq.n	800c330 <SGP_Upkeep+0x9c>
      // During startup take 12 samples
      if (sgpinitdone) {
 800c318:	4b1e      	ldr	r3, [pc, #120]	@ (800c394 <SGP_Upkeep+0x100>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d004      	beq.n	800c32a <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800c320:	f7ff ff92 	bl	800c248 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800c324:	2000      	movs	r0, #0
 800c326:	f7fc fa1f 	bl	8008768 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800c32a:	4b1a      	ldr	r3, [pc, #104]	@ (800c394 <SGP_Upkeep+0x100>)
 800c32c:	2201      	movs	r2, #1
 800c32e:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c330:	f002 ff20 	bl	800f174 <HAL_GetTick>
 800c334:	0003      	movs	r3, r0
 800c336:	22c8      	movs	r2, #200	@ 0xc8
 800c338:	0092      	lsls	r2, r2, #2
 800c33a:	189a      	adds	r2, r3, r2
 800c33c:	4b16      	ldr	r3, [pc, #88]	@ (800c398 <SGP_Upkeep+0x104>)
 800c33e:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c340:	f001 f942 	bl	800d5c8 <ResetMeasurementIndicator>
  break;
 800c344:	e013      	b.n	800c36e <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c346:	4b14      	ldr	r3, [pc, #80]	@ (800c398 <SGP_Upkeep+0x104>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	0018      	movs	r0, r3
 800c34c:	f002 fa78 	bl	800e840 <TimestampIsReached>
 800c350:	1e03      	subs	r3, r0, #0
 800c352:	d00b      	beq.n	800c36c <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c354:	f7ff fbd8 	bl	800bb08 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c358:	4b07      	ldr	r3, [pc, #28]	@ (800c378 <SGP_Upkeep+0xe4>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c35e:	e005      	b.n	800c36c <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c360:	4b05      	ldr	r3, [pc, #20]	@ (800c378 <SGP_Upkeep+0xe4>)
 800c362:	2200      	movs	r2, #0
 800c364:	701a      	strb	r2, [r3, #0]
    break;
 800c366:	e002      	b.n	800c36e <SGP_Upkeep+0xda>
    break;
 800c368:	46c0      	nop			@ (mov r8, r8)
 800c36a:	e000      	b.n	800c36e <SGP_Upkeep+0xda>
    break;
 800c36c:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c36e:	4b02      	ldr	r3, [pc, #8]	@ (800c378 <SGP_Upkeep+0xe4>)
 800c370:	781b      	ldrb	r3, [r3, #0]
}
 800c372:	0018      	movs	r0, r3
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	20000d78 	.word	0x20000d78
 800c37c:	08025bec 	.word	0x08025bec
 800c380:	0802548c 	.word	0x0802548c
 800c384:	08025350 	.word	0x08025350
 800c388:	20000d74 	.word	0x20000d74
 800c38c:	20000cbe 	.word	0x20000cbe
 800c390:	20001c15 	.word	0x20001c15
 800c394:	20000ca8 	.word	0x20000ca8
 800c398:	20000cc0 	.word	0x20000cc0

0800c39c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	0002      	movs	r2, r0
 800c3a4:	1dfb      	adds	r3, r7, #7
 800c3a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c3a8:	1dfb      	adds	r3, r7, #7
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3ae:	d809      	bhi.n	800c3c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3b0:	1dfb      	adds	r3, r7, #7
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	001a      	movs	r2, r3
 800c3b6:	231f      	movs	r3, #31
 800c3b8:	401a      	ands	r2, r3
 800c3ba:	4b04      	ldr	r3, [pc, #16]	@ (800c3cc <__NVIC_EnableIRQ+0x30>)
 800c3bc:	2101      	movs	r1, #1
 800c3be:	4091      	lsls	r1, r2
 800c3c0:	000a      	movs	r2, r1
 800c3c2:	601a      	str	r2, [r3, #0]
  }
}
 800c3c4:	46c0      	nop			@ (mov r8, r8)
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	b002      	add	sp, #8
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	e000e100 	.word	0xe000e100

0800c3d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	0002      	movs	r2, r0
 800c3d8:	1dfb      	adds	r3, r7, #7
 800c3da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c3dc:	1dfb      	adds	r3, r7, #7
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3e2:	d810      	bhi.n	800c406 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3e4:	1dfb      	adds	r3, r7, #7
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	001a      	movs	r2, r3
 800c3ea:	231f      	movs	r3, #31
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	4908      	ldr	r1, [pc, #32]	@ (800c410 <__NVIC_DisableIRQ+0x40>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	409a      	lsls	r2, r3
 800c3f4:	0013      	movs	r3, r2
 800c3f6:	2280      	movs	r2, #128	@ 0x80
 800c3f8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c3fa:	f3bf 8f4f 	dsb	sy
}
 800c3fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c400:	f3bf 8f6f 	isb	sy
}
 800c404:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c406:	46c0      	nop			@ (mov r8, r8)
 800c408:	46bd      	mov	sp, r7
 800c40a:	b002      	add	sp, #8
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	46c0      	nop			@ (mov r8, r8)
 800c410:	e000e100 	.word	0xe000e100

0800c414 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c414:	b5b0      	push	{r4, r5, r7, lr}
 800c416:	b088      	sub	sp, #32
 800c418:	af02      	add	r7, sp, #8
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	0008      	movs	r0, r1
 800c41e:	0011      	movs	r1, r2
 800c420:	1cfb      	adds	r3, r7, #3
 800c422:	1c02      	adds	r2, r0, #0
 800c424:	701a      	strb	r2, [r3, #0]
 800c426:	1cbb      	adds	r3, r7, #2
 800c428:	1c0a      	adds	r2, r1, #0
 800c42a:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c42c:	4b5b      	ldr	r3, [pc, #364]	@ (800c59c <getSoundData+0x188>)
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2201      	movs	r2, #1
 800c434:	4053      	eors	r3, r2
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d107      	bne.n	800c44c <getSoundData+0x38>
 800c43c:	4b58      	ldr	r3, [pc, #352]	@ (800c5a0 <getSoundData+0x18c>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	b2db      	uxtb	r3, r3
 800c442:	2201      	movs	r2, #1
 800c444:	4053      	eors	r3, r2
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d001      	beq.n	800c450 <getSoundData+0x3c>
    {
        return false;
 800c44c:	2300      	movs	r3, #0
 800c44e:	e0a0      	b.n	800c592 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c450:	4b54      	ldr	r3, [pc, #336]	@ (800c5a4 <getSoundData+0x190>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b00      	cmp	r3, #0
 800c458:	d005      	beq.n	800c466 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c45a:	4b53      	ldr	r3, [pc, #332]	@ (800c5a8 <getSoundData+0x194>)
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	b25b      	sxtb	r3, r3
 800c460:	0018      	movs	r0, r3
 800c462:	f7ff ffb5 	bl	800c3d0 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c466:	f3bf 8f4f 	dsb	sy
}
 800c46a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c46c:	f3bf 8f6f 	isb	sy
}
 800c470:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c472:	1cfb      	adds	r3, r7, #3
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d04c      	beq.n	800c514 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c47a:	4b4c      	ldr	r3, [pc, #304]	@ (800c5ac <getSoundData+0x198>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d11b      	bne.n	800c4ba <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c48e:	2300      	movs	r3, #0
 800c490:	617b      	str	r3, [r7, #20]
 800c492:	e00e      	b.n	800c4b2 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	18d3      	adds	r3, r2, r3
 800c49a:	3302      	adds	r3, #2
 800c49c:	2200      	movs	r2, #0
 800c49e:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	18d3      	adds	r3, r2, r3
 800c4a6:	3308      	adds	r3, #8
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	617b      	str	r3, [r7, #20]
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2b05      	cmp	r3, #5
 800c4b6:	d9ed      	bls.n	800c494 <getSoundData+0x80>
 800c4b8:	e02c      	b.n	800c514 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	1c59      	adds	r1, r3, #1
 800c4c0:	4b3b      	ldr	r3, [pc, #236]	@ (800c5b0 <getSoundData+0x19c>)
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	4b3b      	ldr	r3, [pc, #236]	@ (800c5b4 <getSoundData+0x1a0>)
 800c4c6:	681c      	ldr	r4, [r3, #0]
 800c4c8:	4b38      	ldr	r3, [pc, #224]	@ (800c5ac <getSoundData+0x198>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	0023      	movs	r3, r4
 800c4d0:	f000 fde8 	bl	800d0a4 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	613b      	str	r3, [r7, #16]
 800c4d8:	e019      	b.n	800c50e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	18d3      	adds	r3, r2, r3
 800c4e0:	1c98      	adds	r0, r3, #2
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c4ea:	4b33      	ldr	r3, [pc, #204]	@ (800c5b8 <getSoundData+0x1a4>)
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	0092      	lsls	r2, r2, #2
 800c4f0:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c4f2:	4b32      	ldr	r3, [pc, #200]	@ (800c5bc <getSoundData+0x1a8>)
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	0092      	lsls	r2, r2, #2
 800c4f8:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c4fa:	4b2c      	ldr	r3, [pc, #176]	@ (800c5ac <getSoundData+0x198>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	0013      	movs	r3, r2
 800c502:	0022      	movs	r2, r4
 800c504:	f000 fdce 	bl	800d0a4 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	3301      	adds	r3, #1
 800c50c:	613b      	str	r3, [r7, #16]
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	2b05      	cmp	r3, #5
 800c512:	d9e2      	bls.n	800c4da <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c514:	1cbb      	adds	r3, r7, #2
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d028      	beq.n	800c56e <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c51c:	240e      	movs	r4, #14
 800c51e:	193b      	adds	r3, r7, r4
 800c520:	2200      	movs	r2, #0
 800c522:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c524:	250d      	movs	r5, #13
 800c526:	197b      	adds	r3, r7, r5
 800c528:	2200      	movs	r2, #0
 800c52a:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c52c:	4b24      	ldr	r3, [pc, #144]	@ (800c5c0 <getSoundData+0x1ac>)
 800c52e:	6818      	ldr	r0, [r3, #0]
 800c530:	4924      	ldr	r1, [pc, #144]	@ (800c5c4 <getSoundData+0x1b0>)
 800c532:	197b      	adds	r3, r7, r5
 800c534:	193a      	adds	r2, r7, r4
 800c536:	f000 fe59 	bl	800d1ec <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c53a:	193b      	adds	r3, r7, r4
 800c53c:	881a      	ldrh	r2, [r3, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	21ff      	movs	r1, #255	@ 0xff
 800c542:	4011      	ands	r1, r2
 800c544:	000c      	movs	r4, r1
 800c546:	7b99      	ldrb	r1, [r3, #14]
 800c548:	2000      	movs	r0, #0
 800c54a:	4001      	ands	r1, r0
 800c54c:	1c08      	adds	r0, r1, #0
 800c54e:	1c21      	adds	r1, r4, #0
 800c550:	4301      	orrs	r1, r0
 800c552:	7399      	strb	r1, [r3, #14]
 800c554:	0a12      	lsrs	r2, r2, #8
 800c556:	b290      	uxth	r0, r2
 800c558:	7bda      	ldrb	r2, [r3, #15]
 800c55a:	2100      	movs	r1, #0
 800c55c:	400a      	ands	r2, r1
 800c55e:	1c11      	adds	r1, r2, #0
 800c560:	1c02      	adds	r2, r0, #0
 800c562:	430a      	orrs	r2, r1
 800c564:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c566:	197b      	adds	r3, r7, r5
 800c568:	781a      	ldrb	r2, [r3, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c56e:	f000 f86f 	bl	800c650 <micSettlingComplete>
 800c572:	0003      	movs	r3, r0
 800c574:	001a      	movs	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c57a:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a4 <getSoundData+0x190>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d005      	beq.n	800c590 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c584:	4b08      	ldr	r3, [pc, #32]	@ (800c5a8 <getSoundData+0x194>)
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	b25b      	sxtb	r3, r3
 800c58a:	0018      	movs	r0, r3
 800c58c:	f7ff ff06 	bl	800c39c <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c590:	2301      	movs	r3, #1
}
 800c592:	0018      	movs	r0, r3
 800c594:	46bd      	mov	sp, r7
 800c596:	b006      	add	sp, #24
 800c598:	bdb0      	pop	{r4, r5, r7, pc}
 800c59a:	46c0      	nop			@ (mov r8, r8)
 800c59c:	20000d7a 	.word	0x20000d7a
 800c5a0:	20000d7d 	.word	0x20000d7d
 800c5a4:	20000d7c 	.word	0x20000d7c
 800c5a8:	200017cc 	.word	0x200017cc
 800c5ac:	20001808 	.word	0x20001808
 800c5b0:	200017d0 	.word	0x200017d0
 800c5b4:	200017d4 	.word	0x200017d4
 800c5b8:	200017d8 	.word	0x200017d8
 800c5bc:	200017f0 	.word	0x200017f0
 800c5c0:	20000d84 	.word	0x20000d84
 800c5c4:	3b5c7333 	.word	0x3b5c7333

0800c5c8 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
 800c5d4:	001a      	movs	r2, r3
 800c5d6:	1cfb      	adds	r3, r7, #3
 800c5d8:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c5da:	4b09      	ldr	r3, [pc, #36]	@ (800c600 <soundInit+0x38>)
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c5e0:	4b08      	ldr	r3, [pc, #32]	@ (800c604 <soundInit+0x3c>)
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c5e6:	4b08      	ldr	r3, [pc, #32]	@ (800c608 <soundInit+0x40>)
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c5ec:	4b07      	ldr	r3, [pc, #28]	@ (800c60c <soundInit+0x44>)
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	569a      	ldrsb	r2, [r3, r2]
 800c5f2:	4b06      	ldr	r3, [pc, #24]	@ (800c60c <soundInit+0x44>)
 800c5f4:	701a      	strb	r2, [r3, #0]

    return true;
 800c5f6:	2301      	movs	r3, #1
}
 800c5f8:	0018      	movs	r0, r3
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	b004      	add	sp, #16
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	200017c4 	.word	0x200017c4
 800c604:	200017c0 	.word	0x200017c0
 800c608:	200017c8 	.word	0x200017c8
 800c60c:	200017cc 	.word	0x200017cc

0800c610 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c614:	4b02      	ldr	r3, [pc, #8]	@ (800c620 <clearMaximumAmplitude+0x10>)
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
}
 800c61a:	46c0      	nop			@ (mov r8, r8)
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	20000d84 	.word	0x20000d84

0800c624 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c628:	4b08      	ldr	r3, [pc, #32]	@ (800c64c <startMicSettlingPeriod+0x28>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2200      	movs	r2, #0
 800c630:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c632:	4b06      	ldr	r3, [pc, #24]	@ (800c64c <startMicSettlingPeriod+0x28>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	0018      	movs	r0, r3
 800c638:	f00a fb60 	bl	8016cfc <HAL_TIM_Base_Start>
 800c63c:	1e03      	subs	r3, r0, #0
 800c63e:	d001      	beq.n	800c644 <startMicSettlingPeriod+0x20>
    {
        return false;
 800c640:	2300      	movs	r3, #0
 800c642:	e000      	b.n	800c646 <startMicSettlingPeriod+0x22>
    }
    return true;
 800c644:	2301      	movs	r3, #1
}
 800c646:	0018      	movs	r0, r3
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	200017c0 	.word	0x200017c0

0800c650 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c656:	4b0e      	ldr	r3, [pc, #56]	@ (800c690 <micSettlingComplete+0x40>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	2201      	movs	r2, #1
 800c660:	401a      	ands	r2, r3
 800c662:	1dfb      	adds	r3, r7, #7
 800c664:	3a01      	subs	r2, #1
 800c666:	4251      	negs	r1, r2
 800c668:	414a      	adcs	r2, r1
 800c66a:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c66c:	1dfb      	adds	r3, r7, #7
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d007      	beq.n	800c684 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c674:	4b06      	ldr	r3, [pc, #24]	@ (800c690 <micSettlingComplete+0x40>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	0018      	movs	r0, r3
 800c67a:	f00a fb89 	bl	8016d90 <HAL_TIM_Base_Stop>
      DataReady = true;
 800c67e:	4b05      	ldr	r3, [pc, #20]	@ (800c694 <micSettlingComplete+0x44>)
 800c680:	2201      	movs	r2, #1
 800c682:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c684:	1dfb      	adds	r3, r7, #7
 800c686:	781b      	ldrb	r3, [r3, #0]
}
 800c688:	0018      	movs	r0, r3
 800c68a:	46bd      	mov	sp, r7
 800c68c:	b002      	add	sp, #8
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	200017c0 	.word	0x200017c0
 800c694:	20000d79 	.word	0x20000d79

0800c698 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	0002      	movs	r2, r0
 800c6a0:	1dfb      	adds	r3, r7, #7
 800c6a2:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c6a4:	4b29      	ldr	r3, [pc, #164]	@ (800c74c <enableMicrophone+0xb4>)
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	1dfa      	adds	r2, r7, #7
 800c6ac:	7812      	ldrb	r2, [r2, #0]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d101      	bne.n	800c6b6 <enableMicrophone+0x1e>
    {
        return true;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e045      	b.n	800c742 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c6b6:	1dfb      	adds	r3, r7, #7
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d025      	beq.n	800c70a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c6be:	f7ff ffb1 	bl	800c624 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c6c2:	4b23      	ldr	r3, [pc, #140]	@ (800c750 <enableMicrophone+0xb8>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2280      	movs	r2, #128	@ 0x80
 800c6c8:	0092      	lsls	r2, r2, #2
 800c6ca:	4922      	ldr	r1, [pc, #136]	@ (800c754 <enableMicrophone+0xbc>)
 800c6cc:	0018      	movs	r0, r3
 800c6ce:	f006 fd7f 	bl	80131d0 <HAL_I2S_Receive_DMA>
 800c6d2:	1e03      	subs	r3, r0, #0
 800c6d4:	d001      	beq.n	800c6da <enableMicrophone+0x42>
        {
            return false;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e033      	b.n	800c742 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c6da:	f7ff ff99 	bl	800c610 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c6de:	4b1e      	ldr	r3, [pc, #120]	@ (800c758 <enableMicrophone+0xc0>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c6e4:	4b1d      	ldr	r3, [pc, #116]	@ (800c75c <enableMicrophone+0xc4>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	b25b      	sxtb	r3, r3
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	f7ff fe56 	bl	800c39c <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c6f0:	4b1b      	ldr	r3, [pc, #108]	@ (800c760 <enableMicrophone+0xc8>)
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c6f6:	4b15      	ldr	r3, [pc, #84]	@ (800c74c <enableMicrophone+0xb4>)
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c6fc:	4b19      	ldr	r3, [pc, #100]	@ (800c764 <enableMicrophone+0xcc>)
 800c6fe:	2200      	movs	r2, #0
 800c700:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c702:	4b19      	ldr	r3, [pc, #100]	@ (800c768 <enableMicrophone+0xd0>)
 800c704:	2200      	movs	r2, #0
 800c706:	701a      	strb	r2, [r3, #0]
 800c708:	e01a      	b.n	800c740 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c70a:	4b14      	ldr	r3, [pc, #80]	@ (800c75c <enableMicrophone+0xc4>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	b25b      	sxtb	r3, r3
 800c710:	0018      	movs	r0, r3
 800c712:	f7ff fe5d 	bl	800c3d0 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c716:	4b12      	ldr	r3, [pc, #72]	@ (800c760 <enableMicrophone+0xc8>)
 800c718:	2200      	movs	r2, #0
 800c71a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c71c:	4b11      	ldr	r3, [pc, #68]	@ (800c764 <enableMicrophone+0xcc>)
 800c71e:	2200      	movs	r2, #0
 800c720:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c722:	4b11      	ldr	r3, [pc, #68]	@ (800c768 <enableMicrophone+0xd0>)
 800c724:	2200      	movs	r2, #0
 800c726:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c728:	4b09      	ldr	r3, [pc, #36]	@ (800c750 <enableMicrophone+0xb8>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	0018      	movs	r0, r3
 800c72e:	f006 fe11 	bl	8013354 <HAL_I2S_DMAStop>
 800c732:	1e03      	subs	r3, r0, #0
 800c734:	d001      	beq.n	800c73a <enableMicrophone+0xa2>
        {
            return false;
 800c736:	2300      	movs	r3, #0
 800c738:	e003      	b.n	800c742 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c73a:	4b04      	ldr	r3, [pc, #16]	@ (800c74c <enableMicrophone+0xb4>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c740:	2301      	movs	r3, #1
}
 800c742:	0018      	movs	r0, r3
 800c744:	46bd      	mov	sp, r7
 800c746:	b002      	add	sp, #8
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	46c0      	nop			@ (mov r8, r8)
 800c74c:	20000d7a 	.word	0x20000d7a
 800c750:	200017c4 	.word	0x200017c4
 800c754:	20000dc0 	.word	0x20000dc0
 800c758:	20000d80 	.word	0x20000d80
 800c75c:	200017cc 	.word	0x200017cc
 800c760:	20000d7c 	.word	0x20000d7c
 800c764:	20000d7b 	.word	0x20000d7b
 800c768:	20000d7d 	.word	0x20000d7d

0800c76c <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c770:	4b0c      	ldr	r3, [pc, #48]	@ (800c7a4 <startSPLcalculation+0x38>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	b2db      	uxtb	r3, r3
 800c776:	2201      	movs	r2, #1
 800c778:	4053      	eors	r3, r2
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d001      	beq.n	800c784 <startSPLcalculation+0x18>
    {
        return false;
 800c780:	2300      	movs	r3, #0
 800c782:	e00c      	b.n	800c79e <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c784:	4b08      	ldr	r3, [pc, #32]	@ (800c7a8 <startSPLcalculation+0x3c>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <startSPLcalculation+0x26>
    {
        return true;
 800c78e:	2301      	movs	r3, #1
 800c790:	e005      	b.n	800c79e <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c792:	f000 fb63 	bl	800ce5c <resetSPLstate>
    SPLcalcEnabled = true;
 800c796:	4b04      	ldr	r3, [pc, #16]	@ (800c7a8 <startSPLcalculation+0x3c>)
 800c798:	2201      	movs	r2, #1
 800c79a:	701a      	strb	r2, [r3, #0]
    return true;
 800c79c:	2301      	movs	r3, #1
}
 800c79e:	0018      	movs	r0, r3
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	20000d7a 	.word	0x20000d7a
 800c7a8:	20000d7b 	.word	0x20000d7b

0800c7ac <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c7b4:	4b05      	ldr	r3, [pc, #20]	@ (800c7cc <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d102      	bne.n	800c7c4 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c7be:	2000      	movs	r0, #0
 800c7c0:	f000 f81a 	bl	800c7f8 <processHalfDMAbuffer>
  }
}
 800c7c4:	46c0      	nop			@ (mov r8, r8)
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	b002      	add	sp, #8
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	200017c4 	.word	0x200017c4

0800c7d0 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c7d8:	4b06      	ldr	r3, [pc, #24]	@ (800c7f4 <HAL_I2S_RxCpltCallback+0x24>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d104      	bne.n	800c7ec <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c7e2:	2380      	movs	r3, #128	@ 0x80
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	0018      	movs	r0, r3
 800c7e8:	f000 f806 	bl	800c7f8 <processHalfDMAbuffer>
  }
}
 800c7ec:	46c0      	nop			@ (mov r8, r8)
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	b002      	add	sp, #8
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	200017c4 	.word	0x200017c4

0800c7f8 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	005a      	lsls	r2, r3, #1
 800c804:	4b15      	ldr	r3, [pc, #84]	@ (800c85c <processHalfDMAbuffer+0x64>)
 800c806:	18d3      	adds	r3, r2, r3
 800c808:	4a15      	ldr	r2, [pc, #84]	@ (800c860 <processHalfDMAbuffer+0x68>)
 800c80a:	2180      	movs	r1, #128	@ 0x80
 800c80c:	0089      	lsls	r1, r1, #2
 800c80e:	0018      	movs	r0, r3
 800c810:	f000 fd35 	bl	800d27e <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c814:	4b13      	ldr	r3, [pc, #76]	@ (800c864 <processHalfDMAbuffer+0x6c>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	425a      	negs	r2, r3
 800c81a:	4153      	adcs	r3, r2
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	4b11      	ldr	r3, [pc, #68]	@ (800c864 <processHalfDMAbuffer+0x6c>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2109      	movs	r1, #9
 800c824:	4299      	cmp	r1, r3
 800c826:	419b      	sbcs	r3, r3
 800c828:	425b      	negs	r3, r3
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	480c      	ldr	r0, [pc, #48]	@ (800c860 <processHalfDMAbuffer+0x68>)
 800c82e:	2180      	movs	r1, #128	@ 0x80
 800c830:	f000 fb46 	bl	800cec0 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c834:	4b0b      	ldr	r3, [pc, #44]	@ (800c864 <processHalfDMAbuffer+0x6c>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2b09      	cmp	r3, #9
 800c83a:	d804      	bhi.n	800c846 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c83c:	4b09      	ldr	r3, [pc, #36]	@ (800c864 <processHalfDMAbuffer+0x6c>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	4b08      	ldr	r3, [pc, #32]	@ (800c864 <processHalfDMAbuffer+0x6c>)
 800c844:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c846:	4b08      	ldr	r3, [pc, #32]	@ (800c868 <processHalfDMAbuffer+0x70>)
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d001      	beq.n	800c854 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c850:	f000 f826 	bl	800c8a0 <calculateSPLQ31>
    }
}
 800c854:	46c0      	nop			@ (mov r8, r8)
 800c856:	46bd      	mov	sp, r7
 800c858:	b002      	add	sp, #8
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	20000dc0 	.word	0x20000dc0
 800c860:	200015c0 	.word	0x200015c0
 800c864:	20000d80 	.word	0x20000d80
 800c868:	20000d7b 	.word	0x20000d7b

0800c86c <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c874:	4b07      	ldr	r3, [pc, #28]	@ (800c894 <HAL_I2S_ErrorCallback+0x28>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d106      	bne.n	800c88c <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c87e:	4a06      	ldr	r2, [pc, #24]	@ (800c898 <HAL_I2S_ErrorCallback+0x2c>)
 800c880:	239e      	movs	r3, #158	@ 0x9e
 800c882:	0059      	lsls	r1, r3, #1
 800c884:	4b05      	ldr	r3, [pc, #20]	@ (800c89c <HAL_I2S_ErrorCallback+0x30>)
 800c886:	0018      	movs	r0, r3
 800c888:	f002 f8e8 	bl	800ea5c <errorHandler>
  }
}
 800c88c:	46c0      	nop			@ (mov r8, r8)
 800c88e:	46bd      	mov	sp, r7
 800c890:	b002      	add	sp, #8
 800c892:	bd80      	pop	{r7, pc}
 800c894:	200017c4 	.word	0x200017c4
 800c898:	080254b4 	.word	0x080254b4
 800c89c:	08025cdc 	.word	0x08025cdc

0800c8a0 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8a2:	b0b3      	sub	sp, #204	@ 0xcc
 800c8a4:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c8a6:	4ae2      	ldr	r2, [pc, #904]	@ (800cc30 <calculateSPLQ31+0x390>)
 800c8a8:	2338      	movs	r3, #56	@ 0x38
 800c8aa:	2030      	movs	r0, #48	@ 0x30
 800c8ac:	181b      	adds	r3, r3, r0
 800c8ae:	19d9      	adds	r1, r3, r7
 800c8b0:	2334      	movs	r3, #52	@ 0x34
 800c8b2:	181b      	adds	r3, r3, r0
 800c8b4:	19d8      	adds	r0, r3, r7
 800c8b6:	2380      	movs	r3, #128	@ 0x80
 800c8b8:	f000 fc36 	bl	800d128 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c8bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	da00      	bge.n	800c8c4 <calculateSPLQ31+0x24>
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	105b      	asrs	r3, r3, #1
 800c8c6:	001a      	movs	r2, r3
 800c8c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	da00      	bge.n	800c8d0 <calculateSPLQ31+0x30>
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	105b      	asrs	r3, r3, #1
 800c8d2:	18d3      	adds	r3, r2, r3
 800c8d4:	2188      	movs	r1, #136	@ 0x88
 800c8d6:	187a      	adds	r2, r7, r1
 800c8d8:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c8da:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c8dc:	187b      	adds	r3, r7, r1
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	1ad3      	subs	r3, r2, r3
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	2284      	movs	r2, #132	@ 0x84
 800c8e6:	18b9      	adds	r1, r7, r2
 800c8e8:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c8ea:	18bb      	adds	r3, r7, r2
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4ad1      	ldr	r2, [pc, #836]	@ (800cc34 <calculateSPLQ31+0x394>)
 800c8f0:	0019      	movs	r1, r3
 800c8f2:	0010      	movs	r0, r2
 800c8f4:	f000 fc58 	bl	800d1a8 <getPo2factor>
 800c8f8:	0003      	movs	r3, r0
 800c8fa:	2280      	movs	r2, #128	@ 0x80
 800c8fc:	18ba      	adds	r2, r7, r2
 800c8fe:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c900:	2300      	movs	r3, #0
 800c902:	2284      	movs	r2, #132	@ 0x84
 800c904:	2130      	movs	r1, #48	@ 0x30
 800c906:	1852      	adds	r2, r2, r1
 800c908:	19d2      	adds	r2, r2, r7
 800c90a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c90c:	2300      	movs	r3, #0
 800c90e:	2280      	movs	r2, #128	@ 0x80
 800c910:	1852      	adds	r2, r2, r1
 800c912:	19d2      	adds	r2, r2, r7
 800c914:	6013      	str	r3, [r2, #0]
 800c916:	e032      	b.n	800c97e <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c918:	4ac5      	ldr	r2, [pc, #788]	@ (800cc30 <calculateSPLQ31+0x390>)
 800c91a:	2680      	movs	r6, #128	@ 0x80
 800c91c:	2330      	movs	r3, #48	@ 0x30
 800c91e:	18f1      	adds	r1, r6, r3
 800c920:	19cb      	adds	r3, r1, r7
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	589a      	ldr	r2, [r3, r2]
 800c928:	2188      	movs	r1, #136	@ 0x88
 800c92a:	1879      	adds	r1, r7, r1
 800c92c:	680b      	ldr	r3, [r1, #0]
 800c92e:	1ad2      	subs	r2, r2, r3
 800c930:	2180      	movs	r1, #128	@ 0x80
 800c932:	1879      	adds	r1, r7, r1
 800c934:	680b      	ldr	r3, [r1, #0]
 800c936:	409a      	lsls	r2, r3
 800c938:	0011      	movs	r1, r2
 800c93a:	4abf      	ldr	r2, [pc, #764]	@ (800cc38 <calculateSPLQ31+0x398>)
 800c93c:	2084      	movs	r0, #132	@ 0x84
 800c93e:	2330      	movs	r3, #48	@ 0x30
 800c940:	18c3      	adds	r3, r0, r3
 800c942:	19db      	adds	r3, r3, r7
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c94a:	2230      	movs	r2, #48	@ 0x30
 800c94c:	1883      	adds	r3, r0, r2
 800c94e:	19db      	adds	r3, r3, r7
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3301      	adds	r3, #1
 800c954:	49b8      	ldr	r1, [pc, #736]	@ (800cc38 <calculateSPLQ31+0x398>)
 800c956:	009a      	lsls	r2, r3, #2
 800c958:	2300      	movs	r3, #0
 800c95a:	5053      	str	r3, [r2, r1]
        count += 2;
 800c95c:	2230      	movs	r2, #48	@ 0x30
 800c95e:	1883      	adds	r3, r0, r2
 800c960:	19db      	adds	r3, r3, r7
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	3302      	adds	r3, #2
 800c966:	0011      	movs	r1, r2
 800c968:	1882      	adds	r2, r0, r2
 800c96a:	19d2      	adds	r2, r2, r7
 800c96c:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c96e:	000a      	movs	r2, r1
 800c970:	18b3      	adds	r3, r6, r2
 800c972:	19db      	adds	r3, r3, r7
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3301      	adds	r3, #1
 800c978:	18b2      	adds	r2, r6, r2
 800c97a:	19d2      	adds	r2, r2, r7
 800c97c:	6013      	str	r3, [r2, #0]
 800c97e:	2380      	movs	r3, #128	@ 0x80
 800c980:	2630      	movs	r6, #48	@ 0x30
 800c982:	199b      	adds	r3, r3, r6
 800c984:	19db      	adds	r3, r3, r7
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2b7f      	cmp	r3, #127	@ 0x7f
 800c98a:	d9c5      	bls.n	800c918 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c98c:	4bab      	ldr	r3, [pc, #684]	@ (800cc3c <calculateSPLQ31+0x39c>)
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	49a9      	ldr	r1, [pc, #676]	@ (800cc38 <calculateSPLQ31+0x398>)
 800c992:	2301      	movs	r3, #1
 800c994:	2200      	movs	r2, #0
 800c996:	f011 fa77 	bl	801de88 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c99a:	4aa9      	ldr	r2, [pc, #676]	@ (800cc40 <calculateSPLQ31+0x3a0>)
 800c99c:	2338      	movs	r3, #56	@ 0x38
 800c99e:	199b      	adds	r3, r3, r6
 800c9a0:	19d9      	adds	r1, r3, r7
 800c9a2:	2334      	movs	r3, #52	@ 0x34
 800c9a4:	199b      	adds	r3, r3, r6
 800c9a6:	19d8      	adds	r0, r3, r7
 800c9a8:	237e      	movs	r3, #126	@ 0x7e
 800c9aa:	f000 fbbd 	bl	800d128 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c9ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c9b0:	2380      	movs	r3, #128	@ 0x80
 800c9b2:	061b      	lsls	r3, r3, #24
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d101      	bne.n	800c9bc <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c9b8:	4b9e      	ldr	r3, [pc, #632]	@ (800cc34 <calculateSPLQ31+0x394>)
 800c9ba:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c9bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c9be:	2380      	movs	r3, #128	@ 0x80
 800c9c0:	061b      	lsls	r3, r3, #24
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d101      	bne.n	800c9ca <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c9c6:	4b9b      	ldr	r3, [pc, #620]	@ (800cc34 <calculateSPLQ31+0x394>)
 800c9c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c9ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9cc:	17da      	asrs	r2, r3, #31
 800c9ce:	189b      	adds	r3, r3, r2
 800c9d0:	4053      	eors	r3, r2
 800c9d2:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c9d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9d6:	17da      	asrs	r2, r3, #31
 800c9d8:	189b      	adds	r3, r3, r2
 800c9da:	4053      	eors	r3, r2
 800c9dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c9de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c9e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	dd01      	ble.n	800c9ea <calculateSPLQ31+0x14a>
    {
        max = min;
 800c9e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c9ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c9f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c9f2:	4a90      	ldr	r2, [pc, #576]	@ (800cc34 <calculateSPLQ31+0x394>)
 800c9f4:	0019      	movs	r1, r3
 800c9f6:	0010      	movs	r0, r2
 800c9f8:	f000 fbd6 	bl	800d1a8 <getPo2factor>
 800c9fc:	0003      	movs	r3, r0
 800c9fe:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800ca00:	2302      	movs	r3, #2
 800ca02:	22ac      	movs	r2, #172	@ 0xac
 800ca04:	18ba      	adds	r2, r7, r2
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	e012      	b.n	800ca30 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800ca0a:	4a8b      	ldr	r2, [pc, #556]	@ (800cc38 <calculateSPLQ31+0x398>)
 800ca0c:	20ac      	movs	r0, #172	@ 0xac
 800ca0e:	183b      	adds	r3, r7, r0
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	589a      	ldr	r2, [r3, r2]
 800ca16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca18:	409a      	lsls	r2, r3
 800ca1a:	0011      	movs	r1, r2
 800ca1c:	4a86      	ldr	r2, [pc, #536]	@ (800cc38 <calculateSPLQ31+0x398>)
 800ca1e:	183b      	adds	r3, r7, r0
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800ca26:	183b      	adds	r3, r7, r0
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	183a      	adds	r2, r7, r0
 800ca2e:	6013      	str	r3, [r2, #0]
 800ca30:	23ac      	movs	r3, #172	@ 0xac
 800ca32:	18fb      	adds	r3, r7, r3
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca38:	d9e7      	bls.n	800ca0a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800ca3a:	4b7d      	ldr	r3, [pc, #500]	@ (800cc30 <calculateSPLQ31+0x390>)
 800ca3c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800ca3e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800ca40:	4b7d      	ldr	r3, [pc, #500]	@ (800cc38 <calculateSPLQ31+0x398>)
 800ca42:	2240      	movs	r2, #64	@ 0x40
 800ca44:	0018      	movs	r0, r3
 800ca46:	f011 ffc9 	bl	801e9dc <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800ca4a:	2330      	movs	r3, #48	@ 0x30
 800ca4c:	18fb      	adds	r3, r7, r3
 800ca4e:	0018      	movs	r0, r3
 800ca50:	2330      	movs	r3, #48	@ 0x30
 800ca52:	001a      	movs	r2, r3
 800ca54:	2100      	movs	r1, #0
 800ca56:	f013 fde5 	bl	8020624 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	21a0      	movs	r1, #160	@ 0xa0
 800ca60:	1879      	adds	r1, r7, r1
 800ca62:	600a      	str	r2, [r1, #0]
 800ca64:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800ca66:	2301      	movs	r3, #1
 800ca68:	229c      	movs	r2, #156	@ 0x9c
 800ca6a:	18ba      	adds	r2, r7, r2
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	e05b      	b.n	800cb28 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800ca70:	269c      	movs	r6, #156	@ 0x9c
 800ca72:	19bb      	adds	r3, r7, r6
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	009a      	lsls	r2, r3, #2
 800ca78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca7a:	189b      	adds	r3, r3, r2
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	613b      	str	r3, [r7, #16]
 800ca80:	17db      	asrs	r3, r3, #31
 800ca82:	617b      	str	r3, [r7, #20]
 800ca84:	4b6f      	ldr	r3, [pc, #444]	@ (800cc44 <calculateSPLQ31+0x3a4>)
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	19bb      	adds	r3, r7, r6
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	005b      	lsls	r3, r3, #1
 800ca8e:	18d3      	adds	r3, r2, r3
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	60bb      	str	r3, [r7, #8]
 800ca94:	2300      	movs	r3, #0
 800ca96:	60fb      	str	r3, [r7, #12]
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6938      	ldr	r0, [r7, #16]
 800ca9e:	6979      	ldr	r1, [r7, #20]
 800caa0:	f7f3 fd8e 	bl	80005c0 <__aeabi_lmul>
 800caa4:	0002      	movs	r2, r0
 800caa6:	000b      	movs	r3, r1
 800caa8:	0010      	movs	r0, r2
 800caaa:	0019      	movs	r1, r3
 800caac:	23a0      	movs	r3, #160	@ 0xa0
 800caae:	18fa      	adds	r2, r7, r3
 800cab0:	6853      	ldr	r3, [r2, #4]
 800cab2:	6812      	ldr	r2, [r2, #0]
 800cab4:	1812      	adds	r2, r2, r0
 800cab6:	414b      	adcs	r3, r1
 800cab8:	21a0      	movs	r1, #160	@ 0xa0
 800caba:	1879      	adds	r1, r7, r1
 800cabc:	600a      	str	r2, [r1, #0]
 800cabe:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800cac0:	4b61      	ldr	r3, [pc, #388]	@ (800cc48 <calculateSPLQ31+0x3a8>)
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	19bb      	adds	r3, r7, r6
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	18d3      	adds	r3, r2, r3
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	2b06      	cmp	r3, #6
 800cace:	d025      	beq.n	800cb1c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800cad0:	4b5d      	ldr	r3, [pc, #372]	@ (800cc48 <calculateSPLQ31+0x3a8>)
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	19bb      	adds	r3, r7, r6
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	18d3      	adds	r3, r2, r3
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	2230      	movs	r2, #48	@ 0x30
 800cade:	18ba      	adds	r2, r7, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	18d3      	adds	r3, r2, r3
 800cae4:	6818      	ldr	r0, [r3, #0]
 800cae6:	6859      	ldr	r1, [r3, #4]
 800cae8:	19bb      	adds	r3, r7, r6
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	009a      	lsls	r2, r3, #2
 800caee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800caf0:	189b      	adds	r3, r3, r2
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	603b      	str	r3, [r7, #0]
 800caf6:	17db      	asrs	r3, r3, #31
 800caf8:	607b      	str	r3, [r7, #4]
 800cafa:	4b53      	ldr	r3, [pc, #332]	@ (800cc48 <calculateSPLQ31+0x3a8>)
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	19be      	adds	r6, r7, r6
 800cb00:	6833      	ldr	r3, [r6, #0]
 800cb02:	18d3      	adds	r3, r2, r3
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	001e      	movs	r6, r3
 800cb08:	683a      	ldr	r2, [r7, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	1880      	adds	r0, r0, r2
 800cb0e:	4159      	adcs	r1, r3
 800cb10:	2330      	movs	r3, #48	@ 0x30
 800cb12:	18fa      	adds	r2, r7, r3
 800cb14:	00f3      	lsls	r3, r6, #3
 800cb16:	18d3      	adds	r3, r2, r3
 800cb18:	6018      	str	r0, [r3, #0]
 800cb1a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800cb1c:	229c      	movs	r2, #156	@ 0x9c
 800cb1e:	18bb      	adds	r3, r7, r2
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	3301      	adds	r3, #1
 800cb24:	18ba      	adds	r2, r7, r2
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	239c      	movs	r3, #156	@ 0x9c
 800cb2a:	18fb      	adds	r3, r7, r3
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b3f      	cmp	r3, #63	@ 0x3f
 800cb30:	d99e      	bls.n	800ca70 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800cb32:	2380      	movs	r3, #128	@ 0x80
 800cb34:	18fb      	adds	r3, r7, r3
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	001a      	movs	r2, r3
 800cb3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb3e:	005b      	lsls	r3, r3, #1
 800cb40:	18d3      	adds	r3, r2, r3
 800cb42:	3b22      	subs	r3, #34	@ 0x22
 800cb44:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800cb46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb48:	17da      	asrs	r2, r3, #31
 800cb4a:	189b      	adds	r3, r3, r2
 800cb4c:	4053      	eors	r3, r2
 800cb4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800cb50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	da62      	bge.n	800cc1c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800cb56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb58:	3b20      	subs	r3, #32
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	db05      	blt.n	800cb6a <calculateSPLQ31+0x2ca>
 800cb5e:	22a0      	movs	r2, #160	@ 0xa0
 800cb60:	18ba      	adds	r2, r7, r2
 800cb62:	6812      	ldr	r2, [r2, #0]
 800cb64:	409a      	lsls	r2, r3
 800cb66:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb68:	e010      	b.n	800cb8c <calculateSPLQ31+0x2ec>
 800cb6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb6c:	2220      	movs	r2, #32
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	22a0      	movs	r2, #160	@ 0xa0
 800cb72:	18ba      	adds	r2, r7, r2
 800cb74:	6812      	ldr	r2, [r2, #0]
 800cb76:	40da      	lsrs	r2, r3
 800cb78:	0013      	movs	r3, r2
 800cb7a:	22a4      	movs	r2, #164	@ 0xa4
 800cb7c:	18ba      	adds	r2, r7, r2
 800cb7e:	6811      	ldr	r1, [r2, #0]
 800cb80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cb82:	4091      	lsls	r1, r2
 800cb84:	6279      	str	r1, [r7, #36]	@ 0x24
 800cb86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb88:	431a      	orrs	r2, r3
 800cb8a:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb8c:	21a0      	movs	r1, #160	@ 0xa0
 800cb8e:	187b      	adds	r3, r7, r1
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb94:	409a      	lsls	r2, r3
 800cb96:	623a      	str	r2, [r7, #32]
 800cb98:	6a3b      	ldr	r3, [r7, #32]
 800cb9a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800cb9c:	187a      	adds	r2, r7, r1
 800cb9e:	6013      	str	r3, [r2, #0]
 800cba0:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cba2:	2300      	movs	r3, #0
 800cba4:	2298      	movs	r2, #152	@ 0x98
 800cba6:	18ba      	adds	r2, r7, r2
 800cba8:	6013      	str	r3, [r2, #0]
 800cbaa:	e031      	b.n	800cc10 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800cbac:	2330      	movs	r3, #48	@ 0x30
 800cbae:	18fa      	adds	r2, r7, r3
 800cbb0:	2398      	movs	r3, #152	@ 0x98
 800cbb2:	18fb      	adds	r3, r7, r3
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	00db      	lsls	r3, r3, #3
 800cbb8:	18d3      	adds	r3, r2, r3
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cbc0:	3920      	subs	r1, #32
 800cbc2:	2900      	cmp	r1, #0
 800cbc4:	db03      	blt.n	800cbce <calculateSPLQ31+0x32e>
 800cbc6:	0010      	movs	r0, r2
 800cbc8:	4088      	lsls	r0, r1
 800cbca:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cbcc:	e00c      	b.n	800cbe8 <calculateSPLQ31+0x348>
 800cbce:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cbd0:	2020      	movs	r0, #32
 800cbd2:	1a41      	subs	r1, r0, r1
 800cbd4:	0010      	movs	r0, r2
 800cbd6:	40c8      	lsrs	r0, r1
 800cbd8:	0001      	movs	r1, r0
 800cbda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cbdc:	001c      	movs	r4, r3
 800cbde:	4084      	lsls	r4, r0
 800cbe0:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800cbe2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cbe4:	4308      	orrs	r0, r1
 800cbe6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cbe8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cbea:	0013      	movs	r3, r2
 800cbec:	408b      	lsls	r3, r1
 800cbee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cbf0:	2330      	movs	r3, #48	@ 0x30
 800cbf2:	18fa      	adds	r2, r7, r3
 800cbf4:	2098      	movs	r0, #152	@ 0x98
 800cbf6:	183b      	adds	r3, r7, r0
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	18d3      	adds	r3, r2, r3
 800cbfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc02:	6019      	str	r1, [r3, #0]
 800cc04:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cc06:	183b      	adds	r3, r7, r0
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	183a      	adds	r2, r7, r0
 800cc0e:	6013      	str	r3, [r2, #0]
 800cc10:	2398      	movs	r3, #152	@ 0x98
 800cc12:	18fb      	adds	r3, r7, r3
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b05      	cmp	r3, #5
 800cc18:	d9c8      	bls.n	800cbac <calculateSPLQ31+0x30c>
 800cc1a:	e06b      	b.n	800ccf4 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800cc1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc1e:	3b20      	subs	r3, #32
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	db13      	blt.n	800cc4c <calculateSPLQ31+0x3ac>
 800cc24:	22a4      	movs	r2, #164	@ 0xa4
 800cc26:	18ba      	adds	r2, r7, r2
 800cc28:	6812      	ldr	r2, [r2, #0]
 800cc2a:	40da      	lsrs	r2, r3
 800cc2c:	61ba      	str	r2, [r7, #24]
 800cc2e:	e01e      	b.n	800cc6e <calculateSPLQ31+0x3ce>
 800cc30:	200015c0 	.word	0x200015c0
 800cc34:	7fffffff 	.word	0x7fffffff
 800cc38:	2000180c 	.word	0x2000180c
 800cc3c:	200000b8 	.word	0x200000b8
 800cc40:	20001814 	.word	0x20001814
 800cc44:	200000bc 	.word	0x200000bc
 800cc48:	200000c8 	.word	0x200000c8
 800cc4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc4e:	2220      	movs	r2, #32
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	22a4      	movs	r2, #164	@ 0xa4
 800cc54:	18ba      	adds	r2, r7, r2
 800cc56:	6812      	ldr	r2, [r2, #0]
 800cc58:	409a      	lsls	r2, r3
 800cc5a:	0013      	movs	r3, r2
 800cc5c:	22a0      	movs	r2, #160	@ 0xa0
 800cc5e:	18ba      	adds	r2, r7, r2
 800cc60:	6811      	ldr	r1, [r2, #0]
 800cc62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc64:	40d1      	lsrs	r1, r2
 800cc66:	61b9      	str	r1, [r7, #24]
 800cc68:	69ba      	ldr	r2, [r7, #24]
 800cc6a:	431a      	orrs	r2, r3
 800cc6c:	61ba      	str	r2, [r7, #24]
 800cc6e:	23a4      	movs	r3, #164	@ 0xa4
 800cc70:	18fb      	adds	r3, r7, r3
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc76:	40da      	lsrs	r2, r3
 800cc78:	61fa      	str	r2, [r7, #28]
 800cc7a:	69ba      	ldr	r2, [r7, #24]
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	21a0      	movs	r1, #160	@ 0xa0
 800cc80:	1879      	adds	r1, r7, r1
 800cc82:	600a      	str	r2, [r1, #0]
 800cc84:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cc86:	2300      	movs	r3, #0
 800cc88:	2294      	movs	r2, #148	@ 0x94
 800cc8a:	18ba      	adds	r2, r7, r2
 800cc8c:	6013      	str	r3, [r2, #0]
 800cc8e:	e02c      	b.n	800ccea <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800cc90:	2330      	movs	r3, #48	@ 0x30
 800cc92:	18fa      	adds	r2, r7, r3
 800cc94:	2394      	movs	r3, #148	@ 0x94
 800cc96:	18fb      	adds	r3, r7, r3
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	18d3      	adds	r3, r2, r3
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cca4:	3920      	subs	r1, #32
 800cca6:	2900      	cmp	r1, #0
 800cca8:	db03      	blt.n	800ccb2 <calculateSPLQ31+0x412>
 800ccaa:	0018      	movs	r0, r3
 800ccac:	40c8      	lsrs	r0, r1
 800ccae:	0004      	movs	r4, r0
 800ccb0:	e00a      	b.n	800ccc8 <calculateSPLQ31+0x428>
 800ccb2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ccb4:	2020      	movs	r0, #32
 800ccb6:	1a41      	subs	r1, r0, r1
 800ccb8:	0018      	movs	r0, r3
 800ccba:	4088      	lsls	r0, r1
 800ccbc:	0001      	movs	r1, r0
 800ccbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ccc0:	0016      	movs	r6, r2
 800ccc2:	40c6      	lsrs	r6, r0
 800ccc4:	0034      	movs	r4, r6
 800ccc6:	430c      	orrs	r4, r1
 800ccc8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ccca:	40cb      	lsrs	r3, r1
 800cccc:	001d      	movs	r5, r3
 800ccce:	2330      	movs	r3, #48	@ 0x30
 800ccd0:	18fa      	adds	r2, r7, r3
 800ccd2:	2194      	movs	r1, #148	@ 0x94
 800ccd4:	187b      	adds	r3, r7, r1
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	18d3      	adds	r3, r2, r3
 800ccdc:	601c      	str	r4, [r3, #0]
 800ccde:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cce0:	187b      	adds	r3, r7, r1
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	3301      	adds	r3, #1
 800cce6:	187a      	adds	r2, r7, r1
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	2394      	movs	r3, #148	@ 0x94
 800ccec:	18fb      	adds	r3, r7, r3
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b05      	cmp	r3, #5
 800ccf2:	d9cd      	bls.n	800cc90 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800ccf4:	230f      	movs	r3, #15
 800ccf6:	425d      	negs	r5, r3
 800ccf8:	2305      	movs	r3, #5
 800ccfa:	425e      	negs	r6, r3
 800ccfc:	4b4a      	ldr	r3, [pc, #296]	@ (800ce28 <calculateSPLQ31+0x588>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	4b4a      	ldr	r3, [pc, #296]	@ (800ce2c <calculateSPLQ31+0x58c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	21a0      	movs	r1, #160	@ 0xa0
 800cd0a:	1879      	adds	r1, r7, r1
 800cd0c:	6808      	ldr	r0, [r1, #0]
 800cd0e:	6849      	ldr	r1, [r1, #4]
 800cd10:	4c47      	ldr	r4, [pc, #284]	@ (800ce30 <calculateSPLQ31+0x590>)
 800cd12:	9403      	str	r4, [sp, #12]
 800cd14:	4c47      	ldr	r4, [pc, #284]	@ (800ce34 <calculateSPLQ31+0x594>)
 800cd16:	9402      	str	r4, [sp, #8]
 800cd18:	9301      	str	r3, [sp, #4]
 800cd1a:	9200      	str	r2, [sp, #0]
 800cd1c:	0033      	movs	r3, r6
 800cd1e:	002a      	movs	r2, r5
 800cd20:	f000 fa86 	bl	800d230 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cd24:	2300      	movs	r3, #0
 800cd26:	2290      	movs	r2, #144	@ 0x90
 800cd28:	18ba      	adds	r2, r7, r2
 800cd2a:	6013      	str	r3, [r2, #0]
 800cd2c:	e026      	b.n	800cd7c <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cd2e:	2330      	movs	r3, #48	@ 0x30
 800cd30:	18fa      	adds	r2, r7, r3
 800cd32:	2490      	movs	r4, #144	@ 0x90
 800cd34:	193b      	adds	r3, r7, r4
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	18d3      	adds	r3, r2, r3
 800cd3c:	6818      	ldr	r0, [r3, #0]
 800cd3e:	6859      	ldr	r1, [r3, #4]
 800cd40:	230f      	movs	r3, #15
 800cd42:	425d      	negs	r5, r3
 800cd44:	2305      	movs	r3, #5
 800cd46:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800cd48:	193b      	adds	r3, r7, r4
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	009a      	lsls	r2, r3, #2
 800cd4e:	4b3a      	ldr	r3, [pc, #232]	@ (800ce38 <calculateSPLQ31+0x598>)
 800cd50:	18d3      	adds	r3, r2, r3
 800cd52:	193a      	adds	r2, r7, r4
 800cd54:	6812      	ldr	r2, [r2, #0]
 800cd56:	0094      	lsls	r4, r2, #2
 800cd58:	4a38      	ldr	r2, [pc, #224]	@ (800ce3c <calculateSPLQ31+0x59c>)
 800cd5a:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cd5c:	9203      	str	r2, [sp, #12]
 800cd5e:	9302      	str	r3, [sp, #8]
 800cd60:	2300      	movs	r3, #0
 800cd62:	9301      	str	r3, [sp, #4]
 800cd64:	2300      	movs	r3, #0
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	0033      	movs	r3, r6
 800cd6a:	002a      	movs	r2, r5
 800cd6c:	f000 fa60 	bl	800d230 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cd70:	2490      	movs	r4, #144	@ 0x90
 800cd72:	193b      	adds	r3, r7, r4
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3301      	adds	r3, #1
 800cd78:	193a      	adds	r2, r7, r4
 800cd7a:	6013      	str	r3, [r2, #0]
 800cd7c:	2390      	movs	r3, #144	@ 0x90
 800cd7e:	18fb      	adds	r3, r7, r3
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b05      	cmp	r3, #5
 800cd84:	d9d3      	bls.n	800cd2e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800cd86:	4b2b      	ldr	r3, [pc, #172]	@ (800ce34 <calculateSPLQ31+0x594>)
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	4b2d      	ldr	r3, [pc, #180]	@ (800ce40 <calculateSPLQ31+0x5a0>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	18d2      	adds	r2, r2, r3
 800cd90:	4b2b      	ldr	r3, [pc, #172]	@ (800ce40 <calculateSPLQ31+0x5a0>)
 800cd92:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800cd94:	4b26      	ldr	r3, [pc, #152]	@ (800ce30 <calculateSPLQ31+0x590>)
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	4b2a      	ldr	r3, [pc, #168]	@ (800ce44 <calculateSPLQ31+0x5a4>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	18d2      	adds	r2, r2, r3
 800cd9e:	4b29      	ldr	r3, [pc, #164]	@ (800ce44 <calculateSPLQ31+0x5a4>)
 800cda0:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cda2:	2300      	movs	r3, #0
 800cda4:	228c      	movs	r2, #140	@ 0x8c
 800cda6:	18ba      	adds	r2, r7, r2
 800cda8:	6013      	str	r3, [r2, #0]
 800cdaa:	e025      	b.n	800cdf8 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cdac:	4b22      	ldr	r3, [pc, #136]	@ (800ce38 <calculateSPLQ31+0x598>)
 800cdae:	208c      	movs	r0, #140	@ 0x8c
 800cdb0:	183a      	adds	r2, r7, r0
 800cdb2:	6812      	ldr	r2, [r2, #0]
 800cdb4:	0092      	lsls	r2, r2, #2
 800cdb6:	58d2      	ldr	r2, [r2, r3]
 800cdb8:	4b23      	ldr	r3, [pc, #140]	@ (800ce48 <calculateSPLQ31+0x5a8>)
 800cdba:	1839      	adds	r1, r7, r0
 800cdbc:	6809      	ldr	r1, [r1, #0]
 800cdbe:	0089      	lsls	r1, r1, #2
 800cdc0:	58cb      	ldr	r3, [r1, r3]
 800cdc2:	18d1      	adds	r1, r2, r3
 800cdc4:	4b20      	ldr	r3, [pc, #128]	@ (800ce48 <calculateSPLQ31+0x5a8>)
 800cdc6:	183a      	adds	r2, r7, r0
 800cdc8:	6812      	ldr	r2, [r2, #0]
 800cdca:	0092      	lsls	r2, r2, #2
 800cdcc:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cdce:	4b1b      	ldr	r3, [pc, #108]	@ (800ce3c <calculateSPLQ31+0x59c>)
 800cdd0:	183a      	adds	r2, r7, r0
 800cdd2:	6812      	ldr	r2, [r2, #0]
 800cdd4:	0092      	lsls	r2, r2, #2
 800cdd6:	58d2      	ldr	r2, [r2, r3]
 800cdd8:	4b1c      	ldr	r3, [pc, #112]	@ (800ce4c <calculateSPLQ31+0x5ac>)
 800cdda:	1839      	adds	r1, r7, r0
 800cddc:	6809      	ldr	r1, [r1, #0]
 800cdde:	0089      	lsls	r1, r1, #2
 800cde0:	58cb      	ldr	r3, [r1, r3]
 800cde2:	18d1      	adds	r1, r2, r3
 800cde4:	4b19      	ldr	r3, [pc, #100]	@ (800ce4c <calculateSPLQ31+0x5ac>)
 800cde6:	183a      	adds	r2, r7, r0
 800cde8:	6812      	ldr	r2, [r2, #0]
 800cdea:	0092      	lsls	r2, r2, #2
 800cdec:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cdee:	183b      	adds	r3, r7, r0
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	183a      	adds	r2, r7, r0
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	238c      	movs	r3, #140	@ 0x8c
 800cdfa:	18fb      	adds	r3, r7, r3
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b05      	cmp	r3, #5
 800ce00:	d9d4      	bls.n	800cdac <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800ce02:	4b13      	ldr	r3, [pc, #76]	@ (800ce50 <calculateSPLQ31+0x5b0>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	1c5a      	adds	r2, r3, #1
 800ce08:	4b11      	ldr	r3, [pc, #68]	@ (800ce50 <calculateSPLQ31+0x5b0>)
 800ce0a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800ce0c:	4b10      	ldr	r3, [pc, #64]	@ (800ce50 <calculateSPLQ31+0x5b0>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b0f      	cmp	r3, #15
 800ce12:	d905      	bls.n	800ce20 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800ce14:	4b0f      	ldr	r3, [pc, #60]	@ (800ce54 <calculateSPLQ31+0x5b4>)
 800ce16:	2201      	movs	r2, #1
 800ce18:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ce1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ce58 <calculateSPLQ31+0x5b8>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	701a      	strb	r2, [r3, #0]
    }
}
 800ce20:	46c0      	nop			@ (mov r8, r8)
 800ce22:	46bd      	mov	sp, r7
 800ce24:	b02f      	add	sp, #188	@ 0xbc
 800ce26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce28:	200000c0 	.word	0x200000c0
 800ce2c:	200000c4 	.word	0x200000c4
 800ce30:	20000d8c 	.word	0x20000d8c
 800ce34:	20000d88 	.word	0x20000d88
 800ce38:	20000d90 	.word	0x20000d90
 800ce3c:	20000da8 	.word	0x20000da8
 800ce40:	200017d0 	.word	0x200017d0
 800ce44:	200017d4 	.word	0x200017d4
 800ce48:	200017d8 	.word	0x200017d8
 800ce4c:	200017f0 	.word	0x200017f0
 800ce50:	20001808 	.word	0x20001808
 800ce54:	20000d7d 	.word	0x20000d7d
 800ce58:	20000d7b 	.word	0x20000d7b

0800ce5c <resetSPLstate>:

static void resetSPLstate(void)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800ce62:	4b11      	ldr	r3, [pc, #68]	@ (800cea8 <resetSPLstate+0x4c>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800ce68:	4b10      	ldr	r3, [pc, #64]	@ (800ceac <resetSPLstate+0x50>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800ce6e:	4b10      	ldr	r3, [pc, #64]	@ (800ceb0 <resetSPLstate+0x54>)
 800ce70:	2200      	movs	r2, #0
 800ce72:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ce74:	2300      	movs	r3, #0
 800ce76:	607b      	str	r3, [r7, #4]
 800ce78:	e00c      	b.n	800ce94 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800ce7a:	4b0e      	ldr	r3, [pc, #56]	@ (800ceb4 <resetSPLstate+0x58>)
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	0092      	lsls	r2, r2, #2
 800ce80:	2100      	movs	r1, #0
 800ce82:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800ce84:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb8 <resetSPLstate+0x5c>)
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	0092      	lsls	r2, r2, #2
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3301      	adds	r3, #1
 800ce92:	607b      	str	r3, [r7, #4]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b05      	cmp	r3, #5
 800ce98:	d9ef      	bls.n	800ce7a <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800ce9a:	4b08      	ldr	r3, [pc, #32]	@ (800cebc <resetSPLstate+0x60>)
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	701a      	strb	r2, [r3, #0]
}
 800cea0:	46c0      	nop			@ (mov r8, r8)
 800cea2:	46bd      	mov	sp, r7
 800cea4:	b002      	add	sp, #8
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	200017d0 	.word	0x200017d0
 800ceac:	200017d4 	.word	0x200017d4
 800ceb0:	20001808 	.word	0x20001808
 800ceb4:	200017d8 	.word	0x200017d8
 800ceb8:	200017f0 	.word	0x200017f0
 800cebc:	20000d7d 	.word	0x20000d7d

0800cec0 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cec0:	b5b0      	push	{r4, r5, r7, lr}
 800cec2:	b090      	sub	sp, #64	@ 0x40
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	0019      	movs	r1, r3
 800cecc:	1dfb      	adds	r3, r7, #7
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	1dbb      	adds	r3, r7, #6
 800ced2:	1c0a      	adds	r2, r1, #0
 800ced4:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800ced6:	1dfb      	adds	r3, r7, #7
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d005      	beq.n	800ceea <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800cede:	4b3b      	ldr	r3, [pc, #236]	@ (800cfcc <getFilteredMaxAmplitudeQ31+0x10c>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800cee4:	4b3a      	ldr	r3, [pc, #232]	@ (800cfd0 <getFilteredMaxAmplitudeQ31+0x110>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800cef2:	2305      	movs	r3, #5
 800cef4:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800cef6:	2300      	movs	r3, #0
 800cef8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cefa:	e040      	b.n	800cf7e <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	18d3      	adds	r3, r2, r3
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf08:	409a      	lsls	r2, r3
 800cf0a:	0013      	movs	r3, r2
 800cf0c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800cf0e:	4b30      	ldr	r3, [pc, #192]	@ (800cfd0 <getFilteredMaxAmplitudeQ31+0x110>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	425a      	negs	r2, r3
 800cf14:	4b2e      	ldr	r3, [pc, #184]	@ (800cfd0 <getFilteredMaxAmplitudeQ31+0x110>)
 800cf16:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cf18:	2418      	movs	r4, #24
 800cf1a:	193a      	adds	r2, r7, r4
 800cf1c:	492c      	ldr	r1, [pc, #176]	@ (800cfd0 <getFilteredMaxAmplitudeQ31+0x110>)
 800cf1e:	231c      	movs	r3, #28
 800cf20:	18f8      	adds	r0, r7, r3
 800cf22:	2301      	movs	r3, #1
 800cf24:	f011 fdb2 	bl	801ea8c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cf28:	2514      	movs	r5, #20
 800cf2a:	197a      	adds	r2, r7, r5
 800cf2c:	1939      	adds	r1, r7, r4
 800cf2e:	4829      	ldr	r0, [pc, #164]	@ (800cfd4 <getFilteredMaxAmplitudeQ31+0x114>)
 800cf30:	2301      	movs	r3, #1
 800cf32:	f011 fd79 	bl	801ea28 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800cf36:	2410      	movs	r4, #16
 800cf38:	193a      	adds	r2, r7, r4
 800cf3a:	4924      	ldr	r1, [pc, #144]	@ (800cfcc <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf3c:	4826      	ldr	r0, [pc, #152]	@ (800cfd8 <getFilteredMaxAmplitudeQ31+0x118>)
 800cf3e:	2301      	movs	r3, #1
 800cf40:	f011 fd72 	bl	801ea28 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800cf44:	4a21      	ldr	r2, [pc, #132]	@ (800cfcc <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf46:	1939      	adds	r1, r7, r4
 800cf48:	1978      	adds	r0, r7, r5
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	f011 fd9e 	bl	801ea8c <arm_add_q31>

        lastData = fx;
 800cf50:	69fa      	ldr	r2, [r7, #28]
 800cf52:	4b1f      	ldr	r3, [pc, #124]	@ (800cfd0 <getFilteredMaxAmplitudeQ31+0x110>)
 800cf54:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800cf56:	4b1d      	ldr	r3, [pc, #116]	@ (800cfcc <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	da03      	bge.n	800cf68 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800cf60:	4b1a      	ldr	r3, [pc, #104]	@ (800cfcc <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf66:	e007      	b.n	800cf78 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800cf68:	4b18      	ldr	r3, [pc, #96]	@ (800cfcc <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	dd02      	ble.n	800cf78 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800cf72:	4b16      	ldr	r3, [pc, #88]	@ (800cfcc <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800cf78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d3ba      	bcc.n	800cefc <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800cf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf88:	17da      	asrs	r2, r3, #31
 800cf8a:	189b      	adds	r3, r3, r2
 800cf8c:	4053      	eors	r3, r2
 800cf8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800cf90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf92:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800cf94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d200      	bcs.n	800cf9e <getFilteredMaxAmplitudeQ31+0xde>
 800cf9c:	0013      	movs	r3, r2
 800cf9e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cfa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa4:	40da      	lsrs	r2, r3
 800cfa6:	0013      	movs	r3, r2
 800cfa8:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cfaa:	1dbb      	adds	r3, r7, #6
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d007      	beq.n	800cfc2 <getFilteredMaxAmplitudeQ31+0x102>
 800cfb2:	4b0a      	ldr	r3, [pc, #40]	@ (800cfdc <getFilteredMaxAmplitudeQ31+0x11c>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	6a3a      	ldr	r2, [r7, #32]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d902      	bls.n	800cfc2 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cfbc:	4b07      	ldr	r3, [pc, #28]	@ (800cfdc <getFilteredMaxAmplitudeQ31+0x11c>)
 800cfbe:	6a3a      	ldr	r2, [r7, #32]
 800cfc0:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
}
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	b010      	add	sp, #64	@ 0x40
 800cfca:	bdb0      	pop	{r4, r5, r7, pc}
 800cfcc:	20001c0c 	.word	0x20001c0c
 800cfd0:	20001c10 	.word	0x20001c10
 800cfd4:	08025cd4 	.word	0x08025cd4
 800cfd8:	08025cd8 	.word	0x08025cd8
 800cfdc:	20000d84 	.word	0x20000d84

0800cfe0 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cfec:	4913      	ldr	r1, [pc, #76]	@ (800d03c <floatToIntAndFrac2dp+0x5c>)
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	f7f3 ffd6 	bl	8000fa0 <__aeabi_fmul>
 800cff4:	1c03      	adds	r3, r0, #0
 800cff6:	1c18      	adds	r0, r3, #0
 800cff8:	f016 f97c 	bl	80232f4 <roundf>
 800cffc:	1c03      	adds	r3, r0, #0
 800cffe:	1c18      	adds	r0, r3, #0
 800d000:	f7f3 fb0c 	bl	800061c <__aeabi_f2uiz>
 800d004:	0003      	movs	r3, r0
 800d006:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	2164      	movs	r1, #100	@ 0x64
 800d00c:	0018      	movs	r0, r3
 800d00e:	f7f3 f8c9 	bl	80001a4 <__udivsi3>
 800d012:	0003      	movs	r3, r0
 800d014:	001a      	movs	r2, r3
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	b2db      	uxtb	r3, r3
 800d024:	2164      	movs	r1, #100	@ 0x64
 800d026:	434b      	muls	r3, r1
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	701a      	strb	r2, [r3, #0]
}
 800d032:	46c0      	nop			@ (mov r8, r8)
 800d034:	46bd      	mov	sp, r7
 800d036:	b006      	add	sp, #24
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	46c0      	nop			@ (mov r8, r8)
 800d03c:	42c80000 	.word	0x42c80000

0800d040 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800d04c:	4914      	ldr	r1, [pc, #80]	@ (800d0a0 <floatToIntAndFrac1dp+0x60>)
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f7f3 ffa6 	bl	8000fa0 <__aeabi_fmul>
 800d054:	1c03      	adds	r3, r0, #0
 800d056:	1c18      	adds	r0, r3, #0
 800d058:	f016 f94c 	bl	80232f4 <roundf>
 800d05c:	1c03      	adds	r3, r0, #0
 800d05e:	1c18      	adds	r0, r3, #0
 800d060:	f7f3 fadc 	bl	800061c <__aeabi_f2uiz>
 800d064:	0003      	movs	r3, r0
 800d066:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	210a      	movs	r1, #10
 800d06c:	0018      	movs	r0, r3
 800d06e:	f7f3 f899 	bl	80001a4 <__udivsi3>
 800d072:	0003      	movs	r3, r0
 800d074:	001a      	movs	r2, r3
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	b2db      	uxtb	r3, r3
 800d084:	1c19      	adds	r1, r3, #0
 800d086:	0089      	lsls	r1, r1, #2
 800d088:	18cb      	adds	r3, r1, r3
 800d08a:	18db      	adds	r3, r3, r3
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	b2da      	uxtb	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	701a      	strb	r2, [r3, #0]
}
 800d096:	46c0      	nop			@ (mov r8, r8)
 800d098:	46bd      	mov	sp, r7
 800d09a:	b006      	add	sp, #24
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	46c0      	nop			@ (mov r8, r8)
 800d0a0:	41200000 	.word	0x41200000

0800d0a4 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800d0a4:	b590      	push	{r4, r7, lr}
 800d0a6:	b087      	sub	sp, #28
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
 800d0b0:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7f4 fa8c 	bl	80015d0 <__aeabi_i2f>
 800d0b8:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800d0ba:	6838      	ldr	r0, [r7, #0]
 800d0bc:	f7f4 fa88 	bl	80015d0 <__aeabi_i2f>
 800d0c0:	1c03      	adds	r3, r0, #0
 800d0c2:	4918      	ldr	r1, [pc, #96]	@ (800d124 <sumToIntAverage+0x80>)
 800d0c4:	1c18      	adds	r0, r3, #0
 800d0c6:	f7f3 fd85 	bl	8000bd4 <__aeabi_fdiv>
 800d0ca:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800d0cc:	1c19      	adds	r1, r3, #0
 800d0ce:	1c20      	adds	r0, r4, #0
 800d0d0:	f7f3 fbf6 	bl	80008c0 <__aeabi_fadd>
 800d0d4:	1c03      	adds	r3, r0, #0
 800d0d6:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800d0d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0da:	f7f4 fac5 	bl	8001668 <__aeabi_ui2f>
 800d0de:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800d0e0:	1c19      	adds	r1, r3, #0
 800d0e2:	1c20      	adds	r0, r4, #0
 800d0e4:	f7f3 fd76 	bl	8000bd4 <__aeabi_fdiv>
 800d0e8:	1c03      	adds	r3, r0, #0
 800d0ea:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	2310      	movs	r3, #16
 800d0f4:	18f9      	adds	r1, r7, r3
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	1c18      	adds	r0, r3, #0
 800d0fa:	f7ff ffa1 	bl	800d040 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	2bff      	cmp	r3, #255	@ 0xff
 800d102:	d906      	bls.n	800d112 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	22ff      	movs	r2, #255	@ 0xff
 800d108:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	2209      	movs	r2, #9
 800d10e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800d110:	e003      	b.n	800d11a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	b2da      	uxtb	r2, r3
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	701a      	strb	r2, [r3, #0]
}
 800d11a:	46c0      	nop			@ (mov r8, r8)
 800d11c:	46bd      	mov	sp, r7
 800d11e:	b007      	add	sp, #28
 800d120:	bd90      	pop	{r4, r7, pc}
 800d122:	46c0      	nop			@ (mov r8, r8)
 800d124:	41200000 	.word	0x41200000

0800d128 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
 800d134:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	2280      	movs	r2, #128	@ 0x80
 800d13a:	0612      	lsls	r2, r2, #24
 800d13c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	4a18      	ldr	r2, [pc, #96]	@ (800d1a4 <findMinMax+0x7c>)
 800d142:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800d144:	2300      	movs	r3, #0
 800d146:	617b      	str	r3, [r7, #20]
 800d148:	e022      	b.n	800d190 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	18d3      	adds	r3, r2, r3
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	429a      	cmp	r2, r3
 800d15a:	da06      	bge.n	800d16a <findMinMax+0x42>
        {
            min[0] = array[i];
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	18d3      	adds	r3, r2, r3
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	18d3      	adds	r3, r2, r3
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	429a      	cmp	r2, r3
 800d17a:	dd06      	ble.n	800d18a <findMinMax+0x62>
        {
            max[0] = array[i];
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	18d3      	adds	r3, r2, r3
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	3301      	adds	r3, #1
 800d18e:	617b      	str	r3, [r7, #20]
 800d190:	697a      	ldr	r2, [r7, #20]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	429a      	cmp	r2, r3
 800d196:	d3d8      	bcc.n	800d14a <findMinMax+0x22>
        }
    }
}
 800d198:	46c0      	nop			@ (mov r8, r8)
 800d19a:	46c0      	nop			@ (mov r8, r8)
 800d19c:	46bd      	mov	sp, r7
 800d19e:	b006      	add	sp, #24
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	46c0      	nop			@ (mov r8, r8)
 800d1a4:	7fffffff 	.word	0x7fffffff

0800d1a8 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d302      	bcc.n	800d1c4 <getPo2factor+0x1c>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d107      	bne.n	800d1d4 <getPo2factor+0x2c>
    {
        return 0;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e00d      	b.n	800d1e4 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	085b      	lsrs	r3, r3, #1
 800d1cc:	607b      	str	r3, [r7, #4]
        bitShift++;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d2f5      	bcs.n	800d1c8 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
}
 800d1e4:	0018      	movs	r0, r3
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	b004      	add	sp, #16
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
 800d1f8:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f7f4 fa34 	bl	8001668 <__aeabi_ui2f>
 800d200:	1c03      	adds	r3, r0, #0
 800d202:	1c19      	adds	r1, r3, #0
 800d204:	68b8      	ldr	r0, [r7, #8]
 800d206:	f7f3 fecb 	bl	8000fa0 <__aeabi_fmul>
 800d20a:	1c03      	adds	r3, r0, #0
 800d20c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800d20e:	2300      	movs	r3, #0
 800d210:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	2310      	movs	r3, #16
 800d216:	18f9      	adds	r1, r7, r3
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	1c18      	adds	r0, r3, #0
 800d21c:	f7ff fee0 	bl	800cfe0 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	b29a      	uxth	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	801a      	strh	r2, [r3, #0]
}
 800d228:	46c0      	nop			@ (mov r8, r8)
 800d22a:	46bd      	mov	sp, r7
 800d22c:	b006      	add	sp, #24
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	60b8      	str	r0, [r7, #8]
 800d238:	60f9      	str	r1, [r7, #12]
 800d23a:	607a      	str	r2, [r7, #4]
 800d23c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800d23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d240:	6a3a      	ldr	r2, [r7, #32]
 800d242:	68b8      	ldr	r0, [r7, #8]
 800d244:	68f9      	ldr	r1, [r7, #12]
 800d246:	f7fa f9cb 	bl	80075e0 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800d24a:	6a3b      	ldr	r3, [r7, #32]
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	18d2      	adds	r2, r2, r3
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	18d2      	adds	r2, r2, r3
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800d25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	18d2      	adds	r2, r2, r3
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	18d2      	adds	r2, r2, r3
 800d266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d268:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800d26a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	0011      	movs	r1, r2
 800d270:	0018      	movs	r0, r3
 800d272:	f7fa fa45 	bl	8007700 <correctIntFracNumber>
}
 800d276:	46c0      	nop			@ (mov r8, r8)
 800d278:	46bd      	mov	sp, r7
 800d27a:	b004      	add	sp, #16
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800d27e:	b580      	push	{r7, lr}
 800d280:	b086      	sub	sp, #24
 800d282:	af00      	add	r7, sp, #0
 800d284:	60f8      	str	r0, [r7, #12]
 800d286:	60b9      	str	r1, [r7, #8]
 800d288:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800d28a:	2300      	movs	r3, #0
 800d28c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d28e:	2300      	movs	r3, #0
 800d290:	613b      	str	r3, [r7, #16]
 800d292:	e019      	b.n	800d2c8 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	005b      	lsls	r3, r3, #1
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	18d3      	adds	r3, r2, r3
 800d29c:	881b      	ldrh	r3, [r3, #0]
 800d29e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d2a0:	693a      	ldr	r2, [r7, #16]
 800d2a2:	3201      	adds	r2, #1
 800d2a4:	0052      	lsls	r2, r2, #1
 800d2a6:	68f9      	ldr	r1, [r7, #12]
 800d2a8:	188a      	adds	r2, r1, r2
 800d2aa:	8812      	ldrh	r2, [r2, #0]
 800d2ac:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d2ae:	0019      	movs	r1, r3
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d2b8:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d2ba:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	613b      	str	r3, [r7, #16]
 800d2c8:	693a      	ldr	r2, [r7, #16]
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d3e1      	bcc.n	800d294 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d2d0:	46c0      	nop			@ (mov r8, r8)
 800d2d2:	46c0      	nop			@ (mov r8, r8)
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	b006      	add	sp, #24
 800d2d8:	bd80      	pop	{r7, pc}
	...

0800d2dc <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	af00      	add	r7, sp, #0
  init = false;
 800d2e0:	4b02      	ldr	r3, [pc, #8]	@ (800d2ec <InitDone+0x10>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	701a      	strb	r2, [r3, #0]
}
 800d2e6:	46c0      	nop			@ (mov r8, r8)
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	200000cc 	.word	0x200000cc

0800d2f0 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d2f6:	f7f9 f8f1 	bl	80064dc <ReadBatteryVoltage>
 800d2fa:	1c02      	adds	r2, r0, #0
 800d2fc:	4b25      	ldr	r3, [pc, #148]	@ (800d394 <batteryChargeCheck+0xa4>)
 800d2fe:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800d300:	4b24      	ldr	r3, [pc, #144]	@ (800d394 <batteryChargeCheck+0xa4>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4924      	ldr	r1, [pc, #144]	@ (800d398 <batteryChargeCheck+0xa8>)
 800d306:	1c18      	adds	r0, r3, #0
 800d308:	f7f3 f912 	bl	8000530 <__aeabi_fcmplt>
 800d30c:	1e03      	subs	r3, r0, #0
 800d30e:	d002      	beq.n	800d316 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d310:	1dfb      	adds	r3, r7, #7
 800d312:	2200      	movs	r2, #0
 800d314:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800d316:	4b1f      	ldr	r3, [pc, #124]	@ (800d394 <batteryChargeCheck+0xa4>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	491f      	ldr	r1, [pc, #124]	@ (800d398 <batteryChargeCheck+0xa8>)
 800d31c:	1c18      	adds	r0, r3, #0
 800d31e:	f7f3 f925 	bl	800056c <__aeabi_fcmpge>
 800d322:	1e03      	subs	r3, r0, #0
 800d324:	d00d      	beq.n	800d342 <batteryChargeCheck+0x52>
 800d326:	4b1b      	ldr	r3, [pc, #108]	@ (800d394 <batteryChargeCheck+0xa4>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	1c18      	adds	r0, r3, #0
 800d32c:	f7f6 f89a 	bl	8003464 <__aeabi_f2d>
 800d330:	4a1a      	ldr	r2, [pc, #104]	@ (800d39c <batteryChargeCheck+0xac>)
 800d332:	4b1b      	ldr	r3, [pc, #108]	@ (800d3a0 <batteryChargeCheck+0xb0>)
 800d334:	f7f3 f8c2 	bl	80004bc <__aeabi_dcmplt>
 800d338:	1e03      	subs	r3, r0, #0
 800d33a:	d002      	beq.n	800d342 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d33c:	1dfb      	adds	r3, r7, #7
 800d33e:	2201      	movs	r2, #1
 800d340:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800d342:	4b14      	ldr	r3, [pc, #80]	@ (800d394 <batteryChargeCheck+0xa4>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	1c18      	adds	r0, r3, #0
 800d348:	f7f6 f88c 	bl	8003464 <__aeabi_f2d>
 800d34c:	4a13      	ldr	r2, [pc, #76]	@ (800d39c <batteryChargeCheck+0xac>)
 800d34e:	4b14      	ldr	r3, [pc, #80]	@ (800d3a0 <batteryChargeCheck+0xb0>)
 800d350:	f7f3 f8d2 	bl	80004f8 <__aeabi_dcmpge>
 800d354:	1e03      	subs	r3, r0, #0
 800d356:	d00b      	beq.n	800d370 <batteryChargeCheck+0x80>
 800d358:	4b0e      	ldr	r3, [pc, #56]	@ (800d394 <batteryChargeCheck+0xa4>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2181      	movs	r1, #129	@ 0x81
 800d35e:	05c9      	lsls	r1, r1, #23
 800d360:	1c18      	adds	r0, r3, #0
 800d362:	f7f3 f8e5 	bl	8000530 <__aeabi_fcmplt>
 800d366:	1e03      	subs	r3, r0, #0
 800d368:	d002      	beq.n	800d370 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d36a:	1dfb      	adds	r3, r7, #7
 800d36c:	2202      	movs	r2, #2
 800d36e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800d370:	4b08      	ldr	r3, [pc, #32]	@ (800d394 <batteryChargeCheck+0xa4>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2181      	movs	r1, #129	@ 0x81
 800d376:	05c9      	lsls	r1, r1, #23
 800d378:	1c18      	adds	r0, r3, #0
 800d37a:	f7f3 f8f7 	bl	800056c <__aeabi_fcmpge>
 800d37e:	1e03      	subs	r3, r0, #0
 800d380:	d002      	beq.n	800d388 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d382:	1dfb      	adds	r3, r7, #7
 800d384:	2203      	movs	r2, #3
 800d386:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d388:	1dfb      	adds	r3, r7, #7
 800d38a:	781b      	ldrb	r3, [r3, #0]
}
 800d38c:	0018      	movs	r0, r3
 800d38e:	46bd      	mov	sp, r7
 800d390:	b002      	add	sp, #8
 800d392:	bd80      	pop	{r7, pc}
 800d394:	20001c24 	.word	0x20001c24
 800d398:	40600000 	.word	0x40600000
 800d39c:	9999999a 	.word	0x9999999a
 800d3a0:	400d9999 	.word	0x400d9999

0800d3a4 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d3a4:	b5b0      	push	{r4, r5, r7, lr}
 800d3a6:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d3a8:	f7f9 f8fa 	bl	80065a0 <ReadSolarVoltage>
 800d3ac:	0003      	movs	r3, r0
 800d3ae:	001a      	movs	r2, r3
 800d3b0:	4b1a      	ldr	r3, [pc, #104]	@ (800d41c <Calculate_LED_ON+0x78>)
 800d3b2:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d3b4:	4b19      	ldr	r3, [pc, #100]	@ (800d41c <Calculate_LED_ON+0x78>)
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	4a19      	ldr	r2, [pc, #100]	@ (800d420 <Calculate_LED_ON+0x7c>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d802      	bhi.n	800d3c4 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d3be:	4b17      	ldr	r3, [pc, #92]	@ (800d41c <Calculate_LED_ON+0x78>)
 800d3c0:	4a18      	ldr	r2, [pc, #96]	@ (800d424 <Calculate_LED_ON+0x80>)
 800d3c2:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d3c4:	4b15      	ldr	r3, [pc, #84]	@ (800d41c <Calculate_LED_ON+0x78>)
 800d3c6:	881b      	ldrh	r3, [r3, #0]
 800d3c8:	4a17      	ldr	r2, [pc, #92]	@ (800d428 <Calculate_LED_ON+0x84>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d902      	bls.n	800d3d4 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d3ce:	4b13      	ldr	r3, [pc, #76]	@ (800d41c <Calculate_LED_ON+0x78>)
 800d3d0:	4a15      	ldr	r2, [pc, #84]	@ (800d428 <Calculate_LED_ON+0x84>)
 800d3d2:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d3d4:	4b11      	ldr	r3, [pc, #68]	@ (800d41c <Calculate_LED_ON+0x78>)
 800d3d6:	881b      	ldrh	r3, [r3, #0]
 800d3d8:	0018      	movs	r0, r3
 800d3da:	f7f5 fff1 	bl	80033c0 <__aeabi_i2d>
 800d3de:	0004      	movs	r4, r0
 800d3e0:	000d      	movs	r5, r1
 800d3e2:	4b0e      	ldr	r3, [pc, #56]	@ (800d41c <Calculate_LED_ON+0x78>)
 800d3e4:	881b      	ldrh	r3, [r3, #0]
 800d3e6:	001a      	movs	r2, r3
 800d3e8:	4b10      	ldr	r3, [pc, #64]	@ (800d42c <Calculate_LED_ON+0x88>)
 800d3ea:	1a9b      	subs	r3, r3, r2
 800d3ec:	0018      	movs	r0, r3
 800d3ee:	f7f5 ffe7 	bl	80033c0 <__aeabi_i2d>
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d430 <Calculate_LED_ON+0x8c>)
 800d3f6:	f7f5 f921 	bl	800263c <__aeabi_dmul>
 800d3fa:	0002      	movs	r2, r0
 800d3fc:	000b      	movs	r3, r1
 800d3fe:	0020      	movs	r0, r4
 800d400:	0029      	movs	r1, r5
 800d402:	f7f4 f973 	bl	80016ec <__aeabi_dadd>
 800d406:	0002      	movs	r2, r0
 800d408:	000b      	movs	r3, r1
 800d40a:	0010      	movs	r0, r2
 800d40c:	0019      	movs	r1, r3
 800d40e:	f7f3 f91d 	bl	800064c <__aeabi_d2uiz>
 800d412:	0003      	movs	r3, r0
 800d414:	b29b      	uxth	r3, r3
}
 800d416:	0018      	movs	r0, r3
 800d418:	46bd      	mov	sp, r7
 800d41a:	bdb0      	pop	{r4, r5, r7, pc}
 800d41c:	20001c28 	.word	0x20001c28
 800d420:	00000b53 	.word	0x00000b53
 800d424:	00000b54 	.word	0x00000b54
 800d428:	0000125c 	.word	0x0000125c
 800d42c:	00000dee 	.word	0x00000dee
 800d430:	3ff80000 	.word	0x3ff80000

0800d434 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d434:	b590      	push	{r4, r7, lr}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	0004      	movs	r4, r0
 800d43c:	0008      	movs	r0, r1
 800d43e:	0011      	movs	r1, r2
 800d440:	1dbb      	adds	r3, r7, #6
 800d442:	1c22      	adds	r2, r4, #0
 800d444:	801a      	strh	r2, [r3, #0]
 800d446:	1d3b      	adds	r3, r7, #4
 800d448:	1c02      	adds	r2, r0, #0
 800d44a:	801a      	strh	r2, [r3, #0]
 800d44c:	1cbb      	adds	r3, r7, #2
 800d44e:	1c0a      	adds	r2, r1, #0
 800d450:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d452:	4b0f      	ldr	r3, [pc, #60]	@ (800d490 <SetStatusLED+0x5c>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d107      	bne.n	800d46a <SetStatusLED+0x36>
 800d45a:	4b0e      	ldr	r3, [pc, #56]	@ (800d494 <SetStatusLED+0x60>)
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d103      	bne.n	800d46a <SetStatusLED+0x36>
 800d462:	4b0d      	ldr	r3, [pc, #52]	@ (800d498 <SetStatusLED+0x64>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00e      	beq.n	800d488 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d46a:	2380      	movs	r3, #128	@ 0x80
 800d46c:	05db      	lsls	r3, r3, #23
 800d46e:	1dba      	adds	r2, r7, #6
 800d470:	8812      	ldrh	r2, [r2, #0]
 800d472:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d474:	2380      	movs	r3, #128	@ 0x80
 800d476:	05db      	lsls	r3, r3, #23
 800d478:	1d3a      	adds	r2, r7, #4
 800d47a:	8812      	ldrh	r2, [r2, #0]
 800d47c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d47e:	2380      	movs	r3, #128	@ 0x80
 800d480:	05db      	lsls	r3, r3, #23
 800d482:	1cba      	adds	r2, r7, #2
 800d484:	8812      	ldrh	r2, [r2, #0]
 800d486:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d488:	46c0      	nop			@ (mov r8, r8)
 800d48a:	46bd      	mov	sp, r7
 800d48c:	b003      	add	sp, #12
 800d48e:	bd90      	pop	{r4, r7, pc}
 800d490:	20001c15 	.word	0x20001c15
 800d494:	200000cc 	.word	0x200000cc
 800d498:	20001c16 	.word	0x20001c16

0800d49c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d49c:	b590      	push	{r4, r7, lr}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	0004      	movs	r4, r0
 800d4a4:	0008      	movs	r0, r1
 800d4a6:	0011      	movs	r1, r2
 800d4a8:	1dfb      	adds	r3, r7, #7
 800d4aa:	1c22      	adds	r2, r4, #0
 800d4ac:	701a      	strb	r2, [r3, #0]
 800d4ae:	1dbb      	adds	r3, r7, #6
 800d4b0:	1c02      	adds	r2, r0, #0
 800d4b2:	701a      	strb	r2, [r3, #0]
 800d4b4:	1d7b      	adds	r3, r7, #5
 800d4b6:	1c0a      	adds	r2, r1, #0
 800d4b8:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d4ba:	4b19      	ldr	r3, [pc, #100]	@ (800d520 <SetDBLED+0x84>)
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d107      	bne.n	800d4d2 <SetDBLED+0x36>
 800d4c2:	4b18      	ldr	r3, [pc, #96]	@ (800d524 <SetDBLED+0x88>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d103      	bne.n	800d4d2 <SetDBLED+0x36>
 800d4ca:	4b17      	ldr	r3, [pc, #92]	@ (800d528 <SetDBLED+0x8c>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d022      	beq.n	800d518 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d4d2:	1dfb      	adds	r3, r7, #7
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	4053      	eors	r3, r2
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	001a      	movs	r2, r3
 800d4de:	4b13      	ldr	r3, [pc, #76]	@ (800d52c <SetDBLED+0x90>)
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	0018      	movs	r0, r3
 800d4e4:	f003 f8d7 	bl	8010696 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d4e8:	1dbb      	adds	r3, r7, #6
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	4053      	eors	r3, r2
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	001a      	movs	r2, r3
 800d4f4:	2380      	movs	r3, #128	@ 0x80
 800d4f6:	005b      	lsls	r3, r3, #1
 800d4f8:	480c      	ldr	r0, [pc, #48]	@ (800d52c <SetDBLED+0x90>)
 800d4fa:	0019      	movs	r1, r3
 800d4fc:	f003 f8cb 	bl	8010696 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d500:	1d7b      	adds	r3, r7, #5
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	2201      	movs	r2, #1
 800d506:	4053      	eors	r3, r2
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	001a      	movs	r2, r3
 800d50c:	2380      	movs	r3, #128	@ 0x80
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4806      	ldr	r0, [pc, #24]	@ (800d52c <SetDBLED+0x90>)
 800d512:	0019      	movs	r1, r3
 800d514:	f003 f8bf 	bl	8010696 <HAL_GPIO_WritePin>
  }
}
 800d518:	46c0      	nop			@ (mov r8, r8)
 800d51a:	46bd      	mov	sp, r7
 800d51c:	b003      	add	sp, #12
 800d51e:	bd90      	pop	{r4, r7, pc}
 800d520:	20001c15 	.word	0x20001c15
 800d524:	200000cc 	.word	0x200000cc
 800d528:	20001c16 	.word	0x20001c16
 800d52c:	50000400 	.word	0x50000400

0800d530 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	0004      	movs	r4, r0
 800d538:	0008      	movs	r0, r1
 800d53a:	0011      	movs	r1, r2
 800d53c:	1dbb      	adds	r3, r7, #6
 800d53e:	1c22      	adds	r2, r4, #0
 800d540:	801a      	strh	r2, [r3, #0]
 800d542:	1d3b      	adds	r3, r7, #4
 800d544:	1c02      	adds	r2, r0, #0
 800d546:	801a      	strh	r2, [r3, #0]
 800d548:	1cbb      	adds	r3, r7, #2
 800d54a:	1c0a      	adds	r2, r1, #0
 800d54c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d54e:	4b0e      	ldr	r3, [pc, #56]	@ (800d588 <SetVocLED+0x58>)
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d107      	bne.n	800d566 <SetVocLED+0x36>
 800d556:	4b0d      	ldr	r3, [pc, #52]	@ (800d58c <SetVocLED+0x5c>)
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d103      	bne.n	800d566 <SetVocLED+0x36>
 800d55e:	4b0c      	ldr	r3, [pc, #48]	@ (800d590 <SetVocLED+0x60>)
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00b      	beq.n	800d57e <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d566:	4b0b      	ldr	r3, [pc, #44]	@ (800d594 <SetVocLED+0x64>)
 800d568:	1dba      	adds	r2, r7, #6
 800d56a:	8812      	ldrh	r2, [r2, #0]
 800d56c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d56e:	4b09      	ldr	r3, [pc, #36]	@ (800d594 <SetVocLED+0x64>)
 800d570:	1d3a      	adds	r2, r7, #4
 800d572:	8812      	ldrh	r2, [r2, #0]
 800d574:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d576:	4b07      	ldr	r3, [pc, #28]	@ (800d594 <SetVocLED+0x64>)
 800d578:	1cba      	adds	r2, r7, #2
 800d57a:	8812      	ldrh	r2, [r2, #0]
 800d57c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d57e:	46c0      	nop			@ (mov r8, r8)
 800d580:	46bd      	mov	sp, r7
 800d582:	b003      	add	sp, #12
 800d584:	bd90      	pop	{r4, r7, pc}
 800d586:	46c0      	nop			@ (mov r8, r8)
 800d588:	20001c15 	.word	0x20001c15
 800d58c:	200000cc 	.word	0x200000cc
 800d590:	20001c16 	.word	0x20001c16
 800d594:	40000400 	.word	0x40000400

0800d598 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d598:	b580      	push	{r7, lr}
 800d59a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d59c:	4b08      	ldr	r3, [pc, #32]	@ (800d5c0 <SetMeasurementIndicator+0x28>)
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d103      	bne.n	800d5ac <SetMeasurementIndicator+0x14>
 800d5a4:	4b07      	ldr	r3, [pc, #28]	@ (800d5c4 <SetMeasurementIndicator+0x2c>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d006      	beq.n	800d5ba <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d5ac:	f7ff fefa 	bl	800d3a4 <Calculate_LED_ON>
 800d5b0:	0003      	movs	r3, r0
 800d5b2:	001a      	movs	r2, r3
 800d5b4:	2380      	movs	r3, #128	@ 0x80
 800d5b6:	05db      	lsls	r3, r3, #23
 800d5b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d5ba:	46c0      	nop			@ (mov r8, r8)
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	20001c15 	.word	0x20001c15
 800d5c4:	20001c16 	.word	0x20001c16

0800d5c8 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d5cc:	4b07      	ldr	r3, [pc, #28]	@ (800d5ec <ResetMeasurementIndicator+0x24>)
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d103      	bne.n	800d5dc <ResetMeasurementIndicator+0x14>
 800d5d4:	4b06      	ldr	r3, [pc, #24]	@ (800d5f0 <ResetMeasurementIndicator+0x28>)
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d004      	beq.n	800d5e6 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d5dc:	2380      	movs	r3, #128	@ 0x80
 800d5de:	05db      	lsls	r3, r3, #23
 800d5e0:	22fa      	movs	r2, #250	@ 0xfa
 800d5e2:	0112      	lsls	r2, r2, #4
 800d5e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d5e6:	46c0      	nop			@ (mov r8, r8)
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	20001c15 	.word	0x20001c15
 800d5f0:	20001c16 	.word	0x20001c16

0800d5f4 <SetMICIndicator>:
void SetMICIndicator(){
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d5f8:	4b19      	ldr	r3, [pc, #100]	@ (800d660 <SetMICIndicator+0x6c>)
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d103      	bne.n	800d608 <SetMICIndicator+0x14>
 800d600:	4b18      	ldr	r3, [pc, #96]	@ (800d664 <SetMICIndicator+0x70>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d007      	beq.n	800d618 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d608:	f7ff fecc 	bl	800d3a4 <Calculate_LED_ON>
 800d60c:	0003      	movs	r3, r0
 800d60e:	001a      	movs	r2, r3
 800d610:	2380      	movs	r3, #128	@ 0x80
 800d612:	05db      	lsls	r3, r3, #23
 800d614:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800d616:	e01f      	b.n	800d658 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800d618:	4b13      	ldr	r3, [pc, #76]	@ (800d668 <SetMICIndicator+0x74>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	1c18      	adds	r0, r3, #0
 800d61e:	f7f5 ff21 	bl	8003464 <__aeabi_f2d>
 800d622:	4a12      	ldr	r2, [pc, #72]	@ (800d66c <SetMICIndicator+0x78>)
 800d624:	4b12      	ldr	r3, [pc, #72]	@ (800d670 <SetMICIndicator+0x7c>)
 800d626:	f7f2 ff5d 	bl	80004e4 <__aeabi_dcmpgt>
 800d62a:	1e03      	subs	r3, r0, #0
 800d62c:	d00a      	beq.n	800d644 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d62e:	f7ff feb9 	bl	800d3a4 <Calculate_LED_ON>
 800d632:	0003      	movs	r3, r0
 800d634:	001a      	movs	r2, r3
 800d636:	2380      	movs	r3, #128	@ 0x80
 800d638:	05db      	lsls	r3, r3, #23
 800d63a:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800d63c:	4b0d      	ldr	r3, [pc, #52]	@ (800d674 <SetMICIndicator+0x80>)
 800d63e:	2202      	movs	r2, #2
 800d640:	701a      	strb	r2, [r3, #0]
}
 800d642:	e009      	b.n	800d658 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d644:	f7ff feae 	bl	800d3a4 <Calculate_LED_ON>
 800d648:	0003      	movs	r3, r0
 800d64a:	001a      	movs	r2, r3
 800d64c:	2380      	movs	r3, #128	@ 0x80
 800d64e:	05db      	lsls	r3, r3, #23
 800d650:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800d652:	4b08      	ldr	r3, [pc, #32]	@ (800d674 <SetMICIndicator+0x80>)
 800d654:	2201      	movs	r2, #1
 800d656:	701a      	strb	r2, [r3, #0]
}
 800d658:	46c0      	nop			@ (mov r8, r8)
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	46c0      	nop			@ (mov r8, r8)
 800d660:	20001c15 	.word	0x20001c15
 800d664:	20001c16 	.word	0x20001c16
 800d668:	20001c24 	.word	0x20001c24
 800d66c:	9999999a 	.word	0x9999999a
 800d670:	400d9999 	.word	0x400d9999
 800d674:	20001c18 	.word	0x20001c18

0800d678 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d678:	b580      	push	{r7, lr}
 800d67a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d67c:	4b0f      	ldr	r3, [pc, #60]	@ (800d6bc <ResetMICIndicator+0x44>)
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d103      	bne.n	800d68c <ResetMICIndicator+0x14>
 800d684:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c0 <ResetMICIndicator+0x48>)
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d005      	beq.n	800d698 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d68c:	2380      	movs	r3, #128	@ 0x80
 800d68e:	05db      	lsls	r3, r3, #23
 800d690:	22fa      	movs	r2, #250	@ 0xfa
 800d692:	0112      	lsls	r2, r2, #4
 800d694:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d696:	e00e      	b.n	800d6b6 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800d698:	4b0a      	ldr	r3, [pc, #40]	@ (800d6c4 <ResetMICIndicator+0x4c>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d105      	bne.n	800d6ac <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800d6a0:	2380      	movs	r3, #128	@ 0x80
 800d6a2:	05db      	lsls	r3, r3, #23
 800d6a4:	22fa      	movs	r2, #250	@ 0xfa
 800d6a6:	0112      	lsls	r2, r2, #4
 800d6a8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d6aa:	e004      	b.n	800d6b6 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800d6ac:	2380      	movs	r3, #128	@ 0x80
 800d6ae:	05db      	lsls	r3, r3, #23
 800d6b0:	22fa      	movs	r2, #250	@ 0xfa
 800d6b2:	0112      	lsls	r2, r2, #4
 800d6b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d6b6:	46c0      	nop			@ (mov r8, r8)
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	20001c15 	.word	0x20001c15
 800d6c0:	20001c16 	.word	0x20001c16
 800d6c4:	20001c18 	.word	0x20001c18

0800d6c8 <SetESPIndicator>:
void SetESPIndicator(){
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d6cc:	4b08      	ldr	r3, [pc, #32]	@ (800d6f0 <SetESPIndicator+0x28>)
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d103      	bne.n	800d6dc <SetESPIndicator+0x14>
 800d6d4:	4b07      	ldr	r3, [pc, #28]	@ (800d6f4 <SetESPIndicator+0x2c>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d006      	beq.n	800d6ea <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d6dc:	f7ff fe62 	bl	800d3a4 <Calculate_LED_ON>
 800d6e0:	0003      	movs	r3, r0
 800d6e2:	001a      	movs	r2, r3
 800d6e4:	2380      	movs	r3, #128	@ 0x80
 800d6e6:	05db      	lsls	r3, r3, #23
 800d6e8:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d6ea:	46c0      	nop			@ (mov r8, r8)
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	20001c15 	.word	0x20001c15
 800d6f4:	20001c16 	.word	0x20001c16

0800d6f8 <ResetESPIndicator>:
void ResetESPIndicator(){
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d6fc:	4b07      	ldr	r3, [pc, #28]	@ (800d71c <ResetESPIndicator+0x24>)
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d103      	bne.n	800d70c <ResetESPIndicator+0x14>
 800d704:	4b06      	ldr	r3, [pc, #24]	@ (800d720 <ResetESPIndicator+0x28>)
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d004      	beq.n	800d716 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d70c:	2380      	movs	r3, #128	@ 0x80
 800d70e:	05db      	lsls	r3, r3, #23
 800d710:	22fa      	movs	r2, #250	@ 0xfa
 800d712:	0112      	lsls	r2, r2, #4
 800d714:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d716:	46c0      	nop			@ (mov r8, r8)
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	20001c15 	.word	0x20001c15
 800d720:	20001c16 	.word	0x20001c16

0800d724 <SetPMIndicator>:

void SetPMIndicator() {
 800d724:	b580      	push	{r7, lr}
 800d726:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d728:	4b0f      	ldr	r3, [pc, #60]	@ (800d768 <SetPMIndicator+0x44>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d103      	bne.n	800d738 <SetPMIndicator+0x14>
 800d730:	4b0e      	ldr	r3, [pc, #56]	@ (800d76c <SetPMIndicator+0x48>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d014      	beq.n	800d762 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d738:	f7ff fe34 	bl	800d3a4 <Calculate_LED_ON>
 800d73c:	0003      	movs	r3, r0
 800d73e:	001a      	movs	r2, r3
 800d740:	2380      	movs	r3, #128	@ 0x80
 800d742:	05db      	lsls	r3, r3, #23
 800d744:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d746:	f7ff fe2d 	bl	800d3a4 <Calculate_LED_ON>
 800d74a:	0003      	movs	r3, r0
 800d74c:	001a      	movs	r2, r3
 800d74e:	2380      	movs	r3, #128	@ 0x80
 800d750:	05db      	lsls	r3, r3, #23
 800d752:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d754:	f7ff fe26 	bl	800d3a4 <Calculate_LED_ON>
 800d758:	0003      	movs	r3, r0
 800d75a:	001a      	movs	r2, r3
 800d75c:	2380      	movs	r3, #128	@ 0x80
 800d75e:	05db      	lsls	r3, r3, #23
 800d760:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d762:	46c0      	nop			@ (mov r8, r8)
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	20001c15 	.word	0x20001c15
 800d76c:	20001c16 	.word	0x20001c16

0800d770 <ResetPMIndicator>:

void ResetPMIndicator() {
 800d770:	b580      	push	{r7, lr}
 800d772:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d774:	4b0c      	ldr	r3, [pc, #48]	@ (800d7a8 <ResetPMIndicator+0x38>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d103      	bne.n	800d784 <ResetPMIndicator+0x14>
 800d77c:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ac <ResetPMIndicator+0x3c>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00e      	beq.n	800d7a2 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d784:	2380      	movs	r3, #128	@ 0x80
 800d786:	05db      	lsls	r3, r3, #23
 800d788:	22fa      	movs	r2, #250	@ 0xfa
 800d78a:	0112      	lsls	r2, r2, #4
 800d78c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d78e:	2380      	movs	r3, #128	@ 0x80
 800d790:	05db      	lsls	r3, r3, #23
 800d792:	22fa      	movs	r2, #250	@ 0xfa
 800d794:	0112      	lsls	r2, r2, #4
 800d796:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d798:	2380      	movs	r3, #128	@ 0x80
 800d79a:	05db      	lsls	r3, r3, #23
 800d79c:	22fa      	movs	r2, #250	@ 0xfa
 800d79e:	0112      	lsls	r2, r2, #4
 800d7a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d7a2:	46c0      	nop			@ (mov r8, r8)
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	20001c15 	.word	0x20001c15
 800d7ac:	20001c16 	.word	0x20001c16

0800d7b0 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d7b4:	23fa      	movs	r3, #250	@ 0xfa
 800d7b6:	011a      	lsls	r2, r3, #4
 800d7b8:	23fa      	movs	r3, #250	@ 0xfa
 800d7ba:	0119      	lsls	r1, r3, #4
 800d7bc:	23fa      	movs	r3, #250	@ 0xfa
 800d7be:	011b      	lsls	r3, r3, #4
 800d7c0:	0018      	movs	r0, r3
 800d7c2:	f7ff fe37 	bl	800d434 <SetStatusLED>
  SetDBLED(false,false,false);
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	f7ff fe66 	bl	800d49c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d7d0:	23fa      	movs	r3, #250	@ 0xfa
 800d7d2:	011a      	lsls	r2, r3, #4
 800d7d4:	23fa      	movs	r3, #250	@ 0xfa
 800d7d6:	0119      	lsls	r1, r3, #4
 800d7d8:	23fa      	movs	r3, #250	@ 0xfa
 800d7da:	011b      	lsls	r3, r3, #4
 800d7dc:	0018      	movs	r0, r3
 800d7de:	f7ff fea7 	bl	800d530 <SetVocLED>
return;
 800d7e2:	46c0      	nop			@ (mov r8, r8)
}
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <SetAllREDLED>:

void SetAllREDLED() {
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = 0;
 800d7ec:	2380      	movs	r3, #128	@ 0x80
 800d7ee:	05db      	lsls	r3, r3, #23
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800d7f4:	2380      	movs	r3, #128	@ 0x80
 800d7f6:	05db      	lsls	r3, r3, #23
 800d7f8:	22fa      	movs	r2, #250	@ 0xfa
 800d7fa:	0112      	lsls	r2, r2, #4
 800d7fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800d7fe:	2380      	movs	r3, #128	@ 0x80
 800d800:	05db      	lsls	r3, r3, #23
 800d802:	22fa      	movs	r2, #250	@ 0xfa
 800d804:	0112      	lsls	r2, r2, #4
 800d806:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 0;
 800d808:	4b0c      	ldr	r3, [pc, #48]	@ (800d83c <SetAllREDLED+0x54>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800d80e:	4b0b      	ldr	r3, [pc, #44]	@ (800d83c <SetAllREDLED+0x54>)
 800d810:	22fa      	movs	r2, #250	@ 0xfa
 800d812:	0112      	lsls	r2, r2, #4
 800d814:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800d816:	4b09      	ldr	r3, [pc, #36]	@ (800d83c <SetAllREDLED+0x54>)
 800d818:	22fa      	movs	r2, #250	@ 0xfa
 800d81a:	0112      	lsls	r2, r2, #4
 800d81c:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 800d81e:	4b08      	ldr	r3, [pc, #32]	@ (800d840 <SetAllREDLED+0x58>)
 800d820:	2200      	movs	r2, #0
 800d822:	2101      	movs	r1, #1
 800d824:	0018      	movs	r0, r3
 800d826:	f002 ff36 	bl	8010696 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800d82a:	23fa      	movs	r3, #250	@ 0xfa
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	0018      	movs	r0, r3
 800d830:	f001 fcaa 	bl	800f188 <HAL_Delay>
}
 800d834:	46c0      	nop			@ (mov r8, r8)
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	46c0      	nop			@ (mov r8, r8)
 800d83c:	40000400 	.word	0x40000400
 800d840:	50000400 	.word	0x50000400

0800d844 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800d844:	b5b0      	push	{r4, r5, r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	0002      	movs	r2, r0
 800d84c:	1dbb      	adds	r3, r7, #6
 800d84e:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800d850:	1dbb      	adds	r3, r7, #6
 800d852:	881b      	ldrh	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d05a      	beq.n	800d90e <SetVOCindicator+0xca>
 800d858:	1dbb      	adds	r3, r7, #6
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	2b64      	cmp	r3, #100	@ 0x64
 800d85e:	d856      	bhi.n	800d90e <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800d860:	1dbb      	adds	r3, r7, #6
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	0018      	movs	r0, r3
 800d866:	f7f5 fdab 	bl	80033c0 <__aeabi_i2d>
 800d86a:	2200      	movs	r2, #0
 800d86c:	4b5f      	ldr	r3, [pc, #380]	@ (800d9ec <SetVOCindicator+0x1a8>)
 800d86e:	f7f4 faa1 	bl	8001db4 <__aeabi_ddiv>
 800d872:	0002      	movs	r2, r0
 800d874:	000b      	movs	r3, r1
 800d876:	2000      	movs	r0, #0
 800d878:	495d      	ldr	r1, [pc, #372]	@ (800d9f0 <SetVOCindicator+0x1ac>)
 800d87a:	f7f5 f9a7 	bl	8002bcc <__aeabi_dsub>
 800d87e:	0002      	movs	r2, r0
 800d880:	000b      	movs	r3, r1
 800d882:	0014      	movs	r4, r2
 800d884:	001d      	movs	r5, r3
 800d886:	4b5b      	ldr	r3, [pc, #364]	@ (800d9f4 <SetVOCindicator+0x1b0>)
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	0018      	movs	r0, r3
 800d88c:	f7f5 fd98 	bl	80033c0 <__aeabi_i2d>
 800d890:	0002      	movs	r2, r0
 800d892:	000b      	movs	r3, r1
 800d894:	0020      	movs	r0, r4
 800d896:	0029      	movs	r1, r5
 800d898:	f7f4 fed0 	bl	800263c <__aeabi_dmul>
 800d89c:	0002      	movs	r2, r0
 800d89e:	000b      	movs	r3, r1
 800d8a0:	0010      	movs	r0, r2
 800d8a2:	0019      	movs	r1, r3
 800d8a4:	f7f2 fed2 	bl	800064c <__aeabi_d2uiz>
 800d8a8:	0003      	movs	r3, r0
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	4b52      	ldr	r3, [pc, #328]	@ (800d9f8 <SetVOCindicator+0x1b4>)
 800d8ae:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800d8b0:	1dbb      	adds	r3, r7, #6
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	0018      	movs	r0, r3
 800d8b6:	f7f5 fd83 	bl	80033c0 <__aeabi_i2d>
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	4b4b      	ldr	r3, [pc, #300]	@ (800d9ec <SetVOCindicator+0x1a8>)
 800d8be:	f7f4 fa79 	bl	8001db4 <__aeabi_ddiv>
 800d8c2:	0002      	movs	r2, r0
 800d8c4:	000b      	movs	r3, r1
 800d8c6:	0014      	movs	r4, r2
 800d8c8:	001d      	movs	r5, r3
 800d8ca:	4b4a      	ldr	r3, [pc, #296]	@ (800d9f4 <SetVOCindicator+0x1b0>)
 800d8cc:	881b      	ldrh	r3, [r3, #0]
 800d8ce:	0018      	movs	r0, r3
 800d8d0:	f7f5 fd76 	bl	80033c0 <__aeabi_i2d>
 800d8d4:	0002      	movs	r2, r0
 800d8d6:	000b      	movs	r3, r1
 800d8d8:	0020      	movs	r0, r4
 800d8da:	0029      	movs	r1, r5
 800d8dc:	f7f4 feae 	bl	800263c <__aeabi_dmul>
 800d8e0:	0002      	movs	r2, r0
 800d8e2:	000b      	movs	r3, r1
 800d8e4:	0010      	movs	r0, r2
 800d8e6:	0019      	movs	r1, r3
 800d8e8:	f7f2 feb0 	bl	800064c <__aeabi_d2uiz>
 800d8ec:	0003      	movs	r3, r0
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	4b42      	ldr	r3, [pc, #264]	@ (800d9fc <SetVOCindicator+0x1b8>)
 800d8f2:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800d8f4:	4b3f      	ldr	r3, [pc, #252]	@ (800d9f4 <SetVOCindicator+0x1b0>)
 800d8f6:	881a      	ldrh	r2, [r3, #0]
 800d8f8:	4b41      	ldr	r3, [pc, #260]	@ (800da00 <SetVOCindicator+0x1bc>)
 800d8fa:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d8fc:	4b40      	ldr	r3, [pc, #256]	@ (800da00 <SetVOCindicator+0x1bc>)
 800d8fe:	8818      	ldrh	r0, [r3, #0]
 800d900:	4b3d      	ldr	r3, [pc, #244]	@ (800d9f8 <SetVOCindicator+0x1b4>)
 800d902:	8819      	ldrh	r1, [r3, #0]
 800d904:	4b3d      	ldr	r3, [pc, #244]	@ (800d9fc <SetVOCindicator+0x1b8>)
 800d906:	881b      	ldrh	r3, [r3, #0]
 800d908:	001a      	movs	r2, r3
 800d90a:	f7ff fe11 	bl	800d530 <SetVocLED>
  }
  if(VOCi > 100){
 800d90e:	1dbb      	adds	r3, r7, #6
 800d910:	881b      	ldrh	r3, [r3, #0]
 800d912:	2b64      	cmp	r3, #100	@ 0x64
 800d914:	d966      	bls.n	800d9e4 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800d916:	1dbb      	adds	r3, r7, #6
 800d918:	881b      	ldrh	r3, [r3, #0]
 800d91a:	0018      	movs	r0, r3
 800d91c:	f7f5 fd50 	bl	80033c0 <__aeabi_i2d>
 800d920:	2200      	movs	r2, #0
 800d922:	4b32      	ldr	r3, [pc, #200]	@ (800d9ec <SetVOCindicator+0x1a8>)
 800d924:	f7f5 f952 	bl	8002bcc <__aeabi_dsub>
 800d928:	0002      	movs	r2, r0
 800d92a:	000b      	movs	r3, r1
 800d92c:	0010      	movs	r0, r2
 800d92e:	0019      	movs	r1, r3
 800d930:	2200      	movs	r2, #0
 800d932:	4b34      	ldr	r3, [pc, #208]	@ (800da04 <SetVOCindicator+0x1c0>)
 800d934:	f7f4 fa3e 	bl	8001db4 <__aeabi_ddiv>
 800d938:	0002      	movs	r2, r0
 800d93a:	000b      	movs	r3, r1
 800d93c:	0014      	movs	r4, r2
 800d93e:	001d      	movs	r5, r3
 800d940:	4b2c      	ldr	r3, [pc, #176]	@ (800d9f4 <SetVOCindicator+0x1b0>)
 800d942:	881b      	ldrh	r3, [r3, #0]
 800d944:	0018      	movs	r0, r3
 800d946:	f7f5 fd3b 	bl	80033c0 <__aeabi_i2d>
 800d94a:	0002      	movs	r2, r0
 800d94c:	000b      	movs	r3, r1
 800d94e:	0020      	movs	r0, r4
 800d950:	0029      	movs	r1, r5
 800d952:	f7f4 fe73 	bl	800263c <__aeabi_dmul>
 800d956:	0002      	movs	r2, r0
 800d958:	000b      	movs	r3, r1
 800d95a:	0010      	movs	r0, r2
 800d95c:	0019      	movs	r1, r3
 800d95e:	f7f2 fe75 	bl	800064c <__aeabi_d2uiz>
 800d962:	0003      	movs	r3, r0
 800d964:	b29a      	uxth	r2, r3
 800d966:	4b24      	ldr	r3, [pc, #144]	@ (800d9f8 <SetVOCindicator+0x1b4>)
 800d968:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800d96a:	1dbb      	adds	r3, r7, #6
 800d96c:	881b      	ldrh	r3, [r3, #0]
 800d96e:	0018      	movs	r0, r3
 800d970:	f7f5 fd26 	bl	80033c0 <__aeabi_i2d>
 800d974:	2200      	movs	r2, #0
 800d976:	4b1d      	ldr	r3, [pc, #116]	@ (800d9ec <SetVOCindicator+0x1a8>)
 800d978:	f7f5 f928 	bl	8002bcc <__aeabi_dsub>
 800d97c:	0002      	movs	r2, r0
 800d97e:	000b      	movs	r3, r1
 800d980:	0010      	movs	r0, r2
 800d982:	0019      	movs	r1, r3
 800d984:	2200      	movs	r2, #0
 800d986:	4b1f      	ldr	r3, [pc, #124]	@ (800da04 <SetVOCindicator+0x1c0>)
 800d988:	f7f4 fa14 	bl	8001db4 <__aeabi_ddiv>
 800d98c:	0002      	movs	r2, r0
 800d98e:	000b      	movs	r3, r1
 800d990:	2000      	movs	r0, #0
 800d992:	4917      	ldr	r1, [pc, #92]	@ (800d9f0 <SetVOCindicator+0x1ac>)
 800d994:	f7f5 f91a 	bl	8002bcc <__aeabi_dsub>
 800d998:	0002      	movs	r2, r0
 800d99a:	000b      	movs	r3, r1
 800d99c:	0014      	movs	r4, r2
 800d99e:	001d      	movs	r5, r3
 800d9a0:	4b14      	ldr	r3, [pc, #80]	@ (800d9f4 <SetVOCindicator+0x1b0>)
 800d9a2:	881b      	ldrh	r3, [r3, #0]
 800d9a4:	0018      	movs	r0, r3
 800d9a6:	f7f5 fd0b 	bl	80033c0 <__aeabi_i2d>
 800d9aa:	0002      	movs	r2, r0
 800d9ac:	000b      	movs	r3, r1
 800d9ae:	0020      	movs	r0, r4
 800d9b0:	0029      	movs	r1, r5
 800d9b2:	f7f4 fe43 	bl	800263c <__aeabi_dmul>
 800d9b6:	0002      	movs	r2, r0
 800d9b8:	000b      	movs	r3, r1
 800d9ba:	0010      	movs	r0, r2
 800d9bc:	0019      	movs	r1, r3
 800d9be:	f7f2 fe45 	bl	800064c <__aeabi_d2uiz>
 800d9c2:	0003      	movs	r3, r0
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	4b0e      	ldr	r3, [pc, #56]	@ (800da00 <SetVOCindicator+0x1bc>)
 800d9c8:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800d9ca:	4b0a      	ldr	r3, [pc, #40]	@ (800d9f4 <SetVOCindicator+0x1b0>)
 800d9cc:	881a      	ldrh	r2, [r3, #0]
 800d9ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d9fc <SetVOCindicator+0x1b8>)
 800d9d0:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d9d2:	4b0b      	ldr	r3, [pc, #44]	@ (800da00 <SetVOCindicator+0x1bc>)
 800d9d4:	8818      	ldrh	r0, [r3, #0]
 800d9d6:	4b08      	ldr	r3, [pc, #32]	@ (800d9f8 <SetVOCindicator+0x1b4>)
 800d9d8:	8819      	ldrh	r1, [r3, #0]
 800d9da:	4b08      	ldr	r3, [pc, #32]	@ (800d9fc <SetVOCindicator+0x1b8>)
 800d9dc:	881b      	ldrh	r3, [r3, #0]
 800d9de:	001a      	movs	r2, r3
 800d9e0:	f7ff fda6 	bl	800d530 <SetVocLED>
  }

}
 800d9e4:	46c0      	nop			@ (mov r8, r8)
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	b002      	add	sp, #8
 800d9ea:	bdb0      	pop	{r4, r5, r7, pc}
 800d9ec:	40590000 	.word	0x40590000
 800d9f0:	3ff00000 	.word	0x3ff00000
 800d9f4:	200000ce 	.word	0x200000ce
 800d9f8:	20001c2a 	.word	0x20001c2a
 800d9fc:	20001c2c 	.word	0x20001c2c
 800da00:	20001c2e 	.word	0x20001c2e
 800da04:	40790000 	.word	0x40790000

0800da08 <powerCheck>:

Battery_Status powerCheck(){
 800da08:	b590      	push	{r4, r7, lr}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800da0e:	f7f8 fe1b 	bl	8006648 <Check_USB_PowerOn>
 800da12:	0003      	movs	r3, r0
 800da14:	001a      	movs	r2, r3
 800da16:	2301      	movs	r3, #1
 800da18:	4053      	eors	r3, r2
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d005      	beq.n	800da2c <powerCheck+0x24>
    status = batteryChargeCheck();
 800da20:	1dfc      	adds	r4, r7, #7
 800da22:	f7ff fc65 	bl	800d2f0 <batteryChargeCheck>
 800da26:	0003      	movs	r3, r0
 800da28:	7023      	strb	r3, [r4, #0]
 800da2a:	e002      	b.n	800da32 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800da2c:	1dfb      	adds	r3, r7, #7
 800da2e:	2204      	movs	r2, #4
 800da30:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800da32:	1dfb      	adds	r3, r7, #7
 800da34:	781b      	ldrb	r3, [r3, #0]
}
 800da36:	0018      	movs	r0, r3
 800da38:	46bd      	mov	sp, r7
 800da3a:	b003      	add	sp, #12
 800da3c:	bd90      	pop	{r4, r7, pc}
	...

0800da40 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	0002      	movs	r2, r0
 800da48:	1dfb      	adds	r3, r7, #7
 800da4a:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800da4c:	1dfb      	adds	r3, r7, #7
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	2b04      	cmp	r3, #4
 800da52:	d105      	bne.n	800da60 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800da54:	4a18      	ldr	r2, [pc, #96]	@ (800dab8 <powerDisplay+0x78>)
 800da56:	4b19      	ldr	r3, [pc, #100]	@ (800dabc <powerDisplay+0x7c>)
 800da58:	0019      	movs	r1, r3
 800da5a:	2003      	movs	r0, #3
 800da5c:	f000 ff46 	bl	800e8ec <CreateLine>

  }
  if(status == BATTERY_FULL){
 800da60:	1dfb      	adds	r3, r7, #7
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b03      	cmp	r3, #3
 800da66:	d105      	bne.n	800da74 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800da68:	4a15      	ldr	r2, [pc, #84]	@ (800dac0 <powerDisplay+0x80>)
 800da6a:	4b14      	ldr	r3, [pc, #80]	@ (800dabc <powerDisplay+0x7c>)
 800da6c:	0019      	movs	r1, r3
 800da6e:	2003      	movs	r0, #3
 800da70:	f000 ff3c 	bl	800e8ec <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800da74:	1dfb      	adds	r3, r7, #7
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d105      	bne.n	800da88 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800da7c:	4a11      	ldr	r2, [pc, #68]	@ (800dac4 <powerDisplay+0x84>)
 800da7e:	4b0f      	ldr	r3, [pc, #60]	@ (800dabc <powerDisplay+0x7c>)
 800da80:	0019      	movs	r1, r3
 800da82:	2003      	movs	r0, #3
 800da84:	f000 ff32 	bl	800e8ec <CreateLine>
  }
  if(status == BATTERY_LOW){
 800da88:	1dfb      	adds	r3, r7, #7
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d105      	bne.n	800da9c <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800da90:	4a0d      	ldr	r2, [pc, #52]	@ (800dac8 <powerDisplay+0x88>)
 800da92:	4b0a      	ldr	r3, [pc, #40]	@ (800dabc <powerDisplay+0x7c>)
 800da94:	0019      	movs	r1, r3
 800da96:	2003      	movs	r0, #3
 800da98:	f000 ff28 	bl	800e8ec <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800da9c:	1dfb      	adds	r3, r7, #7
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d105      	bne.n	800dab0 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800daa4:	4a09      	ldr	r2, [pc, #36]	@ (800dacc <powerDisplay+0x8c>)
 800daa6:	4b05      	ldr	r3, [pc, #20]	@ (800dabc <powerDisplay+0x7c>)
 800daa8:	0019      	movs	r1, r3
 800daaa:	2003      	movs	r0, #3
 800daac:	f000 ff1e 	bl	800e8ec <CreateLine>
  }
}
 800dab0:	46c0      	nop			@ (mov r8, r8)
 800dab2:	46bd      	mov	sp, r7
 800dab4:	b002      	add	sp, #8
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	080254d4 	.word	0x080254d4
 800dabc:	080254f8 	.word	0x080254f8
 800dac0:	080254fc 	.word	0x080254fc
 800dac4:	08025514 	.word	0x08025514
 800dac8:	08025534 	.word	0x08025534
 800dacc:	0802554c 	.word	0x0802554c

0800dad0 <configCheck>:

void configCheck(){
 800dad0:	b590      	push	{r4, r7, lr}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800dad6:	f7f8 fdc6 	bl	8006666 <BootButton_Pressed>
 800dada:	1e03      	subs	r3, r0, #0
 800dadc:	d007      	beq.n	800daee <configCheck+0x1e>
 800dade:	f7f8 fdd3 	bl	8006688 <UserButton_Pressed>
 800dae2:	1e03      	subs	r3, r0, #0
 800dae4:	d003      	beq.n	800daee <configCheck+0x1e>
    configSet = true;
 800dae6:	4bb2      	ldr	r3, [pc, #712]	@ (800ddb0 <configCheck+0x2e0>)
 800dae8:	2201      	movs	r2, #1
 800daea:	701a      	strb	r2, [r3, #0]
 800daec:	e00a      	b.n	800db04 <configCheck+0x34>
  }
  else{
    configSet = false;
 800daee:	4bb0      	ldr	r3, [pc, #704]	@ (800ddb0 <configCheck+0x2e0>)
 800daf0:	2200      	movs	r2, #0
 800daf2:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800daf4:	f001 fb3e 	bl	800f174 <HAL_GetTick>
 800daf8:	0003      	movs	r3, r0
 800dafa:	22fa      	movs	r2, #250	@ 0xfa
 800dafc:	00d2      	lsls	r2, r2, #3
 800dafe:	189a      	adds	r2, r3, r2
 800db00:	4bac      	ldr	r3, [pc, #688]	@ (800ddb4 <configCheck+0x2e4>)
 800db02:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800db04:	4baa      	ldr	r3, [pc, #680]	@ (800ddb0 <configCheck+0x2e0>)
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00d      	beq.n	800db28 <configCheck+0x58>
 800db0c:	4ba9      	ldr	r3, [pc, #676]	@ (800ddb4 <configCheck+0x2e4>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	0018      	movs	r0, r3
 800db12:	f000 fe95 	bl	800e840 <TimestampIsReached>
 800db16:	1e03      	subs	r3, r0, #0
 800db18:	d006      	beq.n	800db28 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800db1a:	f7f5 ff11 	bl	8003940 <SetConfigMode>
    SetDBLED(true, true, true);
 800db1e:	2201      	movs	r2, #1
 800db20:	2101      	movs	r1, #1
 800db22:	2001      	movs	r0, #1
 800db24:	f7ff fcba 	bl	800d49c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 800db28:	f7f8 fd9d 	bl	8006666 <BootButton_Pressed>
 800db2c:	0003      	movs	r3, r0
 800db2e:	001a      	movs	r2, r3
 800db30:	2301      	movs	r3, #1
 800db32:	4053      	eors	r3, r2
 800db34:	b2db      	uxtb	r3, r3
 800db36:	2b00      	cmp	r3, #0
 800db38:	d054      	beq.n	800dbe4 <configCheck+0x114>
 800db3a:	f7f8 fda5 	bl	8006688 <UserButton_Pressed>
 800db3e:	1e03      	subs	r3, r0, #0
 800db40:	d050      	beq.n	800dbe4 <configCheck+0x114>
 800db42:	4b9d      	ldr	r3, [pc, #628]	@ (800ddb8 <configCheck+0x2e8>)
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2201      	movs	r2, #1
 800db48:	4053      	eors	r3, r2
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d049      	beq.n	800dbe4 <configCheck+0x114>
 800db50:	f7f5 ff16 	bl	8003980 <GetReconfigMode>
 800db54:	0003      	movs	r3, r0
 800db56:	001a      	movs	r2, r3
 800db58:	2301      	movs	r3, #1
 800db5a:	4053      	eors	r3, r2
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d040      	beq.n	800dbe4 <configCheck+0x114>
    SetLEDsOff();
 800db62:	f7ff fe25 	bl	800d7b0 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 800db66:	4a95      	ldr	r2, [pc, #596]	@ (800ddbc <configCheck+0x2ec>)
 800db68:	4994      	ldr	r1, [pc, #592]	@ (800ddbc <configCheck+0x2ec>)
 800db6a:	4b94      	ldr	r3, [pc, #592]	@ (800ddbc <configCheck+0x2ec>)
 800db6c:	0018      	movs	r0, r3
 800db6e:	f7ff fcdf 	bl	800d530 <SetVocLED>
    HAL_Delay(1500);
 800db72:	4b93      	ldr	r3, [pc, #588]	@ (800ddc0 <configCheck+0x2f0>)
 800db74:	0018      	movs	r0, r3
 800db76:	f001 fb07 	bl	800f188 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 800db7a:	23fa      	movs	r3, #250	@ 0xfa
 800db7c:	011a      	lsls	r2, r3, #4
 800db7e:	23fa      	movs	r3, #250	@ 0xfa
 800db80:	0119      	lsls	r1, r3, #4
 800db82:	23fa      	movs	r3, #250	@ 0xfa
 800db84:	011b      	lsls	r3, r3, #4
 800db86:	0018      	movs	r0, r3
 800db88:	f7ff fcd2 	bl	800d530 <SetVocLED>
    userToggle = !userToggle;
 800db8c:	4b8d      	ldr	r3, [pc, #564]	@ (800ddc4 <configCheck+0x2f4>)
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	1e5a      	subs	r2, r3, #1
 800db92:	4193      	sbcs	r3, r2
 800db94:	b2db      	uxtb	r3, r3
 800db96:	2201      	movs	r2, #1
 800db98:	4053      	eors	r3, r2
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	1c1a      	adds	r2, r3, #0
 800db9e:	2301      	movs	r3, #1
 800dba0:	4013      	ands	r3, r2
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	4b87      	ldr	r3, [pc, #540]	@ (800ddc4 <configCheck+0x2f4>)
 800dba6:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800dba8:	4b86      	ldr	r3, [pc, #536]	@ (800ddc4 <configCheck+0x2f4>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <configCheck+0xe4>
      EnabledConnectedDevices();
 800dbb0:	f7fb f836 	bl	8008c20 <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 800dbb4:	4b83      	ldr	r3, [pc, #524]	@ (800ddc4 <configCheck+0x2f4>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d001      	beq.n	800dbc0 <configCheck+0xf0>
 800dbbc:	4b82      	ldr	r3, [pc, #520]	@ (800ddc8 <configCheck+0x2f8>)
 800dbbe:	e000      	b.n	800dbc2 <configCheck+0xf2>
 800dbc0:	4b82      	ldr	r3, [pc, #520]	@ (800ddcc <configCheck+0x2fc>)
 800dbc2:	4a83      	ldr	r2, [pc, #524]	@ (800ddd0 <configCheck+0x300>)
 800dbc4:	4983      	ldr	r1, [pc, #524]	@ (800ddd4 <configCheck+0x304>)
 800dbc6:	2003      	movs	r0, #3
 800dbc8:	f000 fe90 	bl	800e8ec <CreateLine>
    userbuttonHeld = true;
 800dbcc:	4b7a      	ldr	r3, [pc, #488]	@ (800ddb8 <configCheck+0x2e8>)
 800dbce:	2201      	movs	r2, #1
 800dbd0:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800dbd2:	f001 facf 	bl	800f174 <HAL_GetTick>
 800dbd6:	0003      	movs	r3, r0
 800dbd8:	22fa      	movs	r2, #250	@ 0xfa
 800dbda:	00d2      	lsls	r2, r2, #3
 800dbdc:	189a      	adds	r2, r3, r2
 800dbde:	4b7e      	ldr	r3, [pc, #504]	@ (800ddd8 <configCheck+0x308>)
 800dbe0:	601a      	str	r2, [r3, #0]
 800dbe2:	e002      	b.n	800dbea <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 800dbe4:	4b74      	ldr	r3, [pc, #464]	@ (800ddb8 <configCheck+0x2e8>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 800dbea:	f7f8 fd3c 	bl	8006666 <BootButton_Pressed>
 800dbee:	0003      	movs	r3, r0
 800dbf0:	001a      	movs	r2, r3
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	4053      	eors	r3, r2
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d100      	bne.n	800dbfe <configCheck+0x12e>
 800dbfc:	e0a4      	b.n	800dd48 <configCheck+0x278>
 800dbfe:	4b6e      	ldr	r3, [pc, #440]	@ (800ddb8 <configCheck+0x2e8>)
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d100      	bne.n	800dc08 <configCheck+0x138>
 800dc06:	e09f      	b.n	800dd48 <configCheck+0x278>
 800dc08:	4b73      	ldr	r3, [pc, #460]	@ (800ddd8 <configCheck+0x308>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	0018      	movs	r0, r3
 800dc0e:	f000 fe17 	bl	800e840 <TimestampIsReached>
 800dc12:	1e03      	subs	r3, r0, #0
 800dc14:	d100      	bne.n	800dc18 <configCheck+0x148>
 800dc16:	e097      	b.n	800dd48 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800dc18:	f7fa fd54 	bl	80086c4 <GetPMSensorPresence>
 800dc1c:	1e03      	subs	r3, r0, #0
 800dc1e:	d100      	bne.n	800dc22 <configCheck+0x152>
 800dc20:	e082      	b.n	800dd28 <configCheck+0x258>
 800dc22:	4b6e      	ldr	r3, [pc, #440]	@ (800dddc <configCheck+0x30c>)
 800dc24:	791b      	ldrb	r3, [r3, #4]
 800dc26:	2b34      	cmp	r3, #52	@ 0x34
 800dc28:	d004      	beq.n	800dc34 <configCheck+0x164>
 800dc2a:	4b6c      	ldr	r3, [pc, #432]	@ (800dddc <configCheck+0x30c>)
 800dc2c:	791b      	ldrb	r3, [r3, #4]
 800dc2e:	2b35      	cmp	r3, #53	@ 0x35
 800dc30:	d000      	beq.n	800dc34 <configCheck+0x164>
 800dc32:	e079      	b.n	800dd28 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800dc34:	4b6a      	ldr	r3, [pc, #424]	@ (800dde0 <configCheck+0x310>)
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	1e5a      	subs	r2, r3, #1
 800dc3a:	4193      	sbcs	r3, r2
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	2201      	movs	r2, #1
 800dc40:	4053      	eors	r3, r2
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	1c1a      	adds	r2, r3, #0
 800dc46:	2301      	movs	r3, #1
 800dc48:	4013      	ands	r3, r2
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	4b64      	ldr	r3, [pc, #400]	@ (800dde0 <configCheck+0x310>)
 800dc4e:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800dc50:	4b63      	ldr	r3, [pc, #396]	@ (800dde0 <configCheck+0x310>)
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d005      	beq.n	800dc64 <configCheck+0x194>
 800dc58:	1dbc      	adds	r4, r7, #6
 800dc5a:	f7ff fba3 	bl	800d3a4 <Calculate_LED_ON>
 800dc5e:	0003      	movs	r3, r0
 800dc60:	8023      	strh	r3, [r4, #0]
 800dc62:	e003      	b.n	800dc6c <configCheck+0x19c>
        else color = 4000;
 800dc64:	1dbb      	adds	r3, r7, #6
 800dc66:	22fa      	movs	r2, #250	@ 0xfa
 800dc68:	0112      	lsls	r2, r2, #4
 800dc6a:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800dc6c:	4b5c      	ldr	r3, [pc, #368]	@ (800dde0 <configCheck+0x310>)
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <configCheck+0x1a8>
 800dc74:	4b5b      	ldr	r3, [pc, #364]	@ (800dde4 <configCheck+0x314>)
 800dc76:	e000      	b.n	800dc7a <configCheck+0x1aa>
 800dc78:	4b5b      	ldr	r3, [pc, #364]	@ (800dde8 <configCheck+0x318>)
 800dc7a:	4a5c      	ldr	r2, [pc, #368]	@ (800ddec <configCheck+0x31c>)
 800dc7c:	495c      	ldr	r1, [pc, #368]	@ (800ddf0 <configCheck+0x320>)
 800dc7e:	2002      	movs	r0, #2
 800dc80:	f000 fe34 	bl	800e8ec <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800dc84:	1d7b      	adds	r3, r7, #5
 800dc86:	2200      	movs	r2, #0
 800dc88:	701a      	strb	r2, [r3, #0]
 800dc8a:	e028      	b.n	800dcde <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800dc8c:	f7ff fb8a 	bl	800d3a4 <Calculate_LED_ON>
 800dc90:	0003      	movs	r3, r0
 800dc92:	001a      	movs	r2, r3
 800dc94:	4b57      	ldr	r3, [pc, #348]	@ (800ddf4 <configCheck+0x324>)
 800dc96:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800dc98:	4b56      	ldr	r3, [pc, #344]	@ (800ddf4 <configCheck+0x324>)
 800dc9a:	1dba      	adds	r2, r7, #6
 800dc9c:	8812      	ldrh	r2, [r2, #0]
 800dc9e:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800dca0:	4b54      	ldr	r3, [pc, #336]	@ (800ddf4 <configCheck+0x324>)
 800dca2:	1dba      	adds	r2, r7, #6
 800dca4:	8812      	ldrh	r2, [r2, #0]
 800dca6:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800dca8:	23c8      	movs	r3, #200	@ 0xc8
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	0018      	movs	r0, r3
 800dcae:	f001 fa6b 	bl	800f188 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800dcb2:	4b50      	ldr	r3, [pc, #320]	@ (800ddf4 <configCheck+0x324>)
 800dcb4:	22fa      	movs	r2, #250	@ 0xfa
 800dcb6:	0112      	lsls	r2, r2, #4
 800dcb8:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800dcba:	4b4e      	ldr	r3, [pc, #312]	@ (800ddf4 <configCheck+0x324>)
 800dcbc:	22fa      	movs	r2, #250	@ 0xfa
 800dcbe:	0112      	lsls	r2, r2, #4
 800dcc0:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800dcc2:	4b4c      	ldr	r3, [pc, #304]	@ (800ddf4 <configCheck+0x324>)
 800dcc4:	22fa      	movs	r2, #250	@ 0xfa
 800dcc6:	0112      	lsls	r2, r2, #4
 800dcc8:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800dcca:	23c8      	movs	r3, #200	@ 0xc8
 800dccc:	005b      	lsls	r3, r3, #1
 800dcce:	0018      	movs	r0, r3
 800dcd0:	f001 fa5a 	bl	800f188 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800dcd4:	1d7b      	adds	r3, r7, #5
 800dcd6:	781a      	ldrb	r2, [r3, #0]
 800dcd8:	1d7b      	adds	r3, r7, #5
 800dcda:	3201      	adds	r2, #1
 800dcdc:	701a      	strb	r2, [r3, #0]
 800dcde:	1d7b      	adds	r3, r7, #5
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d9d2      	bls.n	800dc8c <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800dce6:	4b37      	ldr	r3, [pc, #220]	@ (800ddc4 <configCheck+0x2f4>)
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	1e5a      	subs	r2, r3, #1
 800dcec:	4193      	sbcs	r3, r2
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	4053      	eors	r3, r2
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	1c1a      	adds	r2, r3, #0
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	b2da      	uxtb	r2, r3
 800dcfe:	4b31      	ldr	r3, [pc, #196]	@ (800ddc4 <configCheck+0x2f4>)
 800dd00:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800dd02:	4b30      	ldr	r3, [pc, #192]	@ (800ddc4 <configCheck+0x2f4>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d001      	beq.n	800dd0e <configCheck+0x23e>
 800dd0a:	4b36      	ldr	r3, [pc, #216]	@ (800dde4 <configCheck+0x314>)
 800dd0c:	e000      	b.n	800dd10 <configCheck+0x240>
 800dd0e:	4b36      	ldr	r3, [pc, #216]	@ (800dde8 <configCheck+0x318>)
 800dd10:	4a39      	ldr	r2, [pc, #228]	@ (800ddf8 <configCheck+0x328>)
 800dd12:	4937      	ldr	r1, [pc, #220]	@ (800ddf0 <configCheck+0x320>)
 800dd14:	2002      	movs	r0, #2
 800dd16:	f000 fde9 	bl	800e8ec <CreateLine>
      if (usbPluggedIn) {
 800dd1a:	4b38      	ldr	r3, [pc, #224]	@ (800ddfc <configCheck+0x32c>)
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d009      	beq.n	800dd36 <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800dd22:	f7fc f86d 	bl	8009e00 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800dd26:	e006      	b.n	800dd36 <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800dd28:	4a35      	ldr	r2, [pc, #212]	@ (800de00 <configCheck+0x330>)
 800dd2a:	4b31      	ldr	r3, [pc, #196]	@ (800ddf0 <configCheck+0x320>)
 800dd2c:	0019      	movs	r1, r3
 800dd2e:	2002      	movs	r0, #2
 800dd30:	f000 fddc 	bl	800e8ec <CreateLine>
 800dd34:	e000      	b.n	800dd38 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800dd36:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800dd38:	46c0      	nop			@ (mov r8, r8)
 800dd3a:	f7f8 fca5 	bl	8006688 <UserButton_Pressed>
 800dd3e:	1e03      	subs	r3, r0, #0
 800dd40:	d1fb      	bne.n	800dd3a <configCheck+0x26a>
    }
    userbuttonHeld = false;
 800dd42:	4b1d      	ldr	r3, [pc, #116]	@ (800ddb8 <configCheck+0x2e8>)
 800dd44:	2200      	movs	r2, #0
 800dd46:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800dd48:	f7f8 fc8d 	bl	8006666 <BootButton_Pressed>
 800dd4c:	0003      	movs	r3, r0
 800dd4e:	001a      	movs	r2, r3
 800dd50:	2301      	movs	r3, #1
 800dd52:	4053      	eors	r3, r2
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00b      	beq.n	800dd72 <configCheck+0x2a2>
 800dd5a:	f7f8 fc95 	bl	8006688 <UserButton_Pressed>
 800dd5e:	0003      	movs	r3, r0
 800dd60:	001a      	movs	r2, r3
 800dd62:	2301      	movs	r3, #1
 800dd64:	4053      	eors	r3, r2
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <configCheck+0x2a2>
    userbuttonHeld = false;
 800dd6c:	4b12      	ldr	r3, [pc, #72]	@ (800ddb8 <configCheck+0x2e8>)
 800dd6e:	2200      	movs	r2, #0
 800dd70:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 800dd72:	f7f8 fc69 	bl	8006648 <Check_USB_PowerOn>
 800dd76:	1e03      	subs	r3, r0, #0
 800dd78:	d003      	beq.n	800dd82 <configCheck+0x2b2>
    usbPluggedIn = true;
 800dd7a:	4b20      	ldr	r3, [pc, #128]	@ (800ddfc <configCheck+0x32c>)
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 800dd80:	e012      	b.n	800dda8 <configCheck+0x2d8>
    if(!userToggle && !init){
 800dd82:	4b10      	ldr	r3, [pc, #64]	@ (800ddc4 <configCheck+0x2f4>)
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	2201      	movs	r2, #1
 800dd88:	4053      	eors	r3, r2
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d008      	beq.n	800dda2 <configCheck+0x2d2>
 800dd90:	4b1c      	ldr	r3, [pc, #112]	@ (800de04 <configCheck+0x334>)
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	2201      	movs	r2, #1
 800dd96:	4053      	eors	r3, r2
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d001      	beq.n	800dda2 <configCheck+0x2d2>
      SetLEDsOff();
 800dd9e:	f7ff fd07 	bl	800d7b0 <SetLEDsOff>
    usbPluggedIn = false;
 800dda2:	4b16      	ldr	r3, [pc, #88]	@ (800ddfc <configCheck+0x32c>)
 800dda4:	2200      	movs	r2, #0
 800dda6:	701a      	strb	r2, [r3, #0]
}
 800dda8:	46c0      	nop			@ (mov r8, r8)
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	b003      	add	sp, #12
 800ddae:	bd90      	pop	{r4, r7, pc}
 800ddb0:	20001c14 	.word	0x20001c14
 800ddb4:	20001c1c 	.word	0x20001c1c
 800ddb8:	20001c17 	.word	0x20001c17
 800ddbc:	00000bb8 	.word	0x00000bb8
 800ddc0:	000005dc 	.word	0x000005dc
 800ddc4:	20001c16 	.word	0x20001c16
 800ddc8:	08025570 	.word	0x08025570
 800ddcc:	08025574 	.word	0x08025574
 800ddd0:	08025578 	.word	0x08025578
 800ddd4:	080254f8 	.word	0x080254f8
 800ddd8:	20001c20 	.word	0x20001c20
 800dddc:	20000c88 	.word	0x20000c88
 800dde0:	20000c86 	.word	0x20000c86
 800dde4:	08025598 	.word	0x08025598
 800dde8:	080255a0 	.word	0x080255a0
 800ddec:	080255ac 	.word	0x080255ac
 800ddf0:	080255cc 	.word	0x080255cc
 800ddf4:	40000400 	.word	0x40000400
 800ddf8:	080255d0 	.word	0x080255d0
 800ddfc:	20001c15 	.word	0x20001c15
 800de00:	080255e8 	.word	0x080255e8
 800de04:	200000cc 	.word	0x200000cc

0800de08 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800de08:	b590      	push	{r4, r7, lr}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800de0e:	1dfc      	adds	r4, r7, #7
 800de10:	f7ff fdfa 	bl	800da08 <powerCheck>
 800de14:	0003      	movs	r3, r0
 800de16:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800de18:	1dfb      	adds	r3, r7, #7
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	0018      	movs	r0, r3
 800de1e:	f7ff fe0f 	bl	800da40 <powerDisplay>
  return status;
 800de22:	1dfb      	adds	r3, r7, #7
 800de24:	781b      	ldrb	r3, [r3, #0]
}
 800de26:	0018      	movs	r0, r3
 800de28:	46bd      	mov	sp, r7
 800de2a:	b003      	add	sp, #12
 800de2c:	bd90      	pop	{r4, r7, pc}
	...

0800de30 <setuserToggle>:

void setuserToggle(void) {
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800de34:	f7ff fde8 	bl	800da08 <powerCheck>
 800de38:	0003      	movs	r3, r0
 800de3a:	2b04      	cmp	r3, #4
 800de3c:	d004      	beq.n	800de48 <setuserToggle+0x18>
    userToggle = true;
 800de3e:	4b04      	ldr	r3, [pc, #16]	@ (800de50 <setuserToggle+0x20>)
 800de40:	2201      	movs	r2, #1
 800de42:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800de44:	f7fa feec 	bl	8008c20 <EnabledConnectedDevices>
  }
}
 800de48:	46c0      	nop			@ (mov r8, r8)
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	46c0      	nop			@ (mov r8, r8)
 800de50:	20001c16 	.word	0x20001c16

0800de54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800de58:	4b07      	ldr	r3, [pc, #28]	@ (800de78 <HAL_MspInit+0x24>)
 800de5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de5c:	4b06      	ldr	r3, [pc, #24]	@ (800de78 <HAL_MspInit+0x24>)
 800de5e:	2101      	movs	r1, #1
 800de60:	430a      	orrs	r2, r1
 800de62:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800de64:	4b04      	ldr	r3, [pc, #16]	@ (800de78 <HAL_MspInit+0x24>)
 800de66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de68:	4b03      	ldr	r3, [pc, #12]	@ (800de78 <HAL_MspInit+0x24>)
 800de6a:	2180      	movs	r1, #128	@ 0x80
 800de6c:	0549      	lsls	r1, r1, #21
 800de6e:	430a      	orrs	r2, r1
 800de70:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800de72:	46c0      	nop			@ (mov r8, r8)
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	40021000 	.word	0x40021000

0800de7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800de80:	46c0      	nop			@ (mov r8, r8)
 800de82:	e7fd      	b.n	800de80 <NMI_Handler+0x4>

0800de84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800de88:	46c0      	nop			@ (mov r8, r8)
 800de8a:	e7fd      	b.n	800de88 <HardFault_Handler+0x4>

0800de8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800de90:	46c0      	nop			@ (mov r8, r8)
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}

0800de96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800de96:	b580      	push	{r7, lr}
 800de98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800de9a:	46c0      	nop			@ (mov r8, r8)
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dea4:	f001 f954 	bl	800f150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800dea8:	46c0      	nop			@ (mov r8, r8)
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
	...

0800deb0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800deb4:	4b03      	ldr	r3, [pc, #12]	@ (800dec4 <RTC_IRQHandler+0x14>)
 800deb6:	0018      	movs	r0, r3
 800deb8:	f008 fe7a 	bl	8016bb0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800debc:	46c0      	nop			@ (mov r8, r8)
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	46c0      	nop			@ (mov r8, r8)
 800dec4:	20000c60 	.word	0x20000c60

0800dec8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800decc:	2380      	movs	r3, #128	@ 0x80
 800dece:	021b      	lsls	r3, r3, #8
 800ded0:	0018      	movs	r0, r3
 800ded2:	f002 fbfd 	bl	80106d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800ded6:	46c0      	nop			@ (mov r8, r8)
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800dee0:	4b05      	ldr	r3, [pc, #20]	@ (800def8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800dee2:	0018      	movs	r0, r3
 800dee4:	f001 ff85 	bl	800fdf2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800dee8:	4b04      	ldr	r3, [pc, #16]	@ (800defc <DMA1_Channel2_3_IRQHandler+0x20>)
 800deea:	0018      	movs	r0, r3
 800deec:	f001 ff81 	bl	800fdf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800def0:	46c0      	nop			@ (mov r8, r8)
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	46c0      	nop			@ (mov r8, r8)
 800def8:	20000b04 	.word	0x20000b04
 800defc:	20000abc 	.word	0x20000abc

0800df00 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800df04:	4b07      	ldr	r3, [pc, #28]	@ (800df24 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800df06:	0018      	movs	r0, r3
 800df08:	f001 ff73 	bl	800fdf2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800df0c:	4b06      	ldr	r3, [pc, #24]	@ (800df28 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800df0e:	0018      	movs	r0, r3
 800df10:	f001 ff6f 	bl	800fdf2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800df14:	4b05      	ldr	r3, [pc, #20]	@ (800df2c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800df16:	0018      	movs	r0, r3
 800df18:	f001 ff6b 	bl	800fdf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800df1c:	46c0      	nop			@ (mov r8, r8)
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	46c0      	nop			@ (mov r8, r8)
 800df24:	20000b88 	.word	0x20000b88
 800df28:	20001f1c 	.word	0x20001f1c
 800df2c:	20001f64 	.word	0x20001f64

0800df30 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800df34:	4b03      	ldr	r3, [pc, #12]	@ (800df44 <USART4_5_IRQHandler+0x14>)
 800df36:	0018      	movs	r0, r3
 800df38:	f009 fd34 	bl	80179a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800df3c:	46c0      	nop			@ (mov r8, r8)
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	46c0      	nop			@ (mov r8, r8)
 800df44:	20001e64 	.word	0x20001e64

0800df48 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800df4c:	4b09      	ldr	r3, [pc, #36]	@ (800df74 <I2C1_IRQHandler+0x2c>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	699a      	ldr	r2, [r3, #24]
 800df52:	23e0      	movs	r3, #224	@ 0xe0
 800df54:	00db      	lsls	r3, r3, #3
 800df56:	4013      	ands	r3, r2
 800df58:	d004      	beq.n	800df64 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800df5a:	4b06      	ldr	r3, [pc, #24]	@ (800df74 <I2C1_IRQHandler+0x2c>)
 800df5c:	0018      	movs	r0, r3
 800df5e:	f003 f89f 	bl	80110a0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800df62:	e003      	b.n	800df6c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800df64:	4b03      	ldr	r3, [pc, #12]	@ (800df74 <I2C1_IRQHandler+0x2c>)
 800df66:	0018      	movs	r0, r3
 800df68:	f003 f880 	bl	801106c <HAL_I2C_EV_IRQHandler>
}
 800df6c:	46c0      	nop			@ (mov r8, r8)
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	46c0      	nop			@ (mov r8, r8)
 800df74:	20000a14 	.word	0x20000a14

0800df78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800df7c:	4b03      	ldr	r3, [pc, #12]	@ (800df8c <USART1_IRQHandler+0x14>)
 800df7e:	0018      	movs	r0, r3
 800df80:	f009 fd10 	bl	80179a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800df84:	46c0      	nop			@ (mov r8, r8)
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	46c0      	nop			@ (mov r8, r8)
 800df8c:	20001dac 	.word	0x20001dac

0800df90 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800df94:	4b03      	ldr	r3, [pc, #12]	@ (800dfa4 <USB_IRQHandler+0x14>)
 800df96:	0018      	movs	r0, r3
 800df98:	f005 fc60 	bl	801385c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800df9c:	46c0      	nop			@ (mov r8, r8)
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	46c0      	nop			@ (mov r8, r8)
 800dfa4:	20002d78 	.word	0x20002d78

0800dfa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	af00      	add	r7, sp, #0
  return 1;
 800dfac:	2301      	movs	r3, #1
}
 800dfae:	0018      	movs	r0, r3
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <_kill>:

int _kill(int pid, int sig)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800dfbe:	f012 fbd5 	bl	802076c <__errno>
 800dfc2:	0003      	movs	r3, r0
 800dfc4:	2216      	movs	r2, #22
 800dfc6:	601a      	str	r2, [r3, #0]
  return -1;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	425b      	negs	r3, r3
}
 800dfcc:	0018      	movs	r0, r3
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	b002      	add	sp, #8
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <_exit>:

void _exit (int status)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dfdc:	2301      	movs	r3, #1
 800dfde:	425a      	negs	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	0011      	movs	r1, r2
 800dfe4:	0018      	movs	r0, r3
 800dfe6:	f7ff ffe5 	bl	800dfb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800dfea:	46c0      	nop			@ (mov r8, r8)
 800dfec:	e7fd      	b.n	800dfea <_exit+0x16>

0800dfee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b086      	sub	sp, #24
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	60f8      	str	r0, [r7, #12]
 800dff6:	60b9      	str	r1, [r7, #8]
 800dff8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dffa:	2300      	movs	r3, #0
 800dffc:	617b      	str	r3, [r7, #20]
 800dffe:	e00a      	b.n	800e016 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e000:	e000      	b.n	800e004 <_read+0x16>
 800e002:	bf00      	nop
 800e004:	0001      	movs	r1, r0
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	1c5a      	adds	r2, r3, #1
 800e00a:	60ba      	str	r2, [r7, #8]
 800e00c:	b2ca      	uxtb	r2, r1
 800e00e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	3301      	adds	r3, #1
 800e014:	617b      	str	r3, [r7, #20]
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	dbf0      	blt.n	800e000 <_read+0x12>
  }

  return len;
 800e01e:	687b      	ldr	r3, [r7, #4]
}
 800e020:	0018      	movs	r0, r3
 800e022:	46bd      	mov	sp, r7
 800e024:	b006      	add	sp, #24
 800e026:	bd80      	pop	{r7, pc}

0800e028 <_close>:
  }
  return len;
}

int _close(int file)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e030:	2301      	movs	r3, #1
 800e032:	425b      	negs	r3, r3
}
 800e034:	0018      	movs	r0, r3
 800e036:	46bd      	mov	sp, r7
 800e038:	b002      	add	sp, #8
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	2280      	movs	r2, #128	@ 0x80
 800e04a:	0192      	lsls	r2, r2, #6
 800e04c:	605a      	str	r2, [r3, #4]
  return 0;
 800e04e:	2300      	movs	r3, #0
}
 800e050:	0018      	movs	r0, r3
 800e052:	46bd      	mov	sp, r7
 800e054:	b002      	add	sp, #8
 800e056:	bd80      	pop	{r7, pc}

0800e058 <_isatty>:

int _isatty(int file)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e060:	2301      	movs	r3, #1
}
 800e062:	0018      	movs	r0, r3
 800e064:	46bd      	mov	sp, r7
 800e066:	b002      	add	sp, #8
 800e068:	bd80      	pop	{r7, pc}

0800e06a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b084      	sub	sp, #16
 800e06e:	af00      	add	r7, sp, #0
 800e070:	60f8      	str	r0, [r7, #12]
 800e072:	60b9      	str	r1, [r7, #8]
 800e074:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e076:	2300      	movs	r3, #0
}
 800e078:	0018      	movs	r0, r3
 800e07a:	46bd      	mov	sp, r7
 800e07c:	b004      	add	sp, #16
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e088:	4a14      	ldr	r2, [pc, #80]	@ (800e0dc <_sbrk+0x5c>)
 800e08a:	4b15      	ldr	r3, [pc, #84]	@ (800e0e0 <_sbrk+0x60>)
 800e08c:	1ad3      	subs	r3, r2, r3
 800e08e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e094:	4b13      	ldr	r3, [pc, #76]	@ (800e0e4 <_sbrk+0x64>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d102      	bne.n	800e0a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e09c:	4b11      	ldr	r3, [pc, #68]	@ (800e0e4 <_sbrk+0x64>)
 800e09e:	4a12      	ldr	r2, [pc, #72]	@ (800e0e8 <_sbrk+0x68>)
 800e0a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e0a2:	4b10      	ldr	r3, [pc, #64]	@ (800e0e4 <_sbrk+0x64>)
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	18d3      	adds	r3, r2, r3
 800e0aa:	693a      	ldr	r2, [r7, #16]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d207      	bcs.n	800e0c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e0b0:	f012 fb5c 	bl	802076c <__errno>
 800e0b4:	0003      	movs	r3, r0
 800e0b6:	220c      	movs	r2, #12
 800e0b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	425b      	negs	r3, r3
 800e0be:	e009      	b.n	800e0d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e0c0:	4b08      	ldr	r3, [pc, #32]	@ (800e0e4 <_sbrk+0x64>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e0c6:	4b07      	ldr	r3, [pc, #28]	@ (800e0e4 <_sbrk+0x64>)
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	18d2      	adds	r2, r2, r3
 800e0ce:	4b05      	ldr	r3, [pc, #20]	@ (800e0e4 <_sbrk+0x64>)
 800e0d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
}
 800e0d4:	0018      	movs	r0, r3
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	b006      	add	sp, #24
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	20005000 	.word	0x20005000
 800e0e0:	00000400 	.word	0x00000400
 800e0e4:	20001c30 	.word	0x20001c30
 800e0e8:	200033d8 	.word	0x200033d8

0800e0ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e0f0:	46c0      	nop			@ (mov r8, r8)
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
	...

0800e0f8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e0fe:	2310      	movs	r3, #16
 800e100:	18fb      	adds	r3, r7, r3
 800e102:	0018      	movs	r0, r3
 800e104:	2308      	movs	r3, #8
 800e106:	001a      	movs	r2, r3
 800e108:	2100      	movs	r1, #0
 800e10a:	f012 fa8b 	bl	8020624 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e10e:	003b      	movs	r3, r7
 800e110:	0018      	movs	r0, r3
 800e112:	2310      	movs	r3, #16
 800e114:	001a      	movs	r2, r3
 800e116:	2100      	movs	r1, #0
 800e118:	f012 fa84 	bl	8020624 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e11c:	4b2e      	ldr	r3, [pc, #184]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e11e:	2280      	movs	r2, #128	@ 0x80
 800e120:	05d2      	lsls	r2, r2, #23
 800e122:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e124:	4b2c      	ldr	r3, [pc, #176]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e126:	2200      	movs	r2, #0
 800e128:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e12a:	4b2b      	ldr	r3, [pc, #172]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800e130:	4b29      	ldr	r3, [pc, #164]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e132:	4a2a      	ldr	r2, [pc, #168]	@ (800e1dc <MX_TIM2_Init+0xe4>)
 800e134:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e136:	4b28      	ldr	r3, [pc, #160]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e138:	2200      	movs	r2, #0
 800e13a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e13c:	4b26      	ldr	r3, [pc, #152]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e13e:	2200      	movs	r2, #0
 800e140:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e142:	4b25      	ldr	r3, [pc, #148]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e144:	0018      	movs	r0, r3
 800e146:	f008 fe41 	bl	8016dcc <HAL_TIM_PWM_Init>
 800e14a:	1e03      	subs	r3, r0, #0
 800e14c:	d001      	beq.n	800e152 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800e14e:	f7fa fa7b 	bl	8008648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e152:	2110      	movs	r1, #16
 800e154:	187b      	adds	r3, r7, r1
 800e156:	2200      	movs	r2, #0
 800e158:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e15a:	187b      	adds	r3, r7, r1
 800e15c:	2200      	movs	r2, #0
 800e15e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e160:	187a      	adds	r2, r7, r1
 800e162:	4b1d      	ldr	r3, [pc, #116]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e164:	0011      	movs	r1, r2
 800e166:	0018      	movs	r0, r3
 800e168:	f009 f94e 	bl	8017408 <HAL_TIMEx_MasterConfigSynchronization>
 800e16c:	1e03      	subs	r3, r0, #0
 800e16e:	d001      	beq.n	800e174 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800e170:	f7fa fa6a 	bl	8008648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e174:	003b      	movs	r3, r7
 800e176:	2260      	movs	r2, #96	@ 0x60
 800e178:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800e17a:	003b      	movs	r3, r7
 800e17c:	2200      	movs	r2, #0
 800e17e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e180:	003b      	movs	r3, r7
 800e182:	2200      	movs	r2, #0
 800e184:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e186:	003b      	movs	r3, r7
 800e188:	2200      	movs	r2, #0
 800e18a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e18c:	0039      	movs	r1, r7
 800e18e:	4b12      	ldr	r3, [pc, #72]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e190:	2200      	movs	r2, #0
 800e192:	0018      	movs	r0, r3
 800e194:	f008 feec 	bl	8016f70 <HAL_TIM_PWM_ConfigChannel>
 800e198:	1e03      	subs	r3, r0, #0
 800e19a:	d001      	beq.n	800e1a0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800e19c:	f7fa fa54 	bl	8008648 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e1a0:	0039      	movs	r1, r7
 800e1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e1a4:	2208      	movs	r2, #8
 800e1a6:	0018      	movs	r0, r3
 800e1a8:	f008 fee2 	bl	8016f70 <HAL_TIM_PWM_ConfigChannel>
 800e1ac:	1e03      	subs	r3, r0, #0
 800e1ae:	d001      	beq.n	800e1b4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800e1b0:	f7fa fa4a 	bl	8008648 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e1b4:	0039      	movs	r1, r7
 800e1b6:	4b08      	ldr	r3, [pc, #32]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e1b8:	220c      	movs	r2, #12
 800e1ba:	0018      	movs	r0, r3
 800e1bc:	f008 fed8 	bl	8016f70 <HAL_TIM_PWM_ConfigChannel>
 800e1c0:	1e03      	subs	r3, r0, #0
 800e1c2:	d001      	beq.n	800e1c8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800e1c4:	f7fa fa40 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e1c8:	4b03      	ldr	r3, [pc, #12]	@ (800e1d8 <MX_TIM2_Init+0xe0>)
 800e1ca:	0018      	movs	r0, r3
 800e1cc:	f000 f8fe 	bl	800e3cc <HAL_TIM_MspPostInit>

}
 800e1d0:	46c0      	nop			@ (mov r8, r8)
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	b006      	add	sp, #24
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	20001c34 	.word	0x20001c34
 800e1dc:	0000ffff 	.word	0x0000ffff

0800e1e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e1e6:	2310      	movs	r3, #16
 800e1e8:	18fb      	adds	r3, r7, r3
 800e1ea:	0018      	movs	r0, r3
 800e1ec:	2308      	movs	r3, #8
 800e1ee:	001a      	movs	r2, r3
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	f012 fa17 	bl	8020624 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e1f6:	003b      	movs	r3, r7
 800e1f8:	0018      	movs	r0, r3
 800e1fa:	2310      	movs	r3, #16
 800e1fc:	001a      	movs	r2, r3
 800e1fe:	2100      	movs	r1, #0
 800e200:	f012 fa10 	bl	8020624 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e204:	4b32      	ldr	r3, [pc, #200]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e206:	4a33      	ldr	r2, [pc, #204]	@ (800e2d4 <MX_TIM3_Init+0xf4>)
 800e208:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e20a:	4b31      	ldr	r3, [pc, #196]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e20c:	2200      	movs	r2, #0
 800e20e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e210:	4b2f      	ldr	r3, [pc, #188]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e212:	2200      	movs	r2, #0
 800e214:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800e216:	4b2e      	ldr	r3, [pc, #184]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e218:	4a2f      	ldr	r2, [pc, #188]	@ (800e2d8 <MX_TIM3_Init+0xf8>)
 800e21a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e21c:	4b2c      	ldr	r3, [pc, #176]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e21e:	2200      	movs	r2, #0
 800e220:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e222:	4b2b      	ldr	r3, [pc, #172]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e224:	2200      	movs	r2, #0
 800e226:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e228:	4b29      	ldr	r3, [pc, #164]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e22a:	0018      	movs	r0, r3
 800e22c:	f008 fdce 	bl	8016dcc <HAL_TIM_PWM_Init>
 800e230:	1e03      	subs	r3, r0, #0
 800e232:	d001      	beq.n	800e238 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800e234:	f7fa fa08 	bl	8008648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e238:	2110      	movs	r1, #16
 800e23a:	187b      	adds	r3, r7, r1
 800e23c:	2200      	movs	r2, #0
 800e23e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e240:	187b      	adds	r3, r7, r1
 800e242:	2200      	movs	r2, #0
 800e244:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e246:	187a      	adds	r2, r7, r1
 800e248:	4b21      	ldr	r3, [pc, #132]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e24a:	0011      	movs	r1, r2
 800e24c:	0018      	movs	r0, r3
 800e24e:	f009 f8db 	bl	8017408 <HAL_TIMEx_MasterConfigSynchronization>
 800e252:	1e03      	subs	r3, r0, #0
 800e254:	d001      	beq.n	800e25a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800e256:	f7fa f9f7 	bl	8008648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e25a:	003b      	movs	r3, r7
 800e25c:	2260      	movs	r2, #96	@ 0x60
 800e25e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800e260:	003b      	movs	r3, r7
 800e262:	2200      	movs	r2, #0
 800e264:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e266:	003b      	movs	r3, r7
 800e268:	2200      	movs	r2, #0
 800e26a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e26c:	003b      	movs	r3, r7
 800e26e:	2200      	movs	r2, #0
 800e270:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e272:	0039      	movs	r1, r7
 800e274:	4b16      	ldr	r3, [pc, #88]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e276:	2200      	movs	r2, #0
 800e278:	0018      	movs	r0, r3
 800e27a:	f008 fe79 	bl	8016f70 <HAL_TIM_PWM_ConfigChannel>
 800e27e:	1e03      	subs	r3, r0, #0
 800e280:	d001      	beq.n	800e286 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800e282:	f7fa f9e1 	bl	8008648 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800e286:	4b12      	ldr	r3, [pc, #72]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e288:	2104      	movs	r1, #4
 800e28a:	0018      	movs	r0, r3
 800e28c:	f009 f91a 	bl	80174c4 <HAL_TIMEx_RemapConfig>
 800e290:	1e03      	subs	r3, r0, #0
 800e292:	d001      	beq.n	800e298 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800e294:	f7fa f9d8 	bl	8008648 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e298:	0039      	movs	r1, r7
 800e29a:	4b0d      	ldr	r3, [pc, #52]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e29c:	2204      	movs	r2, #4
 800e29e:	0018      	movs	r0, r3
 800e2a0:	f008 fe66 	bl	8016f70 <HAL_TIM_PWM_ConfigChannel>
 800e2a4:	1e03      	subs	r3, r0, #0
 800e2a6:	d001      	beq.n	800e2ac <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800e2a8:	f7fa f9ce 	bl	8008648 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e2ac:	0039      	movs	r1, r7
 800e2ae:	4b08      	ldr	r3, [pc, #32]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e2b0:	2208      	movs	r2, #8
 800e2b2:	0018      	movs	r0, r3
 800e2b4:	f008 fe5c 	bl	8016f70 <HAL_TIM_PWM_ConfigChannel>
 800e2b8:	1e03      	subs	r3, r0, #0
 800e2ba:	d001      	beq.n	800e2c0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800e2bc:	f7fa f9c4 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e2c0:	4b03      	ldr	r3, [pc, #12]	@ (800e2d0 <MX_TIM3_Init+0xf0>)
 800e2c2:	0018      	movs	r0, r3
 800e2c4:	f000 f882 	bl	800e3cc <HAL_TIM_MspPostInit>

}
 800e2c8:	46c0      	nop			@ (mov r8, r8)
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	b006      	add	sp, #24
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	20001c74 	.word	0x20001c74
 800e2d4:	40000400 	.word	0x40000400
 800e2d8:	0000ffff 	.word	0x0000ffff

0800e2dc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e2e2:	003b      	movs	r3, r7
 800e2e4:	0018      	movs	r0, r3
 800e2e6:	2308      	movs	r3, #8
 800e2e8:	001a      	movs	r2, r3
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	f012 f99a 	bl	8020624 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e2f0:	4b15      	ldr	r3, [pc, #84]	@ (800e348 <MX_TIM6_Init+0x6c>)
 800e2f2:	4a16      	ldr	r2, [pc, #88]	@ (800e34c <MX_TIM6_Init+0x70>)
 800e2f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800e2f6:	4b14      	ldr	r3, [pc, #80]	@ (800e348 <MX_TIM6_Init+0x6c>)
 800e2f8:	220a      	movs	r2, #10
 800e2fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e2fc:	4b12      	ldr	r3, [pc, #72]	@ (800e348 <MX_TIM6_Init+0x6c>)
 800e2fe:	2200      	movs	r2, #0
 800e300:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800e302:	4b11      	ldr	r3, [pc, #68]	@ (800e348 <MX_TIM6_Init+0x6c>)
 800e304:	4a12      	ldr	r2, [pc, #72]	@ (800e350 <MX_TIM6_Init+0x74>)
 800e306:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e308:	4b0f      	ldr	r3, [pc, #60]	@ (800e348 <MX_TIM6_Init+0x6c>)
 800e30a:	2200      	movs	r2, #0
 800e30c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e30e:	4b0e      	ldr	r3, [pc, #56]	@ (800e348 <MX_TIM6_Init+0x6c>)
 800e310:	0018      	movs	r0, r3
 800e312:	f008 fcb3 	bl	8016c7c <HAL_TIM_Base_Init>
 800e316:	1e03      	subs	r3, r0, #0
 800e318:	d001      	beq.n	800e31e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800e31a:	f7fa f995 	bl	8008648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e31e:	003b      	movs	r3, r7
 800e320:	2200      	movs	r2, #0
 800e322:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e324:	003b      	movs	r3, r7
 800e326:	2200      	movs	r2, #0
 800e328:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e32a:	003a      	movs	r2, r7
 800e32c:	4b06      	ldr	r3, [pc, #24]	@ (800e348 <MX_TIM6_Init+0x6c>)
 800e32e:	0011      	movs	r1, r2
 800e330:	0018      	movs	r0, r3
 800e332:	f009 f869 	bl	8017408 <HAL_TIMEx_MasterConfigSynchronization>
 800e336:	1e03      	subs	r3, r0, #0
 800e338:	d001      	beq.n	800e33e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800e33a:	f7fa f985 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e33e:	46c0      	nop			@ (mov r8, r8)
 800e340:	46bd      	mov	sp, r7
 800e342:	b002      	add	sp, #8
 800e344:	bd80      	pop	{r7, pc}
 800e346:	46c0      	nop			@ (mov r8, r8)
 800e348:	20001cb4 	.word	0x20001cb4
 800e34c:	40001000 	.word	0x40001000
 800e350:	0000ffff 	.word	0x0000ffff

0800e354 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	2380      	movs	r3, #128	@ 0x80
 800e362:	05db      	lsls	r3, r3, #23
 800e364:	429a      	cmp	r2, r3
 800e366:	d106      	bne.n	800e376 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e368:	4b0a      	ldr	r3, [pc, #40]	@ (800e394 <HAL_TIM_PWM_MspInit+0x40>)
 800e36a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e36c:	4b09      	ldr	r3, [pc, #36]	@ (800e394 <HAL_TIM_PWM_MspInit+0x40>)
 800e36e:	2101      	movs	r1, #1
 800e370:	430a      	orrs	r2, r1
 800e372:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800e374:	e00a      	b.n	800e38c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a07      	ldr	r2, [pc, #28]	@ (800e398 <HAL_TIM_PWM_MspInit+0x44>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d105      	bne.n	800e38c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e380:	4b04      	ldr	r3, [pc, #16]	@ (800e394 <HAL_TIM_PWM_MspInit+0x40>)
 800e382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e384:	4b03      	ldr	r3, [pc, #12]	@ (800e394 <HAL_TIM_PWM_MspInit+0x40>)
 800e386:	2102      	movs	r1, #2
 800e388:	430a      	orrs	r2, r1
 800e38a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e38c:	46c0      	nop			@ (mov r8, r8)
 800e38e:	46bd      	mov	sp, r7
 800e390:	b002      	add	sp, #8
 800e392:	bd80      	pop	{r7, pc}
 800e394:	40021000 	.word	0x40021000
 800e398:	40000400 	.word	0x40000400

0800e39c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a06      	ldr	r2, [pc, #24]	@ (800e3c4 <HAL_TIM_Base_MspInit+0x28>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d105      	bne.n	800e3ba <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e3ae:	4b06      	ldr	r3, [pc, #24]	@ (800e3c8 <HAL_TIM_Base_MspInit+0x2c>)
 800e3b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3b2:	4b05      	ldr	r3, [pc, #20]	@ (800e3c8 <HAL_TIM_Base_MspInit+0x2c>)
 800e3b4:	2110      	movs	r1, #16
 800e3b6:	430a      	orrs	r2, r1
 800e3b8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800e3ba:	46c0      	nop			@ (mov r8, r8)
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	b002      	add	sp, #8
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	46c0      	nop			@ (mov r8, r8)
 800e3c4:	40001000 	.word	0x40001000
 800e3c8:	40021000 	.word	0x40021000

0800e3cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e3cc:	b590      	push	{r4, r7, lr}
 800e3ce:	b08b      	sub	sp, #44	@ 0x2c
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3d4:	2414      	movs	r4, #20
 800e3d6:	193b      	adds	r3, r7, r4
 800e3d8:	0018      	movs	r0, r3
 800e3da:	2314      	movs	r3, #20
 800e3dc:	001a      	movs	r2, r3
 800e3de:	2100      	movs	r1, #0
 800e3e0:	f012 f920 	bl	8020624 <memset>
  if(timHandle->Instance==TIM2)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	2380      	movs	r3, #128	@ 0x80
 800e3ea:	05db      	lsls	r3, r3, #23
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d123      	bne.n	800e438 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3f0:	4b27      	ldr	r3, [pc, #156]	@ (800e490 <HAL_TIM_MspPostInit+0xc4>)
 800e3f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3f4:	4b26      	ldr	r3, [pc, #152]	@ (800e490 <HAL_TIM_MspPostInit+0xc4>)
 800e3f6:	2101      	movs	r1, #1
 800e3f8:	430a      	orrs	r2, r1
 800e3fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e3fc:	4b24      	ldr	r3, [pc, #144]	@ (800e490 <HAL_TIM_MspPostInit+0xc4>)
 800e3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e400:	2201      	movs	r2, #1
 800e402:	4013      	ands	r3, r2
 800e404:	613b      	str	r3, [r7, #16]
 800e406:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800e408:	0021      	movs	r1, r4
 800e40a:	187b      	adds	r3, r7, r1
 800e40c:	220d      	movs	r2, #13
 800e40e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e410:	187b      	adds	r3, r7, r1
 800e412:	2202      	movs	r2, #2
 800e414:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e416:	187b      	adds	r3, r7, r1
 800e418:	2200      	movs	r2, #0
 800e41a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e41c:	187b      	adds	r3, r7, r1
 800e41e:	2200      	movs	r2, #0
 800e420:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800e422:	187b      	adds	r3, r7, r1
 800e424:	2202      	movs	r2, #2
 800e426:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e428:	187a      	adds	r2, r7, r1
 800e42a:	23a0      	movs	r3, #160	@ 0xa0
 800e42c:	05db      	lsls	r3, r3, #23
 800e42e:	0011      	movs	r1, r2
 800e430:	0018      	movs	r0, r3
 800e432:	f001 ff95 	bl	8010360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e436:	e027      	b.n	800e488 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a15      	ldr	r2, [pc, #84]	@ (800e494 <HAL_TIM_MspPostInit+0xc8>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d122      	bne.n	800e488 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e442:	4b13      	ldr	r3, [pc, #76]	@ (800e490 <HAL_TIM_MspPostInit+0xc4>)
 800e444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e446:	4b12      	ldr	r3, [pc, #72]	@ (800e490 <HAL_TIM_MspPostInit+0xc4>)
 800e448:	2104      	movs	r1, #4
 800e44a:	430a      	orrs	r2, r1
 800e44c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e44e:	4b10      	ldr	r3, [pc, #64]	@ (800e490 <HAL_TIM_MspPostInit+0xc4>)
 800e450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e452:	2204      	movs	r2, #4
 800e454:	4013      	ands	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]
 800e458:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800e45a:	2114      	movs	r1, #20
 800e45c:	187b      	adds	r3, r7, r1
 800e45e:	22e0      	movs	r2, #224	@ 0xe0
 800e460:	0052      	lsls	r2, r2, #1
 800e462:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e464:	187b      	adds	r3, r7, r1
 800e466:	2202      	movs	r2, #2
 800e468:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e46a:	187b      	adds	r3, r7, r1
 800e46c:	2200      	movs	r2, #0
 800e46e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e470:	187b      	adds	r3, r7, r1
 800e472:	2200      	movs	r2, #0
 800e474:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e476:	187b      	adds	r3, r7, r1
 800e478:	2202      	movs	r2, #2
 800e47a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e47c:	187b      	adds	r3, r7, r1
 800e47e:	4a06      	ldr	r2, [pc, #24]	@ (800e498 <HAL_TIM_MspPostInit+0xcc>)
 800e480:	0019      	movs	r1, r3
 800e482:	0010      	movs	r0, r2
 800e484:	f001 ff6c 	bl	8010360 <HAL_GPIO_Init>
}
 800e488:	46c0      	nop			@ (mov r8, r8)
 800e48a:	46bd      	mov	sp, r7
 800e48c:	b00b      	add	sp, #44	@ 0x2c
 800e48e:	bd90      	pop	{r4, r7, pc}
 800e490:	40021000 	.word	0x40021000
 800e494:	40000400 	.word	0x40000400
 800e498:	50000800 	.word	0x50000800

0800e49c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800e4a0:	4b17      	ldr	r3, [pc, #92]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4a2:	4a18      	ldr	r2, [pc, #96]	@ (800e504 <MX_LPUART1_UART_Init+0x68>)
 800e4a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800e4a6:	4b16      	ldr	r3, [pc, #88]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4a8:	22e1      	movs	r2, #225	@ 0xe1
 800e4aa:	0252      	lsls	r2, r2, #9
 800e4ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e4ae:	4b14      	ldr	r3, [pc, #80]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800e4b4:	4b12      	ldr	r3, [pc, #72]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800e4ba:	4b11      	ldr	r3, [pc, #68]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800e4c0:	4b0f      	ldr	r3, [pc, #60]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4c2:	220c      	movs	r2, #12
 800e4c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e4c6:	4b0e      	ldr	r3, [pc, #56]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800e4d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4d4:	2218      	movs	r2, #24
 800e4d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e4d8:	4b09      	ldr	r3, [pc, #36]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4da:	2280      	movs	r2, #128	@ 0x80
 800e4dc:	0212      	lsls	r2, r2, #8
 800e4de:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800e4e0:	4b07      	ldr	r3, [pc, #28]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4e2:	2280      	movs	r2, #128	@ 0x80
 800e4e4:	0152      	lsls	r2, r2, #5
 800e4e6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800e4e8:	4b05      	ldr	r3, [pc, #20]	@ (800e500 <MX_LPUART1_UART_Init+0x64>)
 800e4ea:	0018      	movs	r0, r3
 800e4ec:	f009 f808 	bl	8017500 <HAL_UART_Init>
 800e4f0:	1e03      	subs	r3, r0, #0
 800e4f2:	d001      	beq.n	800e4f8 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800e4f4:	f7fa f8a8 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e4f8:	46c0      	nop			@ (mov r8, r8)
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	46c0      	nop			@ (mov r8, r8)
 800e500:	20001cf4 	.word	0x20001cf4
 800e504:	40004800 	.word	0x40004800

0800e508 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e50c:	4b16      	ldr	r3, [pc, #88]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e50e:	4a17      	ldr	r2, [pc, #92]	@ (800e56c <MX_USART1_UART_Init+0x64>)
 800e510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e512:	4b15      	ldr	r3, [pc, #84]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e514:	22e1      	movs	r2, #225	@ 0xe1
 800e516:	0252      	lsls	r2, r2, #9
 800e518:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e51a:	4b13      	ldr	r3, [pc, #76]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e520:	4b11      	ldr	r3, [pc, #68]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e522:	2200      	movs	r2, #0
 800e524:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e526:	4b10      	ldr	r3, [pc, #64]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e528:	2200      	movs	r2, #0
 800e52a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e52c:	4b0e      	ldr	r3, [pc, #56]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e52e:	220c      	movs	r2, #12
 800e530:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e532:	4b0d      	ldr	r3, [pc, #52]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e534:	2200      	movs	r2, #0
 800e536:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e538:	4b0b      	ldr	r3, [pc, #44]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e53e:	4b0a      	ldr	r3, [pc, #40]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e540:	2200      	movs	r2, #0
 800e542:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e544:	4b08      	ldr	r3, [pc, #32]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e546:	2208      	movs	r2, #8
 800e548:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e54a:	4b07      	ldr	r3, [pc, #28]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e54c:	2280      	movs	r2, #128	@ 0x80
 800e54e:	0212      	lsls	r2, r2, #8
 800e550:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e552:	4b05      	ldr	r3, [pc, #20]	@ (800e568 <MX_USART1_UART_Init+0x60>)
 800e554:	0018      	movs	r0, r3
 800e556:	f008 ffd3 	bl	8017500 <HAL_UART_Init>
 800e55a:	1e03      	subs	r3, r0, #0
 800e55c:	d001      	beq.n	800e562 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e55e:	f7fa f873 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e562:	46c0      	nop			@ (mov r8, r8)
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	20001dac 	.word	0x20001dac
 800e56c:	40013800 	.word	0x40013800

0800e570 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e574:	4b14      	ldr	r3, [pc, #80]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e576:	4a15      	ldr	r2, [pc, #84]	@ (800e5cc <MX_USART4_UART_Init+0x5c>)
 800e578:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e57a:	4b13      	ldr	r3, [pc, #76]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e57c:	22e1      	movs	r2, #225	@ 0xe1
 800e57e:	0252      	lsls	r2, r2, #9
 800e580:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e582:	4b11      	ldr	r3, [pc, #68]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e584:	2200      	movs	r2, #0
 800e586:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e588:	4b0f      	ldr	r3, [pc, #60]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e58e:	4b0e      	ldr	r3, [pc, #56]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e590:	2200      	movs	r2, #0
 800e592:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e594:	4b0c      	ldr	r3, [pc, #48]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e596:	220c      	movs	r2, #12
 800e598:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e59a:	4b0b      	ldr	r3, [pc, #44]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5a0:	4b09      	ldr	r3, [pc, #36]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e5a6:	4b08      	ldr	r3, [pc, #32]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e5ac:	4b06      	ldr	r3, [pc, #24]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e5b2:	4b05      	ldr	r3, [pc, #20]	@ (800e5c8 <MX_USART4_UART_Init+0x58>)
 800e5b4:	0018      	movs	r0, r3
 800e5b6:	f008 ffa3 	bl	8017500 <HAL_UART_Init>
 800e5ba:	1e03      	subs	r3, r0, #0
 800e5bc:	d001      	beq.n	800e5c2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e5be:	f7fa f843 	bl	8008648 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e5c2:	46c0      	nop			@ (mov r8, r8)
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	20001e64 	.word	0x20001e64
 800e5cc:	40004c00 	.word	0x40004c00

0800e5d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e5d0:	b590      	push	{r4, r7, lr}
 800e5d2:	b08d      	sub	sp, #52	@ 0x34
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5d8:	241c      	movs	r4, #28
 800e5da:	193b      	adds	r3, r7, r4
 800e5dc:	0018      	movs	r0, r3
 800e5de:	2314      	movs	r3, #20
 800e5e0:	001a      	movs	r2, r3
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	f012 f81e 	bl	8020624 <memset>
  if(uartHandle->Instance==LPUART1)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a8b      	ldr	r2, [pc, #556]	@ (800e81c <HAL_UART_MspInit+0x24c>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d129      	bne.n	800e646 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e5f2:	4b8b      	ldr	r3, [pc, #556]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e5f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5f6:	4b8a      	ldr	r3, [pc, #552]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e5f8:	2180      	movs	r1, #128	@ 0x80
 800e5fa:	02c9      	lsls	r1, r1, #11
 800e5fc:	430a      	orrs	r2, r1
 800e5fe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e600:	4b87      	ldr	r3, [pc, #540]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e604:	4b86      	ldr	r3, [pc, #536]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e606:	2104      	movs	r1, #4
 800e608:	430a      	orrs	r2, r1
 800e60a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e60c:	4b84      	ldr	r3, [pc, #528]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e610:	2204      	movs	r2, #4
 800e612:	4013      	ands	r3, r2
 800e614:	61bb      	str	r3, [r7, #24]
 800e616:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e618:	0021      	movs	r1, r4
 800e61a:	187b      	adds	r3, r7, r1
 800e61c:	2203      	movs	r2, #3
 800e61e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e620:	187b      	adds	r3, r7, r1
 800e622:	2202      	movs	r2, #2
 800e624:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e626:	187b      	adds	r3, r7, r1
 800e628:	2200      	movs	r2, #0
 800e62a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e62c:	187b      	adds	r3, r7, r1
 800e62e:	2203      	movs	r2, #3
 800e630:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e632:	187b      	adds	r3, r7, r1
 800e634:	2206      	movs	r2, #6
 800e636:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e638:	187b      	adds	r3, r7, r1
 800e63a:	4a7a      	ldr	r2, [pc, #488]	@ (800e824 <HAL_UART_MspInit+0x254>)
 800e63c:	0019      	movs	r1, r3
 800e63e:	0010      	movs	r0, r2
 800e640:	f001 fe8e 	bl	8010360 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e644:	e0e5      	b.n	800e812 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4a77      	ldr	r2, [pc, #476]	@ (800e828 <HAL_UART_MspInit+0x258>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d133      	bne.n	800e6b8 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e650:	4b73      	ldr	r3, [pc, #460]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e654:	4b72      	ldr	r3, [pc, #456]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e656:	2180      	movs	r1, #128	@ 0x80
 800e658:	01c9      	lsls	r1, r1, #7
 800e65a:	430a      	orrs	r2, r1
 800e65c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e65e:	4b70      	ldr	r3, [pc, #448]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e662:	4b6f      	ldr	r3, [pc, #444]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e664:	2101      	movs	r1, #1
 800e666:	430a      	orrs	r2, r1
 800e668:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e66a:	4b6d      	ldr	r3, [pc, #436]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e66e:	2201      	movs	r2, #1
 800e670:	4013      	ands	r3, r2
 800e672:	617b      	str	r3, [r7, #20]
 800e674:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e676:	211c      	movs	r1, #28
 800e678:	187b      	adds	r3, r7, r1
 800e67a:	22c0      	movs	r2, #192	@ 0xc0
 800e67c:	00d2      	lsls	r2, r2, #3
 800e67e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e680:	187b      	adds	r3, r7, r1
 800e682:	2202      	movs	r2, #2
 800e684:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e686:	187b      	adds	r3, r7, r1
 800e688:	2200      	movs	r2, #0
 800e68a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e68c:	187b      	adds	r3, r7, r1
 800e68e:	2203      	movs	r2, #3
 800e690:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e692:	187b      	adds	r3, r7, r1
 800e694:	2204      	movs	r2, #4
 800e696:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e698:	187a      	adds	r2, r7, r1
 800e69a:	23a0      	movs	r3, #160	@ 0xa0
 800e69c:	05db      	lsls	r3, r3, #23
 800e69e:	0011      	movs	r1, r2
 800e6a0:	0018      	movs	r0, r3
 800e6a2:	f001 fe5d 	bl	8010360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	201b      	movs	r0, #27
 800e6ac:	f001 fa06 	bl	800fabc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e6b0:	201b      	movs	r0, #27
 800e6b2:	f001 fa18 	bl	800fae6 <HAL_NVIC_EnableIRQ>
}
 800e6b6:	e0ac      	b.n	800e812 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a5b      	ldr	r2, [pc, #364]	@ (800e82c <HAL_UART_MspInit+0x25c>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d000      	beq.n	800e6c4 <HAL_UART_MspInit+0xf4>
 800e6c2:	e0a6      	b.n	800e812 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e6c4:	4b56      	ldr	r3, [pc, #344]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e6c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6c8:	4b55      	ldr	r3, [pc, #340]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e6ca:	2180      	movs	r1, #128	@ 0x80
 800e6cc:	0309      	lsls	r1, r1, #12
 800e6ce:	430a      	orrs	r2, r1
 800e6d0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6d2:	4b53      	ldr	r3, [pc, #332]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d6:	4b52      	ldr	r3, [pc, #328]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e6d8:	2101      	movs	r1, #1
 800e6da:	430a      	orrs	r2, r1
 800e6dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e6de:	4b50      	ldr	r3, [pc, #320]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	613b      	str	r3, [r7, #16]
 800e6e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e6ea:	4b4d      	ldr	r3, [pc, #308]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e6ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6ee:	4b4c      	ldr	r3, [pc, #304]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e6f0:	2104      	movs	r1, #4
 800e6f2:	430a      	orrs	r2, r1
 800e6f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e6f6:	4b4a      	ldr	r3, [pc, #296]	@ (800e820 <HAL_UART_MspInit+0x250>)
 800e6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6fa:	2204      	movs	r2, #4
 800e6fc:	4013      	ands	r3, r2
 800e6fe:	60fb      	str	r3, [r7, #12]
 800e700:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e702:	241c      	movs	r4, #28
 800e704:	193b      	adds	r3, r7, r4
 800e706:	2202      	movs	r2, #2
 800e708:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e70a:	193b      	adds	r3, r7, r4
 800e70c:	2202      	movs	r2, #2
 800e70e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e710:	193b      	adds	r3, r7, r4
 800e712:	2200      	movs	r2, #0
 800e714:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e716:	193b      	adds	r3, r7, r4
 800e718:	2203      	movs	r2, #3
 800e71a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e71c:	193b      	adds	r3, r7, r4
 800e71e:	2206      	movs	r2, #6
 800e720:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e722:	193a      	adds	r2, r7, r4
 800e724:	23a0      	movs	r3, #160	@ 0xa0
 800e726:	05db      	lsls	r3, r3, #23
 800e728:	0011      	movs	r1, r2
 800e72a:	0018      	movs	r0, r3
 800e72c:	f001 fe18 	bl	8010360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e730:	0021      	movs	r1, r4
 800e732:	187b      	adds	r3, r7, r1
 800e734:	2280      	movs	r2, #128	@ 0x80
 800e736:	00d2      	lsls	r2, r2, #3
 800e738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e73a:	187b      	adds	r3, r7, r1
 800e73c:	2202      	movs	r2, #2
 800e73e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e740:	187b      	adds	r3, r7, r1
 800e742:	2200      	movs	r2, #0
 800e744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e746:	187b      	adds	r3, r7, r1
 800e748:	2203      	movs	r2, #3
 800e74a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e74c:	187b      	adds	r3, r7, r1
 800e74e:	2206      	movs	r2, #6
 800e750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e752:	187b      	adds	r3, r7, r1
 800e754:	4a33      	ldr	r2, [pc, #204]	@ (800e824 <HAL_UART_MspInit+0x254>)
 800e756:	0019      	movs	r1, r3
 800e758:	0010      	movs	r0, r2
 800e75a:	f001 fe01 	bl	8010360 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e75e:	4b34      	ldr	r3, [pc, #208]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e760:	4a34      	ldr	r2, [pc, #208]	@ (800e834 <HAL_UART_MspInit+0x264>)
 800e762:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e764:	4b32      	ldr	r3, [pc, #200]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e766:	220c      	movs	r2, #12
 800e768:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e76a:	4b31      	ldr	r3, [pc, #196]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e76c:	2200      	movs	r2, #0
 800e76e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e770:	4b2f      	ldr	r3, [pc, #188]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e772:	2200      	movs	r2, #0
 800e774:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e776:	4b2e      	ldr	r3, [pc, #184]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e778:	2280      	movs	r2, #128	@ 0x80
 800e77a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e77c:	4b2c      	ldr	r3, [pc, #176]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e77e:	2200      	movs	r2, #0
 800e780:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e782:	4b2b      	ldr	r3, [pc, #172]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e784:	2200      	movs	r2, #0
 800e786:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e788:	4b29      	ldr	r3, [pc, #164]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e78a:	2220      	movs	r2, #32
 800e78c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e78e:	4b28      	ldr	r3, [pc, #160]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e790:	2200      	movs	r2, #0
 800e792:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e794:	4b26      	ldr	r3, [pc, #152]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e796:	0018      	movs	r0, r3
 800e798:	f001 f9c6 	bl	800fb28 <HAL_DMA_Init>
 800e79c:	1e03      	subs	r3, r0, #0
 800e79e:	d001      	beq.n	800e7a4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e7a0:	f7f9 ff52 	bl	8008648 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4a22      	ldr	r2, [pc, #136]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e7a8:	675a      	str	r2, [r3, #116]	@ 0x74
 800e7aa:	4b21      	ldr	r3, [pc, #132]	@ (800e830 <HAL_UART_MspInit+0x260>)
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e7b0:	4b21      	ldr	r3, [pc, #132]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7b2:	4a22      	ldr	r2, [pc, #136]	@ (800e83c <HAL_UART_MspInit+0x26c>)
 800e7b4:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e7b6:	4b20      	ldr	r3, [pc, #128]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7b8:	220c      	movs	r2, #12
 800e7ba:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e7bc:	4b1e      	ldr	r3, [pc, #120]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7be:	2210      	movs	r2, #16
 800e7c0:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e7c2:	4b1d      	ldr	r3, [pc, #116]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e7c8:	4b1b      	ldr	r3, [pc, #108]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7ca:	2280      	movs	r2, #128	@ 0x80
 800e7cc:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e7ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e7d4:	4b18      	ldr	r3, [pc, #96]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e7da:	4b17      	ldr	r3, [pc, #92]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e7e0:	4b15      	ldr	r3, [pc, #84]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e7e6:	4b14      	ldr	r3, [pc, #80]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7e8:	0018      	movs	r0, r3
 800e7ea:	f001 f99d 	bl	800fb28 <HAL_DMA_Init>
 800e7ee:	1e03      	subs	r3, r0, #0
 800e7f0:	d001      	beq.n	800e7f6 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e7f2:	f7f9 ff29 	bl	8008648 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4a0f      	ldr	r2, [pc, #60]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7fa:	671a      	str	r2, [r3, #112]	@ 0x70
 800e7fc:	4b0e      	ldr	r3, [pc, #56]	@ (800e838 <HAL_UART_MspInit+0x268>)
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e802:	2200      	movs	r2, #0
 800e804:	2100      	movs	r1, #0
 800e806:	200e      	movs	r0, #14
 800e808:	f001 f958 	bl	800fabc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e80c:	200e      	movs	r0, #14
 800e80e:	f001 f96a 	bl	800fae6 <HAL_NVIC_EnableIRQ>
}
 800e812:	46c0      	nop			@ (mov r8, r8)
 800e814:	46bd      	mov	sp, r7
 800e816:	b00d      	add	sp, #52	@ 0x34
 800e818:	bd90      	pop	{r4, r7, pc}
 800e81a:	46c0      	nop			@ (mov r8, r8)
 800e81c:	40004800 	.word	0x40004800
 800e820:	40021000 	.word	0x40021000
 800e824:	50000800 	.word	0x50000800
 800e828:	40013800 	.word	0x40013800
 800e82c:	40004c00 	.word	0x40004c00
 800e830:	20001f1c 	.word	0x20001f1c
 800e834:	4002006c 	.word	0x4002006c
 800e838:	20001f64 	.word	0x20001f64
 800e83c:	40020080 	.word	0x40020080

0800e840 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e848:	f000 fc94 	bl	800f174 <HAL_GetTick>
 800e84c:	0003      	movs	r3, r0
 800e84e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e850:	4b1c      	ldr	r3, [pc, #112]	@ (800e8c4 <TimestampIsReached+0x84>)
 800e852:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e854:	697a      	ldr	r2, [r7, #20]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d307      	bcc.n	800e86c <TimestampIsReached+0x2c>
 800e85c:	697a      	ldr	r2, [r7, #20]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	693a      	ldr	r2, [r7, #16]
 800e864:	429a      	cmp	r2, r3
 800e866:	d901      	bls.n	800e86c <TimestampIsReached+0x2c>
 800e868:	2201      	movs	r2, #1
 800e86a:	e000      	b.n	800e86e <TimestampIsReached+0x2e>
 800e86c:	2200      	movs	r2, #0
 800e86e:	230f      	movs	r3, #15
 800e870:	18fb      	adds	r3, r7, r3
 800e872:	701a      	strb	r2, [r3, #0]
 800e874:	781a      	ldrb	r2, [r3, #0]
 800e876:	2101      	movs	r1, #1
 800e878:	400a      	ands	r2, r1
 800e87a:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e87c:	697a      	ldr	r2, [r7, #20]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	429a      	cmp	r2, r3
 800e882:	d207      	bcs.n	800e894 <TimestampIsReached+0x54>
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	1ad3      	subs	r3, r2, r3
 800e88a:	693a      	ldr	r2, [r7, #16]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d201      	bcs.n	800e894 <TimestampIsReached+0x54>
 800e890:	2201      	movs	r2, #1
 800e892:	e000      	b.n	800e896 <TimestampIsReached+0x56>
 800e894:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e896:	200e      	movs	r0, #14
 800e898:	183b      	adds	r3, r7, r0
 800e89a:	701a      	strb	r2, [r3, #0]
 800e89c:	781a      	ldrb	r2, [r3, #0]
 800e89e:	2101      	movs	r1, #1
 800e8a0:	400a      	ands	r2, r1
 800e8a2:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e8a4:	230f      	movs	r3, #15
 800e8a6:	18fb      	adds	r3, r7, r3
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d103      	bne.n	800e8b6 <TimestampIsReached+0x76>
 800e8ae:	183b      	adds	r3, r7, r0
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d001      	beq.n	800e8ba <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e000      	b.n	800e8bc <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	0018      	movs	r0, r3
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	b006      	add	sp, #24
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	7fffffff 	.word	0x7fffffff

0800e8c8 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e8d0:	f000 fc50 	bl	800f174 <HAL_GetTick>
 800e8d4:	0002      	movs	r2, r0
 800e8d6:	4904      	ldr	r1, [pc, #16]	@ (800e8e8 <AddTimestamp+0x20>)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	0018      	movs	r0, r3
 800e8dc:	f011 fd5e 	bl	802039c <siprintf>
}
 800e8e0:	46c0      	nop			@ (mov r8, r8)
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	b002      	add	sp, #8
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	0802561c 	.word	0x0802561c

0800e8ec <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e8ec:	b40c      	push	{r2, r3}
 800e8ee:	b5b0      	push	{r4, r5, r7, lr}
 800e8f0:	b0a4      	sub	sp, #144	@ 0x90
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	0002      	movs	r2, r0
 800e8f6:	6039      	str	r1, [r7, #0]
 800e8f8:	1dfb      	adds	r3, r7, #7
 800e8fa:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e8fc:	4b23      	ldr	r3, [pc, #140]	@ (800e98c <CreateLine+0xa0>)
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	1dfa      	adds	r2, r7, #7
 800e902:	7812      	ldrb	r2, [r2, #0]
 800e904:	429a      	cmp	r2, r3
 800e906:	d839      	bhi.n	800e97c <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e908:	683a      	ldr	r2, [r7, #0]
 800e90a:	4921      	ldr	r1, [pc, #132]	@ (800e990 <CreateLine+0xa4>)
 800e90c:	240c      	movs	r4, #12
 800e90e:	193b      	adds	r3, r7, r4
 800e910:	0018      	movs	r0, r3
 800e912:	f011 fd43 	bl	802039c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e916:	4b1d      	ldr	r3, [pc, #116]	@ (800e98c <CreateLine+0xa0>)
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d909      	bls.n	800e932 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e91e:	193b      	adds	r3, r7, r4
 800e920:	0018      	movs	r0, r3
 800e922:	f7f1 fc23 	bl	800016c <strlen>
 800e926:	0002      	movs	r2, r0
 800e928:	193b      	adds	r3, r7, r4
 800e92a:	189b      	adds	r3, r3, r2
 800e92c:	0018      	movs	r0, r3
 800e92e:	f7ff ffcb 	bl	800e8c8 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e932:	240c      	movs	r4, #12
 800e934:	193b      	adds	r3, r7, r4
 800e936:	0018      	movs	r0, r3
 800e938:	f7f1 fc18 	bl	800016c <strlen>
 800e93c:	0003      	movs	r3, r0
 800e93e:	218c      	movs	r1, #140	@ 0x8c
 800e940:	187a      	adds	r2, r7, r1
 800e942:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e944:	239c      	movs	r3, #156	@ 0x9c
 800e946:	2508      	movs	r5, #8
 800e948:	195b      	adds	r3, r3, r5
 800e94a:	19db      	adds	r3, r3, r7
 800e94c:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e94e:	193a      	adds	r2, r7, r4
 800e950:	187b      	adds	r3, r7, r1
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	18d0      	adds	r0, r2, r3
 800e956:	187b      	adds	r3, r7, r1
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2280      	movs	r2, #128	@ 0x80
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	0019      	movs	r1, r3
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	2298      	movs	r2, #152	@ 0x98
 800e964:	1952      	adds	r2, r2, r5
 800e966:	19d2      	adds	r2, r2, r7
 800e968:	6812      	ldr	r2, [r2, #0]
 800e96a:	f011 fdaf 	bl	80204cc <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e96e:	193a      	adds	r2, r7, r4
 800e970:	4b08      	ldr	r3, [pc, #32]	@ (800e994 <CreateLine+0xa8>)
 800e972:	0011      	movs	r1, r2
 800e974:	0018      	movs	r0, r3
 800e976:	f011 fca1 	bl	80202bc <iprintf>
 800e97a:	e000      	b.n	800e97e <CreateLine+0x92>
    return;
 800e97c:	46c0      	nop			@ (mov r8, r8)
}
 800e97e:	46bd      	mov	sp, r7
 800e980:	b024      	add	sp, #144	@ 0x90
 800e982:	bcb0      	pop	{r4, r5, r7}
 800e984:	bc08      	pop	{r3}
 800e986:	b002      	add	sp, #8
 800e988:	4718      	bx	r3
 800e98a:	46c0      	nop			@ (mov r8, r8)
 800e98c:	200000d4 	.word	0x200000d4
 800e990:	08025628 	.word	0x08025628
 800e994:	0802562c 	.word	0x0802562c

0800e998 <_write>:

int _write(int fd, void *buf, size_t count) {
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	b29a      	uxth	r2, r3
 800e9a8:	68b9      	ldr	r1, [r7, #8]
 800e9aa:	4804      	ldr	r0, [pc, #16]	@ (800e9bc <_write+0x24>)
 800e9ac:	2364      	movs	r3, #100	@ 0x64
 800e9ae:	f008 fe0d 	bl	80175cc <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800e9b2:	687b      	ldr	r3, [r7, #4]
}
 800e9b4:	0018      	movs	r0, r3
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	b004      	add	sp, #16
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	20001dac 	.word	0x20001dac

0800e9c0 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	0002      	movs	r2, r0
 800e9c8:	1dfb      	adds	r3, r7, #7
 800e9ca:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e9cc:	4b03      	ldr	r3, [pc, #12]	@ (800e9dc <SetVerboseLevel+0x1c>)
 800e9ce:	1dfa      	adds	r2, r7, #7
 800e9d0:	7812      	ldrb	r2, [r2, #0]
 800e9d2:	701a      	strb	r2, [r3, #0]
}
 800e9d4:	46c0      	nop			@ (mov r8, r8)
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	b002      	add	sp, #8
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	200000d4 	.word	0x200000d4

0800e9e0 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e9e4:	4b02      	ldr	r3, [pc, #8]	@ (800e9f0 <GetVerboseLevel+0x10>)
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	0018      	movs	r0, r3
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	46c0      	nop			@ (mov r8, r8)
 800e9f0:	200000d4 	.word	0x200000d4

0800e9f4 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800e9fa:	4a0f      	ldr	r2, [pc, #60]	@ (800ea38 <BinaryReleaseInfo+0x44>)
 800e9fc:	4b0f      	ldr	r3, [pc, #60]	@ (800ea3c <BinaryReleaseInfo+0x48>)
 800e9fe:	0019      	movs	r1, r3
 800ea00:	2002      	movs	r0, #2
 800ea02:	f7ff ff73 	bl	800e8ec <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800ea06:	480e      	ldr	r0, [pc, #56]	@ (800ea40 <BinaryReleaseInfo+0x4c>)
 800ea08:	4a0e      	ldr	r2, [pc, #56]	@ (800ea44 <BinaryReleaseInfo+0x50>)
 800ea0a:	490c      	ldr	r1, [pc, #48]	@ (800ea3c <BinaryReleaseInfo+0x48>)
 800ea0c:	4b0e      	ldr	r3, [pc, #56]	@ (800ea48 <BinaryReleaseInfo+0x54>)
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	0003      	movs	r3, r0
 800ea12:	2002      	movs	r0, #2
 800ea14:	f7ff ff6a 	bl	800e8ec <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800ea18:	4b0c      	ldr	r3, [pc, #48]	@ (800ea4c <BinaryReleaseInfo+0x58>)
 800ea1a:	4a0d      	ldr	r2, [pc, #52]	@ (800ea50 <BinaryReleaseInfo+0x5c>)
 800ea1c:	4907      	ldr	r1, [pc, #28]	@ (800ea3c <BinaryReleaseInfo+0x48>)
 800ea1e:	2002      	movs	r0, #2
 800ea20:	f7ff ff64 	bl	800e8ec <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800ea24:	4b0b      	ldr	r3, [pc, #44]	@ (800ea54 <BinaryReleaseInfo+0x60>)
 800ea26:	4a0c      	ldr	r2, [pc, #48]	@ (800ea58 <BinaryReleaseInfo+0x64>)
 800ea28:	4904      	ldr	r1, [pc, #16]	@ (800ea3c <BinaryReleaseInfo+0x48>)
 800ea2a:	2002      	movs	r0, #2
 800ea2c:	f7ff ff5e 	bl	800e8ec <CreateLine>
}
 800ea30:	46c0      	nop			@ (mov r8, r8)
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	46c0      	nop			@ (mov r8, r8)
 800ea38:	08025634 	.word	0x08025634
 800ea3c:	08025660 	.word	0x08025660
 800ea40:	08025664 	.word	0x08025664
 800ea44:	08025670 	.word	0x08025670
 800ea48:	08025684 	.word	0x08025684
 800ea4c:	08025690 	.word	0x08025690
 800ea50:	0802569c 	.word	0x0802569c
 800ea54:	080256a4 	.word	0x080256a4
 800ea58:	080256ac 	.word	0x080256ac

0800ea5c <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	60b9      	str	r1, [r7, #8]
 800ea66:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	68ba      	ldr	r2, [r7, #8]
 800ea6c:	68f9      	ldr	r1, [r7, #12]
 800ea6e:	4803      	ldr	r0, [pc, #12]	@ (800ea7c <errorHandler+0x20>)
 800ea70:	f011 fc24 	bl	80202bc <iprintf>
//    while (true)
//    {
//    }
}
 800ea74:	46c0      	nop			@ (mov r8, r8)
 800ea76:	46bd      	mov	sp, r7
 800ea78:	b004      	add	sp, #16
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	080256c4 	.word	0x080256c4

0800ea80 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ea80:	b590      	push	{r4, r7, lr}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6039      	str	r1, [r7, #0]
 800ea88:	0011      	movs	r1, r2
 800ea8a:	1dfb      	adds	r3, r7, #7
 800ea8c:	1c02      	adds	r2, r0, #0
 800ea8e:	701a      	strb	r2, [r3, #0]
 800ea90:	1dbb      	adds	r3, r7, #6
 800ea92:	1c0a      	adds	r2, r1, #0
 800ea94:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800ea96:	4b0a      	ldr	r3, [pc, #40]	@ (800eac0 <ReadRegister+0x40>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00a      	beq.n	800eab4 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800ea9e:	4b08      	ldr	r3, [pc, #32]	@ (800eac0 <ReadRegister+0x40>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	1dba      	adds	r2, r7, #6
 800eaa4:	7814      	ldrb	r4, [r2, #0]
 800eaa6:	6839      	ldr	r1, [r7, #0]
 800eaa8:	1dfa      	adds	r2, r7, #7
 800eaaa:	7810      	ldrb	r0, [r2, #0]
 800eaac:	0022      	movs	r2, r4
 800eaae:	4798      	blx	r3
 800eab0:	0003      	movs	r3, r0
 800eab2:	e000      	b.n	800eab6 <ReadRegister+0x36>
	}
	return false;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	0018      	movs	r0, r3
 800eab8:	46bd      	mov	sp, r7
 800eaba:	b003      	add	sp, #12
 800eabc:	bd90      	pop	{r4, r7, pc}
 800eabe:	46c0      	nop			@ (mov r8, r8)
 800eac0:	20001fb4 	.word	0x20001fb4

0800eac4 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800eac4:	b590      	push	{r4, r7, lr}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6039      	str	r1, [r7, #0]
 800eacc:	0011      	movs	r1, r2
 800eace:	1dfb      	adds	r3, r7, #7
 800ead0:	1c02      	adds	r2, r0, #0
 800ead2:	701a      	strb	r2, [r3, #0]
 800ead4:	1dbb      	adds	r3, r7, #6
 800ead6:	1c0a      	adds	r2, r1, #0
 800ead8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800eada:	4b0a      	ldr	r3, [pc, #40]	@ (800eb04 <WriteRegister+0x40>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00a      	beq.n	800eaf8 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800eae2:	4b08      	ldr	r3, [pc, #32]	@ (800eb04 <WriteRegister+0x40>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	1dba      	adds	r2, r7, #6
 800eae8:	7814      	ldrb	r4, [r2, #0]
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	1dfa      	adds	r2, r7, #7
 800eaee:	7810      	ldrb	r0, [r2, #0]
 800eaf0:	0022      	movs	r2, r4
 800eaf2:	4798      	blx	r3
 800eaf4:	0003      	movs	r3, r0
 800eaf6:	e000      	b.n	800eafa <WriteRegister+0x36>
  }
  return false;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	0018      	movs	r0, r3
 800eafc:	46bd      	mov	sp, r7
 800eafe:	b003      	add	sp, #12
 800eb00:	bd90      	pop	{r4, r7, pc}
 800eb02:	46c0      	nop			@ (mov r8, r8)
 800eb04:	20001fb8 	.word	0x20001fb8

0800eb08 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	000a      	movs	r2, r1
 800eb12:	1cfb      	adds	r3, r7, #3
 800eb14:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800eb16:	230f      	movs	r3, #15
 800eb18:	18fb      	adds	r3, r7, r3
 800eb1a:	22ff      	movs	r2, #255	@ 0xff
 800eb1c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800eb1e:	230e      	movs	r3, #14
 800eb20:	18fb      	adds	r3, r7, r3
 800eb22:	2200      	movs	r2, #0
 800eb24:	701a      	strb	r2, [r3, #0]
 800eb26:	e037      	b.n	800eb98 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800eb28:	230e      	movs	r3, #14
 800eb2a:	18fb      	adds	r3, r7, r3
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	18d3      	adds	r3, r2, r3
 800eb32:	7819      	ldrb	r1, [r3, #0]
 800eb34:	220f      	movs	r2, #15
 800eb36:	18bb      	adds	r3, r7, r2
 800eb38:	18ba      	adds	r2, r7, r2
 800eb3a:	7812      	ldrb	r2, [r2, #0]
 800eb3c:	404a      	eors	r2, r1
 800eb3e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800eb40:	230d      	movs	r3, #13
 800eb42:	18fb      	adds	r3, r7, r3
 800eb44:	2200      	movs	r2, #0
 800eb46:	701a      	strb	r2, [r3, #0]
 800eb48:	e01b      	b.n	800eb82 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800eb4a:	210f      	movs	r1, #15
 800eb4c:	187b      	adds	r3, r7, r1
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	b25b      	sxtb	r3, r3
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	da09      	bge.n	800eb6a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800eb56:	187b      	adds	r3, r7, r1
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	005b      	lsls	r3, r3, #1
 800eb5c:	b25b      	sxtb	r3, r3
 800eb5e:	2231      	movs	r2, #49	@ 0x31
 800eb60:	4053      	eors	r3, r2
 800eb62:	b25a      	sxtb	r2, r3
 800eb64:	187b      	adds	r3, r7, r1
 800eb66:	701a      	strb	r2, [r3, #0]
 800eb68:	e005      	b.n	800eb76 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800eb6a:	230f      	movs	r3, #15
 800eb6c:	18fa      	adds	r2, r7, r3
 800eb6e:	18fb      	adds	r3, r7, r3
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	18db      	adds	r3, r3, r3
 800eb74:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800eb76:	210d      	movs	r1, #13
 800eb78:	187b      	adds	r3, r7, r1
 800eb7a:	781a      	ldrb	r2, [r3, #0]
 800eb7c:	187b      	adds	r3, r7, r1
 800eb7e:	3201      	adds	r2, #1
 800eb80:	701a      	strb	r2, [r3, #0]
 800eb82:	230d      	movs	r3, #13
 800eb84:	18fb      	adds	r3, r7, r3
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	2b07      	cmp	r3, #7
 800eb8a:	d9de      	bls.n	800eb4a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800eb8c:	210e      	movs	r1, #14
 800eb8e:	187b      	adds	r3, r7, r1
 800eb90:	781a      	ldrb	r2, [r3, #0]
 800eb92:	187b      	adds	r3, r7, r1
 800eb94:	3201      	adds	r2, #1
 800eb96:	701a      	strb	r2, [r3, #0]
 800eb98:	230e      	movs	r3, #14
 800eb9a:	18fa      	adds	r2, r7, r3
 800eb9c:	1cfb      	adds	r3, r7, #3
 800eb9e:	7812      	ldrb	r2, [r2, #0]
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d3c0      	bcc.n	800eb28 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800eba6:	230f      	movs	r3, #15
 800eba8:	18fb      	adds	r3, r7, r3
 800ebaa:	781b      	ldrb	r3, [r3, #0]
}
 800ebac:	0018      	movs	r0, r3
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	b004      	add	sp, #16
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800ebbe:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe8 <HIDS_Init+0x34>)
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800ebc4:	4b09      	ldr	r3, [pc, #36]	@ (800ebec <HIDS_Init+0x38>)
 800ebc6:	683a      	ldr	r2, [r7, #0]
 800ebc8:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800ebca:	4b09      	ldr	r3, [pc, #36]	@ (800ebf0 <HIDS_Init+0x3c>)
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	0018      	movs	r0, r3
 800ebd0:	f000 f840 	bl	800ec54 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800ebd4:	4b07      	ldr	r3, [pc, #28]	@ (800ebf4 <HIDS_Init+0x40>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	0018      	movs	r0, r3
 800ebda:	f000 f82b 	bl	800ec34 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800ebde:	46c0      	nop			@ (mov r8, r8)
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	b002      	add	sp, #8
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	46c0      	nop			@ (mov r8, r8)
 800ebe8:	20001fb4 	.word	0x20001fb4
 800ebec:	20001fb8 	.word	0x20001fb8
 800ebf0:	200000d6 	.word	0x200000d6
 800ebf4:	200000d5 	.word	0x200000d5

0800ebf8 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800ebfc:	f000 faba 	bl	800f174 <HAL_GetTick>
 800ec00:	0002      	movs	r2, r0
 800ec02:	4b08      	ldr	r3, [pc, #32]	@ (800ec24 <HIDS_StartMeasurement+0x2c>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	18d2      	adds	r2, r2, r3
 800ec08:	4b07      	ldr	r3, [pc, #28]	@ (800ec28 <HIDS_StartMeasurement+0x30>)
 800ec0a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800ec0c:	4b07      	ldr	r3, [pc, #28]	@ (800ec2c <HIDS_StartMeasurement+0x34>)
 800ec0e:	2201      	movs	r2, #1
 800ec10:	0019      	movs	r1, r3
 800ec12:	2044      	movs	r0, #68	@ 0x44
 800ec14:	f7ff ff56 	bl	800eac4 <WriteRegister>
  MeasurementDone = false;
 800ec18:	4b05      	ldr	r3, [pc, #20]	@ (800ec30 <HIDS_StartMeasurement+0x38>)
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	701a      	strb	r2, [r3, #0]
}
 800ec1e:	46c0      	nop			@ (mov r8, r8)
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	200000dc 	.word	0x200000dc
 800ec28:	200000d8 	.word	0x200000d8
 800ec2c:	200000d6 	.word	0x200000d6
 800ec30:	20001fca 	.word	0x20001fca

0800ec34 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	0002      	movs	r2, r0
 800ec3c:	1dfb      	adds	r3, r7, #7
 800ec3e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800ec40:	4b03      	ldr	r3, [pc, #12]	@ (800ec50 <HIDS_SetHeaterMode+0x1c>)
 800ec42:	1dfa      	adds	r2, r7, #7
 800ec44:	7812      	ldrb	r2, [r2, #0]
 800ec46:	701a      	strb	r2, [r3, #0]
}
 800ec48:	46c0      	nop			@ (mov r8, r8)
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	b002      	add	sp, #8
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	200000d5 	.word	0x200000d5

0800ec54 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	0002      	movs	r2, r0
 800ec5c:	1dfb      	adds	r3, r7, #7
 800ec5e:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800ec60:	4b03      	ldr	r3, [pc, #12]	@ (800ec70 <HIDS_SetMeasurementMode+0x1c>)
 800ec62:	1dfa      	adds	r2, r7, #7
 800ec64:	7812      	ldrb	r2, [r2, #0]
 800ec66:	701a      	strb	r2, [r3, #0]
}
 800ec68:	46c0      	nop			@ (mov r8, r8)
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	b002      	add	sp, #8
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	200000d6 	.word	0x200000d6

0800ec74 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800ec7c:	f000 fa7a 	bl	800f174 <HAL_GetTick>
 800ec80:	0002      	movs	r2, r0
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	18d2      	adds	r2, r2, r3
 800ec86:	4b03      	ldr	r3, [pc, #12]	@ (800ec94 <setHIDSTimeStamp+0x20>)
 800ec88:	601a      	str	r2, [r3, #0]
}
 800ec8a:	46c0      	nop			@ (mov r8, r8)
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	b002      	add	sp, #8
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	46c0      	nop			@ (mov r8, r8)
 800ec94:	20001fcc 	.word	0x20001fcc

0800ec98 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800ec98:	b590      	push	{r4, r7, lr}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	781a      	ldrb	r2, [r3, #0]
 800eca4:	210c      	movs	r1, #12
 800eca6:	187b      	adds	r3, r7, r1
 800eca8:	701a      	strb	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	785a      	ldrb	r2, [r3, #1]
 800ecae:	187b      	adds	r3, r7, r1
 800ecb0:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800ecb2:	240f      	movs	r4, #15
 800ecb4:	193b      	adds	r3, r7, r4
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	7892      	ldrb	r2, [r2, #2]
 800ecba:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800ecbc:	187b      	adds	r3, r7, r1
 800ecbe:	2102      	movs	r1, #2
 800ecc0:	0018      	movs	r0, r3
 800ecc2:	f7ff ff21 	bl	800eb08 <CalculateCRC>
 800ecc6:	0003      	movs	r3, r0
 800ecc8:	001a      	movs	r2, r3
 800ecca:	193b      	adds	r3, r7, r4
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d007      	beq.n	800ece2 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800ecd2:	4a1a      	ldr	r2, [pc, #104]	@ (800ed3c <CheckCRC+0xa4>)
 800ecd4:	4b1a      	ldr	r3, [pc, #104]	@ (800ed40 <CheckCRC+0xa8>)
 800ecd6:	0019      	movs	r1, r3
 800ecd8:	2001      	movs	r0, #1
 800ecda:	f7ff fe07 	bl	800e8ec <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800ecde:	2300      	movs	r3, #0
 800ece0:	e027      	b.n	800ed32 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	78da      	ldrb	r2, [r3, #3]
 800ece6:	2108      	movs	r1, #8
 800ece8:	187b      	adds	r3, r7, r1
 800ecea:	701a      	strb	r2, [r3, #0]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	791a      	ldrb	r2, [r3, #4]
 800ecf0:	187b      	adds	r3, r7, r1
 800ecf2:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800ecf4:	240e      	movs	r4, #14
 800ecf6:	193b      	adds	r3, r7, r4
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	7952      	ldrb	r2, [r2, #5]
 800ecfc:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800ecfe:	187b      	adds	r3, r7, r1
 800ed00:	2102      	movs	r1, #2
 800ed02:	0018      	movs	r0, r3
 800ed04:	f7ff ff00 	bl	800eb08 <CalculateCRC>
 800ed08:	0003      	movs	r3, r0
 800ed0a:	001a      	movs	r2, r3
 800ed0c:	193b      	adds	r3, r7, r4
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d00d      	beq.n	800ed30 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800ed14:	4a0b      	ldr	r2, [pc, #44]	@ (800ed44 <CheckCRC+0xac>)
 800ed16:	4b0a      	ldr	r3, [pc, #40]	@ (800ed40 <CheckCRC+0xa8>)
 800ed18:	0019      	movs	r1, r3
 800ed1a:	2001      	movs	r0, #1
 800ed1c:	f7ff fde6 	bl	800e8ec <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800ed20:	4a09      	ldr	r2, [pc, #36]	@ (800ed48 <CheckCRC+0xb0>)
 800ed22:	4b0a      	ldr	r3, [pc, #40]	@ (800ed4c <CheckCRC+0xb4>)
 800ed24:	217c      	movs	r1, #124	@ 0x7c
 800ed26:	0018      	movs	r0, r3
 800ed28:	f7ff fe98 	bl	800ea5c <errorHandler>
		return false;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e000      	b.n	800ed32 <CheckCRC+0x9a>
	}
	return true;
 800ed30:	2301      	movs	r3, #1
}
 800ed32:	0018      	movs	r0, r3
 800ed34:	46bd      	mov	sp, r7
 800ed36:	b005      	add	sp, #20
 800ed38:	bd90      	pop	{r4, r7, pc}
 800ed3a:	46c0      	nop			@ (mov r8, r8)
 800ed3c:	08025710 	.word	0x08025710
 800ed40:	08025738 	.word	0x08025738
 800ed44:	0802573c 	.word	0x0802573c
 800ed48:	08025768 	.word	0x08025768
 800ed4c:	08025d34 	.word	0x08025d34

0800ed50 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800ed56:	1dbb      	adds	r3, r7, #6
 800ed58:	2289      	movs	r2, #137	@ 0x89
 800ed5a:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800ed5c:	1dbb      	adds	r3, r7, #6
 800ed5e:	2201      	movs	r2, #1
 800ed60:	0019      	movs	r1, r3
 800ed62:	2044      	movs	r0, #68	@ 0x44
 800ed64:	f7ff feae 	bl	800eac4 <WriteRegister>
	HAL_Delay(30);
 800ed68:	201e      	movs	r0, #30
 800ed6a:	f000 fa0d 	bl	800f188 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800ed6e:	4b14      	ldr	r3, [pc, #80]	@ (800edc0 <HIDS_DeviceConnected+0x70>)
 800ed70:	2206      	movs	r2, #6
 800ed72:	0019      	movs	r1, r3
 800ed74:	2044      	movs	r0, #68	@ 0x44
 800ed76:	f7ff fe83 	bl	800ea80 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800ed7a:	1dfb      	adds	r3, r7, #7
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	701a      	strb	r2, [r3, #0]
 800ed80:	e011      	b.n	800eda6 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800ed82:	1dfb      	adds	r3, r7, #7
 800ed84:	7818      	ldrb	r0, [r3, #0]
 800ed86:	1dfb      	adds	r3, r7, #7
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	4a0d      	ldr	r2, [pc, #52]	@ (800edc0 <HIDS_DeviceConnected+0x70>)
 800ed8c:	5cd3      	ldrb	r3, [r2, r3]
 800ed8e:	4a0d      	ldr	r2, [pc, #52]	@ (800edc4 <HIDS_DeviceConnected+0x74>)
 800ed90:	490d      	ldr	r1, [pc, #52]	@ (800edc8 <HIDS_DeviceConnected+0x78>)
 800ed92:	9300      	str	r3, [sp, #0]
 800ed94:	0003      	movs	r3, r0
 800ed96:	2002      	movs	r0, #2
 800ed98:	f7ff fda8 	bl	800e8ec <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800ed9c:	1dfb      	adds	r3, r7, #7
 800ed9e:	781a      	ldrb	r2, [r3, #0]
 800eda0:	1dfb      	adds	r3, r7, #7
 800eda2:	3201      	adds	r2, #1
 800eda4:	701a      	strb	r2, [r3, #0]
 800eda6:	1dfb      	adds	r3, r7, #7
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	2b05      	cmp	r3, #5
 800edac:	d9e9      	bls.n	800ed82 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800edae:	4b04      	ldr	r3, [pc, #16]	@ (800edc0 <HIDS_DeviceConnected+0x70>)
 800edb0:	0018      	movs	r0, r3
 800edb2:	f7ff ff71 	bl	800ec98 <CheckCRC>
 800edb6:	0003      	movs	r3, r0
}
 800edb8:	0018      	movs	r0, r3
 800edba:	46bd      	mov	sp, r7
 800edbc:	b002      	add	sp, #8
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	20001fbc 	.word	0x20001fbc
 800edc4:	08025780 	.word	0x08025780
 800edc8:	0802570c 	.word	0x0802570c

0800edcc <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800edcc:	b580      	push	{r7, lr}
 800edce:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800edd0:	4b04      	ldr	r3, [pc, #16]	@ (800ede4 <HIDS_MeasurementReady+0x18>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	0018      	movs	r0, r3
 800edd6:	f7ff fd33 	bl	800e840 <TimestampIsReached>
 800edda:	0003      	movs	r3, r0
}
 800eddc:	0018      	movs	r0, r3
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	46c0      	nop			@ (mov r8, r8)
 800ede4:	200000d8 	.word	0x200000d8

0800ede8 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800edf2:	4b41      	ldr	r3, [pc, #260]	@ (800eef8 <HIDS_GetMeasurementValues+0x110>)
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d001      	beq.n	800edfe <HIDS_GetMeasurementValues+0x16>
 800edfa:	2301      	movs	r3, #1
 800edfc:	e077      	b.n	800eeee <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 800edfe:	f7ff ffe5 	bl	800edcc <HIDS_MeasurementReady>
 800ee02:	0003      	movs	r3, r0
 800ee04:	001a      	movs	r2, r3
 800ee06:	2301      	movs	r3, #1
 800ee08:	4053      	eors	r3, r2
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <HIDS_GetMeasurementValues+0x2c>
 800ee10:	2300      	movs	r3, #0
 800ee12:	e06c      	b.n	800eeee <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800ee14:	4b39      	ldr	r3, [pc, #228]	@ (800eefc <HIDS_GetMeasurementValues+0x114>)
 800ee16:	2206      	movs	r2, #6
 800ee18:	0019      	movs	r1, r3
 800ee1a:	2044      	movs	r0, #68	@ 0x44
 800ee1c:	f7ff fe30 	bl	800ea80 <ReadRegister>
 800ee20:	0003      	movs	r3, r0
 800ee22:	001a      	movs	r2, r3
 800ee24:	2301      	movs	r3, #1
 800ee26:	4053      	eors	r3, r2
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d005      	beq.n	800ee3a <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800ee2e:	4a34      	ldr	r2, [pc, #208]	@ (800ef00 <HIDS_GetMeasurementValues+0x118>)
 800ee30:	4b34      	ldr	r3, [pc, #208]	@ (800ef04 <HIDS_GetMeasurementValues+0x11c>)
 800ee32:	0019      	movs	r1, r3
 800ee34:	2001      	movs	r0, #1
 800ee36:	f7ff fd59 	bl	800e8ec <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800ee3a:	4b30      	ldr	r3, [pc, #192]	@ (800eefc <HIDS_GetMeasurementValues+0x114>)
 800ee3c:	0018      	movs	r0, r3
 800ee3e:	f7ff ff2b 	bl	800ec98 <CheckCRC>
 800ee42:	0003      	movs	r3, r0
 800ee44:	001a      	movs	r2, r3
 800ee46:	2301      	movs	r3, #1
 800ee48:	4053      	eors	r3, r2
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d001      	beq.n	800ee54 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800ee50:	2300      	movs	r3, #0
 800ee52:	e04c      	b.n	800eeee <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800ee54:	4b29      	ldr	r3, [pc, #164]	@ (800eefc <HIDS_GetMeasurementValues+0x114>)
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	021b      	lsls	r3, r3, #8
 800ee5a:	4a28      	ldr	r2, [pc, #160]	@ (800eefc <HIDS_GetMeasurementValues+0x114>)
 800ee5c:	7852      	ldrb	r2, [r2, #1]
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	22af      	movs	r2, #175	@ 0xaf
 800ee62:	4353      	muls	r3, r2
 800ee64:	0018      	movs	r0, r3
 800ee66:	f7f4 faab 	bl	80033c0 <__aeabi_i2d>
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	4b26      	ldr	r3, [pc, #152]	@ (800ef08 <HIDS_GetMeasurementValues+0x120>)
 800ee6e:	f7f2 ffa1 	bl	8001db4 <__aeabi_ddiv>
 800ee72:	0002      	movs	r2, r0
 800ee74:	000b      	movs	r3, r1
 800ee76:	0010      	movs	r0, r2
 800ee78:	0019      	movs	r1, r3
 800ee7a:	f7f4 fb3b 	bl	80034f4 <__aeabi_d2f>
 800ee7e:	1c03      	adds	r3, r0, #0
 800ee80:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800ee82:	4922      	ldr	r1, [pc, #136]	@ (800ef0c <HIDS_GetMeasurementValues+0x124>)
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f7f2 f9c9 	bl	800121c <__aeabi_fsub>
 800ee8a:	1c03      	adds	r3, r0, #0
 800ee8c:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800ee8e:	4b1b      	ldr	r3, [pc, #108]	@ (800eefc <HIDS_GetMeasurementValues+0x114>)
 800ee90:	78db      	ldrb	r3, [r3, #3]
 800ee92:	021b      	lsls	r3, r3, #8
 800ee94:	4a19      	ldr	r2, [pc, #100]	@ (800eefc <HIDS_GetMeasurementValues+0x114>)
 800ee96:	7912      	ldrb	r2, [r2, #4]
 800ee98:	431a      	orrs	r2, r3
 800ee9a:	0013      	movs	r3, r2
 800ee9c:	015b      	lsls	r3, r3, #5
 800ee9e:	1a9b      	subs	r3, r3, r2
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	189b      	adds	r3, r3, r2
 800eea4:	0018      	movs	r0, r3
 800eea6:	f7f4 fa8b 	bl	80033c0 <__aeabi_i2d>
 800eeaa:	2200      	movs	r2, #0
 800eeac:	4b16      	ldr	r3, [pc, #88]	@ (800ef08 <HIDS_GetMeasurementValues+0x120>)
 800eeae:	f7f2 ff81 	bl	8001db4 <__aeabi_ddiv>
 800eeb2:	0002      	movs	r2, r0
 800eeb4:	000b      	movs	r3, r1
 800eeb6:	0010      	movs	r0, r2
 800eeb8:	0019      	movs	r1, r3
 800eeba:	f7f4 fb1b 	bl	80034f4 <__aeabi_d2f>
 800eebe:	1c03      	adds	r3, r0, #0
 800eec0:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800eec2:	4913      	ldr	r1, [pc, #76]	@ (800ef10 <HIDS_GetMeasurementValues+0x128>)
 800eec4:	68b8      	ldr	r0, [r7, #8]
 800eec6:	f7f2 f9a9 	bl	800121c <__aeabi_fsub>
 800eeca:	1c03      	adds	r3, r0, #0
 800eecc:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	68ba      	ldr	r2, [r7, #8]
 800eed8:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	0011      	movs	r1, r2
 800eee0:	0018      	movs	r0, r3
 800eee2:	f7fd f92d 	bl	800c140 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 800eee6:	4b04      	ldr	r3, [pc, #16]	@ (800eef8 <HIDS_GetMeasurementValues+0x110>)
 800eee8:	2201      	movs	r2, #1
 800eeea:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800eeec:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800eeee:	0018      	movs	r0, r3
 800eef0:	46bd      	mov	sp, r7
 800eef2:	b004      	add	sp, #16
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	46c0      	nop			@ (mov r8, r8)
 800eef8:	20001fca 	.word	0x20001fca
 800eefc:	20001fc4 	.word	0x20001fc4
 800ef00:	080257a0 	.word	0x080257a0
 800ef04:	08025738 	.word	0x08025738
 800ef08:	40efffe0 	.word	0x40efffe0
 800ef0c:	42340000 	.word	0x42340000
 800ef10:	40c00000 	.word	0x40c00000

0800ef14 <ResetHIDSresults>:

void ResetHIDSresults() {
 800ef14:	b580      	push	{r7, lr}
 800ef16:	af00      	add	r7, sp, #0
  humid = 0.0;
 800ef18:	4b04      	ldr	r3, [pc, #16]	@ (800ef2c <ResetHIDSresults+0x18>)
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800ef1e:	4b04      	ldr	r3, [pc, #16]	@ (800ef30 <ResetHIDSresults+0x1c>)
 800ef20:	2200      	movs	r2, #0
 800ef22:	601a      	str	r2, [r3, #0]
}
 800ef24:	46c0      	nop			@ (mov r8, r8)
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	46c0      	nop			@ (mov r8, r8)
 800ef2c:	20001fac 	.word	0x20001fac
 800ef30:	20001fb0 	.word	0x20001fb0

0800ef34 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800ef34:	b5b0      	push	{r4, r5, r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800ef3a:	4b3c      	ldr	r3, [pc, #240]	@ (800f02c <HIDS_Upkeep+0xf8>)
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	2b06      	cmp	r3, #6
 800ef40:	d868      	bhi.n	800f014 <HIDS_Upkeep+0xe0>
 800ef42:	009a      	lsls	r2, r3, #2
 800ef44:	4b3a      	ldr	r3, [pc, #232]	@ (800f030 <HIDS_Upkeep+0xfc>)
 800ef46:	18d3      	adds	r3, r2, r3
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800ef4c:	4a39      	ldr	r2, [pc, #228]	@ (800f034 <HIDS_Upkeep+0x100>)
 800ef4e:	4b3a      	ldr	r3, [pc, #232]	@ (800f038 <HIDS_Upkeep+0x104>)
 800ef50:	0019      	movs	r1, r3
 800ef52:	2003      	movs	r0, #3
 800ef54:	f7ff fcca 	bl	800e8ec <CreateLine>
      break;
 800ef58:	e063      	b.n	800f022 <HIDS_Upkeep+0xee>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800ef5a:	f7ff ffdb 	bl	800ef14 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800ef5e:	4b33      	ldr	r3, [pc, #204]	@ (800f02c <HIDS_Upkeep+0xf8>)
 800ef60:	2201      	movs	r2, #1
 800ef62:	701a      	strb	r2, [r3, #0]
      break;
 800ef64:	e05d      	b.n	800f022 <HIDS_Upkeep+0xee>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800ef66:	f7fe fb17 	bl	800d598 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800ef6a:	f7ff fe45 	bl	800ebf8 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800ef6e:	4b2f      	ldr	r3, [pc, #188]	@ (800f02c <HIDS_Upkeep+0xf8>)
 800ef70:	2202      	movs	r2, #2
 800ef72:	701a      	strb	r2, [r3, #0]
      break;
 800ef74:	e055      	b.n	800f022 <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800ef76:	4a31      	ldr	r2, [pc, #196]	@ (800f03c <HIDS_Upkeep+0x108>)
 800ef78:	4b31      	ldr	r3, [pc, #196]	@ (800f040 <HIDS_Upkeep+0x10c>)
 800ef7a:	0011      	movs	r1, r2
 800ef7c:	0018      	movs	r0, r3
 800ef7e:	f7ff ff33 	bl	800ede8 <HIDS_GetMeasurementValues>
 800ef82:	1e03      	subs	r3, r0, #0
 800ef84:	d04a      	beq.n	800f01c <HIDS_Upkeep+0xe8>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800ef86:	4b29      	ldr	r3, [pc, #164]	@ (800f02c <HIDS_Upkeep+0xf8>)
 800ef88:	2203      	movs	r2, #3
 800ef8a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ef8c:	e046      	b.n	800f01c <HIDS_Upkeep+0xe8>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800ef8e:	4b2c      	ldr	r3, [pc, #176]	@ (800f040 <HIDS_Upkeep+0x10c>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	1c18      	adds	r0, r3, #0
 800ef94:	f7f4 fa66 	bl	8003464 <__aeabi_f2d>
 800ef98:	0004      	movs	r4, r0
 800ef9a:	000d      	movs	r5, r1
 800ef9c:	4b27      	ldr	r3, [pc, #156]	@ (800f03c <HIDS_Upkeep+0x108>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	1c18      	adds	r0, r3, #0
 800efa2:	f7f4 fa5f 	bl	8003464 <__aeabi_f2d>
 800efa6:	0002      	movs	r2, r0
 800efa8:	000b      	movs	r3, r1
 800efaa:	4826      	ldr	r0, [pc, #152]	@ (800f044 <HIDS_Upkeep+0x110>)
 800efac:	4922      	ldr	r1, [pc, #136]	@ (800f038 <HIDS_Upkeep+0x104>)
 800efae:	9202      	str	r2, [sp, #8]
 800efb0:	9303      	str	r3, [sp, #12]
 800efb2:	9400      	str	r4, [sp, #0]
 800efb4:	9501      	str	r5, [sp, #4]
 800efb6:	0002      	movs	r2, r0
 800efb8:	2003      	movs	r0, #3
 800efba:	f7ff fc97 	bl	800e8ec <CreateLine>
      setHIDS(temp, humid);
 800efbe:	4b1f      	ldr	r3, [pc, #124]	@ (800f03c <HIDS_Upkeep+0x108>)
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	4b1f      	ldr	r3, [pc, #124]	@ (800f040 <HIDS_Upkeep+0x10c>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	1c19      	adds	r1, r3, #0
 800efc8:	1c10      	adds	r0, r2, #0
 800efca:	f7f4 fbed 	bl	80037a8 <setHIDS>
      ResetMeasurementIndicator();
 800efce:	f7fe fafb 	bl	800d5c8 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 800efd2:	f000 f8cf 	bl	800f174 <HAL_GetTick>
 800efd6:	0004      	movs	r4, r0
 800efd8:	f7f7 fb36 	bl	8006648 <Check_USB_PowerOn>
 800efdc:	1e03      	subs	r3, r0, #0
 800efde:	d103      	bne.n	800efe8 <HIDS_Upkeep+0xb4>
 800efe0:	4b19      	ldr	r3, [pc, #100]	@ (800f048 <HIDS_Upkeep+0x114>)
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d001      	beq.n	800efec <HIDS_Upkeep+0xb8>
 800efe8:	4b18      	ldr	r3, [pc, #96]	@ (800f04c <HIDS_Upkeep+0x118>)
 800efea:	e001      	b.n	800eff0 <HIDS_Upkeep+0xbc>
 800efec:	23fa      	movs	r3, #250	@ 0xfa
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	191a      	adds	r2, r3, r4
 800eff2:	4b17      	ldr	r3, [pc, #92]	@ (800f050 <HIDS_Upkeep+0x11c>)
 800eff4:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800eff6:	4b0d      	ldr	r3, [pc, #52]	@ (800f02c <HIDS_Upkeep+0xf8>)
 800eff8:	2206      	movs	r2, #6
 800effa:	701a      	strb	r2, [r3, #0]
      break;
 800effc:	e011      	b.n	800f022 <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800effe:	4b14      	ldr	r3, [pc, #80]	@ (800f050 <HIDS_Upkeep+0x11c>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	0018      	movs	r0, r3
 800f004:	f7ff fc1c 	bl	800e840 <TimestampIsReached>
 800f008:	1e03      	subs	r3, r0, #0
 800f00a:	d009      	beq.n	800f020 <HIDS_Upkeep+0xec>
        HIDSState = HIDS_STATE_INIT;
 800f00c:	4b07      	ldr	r3, [pc, #28]	@ (800f02c <HIDS_Upkeep+0xf8>)
 800f00e:	2200      	movs	r2, #0
 800f010:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f012:	e005      	b.n	800f020 <HIDS_Upkeep+0xec>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800f014:	4b05      	ldr	r3, [pc, #20]	@ (800f02c <HIDS_Upkeep+0xf8>)
 800f016:	2200      	movs	r2, #0
 800f018:	701a      	strb	r2, [r3, #0]
      break;
 800f01a:	e002      	b.n	800f022 <HIDS_Upkeep+0xee>
      break;
 800f01c:	46c0      	nop			@ (mov r8, r8)
 800f01e:	e000      	b.n	800f022 <HIDS_Upkeep+0xee>
      break;
 800f020:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800f022:	4b02      	ldr	r3, [pc, #8]	@ (800f02c <HIDS_Upkeep+0xf8>)
 800f024:	781b      	ldrb	r3, [r3, #0]
}
 800f026:	0018      	movs	r0, r3
 800f028:	46bd      	mov	sp, r7
 800f02a:	bdb0      	pop	{r4, r5, r7, pc}
 800f02c:	20001fd0 	.word	0x20001fd0
 800f030:	08025d18 	.word	0x08025d18
 800f034:	080257d4 	.word	0x080257d4
 800f038:	08025808 	.word	0x08025808
 800f03c:	20001fb0 	.word	0x20001fb0
 800f040:	20001fac 	.word	0x20001fac
 800f044:	0802580c 	.word	0x0802580c
 800f048:	20001c16 	.word	0x20001c16
 800f04c:	00002710 	.word	0x00002710
 800f050:	20001fcc 	.word	0x20001fcc

0800f054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800f054:	480d      	ldr	r0, [pc, #52]	@ (800f08c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800f056:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800f058:	f7ff f848 	bl	800e0ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f05c:	480c      	ldr	r0, [pc, #48]	@ (800f090 <LoopForever+0x6>)
  ldr r1, =_edata
 800f05e:	490d      	ldr	r1, [pc, #52]	@ (800f094 <LoopForever+0xa>)
  ldr r2, =_sidata
 800f060:	4a0d      	ldr	r2, [pc, #52]	@ (800f098 <LoopForever+0xe>)
  movs r3, #0
 800f062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f064:	e002      	b.n	800f06c <LoopCopyDataInit>

0800f066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f06a:	3304      	adds	r3, #4

0800f06c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f06c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f06e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f070:	d3f9      	bcc.n	800f066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f072:	4a0a      	ldr	r2, [pc, #40]	@ (800f09c <LoopForever+0x12>)
  ldr r4, =_ebss
 800f074:	4c0a      	ldr	r4, [pc, #40]	@ (800f0a0 <LoopForever+0x16>)
  movs r3, #0
 800f076:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f078:	e001      	b.n	800f07e <LoopFillZerobss>

0800f07a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f07a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f07c:	3204      	adds	r2, #4

0800f07e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f07e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f080:	d3fb      	bcc.n	800f07a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f082:	f011 fb79 	bl	8020778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f086:	f7f8 ff95 	bl	8007fb4 <main>

0800f08a <LoopForever>:

LoopForever:
    b LoopForever
 800f08a:	e7fe      	b.n	800f08a <LoopForever>
   ldr   r0, =_estack
 800f08c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800f090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f094:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 800f098:	080266b8 	.word	0x080266b8
  ldr r2, =_sbss
 800f09c:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 800f0a0:	200033d8 	.word	0x200033d8

0800f0a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f0a4:	e7fe      	b.n	800f0a4 <ADC1_COMP_IRQHandler>
	...

0800f0a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f0ae:	1dfb      	adds	r3, r7, #7
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800f0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f0e4 <HAL_Init+0x3c>)
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f0e4 <HAL_Init+0x3c>)
 800f0ba:	2140      	movs	r1, #64	@ 0x40
 800f0bc:	430a      	orrs	r2, r1
 800f0be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f0c0:	2003      	movs	r0, #3
 800f0c2:	f000 f811 	bl	800f0e8 <HAL_InitTick>
 800f0c6:	1e03      	subs	r3, r0, #0
 800f0c8:	d003      	beq.n	800f0d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800f0ca:	1dfb      	adds	r3, r7, #7
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	701a      	strb	r2, [r3, #0]
 800f0d0:	e001      	b.n	800f0d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800f0d2:	f7fe febf 	bl	800de54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f0d6:	1dfb      	adds	r3, r7, #7
 800f0d8:	781b      	ldrb	r3, [r3, #0]
}
 800f0da:	0018      	movs	r0, r3
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	b002      	add	sp, #8
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	46c0      	nop			@ (mov r8, r8)
 800f0e4:	40022000 	.word	0x40022000

0800f0e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f0e8:	b590      	push	{r4, r7, lr}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f0f0:	4b14      	ldr	r3, [pc, #80]	@ (800f144 <HAL_InitTick+0x5c>)
 800f0f2:	681c      	ldr	r4, [r3, #0]
 800f0f4:	4b14      	ldr	r3, [pc, #80]	@ (800f148 <HAL_InitTick+0x60>)
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	0019      	movs	r1, r3
 800f0fa:	23fa      	movs	r3, #250	@ 0xfa
 800f0fc:	0098      	lsls	r0, r3, #2
 800f0fe:	f7f1 f851 	bl	80001a4 <__udivsi3>
 800f102:	0003      	movs	r3, r0
 800f104:	0019      	movs	r1, r3
 800f106:	0020      	movs	r0, r4
 800f108:	f7f1 f84c 	bl	80001a4 <__udivsi3>
 800f10c:	0003      	movs	r3, r0
 800f10e:	0018      	movs	r0, r3
 800f110:	f000 fcfd 	bl	800fb0e <HAL_SYSTICK_Config>
 800f114:	1e03      	subs	r3, r0, #0
 800f116:	d001      	beq.n	800f11c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800f118:	2301      	movs	r3, #1
 800f11a:	e00f      	b.n	800f13c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b03      	cmp	r3, #3
 800f120:	d80b      	bhi.n	800f13a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f122:	6879      	ldr	r1, [r7, #4]
 800f124:	2301      	movs	r3, #1
 800f126:	425b      	negs	r3, r3
 800f128:	2200      	movs	r2, #0
 800f12a:	0018      	movs	r0, r3
 800f12c:	f000 fcc6 	bl	800fabc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f130:	4b06      	ldr	r3, [pc, #24]	@ (800f14c <HAL_InitTick+0x64>)
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f136:	2300      	movs	r3, #0
 800f138:	e000      	b.n	800f13c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800f13a:	2301      	movs	r3, #1
}
 800f13c:	0018      	movs	r0, r3
 800f13e:	46bd      	mov	sp, r7
 800f140:	b003      	add	sp, #12
 800f142:	bd90      	pop	{r4, r7, pc}
 800f144:	200000d0 	.word	0x200000d0
 800f148:	200000e4 	.word	0x200000e4
 800f14c:	200000e0 	.word	0x200000e0

0800f150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f154:	4b05      	ldr	r3, [pc, #20]	@ (800f16c <HAL_IncTick+0x1c>)
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	001a      	movs	r2, r3
 800f15a:	4b05      	ldr	r3, [pc, #20]	@ (800f170 <HAL_IncTick+0x20>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	18d2      	adds	r2, r2, r3
 800f160:	4b03      	ldr	r3, [pc, #12]	@ (800f170 <HAL_IncTick+0x20>)
 800f162:	601a      	str	r2, [r3, #0]
}
 800f164:	46c0      	nop			@ (mov r8, r8)
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	46c0      	nop			@ (mov r8, r8)
 800f16c:	200000e4 	.word	0x200000e4
 800f170:	20001fd4 	.word	0x20001fd4

0800f174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	af00      	add	r7, sp, #0
  return uwTick;
 800f178:	4b02      	ldr	r3, [pc, #8]	@ (800f184 <HAL_GetTick+0x10>)
 800f17a:	681b      	ldr	r3, [r3, #0]
}
 800f17c:	0018      	movs	r0, r3
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	46c0      	nop			@ (mov r8, r8)
 800f184:	20001fd4 	.word	0x20001fd4

0800f188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f190:	f7ff fff0 	bl	800f174 <HAL_GetTick>
 800f194:	0003      	movs	r3, r0
 800f196:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	d005      	beq.n	800f1ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f1a2:	4b0a      	ldr	r3, [pc, #40]	@ (800f1cc <HAL_Delay+0x44>)
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	001a      	movs	r2, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	189b      	adds	r3, r3, r2
 800f1ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f1ae:	46c0      	nop			@ (mov r8, r8)
 800f1b0:	f7ff ffe0 	bl	800f174 <HAL_GetTick>
 800f1b4:	0002      	movs	r2, r0
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	68fa      	ldr	r2, [r7, #12]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d8f7      	bhi.n	800f1b0 <HAL_Delay+0x28>
  {
  }
}
 800f1c0:	46c0      	nop			@ (mov r8, r8)
 800f1c2:	46c0      	nop			@ (mov r8, r8)
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	b004      	add	sp, #16
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	46c0      	nop			@ (mov r8, r8)
 800f1cc:	200000e4 	.word	0x200000e4

0800f1d0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800f1d4:	4b04      	ldr	r3, [pc, #16]	@ (800f1e8 <HAL_SuspendTick+0x18>)
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	4b03      	ldr	r3, [pc, #12]	@ (800f1e8 <HAL_SuspendTick+0x18>)
 800f1da:	2102      	movs	r1, #2
 800f1dc:	438a      	bics	r2, r1
 800f1de:	601a      	str	r2, [r3, #0]
}
 800f1e0:	46c0      	nop			@ (mov r8, r8)
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	46c0      	nop			@ (mov r8, r8)
 800f1e8:	e000e010 	.word	0xe000e010

0800f1ec <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800f1f0:	4b04      	ldr	r3, [pc, #16]	@ (800f204 <HAL_ResumeTick+0x18>)
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	4b03      	ldr	r3, [pc, #12]	@ (800f204 <HAL_ResumeTick+0x18>)
 800f1f6:	2102      	movs	r1, #2
 800f1f8:	430a      	orrs	r2, r1
 800f1fa:	601a      	str	r2, [r3, #0]
}
 800f1fc:	46c0      	nop			@ (mov r8, r8)
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	46c0      	nop			@ (mov r8, r8)
 800f204:	e000e010 	.word	0xe000e010

0800f208 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800f20c:	4b02      	ldr	r3, [pc, #8]	@ (800f218 <HAL_GetUIDw0+0x10>)
 800f20e:	681b      	ldr	r3, [r3, #0]
}
 800f210:	0018      	movs	r0, r3
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	46c0      	nop			@ (mov r8, r8)
 800f218:	1ff80050 	.word	0x1ff80050

0800f21c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800f220:	4b02      	ldr	r3, [pc, #8]	@ (800f22c <HAL_GetUIDw1+0x10>)
 800f222:	681b      	ldr	r3, [r3, #0]
}
 800f224:	0018      	movs	r0, r3
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	46c0      	nop			@ (mov r8, r8)
 800f22c:	1ff80054 	.word	0x1ff80054

0800f230 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800f234:	4b02      	ldr	r3, [pc, #8]	@ (800f240 <HAL_GetUIDw2+0x10>)
 800f236:	681b      	ldr	r3, [r3, #0]
}
 800f238:	0018      	movs	r0, r3
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	46c0      	nop			@ (mov r8, r8)
 800f240:	1ff80064 	.word	0x1ff80064

0800f244 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	e159      	b.n	800f50a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d10a      	bne.n	800f274 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2250      	movs	r2, #80	@ 0x50
 800f268:	2100      	movs	r1, #0
 800f26a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	0018      	movs	r0, r3
 800f270:	f7f8 f882 	bl	8007378 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f278:	2210      	movs	r2, #16
 800f27a:	4013      	ands	r3, r2
 800f27c:	2b10      	cmp	r3, #16
 800f27e:	d005      	beq.n	800f28c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	2204      	movs	r2, #4
 800f288:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800f28a:	d00b      	beq.n	800f2a4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f290:	2210      	movs	r2, #16
 800f292:	431a      	orrs	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2250      	movs	r2, #80	@ 0x50
 800f29c:	2100      	movs	r1, #0
 800f29e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	e132      	b.n	800f50a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2a8:	4a9a      	ldr	r2, [pc, #616]	@ (800f514 <HAL_ADC_Init+0x2d0>)
 800f2aa:	4013      	ands	r3, r2
 800f2ac:	2202      	movs	r2, #2
 800f2ae:	431a      	orrs	r2, r3
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	2203      	movs	r2, #3
 800f2bc:	4013      	ands	r3, r2
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d108      	bne.n	800f2d4 <HAL_ADC_Init+0x90>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	4013      	ands	r3, r2
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d101      	bne.n	800f2d4 <HAL_ADC_Init+0x90>
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e000      	b.n	800f2d6 <HAL_ADC_Init+0x92>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d149      	bne.n	800f36e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	23c0      	movs	r3, #192	@ 0xc0
 800f2e0:	061b      	lsls	r3, r3, #24
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d00b      	beq.n	800f2fe <HAL_ADC_Init+0xba>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	685a      	ldr	r2, [r3, #4]
 800f2ea:	2380      	movs	r3, #128	@ 0x80
 800f2ec:	05db      	lsls	r3, r3, #23
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d005      	beq.n	800f2fe <HAL_ADC_Init+0xba>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	685a      	ldr	r2, [r3, #4]
 800f2f6:	2380      	movs	r3, #128	@ 0x80
 800f2f8:	061b      	lsls	r3, r3, #24
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d111      	bne.n	800f322 <HAL_ADC_Init+0xde>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	691a      	ldr	r2, [r3, #16]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	0092      	lsls	r2, r2, #2
 800f30a:	0892      	lsrs	r2, r2, #2
 800f30c:	611a      	str	r2, [r3, #16]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	6919      	ldr	r1, [r3, #16]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	685a      	ldr	r2, [r3, #4]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	430a      	orrs	r2, r1
 800f31e:	611a      	str	r2, [r3, #16]
 800f320:	e014      	b.n	800f34c <HAL_ADC_Init+0x108>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	691a      	ldr	r2, [r3, #16]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	0092      	lsls	r2, r2, #2
 800f32e:	0892      	lsrs	r2, r2, #2
 800f330:	611a      	str	r2, [r3, #16]
 800f332:	4b79      	ldr	r3, [pc, #484]	@ (800f518 <HAL_ADC_Init+0x2d4>)
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	4b78      	ldr	r3, [pc, #480]	@ (800f518 <HAL_ADC_Init+0x2d4>)
 800f338:	4978      	ldr	r1, [pc, #480]	@ (800f51c <HAL_ADC_Init+0x2d8>)
 800f33a:	400a      	ands	r2, r1
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	4b76      	ldr	r3, [pc, #472]	@ (800f518 <HAL_ADC_Init+0x2d4>)
 800f340:	6819      	ldr	r1, [r3, #0]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	685a      	ldr	r2, [r3, #4]
 800f346:	4b74      	ldr	r3, [pc, #464]	@ (800f518 <HAL_ADC_Init+0x2d4>)
 800f348:	430a      	orrs	r2, r1
 800f34a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68da      	ldr	r2, [r3, #12]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2118      	movs	r1, #24
 800f358:	438a      	bics	r2, r1
 800f35a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	68d9      	ldr	r1, [r3, #12]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	689a      	ldr	r2, [r3, #8]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	430a      	orrs	r2, r1
 800f36c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800f36e:	4b6a      	ldr	r3, [pc, #424]	@ (800f518 <HAL_ADC_Init+0x2d4>)
 800f370:	681a      	ldr	r2, [r3, #0]
 800f372:	4b69      	ldr	r3, [pc, #420]	@ (800f518 <HAL_ADC_Init+0x2d4>)
 800f374:	496a      	ldr	r1, [pc, #424]	@ (800f520 <HAL_ADC_Init+0x2dc>)
 800f376:	400a      	ands	r2, r1
 800f378:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800f37a:	4b67      	ldr	r3, [pc, #412]	@ (800f518 <HAL_ADC_Init+0x2d4>)
 800f37c:	6819      	ldr	r1, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f382:	065a      	lsls	r2, r3, #25
 800f384:	4b64      	ldr	r3, [pc, #400]	@ (800f518 <HAL_ADC_Init+0x2d4>)
 800f386:	430a      	orrs	r2, r1
 800f388:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	689a      	ldr	r2, [r3, #8]
 800f390:	2380      	movs	r3, #128	@ 0x80
 800f392:	055b      	lsls	r3, r3, #21
 800f394:	4013      	ands	r3, r2
 800f396:	d108      	bne.n	800f3aa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	689a      	ldr	r2, [r3, #8]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	2180      	movs	r1, #128	@ 0x80
 800f3a4:	0549      	lsls	r1, r1, #21
 800f3a6:	430a      	orrs	r2, r1
 800f3a8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	68da      	ldr	r2, [r3, #12]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	495b      	ldr	r1, [pc, #364]	@ (800f524 <HAL_ADC_Init+0x2e0>)
 800f3b6:	400a      	ands	r2, r1
 800f3b8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68d9      	ldr	r1, [r3, #12]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	691b      	ldr	r3, [r3, #16]
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	d101      	bne.n	800f3d0 <HAL_ADC_Init+0x18c>
 800f3cc:	2304      	movs	r3, #4
 800f3ce:	e000      	b.n	800f3d2 <HAL_ADC_Init+0x18e>
 800f3d0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f3d2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2020      	movs	r0, #32
 800f3d8:	5c1b      	ldrb	r3, [r3, r0]
 800f3da:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f3dc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	202c      	movs	r0, #44	@ 0x2c
 800f3e2:	5c1b      	ldrb	r3, [r3, r0]
 800f3e4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f3e6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f3ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	699b      	ldr	r3, [r3, #24]
 800f3f2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800f3f4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	69db      	ldr	r3, [r3, #28]
 800f3fa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f3fc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	430a      	orrs	r2, r1
 800f404:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f40a:	23c2      	movs	r3, #194	@ 0xc2
 800f40c:	33ff      	adds	r3, #255	@ 0xff
 800f40e:	429a      	cmp	r2, r3
 800f410:	d00b      	beq.n	800f42a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	68d9      	ldr	r1, [r3, #12]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f420:	431a      	orrs	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	430a      	orrs	r2, r1
 800f428:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2221      	movs	r2, #33	@ 0x21
 800f42e:	5c9b      	ldrb	r3, [r3, r2]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d11a      	bne.n	800f46a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2220      	movs	r2, #32
 800f438:	5c9b      	ldrb	r3, [r3, r2]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d109      	bne.n	800f452 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	68da      	ldr	r2, [r3, #12]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2180      	movs	r1, #128	@ 0x80
 800f44a:	0249      	lsls	r1, r1, #9
 800f44c:	430a      	orrs	r2, r1
 800f44e:	60da      	str	r2, [r3, #12]
 800f450:	e00b      	b.n	800f46a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f456:	2220      	movs	r2, #32
 800f458:	431a      	orrs	r2, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f462:	2201      	movs	r2, #1
 800f464:	431a      	orrs	r2, r3
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d11f      	bne.n	800f4b2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	691a      	ldr	r2, [r3, #16]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	492a      	ldr	r1, [pc, #168]	@ (800f528 <HAL_ADC_Init+0x2e4>)
 800f47e:	400a      	ands	r2, r1
 800f480:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	6919      	ldr	r1, [r3, #16]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f490:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800f496:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	430a      	orrs	r2, r1
 800f49e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	691a      	ldr	r2, [r3, #16]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2101      	movs	r1, #1
 800f4ac:	430a      	orrs	r2, r1
 800f4ae:	611a      	str	r2, [r3, #16]
 800f4b0:	e00e      	b.n	800f4d0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	691b      	ldr	r3, [r3, #16]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d107      	bne.n	800f4d0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	691a      	ldr	r2, [r3, #16]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	2101      	movs	r1, #1
 800f4cc:	438a      	bics	r2, r1
 800f4ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	695a      	ldr	r2, [r3, #20]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2107      	movs	r1, #7
 800f4dc:	438a      	bics	r2, r1
 800f4de:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	6959      	ldr	r1, [r3, #20]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	430a      	orrs	r2, r1
 800f4f0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4fc:	2203      	movs	r2, #3
 800f4fe:	4393      	bics	r3, r2
 800f500:	2201      	movs	r2, #1
 800f502:	431a      	orrs	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f508:	2300      	movs	r3, #0
}
 800f50a:	0018      	movs	r0, r3
 800f50c:	46bd      	mov	sp, r7
 800f50e:	b002      	add	sp, #8
 800f510:	bd80      	pop	{r7, pc}
 800f512:	46c0      	nop			@ (mov r8, r8)
 800f514:	fffffefd 	.word	0xfffffefd
 800f518:	40012708 	.word	0x40012708
 800f51c:	ffc3ffff 	.word	0xffc3ffff
 800f520:	fdffffff 	.word	0xfdffffff
 800f524:	fffe0219 	.word	0xfffe0219
 800f528:	fffffc03 	.word	0xfffffc03

0800f52c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f52c:	b590      	push	{r4, r7, lr}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f534:	230f      	movs	r3, #15
 800f536:	18fb      	adds	r3, r7, r3
 800f538:	2200      	movs	r2, #0
 800f53a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	2204      	movs	r2, #4
 800f544:	4013      	ands	r3, r2
 800f546:	d138      	bne.n	800f5ba <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2250      	movs	r2, #80	@ 0x50
 800f54c:	5c9b      	ldrb	r3, [r3, r2]
 800f54e:	2b01      	cmp	r3, #1
 800f550:	d101      	bne.n	800f556 <HAL_ADC_Start+0x2a>
 800f552:	2302      	movs	r3, #2
 800f554:	e038      	b.n	800f5c8 <HAL_ADC_Start+0x9c>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2250      	movs	r2, #80	@ 0x50
 800f55a:	2101      	movs	r1, #1
 800f55c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	69db      	ldr	r3, [r3, #28]
 800f562:	2b01      	cmp	r3, #1
 800f564:	d007      	beq.n	800f576 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f566:	230f      	movs	r3, #15
 800f568:	18fc      	adds	r4, r7, r3
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	0018      	movs	r0, r3
 800f56e:	f000 f95f 	bl	800f830 <ADC_Enable>
 800f572:	0003      	movs	r3, r0
 800f574:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f576:	230f      	movs	r3, #15
 800f578:	18fb      	adds	r3, r7, r3
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d120      	bne.n	800f5c2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f584:	4a12      	ldr	r2, [pc, #72]	@ (800f5d0 <HAL_ADC_Start+0xa4>)
 800f586:	4013      	ands	r3, r2
 800f588:	2280      	movs	r2, #128	@ 0x80
 800f58a:	0052      	lsls	r2, r2, #1
 800f58c:	431a      	orrs	r2, r3
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2200      	movs	r2, #0
 800f596:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2250      	movs	r2, #80	@ 0x50
 800f59c:	2100      	movs	r1, #0
 800f59e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	221c      	movs	r2, #28
 800f5a6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	689a      	ldr	r2, [r3, #8]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2104      	movs	r1, #4
 800f5b4:	430a      	orrs	r2, r1
 800f5b6:	609a      	str	r2, [r3, #8]
 800f5b8:	e003      	b.n	800f5c2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f5ba:	230f      	movs	r3, #15
 800f5bc:	18fb      	adds	r3, r7, r3
 800f5be:	2202      	movs	r2, #2
 800f5c0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f5c2:	230f      	movs	r3, #15
 800f5c4:	18fb      	adds	r3, r7, r3
 800f5c6:	781b      	ldrb	r3, [r3, #0]
}
 800f5c8:	0018      	movs	r0, r3
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	b005      	add	sp, #20
 800f5ce:	bd90      	pop	{r4, r7, pc}
 800f5d0:	fffff0fe 	.word	0xfffff0fe

0800f5d4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	695b      	ldr	r3, [r3, #20]
 800f5ea:	2b08      	cmp	r3, #8
 800f5ec:	d102      	bne.n	800f5f4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f5ee:	2308      	movs	r3, #8
 800f5f0:	60fb      	str	r3, [r7, #12]
 800f5f2:	e014      	b.n	800f61e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	4013      	ands	r3, r2
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d10b      	bne.n	800f61a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f606:	2220      	movs	r2, #32
 800f608:	431a      	orrs	r2, r3
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2250      	movs	r2, #80	@ 0x50
 800f612:	2100      	movs	r1, #0
 800f614:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f616:	2301      	movs	r3, #1
 800f618:	e072      	b.n	800f700 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f61a:	230c      	movs	r3, #12
 800f61c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f61e:	f7ff fda9 	bl	800f174 <HAL_GetTick>
 800f622:	0003      	movs	r3, r0
 800f624:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f626:	e01f      	b.n	800f668 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	3301      	adds	r3, #1
 800f62c:	d01c      	beq.n	800f668 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d007      	beq.n	800f644 <HAL_ADC_PollForConversion+0x70>
 800f634:	f7ff fd9e 	bl	800f174 <HAL_GetTick>
 800f638:	0002      	movs	r2, r0
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	1ad3      	subs	r3, r2, r3
 800f63e:	683a      	ldr	r2, [r7, #0]
 800f640:	429a      	cmp	r2, r3
 800f642:	d211      	bcs.n	800f668 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	68fa      	ldr	r2, [r7, #12]
 800f64c:	4013      	ands	r3, r2
 800f64e:	d10b      	bne.n	800f668 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f654:	2204      	movs	r2, #4
 800f656:	431a      	orrs	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2250      	movs	r2, #80	@ 0x50
 800f660:	2100      	movs	r1, #0
 800f662:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f664:	2303      	movs	r3, #3
 800f666:	e04b      	b.n	800f700 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	4013      	ands	r3, r2
 800f672:	d0d9      	beq.n	800f628 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f678:	2280      	movs	r2, #128	@ 0x80
 800f67a:	0092      	lsls	r2, r2, #2
 800f67c:	431a      	orrs	r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	68da      	ldr	r2, [r3, #12]
 800f688:	23c0      	movs	r3, #192	@ 0xc0
 800f68a:	011b      	lsls	r3, r3, #4
 800f68c:	4013      	ands	r3, r2
 800f68e:	d12e      	bne.n	800f6ee <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2220      	movs	r2, #32
 800f694:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f696:	2b00      	cmp	r3, #0
 800f698:	d129      	bne.n	800f6ee <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2208      	movs	r2, #8
 800f6a2:	4013      	ands	r3, r2
 800f6a4:	2b08      	cmp	r3, #8
 800f6a6:	d122      	bne.n	800f6ee <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	2204      	movs	r2, #4
 800f6b0:	4013      	ands	r3, r2
 800f6b2:	d110      	bne.n	800f6d6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	685a      	ldr	r2, [r3, #4]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	210c      	movs	r1, #12
 800f6c0:	438a      	bics	r2, r1
 800f6c2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6c8:	4a0f      	ldr	r2, [pc, #60]	@ (800f708 <HAL_ADC_PollForConversion+0x134>)
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	431a      	orrs	r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f6d4:	e00b      	b.n	800f6ee <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6da:	2220      	movs	r2, #32
 800f6dc:	431a      	orrs	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	431a      	orrs	r2, r3
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	699b      	ldr	r3, [r3, #24]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d103      	bne.n	800f6fe <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	220c      	movs	r2, #12
 800f6fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f6fe:	2300      	movs	r3, #0
}
 800f700:	0018      	movs	r0, r3
 800f702:	46bd      	mov	sp, r7
 800f704:	b004      	add	sp, #16
 800f706:	bd80      	pop	{r7, pc}
 800f708:	fffffefe 	.word	0xfffffefe

0800f70c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f71a:	0018      	movs	r0, r3
 800f71c:	46bd      	mov	sp, r7
 800f71e:	b002      	add	sp, #8
 800f720:	bd80      	pop	{r7, pc}
	...

0800f724 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2250      	movs	r2, #80	@ 0x50
 800f732:	5c9b      	ldrb	r3, [r3, r2]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d101      	bne.n	800f73c <HAL_ADC_ConfigChannel+0x18>
 800f738:	2302      	movs	r3, #2
 800f73a:	e06c      	b.n	800f816 <HAL_ADC_ConfigChannel+0xf2>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2250      	movs	r2, #80	@ 0x50
 800f740:	2101      	movs	r1, #1
 800f742:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	689b      	ldr	r3, [r3, #8]
 800f74a:	2204      	movs	r2, #4
 800f74c:	4013      	ands	r3, r2
 800f74e:	d00b      	beq.n	800f768 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f754:	2220      	movs	r2, #32
 800f756:	431a      	orrs	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2250      	movs	r2, #80	@ 0x50
 800f760:	2100      	movs	r1, #0
 800f762:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f764:	2301      	movs	r3, #1
 800f766:	e056      	b.n	800f816 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	4a2c      	ldr	r2, [pc, #176]	@ (800f820 <HAL_ADC_ConfigChannel+0xfc>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d028      	beq.n	800f7c4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	035b      	lsls	r3, r3, #13
 800f77e:	0b5a      	lsrs	r2, r3, #13
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	430a      	orrs	r2, r1
 800f786:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	681a      	ldr	r2, [r3, #0]
 800f78c:	2380      	movs	r3, #128	@ 0x80
 800f78e:	02db      	lsls	r3, r3, #11
 800f790:	4013      	ands	r3, r2
 800f792:	d009      	beq.n	800f7a8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f794:	4b23      	ldr	r3, [pc, #140]	@ (800f824 <HAL_ADC_ConfigChannel+0x100>)
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	4b22      	ldr	r3, [pc, #136]	@ (800f824 <HAL_ADC_ConfigChannel+0x100>)
 800f79a:	2180      	movs	r1, #128	@ 0x80
 800f79c:	0409      	lsls	r1, r1, #16
 800f79e:	430a      	orrs	r2, r1
 800f7a0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f7a2:	200a      	movs	r0, #10
 800f7a4:	f000 f8ac 	bl	800f900 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	2380      	movs	r3, #128	@ 0x80
 800f7ae:	029b      	lsls	r3, r3, #10
 800f7b0:	4013      	ands	r3, r2
 800f7b2:	d02b      	beq.n	800f80c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f7b4:	4b1b      	ldr	r3, [pc, #108]	@ (800f824 <HAL_ADC_ConfigChannel+0x100>)
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	4b1a      	ldr	r3, [pc, #104]	@ (800f824 <HAL_ADC_ConfigChannel+0x100>)
 800f7ba:	2180      	movs	r1, #128	@ 0x80
 800f7bc:	03c9      	lsls	r1, r1, #15
 800f7be:	430a      	orrs	r2, r1
 800f7c0:	601a      	str	r2, [r3, #0]
 800f7c2:	e023      	b.n	800f80c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	035b      	lsls	r3, r3, #13
 800f7d0:	0b5b      	lsrs	r3, r3, #13
 800f7d2:	43d9      	mvns	r1, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	400a      	ands	r2, r1
 800f7da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	2380      	movs	r3, #128	@ 0x80
 800f7e2:	02db      	lsls	r3, r3, #11
 800f7e4:	4013      	ands	r3, r2
 800f7e6:	d005      	beq.n	800f7f4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f7e8:	4b0e      	ldr	r3, [pc, #56]	@ (800f824 <HAL_ADC_ConfigChannel+0x100>)
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f824 <HAL_ADC_ConfigChannel+0x100>)
 800f7ee:	490e      	ldr	r1, [pc, #56]	@ (800f828 <HAL_ADC_ConfigChannel+0x104>)
 800f7f0:	400a      	ands	r2, r1
 800f7f2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	2380      	movs	r3, #128	@ 0x80
 800f7fa:	029b      	lsls	r3, r3, #10
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	d005      	beq.n	800f80c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f800:	4b08      	ldr	r3, [pc, #32]	@ (800f824 <HAL_ADC_ConfigChannel+0x100>)
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	4b07      	ldr	r3, [pc, #28]	@ (800f824 <HAL_ADC_ConfigChannel+0x100>)
 800f806:	4909      	ldr	r1, [pc, #36]	@ (800f82c <HAL_ADC_ConfigChannel+0x108>)
 800f808:	400a      	ands	r2, r1
 800f80a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2250      	movs	r2, #80	@ 0x50
 800f810:	2100      	movs	r1, #0
 800f812:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f814:	2300      	movs	r3, #0
}
 800f816:	0018      	movs	r0, r3
 800f818:	46bd      	mov	sp, r7
 800f81a:	b002      	add	sp, #8
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	46c0      	nop			@ (mov r8, r8)
 800f820:	00001001 	.word	0x00001001
 800f824:	40012708 	.word	0x40012708
 800f828:	ff7fffff 	.word	0xff7fffff
 800f82c:	ffbfffff 	.word	0xffbfffff

0800f830 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f838:	2300      	movs	r3, #0
 800f83a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	689b      	ldr	r3, [r3, #8]
 800f842:	2203      	movs	r2, #3
 800f844:	4013      	ands	r3, r2
 800f846:	2b01      	cmp	r3, #1
 800f848:	d108      	bne.n	800f85c <ADC_Enable+0x2c>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2201      	movs	r2, #1
 800f852:	4013      	ands	r3, r2
 800f854:	2b01      	cmp	r3, #1
 800f856:	d101      	bne.n	800f85c <ADC_Enable+0x2c>
 800f858:	2301      	movs	r3, #1
 800f85a:	e000      	b.n	800f85e <ADC_Enable+0x2e>
 800f85c:	2300      	movs	r3, #0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d146      	bne.n	800f8f0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	4a24      	ldr	r2, [pc, #144]	@ (800f8fc <ADC_Enable+0xcc>)
 800f86a:	4013      	ands	r3, r2
 800f86c:	d00d      	beq.n	800f88a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f872:	2210      	movs	r2, #16
 800f874:	431a      	orrs	r2, r3
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f87e:	2201      	movs	r2, #1
 800f880:	431a      	orrs	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f886:	2301      	movs	r3, #1
 800f888:	e033      	b.n	800f8f2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	689a      	ldr	r2, [r3, #8]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2101      	movs	r1, #1
 800f896:	430a      	orrs	r2, r1
 800f898:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f89a:	2001      	movs	r0, #1
 800f89c:	f000 f830 	bl	800f900 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f8a0:	f7ff fc68 	bl	800f174 <HAL_GetTick>
 800f8a4:	0003      	movs	r3, r0
 800f8a6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f8a8:	e01b      	b.n	800f8e2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f8aa:	f7ff fc63 	bl	800f174 <HAL_GetTick>
 800f8ae:	0002      	movs	r2, r0
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	1ad3      	subs	r3, r2, r3
 800f8b4:	2b0a      	cmp	r3, #10
 800f8b6:	d914      	bls.n	800f8e2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2201      	movs	r2, #1
 800f8c0:	4013      	ands	r3, r2
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	d00d      	beq.n	800f8e2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8ca:	2210      	movs	r2, #16
 800f8cc:	431a      	orrs	r2, r3
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	431a      	orrs	r2, r3
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e007      	b.n	800f8f2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	4013      	ands	r3, r2
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d1dc      	bne.n	800f8aa <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f8f0:	2300      	movs	r3, #0
}
 800f8f2:	0018      	movs	r0, r3
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	b004      	add	sp, #16
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	46c0      	nop			@ (mov r8, r8)
 800f8fc:	80000017 	.word	0x80000017

0800f900 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b084      	sub	sp, #16
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f908:	4b0b      	ldr	r3, [pc, #44]	@ (800f938 <ADC_DelayMicroSecond+0x38>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	490b      	ldr	r1, [pc, #44]	@ (800f93c <ADC_DelayMicroSecond+0x3c>)
 800f90e:	0018      	movs	r0, r3
 800f910:	f7f0 fc48 	bl	80001a4 <__udivsi3>
 800f914:	0003      	movs	r3, r0
 800f916:	001a      	movs	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4353      	muls	r3, r2
 800f91c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f91e:	e002      	b.n	800f926 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	3b01      	subs	r3, #1
 800f924:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d1f9      	bne.n	800f920 <ADC_DelayMicroSecond+0x20>
  }
}
 800f92c:	46c0      	nop			@ (mov r8, r8)
 800f92e:	46c0      	nop			@ (mov r8, r8)
 800f930:	46bd      	mov	sp, r7
 800f932:	b004      	add	sp, #16
 800f934:	bd80      	pop	{r7, pc}
 800f936:	46c0      	nop			@ (mov r8, r8)
 800f938:	200000d0 	.word	0x200000d0
 800f93c:	000f4240 	.word	0x000f4240

0800f940 <__NVIC_EnableIRQ>:
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	0002      	movs	r2, r0
 800f948:	1dfb      	adds	r3, r7, #7
 800f94a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f94c:	1dfb      	adds	r3, r7, #7
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	2b7f      	cmp	r3, #127	@ 0x7f
 800f952:	d809      	bhi.n	800f968 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f954:	1dfb      	adds	r3, r7, #7
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	001a      	movs	r2, r3
 800f95a:	231f      	movs	r3, #31
 800f95c:	401a      	ands	r2, r3
 800f95e:	4b04      	ldr	r3, [pc, #16]	@ (800f970 <__NVIC_EnableIRQ+0x30>)
 800f960:	2101      	movs	r1, #1
 800f962:	4091      	lsls	r1, r2
 800f964:	000a      	movs	r2, r1
 800f966:	601a      	str	r2, [r3, #0]
}
 800f968:	46c0      	nop			@ (mov r8, r8)
 800f96a:	46bd      	mov	sp, r7
 800f96c:	b002      	add	sp, #8
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	e000e100 	.word	0xe000e100

0800f974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f974:	b590      	push	{r4, r7, lr}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	0002      	movs	r2, r0
 800f97c:	6039      	str	r1, [r7, #0]
 800f97e:	1dfb      	adds	r3, r7, #7
 800f980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f982:	1dfb      	adds	r3, r7, #7
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	2b7f      	cmp	r3, #127	@ 0x7f
 800f988:	d828      	bhi.n	800f9dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f98a:	4a2f      	ldr	r2, [pc, #188]	@ (800fa48 <__NVIC_SetPriority+0xd4>)
 800f98c:	1dfb      	adds	r3, r7, #7
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	b25b      	sxtb	r3, r3
 800f992:	089b      	lsrs	r3, r3, #2
 800f994:	33c0      	adds	r3, #192	@ 0xc0
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	589b      	ldr	r3, [r3, r2]
 800f99a:	1dfa      	adds	r2, r7, #7
 800f99c:	7812      	ldrb	r2, [r2, #0]
 800f99e:	0011      	movs	r1, r2
 800f9a0:	2203      	movs	r2, #3
 800f9a2:	400a      	ands	r2, r1
 800f9a4:	00d2      	lsls	r2, r2, #3
 800f9a6:	21ff      	movs	r1, #255	@ 0xff
 800f9a8:	4091      	lsls	r1, r2
 800f9aa:	000a      	movs	r2, r1
 800f9ac:	43d2      	mvns	r2, r2
 800f9ae:	401a      	ands	r2, r3
 800f9b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	019b      	lsls	r3, r3, #6
 800f9b6:	22ff      	movs	r2, #255	@ 0xff
 800f9b8:	401a      	ands	r2, r3
 800f9ba:	1dfb      	adds	r3, r7, #7
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	0018      	movs	r0, r3
 800f9c0:	2303      	movs	r3, #3
 800f9c2:	4003      	ands	r3, r0
 800f9c4:	00db      	lsls	r3, r3, #3
 800f9c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f9c8:	481f      	ldr	r0, [pc, #124]	@ (800fa48 <__NVIC_SetPriority+0xd4>)
 800f9ca:	1dfb      	adds	r3, r7, #7
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	b25b      	sxtb	r3, r3
 800f9d0:	089b      	lsrs	r3, r3, #2
 800f9d2:	430a      	orrs	r2, r1
 800f9d4:	33c0      	adds	r3, #192	@ 0xc0
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f9da:	e031      	b.n	800fa40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f9dc:	4a1b      	ldr	r2, [pc, #108]	@ (800fa4c <__NVIC_SetPriority+0xd8>)
 800f9de:	1dfb      	adds	r3, r7, #7
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	0019      	movs	r1, r3
 800f9e4:	230f      	movs	r3, #15
 800f9e6:	400b      	ands	r3, r1
 800f9e8:	3b08      	subs	r3, #8
 800f9ea:	089b      	lsrs	r3, r3, #2
 800f9ec:	3306      	adds	r3, #6
 800f9ee:	009b      	lsls	r3, r3, #2
 800f9f0:	18d3      	adds	r3, r2, r3
 800f9f2:	3304      	adds	r3, #4
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	1dfa      	adds	r2, r7, #7
 800f9f8:	7812      	ldrb	r2, [r2, #0]
 800f9fa:	0011      	movs	r1, r2
 800f9fc:	2203      	movs	r2, #3
 800f9fe:	400a      	ands	r2, r1
 800fa00:	00d2      	lsls	r2, r2, #3
 800fa02:	21ff      	movs	r1, #255	@ 0xff
 800fa04:	4091      	lsls	r1, r2
 800fa06:	000a      	movs	r2, r1
 800fa08:	43d2      	mvns	r2, r2
 800fa0a:	401a      	ands	r2, r3
 800fa0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	019b      	lsls	r3, r3, #6
 800fa12:	22ff      	movs	r2, #255	@ 0xff
 800fa14:	401a      	ands	r2, r3
 800fa16:	1dfb      	adds	r3, r7, #7
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	0018      	movs	r0, r3
 800fa1c:	2303      	movs	r3, #3
 800fa1e:	4003      	ands	r3, r0
 800fa20:	00db      	lsls	r3, r3, #3
 800fa22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fa24:	4809      	ldr	r0, [pc, #36]	@ (800fa4c <__NVIC_SetPriority+0xd8>)
 800fa26:	1dfb      	adds	r3, r7, #7
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	001c      	movs	r4, r3
 800fa2c:	230f      	movs	r3, #15
 800fa2e:	4023      	ands	r3, r4
 800fa30:	3b08      	subs	r3, #8
 800fa32:	089b      	lsrs	r3, r3, #2
 800fa34:	430a      	orrs	r2, r1
 800fa36:	3306      	adds	r3, #6
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	18c3      	adds	r3, r0, r3
 800fa3c:	3304      	adds	r3, #4
 800fa3e:	601a      	str	r2, [r3, #0]
}
 800fa40:	46c0      	nop			@ (mov r8, r8)
 800fa42:	46bd      	mov	sp, r7
 800fa44:	b003      	add	sp, #12
 800fa46:	bd90      	pop	{r4, r7, pc}
 800fa48:	e000e100 	.word	0xe000e100
 800fa4c:	e000ed00 	.word	0xe000ed00

0800fa50 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800fa54:	f3bf 8f4f 	dsb	sy
}
 800fa58:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800fa5a:	4b04      	ldr	r3, [pc, #16]	@ (800fa6c <__NVIC_SystemReset+0x1c>)
 800fa5c:	4a04      	ldr	r2, [pc, #16]	@ (800fa70 <__NVIC_SystemReset+0x20>)
 800fa5e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800fa60:	f3bf 8f4f 	dsb	sy
}
 800fa64:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800fa66:	46c0      	nop			@ (mov r8, r8)
 800fa68:	e7fd      	b.n	800fa66 <__NVIC_SystemReset+0x16>
 800fa6a:	46c0      	nop			@ (mov r8, r8)
 800fa6c:	e000ed00 	.word	0xe000ed00
 800fa70:	05fa0004 	.word	0x05fa0004

0800fa74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	1e5a      	subs	r2, r3, #1
 800fa80:	2380      	movs	r3, #128	@ 0x80
 800fa82:	045b      	lsls	r3, r3, #17
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d301      	bcc.n	800fa8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e010      	b.n	800faae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fa8c:	4b0a      	ldr	r3, [pc, #40]	@ (800fab8 <SysTick_Config+0x44>)
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	3a01      	subs	r2, #1
 800fa92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fa94:	2301      	movs	r3, #1
 800fa96:	425b      	negs	r3, r3
 800fa98:	2103      	movs	r1, #3
 800fa9a:	0018      	movs	r0, r3
 800fa9c:	f7ff ff6a 	bl	800f974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800faa0:	4b05      	ldr	r3, [pc, #20]	@ (800fab8 <SysTick_Config+0x44>)
 800faa2:	2200      	movs	r2, #0
 800faa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800faa6:	4b04      	ldr	r3, [pc, #16]	@ (800fab8 <SysTick_Config+0x44>)
 800faa8:	2207      	movs	r2, #7
 800faaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800faac:	2300      	movs	r3, #0
}
 800faae:	0018      	movs	r0, r3
 800fab0:	46bd      	mov	sp, r7
 800fab2:	b002      	add	sp, #8
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	46c0      	nop			@ (mov r8, r8)
 800fab8:	e000e010 	.word	0xe000e010

0800fabc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60b9      	str	r1, [r7, #8]
 800fac4:	607a      	str	r2, [r7, #4]
 800fac6:	210f      	movs	r1, #15
 800fac8:	187b      	adds	r3, r7, r1
 800faca:	1c02      	adds	r2, r0, #0
 800facc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800face:	68ba      	ldr	r2, [r7, #8]
 800fad0:	187b      	adds	r3, r7, r1
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	b25b      	sxtb	r3, r3
 800fad6:	0011      	movs	r1, r2
 800fad8:	0018      	movs	r0, r3
 800fada:	f7ff ff4b 	bl	800f974 <__NVIC_SetPriority>
}
 800fade:	46c0      	nop			@ (mov r8, r8)
 800fae0:	46bd      	mov	sp, r7
 800fae2:	b004      	add	sp, #16
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b082      	sub	sp, #8
 800faea:	af00      	add	r7, sp, #0
 800faec:	0002      	movs	r2, r0
 800faee:	1dfb      	adds	r3, r7, #7
 800faf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800faf2:	1dfb      	adds	r3, r7, #7
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	b25b      	sxtb	r3, r3
 800faf8:	0018      	movs	r0, r3
 800fafa:	f7ff ff21 	bl	800f940 <__NVIC_EnableIRQ>
}
 800fafe:	46c0      	nop			@ (mov r8, r8)
 800fb00:	46bd      	mov	sp, r7
 800fb02:	b002      	add	sp, #8
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800fb06:	b580      	push	{r7, lr}
 800fb08:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800fb0a:	f7ff ffa1 	bl	800fa50 <__NVIC_SystemReset>

0800fb0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fb0e:	b580      	push	{r7, lr}
 800fb10:	b082      	sub	sp, #8
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	0018      	movs	r0, r3
 800fb1a:	f7ff ffab 	bl	800fa74 <SysTick_Config>
 800fb1e:	0003      	movs	r3, r0
}
 800fb20:	0018      	movs	r0, r3
 800fb22:	46bd      	mov	sp, r7
 800fb24:	b002      	add	sp, #8
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d101      	bne.n	800fb3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800fb36:	2301      	movs	r3, #1
 800fb38:	e061      	b.n	800fbfe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	4a32      	ldr	r2, [pc, #200]	@ (800fc08 <HAL_DMA_Init+0xe0>)
 800fb40:	4694      	mov	ip, r2
 800fb42:	4463      	add	r3, ip
 800fb44:	2114      	movs	r1, #20
 800fb46:	0018      	movs	r0, r3
 800fb48:	f7f0 fb2c 	bl	80001a4 <__udivsi3>
 800fb4c:	0003      	movs	r3, r0
 800fb4e:	009a      	lsls	r2, r3, #2
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a2d      	ldr	r2, [pc, #180]	@ (800fc0c <HAL_DMA_Init+0xe4>)
 800fb58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2225      	movs	r2, #37	@ 0x25
 800fb5e:	2102      	movs	r1, #2
 800fb60:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	4a28      	ldr	r2, [pc, #160]	@ (800fc10 <HAL_DMA_Init+0xe8>)
 800fb6e:	4013      	ands	r3, r2
 800fb70:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800fb7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	691b      	ldr	r3, [r3, #16]
 800fb80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fb86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	699b      	ldr	r3, [r3, #24]
 800fb8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fb92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6a1b      	ldr	r3, [r3, #32]
 800fb98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800fb9a:	68fa      	ldr	r2, [r7, #12]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	68fa      	ldr	r2, [r7, #12]
 800fba6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	689a      	ldr	r2, [r3, #8]
 800fbac:	2380      	movs	r3, #128	@ 0x80
 800fbae:	01db      	lsls	r3, r3, #7
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d018      	beq.n	800fbe6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800fbb4:	4b17      	ldr	r3, [pc, #92]	@ (800fc14 <HAL_DMA_Init+0xec>)
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbbc:	211c      	movs	r1, #28
 800fbbe:	400b      	ands	r3, r1
 800fbc0:	210f      	movs	r1, #15
 800fbc2:	4099      	lsls	r1, r3
 800fbc4:	000b      	movs	r3, r1
 800fbc6:	43d9      	mvns	r1, r3
 800fbc8:	4b12      	ldr	r3, [pc, #72]	@ (800fc14 <HAL_DMA_Init+0xec>)
 800fbca:	400a      	ands	r2, r1
 800fbcc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800fbce:	4b11      	ldr	r3, [pc, #68]	@ (800fc14 <HAL_DMA_Init+0xec>)
 800fbd0:	6819      	ldr	r1, [r3, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	685a      	ldr	r2, [r3, #4]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbda:	201c      	movs	r0, #28
 800fbdc:	4003      	ands	r3, r0
 800fbde:	409a      	lsls	r2, r3
 800fbe0:	4b0c      	ldr	r3, [pc, #48]	@ (800fc14 <HAL_DMA_Init+0xec>)
 800fbe2:	430a      	orrs	r2, r1
 800fbe4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2225      	movs	r2, #37	@ 0x25
 800fbf0:	2101      	movs	r1, #1
 800fbf2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2224      	movs	r2, #36	@ 0x24
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	0018      	movs	r0, r3
 800fc00:	46bd      	mov	sp, r7
 800fc02:	b004      	add	sp, #16
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	46c0      	nop			@ (mov r8, r8)
 800fc08:	bffdfff8 	.word	0xbffdfff8
 800fc0c:	40020000 	.word	0x40020000
 800fc10:	ffff800f 	.word	0xffff800f
 800fc14:	400200a8 	.word	0x400200a8

0800fc18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b086      	sub	sp, #24
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	607a      	str	r2, [r7, #4]
 800fc24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fc26:	2317      	movs	r3, #23
 800fc28:	18fb      	adds	r3, r7, r3
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2224      	movs	r2, #36	@ 0x24
 800fc32:	5c9b      	ldrb	r3, [r3, r2]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d101      	bne.n	800fc3c <HAL_DMA_Start_IT+0x24>
 800fc38:	2302      	movs	r3, #2
 800fc3a:	e04f      	b.n	800fcdc <HAL_DMA_Start_IT+0xc4>
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2224      	movs	r2, #36	@ 0x24
 800fc40:	2101      	movs	r1, #1
 800fc42:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2225      	movs	r2, #37	@ 0x25
 800fc48:	5c9b      	ldrb	r3, [r3, r2]
 800fc4a:	b2db      	uxtb	r3, r3
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d13a      	bne.n	800fcc6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2225      	movs	r2, #37	@ 0x25
 800fc54:	2102      	movs	r1, #2
 800fc56:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2101      	movs	r1, #1
 800fc6a:	438a      	bics	r2, r1
 800fc6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	68b9      	ldr	r1, [r7, #8]
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	f000 f976 	bl	800ff66 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d008      	beq.n	800fc94 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	210e      	movs	r1, #14
 800fc8e:	430a      	orrs	r2, r1
 800fc90:	601a      	str	r2, [r3, #0]
 800fc92:	e00f      	b.n	800fcb4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	2104      	movs	r1, #4
 800fca0:	438a      	bics	r2, r1
 800fca2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	210a      	movs	r1, #10
 800fcb0:	430a      	orrs	r2, r1
 800fcb2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2101      	movs	r1, #1
 800fcc0:	430a      	orrs	r2, r1
 800fcc2:	601a      	str	r2, [r3, #0]
 800fcc4:	e007      	b.n	800fcd6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2224      	movs	r2, #36	@ 0x24
 800fcca:	2100      	movs	r1, #0
 800fccc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800fcce:	2317      	movs	r3, #23
 800fcd0:	18fb      	adds	r3, r7, r3
 800fcd2:	2202      	movs	r2, #2
 800fcd4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800fcd6:	2317      	movs	r3, #23
 800fcd8:	18fb      	adds	r3, r7, r3
 800fcda:	781b      	ldrb	r3, [r3, #0]
}
 800fcdc:	0018      	movs	r0, r3
 800fcde:	46bd      	mov	sp, r7
 800fce0:	b006      	add	sp, #24
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b084      	sub	sp, #16
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fcec:	230f      	movs	r3, #15
 800fcee:	18fb      	adds	r3, r7, r3
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2225      	movs	r2, #37	@ 0x25
 800fcf8:	5c9b      	ldrb	r3, [r3, r2]
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d008      	beq.n	800fd12 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2204      	movs	r2, #4
 800fd04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2224      	movs	r2, #36	@ 0x24
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800fd0e:	2301      	movs	r3, #1
 800fd10:	e024      	b.n	800fd5c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	210e      	movs	r1, #14
 800fd1e:	438a      	bics	r2, r1
 800fd20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	681a      	ldr	r2, [r3, #0]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2101      	movs	r1, #1
 800fd2e:	438a      	bics	r2, r1
 800fd30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd36:	221c      	movs	r2, #28
 800fd38:	401a      	ands	r2, r3
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd3e:	2101      	movs	r1, #1
 800fd40:	4091      	lsls	r1, r2
 800fd42:	000a      	movs	r2, r1
 800fd44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2225      	movs	r2, #37	@ 0x25
 800fd4a:	2101      	movs	r1, #1
 800fd4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2224      	movs	r2, #36	@ 0x24
 800fd52:	2100      	movs	r1, #0
 800fd54:	5499      	strb	r1, [r3, r2]

    return status;
 800fd56:	230f      	movs	r3, #15
 800fd58:	18fb      	adds	r3, r7, r3
 800fd5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd5c:	0018      	movs	r0, r3
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	b004      	add	sp, #16
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd6c:	210f      	movs	r1, #15
 800fd6e:	187b      	adds	r3, r7, r1
 800fd70:	2200      	movs	r2, #0
 800fd72:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2225      	movs	r2, #37	@ 0x25
 800fd78:	5c9b      	ldrb	r3, [r3, r2]
 800fd7a:	b2db      	uxtb	r3, r3
 800fd7c:	2b02      	cmp	r3, #2
 800fd7e:	d006      	beq.n	800fd8e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2204      	movs	r2, #4
 800fd84:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800fd86:	187b      	adds	r3, r7, r1
 800fd88:	2201      	movs	r2, #1
 800fd8a:	701a      	strb	r2, [r3, #0]
 800fd8c:	e02a      	b.n	800fde4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	210e      	movs	r1, #14
 800fd9a:	438a      	bics	r2, r1
 800fd9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2101      	movs	r1, #1
 800fdaa:	438a      	bics	r2, r1
 800fdac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdb2:	221c      	movs	r2, #28
 800fdb4:	401a      	ands	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdba:	2101      	movs	r1, #1
 800fdbc:	4091      	lsls	r1, r2
 800fdbe:	000a      	movs	r2, r1
 800fdc0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2225      	movs	r2, #37	@ 0x25
 800fdc6:	2101      	movs	r1, #1
 800fdc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2224      	movs	r2, #36	@ 0x24
 800fdce:	2100      	movs	r1, #0
 800fdd0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d004      	beq.n	800fde4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	0010      	movs	r0, r2
 800fde2:	4798      	blx	r3
    }
  }
  return status;
 800fde4:	230f      	movs	r3, #15
 800fde6:	18fb      	adds	r3, r7, r3
 800fde8:	781b      	ldrb	r3, [r3, #0]
}
 800fdea:	0018      	movs	r0, r3
 800fdec:	46bd      	mov	sp, r7
 800fdee:	b004      	add	sp, #16
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe0e:	221c      	movs	r2, #28
 800fe10:	4013      	ands	r3, r2
 800fe12:	2204      	movs	r2, #4
 800fe14:	409a      	lsls	r2, r3
 800fe16:	0013      	movs	r3, r2
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	4013      	ands	r3, r2
 800fe1c:	d026      	beq.n	800fe6c <HAL_DMA_IRQHandler+0x7a>
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	2204      	movs	r2, #4
 800fe22:	4013      	ands	r3, r2
 800fe24:	d022      	beq.n	800fe6c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2220      	movs	r2, #32
 800fe2e:	4013      	ands	r3, r2
 800fe30:	d107      	bne.n	800fe42 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	2104      	movs	r1, #4
 800fe3e:	438a      	bics	r2, r1
 800fe40:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe46:	221c      	movs	r2, #28
 800fe48:	401a      	ands	r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe4e:	2104      	movs	r1, #4
 800fe50:	4091      	lsls	r1, r2
 800fe52:	000a      	movs	r2, r1
 800fe54:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d100      	bne.n	800fe60 <HAL_DMA_IRQHandler+0x6e>
 800fe5e:	e071      	b.n	800ff44 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	0010      	movs	r0, r2
 800fe68:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800fe6a:	e06b      	b.n	800ff44 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe70:	221c      	movs	r2, #28
 800fe72:	4013      	ands	r3, r2
 800fe74:	2202      	movs	r2, #2
 800fe76:	409a      	lsls	r2, r3
 800fe78:	0013      	movs	r3, r2
 800fe7a:	68fa      	ldr	r2, [r7, #12]
 800fe7c:	4013      	ands	r3, r2
 800fe7e:	d02d      	beq.n	800fedc <HAL_DMA_IRQHandler+0xea>
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	2202      	movs	r2, #2
 800fe84:	4013      	ands	r3, r2
 800fe86:	d029      	beq.n	800fedc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2220      	movs	r2, #32
 800fe90:	4013      	ands	r3, r2
 800fe92:	d10b      	bne.n	800feac <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	210a      	movs	r1, #10
 800fea0:	438a      	bics	r2, r1
 800fea2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2225      	movs	r2, #37	@ 0x25
 800fea8:	2101      	movs	r1, #1
 800feaa:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800feb0:	221c      	movs	r2, #28
 800feb2:	401a      	ands	r2, r3
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feb8:	2102      	movs	r1, #2
 800feba:	4091      	lsls	r1, r2
 800febc:	000a      	movs	r2, r1
 800febe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2224      	movs	r2, #36	@ 0x24
 800fec4:	2100      	movs	r1, #0
 800fec6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d039      	beq.n	800ff44 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	0010      	movs	r0, r2
 800fed8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800feda:	e033      	b.n	800ff44 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fee0:	221c      	movs	r2, #28
 800fee2:	4013      	ands	r3, r2
 800fee4:	2208      	movs	r2, #8
 800fee6:	409a      	lsls	r2, r3
 800fee8:	0013      	movs	r3, r2
 800feea:	68fa      	ldr	r2, [r7, #12]
 800feec:	4013      	ands	r3, r2
 800feee:	d02a      	beq.n	800ff46 <HAL_DMA_IRQHandler+0x154>
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	2208      	movs	r2, #8
 800fef4:	4013      	ands	r3, r2
 800fef6:	d026      	beq.n	800ff46 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	210e      	movs	r1, #14
 800ff04:	438a      	bics	r2, r1
 800ff06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff0c:	221c      	movs	r2, #28
 800ff0e:	401a      	ands	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff14:	2101      	movs	r1, #1
 800ff16:	4091      	lsls	r1, r2
 800ff18:	000a      	movs	r2, r1
 800ff1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2201      	movs	r2, #1
 800ff20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2225      	movs	r2, #37	@ 0x25
 800ff26:	2101      	movs	r1, #1
 800ff28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2224      	movs	r2, #36	@ 0x24
 800ff2e:	2100      	movs	r1, #0
 800ff30:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d005      	beq.n	800ff46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	0010      	movs	r0, r2
 800ff42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ff44:	46c0      	nop			@ (mov r8, r8)
 800ff46:	46c0      	nop			@ (mov r8, r8)
}
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	b004      	add	sp, #16
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	b082      	sub	sp, #8
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2225      	movs	r2, #37	@ 0x25
 800ff5a:	5c9b      	ldrb	r3, [r3, r2]
 800ff5c:	b2db      	uxtb	r3, r3
}
 800ff5e:	0018      	movs	r0, r3
 800ff60:	46bd      	mov	sp, r7
 800ff62:	b002      	add	sp, #8
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b084      	sub	sp, #16
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	60f8      	str	r0, [r7, #12]
 800ff6e:	60b9      	str	r1, [r7, #8]
 800ff70:	607a      	str	r2, [r7, #4]
 800ff72:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff78:	221c      	movs	r2, #28
 800ff7a:	401a      	ands	r2, r3
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff80:	2101      	movs	r1, #1
 800ff82:	4091      	lsls	r1, r2
 800ff84:	000a      	movs	r2, r1
 800ff86:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	683a      	ldr	r2, [r7, #0]
 800ff8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	689b      	ldr	r3, [r3, #8]
 800ff94:	2b10      	cmp	r3, #16
 800ff96:	d108      	bne.n	800ffaa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	68ba      	ldr	r2, [r7, #8]
 800ffa6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ffa8:	e007      	b.n	800ffba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	68ba      	ldr	r2, [r7, #8]
 800ffb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	60da      	str	r2, [r3, #12]
}
 800ffba:	46c0      	nop			@ (mov r8, r8)
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	b004      	add	sp, #16
 800ffc0:	bd80      	pop	{r7, pc}
	...

0800ffc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b084      	sub	sp, #16
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ffcc:	f7ff f8d2 	bl	800f174 <HAL_GetTick>
 800ffd0:	0003      	movs	r3, r0
 800ffd2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ffd4:	e00f      	b.n	800fff6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	3301      	adds	r3, #1
 800ffda:	d00c      	beq.n	800fff6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d007      	beq.n	800fff2 <FLASH_WaitForLastOperation+0x2e>
 800ffe2:	f7ff f8c7 	bl	800f174 <HAL_GetTick>
 800ffe6:	0002      	movs	r2, r0
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d201      	bcs.n	800fff6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800fff2:	2303      	movs	r3, #3
 800fff4:	e052      	b.n	801009c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fff6:	4b2b      	ldr	r3, [pc, #172]	@ (80100a4 <FLASH_WaitForLastOperation+0xe0>)
 800fff8:	699b      	ldr	r3, [r3, #24]
 800fffa:	2201      	movs	r2, #1
 800fffc:	4013      	ands	r3, r2
 800fffe:	2b01      	cmp	r3, #1
 8010000:	d0e9      	beq.n	800ffd6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010002:	4b28      	ldr	r3, [pc, #160]	@ (80100a4 <FLASH_WaitForLastOperation+0xe0>)
 8010004:	699b      	ldr	r3, [r3, #24]
 8010006:	2202      	movs	r2, #2
 8010008:	4013      	ands	r3, r2
 801000a:	2b02      	cmp	r3, #2
 801000c:	d102      	bne.n	8010014 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801000e:	4b25      	ldr	r3, [pc, #148]	@ (80100a4 <FLASH_WaitForLastOperation+0xe0>)
 8010010:	2202      	movs	r2, #2
 8010012:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8010014:	4b23      	ldr	r3, [pc, #140]	@ (80100a4 <FLASH_WaitForLastOperation+0xe0>)
 8010016:	699a      	ldr	r2, [r3, #24]
 8010018:	2380      	movs	r3, #128	@ 0x80
 801001a:	005b      	lsls	r3, r3, #1
 801001c:	401a      	ands	r2, r3
 801001e:	2380      	movs	r3, #128	@ 0x80
 8010020:	005b      	lsls	r3, r3, #1
 8010022:	429a      	cmp	r2, r3
 8010024:	d035      	beq.n	8010092 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8010026:	4b1f      	ldr	r3, [pc, #124]	@ (80100a4 <FLASH_WaitForLastOperation+0xe0>)
 8010028:	699a      	ldr	r2, [r3, #24]
 801002a:	2380      	movs	r3, #128	@ 0x80
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8010030:	2380      	movs	r3, #128	@ 0x80
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	429a      	cmp	r2, r3
 8010036:	d02c      	beq.n	8010092 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8010038:	4b1a      	ldr	r3, [pc, #104]	@ (80100a4 <FLASH_WaitForLastOperation+0xe0>)
 801003a:	699a      	ldr	r2, [r3, #24]
 801003c:	2380      	movs	r3, #128	@ 0x80
 801003e:	00db      	lsls	r3, r3, #3
 8010040:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8010042:	2380      	movs	r3, #128	@ 0x80
 8010044:	00db      	lsls	r3, r3, #3
 8010046:	429a      	cmp	r2, r3
 8010048:	d023      	beq.n	8010092 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801004a:	4b16      	ldr	r3, [pc, #88]	@ (80100a4 <FLASH_WaitForLastOperation+0xe0>)
 801004c:	699a      	ldr	r2, [r3, #24]
 801004e:	2380      	movs	r3, #128	@ 0x80
 8010050:	011b      	lsls	r3, r3, #4
 8010052:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8010054:	2380      	movs	r3, #128	@ 0x80
 8010056:	011b      	lsls	r3, r3, #4
 8010058:	429a      	cmp	r2, r3
 801005a:	d01a      	beq.n	8010092 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 801005c:	4b11      	ldr	r3, [pc, #68]	@ (80100a4 <FLASH_WaitForLastOperation+0xe0>)
 801005e:	699a      	ldr	r2, [r3, #24]
 8010060:	2380      	movs	r3, #128	@ 0x80
 8010062:	019b      	lsls	r3, r3, #6
 8010064:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8010066:	2380      	movs	r3, #128	@ 0x80
 8010068:	019b      	lsls	r3, r3, #6
 801006a:	429a      	cmp	r2, r3
 801006c:	d011      	beq.n	8010092 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801006e:	4b0d      	ldr	r3, [pc, #52]	@ (80100a4 <FLASH_WaitForLastOperation+0xe0>)
 8010070:	699a      	ldr	r2, [r3, #24]
 8010072:	2380      	movs	r3, #128	@ 0x80
 8010074:	029b      	lsls	r3, r3, #10
 8010076:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8010078:	2380      	movs	r3, #128	@ 0x80
 801007a:	029b      	lsls	r3, r3, #10
 801007c:	429a      	cmp	r2, r3
 801007e:	d008      	beq.n	8010092 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8010080:	4b08      	ldr	r3, [pc, #32]	@ (80100a4 <FLASH_WaitForLastOperation+0xe0>)
 8010082:	699a      	ldr	r2, [r3, #24]
 8010084:	2380      	movs	r3, #128	@ 0x80
 8010086:	025b      	lsls	r3, r3, #9
 8010088:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801008a:	2380      	movs	r3, #128	@ 0x80
 801008c:	025b      	lsls	r3, r3, #9
 801008e:	429a      	cmp	r2, r3
 8010090:	d103      	bne.n	801009a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8010092:	f000 f809 	bl	80100a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010096:	2301      	movs	r3, #1
 8010098:	e000      	b.n	801009c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 801009a:	2300      	movs	r3, #0
}
 801009c:	0018      	movs	r0, r3
 801009e:	46bd      	mov	sp, r7
 80100a0:	b004      	add	sp, #16
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	40022000 	.word	0x40022000

080100a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80100b2:	4b49      	ldr	r3, [pc, #292]	@ (80101d8 <FLASH_SetErrorCode+0x130>)
 80100b4:	699a      	ldr	r2, [r3, #24]
 80100b6:	2380      	movs	r3, #128	@ 0x80
 80100b8:	005b      	lsls	r3, r3, #1
 80100ba:	401a      	ands	r2, r3
 80100bc:	2380      	movs	r3, #128	@ 0x80
 80100be:	005b      	lsls	r3, r3, #1
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d10a      	bne.n	80100da <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80100c4:	4b45      	ldr	r3, [pc, #276]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 80100c6:	695b      	ldr	r3, [r3, #20]
 80100c8:	2202      	movs	r2, #2
 80100ca:	431a      	orrs	r2, r3
 80100cc:	4b43      	ldr	r3, [pc, #268]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 80100ce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2280      	movs	r2, #128	@ 0x80
 80100d4:	0052      	lsls	r2, r2, #1
 80100d6:	4313      	orrs	r3, r2
 80100d8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80100da:	4b3f      	ldr	r3, [pc, #252]	@ (80101d8 <FLASH_SetErrorCode+0x130>)
 80100dc:	699a      	ldr	r2, [r3, #24]
 80100de:	2380      	movs	r3, #128	@ 0x80
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	401a      	ands	r2, r3
 80100e4:	2380      	movs	r3, #128	@ 0x80
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d10a      	bne.n	8010102 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80100ec:	4b3b      	ldr	r3, [pc, #236]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 80100ee:	695b      	ldr	r3, [r3, #20]
 80100f0:	2201      	movs	r2, #1
 80100f2:	431a      	orrs	r2, r3
 80100f4:	4b39      	ldr	r3, [pc, #228]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 80100f6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2280      	movs	r2, #128	@ 0x80
 80100fc:	0092      	lsls	r2, r2, #2
 80100fe:	4313      	orrs	r3, r2
 8010100:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8010102:	4b35      	ldr	r3, [pc, #212]	@ (80101d8 <FLASH_SetErrorCode+0x130>)
 8010104:	699a      	ldr	r2, [r3, #24]
 8010106:	2380      	movs	r3, #128	@ 0x80
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	401a      	ands	r2, r3
 801010c:	2380      	movs	r3, #128	@ 0x80
 801010e:	00db      	lsls	r3, r3, #3
 8010110:	429a      	cmp	r2, r3
 8010112:	d10a      	bne.n	801012a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8010114:	4b31      	ldr	r3, [pc, #196]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 8010116:	695b      	ldr	r3, [r3, #20]
 8010118:	2208      	movs	r2, #8
 801011a:	431a      	orrs	r2, r3
 801011c:	4b2f      	ldr	r3, [pc, #188]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 801011e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2280      	movs	r2, #128	@ 0x80
 8010124:	00d2      	lsls	r2, r2, #3
 8010126:	4313      	orrs	r3, r2
 8010128:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 801012a:	4b2b      	ldr	r3, [pc, #172]	@ (80101d8 <FLASH_SetErrorCode+0x130>)
 801012c:	699a      	ldr	r2, [r3, #24]
 801012e:	2380      	movs	r3, #128	@ 0x80
 8010130:	011b      	lsls	r3, r3, #4
 8010132:	401a      	ands	r2, r3
 8010134:	2380      	movs	r3, #128	@ 0x80
 8010136:	011b      	lsls	r3, r3, #4
 8010138:	429a      	cmp	r2, r3
 801013a:	d10a      	bne.n	8010152 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 801013c:	4b27      	ldr	r3, [pc, #156]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 801013e:	695b      	ldr	r3, [r3, #20]
 8010140:	2204      	movs	r2, #4
 8010142:	431a      	orrs	r2, r3
 8010144:	4b25      	ldr	r3, [pc, #148]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 8010146:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2280      	movs	r2, #128	@ 0x80
 801014c:	0112      	lsls	r2, r2, #4
 801014e:	4313      	orrs	r3, r2
 8010150:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8010152:	4b21      	ldr	r3, [pc, #132]	@ (80101d8 <FLASH_SetErrorCode+0x130>)
 8010154:	699a      	ldr	r2, [r3, #24]
 8010156:	2380      	movs	r3, #128	@ 0x80
 8010158:	019b      	lsls	r3, r3, #6
 801015a:	401a      	ands	r2, r3
 801015c:	2380      	movs	r3, #128	@ 0x80
 801015e:	019b      	lsls	r3, r3, #6
 8010160:	429a      	cmp	r2, r3
 8010162:	d10a      	bne.n	801017a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8010164:	4b1d      	ldr	r3, [pc, #116]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 8010166:	695b      	ldr	r3, [r3, #20]
 8010168:	2210      	movs	r2, #16
 801016a:	431a      	orrs	r2, r3
 801016c:	4b1b      	ldr	r3, [pc, #108]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 801016e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2280      	movs	r2, #128	@ 0x80
 8010174:	0192      	lsls	r2, r2, #6
 8010176:	4313      	orrs	r3, r2
 8010178:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 801017a:	4b17      	ldr	r3, [pc, #92]	@ (80101d8 <FLASH_SetErrorCode+0x130>)
 801017c:	699a      	ldr	r2, [r3, #24]
 801017e:	2380      	movs	r3, #128	@ 0x80
 8010180:	029b      	lsls	r3, r3, #10
 8010182:	401a      	ands	r2, r3
 8010184:	2380      	movs	r3, #128	@ 0x80
 8010186:	029b      	lsls	r3, r3, #10
 8010188:	429a      	cmp	r2, r3
 801018a:	d109      	bne.n	80101a0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 801018c:	4b13      	ldr	r3, [pc, #76]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 801018e:	695b      	ldr	r3, [r3, #20]
 8010190:	2220      	movs	r2, #32
 8010192:	431a      	orrs	r2, r3
 8010194:	4b11      	ldr	r3, [pc, #68]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 8010196:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2220      	movs	r2, #32
 801019c:	4313      	orrs	r3, r2
 801019e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80101a0:	4b0d      	ldr	r3, [pc, #52]	@ (80101d8 <FLASH_SetErrorCode+0x130>)
 80101a2:	699a      	ldr	r2, [r3, #24]
 80101a4:	2380      	movs	r3, #128	@ 0x80
 80101a6:	025b      	lsls	r3, r3, #9
 80101a8:	401a      	ands	r2, r3
 80101aa:	2380      	movs	r3, #128	@ 0x80
 80101ac:	025b      	lsls	r3, r3, #9
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d10a      	bne.n	80101c8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80101b2:	4b0a      	ldr	r3, [pc, #40]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 80101b4:	695b      	ldr	r3, [r3, #20]
 80101b6:	2240      	movs	r2, #64	@ 0x40
 80101b8:	431a      	orrs	r2, r3
 80101ba:	4b08      	ldr	r3, [pc, #32]	@ (80101dc <FLASH_SetErrorCode+0x134>)
 80101bc:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2280      	movs	r2, #128	@ 0x80
 80101c2:	0252      	lsls	r2, r2, #9
 80101c4:	4313      	orrs	r3, r2
 80101c6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80101c8:	4b03      	ldr	r3, [pc, #12]	@ (80101d8 <FLASH_SetErrorCode+0x130>)
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	619a      	str	r2, [r3, #24]
}  
 80101ce:	46c0      	nop			@ (mov r8, r8)
 80101d0:	46bd      	mov	sp, r7
 80101d2:	b002      	add	sp, #8
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	46c0      	nop			@ (mov r8, r8)
 80101d8:	40022000 	.word	0x40022000
 80101dc:	20001fd8 	.word	0x20001fd8

080101e0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80101e6:	4b12      	ldr	r3, [pc, #72]	@ (8010230 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	2201      	movs	r2, #1
 80101ec:	4013      	ands	r3, r2
 80101ee:	d019      	beq.n	8010224 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101f0:	f3ef 8310 	mrs	r3, PRIMASK
 80101f4:	607b      	str	r3, [r7, #4]
  return(result);
 80101f6:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80101f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80101fa:	b672      	cpsid	i
}
 80101fc:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80101fe:	4b0c      	ldr	r3, [pc, #48]	@ (8010230 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8010200:	4a0c      	ldr	r2, [pc, #48]	@ (8010234 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8010202:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8010204:	4b0a      	ldr	r3, [pc, #40]	@ (8010230 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8010206:	4a0c      	ldr	r2, [pc, #48]	@ (8010238 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8010208:	60da      	str	r2, [r3, #12]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	f383 8810 	msr	PRIMASK, r3
}
 8010214:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8010216:	4b06      	ldr	r3, [pc, #24]	@ (8010230 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	2201      	movs	r2, #1
 801021c:	4013      	ands	r3, r2
 801021e:	d001      	beq.n	8010224 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8010220:	2301      	movs	r3, #1
 8010222:	e000      	b.n	8010226 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8010224:	2300      	movs	r3, #0
}
 8010226:	0018      	movs	r0, r3
 8010228:	46bd      	mov	sp, r7
 801022a:	b004      	add	sp, #16
 801022c:	bd80      	pop	{r7, pc}
 801022e:	46c0      	nop			@ (mov r8, r8)
 8010230:	40022000 	.word	0x40022000
 8010234:	89abcdef 	.word	0x89abcdef
 8010238:	02030405 	.word	0x02030405

0801023c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8010240:	4b04      	ldr	r3, [pc, #16]	@ (8010254 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8010242:	685a      	ldr	r2, [r3, #4]
 8010244:	4b03      	ldr	r3, [pc, #12]	@ (8010254 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8010246:	2101      	movs	r1, #1
 8010248:	430a      	orrs	r2, r1
 801024a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 801024c:	2300      	movs	r3, #0
}
 801024e:	0018      	movs	r0, r3
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	40022000 	.word	0x40022000

08010258 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8010258:	b5b0      	push	{r4, r5, r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010260:	250f      	movs	r5, #15
 8010262:	197b      	adds	r3, r7, r5
 8010264:	2200      	movs	r2, #0
 8010266:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010268:	197c      	adds	r4, r7, r5
 801026a:	4b0f      	ldr	r3, [pc, #60]	@ (80102a8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 801026c:	0018      	movs	r0, r3
 801026e:	f7ff fea9 	bl	800ffc4 <FLASH_WaitForLastOperation>
 8010272:	0003      	movs	r3, r0
 8010274:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8010276:	0029      	movs	r1, r5
 8010278:	187b      	adds	r3, r7, r1
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d10c      	bne.n	801029a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010280:	4b0a      	ldr	r3, [pc, #40]	@ (80102ac <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8010282:	2200      	movs	r2, #0
 8010284:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801028c:	187c      	adds	r4, r7, r1
 801028e:	4b06      	ldr	r3, [pc, #24]	@ (80102a8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8010290:	0018      	movs	r0, r3
 8010292:	f7ff fe97 	bl	800ffc4 <FLASH_WaitForLastOperation>
 8010296:	0003      	movs	r3, r0
 8010298:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 801029a:	230f      	movs	r3, #15
 801029c:	18fb      	adds	r3, r7, r3
 801029e:	781b      	ldrb	r3, [r3, #0]
}  
 80102a0:	0018      	movs	r0, r3
 80102a2:	46bd      	mov	sp, r7
 80102a4:	b004      	add	sp, #16
 80102a6:	bdb0      	pop	{r4, r5, r7, pc}
 80102a8:	0000c350 	.word	0x0000c350
 80102ac:	20001fd8 	.word	0x20001fd8

080102b0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80102b0:	b5b0      	push	{r4, r5, r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80102bc:	2317      	movs	r3, #23
 80102be:	18fb      	adds	r3, r7, r3
 80102c0:	2201      	movs	r2, #1
 80102c2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80102c4:	4b24      	ldr	r3, [pc, #144]	@ (8010358 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80102c6:	7c1b      	ldrb	r3, [r3, #16]
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d101      	bne.n	80102d0 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80102cc:	2302      	movs	r3, #2
 80102ce:	e03e      	b.n	801034e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80102d0:	4b21      	ldr	r3, [pc, #132]	@ (8010358 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80102d2:	2201      	movs	r2, #1
 80102d4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80102d6:	2517      	movs	r5, #23
 80102d8:	197c      	adds	r4, r7, r5
 80102da:	4b20      	ldr	r3, [pc, #128]	@ (801035c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80102dc:	0018      	movs	r0, r3
 80102de:	f7ff fe71 	bl	800ffc4 <FLASH_WaitForLastOperation>
 80102e2:	0003      	movs	r3, r0
 80102e4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80102e6:	197b      	adds	r3, r7, r5
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d129      	bne.n	8010342 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80102ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010358 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2b02      	cmp	r3, #2
 80102f8:	d103      	bne.n	8010302 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	601a      	str	r2, [r3, #0]
 8010300:	e013      	b.n	801032a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2b01      	cmp	r3, #1
 8010306:	d104      	bne.n	8010312 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	b292      	uxth	r2, r2
 801030e:	801a      	strh	r2, [r3, #0]
 8010310:	e00b      	b.n	801032a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d104      	bne.n	8010322 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	687a      	ldr	r2, [r7, #4]
 801031c:	b2d2      	uxtb	r2, r2
 801031e:	701a      	strb	r2, [r3, #0]
 8010320:	e003      	b.n	801032a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8010322:	2317      	movs	r3, #23
 8010324:	18fb      	adds	r3, r7, r3
 8010326:	2201      	movs	r2, #1
 8010328:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 801032a:	2217      	movs	r2, #23
 801032c:	18bb      	adds	r3, r7, r2
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d106      	bne.n	8010342 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010334:	18bc      	adds	r4, r7, r2
 8010336:	4b09      	ldr	r3, [pc, #36]	@ (801035c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8010338:	0018      	movs	r0, r3
 801033a:	f7ff fe43 	bl	800ffc4 <FLASH_WaitForLastOperation>
 801033e:	0003      	movs	r3, r0
 8010340:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010342:	4b05      	ldr	r3, [pc, #20]	@ (8010358 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8010344:	2200      	movs	r2, #0
 8010346:	741a      	strb	r2, [r3, #16]

  return status;
 8010348:	2317      	movs	r3, #23
 801034a:	18fb      	adds	r3, r7, r3
 801034c:	781b      	ldrb	r3, [r3, #0]
}
 801034e:	0018      	movs	r0, r3
 8010350:	46bd      	mov	sp, r7
 8010352:	b006      	add	sp, #24
 8010354:	bdb0      	pop	{r4, r5, r7, pc}
 8010356:	46c0      	nop			@ (mov r8, r8)
 8010358:	20001fd8 	.word	0x20001fd8
 801035c:	0000c350 	.word	0x0000c350

08010360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b086      	sub	sp, #24
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801036a:	2300      	movs	r3, #0
 801036c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801036e:	2300      	movs	r3, #0
 8010370:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8010372:	2300      	movs	r3, #0
 8010374:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8010376:	e155      	b.n	8010624 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2101      	movs	r1, #1
 801037e:	697a      	ldr	r2, [r7, #20]
 8010380:	4091      	lsls	r1, r2
 8010382:	000a      	movs	r2, r1
 8010384:	4013      	ands	r3, r2
 8010386:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d100      	bne.n	8010390 <HAL_GPIO_Init+0x30>
 801038e:	e146      	b.n	801061e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	2203      	movs	r2, #3
 8010396:	4013      	ands	r3, r2
 8010398:	2b01      	cmp	r3, #1
 801039a:	d005      	beq.n	80103a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	2203      	movs	r2, #3
 80103a2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80103a4:	2b02      	cmp	r3, #2
 80103a6:	d130      	bne.n	801040a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	689b      	ldr	r3, [r3, #8]
 80103ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	005b      	lsls	r3, r3, #1
 80103b2:	2203      	movs	r2, #3
 80103b4:	409a      	lsls	r2, r3
 80103b6:	0013      	movs	r3, r2
 80103b8:	43da      	mvns	r2, r3
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	4013      	ands	r3, r2
 80103be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	68da      	ldr	r2, [r3, #12]
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	005b      	lsls	r3, r3, #1
 80103c8:	409a      	lsls	r2, r3
 80103ca:	0013      	movs	r3, r2
 80103cc:	693a      	ldr	r2, [r7, #16]
 80103ce:	4313      	orrs	r3, r2
 80103d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	693a      	ldr	r2, [r7, #16]
 80103d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80103de:	2201      	movs	r2, #1
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	409a      	lsls	r2, r3
 80103e4:	0013      	movs	r3, r2
 80103e6:	43da      	mvns	r2, r3
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	4013      	ands	r3, r2
 80103ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	091b      	lsrs	r3, r3, #4
 80103f4:	2201      	movs	r2, #1
 80103f6:	401a      	ands	r2, r3
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	409a      	lsls	r2, r3
 80103fc:	0013      	movs	r3, r2
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	4313      	orrs	r3, r2
 8010402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	693a      	ldr	r2, [r7, #16]
 8010408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	2203      	movs	r2, #3
 8010410:	4013      	ands	r3, r2
 8010412:	2b03      	cmp	r3, #3
 8010414:	d017      	beq.n	8010446 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	68db      	ldr	r3, [r3, #12]
 801041a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	005b      	lsls	r3, r3, #1
 8010420:	2203      	movs	r2, #3
 8010422:	409a      	lsls	r2, r3
 8010424:	0013      	movs	r3, r2
 8010426:	43da      	mvns	r2, r3
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	4013      	ands	r3, r2
 801042c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	689a      	ldr	r2, [r3, #8]
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	409a      	lsls	r2, r3
 8010438:	0013      	movs	r3, r2
 801043a:	693a      	ldr	r2, [r7, #16]
 801043c:	4313      	orrs	r3, r2
 801043e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	693a      	ldr	r2, [r7, #16]
 8010444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	2203      	movs	r2, #3
 801044c:	4013      	ands	r3, r2
 801044e:	2b02      	cmp	r3, #2
 8010450:	d123      	bne.n	801049a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	08da      	lsrs	r2, r3, #3
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	3208      	adds	r2, #8
 801045a:	0092      	lsls	r2, r2, #2
 801045c:	58d3      	ldr	r3, [r2, r3]
 801045e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	2207      	movs	r2, #7
 8010464:	4013      	ands	r3, r2
 8010466:	009b      	lsls	r3, r3, #2
 8010468:	220f      	movs	r2, #15
 801046a:	409a      	lsls	r2, r3
 801046c:	0013      	movs	r3, r2
 801046e:	43da      	mvns	r2, r3
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	4013      	ands	r3, r2
 8010474:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	691a      	ldr	r2, [r3, #16]
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	2107      	movs	r1, #7
 801047e:	400b      	ands	r3, r1
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	409a      	lsls	r2, r3
 8010484:	0013      	movs	r3, r2
 8010486:	693a      	ldr	r2, [r7, #16]
 8010488:	4313      	orrs	r3, r2
 801048a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	08da      	lsrs	r2, r3, #3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	3208      	adds	r2, #8
 8010494:	0092      	lsls	r2, r2, #2
 8010496:	6939      	ldr	r1, [r7, #16]
 8010498:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	005b      	lsls	r3, r3, #1
 80104a4:	2203      	movs	r2, #3
 80104a6:	409a      	lsls	r2, r3
 80104a8:	0013      	movs	r3, r2
 80104aa:	43da      	mvns	r2, r3
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	4013      	ands	r3, r2
 80104b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	2203      	movs	r2, #3
 80104b8:	401a      	ands	r2, r3
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	409a      	lsls	r2, r3
 80104c0:	0013      	movs	r3, r2
 80104c2:	693a      	ldr	r2, [r7, #16]
 80104c4:	4313      	orrs	r3, r2
 80104c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	693a      	ldr	r2, [r7, #16]
 80104cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	685a      	ldr	r2, [r3, #4]
 80104d2:	23c0      	movs	r3, #192	@ 0xc0
 80104d4:	029b      	lsls	r3, r3, #10
 80104d6:	4013      	ands	r3, r2
 80104d8:	d100      	bne.n	80104dc <HAL_GPIO_Init+0x17c>
 80104da:	e0a0      	b.n	801061e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80104dc:	4b57      	ldr	r3, [pc, #348]	@ (801063c <HAL_GPIO_Init+0x2dc>)
 80104de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80104e0:	4b56      	ldr	r3, [pc, #344]	@ (801063c <HAL_GPIO_Init+0x2dc>)
 80104e2:	2101      	movs	r1, #1
 80104e4:	430a      	orrs	r2, r1
 80104e6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80104e8:	4a55      	ldr	r2, [pc, #340]	@ (8010640 <HAL_GPIO_Init+0x2e0>)
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	089b      	lsrs	r3, r3, #2
 80104ee:	3302      	adds	r3, #2
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	589b      	ldr	r3, [r3, r2]
 80104f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	2203      	movs	r2, #3
 80104fa:	4013      	ands	r3, r2
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	220f      	movs	r2, #15
 8010500:	409a      	lsls	r2, r3
 8010502:	0013      	movs	r3, r2
 8010504:	43da      	mvns	r2, r3
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	4013      	ands	r3, r2
 801050a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	23a0      	movs	r3, #160	@ 0xa0
 8010510:	05db      	lsls	r3, r3, #23
 8010512:	429a      	cmp	r2, r3
 8010514:	d01f      	beq.n	8010556 <HAL_GPIO_Init+0x1f6>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4a4a      	ldr	r2, [pc, #296]	@ (8010644 <HAL_GPIO_Init+0x2e4>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d019      	beq.n	8010552 <HAL_GPIO_Init+0x1f2>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4a49      	ldr	r2, [pc, #292]	@ (8010648 <HAL_GPIO_Init+0x2e8>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d013      	beq.n	801054e <HAL_GPIO_Init+0x1ee>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4a48      	ldr	r2, [pc, #288]	@ (801064c <HAL_GPIO_Init+0x2ec>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d00d      	beq.n	801054a <HAL_GPIO_Init+0x1ea>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4a47      	ldr	r2, [pc, #284]	@ (8010650 <HAL_GPIO_Init+0x2f0>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d007      	beq.n	8010546 <HAL_GPIO_Init+0x1e6>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	4a46      	ldr	r2, [pc, #280]	@ (8010654 <HAL_GPIO_Init+0x2f4>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d101      	bne.n	8010542 <HAL_GPIO_Init+0x1e2>
 801053e:	2305      	movs	r3, #5
 8010540:	e00a      	b.n	8010558 <HAL_GPIO_Init+0x1f8>
 8010542:	2306      	movs	r3, #6
 8010544:	e008      	b.n	8010558 <HAL_GPIO_Init+0x1f8>
 8010546:	2304      	movs	r3, #4
 8010548:	e006      	b.n	8010558 <HAL_GPIO_Init+0x1f8>
 801054a:	2303      	movs	r3, #3
 801054c:	e004      	b.n	8010558 <HAL_GPIO_Init+0x1f8>
 801054e:	2302      	movs	r3, #2
 8010550:	e002      	b.n	8010558 <HAL_GPIO_Init+0x1f8>
 8010552:	2301      	movs	r3, #1
 8010554:	e000      	b.n	8010558 <HAL_GPIO_Init+0x1f8>
 8010556:	2300      	movs	r3, #0
 8010558:	697a      	ldr	r2, [r7, #20]
 801055a:	2103      	movs	r1, #3
 801055c:	400a      	ands	r2, r1
 801055e:	0092      	lsls	r2, r2, #2
 8010560:	4093      	lsls	r3, r2
 8010562:	693a      	ldr	r2, [r7, #16]
 8010564:	4313      	orrs	r3, r2
 8010566:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010568:	4935      	ldr	r1, [pc, #212]	@ (8010640 <HAL_GPIO_Init+0x2e0>)
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	089b      	lsrs	r3, r3, #2
 801056e:	3302      	adds	r3, #2
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	693a      	ldr	r2, [r7, #16]
 8010574:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010576:	4b38      	ldr	r3, [pc, #224]	@ (8010658 <HAL_GPIO_Init+0x2f8>)
 8010578:	689b      	ldr	r3, [r3, #8]
 801057a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	43da      	mvns	r2, r3
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	4013      	ands	r3, r2
 8010584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	685a      	ldr	r2, [r3, #4]
 801058a:	2380      	movs	r3, #128	@ 0x80
 801058c:	035b      	lsls	r3, r3, #13
 801058e:	4013      	ands	r3, r2
 8010590:	d003      	beq.n	801059a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8010592:	693a      	ldr	r2, [r7, #16]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	4313      	orrs	r3, r2
 8010598:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 801059a:	4b2f      	ldr	r3, [pc, #188]	@ (8010658 <HAL_GPIO_Init+0x2f8>)
 801059c:	693a      	ldr	r2, [r7, #16]
 801059e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80105a0:	4b2d      	ldr	r3, [pc, #180]	@ (8010658 <HAL_GPIO_Init+0x2f8>)
 80105a2:	68db      	ldr	r3, [r3, #12]
 80105a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	43da      	mvns	r2, r3
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	4013      	ands	r3, r2
 80105ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	685a      	ldr	r2, [r3, #4]
 80105b4:	2380      	movs	r3, #128	@ 0x80
 80105b6:	039b      	lsls	r3, r3, #14
 80105b8:	4013      	ands	r3, r2
 80105ba:	d003      	beq.n	80105c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80105bc:	693a      	ldr	r2, [r7, #16]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	4313      	orrs	r3, r2
 80105c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80105c4:	4b24      	ldr	r3, [pc, #144]	@ (8010658 <HAL_GPIO_Init+0x2f8>)
 80105c6:	693a      	ldr	r2, [r7, #16]
 80105c8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80105ca:	4b23      	ldr	r3, [pc, #140]	@ (8010658 <HAL_GPIO_Init+0x2f8>)
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	43da      	mvns	r2, r3
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	4013      	ands	r3, r2
 80105d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	685a      	ldr	r2, [r3, #4]
 80105de:	2380      	movs	r3, #128	@ 0x80
 80105e0:	029b      	lsls	r3, r3, #10
 80105e2:	4013      	ands	r3, r2
 80105e4:	d003      	beq.n	80105ee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	4313      	orrs	r3, r2
 80105ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80105ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010658 <HAL_GPIO_Init+0x2f8>)
 80105f0:	693a      	ldr	r2, [r7, #16]
 80105f2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80105f4:	4b18      	ldr	r3, [pc, #96]	@ (8010658 <HAL_GPIO_Init+0x2f8>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	43da      	mvns	r2, r3
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	4013      	ands	r3, r2
 8010602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	685a      	ldr	r2, [r3, #4]
 8010608:	2380      	movs	r3, #128	@ 0x80
 801060a:	025b      	lsls	r3, r3, #9
 801060c:	4013      	ands	r3, r2
 801060e:	d003      	beq.n	8010618 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8010610:	693a      	ldr	r2, [r7, #16]
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	4313      	orrs	r3, r2
 8010616:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010618:	4b0f      	ldr	r3, [pc, #60]	@ (8010658 <HAL_GPIO_Init+0x2f8>)
 801061a:	693a      	ldr	r2, [r7, #16]
 801061c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	3301      	adds	r3, #1
 8010622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	681a      	ldr	r2, [r3, #0]
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	40da      	lsrs	r2, r3
 801062c:	1e13      	subs	r3, r2, #0
 801062e:	d000      	beq.n	8010632 <HAL_GPIO_Init+0x2d2>
 8010630:	e6a2      	b.n	8010378 <HAL_GPIO_Init+0x18>
  }
}
 8010632:	46c0      	nop			@ (mov r8, r8)
 8010634:	46c0      	nop			@ (mov r8, r8)
 8010636:	46bd      	mov	sp, r7
 8010638:	b006      	add	sp, #24
 801063a:	bd80      	pop	{r7, pc}
 801063c:	40021000 	.word	0x40021000
 8010640:	40010000 	.word	0x40010000
 8010644:	50000400 	.word	0x50000400
 8010648:	50000800 	.word	0x50000800
 801064c:	50000c00 	.word	0x50000c00
 8010650:	50001000 	.word	0x50001000
 8010654:	50001c00 	.word	0x50001c00
 8010658:	40010400 	.word	0x40010400

0801065c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	000a      	movs	r2, r1
 8010666:	1cbb      	adds	r3, r7, #2
 8010668:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	691b      	ldr	r3, [r3, #16]
 801066e:	1cba      	adds	r2, r7, #2
 8010670:	8812      	ldrh	r2, [r2, #0]
 8010672:	4013      	ands	r3, r2
 8010674:	d004      	beq.n	8010680 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8010676:	230f      	movs	r3, #15
 8010678:	18fb      	adds	r3, r7, r3
 801067a:	2201      	movs	r2, #1
 801067c:	701a      	strb	r2, [r3, #0]
 801067e:	e003      	b.n	8010688 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010680:	230f      	movs	r3, #15
 8010682:	18fb      	adds	r3, r7, r3
 8010684:	2200      	movs	r2, #0
 8010686:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8010688:	230f      	movs	r3, #15
 801068a:	18fb      	adds	r3, r7, r3
 801068c:	781b      	ldrb	r3, [r3, #0]
}
 801068e:	0018      	movs	r0, r3
 8010690:	46bd      	mov	sp, r7
 8010692:	b004      	add	sp, #16
 8010694:	bd80      	pop	{r7, pc}

08010696 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010696:	b580      	push	{r7, lr}
 8010698:	b082      	sub	sp, #8
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
 801069e:	0008      	movs	r0, r1
 80106a0:	0011      	movs	r1, r2
 80106a2:	1cbb      	adds	r3, r7, #2
 80106a4:	1c02      	adds	r2, r0, #0
 80106a6:	801a      	strh	r2, [r3, #0]
 80106a8:	1c7b      	adds	r3, r7, #1
 80106aa:	1c0a      	adds	r2, r1, #0
 80106ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80106ae:	1c7b      	adds	r3, r7, #1
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d004      	beq.n	80106c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80106b6:	1cbb      	adds	r3, r7, #2
 80106b8:	881a      	ldrh	r2, [r3, #0]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80106be:	e003      	b.n	80106c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80106c0:	1cbb      	adds	r3, r7, #2
 80106c2:	881a      	ldrh	r2, [r3, #0]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80106c8:	46c0      	nop			@ (mov r8, r8)
 80106ca:	46bd      	mov	sp, r7
 80106cc:	b002      	add	sp, #8
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	0002      	movs	r2, r0
 80106d8:	1dbb      	adds	r3, r7, #6
 80106da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80106dc:	4b09      	ldr	r3, [pc, #36]	@ (8010704 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80106de:	695b      	ldr	r3, [r3, #20]
 80106e0:	1dba      	adds	r2, r7, #6
 80106e2:	8812      	ldrh	r2, [r2, #0]
 80106e4:	4013      	ands	r3, r2
 80106e6:	d008      	beq.n	80106fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80106e8:	4b06      	ldr	r3, [pc, #24]	@ (8010704 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80106ea:	1dba      	adds	r2, r7, #6
 80106ec:	8812      	ldrh	r2, [r2, #0]
 80106ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80106f0:	1dbb      	adds	r3, r7, #6
 80106f2:	881b      	ldrh	r3, [r3, #0]
 80106f4:	0018      	movs	r0, r3
 80106f6:	f7f7 ff89 	bl	800860c <HAL_GPIO_EXTI_Callback>
  }
}
 80106fa:	46c0      	nop			@ (mov r8, r8)
 80106fc:	46bd      	mov	sp, r7
 80106fe:	b002      	add	sp, #8
 8010700:	bd80      	pop	{r7, pc}
 8010702:	46c0      	nop			@ (mov r8, r8)
 8010704:	40010400 	.word	0x40010400

08010708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d101      	bne.n	801071a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010716:	2301      	movs	r3, #1
 8010718:	e082      	b.n	8010820 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2241      	movs	r2, #65	@ 0x41
 801071e:	5c9b      	ldrb	r3, [r3, r2]
 8010720:	b2db      	uxtb	r3, r3
 8010722:	2b00      	cmp	r3, #0
 8010724:	d107      	bne.n	8010736 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2240      	movs	r2, #64	@ 0x40
 801072a:	2100      	movs	r1, #0
 801072c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	0018      	movs	r0, r3
 8010732:	f7f7 fa51 	bl	8007bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2241      	movs	r2, #65	@ 0x41
 801073a:	2124      	movs	r1, #36	@ 0x24
 801073c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2101      	movs	r1, #1
 801074a:	438a      	bics	r2, r1
 801074c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	685a      	ldr	r2, [r3, #4]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4934      	ldr	r1, [pc, #208]	@ (8010828 <HAL_I2C_Init+0x120>)
 8010758:	400a      	ands	r2, r1
 801075a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	689a      	ldr	r2, [r3, #8]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4931      	ldr	r1, [pc, #196]	@ (801082c <HAL_I2C_Init+0x124>)
 8010768:	400a      	ands	r2, r1
 801076a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d108      	bne.n	8010786 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	689a      	ldr	r2, [r3, #8]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	2180      	movs	r1, #128	@ 0x80
 801077e:	0209      	lsls	r1, r1, #8
 8010780:	430a      	orrs	r2, r1
 8010782:	609a      	str	r2, [r3, #8]
 8010784:	e007      	b.n	8010796 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	689a      	ldr	r2, [r3, #8]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2184      	movs	r1, #132	@ 0x84
 8010790:	0209      	lsls	r1, r1, #8
 8010792:	430a      	orrs	r2, r1
 8010794:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	68db      	ldr	r3, [r3, #12]
 801079a:	2b02      	cmp	r3, #2
 801079c:	d104      	bne.n	80107a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2280      	movs	r2, #128	@ 0x80
 80107a4:	0112      	lsls	r2, r2, #4
 80107a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	685a      	ldr	r2, [r3, #4]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	491f      	ldr	r1, [pc, #124]	@ (8010830 <HAL_I2C_Init+0x128>)
 80107b4:	430a      	orrs	r2, r1
 80107b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	68da      	ldr	r2, [r3, #12]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	491a      	ldr	r1, [pc, #104]	@ (801082c <HAL_I2C_Init+0x124>)
 80107c4:	400a      	ands	r2, r1
 80107c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	691a      	ldr	r2, [r3, #16]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	695b      	ldr	r3, [r3, #20]
 80107d0:	431a      	orrs	r2, r3
 80107d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	699b      	ldr	r3, [r3, #24]
 80107d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	430a      	orrs	r2, r1
 80107e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	69d9      	ldr	r1, [r3, #28]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6a1a      	ldr	r2, [r3, #32]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	430a      	orrs	r2, r1
 80107f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	2101      	movs	r1, #1
 80107fe:	430a      	orrs	r2, r1
 8010800:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2200      	movs	r2, #0
 8010806:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2241      	movs	r2, #65	@ 0x41
 801080c:	2120      	movs	r1, #32
 801080e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2242      	movs	r2, #66	@ 0x42
 801081a:	2100      	movs	r1, #0
 801081c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801081e:	2300      	movs	r3, #0
}
 8010820:	0018      	movs	r0, r3
 8010822:	46bd      	mov	sp, r7
 8010824:	b002      	add	sp, #8
 8010826:	bd80      	pop	{r7, pc}
 8010828:	f0ffffff 	.word	0xf0ffffff
 801082c:	ffff7fff 	.word	0xffff7fff
 8010830:	02008000 	.word	0x02008000

08010834 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010834:	b590      	push	{r4, r7, lr}
 8010836:	b089      	sub	sp, #36	@ 0x24
 8010838:	af02      	add	r7, sp, #8
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	0008      	movs	r0, r1
 801083e:	607a      	str	r2, [r7, #4]
 8010840:	0019      	movs	r1, r3
 8010842:	230a      	movs	r3, #10
 8010844:	18fb      	adds	r3, r7, r3
 8010846:	1c02      	adds	r2, r0, #0
 8010848:	801a      	strh	r2, [r3, #0]
 801084a:	2308      	movs	r3, #8
 801084c:	18fb      	adds	r3, r7, r3
 801084e:	1c0a      	adds	r2, r1, #0
 8010850:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2241      	movs	r2, #65	@ 0x41
 8010856:	5c9b      	ldrb	r3, [r3, r2]
 8010858:	b2db      	uxtb	r3, r3
 801085a:	2b20      	cmp	r3, #32
 801085c:	d000      	beq.n	8010860 <HAL_I2C_Master_Transmit+0x2c>
 801085e:	e0e7      	b.n	8010a30 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2240      	movs	r2, #64	@ 0x40
 8010864:	5c9b      	ldrb	r3, [r3, r2]
 8010866:	2b01      	cmp	r3, #1
 8010868:	d101      	bne.n	801086e <HAL_I2C_Master_Transmit+0x3a>
 801086a:	2302      	movs	r3, #2
 801086c:	e0e1      	b.n	8010a32 <HAL_I2C_Master_Transmit+0x1fe>
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2240      	movs	r2, #64	@ 0x40
 8010872:	2101      	movs	r1, #1
 8010874:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010876:	f7fe fc7d 	bl	800f174 <HAL_GetTick>
 801087a:	0003      	movs	r3, r0
 801087c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801087e:	2380      	movs	r3, #128	@ 0x80
 8010880:	0219      	lsls	r1, r3, #8
 8010882:	68f8      	ldr	r0, [r7, #12]
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	9300      	str	r3, [sp, #0]
 8010888:	2319      	movs	r3, #25
 801088a:	2201      	movs	r2, #1
 801088c:	f001 ff98 	bl	80127c0 <I2C_WaitOnFlagUntilTimeout>
 8010890:	1e03      	subs	r3, r0, #0
 8010892:	d001      	beq.n	8010898 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010894:	2301      	movs	r3, #1
 8010896:	e0cc      	b.n	8010a32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2241      	movs	r2, #65	@ 0x41
 801089c:	2121      	movs	r1, #33	@ 0x21
 801089e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2242      	movs	r2, #66	@ 0x42
 80108a4:	2110      	movs	r1, #16
 80108a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2200      	movs	r2, #0
 80108ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2208      	movs	r2, #8
 80108b8:	18ba      	adds	r2, r7, r2
 80108ba:	8812      	ldrh	r2, [r2, #0]
 80108bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2200      	movs	r2, #0
 80108c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	2bff      	cmp	r3, #255	@ 0xff
 80108cc:	d911      	bls.n	80108f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	22ff      	movs	r2, #255	@ 0xff
 80108d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108d8:	b2da      	uxtb	r2, r3
 80108da:	2380      	movs	r3, #128	@ 0x80
 80108dc:	045c      	lsls	r4, r3, #17
 80108de:	230a      	movs	r3, #10
 80108e0:	18fb      	adds	r3, r7, r3
 80108e2:	8819      	ldrh	r1, [r3, #0]
 80108e4:	68f8      	ldr	r0, [r7, #12]
 80108e6:	4b55      	ldr	r3, [pc, #340]	@ (8010a3c <HAL_I2C_Master_Transmit+0x208>)
 80108e8:	9300      	str	r3, [sp, #0]
 80108ea:	0023      	movs	r3, r4
 80108ec:	f002 f9ba 	bl	8012c64 <I2C_TransferConfig>
 80108f0:	e075      	b.n	80109de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108f6:	b29a      	uxth	r2, r3
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010900:	b2da      	uxtb	r2, r3
 8010902:	2380      	movs	r3, #128	@ 0x80
 8010904:	049c      	lsls	r4, r3, #18
 8010906:	230a      	movs	r3, #10
 8010908:	18fb      	adds	r3, r7, r3
 801090a:	8819      	ldrh	r1, [r3, #0]
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	4b4b      	ldr	r3, [pc, #300]	@ (8010a3c <HAL_I2C_Master_Transmit+0x208>)
 8010910:	9300      	str	r3, [sp, #0]
 8010912:	0023      	movs	r3, r4
 8010914:	f002 f9a6 	bl	8012c64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8010918:	e061      	b.n	80109de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801091a:	697a      	ldr	r2, [r7, #20]
 801091c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	0018      	movs	r0, r3
 8010922:	f001 ff9b 	bl	801285c <I2C_WaitOnTXISFlagUntilTimeout>
 8010926:	1e03      	subs	r3, r0, #0
 8010928:	d001      	beq.n	801092e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801092a:	2301      	movs	r3, #1
 801092c:	e081      	b.n	8010a32 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010932:	781a      	ldrb	r2, [r3, #0]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801093e:	1c5a      	adds	r2, r3, #1
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010948:	b29b      	uxth	r3, r3
 801094a:	3b01      	subs	r3, #1
 801094c:	b29a      	uxth	r2, r3
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010956:	3b01      	subs	r3, #1
 8010958:	b29a      	uxth	r2, r3
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010962:	b29b      	uxth	r3, r3
 8010964:	2b00      	cmp	r3, #0
 8010966:	d03a      	beq.n	80109de <HAL_I2C_Master_Transmit+0x1aa>
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801096c:	2b00      	cmp	r3, #0
 801096e:	d136      	bne.n	80109de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	9300      	str	r3, [sp, #0]
 8010978:	0013      	movs	r3, r2
 801097a:	2200      	movs	r2, #0
 801097c:	2180      	movs	r1, #128	@ 0x80
 801097e:	f001 ff1f 	bl	80127c0 <I2C_WaitOnFlagUntilTimeout>
 8010982:	1e03      	subs	r3, r0, #0
 8010984:	d001      	beq.n	801098a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8010986:	2301      	movs	r3, #1
 8010988:	e053      	b.n	8010a32 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801098e:	b29b      	uxth	r3, r3
 8010990:	2bff      	cmp	r3, #255	@ 0xff
 8010992:	d911      	bls.n	80109b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	22ff      	movs	r2, #255	@ 0xff
 8010998:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801099e:	b2da      	uxtb	r2, r3
 80109a0:	2380      	movs	r3, #128	@ 0x80
 80109a2:	045c      	lsls	r4, r3, #17
 80109a4:	230a      	movs	r3, #10
 80109a6:	18fb      	adds	r3, r7, r3
 80109a8:	8819      	ldrh	r1, [r3, #0]
 80109aa:	68f8      	ldr	r0, [r7, #12]
 80109ac:	2300      	movs	r3, #0
 80109ae:	9300      	str	r3, [sp, #0]
 80109b0:	0023      	movs	r3, r4
 80109b2:	f002 f957 	bl	8012c64 <I2C_TransferConfig>
 80109b6:	e012      	b.n	80109de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109bc:	b29a      	uxth	r2, r3
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109c6:	b2da      	uxtb	r2, r3
 80109c8:	2380      	movs	r3, #128	@ 0x80
 80109ca:	049c      	lsls	r4, r3, #18
 80109cc:	230a      	movs	r3, #10
 80109ce:	18fb      	adds	r3, r7, r3
 80109d0:	8819      	ldrh	r1, [r3, #0]
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	2300      	movs	r3, #0
 80109d6:	9300      	str	r3, [sp, #0]
 80109d8:	0023      	movs	r3, r4
 80109da:	f002 f943 	bl	8012c64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d198      	bne.n	801091a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80109e8:	697a      	ldr	r2, [r7, #20]
 80109ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	0018      	movs	r0, r3
 80109f0:	f001 ff7a 	bl	80128e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80109f4:	1e03      	subs	r3, r0, #0
 80109f6:	d001      	beq.n	80109fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80109f8:	2301      	movs	r3, #1
 80109fa:	e01a      	b.n	8010a32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2220      	movs	r2, #32
 8010a02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	685a      	ldr	r2, [r3, #4]
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	490c      	ldr	r1, [pc, #48]	@ (8010a40 <HAL_I2C_Master_Transmit+0x20c>)
 8010a10:	400a      	ands	r2, r1
 8010a12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2241      	movs	r2, #65	@ 0x41
 8010a18:	2120      	movs	r1, #32
 8010a1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2242      	movs	r2, #66	@ 0x42
 8010a20:	2100      	movs	r1, #0
 8010a22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2240      	movs	r2, #64	@ 0x40
 8010a28:	2100      	movs	r1, #0
 8010a2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	e000      	b.n	8010a32 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8010a30:	2302      	movs	r3, #2
  }
}
 8010a32:	0018      	movs	r0, r3
 8010a34:	46bd      	mov	sp, r7
 8010a36:	b007      	add	sp, #28
 8010a38:	bd90      	pop	{r4, r7, pc}
 8010a3a:	46c0      	nop			@ (mov r8, r8)
 8010a3c:	80002000 	.word	0x80002000
 8010a40:	fe00e800 	.word	0xfe00e800

08010a44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8010a44:	b590      	push	{r4, r7, lr}
 8010a46:	b089      	sub	sp, #36	@ 0x24
 8010a48:	af02      	add	r7, sp, #8
 8010a4a:	60f8      	str	r0, [r7, #12]
 8010a4c:	0008      	movs	r0, r1
 8010a4e:	607a      	str	r2, [r7, #4]
 8010a50:	0019      	movs	r1, r3
 8010a52:	230a      	movs	r3, #10
 8010a54:	18fb      	adds	r3, r7, r3
 8010a56:	1c02      	adds	r2, r0, #0
 8010a58:	801a      	strh	r2, [r3, #0]
 8010a5a:	2308      	movs	r3, #8
 8010a5c:	18fb      	adds	r3, r7, r3
 8010a5e:	1c0a      	adds	r2, r1, #0
 8010a60:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2241      	movs	r2, #65	@ 0x41
 8010a66:	5c9b      	ldrb	r3, [r3, r2]
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	2b20      	cmp	r3, #32
 8010a6c:	d000      	beq.n	8010a70 <HAL_I2C_Master_Receive+0x2c>
 8010a6e:	e0e8      	b.n	8010c42 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2240      	movs	r2, #64	@ 0x40
 8010a74:	5c9b      	ldrb	r3, [r3, r2]
 8010a76:	2b01      	cmp	r3, #1
 8010a78:	d101      	bne.n	8010a7e <HAL_I2C_Master_Receive+0x3a>
 8010a7a:	2302      	movs	r3, #2
 8010a7c:	e0e2      	b.n	8010c44 <HAL_I2C_Master_Receive+0x200>
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2240      	movs	r2, #64	@ 0x40
 8010a82:	2101      	movs	r1, #1
 8010a84:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010a86:	f7fe fb75 	bl	800f174 <HAL_GetTick>
 8010a8a:	0003      	movs	r3, r0
 8010a8c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010a8e:	2380      	movs	r3, #128	@ 0x80
 8010a90:	0219      	lsls	r1, r3, #8
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	9300      	str	r3, [sp, #0]
 8010a98:	2319      	movs	r3, #25
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	f001 fe90 	bl	80127c0 <I2C_WaitOnFlagUntilTimeout>
 8010aa0:	1e03      	subs	r3, r0, #0
 8010aa2:	d001      	beq.n	8010aa8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	e0cd      	b.n	8010c44 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2241      	movs	r2, #65	@ 0x41
 8010aac:	2122      	movs	r1, #34	@ 0x22
 8010aae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2242      	movs	r2, #66	@ 0x42
 8010ab4:	2110      	movs	r1, #16
 8010ab6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2200      	movs	r2, #0
 8010abc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	687a      	ldr	r2, [r7, #4]
 8010ac2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2208      	movs	r2, #8
 8010ac8:	18ba      	adds	r2, r7, r2
 8010aca:	8812      	ldrh	r2, [r2, #0]
 8010acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	2bff      	cmp	r3, #255	@ 0xff
 8010adc:	d911      	bls.n	8010b02 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	22ff      	movs	r2, #255	@ 0xff
 8010ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ae8:	b2da      	uxtb	r2, r3
 8010aea:	2380      	movs	r3, #128	@ 0x80
 8010aec:	045c      	lsls	r4, r3, #17
 8010aee:	230a      	movs	r3, #10
 8010af0:	18fb      	adds	r3, r7, r3
 8010af2:	8819      	ldrh	r1, [r3, #0]
 8010af4:	68f8      	ldr	r0, [r7, #12]
 8010af6:	4b55      	ldr	r3, [pc, #340]	@ (8010c4c <HAL_I2C_Master_Receive+0x208>)
 8010af8:	9300      	str	r3, [sp, #0]
 8010afa:	0023      	movs	r3, r4
 8010afc:	f002 f8b2 	bl	8012c64 <I2C_TransferConfig>
 8010b00:	e076      	b.n	8010bf0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	2380      	movs	r3, #128	@ 0x80
 8010b14:	049c      	lsls	r4, r3, #18
 8010b16:	230a      	movs	r3, #10
 8010b18:	18fb      	adds	r3, r7, r3
 8010b1a:	8819      	ldrh	r1, [r3, #0]
 8010b1c:	68f8      	ldr	r0, [r7, #12]
 8010b1e:	4b4b      	ldr	r3, [pc, #300]	@ (8010c4c <HAL_I2C_Master_Receive+0x208>)
 8010b20:	9300      	str	r3, [sp, #0]
 8010b22:	0023      	movs	r3, r4
 8010b24:	f002 f89e 	bl	8012c64 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010b28:	e062      	b.n	8010bf0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010b2a:	697a      	ldr	r2, [r7, #20]
 8010b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	0018      	movs	r0, r3
 8010b32:	f001 ff1d 	bl	8012970 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010b36:	1e03      	subs	r3, r0, #0
 8010b38:	d001      	beq.n	8010b3e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e082      	b.n	8010c44 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b48:	b2d2      	uxtb	r2, r2
 8010b4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b50:	1c5a      	adds	r2, r3, #1
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b5a:	3b01      	subs	r3, #1
 8010b5c:	b29a      	uxth	r2, r3
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	3b01      	subs	r3, #1
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d03a      	beq.n	8010bf0 <HAL_I2C_Master_Receive+0x1ac>
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d136      	bne.n	8010bf0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010b82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b84:	68f8      	ldr	r0, [r7, #12]
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	9300      	str	r3, [sp, #0]
 8010b8a:	0013      	movs	r3, r2
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	2180      	movs	r1, #128	@ 0x80
 8010b90:	f001 fe16 	bl	80127c0 <I2C_WaitOnFlagUntilTimeout>
 8010b94:	1e03      	subs	r3, r0, #0
 8010b96:	d001      	beq.n	8010b9c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e053      	b.n	8010c44 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	2bff      	cmp	r3, #255	@ 0xff
 8010ba4:	d911      	bls.n	8010bca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	22ff      	movs	r2, #255	@ 0xff
 8010baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bb0:	b2da      	uxtb	r2, r3
 8010bb2:	2380      	movs	r3, #128	@ 0x80
 8010bb4:	045c      	lsls	r4, r3, #17
 8010bb6:	230a      	movs	r3, #10
 8010bb8:	18fb      	adds	r3, r7, r3
 8010bba:	8819      	ldrh	r1, [r3, #0]
 8010bbc:	68f8      	ldr	r0, [r7, #12]
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	9300      	str	r3, [sp, #0]
 8010bc2:	0023      	movs	r3, r4
 8010bc4:	f002 f84e 	bl	8012c64 <I2C_TransferConfig>
 8010bc8:	e012      	b.n	8010bf0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bd8:	b2da      	uxtb	r2, r3
 8010bda:	2380      	movs	r3, #128	@ 0x80
 8010bdc:	049c      	lsls	r4, r3, #18
 8010bde:	230a      	movs	r3, #10
 8010be0:	18fb      	adds	r3, r7, r3
 8010be2:	8819      	ldrh	r1, [r3, #0]
 8010be4:	68f8      	ldr	r0, [r7, #12]
 8010be6:	2300      	movs	r3, #0
 8010be8:	9300      	str	r3, [sp, #0]
 8010bea:	0023      	movs	r3, r4
 8010bec:	f002 f83a 	bl	8012c64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d197      	bne.n	8010b2a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010bfa:	697a      	ldr	r2, [r7, #20]
 8010bfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	0018      	movs	r0, r3
 8010c02:	f001 fe71 	bl	80128e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010c06:	1e03      	subs	r3, r0, #0
 8010c08:	d001      	beq.n	8010c0e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e01a      	b.n	8010c44 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2220      	movs	r2, #32
 8010c14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	685a      	ldr	r2, [r3, #4]
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	490b      	ldr	r1, [pc, #44]	@ (8010c50 <HAL_I2C_Master_Receive+0x20c>)
 8010c22:	400a      	ands	r2, r1
 8010c24:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2241      	movs	r2, #65	@ 0x41
 8010c2a:	2120      	movs	r1, #32
 8010c2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2242      	movs	r2, #66	@ 0x42
 8010c32:	2100      	movs	r1, #0
 8010c34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2240      	movs	r2, #64	@ 0x40
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	e000      	b.n	8010c44 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8010c42:	2302      	movs	r3, #2
  }
}
 8010c44:	0018      	movs	r0, r3
 8010c46:	46bd      	mov	sp, r7
 8010c48:	b007      	add	sp, #28
 8010c4a:	bd90      	pop	{r4, r7, pc}
 8010c4c:	80002400 	.word	0x80002400
 8010c50:	fe00e800 	.word	0xfe00e800

08010c54 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8010c54:	b5b0      	push	{r4, r5, r7, lr}
 8010c56:	b088      	sub	sp, #32
 8010c58:	af02      	add	r7, sp, #8
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	0008      	movs	r0, r1
 8010c5e:	607a      	str	r2, [r7, #4]
 8010c60:	0019      	movs	r1, r3
 8010c62:	230a      	movs	r3, #10
 8010c64:	18fb      	adds	r3, r7, r3
 8010c66:	1c02      	adds	r2, r0, #0
 8010c68:	801a      	strh	r2, [r3, #0]
 8010c6a:	2308      	movs	r3, #8
 8010c6c:	18fb      	adds	r3, r7, r3
 8010c6e:	1c0a      	adds	r2, r1, #0
 8010c70:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	2241      	movs	r2, #65	@ 0x41
 8010c76:	5c9b      	ldrb	r3, [r3, r2]
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	2b20      	cmp	r3, #32
 8010c7c:	d000      	beq.n	8010c80 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8010c7e:	e0dd      	b.n	8010e3c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	699a      	ldr	r2, [r3, #24]
 8010c86:	2380      	movs	r3, #128	@ 0x80
 8010c88:	021b      	lsls	r3, r3, #8
 8010c8a:	401a      	ands	r2, r3
 8010c8c:	2380      	movs	r3, #128	@ 0x80
 8010c8e:	021b      	lsls	r3, r3, #8
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d101      	bne.n	8010c98 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8010c94:	2302      	movs	r3, #2
 8010c96:	e0d2      	b.n	8010e3e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2240      	movs	r2, #64	@ 0x40
 8010c9c:	5c9b      	ldrb	r3, [r3, r2]
 8010c9e:	2b01      	cmp	r3, #1
 8010ca0:	d101      	bne.n	8010ca6 <HAL_I2C_Master_Transmit_DMA+0x52>
 8010ca2:	2302      	movs	r3, #2
 8010ca4:	e0cb      	b.n	8010e3e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2240      	movs	r2, #64	@ 0x40
 8010caa:	2101      	movs	r1, #1
 8010cac:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2241      	movs	r2, #65	@ 0x41
 8010cb2:	2121      	movs	r1, #33	@ 0x21
 8010cb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2242      	movs	r2, #66	@ 0x42
 8010cba:	2110      	movs	r1, #16
 8010cbc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2208      	movs	r2, #8
 8010cce:	18ba      	adds	r2, r7, r2
 8010cd0:	8812      	ldrh	r2, [r2, #0]
 8010cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8010e48 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8010cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	4a5b      	ldr	r2, [pc, #364]	@ (8010e4c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8010cde:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	2bff      	cmp	r3, #255	@ 0xff
 8010ce8:	d906      	bls.n	8010cf8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	22ff      	movs	r2, #255	@ 0xff
 8010cee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010cf0:	2380      	movs	r3, #128	@ 0x80
 8010cf2:	045b      	lsls	r3, r3, #17
 8010cf4:	617b      	str	r3, [r7, #20]
 8010cf6:	e007      	b.n	8010d08 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010d02:	2380      	movs	r3, #128	@ 0x80
 8010d04:	049b      	lsls	r3, r3, #18
 8010d06:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d100      	bne.n	8010d12 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8010d10:	e078      	b.n	8010e04 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d023      	beq.n	8010d62 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d1e:	4a4c      	ldr	r2, [pc, #304]	@ (8010e50 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8010d20:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d26:	4a4b      	ldr	r2, [pc, #300]	@ (8010e54 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010d28:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d2e:	2200      	movs	r2, #0
 8010d30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d36:	2200      	movs	r2, #0
 8010d38:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010d3e:	6879      	ldr	r1, [r7, #4]
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	3328      	adds	r3, #40	@ 0x28
 8010d46:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010d4c:	2513      	movs	r5, #19
 8010d4e:	197c      	adds	r4, r7, r5
 8010d50:	f7fe ff62 	bl	800fc18 <HAL_DMA_Start_IT>
 8010d54:	0003      	movs	r3, r0
 8010d56:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010d58:	197b      	adds	r3, r7, r5
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d13d      	bne.n	8010ddc <HAL_I2C_Master_Transmit_DMA+0x188>
 8010d60:	e013      	b.n	8010d8a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2241      	movs	r2, #65	@ 0x41
 8010d66:	2120      	movs	r1, #32
 8010d68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	2242      	movs	r2, #66	@ 0x42
 8010d6e:	2100      	movs	r1, #0
 8010d70:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d76:	2280      	movs	r2, #128	@ 0x80
 8010d78:	431a      	orrs	r2, r3
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2240      	movs	r2, #64	@ 0x40
 8010d82:	2100      	movs	r1, #0
 8010d84:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	e059      	b.n	8010e3e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d8e:	b2da      	uxtb	r2, r3
 8010d90:	697c      	ldr	r4, [r7, #20]
 8010d92:	230a      	movs	r3, #10
 8010d94:	18fb      	adds	r3, r7, r3
 8010d96:	8819      	ldrh	r1, [r3, #0]
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8010e58 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010d9c:	9300      	str	r3, [sp, #0]
 8010d9e:	0023      	movs	r3, r4
 8010da0:	f001 ff60 	bl	8012c64 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010da8:	b29a      	uxth	r2, r3
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	b29a      	uxth	r2, r3
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2240      	movs	r2, #64	@ 0x40
 8010dba:	2100      	movs	r1, #0
 8010dbc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2110      	movs	r1, #16
 8010dc2:	0018      	movs	r0, r3
 8010dc4:	f001 ff88 	bl	8012cd8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	2180      	movs	r1, #128	@ 0x80
 8010dd4:	01c9      	lsls	r1, r1, #7
 8010dd6:	430a      	orrs	r2, r1
 8010dd8:	601a      	str	r2, [r3, #0]
 8010dda:	e02d      	b.n	8010e38 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2241      	movs	r2, #65	@ 0x41
 8010de0:	2120      	movs	r1, #32
 8010de2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2242      	movs	r2, #66	@ 0x42
 8010de8:	2100      	movs	r1, #0
 8010dea:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010df0:	2210      	movs	r2, #16
 8010df2:	431a      	orrs	r2, r3
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2240      	movs	r2, #64	@ 0x40
 8010dfc:	2100      	movs	r1, #0
 8010dfe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010e00:	2301      	movs	r3, #1
 8010e02:	e01c      	b.n	8010e3e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	4a15      	ldr	r2, [pc, #84]	@ (8010e5c <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010e08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e0e:	b2da      	uxtb	r2, r3
 8010e10:	2380      	movs	r3, #128	@ 0x80
 8010e12:	049c      	lsls	r4, r3, #18
 8010e14:	230a      	movs	r3, #10
 8010e16:	18fb      	adds	r3, r7, r3
 8010e18:	8819      	ldrh	r1, [r3, #0]
 8010e1a:	68f8      	ldr	r0, [r7, #12]
 8010e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8010e58 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010e1e:	9300      	str	r3, [sp, #0]
 8010e20:	0023      	movs	r3, r4
 8010e22:	f001 ff1f 	bl	8012c64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2240      	movs	r2, #64	@ 0x40
 8010e2a:	2100      	movs	r1, #0
 8010e2c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2101      	movs	r1, #1
 8010e32:	0018      	movs	r0, r3
 8010e34:	f001 ff50 	bl	8012cd8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	e000      	b.n	8010e3e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010e3c:	2302      	movs	r3, #2
  }
}
 8010e3e:	0018      	movs	r0, r3
 8010e40:	46bd      	mov	sp, r7
 8010e42:	b006      	add	sp, #24
 8010e44:	bdb0      	pop	{r4, r5, r7, pc}
 8010e46:	46c0      	nop			@ (mov r8, r8)
 8010e48:	ffff0000 	.word	0xffff0000
 8010e4c:	08011659 	.word	0x08011659
 8010e50:	08012611 	.word	0x08012611
 8010e54:	08012751 	.word	0x08012751
 8010e58:	80002000 	.word	0x80002000
 8010e5c:	08011205 	.word	0x08011205

08010e60 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010e60:	b5b0      	push	{r4, r5, r7, lr}
 8010e62:	b088      	sub	sp, #32
 8010e64:	af02      	add	r7, sp, #8
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	0008      	movs	r0, r1
 8010e6a:	607a      	str	r2, [r7, #4]
 8010e6c:	0019      	movs	r1, r3
 8010e6e:	230a      	movs	r3, #10
 8010e70:	18fb      	adds	r3, r7, r3
 8010e72:	1c02      	adds	r2, r0, #0
 8010e74:	801a      	strh	r2, [r3, #0]
 8010e76:	2308      	movs	r3, #8
 8010e78:	18fb      	adds	r3, r7, r3
 8010e7a:	1c0a      	adds	r2, r1, #0
 8010e7c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2241      	movs	r2, #65	@ 0x41
 8010e82:	5c9b      	ldrb	r3, [r3, r2]
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	2b20      	cmp	r3, #32
 8010e88:	d000      	beq.n	8010e8c <HAL_I2C_Master_Receive_DMA+0x2c>
 8010e8a:	e0dd      	b.n	8011048 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	699a      	ldr	r2, [r3, #24]
 8010e92:	2380      	movs	r3, #128	@ 0x80
 8010e94:	021b      	lsls	r3, r3, #8
 8010e96:	401a      	ands	r2, r3
 8010e98:	2380      	movs	r3, #128	@ 0x80
 8010e9a:	021b      	lsls	r3, r3, #8
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d101      	bne.n	8010ea4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010ea0:	2302      	movs	r3, #2
 8010ea2:	e0d2      	b.n	801104a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2240      	movs	r2, #64	@ 0x40
 8010ea8:	5c9b      	ldrb	r3, [r3, r2]
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d101      	bne.n	8010eb2 <HAL_I2C_Master_Receive_DMA+0x52>
 8010eae:	2302      	movs	r3, #2
 8010eb0:	e0cb      	b.n	801104a <HAL_I2C_Master_Receive_DMA+0x1ea>
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	2240      	movs	r2, #64	@ 0x40
 8010eb6:	2101      	movs	r1, #1
 8010eb8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2241      	movs	r2, #65	@ 0x41
 8010ebe:	2122      	movs	r1, #34	@ 0x22
 8010ec0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2242      	movs	r2, #66	@ 0x42
 8010ec6:	2110      	movs	r1, #16
 8010ec8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2208      	movs	r2, #8
 8010eda:	18ba      	adds	r2, r7, r2
 8010edc:	8812      	ldrh	r2, [r2, #0]
 8010ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	4a5c      	ldr	r2, [pc, #368]	@ (8011054 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	4a5b      	ldr	r2, [pc, #364]	@ (8011058 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010eea:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	2bff      	cmp	r3, #255	@ 0xff
 8010ef4:	d906      	bls.n	8010f04 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	22ff      	movs	r2, #255	@ 0xff
 8010efa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010efc:	2380      	movs	r3, #128	@ 0x80
 8010efe:	045b      	lsls	r3, r3, #17
 8010f00:	617b      	str	r3, [r7, #20]
 8010f02:	e007      	b.n	8010f14 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f08:	b29a      	uxth	r2, r3
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010f0e:	2380      	movs	r3, #128	@ 0x80
 8010f10:	049b      	lsls	r3, r3, #18
 8010f12:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d100      	bne.n	8010f1e <HAL_I2C_Master_Receive_DMA+0xbe>
 8010f1c:	e078      	b.n	8011010 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d023      	beq.n	8010f6e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f2a:	4a4c      	ldr	r2, [pc, #304]	@ (801105c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f32:	4a4b      	ldr	r2, [pc, #300]	@ (8011060 <HAL_I2C_Master_Receive_DMA+0x200>)
 8010f34:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f42:	2200      	movs	r2, #0
 8010f44:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	3324      	adds	r3, #36	@ 0x24
 8010f50:	0019      	movs	r1, r3
 8010f52:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010f58:	2513      	movs	r5, #19
 8010f5a:	197c      	adds	r4, r7, r5
 8010f5c:	f7fe fe5c 	bl	800fc18 <HAL_DMA_Start_IT>
 8010f60:	0003      	movs	r3, r0
 8010f62:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010f64:	197b      	adds	r3, r7, r5
 8010f66:	781b      	ldrb	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d13d      	bne.n	8010fe8 <HAL_I2C_Master_Receive_DMA+0x188>
 8010f6c:	e013      	b.n	8010f96 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	2241      	movs	r2, #65	@ 0x41
 8010f72:	2120      	movs	r1, #32
 8010f74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2242      	movs	r2, #66	@ 0x42
 8010f7a:	2100      	movs	r1, #0
 8010f7c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f82:	2280      	movs	r2, #128	@ 0x80
 8010f84:	431a      	orrs	r2, r3
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2240      	movs	r2, #64	@ 0x40
 8010f8e:	2100      	movs	r1, #0
 8010f90:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010f92:	2301      	movs	r3, #1
 8010f94:	e059      	b.n	801104a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	697c      	ldr	r4, [r7, #20]
 8010f9e:	230a      	movs	r3, #10
 8010fa0:	18fb      	adds	r3, r7, r3
 8010fa2:	8819      	ldrh	r1, [r3, #0]
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8011064 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010fa8:	9300      	str	r3, [sp, #0]
 8010faa:	0023      	movs	r3, r4
 8010fac:	f001 fe5a 	bl	8012c64 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2240      	movs	r2, #64	@ 0x40
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2110      	movs	r1, #16
 8010fce:	0018      	movs	r0, r3
 8010fd0:	f001 fe82 	bl	8012cd8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2180      	movs	r1, #128	@ 0x80
 8010fe0:	0209      	lsls	r1, r1, #8
 8010fe2:	430a      	orrs	r2, r1
 8010fe4:	601a      	str	r2, [r3, #0]
 8010fe6:	e02d      	b.n	8011044 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2241      	movs	r2, #65	@ 0x41
 8010fec:	2120      	movs	r1, #32
 8010fee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2242      	movs	r2, #66	@ 0x42
 8010ff4:	2100      	movs	r1, #0
 8010ff6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ffc:	2210      	movs	r2, #16
 8010ffe:	431a      	orrs	r2, r3
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2240      	movs	r2, #64	@ 0x40
 8011008:	2100      	movs	r1, #0
 801100a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801100c:	2301      	movs	r3, #1
 801100e:	e01c      	b.n	801104a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	4a15      	ldr	r2, [pc, #84]	@ (8011068 <HAL_I2C_Master_Receive_DMA+0x208>)
 8011014:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801101a:	b2da      	uxtb	r2, r3
 801101c:	2380      	movs	r3, #128	@ 0x80
 801101e:	049c      	lsls	r4, r3, #18
 8011020:	230a      	movs	r3, #10
 8011022:	18fb      	adds	r3, r7, r3
 8011024:	8819      	ldrh	r1, [r3, #0]
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	4b0e      	ldr	r3, [pc, #56]	@ (8011064 <HAL_I2C_Master_Receive_DMA+0x204>)
 801102a:	9300      	str	r3, [sp, #0]
 801102c:	0023      	movs	r3, r4
 801102e:	f001 fe19 	bl	8012c64 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2240      	movs	r2, #64	@ 0x40
 8011036:	2100      	movs	r1, #0
 8011038:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2101      	movs	r1, #1
 801103e:	0018      	movs	r0, r3
 8011040:	f001 fe4a 	bl	8012cd8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8011044:	2300      	movs	r3, #0
 8011046:	e000      	b.n	801104a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8011048:	2302      	movs	r3, #2
  }
}
 801104a:	0018      	movs	r0, r3
 801104c:	46bd      	mov	sp, r7
 801104e:	b006      	add	sp, #24
 8011050:	bdb0      	pop	{r4, r5, r7, pc}
 8011052:	46c0      	nop			@ (mov r8, r8)
 8011054:	ffff0000 	.word	0xffff0000
 8011058:	08011659 	.word	0x08011659
 801105c:	080126b1 	.word	0x080126b1
 8011060:	08012751 	.word	0x08012751
 8011064:	80002400 	.word	0x80002400
 8011068:	08011205 	.word	0x08011205

0801106c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b084      	sub	sp, #16
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	699b      	ldr	r3, [r3, #24]
 801107a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011088:	2b00      	cmp	r3, #0
 801108a:	d005      	beq.n	8011098 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011090:	68ba      	ldr	r2, [r7, #8]
 8011092:	68f9      	ldr	r1, [r7, #12]
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	4798      	blx	r3
  }
}
 8011098:	46c0      	nop			@ (mov r8, r8)
 801109a:	46bd      	mov	sp, r7
 801109c:	b004      	add	sp, #16
 801109e:	bd80      	pop	{r7, pc}

080110a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b086      	sub	sp, #24
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	699b      	ldr	r3, [r3, #24]
 80110ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80110b8:	697a      	ldr	r2, [r7, #20]
 80110ba:	2380      	movs	r3, #128	@ 0x80
 80110bc:	005b      	lsls	r3, r3, #1
 80110be:	4013      	ands	r3, r2
 80110c0:	d00e      	beq.n	80110e0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	2280      	movs	r2, #128	@ 0x80
 80110c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80110c8:	d00a      	beq.n	80110e0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110ce:	2201      	movs	r2, #1
 80110d0:	431a      	orrs	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2280      	movs	r2, #128	@ 0x80
 80110dc:	0052      	lsls	r2, r2, #1
 80110de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80110e0:	697a      	ldr	r2, [r7, #20]
 80110e2:	2380      	movs	r3, #128	@ 0x80
 80110e4:	00db      	lsls	r3, r3, #3
 80110e6:	4013      	ands	r3, r2
 80110e8:	d00e      	beq.n	8011108 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	2280      	movs	r2, #128	@ 0x80
 80110ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80110f0:	d00a      	beq.n	8011108 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110f6:	2208      	movs	r2, #8
 80110f8:	431a      	orrs	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2280      	movs	r2, #128	@ 0x80
 8011104:	00d2      	lsls	r2, r2, #3
 8011106:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8011108:	697a      	ldr	r2, [r7, #20]
 801110a:	2380      	movs	r3, #128	@ 0x80
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	4013      	ands	r3, r2
 8011110:	d00e      	beq.n	8011130 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	2280      	movs	r2, #128	@ 0x80
 8011116:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8011118:	d00a      	beq.n	8011130 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801111e:	2202      	movs	r2, #2
 8011120:	431a      	orrs	r2, r3
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2280      	movs	r2, #128	@ 0x80
 801112c:	0092      	lsls	r2, r2, #2
 801112e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011134:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	220b      	movs	r2, #11
 801113a:	4013      	ands	r3, r2
 801113c:	d005      	beq.n	801114a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 801113e:	68fa      	ldr	r2, [r7, #12]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	0011      	movs	r1, r2
 8011144:	0018      	movs	r0, r3
 8011146:	f001 f915 	bl	8012374 <I2C_ITError>
  }
}
 801114a:	46c0      	nop			@ (mov r8, r8)
 801114c:	46bd      	mov	sp, r7
 801114e:	b006      	add	sp, #24
 8011150:	bd80      	pop	{r7, pc}

08011152 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011152:	b580      	push	{r7, lr}
 8011154:	b082      	sub	sp, #8
 8011156:	af00      	add	r7, sp, #0
 8011158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801115a:	46c0      	nop			@ (mov r8, r8)
 801115c:	46bd      	mov	sp, r7
 801115e:	b002      	add	sp, #8
 8011160:	bd80      	pop	{r7, pc}

08011162 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011162:	b580      	push	{r7, lr}
 8011164:	b082      	sub	sp, #8
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801116a:	46c0      	nop			@ (mov r8, r8)
 801116c:	46bd      	mov	sp, r7
 801116e:	b002      	add	sp, #8
 8011170:	bd80      	pop	{r7, pc}

08011172 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011172:	b580      	push	{r7, lr}
 8011174:	b082      	sub	sp, #8
 8011176:	af00      	add	r7, sp, #0
 8011178:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801117a:	46c0      	nop			@ (mov r8, r8)
 801117c:	46bd      	mov	sp, r7
 801117e:	b002      	add	sp, #8
 8011180:	bd80      	pop	{r7, pc}

08011182 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011182:	b580      	push	{r7, lr}
 8011184:	b082      	sub	sp, #8
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801118a:	46c0      	nop			@ (mov r8, r8)
 801118c:	46bd      	mov	sp, r7
 801118e:	b002      	add	sp, #8
 8011190:	bd80      	pop	{r7, pc}

08011192 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8011192:	b580      	push	{r7, lr}
 8011194:	b082      	sub	sp, #8
 8011196:	af00      	add	r7, sp, #0
 8011198:	6078      	str	r0, [r7, #4]
 801119a:	0008      	movs	r0, r1
 801119c:	0011      	movs	r1, r2
 801119e:	1cfb      	adds	r3, r7, #3
 80111a0:	1c02      	adds	r2, r0, #0
 80111a2:	701a      	strb	r2, [r3, #0]
 80111a4:	003b      	movs	r3, r7
 80111a6:	1c0a      	adds	r2, r1, #0
 80111a8:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80111aa:	46c0      	nop			@ (mov r8, r8)
 80111ac:	46bd      	mov	sp, r7
 80111ae:	b002      	add	sp, #8
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b082      	sub	sp, #8
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80111ba:	46c0      	nop			@ (mov r8, r8)
 80111bc:	46bd      	mov	sp, r7
 80111be:	b002      	add	sp, #8
 80111c0:	bd80      	pop	{r7, pc}

080111c2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80111c2:	b580      	push	{r7, lr}
 80111c4:	b082      	sub	sp, #8
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80111ca:	46c0      	nop			@ (mov r8, r8)
 80111cc:	46bd      	mov	sp, r7
 80111ce:	b002      	add	sp, #8
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b082      	sub	sp, #8
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80111da:	46c0      	nop			@ (mov r8, r8)
 80111dc:	46bd      	mov	sp, r7
 80111de:	b002      	add	sp, #8
 80111e0:	bd80      	pop	{r7, pc}

080111e2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b082      	sub	sp, #8
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80111ea:	46c0      	nop			@ (mov r8, r8)
 80111ec:	46bd      	mov	sp, r7
 80111ee:	b002      	add	sp, #8
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b082      	sub	sp, #8
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80111fa:	46c0      	nop			@ (mov r8, r8)
 80111fc:	46bd      	mov	sp, r7
 80111fe:	b002      	add	sp, #8
 8011200:	bd80      	pop	{r7, pc}
	...

08011204 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8011204:	b590      	push	{r4, r7, lr}
 8011206:	b089      	sub	sp, #36	@ 0x24
 8011208:	af02      	add	r7, sp, #8
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	2240      	movs	r2, #64	@ 0x40
 8011218:	5c9b      	ldrb	r3, [r3, r2]
 801121a:	2b01      	cmp	r3, #1
 801121c:	d101      	bne.n	8011222 <I2C_Master_ISR_IT+0x1e>
 801121e:	2302      	movs	r3, #2
 8011220:	e113      	b.n	801144a <I2C_Master_ISR_IT+0x246>
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	2240      	movs	r2, #64	@ 0x40
 8011226:	2101      	movs	r1, #1
 8011228:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	2210      	movs	r2, #16
 801122e:	4013      	ands	r3, r2
 8011230:	d012      	beq.n	8011258 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2210      	movs	r2, #16
 8011236:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011238:	d00e      	beq.n	8011258 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2210      	movs	r2, #16
 8011240:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011246:	2204      	movs	r2, #4
 8011248:	431a      	orrs	r2, r3
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	0018      	movs	r0, r3
 8011252:	f001 f9ba 	bl	80125ca <I2C_Flush_TXDR>
 8011256:	e0e5      	b.n	8011424 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	2204      	movs	r2, #4
 801125c:	4013      	ands	r3, r2
 801125e:	d021      	beq.n	80112a4 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2204      	movs	r2, #4
 8011264:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011266:	d01d      	beq.n	80112a4 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	2204      	movs	r2, #4
 801126c:	4393      	bics	r3, r2
 801126e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801127a:	b2d2      	uxtb	r2, r2
 801127c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011282:	1c5a      	adds	r2, r3, #1
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801128c:	3b01      	subs	r3, #1
 801128e:	b29a      	uxth	r2, r3
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011298:	b29b      	uxth	r3, r3
 801129a:	3b01      	subs	r3, #1
 801129c:	b29a      	uxth	r2, r3
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80112a2:	e0bf      	b.n	8011424 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	2202      	movs	r2, #2
 80112a8:	4013      	ands	r3, r2
 80112aa:	d01c      	beq.n	80112e6 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2202      	movs	r2, #2
 80112b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80112b2:	d018      	beq.n	80112e6 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112b8:	781a      	ldrb	r2, [r3, #0]
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112c4:	1c5a      	adds	r2, r3, #1
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112ce:	3b01      	subs	r3, #1
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112da:	b29b      	uxth	r3, r3
 80112dc:	3b01      	subs	r3, #1
 80112de:	b29a      	uxth	r2, r3
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80112e4:	e09e      	b.n	8011424 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	2280      	movs	r2, #128	@ 0x80
 80112ea:	4013      	ands	r3, r2
 80112ec:	d100      	bne.n	80112f0 <I2C_Master_ISR_IT+0xec>
 80112ee:	e069      	b.n	80113c4 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2240      	movs	r2, #64	@ 0x40
 80112f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80112f6:	d065      	beq.n	80113c4 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112fc:	b29b      	uxth	r3, r3
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d04a      	beq.n	8011398 <I2C_Master_ISR_IT+0x194>
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011306:	2b00      	cmp	r3, #0
 8011308:	d146      	bne.n	8011398 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	b29a      	uxth	r2, r3
 8011312:	2112      	movs	r1, #18
 8011314:	187b      	adds	r3, r7, r1
 8011316:	0592      	lsls	r2, r2, #22
 8011318:	0d92      	lsrs	r2, r2, #22
 801131a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011320:	b29b      	uxth	r3, r3
 8011322:	2bff      	cmp	r3, #255	@ 0xff
 8011324:	d910      	bls.n	8011348 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	22ff      	movs	r2, #255	@ 0xff
 801132a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011330:	b2da      	uxtb	r2, r3
 8011332:	2380      	movs	r3, #128	@ 0x80
 8011334:	045c      	lsls	r4, r3, #17
 8011336:	187b      	adds	r3, r7, r1
 8011338:	8819      	ldrh	r1, [r3, #0]
 801133a:	68f8      	ldr	r0, [r7, #12]
 801133c:	2300      	movs	r3, #0
 801133e:	9300      	str	r3, [sp, #0]
 8011340:	0023      	movs	r3, r4
 8011342:	f001 fc8f 	bl	8012c64 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011346:	e03c      	b.n	80113c2 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801134c:	b29a      	uxth	r2, r3
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011356:	4a3f      	ldr	r2, [pc, #252]	@ (8011454 <I2C_Master_ISR_IT+0x250>)
 8011358:	4293      	cmp	r3, r2
 801135a:	d00e      	beq.n	801137a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011360:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011366:	2312      	movs	r3, #18
 8011368:	18fb      	adds	r3, r7, r3
 801136a:	8819      	ldrh	r1, [r3, #0]
 801136c:	68f8      	ldr	r0, [r7, #12]
 801136e:	2300      	movs	r3, #0
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	0023      	movs	r3, r4
 8011374:	f001 fc76 	bl	8012c64 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011378:	e023      	b.n	80113c2 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801137e:	b2da      	uxtb	r2, r3
 8011380:	2380      	movs	r3, #128	@ 0x80
 8011382:	049c      	lsls	r4, r3, #18
 8011384:	2312      	movs	r3, #18
 8011386:	18fb      	adds	r3, r7, r3
 8011388:	8819      	ldrh	r1, [r3, #0]
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	2300      	movs	r3, #0
 801138e:	9300      	str	r3, [sp, #0]
 8011390:	0023      	movs	r3, r4
 8011392:	f001 fc67 	bl	8012c64 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011396:	e014      	b.n	80113c2 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	685a      	ldr	r2, [r3, #4]
 801139e:	2380      	movs	r3, #128	@ 0x80
 80113a0:	049b      	lsls	r3, r3, #18
 80113a2:	401a      	ands	r2, r3
 80113a4:	2380      	movs	r3, #128	@ 0x80
 80113a6:	049b      	lsls	r3, r3, #18
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d004      	beq.n	80113b6 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	0018      	movs	r0, r3
 80113b0:	f000 fcf4 	bl	8011d9c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80113b4:	e036      	b.n	8011424 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2140      	movs	r1, #64	@ 0x40
 80113ba:	0018      	movs	r0, r3
 80113bc:	f000 ffda 	bl	8012374 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80113c0:	e030      	b.n	8011424 <I2C_Master_ISR_IT+0x220>
 80113c2:	e02f      	b.n	8011424 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	2240      	movs	r2, #64	@ 0x40
 80113c8:	4013      	ands	r3, r2
 80113ca:	d02b      	beq.n	8011424 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2240      	movs	r2, #64	@ 0x40
 80113d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80113d2:	d027      	beq.n	8011424 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113d8:	b29b      	uxth	r3, r3
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d11d      	bne.n	801141a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	685a      	ldr	r2, [r3, #4]
 80113e4:	2380      	movs	r3, #128	@ 0x80
 80113e6:	049b      	lsls	r3, r3, #18
 80113e8:	401a      	ands	r2, r3
 80113ea:	2380      	movs	r3, #128	@ 0x80
 80113ec:	049b      	lsls	r3, r3, #18
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d018      	beq.n	8011424 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113f6:	4a17      	ldr	r2, [pc, #92]	@ (8011454 <I2C_Master_ISR_IT+0x250>)
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d109      	bne.n	8011410 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	685a      	ldr	r2, [r3, #4]
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2180      	movs	r1, #128	@ 0x80
 8011408:	01c9      	lsls	r1, r1, #7
 801140a:	430a      	orrs	r2, r1
 801140c:	605a      	str	r2, [r3, #4]
 801140e:	e009      	b.n	8011424 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	0018      	movs	r0, r3
 8011414:	f000 fcc2 	bl	8011d9c <I2C_ITMasterSeqCplt>
 8011418:	e004      	b.n	8011424 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2140      	movs	r1, #64	@ 0x40
 801141e:	0018      	movs	r0, r3
 8011420:	f000 ffa8 	bl	8012374 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	2220      	movs	r2, #32
 8011428:	4013      	ands	r3, r2
 801142a:	d009      	beq.n	8011440 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2220      	movs	r2, #32
 8011430:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011432:	d005      	beq.n	8011440 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8011434:	697a      	ldr	r2, [r7, #20]
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	0011      	movs	r1, r2
 801143a:	0018      	movs	r0, r3
 801143c:	f000 fd54 	bl	8011ee8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2240      	movs	r2, #64	@ 0x40
 8011444:	2100      	movs	r1, #0
 8011446:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011448:	2300      	movs	r3, #0
}
 801144a:	0018      	movs	r0, r3
 801144c:	46bd      	mov	sp, r7
 801144e:	b007      	add	sp, #28
 8011450:	bd90      	pop	{r4, r7, pc}
 8011452:	46c0      	nop			@ (mov r8, r8)
 8011454:	ffff0000 	.word	0xffff0000

08011458 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b086      	sub	sp, #24
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011468:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2240      	movs	r2, #64	@ 0x40
 8011472:	5c9b      	ldrb	r3, [r3, r2]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d101      	bne.n	801147c <I2C_Slave_ISR_IT+0x24>
 8011478:	2302      	movs	r3, #2
 801147a:	e0e6      	b.n	801164a <I2C_Slave_ISR_IT+0x1f2>
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	2240      	movs	r2, #64	@ 0x40
 8011480:	2101      	movs	r1, #1
 8011482:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	2220      	movs	r2, #32
 8011488:	4013      	ands	r3, r2
 801148a:	d009      	beq.n	80114a0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2220      	movs	r2, #32
 8011490:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011492:	d005      	beq.n	80114a0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8011494:	693a      	ldr	r2, [r7, #16]
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	0011      	movs	r1, r2
 801149a:	0018      	movs	r0, r3
 801149c:	f000 fdf2 	bl	8012084 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	2210      	movs	r2, #16
 80114a4:	4013      	ands	r3, r2
 80114a6:	d052      	beq.n	801154e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2210      	movs	r2, #16
 80114ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80114ae:	d04e      	beq.n	801154e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d12d      	bne.n	8011516 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2241      	movs	r2, #65	@ 0x41
 80114be:	5c9b      	ldrb	r3, [r3, r2]
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	2b28      	cmp	r3, #40	@ 0x28
 80114c4:	d10b      	bne.n	80114de <I2C_Slave_ISR_IT+0x86>
 80114c6:	697a      	ldr	r2, [r7, #20]
 80114c8:	2380      	movs	r3, #128	@ 0x80
 80114ca:	049b      	lsls	r3, r3, #18
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d106      	bne.n	80114de <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80114d0:	693a      	ldr	r2, [r7, #16]
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	0011      	movs	r1, r2
 80114d6:	0018      	movs	r0, r3
 80114d8:	f000 fef4 	bl	80122c4 <I2C_ITListenCplt>
 80114dc:	e036      	b.n	801154c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2241      	movs	r2, #65	@ 0x41
 80114e2:	5c9b      	ldrb	r3, [r3, r2]
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	2b29      	cmp	r3, #41	@ 0x29
 80114e8:	d110      	bne.n	801150c <I2C_Slave_ISR_IT+0xb4>
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	4a59      	ldr	r2, [pc, #356]	@ (8011654 <I2C_Slave_ISR_IT+0x1fc>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d00c      	beq.n	801150c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	2210      	movs	r2, #16
 80114f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	0018      	movs	r0, r3
 80114fe:	f001 f864 	bl	80125ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	0018      	movs	r0, r3
 8011506:	f000 fc8b 	bl	8011e20 <I2C_ITSlaveSeqCplt>
 801150a:	e01f      	b.n	801154c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2210      	movs	r2, #16
 8011512:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8011514:	e091      	b.n	801163a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2210      	movs	r2, #16
 801151c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011522:	2204      	movs	r2, #4
 8011524:	431a      	orrs	r2, r3
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d005      	beq.n	801153c <I2C_Slave_ISR_IT+0xe4>
 8011530:	697a      	ldr	r2, [r7, #20]
 8011532:	2380      	movs	r3, #128	@ 0x80
 8011534:	045b      	lsls	r3, r3, #17
 8011536:	429a      	cmp	r2, r3
 8011538:	d000      	beq.n	801153c <I2C_Slave_ISR_IT+0xe4>
 801153a:	e07e      	b.n	801163a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	0011      	movs	r1, r2
 8011544:	0018      	movs	r0, r3
 8011546:	f000 ff15 	bl	8012374 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801154a:	e076      	b.n	801163a <I2C_Slave_ISR_IT+0x1e2>
 801154c:	e075      	b.n	801163a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	2204      	movs	r2, #4
 8011552:	4013      	ands	r3, r2
 8011554:	d02f      	beq.n	80115b6 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2204      	movs	r2, #4
 801155a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801155c:	d02b      	beq.n	80115b6 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011562:	b29b      	uxth	r3, r3
 8011564:	2b00      	cmp	r3, #0
 8011566:	d018      	beq.n	801159a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011572:	b2d2      	uxtb	r2, r2
 8011574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801157a:	1c5a      	adds	r2, r3, #1
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011584:	3b01      	subs	r3, #1
 8011586:	b29a      	uxth	r2, r3
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011590:	b29b      	uxth	r3, r3
 8011592:	3b01      	subs	r3, #1
 8011594:	b29a      	uxth	r2, r3
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801159e:	b29b      	uxth	r3, r3
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d14c      	bne.n	801163e <I2C_Slave_ISR_IT+0x1e6>
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	4a2b      	ldr	r2, [pc, #172]	@ (8011654 <I2C_Slave_ISR_IT+0x1fc>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d048      	beq.n	801163e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	0018      	movs	r0, r3
 80115b0:	f000 fc36 	bl	8011e20 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80115b4:	e043      	b.n	801163e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	2208      	movs	r2, #8
 80115ba:	4013      	ands	r3, r2
 80115bc:	d00a      	beq.n	80115d4 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2208      	movs	r2, #8
 80115c2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80115c4:	d006      	beq.n	80115d4 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80115c6:	693a      	ldr	r2, [r7, #16]
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	0011      	movs	r1, r2
 80115cc:	0018      	movs	r0, r3
 80115ce:	f000 fb41 	bl	8011c54 <I2C_ITAddrCplt>
 80115d2:	e035      	b.n	8011640 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	2202      	movs	r2, #2
 80115d8:	4013      	ands	r3, r2
 80115da:	d031      	beq.n	8011640 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2202      	movs	r2, #2
 80115e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80115e2:	d02d      	beq.n	8011640 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d018      	beq.n	8011620 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115f2:	781a      	ldrb	r2, [r3, #0]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115fe:	1c5a      	adds	r2, r3, #1
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011608:	b29b      	uxth	r3, r3
 801160a:	3b01      	subs	r3, #1
 801160c:	b29a      	uxth	r2, r3
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011616:	3b01      	subs	r3, #1
 8011618:	b29a      	uxth	r2, r3
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801161e:	e00f      	b.n	8011640 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8011620:	697a      	ldr	r2, [r7, #20]
 8011622:	2380      	movs	r3, #128	@ 0x80
 8011624:	045b      	lsls	r3, r3, #17
 8011626:	429a      	cmp	r2, r3
 8011628:	d002      	beq.n	8011630 <I2C_Slave_ISR_IT+0x1d8>
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d107      	bne.n	8011640 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	0018      	movs	r0, r3
 8011634:	f000 fbf4 	bl	8011e20 <I2C_ITSlaveSeqCplt>
 8011638:	e002      	b.n	8011640 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 801163a:	46c0      	nop			@ (mov r8, r8)
 801163c:	e000      	b.n	8011640 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801163e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2240      	movs	r2, #64	@ 0x40
 8011644:	2100      	movs	r1, #0
 8011646:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011648:	2300      	movs	r3, #0
}
 801164a:	0018      	movs	r0, r3
 801164c:	46bd      	mov	sp, r7
 801164e:	b006      	add	sp, #24
 8011650:	bd80      	pop	{r7, pc}
 8011652:	46c0      	nop			@ (mov r8, r8)
 8011654:	ffff0000 	.word	0xffff0000

08011658 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011658:	b590      	push	{r4, r7, lr}
 801165a:	b089      	sub	sp, #36	@ 0x24
 801165c:	af02      	add	r7, sp, #8
 801165e:	60f8      	str	r0, [r7, #12]
 8011660:	60b9      	str	r1, [r7, #8]
 8011662:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2240      	movs	r2, #64	@ 0x40
 8011668:	5c9b      	ldrb	r3, [r3, r2]
 801166a:	2b01      	cmp	r3, #1
 801166c:	d101      	bne.n	8011672 <I2C_Master_ISR_DMA+0x1a>
 801166e:	2302      	movs	r3, #2
 8011670:	e0e7      	b.n	8011842 <I2C_Master_ISR_DMA+0x1ea>
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2240      	movs	r2, #64	@ 0x40
 8011676:	2101      	movs	r1, #1
 8011678:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	2210      	movs	r2, #16
 801167e:	4013      	ands	r3, r2
 8011680:	d017      	beq.n	80116b2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2210      	movs	r2, #16
 8011686:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011688:	d013      	beq.n	80116b2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2210      	movs	r2, #16
 8011690:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011696:	2204      	movs	r2, #4
 8011698:	431a      	orrs	r2, r3
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2120      	movs	r1, #32
 80116a2:	0018      	movs	r0, r3
 80116a4:	f001 fb18 	bl	8012cd8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	0018      	movs	r0, r3
 80116ac:	f000 ff8d 	bl	80125ca <I2C_Flush_TXDR>
 80116b0:	e0c2      	b.n	8011838 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	2280      	movs	r2, #128	@ 0x80
 80116b6:	4013      	ands	r3, r2
 80116b8:	d100      	bne.n	80116bc <I2C_Master_ISR_DMA+0x64>
 80116ba:	e07c      	b.n	80117b6 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2240      	movs	r2, #64	@ 0x40
 80116c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80116c2:	d100      	bne.n	80116c6 <I2C_Master_ISR_DMA+0x6e>
 80116c4:	e077      	b.n	80117b6 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	2140      	movs	r1, #64	@ 0x40
 80116d2:	438a      	bics	r2, r1
 80116d4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116da:	b29b      	uxth	r3, r3
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d055      	beq.n	801178c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	2312      	movs	r3, #18
 80116ea:	18fb      	adds	r3, r7, r3
 80116ec:	0592      	lsls	r2, r2, #22
 80116ee:	0d92      	lsrs	r2, r2, #22
 80116f0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	2bff      	cmp	r3, #255	@ 0xff
 80116fa:	d906      	bls.n	801170a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	22ff      	movs	r2, #255	@ 0xff
 8011700:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8011702:	2380      	movs	r3, #128	@ 0x80
 8011704:	045b      	lsls	r3, r3, #17
 8011706:	617b      	str	r3, [r7, #20]
 8011708:	e010      	b.n	801172c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801170e:	b29a      	uxth	r2, r3
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011718:	4a4c      	ldr	r2, [pc, #304]	@ (801184c <I2C_Master_ISR_DMA+0x1f4>)
 801171a:	4293      	cmp	r3, r2
 801171c:	d003      	beq.n	8011726 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011722:	617b      	str	r3, [r7, #20]
 8011724:	e002      	b.n	801172c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011726:	2380      	movs	r3, #128	@ 0x80
 8011728:	049b      	lsls	r3, r3, #18
 801172a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011730:	b2da      	uxtb	r2, r3
 8011732:	697c      	ldr	r4, [r7, #20]
 8011734:	2312      	movs	r3, #18
 8011736:	18fb      	adds	r3, r7, r3
 8011738:	8819      	ldrh	r1, [r3, #0]
 801173a:	68f8      	ldr	r0, [r7, #12]
 801173c:	2300      	movs	r3, #0
 801173e:	9300      	str	r3, [sp, #0]
 8011740:	0023      	movs	r3, r4
 8011742:	f001 fa8f 	bl	8012c64 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801174a:	b29a      	uxth	r2, r3
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	b29a      	uxth	r2, r3
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	2241      	movs	r2, #65	@ 0x41
 801175c:	5c9b      	ldrb	r3, [r3, r2]
 801175e:	b2db      	uxtb	r3, r3
 8011760:	2b22      	cmp	r3, #34	@ 0x22
 8011762:	d109      	bne.n	8011778 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	681a      	ldr	r2, [r3, #0]
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	2180      	movs	r1, #128	@ 0x80
 8011770:	0209      	lsls	r1, r1, #8
 8011772:	430a      	orrs	r2, r1
 8011774:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011776:	e05f      	b.n	8011838 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	2180      	movs	r1, #128	@ 0x80
 8011784:	01c9      	lsls	r1, r1, #7
 8011786:	430a      	orrs	r2, r1
 8011788:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801178a:	e055      	b.n	8011838 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	685a      	ldr	r2, [r3, #4]
 8011792:	2380      	movs	r3, #128	@ 0x80
 8011794:	049b      	lsls	r3, r3, #18
 8011796:	401a      	ands	r2, r3
 8011798:	2380      	movs	r3, #128	@ 0x80
 801179a:	049b      	lsls	r3, r3, #18
 801179c:	429a      	cmp	r2, r3
 801179e:	d004      	beq.n	80117aa <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	0018      	movs	r0, r3
 80117a4:	f000 fafa 	bl	8011d9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80117a8:	e046      	b.n	8011838 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	2140      	movs	r1, #64	@ 0x40
 80117ae:	0018      	movs	r0, r3
 80117b0:	f000 fde0 	bl	8012374 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80117b4:	e040      	b.n	8011838 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	2240      	movs	r2, #64	@ 0x40
 80117ba:	4013      	ands	r3, r2
 80117bc:	d02c      	beq.n	8011818 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2240      	movs	r2, #64	@ 0x40
 80117c2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80117c4:	d028      	beq.n	8011818 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d11d      	bne.n	801180c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	685a      	ldr	r2, [r3, #4]
 80117d6:	2380      	movs	r3, #128	@ 0x80
 80117d8:	049b      	lsls	r3, r3, #18
 80117da:	401a      	ands	r2, r3
 80117dc:	2380      	movs	r3, #128	@ 0x80
 80117de:	049b      	lsls	r3, r3, #18
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d028      	beq.n	8011836 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117e8:	4a18      	ldr	r2, [pc, #96]	@ (801184c <I2C_Master_ISR_DMA+0x1f4>)
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d109      	bne.n	8011802 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	685a      	ldr	r2, [r3, #4]
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	2180      	movs	r1, #128	@ 0x80
 80117fa:	01c9      	lsls	r1, r1, #7
 80117fc:	430a      	orrs	r2, r1
 80117fe:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8011800:	e019      	b.n	8011836 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	0018      	movs	r0, r3
 8011806:	f000 fac9 	bl	8011d9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801180a:	e014      	b.n	8011836 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	2140      	movs	r1, #64	@ 0x40
 8011810:	0018      	movs	r0, r3
 8011812:	f000 fdaf 	bl	8012374 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011816:	e00e      	b.n	8011836 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	2220      	movs	r2, #32
 801181c:	4013      	ands	r3, r2
 801181e:	d00b      	beq.n	8011838 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2220      	movs	r2, #32
 8011824:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011826:	d007      	beq.n	8011838 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011828:	68ba      	ldr	r2, [r7, #8]
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	0011      	movs	r1, r2
 801182e:	0018      	movs	r0, r3
 8011830:	f000 fb5a 	bl	8011ee8 <I2C_ITMasterCplt>
 8011834:	e000      	b.n	8011838 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8011836:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2240      	movs	r2, #64	@ 0x40
 801183c:	2100      	movs	r1, #0
 801183e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011840:	2300      	movs	r3, #0
}
 8011842:	0018      	movs	r0, r3
 8011844:	46bd      	mov	sp, r7
 8011846:	b007      	add	sp, #28
 8011848:	bd90      	pop	{r4, r7, pc}
 801184a:	46c0      	nop			@ (mov r8, r8)
 801184c:	ffff0000 	.word	0xffff0000

08011850 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011850:	b590      	push	{r4, r7, lr}
 8011852:	b089      	sub	sp, #36	@ 0x24
 8011854:	af02      	add	r7, sp, #8
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 801185c:	4b88      	ldr	r3, [pc, #544]	@ (8011a80 <I2C_Mem_ISR_DMA+0x230>)
 801185e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2240      	movs	r2, #64	@ 0x40
 8011864:	5c9b      	ldrb	r3, [r3, r2]
 8011866:	2b01      	cmp	r3, #1
 8011868:	d101      	bne.n	801186e <I2C_Mem_ISR_DMA+0x1e>
 801186a:	2302      	movs	r3, #2
 801186c:	e104      	b.n	8011a78 <I2C_Mem_ISR_DMA+0x228>
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2240      	movs	r2, #64	@ 0x40
 8011872:	2101      	movs	r1, #1
 8011874:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	2210      	movs	r2, #16
 801187a:	4013      	ands	r3, r2
 801187c:	d017      	beq.n	80118ae <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2210      	movs	r2, #16
 8011882:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011884:	d013      	beq.n	80118ae <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	2210      	movs	r2, #16
 801188c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011892:	2204      	movs	r2, #4
 8011894:	431a      	orrs	r2, r3
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2120      	movs	r1, #32
 801189e:	0018      	movs	r0, r3
 80118a0:	f001 fa1a 	bl	8012cd8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	0018      	movs	r0, r3
 80118a8:	f000 fe8f 	bl	80125ca <I2C_Flush_TXDR>
 80118ac:	e0df      	b.n	8011a6e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	2202      	movs	r2, #2
 80118b2:	4013      	ands	r3, r2
 80118b4:	d00d      	beq.n	80118d2 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2202      	movs	r2, #2
 80118ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80118bc:	d009      	beq.n	80118d2 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80118c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2201      	movs	r2, #1
 80118cc:	4252      	negs	r2, r2
 80118ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80118d0:	e0cd      	b.n	8011a6e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	2280      	movs	r2, #128	@ 0x80
 80118d6:	4013      	ands	r3, r2
 80118d8:	d05e      	beq.n	8011998 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2240      	movs	r2, #64	@ 0x40
 80118de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80118e0:	d05a      	beq.n	8011998 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	2110      	movs	r1, #16
 80118e6:	0018      	movs	r0, r3
 80118e8:	f001 f9f6 	bl	8012cd8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d04a      	beq.n	801198c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	2bff      	cmp	r3, #255	@ 0xff
 80118fe:	d910      	bls.n	8011922 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	22ff      	movs	r2, #255	@ 0xff
 8011904:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801190a:	b299      	uxth	r1, r3
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011910:	b2da      	uxtb	r2, r3
 8011912:	2380      	movs	r3, #128	@ 0x80
 8011914:	045b      	lsls	r3, r3, #17
 8011916:	68f8      	ldr	r0, [r7, #12]
 8011918:	2400      	movs	r4, #0
 801191a:	9400      	str	r4, [sp, #0]
 801191c:	f001 f9a2 	bl	8012c64 <I2C_TransferConfig>
 8011920:	e011      	b.n	8011946 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011926:	b29a      	uxth	r2, r3
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011930:	b299      	uxth	r1, r3
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011936:	b2da      	uxtb	r2, r3
 8011938:	2380      	movs	r3, #128	@ 0x80
 801193a:	049b      	lsls	r3, r3, #18
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	2400      	movs	r4, #0
 8011940:	9400      	str	r4, [sp, #0]
 8011942:	f001 f98f 	bl	8012c64 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801194a:	b29a      	uxth	r2, r3
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011950:	1ad3      	subs	r3, r2, r3
 8011952:	b29a      	uxth	r2, r3
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	2241      	movs	r2, #65	@ 0x41
 801195c:	5c9b      	ldrb	r3, [r3, r2]
 801195e:	b2db      	uxtb	r3, r3
 8011960:	2b22      	cmp	r3, #34	@ 0x22
 8011962:	d109      	bne.n	8011978 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	2180      	movs	r1, #128	@ 0x80
 8011970:	0209      	lsls	r1, r1, #8
 8011972:	430a      	orrs	r2, r1
 8011974:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011976:	e07a      	b.n	8011a6e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2180      	movs	r1, #128	@ 0x80
 8011984:	01c9      	lsls	r1, r1, #7
 8011986:	430a      	orrs	r2, r1
 8011988:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801198a:	e070      	b.n	8011a6e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2140      	movs	r1, #64	@ 0x40
 8011990:	0018      	movs	r0, r3
 8011992:	f000 fcef 	bl	8012374 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011996:	e06a      	b.n	8011a6e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	2240      	movs	r2, #64	@ 0x40
 801199c:	4013      	ands	r3, r2
 801199e:	d058      	beq.n	8011a52 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2240      	movs	r2, #64	@ 0x40
 80119a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80119a6:	d054      	beq.n	8011a52 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2241      	movs	r2, #65	@ 0x41
 80119ac:	5c9b      	ldrb	r3, [r3, r2]
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	2b22      	cmp	r3, #34	@ 0x22
 80119b2:	d101      	bne.n	80119b8 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80119b4:	4b33      	ldr	r3, [pc, #204]	@ (8011a84 <I2C_Mem_ISR_DMA+0x234>)
 80119b6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119bc:	b29b      	uxth	r3, r3
 80119be:	2bff      	cmp	r3, #255	@ 0xff
 80119c0:	d911      	bls.n	80119e6 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	22ff      	movs	r2, #255	@ 0xff
 80119c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119cc:	b299      	uxth	r1, r3
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119d2:	b2da      	uxtb	r2, r3
 80119d4:	2380      	movs	r3, #128	@ 0x80
 80119d6:	045c      	lsls	r4, r3, #17
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	9300      	str	r3, [sp, #0]
 80119de:	0023      	movs	r3, r4
 80119e0:	f001 f940 	bl	8012c64 <I2C_TransferConfig>
 80119e4:	e012      	b.n	8011a0c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119f4:	b299      	uxth	r1, r3
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119fa:	b2da      	uxtb	r2, r3
 80119fc:	2380      	movs	r3, #128	@ 0x80
 80119fe:	049c      	lsls	r4, r3, #18
 8011a00:	68f8      	ldr	r0, [r7, #12]
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	9300      	str	r3, [sp, #0]
 8011a06:	0023      	movs	r3, r4
 8011a08:	f001 f92c 	bl	8012c64 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a16:	1ad3      	subs	r3, r2, r3
 8011a18:	b29a      	uxth	r2, r3
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	2241      	movs	r2, #65	@ 0x41
 8011a22:	5c9b      	ldrb	r3, [r3, r2]
 8011a24:	b2db      	uxtb	r3, r3
 8011a26:	2b22      	cmp	r3, #34	@ 0x22
 8011a28:	d109      	bne.n	8011a3e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	2180      	movs	r1, #128	@ 0x80
 8011a36:	0209      	lsls	r1, r1, #8
 8011a38:	430a      	orrs	r2, r1
 8011a3a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a3c:	e017      	b.n	8011a6e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	681a      	ldr	r2, [r3, #0]
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2180      	movs	r1, #128	@ 0x80
 8011a4a:	01c9      	lsls	r1, r1, #7
 8011a4c:	430a      	orrs	r2, r1
 8011a4e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a50:	e00d      	b.n	8011a6e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	2220      	movs	r2, #32
 8011a56:	4013      	ands	r3, r2
 8011a58:	d009      	beq.n	8011a6e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2220      	movs	r2, #32
 8011a5e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011a60:	d005      	beq.n	8011a6e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011a62:	68ba      	ldr	r2, [r7, #8]
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	0011      	movs	r1, r2
 8011a68:	0018      	movs	r0, r3
 8011a6a:	f000 fa3d 	bl	8011ee8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2240      	movs	r2, #64	@ 0x40
 8011a72:	2100      	movs	r1, #0
 8011a74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011a76:	2300      	movs	r3, #0
}
 8011a78:	0018      	movs	r0, r3
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	b007      	add	sp, #28
 8011a7e:	bd90      	pop	{r4, r7, pc}
 8011a80:	80002000 	.word	0x80002000
 8011a84:	80002400 	.word	0x80002400

08011a88 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b088      	sub	sp, #32
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	60b9      	str	r1, [r7, #8]
 8011a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a98:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2240      	movs	r2, #64	@ 0x40
 8011aa2:	5c9b      	ldrb	r3, [r3, r2]
 8011aa4:	2b01      	cmp	r3, #1
 8011aa6:	d101      	bne.n	8011aac <I2C_Slave_ISR_DMA+0x24>
 8011aa8:	2302      	movs	r3, #2
 8011aaa:	e0cd      	b.n	8011c48 <I2C_Slave_ISR_DMA+0x1c0>
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2240      	movs	r2, #64	@ 0x40
 8011ab0:	2101      	movs	r1, #1
 8011ab2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	2220      	movs	r2, #32
 8011ab8:	4013      	ands	r3, r2
 8011aba:	d009      	beq.n	8011ad0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2220      	movs	r2, #32
 8011ac0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011ac2:	d005      	beq.n	8011ad0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8011ac4:	68ba      	ldr	r2, [r7, #8]
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	0011      	movs	r1, r2
 8011aca:	0018      	movs	r0, r3
 8011acc:	f000 fada 	bl	8012084 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	2210      	movs	r2, #16
 8011ad4:	4013      	ands	r3, r2
 8011ad6:	d100      	bne.n	8011ada <I2C_Slave_ISR_DMA+0x52>
 8011ad8:	e0a3      	b.n	8011c22 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2210      	movs	r2, #16
 8011ade:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011ae0:	d100      	bne.n	8011ae4 <I2C_Slave_ISR_DMA+0x5c>
 8011ae2:	e09e      	b.n	8011c22 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	2380      	movs	r3, #128	@ 0x80
 8011ae8:	01db      	lsls	r3, r3, #7
 8011aea:	4013      	ands	r3, r2
 8011aec:	d105      	bne.n	8011afa <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	2380      	movs	r3, #128	@ 0x80
 8011af2:	021b      	lsls	r3, r3, #8
 8011af4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011af6:	d100      	bne.n	8011afa <I2C_Slave_ISR_DMA+0x72>
 8011af8:	e08c      	b.n	8011c14 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d00c      	beq.n	8011b1c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8011b02:	687a      	ldr	r2, [r7, #4]
 8011b04:	2380      	movs	r3, #128	@ 0x80
 8011b06:	021b      	lsls	r3, r3, #8
 8011b08:	4013      	ands	r3, r2
 8011b0a:	d007      	beq.n	8011b1c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d101      	bne.n	8011b1c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011b18:	2301      	movs	r3, #1
 8011b1a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00c      	beq.n	8011b3e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	2380      	movs	r3, #128	@ 0x80
 8011b28:	01db      	lsls	r3, r3, #7
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	d007      	beq.n	8011b3e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d101      	bne.n	8011b3e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8011b3e:	69fb      	ldr	r3, [r7, #28]
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d12d      	bne.n	8011ba0 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2241      	movs	r2, #65	@ 0x41
 8011b48:	5c9b      	ldrb	r3, [r3, r2]
 8011b4a:	b2db      	uxtb	r3, r3
 8011b4c:	2b28      	cmp	r3, #40	@ 0x28
 8011b4e:	d10b      	bne.n	8011b68 <I2C_Slave_ISR_DMA+0xe0>
 8011b50:	69ba      	ldr	r2, [r7, #24]
 8011b52:	2380      	movs	r3, #128	@ 0x80
 8011b54:	049b      	lsls	r3, r3, #18
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d106      	bne.n	8011b68 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8011b5a:	68ba      	ldr	r2, [r7, #8]
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	0011      	movs	r1, r2
 8011b60:	0018      	movs	r0, r3
 8011b62:	f000 fbaf 	bl	80122c4 <I2C_ITListenCplt>
 8011b66:	e054      	b.n	8011c12 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2241      	movs	r2, #65	@ 0x41
 8011b6c:	5c9b      	ldrb	r3, [r3, r2]
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	2b29      	cmp	r3, #41	@ 0x29
 8011b72:	d110      	bne.n	8011b96 <I2C_Slave_ISR_DMA+0x10e>
 8011b74:	69bb      	ldr	r3, [r7, #24]
 8011b76:	4a36      	ldr	r2, [pc, #216]	@ (8011c50 <I2C_Slave_ISR_DMA+0x1c8>)
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	d00c      	beq.n	8011b96 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	2210      	movs	r2, #16
 8011b82:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	0018      	movs	r0, r3
 8011b88:	f000 fd1f 	bl	80125ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	0018      	movs	r0, r3
 8011b90:	f000 f946 	bl	8011e20 <I2C_ITSlaveSeqCplt>
 8011b94:	e03d      	b.n	8011c12 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2210      	movs	r2, #16
 8011b9c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8011b9e:	e03e      	b.n	8011c1e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	2210      	movs	r2, #16
 8011ba6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011bac:	2204      	movs	r2, #4
 8011bae:	431a      	orrs	r2, r3
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8011bb4:	2317      	movs	r3, #23
 8011bb6:	18fb      	adds	r3, r7, r3
 8011bb8:	68fa      	ldr	r2, [r7, #12]
 8011bba:	2141      	movs	r1, #65	@ 0x41
 8011bbc:	5c52      	ldrb	r2, [r2, r1]
 8011bbe:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011bc0:	69bb      	ldr	r3, [r7, #24]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d004      	beq.n	8011bd0 <I2C_Slave_ISR_DMA+0x148>
 8011bc6:	69ba      	ldr	r2, [r7, #24]
 8011bc8:	2380      	movs	r3, #128	@ 0x80
 8011bca:	045b      	lsls	r3, r3, #17
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d126      	bne.n	8011c1e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011bd0:	2217      	movs	r2, #23
 8011bd2:	18bb      	adds	r3, r7, r2
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	2b21      	cmp	r3, #33	@ 0x21
 8011bd8:	d003      	beq.n	8011be2 <I2C_Slave_ISR_DMA+0x15a>
 8011bda:	18bb      	adds	r3, r7, r2
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	2b29      	cmp	r3, #41	@ 0x29
 8011be0:	d103      	bne.n	8011bea <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2221      	movs	r2, #33	@ 0x21
 8011be6:	631a      	str	r2, [r3, #48]	@ 0x30
 8011be8:	e00b      	b.n	8011c02 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011bea:	2217      	movs	r2, #23
 8011bec:	18bb      	adds	r3, r7, r2
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	2b22      	cmp	r3, #34	@ 0x22
 8011bf2:	d003      	beq.n	8011bfc <I2C_Slave_ISR_DMA+0x174>
 8011bf4:	18bb      	adds	r3, r7, r2
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bfa:	d102      	bne.n	8011c02 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2222      	movs	r2, #34	@ 0x22
 8011c00:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	0011      	movs	r1, r2
 8011c0a:	0018      	movs	r0, r3
 8011c0c:	f000 fbb2 	bl	8012374 <I2C_ITError>
      if (treatdmanack == 1U)
 8011c10:	e005      	b.n	8011c1e <I2C_Slave_ISR_DMA+0x196>
 8011c12:	e004      	b.n	8011c1e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	2210      	movs	r2, #16
 8011c1a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011c1c:	e00f      	b.n	8011c3e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8011c1e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011c20:	e00d      	b.n	8011c3e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	2208      	movs	r2, #8
 8011c26:	4013      	ands	r3, r2
 8011c28:	d009      	beq.n	8011c3e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2208      	movs	r2, #8
 8011c2e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011c30:	d005      	beq.n	8011c3e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8011c32:	68ba      	ldr	r2, [r7, #8]
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	0011      	movs	r1, r2
 8011c38:	0018      	movs	r0, r3
 8011c3a:	f000 f80b 	bl	8011c54 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2240      	movs	r2, #64	@ 0x40
 8011c42:	2100      	movs	r1, #0
 8011c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011c46:	2300      	movs	r3, #0
}
 8011c48:	0018      	movs	r0, r3
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	b008      	add	sp, #32
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	ffff0000 	.word	0xffff0000

08011c54 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011c54:	b5b0      	push	{r4, r5, r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2241      	movs	r2, #65	@ 0x41
 8011c62:	5c9b      	ldrb	r3, [r3, r2]
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	001a      	movs	r2, r3
 8011c68:	2328      	movs	r3, #40	@ 0x28
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	2b28      	cmp	r3, #40	@ 0x28
 8011c6e:	d000      	beq.n	8011c72 <I2C_ITAddrCplt+0x1e>
 8011c70:	e088      	b.n	8011d84 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	699b      	ldr	r3, [r3, #24]
 8011c78:	0c1b      	lsrs	r3, r3, #16
 8011c7a:	b2da      	uxtb	r2, r3
 8011c7c:	250f      	movs	r5, #15
 8011c7e:	197b      	adds	r3, r7, r5
 8011c80:	2101      	movs	r1, #1
 8011c82:	400a      	ands	r2, r1
 8011c84:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	699b      	ldr	r3, [r3, #24]
 8011c8c:	0c1b      	lsrs	r3, r3, #16
 8011c8e:	b29a      	uxth	r2, r3
 8011c90:	200c      	movs	r0, #12
 8011c92:	183b      	adds	r3, r7, r0
 8011c94:	21fe      	movs	r1, #254	@ 0xfe
 8011c96:	400a      	ands	r2, r1
 8011c98:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	b29a      	uxth	r2, r3
 8011ca2:	240a      	movs	r4, #10
 8011ca4:	193b      	adds	r3, r7, r4
 8011ca6:	0592      	lsls	r2, r2, #22
 8011ca8:	0d92      	lsrs	r2, r2, #22
 8011caa:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	b29a      	uxth	r2, r3
 8011cb4:	2308      	movs	r3, #8
 8011cb6:	18fb      	adds	r3, r7, r3
 8011cb8:	21fe      	movs	r1, #254	@ 0xfe
 8011cba:	400a      	ands	r2, r1
 8011cbc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	2b02      	cmp	r3, #2
 8011cc4:	d148      	bne.n	8011d58 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8011cc6:	0021      	movs	r1, r4
 8011cc8:	187b      	adds	r3, r7, r1
 8011cca:	881b      	ldrh	r3, [r3, #0]
 8011ccc:	09db      	lsrs	r3, r3, #7
 8011cce:	b29a      	uxth	r2, r3
 8011cd0:	183b      	adds	r3, r7, r0
 8011cd2:	881b      	ldrh	r3, [r3, #0]
 8011cd4:	4053      	eors	r3, r2
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	001a      	movs	r2, r3
 8011cda:	2306      	movs	r3, #6
 8011cdc:	4013      	ands	r3, r2
 8011cde:	d120      	bne.n	8011d22 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8011ce0:	183b      	adds	r3, r7, r0
 8011ce2:	187a      	adds	r2, r7, r1
 8011ce4:	8812      	ldrh	r2, [r2, #0]
 8011ce6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011cec:	1c5a      	adds	r2, r3, #1
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011cf6:	2b02      	cmp	r3, #2
 8011cf8:	d14c      	bne.n	8011d94 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	2208      	movs	r2, #8
 8011d06:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2240      	movs	r2, #64	@ 0x40
 8011d0c:	2100      	movs	r1, #0
 8011d0e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011d10:	183b      	adds	r3, r7, r0
 8011d12:	881a      	ldrh	r2, [r3, #0]
 8011d14:	197b      	adds	r3, r7, r5
 8011d16:	7819      	ldrb	r1, [r3, #0]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	0018      	movs	r0, r3
 8011d1c:	f7ff fa39 	bl	8011192 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011d20:	e038      	b.n	8011d94 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8011d22:	240c      	movs	r4, #12
 8011d24:	193b      	adds	r3, r7, r4
 8011d26:	2208      	movs	r2, #8
 8011d28:	18ba      	adds	r2, r7, r2
 8011d2a:	8812      	ldrh	r2, [r2, #0]
 8011d2c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011d2e:	2380      	movs	r3, #128	@ 0x80
 8011d30:	021a      	lsls	r2, r3, #8
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	0011      	movs	r1, r2
 8011d36:	0018      	movs	r0, r3
 8011d38:	f001 f85c 	bl	8012df4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2240      	movs	r2, #64	@ 0x40
 8011d40:	2100      	movs	r1, #0
 8011d42:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011d44:	193b      	adds	r3, r7, r4
 8011d46:	881a      	ldrh	r2, [r3, #0]
 8011d48:	230f      	movs	r3, #15
 8011d4a:	18fb      	adds	r3, r7, r3
 8011d4c:	7819      	ldrb	r1, [r3, #0]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	0018      	movs	r0, r3
 8011d52:	f7ff fa1e 	bl	8011192 <HAL_I2C_AddrCallback>
}
 8011d56:	e01d      	b.n	8011d94 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011d58:	2380      	movs	r3, #128	@ 0x80
 8011d5a:	021a      	lsls	r2, r3, #8
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	0011      	movs	r1, r2
 8011d60:	0018      	movs	r0, r3
 8011d62:	f001 f847 	bl	8012df4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2240      	movs	r2, #64	@ 0x40
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011d6e:	230c      	movs	r3, #12
 8011d70:	18fb      	adds	r3, r7, r3
 8011d72:	881a      	ldrh	r2, [r3, #0]
 8011d74:	230f      	movs	r3, #15
 8011d76:	18fb      	adds	r3, r7, r3
 8011d78:	7819      	ldrb	r1, [r3, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	0018      	movs	r0, r3
 8011d7e:	f7ff fa08 	bl	8011192 <HAL_I2C_AddrCallback>
}
 8011d82:	e007      	b.n	8011d94 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	2208      	movs	r2, #8
 8011d8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2240      	movs	r2, #64	@ 0x40
 8011d90:	2100      	movs	r1, #0
 8011d92:	5499      	strb	r1, [r3, r2]
}
 8011d94:	46c0      	nop			@ (mov r8, r8)
 8011d96:	46bd      	mov	sp, r7
 8011d98:	b004      	add	sp, #16
 8011d9a:	bdb0      	pop	{r4, r5, r7, pc}

08011d9c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2242      	movs	r2, #66	@ 0x42
 8011da8:	2100      	movs	r1, #0
 8011daa:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2241      	movs	r2, #65	@ 0x41
 8011db0:	5c9b      	ldrb	r3, [r3, r2]
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	2b21      	cmp	r3, #33	@ 0x21
 8011db6:	d117      	bne.n	8011de8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2241      	movs	r2, #65	@ 0x41
 8011dbc:	2120      	movs	r1, #32
 8011dbe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2211      	movs	r2, #17
 8011dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2101      	movs	r1, #1
 8011dd0:	0018      	movs	r0, r3
 8011dd2:	f001 f80f 	bl	8012df4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2240      	movs	r2, #64	@ 0x40
 8011dda:	2100      	movs	r1, #0
 8011ddc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	0018      	movs	r0, r3
 8011de2:	f7ff f9b6 	bl	8011152 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011de6:	e016      	b.n	8011e16 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2241      	movs	r2, #65	@ 0x41
 8011dec:	2120      	movs	r1, #32
 8011dee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2212      	movs	r2, #18
 8011df4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2102      	movs	r1, #2
 8011e00:	0018      	movs	r0, r3
 8011e02:	f000 fff7 	bl	8012df4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2240      	movs	r2, #64	@ 0x40
 8011e0a:	2100      	movs	r1, #0
 8011e0c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	0018      	movs	r0, r3
 8011e12:	f7ff f9a6 	bl	8011162 <HAL_I2C_MasterRxCpltCallback>
}
 8011e16:	46c0      	nop			@ (mov r8, r8)
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	b002      	add	sp, #8
 8011e1c:	bd80      	pop	{r7, pc}
	...

08011e20 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2242      	movs	r2, #66	@ 0x42
 8011e34:	2100      	movs	r1, #0
 8011e36:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011e38:	68fa      	ldr	r2, [r7, #12]
 8011e3a:	2380      	movs	r3, #128	@ 0x80
 8011e3c:	01db      	lsls	r3, r3, #7
 8011e3e:	4013      	ands	r3, r2
 8011e40:	d008      	beq.n	8011e54 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	4924      	ldr	r1, [pc, #144]	@ (8011ee0 <I2C_ITSlaveSeqCplt+0xc0>)
 8011e4e:	400a      	ands	r2, r1
 8011e50:	601a      	str	r2, [r3, #0]
 8011e52:	e00c      	b.n	8011e6e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	2380      	movs	r3, #128	@ 0x80
 8011e58:	021b      	lsls	r3, r3, #8
 8011e5a:	4013      	ands	r3, r2
 8011e5c:	d007      	beq.n	8011e6e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	491e      	ldr	r1, [pc, #120]	@ (8011ee4 <I2C_ITSlaveSeqCplt+0xc4>)
 8011e6a:	400a      	ands	r2, r1
 8011e6c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2241      	movs	r2, #65	@ 0x41
 8011e72:	5c9b      	ldrb	r3, [r3, r2]
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	2b29      	cmp	r3, #41	@ 0x29
 8011e78:	d114      	bne.n	8011ea4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2241      	movs	r2, #65	@ 0x41
 8011e7e:	2128      	movs	r1, #40	@ 0x28
 8011e80:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2221      	movs	r2, #33	@ 0x21
 8011e86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2101      	movs	r1, #1
 8011e8c:	0018      	movs	r0, r3
 8011e8e:	f000 ffb1 	bl	8012df4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2240      	movs	r2, #64	@ 0x40
 8011e96:	2100      	movs	r1, #0
 8011e98:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	0018      	movs	r0, r3
 8011e9e:	f7ff f968 	bl	8011172 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011ea2:	e019      	b.n	8011ed8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2241      	movs	r2, #65	@ 0x41
 8011ea8:	5c9b      	ldrb	r3, [r3, r2]
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8011eae:	d113      	bne.n	8011ed8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2241      	movs	r2, #65	@ 0x41
 8011eb4:	2128      	movs	r1, #40	@ 0x28
 8011eb6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2222      	movs	r2, #34	@ 0x22
 8011ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2102      	movs	r1, #2
 8011ec2:	0018      	movs	r0, r3
 8011ec4:	f000 ff96 	bl	8012df4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2240      	movs	r2, #64	@ 0x40
 8011ecc:	2100      	movs	r1, #0
 8011ece:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	0018      	movs	r0, r3
 8011ed4:	f7ff f955 	bl	8011182 <HAL_I2C_SlaveRxCpltCallback>
}
 8011ed8:	46c0      	nop			@ (mov r8, r8)
 8011eda:	46bd      	mov	sp, r7
 8011edc:	b004      	add	sp, #16
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	ffffbfff 	.word	0xffffbfff
 8011ee4:	ffff7fff 	.word	0xffff7fff

08011ee8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b086      	sub	sp, #24
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2220      	movs	r2, #32
 8011efc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2241      	movs	r2, #65	@ 0x41
 8011f02:	5c9b      	ldrb	r3, [r3, r2]
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	2b21      	cmp	r3, #33	@ 0x21
 8011f08:	d108      	bne.n	8011f1c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2101      	movs	r1, #1
 8011f0e:	0018      	movs	r0, r3
 8011f10:	f000 ff70 	bl	8012df4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2211      	movs	r2, #17
 8011f18:	631a      	str	r2, [r3, #48]	@ 0x30
 8011f1a:	e00d      	b.n	8011f38 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2241      	movs	r2, #65	@ 0x41
 8011f20:	5c9b      	ldrb	r3, [r3, r2]
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	2b22      	cmp	r3, #34	@ 0x22
 8011f26:	d107      	bne.n	8011f38 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2102      	movs	r1, #2
 8011f2c:	0018      	movs	r0, r3
 8011f2e:	f000 ff61 	bl	8012df4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2212      	movs	r2, #18
 8011f36:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	685a      	ldr	r2, [r3, #4]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	494e      	ldr	r1, [pc, #312]	@ (801207c <I2C_ITMasterCplt+0x194>)
 8011f44:	400a      	ands	r2, r1
 8011f46:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4a4b      	ldr	r2, [pc, #300]	@ (8012080 <I2C_ITMasterCplt+0x198>)
 8011f52:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	2210      	movs	r2, #16
 8011f58:	4013      	ands	r3, r2
 8011f5a:	d009      	beq.n	8011f70 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2210      	movs	r2, #16
 8011f62:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f68:	2204      	movs	r2, #4
 8011f6a:	431a      	orrs	r2, r3
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2241      	movs	r2, #65	@ 0x41
 8011f74:	5c9b      	ldrb	r3, [r3, r2]
 8011f76:	b2db      	uxtb	r3, r3
 8011f78:	2b60      	cmp	r3, #96	@ 0x60
 8011f7a:	d109      	bne.n	8011f90 <I2C_ITMasterCplt+0xa8>
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	2204      	movs	r2, #4
 8011f80:	4013      	ands	r3, r2
 8011f82:	d005      	beq.n	8011f90 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	0018      	movs	r0, r3
 8011f94:	f000 fb19 	bl	80125ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f9c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2241      	movs	r2, #65	@ 0x41
 8011fa2:	5c9b      	ldrb	r3, [r3, r2]
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	2b60      	cmp	r3, #96	@ 0x60
 8011fa8:	d002      	beq.n	8011fb0 <I2C_ITMasterCplt+0xc8>
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d007      	beq.n	8011fc0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	0011      	movs	r1, r2
 8011fb8:	0018      	movs	r0, r3
 8011fba:	f000 f9db 	bl	8012374 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011fbe:	e058      	b.n	8012072 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2241      	movs	r2, #65	@ 0x41
 8011fc4:	5c9b      	ldrb	r3, [r3, r2]
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	2b21      	cmp	r3, #33	@ 0x21
 8011fca:	d126      	bne.n	801201a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2241      	movs	r2, #65	@ 0x41
 8011fd0:	2120      	movs	r1, #32
 8011fd2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2242      	movs	r2, #66	@ 0x42
 8011fde:	5c9b      	ldrb	r3, [r3, r2]
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	2b40      	cmp	r3, #64	@ 0x40
 8011fe4:	d10c      	bne.n	8012000 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2242      	movs	r2, #66	@ 0x42
 8011fea:	2100      	movs	r1, #0
 8011fec:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2240      	movs	r2, #64	@ 0x40
 8011ff2:	2100      	movs	r1, #0
 8011ff4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	0018      	movs	r0, r3
 8011ffa:	f7ff f8e2 	bl	80111c2 <HAL_I2C_MemTxCpltCallback>
}
 8011ffe:	e038      	b.n	8012072 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2242      	movs	r2, #66	@ 0x42
 8012004:	2100      	movs	r1, #0
 8012006:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2240      	movs	r2, #64	@ 0x40
 801200c:	2100      	movs	r1, #0
 801200e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	0018      	movs	r0, r3
 8012014:	f7ff f89d 	bl	8011152 <HAL_I2C_MasterTxCpltCallback>
}
 8012018:	e02b      	b.n	8012072 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2241      	movs	r2, #65	@ 0x41
 801201e:	5c9b      	ldrb	r3, [r3, r2]
 8012020:	b2db      	uxtb	r3, r3
 8012022:	2b22      	cmp	r3, #34	@ 0x22
 8012024:	d125      	bne.n	8012072 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2241      	movs	r2, #65	@ 0x41
 801202a:	2120      	movs	r1, #32
 801202c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2200      	movs	r2, #0
 8012032:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2242      	movs	r2, #66	@ 0x42
 8012038:	5c9b      	ldrb	r3, [r3, r2]
 801203a:	b2db      	uxtb	r3, r3
 801203c:	2b40      	cmp	r3, #64	@ 0x40
 801203e:	d10c      	bne.n	801205a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2242      	movs	r2, #66	@ 0x42
 8012044:	2100      	movs	r1, #0
 8012046:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2240      	movs	r2, #64	@ 0x40
 801204c:	2100      	movs	r1, #0
 801204e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	0018      	movs	r0, r3
 8012054:	f7ff f8bd 	bl	80111d2 <HAL_I2C_MemRxCpltCallback>
}
 8012058:	e00b      	b.n	8012072 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2242      	movs	r2, #66	@ 0x42
 801205e:	2100      	movs	r1, #0
 8012060:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2240      	movs	r2, #64	@ 0x40
 8012066:	2100      	movs	r1, #0
 8012068:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	0018      	movs	r0, r3
 801206e:	f7ff f878 	bl	8011162 <HAL_I2C_MasterRxCpltCallback>
}
 8012072:	46c0      	nop			@ (mov r8, r8)
 8012074:	46bd      	mov	sp, r7
 8012076:	b006      	add	sp, #24
 8012078:	bd80      	pop	{r7, pc}
 801207a:	46c0      	nop			@ (mov r8, r8)
 801207c:	fe00e800 	.word	0xfe00e800
 8012080:	ffff0000 	.word	0xffff0000

08012084 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b086      	sub	sp, #24
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801209a:	200f      	movs	r0, #15
 801209c:	183b      	adds	r3, r7, r0
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	2141      	movs	r1, #65	@ 0x41
 80120a2:	5c52      	ldrb	r2, [r2, r1]
 80120a4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	2220      	movs	r2, #32
 80120ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80120ae:	183b      	adds	r3, r7, r0
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	2b21      	cmp	r3, #33	@ 0x21
 80120b4:	d003      	beq.n	80120be <I2C_ITSlaveCplt+0x3a>
 80120b6:	183b      	adds	r3, r7, r0
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	2b29      	cmp	r3, #41	@ 0x29
 80120bc:	d109      	bne.n	80120d2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80120be:	4a7b      	ldr	r2, [pc, #492]	@ (80122ac <I2C_ITSlaveCplt+0x228>)
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	0011      	movs	r1, r2
 80120c4:	0018      	movs	r0, r3
 80120c6:	f000 fe95 	bl	8012df4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2221      	movs	r2, #33	@ 0x21
 80120ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80120d0:	e011      	b.n	80120f6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80120d2:	220f      	movs	r2, #15
 80120d4:	18bb      	adds	r3, r7, r2
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	2b22      	cmp	r3, #34	@ 0x22
 80120da:	d003      	beq.n	80120e4 <I2C_ITSlaveCplt+0x60>
 80120dc:	18bb      	adds	r3, r7, r2
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80120e2:	d108      	bne.n	80120f6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80120e4:	4a72      	ldr	r2, [pc, #456]	@ (80122b0 <I2C_ITSlaveCplt+0x22c>)
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	0011      	movs	r1, r2
 80120ea:	0018      	movs	r0, r3
 80120ec:	f000 fe82 	bl	8012df4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2222      	movs	r2, #34	@ 0x22
 80120f4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	685a      	ldr	r2, [r3, #4]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	2180      	movs	r1, #128	@ 0x80
 8012102:	0209      	lsls	r1, r1, #8
 8012104:	430a      	orrs	r2, r1
 8012106:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	685a      	ldr	r2, [r3, #4]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	4968      	ldr	r1, [pc, #416]	@ (80122b4 <I2C_ITSlaveCplt+0x230>)
 8012114:	400a      	ands	r2, r1
 8012116:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	0018      	movs	r0, r3
 801211c:	f000 fa55 	bl	80125ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8012120:	693a      	ldr	r2, [r7, #16]
 8012122:	2380      	movs	r3, #128	@ 0x80
 8012124:	01db      	lsls	r3, r3, #7
 8012126:	4013      	ands	r3, r2
 8012128:	d013      	beq.n	8012152 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	681a      	ldr	r2, [r3, #0]
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	4960      	ldr	r1, [pc, #384]	@ (80122b8 <I2C_ITSlaveCplt+0x234>)
 8012136:	400a      	ands	r2, r1
 8012138:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801213e:	2b00      	cmp	r3, #0
 8012140:	d01f      	beq.n	8012182 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	b29a      	uxth	r2, r3
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012150:	e017      	b.n	8012182 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8012152:	693a      	ldr	r2, [r7, #16]
 8012154:	2380      	movs	r3, #128	@ 0x80
 8012156:	021b      	lsls	r3, r3, #8
 8012158:	4013      	ands	r3, r2
 801215a:	d012      	beq.n	8012182 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	681a      	ldr	r2, [r3, #0]
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	4955      	ldr	r1, [pc, #340]	@ (80122bc <I2C_ITSlaveCplt+0x238>)
 8012168:	400a      	ands	r2, r1
 801216a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012170:	2b00      	cmp	r3, #0
 8012172:	d006      	beq.n	8012182 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	b29a      	uxth	r2, r3
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	2204      	movs	r2, #4
 8012186:	4013      	ands	r3, r2
 8012188:	d020      	beq.n	80121cc <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	2204      	movs	r2, #4
 801218e:	4393      	bics	r3, r2
 8012190:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801219c:	b2d2      	uxtb	r2, r2
 801219e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121a4:	1c5a      	adds	r2, r3, #1
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d00c      	beq.n	80121cc <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121b6:	3b01      	subs	r3, #1
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121c2:	b29b      	uxth	r3, r3
 80121c4:	3b01      	subs	r3, #1
 80121c6:	b29a      	uxth	r2, r3
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d005      	beq.n	80121e2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80121da:	2204      	movs	r2, #4
 80121dc:	431a      	orrs	r2, r3
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2242      	movs	r2, #66	@ 0x42
 80121e6:	2100      	movs	r1, #0
 80121e8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2200      	movs	r2, #0
 80121ee:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d013      	beq.n	8012220 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	0011      	movs	r1, r2
 8012200:	0018      	movs	r0, r3
 8012202:	f000 f8b7 	bl	8012374 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2241      	movs	r2, #65	@ 0x41
 801220a:	5c9b      	ldrb	r3, [r3, r2]
 801220c:	b2db      	uxtb	r3, r3
 801220e:	2b28      	cmp	r3, #40	@ 0x28
 8012210:	d147      	bne.n	80122a2 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8012212:	697a      	ldr	r2, [r7, #20]
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	0011      	movs	r1, r2
 8012218:	0018      	movs	r0, r3
 801221a:	f000 f853 	bl	80122c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801221e:	e040      	b.n	80122a2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012224:	4a26      	ldr	r2, [pc, #152]	@ (80122c0 <I2C_ITSlaveCplt+0x23c>)
 8012226:	4293      	cmp	r3, r2
 8012228:	d016      	beq.n	8012258 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	0018      	movs	r0, r3
 801222e:	f7ff fdf7 	bl	8011e20 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	4a22      	ldr	r2, [pc, #136]	@ (80122c0 <I2C_ITSlaveCplt+0x23c>)
 8012236:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2241      	movs	r2, #65	@ 0x41
 801223c:	2120      	movs	r1, #32
 801223e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2200      	movs	r2, #0
 8012244:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2240      	movs	r2, #64	@ 0x40
 801224a:	2100      	movs	r1, #0
 801224c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	0018      	movs	r0, r3
 8012252:	f7fe ffae 	bl	80111b2 <HAL_I2C_ListenCpltCallback>
}
 8012256:	e024      	b.n	80122a2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2241      	movs	r2, #65	@ 0x41
 801225c:	5c9b      	ldrb	r3, [r3, r2]
 801225e:	b2db      	uxtb	r3, r3
 8012260:	2b22      	cmp	r3, #34	@ 0x22
 8012262:	d10f      	bne.n	8012284 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2241      	movs	r2, #65	@ 0x41
 8012268:	2120      	movs	r1, #32
 801226a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2200      	movs	r2, #0
 8012270:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2240      	movs	r2, #64	@ 0x40
 8012276:	2100      	movs	r1, #0
 8012278:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	0018      	movs	r0, r3
 801227e:	f7fe ff80 	bl	8011182 <HAL_I2C_SlaveRxCpltCallback>
}
 8012282:	e00e      	b.n	80122a2 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2241      	movs	r2, #65	@ 0x41
 8012288:	2120      	movs	r1, #32
 801228a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2200      	movs	r2, #0
 8012290:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2240      	movs	r2, #64	@ 0x40
 8012296:	2100      	movs	r1, #0
 8012298:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	0018      	movs	r0, r3
 801229e:	f7fe ff68 	bl	8011172 <HAL_I2C_SlaveTxCpltCallback>
}
 80122a2:	46c0      	nop			@ (mov r8, r8)
 80122a4:	46bd      	mov	sp, r7
 80122a6:	b006      	add	sp, #24
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	46c0      	nop			@ (mov r8, r8)
 80122ac:	00008001 	.word	0x00008001
 80122b0:	00008002 	.word	0x00008002
 80122b4:	fe00e800 	.word	0xfe00e800
 80122b8:	ffffbfff 	.word	0xffffbfff
 80122bc:	ffff7fff 	.word	0xffff7fff
 80122c0:	ffff0000 	.word	0xffff0000

080122c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	4a26      	ldr	r2, [pc, #152]	@ (801236c <I2C_ITListenCplt+0xa8>)
 80122d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2200      	movs	r2, #0
 80122d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2241      	movs	r2, #65	@ 0x41
 80122de:	2120      	movs	r1, #32
 80122e0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2242      	movs	r2, #66	@ 0x42
 80122e6:	2100      	movs	r1, #0
 80122e8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2200      	movs	r2, #0
 80122ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	2204      	movs	r2, #4
 80122f4:	4013      	ands	r3, r2
 80122f6:	d022      	beq.n	801233e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012302:	b2d2      	uxtb	r2, r2
 8012304:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801230a:	1c5a      	adds	r2, r3, #1
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012314:	2b00      	cmp	r3, #0
 8012316:	d012      	beq.n	801233e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801231c:	3b01      	subs	r3, #1
 801231e:	b29a      	uxth	r2, r3
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012328:	b29b      	uxth	r3, r3
 801232a:	3b01      	subs	r3, #1
 801232c:	b29a      	uxth	r2, r3
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012336:	2204      	movs	r2, #4
 8012338:	431a      	orrs	r2, r3
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801233e:	4a0c      	ldr	r2, [pc, #48]	@ (8012370 <I2C_ITListenCplt+0xac>)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	0011      	movs	r1, r2
 8012344:	0018      	movs	r0, r3
 8012346:	f000 fd55 	bl	8012df4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2210      	movs	r2, #16
 8012350:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2240      	movs	r2, #64	@ 0x40
 8012356:	2100      	movs	r1, #0
 8012358:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	0018      	movs	r0, r3
 801235e:	f7fe ff28 	bl	80111b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8012362:	46c0      	nop			@ (mov r8, r8)
 8012364:	46bd      	mov	sp, r7
 8012366:	b002      	add	sp, #8
 8012368:	bd80      	pop	{r7, pc}
 801236a:	46c0      	nop			@ (mov r8, r8)
 801236c:	ffff0000 	.word	0xffff0000
 8012370:	00008003 	.word	0x00008003

08012374 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801237e:	200f      	movs	r0, #15
 8012380:	183b      	adds	r3, r7, r0
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	2141      	movs	r1, #65	@ 0x41
 8012386:	5c52      	ldrb	r2, [r2, r1]
 8012388:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2242      	movs	r2, #66	@ 0x42
 801238e:	2100      	movs	r1, #0
 8012390:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	4a72      	ldr	r2, [pc, #456]	@ (8012560 <I2C_ITError+0x1ec>)
 8012396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2200      	movs	r2, #0
 801239c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	431a      	orrs	r2, r3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80123aa:	183b      	adds	r3, r7, r0
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	2b28      	cmp	r3, #40	@ 0x28
 80123b0:	d007      	beq.n	80123c2 <I2C_ITError+0x4e>
 80123b2:	183b      	adds	r3, r7, r0
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	2b29      	cmp	r3, #41	@ 0x29
 80123b8:	d003      	beq.n	80123c2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80123ba:	183b      	adds	r3, r7, r0
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	2b2a      	cmp	r3, #42	@ 0x2a
 80123c0:	d10c      	bne.n	80123dc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2103      	movs	r1, #3
 80123c6:	0018      	movs	r0, r3
 80123c8:	f000 fd14 	bl	8012df4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2241      	movs	r2, #65	@ 0x41
 80123d0:	2128      	movs	r1, #40	@ 0x28
 80123d2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	4a63      	ldr	r2, [pc, #396]	@ (8012564 <I2C_ITError+0x1f0>)
 80123d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80123da:	e032      	b.n	8012442 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80123dc:	4a62      	ldr	r2, [pc, #392]	@ (8012568 <I2C_ITError+0x1f4>)
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	0011      	movs	r1, r2
 80123e2:	0018      	movs	r0, r3
 80123e4:	f000 fd06 	bl	8012df4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	0018      	movs	r0, r3
 80123ec:	f000 f8ed 	bl	80125ca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2241      	movs	r2, #65	@ 0x41
 80123f4:	5c9b      	ldrb	r3, [r3, r2]
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	2b60      	cmp	r3, #96	@ 0x60
 80123fa:	d01f      	beq.n	801243c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2241      	movs	r2, #65	@ 0x41
 8012400:	2120      	movs	r1, #32
 8012402:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	699b      	ldr	r3, [r3, #24]
 801240a:	2220      	movs	r2, #32
 801240c:	4013      	ands	r3, r2
 801240e:	2b20      	cmp	r3, #32
 8012410:	d114      	bne.n	801243c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	699b      	ldr	r3, [r3, #24]
 8012418:	2210      	movs	r2, #16
 801241a:	4013      	ands	r3, r2
 801241c:	2b10      	cmp	r3, #16
 801241e:	d109      	bne.n	8012434 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	2210      	movs	r2, #16
 8012426:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801242c:	2204      	movs	r2, #4
 801242e:	431a      	orrs	r2, r3
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	2220      	movs	r2, #32
 801243a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2200      	movs	r2, #0
 8012440:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012446:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801244c:	2b00      	cmp	r3, #0
 801244e:	d03b      	beq.n	80124c8 <I2C_ITError+0x154>
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	2b11      	cmp	r3, #17
 8012454:	d002      	beq.n	801245c <I2C_ITError+0xe8>
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	2b21      	cmp	r3, #33	@ 0x21
 801245a:	d135      	bne.n	80124c8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	681a      	ldr	r2, [r3, #0]
 8012462:	2380      	movs	r3, #128	@ 0x80
 8012464:	01db      	lsls	r3, r3, #7
 8012466:	401a      	ands	r2, r3
 8012468:	2380      	movs	r3, #128	@ 0x80
 801246a:	01db      	lsls	r3, r3, #7
 801246c:	429a      	cmp	r2, r3
 801246e:	d107      	bne.n	8012480 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	681a      	ldr	r2, [r3, #0]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	493c      	ldr	r1, [pc, #240]	@ (801256c <I2C_ITError+0x1f8>)
 801247c:	400a      	ands	r2, r1
 801247e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012484:	0018      	movs	r0, r3
 8012486:	f7fd fd62 	bl	800ff4e <HAL_DMA_GetState>
 801248a:	0003      	movs	r3, r0
 801248c:	2b01      	cmp	r3, #1
 801248e:	d016      	beq.n	80124be <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012494:	4a36      	ldr	r2, [pc, #216]	@ (8012570 <I2C_ITError+0x1fc>)
 8012496:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2240      	movs	r2, #64	@ 0x40
 801249c:	2100      	movs	r1, #0
 801249e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124a4:	0018      	movs	r0, r3
 80124a6:	f7fd fc5d 	bl	800fd64 <HAL_DMA_Abort_IT>
 80124aa:	1e03      	subs	r3, r0, #0
 80124ac:	d051      	beq.n	8012552 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124b8:	0018      	movs	r0, r3
 80124ba:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80124bc:	e049      	b.n	8012552 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	0018      	movs	r0, r3
 80124c2:	f000 f859 	bl	8012578 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80124c6:	e044      	b.n	8012552 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d03b      	beq.n	8012548 <I2C_ITError+0x1d4>
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	2b12      	cmp	r3, #18
 80124d4:	d002      	beq.n	80124dc <I2C_ITError+0x168>
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	2b22      	cmp	r3, #34	@ 0x22
 80124da:	d135      	bne.n	8012548 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	2380      	movs	r3, #128	@ 0x80
 80124e4:	021b      	lsls	r3, r3, #8
 80124e6:	401a      	ands	r2, r3
 80124e8:	2380      	movs	r3, #128	@ 0x80
 80124ea:	021b      	lsls	r3, r3, #8
 80124ec:	429a      	cmp	r2, r3
 80124ee:	d107      	bne.n	8012500 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	681a      	ldr	r2, [r3, #0]
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	491e      	ldr	r1, [pc, #120]	@ (8012574 <I2C_ITError+0x200>)
 80124fc:	400a      	ands	r2, r1
 80124fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012504:	0018      	movs	r0, r3
 8012506:	f7fd fd22 	bl	800ff4e <HAL_DMA_GetState>
 801250a:	0003      	movs	r3, r0
 801250c:	2b01      	cmp	r3, #1
 801250e:	d016      	beq.n	801253e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012514:	4a16      	ldr	r2, [pc, #88]	@ (8012570 <I2C_ITError+0x1fc>)
 8012516:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2240      	movs	r2, #64	@ 0x40
 801251c:	2100      	movs	r1, #0
 801251e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012524:	0018      	movs	r0, r3
 8012526:	f7fd fc1d 	bl	800fd64 <HAL_DMA_Abort_IT>
 801252a:	1e03      	subs	r3, r0, #0
 801252c:	d013      	beq.n	8012556 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012532:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012538:	0018      	movs	r0, r3
 801253a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801253c:	e00b      	b.n	8012556 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	0018      	movs	r0, r3
 8012542:	f000 f819 	bl	8012578 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012546:	e006      	b.n	8012556 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	0018      	movs	r0, r3
 801254c:	f000 f814 	bl	8012578 <I2C_TreatErrorCallback>
  }
}
 8012550:	e002      	b.n	8012558 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012552:	46c0      	nop			@ (mov r8, r8)
 8012554:	e000      	b.n	8012558 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012556:	46c0      	nop			@ (mov r8, r8)
}
 8012558:	46c0      	nop			@ (mov r8, r8)
 801255a:	46bd      	mov	sp, r7
 801255c:	b004      	add	sp, #16
 801255e:	bd80      	pop	{r7, pc}
 8012560:	ffff0000 	.word	0xffff0000
 8012564:	08011459 	.word	0x08011459
 8012568:	00008003 	.word	0x00008003
 801256c:	ffffbfff 	.word	0xffffbfff
 8012570:	08012783 	.word	0x08012783
 8012574:	ffff7fff 	.word	0xffff7fff

08012578 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2241      	movs	r2, #65	@ 0x41
 8012584:	5c9b      	ldrb	r3, [r3, r2]
 8012586:	b2db      	uxtb	r3, r3
 8012588:	2b60      	cmp	r3, #96	@ 0x60
 801258a:	d10f      	bne.n	80125ac <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2241      	movs	r2, #65	@ 0x41
 8012590:	2120      	movs	r1, #32
 8012592:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2200      	movs	r2, #0
 8012598:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2240      	movs	r2, #64	@ 0x40
 801259e:	2100      	movs	r1, #0
 80125a0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	0018      	movs	r0, r3
 80125a6:	f7fe fe24 	bl	80111f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80125aa:	e00a      	b.n	80125c2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2200      	movs	r2, #0
 80125b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	2240      	movs	r2, #64	@ 0x40
 80125b6:	2100      	movs	r1, #0
 80125b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	0018      	movs	r0, r3
 80125be:	f7fe fe10 	bl	80111e2 <HAL_I2C_ErrorCallback>
}
 80125c2:	46c0      	nop			@ (mov r8, r8)
 80125c4:	46bd      	mov	sp, r7
 80125c6:	b002      	add	sp, #8
 80125c8:	bd80      	pop	{r7, pc}

080125ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80125ca:	b580      	push	{r7, lr}
 80125cc:	b082      	sub	sp, #8
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	699b      	ldr	r3, [r3, #24]
 80125d8:	2202      	movs	r2, #2
 80125da:	4013      	ands	r3, r2
 80125dc:	2b02      	cmp	r3, #2
 80125de:	d103      	bne.n	80125e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	2200      	movs	r2, #0
 80125e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	699b      	ldr	r3, [r3, #24]
 80125ee:	2201      	movs	r2, #1
 80125f0:	4013      	ands	r3, r2
 80125f2:	2b01      	cmp	r3, #1
 80125f4:	d007      	beq.n	8012606 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	699a      	ldr	r2, [r3, #24]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	2101      	movs	r1, #1
 8012602:	430a      	orrs	r2, r1
 8012604:	619a      	str	r2, [r3, #24]
  }
}
 8012606:	46c0      	nop			@ (mov r8, r8)
 8012608:	46bd      	mov	sp, r7
 801260a:	b002      	add	sp, #8
 801260c:	bd80      	pop	{r7, pc}
	...

08012610 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801261c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	4920      	ldr	r1, [pc, #128]	@ (80126ac <I2C_DMAMasterTransmitCplt+0x9c>)
 801262a:	400a      	ands	r2, r1
 801262c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012632:	b29b      	uxth	r3, r3
 8012634:	2b00      	cmp	r3, #0
 8012636:	d105      	bne.n	8012644 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2120      	movs	r1, #32
 801263c:	0018      	movs	r0, r3
 801263e:	f000 fb4b 	bl	8012cd8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012642:	e02e      	b.n	80126a2 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012648:	68fa      	ldr	r2, [r7, #12]
 801264a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801264c:	189a      	adds	r2, r3, r2
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012656:	b29b      	uxth	r3, r3
 8012658:	2bff      	cmp	r3, #255	@ 0xff
 801265a:	d903      	bls.n	8012664 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	22ff      	movs	r2, #255	@ 0xff
 8012660:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012662:	e004      	b.n	801266e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012668:	b29a      	uxth	r2, r3
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012676:	0019      	movs	r1, r3
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	3328      	adds	r3, #40	@ 0x28
 801267e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012684:	f7fd fac8 	bl	800fc18 <HAL_DMA_Start_IT>
 8012688:	1e03      	subs	r3, r0, #0
 801268a:	d005      	beq.n	8012698 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2110      	movs	r1, #16
 8012690:	0018      	movs	r0, r3
 8012692:	f7ff fe6f 	bl	8012374 <I2C_ITError>
}
 8012696:	e004      	b.n	80126a2 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	2140      	movs	r1, #64	@ 0x40
 801269c:	0018      	movs	r0, r3
 801269e:	f000 fb1b 	bl	8012cd8 <I2C_Enable_IRQ>
}
 80126a2:	46c0      	nop			@ (mov r8, r8)
 80126a4:	46bd      	mov	sp, r7
 80126a6:	b004      	add	sp, #16
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	46c0      	nop			@ (mov r8, r8)
 80126ac:	ffffbfff 	.word	0xffffbfff

080126b0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126bc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	4920      	ldr	r1, [pc, #128]	@ (801274c <I2C_DMAMasterReceiveCplt+0x9c>)
 80126ca:	400a      	ands	r2, r1
 80126cc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d105      	bne.n	80126e4 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	2120      	movs	r1, #32
 80126dc:	0018      	movs	r0, r3
 80126de:	f000 fafb 	bl	8012cd8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80126e2:	e02e      	b.n	8012742 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126e8:	68fa      	ldr	r2, [r7, #12]
 80126ea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80126ec:	189a      	adds	r2, r3, r2
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	2bff      	cmp	r3, #255	@ 0xff
 80126fa:	d903      	bls.n	8012704 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	22ff      	movs	r2, #255	@ 0xff
 8012700:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012702:	e004      	b.n	801270e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012708:	b29a      	uxth	r2, r3
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	3324      	adds	r3, #36	@ 0x24
 8012718:	0019      	movs	r1, r3
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801271e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012724:	f7fd fa78 	bl	800fc18 <HAL_DMA_Start_IT>
 8012728:	1e03      	subs	r3, r0, #0
 801272a:	d005      	beq.n	8012738 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2110      	movs	r1, #16
 8012730:	0018      	movs	r0, r3
 8012732:	f7ff fe1f 	bl	8012374 <I2C_ITError>
}
 8012736:	e004      	b.n	8012742 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2140      	movs	r1, #64	@ 0x40
 801273c:	0018      	movs	r0, r3
 801273e:	f000 facb 	bl	8012cd8 <I2C_Enable_IRQ>
}
 8012742:	46c0      	nop			@ (mov r8, r8)
 8012744:	46bd      	mov	sp, r7
 8012746:	b004      	add	sp, #16
 8012748:	bd80      	pop	{r7, pc}
 801274a:	46c0      	nop			@ (mov r8, r8)
 801274c:	ffff7fff 	.word	0xffff7fff

08012750 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801275c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	685a      	ldr	r2, [r3, #4]
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	2180      	movs	r1, #128	@ 0x80
 801276a:	0209      	lsls	r1, r1, #8
 801276c:	430a      	orrs	r2, r1
 801276e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2110      	movs	r1, #16
 8012774:	0018      	movs	r0, r3
 8012776:	f7ff fdfd 	bl	8012374 <I2C_ITError>
}
 801277a:	46c0      	nop			@ (mov r8, r8)
 801277c:	46bd      	mov	sp, r7
 801277e:	b004      	add	sp, #16
 8012780:	bd80      	pop	{r7, pc}

08012782 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012782:	b580      	push	{r7, lr}
 8012784:	b084      	sub	sp, #16
 8012786:	af00      	add	r7, sp, #0
 8012788:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801278e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012794:	2b00      	cmp	r3, #0
 8012796:	d003      	beq.n	80127a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801279c:	2200      	movs	r2, #0
 801279e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d003      	beq.n	80127b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127ac:	2200      	movs	r2, #0
 80127ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	0018      	movs	r0, r3
 80127b4:	f7ff fee0 	bl	8012578 <I2C_TreatErrorCallback>
}
 80127b8:	46c0      	nop			@ (mov r8, r8)
 80127ba:	46bd      	mov	sp, r7
 80127bc:	b004      	add	sp, #16
 80127be:	bd80      	pop	{r7, pc}

080127c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	60f8      	str	r0, [r7, #12]
 80127c8:	60b9      	str	r1, [r7, #8]
 80127ca:	603b      	str	r3, [r7, #0]
 80127cc:	1dfb      	adds	r3, r7, #7
 80127ce:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80127d0:	e030      	b.n	8012834 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	3301      	adds	r3, #1
 80127d6:	d02d      	beq.n	8012834 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80127d8:	f7fc fccc 	bl	800f174 <HAL_GetTick>
 80127dc:	0002      	movs	r2, r0
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	1ad3      	subs	r3, r2, r3
 80127e2:	683a      	ldr	r2, [r7, #0]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d302      	bcc.n	80127ee <I2C_WaitOnFlagUntilTimeout+0x2e>
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d122      	bne.n	8012834 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	699b      	ldr	r3, [r3, #24]
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	4013      	ands	r3, r2
 80127f8:	68ba      	ldr	r2, [r7, #8]
 80127fa:	1ad3      	subs	r3, r2, r3
 80127fc:	425a      	negs	r2, r3
 80127fe:	4153      	adcs	r3, r2
 8012800:	b2db      	uxtb	r3, r3
 8012802:	001a      	movs	r2, r3
 8012804:	1dfb      	adds	r3, r7, #7
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	429a      	cmp	r2, r3
 801280a:	d113      	bne.n	8012834 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012810:	2220      	movs	r2, #32
 8012812:	431a      	orrs	r2, r3
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2241      	movs	r2, #65	@ 0x41
 801281c:	2120      	movs	r1, #32
 801281e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2242      	movs	r2, #66	@ 0x42
 8012824:	2100      	movs	r1, #0
 8012826:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	2240      	movs	r2, #64	@ 0x40
 801282c:	2100      	movs	r1, #0
 801282e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8012830:	2301      	movs	r3, #1
 8012832:	e00f      	b.n	8012854 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	699b      	ldr	r3, [r3, #24]
 801283a:	68ba      	ldr	r2, [r7, #8]
 801283c:	4013      	ands	r3, r2
 801283e:	68ba      	ldr	r2, [r7, #8]
 8012840:	1ad3      	subs	r3, r2, r3
 8012842:	425a      	negs	r2, r3
 8012844:	4153      	adcs	r3, r2
 8012846:	b2db      	uxtb	r3, r3
 8012848:	001a      	movs	r2, r3
 801284a:	1dfb      	adds	r3, r7, #7
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	429a      	cmp	r2, r3
 8012850:	d0bf      	beq.n	80127d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012852:	2300      	movs	r3, #0
}
 8012854:	0018      	movs	r0, r3
 8012856:	46bd      	mov	sp, r7
 8012858:	b004      	add	sp, #16
 801285a:	bd80      	pop	{r7, pc}

0801285c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0
 8012862:	60f8      	str	r0, [r7, #12]
 8012864:	60b9      	str	r1, [r7, #8]
 8012866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012868:	e032      	b.n	80128d0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801286a:	687a      	ldr	r2, [r7, #4]
 801286c:	68b9      	ldr	r1, [r7, #8]
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	0018      	movs	r0, r3
 8012872:	f000 f8ff 	bl	8012a74 <I2C_IsErrorOccurred>
 8012876:	1e03      	subs	r3, r0, #0
 8012878:	d001      	beq.n	801287e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801287a:	2301      	movs	r3, #1
 801287c:	e030      	b.n	80128e0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	3301      	adds	r3, #1
 8012882:	d025      	beq.n	80128d0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012884:	f7fc fc76 	bl	800f174 <HAL_GetTick>
 8012888:	0002      	movs	r2, r0
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	1ad3      	subs	r3, r2, r3
 801288e:	68ba      	ldr	r2, [r7, #8]
 8012890:	429a      	cmp	r2, r3
 8012892:	d302      	bcc.n	801289a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d11a      	bne.n	80128d0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	699b      	ldr	r3, [r3, #24]
 80128a0:	2202      	movs	r2, #2
 80128a2:	4013      	ands	r3, r2
 80128a4:	2b02      	cmp	r3, #2
 80128a6:	d013      	beq.n	80128d0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128ac:	2220      	movs	r2, #32
 80128ae:	431a      	orrs	r2, r3
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	2241      	movs	r2, #65	@ 0x41
 80128b8:	2120      	movs	r1, #32
 80128ba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	2242      	movs	r2, #66	@ 0x42
 80128c0:	2100      	movs	r1, #0
 80128c2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	2240      	movs	r2, #64	@ 0x40
 80128c8:	2100      	movs	r1, #0
 80128ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80128cc:	2301      	movs	r3, #1
 80128ce:	e007      	b.n	80128e0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	699b      	ldr	r3, [r3, #24]
 80128d6:	2202      	movs	r2, #2
 80128d8:	4013      	ands	r3, r2
 80128da:	2b02      	cmp	r3, #2
 80128dc:	d1c5      	bne.n	801286a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80128de:	2300      	movs	r3, #0
}
 80128e0:	0018      	movs	r0, r3
 80128e2:	46bd      	mov	sp, r7
 80128e4:	b004      	add	sp, #16
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	60b9      	str	r1, [r7, #8]
 80128f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80128f4:	e02f      	b.n	8012956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80128f6:	687a      	ldr	r2, [r7, #4]
 80128f8:	68b9      	ldr	r1, [r7, #8]
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	0018      	movs	r0, r3
 80128fe:	f000 f8b9 	bl	8012a74 <I2C_IsErrorOccurred>
 8012902:	1e03      	subs	r3, r0, #0
 8012904:	d001      	beq.n	801290a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012906:	2301      	movs	r3, #1
 8012908:	e02d      	b.n	8012966 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801290a:	f7fc fc33 	bl	800f174 <HAL_GetTick>
 801290e:	0002      	movs	r2, r0
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	1ad3      	subs	r3, r2, r3
 8012914:	68ba      	ldr	r2, [r7, #8]
 8012916:	429a      	cmp	r2, r3
 8012918:	d302      	bcc.n	8012920 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d11a      	bne.n	8012956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	699b      	ldr	r3, [r3, #24]
 8012926:	2220      	movs	r2, #32
 8012928:	4013      	ands	r3, r2
 801292a:	2b20      	cmp	r3, #32
 801292c:	d013      	beq.n	8012956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012932:	2220      	movs	r2, #32
 8012934:	431a      	orrs	r2, r3
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	2241      	movs	r2, #65	@ 0x41
 801293e:	2120      	movs	r1, #32
 8012940:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	2242      	movs	r2, #66	@ 0x42
 8012946:	2100      	movs	r1, #0
 8012948:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	2240      	movs	r2, #64	@ 0x40
 801294e:	2100      	movs	r1, #0
 8012950:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012952:	2301      	movs	r3, #1
 8012954:	e007      	b.n	8012966 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	699b      	ldr	r3, [r3, #24]
 801295c:	2220      	movs	r2, #32
 801295e:	4013      	ands	r3, r2
 8012960:	2b20      	cmp	r3, #32
 8012962:	d1c8      	bne.n	80128f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012964:	2300      	movs	r3, #0
}
 8012966:	0018      	movs	r0, r3
 8012968:	46bd      	mov	sp, r7
 801296a:	b004      	add	sp, #16
 801296c:	bd80      	pop	{r7, pc}
	...

08012970 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801297c:	e06b      	b.n	8012a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	68b9      	ldr	r1, [r7, #8]
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	0018      	movs	r0, r3
 8012986:	f000 f875 	bl	8012a74 <I2C_IsErrorOccurred>
 801298a:	1e03      	subs	r3, r0, #0
 801298c:	d001      	beq.n	8012992 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801298e:	2301      	movs	r3, #1
 8012990:	e069      	b.n	8012a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	699b      	ldr	r3, [r3, #24]
 8012998:	2220      	movs	r2, #32
 801299a:	4013      	ands	r3, r2
 801299c:	2b20      	cmp	r3, #32
 801299e:	d138      	bne.n	8012a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	699b      	ldr	r3, [r3, #24]
 80129a6:	2204      	movs	r2, #4
 80129a8:	4013      	ands	r3, r2
 80129aa:	2b04      	cmp	r3, #4
 80129ac:	d105      	bne.n	80129ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d001      	beq.n	80129ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80129b6:	2300      	movs	r3, #0
 80129b8:	e055      	b.n	8012a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	699b      	ldr	r3, [r3, #24]
 80129c0:	2210      	movs	r2, #16
 80129c2:	4013      	ands	r3, r2
 80129c4:	2b10      	cmp	r3, #16
 80129c6:	d107      	bne.n	80129d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	2210      	movs	r2, #16
 80129ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	2204      	movs	r2, #4
 80129d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80129d6:	e002      	b.n	80129de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	2200      	movs	r2, #0
 80129dc:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2220      	movs	r2, #32
 80129e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	685a      	ldr	r2, [r3, #4]
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	491f      	ldr	r1, [pc, #124]	@ (8012a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80129f2:	400a      	ands	r2, r1
 80129f4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2241      	movs	r2, #65	@ 0x41
 80129fa:	2120      	movs	r1, #32
 80129fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2242      	movs	r2, #66	@ 0x42
 8012a02:	2100      	movs	r1, #0
 8012a04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2240      	movs	r2, #64	@ 0x40
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012a0e:	2301      	movs	r3, #1
 8012a10:	e029      	b.n	8012a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012a12:	f7fc fbaf 	bl	800f174 <HAL_GetTick>
 8012a16:	0002      	movs	r2, r0
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	1ad3      	subs	r3, r2, r3
 8012a1c:	68ba      	ldr	r2, [r7, #8]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d302      	bcc.n	8012a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d116      	bne.n	8012a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	699b      	ldr	r3, [r3, #24]
 8012a2e:	2204      	movs	r2, #4
 8012a30:	4013      	ands	r3, r2
 8012a32:	2b04      	cmp	r3, #4
 8012a34:	d00f      	beq.n	8012a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a3a:	2220      	movs	r2, #32
 8012a3c:	431a      	orrs	r2, r3
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	2241      	movs	r2, #65	@ 0x41
 8012a46:	2120      	movs	r1, #32
 8012a48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2240      	movs	r2, #64	@ 0x40
 8012a4e:	2100      	movs	r1, #0
 8012a50:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012a52:	2301      	movs	r3, #1
 8012a54:	e007      	b.n	8012a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	699b      	ldr	r3, [r3, #24]
 8012a5c:	2204      	movs	r2, #4
 8012a5e:	4013      	ands	r3, r2
 8012a60:	2b04      	cmp	r3, #4
 8012a62:	d18c      	bne.n	801297e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012a64:	2300      	movs	r3, #0
}
 8012a66:	0018      	movs	r0, r3
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	b004      	add	sp, #16
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	46c0      	nop			@ (mov r8, r8)
 8012a70:	fe00e800 	.word	0xfe00e800

08012a74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b08a      	sub	sp, #40	@ 0x28
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	60f8      	str	r0, [r7, #12]
 8012a7c:	60b9      	str	r1, [r7, #8]
 8012a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012a80:	2327      	movs	r3, #39	@ 0x27
 8012a82:	18fb      	adds	r3, r7, r3
 8012a84:	2200      	movs	r2, #0
 8012a86:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	699b      	ldr	r3, [r3, #24]
 8012a8e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8012a90:	2300      	movs	r3, #0
 8012a92:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012a98:	69bb      	ldr	r3, [r7, #24]
 8012a9a:	2210      	movs	r2, #16
 8012a9c:	4013      	ands	r3, r2
 8012a9e:	d100      	bne.n	8012aa2 <I2C_IsErrorOccurred+0x2e>
 8012aa0:	e079      	b.n	8012b96 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	2210      	movs	r2, #16
 8012aa8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012aaa:	e057      	b.n	8012b5c <I2C_IsErrorOccurred+0xe8>
 8012aac:	2227      	movs	r2, #39	@ 0x27
 8012aae:	18bb      	adds	r3, r7, r2
 8012ab0:	18ba      	adds	r2, r7, r2
 8012ab2:	7812      	ldrb	r2, [r2, #0]
 8012ab4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	3301      	adds	r3, #1
 8012aba:	d04f      	beq.n	8012b5c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012abc:	f7fc fb5a 	bl	800f174 <HAL_GetTick>
 8012ac0:	0002      	movs	r2, r0
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	68ba      	ldr	r2, [r7, #8]
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d302      	bcc.n	8012ad2 <I2C_IsErrorOccurred+0x5e>
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d144      	bne.n	8012b5c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	685a      	ldr	r2, [r3, #4]
 8012ad8:	2380      	movs	r3, #128	@ 0x80
 8012ada:	01db      	lsls	r3, r3, #7
 8012adc:	4013      	ands	r3, r2
 8012ade:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012ae0:	2013      	movs	r0, #19
 8012ae2:	183b      	adds	r3, r7, r0
 8012ae4:	68fa      	ldr	r2, [r7, #12]
 8012ae6:	2142      	movs	r1, #66	@ 0x42
 8012ae8:	5c52      	ldrb	r2, [r2, r1]
 8012aea:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	699a      	ldr	r2, [r3, #24]
 8012af2:	2380      	movs	r3, #128	@ 0x80
 8012af4:	021b      	lsls	r3, r3, #8
 8012af6:	401a      	ands	r2, r3
 8012af8:	2380      	movs	r3, #128	@ 0x80
 8012afa:	021b      	lsls	r3, r3, #8
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d126      	bne.n	8012b4e <I2C_IsErrorOccurred+0xda>
 8012b00:	697a      	ldr	r2, [r7, #20]
 8012b02:	2380      	movs	r3, #128	@ 0x80
 8012b04:	01db      	lsls	r3, r3, #7
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d021      	beq.n	8012b4e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8012b0a:	183b      	adds	r3, r7, r0
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	2b20      	cmp	r3, #32
 8012b10:	d01d      	beq.n	8012b4e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	685a      	ldr	r2, [r3, #4]
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	2180      	movs	r1, #128	@ 0x80
 8012b1e:	01c9      	lsls	r1, r1, #7
 8012b20:	430a      	orrs	r2, r1
 8012b22:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012b24:	f7fc fb26 	bl	800f174 <HAL_GetTick>
 8012b28:	0003      	movs	r3, r0
 8012b2a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012b2c:	e00f      	b.n	8012b4e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8012b2e:	f7fc fb21 	bl	800f174 <HAL_GetTick>
 8012b32:	0002      	movs	r2, r0
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	1ad3      	subs	r3, r2, r3
 8012b38:	2b19      	cmp	r3, #25
 8012b3a:	d908      	bls.n	8012b4e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8012b3c:	6a3b      	ldr	r3, [r7, #32]
 8012b3e:	2220      	movs	r2, #32
 8012b40:	4313      	orrs	r3, r2
 8012b42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012b44:	2327      	movs	r3, #39	@ 0x27
 8012b46:	18fb      	adds	r3, r7, r3
 8012b48:	2201      	movs	r2, #1
 8012b4a:	701a      	strb	r2, [r3, #0]

              break;
 8012b4c:	e006      	b.n	8012b5c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	699b      	ldr	r3, [r3, #24]
 8012b54:	2220      	movs	r2, #32
 8012b56:	4013      	ands	r3, r2
 8012b58:	2b20      	cmp	r3, #32
 8012b5a:	d1e8      	bne.n	8012b2e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	699b      	ldr	r3, [r3, #24]
 8012b62:	2220      	movs	r2, #32
 8012b64:	4013      	ands	r3, r2
 8012b66:	2b20      	cmp	r3, #32
 8012b68:	d004      	beq.n	8012b74 <I2C_IsErrorOccurred+0x100>
 8012b6a:	2327      	movs	r3, #39	@ 0x27
 8012b6c:	18fb      	adds	r3, r7, r3
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d09b      	beq.n	8012aac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012b74:	2327      	movs	r3, #39	@ 0x27
 8012b76:	18fb      	adds	r3, r7, r3
 8012b78:	781b      	ldrb	r3, [r3, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d103      	bne.n	8012b86 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	2220      	movs	r2, #32
 8012b84:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012b86:	6a3b      	ldr	r3, [r7, #32]
 8012b88:	2204      	movs	r2, #4
 8012b8a:	4313      	orrs	r3, r2
 8012b8c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8012b8e:	2327      	movs	r3, #39	@ 0x27
 8012b90:	18fb      	adds	r3, r7, r3
 8012b92:	2201      	movs	r2, #1
 8012b94:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	699b      	ldr	r3, [r3, #24]
 8012b9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8012b9e:	69ba      	ldr	r2, [r7, #24]
 8012ba0:	2380      	movs	r3, #128	@ 0x80
 8012ba2:	005b      	lsls	r3, r3, #1
 8012ba4:	4013      	ands	r3, r2
 8012ba6:	d00c      	beq.n	8012bc2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012ba8:	6a3b      	ldr	r3, [r7, #32]
 8012baa:	2201      	movs	r2, #1
 8012bac:	4313      	orrs	r3, r2
 8012bae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	2280      	movs	r2, #128	@ 0x80
 8012bb6:	0052      	lsls	r2, r2, #1
 8012bb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012bba:	2327      	movs	r3, #39	@ 0x27
 8012bbc:	18fb      	adds	r3, r7, r3
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012bc2:	69ba      	ldr	r2, [r7, #24]
 8012bc4:	2380      	movs	r3, #128	@ 0x80
 8012bc6:	00db      	lsls	r3, r3, #3
 8012bc8:	4013      	ands	r3, r2
 8012bca:	d00c      	beq.n	8012be6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012bcc:	6a3b      	ldr	r3, [r7, #32]
 8012bce:	2208      	movs	r2, #8
 8012bd0:	4313      	orrs	r3, r2
 8012bd2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2280      	movs	r2, #128	@ 0x80
 8012bda:	00d2      	lsls	r2, r2, #3
 8012bdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012bde:	2327      	movs	r3, #39	@ 0x27
 8012be0:	18fb      	adds	r3, r7, r3
 8012be2:	2201      	movs	r2, #1
 8012be4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012be6:	69ba      	ldr	r2, [r7, #24]
 8012be8:	2380      	movs	r3, #128	@ 0x80
 8012bea:	009b      	lsls	r3, r3, #2
 8012bec:	4013      	ands	r3, r2
 8012bee:	d00c      	beq.n	8012c0a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012bf0:	6a3b      	ldr	r3, [r7, #32]
 8012bf2:	2202      	movs	r2, #2
 8012bf4:	4313      	orrs	r3, r2
 8012bf6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	2280      	movs	r2, #128	@ 0x80
 8012bfe:	0092      	lsls	r2, r2, #2
 8012c00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012c02:	2327      	movs	r3, #39	@ 0x27
 8012c04:	18fb      	adds	r3, r7, r3
 8012c06:	2201      	movs	r2, #1
 8012c08:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8012c0a:	2327      	movs	r3, #39	@ 0x27
 8012c0c:	18fb      	adds	r3, r7, r3
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d01d      	beq.n	8012c50 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	0018      	movs	r0, r3
 8012c18:	f7ff fcd7 	bl	80125ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	685a      	ldr	r2, [r3, #4]
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	490e      	ldr	r1, [pc, #56]	@ (8012c60 <I2C_IsErrorOccurred+0x1ec>)
 8012c28:	400a      	ands	r2, r1
 8012c2a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012c30:	6a3b      	ldr	r3, [r7, #32]
 8012c32:	431a      	orrs	r2, r3
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	2241      	movs	r2, #65	@ 0x41
 8012c3c:	2120      	movs	r1, #32
 8012c3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	2242      	movs	r2, #66	@ 0x42
 8012c44:	2100      	movs	r1, #0
 8012c46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	2240      	movs	r2, #64	@ 0x40
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8012c50:	2327      	movs	r3, #39	@ 0x27
 8012c52:	18fb      	adds	r3, r7, r3
 8012c54:	781b      	ldrb	r3, [r3, #0]
}
 8012c56:	0018      	movs	r0, r3
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	b00a      	add	sp, #40	@ 0x28
 8012c5c:	bd80      	pop	{r7, pc}
 8012c5e:	46c0      	nop			@ (mov r8, r8)
 8012c60:	fe00e800 	.word	0xfe00e800

08012c64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012c64:	b590      	push	{r4, r7, lr}
 8012c66:	b087      	sub	sp, #28
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	0008      	movs	r0, r1
 8012c6e:	0011      	movs	r1, r2
 8012c70:	607b      	str	r3, [r7, #4]
 8012c72:	240a      	movs	r4, #10
 8012c74:	193b      	adds	r3, r7, r4
 8012c76:	1c02      	adds	r2, r0, #0
 8012c78:	801a      	strh	r2, [r3, #0]
 8012c7a:	2009      	movs	r0, #9
 8012c7c:	183b      	adds	r3, r7, r0
 8012c7e:	1c0a      	adds	r2, r1, #0
 8012c80:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012c82:	193b      	adds	r3, r7, r4
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	059b      	lsls	r3, r3, #22
 8012c88:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012c8a:	183b      	adds	r3, r7, r0
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	0419      	lsls	r1, r3, #16
 8012c90:	23ff      	movs	r3, #255	@ 0xff
 8012c92:	041b      	lsls	r3, r3, #16
 8012c94:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012c96:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c9e:	4313      	orrs	r3, r2
 8012ca0:	005b      	lsls	r3, r3, #1
 8012ca2:	085b      	lsrs	r3, r3, #1
 8012ca4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	685b      	ldr	r3, [r3, #4]
 8012cac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012cae:	0d51      	lsrs	r1, r2, #21
 8012cb0:	2280      	movs	r2, #128	@ 0x80
 8012cb2:	00d2      	lsls	r2, r2, #3
 8012cb4:	400a      	ands	r2, r1
 8012cb6:	4907      	ldr	r1, [pc, #28]	@ (8012cd4 <I2C_TransferConfig+0x70>)
 8012cb8:	430a      	orrs	r2, r1
 8012cba:	43d2      	mvns	r2, r2
 8012cbc:	401a      	ands	r2, r3
 8012cbe:	0011      	movs	r1, r2
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	697a      	ldr	r2, [r7, #20]
 8012cc6:	430a      	orrs	r2, r1
 8012cc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012cca:	46c0      	nop			@ (mov r8, r8)
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	b007      	add	sp, #28
 8012cd0:	bd90      	pop	{r4, r7, pc}
 8012cd2:	46c0      	nop			@ (mov r8, r8)
 8012cd4:	03ff63ff 	.word	0x03ff63ff

08012cd8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b084      	sub	sp, #16
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	000a      	movs	r2, r1
 8012ce2:	1cbb      	adds	r3, r7, #2
 8012ce4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012cee:	4b3e      	ldr	r3, [pc, #248]	@ (8012de8 <I2C_Enable_IRQ+0x110>)
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d035      	beq.n	8012d60 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8012dec <I2C_Enable_IRQ+0x114>)
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	d030      	beq.n	8012d60 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012d02:	4b3b      	ldr	r3, [pc, #236]	@ (8012df0 <I2C_Enable_IRQ+0x118>)
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d02b      	beq.n	8012d60 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012d08:	1cbb      	adds	r3, r7, #2
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	5e9b      	ldrsh	r3, [r3, r2]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	da03      	bge.n	8012d1a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	22b8      	movs	r2, #184	@ 0xb8
 8012d16:	4313      	orrs	r3, r2
 8012d18:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012d1a:	1cbb      	adds	r3, r7, #2
 8012d1c:	881b      	ldrh	r3, [r3, #0]
 8012d1e:	2201      	movs	r2, #1
 8012d20:	4013      	ands	r3, r2
 8012d22:	d003      	beq.n	8012d2c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	22f2      	movs	r2, #242	@ 0xf2
 8012d28:	4313      	orrs	r3, r2
 8012d2a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012d2c:	1cbb      	adds	r3, r7, #2
 8012d2e:	881b      	ldrh	r3, [r3, #0]
 8012d30:	2202      	movs	r2, #2
 8012d32:	4013      	ands	r3, r2
 8012d34:	d003      	beq.n	8012d3e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	22f4      	movs	r2, #244	@ 0xf4
 8012d3a:	4313      	orrs	r3, r2
 8012d3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012d3e:	1cbb      	adds	r3, r7, #2
 8012d40:	881b      	ldrh	r3, [r3, #0]
 8012d42:	2b10      	cmp	r3, #16
 8012d44:	d103      	bne.n	8012d4e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	2290      	movs	r2, #144	@ 0x90
 8012d4a:	4313      	orrs	r3, r2
 8012d4c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012d4e:	1cbb      	adds	r3, r7, #2
 8012d50:	881b      	ldrh	r3, [r3, #0]
 8012d52:	2b20      	cmp	r3, #32
 8012d54:	d13c      	bne.n	8012dd0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2220      	movs	r2, #32
 8012d5a:	4313      	orrs	r3, r2
 8012d5c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012d5e:	e037      	b.n	8012dd0 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012d60:	1cbb      	adds	r3, r7, #2
 8012d62:	2200      	movs	r2, #0
 8012d64:	5e9b      	ldrsh	r3, [r3, r2]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	da03      	bge.n	8012d72 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	22b8      	movs	r2, #184	@ 0xb8
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012d72:	1cbb      	adds	r3, r7, #2
 8012d74:	881b      	ldrh	r3, [r3, #0]
 8012d76:	2201      	movs	r2, #1
 8012d78:	4013      	ands	r3, r2
 8012d7a:	d003      	beq.n	8012d84 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	22f2      	movs	r2, #242	@ 0xf2
 8012d80:	4313      	orrs	r3, r2
 8012d82:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012d84:	1cbb      	adds	r3, r7, #2
 8012d86:	881b      	ldrh	r3, [r3, #0]
 8012d88:	2202      	movs	r2, #2
 8012d8a:	4013      	ands	r3, r2
 8012d8c:	d003      	beq.n	8012d96 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	22f4      	movs	r2, #244	@ 0xf4
 8012d92:	4313      	orrs	r3, r2
 8012d94:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012d96:	1cbb      	adds	r3, r7, #2
 8012d98:	881b      	ldrh	r3, [r3, #0]
 8012d9a:	2b10      	cmp	r3, #16
 8012d9c:	d103      	bne.n	8012da6 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2290      	movs	r2, #144	@ 0x90
 8012da2:	4313      	orrs	r3, r2
 8012da4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012da6:	1cbb      	adds	r3, r7, #2
 8012da8:	881b      	ldrh	r3, [r3, #0]
 8012daa:	2b20      	cmp	r3, #32
 8012dac:	d103      	bne.n	8012db6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	2260      	movs	r2, #96	@ 0x60
 8012db2:	4313      	orrs	r3, r2
 8012db4:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012dba:	4b0d      	ldr	r3, [pc, #52]	@ (8012df0 <I2C_Enable_IRQ+0x118>)
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d007      	beq.n	8012dd0 <I2C_Enable_IRQ+0xf8>
 8012dc0:	1cbb      	adds	r3, r7, #2
 8012dc2:	881b      	ldrh	r3, [r3, #0]
 8012dc4:	2b40      	cmp	r3, #64	@ 0x40
 8012dc6:	d103      	bne.n	8012dd0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	2240      	movs	r2, #64	@ 0x40
 8012dcc:	4313      	orrs	r3, r2
 8012dce:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	6819      	ldr	r1, [r3, #0]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	68fa      	ldr	r2, [r7, #12]
 8012ddc:	430a      	orrs	r2, r1
 8012dde:	601a      	str	r2, [r3, #0]
}
 8012de0:	46c0      	nop			@ (mov r8, r8)
 8012de2:	46bd      	mov	sp, r7
 8012de4:	b004      	add	sp, #16
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	08011659 	.word	0x08011659
 8012dec:	08011a89 	.word	0x08011a89
 8012df0:	08011851 	.word	0x08011851

08012df4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b084      	sub	sp, #16
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	000a      	movs	r2, r1
 8012dfe:	1cbb      	adds	r3, r7, #2
 8012e00:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012e02:	2300      	movs	r3, #0
 8012e04:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012e06:	1cbb      	adds	r3, r7, #2
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	4013      	ands	r3, r2
 8012e0e:	d010      	beq.n	8012e32 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2242      	movs	r2, #66	@ 0x42
 8012e14:	4313      	orrs	r3, r2
 8012e16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2241      	movs	r2, #65	@ 0x41
 8012e1c:	5c9b      	ldrb	r3, [r3, r2]
 8012e1e:	b2db      	uxtb	r3, r3
 8012e20:	001a      	movs	r2, r3
 8012e22:	2328      	movs	r3, #40	@ 0x28
 8012e24:	4013      	ands	r3, r2
 8012e26:	2b28      	cmp	r3, #40	@ 0x28
 8012e28:	d003      	beq.n	8012e32 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	22b0      	movs	r2, #176	@ 0xb0
 8012e2e:	4313      	orrs	r3, r2
 8012e30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012e32:	1cbb      	adds	r3, r7, #2
 8012e34:	881b      	ldrh	r3, [r3, #0]
 8012e36:	2202      	movs	r2, #2
 8012e38:	4013      	ands	r3, r2
 8012e3a:	d010      	beq.n	8012e5e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	2244      	movs	r2, #68	@ 0x44
 8012e40:	4313      	orrs	r3, r2
 8012e42:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2241      	movs	r2, #65	@ 0x41
 8012e48:	5c9b      	ldrb	r3, [r3, r2]
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	001a      	movs	r2, r3
 8012e4e:	2328      	movs	r3, #40	@ 0x28
 8012e50:	4013      	ands	r3, r2
 8012e52:	2b28      	cmp	r3, #40	@ 0x28
 8012e54:	d003      	beq.n	8012e5e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	22b0      	movs	r2, #176	@ 0xb0
 8012e5a:	4313      	orrs	r3, r2
 8012e5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012e5e:	1cbb      	adds	r3, r7, #2
 8012e60:	2200      	movs	r2, #0
 8012e62:	5e9b      	ldrsh	r3, [r3, r2]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	da03      	bge.n	8012e70 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	22b8      	movs	r2, #184	@ 0xb8
 8012e6c:	4313      	orrs	r3, r2
 8012e6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012e70:	1cbb      	adds	r3, r7, #2
 8012e72:	881b      	ldrh	r3, [r3, #0]
 8012e74:	2b10      	cmp	r3, #16
 8012e76:	d103      	bne.n	8012e80 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	2290      	movs	r2, #144	@ 0x90
 8012e7c:	4313      	orrs	r3, r2
 8012e7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012e80:	1cbb      	adds	r3, r7, #2
 8012e82:	881b      	ldrh	r3, [r3, #0]
 8012e84:	2b20      	cmp	r3, #32
 8012e86:	d103      	bne.n	8012e90 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2220      	movs	r2, #32
 8012e8c:	4313      	orrs	r3, r2
 8012e8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8012e90:	1cbb      	adds	r3, r7, #2
 8012e92:	881b      	ldrh	r3, [r3, #0]
 8012e94:	2b40      	cmp	r3, #64	@ 0x40
 8012e96:	d103      	bne.n	8012ea0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2240      	movs	r2, #64	@ 0x40
 8012e9c:	4313      	orrs	r3, r2
 8012e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	681a      	ldr	r2, [r3, #0]
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	43d9      	mvns	r1, r3
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	400a      	ands	r2, r1
 8012eb0:	601a      	str	r2, [r3, #0]
}
 8012eb2:	46c0      	nop			@ (mov r8, r8)
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	b004      	add	sp, #16
 8012eb8:	bd80      	pop	{r7, pc}
	...

08012ebc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2241      	movs	r2, #65	@ 0x41
 8012eca:	5c9b      	ldrb	r3, [r3, r2]
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	2b20      	cmp	r3, #32
 8012ed0:	d138      	bne.n	8012f44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2240      	movs	r2, #64	@ 0x40
 8012ed6:	5c9b      	ldrb	r3, [r3, r2]
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	d101      	bne.n	8012ee0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012edc:	2302      	movs	r3, #2
 8012ede:	e032      	b.n	8012f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2240      	movs	r2, #64	@ 0x40
 8012ee4:	2101      	movs	r1, #1
 8012ee6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2241      	movs	r2, #65	@ 0x41
 8012eec:	2124      	movs	r1, #36	@ 0x24
 8012eee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	2101      	movs	r1, #1
 8012efc:	438a      	bics	r2, r1
 8012efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	681a      	ldr	r2, [r3, #0]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	4911      	ldr	r1, [pc, #68]	@ (8012f50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012f0c:	400a      	ands	r2, r1
 8012f0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	6819      	ldr	r1, [r3, #0]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	683a      	ldr	r2, [r7, #0]
 8012f1c:	430a      	orrs	r2, r1
 8012f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2101      	movs	r1, #1
 8012f2c:	430a      	orrs	r2, r1
 8012f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2241      	movs	r2, #65	@ 0x41
 8012f34:	2120      	movs	r1, #32
 8012f36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2240      	movs	r2, #64	@ 0x40
 8012f3c:	2100      	movs	r1, #0
 8012f3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012f40:	2300      	movs	r3, #0
 8012f42:	e000      	b.n	8012f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012f44:	2302      	movs	r3, #2
  }
}
 8012f46:	0018      	movs	r0, r3
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	b002      	add	sp, #8
 8012f4c:	bd80      	pop	{r7, pc}
 8012f4e:	46c0      	nop			@ (mov r8, r8)
 8012f50:	ffffefff 	.word	0xffffefff

08012f54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b084      	sub	sp, #16
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2241      	movs	r2, #65	@ 0x41
 8012f62:	5c9b      	ldrb	r3, [r3, r2]
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	2b20      	cmp	r3, #32
 8012f68:	d139      	bne.n	8012fde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2240      	movs	r2, #64	@ 0x40
 8012f6e:	5c9b      	ldrb	r3, [r3, r2]
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	d101      	bne.n	8012f78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012f74:	2302      	movs	r3, #2
 8012f76:	e033      	b.n	8012fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2240      	movs	r2, #64	@ 0x40
 8012f7c:	2101      	movs	r1, #1
 8012f7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2241      	movs	r2, #65	@ 0x41
 8012f84:	2124      	movs	r1, #36	@ 0x24
 8012f86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	2101      	movs	r1, #1
 8012f94:	438a      	bics	r2, r1
 8012f96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	4a11      	ldr	r2, [pc, #68]	@ (8012fe8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012fa4:	4013      	ands	r3, r2
 8012fa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	021b      	lsls	r3, r3, #8
 8012fac:	68fa      	ldr	r2, [r7, #12]
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	68fa      	ldr	r2, [r7, #12]
 8012fb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	681a      	ldr	r2, [r3, #0]
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	2101      	movs	r1, #1
 8012fc6:	430a      	orrs	r2, r1
 8012fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2241      	movs	r2, #65	@ 0x41
 8012fce:	2120      	movs	r1, #32
 8012fd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2240      	movs	r2, #64	@ 0x40
 8012fd6:	2100      	movs	r1, #0
 8012fd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	e000      	b.n	8012fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012fde:	2302      	movs	r3, #2
  }
}
 8012fe0:	0018      	movs	r0, r3
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	b004      	add	sp, #16
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	fffff0ff 	.word	0xfffff0ff

08012fec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b088      	sub	sp, #32
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d101      	bne.n	8012ffe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e0e1      	b.n	80131c2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2235      	movs	r2, #53	@ 0x35
 8013002:	5c9b      	ldrb	r3, [r3, r2]
 8013004:	b2db      	uxtb	r3, r3
 8013006:	2b00      	cmp	r3, #0
 8013008:	d107      	bne.n	801301a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2234      	movs	r2, #52	@ 0x34
 801300e:	2100      	movs	r1, #0
 8013010:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	0018      	movs	r0, r3
 8013016:	f7f4 fee1 	bl	8007ddc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2235      	movs	r2, #53	@ 0x35
 801301e:	2102      	movs	r1, #2
 8013020:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	69da      	ldr	r2, [r3, #28]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	4967      	ldr	r1, [pc, #412]	@ (80131cc <HAL_I2S_Init+0x1e0>)
 801302e:	400a      	ands	r2, r1
 8013030:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	2202      	movs	r2, #2
 8013038:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	695b      	ldr	r3, [r3, #20]
 801303e:	2b02      	cmp	r3, #2
 8013040:	d073      	beq.n	801312a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	68db      	ldr	r3, [r3, #12]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d102      	bne.n	8013050 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 801304a:	2310      	movs	r3, #16
 801304c:	617b      	str	r3, [r7, #20]
 801304e:	e001      	b.n	8013054 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8013050:	2320      	movs	r3, #32
 8013052:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	689b      	ldr	r3, [r3, #8]
 8013058:	2b20      	cmp	r3, #32
 801305a:	d802      	bhi.n	8013062 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	005b      	lsls	r3, r3, #1
 8013060:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8013062:	f002 fed3 	bl	8015e0c <HAL_RCC_GetSysClockFreq>
 8013066:	0003      	movs	r3, r0
 8013068:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	691a      	ldr	r2, [r3, #16]
 801306e:	2380      	movs	r3, #128	@ 0x80
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	429a      	cmp	r2, r3
 8013074:	d131      	bne.n	80130da <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d016      	beq.n	80130ac <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	009b      	lsls	r3, r3, #2
 8013082:	0019      	movs	r1, r3
 8013084:	68f8      	ldr	r0, [r7, #12]
 8013086:	f7ed f88d 	bl	80001a4 <__udivsi3>
 801308a:	0003      	movs	r3, r0
 801308c:	001a      	movs	r2, r3
 801308e:	0013      	movs	r3, r2
 8013090:	009b      	lsls	r3, r3, #2
 8013092:	189b      	adds	r3, r3, r2
 8013094:	005b      	lsls	r3, r3, #1
 8013096:	001a      	movs	r2, r3
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	695b      	ldr	r3, [r3, #20]
 801309c:	0019      	movs	r1, r3
 801309e:	0010      	movs	r0, r2
 80130a0:	f7ed f880 	bl	80001a4 <__udivsi3>
 80130a4:	0003      	movs	r3, r0
 80130a6:	3305      	adds	r3, #5
 80130a8:	613b      	str	r3, [r7, #16]
 80130aa:	e02a      	b.n	8013102 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	00db      	lsls	r3, r3, #3
 80130b0:	0019      	movs	r1, r3
 80130b2:	68f8      	ldr	r0, [r7, #12]
 80130b4:	f7ed f876 	bl	80001a4 <__udivsi3>
 80130b8:	0003      	movs	r3, r0
 80130ba:	001a      	movs	r2, r3
 80130bc:	0013      	movs	r3, r2
 80130be:	009b      	lsls	r3, r3, #2
 80130c0:	189b      	adds	r3, r3, r2
 80130c2:	005b      	lsls	r3, r3, #1
 80130c4:	001a      	movs	r2, r3
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	695b      	ldr	r3, [r3, #20]
 80130ca:	0019      	movs	r1, r3
 80130cc:	0010      	movs	r0, r2
 80130ce:	f7ed f869 	bl	80001a4 <__udivsi3>
 80130d2:	0003      	movs	r3, r0
 80130d4:	3305      	adds	r3, #5
 80130d6:	613b      	str	r3, [r7, #16]
 80130d8:	e013      	b.n	8013102 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80130da:	6979      	ldr	r1, [r7, #20]
 80130dc:	68f8      	ldr	r0, [r7, #12]
 80130de:	f7ed f861 	bl	80001a4 <__udivsi3>
 80130e2:	0003      	movs	r3, r0
 80130e4:	001a      	movs	r2, r3
 80130e6:	0013      	movs	r3, r2
 80130e8:	009b      	lsls	r3, r3, #2
 80130ea:	189b      	adds	r3, r3, r2
 80130ec:	005b      	lsls	r3, r3, #1
 80130ee:	001a      	movs	r2, r3
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	695b      	ldr	r3, [r3, #20]
 80130f4:	0019      	movs	r1, r3
 80130f6:	0010      	movs	r0, r2
 80130f8:	f7ed f854 	bl	80001a4 <__udivsi3>
 80130fc:	0003      	movs	r3, r0
 80130fe:	3305      	adds	r3, #5
 8013100:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	210a      	movs	r1, #10
 8013106:	0018      	movs	r0, r3
 8013108:	f7ed f84c 	bl	80001a4 <__udivsi3>
 801310c:	0003      	movs	r3, r0
 801310e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	2201      	movs	r2, #1
 8013114:	4013      	ands	r3, r2
 8013116:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8013118:	693a      	ldr	r2, [r7, #16]
 801311a:	69bb      	ldr	r3, [r7, #24]
 801311c:	1ad3      	subs	r3, r2, r3
 801311e:	085b      	lsrs	r3, r3, #1
 8013120:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8013122:	69bb      	ldr	r3, [r7, #24]
 8013124:	021b      	lsls	r3, r3, #8
 8013126:	61bb      	str	r3, [r7, #24]
 8013128:	e003      	b.n	8013132 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801312a:	2302      	movs	r3, #2
 801312c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 801312e:	2300      	movs	r3, #0
 8013130:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8013132:	69fb      	ldr	r3, [r7, #28]
 8013134:	2b01      	cmp	r3, #1
 8013136:	d902      	bls.n	801313e <HAL_I2S_Init+0x152>
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	2bff      	cmp	r3, #255	@ 0xff
 801313c:	d907      	bls.n	801314e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013142:	2210      	movs	r2, #16
 8013144:	431a      	orrs	r2, r3
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 801314a:	2301      	movs	r3, #1
 801314c:	e039      	b.n	80131c2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	691a      	ldr	r2, [r3, #16]
 8013152:	69bb      	ldr	r3, [r7, #24]
 8013154:	431a      	orrs	r2, r3
 8013156:	0011      	movs	r1, r2
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	69fa      	ldr	r2, [r7, #28]
 801315e:	430a      	orrs	r2, r1
 8013160:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	69db      	ldr	r3, [r3, #28]
 8013168:	4a18      	ldr	r2, [pc, #96]	@ (80131cc <HAL_I2S_Init+0x1e0>)
 801316a:	401a      	ands	r2, r3
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	6859      	ldr	r1, [r3, #4]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	689b      	ldr	r3, [r3, #8]
 8013174:	4319      	orrs	r1, r3
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	68db      	ldr	r3, [r3, #12]
 801317a:	4319      	orrs	r1, r3
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	699b      	ldr	r3, [r3, #24]
 8013180:	430b      	orrs	r3, r1
 8013182:	431a      	orrs	r2, r3
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	2180      	movs	r1, #128	@ 0x80
 801318a:	0109      	lsls	r1, r1, #4
 801318c:	430a      	orrs	r2, r1
 801318e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	689b      	ldr	r3, [r3, #8]
 8013194:	2b30      	cmp	r3, #48	@ 0x30
 8013196:	d003      	beq.n	80131a0 <HAL_I2S_Init+0x1b4>
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	689b      	ldr	r3, [r3, #8]
 801319c:	2bb0      	cmp	r3, #176	@ 0xb0
 801319e:	d108      	bne.n	80131b2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	69da      	ldr	r2, [r3, #28]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2180      	movs	r1, #128	@ 0x80
 80131ac:	0149      	lsls	r1, r1, #5
 80131ae:	430a      	orrs	r2, r1
 80131b0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2200      	movs	r2, #0
 80131b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2235      	movs	r2, #53	@ 0x35
 80131bc:	2101      	movs	r1, #1
 80131be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80131c0:	2300      	movs	r3, #0
}
 80131c2:	0018      	movs	r0, r3
 80131c4:	46bd      	mov	sp, r7
 80131c6:	b008      	add	sp, #32
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	46c0      	nop			@ (mov r8, r8)
 80131cc:	fffff040 	.word	0xfffff040

080131d0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b086      	sub	sp, #24
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	1dbb      	adds	r3, r7, #6
 80131dc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d003      	beq.n	80131ec <HAL_I2S_Receive_DMA+0x1c>
 80131e4:	1dbb      	adds	r3, r7, #6
 80131e6:	881b      	ldrh	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d101      	bne.n	80131f0 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80131ec:	2301      	movs	r3, #1
 80131ee:	e0a6      	b.n	801333e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2234      	movs	r2, #52	@ 0x34
 80131f4:	5c9b      	ldrb	r3, [r3, r2]
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d101      	bne.n	8013200 <HAL_I2S_Receive_DMA+0x30>
 80131fc:	2302      	movs	r3, #2
 80131fe:	e09e      	b.n	801333e <HAL_I2S_Receive_DMA+0x16e>
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	2234      	movs	r2, #52	@ 0x34
 8013204:	2101      	movs	r1, #1
 8013206:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2235      	movs	r2, #53	@ 0x35
 801320c:	5c9b      	ldrb	r3, [r3, r2]
 801320e:	b2db      	uxtb	r3, r3
 8013210:	2b01      	cmp	r3, #1
 8013212:	d005      	beq.n	8013220 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2234      	movs	r2, #52	@ 0x34
 8013218:	2100      	movs	r1, #0
 801321a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 801321c:	2302      	movs	r3, #2
 801321e:	e08e      	b.n	801333e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	2235      	movs	r2, #53	@ 0x35
 8013224:	2104      	movs	r1, #4
 8013226:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2200      	movs	r2, #0
 801322c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	68ba      	ldr	r2, [r7, #8]
 8013232:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	69db      	ldr	r3, [r3, #28]
 801323a:	2207      	movs	r2, #7
 801323c:	4013      	ands	r3, r2
 801323e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	2b03      	cmp	r3, #3
 8013244:	d002      	beq.n	801324c <HAL_I2S_Receive_DMA+0x7c>
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	2b05      	cmp	r3, #5
 801324a:	d10c      	bne.n	8013266 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 801324c:	1dbb      	adds	r3, r7, #6
 801324e:	881b      	ldrh	r3, [r3, #0]
 8013250:	18db      	adds	r3, r3, r3
 8013252:	b29a      	uxth	r2, r3
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8013258:	1dbb      	adds	r3, r7, #6
 801325a:	881b      	ldrh	r3, [r3, #0]
 801325c:	18db      	adds	r3, r3, r3
 801325e:	b29a      	uxth	r2, r3
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013264:	e007      	b.n	8013276 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	1dba      	adds	r2, r7, #6
 801326a:	8812      	ldrh	r2, [r2, #0]
 801326c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	1dba      	adds	r2, r7, #6
 8013272:	8812      	ldrh	r2, [r2, #0]
 8013274:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801327a:	4a33      	ldr	r2, [pc, #204]	@ (8013348 <HAL_I2S_Receive_DMA+0x178>)
 801327c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013282:	4a32      	ldr	r2, [pc, #200]	@ (801334c <HAL_I2S_Receive_DMA+0x17c>)
 8013284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801328a:	4a31      	ldr	r2, [pc, #196]	@ (8013350 <HAL_I2S_Receive_DMA+0x180>)
 801328c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	69da      	ldr	r2, [r3, #28]
 8013294:	23c0      	movs	r3, #192	@ 0xc0
 8013296:	009b      	lsls	r3, r3, #2
 8013298:	401a      	ands	r2, r3
 801329a:	23c0      	movs	r3, #192	@ 0xc0
 801329c:	009b      	lsls	r3, r3, #2
 801329e:	429a      	cmp	r2, r3
 80132a0:	d10a      	bne.n	80132b8 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80132a2:	2300      	movs	r3, #0
 80132a4:	613b      	str	r3, [r7, #16]
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	68db      	ldr	r3, [r3, #12]
 80132ac:	613b      	str	r3, [r7, #16]
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	689b      	ldr	r3, [r3, #8]
 80132b4:	613b      	str	r3, [r7, #16]
 80132b6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	330c      	adds	r3, #12
 80132c2:	0019      	movs	r1, r3
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132c8:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80132d0:	f7fc fca2 	bl	800fc18 <HAL_DMA_Start_IT>
 80132d4:	1e03      	subs	r3, r0, #0
 80132d6:	d00f      	beq.n	80132f8 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132dc:	2208      	movs	r2, #8
 80132de:	431a      	orrs	r2, r3
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2235      	movs	r2, #53	@ 0x35
 80132e8:	2101      	movs	r1, #1
 80132ea:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	2234      	movs	r2, #52	@ 0x34
 80132f0:	2100      	movs	r1, #0
 80132f2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80132f4:	2301      	movs	r3, #1
 80132f6:	e022      	b.n	801333e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	69da      	ldr	r2, [r3, #28]
 80132fe:	2380      	movs	r3, #128	@ 0x80
 8013300:	00db      	lsls	r3, r3, #3
 8013302:	4013      	ands	r3, r2
 8013304:	d108      	bne.n	8013318 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	69da      	ldr	r2, [r3, #28]
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	2180      	movs	r1, #128	@ 0x80
 8013312:	00c9      	lsls	r1, r1, #3
 8013314:	430a      	orrs	r2, r1
 8013316:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	2201      	movs	r2, #1
 8013320:	4013      	ands	r3, r2
 8013322:	d107      	bne.n	8013334 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	685a      	ldr	r2, [r3, #4]
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	2101      	movs	r1, #1
 8013330:	430a      	orrs	r2, r1
 8013332:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	2234      	movs	r2, #52	@ 0x34
 8013338:	2100      	movs	r1, #0
 801333a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 801333c:	2300      	movs	r3, #0
}
 801333e:	0018      	movs	r0, r3
 8013340:	46bd      	mov	sp, r7
 8013342:	b006      	add	sp, #24
 8013344:	bd80      	pop	{r7, pc}
 8013346:	46c0      	nop			@ (mov r8, r8)
 8013348:	08013531 	.word	0x08013531
 801334c:	080134ed 	.word	0x080134ed
 8013350:	0801354f 	.word	0x0801354f

08013354 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b086      	sub	sp, #24
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801335c:	2317      	movs	r3, #23
 801335e:	18fb      	adds	r3, r7, r3
 8013360:	2200      	movs	r2, #0
 8013362:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	685a      	ldr	r2, [r3, #4]
 8013368:	2380      	movs	r3, #128	@ 0x80
 801336a:	009b      	lsls	r3, r3, #2
 801336c:	429a      	cmp	r2, r3
 801336e:	d003      	beq.n	8013378 <HAL_I2S_DMAStop+0x24>
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	685b      	ldr	r3, [r3, #4]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d158      	bne.n	801342a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801337c:	2b00      	cmp	r3, #0
 801337e:	d010      	beq.n	80133a2 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013384:	0018      	movs	r0, r3
 8013386:	f7fc fcad 	bl	800fce4 <HAL_DMA_Abort>
 801338a:	1e03      	subs	r3, r0, #0
 801338c:	d009      	beq.n	80133a2 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013392:	2208      	movs	r2, #8
 8013394:	431a      	orrs	r2, r3
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801339a:	2317      	movs	r3, #23
 801339c:	18fb      	adds	r3, r7, r3
 801339e:	2201      	movs	r2, #1
 80133a0:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	2364      	movs	r3, #100	@ 0x64
 80133a6:	2201      	movs	r2, #1
 80133a8:	2102      	movs	r1, #2
 80133aa:	f000 f8f7 	bl	801359c <I2S_WaitFlagStateUntilTimeout>
 80133ae:	1e03      	subs	r3, r0, #0
 80133b0:	d00d      	beq.n	80133ce <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133b6:	2201      	movs	r2, #1
 80133b8:	431a      	orrs	r2, r3
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2235      	movs	r2, #53	@ 0x35
 80133c2:	2101      	movs	r1, #1
 80133c4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80133c6:	2317      	movs	r3, #23
 80133c8:	18fb      	adds	r3, r7, r3
 80133ca:	2201      	movs	r2, #1
 80133cc:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	2364      	movs	r3, #100	@ 0x64
 80133d2:	2200      	movs	r2, #0
 80133d4:	2180      	movs	r1, #128	@ 0x80
 80133d6:	f000 f8e1 	bl	801359c <I2S_WaitFlagStateUntilTimeout>
 80133da:	1e03      	subs	r3, r0, #0
 80133dc:	d00d      	beq.n	80133fa <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133e2:	2201      	movs	r2, #1
 80133e4:	431a      	orrs	r2, r3
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2235      	movs	r2, #53	@ 0x35
 80133ee:	2101      	movs	r1, #1
 80133f0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80133f2:	2317      	movs	r3, #23
 80133f4:	18fb      	adds	r3, r7, r3
 80133f6:	2201      	movs	r2, #1
 80133f8:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	69da      	ldr	r2, [r3, #28]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4938      	ldr	r1, [pc, #224]	@ (80134e8 <HAL_I2S_DMAStop+0x194>)
 8013406:	400a      	ands	r2, r1
 8013408:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801340a:	2300      	movs	r3, #0
 801340c:	613b      	str	r3, [r7, #16]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	689b      	ldr	r3, [r3, #8]
 8013414:	613b      	str	r3, [r7, #16]
 8013416:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	685a      	ldr	r2, [r3, #4]
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	2102      	movs	r1, #2
 8013424:	438a      	bics	r2, r1
 8013426:	605a      	str	r2, [r3, #4]
 8013428:	e053      	b.n	80134d2 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	685a      	ldr	r2, [r3, #4]
 801342e:	23c0      	movs	r3, #192	@ 0xc0
 8013430:	009b      	lsls	r3, r3, #2
 8013432:	429a      	cmp	r2, r3
 8013434:	d005      	beq.n	8013442 <HAL_I2S_DMAStop+0xee>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	685a      	ldr	r2, [r3, #4]
 801343a:	2380      	movs	r3, #128	@ 0x80
 801343c:	005b      	lsls	r3, r3, #1
 801343e:	429a      	cmp	r2, r3
 8013440:	d147      	bne.n	80134d2 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013446:	2b00      	cmp	r3, #0
 8013448:	d010      	beq.n	801346c <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801344e:	0018      	movs	r0, r3
 8013450:	f7fc fc48 	bl	800fce4 <HAL_DMA_Abort>
 8013454:	1e03      	subs	r3, r0, #0
 8013456:	d009      	beq.n	801346c <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801345c:	2208      	movs	r2, #8
 801345e:	431a      	orrs	r2, r3
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8013464:	2317      	movs	r3, #23
 8013466:	18fb      	adds	r3, r7, r3
 8013468:	2201      	movs	r2, #1
 801346a:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	69da      	ldr	r2, [r3, #28]
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	491c      	ldr	r1, [pc, #112]	@ (80134e8 <HAL_I2S_DMAStop+0x194>)
 8013478:	400a      	ands	r2, r1
 801347a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801347c:	2300      	movs	r3, #0
 801347e:	60fb      	str	r3, [r7, #12]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	60fb      	str	r3, [r7, #12]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	689b      	ldr	r3, [r3, #8]
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	685a      	ldr	r2, [r3, #4]
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	2101      	movs	r1, #1
 801349e:	438a      	bics	r2, r1
 80134a0:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	685a      	ldr	r2, [r3, #4]
 80134a6:	2380      	movs	r3, #128	@ 0x80
 80134a8:	005b      	lsls	r3, r3, #1
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d10e      	bne.n	80134cc <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134b2:	2240      	movs	r2, #64	@ 0x40
 80134b4:	431a      	orrs	r2, r3
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2235      	movs	r2, #53	@ 0x35
 80134be:	2101      	movs	r1, #1
 80134c0:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80134c2:	2317      	movs	r3, #23
 80134c4:	18fb      	adds	r3, r7, r3
 80134c6:	2201      	movs	r2, #1
 80134c8:	701a      	strb	r2, [r3, #0]
 80134ca:	e002      	b.n	80134d2 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2235      	movs	r2, #53	@ 0x35
 80134d6:	2101      	movs	r1, #1
 80134d8:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80134da:	2317      	movs	r3, #23
 80134dc:	18fb      	adds	r3, r7, r3
 80134de:	781b      	ldrb	r3, [r3, #0]
}
 80134e0:	0018      	movs	r0, r3
 80134e2:	46bd      	mov	sp, r7
 80134e4:	b006      	add	sp, #24
 80134e6:	bd80      	pop	{r7, pc}
 80134e8:	fffffbff 	.word	0xfffffbff

080134ec <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134f8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	69db      	ldr	r3, [r3, #28]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d10e      	bne.n	8013520 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	685a      	ldr	r2, [r3, #4]
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	2101      	movs	r1, #1
 801350e:	438a      	bics	r2, r1
 8013510:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	2200      	movs	r2, #0
 8013516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2235      	movs	r2, #53	@ 0x35
 801351c:	2101      	movs	r1, #1
 801351e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	0018      	movs	r0, r3
 8013524:	f7f9 f954 	bl	800c7d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013528:	46c0      	nop			@ (mov r8, r8)
 801352a:	46bd      	mov	sp, r7
 801352c:	b004      	add	sp, #16
 801352e:	bd80      	pop	{r7, pc}

08013530 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b084      	sub	sp, #16
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801353c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	0018      	movs	r0, r3
 8013542:	f7f9 f933 	bl	800c7ac <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013546:	46c0      	nop			@ (mov r8, r8)
 8013548:	46bd      	mov	sp, r7
 801354a:	b004      	add	sp, #16
 801354c:	bd80      	pop	{r7, pc}

0801354e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801354e:	b580      	push	{r7, lr}
 8013550:	b084      	sub	sp, #16
 8013552:	af00      	add	r7, sp, #0
 8013554:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801355a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	685a      	ldr	r2, [r3, #4]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2103      	movs	r1, #3
 8013568:	438a      	bics	r2, r1
 801356a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2200      	movs	r2, #0
 8013570:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	2200      	movs	r2, #0
 8013576:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	2235      	movs	r2, #53	@ 0x35
 801357c:	2101      	movs	r1, #1
 801357e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013584:	2208      	movs	r2, #8
 8013586:	431a      	orrs	r2, r3
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	0018      	movs	r0, r3
 8013590:	f7f9 f96c 	bl	800c86c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013594:	46c0      	nop			@ (mov r8, r8)
 8013596:	46bd      	mov	sp, r7
 8013598:	b004      	add	sp, #16
 801359a:	bd80      	pop	{r7, pc}

0801359c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b086      	sub	sp, #24
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	603b      	str	r3, [r7, #0]
 80135a8:	1dfb      	adds	r3, r7, #7
 80135aa:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80135ac:	f7fb fde2 	bl	800f174 <HAL_GetTick>
 80135b0:	0003      	movs	r3, r0
 80135b2:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80135b4:	e017      	b.n	80135e6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	3301      	adds	r3, #1
 80135ba:	d014      	beq.n	80135e6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80135bc:	f7fb fdda 	bl	800f174 <HAL_GetTick>
 80135c0:	0002      	movs	r2, r0
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	1ad3      	subs	r3, r2, r3
 80135c6:	683a      	ldr	r2, [r7, #0]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d902      	bls.n	80135d2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d109      	bne.n	80135e6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2235      	movs	r2, #53	@ 0x35
 80135d6:	2101      	movs	r1, #1
 80135d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2234      	movs	r2, #52	@ 0x34
 80135de:	2100      	movs	r1, #0
 80135e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80135e2:	2303      	movs	r3, #3
 80135e4:	e00f      	b.n	8013606 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	689b      	ldr	r3, [r3, #8]
 80135ec:	68ba      	ldr	r2, [r7, #8]
 80135ee:	4013      	ands	r3, r2
 80135f0:	68ba      	ldr	r2, [r7, #8]
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	425a      	negs	r2, r3
 80135f6:	4153      	adcs	r3, r2
 80135f8:	b2db      	uxtb	r3, r3
 80135fa:	001a      	movs	r2, r3
 80135fc:	1dfb      	adds	r3, r7, #7
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	429a      	cmp	r2, r3
 8013602:	d1d8      	bne.n	80135b6 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8013604:	2300      	movs	r3, #0
}
 8013606:	0018      	movs	r0, r3
 8013608:	46bd      	mov	sp, r7
 801360a:	b006      	add	sp, #24
 801360c:	bd80      	pop	{r7, pc}
	...

08013610 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013612:	b08b      	sub	sp, #44	@ 0x2c
 8013614:	af06      	add	r7, sp, #24
 8013616:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d101      	bne.n	8013622 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801361e:	2301      	movs	r3, #1
 8013620:	e0f0      	b.n	8013804 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4a79      	ldr	r2, [pc, #484]	@ (801380c <HAL_PCD_Init+0x1fc>)
 8013626:	5c9b      	ldrb	r3, [r3, r2]
 8013628:	b2db      	uxtb	r3, r3
 801362a:	2b00      	cmp	r3, #0
 801362c:	d108      	bne.n	8013640 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801362e:	687a      	ldr	r2, [r7, #4]
 8013630:	23aa      	movs	r3, #170	@ 0xaa
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	2100      	movs	r1, #0
 8013636:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	0018      	movs	r0, r3
 801363c:	f009 ff4a 	bl	801d4d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	4a72      	ldr	r2, [pc, #456]	@ (801380c <HAL_PCD_Init+0x1fc>)
 8013644:	2103      	movs	r1, #3
 8013646:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	0018      	movs	r0, r3
 801364e:	f005 fefd 	bl	801944c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013652:	230f      	movs	r3, #15
 8013654:	18fb      	adds	r3, r7, r3
 8013656:	2200      	movs	r2, #0
 8013658:	701a      	strb	r2, [r3, #0]
 801365a:	e049      	b.n	80136f0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801365c:	200f      	movs	r0, #15
 801365e:	183b      	adds	r3, r7, r0
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	6879      	ldr	r1, [r7, #4]
 8013664:	1c5a      	adds	r2, r3, #1
 8013666:	0013      	movs	r3, r2
 8013668:	009b      	lsls	r3, r3, #2
 801366a:	189b      	adds	r3, r3, r2
 801366c:	00db      	lsls	r3, r3, #3
 801366e:	18cb      	adds	r3, r1, r3
 8013670:	3301      	adds	r3, #1
 8013672:	2201      	movs	r2, #1
 8013674:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013676:	183b      	adds	r3, r7, r0
 8013678:	781b      	ldrb	r3, [r3, #0]
 801367a:	6879      	ldr	r1, [r7, #4]
 801367c:	1c5a      	adds	r2, r3, #1
 801367e:	0013      	movs	r3, r2
 8013680:	009b      	lsls	r3, r3, #2
 8013682:	189b      	adds	r3, r3, r2
 8013684:	00db      	lsls	r3, r3, #3
 8013686:	183a      	adds	r2, r7, r0
 8013688:	7812      	ldrb	r2, [r2, #0]
 801368a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801368c:	183b      	adds	r3, r7, r0
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	6879      	ldr	r1, [r7, #4]
 8013692:	1c5a      	adds	r2, r3, #1
 8013694:	0013      	movs	r3, r2
 8013696:	009b      	lsls	r3, r3, #2
 8013698:	189b      	adds	r3, r3, r2
 801369a:	00db      	lsls	r3, r3, #3
 801369c:	18cb      	adds	r3, r1, r3
 801369e:	3303      	adds	r3, #3
 80136a0:	2200      	movs	r2, #0
 80136a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80136a4:	183b      	adds	r3, r7, r0
 80136a6:	781a      	ldrb	r2, [r3, #0]
 80136a8:	6879      	ldr	r1, [r7, #4]
 80136aa:	0013      	movs	r3, r2
 80136ac:	009b      	lsls	r3, r3, #2
 80136ae:	189b      	adds	r3, r3, r2
 80136b0:	00db      	lsls	r3, r3, #3
 80136b2:	18cb      	adds	r3, r1, r3
 80136b4:	3338      	adds	r3, #56	@ 0x38
 80136b6:	2200      	movs	r2, #0
 80136b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80136ba:	183b      	adds	r3, r7, r0
 80136bc:	781a      	ldrb	r2, [r3, #0]
 80136be:	6879      	ldr	r1, [r7, #4]
 80136c0:	0013      	movs	r3, r2
 80136c2:	009b      	lsls	r3, r3, #2
 80136c4:	189b      	adds	r3, r3, r2
 80136c6:	00db      	lsls	r3, r3, #3
 80136c8:	18cb      	adds	r3, r1, r3
 80136ca:	333c      	adds	r3, #60	@ 0x3c
 80136cc:	2200      	movs	r2, #0
 80136ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80136d0:	183b      	adds	r3, r7, r0
 80136d2:	781a      	ldrb	r2, [r3, #0]
 80136d4:	6879      	ldr	r1, [r7, #4]
 80136d6:	0013      	movs	r3, r2
 80136d8:	009b      	lsls	r3, r3, #2
 80136da:	189b      	adds	r3, r3, r2
 80136dc:	00db      	lsls	r3, r3, #3
 80136de:	18cb      	adds	r3, r1, r3
 80136e0:	3340      	adds	r3, #64	@ 0x40
 80136e2:	2200      	movs	r2, #0
 80136e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80136e6:	183b      	adds	r3, r7, r0
 80136e8:	781a      	ldrb	r2, [r3, #0]
 80136ea:	183b      	adds	r3, r7, r0
 80136ec:	3201      	adds	r2, #1
 80136ee:	701a      	strb	r2, [r3, #0]
 80136f0:	210f      	movs	r1, #15
 80136f2:	187b      	adds	r3, r7, r1
 80136f4:	781a      	ldrb	r2, [r3, #0]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d3ae      	bcc.n	801365c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80136fe:	187b      	adds	r3, r7, r1
 8013700:	2200      	movs	r2, #0
 8013702:	701a      	strb	r2, [r3, #0]
 8013704:	e056      	b.n	80137b4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013706:	240f      	movs	r4, #15
 8013708:	193b      	adds	r3, r7, r4
 801370a:	781a      	ldrb	r2, [r3, #0]
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	236a      	movs	r3, #106	@ 0x6a
 8013710:	33ff      	adds	r3, #255	@ 0xff
 8013712:	0019      	movs	r1, r3
 8013714:	0013      	movs	r3, r2
 8013716:	009b      	lsls	r3, r3, #2
 8013718:	189b      	adds	r3, r3, r2
 801371a:	00db      	lsls	r3, r3, #3
 801371c:	18c3      	adds	r3, r0, r3
 801371e:	185b      	adds	r3, r3, r1
 8013720:	2200      	movs	r2, #0
 8013722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013724:	193b      	adds	r3, r7, r4
 8013726:	781a      	ldrb	r2, [r3, #0]
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	23b4      	movs	r3, #180	@ 0xb4
 801372c:	0059      	lsls	r1, r3, #1
 801372e:	0013      	movs	r3, r2
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	189b      	adds	r3, r3, r2
 8013734:	00db      	lsls	r3, r3, #3
 8013736:	18c3      	adds	r3, r0, r3
 8013738:	185b      	adds	r3, r3, r1
 801373a:	193a      	adds	r2, r7, r4
 801373c:	7812      	ldrb	r2, [r2, #0]
 801373e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013740:	193b      	adds	r3, r7, r4
 8013742:	781a      	ldrb	r2, [r3, #0]
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	236c      	movs	r3, #108	@ 0x6c
 8013748:	33ff      	adds	r3, #255	@ 0xff
 801374a:	0019      	movs	r1, r3
 801374c:	0013      	movs	r3, r2
 801374e:	009b      	lsls	r3, r3, #2
 8013750:	189b      	adds	r3, r3, r2
 8013752:	00db      	lsls	r3, r3, #3
 8013754:	18c3      	adds	r3, r0, r3
 8013756:	185b      	adds	r3, r3, r1
 8013758:	2200      	movs	r2, #0
 801375a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801375c:	193b      	adds	r3, r7, r4
 801375e:	781a      	ldrb	r2, [r3, #0]
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	23bc      	movs	r3, #188	@ 0xbc
 8013764:	0059      	lsls	r1, r3, #1
 8013766:	0013      	movs	r3, r2
 8013768:	009b      	lsls	r3, r3, #2
 801376a:	189b      	adds	r3, r3, r2
 801376c:	00db      	lsls	r3, r3, #3
 801376e:	18c3      	adds	r3, r0, r3
 8013770:	185b      	adds	r3, r3, r1
 8013772:	2200      	movs	r2, #0
 8013774:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013776:	193b      	adds	r3, r7, r4
 8013778:	781a      	ldrb	r2, [r3, #0]
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	23be      	movs	r3, #190	@ 0xbe
 801377e:	0059      	lsls	r1, r3, #1
 8013780:	0013      	movs	r3, r2
 8013782:	009b      	lsls	r3, r3, #2
 8013784:	189b      	adds	r3, r3, r2
 8013786:	00db      	lsls	r3, r3, #3
 8013788:	18c3      	adds	r3, r0, r3
 801378a:	185b      	adds	r3, r3, r1
 801378c:	2200      	movs	r2, #0
 801378e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013790:	193b      	adds	r3, r7, r4
 8013792:	781a      	ldrb	r2, [r3, #0]
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	23c0      	movs	r3, #192	@ 0xc0
 8013798:	0059      	lsls	r1, r3, #1
 801379a:	0013      	movs	r3, r2
 801379c:	009b      	lsls	r3, r3, #2
 801379e:	189b      	adds	r3, r3, r2
 80137a0:	00db      	lsls	r3, r3, #3
 80137a2:	18c3      	adds	r3, r0, r3
 80137a4:	185b      	adds	r3, r3, r1
 80137a6:	2200      	movs	r2, #0
 80137a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80137aa:	193b      	adds	r3, r7, r4
 80137ac:	781a      	ldrb	r2, [r3, #0]
 80137ae:	193b      	adds	r3, r7, r4
 80137b0:	3201      	adds	r2, #1
 80137b2:	701a      	strb	r2, [r3, #0]
 80137b4:	230f      	movs	r3, #15
 80137b6:	18fb      	adds	r3, r7, r3
 80137b8:	781a      	ldrb	r2, [r3, #0]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d3a1      	bcc.n	8013706 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6818      	ldr	r0, [r3, #0]
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	466a      	mov	r2, sp
 80137ca:	0011      	movs	r1, r2
 80137cc:	001a      	movs	r2, r3
 80137ce:	3210      	adds	r2, #16
 80137d0:	ca70      	ldmia	r2!, {r4, r5, r6}
 80137d2:	c170      	stmia	r1!, {r4, r5, r6}
 80137d4:	ca30      	ldmia	r2!, {r4, r5}
 80137d6:	c130      	stmia	r1!, {r4, r5}
 80137d8:	6859      	ldr	r1, [r3, #4]
 80137da:	689a      	ldr	r2, [r3, #8]
 80137dc:	68db      	ldr	r3, [r3, #12]
 80137de:	f005 fe4f 	bl	8019480 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2224      	movs	r2, #36	@ 0x24
 80137e6:	2100      	movs	r1, #0
 80137e8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4a07      	ldr	r2, [pc, #28]	@ (801380c <HAL_PCD_Init+0x1fc>)
 80137ee:	2101      	movs	r1, #1
 80137f0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	69db      	ldr	r3, [r3, #28]
 80137f6:	2b01      	cmp	r3, #1
 80137f8:	d103      	bne.n	8013802 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	0018      	movs	r0, r3
 80137fe:	f001 fd23 	bl	8015248 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8013802:	2300      	movs	r3, #0
}
 8013804:	0018      	movs	r0, r3
 8013806:	46bd      	mov	sp, r7
 8013808:	b005      	add	sp, #20
 801380a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801380c:	000002a9 	.word	0x000002a9

08013810 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013818:	687a      	ldr	r2, [r7, #4]
 801381a:	23aa      	movs	r3, #170	@ 0xaa
 801381c:	009b      	lsls	r3, r3, #2
 801381e:	5cd3      	ldrb	r3, [r2, r3]
 8013820:	2b01      	cmp	r3, #1
 8013822:	d101      	bne.n	8013828 <HAL_PCD_Start+0x18>
 8013824:	2302      	movs	r3, #2
 8013826:	e014      	b.n	8013852 <HAL_PCD_Start+0x42>
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	23aa      	movs	r3, #170	@ 0xaa
 801382c:	009b      	lsls	r3, r3, #2
 801382e:	2101      	movs	r1, #1
 8013830:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	0018      	movs	r0, r3
 8013838:	f005 fdf2 	bl	8019420 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	0018      	movs	r0, r3
 8013842:	f007 fdf5 	bl	801b430 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	23aa      	movs	r3, #170	@ 0xaa
 801384a:	009b      	lsls	r3, r3, #2
 801384c:	2100      	movs	r1, #0
 801384e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013850:	2300      	movs	r3, #0
}
 8013852:	0018      	movs	r0, r3
 8013854:	46bd      	mov	sp, r7
 8013856:	b002      	add	sp, #8
 8013858:	bd80      	pop	{r7, pc}
	...

0801385c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	0018      	movs	r0, r3
 801386a:	f007 fdf7 	bl	801b45c <USB_ReadInterrupts>
 801386e:	0003      	movs	r3, r0
 8013870:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8013872:	68fa      	ldr	r2, [r7, #12]
 8013874:	2380      	movs	r3, #128	@ 0x80
 8013876:	021b      	lsls	r3, r3, #8
 8013878:	4013      	ands	r3, r2
 801387a:	d004      	beq.n	8013886 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	0018      	movs	r0, r3
 8013880:	f000 fb62 	bl	8013f48 <PCD_EP_ISR_Handler>

    return;
 8013884:	e11d      	b.n	8013ac2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8013886:	68fa      	ldr	r2, [r7, #12]
 8013888:	2380      	movs	r3, #128	@ 0x80
 801388a:	00db      	lsls	r3, r3, #3
 801388c:	4013      	ands	r3, r2
 801388e:	d015      	beq.n	80138bc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	2244      	movs	r2, #68	@ 0x44
 8013896:	5a9b      	ldrh	r3, [r3, r2]
 8013898:	b29a      	uxth	r2, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	498a      	ldr	r1, [pc, #552]	@ (8013ac8 <HAL_PCD_IRQHandler+0x26c>)
 80138a0:	400a      	ands	r2, r1
 80138a2:	b291      	uxth	r1, r2
 80138a4:	2244      	movs	r2, #68	@ 0x44
 80138a6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	0018      	movs	r0, r3
 80138ac:	f009 fe95 	bl	801d5da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2100      	movs	r1, #0
 80138b4:	0018      	movs	r0, r3
 80138b6:	f000 f915 	bl	8013ae4 <HAL_PCD_SetAddress>

    return;
 80138ba:	e102      	b.n	8013ac2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80138bc:	68fa      	ldr	r2, [r7, #12]
 80138be:	2380      	movs	r3, #128	@ 0x80
 80138c0:	01db      	lsls	r3, r3, #7
 80138c2:	4013      	ands	r3, r2
 80138c4:	d00c      	beq.n	80138e0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2244      	movs	r2, #68	@ 0x44
 80138cc:	5a9b      	ldrh	r3, [r3, r2]
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	497d      	ldr	r1, [pc, #500]	@ (8013acc <HAL_PCD_IRQHandler+0x270>)
 80138d6:	400a      	ands	r2, r1
 80138d8:	b291      	uxth	r1, r2
 80138da:	2244      	movs	r2, #68	@ 0x44
 80138dc:	5299      	strh	r1, [r3, r2]

    return;
 80138de:	e0f0      	b.n	8013ac2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80138e0:	68fa      	ldr	r2, [r7, #12]
 80138e2:	2380      	movs	r3, #128	@ 0x80
 80138e4:	019b      	lsls	r3, r3, #6
 80138e6:	4013      	ands	r3, r2
 80138e8:	d00c      	beq.n	8013904 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	2244      	movs	r2, #68	@ 0x44
 80138f0:	5a9b      	ldrh	r3, [r3, r2]
 80138f2:	b29a      	uxth	r2, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	4975      	ldr	r1, [pc, #468]	@ (8013ad0 <HAL_PCD_IRQHandler+0x274>)
 80138fa:	400a      	ands	r2, r1
 80138fc:	b291      	uxth	r1, r2
 80138fe:	2244      	movs	r2, #68	@ 0x44
 8013900:	5299      	strh	r1, [r3, r2]

    return;
 8013902:	e0de      	b.n	8013ac2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8013904:	68fa      	ldr	r2, [r7, #12]
 8013906:	2380      	movs	r3, #128	@ 0x80
 8013908:	015b      	lsls	r3, r3, #5
 801390a:	4013      	ands	r3, r2
 801390c:	d038      	beq.n	8013980 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2240      	movs	r2, #64	@ 0x40
 8013914:	5a9b      	ldrh	r3, [r3, r2]
 8013916:	b29a      	uxth	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2104      	movs	r1, #4
 801391e:	438a      	bics	r2, r1
 8013920:	b291      	uxth	r1, r2
 8013922:	2240      	movs	r2, #64	@ 0x40
 8013924:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	2240      	movs	r2, #64	@ 0x40
 801392c:	5a9b      	ldrh	r3, [r3, r2]
 801392e:	b29a      	uxth	r2, r3
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	2108      	movs	r1, #8
 8013936:	438a      	bics	r2, r1
 8013938:	b291      	uxth	r1, r2
 801393a:	2240      	movs	r2, #64	@ 0x40
 801393c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801393e:	687a      	ldr	r2, [r7, #4]
 8013940:	23b8      	movs	r3, #184	@ 0xb8
 8013942:	009b      	lsls	r3, r3, #2
 8013944:	5cd3      	ldrb	r3, [r2, r3]
 8013946:	2b01      	cmp	r3, #1
 8013948:	d109      	bne.n	801395e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	23b8      	movs	r3, #184	@ 0xb8
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	2100      	movs	r1, #0
 8013952:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2100      	movs	r1, #0
 8013958:	0018      	movs	r0, r3
 801395a:	f001 fc9f 	bl	801529c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	0018      	movs	r0, r3
 8013962:	f009 fe7b 	bl	801d65c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2244      	movs	r2, #68	@ 0x44
 801396c:	5a9b      	ldrh	r3, [r3, r2]
 801396e:	b29a      	uxth	r2, r3
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	4957      	ldr	r1, [pc, #348]	@ (8013ad4 <HAL_PCD_IRQHandler+0x278>)
 8013976:	400a      	ands	r2, r1
 8013978:	b291      	uxth	r1, r2
 801397a:	2244      	movs	r2, #68	@ 0x44
 801397c:	5299      	strh	r1, [r3, r2]

    return;
 801397e:	e0a0      	b.n	8013ac2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8013980:	68fa      	ldr	r2, [r7, #12]
 8013982:	2380      	movs	r3, #128	@ 0x80
 8013984:	011b      	lsls	r3, r3, #4
 8013986:	4013      	ands	r3, r2
 8013988:	d028      	beq.n	80139dc <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2240      	movs	r2, #64	@ 0x40
 8013990:	5a9b      	ldrh	r3, [r3, r2]
 8013992:	b29a      	uxth	r2, r3
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	2108      	movs	r1, #8
 801399a:	430a      	orrs	r2, r1
 801399c:	b291      	uxth	r1, r2
 801399e:	2240      	movs	r2, #64	@ 0x40
 80139a0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	2244      	movs	r2, #68	@ 0x44
 80139a8:	5a9b      	ldrh	r3, [r3, r2]
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	4949      	ldr	r1, [pc, #292]	@ (8013ad8 <HAL_PCD_IRQHandler+0x27c>)
 80139b2:	400a      	ands	r2, r1
 80139b4:	b291      	uxth	r1, r2
 80139b6:	2244      	movs	r2, #68	@ 0x44
 80139b8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	2240      	movs	r2, #64	@ 0x40
 80139c0:	5a9b      	ldrh	r3, [r3, r2]
 80139c2:	b29a      	uxth	r2, r3
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	2104      	movs	r1, #4
 80139ca:	430a      	orrs	r2, r1
 80139cc:	b291      	uxth	r1, r2
 80139ce:	2240      	movs	r2, #64	@ 0x40
 80139d0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	0018      	movs	r0, r3
 80139d6:	f009 fe25 	bl	801d624 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80139da:	e072      	b.n	8013ac2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	2280      	movs	r2, #128	@ 0x80
 80139e0:	4013      	ands	r3, r2
 80139e2:	d046      	beq.n	8013a72 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2244      	movs	r2, #68	@ 0x44
 80139ea:	5a9b      	ldrh	r3, [r3, r2]
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	2180      	movs	r1, #128	@ 0x80
 80139f4:	438a      	bics	r2, r1
 80139f6:	b291      	uxth	r1, r2
 80139f8:	2244      	movs	r2, #68	@ 0x44
 80139fa:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80139fc:	687a      	ldr	r2, [r7, #4]
 80139fe:	23b8      	movs	r3, #184	@ 0xb8
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	5cd3      	ldrb	r3, [r2, r3]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d12f      	bne.n	8013a68 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2240      	movs	r2, #64	@ 0x40
 8013a0e:	5a9b      	ldrh	r3, [r3, r2]
 8013a10:	b29a      	uxth	r2, r3
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	2104      	movs	r1, #4
 8013a18:	430a      	orrs	r2, r1
 8013a1a:	b291      	uxth	r1, r2
 8013a1c:	2240      	movs	r2, #64	@ 0x40
 8013a1e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	2240      	movs	r2, #64	@ 0x40
 8013a26:	5a9b      	ldrh	r3, [r3, r2]
 8013a28:	b29a      	uxth	r2, r3
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	2108      	movs	r1, #8
 8013a30:	430a      	orrs	r2, r1
 8013a32:	b291      	uxth	r1, r2
 8013a34:	2240      	movs	r2, #64	@ 0x40
 8013a36:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8013a38:	687a      	ldr	r2, [r7, #4]
 8013a3a:	23b8      	movs	r3, #184	@ 0xb8
 8013a3c:	009b      	lsls	r3, r3, #2
 8013a3e:	2101      	movs	r1, #1
 8013a40:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	2254      	movs	r2, #84	@ 0x54
 8013a48:	5a9b      	ldrh	r3, [r3, r2]
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	089b      	lsrs	r3, r3, #2
 8013a4e:	223c      	movs	r2, #60	@ 0x3c
 8013a50:	4013      	ands	r3, r2
 8013a52:	0019      	movs	r1, r3
 8013a54:	687a      	ldr	r2, [r7, #4]
 8013a56:	23b9      	movs	r3, #185	@ 0xb9
 8013a58:	009b      	lsls	r3, r3, #2
 8013a5a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2101      	movs	r1, #1
 8013a60:	0018      	movs	r0, r3
 8013a62:	f001 fc1b 	bl	801529c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8013a66:	e02c      	b.n	8013ac2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	0018      	movs	r0, r3
 8013a6c:	f009 fdda 	bl	801d624 <HAL_PCD_SuspendCallback>
    return;
 8013a70:	e027      	b.n	8013ac2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8013a72:	68fa      	ldr	r2, [r7, #12]
 8013a74:	2380      	movs	r3, #128	@ 0x80
 8013a76:	009b      	lsls	r3, r3, #2
 8013a78:	4013      	ands	r3, r2
 8013a7a:	d010      	beq.n	8013a9e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2244      	movs	r2, #68	@ 0x44
 8013a82:	5a9b      	ldrh	r3, [r3, r2]
 8013a84:	b29a      	uxth	r2, r3
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	4914      	ldr	r1, [pc, #80]	@ (8013adc <HAL_PCD_IRQHandler+0x280>)
 8013a8c:	400a      	ands	r2, r1
 8013a8e:	b291      	uxth	r1, r2
 8013a90:	2244      	movs	r2, #68	@ 0x44
 8013a92:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	0018      	movs	r0, r3
 8013a98:	f009 fd90 	bl	801d5bc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013a9c:	e011      	b.n	8013ac2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8013a9e:	68fa      	ldr	r2, [r7, #12]
 8013aa0:	2380      	movs	r3, #128	@ 0x80
 8013aa2:	005b      	lsls	r3, r3, #1
 8013aa4:	4013      	ands	r3, r2
 8013aa6:	d00c      	beq.n	8013ac2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2244      	movs	r2, #68	@ 0x44
 8013aae:	5a9b      	ldrh	r3, [r3, r2]
 8013ab0:	b29a      	uxth	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	490a      	ldr	r1, [pc, #40]	@ (8013ae0 <HAL_PCD_IRQHandler+0x284>)
 8013ab8:	400a      	ands	r2, r1
 8013aba:	b291      	uxth	r1, r2
 8013abc:	2244      	movs	r2, #68	@ 0x44
 8013abe:	5299      	strh	r1, [r3, r2]

    return;
 8013ac0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	b004      	add	sp, #16
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	fffffbff 	.word	0xfffffbff
 8013acc:	ffffbfff 	.word	0xffffbfff
 8013ad0:	ffffdfff 	.word	0xffffdfff
 8013ad4:	ffffefff 	.word	0xffffefff
 8013ad8:	fffff7ff 	.word	0xfffff7ff
 8013adc:	fffffdff 	.word	0xfffffdff
 8013ae0:	fffffeff 	.word	0xfffffeff

08013ae4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b082      	sub	sp, #8
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	000a      	movs	r2, r1
 8013aee:	1cfb      	adds	r3, r7, #3
 8013af0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8013af2:	687a      	ldr	r2, [r7, #4]
 8013af4:	23aa      	movs	r3, #170	@ 0xaa
 8013af6:	009b      	lsls	r3, r3, #2
 8013af8:	5cd3      	ldrb	r3, [r2, r3]
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d101      	bne.n	8013b02 <HAL_PCD_SetAddress+0x1e>
 8013afe:	2302      	movs	r3, #2
 8013b00:	e017      	b.n	8013b32 <HAL_PCD_SetAddress+0x4e>
 8013b02:	687a      	ldr	r2, [r7, #4]
 8013b04:	23aa      	movs	r3, #170	@ 0xaa
 8013b06:	009b      	lsls	r3, r3, #2
 8013b08:	2101      	movs	r1, #1
 8013b0a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	1cfa      	adds	r2, r7, #3
 8013b10:	2124      	movs	r1, #36	@ 0x24
 8013b12:	7812      	ldrb	r2, [r2, #0]
 8013b14:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	1cfb      	adds	r3, r7, #3
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	0019      	movs	r1, r3
 8013b20:	0010      	movs	r0, r2
 8013b22:	f007 fc71 	bl	801b408 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	23aa      	movs	r3, #170	@ 0xaa
 8013b2a:	009b      	lsls	r3, r3, #2
 8013b2c:	2100      	movs	r1, #0
 8013b2e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013b30:	2300      	movs	r3, #0
}
 8013b32:	0018      	movs	r0, r3
 8013b34:	46bd      	mov	sp, r7
 8013b36:	b002      	add	sp, #8
 8013b38:	bd80      	pop	{r7, pc}

08013b3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8013b3a:	b590      	push	{r4, r7, lr}
 8013b3c:	b085      	sub	sp, #20
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
 8013b42:	000c      	movs	r4, r1
 8013b44:	0010      	movs	r0, r2
 8013b46:	0019      	movs	r1, r3
 8013b48:	1cfb      	adds	r3, r7, #3
 8013b4a:	1c22      	adds	r2, r4, #0
 8013b4c:	701a      	strb	r2, [r3, #0]
 8013b4e:	003b      	movs	r3, r7
 8013b50:	1c02      	adds	r2, r0, #0
 8013b52:	801a      	strh	r2, [r3, #0]
 8013b54:	1cbb      	adds	r3, r7, #2
 8013b56:	1c0a      	adds	r2, r1, #0
 8013b58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8013b5a:	230b      	movs	r3, #11
 8013b5c:	18fb      	adds	r3, r7, r3
 8013b5e:	2200      	movs	r2, #0
 8013b60:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013b62:	1cfb      	adds	r3, r7, #3
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	b25b      	sxtb	r3, r3
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	da0f      	bge.n	8013b8c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013b6c:	1cfb      	adds	r3, r7, #3
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	2207      	movs	r2, #7
 8013b72:	4013      	ands	r3, r2
 8013b74:	1c5a      	adds	r2, r3, #1
 8013b76:	0013      	movs	r3, r2
 8013b78:	009b      	lsls	r3, r3, #2
 8013b7a:	189b      	adds	r3, r3, r2
 8013b7c:	00db      	lsls	r3, r3, #3
 8013b7e:	687a      	ldr	r2, [r7, #4]
 8013b80:	18d3      	adds	r3, r2, r3
 8013b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	2201      	movs	r2, #1
 8013b88:	705a      	strb	r2, [r3, #1]
 8013b8a:	e00f      	b.n	8013bac <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013b8c:	1cfb      	adds	r3, r7, #3
 8013b8e:	781b      	ldrb	r3, [r3, #0]
 8013b90:	2207      	movs	r2, #7
 8013b92:	401a      	ands	r2, r3
 8013b94:	0013      	movs	r3, r2
 8013b96:	009b      	lsls	r3, r3, #2
 8013b98:	189b      	adds	r3, r3, r2
 8013b9a:	00db      	lsls	r3, r3, #3
 8013b9c:	3369      	adds	r3, #105	@ 0x69
 8013b9e:	33ff      	adds	r3, #255	@ 0xff
 8013ba0:	687a      	ldr	r2, [r7, #4]
 8013ba2:	18d3      	adds	r3, r2, r3
 8013ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2200      	movs	r2, #0
 8013baa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8013bac:	1cfb      	adds	r3, r7, #3
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	2207      	movs	r2, #7
 8013bb2:	4013      	ands	r3, r2
 8013bb4:	b2da      	uxtb	r2, r3
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8013bba:	003b      	movs	r3, r7
 8013bbc:	881a      	ldrh	r2, [r3, #0]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	1cba      	adds	r2, r7, #2
 8013bc6:	7812      	ldrb	r2, [r2, #0]
 8013bc8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8013bca:	1cbb      	adds	r3, r7, #2
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	2b02      	cmp	r3, #2
 8013bd0:	d102      	bne.n	8013bd8 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013bd8:	687a      	ldr	r2, [r7, #4]
 8013bda:	23aa      	movs	r3, #170	@ 0xaa
 8013bdc:	009b      	lsls	r3, r3, #2
 8013bde:	5cd3      	ldrb	r3, [r2, r3]
 8013be0:	2b01      	cmp	r3, #1
 8013be2:	d101      	bne.n	8013be8 <HAL_PCD_EP_Open+0xae>
 8013be4:	2302      	movs	r3, #2
 8013be6:	e013      	b.n	8013c10 <HAL_PCD_EP_Open+0xd6>
 8013be8:	687a      	ldr	r2, [r7, #4]
 8013bea:	23aa      	movs	r3, #170	@ 0xaa
 8013bec:	009b      	lsls	r3, r3, #2
 8013bee:	2101      	movs	r1, #1
 8013bf0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	68fa      	ldr	r2, [r7, #12]
 8013bf8:	0011      	movs	r1, r2
 8013bfa:	0018      	movs	r0, r3
 8013bfc:	f005 fc68 	bl	80194d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	23aa      	movs	r3, #170	@ 0xaa
 8013c04:	009b      	lsls	r3, r3, #2
 8013c06:	2100      	movs	r1, #0
 8013c08:	54d1      	strb	r1, [r2, r3]

  return ret;
 8013c0a:	230b      	movs	r3, #11
 8013c0c:	18fb      	adds	r3, r7, r3
 8013c0e:	781b      	ldrb	r3, [r3, #0]
}
 8013c10:	0018      	movs	r0, r3
 8013c12:	46bd      	mov	sp, r7
 8013c14:	b005      	add	sp, #20
 8013c16:	bd90      	pop	{r4, r7, pc}

08013c18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b084      	sub	sp, #16
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	000a      	movs	r2, r1
 8013c22:	1cfb      	adds	r3, r7, #3
 8013c24:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013c26:	1cfb      	adds	r3, r7, #3
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	b25b      	sxtb	r3, r3
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	da0f      	bge.n	8013c50 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013c30:	1cfb      	adds	r3, r7, #3
 8013c32:	781b      	ldrb	r3, [r3, #0]
 8013c34:	2207      	movs	r2, #7
 8013c36:	4013      	ands	r3, r2
 8013c38:	1c5a      	adds	r2, r3, #1
 8013c3a:	0013      	movs	r3, r2
 8013c3c:	009b      	lsls	r3, r3, #2
 8013c3e:	189b      	adds	r3, r3, r2
 8013c40:	00db      	lsls	r3, r3, #3
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	18d3      	adds	r3, r2, r3
 8013c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2201      	movs	r2, #1
 8013c4c:	705a      	strb	r2, [r3, #1]
 8013c4e:	e00f      	b.n	8013c70 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013c50:	1cfb      	adds	r3, r7, #3
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	2207      	movs	r2, #7
 8013c56:	401a      	ands	r2, r3
 8013c58:	0013      	movs	r3, r2
 8013c5a:	009b      	lsls	r3, r3, #2
 8013c5c:	189b      	adds	r3, r3, r2
 8013c5e:	00db      	lsls	r3, r3, #3
 8013c60:	3369      	adds	r3, #105	@ 0x69
 8013c62:	33ff      	adds	r3, #255	@ 0xff
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	18d3      	adds	r3, r2, r3
 8013c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8013c70:	1cfb      	adds	r3, r7, #3
 8013c72:	781b      	ldrb	r3, [r3, #0]
 8013c74:	2207      	movs	r2, #7
 8013c76:	4013      	ands	r3, r2
 8013c78:	b2da      	uxtb	r2, r3
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013c7e:	687a      	ldr	r2, [r7, #4]
 8013c80:	23aa      	movs	r3, #170	@ 0xaa
 8013c82:	009b      	lsls	r3, r3, #2
 8013c84:	5cd3      	ldrb	r3, [r2, r3]
 8013c86:	2b01      	cmp	r3, #1
 8013c88:	d101      	bne.n	8013c8e <HAL_PCD_EP_Close+0x76>
 8013c8a:	2302      	movs	r3, #2
 8013c8c:	e011      	b.n	8013cb2 <HAL_PCD_EP_Close+0x9a>
 8013c8e:	687a      	ldr	r2, [r7, #4]
 8013c90:	23aa      	movs	r3, #170	@ 0xaa
 8013c92:	009b      	lsls	r3, r3, #2
 8013c94:	2101      	movs	r1, #1
 8013c96:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	68fa      	ldr	r2, [r7, #12]
 8013c9e:	0011      	movs	r1, r2
 8013ca0:	0018      	movs	r0, r3
 8013ca2:	f005 ffb7 	bl	8019c14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013ca6:	687a      	ldr	r2, [r7, #4]
 8013ca8:	23aa      	movs	r3, #170	@ 0xaa
 8013caa:	009b      	lsls	r3, r3, #2
 8013cac:	2100      	movs	r1, #0
 8013cae:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8013cb0:	2300      	movs	r3, #0
}
 8013cb2:	0018      	movs	r0, r3
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	b004      	add	sp, #16
 8013cb8:	bd80      	pop	{r7, pc}

08013cba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013cba:	b580      	push	{r7, lr}
 8013cbc:	b086      	sub	sp, #24
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	60f8      	str	r0, [r7, #12]
 8013cc2:	607a      	str	r2, [r7, #4]
 8013cc4:	603b      	str	r3, [r7, #0]
 8013cc6:	200b      	movs	r0, #11
 8013cc8:	183b      	adds	r3, r7, r0
 8013cca:	1c0a      	adds	r2, r1, #0
 8013ccc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013cce:	0001      	movs	r1, r0
 8013cd0:	187b      	adds	r3, r7, r1
 8013cd2:	781b      	ldrb	r3, [r3, #0]
 8013cd4:	2207      	movs	r2, #7
 8013cd6:	401a      	ands	r2, r3
 8013cd8:	0013      	movs	r3, r2
 8013cda:	009b      	lsls	r3, r3, #2
 8013cdc:	189b      	adds	r3, r3, r2
 8013cde:	00db      	lsls	r3, r3, #3
 8013ce0:	3369      	adds	r3, #105	@ 0x69
 8013ce2:	33ff      	adds	r3, #255	@ 0xff
 8013ce4:	68fa      	ldr	r2, [r7, #12]
 8013ce6:	18d3      	adds	r3, r2, r3
 8013ce8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	687a      	ldr	r2, [r7, #4]
 8013cee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	683a      	ldr	r2, [r7, #0]
 8013cf4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013d02:	187b      	adds	r3, r7, r1
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	2207      	movs	r2, #7
 8013d08:	4013      	ands	r3, r2
 8013d0a:	b2da      	uxtb	r2, r3
 8013d0c:	697b      	ldr	r3, [r7, #20]
 8013d0e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	697a      	ldr	r2, [r7, #20]
 8013d16:	0011      	movs	r1, r2
 8013d18:	0018      	movs	r0, r3
 8013d1a:	f006 f93b 	bl	8019f94 <USB_EPStartXfer>

  return HAL_OK;
 8013d1e:	2300      	movs	r3, #0
}
 8013d20:	0018      	movs	r0, r3
 8013d22:	46bd      	mov	sp, r7
 8013d24:	b006      	add	sp, #24
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	000a      	movs	r2, r1
 8013d32:	1cfb      	adds	r3, r7, #3
 8013d34:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013d36:	1cfb      	adds	r3, r7, #3
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	2207      	movs	r2, #7
 8013d3c:	401a      	ands	r2, r3
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	23c2      	movs	r3, #194	@ 0xc2
 8013d42:	0059      	lsls	r1, r3, #1
 8013d44:	0013      	movs	r3, r2
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	189b      	adds	r3, r3, r2
 8013d4a:	00db      	lsls	r3, r3, #3
 8013d4c:	18c3      	adds	r3, r0, r3
 8013d4e:	185b      	adds	r3, r3, r1
 8013d50:	681b      	ldr	r3, [r3, #0]
}
 8013d52:	0018      	movs	r0, r3
 8013d54:	46bd      	mov	sp, r7
 8013d56:	b002      	add	sp, #8
 8013d58:	bd80      	pop	{r7, pc}

08013d5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013d5a:	b580      	push	{r7, lr}
 8013d5c:	b086      	sub	sp, #24
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	60f8      	str	r0, [r7, #12]
 8013d62:	607a      	str	r2, [r7, #4]
 8013d64:	603b      	str	r3, [r7, #0]
 8013d66:	200b      	movs	r0, #11
 8013d68:	183b      	adds	r3, r7, r0
 8013d6a:	1c0a      	adds	r2, r1, #0
 8013d6c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013d6e:	183b      	adds	r3, r7, r0
 8013d70:	781b      	ldrb	r3, [r3, #0]
 8013d72:	2207      	movs	r2, #7
 8013d74:	4013      	ands	r3, r2
 8013d76:	1c5a      	adds	r2, r3, #1
 8013d78:	0013      	movs	r3, r2
 8013d7a:	009b      	lsls	r3, r3, #2
 8013d7c:	189b      	adds	r3, r3, r2
 8013d7e:	00db      	lsls	r3, r3, #3
 8013d80:	68fa      	ldr	r2, [r7, #12]
 8013d82:	18d3      	adds	r3, r2, r3
 8013d84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	683a      	ldr	r2, [r7, #0]
 8013d90:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	2224      	movs	r2, #36	@ 0x24
 8013d96:	2101      	movs	r1, #1
 8013d98:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8013d9a:	697b      	ldr	r3, [r7, #20]
 8013d9c:	683a      	ldr	r2, [r7, #0]
 8013d9e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	2200      	movs	r2, #0
 8013da4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	2201      	movs	r2, #1
 8013daa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013dac:	183b      	adds	r3, r7, r0
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	2207      	movs	r2, #7
 8013db2:	4013      	ands	r3, r2
 8013db4:	b2da      	uxtb	r2, r3
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	697a      	ldr	r2, [r7, #20]
 8013dc0:	0011      	movs	r1, r2
 8013dc2:	0018      	movs	r0, r3
 8013dc4:	f006 f8e6 	bl	8019f94 <USB_EPStartXfer>

  return HAL_OK;
 8013dc8:	2300      	movs	r3, #0
}
 8013dca:	0018      	movs	r0, r3
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	b006      	add	sp, #24
 8013dd0:	bd80      	pop	{r7, pc}

08013dd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013dd2:	b580      	push	{r7, lr}
 8013dd4:	b084      	sub	sp, #16
 8013dd6:	af00      	add	r7, sp, #0
 8013dd8:	6078      	str	r0, [r7, #4]
 8013dda:	000a      	movs	r2, r1
 8013ddc:	1cfb      	adds	r3, r7, #3
 8013dde:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8013de0:	1cfb      	adds	r3, r7, #3
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	2207      	movs	r2, #7
 8013de6:	401a      	ands	r2, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	685b      	ldr	r3, [r3, #4]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d901      	bls.n	8013df4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8013df0:	2301      	movs	r3, #1
 8013df2:	e046      	b.n	8013e82 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013df4:	1cfb      	adds	r3, r7, #3
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	b25b      	sxtb	r3, r3
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	da0f      	bge.n	8013e1e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013dfe:	1cfb      	adds	r3, r7, #3
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	2207      	movs	r2, #7
 8013e04:	4013      	ands	r3, r2
 8013e06:	1c5a      	adds	r2, r3, #1
 8013e08:	0013      	movs	r3, r2
 8013e0a:	009b      	lsls	r3, r3, #2
 8013e0c:	189b      	adds	r3, r3, r2
 8013e0e:	00db      	lsls	r3, r3, #3
 8013e10:	687a      	ldr	r2, [r7, #4]
 8013e12:	18d3      	adds	r3, r2, r3
 8013e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2201      	movs	r2, #1
 8013e1a:	705a      	strb	r2, [r3, #1]
 8013e1c:	e00d      	b.n	8013e3a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013e1e:	1cfb      	adds	r3, r7, #3
 8013e20:	781a      	ldrb	r2, [r3, #0]
 8013e22:	0013      	movs	r3, r2
 8013e24:	009b      	lsls	r3, r3, #2
 8013e26:	189b      	adds	r3, r3, r2
 8013e28:	00db      	lsls	r3, r3, #3
 8013e2a:	3369      	adds	r3, #105	@ 0x69
 8013e2c:	33ff      	adds	r3, #255	@ 0xff
 8013e2e:	687a      	ldr	r2, [r7, #4]
 8013e30:	18d3      	adds	r3, r2, r3
 8013e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	2200      	movs	r2, #0
 8013e38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	2201      	movs	r2, #1
 8013e3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013e40:	1cfb      	adds	r3, r7, #3
 8013e42:	781b      	ldrb	r3, [r3, #0]
 8013e44:	2207      	movs	r2, #7
 8013e46:	4013      	ands	r3, r2
 8013e48:	b2da      	uxtb	r2, r3
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	23aa      	movs	r3, #170	@ 0xaa
 8013e52:	009b      	lsls	r3, r3, #2
 8013e54:	5cd3      	ldrb	r3, [r2, r3]
 8013e56:	2b01      	cmp	r3, #1
 8013e58:	d101      	bne.n	8013e5e <HAL_PCD_EP_SetStall+0x8c>
 8013e5a:	2302      	movs	r3, #2
 8013e5c:	e011      	b.n	8013e82 <HAL_PCD_EP_SetStall+0xb0>
 8013e5e:	687a      	ldr	r2, [r7, #4]
 8013e60:	23aa      	movs	r3, #170	@ 0xaa
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	2101      	movs	r1, #1
 8013e66:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	68fa      	ldr	r2, [r7, #12]
 8013e6e:	0011      	movs	r1, r2
 8013e70:	0018      	movs	r0, r3
 8013e72:	f007 f9c7 	bl	801b204 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	23aa      	movs	r3, #170	@ 0xaa
 8013e7a:	009b      	lsls	r3, r3, #2
 8013e7c:	2100      	movs	r1, #0
 8013e7e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	0018      	movs	r0, r3
 8013e84:	46bd      	mov	sp, r7
 8013e86:	b004      	add	sp, #16
 8013e88:	bd80      	pop	{r7, pc}

08013e8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013e8a:	b580      	push	{r7, lr}
 8013e8c:	b084      	sub	sp, #16
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	6078      	str	r0, [r7, #4]
 8013e92:	000a      	movs	r2, r1
 8013e94:	1cfb      	adds	r3, r7, #3
 8013e96:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013e98:	1cfb      	adds	r3, r7, #3
 8013e9a:	781b      	ldrb	r3, [r3, #0]
 8013e9c:	220f      	movs	r2, #15
 8013e9e:	401a      	ands	r2, r3
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d901      	bls.n	8013eac <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	e048      	b.n	8013f3e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013eac:	1cfb      	adds	r3, r7, #3
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	b25b      	sxtb	r3, r3
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	da0f      	bge.n	8013ed6 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013eb6:	1cfb      	adds	r3, r7, #3
 8013eb8:	781b      	ldrb	r3, [r3, #0]
 8013eba:	2207      	movs	r2, #7
 8013ebc:	4013      	ands	r3, r2
 8013ebe:	1c5a      	adds	r2, r3, #1
 8013ec0:	0013      	movs	r3, r2
 8013ec2:	009b      	lsls	r3, r3, #2
 8013ec4:	189b      	adds	r3, r3, r2
 8013ec6:	00db      	lsls	r3, r3, #3
 8013ec8:	687a      	ldr	r2, [r7, #4]
 8013eca:	18d3      	adds	r3, r2, r3
 8013ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2201      	movs	r2, #1
 8013ed2:	705a      	strb	r2, [r3, #1]
 8013ed4:	e00f      	b.n	8013ef6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013ed6:	1cfb      	adds	r3, r7, #3
 8013ed8:	781b      	ldrb	r3, [r3, #0]
 8013eda:	2207      	movs	r2, #7
 8013edc:	401a      	ands	r2, r3
 8013ede:	0013      	movs	r3, r2
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	189b      	adds	r3, r3, r2
 8013ee4:	00db      	lsls	r3, r3, #3
 8013ee6:	3369      	adds	r3, #105	@ 0x69
 8013ee8:	33ff      	adds	r3, #255	@ 0xff
 8013eea:	687a      	ldr	r2, [r7, #4]
 8013eec:	18d3      	adds	r3, r2, r3
 8013eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013efc:	1cfb      	adds	r3, r7, #3
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	2207      	movs	r2, #7
 8013f02:	4013      	ands	r3, r2
 8013f04:	b2da      	uxtb	r2, r3
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013f0a:	687a      	ldr	r2, [r7, #4]
 8013f0c:	23aa      	movs	r3, #170	@ 0xaa
 8013f0e:	009b      	lsls	r3, r3, #2
 8013f10:	5cd3      	ldrb	r3, [r2, r3]
 8013f12:	2b01      	cmp	r3, #1
 8013f14:	d101      	bne.n	8013f1a <HAL_PCD_EP_ClrStall+0x90>
 8013f16:	2302      	movs	r3, #2
 8013f18:	e011      	b.n	8013f3e <HAL_PCD_EP_ClrStall+0xb4>
 8013f1a:	687a      	ldr	r2, [r7, #4]
 8013f1c:	23aa      	movs	r3, #170	@ 0xaa
 8013f1e:	009b      	lsls	r3, r3, #2
 8013f20:	2101      	movs	r1, #1
 8013f22:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	68fa      	ldr	r2, [r7, #12]
 8013f2a:	0011      	movs	r1, r2
 8013f2c:	0018      	movs	r0, r3
 8013f2e:	f007 f9b9 	bl	801b2a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	23aa      	movs	r3, #170	@ 0xaa
 8013f36:	009b      	lsls	r3, r3, #2
 8013f38:	2100      	movs	r1, #0
 8013f3a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013f3c:	2300      	movs	r3, #0
}
 8013f3e:	0018      	movs	r0, r3
 8013f40:	46bd      	mov	sp, r7
 8013f42:	b004      	add	sp, #16
 8013f44:	bd80      	pop	{r7, pc}
	...

08013f48 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013f48:	b5b0      	push	{r4, r5, r7, lr}
 8013f4a:	b096      	sub	sp, #88	@ 0x58
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013f50:	f000 fbec 	bl	801472c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681a      	ldr	r2, [r3, #0]
 8013f58:	204e      	movs	r0, #78	@ 0x4e
 8013f5a:	183b      	adds	r3, r7, r0
 8013f5c:	2144      	movs	r1, #68	@ 0x44
 8013f5e:	5a52      	ldrh	r2, [r2, r1]
 8013f60:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013f62:	183b      	adds	r3, r7, r0
 8013f64:	881b      	ldrh	r3, [r3, #0]
 8013f66:	b2da      	uxtb	r2, r3
 8013f68:	244d      	movs	r4, #77	@ 0x4d
 8013f6a:	193b      	adds	r3, r7, r4
 8013f6c:	210f      	movs	r1, #15
 8013f6e:	400a      	ands	r2, r1
 8013f70:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013f72:	193b      	adds	r3, r7, r4
 8013f74:	781b      	ldrb	r3, [r3, #0]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d000      	beq.n	8013f7c <PCD_EP_ISR_Handler+0x34>
 8013f7a:	e18f      	b.n	801429c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013f7c:	183b      	adds	r3, r7, r0
 8013f7e:	881b      	ldrh	r3, [r3, #0]
 8013f80:	2210      	movs	r2, #16
 8013f82:	4013      	ands	r3, r2
 8013f84:	d155      	bne.n	8014032 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	881b      	ldrh	r3, [r3, #0]
 8013f8c:	b29a      	uxth	r2, r3
 8013f8e:	200e      	movs	r0, #14
 8013f90:	183b      	adds	r3, r7, r0
 8013f92:	49bb      	ldr	r1, [pc, #748]	@ (8014280 <PCD_EP_ISR_Handler+0x338>)
 8013f94:	400a      	ands	r2, r1
 8013f96:	801a      	strh	r2, [r3, #0]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	183a      	adds	r2, r7, r0
 8013f9e:	8812      	ldrh	r2, [r2, #0]
 8013fa0:	49b8      	ldr	r1, [pc, #736]	@ (8014284 <PCD_EP_ISR_Handler+0x33c>)
 8013fa2:	430a      	orrs	r2, r1
 8013fa4:	b292      	uxth	r2, r2
 8013fa6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	3328      	adds	r3, #40	@ 0x28
 8013fac:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	2250      	movs	r2, #80	@ 0x50
 8013fb4:	5a9b      	ldrh	r3, [r3, r2]
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	001a      	movs	r2, r3
 8013fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	00db      	lsls	r3, r3, #3
 8013fc0:	18d2      	adds	r2, r2, r3
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	18d3      	adds	r3, r2, r3
 8013fc8:	4aaf      	ldr	r2, [pc, #700]	@ (8014288 <PCD_EP_ISR_Handler+0x340>)
 8013fca:	4694      	mov	ip, r2
 8013fcc:	4463      	add	r3, ip
 8013fce:	881b      	ldrh	r3, [r3, #0]
 8013fd0:	059b      	lsls	r3, r3, #22
 8013fd2:	0d9a      	lsrs	r2, r3, #22
 8013fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fda:	695a      	ldr	r2, [r3, #20]
 8013fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fde:	69db      	ldr	r3, [r3, #28]
 8013fe0:	18d2      	adds	r2, r2, r3
 8013fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fe4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2100      	movs	r1, #0
 8013fea:	0018      	movs	r0, r3
 8013fec:	f009 fac8 	bl	801d580 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2224      	movs	r2, #36	@ 0x24
 8013ff4:	5c9b      	ldrb	r3, [r3, r2]
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d101      	bne.n	8014000 <PCD_EP_ISR_Handler+0xb8>
 8013ffc:	f000 fb96 	bl	801472c <PCD_EP_ISR_Handler+0x7e4>
 8014000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014002:	699b      	ldr	r3, [r3, #24]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d001      	beq.n	801400c <PCD_EP_ISR_Handler+0xc4>
 8014008:	f000 fb90 	bl	801472c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2224      	movs	r2, #36	@ 0x24
 8014010:	5c9b      	ldrb	r3, [r3, r2]
 8014012:	b2db      	uxtb	r3, r3
 8014014:	2280      	movs	r2, #128	@ 0x80
 8014016:	4252      	negs	r2, r2
 8014018:	4313      	orrs	r3, r2
 801401a:	b2da      	uxtb	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	0011      	movs	r1, r2
 8014022:	224c      	movs	r2, #76	@ 0x4c
 8014024:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2224      	movs	r2, #36	@ 0x24
 801402a:	2100      	movs	r1, #0
 801402c:	5499      	strb	r1, [r3, r2]
 801402e:	f000 fb7d 	bl	801472c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	3369      	adds	r3, #105	@ 0x69
 8014036:	33ff      	adds	r3, #255	@ 0xff
 8014038:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681a      	ldr	r2, [r3, #0]
 801403e:	214a      	movs	r1, #74	@ 0x4a
 8014040:	187b      	adds	r3, r7, r1
 8014042:	8812      	ldrh	r2, [r2, #0]
 8014044:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8014046:	187b      	adds	r3, r7, r1
 8014048:	881a      	ldrh	r2, [r3, #0]
 801404a:	2380      	movs	r3, #128	@ 0x80
 801404c:	011b      	lsls	r3, r3, #4
 801404e:	4013      	ands	r3, r2
 8014050:	d037      	beq.n	80140c2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2250      	movs	r2, #80	@ 0x50
 8014058:	5a9b      	ldrh	r3, [r3, r2]
 801405a:	b29b      	uxth	r3, r3
 801405c:	001a      	movs	r2, r3
 801405e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	00db      	lsls	r3, r3, #3
 8014064:	18d2      	adds	r2, r2, r3
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	18d3      	adds	r3, r2, r3
 801406c:	4a87      	ldr	r2, [pc, #540]	@ (801428c <PCD_EP_ISR_Handler+0x344>)
 801406e:	4694      	mov	ip, r2
 8014070:	4463      	add	r3, ip
 8014072:	881b      	ldrh	r3, [r3, #0]
 8014074:	059b      	lsls	r3, r3, #22
 8014076:	0d9a      	lsrs	r2, r3, #22
 8014078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801407a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6818      	ldr	r0, [r3, #0]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	22ac      	movs	r2, #172	@ 0xac
 8014084:	0092      	lsls	r2, r2, #2
 8014086:	1899      	adds	r1, r3, r2
 8014088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801408a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 801408c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801408e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8014090:	b29b      	uxth	r3, r3
 8014092:	f007 fa3a 	bl	801b50a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	881b      	ldrh	r3, [r3, #0]
 801409c:	b29a      	uxth	r2, r3
 801409e:	2010      	movs	r0, #16
 80140a0:	183b      	adds	r3, r7, r0
 80140a2:	497b      	ldr	r1, [pc, #492]	@ (8014290 <PCD_EP_ISR_Handler+0x348>)
 80140a4:	400a      	ands	r2, r1
 80140a6:	801a      	strh	r2, [r3, #0]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	183a      	adds	r2, r7, r0
 80140ae:	8812      	ldrh	r2, [r2, #0]
 80140b0:	2180      	movs	r1, #128	@ 0x80
 80140b2:	430a      	orrs	r2, r1
 80140b4:	b292      	uxth	r2, r2
 80140b6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	0018      	movs	r0, r3
 80140bc:	f009 fa2a 	bl	801d514 <HAL_PCD_SetupStageCallback>
 80140c0:	e334      	b.n	801472c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80140c2:	234a      	movs	r3, #74	@ 0x4a
 80140c4:	18fb      	adds	r3, r7, r3
 80140c6:	2200      	movs	r2, #0
 80140c8:	5e9b      	ldrsh	r3, [r3, r2]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	db00      	blt.n	80140d0 <PCD_EP_ISR_Handler+0x188>
 80140ce:	e32d      	b.n	801472c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	881b      	ldrh	r3, [r3, #0]
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	201e      	movs	r0, #30
 80140da:	183b      	adds	r3, r7, r0
 80140dc:	496c      	ldr	r1, [pc, #432]	@ (8014290 <PCD_EP_ISR_Handler+0x348>)
 80140de:	400a      	ands	r2, r1
 80140e0:	801a      	strh	r2, [r3, #0]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	183a      	adds	r2, r7, r0
 80140e8:	8812      	ldrh	r2, [r2, #0]
 80140ea:	2180      	movs	r1, #128	@ 0x80
 80140ec:	430a      	orrs	r2, r1
 80140ee:	b292      	uxth	r2, r2
 80140f0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	2250      	movs	r2, #80	@ 0x50
 80140f8:	5a9b      	ldrh	r3, [r3, r2]
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	001a      	movs	r2, r3
 80140fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	00db      	lsls	r3, r3, #3
 8014104:	18d2      	adds	r2, r2, r3
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	18d3      	adds	r3, r2, r3
 801410c:	4a5f      	ldr	r2, [pc, #380]	@ (801428c <PCD_EP_ISR_Handler+0x344>)
 801410e:	4694      	mov	ip, r2
 8014110:	4463      	add	r3, ip
 8014112:	881b      	ldrh	r3, [r3, #0]
 8014114:	059b      	lsls	r3, r3, #22
 8014116:	0d9a      	lsrs	r2, r3, #22
 8014118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801411a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801411c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801411e:	69db      	ldr	r3, [r3, #28]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d01a      	beq.n	801415a <PCD_EP_ISR_Handler+0x212>
 8014124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014126:	695b      	ldr	r3, [r3, #20]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d016      	beq.n	801415a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6818      	ldr	r0, [r3, #0]
 8014130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014132:	6959      	ldr	r1, [r3, #20]
 8014134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014136:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8014138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801413a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801413c:	b29b      	uxth	r3, r3
 801413e:	f007 f9e4 	bl	801b50a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8014142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014144:	695a      	ldr	r2, [r3, #20]
 8014146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014148:	69db      	ldr	r3, [r3, #28]
 801414a:	18d2      	adds	r2, r2, r3
 801414c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801414e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2100      	movs	r1, #0
 8014154:	0018      	movs	r0, r3
 8014156:	f009 f9f2 	bl	801d53e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681a      	ldr	r2, [r3, #0]
 801415e:	214a      	movs	r1, #74	@ 0x4a
 8014160:	187b      	adds	r3, r7, r1
 8014162:	8812      	ldrh	r2, [r2, #0]
 8014164:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8014166:	187b      	adds	r3, r7, r1
 8014168:	881a      	ldrh	r2, [r3, #0]
 801416a:	2380      	movs	r3, #128	@ 0x80
 801416c:	011b      	lsls	r3, r3, #4
 801416e:	4013      	ands	r3, r2
 8014170:	d000      	beq.n	8014174 <PCD_EP_ISR_Handler+0x22c>
 8014172:	e2db      	b.n	801472c <PCD_EP_ISR_Handler+0x7e4>
 8014174:	187b      	adds	r3, r7, r1
 8014176:	881a      	ldrh	r2, [r3, #0]
 8014178:	23c0      	movs	r3, #192	@ 0xc0
 801417a:	019b      	lsls	r3, r3, #6
 801417c:	401a      	ands	r2, r3
 801417e:	23c0      	movs	r3, #192	@ 0xc0
 8014180:	019b      	lsls	r3, r3, #6
 8014182:	429a      	cmp	r2, r3
 8014184:	d100      	bne.n	8014188 <PCD_EP_ISR_Handler+0x240>
 8014186:	e2d1      	b.n	801472c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	61bb      	str	r3, [r7, #24]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	2250      	movs	r2, #80	@ 0x50
 8014194:	5a9b      	ldrh	r3, [r3, r2]
 8014196:	b29b      	uxth	r3, r3
 8014198:	001a      	movs	r2, r3
 801419a:	69bb      	ldr	r3, [r7, #24]
 801419c:	189b      	adds	r3, r3, r2
 801419e:	61bb      	str	r3, [r7, #24]
 80141a0:	69bb      	ldr	r3, [r7, #24]
 80141a2:	4a3a      	ldr	r2, [pc, #232]	@ (801428c <PCD_EP_ISR_Handler+0x344>)
 80141a4:	4694      	mov	ip, r2
 80141a6:	4463      	add	r3, ip
 80141a8:	617b      	str	r3, [r7, #20]
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	059b      	lsls	r3, r3, #22
 80141b2:	0d9b      	lsrs	r3, r3, #22
 80141b4:	b29a      	uxth	r2, r3
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	801a      	strh	r2, [r3, #0]
 80141ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141bc:	691b      	ldr	r3, [r3, #16]
 80141be:	2b3e      	cmp	r3, #62	@ 0x3e
 80141c0:	d91a      	bls.n	80141f8 <PCD_EP_ISR_Handler+0x2b0>
 80141c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141c4:	691b      	ldr	r3, [r3, #16]
 80141c6:	095b      	lsrs	r3, r3, #5
 80141c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80141ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141cc:	691b      	ldr	r3, [r3, #16]
 80141ce:	221f      	movs	r2, #31
 80141d0:	4013      	ands	r3, r2
 80141d2:	d102      	bne.n	80141da <PCD_EP_ISR_Handler+0x292>
 80141d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141d6:	3b01      	subs	r3, #1
 80141d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80141da:	697b      	ldr	r3, [r7, #20]
 80141dc:	881b      	ldrh	r3, [r3, #0]
 80141de:	b29a      	uxth	r2, r3
 80141e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141e2:	b29b      	uxth	r3, r3
 80141e4:	029b      	lsls	r3, r3, #10
 80141e6:	b29b      	uxth	r3, r3
 80141e8:	4313      	orrs	r3, r2
 80141ea:	b29b      	uxth	r3, r3
 80141ec:	4a25      	ldr	r2, [pc, #148]	@ (8014284 <PCD_EP_ISR_Handler+0x33c>)
 80141ee:	4313      	orrs	r3, r2
 80141f0:	b29a      	uxth	r2, r3
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	801a      	strh	r2, [r3, #0]
 80141f6:	e023      	b.n	8014240 <PCD_EP_ISR_Handler+0x2f8>
 80141f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141fa:	691b      	ldr	r3, [r3, #16]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d108      	bne.n	8014212 <PCD_EP_ISR_Handler+0x2ca>
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	881b      	ldrh	r3, [r3, #0]
 8014204:	b29b      	uxth	r3, r3
 8014206:	4a1f      	ldr	r2, [pc, #124]	@ (8014284 <PCD_EP_ISR_Handler+0x33c>)
 8014208:	4313      	orrs	r3, r2
 801420a:	b29a      	uxth	r2, r3
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	801a      	strh	r2, [r3, #0]
 8014210:	e016      	b.n	8014240 <PCD_EP_ISR_Handler+0x2f8>
 8014212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014214:	691b      	ldr	r3, [r3, #16]
 8014216:	085b      	lsrs	r3, r3, #1
 8014218:	647b      	str	r3, [r7, #68]	@ 0x44
 801421a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801421c:	691b      	ldr	r3, [r3, #16]
 801421e:	2201      	movs	r2, #1
 8014220:	4013      	ands	r3, r2
 8014222:	d002      	beq.n	801422a <PCD_EP_ISR_Handler+0x2e2>
 8014224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014226:	3301      	adds	r3, #1
 8014228:	647b      	str	r3, [r7, #68]	@ 0x44
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	881b      	ldrh	r3, [r3, #0]
 801422e:	b29a      	uxth	r2, r3
 8014230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014232:	b29b      	uxth	r3, r3
 8014234:	029b      	lsls	r3, r3, #10
 8014236:	b29b      	uxth	r3, r3
 8014238:	4313      	orrs	r3, r2
 801423a:	b29a      	uxth	r2, r3
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	881b      	ldrh	r3, [r3, #0]
 8014246:	b29a      	uxth	r2, r3
 8014248:	2012      	movs	r0, #18
 801424a:	183b      	adds	r3, r7, r0
 801424c:	4911      	ldr	r1, [pc, #68]	@ (8014294 <PCD_EP_ISR_Handler+0x34c>)
 801424e:	400a      	ands	r2, r1
 8014250:	801a      	strh	r2, [r3, #0]
 8014252:	183b      	adds	r3, r7, r0
 8014254:	183a      	adds	r2, r7, r0
 8014256:	8812      	ldrh	r2, [r2, #0]
 8014258:	2180      	movs	r1, #128	@ 0x80
 801425a:	0149      	lsls	r1, r1, #5
 801425c:	404a      	eors	r2, r1
 801425e:	801a      	strh	r2, [r3, #0]
 8014260:	183b      	adds	r3, r7, r0
 8014262:	183a      	adds	r2, r7, r0
 8014264:	8812      	ldrh	r2, [r2, #0]
 8014266:	2180      	movs	r1, #128	@ 0x80
 8014268:	0189      	lsls	r1, r1, #6
 801426a:	404a      	eors	r2, r1
 801426c:	801a      	strh	r2, [r3, #0]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	183a      	adds	r2, r7, r0
 8014274:	8812      	ldrh	r2, [r2, #0]
 8014276:	4908      	ldr	r1, [pc, #32]	@ (8014298 <PCD_EP_ISR_Handler+0x350>)
 8014278:	430a      	orrs	r2, r1
 801427a:	b292      	uxth	r2, r2
 801427c:	801a      	strh	r2, [r3, #0]
 801427e:	e255      	b.n	801472c <PCD_EP_ISR_Handler+0x7e4>
 8014280:	ffff8f0f 	.word	0xffff8f0f
 8014284:	ffff8000 	.word	0xffff8000
 8014288:	00000402 	.word	0x00000402
 801428c:	00000406 	.word	0x00000406
 8014290:	00000f8f 	.word	0x00000f8f
 8014294:	ffffbf8f 	.word	0xffffbf8f
 8014298:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	001a      	movs	r2, r3
 80142a2:	204d      	movs	r0, #77	@ 0x4d
 80142a4:	183b      	adds	r3, r7, r0
 80142a6:	781b      	ldrb	r3, [r3, #0]
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	18d2      	adds	r2, r2, r3
 80142ac:	214a      	movs	r1, #74	@ 0x4a
 80142ae:	187b      	adds	r3, r7, r1
 80142b0:	8812      	ldrh	r2, [r2, #0]
 80142b2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80142b4:	187b      	adds	r3, r7, r1
 80142b6:	2200      	movs	r2, #0
 80142b8:	5e9b      	ldrsh	r3, [r3, r2]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	db00      	blt.n	80142c0 <PCD_EP_ISR_Handler+0x378>
 80142be:	e0fa      	b.n	80144b6 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	001a      	movs	r2, r3
 80142c6:	183b      	adds	r3, r7, r0
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	009b      	lsls	r3, r3, #2
 80142cc:	18d3      	adds	r3, r2, r3
 80142ce:	881b      	ldrh	r3, [r3, #0]
 80142d0:	b29a      	uxth	r2, r3
 80142d2:	2448      	movs	r4, #72	@ 0x48
 80142d4:	193b      	adds	r3, r7, r4
 80142d6:	49d1      	ldr	r1, [pc, #836]	@ (801461c <PCD_EP_ISR_Handler+0x6d4>)
 80142d8:	400a      	ands	r2, r1
 80142da:	801a      	strh	r2, [r3, #0]
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	001a      	movs	r2, r3
 80142e2:	183b      	adds	r3, r7, r0
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	009b      	lsls	r3, r3, #2
 80142e8:	18d3      	adds	r3, r2, r3
 80142ea:	193a      	adds	r2, r7, r4
 80142ec:	8812      	ldrh	r2, [r2, #0]
 80142ee:	2180      	movs	r1, #128	@ 0x80
 80142f0:	430a      	orrs	r2, r1
 80142f2:	b292      	uxth	r2, r2
 80142f4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80142f6:	183b      	adds	r3, r7, r0
 80142f8:	781a      	ldrb	r2, [r3, #0]
 80142fa:	0013      	movs	r3, r2
 80142fc:	009b      	lsls	r3, r3, #2
 80142fe:	189b      	adds	r3, r3, r2
 8014300:	00db      	lsls	r3, r3, #3
 8014302:	3369      	adds	r3, #105	@ 0x69
 8014304:	33ff      	adds	r3, #255	@ 0xff
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	18d3      	adds	r3, r2, r3
 801430a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801430c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801430e:	7b1b      	ldrb	r3, [r3, #12]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d125      	bne.n	8014360 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	2250      	movs	r2, #80	@ 0x50
 801431a:	5a9b      	ldrh	r3, [r3, r2]
 801431c:	b29b      	uxth	r3, r3
 801431e:	001a      	movs	r2, r3
 8014320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	00db      	lsls	r3, r3, #3
 8014326:	18d2      	adds	r2, r2, r3
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	18d3      	adds	r3, r2, r3
 801432e:	4abc      	ldr	r2, [pc, #752]	@ (8014620 <PCD_EP_ISR_Handler+0x6d8>)
 8014330:	4694      	mov	ip, r2
 8014332:	4463      	add	r3, ip
 8014334:	881a      	ldrh	r2, [r3, #0]
 8014336:	2450      	movs	r4, #80	@ 0x50
 8014338:	193b      	adds	r3, r7, r4
 801433a:	0592      	lsls	r2, r2, #22
 801433c:	0d92      	lsrs	r2, r2, #22
 801433e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8014340:	193b      	adds	r3, r7, r4
 8014342:	881b      	ldrh	r3, [r3, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d100      	bne.n	801434a <PCD_EP_ISR_Handler+0x402>
 8014348:	e08d      	b.n	8014466 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	6818      	ldr	r0, [r3, #0]
 801434e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014350:	6959      	ldr	r1, [r3, #20]
 8014352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014354:	88da      	ldrh	r2, [r3, #6]
 8014356:	193b      	adds	r3, r7, r4
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	f007 f8d6 	bl	801b50a <USB_ReadPMA>
 801435e:	e082      	b.n	8014466 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8014360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014362:	78db      	ldrb	r3, [r3, #3]
 8014364:	2b02      	cmp	r3, #2
 8014366:	d10c      	bne.n	8014382 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8014368:	2350      	movs	r3, #80	@ 0x50
 801436a:	18fc      	adds	r4, r7, r3
 801436c:	234a      	movs	r3, #74	@ 0x4a
 801436e:	18fb      	adds	r3, r7, r3
 8014370:	881a      	ldrh	r2, [r3, #0]
 8014372:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	0018      	movs	r0, r3
 8014378:	f000 f9ec 	bl	8014754 <HAL_PCD_EP_DB_Receive>
 801437c:	0003      	movs	r3, r0
 801437e:	8023      	strh	r3, [r4, #0]
 8014380:	e071      	b.n	8014466 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	001a      	movs	r2, r3
 8014388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	009b      	lsls	r3, r3, #2
 801438e:	18d3      	adds	r3, r2, r3
 8014390:	881b      	ldrh	r3, [r3, #0]
 8014392:	b29a      	uxth	r2, r3
 8014394:	2052      	movs	r0, #82	@ 0x52
 8014396:	183b      	adds	r3, r7, r0
 8014398:	49a2      	ldr	r1, [pc, #648]	@ (8014624 <PCD_EP_ISR_Handler+0x6dc>)
 801439a:	400a      	ands	r2, r1
 801439c:	801a      	strh	r2, [r3, #0]
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	001a      	movs	r2, r3
 80143a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	009b      	lsls	r3, r3, #2
 80143aa:	18d3      	adds	r3, r2, r3
 80143ac:	183a      	adds	r2, r7, r0
 80143ae:	8812      	ldrh	r2, [r2, #0]
 80143b0:	499d      	ldr	r1, [pc, #628]	@ (8014628 <PCD_EP_ISR_Handler+0x6e0>)
 80143b2:	430a      	orrs	r2, r1
 80143b4:	b292      	uxth	r2, r2
 80143b6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	001a      	movs	r2, r3
 80143be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	009b      	lsls	r3, r3, #2
 80143c4:	18d3      	adds	r3, r2, r3
 80143c6:	881b      	ldrh	r3, [r3, #0]
 80143c8:	b29b      	uxth	r3, r3
 80143ca:	001a      	movs	r2, r3
 80143cc:	2380      	movs	r3, #128	@ 0x80
 80143ce:	01db      	lsls	r3, r3, #7
 80143d0:	4013      	ands	r3, r2
 80143d2:	d024      	beq.n	801441e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	2250      	movs	r2, #80	@ 0x50
 80143da:	5a9b      	ldrh	r3, [r3, r2]
 80143dc:	b29b      	uxth	r3, r3
 80143de:	001a      	movs	r2, r3
 80143e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	00db      	lsls	r3, r3, #3
 80143e6:	18d2      	adds	r2, r2, r3
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	18d3      	adds	r3, r2, r3
 80143ee:	4a8f      	ldr	r2, [pc, #572]	@ (801462c <PCD_EP_ISR_Handler+0x6e4>)
 80143f0:	4694      	mov	ip, r2
 80143f2:	4463      	add	r3, ip
 80143f4:	881a      	ldrh	r2, [r3, #0]
 80143f6:	2450      	movs	r4, #80	@ 0x50
 80143f8:	193b      	adds	r3, r7, r4
 80143fa:	0592      	lsls	r2, r2, #22
 80143fc:	0d92      	lsrs	r2, r2, #22
 80143fe:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8014400:	193b      	adds	r3, r7, r4
 8014402:	881b      	ldrh	r3, [r3, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d02e      	beq.n	8014466 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	6818      	ldr	r0, [r3, #0]
 801440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801440e:	6959      	ldr	r1, [r3, #20]
 8014410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014412:	891a      	ldrh	r2, [r3, #8]
 8014414:	193b      	adds	r3, r7, r4
 8014416:	881b      	ldrh	r3, [r3, #0]
 8014418:	f007 f877 	bl	801b50a <USB_ReadPMA>
 801441c:	e023      	b.n	8014466 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	2250      	movs	r2, #80	@ 0x50
 8014424:	5a9b      	ldrh	r3, [r3, r2]
 8014426:	b29b      	uxth	r3, r3
 8014428:	001a      	movs	r2, r3
 801442a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801442c:	781b      	ldrb	r3, [r3, #0]
 801442e:	00db      	lsls	r3, r3, #3
 8014430:	18d2      	adds	r2, r2, r3
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	18d3      	adds	r3, r2, r3
 8014438:	4a79      	ldr	r2, [pc, #484]	@ (8014620 <PCD_EP_ISR_Handler+0x6d8>)
 801443a:	4694      	mov	ip, r2
 801443c:	4463      	add	r3, ip
 801443e:	881a      	ldrh	r2, [r3, #0]
 8014440:	2450      	movs	r4, #80	@ 0x50
 8014442:	193b      	adds	r3, r7, r4
 8014444:	0592      	lsls	r2, r2, #22
 8014446:	0d92      	lsrs	r2, r2, #22
 8014448:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801444a:	193b      	adds	r3, r7, r4
 801444c:	881b      	ldrh	r3, [r3, #0]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d009      	beq.n	8014466 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6818      	ldr	r0, [r3, #0]
 8014456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014458:	6959      	ldr	r1, [r3, #20]
 801445a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801445c:	895a      	ldrh	r2, [r3, #10]
 801445e:	193b      	adds	r3, r7, r4
 8014460:	881b      	ldrh	r3, [r3, #0]
 8014462:	f007 f852 	bl	801b50a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8014466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014468:	69da      	ldr	r2, [r3, #28]
 801446a:	2150      	movs	r1, #80	@ 0x50
 801446c:	187b      	adds	r3, r7, r1
 801446e:	881b      	ldrh	r3, [r3, #0]
 8014470:	18d2      	adds	r2, r2, r3
 8014472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014474:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8014476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014478:	695a      	ldr	r2, [r3, #20]
 801447a:	187b      	adds	r3, r7, r1
 801447c:	881b      	ldrh	r3, [r3, #0]
 801447e:	18d2      	adds	r2, r2, r3
 8014480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014482:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8014484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014486:	699b      	ldr	r3, [r3, #24]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d005      	beq.n	8014498 <PCD_EP_ISR_Handler+0x550>
 801448c:	187b      	adds	r3, r7, r1
 801448e:	881a      	ldrh	r2, [r3, #0]
 8014490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014492:	691b      	ldr	r3, [r3, #16]
 8014494:	429a      	cmp	r2, r3
 8014496:	d207      	bcs.n	80144a8 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8014498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801449a:	781a      	ldrb	r2, [r3, #0]
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	0011      	movs	r1, r2
 80144a0:	0018      	movs	r0, r3
 80144a2:	f009 f84c 	bl	801d53e <HAL_PCD_DataOutStageCallback>
 80144a6:	e006      	b.n	80144b6 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80144ae:	0011      	movs	r1, r2
 80144b0:	0018      	movs	r0, r3
 80144b2:	f005 fd6f 	bl	8019f94 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80144b6:	244a      	movs	r4, #74	@ 0x4a
 80144b8:	193b      	adds	r3, r7, r4
 80144ba:	881b      	ldrh	r3, [r3, #0]
 80144bc:	2280      	movs	r2, #128	@ 0x80
 80144be:	4013      	ands	r3, r2
 80144c0:	d100      	bne.n	80144c4 <PCD_EP_ISR_Handler+0x57c>
 80144c2:	e133      	b.n	801472c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80144c4:	204d      	movs	r0, #77	@ 0x4d
 80144c6:	183b      	adds	r3, r7, r0
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	1c5a      	adds	r2, r3, #1
 80144cc:	0013      	movs	r3, r2
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	189b      	adds	r3, r3, r2
 80144d2:	00db      	lsls	r3, r3, #3
 80144d4:	687a      	ldr	r2, [r7, #4]
 80144d6:	18d3      	adds	r3, r2, r3
 80144d8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	001a      	movs	r2, r3
 80144e0:	183b      	adds	r3, r7, r0
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	009b      	lsls	r3, r3, #2
 80144e6:	18d3      	adds	r3, r2, r3
 80144e8:	881b      	ldrh	r3, [r3, #0]
 80144ea:	b29a      	uxth	r2, r3
 80144ec:	2542      	movs	r5, #66	@ 0x42
 80144ee:	197b      	adds	r3, r7, r5
 80144f0:	494f      	ldr	r1, [pc, #316]	@ (8014630 <PCD_EP_ISR_Handler+0x6e8>)
 80144f2:	400a      	ands	r2, r1
 80144f4:	801a      	strh	r2, [r3, #0]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	001a      	movs	r2, r3
 80144fc:	183b      	adds	r3, r7, r0
 80144fe:	781b      	ldrb	r3, [r3, #0]
 8014500:	009b      	lsls	r3, r3, #2
 8014502:	18d3      	adds	r3, r2, r3
 8014504:	197a      	adds	r2, r7, r5
 8014506:	8812      	ldrh	r2, [r2, #0]
 8014508:	494a      	ldr	r1, [pc, #296]	@ (8014634 <PCD_EP_ISR_Handler+0x6ec>)
 801450a:	430a      	orrs	r2, r1
 801450c:	b292      	uxth	r2, r2
 801450e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8014510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014512:	78db      	ldrb	r3, [r3, #3]
 8014514:	2b01      	cmp	r3, #1
 8014516:	d000      	beq.n	801451a <PCD_EP_ISR_Handler+0x5d2>
 8014518:	e0af      	b.n	801467a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801451a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801451c:	2200      	movs	r2, #0
 801451e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8014520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014522:	7b1b      	ldrb	r3, [r3, #12]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d100      	bne.n	801452a <PCD_EP_ISR_Handler+0x5e2>
 8014528:	e09f      	b.n	801466a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801452a:	193b      	adds	r3, r7, r4
 801452c:	881b      	ldrh	r3, [r3, #0]
 801452e:	2240      	movs	r2, #64	@ 0x40
 8014530:	4013      	ands	r3, r2
 8014532:	d046      	beq.n	80145c2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014536:	785b      	ldrb	r3, [r3, #1]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d125      	bne.n	8014588 <PCD_EP_ISR_Handler+0x640>
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	627b      	str	r3, [r7, #36]	@ 0x24
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2250      	movs	r2, #80	@ 0x50
 8014548:	5a9b      	ldrh	r3, [r3, r2]
 801454a:	b29b      	uxth	r3, r3
 801454c:	001a      	movs	r2, r3
 801454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014550:	189b      	adds	r3, r3, r2
 8014552:	627b      	str	r3, [r7, #36]	@ 0x24
 8014554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	00da      	lsls	r2, r3, #3
 801455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801455c:	18d3      	adds	r3, r2, r3
 801455e:	4a33      	ldr	r2, [pc, #204]	@ (801462c <PCD_EP_ISR_Handler+0x6e4>)
 8014560:	4694      	mov	ip, r2
 8014562:	4463      	add	r3, ip
 8014564:	623b      	str	r3, [r7, #32]
 8014566:	6a3b      	ldr	r3, [r7, #32]
 8014568:	881b      	ldrh	r3, [r3, #0]
 801456a:	b29b      	uxth	r3, r3
 801456c:	059b      	lsls	r3, r3, #22
 801456e:	0d9b      	lsrs	r3, r3, #22
 8014570:	b29a      	uxth	r2, r3
 8014572:	6a3b      	ldr	r3, [r7, #32]
 8014574:	801a      	strh	r2, [r3, #0]
 8014576:	6a3b      	ldr	r3, [r7, #32]
 8014578:	881b      	ldrh	r3, [r3, #0]
 801457a:	b29b      	uxth	r3, r3
 801457c:	4a2d      	ldr	r2, [pc, #180]	@ (8014634 <PCD_EP_ISR_Handler+0x6ec>)
 801457e:	4313      	orrs	r3, r2
 8014580:	b29a      	uxth	r2, r3
 8014582:	6a3b      	ldr	r3, [r7, #32]
 8014584:	801a      	strh	r2, [r3, #0]
 8014586:	e070      	b.n	801466a <PCD_EP_ISR_Handler+0x722>
 8014588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801458a:	785b      	ldrb	r3, [r3, #1]
 801458c:	2b01      	cmp	r3, #1
 801458e:	d16c      	bne.n	801466a <PCD_EP_ISR_Handler+0x722>
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	2250      	movs	r2, #80	@ 0x50
 801459c:	5a9b      	ldrh	r3, [r3, r2]
 801459e:	b29b      	uxth	r3, r3
 80145a0:	001a      	movs	r2, r3
 80145a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145a4:	189b      	adds	r3, r3, r2
 80145a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	00da      	lsls	r2, r3, #3
 80145ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145b0:	18d3      	adds	r3, r2, r3
 80145b2:	4a1e      	ldr	r2, [pc, #120]	@ (801462c <PCD_EP_ISR_Handler+0x6e4>)
 80145b4:	4694      	mov	ip, r2
 80145b6:	4463      	add	r3, ip
 80145b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80145ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145bc:	2200      	movs	r2, #0
 80145be:	801a      	strh	r2, [r3, #0]
 80145c0:	e053      	b.n	801466a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80145c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145ca:	785b      	ldrb	r3, [r3, #1]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d133      	bne.n	8014638 <PCD_EP_ISR_Handler+0x6f0>
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	2250      	movs	r2, #80	@ 0x50
 80145dc:	5a9b      	ldrh	r3, [r3, r2]
 80145de:	b29b      	uxth	r3, r3
 80145e0:	001a      	movs	r2, r3
 80145e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145e4:	189b      	adds	r3, r3, r2
 80145e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80145e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	00da      	lsls	r2, r3, #3
 80145ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145f0:	18d3      	adds	r3, r2, r3
 80145f2:	4a0b      	ldr	r2, [pc, #44]	@ (8014620 <PCD_EP_ISR_Handler+0x6d8>)
 80145f4:	4694      	mov	ip, r2
 80145f6:	4463      	add	r3, ip
 80145f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80145fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	b29b      	uxth	r3, r3
 8014600:	059b      	lsls	r3, r3, #22
 8014602:	0d9b      	lsrs	r3, r3, #22
 8014604:	b29a      	uxth	r2, r3
 8014606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014608:	801a      	strh	r2, [r3, #0]
 801460a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801460c:	881b      	ldrh	r3, [r3, #0]
 801460e:	b29b      	uxth	r3, r3
 8014610:	4a08      	ldr	r2, [pc, #32]	@ (8014634 <PCD_EP_ISR_Handler+0x6ec>)
 8014612:	4313      	orrs	r3, r2
 8014614:	b29a      	uxth	r2, r3
 8014616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014618:	801a      	strh	r2, [r3, #0]
 801461a:	e026      	b.n	801466a <PCD_EP_ISR_Handler+0x722>
 801461c:	00000f8f 	.word	0x00000f8f
 8014620:	00000406 	.word	0x00000406
 8014624:	ffff8f8f 	.word	0xffff8f8f
 8014628:	ffff80c0 	.word	0xffff80c0
 801462c:	00000402 	.word	0x00000402
 8014630:	ffff8f0f 	.word	0xffff8f0f
 8014634:	ffff8000 	.word	0xffff8000
 8014638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801463a:	785b      	ldrb	r3, [r3, #1]
 801463c:	2b01      	cmp	r3, #1
 801463e:	d114      	bne.n	801466a <PCD_EP_ISR_Handler+0x722>
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2250      	movs	r2, #80	@ 0x50
 8014646:	5a9b      	ldrh	r3, [r3, r2]
 8014648:	b29b      	uxth	r3, r3
 801464a:	001a      	movs	r2, r3
 801464c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801464e:	189b      	adds	r3, r3, r2
 8014650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	00da      	lsls	r2, r3, #3
 8014658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801465a:	18d3      	adds	r3, r2, r3
 801465c:	4a3b      	ldr	r2, [pc, #236]	@ (801474c <PCD_EP_ISR_Handler+0x804>)
 801465e:	4694      	mov	ip, r2
 8014660:	4463      	add	r3, ip
 8014662:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014666:	2200      	movs	r2, #0
 8014668:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801466a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801466c:	781a      	ldrb	r2, [r3, #0]
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	0011      	movs	r1, r2
 8014672:	0018      	movs	r0, r3
 8014674:	f008 ff84 	bl	801d580 <HAL_PCD_DataInStageCallback>
 8014678:	e058      	b.n	801472c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801467a:	234a      	movs	r3, #74	@ 0x4a
 801467c:	18fb      	adds	r3, r7, r3
 801467e:	881a      	ldrh	r2, [r3, #0]
 8014680:	2380      	movs	r3, #128	@ 0x80
 8014682:	005b      	lsls	r3, r3, #1
 8014684:	4013      	ands	r3, r2
 8014686:	d149      	bne.n	801471c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	2250      	movs	r2, #80	@ 0x50
 801468e:	5a9b      	ldrh	r3, [r3, r2]
 8014690:	b29b      	uxth	r3, r3
 8014692:	001a      	movs	r2, r3
 8014694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	00db      	lsls	r3, r3, #3
 801469a:	18d2      	adds	r2, r2, r3
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	18d3      	adds	r3, r2, r3
 80146a2:	4a2b      	ldr	r2, [pc, #172]	@ (8014750 <PCD_EP_ISR_Handler+0x808>)
 80146a4:	4694      	mov	ip, r2
 80146a6:	4463      	add	r3, ip
 80146a8:	881a      	ldrh	r2, [r3, #0]
 80146aa:	2140      	movs	r1, #64	@ 0x40
 80146ac:	187b      	adds	r3, r7, r1
 80146ae:	0592      	lsls	r2, r2, #22
 80146b0:	0d92      	lsrs	r2, r2, #22
 80146b2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80146b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146b6:	699a      	ldr	r2, [r3, #24]
 80146b8:	187b      	adds	r3, r7, r1
 80146ba:	881b      	ldrh	r3, [r3, #0]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d907      	bls.n	80146d0 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80146c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146c2:	699a      	ldr	r2, [r3, #24]
 80146c4:	187b      	adds	r3, r7, r1
 80146c6:	881b      	ldrh	r3, [r3, #0]
 80146c8:	1ad2      	subs	r2, r2, r3
 80146ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146cc:	619a      	str	r2, [r3, #24]
 80146ce:	e002      	b.n	80146d6 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80146d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146d2:	2200      	movs	r2, #0
 80146d4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80146d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146d8:	699b      	ldr	r3, [r3, #24]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d107      	bne.n	80146ee <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80146de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146e0:	781a      	ldrb	r2, [r3, #0]
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	0011      	movs	r1, r2
 80146e6:	0018      	movs	r0, r3
 80146e8:	f008 ff4a 	bl	801d580 <HAL_PCD_DataInStageCallback>
 80146ec:	e01e      	b.n	801472c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80146ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146f0:	695a      	ldr	r2, [r3, #20]
 80146f2:	2140      	movs	r1, #64	@ 0x40
 80146f4:	187b      	adds	r3, r7, r1
 80146f6:	881b      	ldrh	r3, [r3, #0]
 80146f8:	18d2      	adds	r2, r2, r3
 80146fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146fc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80146fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014700:	69da      	ldr	r2, [r3, #28]
 8014702:	187b      	adds	r3, r7, r1
 8014704:	881b      	ldrh	r3, [r3, #0]
 8014706:	18d2      	adds	r2, r2, r3
 8014708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801470a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014712:	0011      	movs	r1, r2
 8014714:	0018      	movs	r0, r3
 8014716:	f005 fc3d 	bl	8019f94 <USB_EPStartXfer>
 801471a:	e007      	b.n	801472c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801471c:	234a      	movs	r3, #74	@ 0x4a
 801471e:	18fb      	adds	r3, r7, r3
 8014720:	881a      	ldrh	r2, [r3, #0]
 8014722:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	0018      	movs	r0, r3
 8014728:	f000 f930 	bl	801498c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2244      	movs	r2, #68	@ 0x44
 8014732:	5a9b      	ldrh	r3, [r3, r2]
 8014734:	b29b      	uxth	r3, r3
 8014736:	b21b      	sxth	r3, r3
 8014738:	2b00      	cmp	r3, #0
 801473a:	da01      	bge.n	8014740 <PCD_EP_ISR_Handler+0x7f8>
 801473c:	f7ff fc0a 	bl	8013f54 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8014740:	2300      	movs	r3, #0
}
 8014742:	0018      	movs	r0, r3
 8014744:	46bd      	mov	sp, r7
 8014746:	b016      	add	sp, #88	@ 0x58
 8014748:	bdb0      	pop	{r4, r5, r7, pc}
 801474a:	46c0      	nop			@ (mov r8, r8)
 801474c:	00000406 	.word	0x00000406
 8014750:	00000402 	.word	0x00000402

08014754 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014754:	b590      	push	{r4, r7, lr}
 8014756:	b089      	sub	sp, #36	@ 0x24
 8014758:	af00      	add	r7, sp, #0
 801475a:	60f8      	str	r0, [r7, #12]
 801475c:	60b9      	str	r1, [r7, #8]
 801475e:	1dbb      	adds	r3, r7, #6
 8014760:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014762:	1dbb      	adds	r3, r7, #6
 8014764:	881a      	ldrh	r2, [r3, #0]
 8014766:	2380      	movs	r3, #128	@ 0x80
 8014768:	01db      	lsls	r3, r3, #7
 801476a:	4013      	ands	r3, r2
 801476c:	d100      	bne.n	8014770 <HAL_PCD_EP_DB_Receive+0x1c>
 801476e:	e07d      	b.n	801486c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	2250      	movs	r2, #80	@ 0x50
 8014776:	5a9b      	ldrh	r3, [r3, r2]
 8014778:	b29b      	uxth	r3, r3
 801477a:	001a      	movs	r2, r3
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	781b      	ldrb	r3, [r3, #0]
 8014780:	00db      	lsls	r3, r3, #3
 8014782:	18d2      	adds	r2, r2, r3
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	18d3      	adds	r3, r2, r3
 801478a:	4a7a      	ldr	r2, [pc, #488]	@ (8014974 <HAL_PCD_EP_DB_Receive+0x220>)
 801478c:	4694      	mov	ip, r2
 801478e:	4463      	add	r3, ip
 8014790:	881a      	ldrh	r2, [r3, #0]
 8014792:	211a      	movs	r1, #26
 8014794:	187b      	adds	r3, r7, r1
 8014796:	0592      	lsls	r2, r2, #22
 8014798:	0d92      	lsrs	r2, r2, #22
 801479a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	699a      	ldr	r2, [r3, #24]
 80147a0:	187b      	adds	r3, r7, r1
 80147a2:	881b      	ldrh	r3, [r3, #0]
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d307      	bcc.n	80147b8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	699a      	ldr	r2, [r3, #24]
 80147ac:	187b      	adds	r3, r7, r1
 80147ae:	881b      	ldrh	r3, [r3, #0]
 80147b0:	1ad2      	subs	r2, r2, r3
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	619a      	str	r2, [r3, #24]
 80147b6:	e002      	b.n	80147be <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	2200      	movs	r2, #0
 80147bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	699b      	ldr	r3, [r3, #24]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d121      	bne.n	801480a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	001a      	movs	r2, r3
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	781b      	ldrb	r3, [r3, #0]
 80147d0:	009b      	lsls	r3, r3, #2
 80147d2:	18d3      	adds	r3, r2, r3
 80147d4:	881b      	ldrh	r3, [r3, #0]
 80147d6:	b29a      	uxth	r2, r3
 80147d8:	2018      	movs	r0, #24
 80147da:	183b      	adds	r3, r7, r0
 80147dc:	4966      	ldr	r1, [pc, #408]	@ (8014978 <HAL_PCD_EP_DB_Receive+0x224>)
 80147de:	400a      	ands	r2, r1
 80147e0:	801a      	strh	r2, [r3, #0]
 80147e2:	183b      	adds	r3, r7, r0
 80147e4:	183a      	adds	r2, r7, r0
 80147e6:	8812      	ldrh	r2, [r2, #0]
 80147e8:	2180      	movs	r1, #128	@ 0x80
 80147ea:	0189      	lsls	r1, r1, #6
 80147ec:	404a      	eors	r2, r1
 80147ee:	801a      	strh	r2, [r3, #0]
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	001a      	movs	r2, r3
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	009b      	lsls	r3, r3, #2
 80147fc:	18d3      	adds	r3, r2, r3
 80147fe:	183a      	adds	r2, r7, r0
 8014800:	8812      	ldrh	r2, [r2, #0]
 8014802:	495e      	ldr	r1, [pc, #376]	@ (801497c <HAL_PCD_EP_DB_Receive+0x228>)
 8014804:	430a      	orrs	r2, r1
 8014806:	b292      	uxth	r2, r2
 8014808:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801480a:	1dbb      	adds	r3, r7, #6
 801480c:	881b      	ldrh	r3, [r3, #0]
 801480e:	2240      	movs	r2, #64	@ 0x40
 8014810:	4013      	ands	r3, r2
 8014812:	d01a      	beq.n	801484a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	001a      	movs	r2, r3
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	009b      	lsls	r3, r3, #2
 8014820:	18d3      	adds	r3, r2, r3
 8014822:	881b      	ldrh	r3, [r3, #0]
 8014824:	b29a      	uxth	r2, r3
 8014826:	2016      	movs	r0, #22
 8014828:	183b      	adds	r3, r7, r0
 801482a:	4955      	ldr	r1, [pc, #340]	@ (8014980 <HAL_PCD_EP_DB_Receive+0x22c>)
 801482c:	400a      	ands	r2, r1
 801482e:	801a      	strh	r2, [r3, #0]
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	001a      	movs	r2, r3
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	18d3      	adds	r3, r2, r3
 801483e:	183a      	adds	r2, r7, r0
 8014840:	8812      	ldrh	r2, [r2, #0]
 8014842:	4950      	ldr	r1, [pc, #320]	@ (8014984 <HAL_PCD_EP_DB_Receive+0x230>)
 8014844:	430a      	orrs	r2, r1
 8014846:	b292      	uxth	r2, r2
 8014848:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801484a:	241a      	movs	r4, #26
 801484c:	193b      	adds	r3, r7, r4
 801484e:	881b      	ldrh	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d100      	bne.n	8014856 <HAL_PCD_EP_DB_Receive+0x102>
 8014854:	e086      	b.n	8014964 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	6818      	ldr	r0, [r3, #0]
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	6959      	ldr	r1, [r3, #20]
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	891a      	ldrh	r2, [r3, #8]
 8014862:	193b      	adds	r3, r7, r4
 8014864:	881b      	ldrh	r3, [r3, #0]
 8014866:	f006 fe50 	bl	801b50a <USB_ReadPMA>
 801486a:	e07b      	b.n	8014964 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	2250      	movs	r2, #80	@ 0x50
 8014872:	5a9b      	ldrh	r3, [r3, r2]
 8014874:	b29b      	uxth	r3, r3
 8014876:	001a      	movs	r2, r3
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	00db      	lsls	r3, r3, #3
 801487e:	18d2      	adds	r2, r2, r3
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	18d3      	adds	r3, r2, r3
 8014886:	4a40      	ldr	r2, [pc, #256]	@ (8014988 <HAL_PCD_EP_DB_Receive+0x234>)
 8014888:	4694      	mov	ip, r2
 801488a:	4463      	add	r3, ip
 801488c:	881a      	ldrh	r2, [r3, #0]
 801488e:	211a      	movs	r1, #26
 8014890:	187b      	adds	r3, r7, r1
 8014892:	0592      	lsls	r2, r2, #22
 8014894:	0d92      	lsrs	r2, r2, #22
 8014896:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	699a      	ldr	r2, [r3, #24]
 801489c:	187b      	adds	r3, r7, r1
 801489e:	881b      	ldrh	r3, [r3, #0]
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d307      	bcc.n	80148b4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	699a      	ldr	r2, [r3, #24]
 80148a8:	187b      	adds	r3, r7, r1
 80148aa:	881b      	ldrh	r3, [r3, #0]
 80148ac:	1ad2      	subs	r2, r2, r3
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	619a      	str	r2, [r3, #24]
 80148b2:	e002      	b.n	80148ba <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	2200      	movs	r2, #0
 80148b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	699b      	ldr	r3, [r3, #24]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d121      	bne.n	8014906 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	001a      	movs	r2, r3
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	781b      	ldrb	r3, [r3, #0]
 80148cc:	009b      	lsls	r3, r3, #2
 80148ce:	18d3      	adds	r3, r2, r3
 80148d0:	881b      	ldrh	r3, [r3, #0]
 80148d2:	b29a      	uxth	r2, r3
 80148d4:	201e      	movs	r0, #30
 80148d6:	183b      	adds	r3, r7, r0
 80148d8:	4927      	ldr	r1, [pc, #156]	@ (8014978 <HAL_PCD_EP_DB_Receive+0x224>)
 80148da:	400a      	ands	r2, r1
 80148dc:	801a      	strh	r2, [r3, #0]
 80148de:	183b      	adds	r3, r7, r0
 80148e0:	183a      	adds	r2, r7, r0
 80148e2:	8812      	ldrh	r2, [r2, #0]
 80148e4:	2180      	movs	r1, #128	@ 0x80
 80148e6:	0189      	lsls	r1, r1, #6
 80148e8:	404a      	eors	r2, r1
 80148ea:	801a      	strh	r2, [r3, #0]
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	001a      	movs	r2, r3
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	009b      	lsls	r3, r3, #2
 80148f8:	18d3      	adds	r3, r2, r3
 80148fa:	183a      	adds	r2, r7, r0
 80148fc:	8812      	ldrh	r2, [r2, #0]
 80148fe:	491f      	ldr	r1, [pc, #124]	@ (801497c <HAL_PCD_EP_DB_Receive+0x228>)
 8014900:	430a      	orrs	r2, r1
 8014902:	b292      	uxth	r2, r2
 8014904:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8014906:	1dbb      	adds	r3, r7, #6
 8014908:	881b      	ldrh	r3, [r3, #0]
 801490a:	2240      	movs	r2, #64	@ 0x40
 801490c:	4013      	ands	r3, r2
 801490e:	d11a      	bne.n	8014946 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	001a      	movs	r2, r3
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	781b      	ldrb	r3, [r3, #0]
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	18d3      	adds	r3, r2, r3
 801491e:	881b      	ldrh	r3, [r3, #0]
 8014920:	b29a      	uxth	r2, r3
 8014922:	201c      	movs	r0, #28
 8014924:	183b      	adds	r3, r7, r0
 8014926:	4916      	ldr	r1, [pc, #88]	@ (8014980 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014928:	400a      	ands	r2, r1
 801492a:	801a      	strh	r2, [r3, #0]
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	001a      	movs	r2, r3
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	781b      	ldrb	r3, [r3, #0]
 8014936:	009b      	lsls	r3, r3, #2
 8014938:	18d3      	adds	r3, r2, r3
 801493a:	183a      	adds	r2, r7, r0
 801493c:	8812      	ldrh	r2, [r2, #0]
 801493e:	4911      	ldr	r1, [pc, #68]	@ (8014984 <HAL_PCD_EP_DB_Receive+0x230>)
 8014940:	430a      	orrs	r2, r1
 8014942:	b292      	uxth	r2, r2
 8014944:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014946:	241a      	movs	r4, #26
 8014948:	193b      	adds	r3, r7, r4
 801494a:	881b      	ldrh	r3, [r3, #0]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d009      	beq.n	8014964 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	6818      	ldr	r0, [r3, #0]
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	6959      	ldr	r1, [r3, #20]
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	895a      	ldrh	r2, [r3, #10]
 801495c:	193b      	adds	r3, r7, r4
 801495e:	881b      	ldrh	r3, [r3, #0]
 8014960:	f006 fdd3 	bl	801b50a <USB_ReadPMA>
    }
  }

  return count;
 8014964:	231a      	movs	r3, #26
 8014966:	18fb      	adds	r3, r7, r3
 8014968:	881b      	ldrh	r3, [r3, #0]
}
 801496a:	0018      	movs	r0, r3
 801496c:	46bd      	mov	sp, r7
 801496e:	b009      	add	sp, #36	@ 0x24
 8014970:	bd90      	pop	{r4, r7, pc}
 8014972:	46c0      	nop			@ (mov r8, r8)
 8014974:	00000402 	.word	0x00000402
 8014978:	ffffbf8f 	.word	0xffffbf8f
 801497c:	ffff8080 	.word	0xffff8080
 8014980:	ffff8f8f 	.word	0xffff8f8f
 8014984:	ffff80c0 	.word	0xffff80c0
 8014988:	00000406 	.word	0x00000406

0801498c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b0a4      	sub	sp, #144	@ 0x90
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	1dbb      	adds	r3, r7, #6
 8014998:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801499a:	1dbb      	adds	r3, r7, #6
 801499c:	881b      	ldrh	r3, [r3, #0]
 801499e:	2240      	movs	r2, #64	@ 0x40
 80149a0:	4013      	ands	r3, r2
 80149a2:	d100      	bne.n	80149a6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80149a4:	e1e4      	b.n	8014d70 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2250      	movs	r2, #80	@ 0x50
 80149ac:	5a9b      	ldrh	r3, [r3, r2]
 80149ae:	b29b      	uxth	r3, r3
 80149b0:	001a      	movs	r2, r3
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	781b      	ldrb	r3, [r3, #0]
 80149b6:	00db      	lsls	r3, r3, #3
 80149b8:	18d2      	adds	r2, r2, r3
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	18d3      	adds	r3, r2, r3
 80149c0:	4ad0      	ldr	r2, [pc, #832]	@ (8014d04 <HAL_PCD_EP_DB_Transmit+0x378>)
 80149c2:	4694      	mov	ip, r2
 80149c4:	4463      	add	r3, ip
 80149c6:	881a      	ldrh	r2, [r3, #0]
 80149c8:	2186      	movs	r1, #134	@ 0x86
 80149ca:	187b      	adds	r3, r7, r1
 80149cc:	0592      	lsls	r2, r2, #22
 80149ce:	0d92      	lsrs	r2, r2, #22
 80149d0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	699a      	ldr	r2, [r3, #24]
 80149d6:	187b      	adds	r3, r7, r1
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	429a      	cmp	r2, r3
 80149dc:	d907      	bls.n	80149ee <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	699a      	ldr	r2, [r3, #24]
 80149e2:	187b      	adds	r3, r7, r1
 80149e4:	881b      	ldrh	r3, [r3, #0]
 80149e6:	1ad2      	subs	r2, r2, r3
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	619a      	str	r2, [r3, #24]
 80149ec:	e002      	b.n	80149f4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	2200      	movs	r2, #0
 80149f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80149f4:	68bb      	ldr	r3, [r7, #8]
 80149f6:	699b      	ldr	r3, [r3, #24]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d000      	beq.n	80149fe <HAL_PCD_EP_DB_Transmit+0x72>
 80149fc:	e0b5      	b.n	8014b6a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	785b      	ldrb	r3, [r3, #1]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d125      	bne.n	8014a52 <HAL_PCD_EP_DB_Transmit+0xc6>
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	2250      	movs	r2, #80	@ 0x50
 8014a12:	5a9b      	ldrh	r3, [r3, r2]
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	001a      	movs	r2, r3
 8014a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a1a:	189b      	adds	r3, r3, r2
 8014a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	781b      	ldrb	r3, [r3, #0]
 8014a22:	00da      	lsls	r2, r3, #3
 8014a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a26:	18d3      	adds	r3, r2, r3
 8014a28:	4ab6      	ldr	r2, [pc, #728]	@ (8014d04 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014a2a:	4694      	mov	ip, r2
 8014a2c:	4463      	add	r3, ip
 8014a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a32:	881b      	ldrh	r3, [r3, #0]
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	059b      	lsls	r3, r3, #22
 8014a38:	0d9b      	lsrs	r3, r3, #22
 8014a3a:	b29a      	uxth	r2, r3
 8014a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a3e:	801a      	strh	r2, [r3, #0]
 8014a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a42:	881b      	ldrh	r3, [r3, #0]
 8014a44:	b29b      	uxth	r3, r3
 8014a46:	4ab0      	ldr	r2, [pc, #704]	@ (8014d08 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014a48:	4313      	orrs	r3, r2
 8014a4a:	b29a      	uxth	r2, r3
 8014a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a4e:	801a      	strh	r2, [r3, #0]
 8014a50:	e01b      	b.n	8014a8a <HAL_PCD_EP_DB_Transmit+0xfe>
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	785b      	ldrb	r3, [r3, #1]
 8014a56:	2b01      	cmp	r3, #1
 8014a58:	d117      	bne.n	8014a8a <HAL_PCD_EP_DB_Transmit+0xfe>
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2250      	movs	r2, #80	@ 0x50
 8014a66:	5a9b      	ldrh	r3, [r3, r2]
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	001a      	movs	r2, r3
 8014a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a6e:	189b      	adds	r3, r3, r2
 8014a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	781b      	ldrb	r3, [r3, #0]
 8014a76:	00da      	lsls	r2, r3, #3
 8014a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a7a:	18d3      	adds	r3, r2, r3
 8014a7c:	4aa1      	ldr	r2, [pc, #644]	@ (8014d04 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014a7e:	4694      	mov	ip, r2
 8014a80:	4463      	add	r3, ip
 8014a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8014a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a86:	2200      	movs	r2, #0
 8014a88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a90:	68bb      	ldr	r3, [r7, #8]
 8014a92:	785b      	ldrb	r3, [r3, #1]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d125      	bne.n	8014ae4 <HAL_PCD_EP_DB_Transmit+0x158>
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	61fb      	str	r3, [r7, #28]
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	2250      	movs	r2, #80	@ 0x50
 8014aa4:	5a9b      	ldrh	r3, [r3, r2]
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	001a      	movs	r2, r3
 8014aaa:	69fb      	ldr	r3, [r7, #28]
 8014aac:	189b      	adds	r3, r3, r2
 8014aae:	61fb      	str	r3, [r7, #28]
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	781b      	ldrb	r3, [r3, #0]
 8014ab4:	00da      	lsls	r2, r3, #3
 8014ab6:	69fb      	ldr	r3, [r7, #28]
 8014ab8:	18d3      	adds	r3, r2, r3
 8014aba:	4a94      	ldr	r2, [pc, #592]	@ (8014d0c <HAL_PCD_EP_DB_Transmit+0x380>)
 8014abc:	4694      	mov	ip, r2
 8014abe:	4463      	add	r3, ip
 8014ac0:	61bb      	str	r3, [r7, #24]
 8014ac2:	69bb      	ldr	r3, [r7, #24]
 8014ac4:	881b      	ldrh	r3, [r3, #0]
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	059b      	lsls	r3, r3, #22
 8014aca:	0d9b      	lsrs	r3, r3, #22
 8014acc:	b29a      	uxth	r2, r3
 8014ace:	69bb      	ldr	r3, [r7, #24]
 8014ad0:	801a      	strh	r2, [r3, #0]
 8014ad2:	69bb      	ldr	r3, [r7, #24]
 8014ad4:	881b      	ldrh	r3, [r3, #0]
 8014ad6:	b29b      	uxth	r3, r3
 8014ad8:	4a8b      	ldr	r2, [pc, #556]	@ (8014d08 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014ada:	4313      	orrs	r3, r2
 8014adc:	b29a      	uxth	r2, r3
 8014ade:	69bb      	ldr	r3, [r7, #24]
 8014ae0:	801a      	strh	r2, [r3, #0]
 8014ae2:	e018      	b.n	8014b16 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	785b      	ldrb	r3, [r3, #1]
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d114      	bne.n	8014b16 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	2250      	movs	r2, #80	@ 0x50
 8014af2:	5a9b      	ldrh	r3, [r3, r2]
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	001a      	movs	r2, r3
 8014af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014afa:	189b      	adds	r3, r3, r2
 8014afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	00da      	lsls	r2, r3, #3
 8014b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b06:	18d3      	adds	r3, r2, r3
 8014b08:	4a80      	ldr	r2, [pc, #512]	@ (8014d0c <HAL_PCD_EP_DB_Transmit+0x380>)
 8014b0a:	4694      	mov	ip, r2
 8014b0c:	4463      	add	r3, ip
 8014b0e:	623b      	str	r3, [r7, #32]
 8014b10:	6a3b      	ldr	r3, [r7, #32]
 8014b12:	2200      	movs	r2, #0
 8014b14:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	781a      	ldrb	r2, [r3, #0]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	0011      	movs	r1, r2
 8014b1e:	0018      	movs	r0, r3
 8014b20:	f008 fd2e 	bl	801d580 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014b24:	1dbb      	adds	r3, r7, #6
 8014b26:	881a      	ldrh	r2, [r3, #0]
 8014b28:	2380      	movs	r3, #128	@ 0x80
 8014b2a:	01db      	lsls	r3, r3, #7
 8014b2c:	4013      	ands	r3, r2
 8014b2e:	d100      	bne.n	8014b32 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8014b30:	e309      	b.n	8015146 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	001a      	movs	r2, r3
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	009b      	lsls	r3, r3, #2
 8014b3e:	18d3      	adds	r3, r2, r3
 8014b40:	881b      	ldrh	r3, [r3, #0]
 8014b42:	b29a      	uxth	r2, r3
 8014b44:	2016      	movs	r0, #22
 8014b46:	183b      	adds	r3, r7, r0
 8014b48:	4971      	ldr	r1, [pc, #452]	@ (8014d10 <HAL_PCD_EP_DB_Transmit+0x384>)
 8014b4a:	400a      	ands	r2, r1
 8014b4c:	801a      	strh	r2, [r3, #0]
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	001a      	movs	r2, r3
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	009b      	lsls	r3, r3, #2
 8014b5a:	18d3      	adds	r3, r2, r3
 8014b5c:	183a      	adds	r2, r7, r0
 8014b5e:	8812      	ldrh	r2, [r2, #0]
 8014b60:	496c      	ldr	r1, [pc, #432]	@ (8014d14 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014b62:	430a      	orrs	r2, r1
 8014b64:	b292      	uxth	r2, r2
 8014b66:	801a      	strh	r2, [r3, #0]
 8014b68:	e2ed      	b.n	8015146 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014b6a:	1dbb      	adds	r3, r7, #6
 8014b6c:	881a      	ldrh	r2, [r3, #0]
 8014b6e:	2380      	movs	r3, #128	@ 0x80
 8014b70:	01db      	lsls	r3, r3, #7
 8014b72:	4013      	ands	r3, r2
 8014b74:	d01a      	beq.n	8014bac <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	001a      	movs	r2, r3
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	781b      	ldrb	r3, [r3, #0]
 8014b80:	009b      	lsls	r3, r3, #2
 8014b82:	18d3      	adds	r3, r2, r3
 8014b84:	881b      	ldrh	r3, [r3, #0]
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	208a      	movs	r0, #138	@ 0x8a
 8014b8a:	183b      	adds	r3, r7, r0
 8014b8c:	4960      	ldr	r1, [pc, #384]	@ (8014d10 <HAL_PCD_EP_DB_Transmit+0x384>)
 8014b8e:	400a      	ands	r2, r1
 8014b90:	801a      	strh	r2, [r3, #0]
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	001a      	movs	r2, r3
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	009b      	lsls	r3, r3, #2
 8014b9e:	18d3      	adds	r3, r2, r3
 8014ba0:	183a      	adds	r2, r7, r0
 8014ba2:	8812      	ldrh	r2, [r2, #0]
 8014ba4:	495b      	ldr	r1, [pc, #364]	@ (8014d14 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014ba6:	430a      	orrs	r2, r1
 8014ba8:	b292      	uxth	r2, r2
 8014baa:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	2224      	movs	r2, #36	@ 0x24
 8014bb0:	5c9b      	ldrb	r3, [r3, r2]
 8014bb2:	2b01      	cmp	r3, #1
 8014bb4:	d000      	beq.n	8014bb8 <HAL_PCD_EP_DB_Transmit+0x22c>
 8014bb6:	e2c6      	b.n	8015146 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	695a      	ldr	r2, [r3, #20]
 8014bbc:	2186      	movs	r1, #134	@ 0x86
 8014bbe:	187b      	adds	r3, r7, r1
 8014bc0:	881b      	ldrh	r3, [r3, #0]
 8014bc2:	18d2      	adds	r2, r2, r3
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014bc8:	68bb      	ldr	r3, [r7, #8]
 8014bca:	69da      	ldr	r2, [r3, #28]
 8014bcc:	187b      	adds	r3, r7, r1
 8014bce:	881b      	ldrh	r3, [r3, #0]
 8014bd0:	18d2      	adds	r2, r2, r3
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	6a1a      	ldr	r2, [r3, #32]
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	691b      	ldr	r3, [r3, #16]
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d30c      	bcc.n	8014bfc <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	691b      	ldr	r3, [r3, #16]
 8014be6:	218c      	movs	r1, #140	@ 0x8c
 8014be8:	187a      	adds	r2, r7, r1
 8014bea:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	6a1a      	ldr	r2, [r3, #32]
 8014bf0:	187b      	adds	r3, r7, r1
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	1ad2      	subs	r2, r2, r3
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	621a      	str	r2, [r3, #32]
 8014bfa:	e01a      	b.n	8014c32 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	6a1b      	ldr	r3, [r3, #32]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d10a      	bne.n	8014c1a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8014c04:	2386      	movs	r3, #134	@ 0x86
 8014c06:	18fb      	adds	r3, r7, r3
 8014c08:	881b      	ldrh	r3, [r3, #0]
 8014c0a:	228c      	movs	r2, #140	@ 0x8c
 8014c0c:	18ba      	adds	r2, r7, r2
 8014c0e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	2224      	movs	r2, #36	@ 0x24
 8014c14:	2100      	movs	r1, #0
 8014c16:	5499      	strb	r1, [r3, r2]
 8014c18:	e00b      	b.n	8014c32 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	2224      	movs	r2, #36	@ 0x24
 8014c1e:	2100      	movs	r1, #0
 8014c20:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8014c22:	68bb      	ldr	r3, [r7, #8]
 8014c24:	6a1b      	ldr	r3, [r3, #32]
 8014c26:	228c      	movs	r2, #140	@ 0x8c
 8014c28:	18ba      	adds	r2, r7, r2
 8014c2a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	785b      	ldrb	r3, [r3, #1]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d000      	beq.n	8014c3c <HAL_PCD_EP_DB_Transmit+0x2b0>
 8014c3a:	e06d      	b.n	8014d18 <HAL_PCD_EP_DB_Transmit+0x38c>
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	2250      	movs	r2, #80	@ 0x50
 8014c48:	5a9b      	ldrh	r3, [r3, r2]
 8014c4a:	b29b      	uxth	r3, r3
 8014c4c:	001a      	movs	r2, r3
 8014c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c50:	189b      	adds	r3, r3, r2
 8014c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	00da      	lsls	r2, r3, #3
 8014c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c5c:	18d3      	adds	r3, r2, r3
 8014c5e:	4a29      	ldr	r2, [pc, #164]	@ (8014d04 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014c60:	4694      	mov	ip, r2
 8014c62:	4463      	add	r3, ip
 8014c64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c68:	881b      	ldrh	r3, [r3, #0]
 8014c6a:	b29b      	uxth	r3, r3
 8014c6c:	059b      	lsls	r3, r3, #22
 8014c6e:	0d9b      	lsrs	r3, r3, #22
 8014c70:	b29a      	uxth	r2, r3
 8014c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c74:	801a      	strh	r2, [r3, #0]
 8014c76:	228c      	movs	r2, #140	@ 0x8c
 8014c78:	18bb      	adds	r3, r7, r2
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8014c7e:	d91a      	bls.n	8014cb6 <HAL_PCD_EP_DB_Transmit+0x32a>
 8014c80:	18bb      	adds	r3, r7, r2
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	095b      	lsrs	r3, r3, #5
 8014c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014c88:	18bb      	adds	r3, r7, r2
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	221f      	movs	r2, #31
 8014c8e:	4013      	ands	r3, r2
 8014c90:	d102      	bne.n	8014c98 <HAL_PCD_EP_DB_Transmit+0x30c>
 8014c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014c94:	3b01      	subs	r3, #1
 8014c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c9a:	881b      	ldrh	r3, [r3, #0]
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014ca0:	b29b      	uxth	r3, r3
 8014ca2:	029b      	lsls	r3, r3, #10
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	4313      	orrs	r3, r2
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	4a17      	ldr	r2, [pc, #92]	@ (8014d08 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014cac:	4313      	orrs	r3, r2
 8014cae:	b29a      	uxth	r2, r3
 8014cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cb2:	801a      	strh	r2, [r3, #0]
 8014cb4:	e04f      	b.n	8014d56 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014cb6:	238c      	movs	r3, #140	@ 0x8c
 8014cb8:	18fb      	adds	r3, r7, r3
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d108      	bne.n	8014cd2 <HAL_PCD_EP_DB_Transmit+0x346>
 8014cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cc2:	881b      	ldrh	r3, [r3, #0]
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	4a10      	ldr	r2, [pc, #64]	@ (8014d08 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014cc8:	4313      	orrs	r3, r2
 8014cca:	b29a      	uxth	r2, r3
 8014ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cce:	801a      	strh	r2, [r3, #0]
 8014cd0:	e041      	b.n	8014d56 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014cd2:	228c      	movs	r2, #140	@ 0x8c
 8014cd4:	18bb      	adds	r3, r7, r2
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	085b      	lsrs	r3, r3, #1
 8014cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014cdc:	18bb      	adds	r3, r7, r2
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	2201      	movs	r2, #1
 8014ce2:	4013      	ands	r3, r2
 8014ce4:	d002      	beq.n	8014cec <HAL_PCD_EP_DB_Transmit+0x360>
 8014ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014ce8:	3301      	adds	r3, #1
 8014cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cee:	881b      	ldrh	r3, [r3, #0]
 8014cf0:	b29a      	uxth	r2, r3
 8014cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	029b      	lsls	r3, r3, #10
 8014cf8:	b29b      	uxth	r3, r3
 8014cfa:	4313      	orrs	r3, r2
 8014cfc:	b29a      	uxth	r2, r3
 8014cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d00:	801a      	strh	r2, [r3, #0]
 8014d02:	e028      	b.n	8014d56 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014d04:	00000402 	.word	0x00000402
 8014d08:	ffff8000 	.word	0xffff8000
 8014d0c:	00000406 	.word	0x00000406
 8014d10:	ffff8f8f 	.word	0xffff8f8f
 8014d14:	ffffc080 	.word	0xffffc080
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	785b      	ldrb	r3, [r3, #1]
 8014d1c:	2b01      	cmp	r3, #1
 8014d1e:	d11a      	bne.n	8014d56 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	2250      	movs	r2, #80	@ 0x50
 8014d2c:	5a9b      	ldrh	r3, [r3, r2]
 8014d2e:	b29b      	uxth	r3, r3
 8014d30:	001a      	movs	r2, r3
 8014d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d34:	189b      	adds	r3, r3, r2
 8014d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	781b      	ldrb	r3, [r3, #0]
 8014d3c:	00da      	lsls	r2, r3, #3
 8014d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d40:	18d3      	adds	r3, r2, r3
 8014d42:	4adb      	ldr	r2, [pc, #876]	@ (80150b0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014d44:	4694      	mov	ip, r2
 8014d46:	4463      	add	r3, ip
 8014d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8014d4a:	238c      	movs	r3, #140	@ 0x8c
 8014d4c:	18fb      	adds	r3, r7, r3
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	b29a      	uxth	r2, r3
 8014d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d54:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	6818      	ldr	r0, [r3, #0]
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	6959      	ldr	r1, [r3, #20]
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	891a      	ldrh	r2, [r3, #8]
 8014d62:	238c      	movs	r3, #140	@ 0x8c
 8014d64:	18fb      	adds	r3, r7, r3
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	f006 fb85 	bl	801b478 <USB_WritePMA>
 8014d6e:	e1ea      	b.n	8015146 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2250      	movs	r2, #80	@ 0x50
 8014d76:	5a9b      	ldrh	r3, [r3, r2]
 8014d78:	b29b      	uxth	r3, r3
 8014d7a:	001a      	movs	r2, r3
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	00db      	lsls	r3, r3, #3
 8014d82:	18d2      	adds	r2, r2, r3
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	18d3      	adds	r3, r2, r3
 8014d8a:	4aca      	ldr	r2, [pc, #808]	@ (80150b4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014d8c:	4694      	mov	ip, r2
 8014d8e:	4463      	add	r3, ip
 8014d90:	881a      	ldrh	r2, [r3, #0]
 8014d92:	2186      	movs	r1, #134	@ 0x86
 8014d94:	187b      	adds	r3, r7, r1
 8014d96:	0592      	lsls	r2, r2, #22
 8014d98:	0d92      	lsrs	r2, r2, #22
 8014d9a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	699a      	ldr	r2, [r3, #24]
 8014da0:	187b      	adds	r3, r7, r1
 8014da2:	881b      	ldrh	r3, [r3, #0]
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d307      	bcc.n	8014db8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	699a      	ldr	r2, [r3, #24]
 8014dac:	187b      	adds	r3, r7, r1
 8014dae:	881b      	ldrh	r3, [r3, #0]
 8014db0:	1ad2      	subs	r2, r2, r3
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	619a      	str	r2, [r3, #24]
 8014db6:	e002      	b.n	8014dbe <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	699b      	ldr	r3, [r3, #24]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d000      	beq.n	8014dc8 <HAL_PCD_EP_DB_Transmit+0x43c>
 8014dc6:	e0bb      	b.n	8014f40 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	785b      	ldrb	r3, [r3, #1]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d125      	bne.n	8014e1c <HAL_PCD_EP_DB_Transmit+0x490>
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	2250      	movs	r2, #80	@ 0x50
 8014ddc:	5a9b      	ldrh	r3, [r3, r2]
 8014dde:	b29b      	uxth	r3, r3
 8014de0:	001a      	movs	r2, r3
 8014de2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014de4:	189b      	adds	r3, r3, r2
 8014de6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	00da      	lsls	r2, r3, #3
 8014dee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014df0:	18d3      	adds	r3, r2, r3
 8014df2:	4aaf      	ldr	r2, [pc, #700]	@ (80150b0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014df4:	4694      	mov	ip, r2
 8014df6:	4463      	add	r3, ip
 8014df8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014dfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014dfc:	881b      	ldrh	r3, [r3, #0]
 8014dfe:	b29b      	uxth	r3, r3
 8014e00:	059b      	lsls	r3, r3, #22
 8014e02:	0d9b      	lsrs	r3, r3, #22
 8014e04:	b29a      	uxth	r2, r3
 8014e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e08:	801a      	strh	r2, [r3, #0]
 8014e0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e0c:	881b      	ldrh	r3, [r3, #0]
 8014e0e:	b29b      	uxth	r3, r3
 8014e10:	4aa9      	ldr	r2, [pc, #676]	@ (80150b8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014e12:	4313      	orrs	r3, r2
 8014e14:	b29a      	uxth	r2, r3
 8014e16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e18:	801a      	strh	r2, [r3, #0]
 8014e1a:	e01b      	b.n	8014e54 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	785b      	ldrb	r3, [r3, #1]
 8014e20:	2b01      	cmp	r3, #1
 8014e22:	d117      	bne.n	8014e54 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	667b      	str	r3, [r7, #100]	@ 0x64
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	2250      	movs	r2, #80	@ 0x50
 8014e30:	5a9b      	ldrh	r3, [r3, r2]
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	001a      	movs	r2, r3
 8014e36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014e38:	189b      	adds	r3, r3, r2
 8014e3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	781b      	ldrb	r3, [r3, #0]
 8014e40:	00da      	lsls	r2, r3, #3
 8014e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014e44:	18d3      	adds	r3, r2, r3
 8014e46:	4a9a      	ldr	r2, [pc, #616]	@ (80150b0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014e48:	4694      	mov	ip, r2
 8014e4a:	4463      	add	r3, ip
 8014e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8014e4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014e50:	2200      	movs	r2, #0
 8014e52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	677b      	str	r3, [r7, #116]	@ 0x74
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	785b      	ldrb	r3, [r3, #1]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d12b      	bne.n	8014eba <HAL_PCD_EP_DB_Transmit+0x52e>
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	2250      	movs	r2, #80	@ 0x50
 8014e6e:	5a9b      	ldrh	r3, [r3, r2]
 8014e70:	b29b      	uxth	r3, r3
 8014e72:	001a      	movs	r2, r3
 8014e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e76:	189b      	adds	r3, r3, r2
 8014e78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	00da      	lsls	r2, r3, #3
 8014e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e82:	18d3      	adds	r3, r2, r3
 8014e84:	4a8b      	ldr	r2, [pc, #556]	@ (80150b4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014e86:	4694      	mov	ip, r2
 8014e88:	4463      	add	r3, ip
 8014e8a:	2180      	movs	r1, #128	@ 0x80
 8014e8c:	187a      	adds	r2, r7, r1
 8014e8e:	6013      	str	r3, [r2, #0]
 8014e90:	187b      	adds	r3, r7, r1
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	881b      	ldrh	r3, [r3, #0]
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	059b      	lsls	r3, r3, #22
 8014e9a:	0d9b      	lsrs	r3, r3, #22
 8014e9c:	b29a      	uxth	r2, r3
 8014e9e:	187b      	adds	r3, r7, r1
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	801a      	strh	r2, [r3, #0]
 8014ea4:	187b      	adds	r3, r7, r1
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	881b      	ldrh	r3, [r3, #0]
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	4a82      	ldr	r2, [pc, #520]	@ (80150b8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014eae:	4313      	orrs	r3, r2
 8014eb0:	b29a      	uxth	r2, r3
 8014eb2:	187b      	adds	r3, r7, r1
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	801a      	strh	r2, [r3, #0]
 8014eb8:	e018      	b.n	8014eec <HAL_PCD_EP_DB_Transmit+0x560>
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	785b      	ldrb	r3, [r3, #1]
 8014ebe:	2b01      	cmp	r3, #1
 8014ec0:	d114      	bne.n	8014eec <HAL_PCD_EP_DB_Transmit+0x560>
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	2250      	movs	r2, #80	@ 0x50
 8014ec8:	5a9b      	ldrh	r3, [r3, r2]
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	001a      	movs	r2, r3
 8014ece:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014ed0:	189b      	adds	r3, r3, r2
 8014ed2:	677b      	str	r3, [r7, #116]	@ 0x74
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	781b      	ldrb	r3, [r3, #0]
 8014ed8:	00da      	lsls	r2, r3, #3
 8014eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014edc:	18d3      	adds	r3, r2, r3
 8014ede:	4a75      	ldr	r2, [pc, #468]	@ (80150b4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014ee0:	4694      	mov	ip, r2
 8014ee2:	4463      	add	r3, ip
 8014ee4:	673b      	str	r3, [r7, #112]	@ 0x70
 8014ee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014ee8:	2200      	movs	r2, #0
 8014eea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014eec:	68bb      	ldr	r3, [r7, #8]
 8014eee:	781a      	ldrb	r2, [r3, #0]
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	0011      	movs	r1, r2
 8014ef4:	0018      	movs	r0, r3
 8014ef6:	f008 fb43 	bl	801d580 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014efa:	1dbb      	adds	r3, r7, #6
 8014efc:	881a      	ldrh	r2, [r3, #0]
 8014efe:	2380      	movs	r3, #128	@ 0x80
 8014f00:	01db      	lsls	r3, r3, #7
 8014f02:	4013      	ands	r3, r2
 8014f04:	d000      	beq.n	8014f08 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014f06:	e11e      	b.n	8015146 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	001a      	movs	r2, r3
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	781b      	ldrb	r3, [r3, #0]
 8014f12:	009b      	lsls	r3, r3, #2
 8014f14:	18d3      	adds	r3, r2, r3
 8014f16:	881b      	ldrh	r3, [r3, #0]
 8014f18:	b29a      	uxth	r2, r3
 8014f1a:	2088      	movs	r0, #136	@ 0x88
 8014f1c:	183b      	adds	r3, r7, r0
 8014f1e:	4967      	ldr	r1, [pc, #412]	@ (80150bc <HAL_PCD_EP_DB_Transmit+0x730>)
 8014f20:	400a      	ands	r2, r1
 8014f22:	801a      	strh	r2, [r3, #0]
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	001a      	movs	r2, r3
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	009b      	lsls	r3, r3, #2
 8014f30:	18d3      	adds	r3, r2, r3
 8014f32:	183a      	adds	r2, r7, r0
 8014f34:	8812      	ldrh	r2, [r2, #0]
 8014f36:	4962      	ldr	r1, [pc, #392]	@ (80150c0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014f38:	430a      	orrs	r2, r1
 8014f3a:	b292      	uxth	r2, r2
 8014f3c:	801a      	strh	r2, [r3, #0]
 8014f3e:	e102      	b.n	8015146 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014f40:	1dbb      	adds	r3, r7, #6
 8014f42:	881a      	ldrh	r2, [r3, #0]
 8014f44:	2380      	movs	r3, #128	@ 0x80
 8014f46:	01db      	lsls	r3, r3, #7
 8014f48:	4013      	ands	r3, r2
 8014f4a:	d11a      	bne.n	8014f82 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	001a      	movs	r2, r3
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	781b      	ldrb	r3, [r3, #0]
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	18d3      	adds	r3, r2, r3
 8014f5a:	881b      	ldrh	r3, [r3, #0]
 8014f5c:	b29a      	uxth	r2, r3
 8014f5e:	204e      	movs	r0, #78	@ 0x4e
 8014f60:	183b      	adds	r3, r7, r0
 8014f62:	4956      	ldr	r1, [pc, #344]	@ (80150bc <HAL_PCD_EP_DB_Transmit+0x730>)
 8014f64:	400a      	ands	r2, r1
 8014f66:	801a      	strh	r2, [r3, #0]
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	001a      	movs	r2, r3
 8014f6e:	68bb      	ldr	r3, [r7, #8]
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	009b      	lsls	r3, r3, #2
 8014f74:	18d3      	adds	r3, r2, r3
 8014f76:	183a      	adds	r2, r7, r0
 8014f78:	8812      	ldrh	r2, [r2, #0]
 8014f7a:	4951      	ldr	r1, [pc, #324]	@ (80150c0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014f7c:	430a      	orrs	r2, r1
 8014f7e:	b292      	uxth	r2, r2
 8014f80:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	2224      	movs	r2, #36	@ 0x24
 8014f86:	5c9b      	ldrb	r3, [r3, r2]
 8014f88:	2b01      	cmp	r3, #1
 8014f8a:	d000      	beq.n	8014f8e <HAL_PCD_EP_DB_Transmit+0x602>
 8014f8c:	e0db      	b.n	8015146 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	695a      	ldr	r2, [r3, #20]
 8014f92:	2186      	movs	r1, #134	@ 0x86
 8014f94:	187b      	adds	r3, r7, r1
 8014f96:	881b      	ldrh	r3, [r3, #0]
 8014f98:	18d2      	adds	r2, r2, r3
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	69da      	ldr	r2, [r3, #28]
 8014fa2:	187b      	adds	r3, r7, r1
 8014fa4:	881b      	ldrh	r3, [r3, #0]
 8014fa6:	18d2      	adds	r2, r2, r3
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014fac:	68bb      	ldr	r3, [r7, #8]
 8014fae:	6a1a      	ldr	r2, [r3, #32]
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	691b      	ldr	r3, [r3, #16]
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d30c      	bcc.n	8014fd2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	691b      	ldr	r3, [r3, #16]
 8014fbc:	218c      	movs	r1, #140	@ 0x8c
 8014fbe:	187a      	adds	r2, r7, r1
 8014fc0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014fc2:	68bb      	ldr	r3, [r7, #8]
 8014fc4:	6a1a      	ldr	r2, [r3, #32]
 8014fc6:	187b      	adds	r3, r7, r1
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	1ad2      	subs	r2, r2, r3
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	621a      	str	r2, [r3, #32]
 8014fd0:	e01a      	b.n	8015008 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014fd2:	68bb      	ldr	r3, [r7, #8]
 8014fd4:	6a1b      	ldr	r3, [r3, #32]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d10a      	bne.n	8014ff0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014fda:	2386      	movs	r3, #134	@ 0x86
 8014fdc:	18fb      	adds	r3, r7, r3
 8014fde:	881b      	ldrh	r3, [r3, #0]
 8014fe0:	228c      	movs	r2, #140	@ 0x8c
 8014fe2:	18ba      	adds	r2, r7, r2
 8014fe4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	2224      	movs	r2, #36	@ 0x24
 8014fea:	2100      	movs	r1, #0
 8014fec:	5499      	strb	r1, [r3, r2]
 8014fee:	e00b      	b.n	8015008 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	6a1b      	ldr	r3, [r3, #32]
 8014ff4:	228c      	movs	r2, #140	@ 0x8c
 8014ff6:	18ba      	adds	r2, r7, r2
 8014ff8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014ffa:	68bb      	ldr	r3, [r7, #8]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	2224      	movs	r2, #36	@ 0x24
 8015004:	2100      	movs	r1, #0
 8015006:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	657b      	str	r3, [r7, #84]	@ 0x54
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	785b      	ldrb	r3, [r3, #1]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d000      	beq.n	8015018 <HAL_PCD_EP_DB_Transmit+0x68c>
 8015016:	e06e      	b.n	80150f6 <HAL_PCD_EP_DB_Transmit+0x76a>
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	2250      	movs	r2, #80	@ 0x50
 8015024:	5a9b      	ldrh	r3, [r3, r2]
 8015026:	b29b      	uxth	r3, r3
 8015028:	001a      	movs	r2, r3
 801502a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801502c:	189b      	adds	r3, r3, r2
 801502e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	781b      	ldrb	r3, [r3, #0]
 8015034:	00da      	lsls	r2, r3, #3
 8015036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015038:	18d3      	adds	r3, r2, r3
 801503a:	4a1e      	ldr	r2, [pc, #120]	@ (80150b4 <HAL_PCD_EP_DB_Transmit+0x728>)
 801503c:	4694      	mov	ip, r2
 801503e:	4463      	add	r3, ip
 8015040:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015044:	881b      	ldrh	r3, [r3, #0]
 8015046:	b29b      	uxth	r3, r3
 8015048:	059b      	lsls	r3, r3, #22
 801504a:	0d9b      	lsrs	r3, r3, #22
 801504c:	b29a      	uxth	r2, r3
 801504e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015050:	801a      	strh	r2, [r3, #0]
 8015052:	228c      	movs	r2, #140	@ 0x8c
 8015054:	18bb      	adds	r3, r7, r2
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	2b3e      	cmp	r3, #62	@ 0x3e
 801505a:	d91a      	bls.n	8015092 <HAL_PCD_EP_DB_Transmit+0x706>
 801505c:	18bb      	adds	r3, r7, r2
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	095b      	lsrs	r3, r3, #5
 8015062:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015064:	18bb      	adds	r3, r7, r2
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	221f      	movs	r2, #31
 801506a:	4013      	ands	r3, r2
 801506c:	d102      	bne.n	8015074 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801506e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015070:	3b01      	subs	r3, #1
 8015072:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015074:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015076:	881b      	ldrh	r3, [r3, #0]
 8015078:	b29a      	uxth	r2, r3
 801507a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801507c:	b29b      	uxth	r3, r3
 801507e:	029b      	lsls	r3, r3, #10
 8015080:	b29b      	uxth	r3, r3
 8015082:	4313      	orrs	r3, r2
 8015084:	b29b      	uxth	r3, r3
 8015086:	4a0c      	ldr	r2, [pc, #48]	@ (80150b8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8015088:	4313      	orrs	r3, r2
 801508a:	b29a      	uxth	r2, r3
 801508c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801508e:	801a      	strh	r2, [r3, #0]
 8015090:	e04d      	b.n	801512e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8015092:	238c      	movs	r3, #140	@ 0x8c
 8015094:	18fb      	adds	r3, r7, r3
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d113      	bne.n	80150c4 <HAL_PCD_EP_DB_Transmit+0x738>
 801509c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801509e:	881b      	ldrh	r3, [r3, #0]
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	4a05      	ldr	r2, [pc, #20]	@ (80150b8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80150a4:	4313      	orrs	r3, r2
 80150a6:	b29a      	uxth	r2, r3
 80150a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80150aa:	801a      	strh	r2, [r3, #0]
 80150ac:	e03f      	b.n	801512e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80150ae:	46c0      	nop			@ (mov r8, r8)
 80150b0:	00000402 	.word	0x00000402
 80150b4:	00000406 	.word	0x00000406
 80150b8:	ffff8000 	.word	0xffff8000
 80150bc:	ffff8f8f 	.word	0xffff8f8f
 80150c0:	ffffc080 	.word	0xffffc080
 80150c4:	228c      	movs	r2, #140	@ 0x8c
 80150c6:	18bb      	adds	r3, r7, r2
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	085b      	lsrs	r3, r3, #1
 80150cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80150ce:	18bb      	adds	r3, r7, r2
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	2201      	movs	r2, #1
 80150d4:	4013      	ands	r3, r2
 80150d6:	d002      	beq.n	80150de <HAL_PCD_EP_DB_Transmit+0x752>
 80150d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80150da:	3301      	adds	r3, #1
 80150dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80150de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80150e0:	881b      	ldrh	r3, [r3, #0]
 80150e2:	b29a      	uxth	r2, r3
 80150e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80150e6:	b29b      	uxth	r3, r3
 80150e8:	029b      	lsls	r3, r3, #10
 80150ea:	b29b      	uxth	r3, r3
 80150ec:	4313      	orrs	r3, r2
 80150ee:	b29a      	uxth	r2, r3
 80150f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80150f2:	801a      	strh	r2, [r3, #0]
 80150f4:	e01b      	b.n	801512e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	785b      	ldrb	r3, [r3, #1]
 80150fa:	2b01      	cmp	r3, #1
 80150fc:	d117      	bne.n	801512e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	2250      	movs	r2, #80	@ 0x50
 8015104:	5a9b      	ldrh	r3, [r3, r2]
 8015106:	b29b      	uxth	r3, r3
 8015108:	001a      	movs	r2, r3
 801510a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801510c:	189b      	adds	r3, r3, r2
 801510e:	657b      	str	r3, [r7, #84]	@ 0x54
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	00da      	lsls	r2, r3, #3
 8015116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015118:	18d3      	adds	r3, r2, r3
 801511a:	4a21      	ldr	r2, [pc, #132]	@ (80151a0 <HAL_PCD_EP_DB_Transmit+0x814>)
 801511c:	4694      	mov	ip, r2
 801511e:	4463      	add	r3, ip
 8015120:	653b      	str	r3, [r7, #80]	@ 0x50
 8015122:	238c      	movs	r3, #140	@ 0x8c
 8015124:	18fb      	adds	r3, r7, r3
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	b29a      	uxth	r2, r3
 801512a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801512c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	6818      	ldr	r0, [r3, #0]
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	6959      	ldr	r1, [r3, #20]
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	895a      	ldrh	r2, [r3, #10]
 801513a:	238c      	movs	r3, #140	@ 0x8c
 801513c:	18fb      	adds	r3, r7, r3
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	b29b      	uxth	r3, r3
 8015142:	f006 f999 	bl	801b478 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	001a      	movs	r2, r3
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	009b      	lsls	r3, r3, #2
 8015152:	18d3      	adds	r3, r2, r3
 8015154:	881b      	ldrh	r3, [r3, #0]
 8015156:	b29a      	uxth	r2, r3
 8015158:	2014      	movs	r0, #20
 801515a:	183b      	adds	r3, r7, r0
 801515c:	4911      	ldr	r1, [pc, #68]	@ (80151a4 <HAL_PCD_EP_DB_Transmit+0x818>)
 801515e:	400a      	ands	r2, r1
 8015160:	801a      	strh	r2, [r3, #0]
 8015162:	183b      	adds	r3, r7, r0
 8015164:	183a      	adds	r2, r7, r0
 8015166:	8812      	ldrh	r2, [r2, #0]
 8015168:	2110      	movs	r1, #16
 801516a:	404a      	eors	r2, r1
 801516c:	801a      	strh	r2, [r3, #0]
 801516e:	183b      	adds	r3, r7, r0
 8015170:	183a      	adds	r2, r7, r0
 8015172:	8812      	ldrh	r2, [r2, #0]
 8015174:	2120      	movs	r1, #32
 8015176:	404a      	eors	r2, r1
 8015178:	801a      	strh	r2, [r3, #0]
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	001a      	movs	r2, r3
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	781b      	ldrb	r3, [r3, #0]
 8015184:	009b      	lsls	r3, r3, #2
 8015186:	18d3      	adds	r3, r2, r3
 8015188:	183a      	adds	r2, r7, r0
 801518a:	8812      	ldrh	r2, [r2, #0]
 801518c:	4906      	ldr	r1, [pc, #24]	@ (80151a8 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801518e:	430a      	orrs	r2, r1
 8015190:	b292      	uxth	r2, r2
 8015192:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8015194:	2300      	movs	r3, #0
}
 8015196:	0018      	movs	r0, r3
 8015198:	46bd      	mov	sp, r7
 801519a:	b024      	add	sp, #144	@ 0x90
 801519c:	bd80      	pop	{r7, pc}
 801519e:	46c0      	nop			@ (mov r8, r8)
 80151a0:	00000406 	.word	0x00000406
 80151a4:	ffff8fbf 	.word	0xffff8fbf
 80151a8:	ffff8080 	.word	0xffff8080

080151ac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80151ac:	b590      	push	{r4, r7, lr}
 80151ae:	b087      	sub	sp, #28
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	60f8      	str	r0, [r7, #12]
 80151b4:	0008      	movs	r0, r1
 80151b6:	0011      	movs	r1, r2
 80151b8:	607b      	str	r3, [r7, #4]
 80151ba:	240a      	movs	r4, #10
 80151bc:	193b      	adds	r3, r7, r4
 80151be:	1c02      	adds	r2, r0, #0
 80151c0:	801a      	strh	r2, [r3, #0]
 80151c2:	2308      	movs	r3, #8
 80151c4:	18fb      	adds	r3, r7, r3
 80151c6:	1c0a      	adds	r2, r1, #0
 80151c8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80151ca:	0021      	movs	r1, r4
 80151cc:	187b      	adds	r3, r7, r1
 80151ce:	881b      	ldrh	r3, [r3, #0]
 80151d0:	2280      	movs	r2, #128	@ 0x80
 80151d2:	4013      	ands	r3, r2
 80151d4:	b29b      	uxth	r3, r3
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00c      	beq.n	80151f4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80151da:	187b      	adds	r3, r7, r1
 80151dc:	881b      	ldrh	r3, [r3, #0]
 80151de:	2207      	movs	r2, #7
 80151e0:	4013      	ands	r3, r2
 80151e2:	1c5a      	adds	r2, r3, #1
 80151e4:	0013      	movs	r3, r2
 80151e6:	009b      	lsls	r3, r3, #2
 80151e8:	189b      	adds	r3, r3, r2
 80151ea:	00db      	lsls	r3, r3, #3
 80151ec:	68fa      	ldr	r2, [r7, #12]
 80151ee:	18d3      	adds	r3, r2, r3
 80151f0:	617b      	str	r3, [r7, #20]
 80151f2:	e00b      	b.n	801520c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80151f4:	230a      	movs	r3, #10
 80151f6:	18fb      	adds	r3, r7, r3
 80151f8:	881a      	ldrh	r2, [r3, #0]
 80151fa:	0013      	movs	r3, r2
 80151fc:	009b      	lsls	r3, r3, #2
 80151fe:	189b      	adds	r3, r3, r2
 8015200:	00db      	lsls	r3, r3, #3
 8015202:	3369      	adds	r3, #105	@ 0x69
 8015204:	33ff      	adds	r3, #255	@ 0xff
 8015206:	68fa      	ldr	r2, [r7, #12]
 8015208:	18d3      	adds	r3, r2, r3
 801520a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801520c:	2308      	movs	r3, #8
 801520e:	18fb      	adds	r3, r7, r3
 8015210:	881b      	ldrh	r3, [r3, #0]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d107      	bne.n	8015226 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	2200      	movs	r2, #0
 801521a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	b29a      	uxth	r2, r3
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	80da      	strh	r2, [r3, #6]
 8015224:	e00b      	b.n	801523e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	2201      	movs	r2, #1
 801522a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	b29a      	uxth	r2, r3
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	0c1b      	lsrs	r3, r3, #16
 8015238:	b29a      	uxth	r2, r3
 801523a:	697b      	ldr	r3, [r7, #20]
 801523c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801523e:	2300      	movs	r3, #0
}
 8015240:	0018      	movs	r0, r3
 8015242:	46bd      	mov	sp, r7
 8015244:	b007      	add	sp, #28
 8015246:	bd90      	pop	{r4, r7, pc}

08015248 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b084      	sub	sp, #16
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8015256:	687a      	ldr	r2, [r7, #4]
 8015258:	23ba      	movs	r3, #186	@ 0xba
 801525a:	009b      	lsls	r3, r3, #2
 801525c:	2101      	movs	r1, #1
 801525e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8015260:	687a      	ldr	r2, [r7, #4]
 8015262:	23b8      	movs	r3, #184	@ 0xb8
 8015264:	009b      	lsls	r3, r3, #2
 8015266:	2100      	movs	r1, #0
 8015268:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2254      	movs	r2, #84	@ 0x54
 801526e:	5a9b      	ldrh	r3, [r3, r2]
 8015270:	b29b      	uxth	r3, r3
 8015272:	2201      	movs	r2, #1
 8015274:	4313      	orrs	r3, r2
 8015276:	b299      	uxth	r1, r3
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	2254      	movs	r2, #84	@ 0x54
 801527c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2254      	movs	r2, #84	@ 0x54
 8015282:	5a9b      	ldrh	r3, [r3, r2]
 8015284:	b29b      	uxth	r3, r3
 8015286:	2202      	movs	r2, #2
 8015288:	4313      	orrs	r3, r2
 801528a:	b299      	uxth	r1, r3
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	2254      	movs	r2, #84	@ 0x54
 8015290:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015292:	2300      	movs	r3, #0
}
 8015294:	0018      	movs	r0, r3
 8015296:	46bd      	mov	sp, r7
 8015298:	b004      	add	sp, #16
 801529a:	bd80      	pop	{r7, pc}

0801529c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	000a      	movs	r2, r1
 80152a6:	1cfb      	adds	r3, r7, #3
 80152a8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80152aa:	46c0      	nop			@ (mov r8, r8)
 80152ac:	46bd      	mov	sp, r7
 80152ae:	b002      	add	sp, #8
 80152b0:	bd80      	pop	{r7, pc}
	...

080152b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80152b8:	4b04      	ldr	r3, [pc, #16]	@ (80152cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80152ba:	681a      	ldr	r2, [r3, #0]
 80152bc:	4b03      	ldr	r3, [pc, #12]	@ (80152cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80152be:	2180      	movs	r1, #128	@ 0x80
 80152c0:	0049      	lsls	r1, r1, #1
 80152c2:	430a      	orrs	r2, r1
 80152c4:	601a      	str	r2, [r3, #0]
}
 80152c6:	46c0      	nop			@ (mov r8, r8)
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	40007000 	.word	0x40007000

080152d0 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80152d4:	4b04      	ldr	r3, [pc, #16]	@ (80152e8 <HAL_PWR_DisableBkUpAccess+0x18>)
 80152d6:	681a      	ldr	r2, [r3, #0]
 80152d8:	4b03      	ldr	r3, [pc, #12]	@ (80152e8 <HAL_PWR_DisableBkUpAccess+0x18>)
 80152da:	4904      	ldr	r1, [pc, #16]	@ (80152ec <HAL_PWR_DisableBkUpAccess+0x1c>)
 80152dc:	400a      	ands	r2, r1
 80152de:	601a      	str	r2, [r3, #0]
}
 80152e0:	46c0      	nop			@ (mov r8, r8)
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}
 80152e6:	46c0      	nop			@ (mov r8, r8)
 80152e8:	40007000 	.word	0x40007000
 80152ec:	fffffeff 	.word	0xfffffeff

080152f0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b086      	sub	sp, #24
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
 80152f8:	000a      	movs	r2, r1
 80152fa:	1cfb      	adds	r3, r7, #3
 80152fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80152fe:	2300      	movs	r3, #0
 8015300:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8015302:	4b25      	ldr	r3, [pc, #148]	@ (8015398 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015304:	681a      	ldr	r2, [r3, #0]
 8015306:	2380      	movs	r3, #128	@ 0x80
 8015308:	009b      	lsls	r3, r3, #2
 801530a:	4013      	ands	r3, r2
 801530c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801530e:	4b23      	ldr	r3, [pc, #140]	@ (801539c <HAL_PWR_EnterSTOPMode+0xac>)
 8015310:	6a1b      	ldr	r3, [r3, #32]
 8015312:	2201      	movs	r2, #1
 8015314:	4013      	ands	r3, r2
 8015316:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d008      	beq.n	8015330 <HAL_PWR_EnterSTOPMode+0x40>
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d005      	beq.n	8015330 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8015324:	4b1c      	ldr	r3, [pc, #112]	@ (8015398 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015326:	681a      	ldr	r2, [r3, #0]
 8015328:	4b1b      	ldr	r3, [pc, #108]	@ (8015398 <HAL_PWR_EnterSTOPMode+0xa8>)
 801532a:	491d      	ldr	r1, [pc, #116]	@ (80153a0 <HAL_PWR_EnterSTOPMode+0xb0>)
 801532c:	400a      	ands	r2, r1
 801532e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8015330:	4b19      	ldr	r3, [pc, #100]	@ (8015398 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8015336:	697b      	ldr	r3, [r7, #20]
 8015338:	2203      	movs	r2, #3
 801533a:	4393      	bics	r3, r2
 801533c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801533e:	697a      	ldr	r2, [r7, #20]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	4313      	orrs	r3, r2
 8015344:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8015346:	4b14      	ldr	r3, [pc, #80]	@ (8015398 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015348:	697a      	ldr	r2, [r7, #20]
 801534a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801534c:	4b15      	ldr	r3, [pc, #84]	@ (80153a4 <HAL_PWR_EnterSTOPMode+0xb4>)
 801534e:	691a      	ldr	r2, [r3, #16]
 8015350:	4b14      	ldr	r3, [pc, #80]	@ (80153a4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015352:	2104      	movs	r1, #4
 8015354:	430a      	orrs	r2, r1
 8015356:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8015358:	1cfb      	adds	r3, r7, #3
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	2b01      	cmp	r3, #1
 801535e:	d101      	bne.n	8015364 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8015360:	bf30      	wfi
 8015362:	e002      	b.n	801536a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8015364:	bf40      	sev
    __WFE();
 8015366:	bf20      	wfe
    __WFE();
 8015368:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801536a:	4b0e      	ldr	r3, [pc, #56]	@ (80153a4 <HAL_PWR_EnterSTOPMode+0xb4>)
 801536c:	691a      	ldr	r2, [r3, #16]
 801536e:	4b0d      	ldr	r3, [pc, #52]	@ (80153a4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015370:	2104      	movs	r1, #4
 8015372:	438a      	bics	r2, r1
 8015374:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d009      	beq.n	8015390 <HAL_PWR_EnterSTOPMode+0xa0>
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d006      	beq.n	8015390 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8015382:	4b05      	ldr	r3, [pc, #20]	@ (8015398 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015384:	681a      	ldr	r2, [r3, #0]
 8015386:	4b04      	ldr	r3, [pc, #16]	@ (8015398 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015388:	2180      	movs	r1, #128	@ 0x80
 801538a:	0089      	lsls	r1, r1, #2
 801538c:	430a      	orrs	r2, r1
 801538e:	601a      	str	r2, [r3, #0]
  }
}
 8015390:	46c0      	nop			@ (mov r8, r8)
 8015392:	46bd      	mov	sp, r7
 8015394:	b006      	add	sp, #24
 8015396:	bd80      	pop	{r7, pc}
 8015398:	40007000 	.word	0x40007000
 801539c:	40010000 	.word	0x40010000
 80153a0:	fffffdff 	.word	0xfffffdff
 80153a4:	e000ed00 	.word	0xe000ed00

080153a8 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80153ac:	4b07      	ldr	r3, [pc, #28]	@ (80153cc <HAL_PWR_EnterSTANDBYMode+0x24>)
 80153ae:	681a      	ldr	r2, [r3, #0]
 80153b0:	4b06      	ldr	r3, [pc, #24]	@ (80153cc <HAL_PWR_EnterSTANDBYMode+0x24>)
 80153b2:	2102      	movs	r1, #2
 80153b4:	430a      	orrs	r2, r1
 80153b6:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80153b8:	4b05      	ldr	r3, [pc, #20]	@ (80153d0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80153ba:	691a      	ldr	r2, [r3, #16]
 80153bc:	4b04      	ldr	r3, [pc, #16]	@ (80153d0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80153be:	2104      	movs	r1, #4
 80153c0:	430a      	orrs	r2, r1
 80153c2:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80153c4:	bf30      	wfi
}
 80153c6:	46c0      	nop			@ (mov r8, r8)
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bd80      	pop	{r7, pc}
 80153cc:	40007000 	.word	0x40007000
 80153d0:	e000ed00 	.word	0xe000ed00

080153d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80153d4:	b5b0      	push	{r4, r5, r7, lr}
 80153d6:	b08a      	sub	sp, #40	@ 0x28
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d102      	bne.n	80153e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80153e2:	2301      	movs	r3, #1
 80153e4:	f000 fbbf 	bl	8015b66 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80153e8:	4bc9      	ldr	r3, [pc, #804]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	220c      	movs	r2, #12
 80153ee:	4013      	ands	r3, r2
 80153f0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80153f2:	4bc7      	ldr	r3, [pc, #796]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80153f4:	68da      	ldr	r2, [r3, #12]
 80153f6:	2380      	movs	r3, #128	@ 0x80
 80153f8:	025b      	lsls	r3, r3, #9
 80153fa:	4013      	ands	r3, r2
 80153fc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	2201      	movs	r2, #1
 8015404:	4013      	ands	r3, r2
 8015406:	d100      	bne.n	801540a <HAL_RCC_OscConfig+0x36>
 8015408:	e07e      	b.n	8015508 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801540a:	69fb      	ldr	r3, [r7, #28]
 801540c:	2b08      	cmp	r3, #8
 801540e:	d007      	beq.n	8015420 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8015410:	69fb      	ldr	r3, [r7, #28]
 8015412:	2b0c      	cmp	r3, #12
 8015414:	d112      	bne.n	801543c <HAL_RCC_OscConfig+0x68>
 8015416:	69ba      	ldr	r2, [r7, #24]
 8015418:	2380      	movs	r3, #128	@ 0x80
 801541a:	025b      	lsls	r3, r3, #9
 801541c:	429a      	cmp	r2, r3
 801541e:	d10d      	bne.n	801543c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015420:	4bbb      	ldr	r3, [pc, #748]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015422:	681a      	ldr	r2, [r3, #0]
 8015424:	2380      	movs	r3, #128	@ 0x80
 8015426:	029b      	lsls	r3, r3, #10
 8015428:	4013      	ands	r3, r2
 801542a:	d100      	bne.n	801542e <HAL_RCC_OscConfig+0x5a>
 801542c:	e06b      	b.n	8015506 <HAL_RCC_OscConfig+0x132>
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	685b      	ldr	r3, [r3, #4]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d167      	bne.n	8015506 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8015436:	2301      	movs	r3, #1
 8015438:	f000 fb95 	bl	8015b66 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	685a      	ldr	r2, [r3, #4]
 8015440:	2380      	movs	r3, #128	@ 0x80
 8015442:	025b      	lsls	r3, r3, #9
 8015444:	429a      	cmp	r2, r3
 8015446:	d107      	bne.n	8015458 <HAL_RCC_OscConfig+0x84>
 8015448:	4bb1      	ldr	r3, [pc, #708]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	4bb0      	ldr	r3, [pc, #704]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801544e:	2180      	movs	r1, #128	@ 0x80
 8015450:	0249      	lsls	r1, r1, #9
 8015452:	430a      	orrs	r2, r1
 8015454:	601a      	str	r2, [r3, #0]
 8015456:	e027      	b.n	80154a8 <HAL_RCC_OscConfig+0xd4>
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	685a      	ldr	r2, [r3, #4]
 801545c:	23a0      	movs	r3, #160	@ 0xa0
 801545e:	02db      	lsls	r3, r3, #11
 8015460:	429a      	cmp	r2, r3
 8015462:	d10e      	bne.n	8015482 <HAL_RCC_OscConfig+0xae>
 8015464:	4baa      	ldr	r3, [pc, #680]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	4ba9      	ldr	r3, [pc, #676]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801546a:	2180      	movs	r1, #128	@ 0x80
 801546c:	02c9      	lsls	r1, r1, #11
 801546e:	430a      	orrs	r2, r1
 8015470:	601a      	str	r2, [r3, #0]
 8015472:	4ba7      	ldr	r3, [pc, #668]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015474:	681a      	ldr	r2, [r3, #0]
 8015476:	4ba6      	ldr	r3, [pc, #664]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015478:	2180      	movs	r1, #128	@ 0x80
 801547a:	0249      	lsls	r1, r1, #9
 801547c:	430a      	orrs	r2, r1
 801547e:	601a      	str	r2, [r3, #0]
 8015480:	e012      	b.n	80154a8 <HAL_RCC_OscConfig+0xd4>
 8015482:	4ba3      	ldr	r3, [pc, #652]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	4ba2      	ldr	r3, [pc, #648]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015488:	49a2      	ldr	r1, [pc, #648]	@ (8015714 <HAL_RCC_OscConfig+0x340>)
 801548a:	400a      	ands	r2, r1
 801548c:	601a      	str	r2, [r3, #0]
 801548e:	4ba0      	ldr	r3, [pc, #640]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015490:	681a      	ldr	r2, [r3, #0]
 8015492:	2380      	movs	r3, #128	@ 0x80
 8015494:	025b      	lsls	r3, r3, #9
 8015496:	4013      	ands	r3, r2
 8015498:	60fb      	str	r3, [r7, #12]
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	4b9c      	ldr	r3, [pc, #624]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801549e:	681a      	ldr	r2, [r3, #0]
 80154a0:	4b9b      	ldr	r3, [pc, #620]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80154a2:	499d      	ldr	r1, [pc, #628]	@ (8015718 <HAL_RCC_OscConfig+0x344>)
 80154a4:	400a      	ands	r2, r1
 80154a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	685b      	ldr	r3, [r3, #4]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d015      	beq.n	80154dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80154b0:	f7f9 fe60 	bl	800f174 <HAL_GetTick>
 80154b4:	0003      	movs	r3, r0
 80154b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80154b8:	e009      	b.n	80154ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80154ba:	f7f9 fe5b 	bl	800f174 <HAL_GetTick>
 80154be:	0002      	movs	r2, r0
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	1ad3      	subs	r3, r2, r3
 80154c4:	2b64      	cmp	r3, #100	@ 0x64
 80154c6:	d902      	bls.n	80154ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80154c8:	2303      	movs	r3, #3
 80154ca:	f000 fb4c 	bl	8015b66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80154ce:	4b90      	ldr	r3, [pc, #576]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80154d0:	681a      	ldr	r2, [r3, #0]
 80154d2:	2380      	movs	r3, #128	@ 0x80
 80154d4:	029b      	lsls	r3, r3, #10
 80154d6:	4013      	ands	r3, r2
 80154d8:	d0ef      	beq.n	80154ba <HAL_RCC_OscConfig+0xe6>
 80154da:	e015      	b.n	8015508 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80154dc:	f7f9 fe4a 	bl	800f174 <HAL_GetTick>
 80154e0:	0003      	movs	r3, r0
 80154e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80154e4:	e008      	b.n	80154f8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80154e6:	f7f9 fe45 	bl	800f174 <HAL_GetTick>
 80154ea:	0002      	movs	r2, r0
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	1ad3      	subs	r3, r2, r3
 80154f0:	2b64      	cmp	r3, #100	@ 0x64
 80154f2:	d901      	bls.n	80154f8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80154f4:	2303      	movs	r3, #3
 80154f6:	e336      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80154f8:	4b85      	ldr	r3, [pc, #532]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80154fa:	681a      	ldr	r2, [r3, #0]
 80154fc:	2380      	movs	r3, #128	@ 0x80
 80154fe:	029b      	lsls	r3, r3, #10
 8015500:	4013      	ands	r3, r2
 8015502:	d1f0      	bne.n	80154e6 <HAL_RCC_OscConfig+0x112>
 8015504:	e000      	b.n	8015508 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015506:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	2202      	movs	r2, #2
 801550e:	4013      	ands	r3, r2
 8015510:	d100      	bne.n	8015514 <HAL_RCC_OscConfig+0x140>
 8015512:	e099      	b.n	8015648 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	68db      	ldr	r3, [r3, #12]
 8015518:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801551c:	2220      	movs	r2, #32
 801551e:	4013      	ands	r3, r2
 8015520:	d009      	beq.n	8015536 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8015522:	4b7b      	ldr	r3, [pc, #492]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015524:	681a      	ldr	r2, [r3, #0]
 8015526:	4b7a      	ldr	r3, [pc, #488]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015528:	2120      	movs	r1, #32
 801552a:	430a      	orrs	r2, r1
 801552c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015530:	2220      	movs	r2, #32
 8015532:	4393      	bics	r3, r2
 8015534:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015536:	69fb      	ldr	r3, [r7, #28]
 8015538:	2b04      	cmp	r3, #4
 801553a:	d005      	beq.n	8015548 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801553c:	69fb      	ldr	r3, [r7, #28]
 801553e:	2b0c      	cmp	r3, #12
 8015540:	d13e      	bne.n	80155c0 <HAL_RCC_OscConfig+0x1ec>
 8015542:	69bb      	ldr	r3, [r7, #24]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d13b      	bne.n	80155c0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8015548:	4b71      	ldr	r3, [pc, #452]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	2204      	movs	r2, #4
 801554e:	4013      	ands	r3, r2
 8015550:	d004      	beq.n	801555c <HAL_RCC_OscConfig+0x188>
 8015552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015554:	2b00      	cmp	r3, #0
 8015556:	d101      	bne.n	801555c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8015558:	2301      	movs	r3, #1
 801555a:	e304      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801555c:	4b6c      	ldr	r3, [pc, #432]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801555e:	685b      	ldr	r3, [r3, #4]
 8015560:	4a6e      	ldr	r2, [pc, #440]	@ (801571c <HAL_RCC_OscConfig+0x348>)
 8015562:	4013      	ands	r3, r2
 8015564:	0019      	movs	r1, r3
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	691b      	ldr	r3, [r3, #16]
 801556a:	021a      	lsls	r2, r3, #8
 801556c:	4b68      	ldr	r3, [pc, #416]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801556e:	430a      	orrs	r2, r1
 8015570:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015572:	4b67      	ldr	r3, [pc, #412]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	2209      	movs	r2, #9
 8015578:	4393      	bics	r3, r2
 801557a:	0019      	movs	r1, r3
 801557c:	4b64      	ldr	r3, [pc, #400]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801557e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015580:	430a      	orrs	r2, r1
 8015582:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015584:	f000 fc42 	bl	8015e0c <HAL_RCC_GetSysClockFreq>
 8015588:	0001      	movs	r1, r0
 801558a:	4b61      	ldr	r3, [pc, #388]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801558c:	68db      	ldr	r3, [r3, #12]
 801558e:	091b      	lsrs	r3, r3, #4
 8015590:	220f      	movs	r2, #15
 8015592:	4013      	ands	r3, r2
 8015594:	4a62      	ldr	r2, [pc, #392]	@ (8015720 <HAL_RCC_OscConfig+0x34c>)
 8015596:	5cd3      	ldrb	r3, [r2, r3]
 8015598:	000a      	movs	r2, r1
 801559a:	40da      	lsrs	r2, r3
 801559c:	4b61      	ldr	r3, [pc, #388]	@ (8015724 <HAL_RCC_OscConfig+0x350>)
 801559e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80155a0:	4b61      	ldr	r3, [pc, #388]	@ (8015728 <HAL_RCC_OscConfig+0x354>)
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	2513      	movs	r5, #19
 80155a6:	197c      	adds	r4, r7, r5
 80155a8:	0018      	movs	r0, r3
 80155aa:	f7f9 fd9d 	bl	800f0e8 <HAL_InitTick>
 80155ae:	0003      	movs	r3, r0
 80155b0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80155b2:	197b      	adds	r3, r7, r5
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d046      	beq.n	8015648 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80155ba:	197b      	adds	r3, r7, r5
 80155bc:	781b      	ldrb	r3, [r3, #0]
 80155be:	e2d2      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80155c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d027      	beq.n	8015616 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80155c6:	4b52      	ldr	r3, [pc, #328]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	2209      	movs	r2, #9
 80155cc:	4393      	bics	r3, r2
 80155ce:	0019      	movs	r1, r3
 80155d0:	4b4f      	ldr	r3, [pc, #316]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80155d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155d4:	430a      	orrs	r2, r1
 80155d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80155d8:	f7f9 fdcc 	bl	800f174 <HAL_GetTick>
 80155dc:	0003      	movs	r3, r0
 80155de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80155e0:	e008      	b.n	80155f4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80155e2:	f7f9 fdc7 	bl	800f174 <HAL_GetTick>
 80155e6:	0002      	movs	r2, r0
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	1ad3      	subs	r3, r2, r3
 80155ec:	2b02      	cmp	r3, #2
 80155ee:	d901      	bls.n	80155f4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80155f0:	2303      	movs	r3, #3
 80155f2:	e2b8      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80155f4:	4b46      	ldr	r3, [pc, #280]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	2204      	movs	r2, #4
 80155fa:	4013      	ands	r3, r2
 80155fc:	d0f1      	beq.n	80155e2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80155fe:	4b44      	ldr	r3, [pc, #272]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	4a46      	ldr	r2, [pc, #280]	@ (801571c <HAL_RCC_OscConfig+0x348>)
 8015604:	4013      	ands	r3, r2
 8015606:	0019      	movs	r1, r3
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	691b      	ldr	r3, [r3, #16]
 801560c:	021a      	lsls	r2, r3, #8
 801560e:	4b40      	ldr	r3, [pc, #256]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015610:	430a      	orrs	r2, r1
 8015612:	605a      	str	r2, [r3, #4]
 8015614:	e018      	b.n	8015648 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015616:	4b3e      	ldr	r3, [pc, #248]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015618:	681a      	ldr	r2, [r3, #0]
 801561a:	4b3d      	ldr	r3, [pc, #244]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801561c:	2101      	movs	r1, #1
 801561e:	438a      	bics	r2, r1
 8015620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015622:	f7f9 fda7 	bl	800f174 <HAL_GetTick>
 8015626:	0003      	movs	r3, r0
 8015628:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801562a:	e008      	b.n	801563e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801562c:	f7f9 fda2 	bl	800f174 <HAL_GetTick>
 8015630:	0002      	movs	r2, r0
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	1ad3      	subs	r3, r2, r3
 8015636:	2b02      	cmp	r3, #2
 8015638:	d901      	bls.n	801563e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801563a:	2303      	movs	r3, #3
 801563c:	e293      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801563e:	4b34      	ldr	r3, [pc, #208]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	2204      	movs	r2, #4
 8015644:	4013      	ands	r3, r2
 8015646:	d1f1      	bne.n	801562c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	2210      	movs	r2, #16
 801564e:	4013      	ands	r3, r2
 8015650:	d100      	bne.n	8015654 <HAL_RCC_OscConfig+0x280>
 8015652:	e0a2      	b.n	801579a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8015654:	69fb      	ldr	r3, [r7, #28]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d140      	bne.n	80156dc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801565a:	4b2d      	ldr	r3, [pc, #180]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 801565c:	681a      	ldr	r2, [r3, #0]
 801565e:	2380      	movs	r3, #128	@ 0x80
 8015660:	009b      	lsls	r3, r3, #2
 8015662:	4013      	ands	r3, r2
 8015664:	d005      	beq.n	8015672 <HAL_RCC_OscConfig+0x29e>
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	69db      	ldr	r3, [r3, #28]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d101      	bne.n	8015672 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801566e:	2301      	movs	r3, #1
 8015670:	e279      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015672:	4b27      	ldr	r3, [pc, #156]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015674:	685b      	ldr	r3, [r3, #4]
 8015676:	4a2d      	ldr	r2, [pc, #180]	@ (801572c <HAL_RCC_OscConfig+0x358>)
 8015678:	4013      	ands	r3, r2
 801567a:	0019      	movs	r1, r3
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015680:	4b23      	ldr	r3, [pc, #140]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015682:	430a      	orrs	r2, r1
 8015684:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015686:	4b22      	ldr	r3, [pc, #136]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	021b      	lsls	r3, r3, #8
 801568c:	0a19      	lsrs	r1, r3, #8
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	6a1b      	ldr	r3, [r3, #32]
 8015692:	061a      	lsls	r2, r3, #24
 8015694:	4b1e      	ldr	r3, [pc, #120]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 8015696:	430a      	orrs	r2, r1
 8015698:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801569e:	0b5b      	lsrs	r3, r3, #13
 80156a0:	3301      	adds	r3, #1
 80156a2:	2280      	movs	r2, #128	@ 0x80
 80156a4:	0212      	lsls	r2, r2, #8
 80156a6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80156a8:	4b19      	ldr	r3, [pc, #100]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80156aa:	68db      	ldr	r3, [r3, #12]
 80156ac:	091b      	lsrs	r3, r3, #4
 80156ae:	210f      	movs	r1, #15
 80156b0:	400b      	ands	r3, r1
 80156b2:	491b      	ldr	r1, [pc, #108]	@ (8015720 <HAL_RCC_OscConfig+0x34c>)
 80156b4:	5ccb      	ldrb	r3, [r1, r3]
 80156b6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80156b8:	4b1a      	ldr	r3, [pc, #104]	@ (8015724 <HAL_RCC_OscConfig+0x350>)
 80156ba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80156bc:	4b1a      	ldr	r3, [pc, #104]	@ (8015728 <HAL_RCC_OscConfig+0x354>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	2513      	movs	r5, #19
 80156c2:	197c      	adds	r4, r7, r5
 80156c4:	0018      	movs	r0, r3
 80156c6:	f7f9 fd0f 	bl	800f0e8 <HAL_InitTick>
 80156ca:	0003      	movs	r3, r0
 80156cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80156ce:	197b      	adds	r3, r7, r5
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d061      	beq.n	801579a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80156d6:	197b      	adds	r3, r7, r5
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	e244      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	69db      	ldr	r3, [r3, #28]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d040      	beq.n	8015766 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80156e4:	4b0a      	ldr	r3, [pc, #40]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80156e6:	681a      	ldr	r2, [r3, #0]
 80156e8:	4b09      	ldr	r3, [pc, #36]	@ (8015710 <HAL_RCC_OscConfig+0x33c>)
 80156ea:	2180      	movs	r1, #128	@ 0x80
 80156ec:	0049      	lsls	r1, r1, #1
 80156ee:	430a      	orrs	r2, r1
 80156f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80156f2:	f7f9 fd3f 	bl	800f174 <HAL_GetTick>
 80156f6:	0003      	movs	r3, r0
 80156f8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80156fa:	e019      	b.n	8015730 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80156fc:	f7f9 fd3a 	bl	800f174 <HAL_GetTick>
 8015700:	0002      	movs	r2, r0
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	1ad3      	subs	r3, r2, r3
 8015706:	2b02      	cmp	r3, #2
 8015708:	d912      	bls.n	8015730 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801570a:	2303      	movs	r3, #3
 801570c:	e22b      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
 801570e:	46c0      	nop			@ (mov r8, r8)
 8015710:	40021000 	.word	0x40021000
 8015714:	fffeffff 	.word	0xfffeffff
 8015718:	fffbffff 	.word	0xfffbffff
 801571c:	ffffe0ff 	.word	0xffffe0ff
 8015720:	08025cf4 	.word	0x08025cf4
 8015724:	200000d0 	.word	0x200000d0
 8015728:	200000e0 	.word	0x200000e0
 801572c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015730:	4bca      	ldr	r3, [pc, #808]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015732:	681a      	ldr	r2, [r3, #0]
 8015734:	2380      	movs	r3, #128	@ 0x80
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	4013      	ands	r3, r2
 801573a:	d0df      	beq.n	80156fc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801573c:	4bc7      	ldr	r3, [pc, #796]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 801573e:	685b      	ldr	r3, [r3, #4]
 8015740:	4ac7      	ldr	r2, [pc, #796]	@ (8015a60 <HAL_RCC_OscConfig+0x68c>)
 8015742:	4013      	ands	r3, r2
 8015744:	0019      	movs	r1, r3
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801574a:	4bc4      	ldr	r3, [pc, #784]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 801574c:	430a      	orrs	r2, r1
 801574e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015750:	4bc2      	ldr	r3, [pc, #776]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015752:	685b      	ldr	r3, [r3, #4]
 8015754:	021b      	lsls	r3, r3, #8
 8015756:	0a19      	lsrs	r1, r3, #8
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6a1b      	ldr	r3, [r3, #32]
 801575c:	061a      	lsls	r2, r3, #24
 801575e:	4bbf      	ldr	r3, [pc, #764]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015760:	430a      	orrs	r2, r1
 8015762:	605a      	str	r2, [r3, #4]
 8015764:	e019      	b.n	801579a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015766:	4bbd      	ldr	r3, [pc, #756]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	4bbc      	ldr	r3, [pc, #752]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 801576c:	49bd      	ldr	r1, [pc, #756]	@ (8015a64 <HAL_RCC_OscConfig+0x690>)
 801576e:	400a      	ands	r2, r1
 8015770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015772:	f7f9 fcff 	bl	800f174 <HAL_GetTick>
 8015776:	0003      	movs	r3, r0
 8015778:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801577a:	e008      	b.n	801578e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801577c:	f7f9 fcfa 	bl	800f174 <HAL_GetTick>
 8015780:	0002      	movs	r2, r0
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	1ad3      	subs	r3, r2, r3
 8015786:	2b02      	cmp	r3, #2
 8015788:	d901      	bls.n	801578e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801578a:	2303      	movs	r3, #3
 801578c:	e1eb      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801578e:	4bb3      	ldr	r3, [pc, #716]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015790:	681a      	ldr	r2, [r3, #0]
 8015792:	2380      	movs	r3, #128	@ 0x80
 8015794:	009b      	lsls	r3, r3, #2
 8015796:	4013      	ands	r3, r2
 8015798:	d1f0      	bne.n	801577c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	2208      	movs	r2, #8
 80157a0:	4013      	ands	r3, r2
 80157a2:	d036      	beq.n	8015812 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	695b      	ldr	r3, [r3, #20]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d019      	beq.n	80157e0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80157ac:	4bab      	ldr	r3, [pc, #684]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80157ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80157b0:	4baa      	ldr	r3, [pc, #680]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80157b2:	2101      	movs	r1, #1
 80157b4:	430a      	orrs	r2, r1
 80157b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80157b8:	f7f9 fcdc 	bl	800f174 <HAL_GetTick>
 80157bc:	0003      	movs	r3, r0
 80157be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80157c0:	e008      	b.n	80157d4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80157c2:	f7f9 fcd7 	bl	800f174 <HAL_GetTick>
 80157c6:	0002      	movs	r2, r0
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	1ad3      	subs	r3, r2, r3
 80157cc:	2b02      	cmp	r3, #2
 80157ce:	d901      	bls.n	80157d4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80157d0:	2303      	movs	r3, #3
 80157d2:	e1c8      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80157d4:	4ba1      	ldr	r3, [pc, #644]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80157d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80157d8:	2202      	movs	r2, #2
 80157da:	4013      	ands	r3, r2
 80157dc:	d0f1      	beq.n	80157c2 <HAL_RCC_OscConfig+0x3ee>
 80157de:	e018      	b.n	8015812 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80157e0:	4b9e      	ldr	r3, [pc, #632]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80157e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80157e4:	4b9d      	ldr	r3, [pc, #628]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80157e6:	2101      	movs	r1, #1
 80157e8:	438a      	bics	r2, r1
 80157ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80157ec:	f7f9 fcc2 	bl	800f174 <HAL_GetTick>
 80157f0:	0003      	movs	r3, r0
 80157f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80157f4:	e008      	b.n	8015808 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80157f6:	f7f9 fcbd 	bl	800f174 <HAL_GetTick>
 80157fa:	0002      	movs	r2, r0
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	1ad3      	subs	r3, r2, r3
 8015800:	2b02      	cmp	r3, #2
 8015802:	d901      	bls.n	8015808 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8015804:	2303      	movs	r3, #3
 8015806:	e1ae      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015808:	4b94      	ldr	r3, [pc, #592]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 801580a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801580c:	2202      	movs	r2, #2
 801580e:	4013      	ands	r3, r2
 8015810:	d1f1      	bne.n	80157f6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	2204      	movs	r2, #4
 8015818:	4013      	ands	r3, r2
 801581a:	d100      	bne.n	801581e <HAL_RCC_OscConfig+0x44a>
 801581c:	e0ae      	b.n	801597c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801581e:	2023      	movs	r0, #35	@ 0x23
 8015820:	183b      	adds	r3, r7, r0
 8015822:	2200      	movs	r2, #0
 8015824:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015826:	4b8d      	ldr	r3, [pc, #564]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801582a:	2380      	movs	r3, #128	@ 0x80
 801582c:	055b      	lsls	r3, r3, #21
 801582e:	4013      	ands	r3, r2
 8015830:	d109      	bne.n	8015846 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015832:	4b8a      	ldr	r3, [pc, #552]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015836:	4b89      	ldr	r3, [pc, #548]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015838:	2180      	movs	r1, #128	@ 0x80
 801583a:	0549      	lsls	r1, r1, #21
 801583c:	430a      	orrs	r2, r1
 801583e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015840:	183b      	adds	r3, r7, r0
 8015842:	2201      	movs	r2, #1
 8015844:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015846:	4b88      	ldr	r3, [pc, #544]	@ (8015a68 <HAL_RCC_OscConfig+0x694>)
 8015848:	681a      	ldr	r2, [r3, #0]
 801584a:	2380      	movs	r3, #128	@ 0x80
 801584c:	005b      	lsls	r3, r3, #1
 801584e:	4013      	ands	r3, r2
 8015850:	d11a      	bne.n	8015888 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015852:	4b85      	ldr	r3, [pc, #532]	@ (8015a68 <HAL_RCC_OscConfig+0x694>)
 8015854:	681a      	ldr	r2, [r3, #0]
 8015856:	4b84      	ldr	r3, [pc, #528]	@ (8015a68 <HAL_RCC_OscConfig+0x694>)
 8015858:	2180      	movs	r1, #128	@ 0x80
 801585a:	0049      	lsls	r1, r1, #1
 801585c:	430a      	orrs	r2, r1
 801585e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015860:	f7f9 fc88 	bl	800f174 <HAL_GetTick>
 8015864:	0003      	movs	r3, r0
 8015866:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015868:	e008      	b.n	801587c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801586a:	f7f9 fc83 	bl	800f174 <HAL_GetTick>
 801586e:	0002      	movs	r2, r0
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	1ad3      	subs	r3, r2, r3
 8015874:	2b64      	cmp	r3, #100	@ 0x64
 8015876:	d901      	bls.n	801587c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8015878:	2303      	movs	r3, #3
 801587a:	e174      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801587c:	4b7a      	ldr	r3, [pc, #488]	@ (8015a68 <HAL_RCC_OscConfig+0x694>)
 801587e:	681a      	ldr	r2, [r3, #0]
 8015880:	2380      	movs	r3, #128	@ 0x80
 8015882:	005b      	lsls	r3, r3, #1
 8015884:	4013      	ands	r3, r2
 8015886:	d0f0      	beq.n	801586a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	689a      	ldr	r2, [r3, #8]
 801588c:	2380      	movs	r3, #128	@ 0x80
 801588e:	005b      	lsls	r3, r3, #1
 8015890:	429a      	cmp	r2, r3
 8015892:	d107      	bne.n	80158a4 <HAL_RCC_OscConfig+0x4d0>
 8015894:	4b71      	ldr	r3, [pc, #452]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015896:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015898:	4b70      	ldr	r3, [pc, #448]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 801589a:	2180      	movs	r1, #128	@ 0x80
 801589c:	0049      	lsls	r1, r1, #1
 801589e:	430a      	orrs	r2, r1
 80158a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80158a2:	e031      	b.n	8015908 <HAL_RCC_OscConfig+0x534>
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d10c      	bne.n	80158c6 <HAL_RCC_OscConfig+0x4f2>
 80158ac:	4b6b      	ldr	r3, [pc, #428]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158b0:	4b6a      	ldr	r3, [pc, #424]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158b2:	496c      	ldr	r1, [pc, #432]	@ (8015a64 <HAL_RCC_OscConfig+0x690>)
 80158b4:	400a      	ands	r2, r1
 80158b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80158b8:	4b68      	ldr	r3, [pc, #416]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158bc:	4b67      	ldr	r3, [pc, #412]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158be:	496b      	ldr	r1, [pc, #428]	@ (8015a6c <HAL_RCC_OscConfig+0x698>)
 80158c0:	400a      	ands	r2, r1
 80158c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80158c4:	e020      	b.n	8015908 <HAL_RCC_OscConfig+0x534>
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	689a      	ldr	r2, [r3, #8]
 80158ca:	23a0      	movs	r3, #160	@ 0xa0
 80158cc:	00db      	lsls	r3, r3, #3
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d10e      	bne.n	80158f0 <HAL_RCC_OscConfig+0x51c>
 80158d2:	4b62      	ldr	r3, [pc, #392]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158d6:	4b61      	ldr	r3, [pc, #388]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158d8:	2180      	movs	r1, #128	@ 0x80
 80158da:	00c9      	lsls	r1, r1, #3
 80158dc:	430a      	orrs	r2, r1
 80158de:	651a      	str	r2, [r3, #80]	@ 0x50
 80158e0:	4b5e      	ldr	r3, [pc, #376]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158e4:	4b5d      	ldr	r3, [pc, #372]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158e6:	2180      	movs	r1, #128	@ 0x80
 80158e8:	0049      	lsls	r1, r1, #1
 80158ea:	430a      	orrs	r2, r1
 80158ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80158ee:	e00b      	b.n	8015908 <HAL_RCC_OscConfig+0x534>
 80158f0:	4b5a      	ldr	r3, [pc, #360]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158f4:	4b59      	ldr	r3, [pc, #356]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158f6:	495b      	ldr	r1, [pc, #364]	@ (8015a64 <HAL_RCC_OscConfig+0x690>)
 80158f8:	400a      	ands	r2, r1
 80158fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80158fc:	4b57      	ldr	r3, [pc, #348]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80158fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015900:	4b56      	ldr	r3, [pc, #344]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015902:	495a      	ldr	r1, [pc, #360]	@ (8015a6c <HAL_RCC_OscConfig+0x698>)
 8015904:	400a      	ands	r2, r1
 8015906:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	689b      	ldr	r3, [r3, #8]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d015      	beq.n	801593c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015910:	f7f9 fc30 	bl	800f174 <HAL_GetTick>
 8015914:	0003      	movs	r3, r0
 8015916:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015918:	e009      	b.n	801592e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801591a:	f7f9 fc2b 	bl	800f174 <HAL_GetTick>
 801591e:	0002      	movs	r2, r0
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	1ad3      	subs	r3, r2, r3
 8015924:	4a52      	ldr	r2, [pc, #328]	@ (8015a70 <HAL_RCC_OscConfig+0x69c>)
 8015926:	4293      	cmp	r3, r2
 8015928:	d901      	bls.n	801592e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801592a:	2303      	movs	r3, #3
 801592c:	e11b      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801592e:	4b4b      	ldr	r3, [pc, #300]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015930:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015932:	2380      	movs	r3, #128	@ 0x80
 8015934:	009b      	lsls	r3, r3, #2
 8015936:	4013      	ands	r3, r2
 8015938:	d0ef      	beq.n	801591a <HAL_RCC_OscConfig+0x546>
 801593a:	e014      	b.n	8015966 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801593c:	f7f9 fc1a 	bl	800f174 <HAL_GetTick>
 8015940:	0003      	movs	r3, r0
 8015942:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015944:	e009      	b.n	801595a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015946:	f7f9 fc15 	bl	800f174 <HAL_GetTick>
 801594a:	0002      	movs	r2, r0
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	1ad3      	subs	r3, r2, r3
 8015950:	4a47      	ldr	r2, [pc, #284]	@ (8015a70 <HAL_RCC_OscConfig+0x69c>)
 8015952:	4293      	cmp	r3, r2
 8015954:	d901      	bls.n	801595a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8015956:	2303      	movs	r3, #3
 8015958:	e105      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801595a:	4b40      	ldr	r3, [pc, #256]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 801595c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801595e:	2380      	movs	r3, #128	@ 0x80
 8015960:	009b      	lsls	r3, r3, #2
 8015962:	4013      	ands	r3, r2
 8015964:	d1ef      	bne.n	8015946 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015966:	2323      	movs	r3, #35	@ 0x23
 8015968:	18fb      	adds	r3, r7, r3
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	2b01      	cmp	r3, #1
 801596e:	d105      	bne.n	801597c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015970:	4b3a      	ldr	r3, [pc, #232]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015974:	4b39      	ldr	r3, [pc, #228]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015976:	493f      	ldr	r1, [pc, #252]	@ (8015a74 <HAL_RCC_OscConfig+0x6a0>)
 8015978:	400a      	ands	r2, r1
 801597a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2220      	movs	r2, #32
 8015982:	4013      	ands	r3, r2
 8015984:	d049      	beq.n	8015a1a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	699b      	ldr	r3, [r3, #24]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d026      	beq.n	80159dc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801598e:	4b33      	ldr	r3, [pc, #204]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015990:	689a      	ldr	r2, [r3, #8]
 8015992:	4b32      	ldr	r3, [pc, #200]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015994:	2101      	movs	r1, #1
 8015996:	430a      	orrs	r2, r1
 8015998:	609a      	str	r2, [r3, #8]
 801599a:	4b30      	ldr	r3, [pc, #192]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 801599c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801599e:	4b2f      	ldr	r3, [pc, #188]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80159a0:	2101      	movs	r1, #1
 80159a2:	430a      	orrs	r2, r1
 80159a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80159a6:	4b34      	ldr	r3, [pc, #208]	@ (8015a78 <HAL_RCC_OscConfig+0x6a4>)
 80159a8:	6a1a      	ldr	r2, [r3, #32]
 80159aa:	4b33      	ldr	r3, [pc, #204]	@ (8015a78 <HAL_RCC_OscConfig+0x6a4>)
 80159ac:	2180      	movs	r1, #128	@ 0x80
 80159ae:	0189      	lsls	r1, r1, #6
 80159b0:	430a      	orrs	r2, r1
 80159b2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80159b4:	f7f9 fbde 	bl	800f174 <HAL_GetTick>
 80159b8:	0003      	movs	r3, r0
 80159ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80159bc:	e008      	b.n	80159d0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80159be:	f7f9 fbd9 	bl	800f174 <HAL_GetTick>
 80159c2:	0002      	movs	r2, r0
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	1ad3      	subs	r3, r2, r3
 80159c8:	2b02      	cmp	r3, #2
 80159ca:	d901      	bls.n	80159d0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80159cc:	2303      	movs	r3, #3
 80159ce:	e0ca      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80159d0:	4b22      	ldr	r3, [pc, #136]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80159d2:	689b      	ldr	r3, [r3, #8]
 80159d4:	2202      	movs	r2, #2
 80159d6:	4013      	ands	r3, r2
 80159d8:	d0f1      	beq.n	80159be <HAL_RCC_OscConfig+0x5ea>
 80159da:	e01e      	b.n	8015a1a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80159dc:	4b1f      	ldr	r3, [pc, #124]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80159de:	689a      	ldr	r2, [r3, #8]
 80159e0:	4b1e      	ldr	r3, [pc, #120]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 80159e2:	2101      	movs	r1, #1
 80159e4:	438a      	bics	r2, r1
 80159e6:	609a      	str	r2, [r3, #8]
 80159e8:	4b23      	ldr	r3, [pc, #140]	@ (8015a78 <HAL_RCC_OscConfig+0x6a4>)
 80159ea:	6a1a      	ldr	r2, [r3, #32]
 80159ec:	4b22      	ldr	r3, [pc, #136]	@ (8015a78 <HAL_RCC_OscConfig+0x6a4>)
 80159ee:	4923      	ldr	r1, [pc, #140]	@ (8015a7c <HAL_RCC_OscConfig+0x6a8>)
 80159f0:	400a      	ands	r2, r1
 80159f2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80159f4:	f7f9 fbbe 	bl	800f174 <HAL_GetTick>
 80159f8:	0003      	movs	r3, r0
 80159fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80159fc:	e008      	b.n	8015a10 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80159fe:	f7f9 fbb9 	bl	800f174 <HAL_GetTick>
 8015a02:	0002      	movs	r2, r0
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	1ad3      	subs	r3, r2, r3
 8015a08:	2b02      	cmp	r3, #2
 8015a0a:	d901      	bls.n	8015a10 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8015a0c:	2303      	movs	r3, #3
 8015a0e:	e0aa      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015a10:	4b12      	ldr	r3, [pc, #72]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015a12:	689b      	ldr	r3, [r3, #8]
 8015a14:	2202      	movs	r2, #2
 8015a16:	4013      	ands	r3, r2
 8015a18:	d1f1      	bne.n	80159fe <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d100      	bne.n	8015a24 <HAL_RCC_OscConfig+0x650>
 8015a22:	e09f      	b.n	8015b64 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015a24:	69fb      	ldr	r3, [r7, #28]
 8015a26:	2b0c      	cmp	r3, #12
 8015a28:	d100      	bne.n	8015a2c <HAL_RCC_OscConfig+0x658>
 8015a2a:	e078      	b.n	8015b1e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a30:	2b02      	cmp	r3, #2
 8015a32:	d159      	bne.n	8015ae8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015a34:	4b09      	ldr	r3, [pc, #36]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015a36:	681a      	ldr	r2, [r3, #0]
 8015a38:	4b08      	ldr	r3, [pc, #32]	@ (8015a5c <HAL_RCC_OscConfig+0x688>)
 8015a3a:	4911      	ldr	r1, [pc, #68]	@ (8015a80 <HAL_RCC_OscConfig+0x6ac>)
 8015a3c:	400a      	ands	r2, r1
 8015a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015a40:	f7f9 fb98 	bl	800f174 <HAL_GetTick>
 8015a44:	0003      	movs	r3, r0
 8015a46:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015a48:	e01c      	b.n	8015a84 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015a4a:	f7f9 fb93 	bl	800f174 <HAL_GetTick>
 8015a4e:	0002      	movs	r2, r0
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	1ad3      	subs	r3, r2, r3
 8015a54:	2b02      	cmp	r3, #2
 8015a56:	d915      	bls.n	8015a84 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8015a58:	2303      	movs	r3, #3
 8015a5a:	e084      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
 8015a5c:	40021000 	.word	0x40021000
 8015a60:	ffff1fff 	.word	0xffff1fff
 8015a64:	fffffeff 	.word	0xfffffeff
 8015a68:	40007000 	.word	0x40007000
 8015a6c:	fffffbff 	.word	0xfffffbff
 8015a70:	00001388 	.word	0x00001388
 8015a74:	efffffff 	.word	0xefffffff
 8015a78:	40010000 	.word	0x40010000
 8015a7c:	ffffdfff 	.word	0xffffdfff
 8015a80:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015a84:	4b3a      	ldr	r3, [pc, #232]	@ (8015b70 <HAL_RCC_OscConfig+0x79c>)
 8015a86:	681a      	ldr	r2, [r3, #0]
 8015a88:	2380      	movs	r3, #128	@ 0x80
 8015a8a:	049b      	lsls	r3, r3, #18
 8015a8c:	4013      	ands	r3, r2
 8015a8e:	d1dc      	bne.n	8015a4a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015a90:	4b37      	ldr	r3, [pc, #220]	@ (8015b70 <HAL_RCC_OscConfig+0x79c>)
 8015a92:	68db      	ldr	r3, [r3, #12]
 8015a94:	4a37      	ldr	r2, [pc, #220]	@ (8015b74 <HAL_RCC_OscConfig+0x7a0>)
 8015a96:	4013      	ands	r3, r2
 8015a98:	0019      	movs	r1, r3
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015aa2:	431a      	orrs	r2, r3
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015aa8:	431a      	orrs	r2, r3
 8015aaa:	4b31      	ldr	r3, [pc, #196]	@ (8015b70 <HAL_RCC_OscConfig+0x79c>)
 8015aac:	430a      	orrs	r2, r1
 8015aae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8015b70 <HAL_RCC_OscConfig+0x79c>)
 8015ab2:	681a      	ldr	r2, [r3, #0]
 8015ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8015b70 <HAL_RCC_OscConfig+0x79c>)
 8015ab6:	2180      	movs	r1, #128	@ 0x80
 8015ab8:	0449      	lsls	r1, r1, #17
 8015aba:	430a      	orrs	r2, r1
 8015abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015abe:	f7f9 fb59 	bl	800f174 <HAL_GetTick>
 8015ac2:	0003      	movs	r3, r0
 8015ac4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015ac6:	e008      	b.n	8015ada <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015ac8:	f7f9 fb54 	bl	800f174 <HAL_GetTick>
 8015acc:	0002      	movs	r2, r0
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	1ad3      	subs	r3, r2, r3
 8015ad2:	2b02      	cmp	r3, #2
 8015ad4:	d901      	bls.n	8015ada <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8015ad6:	2303      	movs	r3, #3
 8015ad8:	e045      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015ada:	4b25      	ldr	r3, [pc, #148]	@ (8015b70 <HAL_RCC_OscConfig+0x79c>)
 8015adc:	681a      	ldr	r2, [r3, #0]
 8015ade:	2380      	movs	r3, #128	@ 0x80
 8015ae0:	049b      	lsls	r3, r3, #18
 8015ae2:	4013      	ands	r3, r2
 8015ae4:	d0f0      	beq.n	8015ac8 <HAL_RCC_OscConfig+0x6f4>
 8015ae6:	e03d      	b.n	8015b64 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015ae8:	4b21      	ldr	r3, [pc, #132]	@ (8015b70 <HAL_RCC_OscConfig+0x79c>)
 8015aea:	681a      	ldr	r2, [r3, #0]
 8015aec:	4b20      	ldr	r3, [pc, #128]	@ (8015b70 <HAL_RCC_OscConfig+0x79c>)
 8015aee:	4922      	ldr	r1, [pc, #136]	@ (8015b78 <HAL_RCC_OscConfig+0x7a4>)
 8015af0:	400a      	ands	r2, r1
 8015af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015af4:	f7f9 fb3e 	bl	800f174 <HAL_GetTick>
 8015af8:	0003      	movs	r3, r0
 8015afa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015afc:	e008      	b.n	8015b10 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015afe:	f7f9 fb39 	bl	800f174 <HAL_GetTick>
 8015b02:	0002      	movs	r2, r0
 8015b04:	697b      	ldr	r3, [r7, #20]
 8015b06:	1ad3      	subs	r3, r2, r3
 8015b08:	2b02      	cmp	r3, #2
 8015b0a:	d901      	bls.n	8015b10 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8015b0c:	2303      	movs	r3, #3
 8015b0e:	e02a      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015b10:	4b17      	ldr	r3, [pc, #92]	@ (8015b70 <HAL_RCC_OscConfig+0x79c>)
 8015b12:	681a      	ldr	r2, [r3, #0]
 8015b14:	2380      	movs	r3, #128	@ 0x80
 8015b16:	049b      	lsls	r3, r3, #18
 8015b18:	4013      	ands	r3, r2
 8015b1a:	d1f0      	bne.n	8015afe <HAL_RCC_OscConfig+0x72a>
 8015b1c:	e022      	b.n	8015b64 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b22:	2b01      	cmp	r3, #1
 8015b24:	d101      	bne.n	8015b2a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015b26:	2301      	movs	r3, #1
 8015b28:	e01d      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8015b2a:	4b11      	ldr	r3, [pc, #68]	@ (8015b70 <HAL_RCC_OscConfig+0x79c>)
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015b30:	69ba      	ldr	r2, [r7, #24]
 8015b32:	2380      	movs	r3, #128	@ 0x80
 8015b34:	025b      	lsls	r3, r3, #9
 8015b36:	401a      	ands	r2, r3
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d10f      	bne.n	8015b60 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015b40:	69ba      	ldr	r2, [r7, #24]
 8015b42:	23f0      	movs	r3, #240	@ 0xf0
 8015b44:	039b      	lsls	r3, r3, #14
 8015b46:	401a      	ands	r2, r3
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	d107      	bne.n	8015b60 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8015b50:	69ba      	ldr	r2, [r7, #24]
 8015b52:	23c0      	movs	r3, #192	@ 0xc0
 8015b54:	041b      	lsls	r3, r3, #16
 8015b56:	401a      	ands	r2, r3
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d001      	beq.n	8015b64 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8015b60:	2301      	movs	r3, #1
 8015b62:	e000      	b.n	8015b66 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8015b64:	2300      	movs	r3, #0
}
 8015b66:	0018      	movs	r0, r3
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	b00a      	add	sp, #40	@ 0x28
 8015b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8015b6e:	46c0      	nop			@ (mov r8, r8)
 8015b70:	40021000 	.word	0x40021000
 8015b74:	ff02ffff 	.word	0xff02ffff
 8015b78:	feffffff 	.word	0xfeffffff

08015b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015b7c:	b5b0      	push	{r4, r5, r7, lr}
 8015b7e:	b084      	sub	sp, #16
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
 8015b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d101      	bne.n	8015b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	e128      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015b90:	4b96      	ldr	r3, [pc, #600]	@ (8015dec <HAL_RCC_ClockConfig+0x270>)
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	2201      	movs	r2, #1
 8015b96:	4013      	ands	r3, r2
 8015b98:	683a      	ldr	r2, [r7, #0]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d91e      	bls.n	8015bdc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015b9e:	4b93      	ldr	r3, [pc, #588]	@ (8015dec <HAL_RCC_ClockConfig+0x270>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	4393      	bics	r3, r2
 8015ba6:	0019      	movs	r1, r3
 8015ba8:	4b90      	ldr	r3, [pc, #576]	@ (8015dec <HAL_RCC_ClockConfig+0x270>)
 8015baa:	683a      	ldr	r2, [r7, #0]
 8015bac:	430a      	orrs	r2, r1
 8015bae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015bb0:	f7f9 fae0 	bl	800f174 <HAL_GetTick>
 8015bb4:	0003      	movs	r3, r0
 8015bb6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015bb8:	e009      	b.n	8015bce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015bba:	f7f9 fadb 	bl	800f174 <HAL_GetTick>
 8015bbe:	0002      	movs	r2, r0
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	1ad3      	subs	r3, r2, r3
 8015bc4:	4a8a      	ldr	r2, [pc, #552]	@ (8015df0 <HAL_RCC_ClockConfig+0x274>)
 8015bc6:	4293      	cmp	r3, r2
 8015bc8:	d901      	bls.n	8015bce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8015bca:	2303      	movs	r3, #3
 8015bcc:	e109      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015bce:	4b87      	ldr	r3, [pc, #540]	@ (8015dec <HAL_RCC_ClockConfig+0x270>)
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	4013      	ands	r3, r2
 8015bd6:	683a      	ldr	r2, [r7, #0]
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d1ee      	bne.n	8015bba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	2202      	movs	r2, #2
 8015be2:	4013      	ands	r3, r2
 8015be4:	d009      	beq.n	8015bfa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015be6:	4b83      	ldr	r3, [pc, #524]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015be8:	68db      	ldr	r3, [r3, #12]
 8015bea:	22f0      	movs	r2, #240	@ 0xf0
 8015bec:	4393      	bics	r3, r2
 8015bee:	0019      	movs	r1, r3
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	689a      	ldr	r2, [r3, #8]
 8015bf4:	4b7f      	ldr	r3, [pc, #508]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015bf6:	430a      	orrs	r2, r1
 8015bf8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	2201      	movs	r2, #1
 8015c00:	4013      	ands	r3, r2
 8015c02:	d100      	bne.n	8015c06 <HAL_RCC_ClockConfig+0x8a>
 8015c04:	e089      	b.n	8015d1a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	685b      	ldr	r3, [r3, #4]
 8015c0a:	2b02      	cmp	r3, #2
 8015c0c:	d107      	bne.n	8015c1e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015c0e:	4b79      	ldr	r3, [pc, #484]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	2380      	movs	r3, #128	@ 0x80
 8015c14:	029b      	lsls	r3, r3, #10
 8015c16:	4013      	ands	r3, r2
 8015c18:	d120      	bne.n	8015c5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015c1a:	2301      	movs	r3, #1
 8015c1c:	e0e1      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	685b      	ldr	r3, [r3, #4]
 8015c22:	2b03      	cmp	r3, #3
 8015c24:	d107      	bne.n	8015c36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015c26:	4b73      	ldr	r3, [pc, #460]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	2380      	movs	r3, #128	@ 0x80
 8015c2c:	049b      	lsls	r3, r3, #18
 8015c2e:	4013      	ands	r3, r2
 8015c30:	d114      	bne.n	8015c5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015c32:	2301      	movs	r3, #1
 8015c34:	e0d5      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	685b      	ldr	r3, [r3, #4]
 8015c3a:	2b01      	cmp	r3, #1
 8015c3c:	d106      	bne.n	8015c4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	2204      	movs	r2, #4
 8015c44:	4013      	ands	r3, r2
 8015c46:	d109      	bne.n	8015c5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015c48:	2301      	movs	r3, #1
 8015c4a:	e0ca      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015c4c:	4b69      	ldr	r3, [pc, #420]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015c4e:	681a      	ldr	r2, [r3, #0]
 8015c50:	2380      	movs	r3, #128	@ 0x80
 8015c52:	009b      	lsls	r3, r3, #2
 8015c54:	4013      	ands	r3, r2
 8015c56:	d101      	bne.n	8015c5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015c58:	2301      	movs	r3, #1
 8015c5a:	e0c2      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015c5c:	4b65      	ldr	r3, [pc, #404]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015c5e:	68db      	ldr	r3, [r3, #12]
 8015c60:	2203      	movs	r2, #3
 8015c62:	4393      	bics	r3, r2
 8015c64:	0019      	movs	r1, r3
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	685a      	ldr	r2, [r3, #4]
 8015c6a:	4b62      	ldr	r3, [pc, #392]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015c6c:	430a      	orrs	r2, r1
 8015c6e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8015c70:	f7f9 fa80 	bl	800f174 <HAL_GetTick>
 8015c74:	0003      	movs	r3, r0
 8015c76:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	685b      	ldr	r3, [r3, #4]
 8015c7c:	2b02      	cmp	r3, #2
 8015c7e:	d111      	bne.n	8015ca4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015c80:	e009      	b.n	8015c96 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015c82:	f7f9 fa77 	bl	800f174 <HAL_GetTick>
 8015c86:	0002      	movs	r2, r0
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	1ad3      	subs	r3, r2, r3
 8015c8c:	4a58      	ldr	r2, [pc, #352]	@ (8015df0 <HAL_RCC_ClockConfig+0x274>)
 8015c8e:	4293      	cmp	r3, r2
 8015c90:	d901      	bls.n	8015c96 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8015c92:	2303      	movs	r3, #3
 8015c94:	e0a5      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015c96:	4b57      	ldr	r3, [pc, #348]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015c98:	68db      	ldr	r3, [r3, #12]
 8015c9a:	220c      	movs	r2, #12
 8015c9c:	4013      	ands	r3, r2
 8015c9e:	2b08      	cmp	r3, #8
 8015ca0:	d1ef      	bne.n	8015c82 <HAL_RCC_ClockConfig+0x106>
 8015ca2:	e03a      	b.n	8015d1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	2b03      	cmp	r3, #3
 8015caa:	d111      	bne.n	8015cd0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015cac:	e009      	b.n	8015cc2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015cae:	f7f9 fa61 	bl	800f174 <HAL_GetTick>
 8015cb2:	0002      	movs	r2, r0
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	1ad3      	subs	r3, r2, r3
 8015cb8:	4a4d      	ldr	r2, [pc, #308]	@ (8015df0 <HAL_RCC_ClockConfig+0x274>)
 8015cba:	4293      	cmp	r3, r2
 8015cbc:	d901      	bls.n	8015cc2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8015cbe:	2303      	movs	r3, #3
 8015cc0:	e08f      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015cc4:	68db      	ldr	r3, [r3, #12]
 8015cc6:	220c      	movs	r2, #12
 8015cc8:	4013      	ands	r3, r2
 8015cca:	2b0c      	cmp	r3, #12
 8015ccc:	d1ef      	bne.n	8015cae <HAL_RCC_ClockConfig+0x132>
 8015cce:	e024      	b.n	8015d1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	685b      	ldr	r3, [r3, #4]
 8015cd4:	2b01      	cmp	r3, #1
 8015cd6:	d11b      	bne.n	8015d10 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015cd8:	e009      	b.n	8015cee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015cda:	f7f9 fa4b 	bl	800f174 <HAL_GetTick>
 8015cde:	0002      	movs	r2, r0
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	1ad3      	subs	r3, r2, r3
 8015ce4:	4a42      	ldr	r2, [pc, #264]	@ (8015df0 <HAL_RCC_ClockConfig+0x274>)
 8015ce6:	4293      	cmp	r3, r2
 8015ce8:	d901      	bls.n	8015cee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8015cea:	2303      	movs	r3, #3
 8015cec:	e079      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015cee:	4b41      	ldr	r3, [pc, #260]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	220c      	movs	r2, #12
 8015cf4:	4013      	ands	r3, r2
 8015cf6:	2b04      	cmp	r3, #4
 8015cf8:	d1ef      	bne.n	8015cda <HAL_RCC_ClockConfig+0x15e>
 8015cfa:	e00e      	b.n	8015d1a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015cfc:	f7f9 fa3a 	bl	800f174 <HAL_GetTick>
 8015d00:	0002      	movs	r2, r0
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	1ad3      	subs	r3, r2, r3
 8015d06:	4a3a      	ldr	r2, [pc, #232]	@ (8015df0 <HAL_RCC_ClockConfig+0x274>)
 8015d08:	4293      	cmp	r3, r2
 8015d0a:	d901      	bls.n	8015d10 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8015d0c:	2303      	movs	r3, #3
 8015d0e:	e068      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8015d10:	4b38      	ldr	r3, [pc, #224]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015d12:	68db      	ldr	r3, [r3, #12]
 8015d14:	220c      	movs	r2, #12
 8015d16:	4013      	ands	r3, r2
 8015d18:	d1f0      	bne.n	8015cfc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015d1a:	4b34      	ldr	r3, [pc, #208]	@ (8015dec <HAL_RCC_ClockConfig+0x270>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	2201      	movs	r2, #1
 8015d20:	4013      	ands	r3, r2
 8015d22:	683a      	ldr	r2, [r7, #0]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d21e      	bcs.n	8015d66 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015d28:	4b30      	ldr	r3, [pc, #192]	@ (8015dec <HAL_RCC_ClockConfig+0x270>)
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	2201      	movs	r2, #1
 8015d2e:	4393      	bics	r3, r2
 8015d30:	0019      	movs	r1, r3
 8015d32:	4b2e      	ldr	r3, [pc, #184]	@ (8015dec <HAL_RCC_ClockConfig+0x270>)
 8015d34:	683a      	ldr	r2, [r7, #0]
 8015d36:	430a      	orrs	r2, r1
 8015d38:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015d3a:	f7f9 fa1b 	bl	800f174 <HAL_GetTick>
 8015d3e:	0003      	movs	r3, r0
 8015d40:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015d42:	e009      	b.n	8015d58 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015d44:	f7f9 fa16 	bl	800f174 <HAL_GetTick>
 8015d48:	0002      	movs	r2, r0
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	1ad3      	subs	r3, r2, r3
 8015d4e:	4a28      	ldr	r2, [pc, #160]	@ (8015df0 <HAL_RCC_ClockConfig+0x274>)
 8015d50:	4293      	cmp	r3, r2
 8015d52:	d901      	bls.n	8015d58 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015d54:	2303      	movs	r3, #3
 8015d56:	e044      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015d58:	4b24      	ldr	r3, [pc, #144]	@ (8015dec <HAL_RCC_ClockConfig+0x270>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	2201      	movs	r2, #1
 8015d5e:	4013      	ands	r3, r2
 8015d60:	683a      	ldr	r2, [r7, #0]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d1ee      	bne.n	8015d44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	2204      	movs	r2, #4
 8015d6c:	4013      	ands	r3, r2
 8015d6e:	d009      	beq.n	8015d84 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015d70:	4b20      	ldr	r3, [pc, #128]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015d72:	68db      	ldr	r3, [r3, #12]
 8015d74:	4a20      	ldr	r2, [pc, #128]	@ (8015df8 <HAL_RCC_ClockConfig+0x27c>)
 8015d76:	4013      	ands	r3, r2
 8015d78:	0019      	movs	r1, r3
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	68da      	ldr	r2, [r3, #12]
 8015d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015d80:	430a      	orrs	r2, r1
 8015d82:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	2208      	movs	r2, #8
 8015d8a:	4013      	ands	r3, r2
 8015d8c:	d00a      	beq.n	8015da4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8015d8e:	4b19      	ldr	r3, [pc, #100]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015d90:	68db      	ldr	r3, [r3, #12]
 8015d92:	4a1a      	ldr	r2, [pc, #104]	@ (8015dfc <HAL_RCC_ClockConfig+0x280>)
 8015d94:	4013      	ands	r3, r2
 8015d96:	0019      	movs	r1, r3
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	691b      	ldr	r3, [r3, #16]
 8015d9c:	00da      	lsls	r2, r3, #3
 8015d9e:	4b15      	ldr	r3, [pc, #84]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015da0:	430a      	orrs	r2, r1
 8015da2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015da4:	f000 f832 	bl	8015e0c <HAL_RCC_GetSysClockFreq>
 8015da8:	0001      	movs	r1, r0
 8015daa:	4b12      	ldr	r3, [pc, #72]	@ (8015df4 <HAL_RCC_ClockConfig+0x278>)
 8015dac:	68db      	ldr	r3, [r3, #12]
 8015dae:	091b      	lsrs	r3, r3, #4
 8015db0:	220f      	movs	r2, #15
 8015db2:	4013      	ands	r3, r2
 8015db4:	4a12      	ldr	r2, [pc, #72]	@ (8015e00 <HAL_RCC_ClockConfig+0x284>)
 8015db6:	5cd3      	ldrb	r3, [r2, r3]
 8015db8:	000a      	movs	r2, r1
 8015dba:	40da      	lsrs	r2, r3
 8015dbc:	4b11      	ldr	r3, [pc, #68]	@ (8015e04 <HAL_RCC_ClockConfig+0x288>)
 8015dbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8015dc0:	4b11      	ldr	r3, [pc, #68]	@ (8015e08 <HAL_RCC_ClockConfig+0x28c>)
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	250b      	movs	r5, #11
 8015dc6:	197c      	adds	r4, r7, r5
 8015dc8:	0018      	movs	r0, r3
 8015dca:	f7f9 f98d 	bl	800f0e8 <HAL_InitTick>
 8015dce:	0003      	movs	r3, r0
 8015dd0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8015dd2:	197b      	adds	r3, r7, r5
 8015dd4:	781b      	ldrb	r3, [r3, #0]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d002      	beq.n	8015de0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8015dda:	197b      	adds	r3, r7, r5
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	e000      	b.n	8015de2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8015de0:	2300      	movs	r3, #0
}
 8015de2:	0018      	movs	r0, r3
 8015de4:	46bd      	mov	sp, r7
 8015de6:	b004      	add	sp, #16
 8015de8:	bdb0      	pop	{r4, r5, r7, pc}
 8015dea:	46c0      	nop			@ (mov r8, r8)
 8015dec:	40022000 	.word	0x40022000
 8015df0:	00001388 	.word	0x00001388
 8015df4:	40021000 	.word	0x40021000
 8015df8:	fffff8ff 	.word	0xfffff8ff
 8015dfc:	ffffc7ff 	.word	0xffffc7ff
 8015e00:	08025cf4 	.word	0x08025cf4
 8015e04:	200000d0 	.word	0x200000d0
 8015e08:	200000e0 	.word	0x200000e0

08015e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015e0c:	b5b0      	push	{r4, r5, r7, lr}
 8015e0e:	b08e      	sub	sp, #56	@ 0x38
 8015e10:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8015e12:	4b4c      	ldr	r3, [pc, #304]	@ (8015f44 <HAL_RCC_GetSysClockFreq+0x138>)
 8015e14:	68db      	ldr	r3, [r3, #12]
 8015e16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e1a:	230c      	movs	r3, #12
 8015e1c:	4013      	ands	r3, r2
 8015e1e:	2b0c      	cmp	r3, #12
 8015e20:	d014      	beq.n	8015e4c <HAL_RCC_GetSysClockFreq+0x40>
 8015e22:	d900      	bls.n	8015e26 <HAL_RCC_GetSysClockFreq+0x1a>
 8015e24:	e07b      	b.n	8015f1e <HAL_RCC_GetSysClockFreq+0x112>
 8015e26:	2b04      	cmp	r3, #4
 8015e28:	d002      	beq.n	8015e30 <HAL_RCC_GetSysClockFreq+0x24>
 8015e2a:	2b08      	cmp	r3, #8
 8015e2c:	d00b      	beq.n	8015e46 <HAL_RCC_GetSysClockFreq+0x3a>
 8015e2e:	e076      	b.n	8015f1e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015e30:	4b44      	ldr	r3, [pc, #272]	@ (8015f44 <HAL_RCC_GetSysClockFreq+0x138>)
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	2210      	movs	r2, #16
 8015e36:	4013      	ands	r3, r2
 8015e38:	d002      	beq.n	8015e40 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015e3a:	4b43      	ldr	r3, [pc, #268]	@ (8015f48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015e3c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8015e3e:	e07c      	b.n	8015f3a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8015e40:	4b42      	ldr	r3, [pc, #264]	@ (8015f4c <HAL_RCC_GetSysClockFreq+0x140>)
 8015e42:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015e44:	e079      	b.n	8015f3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015e46:	4b42      	ldr	r3, [pc, #264]	@ (8015f50 <HAL_RCC_GetSysClockFreq+0x144>)
 8015e48:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015e4a:	e076      	b.n	8015f3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e4e:	0c9a      	lsrs	r2, r3, #18
 8015e50:	230f      	movs	r3, #15
 8015e52:	401a      	ands	r2, r3
 8015e54:	4b3f      	ldr	r3, [pc, #252]	@ (8015f54 <HAL_RCC_GetSysClockFreq+0x148>)
 8015e56:	5c9b      	ldrb	r3, [r3, r2]
 8015e58:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e5c:	0d9a      	lsrs	r2, r3, #22
 8015e5e:	2303      	movs	r3, #3
 8015e60:	4013      	ands	r3, r2
 8015e62:	3301      	adds	r3, #1
 8015e64:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015e66:	4b37      	ldr	r3, [pc, #220]	@ (8015f44 <HAL_RCC_GetSysClockFreq+0x138>)
 8015e68:	68da      	ldr	r2, [r3, #12]
 8015e6a:	2380      	movs	r3, #128	@ 0x80
 8015e6c:	025b      	lsls	r3, r3, #9
 8015e6e:	4013      	ands	r3, r2
 8015e70:	d01a      	beq.n	8015ea8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e74:	61bb      	str	r3, [r7, #24]
 8015e76:	2300      	movs	r3, #0
 8015e78:	61fb      	str	r3, [r7, #28]
 8015e7a:	4a35      	ldr	r2, [pc, #212]	@ (8015f50 <HAL_RCC_GetSysClockFreq+0x144>)
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	69b8      	ldr	r0, [r7, #24]
 8015e80:	69f9      	ldr	r1, [r7, #28]
 8015e82:	f7ea fb9d 	bl	80005c0 <__aeabi_lmul>
 8015e86:	0002      	movs	r2, r0
 8015e88:	000b      	movs	r3, r1
 8015e8a:	0010      	movs	r0, r2
 8015e8c:	0019      	movs	r1, r3
 8015e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e90:	613b      	str	r3, [r7, #16]
 8015e92:	2300      	movs	r3, #0
 8015e94:	617b      	str	r3, [r7, #20]
 8015e96:	693a      	ldr	r2, [r7, #16]
 8015e98:	697b      	ldr	r3, [r7, #20]
 8015e9a:	f7ea fb71 	bl	8000580 <__aeabi_uldivmod>
 8015e9e:	0002      	movs	r2, r0
 8015ea0:	000b      	movs	r3, r1
 8015ea2:	0013      	movs	r3, r2
 8015ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ea6:	e037      	b.n	8015f18 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015ea8:	4b26      	ldr	r3, [pc, #152]	@ (8015f44 <HAL_RCC_GetSysClockFreq+0x138>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	2210      	movs	r2, #16
 8015eae:	4013      	ands	r3, r2
 8015eb0:	d01a      	beq.n	8015ee8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8015eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eb4:	60bb      	str	r3, [r7, #8]
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	60fb      	str	r3, [r7, #12]
 8015eba:	4a23      	ldr	r2, [pc, #140]	@ (8015f48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	68b8      	ldr	r0, [r7, #8]
 8015ec0:	68f9      	ldr	r1, [r7, #12]
 8015ec2:	f7ea fb7d 	bl	80005c0 <__aeabi_lmul>
 8015ec6:	0002      	movs	r2, r0
 8015ec8:	000b      	movs	r3, r1
 8015eca:	0010      	movs	r0, r2
 8015ecc:	0019      	movs	r1, r3
 8015ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ed0:	603b      	str	r3, [r7, #0]
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	607b      	str	r3, [r7, #4]
 8015ed6:	683a      	ldr	r2, [r7, #0]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f7ea fb51 	bl	8000580 <__aeabi_uldivmod>
 8015ede:	0002      	movs	r2, r0
 8015ee0:	000b      	movs	r3, r1
 8015ee2:	0013      	movs	r3, r2
 8015ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ee6:	e017      	b.n	8015f18 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eea:	0018      	movs	r0, r3
 8015eec:	2300      	movs	r3, #0
 8015eee:	0019      	movs	r1, r3
 8015ef0:	4a16      	ldr	r2, [pc, #88]	@ (8015f4c <HAL_RCC_GetSysClockFreq+0x140>)
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	f7ea fb64 	bl	80005c0 <__aeabi_lmul>
 8015ef8:	0002      	movs	r2, r0
 8015efa:	000b      	movs	r3, r1
 8015efc:	0010      	movs	r0, r2
 8015efe:	0019      	movs	r1, r3
 8015f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f02:	001c      	movs	r4, r3
 8015f04:	2300      	movs	r3, #0
 8015f06:	001d      	movs	r5, r3
 8015f08:	0022      	movs	r2, r4
 8015f0a:	002b      	movs	r3, r5
 8015f0c:	f7ea fb38 	bl	8000580 <__aeabi_uldivmod>
 8015f10:	0002      	movs	r2, r0
 8015f12:	000b      	movs	r3, r1
 8015f14:	0013      	movs	r3, r2
 8015f16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f1a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015f1c:	e00d      	b.n	8015f3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015f1e:	4b09      	ldr	r3, [pc, #36]	@ (8015f44 <HAL_RCC_GetSysClockFreq+0x138>)
 8015f20:	685b      	ldr	r3, [r3, #4]
 8015f22:	0b5b      	lsrs	r3, r3, #13
 8015f24:	2207      	movs	r2, #7
 8015f26:	4013      	ands	r3, r2
 8015f28:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015f2a:	6a3b      	ldr	r3, [r7, #32]
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	2280      	movs	r2, #128	@ 0x80
 8015f30:	0212      	lsls	r2, r2, #8
 8015f32:	409a      	lsls	r2, r3
 8015f34:	0013      	movs	r3, r2
 8015f36:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015f38:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015f3c:	0018      	movs	r0, r3
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	b00e      	add	sp, #56	@ 0x38
 8015f42:	bdb0      	pop	{r4, r5, r7, pc}
 8015f44:	40021000 	.word	0x40021000
 8015f48:	003d0900 	.word	0x003d0900
 8015f4c:	00f42400 	.word	0x00f42400
 8015f50:	007a1200 	.word	0x007a1200
 8015f54:	08025d0c 	.word	0x08025d0c

08015f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015f5c:	4b02      	ldr	r3, [pc, #8]	@ (8015f68 <HAL_RCC_GetHCLKFreq+0x10>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
}
 8015f60:	0018      	movs	r0, r3
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}
 8015f66:	46c0      	nop			@ (mov r8, r8)
 8015f68:	200000d0 	.word	0x200000d0

08015f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015f70:	f7ff fff2 	bl	8015f58 <HAL_RCC_GetHCLKFreq>
 8015f74:	0001      	movs	r1, r0
 8015f76:	4b06      	ldr	r3, [pc, #24]	@ (8015f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	0a1b      	lsrs	r3, r3, #8
 8015f7c:	2207      	movs	r2, #7
 8015f7e:	4013      	ands	r3, r2
 8015f80:	4a04      	ldr	r2, [pc, #16]	@ (8015f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015f82:	5cd3      	ldrb	r3, [r2, r3]
 8015f84:	40d9      	lsrs	r1, r3
 8015f86:	000b      	movs	r3, r1
}
 8015f88:	0018      	movs	r0, r3
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	bd80      	pop	{r7, pc}
 8015f8e:	46c0      	nop			@ (mov r8, r8)
 8015f90:	40021000 	.word	0x40021000
 8015f94:	08025d04 	.word	0x08025d04

08015f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015f9c:	f7ff ffdc 	bl	8015f58 <HAL_RCC_GetHCLKFreq>
 8015fa0:	0001      	movs	r1, r0
 8015fa2:	4b06      	ldr	r3, [pc, #24]	@ (8015fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8015fa4:	68db      	ldr	r3, [r3, #12]
 8015fa6:	0adb      	lsrs	r3, r3, #11
 8015fa8:	2207      	movs	r2, #7
 8015faa:	4013      	ands	r3, r2
 8015fac:	4a04      	ldr	r2, [pc, #16]	@ (8015fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015fae:	5cd3      	ldrb	r3, [r2, r3]
 8015fb0:	40d9      	lsrs	r1, r3
 8015fb2:	000b      	movs	r3, r1
}
 8015fb4:	0018      	movs	r0, r3
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}
 8015fba:	46c0      	nop			@ (mov r8, r8)
 8015fbc:	40021000 	.word	0x40021000
 8015fc0:	08025d04 	.word	0x08025d04

08015fc4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b086      	sub	sp, #24
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015fcc:	2017      	movs	r0, #23
 8015fce:	183b      	adds	r3, r7, r0
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	2220      	movs	r2, #32
 8015fda:	4013      	ands	r3, r2
 8015fdc:	d100      	bne.n	8015fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015fde:	e0c7      	b.n	8016170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015fe0:	4b9b      	ldr	r3, [pc, #620]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015fe4:	2380      	movs	r3, #128	@ 0x80
 8015fe6:	055b      	lsls	r3, r3, #21
 8015fe8:	4013      	ands	r3, r2
 8015fea:	d109      	bne.n	8016000 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015fec:	4b98      	ldr	r3, [pc, #608]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015ff0:	4b97      	ldr	r3, [pc, #604]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ff2:	2180      	movs	r1, #128	@ 0x80
 8015ff4:	0549      	lsls	r1, r1, #21
 8015ff6:	430a      	orrs	r2, r1
 8015ff8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015ffa:	183b      	adds	r3, r7, r0
 8015ffc:	2201      	movs	r2, #1
 8015ffe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016000:	4b94      	ldr	r3, [pc, #592]	@ (8016254 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8016002:	681a      	ldr	r2, [r3, #0]
 8016004:	2380      	movs	r3, #128	@ 0x80
 8016006:	005b      	lsls	r3, r3, #1
 8016008:	4013      	ands	r3, r2
 801600a:	d11a      	bne.n	8016042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801600c:	4b91      	ldr	r3, [pc, #580]	@ (8016254 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801600e:	681a      	ldr	r2, [r3, #0]
 8016010:	4b90      	ldr	r3, [pc, #576]	@ (8016254 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8016012:	2180      	movs	r1, #128	@ 0x80
 8016014:	0049      	lsls	r1, r1, #1
 8016016:	430a      	orrs	r2, r1
 8016018:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801601a:	f7f9 f8ab 	bl	800f174 <HAL_GetTick>
 801601e:	0003      	movs	r3, r0
 8016020:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016022:	e008      	b.n	8016036 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016024:	f7f9 f8a6 	bl	800f174 <HAL_GetTick>
 8016028:	0002      	movs	r2, r0
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	1ad3      	subs	r3, r2, r3
 801602e:	2b64      	cmp	r3, #100	@ 0x64
 8016030:	d901      	bls.n	8016036 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8016032:	2303      	movs	r3, #3
 8016034:	e107      	b.n	8016246 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016036:	4b87      	ldr	r3, [pc, #540]	@ (8016254 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8016038:	681a      	ldr	r2, [r3, #0]
 801603a:	2380      	movs	r3, #128	@ 0x80
 801603c:	005b      	lsls	r3, r3, #1
 801603e:	4013      	ands	r3, r2
 8016040:	d0f0      	beq.n	8016024 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8016042:	4b83      	ldr	r3, [pc, #524]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016044:	681a      	ldr	r2, [r3, #0]
 8016046:	23c0      	movs	r3, #192	@ 0xc0
 8016048:	039b      	lsls	r3, r3, #14
 801604a:	4013      	ands	r3, r2
 801604c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	685a      	ldr	r2, [r3, #4]
 8016052:	23c0      	movs	r3, #192	@ 0xc0
 8016054:	039b      	lsls	r3, r3, #14
 8016056:	4013      	ands	r3, r2
 8016058:	68fa      	ldr	r2, [r7, #12]
 801605a:	429a      	cmp	r2, r3
 801605c:	d013      	beq.n	8016086 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	685a      	ldr	r2, [r3, #4]
 8016062:	23c0      	movs	r3, #192	@ 0xc0
 8016064:	029b      	lsls	r3, r3, #10
 8016066:	401a      	ands	r2, r3
 8016068:	23c0      	movs	r3, #192	@ 0xc0
 801606a:	029b      	lsls	r3, r3, #10
 801606c:	429a      	cmp	r2, r3
 801606e:	d10a      	bne.n	8016086 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8016070:	4b77      	ldr	r3, [pc, #476]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016072:	681a      	ldr	r2, [r3, #0]
 8016074:	2380      	movs	r3, #128	@ 0x80
 8016076:	029b      	lsls	r3, r3, #10
 8016078:	401a      	ands	r2, r3
 801607a:	2380      	movs	r3, #128	@ 0x80
 801607c:	029b      	lsls	r3, r3, #10
 801607e:	429a      	cmp	r2, r3
 8016080:	d101      	bne.n	8016086 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8016082:	2301      	movs	r3, #1
 8016084:	e0df      	b.n	8016246 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8016086:	4b72      	ldr	r3, [pc, #456]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801608a:	23c0      	movs	r3, #192	@ 0xc0
 801608c:	029b      	lsls	r3, r3, #10
 801608e:	4013      	ands	r3, r2
 8016090:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d03b      	beq.n	8016110 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	685a      	ldr	r2, [r3, #4]
 801609c:	23c0      	movs	r3, #192	@ 0xc0
 801609e:	029b      	lsls	r3, r3, #10
 80160a0:	4013      	ands	r3, r2
 80160a2:	68fa      	ldr	r2, [r7, #12]
 80160a4:	429a      	cmp	r2, r3
 80160a6:	d033      	beq.n	8016110 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	2220      	movs	r2, #32
 80160ae:	4013      	ands	r3, r2
 80160b0:	d02e      	beq.n	8016110 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80160b2:	4b67      	ldr	r3, [pc, #412]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80160b6:	4a68      	ldr	r2, [pc, #416]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80160b8:	4013      	ands	r3, r2
 80160ba:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80160bc:	4b64      	ldr	r3, [pc, #400]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80160c0:	4b63      	ldr	r3, [pc, #396]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160c2:	2180      	movs	r1, #128	@ 0x80
 80160c4:	0309      	lsls	r1, r1, #12
 80160c6:	430a      	orrs	r2, r1
 80160c8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80160ca:	4b61      	ldr	r3, [pc, #388]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80160ce:	4b60      	ldr	r3, [pc, #384]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160d0:	4962      	ldr	r1, [pc, #392]	@ (801625c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80160d2:	400a      	ands	r2, r1
 80160d4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80160d6:	4b5e      	ldr	r3, [pc, #376]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160d8:	68fa      	ldr	r2, [r7, #12]
 80160da:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80160dc:	68fa      	ldr	r2, [r7, #12]
 80160de:	2380      	movs	r3, #128	@ 0x80
 80160e0:	005b      	lsls	r3, r3, #1
 80160e2:	4013      	ands	r3, r2
 80160e4:	d014      	beq.n	8016110 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80160e6:	f7f9 f845 	bl	800f174 <HAL_GetTick>
 80160ea:	0003      	movs	r3, r0
 80160ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80160ee:	e009      	b.n	8016104 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80160f0:	f7f9 f840 	bl	800f174 <HAL_GetTick>
 80160f4:	0002      	movs	r2, r0
 80160f6:	693b      	ldr	r3, [r7, #16]
 80160f8:	1ad3      	subs	r3, r2, r3
 80160fa:	4a59      	ldr	r2, [pc, #356]	@ (8016260 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80160fc:	4293      	cmp	r3, r2
 80160fe:	d901      	bls.n	8016104 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8016100:	2303      	movs	r3, #3
 8016102:	e0a0      	b.n	8016246 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016104:	4b52      	ldr	r3, [pc, #328]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016106:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016108:	2380      	movs	r3, #128	@ 0x80
 801610a:	009b      	lsls	r3, r3, #2
 801610c:	4013      	ands	r3, r2
 801610e:	d0ef      	beq.n	80160f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	2220      	movs	r2, #32
 8016116:	4013      	ands	r3, r2
 8016118:	d01f      	beq.n	801615a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	685a      	ldr	r2, [r3, #4]
 801611e:	23c0      	movs	r3, #192	@ 0xc0
 8016120:	029b      	lsls	r3, r3, #10
 8016122:	401a      	ands	r2, r3
 8016124:	23c0      	movs	r3, #192	@ 0xc0
 8016126:	029b      	lsls	r3, r3, #10
 8016128:	429a      	cmp	r2, r3
 801612a:	d10c      	bne.n	8016146 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801612c:	4b48      	ldr	r3, [pc, #288]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	4a4c      	ldr	r2, [pc, #304]	@ (8016264 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8016132:	4013      	ands	r3, r2
 8016134:	0019      	movs	r1, r3
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	685a      	ldr	r2, [r3, #4]
 801613a:	23c0      	movs	r3, #192	@ 0xc0
 801613c:	039b      	lsls	r3, r3, #14
 801613e:	401a      	ands	r2, r3
 8016140:	4b43      	ldr	r3, [pc, #268]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016142:	430a      	orrs	r2, r1
 8016144:	601a      	str	r2, [r3, #0]
 8016146:	4b42      	ldr	r3, [pc, #264]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016148:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	685a      	ldr	r2, [r3, #4]
 801614e:	23c0      	movs	r3, #192	@ 0xc0
 8016150:	029b      	lsls	r3, r3, #10
 8016152:	401a      	ands	r2, r3
 8016154:	4b3e      	ldr	r3, [pc, #248]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016156:	430a      	orrs	r2, r1
 8016158:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801615a:	2317      	movs	r3, #23
 801615c:	18fb      	adds	r3, r7, r3
 801615e:	781b      	ldrb	r3, [r3, #0]
 8016160:	2b01      	cmp	r3, #1
 8016162:	d105      	bne.n	8016170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016164:	4b3a      	ldr	r3, [pc, #232]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016168:	4b39      	ldr	r3, [pc, #228]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801616a:	493f      	ldr	r1, [pc, #252]	@ (8016268 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801616c:	400a      	ands	r2, r1
 801616e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	2201      	movs	r2, #1
 8016176:	4013      	ands	r3, r2
 8016178:	d009      	beq.n	801618e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801617a:	4b35      	ldr	r3, [pc, #212]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801617c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801617e:	2203      	movs	r2, #3
 8016180:	4393      	bics	r3, r2
 8016182:	0019      	movs	r1, r3
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	689a      	ldr	r2, [r3, #8]
 8016188:	4b31      	ldr	r3, [pc, #196]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801618a:	430a      	orrs	r2, r1
 801618c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	2202      	movs	r2, #2
 8016194:	4013      	ands	r3, r2
 8016196:	d009      	beq.n	80161ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8016198:	4b2d      	ldr	r3, [pc, #180]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801619a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801619c:	220c      	movs	r2, #12
 801619e:	4393      	bics	r3, r2
 80161a0:	0019      	movs	r1, r3
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	68da      	ldr	r2, [r3, #12]
 80161a6:	4b2a      	ldr	r3, [pc, #168]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161a8:	430a      	orrs	r2, r1
 80161aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	2204      	movs	r2, #4
 80161b2:	4013      	ands	r3, r2
 80161b4:	d009      	beq.n	80161ca <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80161b6:	4b26      	ldr	r3, [pc, #152]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161ba:	4a2c      	ldr	r2, [pc, #176]	@ (801626c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80161bc:	4013      	ands	r3, r2
 80161be:	0019      	movs	r1, r3
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	691a      	ldr	r2, [r3, #16]
 80161c4:	4b22      	ldr	r3, [pc, #136]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161c6:	430a      	orrs	r2, r1
 80161c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	2208      	movs	r2, #8
 80161d0:	4013      	ands	r3, r2
 80161d2:	d009      	beq.n	80161e8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80161d4:	4b1e      	ldr	r3, [pc, #120]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161d8:	4a25      	ldr	r2, [pc, #148]	@ (8016270 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80161da:	4013      	ands	r3, r2
 80161dc:	0019      	movs	r1, r3
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	695a      	ldr	r2, [r3, #20]
 80161e2:	4b1b      	ldr	r3, [pc, #108]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161e4:	430a      	orrs	r2, r1
 80161e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681a      	ldr	r2, [r3, #0]
 80161ec:	2380      	movs	r3, #128	@ 0x80
 80161ee:	005b      	lsls	r3, r3, #1
 80161f0:	4013      	ands	r3, r2
 80161f2:	d009      	beq.n	8016208 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80161f4:	4b16      	ldr	r3, [pc, #88]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161f8:	4a17      	ldr	r2, [pc, #92]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80161fa:	4013      	ands	r3, r2
 80161fc:	0019      	movs	r1, r3
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	699a      	ldr	r2, [r3, #24]
 8016202:	4b13      	ldr	r3, [pc, #76]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016204:	430a      	orrs	r2, r1
 8016206:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	2240      	movs	r2, #64	@ 0x40
 801620e:	4013      	ands	r3, r2
 8016210:	d009      	beq.n	8016226 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8016212:	4b0f      	ldr	r3, [pc, #60]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016216:	4a17      	ldr	r2, [pc, #92]	@ (8016274 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8016218:	4013      	ands	r3, r2
 801621a:	0019      	movs	r1, r3
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	6a1a      	ldr	r2, [r3, #32]
 8016220:	4b0b      	ldr	r3, [pc, #44]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016222:	430a      	orrs	r2, r1
 8016224:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	2280      	movs	r2, #128	@ 0x80
 801622c:	4013      	ands	r3, r2
 801622e:	d009      	beq.n	8016244 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8016230:	4b07      	ldr	r3, [pc, #28]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016234:	4a10      	ldr	r2, [pc, #64]	@ (8016278 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8016236:	4013      	ands	r3, r2
 8016238:	0019      	movs	r1, r3
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	69da      	ldr	r2, [r3, #28]
 801623e:	4b04      	ldr	r3, [pc, #16]	@ (8016250 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016240:	430a      	orrs	r2, r1
 8016242:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8016244:	2300      	movs	r3, #0
}
 8016246:	0018      	movs	r0, r3
 8016248:	46bd      	mov	sp, r7
 801624a:	b006      	add	sp, #24
 801624c:	bd80      	pop	{r7, pc}
 801624e:	46c0      	nop			@ (mov r8, r8)
 8016250:	40021000 	.word	0x40021000
 8016254:	40007000 	.word	0x40007000
 8016258:	fffcffff 	.word	0xfffcffff
 801625c:	fff7ffff 	.word	0xfff7ffff
 8016260:	00001388 	.word	0x00001388
 8016264:	ffcfffff 	.word	0xffcfffff
 8016268:	efffffff 	.word	0xefffffff
 801626c:	fffff3ff 	.word	0xfffff3ff
 8016270:	ffffcfff 	.word	0xffffcfff
 8016274:	fbffffff 	.word	0xfbffffff
 8016278:	fff3ffff 	.word	0xfff3ffff

0801627c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801627c:	b5b0      	push	{r4, r5, r7, lr}
 801627e:	b084      	sub	sp, #16
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8016284:	230f      	movs	r3, #15
 8016286:	18fb      	adds	r3, r7, r3
 8016288:	2201      	movs	r2, #1
 801628a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d101      	bne.n	8016296 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8016292:	2301      	movs	r3, #1
 8016294:	e088      	b.n	80163a8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2221      	movs	r2, #33	@ 0x21
 801629a:	5c9b      	ldrb	r3, [r3, r2]
 801629c:	b2db      	uxtb	r3, r3
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d107      	bne.n	80162b2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2220      	movs	r2, #32
 80162a6:	2100      	movs	r1, #0
 80162a8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	0018      	movs	r0, r3
 80162ae:	f7f3 f847 	bl	8009340 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	2221      	movs	r2, #33	@ 0x21
 80162b6:	2102      	movs	r1, #2
 80162b8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	68db      	ldr	r3, [r3, #12]
 80162c0:	2210      	movs	r2, #16
 80162c2:	4013      	ands	r3, r2
 80162c4:	2b10      	cmp	r3, #16
 80162c6:	d05f      	beq.n	8016388 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	22ca      	movs	r2, #202	@ 0xca
 80162ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	2253      	movs	r2, #83	@ 0x53
 80162d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80162d8:	250f      	movs	r5, #15
 80162da:	197c      	adds	r4, r7, r5
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	0018      	movs	r0, r3
 80162e0:	f000 fa7c 	bl	80167dc <RTC_EnterInitMode>
 80162e4:	0003      	movs	r3, r0
 80162e6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80162e8:	0028      	movs	r0, r5
 80162ea:	183b      	adds	r3, r7, r0
 80162ec:	781b      	ldrb	r3, [r3, #0]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d12c      	bne.n	801634c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	689a      	ldr	r2, [r3, #8]
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	492c      	ldr	r1, [pc, #176]	@ (80163b0 <HAL_RTC_Init+0x134>)
 80162fe:	400a      	ands	r2, r1
 8016300:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	6899      	ldr	r1, [r3, #8]
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	685a      	ldr	r2, [r3, #4]
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	691b      	ldr	r3, [r3, #16]
 8016310:	431a      	orrs	r2, r3
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	699b      	ldr	r3, [r3, #24]
 8016316:	431a      	orrs	r2, r3
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	430a      	orrs	r2, r1
 801631e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	687a      	ldr	r2, [r7, #4]
 8016326:	68d2      	ldr	r2, [r2, #12]
 8016328:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	6919      	ldr	r1, [r3, #16]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	689b      	ldr	r3, [r3, #8]
 8016334:	041a      	lsls	r2, r3, #16
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	430a      	orrs	r2, r1
 801633c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801633e:	183c      	adds	r4, r7, r0
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	0018      	movs	r0, r3
 8016344:	f000 fa8e 	bl	8016864 <RTC_ExitInitMode>
 8016348:	0003      	movs	r3, r0
 801634a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801634c:	230f      	movs	r3, #15
 801634e:	18fb      	adds	r3, r7, r3
 8016350:	781b      	ldrb	r3, [r3, #0]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d113      	bne.n	801637e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	2103      	movs	r1, #3
 8016362:	438a      	bics	r2, r1
 8016364:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	69da      	ldr	r2, [r3, #28]
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	695b      	ldr	r3, [r3, #20]
 8016374:	431a      	orrs	r2, r3
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	430a      	orrs	r2, r1
 801637c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	22ff      	movs	r2, #255	@ 0xff
 8016384:	625a      	str	r2, [r3, #36]	@ 0x24
 8016386:	e003      	b.n	8016390 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8016388:	230f      	movs	r3, #15
 801638a:	18fb      	adds	r3, r7, r3
 801638c:	2200      	movs	r2, #0
 801638e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8016390:	230f      	movs	r3, #15
 8016392:	18fb      	adds	r3, r7, r3
 8016394:	781b      	ldrb	r3, [r3, #0]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d103      	bne.n	80163a2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2221      	movs	r2, #33	@ 0x21
 801639e:	2101      	movs	r1, #1
 80163a0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80163a2:	230f      	movs	r3, #15
 80163a4:	18fb      	adds	r3, r7, r3
 80163a6:	781b      	ldrb	r3, [r3, #0]
}
 80163a8:	0018      	movs	r0, r3
 80163aa:	46bd      	mov	sp, r7
 80163ac:	b004      	add	sp, #16
 80163ae:	bdb0      	pop	{r4, r5, r7, pc}
 80163b0:	ff8fffbf 	.word	0xff8fffbf

080163b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80163b4:	b5b0      	push	{r4, r5, r7, lr}
 80163b6:	b086      	sub	sp, #24
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	60f8      	str	r0, [r7, #12]
 80163bc:	60b9      	str	r1, [r7, #8]
 80163be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80163c0:	2300      	movs	r3, #0
 80163c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	2220      	movs	r2, #32
 80163c8:	5c9b      	ldrb	r3, [r3, r2]
 80163ca:	2b01      	cmp	r3, #1
 80163cc:	d101      	bne.n	80163d2 <HAL_RTC_SetTime+0x1e>
 80163ce:	2302      	movs	r3, #2
 80163d0:	e092      	b.n	80164f8 <HAL_RTC_SetTime+0x144>
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	2220      	movs	r2, #32
 80163d6:	2101      	movs	r1, #1
 80163d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2221      	movs	r2, #33	@ 0x21
 80163de:	2102      	movs	r1, #2
 80163e0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d125      	bne.n	8016434 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	689b      	ldr	r3, [r3, #8]
 80163ee:	2240      	movs	r2, #64	@ 0x40
 80163f0:	4013      	ands	r3, r2
 80163f2:	d102      	bne.n	80163fa <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	2200      	movs	r2, #0
 80163f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	781b      	ldrb	r3, [r3, #0]
 80163fe:	0018      	movs	r0, r3
 8016400:	f000 fa5a 	bl	80168b8 <RTC_ByteToBcd2>
 8016404:	0003      	movs	r3, r0
 8016406:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016408:	68bb      	ldr	r3, [r7, #8]
 801640a:	785b      	ldrb	r3, [r3, #1]
 801640c:	0018      	movs	r0, r3
 801640e:	f000 fa53 	bl	80168b8 <RTC_ByteToBcd2>
 8016412:	0003      	movs	r3, r0
 8016414:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016416:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	789b      	ldrb	r3, [r3, #2]
 801641c:	0018      	movs	r0, r3
 801641e:	f000 fa4b 	bl	80168b8 <RTC_ByteToBcd2>
 8016422:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016424:	0022      	movs	r2, r4
 8016426:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8016428:	68bb      	ldr	r3, [r7, #8]
 801642a:	78db      	ldrb	r3, [r3, #3]
 801642c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801642e:	4313      	orrs	r3, r2
 8016430:	617b      	str	r3, [r7, #20]
 8016432:	e017      	b.n	8016464 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	689b      	ldr	r3, [r3, #8]
 801643a:	2240      	movs	r2, #64	@ 0x40
 801643c:	4013      	ands	r3, r2
 801643e:	d102      	bne.n	8016446 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016440:	68bb      	ldr	r3, [r7, #8]
 8016442:	2200      	movs	r2, #0
 8016444:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	781b      	ldrb	r3, [r3, #0]
 801644a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	785b      	ldrb	r3, [r3, #1]
 8016450:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016452:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8016454:	68ba      	ldr	r2, [r7, #8]
 8016456:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016458:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	78db      	ldrb	r3, [r3, #3]
 801645e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016460:	4313      	orrs	r3, r2
 8016462:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	22ca      	movs	r2, #202	@ 0xca
 801646a:	625a      	str	r2, [r3, #36]	@ 0x24
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	2253      	movs	r2, #83	@ 0x53
 8016472:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016474:	2513      	movs	r5, #19
 8016476:	197c      	adds	r4, r7, r5
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	0018      	movs	r0, r3
 801647c:	f000 f9ae 	bl	80167dc <RTC_EnterInitMode>
 8016480:	0003      	movs	r3, r0
 8016482:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016484:	0028      	movs	r0, r5
 8016486:	183b      	adds	r3, r7, r0
 8016488:	781b      	ldrb	r3, [r3, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d120      	bne.n	80164d0 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	697a      	ldr	r2, [r7, #20]
 8016494:	491a      	ldr	r1, [pc, #104]	@ (8016500 <HAL_RTC_SetTime+0x14c>)
 8016496:	400a      	ands	r2, r1
 8016498:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	689a      	ldr	r2, [r3, #8]
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	4917      	ldr	r1, [pc, #92]	@ (8016504 <HAL_RTC_SetTime+0x150>)
 80164a6:	400a      	ands	r2, r1
 80164a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	6899      	ldr	r1, [r3, #8]
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	68da      	ldr	r2, [r3, #12]
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	691b      	ldr	r3, [r3, #16]
 80164b8:	431a      	orrs	r2, r3
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	430a      	orrs	r2, r1
 80164c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80164c2:	183c      	adds	r4, r7, r0
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	0018      	movs	r0, r3
 80164c8:	f000 f9cc 	bl	8016864 <RTC_ExitInitMode>
 80164cc:	0003      	movs	r3, r0
 80164ce:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80164d0:	2313      	movs	r3, #19
 80164d2:	18fb      	adds	r3, r7, r3
 80164d4:	781b      	ldrb	r3, [r3, #0]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d103      	bne.n	80164e2 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	2221      	movs	r2, #33	@ 0x21
 80164de:	2101      	movs	r1, #1
 80164e0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	22ff      	movs	r2, #255	@ 0xff
 80164e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	2220      	movs	r2, #32
 80164ee:	2100      	movs	r1, #0
 80164f0:	5499      	strb	r1, [r3, r2]

  return status;
 80164f2:	2313      	movs	r3, #19
 80164f4:	18fb      	adds	r3, r7, r3
 80164f6:	781b      	ldrb	r3, [r3, #0]
}
 80164f8:	0018      	movs	r0, r3
 80164fa:	46bd      	mov	sp, r7
 80164fc:	b006      	add	sp, #24
 80164fe:	bdb0      	pop	{r4, r5, r7, pc}
 8016500:	007f7f7f 	.word	0x007f7f7f
 8016504:	fffbffff 	.word	0xfffbffff

08016508 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b086      	sub	sp, #24
 801650c:	af00      	add	r7, sp, #0
 801650e:	60f8      	str	r0, [r7, #12]
 8016510:	60b9      	str	r1, [r7, #8]
 8016512:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016514:	2300      	movs	r3, #0
 8016516:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	691b      	ldr	r3, [r3, #16]
 8016528:	045b      	lsls	r3, r3, #17
 801652a:	0c5a      	lsrs	r2, r3, #17
 801652c:	68bb      	ldr	r3, [r7, #8]
 801652e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	4a22      	ldr	r2, [pc, #136]	@ (80165c0 <HAL_RTC_GetTime+0xb8>)
 8016538:	4013      	ands	r3, r2
 801653a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	0c1b      	lsrs	r3, r3, #16
 8016540:	b2db      	uxtb	r3, r3
 8016542:	223f      	movs	r2, #63	@ 0x3f
 8016544:	4013      	ands	r3, r2
 8016546:	b2da      	uxtb	r2, r3
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801654c:	697b      	ldr	r3, [r7, #20]
 801654e:	0a1b      	lsrs	r3, r3, #8
 8016550:	b2db      	uxtb	r3, r3
 8016552:	227f      	movs	r2, #127	@ 0x7f
 8016554:	4013      	ands	r3, r2
 8016556:	b2da      	uxtb	r2, r3
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801655c:	697b      	ldr	r3, [r7, #20]
 801655e:	b2db      	uxtb	r3, r3
 8016560:	227f      	movs	r2, #127	@ 0x7f
 8016562:	4013      	ands	r3, r2
 8016564:	b2da      	uxtb	r2, r3
 8016566:	68bb      	ldr	r3, [r7, #8]
 8016568:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801656a:	697b      	ldr	r3, [r7, #20]
 801656c:	0d9b      	lsrs	r3, r3, #22
 801656e:	b2db      	uxtb	r3, r3
 8016570:	2201      	movs	r2, #1
 8016572:	4013      	ands	r3, r2
 8016574:	b2da      	uxtb	r2, r3
 8016576:	68bb      	ldr	r3, [r7, #8]
 8016578:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d11a      	bne.n	80165b6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	781b      	ldrb	r3, [r3, #0]
 8016584:	0018      	movs	r0, r3
 8016586:	f000 f9b8 	bl	80168fa <RTC_Bcd2ToByte>
 801658a:	0003      	movs	r3, r0
 801658c:	001a      	movs	r2, r3
 801658e:	68bb      	ldr	r3, [r7, #8]
 8016590:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	785b      	ldrb	r3, [r3, #1]
 8016596:	0018      	movs	r0, r3
 8016598:	f000 f9af 	bl	80168fa <RTC_Bcd2ToByte>
 801659c:	0003      	movs	r3, r0
 801659e:	001a      	movs	r2, r3
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80165a4:	68bb      	ldr	r3, [r7, #8]
 80165a6:	789b      	ldrb	r3, [r3, #2]
 80165a8:	0018      	movs	r0, r3
 80165aa:	f000 f9a6 	bl	80168fa <RTC_Bcd2ToByte>
 80165ae:	0003      	movs	r3, r0
 80165b0:	001a      	movs	r2, r3
 80165b2:	68bb      	ldr	r3, [r7, #8]
 80165b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80165b6:	2300      	movs	r3, #0
}
 80165b8:	0018      	movs	r0, r3
 80165ba:	46bd      	mov	sp, r7
 80165bc:	b006      	add	sp, #24
 80165be:	bd80      	pop	{r7, pc}
 80165c0:	007f7f7f 	.word	0x007f7f7f

080165c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80165c4:	b5b0      	push	{r4, r5, r7, lr}
 80165c6:	b086      	sub	sp, #24
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	60f8      	str	r0, [r7, #12]
 80165cc:	60b9      	str	r1, [r7, #8]
 80165ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80165d0:	2300      	movs	r3, #0
 80165d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	2220      	movs	r2, #32
 80165d8:	5c9b      	ldrb	r3, [r3, r2]
 80165da:	2b01      	cmp	r3, #1
 80165dc:	d101      	bne.n	80165e2 <HAL_RTC_SetDate+0x1e>
 80165de:	2302      	movs	r3, #2
 80165e0:	e07e      	b.n	80166e0 <HAL_RTC_SetDate+0x11c>
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	2220      	movs	r2, #32
 80165e6:	2101      	movs	r1, #1
 80165e8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	2221      	movs	r2, #33	@ 0x21
 80165ee:	2102      	movs	r1, #2
 80165f0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d10e      	bne.n	8016616 <HAL_RTC_SetDate+0x52>
 80165f8:	68bb      	ldr	r3, [r7, #8]
 80165fa:	785b      	ldrb	r3, [r3, #1]
 80165fc:	001a      	movs	r2, r3
 80165fe:	2310      	movs	r3, #16
 8016600:	4013      	ands	r3, r2
 8016602:	d008      	beq.n	8016616 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	785b      	ldrb	r3, [r3, #1]
 8016608:	2210      	movs	r2, #16
 801660a:	4393      	bics	r3, r2
 801660c:	b2db      	uxtb	r3, r3
 801660e:	330a      	adds	r3, #10
 8016610:	b2da      	uxtb	r2, r3
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d11c      	bne.n	8016656 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	78db      	ldrb	r3, [r3, #3]
 8016620:	0018      	movs	r0, r3
 8016622:	f000 f949 	bl	80168b8 <RTC_ByteToBcd2>
 8016626:	0003      	movs	r3, r0
 8016628:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	785b      	ldrb	r3, [r3, #1]
 801662e:	0018      	movs	r0, r3
 8016630:	f000 f942 	bl	80168b8 <RTC_ByteToBcd2>
 8016634:	0003      	movs	r3, r0
 8016636:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016638:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801663a:	68bb      	ldr	r3, [r7, #8]
 801663c:	789b      	ldrb	r3, [r3, #2]
 801663e:	0018      	movs	r0, r3
 8016640:	f000 f93a 	bl	80168b8 <RTC_ByteToBcd2>
 8016644:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016646:	0022      	movs	r2, r4
 8016648:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	781b      	ldrb	r3, [r3, #0]
 801664e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016650:	4313      	orrs	r3, r2
 8016652:	617b      	str	r3, [r7, #20]
 8016654:	e00e      	b.n	8016674 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	78db      	ldrb	r3, [r3, #3]
 801665a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	785b      	ldrb	r3, [r3, #1]
 8016660:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016662:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8016664:	68ba      	ldr	r2, [r7, #8]
 8016666:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016668:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	781b      	ldrb	r3, [r3, #0]
 801666e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016670:	4313      	orrs	r3, r2
 8016672:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	22ca      	movs	r2, #202	@ 0xca
 801667a:	625a      	str	r2, [r3, #36]	@ 0x24
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	2253      	movs	r2, #83	@ 0x53
 8016682:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016684:	2513      	movs	r5, #19
 8016686:	197c      	adds	r4, r7, r5
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	0018      	movs	r0, r3
 801668c:	f000 f8a6 	bl	80167dc <RTC_EnterInitMode>
 8016690:	0003      	movs	r3, r0
 8016692:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016694:	0028      	movs	r0, r5
 8016696:	183b      	adds	r3, r7, r0
 8016698:	781b      	ldrb	r3, [r3, #0]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d10c      	bne.n	80166b8 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	697a      	ldr	r2, [r7, #20]
 80166a4:	4910      	ldr	r1, [pc, #64]	@ (80166e8 <HAL_RTC_SetDate+0x124>)
 80166a6:	400a      	ands	r2, r1
 80166a8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80166aa:	183c      	adds	r4, r7, r0
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	0018      	movs	r0, r3
 80166b0:	f000 f8d8 	bl	8016864 <RTC_ExitInitMode>
 80166b4:	0003      	movs	r3, r0
 80166b6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80166b8:	2313      	movs	r3, #19
 80166ba:	18fb      	adds	r3, r7, r3
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d103      	bne.n	80166ca <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	2221      	movs	r2, #33	@ 0x21
 80166c6:	2101      	movs	r1, #1
 80166c8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	22ff      	movs	r2, #255	@ 0xff
 80166d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	2220      	movs	r2, #32
 80166d6:	2100      	movs	r1, #0
 80166d8:	5499      	strb	r1, [r3, r2]

  return status;
 80166da:	2313      	movs	r3, #19
 80166dc:	18fb      	adds	r3, r7, r3
 80166de:	781b      	ldrb	r3, [r3, #0]
}
 80166e0:	0018      	movs	r0, r3
 80166e2:	46bd      	mov	sp, r7
 80166e4:	b006      	add	sp, #24
 80166e6:	bdb0      	pop	{r4, r5, r7, pc}
 80166e8:	00ffff3f 	.word	0x00ffff3f

080166ec <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b086      	sub	sp, #24
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	60f8      	str	r0, [r7, #12]
 80166f4:	60b9      	str	r1, [r7, #8]
 80166f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80166f8:	2300      	movs	r3, #0
 80166fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	685b      	ldr	r3, [r3, #4]
 8016702:	4a21      	ldr	r2, [pc, #132]	@ (8016788 <HAL_RTC_GetDate+0x9c>)
 8016704:	4013      	ands	r3, r2
 8016706:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016708:	697b      	ldr	r3, [r7, #20]
 801670a:	0c1b      	lsrs	r3, r3, #16
 801670c:	b2da      	uxtb	r2, r3
 801670e:	68bb      	ldr	r3, [r7, #8]
 8016710:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8016712:	697b      	ldr	r3, [r7, #20]
 8016714:	0a1b      	lsrs	r3, r3, #8
 8016716:	b2db      	uxtb	r3, r3
 8016718:	221f      	movs	r2, #31
 801671a:	4013      	ands	r3, r2
 801671c:	b2da      	uxtb	r2, r3
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8016722:	697b      	ldr	r3, [r7, #20]
 8016724:	b2db      	uxtb	r3, r3
 8016726:	223f      	movs	r2, #63	@ 0x3f
 8016728:	4013      	ands	r3, r2
 801672a:	b2da      	uxtb	r2, r3
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8016730:	697b      	ldr	r3, [r7, #20]
 8016732:	0b5b      	lsrs	r3, r3, #13
 8016734:	b2db      	uxtb	r3, r3
 8016736:	2207      	movs	r2, #7
 8016738:	4013      	ands	r3, r2
 801673a:	b2da      	uxtb	r2, r3
 801673c:	68bb      	ldr	r3, [r7, #8]
 801673e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d11a      	bne.n	801677c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	78db      	ldrb	r3, [r3, #3]
 801674a:	0018      	movs	r0, r3
 801674c:	f000 f8d5 	bl	80168fa <RTC_Bcd2ToByte>
 8016750:	0003      	movs	r3, r0
 8016752:	001a      	movs	r2, r3
 8016754:	68bb      	ldr	r3, [r7, #8]
 8016756:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016758:	68bb      	ldr	r3, [r7, #8]
 801675a:	785b      	ldrb	r3, [r3, #1]
 801675c:	0018      	movs	r0, r3
 801675e:	f000 f8cc 	bl	80168fa <RTC_Bcd2ToByte>
 8016762:	0003      	movs	r3, r0
 8016764:	001a      	movs	r2, r3
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801676a:	68bb      	ldr	r3, [r7, #8]
 801676c:	789b      	ldrb	r3, [r3, #2]
 801676e:	0018      	movs	r0, r3
 8016770:	f000 f8c3 	bl	80168fa <RTC_Bcd2ToByte>
 8016774:	0003      	movs	r3, r0
 8016776:	001a      	movs	r2, r3
 8016778:	68bb      	ldr	r3, [r7, #8]
 801677a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801677c:	2300      	movs	r3, #0
}
 801677e:	0018      	movs	r0, r3
 8016780:	46bd      	mov	sp, r7
 8016782:	b006      	add	sp, #24
 8016784:	bd80      	pop	{r7, pc}
 8016786:	46c0      	nop			@ (mov r8, r8)
 8016788:	00ffff3f 	.word	0x00ffff3f

0801678c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b084      	sub	sp, #16
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016794:	2300      	movs	r3, #0
 8016796:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	4a0e      	ldr	r2, [pc, #56]	@ (80167d8 <HAL_RTC_WaitForSynchro+0x4c>)
 801679e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80167a0:	f7f8 fce8 	bl	800f174 <HAL_GetTick>
 80167a4:	0003      	movs	r3, r0
 80167a6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80167a8:	e00a      	b.n	80167c0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80167aa:	f7f8 fce3 	bl	800f174 <HAL_GetTick>
 80167ae:	0002      	movs	r2, r0
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	1ad2      	subs	r2, r2, r3
 80167b4:	23fa      	movs	r3, #250	@ 0xfa
 80167b6:	009b      	lsls	r3, r3, #2
 80167b8:	429a      	cmp	r2, r3
 80167ba:	d901      	bls.n	80167c0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80167bc:	2303      	movs	r3, #3
 80167be:	e006      	b.n	80167ce <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	68db      	ldr	r3, [r3, #12]
 80167c6:	2220      	movs	r2, #32
 80167c8:	4013      	ands	r3, r2
 80167ca:	d0ee      	beq.n	80167aa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80167cc:	2300      	movs	r3, #0
}
 80167ce:	0018      	movs	r0, r3
 80167d0:	46bd      	mov	sp, r7
 80167d2:	b004      	add	sp, #16
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	46c0      	nop			@ (mov r8, r8)
 80167d8:	0001ff5f 	.word	0x0001ff5f

080167dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80167e4:	2300      	movs	r3, #0
 80167e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80167e8:	230f      	movs	r3, #15
 80167ea:	18fb      	adds	r3, r7, r3
 80167ec:	2200      	movs	r2, #0
 80167ee:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	68db      	ldr	r3, [r3, #12]
 80167f6:	2240      	movs	r2, #64	@ 0x40
 80167f8:	4013      	ands	r3, r2
 80167fa:	d12c      	bne.n	8016856 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	68da      	ldr	r2, [r3, #12]
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	2180      	movs	r1, #128	@ 0x80
 8016808:	430a      	orrs	r2, r1
 801680a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801680c:	f7f8 fcb2 	bl	800f174 <HAL_GetTick>
 8016810:	0003      	movs	r3, r0
 8016812:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016814:	e014      	b.n	8016840 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016816:	f7f8 fcad 	bl	800f174 <HAL_GetTick>
 801681a:	0002      	movs	r2, r0
 801681c:	68bb      	ldr	r3, [r7, #8]
 801681e:	1ad2      	subs	r2, r2, r3
 8016820:	200f      	movs	r0, #15
 8016822:	183b      	adds	r3, r7, r0
 8016824:	1839      	adds	r1, r7, r0
 8016826:	7809      	ldrb	r1, [r1, #0]
 8016828:	7019      	strb	r1, [r3, #0]
 801682a:	23fa      	movs	r3, #250	@ 0xfa
 801682c:	009b      	lsls	r3, r3, #2
 801682e:	429a      	cmp	r2, r3
 8016830:	d906      	bls.n	8016840 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	2221      	movs	r2, #33	@ 0x21
 8016836:	2104      	movs	r1, #4
 8016838:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801683a:	183b      	adds	r3, r7, r0
 801683c:	2201      	movs	r2, #1
 801683e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	68db      	ldr	r3, [r3, #12]
 8016846:	2240      	movs	r2, #64	@ 0x40
 8016848:	4013      	ands	r3, r2
 801684a:	d104      	bne.n	8016856 <RTC_EnterInitMode+0x7a>
 801684c:	230f      	movs	r3, #15
 801684e:	18fb      	adds	r3, r7, r3
 8016850:	781b      	ldrb	r3, [r3, #0]
 8016852:	2b01      	cmp	r3, #1
 8016854:	d1df      	bne.n	8016816 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8016856:	230f      	movs	r3, #15
 8016858:	18fb      	adds	r3, r7, r3
 801685a:	781b      	ldrb	r3, [r3, #0]
}
 801685c:	0018      	movs	r0, r3
 801685e:	46bd      	mov	sp, r7
 8016860:	b004      	add	sp, #16
 8016862:	bd80      	pop	{r7, pc}

08016864 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016864:	b590      	push	{r4, r7, lr}
 8016866:	b085      	sub	sp, #20
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801686c:	240f      	movs	r4, #15
 801686e:	193b      	adds	r3, r7, r4
 8016870:	2200      	movs	r2, #0
 8016872:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	68da      	ldr	r2, [r3, #12]
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	2180      	movs	r1, #128	@ 0x80
 8016880:	438a      	bics	r2, r1
 8016882:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	689b      	ldr	r3, [r3, #8]
 801688a:	2220      	movs	r2, #32
 801688c:	4013      	ands	r3, r2
 801688e:	d10c      	bne.n	80168aa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	0018      	movs	r0, r3
 8016894:	f7ff ff7a 	bl	801678c <HAL_RTC_WaitForSynchro>
 8016898:	1e03      	subs	r3, r0, #0
 801689a:	d006      	beq.n	80168aa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2221      	movs	r2, #33	@ 0x21
 80168a0:	2104      	movs	r1, #4
 80168a2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80168a4:	193b      	adds	r3, r7, r4
 80168a6:	2201      	movs	r2, #1
 80168a8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80168aa:	230f      	movs	r3, #15
 80168ac:	18fb      	adds	r3, r7, r3
 80168ae:	781b      	ldrb	r3, [r3, #0]
}
 80168b0:	0018      	movs	r0, r3
 80168b2:	46bd      	mov	sp, r7
 80168b4:	b005      	add	sp, #20
 80168b6:	bd90      	pop	{r4, r7, pc}

080168b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	af00      	add	r7, sp, #0
 80168be:	0002      	movs	r2, r0
 80168c0:	1dfb      	adds	r3, r7, #7
 80168c2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80168c4:	2300      	movs	r3, #0
 80168c6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80168c8:	e007      	b.n	80168da <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	3301      	adds	r3, #1
 80168ce:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80168d0:	1dfb      	adds	r3, r7, #7
 80168d2:	1dfa      	adds	r2, r7, #7
 80168d4:	7812      	ldrb	r2, [r2, #0]
 80168d6:	3a0a      	subs	r2, #10
 80168d8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80168da:	1dfb      	adds	r3, r7, #7
 80168dc:	781b      	ldrb	r3, [r3, #0]
 80168de:	2b09      	cmp	r3, #9
 80168e0:	d8f3      	bhi.n	80168ca <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	011b      	lsls	r3, r3, #4
 80168e8:	b2da      	uxtb	r2, r3
 80168ea:	1dfb      	adds	r3, r7, #7
 80168ec:	781b      	ldrb	r3, [r3, #0]
 80168ee:	4313      	orrs	r3, r2
 80168f0:	b2db      	uxtb	r3, r3
}
 80168f2:	0018      	movs	r0, r3
 80168f4:	46bd      	mov	sp, r7
 80168f6:	b004      	add	sp, #16
 80168f8:	bd80      	pop	{r7, pc}

080168fa <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80168fa:	b580      	push	{r7, lr}
 80168fc:	b084      	sub	sp, #16
 80168fe:	af00      	add	r7, sp, #0
 8016900:	0002      	movs	r2, r0
 8016902:	1dfb      	adds	r3, r7, #7
 8016904:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8016906:	2300      	movs	r3, #0
 8016908:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801690a:	1dfb      	adds	r3, r7, #7
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	091b      	lsrs	r3, r3, #4
 8016910:	b2db      	uxtb	r3, r3
 8016912:	001a      	movs	r2, r3
 8016914:	0013      	movs	r3, r2
 8016916:	009b      	lsls	r3, r3, #2
 8016918:	189b      	adds	r3, r3, r2
 801691a:	005b      	lsls	r3, r3, #1
 801691c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	b2da      	uxtb	r2, r3
 8016922:	1dfb      	adds	r3, r7, #7
 8016924:	781b      	ldrb	r3, [r3, #0]
 8016926:	210f      	movs	r1, #15
 8016928:	400b      	ands	r3, r1
 801692a:	b2db      	uxtb	r3, r3
 801692c:	18d3      	adds	r3, r2, r3
 801692e:	b2db      	uxtb	r3, r3
}
 8016930:	0018      	movs	r0, r3
 8016932:	46bd      	mov	sp, r7
 8016934:	b004      	add	sp, #16
 8016936:	bd80      	pop	{r7, pc}

08016938 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b086      	sub	sp, #24
 801693c:	af00      	add	r7, sp, #0
 801693e:	60f8      	str	r0, [r7, #12]
 8016940:	60b9      	str	r1, [r7, #8]
 8016942:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016944:	4b64      	ldr	r3, [pc, #400]	@ (8016ad8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	22fa      	movs	r2, #250	@ 0xfa
 801694a:	01d1      	lsls	r1, r2, #7
 801694c:	0018      	movs	r0, r3
 801694e:	f7e9 fc29 	bl	80001a4 <__udivsi3>
 8016952:	0003      	movs	r3, r0
 8016954:	001a      	movs	r2, r3
 8016956:	0013      	movs	r3, r2
 8016958:	015b      	lsls	r3, r3, #5
 801695a:	1a9b      	subs	r3, r3, r2
 801695c:	009b      	lsls	r3, r3, #2
 801695e:	189b      	adds	r3, r3, r2
 8016960:	00db      	lsls	r3, r3, #3
 8016962:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	2220      	movs	r2, #32
 8016968:	5c9b      	ldrb	r3, [r3, r2]
 801696a:	2b01      	cmp	r3, #1
 801696c:	d101      	bne.n	8016972 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801696e:	2302      	movs	r3, #2
 8016970:	e0ad      	b.n	8016ace <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	2220      	movs	r2, #32
 8016976:	2101      	movs	r1, #1
 8016978:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	2221      	movs	r2, #33	@ 0x21
 801697e:	2102      	movs	r1, #2
 8016980:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	22ca      	movs	r2, #202	@ 0xca
 8016988:	625a      	str	r2, [r3, #36]	@ 0x24
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	2253      	movs	r2, #83	@ 0x53
 8016990:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	689a      	ldr	r2, [r3, #8]
 8016998:	2380      	movs	r3, #128	@ 0x80
 801699a:	00db      	lsls	r3, r3, #3
 801699c:	4013      	ands	r3, r2
 801699e:	d019      	beq.n	80169d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	3b01      	subs	r3, #1
 80169a4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80169a6:	697b      	ldr	r3, [r7, #20]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d10d      	bne.n	80169c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	22ff      	movs	r2, #255	@ 0xff
 80169b2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2221      	movs	r2, #33	@ 0x21
 80169b8:	2103      	movs	r1, #3
 80169ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2220      	movs	r2, #32
 80169c0:	2100      	movs	r1, #0
 80169c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80169c4:	2303      	movs	r3, #3
 80169c6:	e082      	b.n	8016ace <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	68db      	ldr	r3, [r3, #12]
 80169ce:	2204      	movs	r2, #4
 80169d0:	4013      	ands	r3, r2
 80169d2:	d1e5      	bne.n	80169a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	689a      	ldr	r2, [r3, #8]
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	493f      	ldr	r1, [pc, #252]	@ (8016adc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80169e0:	400a      	ands	r2, r1
 80169e2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	68db      	ldr	r3, [r3, #12]
 80169ea:	22ff      	movs	r2, #255	@ 0xff
 80169ec:	401a      	ands	r2, r3
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	493b      	ldr	r1, [pc, #236]	@ (8016ae0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80169f4:	430a      	orrs	r2, r1
 80169f6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80169f8:	4b37      	ldr	r3, [pc, #220]	@ (8016ad8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	22fa      	movs	r2, #250	@ 0xfa
 80169fe:	01d1      	lsls	r1, r2, #7
 8016a00:	0018      	movs	r0, r3
 8016a02:	f7e9 fbcf 	bl	80001a4 <__udivsi3>
 8016a06:	0003      	movs	r3, r0
 8016a08:	001a      	movs	r2, r3
 8016a0a:	0013      	movs	r3, r2
 8016a0c:	015b      	lsls	r3, r3, #5
 8016a0e:	1a9b      	subs	r3, r3, r2
 8016a10:	009b      	lsls	r3, r3, #2
 8016a12:	189b      	adds	r3, r3, r2
 8016a14:	00db      	lsls	r3, r3, #3
 8016a16:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016a18:	697b      	ldr	r3, [r7, #20]
 8016a1a:	3b01      	subs	r3, #1
 8016a1c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8016a1e:	697b      	ldr	r3, [r7, #20]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d10d      	bne.n	8016a40 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	22ff      	movs	r2, #255	@ 0xff
 8016a2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	2221      	movs	r2, #33	@ 0x21
 8016a30:	2103      	movs	r1, #3
 8016a32:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	2220      	movs	r2, #32
 8016a38:	2100      	movs	r1, #0
 8016a3a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016a3c:	2303      	movs	r3, #3
 8016a3e:	e046      	b.n	8016ace <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	68db      	ldr	r3, [r3, #12]
 8016a46:	2204      	movs	r2, #4
 8016a48:	4013      	ands	r3, r2
 8016a4a:	d0e5      	beq.n	8016a18 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	689a      	ldr	r2, [r3, #8]
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	2107      	movs	r1, #7
 8016a58:	438a      	bics	r2, r1
 8016a5a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	6899      	ldr	r1, [r3, #8]
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	687a      	ldr	r2, [r7, #4]
 8016a68:	430a      	orrs	r2, r1
 8016a6a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	68ba      	ldr	r2, [r7, #8]
 8016a72:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8016a74:	4b1b      	ldr	r3, [pc, #108]	@ (8016ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016a76:	681a      	ldr	r2, [r3, #0]
 8016a78:	4b1a      	ldr	r3, [pc, #104]	@ (8016ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016a7a:	2180      	movs	r1, #128	@ 0x80
 8016a7c:	0349      	lsls	r1, r1, #13
 8016a7e:	430a      	orrs	r2, r1
 8016a80:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8016a82:	4b18      	ldr	r3, [pc, #96]	@ (8016ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016a84:	689a      	ldr	r2, [r3, #8]
 8016a86:	4b17      	ldr	r3, [pc, #92]	@ (8016ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016a88:	2180      	movs	r1, #128	@ 0x80
 8016a8a:	0349      	lsls	r1, r1, #13
 8016a8c:	430a      	orrs	r2, r1
 8016a8e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	689a      	ldr	r2, [r3, #8]
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2180      	movs	r1, #128	@ 0x80
 8016a9c:	01c9      	lsls	r1, r1, #7
 8016a9e:	430a      	orrs	r2, r1
 8016aa0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	689a      	ldr	r2, [r3, #8]
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	2180      	movs	r1, #128	@ 0x80
 8016aae:	00c9      	lsls	r1, r1, #3
 8016ab0:	430a      	orrs	r2, r1
 8016ab2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	22ff      	movs	r2, #255	@ 0xff
 8016aba:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	2221      	movs	r2, #33	@ 0x21
 8016ac0:	2101      	movs	r1, #1
 8016ac2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	2220      	movs	r2, #32
 8016ac8:	2100      	movs	r1, #0
 8016aca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016acc:	2300      	movs	r3, #0
}
 8016ace:	0018      	movs	r0, r3
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	b006      	add	sp, #24
 8016ad4:	bd80      	pop	{r7, pc}
 8016ad6:	46c0      	nop			@ (mov r8, r8)
 8016ad8:	200000d0 	.word	0x200000d0
 8016adc:	fffffbff 	.word	0xfffffbff
 8016ae0:	fffffb7f 	.word	0xfffffb7f
 8016ae4:	40010400 	.word	0x40010400

08016ae8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b084      	sub	sp, #16
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016af0:	2300      	movs	r3, #0
 8016af2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	2220      	movs	r2, #32
 8016af8:	5c9b      	ldrb	r3, [r3, r2]
 8016afa:	2b01      	cmp	r3, #1
 8016afc:	d101      	bne.n	8016b02 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8016afe:	2302      	movs	r3, #2
 8016b00:	e04e      	b.n	8016ba0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	2220      	movs	r2, #32
 8016b06:	2101      	movs	r1, #1
 8016b08:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2221      	movs	r2, #33	@ 0x21
 8016b0e:	2102      	movs	r1, #2
 8016b10:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	22ca      	movs	r2, #202	@ 0xca
 8016b18:	625a      	str	r2, [r3, #36]	@ 0x24
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	2253      	movs	r2, #83	@ 0x53
 8016b20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	689a      	ldr	r2, [r3, #8]
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	491e      	ldr	r1, [pc, #120]	@ (8016ba8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8016b2e:	400a      	ands	r2, r1
 8016b30:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	689a      	ldr	r2, [r3, #8]
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	491b      	ldr	r1, [pc, #108]	@ (8016bac <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8016b3e:	400a      	ands	r2, r1
 8016b40:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016b42:	f7f8 fb17 	bl	800f174 <HAL_GetTick>
 8016b46:	0003      	movs	r3, r0
 8016b48:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016b4a:	e016      	b.n	8016b7a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016b4c:	f7f8 fb12 	bl	800f174 <HAL_GetTick>
 8016b50:	0002      	movs	r2, r0
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	1ad2      	subs	r2, r2, r3
 8016b56:	23fa      	movs	r3, #250	@ 0xfa
 8016b58:	009b      	lsls	r3, r3, #2
 8016b5a:	429a      	cmp	r2, r3
 8016b5c:	d90d      	bls.n	8016b7a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	22ff      	movs	r2, #255	@ 0xff
 8016b64:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	2221      	movs	r2, #33	@ 0x21
 8016b6a:	2103      	movs	r1, #3
 8016b6c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2220      	movs	r2, #32
 8016b72:	2100      	movs	r1, #0
 8016b74:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016b76:	2303      	movs	r3, #3
 8016b78:	e012      	b.n	8016ba0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	2204      	movs	r2, #4
 8016b82:	4013      	ands	r3, r2
 8016b84:	d0e2      	beq.n	8016b4c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	22ff      	movs	r2, #255	@ 0xff
 8016b8c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	2221      	movs	r2, #33	@ 0x21
 8016b92:	2101      	movs	r1, #1
 8016b94:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	2220      	movs	r2, #32
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016b9e:	2300      	movs	r3, #0
}
 8016ba0:	0018      	movs	r0, r3
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	b004      	add	sp, #16
 8016ba6:	bd80      	pop	{r7, pc}
 8016ba8:	fffffbff 	.word	0xfffffbff
 8016bac:	ffffbfff 	.word	0xffffbfff

08016bb0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b082      	sub	sp, #8
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8016bb8:	4b13      	ldr	r3, [pc, #76]	@ (8016c08 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8016bba:	2280      	movs	r2, #128	@ 0x80
 8016bbc:	0352      	lsls	r2, r2, #13
 8016bbe:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	689a      	ldr	r2, [r3, #8]
 8016bc6:	2380      	movs	r3, #128	@ 0x80
 8016bc8:	01db      	lsls	r3, r3, #7
 8016bca:	4013      	ands	r3, r2
 8016bcc:	d014      	beq.n	8016bf8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	68da      	ldr	r2, [r3, #12]
 8016bd4:	2380      	movs	r3, #128	@ 0x80
 8016bd6:	00db      	lsls	r3, r3, #3
 8016bd8:	4013      	ands	r3, r2
 8016bda:	d00d      	beq.n	8016bf8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	68db      	ldr	r3, [r3, #12]
 8016be2:	22ff      	movs	r2, #255	@ 0xff
 8016be4:	401a      	ands	r2, r3
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	4908      	ldr	r1, [pc, #32]	@ (8016c0c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8016bec:	430a      	orrs	r2, r1
 8016bee:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	0018      	movs	r0, r3
 8016bf4:	f000 f80c 	bl	8016c10 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2221      	movs	r2, #33	@ 0x21
 8016bfc:	2101      	movs	r1, #1
 8016bfe:	5499      	strb	r1, [r3, r2]
}
 8016c00:	46c0      	nop			@ (mov r8, r8)
 8016c02:	46bd      	mov	sp, r7
 8016c04:	b002      	add	sp, #8
 8016c06:	bd80      	pop	{r7, pc}
 8016c08:	40010400 	.word	0x40010400
 8016c0c:	fffffb7f 	.word	0xfffffb7f

08016c10 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b082      	sub	sp, #8
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016c18:	46c0      	nop			@ (mov r8, r8)
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	b002      	add	sp, #8
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b086      	sub	sp, #24
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	60f8      	str	r0, [r7, #12]
 8016c28:	60b9      	str	r1, [r7, #8]
 8016c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	3350      	adds	r3, #80	@ 0x50
 8016c36:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	009b      	lsls	r3, r3, #2
 8016c3c:	697a      	ldr	r2, [r7, #20]
 8016c3e:	18d3      	adds	r3, r2, r3
 8016c40:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8016c42:	697b      	ldr	r3, [r7, #20]
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	601a      	str	r2, [r3, #0]
}
 8016c48:	46c0      	nop			@ (mov r8, r8)
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	b006      	add	sp, #24
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b084      	sub	sp, #16
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
 8016c58:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	3350      	adds	r3, #80	@ 0x50
 8016c64:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	009b      	lsls	r3, r3, #2
 8016c6a:	68fa      	ldr	r2, [r7, #12]
 8016c6c:	18d3      	adds	r3, r2, r3
 8016c6e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	681b      	ldr	r3, [r3, #0]
}
 8016c74:	0018      	movs	r0, r3
 8016c76:	46bd      	mov	sp, r7
 8016c78:	b004      	add	sp, #16
 8016c7a:	bd80      	pop	{r7, pc}

08016c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b082      	sub	sp, #8
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d101      	bne.n	8016c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016c8a:	2301      	movs	r3, #1
 8016c8c:	e032      	b.n	8016cf4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	2239      	movs	r2, #57	@ 0x39
 8016c92:	5c9b      	ldrb	r3, [r3, r2]
 8016c94:	b2db      	uxtb	r3, r3
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d107      	bne.n	8016caa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2238      	movs	r2, #56	@ 0x38
 8016c9e:	2100      	movs	r1, #0
 8016ca0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	0018      	movs	r0, r3
 8016ca6:	f7f7 fb79 	bl	800e39c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	2239      	movs	r2, #57	@ 0x39
 8016cae:	2102      	movs	r1, #2
 8016cb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	681a      	ldr	r2, [r3, #0]
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	3304      	adds	r3, #4
 8016cba:	0019      	movs	r1, r3
 8016cbc:	0010      	movs	r0, r2
 8016cbe:	f000 fa1d 	bl	80170fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	223e      	movs	r2, #62	@ 0x3e
 8016cc6:	2101      	movs	r1, #1
 8016cc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	223a      	movs	r2, #58	@ 0x3a
 8016cce:	2101      	movs	r1, #1
 8016cd0:	5499      	strb	r1, [r3, r2]
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	223b      	movs	r2, #59	@ 0x3b
 8016cd6:	2101      	movs	r1, #1
 8016cd8:	5499      	strb	r1, [r3, r2]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	223c      	movs	r2, #60	@ 0x3c
 8016cde:	2101      	movs	r1, #1
 8016ce0:	5499      	strb	r1, [r3, r2]
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	223d      	movs	r2, #61	@ 0x3d
 8016ce6:	2101      	movs	r1, #1
 8016ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2239      	movs	r2, #57	@ 0x39
 8016cee:	2101      	movs	r1, #1
 8016cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016cf2:	2300      	movs	r3, #0
}
 8016cf4:	0018      	movs	r0, r3
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	b002      	add	sp, #8
 8016cfa:	bd80      	pop	{r7, pc}

08016cfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2239      	movs	r2, #57	@ 0x39
 8016d08:	5c9b      	ldrb	r3, [r3, r2]
 8016d0a:	b2db      	uxtb	r3, r3
 8016d0c:	2b01      	cmp	r3, #1
 8016d0e:	d001      	beq.n	8016d14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016d10:	2301      	movs	r3, #1
 8016d12:	e033      	b.n	8016d7c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2239      	movs	r2, #57	@ 0x39
 8016d18:	2102      	movs	r1, #2
 8016d1a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681a      	ldr	r2, [r3, #0]
 8016d20:	2380      	movs	r3, #128	@ 0x80
 8016d22:	05db      	lsls	r3, r3, #23
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d00e      	beq.n	8016d46 <HAL_TIM_Base_Start+0x4a>
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	4a15      	ldr	r2, [pc, #84]	@ (8016d84 <HAL_TIM_Base_Start+0x88>)
 8016d2e:	4293      	cmp	r3, r2
 8016d30:	d009      	beq.n	8016d46 <HAL_TIM_Base_Start+0x4a>
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	4a14      	ldr	r2, [pc, #80]	@ (8016d88 <HAL_TIM_Base_Start+0x8c>)
 8016d38:	4293      	cmp	r3, r2
 8016d3a:	d004      	beq.n	8016d46 <HAL_TIM_Base_Start+0x4a>
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	4a12      	ldr	r2, [pc, #72]	@ (8016d8c <HAL_TIM_Base_Start+0x90>)
 8016d42:	4293      	cmp	r3, r2
 8016d44:	d111      	bne.n	8016d6a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	689b      	ldr	r3, [r3, #8]
 8016d4c:	2207      	movs	r2, #7
 8016d4e:	4013      	ands	r3, r2
 8016d50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	2b06      	cmp	r3, #6
 8016d56:	d010      	beq.n	8016d7a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	681a      	ldr	r2, [r3, #0]
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	2101      	movs	r1, #1
 8016d64:	430a      	orrs	r2, r1
 8016d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016d68:	e007      	b.n	8016d7a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	681a      	ldr	r2, [r3, #0]
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	2101      	movs	r1, #1
 8016d76:	430a      	orrs	r2, r1
 8016d78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016d7a:	2300      	movs	r3, #0
}
 8016d7c:	0018      	movs	r0, r3
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	b004      	add	sp, #16
 8016d82:	bd80      	pop	{r7, pc}
 8016d84:	40000400 	.word	0x40000400
 8016d88:	40010800 	.word	0x40010800
 8016d8c:	40011400 	.word	0x40011400

08016d90 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b082      	sub	sp, #8
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	6a1b      	ldr	r3, [r3, #32]
 8016d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8016dc8 <HAL_TIM_Base_Stop+0x38>)
 8016da0:	4013      	ands	r3, r2
 8016da2:	d107      	bne.n	8016db4 <HAL_TIM_Base_Stop+0x24>
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	681a      	ldr	r2, [r3, #0]
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	2101      	movs	r1, #1
 8016db0:	438a      	bics	r2, r1
 8016db2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	2239      	movs	r2, #57	@ 0x39
 8016db8:	2101      	movs	r1, #1
 8016dba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8016dbc:	2300      	movs	r3, #0
}
 8016dbe:	0018      	movs	r0, r3
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	b002      	add	sp, #8
 8016dc4:	bd80      	pop	{r7, pc}
 8016dc6:	46c0      	nop			@ (mov r8, r8)
 8016dc8:	00001111 	.word	0x00001111

08016dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b082      	sub	sp, #8
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d101      	bne.n	8016dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016dda:	2301      	movs	r3, #1
 8016ddc:	e032      	b.n	8016e44 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2239      	movs	r2, #57	@ 0x39
 8016de2:	5c9b      	ldrb	r3, [r3, r2]
 8016de4:	b2db      	uxtb	r3, r3
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d107      	bne.n	8016dfa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2238      	movs	r2, #56	@ 0x38
 8016dee:	2100      	movs	r1, #0
 8016df0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	0018      	movs	r0, r3
 8016df6:	f7f7 faad 	bl	800e354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	2239      	movs	r2, #57	@ 0x39
 8016dfe:	2102      	movs	r1, #2
 8016e00:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681a      	ldr	r2, [r3, #0]
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	3304      	adds	r3, #4
 8016e0a:	0019      	movs	r1, r3
 8016e0c:	0010      	movs	r0, r2
 8016e0e:	f000 f975 	bl	80170fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	223e      	movs	r2, #62	@ 0x3e
 8016e16:	2101      	movs	r1, #1
 8016e18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	223a      	movs	r2, #58	@ 0x3a
 8016e1e:	2101      	movs	r1, #1
 8016e20:	5499      	strb	r1, [r3, r2]
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	223b      	movs	r2, #59	@ 0x3b
 8016e26:	2101      	movs	r1, #1
 8016e28:	5499      	strb	r1, [r3, r2]
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	223c      	movs	r2, #60	@ 0x3c
 8016e2e:	2101      	movs	r1, #1
 8016e30:	5499      	strb	r1, [r3, r2]
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	223d      	movs	r2, #61	@ 0x3d
 8016e36:	2101      	movs	r1, #1
 8016e38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	2239      	movs	r2, #57	@ 0x39
 8016e3e:	2101      	movs	r1, #1
 8016e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016e42:	2300      	movs	r3, #0
}
 8016e44:	0018      	movs	r0, r3
 8016e46:	46bd      	mov	sp, r7
 8016e48:	b002      	add	sp, #8
 8016e4a:	bd80      	pop	{r7, pc}

08016e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b084      	sub	sp, #16
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
 8016e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016e56:	683b      	ldr	r3, [r7, #0]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d108      	bne.n	8016e6e <HAL_TIM_PWM_Start+0x22>
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	223a      	movs	r2, #58	@ 0x3a
 8016e60:	5c9b      	ldrb	r3, [r3, r2]
 8016e62:	b2db      	uxtb	r3, r3
 8016e64:	3b01      	subs	r3, #1
 8016e66:	1e5a      	subs	r2, r3, #1
 8016e68:	4193      	sbcs	r3, r2
 8016e6a:	b2db      	uxtb	r3, r3
 8016e6c:	e01f      	b.n	8016eae <HAL_TIM_PWM_Start+0x62>
 8016e6e:	683b      	ldr	r3, [r7, #0]
 8016e70:	2b04      	cmp	r3, #4
 8016e72:	d108      	bne.n	8016e86 <HAL_TIM_PWM_Start+0x3a>
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	223b      	movs	r2, #59	@ 0x3b
 8016e78:	5c9b      	ldrb	r3, [r3, r2]
 8016e7a:	b2db      	uxtb	r3, r3
 8016e7c:	3b01      	subs	r3, #1
 8016e7e:	1e5a      	subs	r2, r3, #1
 8016e80:	4193      	sbcs	r3, r2
 8016e82:	b2db      	uxtb	r3, r3
 8016e84:	e013      	b.n	8016eae <HAL_TIM_PWM_Start+0x62>
 8016e86:	683b      	ldr	r3, [r7, #0]
 8016e88:	2b08      	cmp	r3, #8
 8016e8a:	d108      	bne.n	8016e9e <HAL_TIM_PWM_Start+0x52>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	223c      	movs	r2, #60	@ 0x3c
 8016e90:	5c9b      	ldrb	r3, [r3, r2]
 8016e92:	b2db      	uxtb	r3, r3
 8016e94:	3b01      	subs	r3, #1
 8016e96:	1e5a      	subs	r2, r3, #1
 8016e98:	4193      	sbcs	r3, r2
 8016e9a:	b2db      	uxtb	r3, r3
 8016e9c:	e007      	b.n	8016eae <HAL_TIM_PWM_Start+0x62>
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	223d      	movs	r2, #61	@ 0x3d
 8016ea2:	5c9b      	ldrb	r3, [r3, r2]
 8016ea4:	b2db      	uxtb	r3, r3
 8016ea6:	3b01      	subs	r3, #1
 8016ea8:	1e5a      	subs	r2, r3, #1
 8016eaa:	4193      	sbcs	r3, r2
 8016eac:	b2db      	uxtb	r3, r3
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d001      	beq.n	8016eb6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8016eb2:	2301      	movs	r3, #1
 8016eb4:	e052      	b.n	8016f5c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d104      	bne.n	8016ec6 <HAL_TIM_PWM_Start+0x7a>
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	223a      	movs	r2, #58	@ 0x3a
 8016ec0:	2102      	movs	r1, #2
 8016ec2:	5499      	strb	r1, [r3, r2]
 8016ec4:	e013      	b.n	8016eee <HAL_TIM_PWM_Start+0xa2>
 8016ec6:	683b      	ldr	r3, [r7, #0]
 8016ec8:	2b04      	cmp	r3, #4
 8016eca:	d104      	bne.n	8016ed6 <HAL_TIM_PWM_Start+0x8a>
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	223b      	movs	r2, #59	@ 0x3b
 8016ed0:	2102      	movs	r1, #2
 8016ed2:	5499      	strb	r1, [r3, r2]
 8016ed4:	e00b      	b.n	8016eee <HAL_TIM_PWM_Start+0xa2>
 8016ed6:	683b      	ldr	r3, [r7, #0]
 8016ed8:	2b08      	cmp	r3, #8
 8016eda:	d104      	bne.n	8016ee6 <HAL_TIM_PWM_Start+0x9a>
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	223c      	movs	r2, #60	@ 0x3c
 8016ee0:	2102      	movs	r1, #2
 8016ee2:	5499      	strb	r1, [r3, r2]
 8016ee4:	e003      	b.n	8016eee <HAL_TIM_PWM_Start+0xa2>
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	223d      	movs	r2, #61	@ 0x3d
 8016eea:	2102      	movs	r1, #2
 8016eec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	6839      	ldr	r1, [r7, #0]
 8016ef4:	2201      	movs	r2, #1
 8016ef6:	0018      	movs	r0, r3
 8016ef8:	f000 fa62 	bl	80173c0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	681a      	ldr	r2, [r3, #0]
 8016f00:	2380      	movs	r3, #128	@ 0x80
 8016f02:	05db      	lsls	r3, r3, #23
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d00e      	beq.n	8016f26 <HAL_TIM_PWM_Start+0xda>
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	4a15      	ldr	r2, [pc, #84]	@ (8016f64 <HAL_TIM_PWM_Start+0x118>)
 8016f0e:	4293      	cmp	r3, r2
 8016f10:	d009      	beq.n	8016f26 <HAL_TIM_PWM_Start+0xda>
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	4a14      	ldr	r2, [pc, #80]	@ (8016f68 <HAL_TIM_PWM_Start+0x11c>)
 8016f18:	4293      	cmp	r3, r2
 8016f1a:	d004      	beq.n	8016f26 <HAL_TIM_PWM_Start+0xda>
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	4a12      	ldr	r2, [pc, #72]	@ (8016f6c <HAL_TIM_PWM_Start+0x120>)
 8016f22:	4293      	cmp	r3, r2
 8016f24:	d111      	bne.n	8016f4a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	689b      	ldr	r3, [r3, #8]
 8016f2c:	2207      	movs	r2, #7
 8016f2e:	4013      	ands	r3, r2
 8016f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	2b06      	cmp	r3, #6
 8016f36:	d010      	beq.n	8016f5a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	681a      	ldr	r2, [r3, #0]
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	2101      	movs	r1, #1
 8016f44:	430a      	orrs	r2, r1
 8016f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016f48:	e007      	b.n	8016f5a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	681a      	ldr	r2, [r3, #0]
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	2101      	movs	r1, #1
 8016f56:	430a      	orrs	r2, r1
 8016f58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016f5a:	2300      	movs	r3, #0
}
 8016f5c:	0018      	movs	r0, r3
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	b004      	add	sp, #16
 8016f62:	bd80      	pop	{r7, pc}
 8016f64:	40000400 	.word	0x40000400
 8016f68:	40010800 	.word	0x40010800
 8016f6c:	40011400 	.word	0x40011400

08016f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b086      	sub	sp, #24
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	60f8      	str	r0, [r7, #12]
 8016f78:	60b9      	str	r1, [r7, #8]
 8016f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016f7c:	2317      	movs	r3, #23
 8016f7e:	18fb      	adds	r3, r7, r3
 8016f80:	2200      	movs	r2, #0
 8016f82:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	2238      	movs	r2, #56	@ 0x38
 8016f88:	5c9b      	ldrb	r3, [r3, r2]
 8016f8a:	2b01      	cmp	r3, #1
 8016f8c:	d101      	bne.n	8016f92 <HAL_TIM_PWM_ConfigChannel+0x22>
 8016f8e:	2302      	movs	r3, #2
 8016f90:	e0ad      	b.n	80170ee <HAL_TIM_PWM_ConfigChannel+0x17e>
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	2238      	movs	r2, #56	@ 0x38
 8016f96:	2101      	movs	r1, #1
 8016f98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2b0c      	cmp	r3, #12
 8016f9e:	d100      	bne.n	8016fa2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8016fa0:	e076      	b.n	8017090 <HAL_TIM_PWM_ConfigChannel+0x120>
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	2b0c      	cmp	r3, #12
 8016fa6:	d900      	bls.n	8016faa <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016fa8:	e095      	b.n	80170d6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2b08      	cmp	r3, #8
 8016fae:	d04e      	beq.n	801704e <HAL_TIM_PWM_ConfigChannel+0xde>
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	2b08      	cmp	r3, #8
 8016fb4:	d900      	bls.n	8016fb8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016fb6:	e08e      	b.n	80170d6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d003      	beq.n	8016fc6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2b04      	cmp	r3, #4
 8016fc2:	d021      	beq.n	8017008 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016fc4:	e087      	b.n	80170d6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	68ba      	ldr	r2, [r7, #8]
 8016fcc:	0011      	movs	r1, r2
 8016fce:	0018      	movs	r0, r3
 8016fd0:	f000 f8f2 	bl	80171b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	699a      	ldr	r2, [r3, #24]
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	2108      	movs	r1, #8
 8016fe0:	430a      	orrs	r2, r1
 8016fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	699a      	ldr	r2, [r3, #24]
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	2104      	movs	r1, #4
 8016ff0:	438a      	bics	r2, r1
 8016ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	6999      	ldr	r1, [r3, #24]
 8016ffa:	68bb      	ldr	r3, [r7, #8]
 8016ffc:	68da      	ldr	r2, [r3, #12]
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	430a      	orrs	r2, r1
 8017004:	619a      	str	r2, [r3, #24]
      break;
 8017006:	e06b      	b.n	80170e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	68ba      	ldr	r2, [r7, #8]
 801700e:	0011      	movs	r1, r2
 8017010:	0018      	movs	r0, r3
 8017012:	f000 f90d 	bl	8017230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	699a      	ldr	r2, [r3, #24]
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	2180      	movs	r1, #128	@ 0x80
 8017022:	0109      	lsls	r1, r1, #4
 8017024:	430a      	orrs	r2, r1
 8017026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	699a      	ldr	r2, [r3, #24]
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	4931      	ldr	r1, [pc, #196]	@ (80170f8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8017034:	400a      	ands	r2, r1
 8017036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	6999      	ldr	r1, [r3, #24]
 801703e:	68bb      	ldr	r3, [r7, #8]
 8017040:	68db      	ldr	r3, [r3, #12]
 8017042:	021a      	lsls	r2, r3, #8
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	430a      	orrs	r2, r1
 801704a:	619a      	str	r2, [r3, #24]
      break;
 801704c:	e048      	b.n	80170e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	68ba      	ldr	r2, [r7, #8]
 8017054:	0011      	movs	r1, r2
 8017056:	0018      	movs	r0, r3
 8017058:	f000 f92c 	bl	80172b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	69da      	ldr	r2, [r3, #28]
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	2108      	movs	r1, #8
 8017068:	430a      	orrs	r2, r1
 801706a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	69da      	ldr	r2, [r3, #28]
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	2104      	movs	r1, #4
 8017078:	438a      	bics	r2, r1
 801707a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	69d9      	ldr	r1, [r3, #28]
 8017082:	68bb      	ldr	r3, [r7, #8]
 8017084:	68da      	ldr	r2, [r3, #12]
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	430a      	orrs	r2, r1
 801708c:	61da      	str	r2, [r3, #28]
      break;
 801708e:	e027      	b.n	80170e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	68ba      	ldr	r2, [r7, #8]
 8017096:	0011      	movs	r1, r2
 8017098:	0018      	movs	r0, r3
 801709a:	f000 f94b 	bl	8017334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	69da      	ldr	r2, [r3, #28]
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	2180      	movs	r1, #128	@ 0x80
 80170aa:	0109      	lsls	r1, r1, #4
 80170ac:	430a      	orrs	r2, r1
 80170ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	69da      	ldr	r2, [r3, #28]
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	490f      	ldr	r1, [pc, #60]	@ (80170f8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80170bc:	400a      	ands	r2, r1
 80170be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	69d9      	ldr	r1, [r3, #28]
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	68db      	ldr	r3, [r3, #12]
 80170ca:	021a      	lsls	r2, r3, #8
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	430a      	orrs	r2, r1
 80170d2:	61da      	str	r2, [r3, #28]
      break;
 80170d4:	e004      	b.n	80170e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80170d6:	2317      	movs	r3, #23
 80170d8:	18fb      	adds	r3, r7, r3
 80170da:	2201      	movs	r2, #1
 80170dc:	701a      	strb	r2, [r3, #0]
      break;
 80170de:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	2238      	movs	r2, #56	@ 0x38
 80170e4:	2100      	movs	r1, #0
 80170e6:	5499      	strb	r1, [r3, r2]

  return status;
 80170e8:	2317      	movs	r3, #23
 80170ea:	18fb      	adds	r3, r7, r3
 80170ec:	781b      	ldrb	r3, [r3, #0]
}
 80170ee:	0018      	movs	r0, r3
 80170f0:	46bd      	mov	sp, r7
 80170f2:	b006      	add	sp, #24
 80170f4:	bd80      	pop	{r7, pc}
 80170f6:	46c0      	nop			@ (mov r8, r8)
 80170f8:	fffffbff 	.word	0xfffffbff

080170fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b084      	sub	sp, #16
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
 8017104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801710c:	687a      	ldr	r2, [r7, #4]
 801710e:	2380      	movs	r3, #128	@ 0x80
 8017110:	05db      	lsls	r3, r3, #23
 8017112:	429a      	cmp	r2, r3
 8017114:	d00b      	beq.n	801712e <TIM_Base_SetConfig+0x32>
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	4a23      	ldr	r2, [pc, #140]	@ (80171a8 <TIM_Base_SetConfig+0xac>)
 801711a:	4293      	cmp	r3, r2
 801711c:	d007      	beq.n	801712e <TIM_Base_SetConfig+0x32>
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	4a22      	ldr	r2, [pc, #136]	@ (80171ac <TIM_Base_SetConfig+0xb0>)
 8017122:	4293      	cmp	r3, r2
 8017124:	d003      	beq.n	801712e <TIM_Base_SetConfig+0x32>
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	4a21      	ldr	r2, [pc, #132]	@ (80171b0 <TIM_Base_SetConfig+0xb4>)
 801712a:	4293      	cmp	r3, r2
 801712c:	d108      	bne.n	8017140 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	2270      	movs	r2, #112	@ 0x70
 8017132:	4393      	bics	r3, r2
 8017134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	685b      	ldr	r3, [r3, #4]
 801713a:	68fa      	ldr	r2, [r7, #12]
 801713c:	4313      	orrs	r3, r2
 801713e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	2380      	movs	r3, #128	@ 0x80
 8017144:	05db      	lsls	r3, r3, #23
 8017146:	429a      	cmp	r2, r3
 8017148:	d00b      	beq.n	8017162 <TIM_Base_SetConfig+0x66>
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	4a16      	ldr	r2, [pc, #88]	@ (80171a8 <TIM_Base_SetConfig+0xac>)
 801714e:	4293      	cmp	r3, r2
 8017150:	d007      	beq.n	8017162 <TIM_Base_SetConfig+0x66>
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	4a15      	ldr	r2, [pc, #84]	@ (80171ac <TIM_Base_SetConfig+0xb0>)
 8017156:	4293      	cmp	r3, r2
 8017158:	d003      	beq.n	8017162 <TIM_Base_SetConfig+0x66>
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	4a14      	ldr	r2, [pc, #80]	@ (80171b0 <TIM_Base_SetConfig+0xb4>)
 801715e:	4293      	cmp	r3, r2
 8017160:	d108      	bne.n	8017174 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	4a13      	ldr	r2, [pc, #76]	@ (80171b4 <TIM_Base_SetConfig+0xb8>)
 8017166:	4013      	ands	r3, r2
 8017168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	68db      	ldr	r3, [r3, #12]
 801716e:	68fa      	ldr	r2, [r7, #12]
 8017170:	4313      	orrs	r3, r2
 8017172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	2280      	movs	r2, #128	@ 0x80
 8017178:	4393      	bics	r3, r2
 801717a:	001a      	movs	r2, r3
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	691b      	ldr	r3, [r3, #16]
 8017180:	4313      	orrs	r3, r2
 8017182:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	68fa      	ldr	r2, [r7, #12]
 8017188:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	689a      	ldr	r2, [r3, #8]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	681a      	ldr	r2, [r3, #0]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	2201      	movs	r2, #1
 801719e:	615a      	str	r2, [r3, #20]
}
 80171a0:	46c0      	nop			@ (mov r8, r8)
 80171a2:	46bd      	mov	sp, r7
 80171a4:	b004      	add	sp, #16
 80171a6:	bd80      	pop	{r7, pc}
 80171a8:	40000400 	.word	0x40000400
 80171ac:	40010800 	.word	0x40010800
 80171b0:	40011400 	.word	0x40011400
 80171b4:	fffffcff 	.word	0xfffffcff

080171b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b086      	sub	sp, #24
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
 80171c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	6a1b      	ldr	r3, [r3, #32]
 80171c6:	2201      	movs	r2, #1
 80171c8:	4393      	bics	r3, r2
 80171ca:	001a      	movs	r2, r3
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	6a1b      	ldr	r3, [r3, #32]
 80171d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	685b      	ldr	r3, [r3, #4]
 80171da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	699b      	ldr	r3, [r3, #24]
 80171e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	2270      	movs	r2, #112	@ 0x70
 80171e6:	4393      	bics	r3, r2
 80171e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	2203      	movs	r2, #3
 80171ee:	4393      	bics	r3, r2
 80171f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	68fa      	ldr	r2, [r7, #12]
 80171f8:	4313      	orrs	r3, r2
 80171fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80171fc:	697b      	ldr	r3, [r7, #20]
 80171fe:	2202      	movs	r2, #2
 8017200:	4393      	bics	r3, r2
 8017202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8017204:	683b      	ldr	r3, [r7, #0]
 8017206:	689b      	ldr	r3, [r3, #8]
 8017208:	697a      	ldr	r2, [r7, #20]
 801720a:	4313      	orrs	r3, r2
 801720c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	693a      	ldr	r2, [r7, #16]
 8017212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	68fa      	ldr	r2, [r7, #12]
 8017218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801721a:	683b      	ldr	r3, [r7, #0]
 801721c:	685a      	ldr	r2, [r3, #4]
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	697a      	ldr	r2, [r7, #20]
 8017226:	621a      	str	r2, [r3, #32]
}
 8017228:	46c0      	nop			@ (mov r8, r8)
 801722a:	46bd      	mov	sp, r7
 801722c:	b006      	add	sp, #24
 801722e:	bd80      	pop	{r7, pc}

08017230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b086      	sub	sp, #24
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
 8017238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	6a1b      	ldr	r3, [r3, #32]
 801723e:	2210      	movs	r2, #16
 8017240:	4393      	bics	r3, r2
 8017242:	001a      	movs	r2, r3
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6a1b      	ldr	r3, [r3, #32]
 801724c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	685b      	ldr	r3, [r3, #4]
 8017252:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	699b      	ldr	r3, [r3, #24]
 8017258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	4a13      	ldr	r2, [pc, #76]	@ (80172ac <TIM_OC2_SetConfig+0x7c>)
 801725e:	4013      	ands	r3, r2
 8017260:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	4a12      	ldr	r2, [pc, #72]	@ (80172b0 <TIM_OC2_SetConfig+0x80>)
 8017266:	4013      	ands	r3, r2
 8017268:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	021b      	lsls	r3, r3, #8
 8017270:	68fa      	ldr	r2, [r7, #12]
 8017272:	4313      	orrs	r3, r2
 8017274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	2220      	movs	r2, #32
 801727a:	4393      	bics	r3, r2
 801727c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801727e:	683b      	ldr	r3, [r7, #0]
 8017280:	689b      	ldr	r3, [r3, #8]
 8017282:	011b      	lsls	r3, r3, #4
 8017284:	697a      	ldr	r2, [r7, #20]
 8017286:	4313      	orrs	r3, r2
 8017288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	693a      	ldr	r2, [r7, #16]
 801728e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	68fa      	ldr	r2, [r7, #12]
 8017294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017296:	683b      	ldr	r3, [r7, #0]
 8017298:	685a      	ldr	r2, [r3, #4]
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	697a      	ldr	r2, [r7, #20]
 80172a2:	621a      	str	r2, [r3, #32]
}
 80172a4:	46c0      	nop			@ (mov r8, r8)
 80172a6:	46bd      	mov	sp, r7
 80172a8:	b006      	add	sp, #24
 80172aa:	bd80      	pop	{r7, pc}
 80172ac:	ffff8fff 	.word	0xffff8fff
 80172b0:	fffffcff 	.word	0xfffffcff

080172b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b086      	sub	sp, #24
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
 80172bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	6a1b      	ldr	r3, [r3, #32]
 80172c2:	4a1a      	ldr	r2, [pc, #104]	@ (801732c <TIM_OC3_SetConfig+0x78>)
 80172c4:	401a      	ands	r2, r3
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	6a1b      	ldr	r3, [r3, #32]
 80172ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	685b      	ldr	r3, [r3, #4]
 80172d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	69db      	ldr	r3, [r3, #28]
 80172da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	2270      	movs	r2, #112	@ 0x70
 80172e0:	4393      	bics	r3, r2
 80172e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	2203      	movs	r2, #3
 80172e8:	4393      	bics	r3, r2
 80172ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80172ec:	683b      	ldr	r3, [r7, #0]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	68fa      	ldr	r2, [r7, #12]
 80172f2:	4313      	orrs	r3, r2
 80172f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80172f6:	697b      	ldr	r3, [r7, #20]
 80172f8:	4a0d      	ldr	r2, [pc, #52]	@ (8017330 <TIM_OC3_SetConfig+0x7c>)
 80172fa:	4013      	ands	r3, r2
 80172fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80172fe:	683b      	ldr	r3, [r7, #0]
 8017300:	689b      	ldr	r3, [r3, #8]
 8017302:	021b      	lsls	r3, r3, #8
 8017304:	697a      	ldr	r2, [r7, #20]
 8017306:	4313      	orrs	r3, r2
 8017308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	693a      	ldr	r2, [r7, #16]
 801730e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	68fa      	ldr	r2, [r7, #12]
 8017314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017316:	683b      	ldr	r3, [r7, #0]
 8017318:	685a      	ldr	r2, [r3, #4]
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	697a      	ldr	r2, [r7, #20]
 8017322:	621a      	str	r2, [r3, #32]
}
 8017324:	46c0      	nop			@ (mov r8, r8)
 8017326:	46bd      	mov	sp, r7
 8017328:	b006      	add	sp, #24
 801732a:	bd80      	pop	{r7, pc}
 801732c:	fffffeff 	.word	0xfffffeff
 8017330:	fffffdff 	.word	0xfffffdff

08017334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b086      	sub	sp, #24
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	6a1b      	ldr	r3, [r3, #32]
 8017342:	4a1b      	ldr	r2, [pc, #108]	@ (80173b0 <TIM_OC4_SetConfig+0x7c>)
 8017344:	401a      	ands	r2, r3
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	6a1b      	ldr	r3, [r3, #32]
 801734e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	685b      	ldr	r3, [r3, #4]
 8017354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	69db      	ldr	r3, [r3, #28]
 801735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	4a15      	ldr	r2, [pc, #84]	@ (80173b4 <TIM_OC4_SetConfig+0x80>)
 8017360:	4013      	ands	r3, r2
 8017362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	4a14      	ldr	r2, [pc, #80]	@ (80173b8 <TIM_OC4_SetConfig+0x84>)
 8017368:	4013      	ands	r3, r2
 801736a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	021b      	lsls	r3, r3, #8
 8017372:	68fa      	ldr	r2, [r7, #12]
 8017374:	4313      	orrs	r3, r2
 8017376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017378:	697b      	ldr	r3, [r7, #20]
 801737a:	4a10      	ldr	r2, [pc, #64]	@ (80173bc <TIM_OC4_SetConfig+0x88>)
 801737c:	4013      	ands	r3, r2
 801737e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	689b      	ldr	r3, [r3, #8]
 8017384:	031b      	lsls	r3, r3, #12
 8017386:	697a      	ldr	r2, [r7, #20]
 8017388:	4313      	orrs	r3, r2
 801738a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	693a      	ldr	r2, [r7, #16]
 8017390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	68fa      	ldr	r2, [r7, #12]
 8017396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017398:	683b      	ldr	r3, [r7, #0]
 801739a:	685a      	ldr	r2, [r3, #4]
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	697a      	ldr	r2, [r7, #20]
 80173a4:	621a      	str	r2, [r3, #32]
}
 80173a6:	46c0      	nop			@ (mov r8, r8)
 80173a8:	46bd      	mov	sp, r7
 80173aa:	b006      	add	sp, #24
 80173ac:	bd80      	pop	{r7, pc}
 80173ae:	46c0      	nop			@ (mov r8, r8)
 80173b0:	ffffefff 	.word	0xffffefff
 80173b4:	ffff8fff 	.word	0xffff8fff
 80173b8:	fffffcff 	.word	0xfffffcff
 80173bc:	ffffdfff 	.word	0xffffdfff

080173c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b086      	sub	sp, #24
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	60f8      	str	r0, [r7, #12]
 80173c8:	60b9      	str	r1, [r7, #8]
 80173ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	221f      	movs	r2, #31
 80173d0:	4013      	ands	r3, r2
 80173d2:	2201      	movs	r2, #1
 80173d4:	409a      	lsls	r2, r3
 80173d6:	0013      	movs	r3, r2
 80173d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	6a1b      	ldr	r3, [r3, #32]
 80173de:	697a      	ldr	r2, [r7, #20]
 80173e0:	43d2      	mvns	r2, r2
 80173e2:	401a      	ands	r2, r3
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	6a1a      	ldr	r2, [r3, #32]
 80173ec:	68bb      	ldr	r3, [r7, #8]
 80173ee:	211f      	movs	r1, #31
 80173f0:	400b      	ands	r3, r1
 80173f2:	6879      	ldr	r1, [r7, #4]
 80173f4:	4099      	lsls	r1, r3
 80173f6:	000b      	movs	r3, r1
 80173f8:	431a      	orrs	r2, r3
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	621a      	str	r2, [r3, #32]
}
 80173fe:	46c0      	nop			@ (mov r8, r8)
 8017400:	46bd      	mov	sp, r7
 8017402:	b006      	add	sp, #24
 8017404:	bd80      	pop	{r7, pc}
	...

08017408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b084      	sub	sp, #16
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
 8017410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	2238      	movs	r2, #56	@ 0x38
 8017416:	5c9b      	ldrb	r3, [r3, r2]
 8017418:	2b01      	cmp	r3, #1
 801741a:	d101      	bne.n	8017420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801741c:	2302      	movs	r3, #2
 801741e:	e047      	b.n	80174b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2238      	movs	r2, #56	@ 0x38
 8017424:	2101      	movs	r1, #1
 8017426:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2239      	movs	r2, #57	@ 0x39
 801742c:	2102      	movs	r1, #2
 801742e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	689b      	ldr	r3, [r3, #8]
 801743e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	2270      	movs	r2, #112	@ 0x70
 8017444:	4393      	bics	r3, r2
 8017446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017448:	683b      	ldr	r3, [r7, #0]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	68fa      	ldr	r2, [r7, #12]
 801744e:	4313      	orrs	r3, r2
 8017450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	68fa      	ldr	r2, [r7, #12]
 8017458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	681a      	ldr	r2, [r3, #0]
 801745e:	2380      	movs	r3, #128	@ 0x80
 8017460:	05db      	lsls	r3, r3, #23
 8017462:	429a      	cmp	r2, r3
 8017464:	d00e      	beq.n	8017484 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	4a13      	ldr	r2, [pc, #76]	@ (80174b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801746c:	4293      	cmp	r3, r2
 801746e:	d009      	beq.n	8017484 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	4a11      	ldr	r2, [pc, #68]	@ (80174bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8017476:	4293      	cmp	r3, r2
 8017478:	d004      	beq.n	8017484 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	4a10      	ldr	r2, [pc, #64]	@ (80174c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8017480:	4293      	cmp	r3, r2
 8017482:	d10c      	bne.n	801749e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	2280      	movs	r2, #128	@ 0x80
 8017488:	4393      	bics	r3, r2
 801748a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801748c:	683b      	ldr	r3, [r7, #0]
 801748e:	685b      	ldr	r3, [r3, #4]
 8017490:	68ba      	ldr	r2, [r7, #8]
 8017492:	4313      	orrs	r3, r2
 8017494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	68ba      	ldr	r2, [r7, #8]
 801749c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	2239      	movs	r2, #57	@ 0x39
 80174a2:	2101      	movs	r1, #1
 80174a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2238      	movs	r2, #56	@ 0x38
 80174aa:	2100      	movs	r1, #0
 80174ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80174ae:	2300      	movs	r3, #0
}
 80174b0:	0018      	movs	r0, r3
 80174b2:	46bd      	mov	sp, r7
 80174b4:	b004      	add	sp, #16
 80174b6:	bd80      	pop	{r7, pc}
 80174b8:	40000400 	.word	0x40000400
 80174bc:	40010800 	.word	0x40010800
 80174c0:	40011400 	.word	0x40011400

080174c4 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b082      	sub	sp, #8
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	2238      	movs	r2, #56	@ 0x38
 80174d2:	5c9b      	ldrb	r3, [r3, r2]
 80174d4:	2b01      	cmp	r3, #1
 80174d6:	d101      	bne.n	80174dc <HAL_TIMEx_RemapConfig+0x18>
 80174d8:	2302      	movs	r3, #2
 80174da:	e00c      	b.n	80174f6 <HAL_TIMEx_RemapConfig+0x32>
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	2238      	movs	r2, #56	@ 0x38
 80174e0:	2101      	movs	r1, #1
 80174e2:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	683a      	ldr	r2, [r7, #0]
 80174ea:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	2238      	movs	r2, #56	@ 0x38
 80174f0:	2100      	movs	r1, #0
 80174f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80174f4:	2300      	movs	r3, #0
}
 80174f6:	0018      	movs	r0, r3
 80174f8:	46bd      	mov	sp, r7
 80174fa:	b002      	add	sp, #8
 80174fc:	bd80      	pop	{r7, pc}
	...

08017500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b082      	sub	sp, #8
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d101      	bne.n	8017512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801750e:	2301      	movs	r3, #1
 8017510:	e053      	b.n	80175ba <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017516:	2b00      	cmp	r3, #0
 8017518:	d116      	bne.n	8017548 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	2278      	movs	r2, #120	@ 0x78
 801751e:	2100      	movs	r1, #0
 8017520:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	0018      	movs	r0, r3
 8017526:	f000 fd65 	bl	8017ff4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	22b0      	movs	r2, #176	@ 0xb0
 801752e:	589b      	ldr	r3, [r3, r2]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d103      	bne.n	801753c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	21b0      	movs	r1, #176	@ 0xb0
 8017538:	4a22      	ldr	r2, [pc, #136]	@ (80175c4 <HAL_UART_Init+0xc4>)
 801753a:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	22b0      	movs	r2, #176	@ 0xb0
 8017540:	589b      	ldr	r3, [r3, r2]
 8017542:	687a      	ldr	r2, [r7, #4]
 8017544:	0010      	movs	r0, r2
 8017546:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	2224      	movs	r2, #36	@ 0x24
 801754c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	681a      	ldr	r2, [r3, #0]
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	2101      	movs	r1, #1
 801755a:	438a      	bics	r2, r1
 801755c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	0018      	movs	r0, r3
 8017562:	f000 fd8b 	bl	801807c <UART_SetConfig>
 8017566:	0003      	movs	r3, r0
 8017568:	2b01      	cmp	r3, #1
 801756a:	d101      	bne.n	8017570 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801756c:	2301      	movs	r3, #1
 801756e:	e024      	b.n	80175ba <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017574:	2b00      	cmp	r3, #0
 8017576:	d003      	beq.n	8017580 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	0018      	movs	r0, r3
 801757c:	f001 f81c 	bl	80185b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	685a      	ldr	r2, [r3, #4]
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	490f      	ldr	r1, [pc, #60]	@ (80175c8 <HAL_UART_Init+0xc8>)
 801758c:	400a      	ands	r2, r1
 801758e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	689a      	ldr	r2, [r3, #8]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	212a      	movs	r1, #42	@ 0x2a
 801759c:	438a      	bics	r2, r1
 801759e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	681a      	ldr	r2, [r3, #0]
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	2101      	movs	r1, #1
 80175ac:	430a      	orrs	r2, r1
 80175ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	0018      	movs	r0, r3
 80175b4:	f001 f8b4 	bl	8018720 <UART_CheckIdleState>
 80175b8:	0003      	movs	r3, r0
}
 80175ba:	0018      	movs	r0, r3
 80175bc:	46bd      	mov	sp, r7
 80175be:	b002      	add	sp, #8
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	46c0      	nop			@ (mov r8, r8)
 80175c4:	0800e5d1 	.word	0x0800e5d1
 80175c8:	ffffb7ff 	.word	0xffffb7ff

080175cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b08a      	sub	sp, #40	@ 0x28
 80175d0:	af02      	add	r7, sp, #8
 80175d2:	60f8      	str	r0, [r7, #12]
 80175d4:	60b9      	str	r1, [r7, #8]
 80175d6:	603b      	str	r3, [r7, #0]
 80175d8:	1dbb      	adds	r3, r7, #6
 80175da:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80175e0:	2b20      	cmp	r3, #32
 80175e2:	d000      	beq.n	80175e6 <HAL_UART_Transmit+0x1a>
 80175e4:	e08c      	b.n	8017700 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80175e6:	68bb      	ldr	r3, [r7, #8]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d003      	beq.n	80175f4 <HAL_UART_Transmit+0x28>
 80175ec:	1dbb      	adds	r3, r7, #6
 80175ee:	881b      	ldrh	r3, [r3, #0]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d101      	bne.n	80175f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80175f4:	2301      	movs	r3, #1
 80175f6:	e084      	b.n	8017702 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	689a      	ldr	r2, [r3, #8]
 80175fc:	2380      	movs	r3, #128	@ 0x80
 80175fe:	015b      	lsls	r3, r3, #5
 8017600:	429a      	cmp	r2, r3
 8017602:	d109      	bne.n	8017618 <HAL_UART_Transmit+0x4c>
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	691b      	ldr	r3, [r3, #16]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d105      	bne.n	8017618 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801760c:	68bb      	ldr	r3, [r7, #8]
 801760e:	2201      	movs	r2, #1
 8017610:	4013      	ands	r3, r2
 8017612:	d001      	beq.n	8017618 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8017614:	2301      	movs	r3, #1
 8017616:	e074      	b.n	8017702 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	2284      	movs	r2, #132	@ 0x84
 801761c:	2100      	movs	r1, #0
 801761e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	2221      	movs	r2, #33	@ 0x21
 8017624:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017626:	f7f7 fda5 	bl	800f174 <HAL_GetTick>
 801762a:	0003      	movs	r3, r0
 801762c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	1dba      	adds	r2, r7, #6
 8017632:	2150      	movs	r1, #80	@ 0x50
 8017634:	8812      	ldrh	r2, [r2, #0]
 8017636:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	1dba      	adds	r2, r7, #6
 801763c:	2152      	movs	r1, #82	@ 0x52
 801763e:	8812      	ldrh	r2, [r2, #0]
 8017640:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	689a      	ldr	r2, [r3, #8]
 8017646:	2380      	movs	r3, #128	@ 0x80
 8017648:	015b      	lsls	r3, r3, #5
 801764a:	429a      	cmp	r2, r3
 801764c:	d108      	bne.n	8017660 <HAL_UART_Transmit+0x94>
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	691b      	ldr	r3, [r3, #16]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d104      	bne.n	8017660 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8017656:	2300      	movs	r3, #0
 8017658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801765a:	68bb      	ldr	r3, [r7, #8]
 801765c:	61bb      	str	r3, [r7, #24]
 801765e:	e003      	b.n	8017668 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8017660:	68bb      	ldr	r3, [r7, #8]
 8017662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017664:	2300      	movs	r3, #0
 8017666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017668:	e02f      	b.n	80176ca <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801766a:	697a      	ldr	r2, [r7, #20]
 801766c:	68f8      	ldr	r0, [r7, #12]
 801766e:	683b      	ldr	r3, [r7, #0]
 8017670:	9300      	str	r3, [sp, #0]
 8017672:	0013      	movs	r3, r2
 8017674:	2200      	movs	r2, #0
 8017676:	2180      	movs	r1, #128	@ 0x80
 8017678:	f001 f8fa 	bl	8018870 <UART_WaitOnFlagUntilTimeout>
 801767c:	1e03      	subs	r3, r0, #0
 801767e:	d004      	beq.n	801768a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	2220      	movs	r2, #32
 8017684:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8017686:	2303      	movs	r3, #3
 8017688:	e03b      	b.n	8017702 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801768a:	69fb      	ldr	r3, [r7, #28]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d10b      	bne.n	80176a8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017690:	69bb      	ldr	r3, [r7, #24]
 8017692:	881b      	ldrh	r3, [r3, #0]
 8017694:	001a      	movs	r2, r3
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	05d2      	lsls	r2, r2, #23
 801769c:	0dd2      	lsrs	r2, r2, #23
 801769e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80176a0:	69bb      	ldr	r3, [r7, #24]
 80176a2:	3302      	adds	r3, #2
 80176a4:	61bb      	str	r3, [r7, #24]
 80176a6:	e007      	b.n	80176b8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80176a8:	69fb      	ldr	r3, [r7, #28]
 80176aa:	781a      	ldrb	r2, [r3, #0]
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80176b2:	69fb      	ldr	r3, [r7, #28]
 80176b4:	3301      	adds	r3, #1
 80176b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	2252      	movs	r2, #82	@ 0x52
 80176bc:	5a9b      	ldrh	r3, [r3, r2]
 80176be:	b29b      	uxth	r3, r3
 80176c0:	3b01      	subs	r3, #1
 80176c2:	b299      	uxth	r1, r3
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	2252      	movs	r2, #82	@ 0x52
 80176c8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	2252      	movs	r2, #82	@ 0x52
 80176ce:	5a9b      	ldrh	r3, [r3, r2]
 80176d0:	b29b      	uxth	r3, r3
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d1c9      	bne.n	801766a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80176d6:	697a      	ldr	r2, [r7, #20]
 80176d8:	68f8      	ldr	r0, [r7, #12]
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	9300      	str	r3, [sp, #0]
 80176de:	0013      	movs	r3, r2
 80176e0:	2200      	movs	r2, #0
 80176e2:	2140      	movs	r1, #64	@ 0x40
 80176e4:	f001 f8c4 	bl	8018870 <UART_WaitOnFlagUntilTimeout>
 80176e8:	1e03      	subs	r3, r0, #0
 80176ea:	d004      	beq.n	80176f6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	2220      	movs	r2, #32
 80176f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80176f2:	2303      	movs	r3, #3
 80176f4:	e005      	b.n	8017702 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	2220      	movs	r2, #32
 80176fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80176fc:	2300      	movs	r3, #0
 80176fe:	e000      	b.n	8017702 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8017700:	2302      	movs	r3, #2
  }
}
 8017702:	0018      	movs	r0, r3
 8017704:	46bd      	mov	sp, r7
 8017706:	b008      	add	sp, #32
 8017708:	bd80      	pop	{r7, pc}
	...

0801770c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b088      	sub	sp, #32
 8017710:	af00      	add	r7, sp, #0
 8017712:	60f8      	str	r0, [r7, #12]
 8017714:	60b9      	str	r1, [r7, #8]
 8017716:	1dbb      	adds	r3, r7, #6
 8017718:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	2280      	movs	r2, #128	@ 0x80
 801771e:	589b      	ldr	r3, [r3, r2]
 8017720:	2b20      	cmp	r3, #32
 8017722:	d14a      	bne.n	80177ba <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d003      	beq.n	8017732 <HAL_UART_Receive_IT+0x26>
 801772a:	1dbb      	adds	r3, r7, #6
 801772c:	881b      	ldrh	r3, [r3, #0]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d101      	bne.n	8017736 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8017732:	2301      	movs	r3, #1
 8017734:	e042      	b.n	80177bc <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	689a      	ldr	r2, [r3, #8]
 801773a:	2380      	movs	r3, #128	@ 0x80
 801773c:	015b      	lsls	r3, r3, #5
 801773e:	429a      	cmp	r2, r3
 8017740:	d109      	bne.n	8017756 <HAL_UART_Receive_IT+0x4a>
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	691b      	ldr	r3, [r3, #16]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d105      	bne.n	8017756 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801774a:	68bb      	ldr	r3, [r7, #8]
 801774c:	2201      	movs	r2, #1
 801774e:	4013      	ands	r3, r2
 8017750:	d001      	beq.n	8017756 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8017752:	2301      	movs	r3, #1
 8017754:	e032      	b.n	80177bc <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	2200      	movs	r2, #0
 801775a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	4a18      	ldr	r2, [pc, #96]	@ (80177c4 <HAL_UART_Receive_IT+0xb8>)
 8017762:	4293      	cmp	r3, r2
 8017764:	d020      	beq.n	80177a8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	685a      	ldr	r2, [r3, #4]
 801776c:	2380      	movs	r3, #128	@ 0x80
 801776e:	041b      	lsls	r3, r3, #16
 8017770:	4013      	ands	r3, r2
 8017772:	d019      	beq.n	80177a8 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017774:	f3ef 8310 	mrs	r3, PRIMASK
 8017778:	613b      	str	r3, [r7, #16]
  return(result);
 801777a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801777c:	61fb      	str	r3, [r7, #28]
 801777e:	2301      	movs	r3, #1
 8017780:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017782:	697b      	ldr	r3, [r7, #20]
 8017784:	f383 8810 	msr	PRIMASK, r3
}
 8017788:	46c0      	nop			@ (mov r8, r8)
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	681a      	ldr	r2, [r3, #0]
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	2180      	movs	r1, #128	@ 0x80
 8017796:	04c9      	lsls	r1, r1, #19
 8017798:	430a      	orrs	r2, r1
 801779a:	601a      	str	r2, [r3, #0]
 801779c:	69fb      	ldr	r3, [r7, #28]
 801779e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177a0:	69bb      	ldr	r3, [r7, #24]
 80177a2:	f383 8810 	msr	PRIMASK, r3
}
 80177a6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80177a8:	1dbb      	adds	r3, r7, #6
 80177aa:	881a      	ldrh	r2, [r3, #0]
 80177ac:	68b9      	ldr	r1, [r7, #8]
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	0018      	movs	r0, r3
 80177b2:	f001 f8c7 	bl	8018944 <UART_Start_Receive_IT>
 80177b6:	0003      	movs	r3, r0
 80177b8:	e000      	b.n	80177bc <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80177ba:	2302      	movs	r3, #2
  }
}
 80177bc:	0018      	movs	r0, r3
 80177be:	46bd      	mov	sp, r7
 80177c0:	b008      	add	sp, #32
 80177c2:	bd80      	pop	{r7, pc}
 80177c4:	40004800 	.word	0x40004800

080177c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b088      	sub	sp, #32
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	60f8      	str	r0, [r7, #12]
 80177d0:	60b9      	str	r1, [r7, #8]
 80177d2:	1dbb      	adds	r3, r7, #6
 80177d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80177da:	2b20      	cmp	r3, #32
 80177dc:	d000      	beq.n	80177e0 <HAL_UART_Transmit_DMA+0x18>
 80177de:	e077      	b.n	80178d0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80177e0:	68bb      	ldr	r3, [r7, #8]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d003      	beq.n	80177ee <HAL_UART_Transmit_DMA+0x26>
 80177e6:	1dbb      	adds	r3, r7, #6
 80177e8:	881b      	ldrh	r3, [r3, #0]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d101      	bne.n	80177f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80177ee:	2301      	movs	r3, #1
 80177f0:	e06f      	b.n	80178d2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	689a      	ldr	r2, [r3, #8]
 80177f6:	2380      	movs	r3, #128	@ 0x80
 80177f8:	015b      	lsls	r3, r3, #5
 80177fa:	429a      	cmp	r2, r3
 80177fc:	d109      	bne.n	8017812 <HAL_UART_Transmit_DMA+0x4a>
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	691b      	ldr	r3, [r3, #16]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d105      	bne.n	8017812 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017806:	68bb      	ldr	r3, [r7, #8]
 8017808:	2201      	movs	r2, #1
 801780a:	4013      	ands	r3, r2
 801780c:	d001      	beq.n	8017812 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801780e:	2301      	movs	r3, #1
 8017810:	e05f      	b.n	80178d2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	68ba      	ldr	r2, [r7, #8]
 8017816:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	1dba      	adds	r2, r7, #6
 801781c:	2150      	movs	r1, #80	@ 0x50
 801781e:	8812      	ldrh	r2, [r2, #0]
 8017820:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	1dba      	adds	r2, r7, #6
 8017826:	2152      	movs	r1, #82	@ 0x52
 8017828:	8812      	ldrh	r2, [r2, #0]
 801782a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	2284      	movs	r2, #132	@ 0x84
 8017830:	2100      	movs	r1, #0
 8017832:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	2221      	movs	r2, #33	@ 0x21
 8017838:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801783e:	2b00      	cmp	r3, #0
 8017840:	d027      	beq.n	8017892 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017846:	4a25      	ldr	r2, [pc, #148]	@ (80178dc <HAL_UART_Transmit_DMA+0x114>)
 8017848:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801784e:	4a24      	ldr	r2, [pc, #144]	@ (80178e0 <HAL_UART_Transmit_DMA+0x118>)
 8017850:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017856:	4a23      	ldr	r2, [pc, #140]	@ (80178e4 <HAL_UART_Transmit_DMA+0x11c>)
 8017858:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801785e:	2200      	movs	r2, #0
 8017860:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801786a:	0019      	movs	r1, r3
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	3328      	adds	r3, #40	@ 0x28
 8017872:	001a      	movs	r2, r3
 8017874:	1dbb      	adds	r3, r7, #6
 8017876:	881b      	ldrh	r3, [r3, #0]
 8017878:	f7f8 f9ce 	bl	800fc18 <HAL_DMA_Start_IT>
 801787c:	1e03      	subs	r3, r0, #0
 801787e:	d008      	beq.n	8017892 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	2284      	movs	r2, #132	@ 0x84
 8017884:	2110      	movs	r1, #16
 8017886:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	2220      	movs	r2, #32
 801788c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801788e:	2301      	movs	r3, #1
 8017890:	e01f      	b.n	80178d2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	2240      	movs	r2, #64	@ 0x40
 8017898:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801789a:	f3ef 8310 	mrs	r3, PRIMASK
 801789e:	613b      	str	r3, [r7, #16]
  return(result);
 80178a0:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80178a2:	61fb      	str	r3, [r7, #28]
 80178a4:	2301      	movs	r3, #1
 80178a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178a8:	697b      	ldr	r3, [r7, #20]
 80178aa:	f383 8810 	msr	PRIMASK, r3
}
 80178ae:	46c0      	nop			@ (mov r8, r8)
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	689a      	ldr	r2, [r3, #8]
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	2180      	movs	r1, #128	@ 0x80
 80178bc:	430a      	orrs	r2, r1
 80178be:	609a      	str	r2, [r3, #8]
 80178c0:	69fb      	ldr	r3, [r7, #28]
 80178c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178c4:	69bb      	ldr	r3, [r7, #24]
 80178c6:	f383 8810 	msr	PRIMASK, r3
}
 80178ca:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80178cc:	2300      	movs	r3, #0
 80178ce:	e000      	b.n	80178d2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80178d0:	2302      	movs	r3, #2
  }
}
 80178d2:	0018      	movs	r0, r3
 80178d4:	46bd      	mov	sp, r7
 80178d6:	b008      	add	sp, #32
 80178d8:	bd80      	pop	{r7, pc}
 80178da:	46c0      	nop			@ (mov r8, r8)
 80178dc:	08018d29 	.word	0x08018d29
 80178e0:	08018dc5 	.word	0x08018dc5
 80178e4:	08018f65 	.word	0x08018f65

080178e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b088      	sub	sp, #32
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	60f8      	str	r0, [r7, #12]
 80178f0:	60b9      	str	r1, [r7, #8]
 80178f2:	1dbb      	adds	r3, r7, #6
 80178f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	2280      	movs	r2, #128	@ 0x80
 80178fa:	589b      	ldr	r3, [r3, r2]
 80178fc:	2b20      	cmp	r3, #32
 80178fe:	d14a      	bne.n	8017996 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017900:	68bb      	ldr	r3, [r7, #8]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d003      	beq.n	801790e <HAL_UART_Receive_DMA+0x26>
 8017906:	1dbb      	adds	r3, r7, #6
 8017908:	881b      	ldrh	r3, [r3, #0]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d101      	bne.n	8017912 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801790e:	2301      	movs	r3, #1
 8017910:	e042      	b.n	8017998 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	689a      	ldr	r2, [r3, #8]
 8017916:	2380      	movs	r3, #128	@ 0x80
 8017918:	015b      	lsls	r3, r3, #5
 801791a:	429a      	cmp	r2, r3
 801791c:	d109      	bne.n	8017932 <HAL_UART_Receive_DMA+0x4a>
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	691b      	ldr	r3, [r3, #16]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d105      	bne.n	8017932 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017926:	68bb      	ldr	r3, [r7, #8]
 8017928:	2201      	movs	r2, #1
 801792a:	4013      	ands	r3, r2
 801792c:	d001      	beq.n	8017932 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801792e:	2301      	movs	r3, #1
 8017930:	e032      	b.n	8017998 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	2200      	movs	r2, #0
 8017936:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	4a18      	ldr	r2, [pc, #96]	@ (80179a0 <HAL_UART_Receive_DMA+0xb8>)
 801793e:	4293      	cmp	r3, r2
 8017940:	d020      	beq.n	8017984 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	685a      	ldr	r2, [r3, #4]
 8017948:	2380      	movs	r3, #128	@ 0x80
 801794a:	041b      	lsls	r3, r3, #16
 801794c:	4013      	ands	r3, r2
 801794e:	d019      	beq.n	8017984 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017950:	f3ef 8310 	mrs	r3, PRIMASK
 8017954:	613b      	str	r3, [r7, #16]
  return(result);
 8017956:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017958:	61fb      	str	r3, [r7, #28]
 801795a:	2301      	movs	r3, #1
 801795c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801795e:	697b      	ldr	r3, [r7, #20]
 8017960:	f383 8810 	msr	PRIMASK, r3
}
 8017964:	46c0      	nop			@ (mov r8, r8)
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	681a      	ldr	r2, [r3, #0]
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	2180      	movs	r1, #128	@ 0x80
 8017972:	04c9      	lsls	r1, r1, #19
 8017974:	430a      	orrs	r2, r1
 8017976:	601a      	str	r2, [r3, #0]
 8017978:	69fb      	ldr	r3, [r7, #28]
 801797a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801797c:	69bb      	ldr	r3, [r7, #24]
 801797e:	f383 8810 	msr	PRIMASK, r3
}
 8017982:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8017984:	1dbb      	adds	r3, r7, #6
 8017986:	881a      	ldrh	r2, [r3, #0]
 8017988:	68b9      	ldr	r1, [r7, #8]
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	0018      	movs	r0, r3
 801798e:	f001 f8a3 	bl	8018ad8 <UART_Start_Receive_DMA>
 8017992:	0003      	movs	r3, r0
 8017994:	e000      	b.n	8017998 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017996:	2302      	movs	r3, #2
  }
}
 8017998:	0018      	movs	r0, r3
 801799a:	46bd      	mov	sp, r7
 801799c:	b008      	add	sp, #32
 801799e:	bd80      	pop	{r7, pc}
 80179a0:	40004800 	.word	0x40004800

080179a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80179a4:	b590      	push	{r4, r7, lr}
 80179a6:	b0ab      	sub	sp, #172	@ 0xac
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	69db      	ldr	r3, [r3, #28]
 80179b2:	22a4      	movs	r2, #164	@ 0xa4
 80179b4:	18b9      	adds	r1, r7, r2
 80179b6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	20a0      	movs	r0, #160	@ 0xa0
 80179c0:	1839      	adds	r1, r7, r0
 80179c2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	689b      	ldr	r3, [r3, #8]
 80179ca:	219c      	movs	r1, #156	@ 0x9c
 80179cc:	1879      	adds	r1, r7, r1
 80179ce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80179d0:	0011      	movs	r1, r2
 80179d2:	18bb      	adds	r3, r7, r2
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	4a9c      	ldr	r2, [pc, #624]	@ (8017c48 <HAL_UART_IRQHandler+0x2a4>)
 80179d8:	4013      	ands	r3, r2
 80179da:	2298      	movs	r2, #152	@ 0x98
 80179dc:	18bc      	adds	r4, r7, r2
 80179de:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80179e0:	18bb      	adds	r3, r7, r2
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d114      	bne.n	8017a12 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80179e8:	187b      	adds	r3, r7, r1
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	2220      	movs	r2, #32
 80179ee:	4013      	ands	r3, r2
 80179f0:	d00f      	beq.n	8017a12 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80179f2:	183b      	adds	r3, r7, r0
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	2220      	movs	r2, #32
 80179f8:	4013      	ands	r3, r2
 80179fa:	d00a      	beq.n	8017a12 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d100      	bne.n	8017a06 <HAL_UART_IRQHandler+0x62>
 8017a04:	e2aa      	b.n	8017f5c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017a0a:	687a      	ldr	r2, [r7, #4]
 8017a0c:	0010      	movs	r0, r2
 8017a0e:	4798      	blx	r3
      }
      return;
 8017a10:	e2a4      	b.n	8017f5c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017a12:	2398      	movs	r3, #152	@ 0x98
 8017a14:	18fb      	adds	r3, r7, r3
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d100      	bne.n	8017a1e <HAL_UART_IRQHandler+0x7a>
 8017a1c:	e11a      	b.n	8017c54 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8017a1e:	239c      	movs	r3, #156	@ 0x9c
 8017a20:	18fb      	adds	r3, r7, r3
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	2201      	movs	r2, #1
 8017a26:	4013      	ands	r3, r2
 8017a28:	d106      	bne.n	8017a38 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8017a2a:	23a0      	movs	r3, #160	@ 0xa0
 8017a2c:	18fb      	adds	r3, r7, r3
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	4a86      	ldr	r2, [pc, #536]	@ (8017c4c <HAL_UART_IRQHandler+0x2a8>)
 8017a32:	4013      	ands	r3, r2
 8017a34:	d100      	bne.n	8017a38 <HAL_UART_IRQHandler+0x94>
 8017a36:	e10d      	b.n	8017c54 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017a38:	23a4      	movs	r3, #164	@ 0xa4
 8017a3a:	18fb      	adds	r3, r7, r3
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	2201      	movs	r2, #1
 8017a40:	4013      	ands	r3, r2
 8017a42:	d012      	beq.n	8017a6a <HAL_UART_IRQHandler+0xc6>
 8017a44:	23a0      	movs	r3, #160	@ 0xa0
 8017a46:	18fb      	adds	r3, r7, r3
 8017a48:	681a      	ldr	r2, [r3, #0]
 8017a4a:	2380      	movs	r3, #128	@ 0x80
 8017a4c:	005b      	lsls	r3, r3, #1
 8017a4e:	4013      	ands	r3, r2
 8017a50:	d00b      	beq.n	8017a6a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	2201      	movs	r2, #1
 8017a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2284      	movs	r2, #132	@ 0x84
 8017a5e:	589b      	ldr	r3, [r3, r2]
 8017a60:	2201      	movs	r2, #1
 8017a62:	431a      	orrs	r2, r3
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	2184      	movs	r1, #132	@ 0x84
 8017a68:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017a6a:	23a4      	movs	r3, #164	@ 0xa4
 8017a6c:	18fb      	adds	r3, r7, r3
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	2202      	movs	r2, #2
 8017a72:	4013      	ands	r3, r2
 8017a74:	d011      	beq.n	8017a9a <HAL_UART_IRQHandler+0xf6>
 8017a76:	239c      	movs	r3, #156	@ 0x9c
 8017a78:	18fb      	adds	r3, r7, r3
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	2201      	movs	r2, #1
 8017a7e:	4013      	ands	r3, r2
 8017a80:	d00b      	beq.n	8017a9a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	2202      	movs	r2, #2
 8017a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	2284      	movs	r2, #132	@ 0x84
 8017a8e:	589b      	ldr	r3, [r3, r2]
 8017a90:	2204      	movs	r2, #4
 8017a92:	431a      	orrs	r2, r3
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	2184      	movs	r1, #132	@ 0x84
 8017a98:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017a9a:	23a4      	movs	r3, #164	@ 0xa4
 8017a9c:	18fb      	adds	r3, r7, r3
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	2204      	movs	r2, #4
 8017aa2:	4013      	ands	r3, r2
 8017aa4:	d011      	beq.n	8017aca <HAL_UART_IRQHandler+0x126>
 8017aa6:	239c      	movs	r3, #156	@ 0x9c
 8017aa8:	18fb      	adds	r3, r7, r3
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	2201      	movs	r2, #1
 8017aae:	4013      	ands	r3, r2
 8017ab0:	d00b      	beq.n	8017aca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	2204      	movs	r2, #4
 8017ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	2284      	movs	r2, #132	@ 0x84
 8017abe:	589b      	ldr	r3, [r3, r2]
 8017ac0:	2202      	movs	r2, #2
 8017ac2:	431a      	orrs	r2, r3
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	2184      	movs	r1, #132	@ 0x84
 8017ac8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017aca:	23a4      	movs	r3, #164	@ 0xa4
 8017acc:	18fb      	adds	r3, r7, r3
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	2208      	movs	r2, #8
 8017ad2:	4013      	ands	r3, r2
 8017ad4:	d017      	beq.n	8017b06 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017ad6:	23a0      	movs	r3, #160	@ 0xa0
 8017ad8:	18fb      	adds	r3, r7, r3
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	2220      	movs	r2, #32
 8017ade:	4013      	ands	r3, r2
 8017ae0:	d105      	bne.n	8017aee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8017ae2:	239c      	movs	r3, #156	@ 0x9c
 8017ae4:	18fb      	adds	r3, r7, r3
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	2201      	movs	r2, #1
 8017aea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017aec:	d00b      	beq.n	8017b06 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	2208      	movs	r2, #8
 8017af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	2284      	movs	r2, #132	@ 0x84
 8017afa:	589b      	ldr	r3, [r3, r2]
 8017afc:	2208      	movs	r2, #8
 8017afe:	431a      	orrs	r2, r3
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	2184      	movs	r1, #132	@ 0x84
 8017b04:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017b06:	23a4      	movs	r3, #164	@ 0xa4
 8017b08:	18fb      	adds	r3, r7, r3
 8017b0a:	681a      	ldr	r2, [r3, #0]
 8017b0c:	2380      	movs	r3, #128	@ 0x80
 8017b0e:	011b      	lsls	r3, r3, #4
 8017b10:	4013      	ands	r3, r2
 8017b12:	d013      	beq.n	8017b3c <HAL_UART_IRQHandler+0x198>
 8017b14:	23a0      	movs	r3, #160	@ 0xa0
 8017b16:	18fb      	adds	r3, r7, r3
 8017b18:	681a      	ldr	r2, [r3, #0]
 8017b1a:	2380      	movs	r3, #128	@ 0x80
 8017b1c:	04db      	lsls	r3, r3, #19
 8017b1e:	4013      	ands	r3, r2
 8017b20:	d00c      	beq.n	8017b3c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	2280      	movs	r2, #128	@ 0x80
 8017b28:	0112      	lsls	r2, r2, #4
 8017b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2284      	movs	r2, #132	@ 0x84
 8017b30:	589b      	ldr	r3, [r3, r2]
 8017b32:	2220      	movs	r2, #32
 8017b34:	431a      	orrs	r2, r3
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	2184      	movs	r1, #132	@ 0x84
 8017b3a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	2284      	movs	r2, #132	@ 0x84
 8017b40:	589b      	ldr	r3, [r3, r2]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d100      	bne.n	8017b48 <HAL_UART_IRQHandler+0x1a4>
 8017b46:	e20b      	b.n	8017f60 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017b48:	23a4      	movs	r3, #164	@ 0xa4
 8017b4a:	18fb      	adds	r3, r7, r3
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	2220      	movs	r2, #32
 8017b50:	4013      	ands	r3, r2
 8017b52:	d00e      	beq.n	8017b72 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017b54:	23a0      	movs	r3, #160	@ 0xa0
 8017b56:	18fb      	adds	r3, r7, r3
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	2220      	movs	r2, #32
 8017b5c:	4013      	ands	r3, r2
 8017b5e:	d008      	beq.n	8017b72 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d004      	beq.n	8017b72 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017b6c:	687a      	ldr	r2, [r7, #4]
 8017b6e:	0010      	movs	r0, r2
 8017b70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	2284      	movs	r2, #132	@ 0x84
 8017b76:	589b      	ldr	r3, [r3, r2]
 8017b78:	2194      	movs	r1, #148	@ 0x94
 8017b7a:	187a      	adds	r2, r7, r1
 8017b7c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	689b      	ldr	r3, [r3, #8]
 8017b84:	2240      	movs	r2, #64	@ 0x40
 8017b86:	4013      	ands	r3, r2
 8017b88:	2b40      	cmp	r3, #64	@ 0x40
 8017b8a:	d004      	beq.n	8017b96 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017b8c:	187b      	adds	r3, r7, r1
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	2228      	movs	r2, #40	@ 0x28
 8017b92:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017b94:	d04b      	beq.n	8017c2e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	0018      	movs	r0, r3
 8017b9a:	f001 f861 	bl	8018c60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	689b      	ldr	r3, [r3, #8]
 8017ba4:	2240      	movs	r2, #64	@ 0x40
 8017ba6:	4013      	ands	r3, r2
 8017ba8:	2b40      	cmp	r3, #64	@ 0x40
 8017baa:	d139      	bne.n	8017c20 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bac:	f3ef 8310 	mrs	r3, PRIMASK
 8017bb0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8017bb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017bb4:	2090      	movs	r0, #144	@ 0x90
 8017bb6:	183a      	adds	r2, r7, r0
 8017bb8:	6013      	str	r3, [r2, #0]
 8017bba:	2301      	movs	r3, #1
 8017bbc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017bc0:	f383 8810 	msr	PRIMASK, r3
}
 8017bc4:	46c0      	nop			@ (mov r8, r8)
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	689a      	ldr	r2, [r3, #8]
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	2140      	movs	r1, #64	@ 0x40
 8017bd2:	438a      	bics	r2, r1
 8017bd4:	609a      	str	r2, [r3, #8]
 8017bd6:	183b      	adds	r3, r7, r0
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017bde:	f383 8810 	msr	PRIMASK, r3
}
 8017be2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d012      	beq.n	8017c12 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017bf0:	4a17      	ldr	r2, [pc, #92]	@ (8017c50 <HAL_UART_IRQHandler+0x2ac>)
 8017bf2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017bf8:	0018      	movs	r0, r3
 8017bfa:	f7f8 f8b3 	bl	800fd64 <HAL_DMA_Abort_IT>
 8017bfe:	1e03      	subs	r3, r0, #0
 8017c00:	d020      	beq.n	8017c44 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c0c:	0018      	movs	r0, r3
 8017c0e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c10:	e018      	b.n	8017c44 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	2298      	movs	r2, #152	@ 0x98
 8017c16:	589b      	ldr	r3, [r3, r2]
 8017c18:	687a      	ldr	r2, [r7, #4]
 8017c1a:	0010      	movs	r0, r2
 8017c1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c1e:	e011      	b.n	8017c44 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	2298      	movs	r2, #152	@ 0x98
 8017c24:	589b      	ldr	r3, [r3, r2]
 8017c26:	687a      	ldr	r2, [r7, #4]
 8017c28:	0010      	movs	r0, r2
 8017c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c2c:	e00a      	b.n	8017c44 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2298      	movs	r2, #152	@ 0x98
 8017c32:	589b      	ldr	r3, [r3, r2]
 8017c34:	687a      	ldr	r2, [r7, #4]
 8017c36:	0010      	movs	r0, r2
 8017c38:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	2284      	movs	r2, #132	@ 0x84
 8017c3e:	2100      	movs	r1, #0
 8017c40:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8017c42:	e18d      	b.n	8017f60 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c44:	46c0      	nop			@ (mov r8, r8)
    return;
 8017c46:	e18b      	b.n	8017f60 <HAL_UART_IRQHandler+0x5bc>
 8017c48:	0000080f 	.word	0x0000080f
 8017c4c:	04000120 	.word	0x04000120
 8017c50:	08018fed 	.word	0x08018fed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017c58:	2b01      	cmp	r3, #1
 8017c5a:	d000      	beq.n	8017c5e <HAL_UART_IRQHandler+0x2ba>
 8017c5c:	e13d      	b.n	8017eda <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8017c5e:	23a4      	movs	r3, #164	@ 0xa4
 8017c60:	18fb      	adds	r3, r7, r3
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	2210      	movs	r2, #16
 8017c66:	4013      	ands	r3, r2
 8017c68:	d100      	bne.n	8017c6c <HAL_UART_IRQHandler+0x2c8>
 8017c6a:	e136      	b.n	8017eda <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017c6c:	23a0      	movs	r3, #160	@ 0xa0
 8017c6e:	18fb      	adds	r3, r7, r3
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	2210      	movs	r2, #16
 8017c74:	4013      	ands	r3, r2
 8017c76:	d100      	bne.n	8017c7a <HAL_UART_IRQHandler+0x2d6>
 8017c78:	e12f      	b.n	8017eda <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	2210      	movs	r2, #16
 8017c80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	689b      	ldr	r3, [r3, #8]
 8017c88:	2240      	movs	r2, #64	@ 0x40
 8017c8a:	4013      	ands	r3, r2
 8017c8c:	2b40      	cmp	r3, #64	@ 0x40
 8017c8e:	d000      	beq.n	8017c92 <HAL_UART_IRQHandler+0x2ee>
 8017c90:	e0a2      	b.n	8017dd8 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	685a      	ldr	r2, [r3, #4]
 8017c9a:	217e      	movs	r1, #126	@ 0x7e
 8017c9c:	187b      	adds	r3, r7, r1
 8017c9e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8017ca0:	187b      	adds	r3, r7, r1
 8017ca2:	881b      	ldrh	r3, [r3, #0]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d100      	bne.n	8017caa <HAL_UART_IRQHandler+0x306>
 8017ca8:	e15c      	b.n	8017f64 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	2258      	movs	r2, #88	@ 0x58
 8017cae:	5a9b      	ldrh	r3, [r3, r2]
 8017cb0:	187a      	adds	r2, r7, r1
 8017cb2:	8812      	ldrh	r2, [r2, #0]
 8017cb4:	429a      	cmp	r2, r3
 8017cb6:	d300      	bcc.n	8017cba <HAL_UART_IRQHandler+0x316>
 8017cb8:	e154      	b.n	8017f64 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	187a      	adds	r2, r7, r1
 8017cbe:	215a      	movs	r1, #90	@ 0x5a
 8017cc0:	8812      	ldrh	r2, [r2, #0]
 8017cc2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	2220      	movs	r2, #32
 8017cce:	4013      	ands	r3, r2
 8017cd0:	d16f      	bne.n	8017db2 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8017cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017cda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017cdc:	2301      	movs	r3, #1
 8017cde:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ce2:	f383 8810 	msr	PRIMASK, r3
}
 8017ce6:	46c0      	nop			@ (mov r8, r8)
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	681a      	ldr	r2, [r3, #0]
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	49a0      	ldr	r1, [pc, #640]	@ (8017f74 <HAL_UART_IRQHandler+0x5d0>)
 8017cf4:	400a      	ands	r2, r1
 8017cf6:	601a      	str	r2, [r3, #0]
 8017cf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cfe:	f383 8810 	msr	PRIMASK, r3
}
 8017d02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d04:	f3ef 8310 	mrs	r3, PRIMASK
 8017d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8017d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8017d0e:	2301      	movs	r3, #1
 8017d10:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017d14:	f383 8810 	msr	PRIMASK, r3
}
 8017d18:	46c0      	nop			@ (mov r8, r8)
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	689a      	ldr	r2, [r3, #8]
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	2101      	movs	r1, #1
 8017d26:	438a      	bics	r2, r1
 8017d28:	609a      	str	r2, [r3, #8]
 8017d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017d2c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d30:	f383 8810 	msr	PRIMASK, r3
}
 8017d34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d36:	f3ef 8310 	mrs	r3, PRIMASK
 8017d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8017d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017d3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8017d40:	2301      	movs	r3, #1
 8017d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d46:	f383 8810 	msr	PRIMASK, r3
}
 8017d4a:	46c0      	nop			@ (mov r8, r8)
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	689a      	ldr	r2, [r3, #8]
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	2140      	movs	r1, #64	@ 0x40
 8017d58:	438a      	bics	r2, r1
 8017d5a:	609a      	str	r2, [r3, #8]
 8017d5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017d5e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d62:	f383 8810 	msr	PRIMASK, r3
}
 8017d66:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	2280      	movs	r2, #128	@ 0x80
 8017d6c:	2120      	movs	r1, #32
 8017d6e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	2200      	movs	r2, #0
 8017d74:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d76:	f3ef 8310 	mrs	r3, PRIMASK
 8017d7a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8017d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017d80:	2301      	movs	r3, #1
 8017d82:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017d86:	f383 8810 	msr	PRIMASK, r3
}
 8017d8a:	46c0      	nop			@ (mov r8, r8)
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	681a      	ldr	r2, [r3, #0]
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	2110      	movs	r1, #16
 8017d98:	438a      	bics	r2, r1
 8017d9a:	601a      	str	r2, [r3, #0]
 8017d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017da0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017da2:	f383 8810 	msr	PRIMASK, r3
}
 8017da6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017dac:	0018      	movs	r0, r3
 8017dae:	f7f7 ff99 	bl	800fce4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2202      	movs	r2, #2
 8017db6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	22ac      	movs	r2, #172	@ 0xac
 8017dbc:	589b      	ldr	r3, [r3, r2]
 8017dbe:	687a      	ldr	r2, [r7, #4]
 8017dc0:	2158      	movs	r1, #88	@ 0x58
 8017dc2:	5a51      	ldrh	r1, [r2, r1]
 8017dc4:	687a      	ldr	r2, [r7, #4]
 8017dc6:	205a      	movs	r0, #90	@ 0x5a
 8017dc8:	5a12      	ldrh	r2, [r2, r0]
 8017dca:	b292      	uxth	r2, r2
 8017dcc:	1a8a      	subs	r2, r1, r2
 8017dce:	b291      	uxth	r1, r2
 8017dd0:	687a      	ldr	r2, [r7, #4]
 8017dd2:	0010      	movs	r0, r2
 8017dd4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017dd6:	e0c5      	b.n	8017f64 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	2258      	movs	r2, #88	@ 0x58
 8017ddc:	5a99      	ldrh	r1, [r3, r2]
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	225a      	movs	r2, #90	@ 0x5a
 8017de2:	5a9b      	ldrh	r3, [r3, r2]
 8017de4:	b29a      	uxth	r2, r3
 8017de6:	208e      	movs	r0, #142	@ 0x8e
 8017de8:	183b      	adds	r3, r7, r0
 8017dea:	1a8a      	subs	r2, r1, r2
 8017dec:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	225a      	movs	r2, #90	@ 0x5a
 8017df2:	5a9b      	ldrh	r3, [r3, r2]
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d100      	bne.n	8017dfc <HAL_UART_IRQHandler+0x458>
 8017dfa:	e0b5      	b.n	8017f68 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8017dfc:	183b      	adds	r3, r7, r0
 8017dfe:	881b      	ldrh	r3, [r3, #0]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d100      	bne.n	8017e06 <HAL_UART_IRQHandler+0x462>
 8017e04:	e0b0      	b.n	8017f68 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e06:	f3ef 8310 	mrs	r3, PRIMASK
 8017e0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8017e0c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017e0e:	2488      	movs	r4, #136	@ 0x88
 8017e10:	193a      	adds	r2, r7, r4
 8017e12:	6013      	str	r3, [r2, #0]
 8017e14:	2301      	movs	r3, #1
 8017e16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e18:	693b      	ldr	r3, [r7, #16]
 8017e1a:	f383 8810 	msr	PRIMASK, r3
}
 8017e1e:	46c0      	nop			@ (mov r8, r8)
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	681a      	ldr	r2, [r3, #0]
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	4953      	ldr	r1, [pc, #332]	@ (8017f78 <HAL_UART_IRQHandler+0x5d4>)
 8017e2c:	400a      	ands	r2, r1
 8017e2e:	601a      	str	r2, [r3, #0]
 8017e30:	193b      	adds	r3, r7, r4
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e36:	697b      	ldr	r3, [r7, #20]
 8017e38:	f383 8810 	msr	PRIMASK, r3
}
 8017e3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8017e42:	61bb      	str	r3, [r7, #24]
  return(result);
 8017e44:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e46:	2484      	movs	r4, #132	@ 0x84
 8017e48:	193a      	adds	r2, r7, r4
 8017e4a:	6013      	str	r3, [r2, #0]
 8017e4c:	2301      	movs	r3, #1
 8017e4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e50:	69fb      	ldr	r3, [r7, #28]
 8017e52:	f383 8810 	msr	PRIMASK, r3
}
 8017e56:	46c0      	nop			@ (mov r8, r8)
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	689a      	ldr	r2, [r3, #8]
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	2101      	movs	r1, #1
 8017e64:	438a      	bics	r2, r1
 8017e66:	609a      	str	r2, [r3, #8]
 8017e68:	193b      	adds	r3, r7, r4
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e6e:	6a3b      	ldr	r3, [r7, #32]
 8017e70:	f383 8810 	msr	PRIMASK, r3
}
 8017e74:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	2280      	movs	r2, #128	@ 0x80
 8017e7a:	2120      	movs	r1, #32
 8017e7c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2200      	movs	r2, #0
 8017e82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2200      	movs	r2, #0
 8017e88:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8017e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e92:	2480      	movs	r4, #128	@ 0x80
 8017e94:	193a      	adds	r2, r7, r4
 8017e96:	6013      	str	r3, [r2, #0]
 8017e98:	2301      	movs	r3, #1
 8017e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e9e:	f383 8810 	msr	PRIMASK, r3
}
 8017ea2:	46c0      	nop			@ (mov r8, r8)
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	681a      	ldr	r2, [r3, #0]
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	2110      	movs	r1, #16
 8017eb0:	438a      	bics	r2, r1
 8017eb2:	601a      	str	r2, [r3, #0]
 8017eb4:	193b      	adds	r3, r7, r4
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ebc:	f383 8810 	msr	PRIMASK, r3
}
 8017ec0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2202      	movs	r2, #2
 8017ec6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	22ac      	movs	r2, #172	@ 0xac
 8017ecc:	589b      	ldr	r3, [r3, r2]
 8017ece:	183a      	adds	r2, r7, r0
 8017ed0:	8811      	ldrh	r1, [r2, #0]
 8017ed2:	687a      	ldr	r2, [r7, #4]
 8017ed4:	0010      	movs	r0, r2
 8017ed6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017ed8:	e046      	b.n	8017f68 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017eda:	23a4      	movs	r3, #164	@ 0xa4
 8017edc:	18fb      	adds	r3, r7, r3
 8017ede:	681a      	ldr	r2, [r3, #0]
 8017ee0:	2380      	movs	r3, #128	@ 0x80
 8017ee2:	035b      	lsls	r3, r3, #13
 8017ee4:	4013      	ands	r3, r2
 8017ee6:	d012      	beq.n	8017f0e <HAL_UART_IRQHandler+0x56a>
 8017ee8:	239c      	movs	r3, #156	@ 0x9c
 8017eea:	18fb      	adds	r3, r7, r3
 8017eec:	681a      	ldr	r2, [r3, #0]
 8017eee:	2380      	movs	r3, #128	@ 0x80
 8017ef0:	03db      	lsls	r3, r3, #15
 8017ef2:	4013      	ands	r3, r2
 8017ef4:	d00b      	beq.n	8017f0e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	2280      	movs	r2, #128	@ 0x80
 8017efc:	0352      	lsls	r2, r2, #13
 8017efe:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	22a8      	movs	r2, #168	@ 0xa8
 8017f04:	589b      	ldr	r3, [r3, r2]
 8017f06:	687a      	ldr	r2, [r7, #4]
 8017f08:	0010      	movs	r0, r2
 8017f0a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017f0c:	e02f      	b.n	8017f6e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017f0e:	23a4      	movs	r3, #164	@ 0xa4
 8017f10:	18fb      	adds	r3, r7, r3
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	2280      	movs	r2, #128	@ 0x80
 8017f16:	4013      	ands	r3, r2
 8017f18:	d00f      	beq.n	8017f3a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017f1a:	23a0      	movs	r3, #160	@ 0xa0
 8017f1c:	18fb      	adds	r3, r7, r3
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	2280      	movs	r2, #128	@ 0x80
 8017f22:	4013      	ands	r3, r2
 8017f24:	d009      	beq.n	8017f3a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d01e      	beq.n	8017f6c <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f32:	687a      	ldr	r2, [r7, #4]
 8017f34:	0010      	movs	r0, r2
 8017f36:	4798      	blx	r3
    }
    return;
 8017f38:	e018      	b.n	8017f6c <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017f3a:	23a4      	movs	r3, #164	@ 0xa4
 8017f3c:	18fb      	adds	r3, r7, r3
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	2240      	movs	r2, #64	@ 0x40
 8017f42:	4013      	ands	r3, r2
 8017f44:	d013      	beq.n	8017f6e <HAL_UART_IRQHandler+0x5ca>
 8017f46:	23a0      	movs	r3, #160	@ 0xa0
 8017f48:	18fb      	adds	r3, r7, r3
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	2240      	movs	r2, #64	@ 0x40
 8017f4e:	4013      	ands	r3, r2
 8017f50:	d00d      	beq.n	8017f6e <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	0018      	movs	r0, r3
 8017f56:	f001 f862 	bl	801901e <UART_EndTransmit_IT>
    return;
 8017f5a:	e008      	b.n	8017f6e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017f5c:	46c0      	nop			@ (mov r8, r8)
 8017f5e:	e006      	b.n	8017f6e <HAL_UART_IRQHandler+0x5ca>
    return;
 8017f60:	46c0      	nop			@ (mov r8, r8)
 8017f62:	e004      	b.n	8017f6e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017f64:	46c0      	nop			@ (mov r8, r8)
 8017f66:	e002      	b.n	8017f6e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017f68:	46c0      	nop			@ (mov r8, r8)
 8017f6a:	e000      	b.n	8017f6e <HAL_UART_IRQHandler+0x5ca>
    return;
 8017f6c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	b02b      	add	sp, #172	@ 0xac
 8017f72:	bd90      	pop	{r4, r7, pc}
 8017f74:	fffffeff 	.word	0xfffffeff
 8017f78:	fffffedf 	.word	0xfffffedf

08017f7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b082      	sub	sp, #8
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017f84:	46c0      	nop			@ (mov r8, r8)
 8017f86:	46bd      	mov	sp, r7
 8017f88:	b002      	add	sp, #8
 8017f8a:	bd80      	pop	{r7, pc}

08017f8c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b082      	sub	sp, #8
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017f94:	46c0      	nop			@ (mov r8, r8)
 8017f96:	46bd      	mov	sp, r7
 8017f98:	b002      	add	sp, #8
 8017f9a:	bd80      	pop	{r7, pc}

08017f9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b082      	sub	sp, #8
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017fa4:	46c0      	nop			@ (mov r8, r8)
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	b002      	add	sp, #8
 8017faa:	bd80      	pop	{r7, pc}

08017fac <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b082      	sub	sp, #8
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017fb4:	46c0      	nop			@ (mov r8, r8)
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	b002      	add	sp, #8
 8017fba:	bd80      	pop	{r7, pc}

08017fbc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b082      	sub	sp, #8
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017fc4:	46c0      	nop			@ (mov r8, r8)
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	b002      	add	sp, #8
 8017fca:	bd80      	pop	{r7, pc}

08017fcc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b082      	sub	sp, #8
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017fd4:	46c0      	nop			@ (mov r8, r8)
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	b002      	add	sp, #8
 8017fda:	bd80      	pop	{r7, pc}

08017fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b082      	sub	sp, #8
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	6078      	str	r0, [r7, #4]
 8017fe4:	000a      	movs	r2, r1
 8017fe6:	1cbb      	adds	r3, r7, #2
 8017fe8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017fea:	46c0      	nop			@ (mov r8, r8)
 8017fec:	46bd      	mov	sp, r7
 8017fee:	b002      	add	sp, #8
 8017ff0:	bd80      	pop	{r7, pc}
	...

08017ff4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b082      	sub	sp, #8
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	2188      	movs	r1, #136	@ 0x88
 8018000:	4a14      	ldr	r2, [pc, #80]	@ (8018054 <UART_InitCallbacksToDefault+0x60>)
 8018002:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	218c      	movs	r1, #140	@ 0x8c
 8018008:	4a13      	ldr	r2, [pc, #76]	@ (8018058 <UART_InitCallbacksToDefault+0x64>)
 801800a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	2190      	movs	r1, #144	@ 0x90
 8018010:	4a12      	ldr	r2, [pc, #72]	@ (801805c <UART_InitCallbacksToDefault+0x68>)
 8018012:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	2194      	movs	r1, #148	@ 0x94
 8018018:	4a11      	ldr	r2, [pc, #68]	@ (8018060 <UART_InitCallbacksToDefault+0x6c>)
 801801a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	2198      	movs	r1, #152	@ 0x98
 8018020:	4a10      	ldr	r2, [pc, #64]	@ (8018064 <UART_InitCallbacksToDefault+0x70>)
 8018022:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	219c      	movs	r1, #156	@ 0x9c
 8018028:	4a0f      	ldr	r2, [pc, #60]	@ (8018068 <UART_InitCallbacksToDefault+0x74>)
 801802a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	21a0      	movs	r1, #160	@ 0xa0
 8018030:	4a0e      	ldr	r2, [pc, #56]	@ (801806c <UART_InitCallbacksToDefault+0x78>)
 8018032:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	21a4      	movs	r1, #164	@ 0xa4
 8018038:	4a0d      	ldr	r2, [pc, #52]	@ (8018070 <UART_InitCallbacksToDefault+0x7c>)
 801803a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	21a8      	movs	r1, #168	@ 0xa8
 8018040:	4a0c      	ldr	r2, [pc, #48]	@ (8018074 <UART_InitCallbacksToDefault+0x80>)
 8018042:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	21ac      	movs	r1, #172	@ 0xac
 8018048:	4a0b      	ldr	r2, [pc, #44]	@ (8018078 <UART_InitCallbacksToDefault+0x84>)
 801804a:	505a      	str	r2, [r3, r1]

}
 801804c:	46c0      	nop			@ (mov r8, r8)
 801804e:	46bd      	mov	sp, r7
 8018050:	b002      	add	sp, #8
 8018052:	bd80      	pop	{r7, pc}
 8018054:	08017f8d 	.word	0x08017f8d
 8018058:	08017f7d 	.word	0x08017f7d
 801805c:	08017f9d 	.word	0x08017f9d
 8018060:	080085d9 	.word	0x080085d9
 8018064:	08003bad 	.word	0x08003bad
 8018068:	08017fad 	.word	0x08017fad
 801806c:	08017fbd 	.word	0x08017fbd
 8018070:	08017fcd 	.word	0x08017fcd
 8018074:	08019411 	.word	0x08019411
 8018078:	08017fdd 	.word	0x08017fdd

0801807c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801807c:	b5b0      	push	{r4, r5, r7, lr}
 801807e:	b08e      	sub	sp, #56	@ 0x38
 8018080:	af00      	add	r7, sp, #0
 8018082:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018084:	231a      	movs	r3, #26
 8018086:	2218      	movs	r2, #24
 8018088:	189b      	adds	r3, r3, r2
 801808a:	19db      	adds	r3, r3, r7
 801808c:	2200      	movs	r2, #0
 801808e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018090:	69fb      	ldr	r3, [r7, #28]
 8018092:	689a      	ldr	r2, [r3, #8]
 8018094:	69fb      	ldr	r3, [r7, #28]
 8018096:	691b      	ldr	r3, [r3, #16]
 8018098:	431a      	orrs	r2, r3
 801809a:	69fb      	ldr	r3, [r7, #28]
 801809c:	695b      	ldr	r3, [r3, #20]
 801809e:	431a      	orrs	r2, r3
 80180a0:	69fb      	ldr	r3, [r7, #28]
 80180a2:	69db      	ldr	r3, [r3, #28]
 80180a4:	4313      	orrs	r3, r2
 80180a6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80180a8:	69fb      	ldr	r3, [r7, #28]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	4ac3      	ldr	r2, [pc, #780]	@ (80183bc <UART_SetConfig+0x340>)
 80180b0:	4013      	ands	r3, r2
 80180b2:	0019      	movs	r1, r3
 80180b4:	69fb      	ldr	r3, [r7, #28]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80180ba:	430a      	orrs	r2, r1
 80180bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80180be:	69fb      	ldr	r3, [r7, #28]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	685b      	ldr	r3, [r3, #4]
 80180c4:	4abe      	ldr	r2, [pc, #760]	@ (80183c0 <UART_SetConfig+0x344>)
 80180c6:	4013      	ands	r3, r2
 80180c8:	0019      	movs	r1, r3
 80180ca:	69fb      	ldr	r3, [r7, #28]
 80180cc:	68da      	ldr	r2, [r3, #12]
 80180ce:	69fb      	ldr	r3, [r7, #28]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	430a      	orrs	r2, r1
 80180d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80180d6:	69fb      	ldr	r3, [r7, #28]
 80180d8:	699b      	ldr	r3, [r3, #24]
 80180da:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80180dc:	69fb      	ldr	r3, [r7, #28]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	4ab8      	ldr	r2, [pc, #736]	@ (80183c4 <UART_SetConfig+0x348>)
 80180e2:	4293      	cmp	r3, r2
 80180e4:	d004      	beq.n	80180f0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80180e6:	69fb      	ldr	r3, [r7, #28]
 80180e8:	6a1b      	ldr	r3, [r3, #32]
 80180ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80180ec:	4313      	orrs	r3, r2
 80180ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80180f0:	69fb      	ldr	r3, [r7, #28]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	689b      	ldr	r3, [r3, #8]
 80180f6:	4ab4      	ldr	r2, [pc, #720]	@ (80183c8 <UART_SetConfig+0x34c>)
 80180f8:	4013      	ands	r3, r2
 80180fa:	0019      	movs	r1, r3
 80180fc:	69fb      	ldr	r3, [r7, #28]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018102:	430a      	orrs	r2, r1
 8018104:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018106:	69fb      	ldr	r3, [r7, #28]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	4ab0      	ldr	r2, [pc, #704]	@ (80183cc <UART_SetConfig+0x350>)
 801810c:	4293      	cmp	r3, r2
 801810e:	d131      	bne.n	8018174 <UART_SetConfig+0xf8>
 8018110:	4baf      	ldr	r3, [pc, #700]	@ (80183d0 <UART_SetConfig+0x354>)
 8018112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018114:	2203      	movs	r2, #3
 8018116:	4013      	ands	r3, r2
 8018118:	2b03      	cmp	r3, #3
 801811a:	d01d      	beq.n	8018158 <UART_SetConfig+0xdc>
 801811c:	d823      	bhi.n	8018166 <UART_SetConfig+0xea>
 801811e:	2b02      	cmp	r3, #2
 8018120:	d00c      	beq.n	801813c <UART_SetConfig+0xc0>
 8018122:	d820      	bhi.n	8018166 <UART_SetConfig+0xea>
 8018124:	2b00      	cmp	r3, #0
 8018126:	d002      	beq.n	801812e <UART_SetConfig+0xb2>
 8018128:	2b01      	cmp	r3, #1
 801812a:	d00e      	beq.n	801814a <UART_SetConfig+0xce>
 801812c:	e01b      	b.n	8018166 <UART_SetConfig+0xea>
 801812e:	231b      	movs	r3, #27
 8018130:	2218      	movs	r2, #24
 8018132:	189b      	adds	r3, r3, r2
 8018134:	19db      	adds	r3, r3, r7
 8018136:	2201      	movs	r2, #1
 8018138:	701a      	strb	r2, [r3, #0]
 801813a:	e0b4      	b.n	80182a6 <UART_SetConfig+0x22a>
 801813c:	231b      	movs	r3, #27
 801813e:	2218      	movs	r2, #24
 8018140:	189b      	adds	r3, r3, r2
 8018142:	19db      	adds	r3, r3, r7
 8018144:	2202      	movs	r2, #2
 8018146:	701a      	strb	r2, [r3, #0]
 8018148:	e0ad      	b.n	80182a6 <UART_SetConfig+0x22a>
 801814a:	231b      	movs	r3, #27
 801814c:	2218      	movs	r2, #24
 801814e:	189b      	adds	r3, r3, r2
 8018150:	19db      	adds	r3, r3, r7
 8018152:	2204      	movs	r2, #4
 8018154:	701a      	strb	r2, [r3, #0]
 8018156:	e0a6      	b.n	80182a6 <UART_SetConfig+0x22a>
 8018158:	231b      	movs	r3, #27
 801815a:	2218      	movs	r2, #24
 801815c:	189b      	adds	r3, r3, r2
 801815e:	19db      	adds	r3, r3, r7
 8018160:	2208      	movs	r2, #8
 8018162:	701a      	strb	r2, [r3, #0]
 8018164:	e09f      	b.n	80182a6 <UART_SetConfig+0x22a>
 8018166:	231b      	movs	r3, #27
 8018168:	2218      	movs	r2, #24
 801816a:	189b      	adds	r3, r3, r2
 801816c:	19db      	adds	r3, r3, r7
 801816e:	2210      	movs	r2, #16
 8018170:	701a      	strb	r2, [r3, #0]
 8018172:	e098      	b.n	80182a6 <UART_SetConfig+0x22a>
 8018174:	69fb      	ldr	r3, [r7, #28]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	4a96      	ldr	r2, [pc, #600]	@ (80183d4 <UART_SetConfig+0x358>)
 801817a:	4293      	cmp	r3, r2
 801817c:	d131      	bne.n	80181e2 <UART_SetConfig+0x166>
 801817e:	4b94      	ldr	r3, [pc, #592]	@ (80183d0 <UART_SetConfig+0x354>)
 8018180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018182:	220c      	movs	r2, #12
 8018184:	4013      	ands	r3, r2
 8018186:	2b0c      	cmp	r3, #12
 8018188:	d01d      	beq.n	80181c6 <UART_SetConfig+0x14a>
 801818a:	d823      	bhi.n	80181d4 <UART_SetConfig+0x158>
 801818c:	2b08      	cmp	r3, #8
 801818e:	d00c      	beq.n	80181aa <UART_SetConfig+0x12e>
 8018190:	d820      	bhi.n	80181d4 <UART_SetConfig+0x158>
 8018192:	2b00      	cmp	r3, #0
 8018194:	d002      	beq.n	801819c <UART_SetConfig+0x120>
 8018196:	2b04      	cmp	r3, #4
 8018198:	d00e      	beq.n	80181b8 <UART_SetConfig+0x13c>
 801819a:	e01b      	b.n	80181d4 <UART_SetConfig+0x158>
 801819c:	231b      	movs	r3, #27
 801819e:	2218      	movs	r2, #24
 80181a0:	189b      	adds	r3, r3, r2
 80181a2:	19db      	adds	r3, r3, r7
 80181a4:	2200      	movs	r2, #0
 80181a6:	701a      	strb	r2, [r3, #0]
 80181a8:	e07d      	b.n	80182a6 <UART_SetConfig+0x22a>
 80181aa:	231b      	movs	r3, #27
 80181ac:	2218      	movs	r2, #24
 80181ae:	189b      	adds	r3, r3, r2
 80181b0:	19db      	adds	r3, r3, r7
 80181b2:	2202      	movs	r2, #2
 80181b4:	701a      	strb	r2, [r3, #0]
 80181b6:	e076      	b.n	80182a6 <UART_SetConfig+0x22a>
 80181b8:	231b      	movs	r3, #27
 80181ba:	2218      	movs	r2, #24
 80181bc:	189b      	adds	r3, r3, r2
 80181be:	19db      	adds	r3, r3, r7
 80181c0:	2204      	movs	r2, #4
 80181c2:	701a      	strb	r2, [r3, #0]
 80181c4:	e06f      	b.n	80182a6 <UART_SetConfig+0x22a>
 80181c6:	231b      	movs	r3, #27
 80181c8:	2218      	movs	r2, #24
 80181ca:	189b      	adds	r3, r3, r2
 80181cc:	19db      	adds	r3, r3, r7
 80181ce:	2208      	movs	r2, #8
 80181d0:	701a      	strb	r2, [r3, #0]
 80181d2:	e068      	b.n	80182a6 <UART_SetConfig+0x22a>
 80181d4:	231b      	movs	r3, #27
 80181d6:	2218      	movs	r2, #24
 80181d8:	189b      	adds	r3, r3, r2
 80181da:	19db      	adds	r3, r3, r7
 80181dc:	2210      	movs	r2, #16
 80181de:	701a      	strb	r2, [r3, #0]
 80181e0:	e061      	b.n	80182a6 <UART_SetConfig+0x22a>
 80181e2:	69fb      	ldr	r3, [r7, #28]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	4a7c      	ldr	r2, [pc, #496]	@ (80183d8 <UART_SetConfig+0x35c>)
 80181e8:	4293      	cmp	r3, r2
 80181ea:	d106      	bne.n	80181fa <UART_SetConfig+0x17e>
 80181ec:	231b      	movs	r3, #27
 80181ee:	2218      	movs	r2, #24
 80181f0:	189b      	adds	r3, r3, r2
 80181f2:	19db      	adds	r3, r3, r7
 80181f4:	2200      	movs	r2, #0
 80181f6:	701a      	strb	r2, [r3, #0]
 80181f8:	e055      	b.n	80182a6 <UART_SetConfig+0x22a>
 80181fa:	69fb      	ldr	r3, [r7, #28]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	4a77      	ldr	r2, [pc, #476]	@ (80183dc <UART_SetConfig+0x360>)
 8018200:	4293      	cmp	r3, r2
 8018202:	d106      	bne.n	8018212 <UART_SetConfig+0x196>
 8018204:	231b      	movs	r3, #27
 8018206:	2218      	movs	r2, #24
 8018208:	189b      	adds	r3, r3, r2
 801820a:	19db      	adds	r3, r3, r7
 801820c:	2200      	movs	r2, #0
 801820e:	701a      	strb	r2, [r3, #0]
 8018210:	e049      	b.n	80182a6 <UART_SetConfig+0x22a>
 8018212:	69fb      	ldr	r3, [r7, #28]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	4a6b      	ldr	r2, [pc, #428]	@ (80183c4 <UART_SetConfig+0x348>)
 8018218:	4293      	cmp	r3, r2
 801821a:	d13e      	bne.n	801829a <UART_SetConfig+0x21e>
 801821c:	4b6c      	ldr	r3, [pc, #432]	@ (80183d0 <UART_SetConfig+0x354>)
 801821e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018220:	23c0      	movs	r3, #192	@ 0xc0
 8018222:	011b      	lsls	r3, r3, #4
 8018224:	4013      	ands	r3, r2
 8018226:	22c0      	movs	r2, #192	@ 0xc0
 8018228:	0112      	lsls	r2, r2, #4
 801822a:	4293      	cmp	r3, r2
 801822c:	d027      	beq.n	801827e <UART_SetConfig+0x202>
 801822e:	22c0      	movs	r2, #192	@ 0xc0
 8018230:	0112      	lsls	r2, r2, #4
 8018232:	4293      	cmp	r3, r2
 8018234:	d82a      	bhi.n	801828c <UART_SetConfig+0x210>
 8018236:	2280      	movs	r2, #128	@ 0x80
 8018238:	0112      	lsls	r2, r2, #4
 801823a:	4293      	cmp	r3, r2
 801823c:	d011      	beq.n	8018262 <UART_SetConfig+0x1e6>
 801823e:	2280      	movs	r2, #128	@ 0x80
 8018240:	0112      	lsls	r2, r2, #4
 8018242:	4293      	cmp	r3, r2
 8018244:	d822      	bhi.n	801828c <UART_SetConfig+0x210>
 8018246:	2b00      	cmp	r3, #0
 8018248:	d004      	beq.n	8018254 <UART_SetConfig+0x1d8>
 801824a:	2280      	movs	r2, #128	@ 0x80
 801824c:	00d2      	lsls	r2, r2, #3
 801824e:	4293      	cmp	r3, r2
 8018250:	d00e      	beq.n	8018270 <UART_SetConfig+0x1f4>
 8018252:	e01b      	b.n	801828c <UART_SetConfig+0x210>
 8018254:	231b      	movs	r3, #27
 8018256:	2218      	movs	r2, #24
 8018258:	189b      	adds	r3, r3, r2
 801825a:	19db      	adds	r3, r3, r7
 801825c:	2200      	movs	r2, #0
 801825e:	701a      	strb	r2, [r3, #0]
 8018260:	e021      	b.n	80182a6 <UART_SetConfig+0x22a>
 8018262:	231b      	movs	r3, #27
 8018264:	2218      	movs	r2, #24
 8018266:	189b      	adds	r3, r3, r2
 8018268:	19db      	adds	r3, r3, r7
 801826a:	2202      	movs	r2, #2
 801826c:	701a      	strb	r2, [r3, #0]
 801826e:	e01a      	b.n	80182a6 <UART_SetConfig+0x22a>
 8018270:	231b      	movs	r3, #27
 8018272:	2218      	movs	r2, #24
 8018274:	189b      	adds	r3, r3, r2
 8018276:	19db      	adds	r3, r3, r7
 8018278:	2204      	movs	r2, #4
 801827a:	701a      	strb	r2, [r3, #0]
 801827c:	e013      	b.n	80182a6 <UART_SetConfig+0x22a>
 801827e:	231b      	movs	r3, #27
 8018280:	2218      	movs	r2, #24
 8018282:	189b      	adds	r3, r3, r2
 8018284:	19db      	adds	r3, r3, r7
 8018286:	2208      	movs	r2, #8
 8018288:	701a      	strb	r2, [r3, #0]
 801828a:	e00c      	b.n	80182a6 <UART_SetConfig+0x22a>
 801828c:	231b      	movs	r3, #27
 801828e:	2218      	movs	r2, #24
 8018290:	189b      	adds	r3, r3, r2
 8018292:	19db      	adds	r3, r3, r7
 8018294:	2210      	movs	r2, #16
 8018296:	701a      	strb	r2, [r3, #0]
 8018298:	e005      	b.n	80182a6 <UART_SetConfig+0x22a>
 801829a:	231b      	movs	r3, #27
 801829c:	2218      	movs	r2, #24
 801829e:	189b      	adds	r3, r3, r2
 80182a0:	19db      	adds	r3, r3, r7
 80182a2:	2210      	movs	r2, #16
 80182a4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80182a6:	69fb      	ldr	r3, [r7, #28]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	4a46      	ldr	r2, [pc, #280]	@ (80183c4 <UART_SetConfig+0x348>)
 80182ac:	4293      	cmp	r3, r2
 80182ae:	d000      	beq.n	80182b2 <UART_SetConfig+0x236>
 80182b0:	e09a      	b.n	80183e8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80182b2:	231b      	movs	r3, #27
 80182b4:	2218      	movs	r2, #24
 80182b6:	189b      	adds	r3, r3, r2
 80182b8:	19db      	adds	r3, r3, r7
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	2b08      	cmp	r3, #8
 80182be:	d01d      	beq.n	80182fc <UART_SetConfig+0x280>
 80182c0:	dc20      	bgt.n	8018304 <UART_SetConfig+0x288>
 80182c2:	2b04      	cmp	r3, #4
 80182c4:	d015      	beq.n	80182f2 <UART_SetConfig+0x276>
 80182c6:	dc1d      	bgt.n	8018304 <UART_SetConfig+0x288>
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d002      	beq.n	80182d2 <UART_SetConfig+0x256>
 80182cc:	2b02      	cmp	r3, #2
 80182ce:	d005      	beq.n	80182dc <UART_SetConfig+0x260>
 80182d0:	e018      	b.n	8018304 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80182d2:	f7fd fe4b 	bl	8015f6c <HAL_RCC_GetPCLK1Freq>
 80182d6:	0003      	movs	r3, r0
 80182d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80182da:	e01c      	b.n	8018316 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80182dc:	4b3c      	ldr	r3, [pc, #240]	@ (80183d0 <UART_SetConfig+0x354>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	2210      	movs	r2, #16
 80182e2:	4013      	ands	r3, r2
 80182e4:	d002      	beq.n	80182ec <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80182e6:	4b3e      	ldr	r3, [pc, #248]	@ (80183e0 <UART_SetConfig+0x364>)
 80182e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80182ea:	e014      	b.n	8018316 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80182ec:	4b3d      	ldr	r3, [pc, #244]	@ (80183e4 <UART_SetConfig+0x368>)
 80182ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80182f0:	e011      	b.n	8018316 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80182f2:	f7fd fd8b 	bl	8015e0c <HAL_RCC_GetSysClockFreq>
 80182f6:	0003      	movs	r3, r0
 80182f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80182fa:	e00c      	b.n	8018316 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80182fc:	2380      	movs	r3, #128	@ 0x80
 80182fe:	021b      	lsls	r3, r3, #8
 8018300:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018302:	e008      	b.n	8018316 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8018304:	2300      	movs	r3, #0
 8018306:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018308:	231a      	movs	r3, #26
 801830a:	2218      	movs	r2, #24
 801830c:	189b      	adds	r3, r3, r2
 801830e:	19db      	adds	r3, r3, r7
 8018310:	2201      	movs	r2, #1
 8018312:	701a      	strb	r2, [r3, #0]
        break;
 8018314:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018318:	2b00      	cmp	r3, #0
 801831a:	d100      	bne.n	801831e <UART_SetConfig+0x2a2>
 801831c:	e133      	b.n	8018586 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801831e:	69fb      	ldr	r3, [r7, #28]
 8018320:	685a      	ldr	r2, [r3, #4]
 8018322:	0013      	movs	r3, r2
 8018324:	005b      	lsls	r3, r3, #1
 8018326:	189b      	adds	r3, r3, r2
 8018328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801832a:	429a      	cmp	r2, r3
 801832c:	d305      	bcc.n	801833a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801832e:	69fb      	ldr	r3, [r7, #28]
 8018330:	685b      	ldr	r3, [r3, #4]
 8018332:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018336:	429a      	cmp	r2, r3
 8018338:	d906      	bls.n	8018348 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801833a:	231a      	movs	r3, #26
 801833c:	2218      	movs	r2, #24
 801833e:	189b      	adds	r3, r3, r2
 8018340:	19db      	adds	r3, r3, r7
 8018342:	2201      	movs	r2, #1
 8018344:	701a      	strb	r2, [r3, #0]
 8018346:	e11e      	b.n	8018586 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8018348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801834a:	613b      	str	r3, [r7, #16]
 801834c:	2300      	movs	r3, #0
 801834e:	617b      	str	r3, [r7, #20]
 8018350:	6939      	ldr	r1, [r7, #16]
 8018352:	697a      	ldr	r2, [r7, #20]
 8018354:	000b      	movs	r3, r1
 8018356:	0e1b      	lsrs	r3, r3, #24
 8018358:	0010      	movs	r0, r2
 801835a:	0205      	lsls	r5, r0, #8
 801835c:	431d      	orrs	r5, r3
 801835e:	000b      	movs	r3, r1
 8018360:	021c      	lsls	r4, r3, #8
 8018362:	69fb      	ldr	r3, [r7, #28]
 8018364:	685b      	ldr	r3, [r3, #4]
 8018366:	085b      	lsrs	r3, r3, #1
 8018368:	60bb      	str	r3, [r7, #8]
 801836a:	2300      	movs	r3, #0
 801836c:	60fb      	str	r3, [r7, #12]
 801836e:	68b8      	ldr	r0, [r7, #8]
 8018370:	68f9      	ldr	r1, [r7, #12]
 8018372:	1900      	adds	r0, r0, r4
 8018374:	4169      	adcs	r1, r5
 8018376:	69fb      	ldr	r3, [r7, #28]
 8018378:	685b      	ldr	r3, [r3, #4]
 801837a:	603b      	str	r3, [r7, #0]
 801837c:	2300      	movs	r3, #0
 801837e:	607b      	str	r3, [r7, #4]
 8018380:	683a      	ldr	r2, [r7, #0]
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	f7e8 f8fc 	bl	8000580 <__aeabi_uldivmod>
 8018388:	0002      	movs	r2, r0
 801838a:	000b      	movs	r3, r1
 801838c:	0013      	movs	r3, r2
 801838e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018392:	23c0      	movs	r3, #192	@ 0xc0
 8018394:	009b      	lsls	r3, r3, #2
 8018396:	429a      	cmp	r2, r3
 8018398:	d309      	bcc.n	80183ae <UART_SetConfig+0x332>
 801839a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801839c:	2380      	movs	r3, #128	@ 0x80
 801839e:	035b      	lsls	r3, r3, #13
 80183a0:	429a      	cmp	r2, r3
 80183a2:	d204      	bcs.n	80183ae <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80183a4:	69fb      	ldr	r3, [r7, #28]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80183aa:	60da      	str	r2, [r3, #12]
 80183ac:	e0eb      	b.n	8018586 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80183ae:	231a      	movs	r3, #26
 80183b0:	2218      	movs	r2, #24
 80183b2:	189b      	adds	r3, r3, r2
 80183b4:	19db      	adds	r3, r3, r7
 80183b6:	2201      	movs	r2, #1
 80183b8:	701a      	strb	r2, [r3, #0]
 80183ba:	e0e4      	b.n	8018586 <UART_SetConfig+0x50a>
 80183bc:	efff69f3 	.word	0xefff69f3
 80183c0:	ffffcfff 	.word	0xffffcfff
 80183c4:	40004800 	.word	0x40004800
 80183c8:	fffff4ff 	.word	0xfffff4ff
 80183cc:	40013800 	.word	0x40013800
 80183d0:	40021000 	.word	0x40021000
 80183d4:	40004400 	.word	0x40004400
 80183d8:	40004c00 	.word	0x40004c00
 80183dc:	40005000 	.word	0x40005000
 80183e0:	003d0900 	.word	0x003d0900
 80183e4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80183e8:	69fb      	ldr	r3, [r7, #28]
 80183ea:	69da      	ldr	r2, [r3, #28]
 80183ec:	2380      	movs	r3, #128	@ 0x80
 80183ee:	021b      	lsls	r3, r3, #8
 80183f0:	429a      	cmp	r2, r3
 80183f2:	d000      	beq.n	80183f6 <UART_SetConfig+0x37a>
 80183f4:	e070      	b.n	80184d8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80183f6:	231b      	movs	r3, #27
 80183f8:	2218      	movs	r2, #24
 80183fa:	189b      	adds	r3, r3, r2
 80183fc:	19db      	adds	r3, r3, r7
 80183fe:	781b      	ldrb	r3, [r3, #0]
 8018400:	2b08      	cmp	r3, #8
 8018402:	d822      	bhi.n	801844a <UART_SetConfig+0x3ce>
 8018404:	009a      	lsls	r2, r3, #2
 8018406:	4b67      	ldr	r3, [pc, #412]	@ (80185a4 <UART_SetConfig+0x528>)
 8018408:	18d3      	adds	r3, r2, r3
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801840e:	f7fd fdad 	bl	8015f6c <HAL_RCC_GetPCLK1Freq>
 8018412:	0003      	movs	r3, r0
 8018414:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018416:	e021      	b.n	801845c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018418:	f7fd fdbe 	bl	8015f98 <HAL_RCC_GetPCLK2Freq>
 801841c:	0003      	movs	r3, r0
 801841e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018420:	e01c      	b.n	801845c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018422:	4b61      	ldr	r3, [pc, #388]	@ (80185a8 <UART_SetConfig+0x52c>)
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	2210      	movs	r2, #16
 8018428:	4013      	ands	r3, r2
 801842a:	d002      	beq.n	8018432 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801842c:	4b5f      	ldr	r3, [pc, #380]	@ (80185ac <UART_SetConfig+0x530>)
 801842e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018430:	e014      	b.n	801845c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8018432:	4b5f      	ldr	r3, [pc, #380]	@ (80185b0 <UART_SetConfig+0x534>)
 8018434:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018436:	e011      	b.n	801845c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018438:	f7fd fce8 	bl	8015e0c <HAL_RCC_GetSysClockFreq>
 801843c:	0003      	movs	r3, r0
 801843e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018440:	e00c      	b.n	801845c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018442:	2380      	movs	r3, #128	@ 0x80
 8018444:	021b      	lsls	r3, r3, #8
 8018446:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018448:	e008      	b.n	801845c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801844a:	2300      	movs	r3, #0
 801844c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801844e:	231a      	movs	r3, #26
 8018450:	2218      	movs	r2, #24
 8018452:	189b      	adds	r3, r3, r2
 8018454:	19db      	adds	r3, r3, r7
 8018456:	2201      	movs	r2, #1
 8018458:	701a      	strb	r2, [r3, #0]
        break;
 801845a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801845c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801845e:	2b00      	cmp	r3, #0
 8018460:	d100      	bne.n	8018464 <UART_SetConfig+0x3e8>
 8018462:	e090      	b.n	8018586 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8018464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018466:	005a      	lsls	r2, r3, #1
 8018468:	69fb      	ldr	r3, [r7, #28]
 801846a:	685b      	ldr	r3, [r3, #4]
 801846c:	085b      	lsrs	r3, r3, #1
 801846e:	18d2      	adds	r2, r2, r3
 8018470:	69fb      	ldr	r3, [r7, #28]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	0019      	movs	r1, r3
 8018476:	0010      	movs	r0, r2
 8018478:	f7e7 fe94 	bl	80001a4 <__udivsi3>
 801847c:	0003      	movs	r3, r0
 801847e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018482:	2b0f      	cmp	r3, #15
 8018484:	d921      	bls.n	80184ca <UART_SetConfig+0x44e>
 8018486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018488:	2380      	movs	r3, #128	@ 0x80
 801848a:	025b      	lsls	r3, r3, #9
 801848c:	429a      	cmp	r2, r3
 801848e:	d21c      	bcs.n	80184ca <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018492:	b29a      	uxth	r2, r3
 8018494:	200e      	movs	r0, #14
 8018496:	2418      	movs	r4, #24
 8018498:	1903      	adds	r3, r0, r4
 801849a:	19db      	adds	r3, r3, r7
 801849c:	210f      	movs	r1, #15
 801849e:	438a      	bics	r2, r1
 80184a0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80184a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184a4:	085b      	lsrs	r3, r3, #1
 80184a6:	b29b      	uxth	r3, r3
 80184a8:	2207      	movs	r2, #7
 80184aa:	4013      	ands	r3, r2
 80184ac:	b299      	uxth	r1, r3
 80184ae:	1903      	adds	r3, r0, r4
 80184b0:	19db      	adds	r3, r3, r7
 80184b2:	1902      	adds	r2, r0, r4
 80184b4:	19d2      	adds	r2, r2, r7
 80184b6:	8812      	ldrh	r2, [r2, #0]
 80184b8:	430a      	orrs	r2, r1
 80184ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80184bc:	69fb      	ldr	r3, [r7, #28]
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	1902      	adds	r2, r0, r4
 80184c2:	19d2      	adds	r2, r2, r7
 80184c4:	8812      	ldrh	r2, [r2, #0]
 80184c6:	60da      	str	r2, [r3, #12]
 80184c8:	e05d      	b.n	8018586 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80184ca:	231a      	movs	r3, #26
 80184cc:	2218      	movs	r2, #24
 80184ce:	189b      	adds	r3, r3, r2
 80184d0:	19db      	adds	r3, r3, r7
 80184d2:	2201      	movs	r2, #1
 80184d4:	701a      	strb	r2, [r3, #0]
 80184d6:	e056      	b.n	8018586 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80184d8:	231b      	movs	r3, #27
 80184da:	2218      	movs	r2, #24
 80184dc:	189b      	adds	r3, r3, r2
 80184de:	19db      	adds	r3, r3, r7
 80184e0:	781b      	ldrb	r3, [r3, #0]
 80184e2:	2b08      	cmp	r3, #8
 80184e4:	d822      	bhi.n	801852c <UART_SetConfig+0x4b0>
 80184e6:	009a      	lsls	r2, r3, #2
 80184e8:	4b32      	ldr	r3, [pc, #200]	@ (80185b4 <UART_SetConfig+0x538>)
 80184ea:	18d3      	adds	r3, r2, r3
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80184f0:	f7fd fd3c 	bl	8015f6c <HAL_RCC_GetPCLK1Freq>
 80184f4:	0003      	movs	r3, r0
 80184f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80184f8:	e021      	b.n	801853e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80184fa:	f7fd fd4d 	bl	8015f98 <HAL_RCC_GetPCLK2Freq>
 80184fe:	0003      	movs	r3, r0
 8018500:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018502:	e01c      	b.n	801853e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018504:	4b28      	ldr	r3, [pc, #160]	@ (80185a8 <UART_SetConfig+0x52c>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	2210      	movs	r2, #16
 801850a:	4013      	ands	r3, r2
 801850c:	d002      	beq.n	8018514 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801850e:	4b27      	ldr	r3, [pc, #156]	@ (80185ac <UART_SetConfig+0x530>)
 8018510:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018512:	e014      	b.n	801853e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8018514:	4b26      	ldr	r3, [pc, #152]	@ (80185b0 <UART_SetConfig+0x534>)
 8018516:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018518:	e011      	b.n	801853e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801851a:	f7fd fc77 	bl	8015e0c <HAL_RCC_GetSysClockFreq>
 801851e:	0003      	movs	r3, r0
 8018520:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018522:	e00c      	b.n	801853e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018524:	2380      	movs	r3, #128	@ 0x80
 8018526:	021b      	lsls	r3, r3, #8
 8018528:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801852a:	e008      	b.n	801853e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801852c:	2300      	movs	r3, #0
 801852e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018530:	231a      	movs	r3, #26
 8018532:	2218      	movs	r2, #24
 8018534:	189b      	adds	r3, r3, r2
 8018536:	19db      	adds	r3, r3, r7
 8018538:	2201      	movs	r2, #1
 801853a:	701a      	strb	r2, [r3, #0]
        break;
 801853c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801853e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018540:	2b00      	cmp	r3, #0
 8018542:	d020      	beq.n	8018586 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8018544:	69fb      	ldr	r3, [r7, #28]
 8018546:	685b      	ldr	r3, [r3, #4]
 8018548:	085a      	lsrs	r2, r3, #1
 801854a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801854c:	18d2      	adds	r2, r2, r3
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	685b      	ldr	r3, [r3, #4]
 8018552:	0019      	movs	r1, r3
 8018554:	0010      	movs	r0, r2
 8018556:	f7e7 fe25 	bl	80001a4 <__udivsi3>
 801855a:	0003      	movs	r3, r0
 801855c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801855e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018560:	2b0f      	cmp	r3, #15
 8018562:	d90a      	bls.n	801857a <UART_SetConfig+0x4fe>
 8018564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018566:	2380      	movs	r3, #128	@ 0x80
 8018568:	025b      	lsls	r3, r3, #9
 801856a:	429a      	cmp	r2, r3
 801856c:	d205      	bcs.n	801857a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801856e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018570:	b29a      	uxth	r2, r3
 8018572:	69fb      	ldr	r3, [r7, #28]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	60da      	str	r2, [r3, #12]
 8018578:	e005      	b.n	8018586 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801857a:	231a      	movs	r3, #26
 801857c:	2218      	movs	r2, #24
 801857e:	189b      	adds	r3, r3, r2
 8018580:	19db      	adds	r3, r3, r7
 8018582:	2201      	movs	r2, #1
 8018584:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018586:	69fb      	ldr	r3, [r7, #28]
 8018588:	2200      	movs	r2, #0
 801858a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801858c:	69fb      	ldr	r3, [r7, #28]
 801858e:	2200      	movs	r2, #0
 8018590:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8018592:	231a      	movs	r3, #26
 8018594:	2218      	movs	r2, #24
 8018596:	189b      	adds	r3, r3, r2
 8018598:	19db      	adds	r3, r3, r7
 801859a:	781b      	ldrb	r3, [r3, #0]
}
 801859c:	0018      	movs	r0, r3
 801859e:	46bd      	mov	sp, r7
 80185a0:	b00e      	add	sp, #56	@ 0x38
 80185a2:	bdb0      	pop	{r4, r5, r7, pc}
 80185a4:	08025d40 	.word	0x08025d40
 80185a8:	40021000 	.word	0x40021000
 80185ac:	003d0900 	.word	0x003d0900
 80185b0:	00f42400 	.word	0x00f42400
 80185b4:	08025d64 	.word	0x08025d64

080185b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b082      	sub	sp, #8
 80185bc:	af00      	add	r7, sp, #0
 80185be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185c4:	2201      	movs	r2, #1
 80185c6:	4013      	ands	r3, r2
 80185c8:	d00b      	beq.n	80185e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	685b      	ldr	r3, [r3, #4]
 80185d0:	4a4a      	ldr	r2, [pc, #296]	@ (80186fc <UART_AdvFeatureConfig+0x144>)
 80185d2:	4013      	ands	r3, r2
 80185d4:	0019      	movs	r1, r3
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	430a      	orrs	r2, r1
 80185e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185e6:	2202      	movs	r2, #2
 80185e8:	4013      	ands	r3, r2
 80185ea:	d00b      	beq.n	8018604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	685b      	ldr	r3, [r3, #4]
 80185f2:	4a43      	ldr	r2, [pc, #268]	@ (8018700 <UART_AdvFeatureConfig+0x148>)
 80185f4:	4013      	ands	r3, r2
 80185f6:	0019      	movs	r1, r3
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	430a      	orrs	r2, r1
 8018602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018608:	2204      	movs	r2, #4
 801860a:	4013      	ands	r3, r2
 801860c:	d00b      	beq.n	8018626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	685b      	ldr	r3, [r3, #4]
 8018614:	4a3b      	ldr	r2, [pc, #236]	@ (8018704 <UART_AdvFeatureConfig+0x14c>)
 8018616:	4013      	ands	r3, r2
 8018618:	0019      	movs	r1, r3
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	430a      	orrs	r2, r1
 8018624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801862a:	2208      	movs	r2, #8
 801862c:	4013      	ands	r3, r2
 801862e:	d00b      	beq.n	8018648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	685b      	ldr	r3, [r3, #4]
 8018636:	4a34      	ldr	r2, [pc, #208]	@ (8018708 <UART_AdvFeatureConfig+0x150>)
 8018638:	4013      	ands	r3, r2
 801863a:	0019      	movs	r1, r3
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	430a      	orrs	r2, r1
 8018646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801864c:	2210      	movs	r2, #16
 801864e:	4013      	ands	r3, r2
 8018650:	d00b      	beq.n	801866a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	689b      	ldr	r3, [r3, #8]
 8018658:	4a2c      	ldr	r2, [pc, #176]	@ (801870c <UART_AdvFeatureConfig+0x154>)
 801865a:	4013      	ands	r3, r2
 801865c:	0019      	movs	r1, r3
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	430a      	orrs	r2, r1
 8018668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801866e:	2220      	movs	r2, #32
 8018670:	4013      	ands	r3, r2
 8018672:	d00b      	beq.n	801868c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	689b      	ldr	r3, [r3, #8]
 801867a:	4a25      	ldr	r2, [pc, #148]	@ (8018710 <UART_AdvFeatureConfig+0x158>)
 801867c:	4013      	ands	r3, r2
 801867e:	0019      	movs	r1, r3
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	430a      	orrs	r2, r1
 801868a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018690:	2240      	movs	r2, #64	@ 0x40
 8018692:	4013      	ands	r3, r2
 8018694:	d01d      	beq.n	80186d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	685b      	ldr	r3, [r3, #4]
 801869c:	4a1d      	ldr	r2, [pc, #116]	@ (8018714 <UART_AdvFeatureConfig+0x15c>)
 801869e:	4013      	ands	r3, r2
 80186a0:	0019      	movs	r1, r3
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	430a      	orrs	r2, r1
 80186ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80186b2:	2380      	movs	r3, #128	@ 0x80
 80186b4:	035b      	lsls	r3, r3, #13
 80186b6:	429a      	cmp	r2, r3
 80186b8:	d10b      	bne.n	80186d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	685b      	ldr	r3, [r3, #4]
 80186c0:	4a15      	ldr	r2, [pc, #84]	@ (8018718 <UART_AdvFeatureConfig+0x160>)
 80186c2:	4013      	ands	r3, r2
 80186c4:	0019      	movs	r1, r3
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	430a      	orrs	r2, r1
 80186d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186d6:	2280      	movs	r2, #128	@ 0x80
 80186d8:	4013      	ands	r3, r2
 80186da:	d00b      	beq.n	80186f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	685b      	ldr	r3, [r3, #4]
 80186e2:	4a0e      	ldr	r2, [pc, #56]	@ (801871c <UART_AdvFeatureConfig+0x164>)
 80186e4:	4013      	ands	r3, r2
 80186e6:	0019      	movs	r1, r3
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	430a      	orrs	r2, r1
 80186f2:	605a      	str	r2, [r3, #4]
  }
}
 80186f4:	46c0      	nop			@ (mov r8, r8)
 80186f6:	46bd      	mov	sp, r7
 80186f8:	b002      	add	sp, #8
 80186fa:	bd80      	pop	{r7, pc}
 80186fc:	fffdffff 	.word	0xfffdffff
 8018700:	fffeffff 	.word	0xfffeffff
 8018704:	fffbffff 	.word	0xfffbffff
 8018708:	ffff7fff 	.word	0xffff7fff
 801870c:	ffffefff 	.word	0xffffefff
 8018710:	ffffdfff 	.word	0xffffdfff
 8018714:	ffefffff 	.word	0xffefffff
 8018718:	ff9fffff 	.word	0xff9fffff
 801871c:	fff7ffff 	.word	0xfff7ffff

08018720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b092      	sub	sp, #72	@ 0x48
 8018724:	af02      	add	r7, sp, #8
 8018726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2284      	movs	r2, #132	@ 0x84
 801872c:	2100      	movs	r1, #0
 801872e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018730:	f7f6 fd20 	bl	800f174 <HAL_GetTick>
 8018734:	0003      	movs	r3, r0
 8018736:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	2208      	movs	r2, #8
 8018740:	4013      	ands	r3, r2
 8018742:	2b08      	cmp	r3, #8
 8018744:	d12c      	bne.n	80187a0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018748:	2280      	movs	r2, #128	@ 0x80
 801874a:	0391      	lsls	r1, r2, #14
 801874c:	6878      	ldr	r0, [r7, #4]
 801874e:	4a46      	ldr	r2, [pc, #280]	@ (8018868 <UART_CheckIdleState+0x148>)
 8018750:	9200      	str	r2, [sp, #0]
 8018752:	2200      	movs	r2, #0
 8018754:	f000 f88c 	bl	8018870 <UART_WaitOnFlagUntilTimeout>
 8018758:	1e03      	subs	r3, r0, #0
 801875a:	d021      	beq.n	80187a0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801875c:	f3ef 8310 	mrs	r3, PRIMASK
 8018760:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8018764:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018766:	2301      	movs	r3, #1
 8018768:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801876a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801876c:	f383 8810 	msr	PRIMASK, r3
}
 8018770:	46c0      	nop			@ (mov r8, r8)
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	681a      	ldr	r2, [r3, #0]
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	2180      	movs	r1, #128	@ 0x80
 801877e:	438a      	bics	r2, r1
 8018780:	601a      	str	r2, [r3, #0]
 8018782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018788:	f383 8810 	msr	PRIMASK, r3
}
 801878c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	2220      	movs	r2, #32
 8018792:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	2278      	movs	r2, #120	@ 0x78
 8018798:	2100      	movs	r1, #0
 801879a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801879c:	2303      	movs	r3, #3
 801879e:	e05f      	b.n	8018860 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	2204      	movs	r2, #4
 80187a8:	4013      	ands	r3, r2
 80187aa:	2b04      	cmp	r3, #4
 80187ac:	d146      	bne.n	801883c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80187ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187b0:	2280      	movs	r2, #128	@ 0x80
 80187b2:	03d1      	lsls	r1, r2, #15
 80187b4:	6878      	ldr	r0, [r7, #4]
 80187b6:	4a2c      	ldr	r2, [pc, #176]	@ (8018868 <UART_CheckIdleState+0x148>)
 80187b8:	9200      	str	r2, [sp, #0]
 80187ba:	2200      	movs	r2, #0
 80187bc:	f000 f858 	bl	8018870 <UART_WaitOnFlagUntilTimeout>
 80187c0:	1e03      	subs	r3, r0, #0
 80187c2:	d03b      	beq.n	801883c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187c4:	f3ef 8310 	mrs	r3, PRIMASK
 80187c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80187ca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80187cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80187ce:	2301      	movs	r3, #1
 80187d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187d2:	693b      	ldr	r3, [r7, #16]
 80187d4:	f383 8810 	msr	PRIMASK, r3
}
 80187d8:	46c0      	nop			@ (mov r8, r8)
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	681a      	ldr	r2, [r3, #0]
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	4921      	ldr	r1, [pc, #132]	@ (801886c <UART_CheckIdleState+0x14c>)
 80187e6:	400a      	ands	r2, r1
 80187e8:	601a      	str	r2, [r3, #0]
 80187ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187ee:	697b      	ldr	r3, [r7, #20]
 80187f0:	f383 8810 	msr	PRIMASK, r3
}
 80187f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187f6:	f3ef 8310 	mrs	r3, PRIMASK
 80187fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80187fc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80187fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8018800:	2301      	movs	r3, #1
 8018802:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018804:	69fb      	ldr	r3, [r7, #28]
 8018806:	f383 8810 	msr	PRIMASK, r3
}
 801880a:	46c0      	nop			@ (mov r8, r8)
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	689a      	ldr	r2, [r3, #8]
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	2101      	movs	r1, #1
 8018818:	438a      	bics	r2, r1
 801881a:	609a      	str	r2, [r3, #8]
 801881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801881e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018820:	6a3b      	ldr	r3, [r7, #32]
 8018822:	f383 8810 	msr	PRIMASK, r3
}
 8018826:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	2280      	movs	r2, #128	@ 0x80
 801882c:	2120      	movs	r1, #32
 801882e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	2278      	movs	r2, #120	@ 0x78
 8018834:	2100      	movs	r1, #0
 8018836:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018838:	2303      	movs	r3, #3
 801883a:	e011      	b.n	8018860 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	2220      	movs	r2, #32
 8018840:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2280      	movs	r2, #128	@ 0x80
 8018846:	2120      	movs	r1, #32
 8018848:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2200      	movs	r2, #0
 801884e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	2200      	movs	r2, #0
 8018854:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	2278      	movs	r2, #120	@ 0x78
 801885a:	2100      	movs	r1, #0
 801885c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801885e:	2300      	movs	r3, #0
}
 8018860:	0018      	movs	r0, r3
 8018862:	46bd      	mov	sp, r7
 8018864:	b010      	add	sp, #64	@ 0x40
 8018866:	bd80      	pop	{r7, pc}
 8018868:	01ffffff 	.word	0x01ffffff
 801886c:	fffffedf 	.word	0xfffffedf

08018870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b084      	sub	sp, #16
 8018874:	af00      	add	r7, sp, #0
 8018876:	60f8      	str	r0, [r7, #12]
 8018878:	60b9      	str	r1, [r7, #8]
 801887a:	603b      	str	r3, [r7, #0]
 801887c:	1dfb      	adds	r3, r7, #7
 801887e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018880:	e04b      	b.n	801891a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018882:	69bb      	ldr	r3, [r7, #24]
 8018884:	3301      	adds	r3, #1
 8018886:	d048      	beq.n	801891a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018888:	f7f6 fc74 	bl	800f174 <HAL_GetTick>
 801888c:	0002      	movs	r2, r0
 801888e:	683b      	ldr	r3, [r7, #0]
 8018890:	1ad3      	subs	r3, r2, r3
 8018892:	69ba      	ldr	r2, [r7, #24]
 8018894:	429a      	cmp	r2, r3
 8018896:	d302      	bcc.n	801889e <UART_WaitOnFlagUntilTimeout+0x2e>
 8018898:	69bb      	ldr	r3, [r7, #24]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d101      	bne.n	80188a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801889e:	2303      	movs	r3, #3
 80188a0:	e04b      	b.n	801893a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	2204      	movs	r2, #4
 80188aa:	4013      	ands	r3, r2
 80188ac:	d035      	beq.n	801891a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	69db      	ldr	r3, [r3, #28]
 80188b4:	2208      	movs	r2, #8
 80188b6:	4013      	ands	r3, r2
 80188b8:	2b08      	cmp	r3, #8
 80188ba:	d111      	bne.n	80188e0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	2208      	movs	r2, #8
 80188c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	0018      	movs	r0, r3
 80188c8:	f000 f9ca 	bl	8018c60 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	2284      	movs	r2, #132	@ 0x84
 80188d0:	2108      	movs	r1, #8
 80188d2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	2278      	movs	r2, #120	@ 0x78
 80188d8:	2100      	movs	r1, #0
 80188da:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80188dc:	2301      	movs	r3, #1
 80188de:	e02c      	b.n	801893a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	69da      	ldr	r2, [r3, #28]
 80188e6:	2380      	movs	r3, #128	@ 0x80
 80188e8:	011b      	lsls	r3, r3, #4
 80188ea:	401a      	ands	r2, r3
 80188ec:	2380      	movs	r3, #128	@ 0x80
 80188ee:	011b      	lsls	r3, r3, #4
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d112      	bne.n	801891a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	2280      	movs	r2, #128	@ 0x80
 80188fa:	0112      	lsls	r2, r2, #4
 80188fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	0018      	movs	r0, r3
 8018902:	f000 f9ad 	bl	8018c60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	2284      	movs	r2, #132	@ 0x84
 801890a:	2120      	movs	r1, #32
 801890c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	2278      	movs	r2, #120	@ 0x78
 8018912:	2100      	movs	r1, #0
 8018914:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8018916:	2303      	movs	r3, #3
 8018918:	e00f      	b.n	801893a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	69db      	ldr	r3, [r3, #28]
 8018920:	68ba      	ldr	r2, [r7, #8]
 8018922:	4013      	ands	r3, r2
 8018924:	68ba      	ldr	r2, [r7, #8]
 8018926:	1ad3      	subs	r3, r2, r3
 8018928:	425a      	negs	r2, r3
 801892a:	4153      	adcs	r3, r2
 801892c:	b2db      	uxtb	r3, r3
 801892e:	001a      	movs	r2, r3
 8018930:	1dfb      	adds	r3, r7, #7
 8018932:	781b      	ldrb	r3, [r3, #0]
 8018934:	429a      	cmp	r2, r3
 8018936:	d0a4      	beq.n	8018882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018938:	2300      	movs	r3, #0
}
 801893a:	0018      	movs	r0, r3
 801893c:	46bd      	mov	sp, r7
 801893e:	b004      	add	sp, #16
 8018940:	bd80      	pop	{r7, pc}
	...

08018944 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b090      	sub	sp, #64	@ 0x40
 8018948:	af00      	add	r7, sp, #0
 801894a:	60f8      	str	r0, [r7, #12]
 801894c:	60b9      	str	r1, [r7, #8]
 801894e:	1dbb      	adds	r3, r7, #6
 8018950:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	68ba      	ldr	r2, [r7, #8]
 8018956:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	1dba      	adds	r2, r7, #6
 801895c:	2158      	movs	r1, #88	@ 0x58
 801895e:	8812      	ldrh	r2, [r2, #0]
 8018960:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	1dba      	adds	r2, r7, #6
 8018966:	215a      	movs	r1, #90	@ 0x5a
 8018968:	8812      	ldrh	r2, [r2, #0]
 801896a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	2200      	movs	r2, #0
 8018970:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	689a      	ldr	r2, [r3, #8]
 8018976:	2380      	movs	r3, #128	@ 0x80
 8018978:	015b      	lsls	r3, r3, #5
 801897a:	429a      	cmp	r2, r3
 801897c:	d10d      	bne.n	801899a <UART_Start_Receive_IT+0x56>
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	691b      	ldr	r3, [r3, #16]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d104      	bne.n	8018990 <UART_Start_Receive_IT+0x4c>
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	225c      	movs	r2, #92	@ 0x5c
 801898a:	4950      	ldr	r1, [pc, #320]	@ (8018acc <UART_Start_Receive_IT+0x188>)
 801898c:	5299      	strh	r1, [r3, r2]
 801898e:	e02e      	b.n	80189ee <UART_Start_Receive_IT+0xaa>
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	225c      	movs	r2, #92	@ 0x5c
 8018994:	21ff      	movs	r1, #255	@ 0xff
 8018996:	5299      	strh	r1, [r3, r2]
 8018998:	e029      	b.n	80189ee <UART_Start_Receive_IT+0xaa>
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	689b      	ldr	r3, [r3, #8]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d10d      	bne.n	80189be <UART_Start_Receive_IT+0x7a>
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	691b      	ldr	r3, [r3, #16]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d104      	bne.n	80189b4 <UART_Start_Receive_IT+0x70>
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	225c      	movs	r2, #92	@ 0x5c
 80189ae:	21ff      	movs	r1, #255	@ 0xff
 80189b0:	5299      	strh	r1, [r3, r2]
 80189b2:	e01c      	b.n	80189ee <UART_Start_Receive_IT+0xaa>
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	225c      	movs	r2, #92	@ 0x5c
 80189b8:	217f      	movs	r1, #127	@ 0x7f
 80189ba:	5299      	strh	r1, [r3, r2]
 80189bc:	e017      	b.n	80189ee <UART_Start_Receive_IT+0xaa>
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	689a      	ldr	r2, [r3, #8]
 80189c2:	2380      	movs	r3, #128	@ 0x80
 80189c4:	055b      	lsls	r3, r3, #21
 80189c6:	429a      	cmp	r2, r3
 80189c8:	d10d      	bne.n	80189e6 <UART_Start_Receive_IT+0xa2>
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	691b      	ldr	r3, [r3, #16]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d104      	bne.n	80189dc <UART_Start_Receive_IT+0x98>
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	225c      	movs	r2, #92	@ 0x5c
 80189d6:	217f      	movs	r1, #127	@ 0x7f
 80189d8:	5299      	strh	r1, [r3, r2]
 80189da:	e008      	b.n	80189ee <UART_Start_Receive_IT+0xaa>
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	225c      	movs	r2, #92	@ 0x5c
 80189e0:	213f      	movs	r1, #63	@ 0x3f
 80189e2:	5299      	strh	r1, [r3, r2]
 80189e4:	e003      	b.n	80189ee <UART_Start_Receive_IT+0xaa>
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	225c      	movs	r2, #92	@ 0x5c
 80189ea:	2100      	movs	r1, #0
 80189ec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	2284      	movs	r2, #132	@ 0x84
 80189f2:	2100      	movs	r1, #0
 80189f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	2280      	movs	r2, #128	@ 0x80
 80189fa:	2122      	movs	r1, #34	@ 0x22
 80189fc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189fe:	f3ef 8310 	mrs	r3, PRIMASK
 8018a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018a08:	2301      	movs	r3, #1
 8018a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a0e:	f383 8810 	msr	PRIMASK, r3
}
 8018a12:	46c0      	nop			@ (mov r8, r8)
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	689a      	ldr	r2, [r3, #8]
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	2101      	movs	r1, #1
 8018a20:	430a      	orrs	r2, r1
 8018a22:	609a      	str	r2, [r3, #8]
 8018a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a26:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a2a:	f383 8810 	msr	PRIMASK, r3
}
 8018a2e:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	689a      	ldr	r2, [r3, #8]
 8018a34:	2380      	movs	r3, #128	@ 0x80
 8018a36:	015b      	lsls	r3, r3, #5
 8018a38:	429a      	cmp	r2, r3
 8018a3a:	d107      	bne.n	8018a4c <UART_Start_Receive_IT+0x108>
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	691b      	ldr	r3, [r3, #16]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d103      	bne.n	8018a4c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	4a22      	ldr	r2, [pc, #136]	@ (8018ad0 <UART_Start_Receive_IT+0x18c>)
 8018a48:	669a      	str	r2, [r3, #104]	@ 0x68
 8018a4a:	e002      	b.n	8018a52 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	4a21      	ldr	r2, [pc, #132]	@ (8018ad4 <UART_Start_Receive_IT+0x190>)
 8018a50:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	691b      	ldr	r3, [r3, #16]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d019      	beq.n	8018a8e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8018a5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8018a60:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8018a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8018a64:	2301      	movs	r3, #1
 8018a66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a68:	6a3b      	ldr	r3, [r7, #32]
 8018a6a:	f383 8810 	msr	PRIMASK, r3
}
 8018a6e:	46c0      	nop			@ (mov r8, r8)
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	681a      	ldr	r2, [r3, #0]
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	2190      	movs	r1, #144	@ 0x90
 8018a7c:	0049      	lsls	r1, r1, #1
 8018a7e:	430a      	orrs	r2, r1
 8018a80:	601a      	str	r2, [r3, #0]
 8018a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a84:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a88:	f383 8810 	msr	PRIMASK, r3
}
 8018a8c:	e018      	b.n	8018ac0 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8018a92:	613b      	str	r3, [r7, #16]
  return(result);
 8018a94:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8018a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018a98:	2301      	movs	r3, #1
 8018a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a9c:	697b      	ldr	r3, [r7, #20]
 8018a9e:	f383 8810 	msr	PRIMASK, r3
}
 8018aa2:	46c0      	nop			@ (mov r8, r8)
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	681a      	ldr	r2, [r3, #0]
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	2120      	movs	r1, #32
 8018ab0:	430a      	orrs	r2, r1
 8018ab2:	601a      	str	r2, [r3, #0]
 8018ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ab6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ab8:	69bb      	ldr	r3, [r7, #24]
 8018aba:	f383 8810 	msr	PRIMASK, r3
}
 8018abe:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8018ac0:	2300      	movs	r3, #0
}
 8018ac2:	0018      	movs	r0, r3
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	b010      	add	sp, #64	@ 0x40
 8018ac8:	bd80      	pop	{r7, pc}
 8018aca:	46c0      	nop			@ (mov r8, r8)
 8018acc:	000001ff 	.word	0x000001ff
 8018ad0:	08019245 	.word	0x08019245
 8018ad4:	08019079 	.word	0x08019079

08018ad8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b090      	sub	sp, #64	@ 0x40
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	60f8      	str	r0, [r7, #12]
 8018ae0:	60b9      	str	r1, [r7, #8]
 8018ae2:	1dbb      	adds	r3, r7, #6
 8018ae4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	68ba      	ldr	r2, [r7, #8]
 8018aea:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	1dba      	adds	r2, r7, #6
 8018af0:	2158      	movs	r1, #88	@ 0x58
 8018af2:	8812      	ldrh	r2, [r2, #0]
 8018af4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	2284      	movs	r2, #132	@ 0x84
 8018afa:	2100      	movs	r1, #0
 8018afc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2280      	movs	r2, #128	@ 0x80
 8018b02:	2122      	movs	r1, #34	@ 0x22
 8018b04:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d028      	beq.n	8018b60 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b12:	4a3e      	ldr	r2, [pc, #248]	@ (8018c0c <UART_Start_Receive_DMA+0x134>)
 8018b14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8018c10 <UART_Start_Receive_DMA+0x138>)
 8018b1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b22:	4a3c      	ldr	r2, [pc, #240]	@ (8018c14 <UART_Start_Receive_DMA+0x13c>)
 8018b24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	3324      	adds	r3, #36	@ 0x24
 8018b38:	0019      	movs	r1, r3
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b3e:	001a      	movs	r2, r3
 8018b40:	1dbb      	adds	r3, r7, #6
 8018b42:	881b      	ldrh	r3, [r3, #0]
 8018b44:	f7f7 f868 	bl	800fc18 <HAL_DMA_Start_IT>
 8018b48:	1e03      	subs	r3, r0, #0
 8018b4a:	d009      	beq.n	8018b60 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	2284      	movs	r2, #132	@ 0x84
 8018b50:	2110      	movs	r1, #16
 8018b52:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	2280      	movs	r2, #128	@ 0x80
 8018b58:	2120      	movs	r1, #32
 8018b5a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8018b5c:	2301      	movs	r3, #1
 8018b5e:	e050      	b.n	8018c02 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	691b      	ldr	r3, [r3, #16]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d019      	beq.n	8018b9c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b68:	f3ef 8310 	mrs	r3, PRIMASK
 8018b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018b72:	2301      	movs	r3, #1
 8018b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b78:	f383 8810 	msr	PRIMASK, r3
}
 8018b7c:	46c0      	nop			@ (mov r8, r8)
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	681a      	ldr	r2, [r3, #0]
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	2180      	movs	r1, #128	@ 0x80
 8018b8a:	0049      	lsls	r1, r1, #1
 8018b8c:	430a      	orrs	r2, r1
 8018b8e:	601a      	str	r2, [r3, #0]
 8018b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b92:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b96:	f383 8810 	msr	PRIMASK, r3
}
 8018b9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8018ba0:	613b      	str	r3, [r7, #16]
  return(result);
 8018ba2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018ba6:	2301      	movs	r3, #1
 8018ba8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018baa:	697b      	ldr	r3, [r7, #20]
 8018bac:	f383 8810 	msr	PRIMASK, r3
}
 8018bb0:	46c0      	nop			@ (mov r8, r8)
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	689a      	ldr	r2, [r3, #8]
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	2101      	movs	r1, #1
 8018bbe:	430a      	orrs	r2, r1
 8018bc0:	609a      	str	r2, [r3, #8]
 8018bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bc6:	69bb      	ldr	r3, [r7, #24]
 8018bc8:	f383 8810 	msr	PRIMASK, r3
}
 8018bcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018bce:	f3ef 8310 	mrs	r3, PRIMASK
 8018bd2:	61fb      	str	r3, [r7, #28]
  return(result);
 8018bd4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8018bd8:	2301      	movs	r3, #1
 8018bda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bdc:	6a3b      	ldr	r3, [r7, #32]
 8018bde:	f383 8810 	msr	PRIMASK, r3
}
 8018be2:	46c0      	nop			@ (mov r8, r8)
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	689a      	ldr	r2, [r3, #8]
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	2140      	movs	r1, #64	@ 0x40
 8018bf0:	430a      	orrs	r2, r1
 8018bf2:	609a      	str	r2, [r3, #8]
 8018bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bfa:	f383 8810 	msr	PRIMASK, r3
}
 8018bfe:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8018c00:	2300      	movs	r3, #0
}
 8018c02:	0018      	movs	r0, r3
 8018c04:	46bd      	mov	sp, r7
 8018c06:	b010      	add	sp, #64	@ 0x40
 8018c08:	bd80      	pop	{r7, pc}
 8018c0a:	46c0      	nop			@ (mov r8, r8)
 8018c0c:	08018de9 	.word	0x08018de9
 8018c10:	08018f1d 	.word	0x08018f1d
 8018c14:	08018f65 	.word	0x08018f65

08018c18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b086      	sub	sp, #24
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c20:	f3ef 8310 	mrs	r3, PRIMASK
 8018c24:	60bb      	str	r3, [r7, #8]
  return(result);
 8018c26:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018c28:	617b      	str	r3, [r7, #20]
 8018c2a:	2301      	movs	r3, #1
 8018c2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	f383 8810 	msr	PRIMASK, r3
}
 8018c34:	46c0      	nop			@ (mov r8, r8)
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	681a      	ldr	r2, [r3, #0]
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	21c0      	movs	r1, #192	@ 0xc0
 8018c42:	438a      	bics	r2, r1
 8018c44:	601a      	str	r2, [r3, #0]
 8018c46:	697b      	ldr	r3, [r7, #20]
 8018c48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c4a:	693b      	ldr	r3, [r7, #16]
 8018c4c:	f383 8810 	msr	PRIMASK, r3
}
 8018c50:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	2220      	movs	r2, #32
 8018c56:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8018c58:	46c0      	nop			@ (mov r8, r8)
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	b006      	add	sp, #24
 8018c5e:	bd80      	pop	{r7, pc}

08018c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b08e      	sub	sp, #56	@ 0x38
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c68:	f3ef 8310 	mrs	r3, PRIMASK
 8018c6c:	617b      	str	r3, [r7, #20]
  return(result);
 8018c6e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8018c72:	2301      	movs	r3, #1
 8018c74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c76:	69bb      	ldr	r3, [r7, #24]
 8018c78:	f383 8810 	msr	PRIMASK, r3
}
 8018c7c:	46c0      	nop			@ (mov r8, r8)
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	681a      	ldr	r2, [r3, #0]
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	4926      	ldr	r1, [pc, #152]	@ (8018d24 <UART_EndRxTransfer+0xc4>)
 8018c8a:	400a      	ands	r2, r1
 8018c8c:	601a      	str	r2, [r3, #0]
 8018c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018c90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c92:	69fb      	ldr	r3, [r7, #28]
 8018c94:	f383 8810 	msr	PRIMASK, r3
}
 8018c98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8018c9e:	623b      	str	r3, [r7, #32]
  return(result);
 8018ca0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018ca2:	633b      	str	r3, [r7, #48]	@ 0x30
 8018ca4:	2301      	movs	r3, #1
 8018ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018caa:	f383 8810 	msr	PRIMASK, r3
}
 8018cae:	46c0      	nop			@ (mov r8, r8)
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	689a      	ldr	r2, [r3, #8]
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2101      	movs	r1, #1
 8018cbc:	438a      	bics	r2, r1
 8018cbe:	609a      	str	r2, [r3, #8]
 8018cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cc6:	f383 8810 	msr	PRIMASK, r3
}
 8018cca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018cd0:	2b01      	cmp	r3, #1
 8018cd2:	d118      	bne.n	8018d06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8018cd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8018cda:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018cde:	2301      	movs	r3, #1
 8018ce0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	f383 8810 	msr	PRIMASK, r3
}
 8018ce8:	46c0      	nop			@ (mov r8, r8)
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	681a      	ldr	r2, [r3, #0]
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	2110      	movs	r1, #16
 8018cf6:	438a      	bics	r2, r1
 8018cf8:	601a      	str	r2, [r3, #0]
 8018cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cfe:	693b      	ldr	r3, [r7, #16]
 8018d00:	f383 8810 	msr	PRIMASK, r3
}
 8018d04:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	2280      	movs	r2, #128	@ 0x80
 8018d0a:	2120      	movs	r1, #32
 8018d0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	2200      	movs	r2, #0
 8018d12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	2200      	movs	r2, #0
 8018d18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018d1a:	46c0      	nop			@ (mov r8, r8)
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	b00e      	add	sp, #56	@ 0x38
 8018d20:	bd80      	pop	{r7, pc}
 8018d22:	46c0      	nop			@ (mov r8, r8)
 8018d24:	fffffedf 	.word	0xfffffedf

08018d28 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b08c      	sub	sp, #48	@ 0x30
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d34:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	2220      	movs	r2, #32
 8018d3e:	4013      	ands	r3, r2
 8018d40:	d135      	bne.n	8018dae <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8018d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d44:	2252      	movs	r2, #82	@ 0x52
 8018d46:	2100      	movs	r1, #0
 8018d48:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8018d4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8018d50:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018d54:	2301      	movs	r3, #1
 8018d56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d58:	693b      	ldr	r3, [r7, #16]
 8018d5a:	f383 8810 	msr	PRIMASK, r3
}
 8018d5e:	46c0      	nop			@ (mov r8, r8)
 8018d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	689a      	ldr	r2, [r3, #8]
 8018d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	2180      	movs	r1, #128	@ 0x80
 8018d6c:	438a      	bics	r2, r1
 8018d6e:	609a      	str	r2, [r3, #8]
 8018d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	f383 8810 	msr	PRIMASK, r3
}
 8018d7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8018d80:	61bb      	str	r3, [r7, #24]
  return(result);
 8018d82:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d86:	2301      	movs	r3, #1
 8018d88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d8a:	69fb      	ldr	r3, [r7, #28]
 8018d8c:	f383 8810 	msr	PRIMASK, r3
}
 8018d90:	46c0      	nop			@ (mov r8, r8)
 8018d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	681a      	ldr	r2, [r3, #0]
 8018d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	2140      	movs	r1, #64	@ 0x40
 8018d9e:	430a      	orrs	r2, r1
 8018da0:	601a      	str	r2, [r3, #0]
 8018da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018da4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018da6:	6a3b      	ldr	r3, [r7, #32]
 8018da8:	f383 8810 	msr	PRIMASK, r3
}
 8018dac:	e006      	b.n	8018dbc <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8018dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018db0:	228c      	movs	r2, #140	@ 0x8c
 8018db2:	589b      	ldr	r3, [r3, r2]
 8018db4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018db6:	0010      	movs	r0, r2
 8018db8:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018dba:	46c0      	nop			@ (mov r8, r8)
 8018dbc:	46c0      	nop			@ (mov r8, r8)
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	b00c      	add	sp, #48	@ 0x30
 8018dc2:	bd80      	pop	{r7, pc}

08018dc4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b084      	sub	sp, #16
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018dd0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	2288      	movs	r2, #136	@ 0x88
 8018dd6:	589b      	ldr	r3, [r3, r2]
 8018dd8:	68fa      	ldr	r2, [r7, #12]
 8018dda:	0010      	movs	r0, r2
 8018ddc:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018dde:	46c0      	nop			@ (mov r8, r8)
 8018de0:	46bd      	mov	sp, r7
 8018de2:	b004      	add	sp, #16
 8018de4:	bd80      	pop	{r7, pc}
	...

08018de8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b094      	sub	sp, #80	@ 0x50
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018df4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	2220      	movs	r2, #32
 8018dfe:	4013      	ands	r3, r2
 8018e00:	d16f      	bne.n	8018ee2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8018e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e04:	225a      	movs	r2, #90	@ 0x5a
 8018e06:	2100      	movs	r1, #0
 8018e08:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8018e0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8018e10:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e14:	2301      	movs	r3, #1
 8018e16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e18:	69fb      	ldr	r3, [r7, #28]
 8018e1a:	f383 8810 	msr	PRIMASK, r3
}
 8018e1e:	46c0      	nop			@ (mov r8, r8)
 8018e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	681a      	ldr	r2, [r3, #0]
 8018e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	493b      	ldr	r1, [pc, #236]	@ (8018f18 <UART_DMAReceiveCplt+0x130>)
 8018e2c:	400a      	ands	r2, r1
 8018e2e:	601a      	str	r2, [r3, #0]
 8018e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018e32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e34:	6a3b      	ldr	r3, [r7, #32]
 8018e36:	f383 8810 	msr	PRIMASK, r3
}
 8018e3a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8018e40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8018e46:	2301      	movs	r3, #1
 8018e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e4c:	f383 8810 	msr	PRIMASK, r3
}
 8018e50:	46c0      	nop			@ (mov r8, r8)
 8018e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	689a      	ldr	r2, [r3, #8]
 8018e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	2101      	movs	r1, #1
 8018e5e:	438a      	bics	r2, r1
 8018e60:	609a      	str	r2, [r3, #8]
 8018e62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e68:	f383 8810 	msr	PRIMASK, r3
}
 8018e6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8018e72:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018e76:	643b      	str	r3, [r7, #64]	@ 0x40
 8018e78:	2301      	movs	r3, #1
 8018e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e7e:	f383 8810 	msr	PRIMASK, r3
}
 8018e82:	46c0      	nop			@ (mov r8, r8)
 8018e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	689a      	ldr	r2, [r3, #8]
 8018e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	2140      	movs	r1, #64	@ 0x40
 8018e90:	438a      	bics	r2, r1
 8018e92:	609a      	str	r2, [r3, #8]
 8018e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e9a:	f383 8810 	msr	PRIMASK, r3
}
 8018e9e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ea2:	2280      	movs	r2, #128	@ 0x80
 8018ea4:	2120      	movs	r1, #32
 8018ea6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018eac:	2b01      	cmp	r3, #1
 8018eae:	d118      	bne.n	8018ee2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8018eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8018eb6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018eba:	2301      	movs	r3, #1
 8018ebc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ebe:	693b      	ldr	r3, [r7, #16]
 8018ec0:	f383 8810 	msr	PRIMASK, r3
}
 8018ec4:	46c0      	nop			@ (mov r8, r8)
 8018ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	681a      	ldr	r2, [r3, #0]
 8018ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	2110      	movs	r1, #16
 8018ed2:	438a      	bics	r2, r1
 8018ed4:	601a      	str	r2, [r3, #0]
 8018ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ed8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eda:	697b      	ldr	r3, [r7, #20]
 8018edc:	f383 8810 	msr	PRIMASK, r3
}
 8018ee0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018eec:	2b01      	cmp	r3, #1
 8018eee:	d109      	bne.n	8018f04 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ef2:	22ac      	movs	r2, #172	@ 0xac
 8018ef4:	589b      	ldr	r3, [r3, r2]
 8018ef6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018ef8:	2158      	movs	r1, #88	@ 0x58
 8018efa:	5a51      	ldrh	r1, [r2, r1]
 8018efc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018efe:	0010      	movs	r0, r2
 8018f00:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018f02:	e005      	b.n	8018f10 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f06:	2294      	movs	r2, #148	@ 0x94
 8018f08:	589b      	ldr	r3, [r3, r2]
 8018f0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018f0c:	0010      	movs	r0, r2
 8018f0e:	4798      	blx	r3
}
 8018f10:	46c0      	nop			@ (mov r8, r8)
 8018f12:	46bd      	mov	sp, r7
 8018f14:	b014      	add	sp, #80	@ 0x50
 8018f16:	bd80      	pop	{r7, pc}
 8018f18:	fffffeff 	.word	0xfffffeff

08018f1c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b084      	sub	sp, #16
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f28:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	2201      	movs	r2, #1
 8018f2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018f34:	2b01      	cmp	r3, #1
 8018f36:	d10b      	bne.n	8018f50 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	22ac      	movs	r2, #172	@ 0xac
 8018f3c:	589b      	ldr	r3, [r3, r2]
 8018f3e:	68fa      	ldr	r2, [r7, #12]
 8018f40:	2158      	movs	r1, #88	@ 0x58
 8018f42:	5a52      	ldrh	r2, [r2, r1]
 8018f44:	0852      	lsrs	r2, r2, #1
 8018f46:	b291      	uxth	r1, r2
 8018f48:	68fa      	ldr	r2, [r7, #12]
 8018f4a:	0010      	movs	r0, r2
 8018f4c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018f4e:	e005      	b.n	8018f5c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	2290      	movs	r2, #144	@ 0x90
 8018f54:	589b      	ldr	r3, [r3, r2]
 8018f56:	68fa      	ldr	r2, [r7, #12]
 8018f58:	0010      	movs	r0, r2
 8018f5a:	4798      	blx	r3
}
 8018f5c:	46c0      	nop			@ (mov r8, r8)
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	b004      	add	sp, #16
 8018f62:	bd80      	pop	{r7, pc}

08018f64 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b086      	sub	sp, #24
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f70:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018f72:	697b      	ldr	r3, [r7, #20]
 8018f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018f76:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018f78:	697b      	ldr	r3, [r7, #20]
 8018f7a:	2280      	movs	r2, #128	@ 0x80
 8018f7c:	589b      	ldr	r3, [r3, r2]
 8018f7e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018f80:	697b      	ldr	r3, [r7, #20]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	689b      	ldr	r3, [r3, #8]
 8018f86:	2280      	movs	r2, #128	@ 0x80
 8018f88:	4013      	ands	r3, r2
 8018f8a:	2b80      	cmp	r3, #128	@ 0x80
 8018f8c:	d10a      	bne.n	8018fa4 <UART_DMAError+0x40>
 8018f8e:	693b      	ldr	r3, [r7, #16]
 8018f90:	2b21      	cmp	r3, #33	@ 0x21
 8018f92:	d107      	bne.n	8018fa4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018f94:	697b      	ldr	r3, [r7, #20]
 8018f96:	2252      	movs	r2, #82	@ 0x52
 8018f98:	2100      	movs	r1, #0
 8018f9a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018f9c:	697b      	ldr	r3, [r7, #20]
 8018f9e:	0018      	movs	r0, r3
 8018fa0:	f7ff fe3a 	bl	8018c18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	689b      	ldr	r3, [r3, #8]
 8018faa:	2240      	movs	r2, #64	@ 0x40
 8018fac:	4013      	ands	r3, r2
 8018fae:	2b40      	cmp	r3, #64	@ 0x40
 8018fb0:	d10a      	bne.n	8018fc8 <UART_DMAError+0x64>
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	2b22      	cmp	r3, #34	@ 0x22
 8018fb6:	d107      	bne.n	8018fc8 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018fb8:	697b      	ldr	r3, [r7, #20]
 8018fba:	225a      	movs	r2, #90	@ 0x5a
 8018fbc:	2100      	movs	r1, #0
 8018fbe:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018fc0:	697b      	ldr	r3, [r7, #20]
 8018fc2:	0018      	movs	r0, r3
 8018fc4:	f7ff fe4c 	bl	8018c60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018fc8:	697b      	ldr	r3, [r7, #20]
 8018fca:	2284      	movs	r2, #132	@ 0x84
 8018fcc:	589b      	ldr	r3, [r3, r2]
 8018fce:	2210      	movs	r2, #16
 8018fd0:	431a      	orrs	r2, r3
 8018fd2:	697b      	ldr	r3, [r7, #20]
 8018fd4:	2184      	movs	r1, #132	@ 0x84
 8018fd6:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018fd8:	697b      	ldr	r3, [r7, #20]
 8018fda:	2298      	movs	r2, #152	@ 0x98
 8018fdc:	589b      	ldr	r3, [r3, r2]
 8018fde:	697a      	ldr	r2, [r7, #20]
 8018fe0:	0010      	movs	r0, r2
 8018fe2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018fe4:	46c0      	nop			@ (mov r8, r8)
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	b006      	add	sp, #24
 8018fea:	bd80      	pop	{r7, pc}

08018fec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b084      	sub	sp, #16
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	225a      	movs	r2, #90	@ 0x5a
 8018ffe:	2100      	movs	r1, #0
 8019000:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	2252      	movs	r2, #82	@ 0x52
 8019006:	2100      	movs	r1, #0
 8019008:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	2298      	movs	r2, #152	@ 0x98
 801900e:	589b      	ldr	r3, [r3, r2]
 8019010:	68fa      	ldr	r2, [r7, #12]
 8019012:	0010      	movs	r0, r2
 8019014:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019016:	46c0      	nop			@ (mov r8, r8)
 8019018:	46bd      	mov	sp, r7
 801901a:	b004      	add	sp, #16
 801901c:	bd80      	pop	{r7, pc}

0801901e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801901e:	b580      	push	{r7, lr}
 8019020:	b086      	sub	sp, #24
 8019022:	af00      	add	r7, sp, #0
 8019024:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019026:	f3ef 8310 	mrs	r3, PRIMASK
 801902a:	60bb      	str	r3, [r7, #8]
  return(result);
 801902c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801902e:	617b      	str	r3, [r7, #20]
 8019030:	2301      	movs	r3, #1
 8019032:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	f383 8810 	msr	PRIMASK, r3
}
 801903a:	46c0      	nop			@ (mov r8, r8)
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	681a      	ldr	r2, [r3, #0]
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	2140      	movs	r1, #64	@ 0x40
 8019048:	438a      	bics	r2, r1
 801904a:	601a      	str	r2, [r3, #0]
 801904c:	697b      	ldr	r3, [r7, #20]
 801904e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019050:	693b      	ldr	r3, [r7, #16]
 8019052:	f383 8810 	msr	PRIMASK, r3
}
 8019056:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	2220      	movs	r2, #32
 801905c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	2200      	movs	r2, #0
 8019062:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	228c      	movs	r2, #140	@ 0x8c
 8019068:	589b      	ldr	r3, [r3, r2]
 801906a:	687a      	ldr	r2, [r7, #4]
 801906c:	0010      	movs	r0, r2
 801906e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019070:	46c0      	nop			@ (mov r8, r8)
 8019072:	46bd      	mov	sp, r7
 8019074:	b006      	add	sp, #24
 8019076:	bd80      	pop	{r7, pc}

08019078 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b094      	sub	sp, #80	@ 0x50
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019080:	204e      	movs	r0, #78	@ 0x4e
 8019082:	183b      	adds	r3, r7, r0
 8019084:	687a      	ldr	r2, [r7, #4]
 8019086:	215c      	movs	r1, #92	@ 0x5c
 8019088:	5a52      	ldrh	r2, [r2, r1]
 801908a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	2280      	movs	r2, #128	@ 0x80
 8019090:	589b      	ldr	r3, [r3, r2]
 8019092:	2b22      	cmp	r3, #34	@ 0x22
 8019094:	d000      	beq.n	8019098 <UART_RxISR_8BIT+0x20>
 8019096:	e0c2      	b.n	801921e <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801909e:	214c      	movs	r1, #76	@ 0x4c
 80190a0:	187b      	adds	r3, r7, r1
 80190a2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80190a4:	187b      	adds	r3, r7, r1
 80190a6:	881b      	ldrh	r3, [r3, #0]
 80190a8:	b2da      	uxtb	r2, r3
 80190aa:	183b      	adds	r3, r7, r0
 80190ac:	881b      	ldrh	r3, [r3, #0]
 80190ae:	b2d9      	uxtb	r1, r3
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80190b4:	400a      	ands	r2, r1
 80190b6:	b2d2      	uxtb	r2, r2
 80190b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80190be:	1c5a      	adds	r2, r3, #1
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	225a      	movs	r2, #90	@ 0x5a
 80190c8:	5a9b      	ldrh	r3, [r3, r2]
 80190ca:	b29b      	uxth	r3, r3
 80190cc:	3b01      	subs	r3, #1
 80190ce:	b299      	uxth	r1, r3
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	225a      	movs	r2, #90	@ 0x5a
 80190d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	225a      	movs	r2, #90	@ 0x5a
 80190da:	5a9b      	ldrh	r3, [r3, r2]
 80190dc:	b29b      	uxth	r3, r3
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d000      	beq.n	80190e4 <UART_RxISR_8BIT+0x6c>
 80190e2:	e0a4      	b.n	801922e <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190e4:	f3ef 8310 	mrs	r3, PRIMASK
 80190e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80190ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80190ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80190ee:	2301      	movs	r3, #1
 80190f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190f4:	f383 8810 	msr	PRIMASK, r3
}
 80190f8:	46c0      	nop			@ (mov r8, r8)
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	681a      	ldr	r2, [r3, #0]
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	494c      	ldr	r1, [pc, #304]	@ (8019238 <UART_RxISR_8BIT+0x1c0>)
 8019106:	400a      	ands	r2, r1
 8019108:	601a      	str	r2, [r3, #0]
 801910a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801910c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801910e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019110:	f383 8810 	msr	PRIMASK, r3
}
 8019114:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019116:	f3ef 8310 	mrs	r3, PRIMASK
 801911a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801911c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801911e:	647b      	str	r3, [r7, #68]	@ 0x44
 8019120:	2301      	movs	r3, #1
 8019122:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019126:	f383 8810 	msr	PRIMASK, r3
}
 801912a:	46c0      	nop			@ (mov r8, r8)
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	689a      	ldr	r2, [r3, #8]
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	2101      	movs	r1, #1
 8019138:	438a      	bics	r2, r1
 801913a:	609a      	str	r2, [r3, #8]
 801913c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801913e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019142:	f383 8810 	msr	PRIMASK, r3
}
 8019146:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	2280      	movs	r2, #128	@ 0x80
 801914c:	2120      	movs	r1, #32
 801914e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	2200      	movs	r2, #0
 8019154:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	2200      	movs	r2, #0
 801915a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	4a36      	ldr	r2, [pc, #216]	@ (801923c <UART_RxISR_8BIT+0x1c4>)
 8019162:	4293      	cmp	r3, r2
 8019164:	d01f      	beq.n	80191a6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	685a      	ldr	r2, [r3, #4]
 801916c:	2380      	movs	r3, #128	@ 0x80
 801916e:	041b      	lsls	r3, r3, #16
 8019170:	4013      	ands	r3, r2
 8019172:	d018      	beq.n	80191a6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019174:	f3ef 8310 	mrs	r3, PRIMASK
 8019178:	61bb      	str	r3, [r7, #24]
  return(result);
 801917a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801917c:	643b      	str	r3, [r7, #64]	@ 0x40
 801917e:	2301      	movs	r3, #1
 8019180:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019182:	69fb      	ldr	r3, [r7, #28]
 8019184:	f383 8810 	msr	PRIMASK, r3
}
 8019188:	46c0      	nop			@ (mov r8, r8)
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	681a      	ldr	r2, [r3, #0]
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	492a      	ldr	r1, [pc, #168]	@ (8019240 <UART_RxISR_8BIT+0x1c8>)
 8019196:	400a      	ands	r2, r1
 8019198:	601a      	str	r2, [r3, #0]
 801919a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801919c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801919e:	6a3b      	ldr	r3, [r7, #32]
 80191a0:	f383 8810 	msr	PRIMASK, r3
}
 80191a4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80191aa:	2b01      	cmp	r3, #1
 80191ac:	d130      	bne.n	8019210 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	2200      	movs	r2, #0
 80191b2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191b4:	f3ef 8310 	mrs	r3, PRIMASK
 80191b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80191ba:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80191bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191be:	2301      	movs	r3, #1
 80191c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191c2:	693b      	ldr	r3, [r7, #16]
 80191c4:	f383 8810 	msr	PRIMASK, r3
}
 80191c8:	46c0      	nop			@ (mov r8, r8)
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	681a      	ldr	r2, [r3, #0]
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	2110      	movs	r1, #16
 80191d6:	438a      	bics	r2, r1
 80191d8:	601a      	str	r2, [r3, #0]
 80191da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191de:	697b      	ldr	r3, [r7, #20]
 80191e0:	f383 8810 	msr	PRIMASK, r3
}
 80191e4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	69db      	ldr	r3, [r3, #28]
 80191ec:	2210      	movs	r2, #16
 80191ee:	4013      	ands	r3, r2
 80191f0:	2b10      	cmp	r3, #16
 80191f2:	d103      	bne.n	80191fc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	2210      	movs	r2, #16
 80191fa:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	22ac      	movs	r2, #172	@ 0xac
 8019200:	589b      	ldr	r3, [r3, r2]
 8019202:	687a      	ldr	r2, [r7, #4]
 8019204:	2158      	movs	r1, #88	@ 0x58
 8019206:	5a51      	ldrh	r1, [r2, r1]
 8019208:	687a      	ldr	r2, [r7, #4]
 801920a:	0010      	movs	r0, r2
 801920c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801920e:	e00e      	b.n	801922e <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	2294      	movs	r2, #148	@ 0x94
 8019214:	589b      	ldr	r3, [r3, r2]
 8019216:	687a      	ldr	r2, [r7, #4]
 8019218:	0010      	movs	r0, r2
 801921a:	4798      	blx	r3
}
 801921c:	e007      	b.n	801922e <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	699a      	ldr	r2, [r3, #24]
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	2108      	movs	r1, #8
 801922a:	430a      	orrs	r2, r1
 801922c:	619a      	str	r2, [r3, #24]
}
 801922e:	46c0      	nop			@ (mov r8, r8)
 8019230:	46bd      	mov	sp, r7
 8019232:	b014      	add	sp, #80	@ 0x50
 8019234:	bd80      	pop	{r7, pc}
 8019236:	46c0      	nop			@ (mov r8, r8)
 8019238:	fffffedf 	.word	0xfffffedf
 801923c:	40004800 	.word	0x40004800
 8019240:	fbffffff 	.word	0xfbffffff

08019244 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b094      	sub	sp, #80	@ 0x50
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801924c:	204e      	movs	r0, #78	@ 0x4e
 801924e:	183b      	adds	r3, r7, r0
 8019250:	687a      	ldr	r2, [r7, #4]
 8019252:	215c      	movs	r1, #92	@ 0x5c
 8019254:	5a52      	ldrh	r2, [r2, r1]
 8019256:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	2280      	movs	r2, #128	@ 0x80
 801925c:	589b      	ldr	r3, [r3, r2]
 801925e:	2b22      	cmp	r3, #34	@ 0x22
 8019260:	d000      	beq.n	8019264 <UART_RxISR_16BIT+0x20>
 8019262:	e0c2      	b.n	80193ea <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801926a:	214c      	movs	r1, #76	@ 0x4c
 801926c:	187b      	adds	r3, r7, r1
 801926e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019274:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8019276:	187b      	adds	r3, r7, r1
 8019278:	183a      	adds	r2, r7, r0
 801927a:	881b      	ldrh	r3, [r3, #0]
 801927c:	8812      	ldrh	r2, [r2, #0]
 801927e:	4013      	ands	r3, r2
 8019280:	b29a      	uxth	r2, r3
 8019282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019284:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801928a:	1c9a      	adds	r2, r3, #2
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	225a      	movs	r2, #90	@ 0x5a
 8019294:	5a9b      	ldrh	r3, [r3, r2]
 8019296:	b29b      	uxth	r3, r3
 8019298:	3b01      	subs	r3, #1
 801929a:	b299      	uxth	r1, r3
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	225a      	movs	r2, #90	@ 0x5a
 80192a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	225a      	movs	r2, #90	@ 0x5a
 80192a6:	5a9b      	ldrh	r3, [r3, r2]
 80192a8:	b29b      	uxth	r3, r3
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d000      	beq.n	80192b0 <UART_RxISR_16BIT+0x6c>
 80192ae:	e0a4      	b.n	80193fa <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192b0:	f3ef 8310 	mrs	r3, PRIMASK
 80192b4:	623b      	str	r3, [r7, #32]
  return(result);
 80192b6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80192b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80192ba:	2301      	movs	r3, #1
 80192bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192c0:	f383 8810 	msr	PRIMASK, r3
}
 80192c4:	46c0      	nop			@ (mov r8, r8)
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	681a      	ldr	r2, [r3, #0]
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	494c      	ldr	r1, [pc, #304]	@ (8019404 <UART_RxISR_16BIT+0x1c0>)
 80192d2:	400a      	ands	r2, r1
 80192d4:	601a      	str	r2, [r3, #0]
 80192d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192dc:	f383 8810 	msr	PRIMASK, r3
}
 80192e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192e2:	f3ef 8310 	mrs	r3, PRIMASK
 80192e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80192e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80192ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80192ec:	2301      	movs	r3, #1
 80192ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192f2:	f383 8810 	msr	PRIMASK, r3
}
 80192f6:	46c0      	nop			@ (mov r8, r8)
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	689a      	ldr	r2, [r3, #8]
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	2101      	movs	r1, #1
 8019304:	438a      	bics	r2, r1
 8019306:	609a      	str	r2, [r3, #8]
 8019308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801930a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801930c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801930e:	f383 8810 	msr	PRIMASK, r3
}
 8019312:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	2280      	movs	r2, #128	@ 0x80
 8019318:	2120      	movs	r1, #32
 801931a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	2200      	movs	r2, #0
 8019320:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	2200      	movs	r2, #0
 8019326:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	4a36      	ldr	r2, [pc, #216]	@ (8019408 <UART_RxISR_16BIT+0x1c4>)
 801932e:	4293      	cmp	r3, r2
 8019330:	d01f      	beq.n	8019372 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	685a      	ldr	r2, [r3, #4]
 8019338:	2380      	movs	r3, #128	@ 0x80
 801933a:	041b      	lsls	r3, r3, #16
 801933c:	4013      	ands	r3, r2
 801933e:	d018      	beq.n	8019372 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019340:	f3ef 8310 	mrs	r3, PRIMASK
 8019344:	617b      	str	r3, [r7, #20]
  return(result);
 8019346:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019348:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801934a:	2301      	movs	r3, #1
 801934c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801934e:	69bb      	ldr	r3, [r7, #24]
 8019350:	f383 8810 	msr	PRIMASK, r3
}
 8019354:	46c0      	nop			@ (mov r8, r8)
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	681a      	ldr	r2, [r3, #0]
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	492a      	ldr	r1, [pc, #168]	@ (801940c <UART_RxISR_16BIT+0x1c8>)
 8019362:	400a      	ands	r2, r1
 8019364:	601a      	str	r2, [r3, #0]
 8019366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801936a:	69fb      	ldr	r3, [r7, #28]
 801936c:	f383 8810 	msr	PRIMASK, r3
}
 8019370:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019376:	2b01      	cmp	r3, #1
 8019378:	d130      	bne.n	80193dc <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	2200      	movs	r2, #0
 801937e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019380:	f3ef 8310 	mrs	r3, PRIMASK
 8019384:	60bb      	str	r3, [r7, #8]
  return(result);
 8019386:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019388:	63bb      	str	r3, [r7, #56]	@ 0x38
 801938a:	2301      	movs	r3, #1
 801938c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	f383 8810 	msr	PRIMASK, r3
}
 8019394:	46c0      	nop			@ (mov r8, r8)
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	681a      	ldr	r2, [r3, #0]
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	2110      	movs	r1, #16
 80193a2:	438a      	bics	r2, r1
 80193a4:	601a      	str	r2, [r3, #0]
 80193a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193aa:	693b      	ldr	r3, [r7, #16]
 80193ac:	f383 8810 	msr	PRIMASK, r3
}
 80193b0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	69db      	ldr	r3, [r3, #28]
 80193b8:	2210      	movs	r2, #16
 80193ba:	4013      	ands	r3, r2
 80193bc:	2b10      	cmp	r3, #16
 80193be:	d103      	bne.n	80193c8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	2210      	movs	r2, #16
 80193c6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	22ac      	movs	r2, #172	@ 0xac
 80193cc:	589b      	ldr	r3, [r3, r2]
 80193ce:	687a      	ldr	r2, [r7, #4]
 80193d0:	2158      	movs	r1, #88	@ 0x58
 80193d2:	5a51      	ldrh	r1, [r2, r1]
 80193d4:	687a      	ldr	r2, [r7, #4]
 80193d6:	0010      	movs	r0, r2
 80193d8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80193da:	e00e      	b.n	80193fa <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	2294      	movs	r2, #148	@ 0x94
 80193e0:	589b      	ldr	r3, [r3, r2]
 80193e2:	687a      	ldr	r2, [r7, #4]
 80193e4:	0010      	movs	r0, r2
 80193e6:	4798      	blx	r3
}
 80193e8:	e007      	b.n	80193fa <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	699a      	ldr	r2, [r3, #24]
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	2108      	movs	r1, #8
 80193f6:	430a      	orrs	r2, r1
 80193f8:	619a      	str	r2, [r3, #24]
}
 80193fa:	46c0      	nop			@ (mov r8, r8)
 80193fc:	46bd      	mov	sp, r7
 80193fe:	b014      	add	sp, #80	@ 0x50
 8019400:	bd80      	pop	{r7, pc}
 8019402:	46c0      	nop			@ (mov r8, r8)
 8019404:	fffffedf 	.word	0xfffffedf
 8019408:	40004800 	.word	0x40004800
 801940c:	fbffffff 	.word	0xfbffffff

08019410 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b082      	sub	sp, #8
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019418:	46c0      	nop			@ (mov r8, r8)
 801941a:	46bd      	mov	sp, r7
 801941c:	b002      	add	sp, #8
 801941e:	bd80      	pop	{r7, pc}

08019420 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b084      	sub	sp, #16
 8019424:	af00      	add	r7, sp, #0
 8019426:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	2244      	movs	r2, #68	@ 0x44
 801942c:	2100      	movs	r1, #0
 801942e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019430:	4b05      	ldr	r3, [pc, #20]	@ (8019448 <USB_EnableGlobalInt+0x28>)
 8019432:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	b299      	uxth	r1, r3
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	2240      	movs	r2, #64	@ 0x40
 801943c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801943e:	2300      	movs	r3, #0
}
 8019440:	0018      	movs	r0, r3
 8019442:	46bd      	mov	sp, r7
 8019444:	b004      	add	sp, #16
 8019446:	bd80      	pop	{r7, pc}
 8019448:	0000bf80 	.word	0x0000bf80

0801944c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b084      	sub	sp, #16
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019454:	4b09      	ldr	r3, [pc, #36]	@ (801947c <USB_DisableGlobalInt+0x30>)
 8019456:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	2240      	movs	r2, #64	@ 0x40
 801945c:	5a9b      	ldrh	r3, [r3, r2]
 801945e:	b29b      	uxth	r3, r3
 8019460:	68fa      	ldr	r2, [r7, #12]
 8019462:	b292      	uxth	r2, r2
 8019464:	43d2      	mvns	r2, r2
 8019466:	b292      	uxth	r2, r2
 8019468:	4013      	ands	r3, r2
 801946a:	b299      	uxth	r1, r3
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	2240      	movs	r2, #64	@ 0x40
 8019470:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019472:	2300      	movs	r3, #0
}
 8019474:	0018      	movs	r0, r3
 8019476:	46bd      	mov	sp, r7
 8019478:	b004      	add	sp, #16
 801947a:	bd80      	pop	{r7, pc}
 801947c:	0000bf80 	.word	0x0000bf80

08019480 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8019480:	b084      	sub	sp, #16
 8019482:	b590      	push	{r4, r7, lr}
 8019484:	b083      	sub	sp, #12
 8019486:	af00      	add	r7, sp, #0
 8019488:	6078      	str	r0, [r7, #4]
 801948a:	2004      	movs	r0, #4
 801948c:	2410      	movs	r4, #16
 801948e:	1900      	adds	r0, r0, r4
 8019490:	2408      	movs	r4, #8
 8019492:	46a4      	mov	ip, r4
 8019494:	44bc      	add	ip, r7
 8019496:	4460      	add	r0, ip
 8019498:	6001      	str	r1, [r0, #0]
 801949a:	6042      	str	r2, [r0, #4]
 801949c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	2240      	movs	r2, #64	@ 0x40
 80194a2:	2101      	movs	r1, #1
 80194a4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	2240      	movs	r2, #64	@ 0x40
 80194aa:	2100      	movs	r1, #0
 80194ac:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	2244      	movs	r2, #68	@ 0x44
 80194b2:	2100      	movs	r1, #0
 80194b4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	2250      	movs	r2, #80	@ 0x50
 80194ba:	2100      	movs	r1, #0
 80194bc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80194be:	2300      	movs	r3, #0
}
 80194c0:	0018      	movs	r0, r3
 80194c2:	46bd      	mov	sp, r7
 80194c4:	b003      	add	sp, #12
 80194c6:	bc90      	pop	{r4, r7}
 80194c8:	bc08      	pop	{r3}
 80194ca:	b004      	add	sp, #16
 80194cc:	4718      	bx	r3
	...

080194d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b09c      	sub	sp, #112	@ 0x70
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	6078      	str	r0, [r7, #4]
 80194d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80194da:	236f      	movs	r3, #111	@ 0x6f
 80194dc:	18fb      	adds	r3, r7, r3
 80194de:	2200      	movs	r2, #0
 80194e0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80194e2:	687a      	ldr	r2, [r7, #4]
 80194e4:	683b      	ldr	r3, [r7, #0]
 80194e6:	781b      	ldrb	r3, [r3, #0]
 80194e8:	009b      	lsls	r3, r3, #2
 80194ea:	18d3      	adds	r3, r2, r3
 80194ec:	881b      	ldrh	r3, [r3, #0]
 80194ee:	b29a      	uxth	r2, r3
 80194f0:	236c      	movs	r3, #108	@ 0x6c
 80194f2:	18fb      	adds	r3, r7, r3
 80194f4:	49a3      	ldr	r1, [pc, #652]	@ (8019784 <USB_ActivateEndpoint+0x2b4>)
 80194f6:	400a      	ands	r2, r1
 80194f8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80194fa:	683b      	ldr	r3, [r7, #0]
 80194fc:	78db      	ldrb	r3, [r3, #3]
 80194fe:	2b03      	cmp	r3, #3
 8019500:	d017      	beq.n	8019532 <USB_ActivateEndpoint+0x62>
 8019502:	dc28      	bgt.n	8019556 <USB_ActivateEndpoint+0x86>
 8019504:	2b02      	cmp	r3, #2
 8019506:	d00e      	beq.n	8019526 <USB_ActivateEndpoint+0x56>
 8019508:	dc25      	bgt.n	8019556 <USB_ActivateEndpoint+0x86>
 801950a:	2b00      	cmp	r3, #0
 801950c:	d002      	beq.n	8019514 <USB_ActivateEndpoint+0x44>
 801950e:	2b01      	cmp	r3, #1
 8019510:	d018      	beq.n	8019544 <USB_ActivateEndpoint+0x74>
 8019512:	e020      	b.n	8019556 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8019514:	226c      	movs	r2, #108	@ 0x6c
 8019516:	18bb      	adds	r3, r7, r2
 8019518:	18ba      	adds	r2, r7, r2
 801951a:	8812      	ldrh	r2, [r2, #0]
 801951c:	2180      	movs	r1, #128	@ 0x80
 801951e:	0089      	lsls	r1, r1, #2
 8019520:	430a      	orrs	r2, r1
 8019522:	801a      	strh	r2, [r3, #0]
      break;
 8019524:	e01c      	b.n	8019560 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8019526:	226c      	movs	r2, #108	@ 0x6c
 8019528:	18bb      	adds	r3, r7, r2
 801952a:	18ba      	adds	r2, r7, r2
 801952c:	8812      	ldrh	r2, [r2, #0]
 801952e:	801a      	strh	r2, [r3, #0]
      break;
 8019530:	e016      	b.n	8019560 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8019532:	226c      	movs	r2, #108	@ 0x6c
 8019534:	18bb      	adds	r3, r7, r2
 8019536:	18ba      	adds	r2, r7, r2
 8019538:	8812      	ldrh	r2, [r2, #0]
 801953a:	21c0      	movs	r1, #192	@ 0xc0
 801953c:	00c9      	lsls	r1, r1, #3
 801953e:	430a      	orrs	r2, r1
 8019540:	801a      	strh	r2, [r3, #0]
      break;
 8019542:	e00d      	b.n	8019560 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8019544:	226c      	movs	r2, #108	@ 0x6c
 8019546:	18bb      	adds	r3, r7, r2
 8019548:	18ba      	adds	r2, r7, r2
 801954a:	8812      	ldrh	r2, [r2, #0]
 801954c:	2180      	movs	r1, #128	@ 0x80
 801954e:	00c9      	lsls	r1, r1, #3
 8019550:	430a      	orrs	r2, r1
 8019552:	801a      	strh	r2, [r3, #0]
      break;
 8019554:	e004      	b.n	8019560 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8019556:	236f      	movs	r3, #111	@ 0x6f
 8019558:	18fb      	adds	r3, r7, r3
 801955a:	2201      	movs	r2, #1
 801955c:	701a      	strb	r2, [r3, #0]
      break;
 801955e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8019560:	687a      	ldr	r2, [r7, #4]
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	781b      	ldrb	r3, [r3, #0]
 8019566:	009b      	lsls	r3, r3, #2
 8019568:	18d3      	adds	r3, r2, r3
 801956a:	226c      	movs	r2, #108	@ 0x6c
 801956c:	18ba      	adds	r2, r7, r2
 801956e:	8812      	ldrh	r2, [r2, #0]
 8019570:	4985      	ldr	r1, [pc, #532]	@ (8019788 <USB_ActivateEndpoint+0x2b8>)
 8019572:	430a      	orrs	r2, r1
 8019574:	b292      	uxth	r2, r2
 8019576:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8019578:	687a      	ldr	r2, [r7, #4]
 801957a:	683b      	ldr	r3, [r7, #0]
 801957c:	781b      	ldrb	r3, [r3, #0]
 801957e:	009b      	lsls	r3, r3, #2
 8019580:	18d3      	adds	r3, r2, r3
 8019582:	881b      	ldrh	r3, [r3, #0]
 8019584:	b29b      	uxth	r3, r3
 8019586:	b21b      	sxth	r3, r3
 8019588:	4a80      	ldr	r2, [pc, #512]	@ (801978c <USB_ActivateEndpoint+0x2bc>)
 801958a:	4013      	ands	r3, r2
 801958c:	b21a      	sxth	r2, r3
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	781b      	ldrb	r3, [r3, #0]
 8019592:	b21b      	sxth	r3, r3
 8019594:	4313      	orrs	r3, r2
 8019596:	b21a      	sxth	r2, r3
 8019598:	2166      	movs	r1, #102	@ 0x66
 801959a:	187b      	adds	r3, r7, r1
 801959c:	801a      	strh	r2, [r3, #0]
 801959e:	687a      	ldr	r2, [r7, #4]
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	781b      	ldrb	r3, [r3, #0]
 80195a4:	009b      	lsls	r3, r3, #2
 80195a6:	18d3      	adds	r3, r2, r3
 80195a8:	187a      	adds	r2, r7, r1
 80195aa:	8812      	ldrh	r2, [r2, #0]
 80195ac:	4976      	ldr	r1, [pc, #472]	@ (8019788 <USB_ActivateEndpoint+0x2b8>)
 80195ae:	430a      	orrs	r2, r1
 80195b0:	b292      	uxth	r2, r2
 80195b2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80195b4:	683b      	ldr	r3, [r7, #0]
 80195b6:	7b1b      	ldrb	r3, [r3, #12]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d000      	beq.n	80195be <USB_ActivateEndpoint+0xee>
 80195bc:	e178      	b.n	80198b0 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	785b      	ldrb	r3, [r3, #1]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d100      	bne.n	80195c8 <USB_ActivateEndpoint+0xf8>
 80195c6:	e07a      	b.n	80196be <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	61bb      	str	r3, [r7, #24]
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	2250      	movs	r2, #80	@ 0x50
 80195d0:	5a9b      	ldrh	r3, [r3, r2]
 80195d2:	b29b      	uxth	r3, r3
 80195d4:	001a      	movs	r2, r3
 80195d6:	69bb      	ldr	r3, [r7, #24]
 80195d8:	189b      	adds	r3, r3, r2
 80195da:	61bb      	str	r3, [r7, #24]
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	781b      	ldrb	r3, [r3, #0]
 80195e0:	00da      	lsls	r2, r3, #3
 80195e2:	69bb      	ldr	r3, [r7, #24]
 80195e4:	18d3      	adds	r3, r2, r3
 80195e6:	2280      	movs	r2, #128	@ 0x80
 80195e8:	00d2      	lsls	r2, r2, #3
 80195ea:	4694      	mov	ip, r2
 80195ec:	4463      	add	r3, ip
 80195ee:	617b      	str	r3, [r7, #20]
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	88db      	ldrh	r3, [r3, #6]
 80195f4:	085b      	lsrs	r3, r3, #1
 80195f6:	b29b      	uxth	r3, r3
 80195f8:	18db      	adds	r3, r3, r3
 80195fa:	b29a      	uxth	r2, r3
 80195fc:	697b      	ldr	r3, [r7, #20]
 80195fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019600:	687a      	ldr	r2, [r7, #4]
 8019602:	683b      	ldr	r3, [r7, #0]
 8019604:	781b      	ldrb	r3, [r3, #0]
 8019606:	009b      	lsls	r3, r3, #2
 8019608:	18d2      	adds	r2, r2, r3
 801960a:	2112      	movs	r1, #18
 801960c:	187b      	adds	r3, r7, r1
 801960e:	8812      	ldrh	r2, [r2, #0]
 8019610:	801a      	strh	r2, [r3, #0]
 8019612:	187b      	adds	r3, r7, r1
 8019614:	881b      	ldrh	r3, [r3, #0]
 8019616:	2240      	movs	r2, #64	@ 0x40
 8019618:	4013      	ands	r3, r2
 801961a:	d016      	beq.n	801964a <USB_ActivateEndpoint+0x17a>
 801961c:	687a      	ldr	r2, [r7, #4]
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	781b      	ldrb	r3, [r3, #0]
 8019622:	009b      	lsls	r3, r3, #2
 8019624:	18d3      	adds	r3, r2, r3
 8019626:	881b      	ldrh	r3, [r3, #0]
 8019628:	b29a      	uxth	r2, r3
 801962a:	2010      	movs	r0, #16
 801962c:	183b      	adds	r3, r7, r0
 801962e:	4957      	ldr	r1, [pc, #348]	@ (801978c <USB_ActivateEndpoint+0x2bc>)
 8019630:	400a      	ands	r2, r1
 8019632:	801a      	strh	r2, [r3, #0]
 8019634:	687a      	ldr	r2, [r7, #4]
 8019636:	683b      	ldr	r3, [r7, #0]
 8019638:	781b      	ldrb	r3, [r3, #0]
 801963a:	009b      	lsls	r3, r3, #2
 801963c:	18d3      	adds	r3, r2, r3
 801963e:	183a      	adds	r2, r7, r0
 8019640:	8812      	ldrh	r2, [r2, #0]
 8019642:	4953      	ldr	r1, [pc, #332]	@ (8019790 <USB_ActivateEndpoint+0x2c0>)
 8019644:	430a      	orrs	r2, r1
 8019646:	b292      	uxth	r2, r2
 8019648:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801964a:	683b      	ldr	r3, [r7, #0]
 801964c:	78db      	ldrb	r3, [r3, #3]
 801964e:	2b01      	cmp	r3, #1
 8019650:	d01d      	beq.n	801968e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019652:	687a      	ldr	r2, [r7, #4]
 8019654:	683b      	ldr	r3, [r7, #0]
 8019656:	781b      	ldrb	r3, [r3, #0]
 8019658:	009b      	lsls	r3, r3, #2
 801965a:	18d3      	adds	r3, r2, r3
 801965c:	881b      	ldrh	r3, [r3, #0]
 801965e:	b29a      	uxth	r2, r3
 8019660:	200c      	movs	r0, #12
 8019662:	183b      	adds	r3, r7, r0
 8019664:	494b      	ldr	r1, [pc, #300]	@ (8019794 <USB_ActivateEndpoint+0x2c4>)
 8019666:	400a      	ands	r2, r1
 8019668:	801a      	strh	r2, [r3, #0]
 801966a:	183b      	adds	r3, r7, r0
 801966c:	183a      	adds	r2, r7, r0
 801966e:	8812      	ldrh	r2, [r2, #0]
 8019670:	2120      	movs	r1, #32
 8019672:	404a      	eors	r2, r1
 8019674:	801a      	strh	r2, [r3, #0]
 8019676:	687a      	ldr	r2, [r7, #4]
 8019678:	683b      	ldr	r3, [r7, #0]
 801967a:	781b      	ldrb	r3, [r3, #0]
 801967c:	009b      	lsls	r3, r3, #2
 801967e:	18d3      	adds	r3, r2, r3
 8019680:	183a      	adds	r2, r7, r0
 8019682:	8812      	ldrh	r2, [r2, #0]
 8019684:	4940      	ldr	r1, [pc, #256]	@ (8019788 <USB_ActivateEndpoint+0x2b8>)
 8019686:	430a      	orrs	r2, r1
 8019688:	b292      	uxth	r2, r2
 801968a:	801a      	strh	r2, [r3, #0]
 801968c:	e2b4      	b.n	8019bf8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801968e:	687a      	ldr	r2, [r7, #4]
 8019690:	683b      	ldr	r3, [r7, #0]
 8019692:	781b      	ldrb	r3, [r3, #0]
 8019694:	009b      	lsls	r3, r3, #2
 8019696:	18d3      	adds	r3, r2, r3
 8019698:	881b      	ldrh	r3, [r3, #0]
 801969a:	b29a      	uxth	r2, r3
 801969c:	200e      	movs	r0, #14
 801969e:	183b      	adds	r3, r7, r0
 80196a0:	493c      	ldr	r1, [pc, #240]	@ (8019794 <USB_ActivateEndpoint+0x2c4>)
 80196a2:	400a      	ands	r2, r1
 80196a4:	801a      	strh	r2, [r3, #0]
 80196a6:	687a      	ldr	r2, [r7, #4]
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	781b      	ldrb	r3, [r3, #0]
 80196ac:	009b      	lsls	r3, r3, #2
 80196ae:	18d3      	adds	r3, r2, r3
 80196b0:	183a      	adds	r2, r7, r0
 80196b2:	8812      	ldrh	r2, [r2, #0]
 80196b4:	4934      	ldr	r1, [pc, #208]	@ (8019788 <USB_ActivateEndpoint+0x2b8>)
 80196b6:	430a      	orrs	r2, r1
 80196b8:	b292      	uxth	r2, r2
 80196ba:	801a      	strh	r2, [r3, #0]
 80196bc:	e29c      	b.n	8019bf8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	2250      	movs	r2, #80	@ 0x50
 80196c6:	5a9b      	ldrh	r3, [r3, r2]
 80196c8:	b29b      	uxth	r3, r3
 80196ca:	001a      	movs	r2, r3
 80196cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196ce:	189b      	adds	r3, r3, r2
 80196d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	781b      	ldrb	r3, [r3, #0]
 80196d6:	00da      	lsls	r2, r3, #3
 80196d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196da:	18d3      	adds	r3, r2, r3
 80196dc:	4a2e      	ldr	r2, [pc, #184]	@ (8019798 <USB_ActivateEndpoint+0x2c8>)
 80196de:	4694      	mov	ip, r2
 80196e0:	4463      	add	r3, ip
 80196e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80196e4:	683b      	ldr	r3, [r7, #0]
 80196e6:	88db      	ldrh	r3, [r3, #6]
 80196e8:	085b      	lsrs	r3, r3, #1
 80196ea:	b29b      	uxth	r3, r3
 80196ec:	18db      	adds	r3, r3, r3
 80196ee:	b29a      	uxth	r2, r3
 80196f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196f2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2250      	movs	r2, #80	@ 0x50
 80196fc:	5a9b      	ldrh	r3, [r3, r2]
 80196fe:	b29b      	uxth	r3, r3
 8019700:	001a      	movs	r2, r3
 8019702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019704:	189b      	adds	r3, r3, r2
 8019706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019708:	683b      	ldr	r3, [r7, #0]
 801970a:	781b      	ldrb	r3, [r3, #0]
 801970c:	00da      	lsls	r2, r3, #3
 801970e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019710:	18d3      	adds	r3, r2, r3
 8019712:	4a22      	ldr	r2, [pc, #136]	@ (801979c <USB_ActivateEndpoint+0x2cc>)
 8019714:	4694      	mov	ip, r2
 8019716:	4463      	add	r3, ip
 8019718:	627b      	str	r3, [r7, #36]	@ 0x24
 801971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801971c:	881b      	ldrh	r3, [r3, #0]
 801971e:	b29b      	uxth	r3, r3
 8019720:	059b      	lsls	r3, r3, #22
 8019722:	0d9b      	lsrs	r3, r3, #22
 8019724:	b29a      	uxth	r2, r3
 8019726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019728:	801a      	strh	r2, [r3, #0]
 801972a:	683b      	ldr	r3, [r7, #0]
 801972c:	691b      	ldr	r3, [r3, #16]
 801972e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019730:	d91a      	bls.n	8019768 <USB_ActivateEndpoint+0x298>
 8019732:	683b      	ldr	r3, [r7, #0]
 8019734:	691b      	ldr	r3, [r3, #16]
 8019736:	095b      	lsrs	r3, r3, #5
 8019738:	66bb      	str	r3, [r7, #104]	@ 0x68
 801973a:	683b      	ldr	r3, [r7, #0]
 801973c:	691b      	ldr	r3, [r3, #16]
 801973e:	221f      	movs	r2, #31
 8019740:	4013      	ands	r3, r2
 8019742:	d102      	bne.n	801974a <USB_ActivateEndpoint+0x27a>
 8019744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019746:	3b01      	subs	r3, #1
 8019748:	66bb      	str	r3, [r7, #104]	@ 0x68
 801974a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801974c:	881b      	ldrh	r3, [r3, #0]
 801974e:	b29a      	uxth	r2, r3
 8019750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019752:	b29b      	uxth	r3, r3
 8019754:	029b      	lsls	r3, r3, #10
 8019756:	b29b      	uxth	r3, r3
 8019758:	4313      	orrs	r3, r2
 801975a:	b29b      	uxth	r3, r3
 801975c:	4a10      	ldr	r2, [pc, #64]	@ (80197a0 <USB_ActivateEndpoint+0x2d0>)
 801975e:	4313      	orrs	r3, r2
 8019760:	b29a      	uxth	r2, r3
 8019762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019764:	801a      	strh	r2, [r3, #0]
 8019766:	e034      	b.n	80197d2 <USB_ActivateEndpoint+0x302>
 8019768:	683b      	ldr	r3, [r7, #0]
 801976a:	691b      	ldr	r3, [r3, #16]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d119      	bne.n	80197a4 <USB_ActivateEndpoint+0x2d4>
 8019770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019772:	881b      	ldrh	r3, [r3, #0]
 8019774:	b29b      	uxth	r3, r3
 8019776:	4a0a      	ldr	r2, [pc, #40]	@ (80197a0 <USB_ActivateEndpoint+0x2d0>)
 8019778:	4313      	orrs	r3, r2
 801977a:	b29a      	uxth	r2, r3
 801977c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801977e:	801a      	strh	r2, [r3, #0]
 8019780:	e027      	b.n	80197d2 <USB_ActivateEndpoint+0x302>
 8019782:	46c0      	nop			@ (mov r8, r8)
 8019784:	ffff898f 	.word	0xffff898f
 8019788:	ffff8080 	.word	0xffff8080
 801978c:	ffff8f8f 	.word	0xffff8f8f
 8019790:	ffff80c0 	.word	0xffff80c0
 8019794:	ffff8fbf 	.word	0xffff8fbf
 8019798:	00000404 	.word	0x00000404
 801979c:	00000406 	.word	0x00000406
 80197a0:	ffff8000 	.word	0xffff8000
 80197a4:	683b      	ldr	r3, [r7, #0]
 80197a6:	691b      	ldr	r3, [r3, #16]
 80197a8:	085b      	lsrs	r3, r3, #1
 80197aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80197ac:	683b      	ldr	r3, [r7, #0]
 80197ae:	691b      	ldr	r3, [r3, #16]
 80197b0:	2201      	movs	r2, #1
 80197b2:	4013      	ands	r3, r2
 80197b4:	d002      	beq.n	80197bc <USB_ActivateEndpoint+0x2ec>
 80197b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80197b8:	3301      	adds	r3, #1
 80197ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80197bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197be:	881b      	ldrh	r3, [r3, #0]
 80197c0:	b29a      	uxth	r2, r3
 80197c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80197c4:	b29b      	uxth	r3, r3
 80197c6:	029b      	lsls	r3, r3, #10
 80197c8:	b29b      	uxth	r3, r3
 80197ca:	4313      	orrs	r3, r2
 80197cc:	b29a      	uxth	r2, r3
 80197ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80197d2:	687a      	ldr	r2, [r7, #4]
 80197d4:	683b      	ldr	r3, [r7, #0]
 80197d6:	781b      	ldrb	r3, [r3, #0]
 80197d8:	009b      	lsls	r3, r3, #2
 80197da:	18d2      	adds	r2, r2, r3
 80197dc:	2122      	movs	r1, #34	@ 0x22
 80197de:	187b      	adds	r3, r7, r1
 80197e0:	8812      	ldrh	r2, [r2, #0]
 80197e2:	801a      	strh	r2, [r3, #0]
 80197e4:	187b      	adds	r3, r7, r1
 80197e6:	881a      	ldrh	r2, [r3, #0]
 80197e8:	2380      	movs	r3, #128	@ 0x80
 80197ea:	01db      	lsls	r3, r3, #7
 80197ec:	4013      	ands	r3, r2
 80197ee:	d016      	beq.n	801981e <USB_ActivateEndpoint+0x34e>
 80197f0:	687a      	ldr	r2, [r7, #4]
 80197f2:	683b      	ldr	r3, [r7, #0]
 80197f4:	781b      	ldrb	r3, [r3, #0]
 80197f6:	009b      	lsls	r3, r3, #2
 80197f8:	18d3      	adds	r3, r2, r3
 80197fa:	881b      	ldrh	r3, [r3, #0]
 80197fc:	b29a      	uxth	r2, r3
 80197fe:	2020      	movs	r0, #32
 8019800:	183b      	adds	r3, r7, r0
 8019802:	49dd      	ldr	r1, [pc, #884]	@ (8019b78 <USB_ActivateEndpoint+0x6a8>)
 8019804:	400a      	ands	r2, r1
 8019806:	801a      	strh	r2, [r3, #0]
 8019808:	687a      	ldr	r2, [r7, #4]
 801980a:	683b      	ldr	r3, [r7, #0]
 801980c:	781b      	ldrb	r3, [r3, #0]
 801980e:	009b      	lsls	r3, r3, #2
 8019810:	18d3      	adds	r3, r2, r3
 8019812:	183a      	adds	r2, r7, r0
 8019814:	8812      	ldrh	r2, [r2, #0]
 8019816:	49d9      	ldr	r1, [pc, #868]	@ (8019b7c <USB_ActivateEndpoint+0x6ac>)
 8019818:	430a      	orrs	r2, r1
 801981a:	b292      	uxth	r2, r2
 801981c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	781b      	ldrb	r3, [r3, #0]
 8019822:	2b00      	cmp	r3, #0
 8019824:	d125      	bne.n	8019872 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019826:	687a      	ldr	r2, [r7, #4]
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	781b      	ldrb	r3, [r3, #0]
 801982c:	009b      	lsls	r3, r3, #2
 801982e:	18d3      	adds	r3, r2, r3
 8019830:	881b      	ldrh	r3, [r3, #0]
 8019832:	b29a      	uxth	r2, r3
 8019834:	201c      	movs	r0, #28
 8019836:	183b      	adds	r3, r7, r0
 8019838:	49d1      	ldr	r1, [pc, #836]	@ (8019b80 <USB_ActivateEndpoint+0x6b0>)
 801983a:	400a      	ands	r2, r1
 801983c:	801a      	strh	r2, [r3, #0]
 801983e:	183b      	adds	r3, r7, r0
 8019840:	183a      	adds	r2, r7, r0
 8019842:	8812      	ldrh	r2, [r2, #0]
 8019844:	2180      	movs	r1, #128	@ 0x80
 8019846:	0149      	lsls	r1, r1, #5
 8019848:	404a      	eors	r2, r1
 801984a:	801a      	strh	r2, [r3, #0]
 801984c:	183b      	adds	r3, r7, r0
 801984e:	183a      	adds	r2, r7, r0
 8019850:	8812      	ldrh	r2, [r2, #0]
 8019852:	2180      	movs	r1, #128	@ 0x80
 8019854:	0189      	lsls	r1, r1, #6
 8019856:	404a      	eors	r2, r1
 8019858:	801a      	strh	r2, [r3, #0]
 801985a:	687a      	ldr	r2, [r7, #4]
 801985c:	683b      	ldr	r3, [r7, #0]
 801985e:	781b      	ldrb	r3, [r3, #0]
 8019860:	009b      	lsls	r3, r3, #2
 8019862:	18d3      	adds	r3, r2, r3
 8019864:	183a      	adds	r2, r7, r0
 8019866:	8812      	ldrh	r2, [r2, #0]
 8019868:	49c6      	ldr	r1, [pc, #792]	@ (8019b84 <USB_ActivateEndpoint+0x6b4>)
 801986a:	430a      	orrs	r2, r1
 801986c:	b292      	uxth	r2, r2
 801986e:	801a      	strh	r2, [r3, #0]
 8019870:	e1c2      	b.n	8019bf8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8019872:	687a      	ldr	r2, [r7, #4]
 8019874:	683b      	ldr	r3, [r7, #0]
 8019876:	781b      	ldrb	r3, [r3, #0]
 8019878:	009b      	lsls	r3, r3, #2
 801987a:	18d3      	adds	r3, r2, r3
 801987c:	881b      	ldrh	r3, [r3, #0]
 801987e:	b29a      	uxth	r2, r3
 8019880:	201e      	movs	r0, #30
 8019882:	183b      	adds	r3, r7, r0
 8019884:	49be      	ldr	r1, [pc, #760]	@ (8019b80 <USB_ActivateEndpoint+0x6b0>)
 8019886:	400a      	ands	r2, r1
 8019888:	801a      	strh	r2, [r3, #0]
 801988a:	183b      	adds	r3, r7, r0
 801988c:	183a      	adds	r2, r7, r0
 801988e:	8812      	ldrh	r2, [r2, #0]
 8019890:	2180      	movs	r1, #128	@ 0x80
 8019892:	0189      	lsls	r1, r1, #6
 8019894:	404a      	eors	r2, r1
 8019896:	801a      	strh	r2, [r3, #0]
 8019898:	687a      	ldr	r2, [r7, #4]
 801989a:	683b      	ldr	r3, [r7, #0]
 801989c:	781b      	ldrb	r3, [r3, #0]
 801989e:	009b      	lsls	r3, r3, #2
 80198a0:	18d3      	adds	r3, r2, r3
 80198a2:	183a      	adds	r2, r7, r0
 80198a4:	8812      	ldrh	r2, [r2, #0]
 80198a6:	49b7      	ldr	r1, [pc, #732]	@ (8019b84 <USB_ActivateEndpoint+0x6b4>)
 80198a8:	430a      	orrs	r2, r1
 80198aa:	b292      	uxth	r2, r2
 80198ac:	801a      	strh	r2, [r3, #0]
 80198ae:	e1a3      	b.n	8019bf8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80198b0:	683b      	ldr	r3, [r7, #0]
 80198b2:	78db      	ldrb	r3, [r3, #3]
 80198b4:	2b02      	cmp	r3, #2
 80198b6:	d117      	bne.n	80198e8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80198b8:	687a      	ldr	r2, [r7, #4]
 80198ba:	683b      	ldr	r3, [r7, #0]
 80198bc:	781b      	ldrb	r3, [r3, #0]
 80198be:	009b      	lsls	r3, r3, #2
 80198c0:	18d3      	adds	r3, r2, r3
 80198c2:	881b      	ldrh	r3, [r3, #0]
 80198c4:	b29a      	uxth	r2, r3
 80198c6:	2062      	movs	r0, #98	@ 0x62
 80198c8:	183b      	adds	r3, r7, r0
 80198ca:	49ab      	ldr	r1, [pc, #684]	@ (8019b78 <USB_ActivateEndpoint+0x6a8>)
 80198cc:	400a      	ands	r2, r1
 80198ce:	801a      	strh	r2, [r3, #0]
 80198d0:	687a      	ldr	r2, [r7, #4]
 80198d2:	683b      	ldr	r3, [r7, #0]
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	009b      	lsls	r3, r3, #2
 80198d8:	18d3      	adds	r3, r2, r3
 80198da:	183a      	adds	r2, r7, r0
 80198dc:	8812      	ldrh	r2, [r2, #0]
 80198de:	49aa      	ldr	r1, [pc, #680]	@ (8019b88 <USB_ActivateEndpoint+0x6b8>)
 80198e0:	430a      	orrs	r2, r1
 80198e2:	b292      	uxth	r2, r2
 80198e4:	801a      	strh	r2, [r3, #0]
 80198e6:	e016      	b.n	8019916 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80198e8:	687a      	ldr	r2, [r7, #4]
 80198ea:	683b      	ldr	r3, [r7, #0]
 80198ec:	781b      	ldrb	r3, [r3, #0]
 80198ee:	009b      	lsls	r3, r3, #2
 80198f0:	18d3      	adds	r3, r2, r3
 80198f2:	881b      	ldrh	r3, [r3, #0]
 80198f4:	b29a      	uxth	r2, r3
 80198f6:	2064      	movs	r0, #100	@ 0x64
 80198f8:	183b      	adds	r3, r7, r0
 80198fa:	49a4      	ldr	r1, [pc, #656]	@ (8019b8c <USB_ActivateEndpoint+0x6bc>)
 80198fc:	400a      	ands	r2, r1
 80198fe:	801a      	strh	r2, [r3, #0]
 8019900:	687a      	ldr	r2, [r7, #4]
 8019902:	683b      	ldr	r3, [r7, #0]
 8019904:	781b      	ldrb	r3, [r3, #0]
 8019906:	009b      	lsls	r3, r3, #2
 8019908:	18d3      	adds	r3, r2, r3
 801990a:	183a      	adds	r2, r7, r0
 801990c:	8812      	ldrh	r2, [r2, #0]
 801990e:	499d      	ldr	r1, [pc, #628]	@ (8019b84 <USB_ActivateEndpoint+0x6b4>)
 8019910:	430a      	orrs	r2, r1
 8019912:	b292      	uxth	r2, r2
 8019914:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	2250      	movs	r2, #80	@ 0x50
 801991e:	5a9b      	ldrh	r3, [r3, r2]
 8019920:	b29b      	uxth	r3, r3
 8019922:	001a      	movs	r2, r3
 8019924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019926:	189b      	adds	r3, r3, r2
 8019928:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801992a:	683b      	ldr	r3, [r7, #0]
 801992c:	781b      	ldrb	r3, [r3, #0]
 801992e:	00da      	lsls	r2, r3, #3
 8019930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019932:	18d3      	adds	r3, r2, r3
 8019934:	2280      	movs	r2, #128	@ 0x80
 8019936:	00d2      	lsls	r2, r2, #3
 8019938:	4694      	mov	ip, r2
 801993a:	4463      	add	r3, ip
 801993c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	891b      	ldrh	r3, [r3, #8]
 8019942:	085b      	lsrs	r3, r3, #1
 8019944:	b29b      	uxth	r3, r3
 8019946:	18db      	adds	r3, r3, r3
 8019948:	b29a      	uxth	r2, r3
 801994a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801994c:	801a      	strh	r2, [r3, #0]
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	657b      	str	r3, [r7, #84]	@ 0x54
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	2250      	movs	r2, #80	@ 0x50
 8019956:	5a9b      	ldrh	r3, [r3, r2]
 8019958:	b29b      	uxth	r3, r3
 801995a:	001a      	movs	r2, r3
 801995c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801995e:	189b      	adds	r3, r3, r2
 8019960:	657b      	str	r3, [r7, #84]	@ 0x54
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	781b      	ldrb	r3, [r3, #0]
 8019966:	00da      	lsls	r2, r3, #3
 8019968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801996a:	18d3      	adds	r3, r2, r3
 801996c:	4a88      	ldr	r2, [pc, #544]	@ (8019b90 <USB_ActivateEndpoint+0x6c0>)
 801996e:	4694      	mov	ip, r2
 8019970:	4463      	add	r3, ip
 8019972:	653b      	str	r3, [r7, #80]	@ 0x50
 8019974:	683b      	ldr	r3, [r7, #0]
 8019976:	895b      	ldrh	r3, [r3, #10]
 8019978:	085b      	lsrs	r3, r3, #1
 801997a:	b29b      	uxth	r3, r3
 801997c:	18db      	adds	r3, r3, r3
 801997e:	b29a      	uxth	r2, r3
 8019980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019982:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	785b      	ldrb	r3, [r3, #1]
 8019988:	2b00      	cmp	r3, #0
 801998a:	d000      	beq.n	801998e <USB_ActivateEndpoint+0x4be>
 801998c:	e087      	b.n	8019a9e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801998e:	687a      	ldr	r2, [r7, #4]
 8019990:	683b      	ldr	r3, [r7, #0]
 8019992:	781b      	ldrb	r3, [r3, #0]
 8019994:	009b      	lsls	r3, r3, #2
 8019996:	18d2      	adds	r2, r2, r3
 8019998:	2140      	movs	r1, #64	@ 0x40
 801999a:	187b      	adds	r3, r7, r1
 801999c:	8812      	ldrh	r2, [r2, #0]
 801999e:	801a      	strh	r2, [r3, #0]
 80199a0:	187b      	adds	r3, r7, r1
 80199a2:	881a      	ldrh	r2, [r3, #0]
 80199a4:	2380      	movs	r3, #128	@ 0x80
 80199a6:	01db      	lsls	r3, r3, #7
 80199a8:	4013      	ands	r3, r2
 80199aa:	d016      	beq.n	80199da <USB_ActivateEndpoint+0x50a>
 80199ac:	687a      	ldr	r2, [r7, #4]
 80199ae:	683b      	ldr	r3, [r7, #0]
 80199b0:	781b      	ldrb	r3, [r3, #0]
 80199b2:	009b      	lsls	r3, r3, #2
 80199b4:	18d3      	adds	r3, r2, r3
 80199b6:	881b      	ldrh	r3, [r3, #0]
 80199b8:	b29a      	uxth	r2, r3
 80199ba:	203e      	movs	r0, #62	@ 0x3e
 80199bc:	183b      	adds	r3, r7, r0
 80199be:	496e      	ldr	r1, [pc, #440]	@ (8019b78 <USB_ActivateEndpoint+0x6a8>)
 80199c0:	400a      	ands	r2, r1
 80199c2:	801a      	strh	r2, [r3, #0]
 80199c4:	687a      	ldr	r2, [r7, #4]
 80199c6:	683b      	ldr	r3, [r7, #0]
 80199c8:	781b      	ldrb	r3, [r3, #0]
 80199ca:	009b      	lsls	r3, r3, #2
 80199cc:	18d3      	adds	r3, r2, r3
 80199ce:	183a      	adds	r2, r7, r0
 80199d0:	8812      	ldrh	r2, [r2, #0]
 80199d2:	496a      	ldr	r1, [pc, #424]	@ (8019b7c <USB_ActivateEndpoint+0x6ac>)
 80199d4:	430a      	orrs	r2, r1
 80199d6:	b292      	uxth	r2, r2
 80199d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80199da:	687a      	ldr	r2, [r7, #4]
 80199dc:	683b      	ldr	r3, [r7, #0]
 80199de:	781b      	ldrb	r3, [r3, #0]
 80199e0:	009b      	lsls	r3, r3, #2
 80199e2:	18d2      	adds	r2, r2, r3
 80199e4:	213c      	movs	r1, #60	@ 0x3c
 80199e6:	187b      	adds	r3, r7, r1
 80199e8:	8812      	ldrh	r2, [r2, #0]
 80199ea:	801a      	strh	r2, [r3, #0]
 80199ec:	187b      	adds	r3, r7, r1
 80199ee:	881b      	ldrh	r3, [r3, #0]
 80199f0:	2240      	movs	r2, #64	@ 0x40
 80199f2:	4013      	ands	r3, r2
 80199f4:	d016      	beq.n	8019a24 <USB_ActivateEndpoint+0x554>
 80199f6:	687a      	ldr	r2, [r7, #4]
 80199f8:	683b      	ldr	r3, [r7, #0]
 80199fa:	781b      	ldrb	r3, [r3, #0]
 80199fc:	009b      	lsls	r3, r3, #2
 80199fe:	18d3      	adds	r3, r2, r3
 8019a00:	881b      	ldrh	r3, [r3, #0]
 8019a02:	b29a      	uxth	r2, r3
 8019a04:	203a      	movs	r0, #58	@ 0x3a
 8019a06:	183b      	adds	r3, r7, r0
 8019a08:	495b      	ldr	r1, [pc, #364]	@ (8019b78 <USB_ActivateEndpoint+0x6a8>)
 8019a0a:	400a      	ands	r2, r1
 8019a0c:	801a      	strh	r2, [r3, #0]
 8019a0e:	687a      	ldr	r2, [r7, #4]
 8019a10:	683b      	ldr	r3, [r7, #0]
 8019a12:	781b      	ldrb	r3, [r3, #0]
 8019a14:	009b      	lsls	r3, r3, #2
 8019a16:	18d3      	adds	r3, r2, r3
 8019a18:	183a      	adds	r2, r7, r0
 8019a1a:	8812      	ldrh	r2, [r2, #0]
 8019a1c:	495d      	ldr	r1, [pc, #372]	@ (8019b94 <USB_ActivateEndpoint+0x6c4>)
 8019a1e:	430a      	orrs	r2, r1
 8019a20:	b292      	uxth	r2, r2
 8019a22:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019a24:	687a      	ldr	r2, [r7, #4]
 8019a26:	683b      	ldr	r3, [r7, #0]
 8019a28:	781b      	ldrb	r3, [r3, #0]
 8019a2a:	009b      	lsls	r3, r3, #2
 8019a2c:	18d3      	adds	r3, r2, r3
 8019a2e:	881b      	ldrh	r3, [r3, #0]
 8019a30:	b29a      	uxth	r2, r3
 8019a32:	2038      	movs	r0, #56	@ 0x38
 8019a34:	183b      	adds	r3, r7, r0
 8019a36:	4952      	ldr	r1, [pc, #328]	@ (8019b80 <USB_ActivateEndpoint+0x6b0>)
 8019a38:	400a      	ands	r2, r1
 8019a3a:	801a      	strh	r2, [r3, #0]
 8019a3c:	183b      	adds	r3, r7, r0
 8019a3e:	183a      	adds	r2, r7, r0
 8019a40:	8812      	ldrh	r2, [r2, #0]
 8019a42:	2180      	movs	r1, #128	@ 0x80
 8019a44:	0149      	lsls	r1, r1, #5
 8019a46:	404a      	eors	r2, r1
 8019a48:	801a      	strh	r2, [r3, #0]
 8019a4a:	183b      	adds	r3, r7, r0
 8019a4c:	183a      	adds	r2, r7, r0
 8019a4e:	8812      	ldrh	r2, [r2, #0]
 8019a50:	2180      	movs	r1, #128	@ 0x80
 8019a52:	0189      	lsls	r1, r1, #6
 8019a54:	404a      	eors	r2, r1
 8019a56:	801a      	strh	r2, [r3, #0]
 8019a58:	687a      	ldr	r2, [r7, #4]
 8019a5a:	683b      	ldr	r3, [r7, #0]
 8019a5c:	781b      	ldrb	r3, [r3, #0]
 8019a5e:	009b      	lsls	r3, r3, #2
 8019a60:	18d3      	adds	r3, r2, r3
 8019a62:	183a      	adds	r2, r7, r0
 8019a64:	8812      	ldrh	r2, [r2, #0]
 8019a66:	4947      	ldr	r1, [pc, #284]	@ (8019b84 <USB_ActivateEndpoint+0x6b4>)
 8019a68:	430a      	orrs	r2, r1
 8019a6a:	b292      	uxth	r2, r2
 8019a6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019a6e:	687a      	ldr	r2, [r7, #4]
 8019a70:	683b      	ldr	r3, [r7, #0]
 8019a72:	781b      	ldrb	r3, [r3, #0]
 8019a74:	009b      	lsls	r3, r3, #2
 8019a76:	18d3      	adds	r3, r2, r3
 8019a78:	881b      	ldrh	r3, [r3, #0]
 8019a7a:	b29a      	uxth	r2, r3
 8019a7c:	2036      	movs	r0, #54	@ 0x36
 8019a7e:	183b      	adds	r3, r7, r0
 8019a80:	4945      	ldr	r1, [pc, #276]	@ (8019b98 <USB_ActivateEndpoint+0x6c8>)
 8019a82:	400a      	ands	r2, r1
 8019a84:	801a      	strh	r2, [r3, #0]
 8019a86:	687a      	ldr	r2, [r7, #4]
 8019a88:	683b      	ldr	r3, [r7, #0]
 8019a8a:	781b      	ldrb	r3, [r3, #0]
 8019a8c:	009b      	lsls	r3, r3, #2
 8019a8e:	18d3      	adds	r3, r2, r3
 8019a90:	183a      	adds	r2, r7, r0
 8019a92:	8812      	ldrh	r2, [r2, #0]
 8019a94:	493b      	ldr	r1, [pc, #236]	@ (8019b84 <USB_ActivateEndpoint+0x6b4>)
 8019a96:	430a      	orrs	r2, r1
 8019a98:	b292      	uxth	r2, r2
 8019a9a:	801a      	strh	r2, [r3, #0]
 8019a9c:	e0ac      	b.n	8019bf8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019a9e:	687a      	ldr	r2, [r7, #4]
 8019aa0:	683b      	ldr	r3, [r7, #0]
 8019aa2:	781b      	ldrb	r3, [r3, #0]
 8019aa4:	009b      	lsls	r3, r3, #2
 8019aa6:	18d2      	adds	r2, r2, r3
 8019aa8:	214e      	movs	r1, #78	@ 0x4e
 8019aaa:	187b      	adds	r3, r7, r1
 8019aac:	8812      	ldrh	r2, [r2, #0]
 8019aae:	801a      	strh	r2, [r3, #0]
 8019ab0:	187b      	adds	r3, r7, r1
 8019ab2:	881a      	ldrh	r2, [r3, #0]
 8019ab4:	2380      	movs	r3, #128	@ 0x80
 8019ab6:	01db      	lsls	r3, r3, #7
 8019ab8:	4013      	ands	r3, r2
 8019aba:	d016      	beq.n	8019aea <USB_ActivateEndpoint+0x61a>
 8019abc:	687a      	ldr	r2, [r7, #4]
 8019abe:	683b      	ldr	r3, [r7, #0]
 8019ac0:	781b      	ldrb	r3, [r3, #0]
 8019ac2:	009b      	lsls	r3, r3, #2
 8019ac4:	18d3      	adds	r3, r2, r3
 8019ac6:	881b      	ldrh	r3, [r3, #0]
 8019ac8:	b29a      	uxth	r2, r3
 8019aca:	204c      	movs	r0, #76	@ 0x4c
 8019acc:	183b      	adds	r3, r7, r0
 8019ace:	492a      	ldr	r1, [pc, #168]	@ (8019b78 <USB_ActivateEndpoint+0x6a8>)
 8019ad0:	400a      	ands	r2, r1
 8019ad2:	801a      	strh	r2, [r3, #0]
 8019ad4:	687a      	ldr	r2, [r7, #4]
 8019ad6:	683b      	ldr	r3, [r7, #0]
 8019ad8:	781b      	ldrb	r3, [r3, #0]
 8019ada:	009b      	lsls	r3, r3, #2
 8019adc:	18d3      	adds	r3, r2, r3
 8019ade:	183a      	adds	r2, r7, r0
 8019ae0:	8812      	ldrh	r2, [r2, #0]
 8019ae2:	4926      	ldr	r1, [pc, #152]	@ (8019b7c <USB_ActivateEndpoint+0x6ac>)
 8019ae4:	430a      	orrs	r2, r1
 8019ae6:	b292      	uxth	r2, r2
 8019ae8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019aea:	687a      	ldr	r2, [r7, #4]
 8019aec:	683b      	ldr	r3, [r7, #0]
 8019aee:	781b      	ldrb	r3, [r3, #0]
 8019af0:	009b      	lsls	r3, r3, #2
 8019af2:	18d2      	adds	r2, r2, r3
 8019af4:	214a      	movs	r1, #74	@ 0x4a
 8019af6:	187b      	adds	r3, r7, r1
 8019af8:	8812      	ldrh	r2, [r2, #0]
 8019afa:	801a      	strh	r2, [r3, #0]
 8019afc:	187b      	adds	r3, r7, r1
 8019afe:	881b      	ldrh	r3, [r3, #0]
 8019b00:	2240      	movs	r2, #64	@ 0x40
 8019b02:	4013      	ands	r3, r2
 8019b04:	d016      	beq.n	8019b34 <USB_ActivateEndpoint+0x664>
 8019b06:	687a      	ldr	r2, [r7, #4]
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	781b      	ldrb	r3, [r3, #0]
 8019b0c:	009b      	lsls	r3, r3, #2
 8019b0e:	18d3      	adds	r3, r2, r3
 8019b10:	881b      	ldrh	r3, [r3, #0]
 8019b12:	b29a      	uxth	r2, r3
 8019b14:	2048      	movs	r0, #72	@ 0x48
 8019b16:	183b      	adds	r3, r7, r0
 8019b18:	4917      	ldr	r1, [pc, #92]	@ (8019b78 <USB_ActivateEndpoint+0x6a8>)
 8019b1a:	400a      	ands	r2, r1
 8019b1c:	801a      	strh	r2, [r3, #0]
 8019b1e:	687a      	ldr	r2, [r7, #4]
 8019b20:	683b      	ldr	r3, [r7, #0]
 8019b22:	781b      	ldrb	r3, [r3, #0]
 8019b24:	009b      	lsls	r3, r3, #2
 8019b26:	18d3      	adds	r3, r2, r3
 8019b28:	183a      	adds	r2, r7, r0
 8019b2a:	8812      	ldrh	r2, [r2, #0]
 8019b2c:	4919      	ldr	r1, [pc, #100]	@ (8019b94 <USB_ActivateEndpoint+0x6c4>)
 8019b2e:	430a      	orrs	r2, r1
 8019b30:	b292      	uxth	r2, r2
 8019b32:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019b34:	683b      	ldr	r3, [r7, #0]
 8019b36:	78db      	ldrb	r3, [r3, #3]
 8019b38:	2b01      	cmp	r3, #1
 8019b3a:	d02f      	beq.n	8019b9c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019b3c:	687a      	ldr	r2, [r7, #4]
 8019b3e:	683b      	ldr	r3, [r7, #0]
 8019b40:	781b      	ldrb	r3, [r3, #0]
 8019b42:	009b      	lsls	r3, r3, #2
 8019b44:	18d3      	adds	r3, r2, r3
 8019b46:	881b      	ldrh	r3, [r3, #0]
 8019b48:	b29a      	uxth	r2, r3
 8019b4a:	2044      	movs	r0, #68	@ 0x44
 8019b4c:	183b      	adds	r3, r7, r0
 8019b4e:	4912      	ldr	r1, [pc, #72]	@ (8019b98 <USB_ActivateEndpoint+0x6c8>)
 8019b50:	400a      	ands	r2, r1
 8019b52:	801a      	strh	r2, [r3, #0]
 8019b54:	183b      	adds	r3, r7, r0
 8019b56:	183a      	adds	r2, r7, r0
 8019b58:	8812      	ldrh	r2, [r2, #0]
 8019b5a:	2120      	movs	r1, #32
 8019b5c:	404a      	eors	r2, r1
 8019b5e:	801a      	strh	r2, [r3, #0]
 8019b60:	687a      	ldr	r2, [r7, #4]
 8019b62:	683b      	ldr	r3, [r7, #0]
 8019b64:	781b      	ldrb	r3, [r3, #0]
 8019b66:	009b      	lsls	r3, r3, #2
 8019b68:	18d3      	adds	r3, r2, r3
 8019b6a:	183a      	adds	r2, r7, r0
 8019b6c:	8812      	ldrh	r2, [r2, #0]
 8019b6e:	4905      	ldr	r1, [pc, #20]	@ (8019b84 <USB_ActivateEndpoint+0x6b4>)
 8019b70:	430a      	orrs	r2, r1
 8019b72:	b292      	uxth	r2, r2
 8019b74:	801a      	strh	r2, [r3, #0]
 8019b76:	e028      	b.n	8019bca <USB_ActivateEndpoint+0x6fa>
 8019b78:	ffff8f8f 	.word	0xffff8f8f
 8019b7c:	ffffc080 	.word	0xffffc080
 8019b80:	ffffbf8f 	.word	0xffffbf8f
 8019b84:	ffff8080 	.word	0xffff8080
 8019b88:	ffff8180 	.word	0xffff8180
 8019b8c:	ffff8e8f 	.word	0xffff8e8f
 8019b90:	00000404 	.word	0x00000404
 8019b94:	ffff80c0 	.word	0xffff80c0
 8019b98:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019b9c:	687a      	ldr	r2, [r7, #4]
 8019b9e:	683b      	ldr	r3, [r7, #0]
 8019ba0:	781b      	ldrb	r3, [r3, #0]
 8019ba2:	009b      	lsls	r3, r3, #2
 8019ba4:	18d3      	adds	r3, r2, r3
 8019ba6:	881b      	ldrh	r3, [r3, #0]
 8019ba8:	b29a      	uxth	r2, r3
 8019baa:	2046      	movs	r0, #70	@ 0x46
 8019bac:	183b      	adds	r3, r7, r0
 8019bae:	4916      	ldr	r1, [pc, #88]	@ (8019c08 <USB_ActivateEndpoint+0x738>)
 8019bb0:	400a      	ands	r2, r1
 8019bb2:	801a      	strh	r2, [r3, #0]
 8019bb4:	687a      	ldr	r2, [r7, #4]
 8019bb6:	683b      	ldr	r3, [r7, #0]
 8019bb8:	781b      	ldrb	r3, [r3, #0]
 8019bba:	009b      	lsls	r3, r3, #2
 8019bbc:	18d3      	adds	r3, r2, r3
 8019bbe:	183a      	adds	r2, r7, r0
 8019bc0:	8812      	ldrh	r2, [r2, #0]
 8019bc2:	4912      	ldr	r1, [pc, #72]	@ (8019c0c <USB_ActivateEndpoint+0x73c>)
 8019bc4:	430a      	orrs	r2, r1
 8019bc6:	b292      	uxth	r2, r2
 8019bc8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019bca:	687a      	ldr	r2, [r7, #4]
 8019bcc:	683b      	ldr	r3, [r7, #0]
 8019bce:	781b      	ldrb	r3, [r3, #0]
 8019bd0:	009b      	lsls	r3, r3, #2
 8019bd2:	18d3      	adds	r3, r2, r3
 8019bd4:	881b      	ldrh	r3, [r3, #0]
 8019bd6:	b29a      	uxth	r2, r3
 8019bd8:	2042      	movs	r0, #66	@ 0x42
 8019bda:	183b      	adds	r3, r7, r0
 8019bdc:	490c      	ldr	r1, [pc, #48]	@ (8019c10 <USB_ActivateEndpoint+0x740>)
 8019bde:	400a      	ands	r2, r1
 8019be0:	801a      	strh	r2, [r3, #0]
 8019be2:	687a      	ldr	r2, [r7, #4]
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	781b      	ldrb	r3, [r3, #0]
 8019be8:	009b      	lsls	r3, r3, #2
 8019bea:	18d3      	adds	r3, r2, r3
 8019bec:	183a      	adds	r2, r7, r0
 8019bee:	8812      	ldrh	r2, [r2, #0]
 8019bf0:	4906      	ldr	r1, [pc, #24]	@ (8019c0c <USB_ActivateEndpoint+0x73c>)
 8019bf2:	430a      	orrs	r2, r1
 8019bf4:	b292      	uxth	r2, r2
 8019bf6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8019bf8:	236f      	movs	r3, #111	@ 0x6f
 8019bfa:	18fb      	adds	r3, r7, r3
 8019bfc:	781b      	ldrb	r3, [r3, #0]
}
 8019bfe:	0018      	movs	r0, r3
 8019c00:	46bd      	mov	sp, r7
 8019c02:	b01c      	add	sp, #112	@ 0x70
 8019c04:	bd80      	pop	{r7, pc}
 8019c06:	46c0      	nop			@ (mov r8, r8)
 8019c08:	ffff8fbf 	.word	0xffff8fbf
 8019c0c:	ffff8080 	.word	0xffff8080
 8019c10:	ffffbf8f 	.word	0xffffbf8f

08019c14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b08c      	sub	sp, #48	@ 0x30
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
 8019c1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8019c1e:	683b      	ldr	r3, [r7, #0]
 8019c20:	7b1b      	ldrb	r3, [r3, #12]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d000      	beq.n	8019c28 <USB_DeactivateEndpoint+0x14>
 8019c26:	e07e      	b.n	8019d26 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019c28:	683b      	ldr	r3, [r7, #0]
 8019c2a:	785b      	ldrb	r3, [r3, #1]
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d03c      	beq.n	8019caa <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019c30:	687a      	ldr	r2, [r7, #4]
 8019c32:	683b      	ldr	r3, [r7, #0]
 8019c34:	781b      	ldrb	r3, [r3, #0]
 8019c36:	009b      	lsls	r3, r3, #2
 8019c38:	18d2      	adds	r2, r2, r3
 8019c3a:	210c      	movs	r1, #12
 8019c3c:	187b      	adds	r3, r7, r1
 8019c3e:	8812      	ldrh	r2, [r2, #0]
 8019c40:	801a      	strh	r2, [r3, #0]
 8019c42:	187b      	adds	r3, r7, r1
 8019c44:	881b      	ldrh	r3, [r3, #0]
 8019c46:	2240      	movs	r2, #64	@ 0x40
 8019c48:	4013      	ands	r3, r2
 8019c4a:	d016      	beq.n	8019c7a <USB_DeactivateEndpoint+0x66>
 8019c4c:	687a      	ldr	r2, [r7, #4]
 8019c4e:	683b      	ldr	r3, [r7, #0]
 8019c50:	781b      	ldrb	r3, [r3, #0]
 8019c52:	009b      	lsls	r3, r3, #2
 8019c54:	18d3      	adds	r3, r2, r3
 8019c56:	881b      	ldrh	r3, [r3, #0]
 8019c58:	b29a      	uxth	r2, r3
 8019c5a:	200a      	movs	r0, #10
 8019c5c:	183b      	adds	r3, r7, r0
 8019c5e:	49c7      	ldr	r1, [pc, #796]	@ (8019f7c <USB_DeactivateEndpoint+0x368>)
 8019c60:	400a      	ands	r2, r1
 8019c62:	801a      	strh	r2, [r3, #0]
 8019c64:	687a      	ldr	r2, [r7, #4]
 8019c66:	683b      	ldr	r3, [r7, #0]
 8019c68:	781b      	ldrb	r3, [r3, #0]
 8019c6a:	009b      	lsls	r3, r3, #2
 8019c6c:	18d3      	adds	r3, r2, r3
 8019c6e:	183a      	adds	r2, r7, r0
 8019c70:	8812      	ldrh	r2, [r2, #0]
 8019c72:	49c3      	ldr	r1, [pc, #780]	@ (8019f80 <USB_DeactivateEndpoint+0x36c>)
 8019c74:	430a      	orrs	r2, r1
 8019c76:	b292      	uxth	r2, r2
 8019c78:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019c7a:	687a      	ldr	r2, [r7, #4]
 8019c7c:	683b      	ldr	r3, [r7, #0]
 8019c7e:	781b      	ldrb	r3, [r3, #0]
 8019c80:	009b      	lsls	r3, r3, #2
 8019c82:	18d3      	adds	r3, r2, r3
 8019c84:	881b      	ldrh	r3, [r3, #0]
 8019c86:	b29a      	uxth	r2, r3
 8019c88:	2008      	movs	r0, #8
 8019c8a:	183b      	adds	r3, r7, r0
 8019c8c:	49bd      	ldr	r1, [pc, #756]	@ (8019f84 <USB_DeactivateEndpoint+0x370>)
 8019c8e:	400a      	ands	r2, r1
 8019c90:	801a      	strh	r2, [r3, #0]
 8019c92:	687a      	ldr	r2, [r7, #4]
 8019c94:	683b      	ldr	r3, [r7, #0]
 8019c96:	781b      	ldrb	r3, [r3, #0]
 8019c98:	009b      	lsls	r3, r3, #2
 8019c9a:	18d3      	adds	r3, r2, r3
 8019c9c:	183a      	adds	r2, r7, r0
 8019c9e:	8812      	ldrh	r2, [r2, #0]
 8019ca0:	49b9      	ldr	r1, [pc, #740]	@ (8019f88 <USB_DeactivateEndpoint+0x374>)
 8019ca2:	430a      	orrs	r2, r1
 8019ca4:	b292      	uxth	r2, r2
 8019ca6:	801a      	strh	r2, [r3, #0]
 8019ca8:	e163      	b.n	8019f72 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019caa:	687a      	ldr	r2, [r7, #4]
 8019cac:	683b      	ldr	r3, [r7, #0]
 8019cae:	781b      	ldrb	r3, [r3, #0]
 8019cb0:	009b      	lsls	r3, r3, #2
 8019cb2:	18d2      	adds	r2, r2, r3
 8019cb4:	2112      	movs	r1, #18
 8019cb6:	187b      	adds	r3, r7, r1
 8019cb8:	8812      	ldrh	r2, [r2, #0]
 8019cba:	801a      	strh	r2, [r3, #0]
 8019cbc:	187b      	adds	r3, r7, r1
 8019cbe:	881a      	ldrh	r2, [r3, #0]
 8019cc0:	2380      	movs	r3, #128	@ 0x80
 8019cc2:	01db      	lsls	r3, r3, #7
 8019cc4:	4013      	ands	r3, r2
 8019cc6:	d016      	beq.n	8019cf6 <USB_DeactivateEndpoint+0xe2>
 8019cc8:	687a      	ldr	r2, [r7, #4]
 8019cca:	683b      	ldr	r3, [r7, #0]
 8019ccc:	781b      	ldrb	r3, [r3, #0]
 8019cce:	009b      	lsls	r3, r3, #2
 8019cd0:	18d3      	adds	r3, r2, r3
 8019cd2:	881b      	ldrh	r3, [r3, #0]
 8019cd4:	b29a      	uxth	r2, r3
 8019cd6:	2010      	movs	r0, #16
 8019cd8:	183b      	adds	r3, r7, r0
 8019cda:	49a8      	ldr	r1, [pc, #672]	@ (8019f7c <USB_DeactivateEndpoint+0x368>)
 8019cdc:	400a      	ands	r2, r1
 8019cde:	801a      	strh	r2, [r3, #0]
 8019ce0:	687a      	ldr	r2, [r7, #4]
 8019ce2:	683b      	ldr	r3, [r7, #0]
 8019ce4:	781b      	ldrb	r3, [r3, #0]
 8019ce6:	009b      	lsls	r3, r3, #2
 8019ce8:	18d3      	adds	r3, r2, r3
 8019cea:	183a      	adds	r2, r7, r0
 8019cec:	8812      	ldrh	r2, [r2, #0]
 8019cee:	49a7      	ldr	r1, [pc, #668]	@ (8019f8c <USB_DeactivateEndpoint+0x378>)
 8019cf0:	430a      	orrs	r2, r1
 8019cf2:	b292      	uxth	r2, r2
 8019cf4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019cf6:	687a      	ldr	r2, [r7, #4]
 8019cf8:	683b      	ldr	r3, [r7, #0]
 8019cfa:	781b      	ldrb	r3, [r3, #0]
 8019cfc:	009b      	lsls	r3, r3, #2
 8019cfe:	18d3      	adds	r3, r2, r3
 8019d00:	881b      	ldrh	r3, [r3, #0]
 8019d02:	b29a      	uxth	r2, r3
 8019d04:	200e      	movs	r0, #14
 8019d06:	183b      	adds	r3, r7, r0
 8019d08:	49a1      	ldr	r1, [pc, #644]	@ (8019f90 <USB_DeactivateEndpoint+0x37c>)
 8019d0a:	400a      	ands	r2, r1
 8019d0c:	801a      	strh	r2, [r3, #0]
 8019d0e:	687a      	ldr	r2, [r7, #4]
 8019d10:	683b      	ldr	r3, [r7, #0]
 8019d12:	781b      	ldrb	r3, [r3, #0]
 8019d14:	009b      	lsls	r3, r3, #2
 8019d16:	18d3      	adds	r3, r2, r3
 8019d18:	183a      	adds	r2, r7, r0
 8019d1a:	8812      	ldrh	r2, [r2, #0]
 8019d1c:	499a      	ldr	r1, [pc, #616]	@ (8019f88 <USB_DeactivateEndpoint+0x374>)
 8019d1e:	430a      	orrs	r2, r1
 8019d20:	b292      	uxth	r2, r2
 8019d22:	801a      	strh	r2, [r3, #0]
 8019d24:	e125      	b.n	8019f72 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	785b      	ldrb	r3, [r3, #1]
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d000      	beq.n	8019d30 <USB_DeactivateEndpoint+0x11c>
 8019d2e:	e090      	b.n	8019e52 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019d30:	687a      	ldr	r2, [r7, #4]
 8019d32:	683b      	ldr	r3, [r7, #0]
 8019d34:	781b      	ldrb	r3, [r3, #0]
 8019d36:	009b      	lsls	r3, r3, #2
 8019d38:	18d2      	adds	r2, r2, r3
 8019d3a:	2120      	movs	r1, #32
 8019d3c:	187b      	adds	r3, r7, r1
 8019d3e:	8812      	ldrh	r2, [r2, #0]
 8019d40:	801a      	strh	r2, [r3, #0]
 8019d42:	187b      	adds	r3, r7, r1
 8019d44:	881a      	ldrh	r2, [r3, #0]
 8019d46:	2380      	movs	r3, #128	@ 0x80
 8019d48:	01db      	lsls	r3, r3, #7
 8019d4a:	4013      	ands	r3, r2
 8019d4c:	d016      	beq.n	8019d7c <USB_DeactivateEndpoint+0x168>
 8019d4e:	687a      	ldr	r2, [r7, #4]
 8019d50:	683b      	ldr	r3, [r7, #0]
 8019d52:	781b      	ldrb	r3, [r3, #0]
 8019d54:	009b      	lsls	r3, r3, #2
 8019d56:	18d3      	adds	r3, r2, r3
 8019d58:	881b      	ldrh	r3, [r3, #0]
 8019d5a:	b29a      	uxth	r2, r3
 8019d5c:	201e      	movs	r0, #30
 8019d5e:	183b      	adds	r3, r7, r0
 8019d60:	4986      	ldr	r1, [pc, #536]	@ (8019f7c <USB_DeactivateEndpoint+0x368>)
 8019d62:	400a      	ands	r2, r1
 8019d64:	801a      	strh	r2, [r3, #0]
 8019d66:	687a      	ldr	r2, [r7, #4]
 8019d68:	683b      	ldr	r3, [r7, #0]
 8019d6a:	781b      	ldrb	r3, [r3, #0]
 8019d6c:	009b      	lsls	r3, r3, #2
 8019d6e:	18d3      	adds	r3, r2, r3
 8019d70:	183a      	adds	r2, r7, r0
 8019d72:	8812      	ldrh	r2, [r2, #0]
 8019d74:	4985      	ldr	r1, [pc, #532]	@ (8019f8c <USB_DeactivateEndpoint+0x378>)
 8019d76:	430a      	orrs	r2, r1
 8019d78:	b292      	uxth	r2, r2
 8019d7a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019d7c:	687a      	ldr	r2, [r7, #4]
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	781b      	ldrb	r3, [r3, #0]
 8019d82:	009b      	lsls	r3, r3, #2
 8019d84:	18d2      	adds	r2, r2, r3
 8019d86:	211c      	movs	r1, #28
 8019d88:	187b      	adds	r3, r7, r1
 8019d8a:	8812      	ldrh	r2, [r2, #0]
 8019d8c:	801a      	strh	r2, [r3, #0]
 8019d8e:	187b      	adds	r3, r7, r1
 8019d90:	881b      	ldrh	r3, [r3, #0]
 8019d92:	2240      	movs	r2, #64	@ 0x40
 8019d94:	4013      	ands	r3, r2
 8019d96:	d016      	beq.n	8019dc6 <USB_DeactivateEndpoint+0x1b2>
 8019d98:	687a      	ldr	r2, [r7, #4]
 8019d9a:	683b      	ldr	r3, [r7, #0]
 8019d9c:	781b      	ldrb	r3, [r3, #0]
 8019d9e:	009b      	lsls	r3, r3, #2
 8019da0:	18d3      	adds	r3, r2, r3
 8019da2:	881b      	ldrh	r3, [r3, #0]
 8019da4:	b29a      	uxth	r2, r3
 8019da6:	201a      	movs	r0, #26
 8019da8:	183b      	adds	r3, r7, r0
 8019daa:	4974      	ldr	r1, [pc, #464]	@ (8019f7c <USB_DeactivateEndpoint+0x368>)
 8019dac:	400a      	ands	r2, r1
 8019dae:	801a      	strh	r2, [r3, #0]
 8019db0:	687a      	ldr	r2, [r7, #4]
 8019db2:	683b      	ldr	r3, [r7, #0]
 8019db4:	781b      	ldrb	r3, [r3, #0]
 8019db6:	009b      	lsls	r3, r3, #2
 8019db8:	18d3      	adds	r3, r2, r3
 8019dba:	183a      	adds	r2, r7, r0
 8019dbc:	8812      	ldrh	r2, [r2, #0]
 8019dbe:	4970      	ldr	r1, [pc, #448]	@ (8019f80 <USB_DeactivateEndpoint+0x36c>)
 8019dc0:	430a      	orrs	r2, r1
 8019dc2:	b292      	uxth	r2, r2
 8019dc4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8019dc6:	687a      	ldr	r2, [r7, #4]
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	781b      	ldrb	r3, [r3, #0]
 8019dcc:	009b      	lsls	r3, r3, #2
 8019dce:	18d3      	adds	r3, r2, r3
 8019dd0:	881b      	ldrh	r3, [r3, #0]
 8019dd2:	b29a      	uxth	r2, r3
 8019dd4:	2018      	movs	r0, #24
 8019dd6:	183b      	adds	r3, r7, r0
 8019dd8:	4968      	ldr	r1, [pc, #416]	@ (8019f7c <USB_DeactivateEndpoint+0x368>)
 8019dda:	400a      	ands	r2, r1
 8019ddc:	801a      	strh	r2, [r3, #0]
 8019dde:	687a      	ldr	r2, [r7, #4]
 8019de0:	683b      	ldr	r3, [r7, #0]
 8019de2:	781b      	ldrb	r3, [r3, #0]
 8019de4:	009b      	lsls	r3, r3, #2
 8019de6:	18d3      	adds	r3, r2, r3
 8019de8:	183a      	adds	r2, r7, r0
 8019dea:	8812      	ldrh	r2, [r2, #0]
 8019dec:	4964      	ldr	r1, [pc, #400]	@ (8019f80 <USB_DeactivateEndpoint+0x36c>)
 8019dee:	430a      	orrs	r2, r1
 8019df0:	b292      	uxth	r2, r2
 8019df2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019df4:	687a      	ldr	r2, [r7, #4]
 8019df6:	683b      	ldr	r3, [r7, #0]
 8019df8:	781b      	ldrb	r3, [r3, #0]
 8019dfa:	009b      	lsls	r3, r3, #2
 8019dfc:	18d3      	adds	r3, r2, r3
 8019dfe:	881b      	ldrh	r3, [r3, #0]
 8019e00:	b29a      	uxth	r2, r3
 8019e02:	2016      	movs	r0, #22
 8019e04:	183b      	adds	r3, r7, r0
 8019e06:	4962      	ldr	r1, [pc, #392]	@ (8019f90 <USB_DeactivateEndpoint+0x37c>)
 8019e08:	400a      	ands	r2, r1
 8019e0a:	801a      	strh	r2, [r3, #0]
 8019e0c:	687a      	ldr	r2, [r7, #4]
 8019e0e:	683b      	ldr	r3, [r7, #0]
 8019e10:	781b      	ldrb	r3, [r3, #0]
 8019e12:	009b      	lsls	r3, r3, #2
 8019e14:	18d3      	adds	r3, r2, r3
 8019e16:	183a      	adds	r2, r7, r0
 8019e18:	8812      	ldrh	r2, [r2, #0]
 8019e1a:	495b      	ldr	r1, [pc, #364]	@ (8019f88 <USB_DeactivateEndpoint+0x374>)
 8019e1c:	430a      	orrs	r2, r1
 8019e1e:	b292      	uxth	r2, r2
 8019e20:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019e22:	687a      	ldr	r2, [r7, #4]
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	781b      	ldrb	r3, [r3, #0]
 8019e28:	009b      	lsls	r3, r3, #2
 8019e2a:	18d3      	adds	r3, r2, r3
 8019e2c:	881b      	ldrh	r3, [r3, #0]
 8019e2e:	b29a      	uxth	r2, r3
 8019e30:	2014      	movs	r0, #20
 8019e32:	183b      	adds	r3, r7, r0
 8019e34:	4953      	ldr	r1, [pc, #332]	@ (8019f84 <USB_DeactivateEndpoint+0x370>)
 8019e36:	400a      	ands	r2, r1
 8019e38:	801a      	strh	r2, [r3, #0]
 8019e3a:	687a      	ldr	r2, [r7, #4]
 8019e3c:	683b      	ldr	r3, [r7, #0]
 8019e3e:	781b      	ldrb	r3, [r3, #0]
 8019e40:	009b      	lsls	r3, r3, #2
 8019e42:	18d3      	adds	r3, r2, r3
 8019e44:	183a      	adds	r2, r7, r0
 8019e46:	8812      	ldrh	r2, [r2, #0]
 8019e48:	494f      	ldr	r1, [pc, #316]	@ (8019f88 <USB_DeactivateEndpoint+0x374>)
 8019e4a:	430a      	orrs	r2, r1
 8019e4c:	b292      	uxth	r2, r2
 8019e4e:	801a      	strh	r2, [r3, #0]
 8019e50:	e08f      	b.n	8019f72 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019e52:	687a      	ldr	r2, [r7, #4]
 8019e54:	683b      	ldr	r3, [r7, #0]
 8019e56:	781b      	ldrb	r3, [r3, #0]
 8019e58:	009b      	lsls	r3, r3, #2
 8019e5a:	18d2      	adds	r2, r2, r3
 8019e5c:	212e      	movs	r1, #46	@ 0x2e
 8019e5e:	187b      	adds	r3, r7, r1
 8019e60:	8812      	ldrh	r2, [r2, #0]
 8019e62:	801a      	strh	r2, [r3, #0]
 8019e64:	187b      	adds	r3, r7, r1
 8019e66:	881a      	ldrh	r2, [r3, #0]
 8019e68:	2380      	movs	r3, #128	@ 0x80
 8019e6a:	01db      	lsls	r3, r3, #7
 8019e6c:	4013      	ands	r3, r2
 8019e6e:	d016      	beq.n	8019e9e <USB_DeactivateEndpoint+0x28a>
 8019e70:	687a      	ldr	r2, [r7, #4]
 8019e72:	683b      	ldr	r3, [r7, #0]
 8019e74:	781b      	ldrb	r3, [r3, #0]
 8019e76:	009b      	lsls	r3, r3, #2
 8019e78:	18d3      	adds	r3, r2, r3
 8019e7a:	881b      	ldrh	r3, [r3, #0]
 8019e7c:	b29a      	uxth	r2, r3
 8019e7e:	202c      	movs	r0, #44	@ 0x2c
 8019e80:	183b      	adds	r3, r7, r0
 8019e82:	493e      	ldr	r1, [pc, #248]	@ (8019f7c <USB_DeactivateEndpoint+0x368>)
 8019e84:	400a      	ands	r2, r1
 8019e86:	801a      	strh	r2, [r3, #0]
 8019e88:	687a      	ldr	r2, [r7, #4]
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	781b      	ldrb	r3, [r3, #0]
 8019e8e:	009b      	lsls	r3, r3, #2
 8019e90:	18d3      	adds	r3, r2, r3
 8019e92:	183a      	adds	r2, r7, r0
 8019e94:	8812      	ldrh	r2, [r2, #0]
 8019e96:	493d      	ldr	r1, [pc, #244]	@ (8019f8c <USB_DeactivateEndpoint+0x378>)
 8019e98:	430a      	orrs	r2, r1
 8019e9a:	b292      	uxth	r2, r2
 8019e9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019e9e:	687a      	ldr	r2, [r7, #4]
 8019ea0:	683b      	ldr	r3, [r7, #0]
 8019ea2:	781b      	ldrb	r3, [r3, #0]
 8019ea4:	009b      	lsls	r3, r3, #2
 8019ea6:	18d2      	adds	r2, r2, r3
 8019ea8:	212a      	movs	r1, #42	@ 0x2a
 8019eaa:	187b      	adds	r3, r7, r1
 8019eac:	8812      	ldrh	r2, [r2, #0]
 8019eae:	801a      	strh	r2, [r3, #0]
 8019eb0:	187b      	adds	r3, r7, r1
 8019eb2:	881b      	ldrh	r3, [r3, #0]
 8019eb4:	2240      	movs	r2, #64	@ 0x40
 8019eb6:	4013      	ands	r3, r2
 8019eb8:	d016      	beq.n	8019ee8 <USB_DeactivateEndpoint+0x2d4>
 8019eba:	687a      	ldr	r2, [r7, #4]
 8019ebc:	683b      	ldr	r3, [r7, #0]
 8019ebe:	781b      	ldrb	r3, [r3, #0]
 8019ec0:	009b      	lsls	r3, r3, #2
 8019ec2:	18d3      	adds	r3, r2, r3
 8019ec4:	881b      	ldrh	r3, [r3, #0]
 8019ec6:	b29a      	uxth	r2, r3
 8019ec8:	2028      	movs	r0, #40	@ 0x28
 8019eca:	183b      	adds	r3, r7, r0
 8019ecc:	492b      	ldr	r1, [pc, #172]	@ (8019f7c <USB_DeactivateEndpoint+0x368>)
 8019ece:	400a      	ands	r2, r1
 8019ed0:	801a      	strh	r2, [r3, #0]
 8019ed2:	687a      	ldr	r2, [r7, #4]
 8019ed4:	683b      	ldr	r3, [r7, #0]
 8019ed6:	781b      	ldrb	r3, [r3, #0]
 8019ed8:	009b      	lsls	r3, r3, #2
 8019eda:	18d3      	adds	r3, r2, r3
 8019edc:	183a      	adds	r2, r7, r0
 8019ede:	8812      	ldrh	r2, [r2, #0]
 8019ee0:	4927      	ldr	r1, [pc, #156]	@ (8019f80 <USB_DeactivateEndpoint+0x36c>)
 8019ee2:	430a      	orrs	r2, r1
 8019ee4:	b292      	uxth	r2, r2
 8019ee6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019ee8:	687a      	ldr	r2, [r7, #4]
 8019eea:	683b      	ldr	r3, [r7, #0]
 8019eec:	781b      	ldrb	r3, [r3, #0]
 8019eee:	009b      	lsls	r3, r3, #2
 8019ef0:	18d3      	adds	r3, r2, r3
 8019ef2:	881b      	ldrh	r3, [r3, #0]
 8019ef4:	b29a      	uxth	r2, r3
 8019ef6:	2026      	movs	r0, #38	@ 0x26
 8019ef8:	183b      	adds	r3, r7, r0
 8019efa:	4920      	ldr	r1, [pc, #128]	@ (8019f7c <USB_DeactivateEndpoint+0x368>)
 8019efc:	400a      	ands	r2, r1
 8019efe:	801a      	strh	r2, [r3, #0]
 8019f00:	687a      	ldr	r2, [r7, #4]
 8019f02:	683b      	ldr	r3, [r7, #0]
 8019f04:	781b      	ldrb	r3, [r3, #0]
 8019f06:	009b      	lsls	r3, r3, #2
 8019f08:	18d3      	adds	r3, r2, r3
 8019f0a:	183a      	adds	r2, r7, r0
 8019f0c:	8812      	ldrh	r2, [r2, #0]
 8019f0e:	491f      	ldr	r1, [pc, #124]	@ (8019f8c <USB_DeactivateEndpoint+0x378>)
 8019f10:	430a      	orrs	r2, r1
 8019f12:	b292      	uxth	r2, r2
 8019f14:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019f16:	687a      	ldr	r2, [r7, #4]
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	781b      	ldrb	r3, [r3, #0]
 8019f1c:	009b      	lsls	r3, r3, #2
 8019f1e:	18d3      	adds	r3, r2, r3
 8019f20:	881b      	ldrh	r3, [r3, #0]
 8019f22:	b29a      	uxth	r2, r3
 8019f24:	2024      	movs	r0, #36	@ 0x24
 8019f26:	183b      	adds	r3, r7, r0
 8019f28:	4916      	ldr	r1, [pc, #88]	@ (8019f84 <USB_DeactivateEndpoint+0x370>)
 8019f2a:	400a      	ands	r2, r1
 8019f2c:	801a      	strh	r2, [r3, #0]
 8019f2e:	687a      	ldr	r2, [r7, #4]
 8019f30:	683b      	ldr	r3, [r7, #0]
 8019f32:	781b      	ldrb	r3, [r3, #0]
 8019f34:	009b      	lsls	r3, r3, #2
 8019f36:	18d3      	adds	r3, r2, r3
 8019f38:	183a      	adds	r2, r7, r0
 8019f3a:	8812      	ldrh	r2, [r2, #0]
 8019f3c:	4912      	ldr	r1, [pc, #72]	@ (8019f88 <USB_DeactivateEndpoint+0x374>)
 8019f3e:	430a      	orrs	r2, r1
 8019f40:	b292      	uxth	r2, r2
 8019f42:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019f44:	687a      	ldr	r2, [r7, #4]
 8019f46:	683b      	ldr	r3, [r7, #0]
 8019f48:	781b      	ldrb	r3, [r3, #0]
 8019f4a:	009b      	lsls	r3, r3, #2
 8019f4c:	18d3      	adds	r3, r2, r3
 8019f4e:	881b      	ldrh	r3, [r3, #0]
 8019f50:	b29a      	uxth	r2, r3
 8019f52:	2022      	movs	r0, #34	@ 0x22
 8019f54:	183b      	adds	r3, r7, r0
 8019f56:	490e      	ldr	r1, [pc, #56]	@ (8019f90 <USB_DeactivateEndpoint+0x37c>)
 8019f58:	400a      	ands	r2, r1
 8019f5a:	801a      	strh	r2, [r3, #0]
 8019f5c:	687a      	ldr	r2, [r7, #4]
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	781b      	ldrb	r3, [r3, #0]
 8019f62:	009b      	lsls	r3, r3, #2
 8019f64:	18d3      	adds	r3, r2, r3
 8019f66:	183a      	adds	r2, r7, r0
 8019f68:	8812      	ldrh	r2, [r2, #0]
 8019f6a:	4907      	ldr	r1, [pc, #28]	@ (8019f88 <USB_DeactivateEndpoint+0x374>)
 8019f6c:	430a      	orrs	r2, r1
 8019f6e:	b292      	uxth	r2, r2
 8019f70:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019f72:	2300      	movs	r3, #0
}
 8019f74:	0018      	movs	r0, r3
 8019f76:	46bd      	mov	sp, r7
 8019f78:	b00c      	add	sp, #48	@ 0x30
 8019f7a:	bd80      	pop	{r7, pc}
 8019f7c:	ffff8f8f 	.word	0xffff8f8f
 8019f80:	ffff80c0 	.word	0xffff80c0
 8019f84:	ffff8fbf 	.word	0xffff8fbf
 8019f88:	ffff8080 	.word	0xffff8080
 8019f8c:	ffffc080 	.word	0xffffc080
 8019f90:	ffffbf8f 	.word	0xffffbf8f

08019f94 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019f94:	b590      	push	{r4, r7, lr}
 8019f96:	b0c3      	sub	sp, #268	@ 0x10c
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
 8019f9c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019f9e:	683b      	ldr	r3, [r7, #0]
 8019fa0:	785b      	ldrb	r3, [r3, #1]
 8019fa2:	2b01      	cmp	r3, #1
 8019fa4:	d001      	beq.n	8019faa <USB_EPStartXfer+0x16>
 8019fa6:	f000 fd2d 	bl	801aa04 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019faa:	683b      	ldr	r3, [r7, #0]
 8019fac:	699a      	ldr	r2, [r3, #24]
 8019fae:	683b      	ldr	r3, [r7, #0]
 8019fb0:	691b      	ldr	r3, [r3, #16]
 8019fb2:	429a      	cmp	r2, r3
 8019fb4:	d905      	bls.n	8019fc2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019fb6:	683b      	ldr	r3, [r7, #0]
 8019fb8:	691b      	ldr	r3, [r3, #16]
 8019fba:	1d7a      	adds	r2, r7, #5
 8019fbc:	32ff      	adds	r2, #255	@ 0xff
 8019fbe:	6013      	str	r3, [r2, #0]
 8019fc0:	e004      	b.n	8019fcc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019fc2:	683b      	ldr	r3, [r7, #0]
 8019fc4:	699b      	ldr	r3, [r3, #24]
 8019fc6:	1d7a      	adds	r2, r7, #5
 8019fc8:	32ff      	adds	r2, #255	@ 0xff
 8019fca:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	7b1b      	ldrb	r3, [r3, #12]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d125      	bne.n	801a020 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	6959      	ldr	r1, [r3, #20]
 8019fd8:	683b      	ldr	r3, [r7, #0]
 8019fda:	88da      	ldrh	r2, [r3, #6]
 8019fdc:	1d7b      	adds	r3, r7, #5
 8019fde:	33ff      	adds	r3, #255	@ 0xff
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	6878      	ldr	r0, [r7, #4]
 8019fe6:	f001 fa47 	bl	801b478 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	613b      	str	r3, [r7, #16]
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	2250      	movs	r2, #80	@ 0x50
 8019ff2:	5a9b      	ldrh	r3, [r3, r2]
 8019ff4:	b29b      	uxth	r3, r3
 8019ff6:	001a      	movs	r2, r3
 8019ff8:	693b      	ldr	r3, [r7, #16]
 8019ffa:	189b      	adds	r3, r3, r2
 8019ffc:	613b      	str	r3, [r7, #16]
 8019ffe:	683b      	ldr	r3, [r7, #0]
 801a000:	781b      	ldrb	r3, [r3, #0]
 801a002:	00da      	lsls	r2, r3, #3
 801a004:	693b      	ldr	r3, [r7, #16]
 801a006:	18d3      	adds	r3, r2, r3
 801a008:	4ad7      	ldr	r2, [pc, #860]	@ (801a368 <USB_EPStartXfer+0x3d4>)
 801a00a:	4694      	mov	ip, r2
 801a00c:	4463      	add	r3, ip
 801a00e:	60fb      	str	r3, [r7, #12]
 801a010:	1d7b      	adds	r3, r7, #5
 801a012:	33ff      	adds	r3, #255	@ 0xff
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	b29a      	uxth	r2, r3
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	801a      	strh	r2, [r3, #0]
 801a01c:	f000 fccd 	bl	801a9ba <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801a020:	683b      	ldr	r3, [r7, #0]
 801a022:	78db      	ldrb	r3, [r3, #3]
 801a024:	2b02      	cmp	r3, #2
 801a026:	d000      	beq.n	801a02a <USB_EPStartXfer+0x96>
 801a028:	e362      	b.n	801a6f0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	6a1a      	ldr	r2, [r3, #32]
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	691b      	ldr	r3, [r3, #16]
 801a032:	429a      	cmp	r2, r3
 801a034:	d800      	bhi.n	801a038 <USB_EPStartXfer+0xa4>
 801a036:	e309      	b.n	801a64c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801a038:	687a      	ldr	r2, [r7, #4]
 801a03a:	683b      	ldr	r3, [r7, #0]
 801a03c:	781b      	ldrb	r3, [r3, #0]
 801a03e:	009b      	lsls	r3, r3, #2
 801a040:	18d3      	adds	r3, r2, r3
 801a042:	881b      	ldrh	r3, [r3, #0]
 801a044:	b29a      	uxth	r2, r3
 801a046:	2056      	movs	r0, #86	@ 0x56
 801a048:	183b      	adds	r3, r7, r0
 801a04a:	49c8      	ldr	r1, [pc, #800]	@ (801a36c <USB_EPStartXfer+0x3d8>)
 801a04c:	400a      	ands	r2, r1
 801a04e:	801a      	strh	r2, [r3, #0]
 801a050:	687a      	ldr	r2, [r7, #4]
 801a052:	683b      	ldr	r3, [r7, #0]
 801a054:	781b      	ldrb	r3, [r3, #0]
 801a056:	009b      	lsls	r3, r3, #2
 801a058:	18d3      	adds	r3, r2, r3
 801a05a:	183a      	adds	r2, r7, r0
 801a05c:	8812      	ldrh	r2, [r2, #0]
 801a05e:	49c4      	ldr	r1, [pc, #784]	@ (801a370 <USB_EPStartXfer+0x3dc>)
 801a060:	430a      	orrs	r2, r1
 801a062:	b292      	uxth	r2, r2
 801a064:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	6a1a      	ldr	r2, [r3, #32]
 801a06a:	1d7b      	adds	r3, r7, #5
 801a06c:	33ff      	adds	r3, #255	@ 0xff
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	1ad2      	subs	r2, r2, r3
 801a072:	683b      	ldr	r3, [r7, #0]
 801a074:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a076:	687a      	ldr	r2, [r7, #4]
 801a078:	683b      	ldr	r3, [r7, #0]
 801a07a:	781b      	ldrb	r3, [r3, #0]
 801a07c:	009b      	lsls	r3, r3, #2
 801a07e:	18d3      	adds	r3, r2, r3
 801a080:	881b      	ldrh	r3, [r3, #0]
 801a082:	b29b      	uxth	r3, r3
 801a084:	001a      	movs	r2, r3
 801a086:	2340      	movs	r3, #64	@ 0x40
 801a088:	4013      	ands	r3, r2
 801a08a:	d100      	bne.n	801a08e <USB_EPStartXfer+0xfa>
 801a08c:	e176      	b.n	801a37c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	633b      	str	r3, [r7, #48]	@ 0x30
 801a092:	683b      	ldr	r3, [r7, #0]
 801a094:	785b      	ldrb	r3, [r3, #1]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d000      	beq.n	801a09c <USB_EPStartXfer+0x108>
 801a09a:	e074      	b.n	801a186 <USB_EPStartXfer+0x1f2>
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	2250      	movs	r2, #80	@ 0x50
 801a0a4:	5a9b      	ldrh	r3, [r3, r2]
 801a0a6:	b29b      	uxth	r3, r3
 801a0a8:	001a      	movs	r2, r3
 801a0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0ac:	189b      	adds	r3, r3, r2
 801a0ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a0b0:	683b      	ldr	r3, [r7, #0]
 801a0b2:	781b      	ldrb	r3, [r3, #0]
 801a0b4:	00da      	lsls	r2, r3, #3
 801a0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0b8:	18d3      	adds	r3, r2, r3
 801a0ba:	4aae      	ldr	r2, [pc, #696]	@ (801a374 <USB_EPStartXfer+0x3e0>)
 801a0bc:	4694      	mov	ip, r2
 801a0be:	4463      	add	r3, ip
 801a0c0:	627b      	str	r3, [r7, #36]	@ 0x24
 801a0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0c4:	881b      	ldrh	r3, [r3, #0]
 801a0c6:	b29b      	uxth	r3, r3
 801a0c8:	059b      	lsls	r3, r3, #22
 801a0ca:	0d9b      	lsrs	r3, r3, #22
 801a0cc:	b29a      	uxth	r2, r3
 801a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0d0:	801a      	strh	r2, [r3, #0]
 801a0d2:	1d7b      	adds	r3, r7, #5
 801a0d4:	33ff      	adds	r3, #255	@ 0xff
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	2b3e      	cmp	r3, #62	@ 0x3e
 801a0da:	d924      	bls.n	801a126 <USB_EPStartXfer+0x192>
 801a0dc:	1d7b      	adds	r3, r7, #5
 801a0de:	33ff      	adds	r3, #255	@ 0xff
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	095b      	lsrs	r3, r3, #5
 801a0e4:	1c7a      	adds	r2, r7, #1
 801a0e6:	32ff      	adds	r2, #255	@ 0xff
 801a0e8:	6013      	str	r3, [r2, #0]
 801a0ea:	1d7b      	adds	r3, r7, #5
 801a0ec:	33ff      	adds	r3, #255	@ 0xff
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	221f      	movs	r2, #31
 801a0f2:	4013      	ands	r3, r2
 801a0f4:	d106      	bne.n	801a104 <USB_EPStartXfer+0x170>
 801a0f6:	1c7b      	adds	r3, r7, #1
 801a0f8:	33ff      	adds	r3, #255	@ 0xff
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	3b01      	subs	r3, #1
 801a0fe:	1c7a      	adds	r2, r7, #1
 801a100:	32ff      	adds	r2, #255	@ 0xff
 801a102:	6013      	str	r3, [r2, #0]
 801a104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a106:	881b      	ldrh	r3, [r3, #0]
 801a108:	b29a      	uxth	r2, r3
 801a10a:	1c7b      	adds	r3, r7, #1
 801a10c:	33ff      	adds	r3, #255	@ 0xff
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	b29b      	uxth	r3, r3
 801a112:	029b      	lsls	r3, r3, #10
 801a114:	b29b      	uxth	r3, r3
 801a116:	4313      	orrs	r3, r2
 801a118:	b29b      	uxth	r3, r3
 801a11a:	4a97      	ldr	r2, [pc, #604]	@ (801a378 <USB_EPStartXfer+0x3e4>)
 801a11c:	4313      	orrs	r3, r2
 801a11e:	b29a      	uxth	r2, r3
 801a120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a122:	801a      	strh	r2, [r3, #0]
 801a124:	e04a      	b.n	801a1bc <USB_EPStartXfer+0x228>
 801a126:	1d7b      	adds	r3, r7, #5
 801a128:	33ff      	adds	r3, #255	@ 0xff
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d108      	bne.n	801a142 <USB_EPStartXfer+0x1ae>
 801a130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a132:	881b      	ldrh	r3, [r3, #0]
 801a134:	b29b      	uxth	r3, r3
 801a136:	4a90      	ldr	r2, [pc, #576]	@ (801a378 <USB_EPStartXfer+0x3e4>)
 801a138:	4313      	orrs	r3, r2
 801a13a:	b29a      	uxth	r2, r3
 801a13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a13e:	801a      	strh	r2, [r3, #0]
 801a140:	e03c      	b.n	801a1bc <USB_EPStartXfer+0x228>
 801a142:	1d7b      	adds	r3, r7, #5
 801a144:	33ff      	adds	r3, #255	@ 0xff
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	085b      	lsrs	r3, r3, #1
 801a14a:	1c7a      	adds	r2, r7, #1
 801a14c:	32ff      	adds	r2, #255	@ 0xff
 801a14e:	6013      	str	r3, [r2, #0]
 801a150:	1d7b      	adds	r3, r7, #5
 801a152:	33ff      	adds	r3, #255	@ 0xff
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	2201      	movs	r2, #1
 801a158:	4013      	ands	r3, r2
 801a15a:	d006      	beq.n	801a16a <USB_EPStartXfer+0x1d6>
 801a15c:	1c7b      	adds	r3, r7, #1
 801a15e:	33ff      	adds	r3, #255	@ 0xff
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	3301      	adds	r3, #1
 801a164:	1c7a      	adds	r2, r7, #1
 801a166:	32ff      	adds	r2, #255	@ 0xff
 801a168:	6013      	str	r3, [r2, #0]
 801a16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a16c:	881b      	ldrh	r3, [r3, #0]
 801a16e:	b29a      	uxth	r2, r3
 801a170:	1c7b      	adds	r3, r7, #1
 801a172:	33ff      	adds	r3, #255	@ 0xff
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	b29b      	uxth	r3, r3
 801a178:	029b      	lsls	r3, r3, #10
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	4313      	orrs	r3, r2
 801a17e:	b29a      	uxth	r2, r3
 801a180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a182:	801a      	strh	r2, [r3, #0]
 801a184:	e01a      	b.n	801a1bc <USB_EPStartXfer+0x228>
 801a186:	683b      	ldr	r3, [r7, #0]
 801a188:	785b      	ldrb	r3, [r3, #1]
 801a18a:	2b01      	cmp	r3, #1
 801a18c:	d116      	bne.n	801a1bc <USB_EPStartXfer+0x228>
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	2250      	movs	r2, #80	@ 0x50
 801a192:	5a9b      	ldrh	r3, [r3, r2]
 801a194:	b29b      	uxth	r3, r3
 801a196:	001a      	movs	r2, r3
 801a198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a19a:	189b      	adds	r3, r3, r2
 801a19c:	633b      	str	r3, [r7, #48]	@ 0x30
 801a19e:	683b      	ldr	r3, [r7, #0]
 801a1a0:	781b      	ldrb	r3, [r3, #0]
 801a1a2:	00da      	lsls	r2, r3, #3
 801a1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1a6:	18d3      	adds	r3, r2, r3
 801a1a8:	4a72      	ldr	r2, [pc, #456]	@ (801a374 <USB_EPStartXfer+0x3e0>)
 801a1aa:	4694      	mov	ip, r2
 801a1ac:	4463      	add	r3, ip
 801a1ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a1b0:	1d7b      	adds	r3, r7, #5
 801a1b2:	33ff      	adds	r3, #255	@ 0xff
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	b29a      	uxth	r2, r3
 801a1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a1bc:	2076      	movs	r0, #118	@ 0x76
 801a1be:	183b      	adds	r3, r7, r0
 801a1c0:	683a      	ldr	r2, [r7, #0]
 801a1c2:	8952      	ldrh	r2, [r2, #10]
 801a1c4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a1c6:	683b      	ldr	r3, [r7, #0]
 801a1c8:	6959      	ldr	r1, [r3, #20]
 801a1ca:	1d7b      	adds	r3, r7, #5
 801a1cc:	33ff      	adds	r3, #255	@ 0xff
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	b29c      	uxth	r4, r3
 801a1d2:	183b      	adds	r3, r7, r0
 801a1d4:	881a      	ldrh	r2, [r3, #0]
 801a1d6:	6878      	ldr	r0, [r7, #4]
 801a1d8:	0023      	movs	r3, r4
 801a1da:	f001 f94d 	bl	801b478 <USB_WritePMA>
            ep->xfer_buff += len;
 801a1de:	683b      	ldr	r3, [r7, #0]
 801a1e0:	695a      	ldr	r2, [r3, #20]
 801a1e2:	1d7b      	adds	r3, r7, #5
 801a1e4:	33ff      	adds	r3, #255	@ 0xff
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	18d2      	adds	r2, r2, r3
 801a1ea:	683b      	ldr	r3, [r7, #0]
 801a1ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a1ee:	683b      	ldr	r3, [r7, #0]
 801a1f0:	6a1a      	ldr	r2, [r3, #32]
 801a1f2:	683b      	ldr	r3, [r7, #0]
 801a1f4:	691b      	ldr	r3, [r3, #16]
 801a1f6:	429a      	cmp	r2, r3
 801a1f8:	d908      	bls.n	801a20c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801a1fa:	683b      	ldr	r3, [r7, #0]
 801a1fc:	6a1a      	ldr	r2, [r3, #32]
 801a1fe:	1d7b      	adds	r3, r7, #5
 801a200:	33ff      	adds	r3, #255	@ 0xff
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	1ad2      	subs	r2, r2, r3
 801a206:	683b      	ldr	r3, [r7, #0]
 801a208:	621a      	str	r2, [r3, #32]
 801a20a:	e007      	b.n	801a21c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801a20c:	683b      	ldr	r3, [r7, #0]
 801a20e:	6a1b      	ldr	r3, [r3, #32]
 801a210:	1d7a      	adds	r2, r7, #5
 801a212:	32ff      	adds	r2, #255	@ 0xff
 801a214:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a216:	683b      	ldr	r3, [r7, #0]
 801a218:	2200      	movs	r2, #0
 801a21a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a21c:	683b      	ldr	r3, [r7, #0]
 801a21e:	785b      	ldrb	r3, [r3, #1]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d000      	beq.n	801a226 <USB_EPStartXfer+0x292>
 801a224:	e070      	b.n	801a308 <USB_EPStartXfer+0x374>
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	61bb      	str	r3, [r7, #24]
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	2250      	movs	r2, #80	@ 0x50
 801a22e:	5a9b      	ldrh	r3, [r3, r2]
 801a230:	b29b      	uxth	r3, r3
 801a232:	001a      	movs	r2, r3
 801a234:	69bb      	ldr	r3, [r7, #24]
 801a236:	189b      	adds	r3, r3, r2
 801a238:	61bb      	str	r3, [r7, #24]
 801a23a:	683b      	ldr	r3, [r7, #0]
 801a23c:	781b      	ldrb	r3, [r3, #0]
 801a23e:	00da      	lsls	r2, r3, #3
 801a240:	69bb      	ldr	r3, [r7, #24]
 801a242:	18d3      	adds	r3, r2, r3
 801a244:	4a48      	ldr	r2, [pc, #288]	@ (801a368 <USB_EPStartXfer+0x3d4>)
 801a246:	4694      	mov	ip, r2
 801a248:	4463      	add	r3, ip
 801a24a:	617b      	str	r3, [r7, #20]
 801a24c:	697b      	ldr	r3, [r7, #20]
 801a24e:	881b      	ldrh	r3, [r3, #0]
 801a250:	b29b      	uxth	r3, r3
 801a252:	059b      	lsls	r3, r3, #22
 801a254:	0d9b      	lsrs	r3, r3, #22
 801a256:	b29a      	uxth	r2, r3
 801a258:	697b      	ldr	r3, [r7, #20]
 801a25a:	801a      	strh	r2, [r3, #0]
 801a25c:	1d7b      	adds	r3, r7, #5
 801a25e:	33ff      	adds	r3, #255	@ 0xff
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	2b3e      	cmp	r3, #62	@ 0x3e
 801a264:	d922      	bls.n	801a2ac <USB_EPStartXfer+0x318>
 801a266:	1d7b      	adds	r3, r7, #5
 801a268:	33ff      	adds	r3, #255	@ 0xff
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	095b      	lsrs	r3, r3, #5
 801a26e:	21fc      	movs	r1, #252	@ 0xfc
 801a270:	187a      	adds	r2, r7, r1
 801a272:	6013      	str	r3, [r2, #0]
 801a274:	1d7b      	adds	r3, r7, #5
 801a276:	33ff      	adds	r3, #255	@ 0xff
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	221f      	movs	r2, #31
 801a27c:	4013      	ands	r3, r2
 801a27e:	d104      	bne.n	801a28a <USB_EPStartXfer+0x2f6>
 801a280:	187b      	adds	r3, r7, r1
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	3b01      	subs	r3, #1
 801a286:	187a      	adds	r2, r7, r1
 801a288:	6013      	str	r3, [r2, #0]
 801a28a:	697b      	ldr	r3, [r7, #20]
 801a28c:	881b      	ldrh	r3, [r3, #0]
 801a28e:	b29a      	uxth	r2, r3
 801a290:	23fc      	movs	r3, #252	@ 0xfc
 801a292:	18fb      	adds	r3, r7, r3
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	b29b      	uxth	r3, r3
 801a298:	029b      	lsls	r3, r3, #10
 801a29a:	b29b      	uxth	r3, r3
 801a29c:	4313      	orrs	r3, r2
 801a29e:	b29b      	uxth	r3, r3
 801a2a0:	4a35      	ldr	r2, [pc, #212]	@ (801a378 <USB_EPStartXfer+0x3e4>)
 801a2a2:	4313      	orrs	r3, r2
 801a2a4:	b29a      	uxth	r2, r3
 801a2a6:	697b      	ldr	r3, [r7, #20]
 801a2a8:	801a      	strh	r2, [r3, #0]
 801a2aa:	e04a      	b.n	801a342 <USB_EPStartXfer+0x3ae>
 801a2ac:	1d7b      	adds	r3, r7, #5
 801a2ae:	33ff      	adds	r3, #255	@ 0xff
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d108      	bne.n	801a2c8 <USB_EPStartXfer+0x334>
 801a2b6:	697b      	ldr	r3, [r7, #20]
 801a2b8:	881b      	ldrh	r3, [r3, #0]
 801a2ba:	b29b      	uxth	r3, r3
 801a2bc:	4a2e      	ldr	r2, [pc, #184]	@ (801a378 <USB_EPStartXfer+0x3e4>)
 801a2be:	4313      	orrs	r3, r2
 801a2c0:	b29a      	uxth	r2, r3
 801a2c2:	697b      	ldr	r3, [r7, #20]
 801a2c4:	801a      	strh	r2, [r3, #0]
 801a2c6:	e03c      	b.n	801a342 <USB_EPStartXfer+0x3ae>
 801a2c8:	1d7b      	adds	r3, r7, #5
 801a2ca:	33ff      	adds	r3, #255	@ 0xff
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	085b      	lsrs	r3, r3, #1
 801a2d0:	21fc      	movs	r1, #252	@ 0xfc
 801a2d2:	187a      	adds	r2, r7, r1
 801a2d4:	6013      	str	r3, [r2, #0]
 801a2d6:	1d7b      	adds	r3, r7, #5
 801a2d8:	33ff      	adds	r3, #255	@ 0xff
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	2201      	movs	r2, #1
 801a2de:	4013      	ands	r3, r2
 801a2e0:	d004      	beq.n	801a2ec <USB_EPStartXfer+0x358>
 801a2e2:	187b      	adds	r3, r7, r1
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	3301      	adds	r3, #1
 801a2e8:	187a      	adds	r2, r7, r1
 801a2ea:	6013      	str	r3, [r2, #0]
 801a2ec:	697b      	ldr	r3, [r7, #20]
 801a2ee:	881b      	ldrh	r3, [r3, #0]
 801a2f0:	b29a      	uxth	r2, r3
 801a2f2:	23fc      	movs	r3, #252	@ 0xfc
 801a2f4:	18fb      	adds	r3, r7, r3
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	b29b      	uxth	r3, r3
 801a2fa:	029b      	lsls	r3, r3, #10
 801a2fc:	b29b      	uxth	r3, r3
 801a2fe:	4313      	orrs	r3, r2
 801a300:	b29a      	uxth	r2, r3
 801a302:	697b      	ldr	r3, [r7, #20]
 801a304:	801a      	strh	r2, [r3, #0]
 801a306:	e01c      	b.n	801a342 <USB_EPStartXfer+0x3ae>
 801a308:	683b      	ldr	r3, [r7, #0]
 801a30a:	785b      	ldrb	r3, [r3, #1]
 801a30c:	2b01      	cmp	r3, #1
 801a30e:	d118      	bne.n	801a342 <USB_EPStartXfer+0x3ae>
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	623b      	str	r3, [r7, #32]
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	2250      	movs	r2, #80	@ 0x50
 801a318:	5a9b      	ldrh	r3, [r3, r2]
 801a31a:	b29b      	uxth	r3, r3
 801a31c:	001a      	movs	r2, r3
 801a31e:	6a3b      	ldr	r3, [r7, #32]
 801a320:	189b      	adds	r3, r3, r2
 801a322:	623b      	str	r3, [r7, #32]
 801a324:	683b      	ldr	r3, [r7, #0]
 801a326:	781b      	ldrb	r3, [r3, #0]
 801a328:	00da      	lsls	r2, r3, #3
 801a32a:	6a3b      	ldr	r3, [r7, #32]
 801a32c:	18d3      	adds	r3, r2, r3
 801a32e:	4a0e      	ldr	r2, [pc, #56]	@ (801a368 <USB_EPStartXfer+0x3d4>)
 801a330:	4694      	mov	ip, r2
 801a332:	4463      	add	r3, ip
 801a334:	61fb      	str	r3, [r7, #28]
 801a336:	1d7b      	adds	r3, r7, #5
 801a338:	33ff      	adds	r3, #255	@ 0xff
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	b29a      	uxth	r2, r3
 801a33e:	69fb      	ldr	r3, [r7, #28]
 801a340:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a342:	2076      	movs	r0, #118	@ 0x76
 801a344:	183b      	adds	r3, r7, r0
 801a346:	683a      	ldr	r2, [r7, #0]
 801a348:	8912      	ldrh	r2, [r2, #8]
 801a34a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a34c:	683b      	ldr	r3, [r7, #0]
 801a34e:	6959      	ldr	r1, [r3, #20]
 801a350:	1d7b      	adds	r3, r7, #5
 801a352:	33ff      	adds	r3, #255	@ 0xff
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	b29c      	uxth	r4, r3
 801a358:	183b      	adds	r3, r7, r0
 801a35a:	881a      	ldrh	r2, [r3, #0]
 801a35c:	6878      	ldr	r0, [r7, #4]
 801a35e:	0023      	movs	r3, r4
 801a360:	f001 f88a 	bl	801b478 <USB_WritePMA>
 801a364:	e329      	b.n	801a9ba <USB_EPStartXfer+0xa26>
 801a366:	46c0      	nop			@ (mov r8, r8)
 801a368:	00000402 	.word	0x00000402
 801a36c:	ffff8f8f 	.word	0xffff8f8f
 801a370:	ffff8180 	.word	0xffff8180
 801a374:	00000406 	.word	0x00000406
 801a378:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a37c:	683b      	ldr	r3, [r7, #0]
 801a37e:	785b      	ldrb	r3, [r3, #1]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d000      	beq.n	801a386 <USB_EPStartXfer+0x3f2>
 801a384:	e070      	b.n	801a468 <USB_EPStartXfer+0x4d4>
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	2250      	movs	r2, #80	@ 0x50
 801a38e:	5a9b      	ldrh	r3, [r3, r2]
 801a390:	b29b      	uxth	r3, r3
 801a392:	001a      	movs	r2, r3
 801a394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a396:	189b      	adds	r3, r3, r2
 801a398:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a39a:	683b      	ldr	r3, [r7, #0]
 801a39c:	781b      	ldrb	r3, [r3, #0]
 801a39e:	00da      	lsls	r2, r3, #3
 801a3a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a3a2:	18d3      	adds	r3, r2, r3
 801a3a4:	4acd      	ldr	r2, [pc, #820]	@ (801a6dc <USB_EPStartXfer+0x748>)
 801a3a6:	4694      	mov	ip, r2
 801a3a8:	4463      	add	r3, ip
 801a3aa:	647b      	str	r3, [r7, #68]	@ 0x44
 801a3ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a3ae:	881b      	ldrh	r3, [r3, #0]
 801a3b0:	b29b      	uxth	r3, r3
 801a3b2:	059b      	lsls	r3, r3, #22
 801a3b4:	0d9b      	lsrs	r3, r3, #22
 801a3b6:	b29a      	uxth	r2, r3
 801a3b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a3ba:	801a      	strh	r2, [r3, #0]
 801a3bc:	1d7b      	adds	r3, r7, #5
 801a3be:	33ff      	adds	r3, #255	@ 0xff
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	2b3e      	cmp	r3, #62	@ 0x3e
 801a3c4:	d922      	bls.n	801a40c <USB_EPStartXfer+0x478>
 801a3c6:	1d7b      	adds	r3, r7, #5
 801a3c8:	33ff      	adds	r3, #255	@ 0xff
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	095b      	lsrs	r3, r3, #5
 801a3ce:	21f8      	movs	r1, #248	@ 0xf8
 801a3d0:	187a      	adds	r2, r7, r1
 801a3d2:	6013      	str	r3, [r2, #0]
 801a3d4:	1d7b      	adds	r3, r7, #5
 801a3d6:	33ff      	adds	r3, #255	@ 0xff
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	221f      	movs	r2, #31
 801a3dc:	4013      	ands	r3, r2
 801a3de:	d104      	bne.n	801a3ea <USB_EPStartXfer+0x456>
 801a3e0:	187b      	adds	r3, r7, r1
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	3b01      	subs	r3, #1
 801a3e6:	187a      	adds	r2, r7, r1
 801a3e8:	6013      	str	r3, [r2, #0]
 801a3ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a3ec:	881b      	ldrh	r3, [r3, #0]
 801a3ee:	b29a      	uxth	r2, r3
 801a3f0:	23f8      	movs	r3, #248	@ 0xf8
 801a3f2:	18fb      	adds	r3, r7, r3
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	b29b      	uxth	r3, r3
 801a3f8:	029b      	lsls	r3, r3, #10
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	4313      	orrs	r3, r2
 801a3fe:	b29b      	uxth	r3, r3
 801a400:	4ab7      	ldr	r2, [pc, #732]	@ (801a6e0 <USB_EPStartXfer+0x74c>)
 801a402:	4313      	orrs	r3, r2
 801a404:	b29a      	uxth	r2, r3
 801a406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a408:	801a      	strh	r2, [r3, #0]
 801a40a:	e04a      	b.n	801a4a2 <USB_EPStartXfer+0x50e>
 801a40c:	1d7b      	adds	r3, r7, #5
 801a40e:	33ff      	adds	r3, #255	@ 0xff
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	2b00      	cmp	r3, #0
 801a414:	d108      	bne.n	801a428 <USB_EPStartXfer+0x494>
 801a416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a418:	881b      	ldrh	r3, [r3, #0]
 801a41a:	b29b      	uxth	r3, r3
 801a41c:	4ab0      	ldr	r2, [pc, #704]	@ (801a6e0 <USB_EPStartXfer+0x74c>)
 801a41e:	4313      	orrs	r3, r2
 801a420:	b29a      	uxth	r2, r3
 801a422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a424:	801a      	strh	r2, [r3, #0]
 801a426:	e03c      	b.n	801a4a2 <USB_EPStartXfer+0x50e>
 801a428:	1d7b      	adds	r3, r7, #5
 801a42a:	33ff      	adds	r3, #255	@ 0xff
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	085b      	lsrs	r3, r3, #1
 801a430:	21f8      	movs	r1, #248	@ 0xf8
 801a432:	187a      	adds	r2, r7, r1
 801a434:	6013      	str	r3, [r2, #0]
 801a436:	1d7b      	adds	r3, r7, #5
 801a438:	33ff      	adds	r3, #255	@ 0xff
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	2201      	movs	r2, #1
 801a43e:	4013      	ands	r3, r2
 801a440:	d004      	beq.n	801a44c <USB_EPStartXfer+0x4b8>
 801a442:	187b      	adds	r3, r7, r1
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	3301      	adds	r3, #1
 801a448:	187a      	adds	r2, r7, r1
 801a44a:	6013      	str	r3, [r2, #0]
 801a44c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a44e:	881b      	ldrh	r3, [r3, #0]
 801a450:	b29a      	uxth	r2, r3
 801a452:	23f8      	movs	r3, #248	@ 0xf8
 801a454:	18fb      	adds	r3, r7, r3
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	b29b      	uxth	r3, r3
 801a45a:	029b      	lsls	r3, r3, #10
 801a45c:	b29b      	uxth	r3, r3
 801a45e:	4313      	orrs	r3, r2
 801a460:	b29a      	uxth	r2, r3
 801a462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a464:	801a      	strh	r2, [r3, #0]
 801a466:	e01c      	b.n	801a4a2 <USB_EPStartXfer+0x50e>
 801a468:	683b      	ldr	r3, [r7, #0]
 801a46a:	785b      	ldrb	r3, [r3, #1]
 801a46c:	2b01      	cmp	r3, #1
 801a46e:	d118      	bne.n	801a4a2 <USB_EPStartXfer+0x50e>
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	653b      	str	r3, [r7, #80]	@ 0x50
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	2250      	movs	r2, #80	@ 0x50
 801a478:	5a9b      	ldrh	r3, [r3, r2]
 801a47a:	b29b      	uxth	r3, r3
 801a47c:	001a      	movs	r2, r3
 801a47e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a480:	189b      	adds	r3, r3, r2
 801a482:	653b      	str	r3, [r7, #80]	@ 0x50
 801a484:	683b      	ldr	r3, [r7, #0]
 801a486:	781b      	ldrb	r3, [r3, #0]
 801a488:	00da      	lsls	r2, r3, #3
 801a48a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a48c:	18d3      	adds	r3, r2, r3
 801a48e:	4a93      	ldr	r2, [pc, #588]	@ (801a6dc <USB_EPStartXfer+0x748>)
 801a490:	4694      	mov	ip, r2
 801a492:	4463      	add	r3, ip
 801a494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a496:	1d7b      	adds	r3, r7, #5
 801a498:	33ff      	adds	r3, #255	@ 0xff
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	b29a      	uxth	r2, r3
 801a49e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a4a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a4a2:	2076      	movs	r0, #118	@ 0x76
 801a4a4:	183b      	adds	r3, r7, r0
 801a4a6:	683a      	ldr	r2, [r7, #0]
 801a4a8:	8912      	ldrh	r2, [r2, #8]
 801a4aa:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a4ac:	683b      	ldr	r3, [r7, #0]
 801a4ae:	6959      	ldr	r1, [r3, #20]
 801a4b0:	1d7b      	adds	r3, r7, #5
 801a4b2:	33ff      	adds	r3, #255	@ 0xff
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	b29c      	uxth	r4, r3
 801a4b8:	183b      	adds	r3, r7, r0
 801a4ba:	881a      	ldrh	r2, [r3, #0]
 801a4bc:	6878      	ldr	r0, [r7, #4]
 801a4be:	0023      	movs	r3, r4
 801a4c0:	f000 ffda 	bl	801b478 <USB_WritePMA>
            ep->xfer_buff += len;
 801a4c4:	683b      	ldr	r3, [r7, #0]
 801a4c6:	695a      	ldr	r2, [r3, #20]
 801a4c8:	1d7b      	adds	r3, r7, #5
 801a4ca:	33ff      	adds	r3, #255	@ 0xff
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	18d2      	adds	r2, r2, r3
 801a4d0:	683b      	ldr	r3, [r7, #0]
 801a4d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a4d4:	683b      	ldr	r3, [r7, #0]
 801a4d6:	6a1a      	ldr	r2, [r3, #32]
 801a4d8:	683b      	ldr	r3, [r7, #0]
 801a4da:	691b      	ldr	r3, [r3, #16]
 801a4dc:	429a      	cmp	r2, r3
 801a4de:	d908      	bls.n	801a4f2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801a4e0:	683b      	ldr	r3, [r7, #0]
 801a4e2:	6a1a      	ldr	r2, [r3, #32]
 801a4e4:	1d7b      	adds	r3, r7, #5
 801a4e6:	33ff      	adds	r3, #255	@ 0xff
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	1ad2      	subs	r2, r2, r3
 801a4ec:	683b      	ldr	r3, [r7, #0]
 801a4ee:	621a      	str	r2, [r3, #32]
 801a4f0:	e007      	b.n	801a502 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801a4f2:	683b      	ldr	r3, [r7, #0]
 801a4f4:	6a1b      	ldr	r3, [r3, #32]
 801a4f6:	1d7a      	adds	r2, r7, #5
 801a4f8:	32ff      	adds	r2, #255	@ 0xff
 801a4fa:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a4fc:	683b      	ldr	r3, [r7, #0]
 801a4fe:	2200      	movs	r2, #0
 801a500:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	643b      	str	r3, [r7, #64]	@ 0x40
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	785b      	ldrb	r3, [r3, #1]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d000      	beq.n	801a510 <USB_EPStartXfer+0x57c>
 801a50e:	e070      	b.n	801a5f2 <USB_EPStartXfer+0x65e>
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	2250      	movs	r2, #80	@ 0x50
 801a518:	5a9b      	ldrh	r3, [r3, r2]
 801a51a:	b29b      	uxth	r3, r3
 801a51c:	001a      	movs	r2, r3
 801a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a520:	189b      	adds	r3, r3, r2
 801a522:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a524:	683b      	ldr	r3, [r7, #0]
 801a526:	781b      	ldrb	r3, [r3, #0]
 801a528:	00da      	lsls	r2, r3, #3
 801a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a52c:	18d3      	adds	r3, r2, r3
 801a52e:	4a6d      	ldr	r2, [pc, #436]	@ (801a6e4 <USB_EPStartXfer+0x750>)
 801a530:	4694      	mov	ip, r2
 801a532:	4463      	add	r3, ip
 801a534:	637b      	str	r3, [r7, #52]	@ 0x34
 801a536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a538:	881b      	ldrh	r3, [r3, #0]
 801a53a:	b29b      	uxth	r3, r3
 801a53c:	059b      	lsls	r3, r3, #22
 801a53e:	0d9b      	lsrs	r3, r3, #22
 801a540:	b29a      	uxth	r2, r3
 801a542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a544:	801a      	strh	r2, [r3, #0]
 801a546:	1d7b      	adds	r3, r7, #5
 801a548:	33ff      	adds	r3, #255	@ 0xff
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	2b3e      	cmp	r3, #62	@ 0x3e
 801a54e:	d922      	bls.n	801a596 <USB_EPStartXfer+0x602>
 801a550:	1d7b      	adds	r3, r7, #5
 801a552:	33ff      	adds	r3, #255	@ 0xff
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	095b      	lsrs	r3, r3, #5
 801a558:	21f4      	movs	r1, #244	@ 0xf4
 801a55a:	187a      	adds	r2, r7, r1
 801a55c:	6013      	str	r3, [r2, #0]
 801a55e:	1d7b      	adds	r3, r7, #5
 801a560:	33ff      	adds	r3, #255	@ 0xff
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	221f      	movs	r2, #31
 801a566:	4013      	ands	r3, r2
 801a568:	d104      	bne.n	801a574 <USB_EPStartXfer+0x5e0>
 801a56a:	187b      	adds	r3, r7, r1
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	3b01      	subs	r3, #1
 801a570:	187a      	adds	r2, r7, r1
 801a572:	6013      	str	r3, [r2, #0]
 801a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a576:	881b      	ldrh	r3, [r3, #0]
 801a578:	b29a      	uxth	r2, r3
 801a57a:	23f4      	movs	r3, #244	@ 0xf4
 801a57c:	18fb      	adds	r3, r7, r3
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	b29b      	uxth	r3, r3
 801a582:	029b      	lsls	r3, r3, #10
 801a584:	b29b      	uxth	r3, r3
 801a586:	4313      	orrs	r3, r2
 801a588:	b29b      	uxth	r3, r3
 801a58a:	4a55      	ldr	r2, [pc, #340]	@ (801a6e0 <USB_EPStartXfer+0x74c>)
 801a58c:	4313      	orrs	r3, r2
 801a58e:	b29a      	uxth	r2, r3
 801a590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a592:	801a      	strh	r2, [r3, #0]
 801a594:	e048      	b.n	801a628 <USB_EPStartXfer+0x694>
 801a596:	1d7b      	adds	r3, r7, #5
 801a598:	33ff      	adds	r3, #255	@ 0xff
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d108      	bne.n	801a5b2 <USB_EPStartXfer+0x61e>
 801a5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5a2:	881b      	ldrh	r3, [r3, #0]
 801a5a4:	b29b      	uxth	r3, r3
 801a5a6:	4a4e      	ldr	r2, [pc, #312]	@ (801a6e0 <USB_EPStartXfer+0x74c>)
 801a5a8:	4313      	orrs	r3, r2
 801a5aa:	b29a      	uxth	r2, r3
 801a5ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5ae:	801a      	strh	r2, [r3, #0]
 801a5b0:	e03a      	b.n	801a628 <USB_EPStartXfer+0x694>
 801a5b2:	1d7b      	adds	r3, r7, #5
 801a5b4:	33ff      	adds	r3, #255	@ 0xff
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	085b      	lsrs	r3, r3, #1
 801a5ba:	21f4      	movs	r1, #244	@ 0xf4
 801a5bc:	187a      	adds	r2, r7, r1
 801a5be:	6013      	str	r3, [r2, #0]
 801a5c0:	1d7b      	adds	r3, r7, #5
 801a5c2:	33ff      	adds	r3, #255	@ 0xff
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	2201      	movs	r2, #1
 801a5c8:	4013      	ands	r3, r2
 801a5ca:	d004      	beq.n	801a5d6 <USB_EPStartXfer+0x642>
 801a5cc:	187b      	adds	r3, r7, r1
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	3301      	adds	r3, #1
 801a5d2:	187a      	adds	r2, r7, r1
 801a5d4:	6013      	str	r3, [r2, #0]
 801a5d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5d8:	881b      	ldrh	r3, [r3, #0]
 801a5da:	b29a      	uxth	r2, r3
 801a5dc:	23f4      	movs	r3, #244	@ 0xf4
 801a5de:	18fb      	adds	r3, r7, r3
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	b29b      	uxth	r3, r3
 801a5e4:	029b      	lsls	r3, r3, #10
 801a5e6:	b29b      	uxth	r3, r3
 801a5e8:	4313      	orrs	r3, r2
 801a5ea:	b29a      	uxth	r2, r3
 801a5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5ee:	801a      	strh	r2, [r3, #0]
 801a5f0:	e01a      	b.n	801a628 <USB_EPStartXfer+0x694>
 801a5f2:	683b      	ldr	r3, [r7, #0]
 801a5f4:	785b      	ldrb	r3, [r3, #1]
 801a5f6:	2b01      	cmp	r3, #1
 801a5f8:	d116      	bne.n	801a628 <USB_EPStartXfer+0x694>
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	2250      	movs	r2, #80	@ 0x50
 801a5fe:	5a9b      	ldrh	r3, [r3, r2]
 801a600:	b29b      	uxth	r3, r3
 801a602:	001a      	movs	r2, r3
 801a604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a606:	189b      	adds	r3, r3, r2
 801a608:	643b      	str	r3, [r7, #64]	@ 0x40
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	781b      	ldrb	r3, [r3, #0]
 801a60e:	00da      	lsls	r2, r3, #3
 801a610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a612:	18d3      	adds	r3, r2, r3
 801a614:	4a33      	ldr	r2, [pc, #204]	@ (801a6e4 <USB_EPStartXfer+0x750>)
 801a616:	4694      	mov	ip, r2
 801a618:	4463      	add	r3, ip
 801a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a61c:	1d7b      	adds	r3, r7, #5
 801a61e:	33ff      	adds	r3, #255	@ 0xff
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	b29a      	uxth	r2, r3
 801a624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a626:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a628:	2076      	movs	r0, #118	@ 0x76
 801a62a:	183b      	adds	r3, r7, r0
 801a62c:	683a      	ldr	r2, [r7, #0]
 801a62e:	8952      	ldrh	r2, [r2, #10]
 801a630:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	6959      	ldr	r1, [r3, #20]
 801a636:	1d7b      	adds	r3, r7, #5
 801a638:	33ff      	adds	r3, #255	@ 0xff
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	b29c      	uxth	r4, r3
 801a63e:	183b      	adds	r3, r7, r0
 801a640:	881a      	ldrh	r2, [r3, #0]
 801a642:	6878      	ldr	r0, [r7, #4]
 801a644:	0023      	movs	r3, r4
 801a646:	f000 ff17 	bl	801b478 <USB_WritePMA>
 801a64a:	e1b6      	b.n	801a9ba <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a64c:	683b      	ldr	r3, [r7, #0]
 801a64e:	6a1b      	ldr	r3, [r3, #32]
 801a650:	1d7a      	adds	r2, r7, #5
 801a652:	32ff      	adds	r2, #255	@ 0xff
 801a654:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a656:	687a      	ldr	r2, [r7, #4]
 801a658:	683b      	ldr	r3, [r7, #0]
 801a65a:	781b      	ldrb	r3, [r3, #0]
 801a65c:	009b      	lsls	r3, r3, #2
 801a65e:	18d3      	adds	r3, r2, r3
 801a660:	881b      	ldrh	r3, [r3, #0]
 801a662:	b29a      	uxth	r2, r3
 801a664:	2062      	movs	r0, #98	@ 0x62
 801a666:	183b      	adds	r3, r7, r0
 801a668:	491f      	ldr	r1, [pc, #124]	@ (801a6e8 <USB_EPStartXfer+0x754>)
 801a66a:	400a      	ands	r2, r1
 801a66c:	801a      	strh	r2, [r3, #0]
 801a66e:	687a      	ldr	r2, [r7, #4]
 801a670:	683b      	ldr	r3, [r7, #0]
 801a672:	781b      	ldrb	r3, [r3, #0]
 801a674:	009b      	lsls	r3, r3, #2
 801a676:	18d3      	adds	r3, r2, r3
 801a678:	183a      	adds	r2, r7, r0
 801a67a:	8812      	ldrh	r2, [r2, #0]
 801a67c:	491b      	ldr	r1, [pc, #108]	@ (801a6ec <USB_EPStartXfer+0x758>)
 801a67e:	430a      	orrs	r2, r1
 801a680:	b292      	uxth	r2, r2
 801a682:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	2250      	movs	r2, #80	@ 0x50
 801a68c:	5a9b      	ldrh	r3, [r3, r2]
 801a68e:	b29b      	uxth	r3, r3
 801a690:	001a      	movs	r2, r3
 801a692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a694:	189b      	adds	r3, r3, r2
 801a696:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	781b      	ldrb	r3, [r3, #0]
 801a69c:	00da      	lsls	r2, r3, #3
 801a69e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a6a0:	18d3      	adds	r3, r2, r3
 801a6a2:	4a0e      	ldr	r2, [pc, #56]	@ (801a6dc <USB_EPStartXfer+0x748>)
 801a6a4:	4694      	mov	ip, r2
 801a6a6:	4463      	add	r3, ip
 801a6a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a6aa:	1d7b      	adds	r3, r7, #5
 801a6ac:	33ff      	adds	r3, #255	@ 0xff
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	b29a      	uxth	r2, r3
 801a6b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a6b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a6b6:	2076      	movs	r0, #118	@ 0x76
 801a6b8:	183b      	adds	r3, r7, r0
 801a6ba:	683a      	ldr	r2, [r7, #0]
 801a6bc:	8912      	ldrh	r2, [r2, #8]
 801a6be:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a6c0:	683b      	ldr	r3, [r7, #0]
 801a6c2:	6959      	ldr	r1, [r3, #20]
 801a6c4:	1d7b      	adds	r3, r7, #5
 801a6c6:	33ff      	adds	r3, #255	@ 0xff
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	b29c      	uxth	r4, r3
 801a6cc:	183b      	adds	r3, r7, r0
 801a6ce:	881a      	ldrh	r2, [r3, #0]
 801a6d0:	6878      	ldr	r0, [r7, #4]
 801a6d2:	0023      	movs	r3, r4
 801a6d4:	f000 fed0 	bl	801b478 <USB_WritePMA>
 801a6d8:	e16f      	b.n	801a9ba <USB_EPStartXfer+0xa26>
 801a6da:	46c0      	nop			@ (mov r8, r8)
 801a6dc:	00000402 	.word	0x00000402
 801a6e0:	ffff8000 	.word	0xffff8000
 801a6e4:	00000406 	.word	0x00000406
 801a6e8:	ffff8e8f 	.word	0xffff8e8f
 801a6ec:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a6f0:	683b      	ldr	r3, [r7, #0]
 801a6f2:	6a1a      	ldr	r2, [r3, #32]
 801a6f4:	1d7b      	adds	r3, r7, #5
 801a6f6:	33ff      	adds	r3, #255	@ 0xff
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	1ad2      	subs	r2, r2, r3
 801a6fc:	683b      	ldr	r3, [r7, #0]
 801a6fe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a700:	687a      	ldr	r2, [r7, #4]
 801a702:	683b      	ldr	r3, [r7, #0]
 801a704:	781b      	ldrb	r3, [r3, #0]
 801a706:	009b      	lsls	r3, r3, #2
 801a708:	18d3      	adds	r3, r2, r3
 801a70a:	881b      	ldrh	r3, [r3, #0]
 801a70c:	b29b      	uxth	r3, r3
 801a70e:	001a      	movs	r2, r3
 801a710:	2340      	movs	r3, #64	@ 0x40
 801a712:	4013      	ands	r3, r2
 801a714:	d100      	bne.n	801a718 <USB_EPStartXfer+0x784>
 801a716:	e0a4      	b.n	801a862 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	673b      	str	r3, [r7, #112]	@ 0x70
 801a71c:	683b      	ldr	r3, [r7, #0]
 801a71e:	785b      	ldrb	r3, [r3, #1]
 801a720:	2b00      	cmp	r3, #0
 801a722:	d000      	beq.n	801a726 <USB_EPStartXfer+0x792>
 801a724:	e070      	b.n	801a808 <USB_EPStartXfer+0x874>
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	2250      	movs	r2, #80	@ 0x50
 801a72e:	5a9b      	ldrh	r3, [r3, r2]
 801a730:	b29b      	uxth	r3, r3
 801a732:	001a      	movs	r2, r3
 801a734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a736:	189b      	adds	r3, r3, r2
 801a738:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	781b      	ldrb	r3, [r3, #0]
 801a73e:	00da      	lsls	r2, r3, #3
 801a740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a742:	18d3      	adds	r3, r2, r3
 801a744:	4abc      	ldr	r2, [pc, #752]	@ (801aa38 <USB_EPStartXfer+0xaa4>)
 801a746:	4694      	mov	ip, r2
 801a748:	4463      	add	r3, ip
 801a74a:	667b      	str	r3, [r7, #100]	@ 0x64
 801a74c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a74e:	881b      	ldrh	r3, [r3, #0]
 801a750:	b29b      	uxth	r3, r3
 801a752:	059b      	lsls	r3, r3, #22
 801a754:	0d9b      	lsrs	r3, r3, #22
 801a756:	b29a      	uxth	r2, r3
 801a758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a75a:	801a      	strh	r2, [r3, #0]
 801a75c:	1d7b      	adds	r3, r7, #5
 801a75e:	33ff      	adds	r3, #255	@ 0xff
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	2b3e      	cmp	r3, #62	@ 0x3e
 801a764:	d922      	bls.n	801a7ac <USB_EPStartXfer+0x818>
 801a766:	1d7b      	adds	r3, r7, #5
 801a768:	33ff      	adds	r3, #255	@ 0xff
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	095b      	lsrs	r3, r3, #5
 801a76e:	21f0      	movs	r1, #240	@ 0xf0
 801a770:	187a      	adds	r2, r7, r1
 801a772:	6013      	str	r3, [r2, #0]
 801a774:	1d7b      	adds	r3, r7, #5
 801a776:	33ff      	adds	r3, #255	@ 0xff
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	221f      	movs	r2, #31
 801a77c:	4013      	ands	r3, r2
 801a77e:	d104      	bne.n	801a78a <USB_EPStartXfer+0x7f6>
 801a780:	187b      	adds	r3, r7, r1
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	3b01      	subs	r3, #1
 801a786:	187a      	adds	r2, r7, r1
 801a788:	6013      	str	r3, [r2, #0]
 801a78a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a78c:	881b      	ldrh	r3, [r3, #0]
 801a78e:	b29a      	uxth	r2, r3
 801a790:	23f0      	movs	r3, #240	@ 0xf0
 801a792:	18fb      	adds	r3, r7, r3
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	b29b      	uxth	r3, r3
 801a798:	029b      	lsls	r3, r3, #10
 801a79a:	b29b      	uxth	r3, r3
 801a79c:	4313      	orrs	r3, r2
 801a79e:	b29b      	uxth	r3, r3
 801a7a0:	4aa6      	ldr	r2, [pc, #664]	@ (801aa3c <USB_EPStartXfer+0xaa8>)
 801a7a2:	4313      	orrs	r3, r2
 801a7a4:	b29a      	uxth	r2, r3
 801a7a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a7a8:	801a      	strh	r2, [r3, #0]
 801a7aa:	e048      	b.n	801a83e <USB_EPStartXfer+0x8aa>
 801a7ac:	1d7b      	adds	r3, r7, #5
 801a7ae:	33ff      	adds	r3, #255	@ 0xff
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d108      	bne.n	801a7c8 <USB_EPStartXfer+0x834>
 801a7b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a7b8:	881b      	ldrh	r3, [r3, #0]
 801a7ba:	b29b      	uxth	r3, r3
 801a7bc:	4a9f      	ldr	r2, [pc, #636]	@ (801aa3c <USB_EPStartXfer+0xaa8>)
 801a7be:	4313      	orrs	r3, r2
 801a7c0:	b29a      	uxth	r2, r3
 801a7c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a7c4:	801a      	strh	r2, [r3, #0]
 801a7c6:	e03a      	b.n	801a83e <USB_EPStartXfer+0x8aa>
 801a7c8:	1d7b      	adds	r3, r7, #5
 801a7ca:	33ff      	adds	r3, #255	@ 0xff
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	085b      	lsrs	r3, r3, #1
 801a7d0:	21f0      	movs	r1, #240	@ 0xf0
 801a7d2:	187a      	adds	r2, r7, r1
 801a7d4:	6013      	str	r3, [r2, #0]
 801a7d6:	1d7b      	adds	r3, r7, #5
 801a7d8:	33ff      	adds	r3, #255	@ 0xff
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	2201      	movs	r2, #1
 801a7de:	4013      	ands	r3, r2
 801a7e0:	d004      	beq.n	801a7ec <USB_EPStartXfer+0x858>
 801a7e2:	187b      	adds	r3, r7, r1
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	3301      	adds	r3, #1
 801a7e8:	187a      	adds	r2, r7, r1
 801a7ea:	6013      	str	r3, [r2, #0]
 801a7ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a7ee:	881b      	ldrh	r3, [r3, #0]
 801a7f0:	b29a      	uxth	r2, r3
 801a7f2:	23f0      	movs	r3, #240	@ 0xf0
 801a7f4:	18fb      	adds	r3, r7, r3
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	b29b      	uxth	r3, r3
 801a7fa:	029b      	lsls	r3, r3, #10
 801a7fc:	b29b      	uxth	r3, r3
 801a7fe:	4313      	orrs	r3, r2
 801a800:	b29a      	uxth	r2, r3
 801a802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a804:	801a      	strh	r2, [r3, #0]
 801a806:	e01a      	b.n	801a83e <USB_EPStartXfer+0x8aa>
 801a808:	683b      	ldr	r3, [r7, #0]
 801a80a:	785b      	ldrb	r3, [r3, #1]
 801a80c:	2b01      	cmp	r3, #1
 801a80e:	d116      	bne.n	801a83e <USB_EPStartXfer+0x8aa>
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	2250      	movs	r2, #80	@ 0x50
 801a814:	5a9b      	ldrh	r3, [r3, r2]
 801a816:	b29b      	uxth	r3, r3
 801a818:	001a      	movs	r2, r3
 801a81a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a81c:	189b      	adds	r3, r3, r2
 801a81e:	673b      	str	r3, [r7, #112]	@ 0x70
 801a820:	683b      	ldr	r3, [r7, #0]
 801a822:	781b      	ldrb	r3, [r3, #0]
 801a824:	00da      	lsls	r2, r3, #3
 801a826:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a828:	18d3      	adds	r3, r2, r3
 801a82a:	4a83      	ldr	r2, [pc, #524]	@ (801aa38 <USB_EPStartXfer+0xaa4>)
 801a82c:	4694      	mov	ip, r2
 801a82e:	4463      	add	r3, ip
 801a830:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a832:	1d7b      	adds	r3, r7, #5
 801a834:	33ff      	adds	r3, #255	@ 0xff
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	b29a      	uxth	r2, r3
 801a83a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a83c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a83e:	2076      	movs	r0, #118	@ 0x76
 801a840:	183b      	adds	r3, r7, r0
 801a842:	683a      	ldr	r2, [r7, #0]
 801a844:	8952      	ldrh	r2, [r2, #10]
 801a846:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a848:	683b      	ldr	r3, [r7, #0]
 801a84a:	6959      	ldr	r1, [r3, #20]
 801a84c:	1d7b      	adds	r3, r7, #5
 801a84e:	33ff      	adds	r3, #255	@ 0xff
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	b29c      	uxth	r4, r3
 801a854:	183b      	adds	r3, r7, r0
 801a856:	881a      	ldrh	r2, [r3, #0]
 801a858:	6878      	ldr	r0, [r7, #4]
 801a85a:	0023      	movs	r3, r4
 801a85c:	f000 fe0c 	bl	801b478 <USB_WritePMA>
 801a860:	e0ab      	b.n	801a9ba <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a862:	683b      	ldr	r3, [r7, #0]
 801a864:	785b      	ldrb	r3, [r3, #1]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d000      	beq.n	801a86c <USB_EPStartXfer+0x8d8>
 801a86a:	e070      	b.n	801a94e <USB_EPStartXfer+0x9ba>
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	2250      	movs	r2, #80	@ 0x50
 801a874:	5a9b      	ldrh	r3, [r3, r2]
 801a876:	b29b      	uxth	r3, r3
 801a878:	001a      	movs	r2, r3
 801a87a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a87c:	189b      	adds	r3, r3, r2
 801a87e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a880:	683b      	ldr	r3, [r7, #0]
 801a882:	781b      	ldrb	r3, [r3, #0]
 801a884:	00da      	lsls	r2, r3, #3
 801a886:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a888:	18d3      	adds	r3, r2, r3
 801a88a:	4a6d      	ldr	r2, [pc, #436]	@ (801aa40 <USB_EPStartXfer+0xaac>)
 801a88c:	4694      	mov	ip, r2
 801a88e:	4463      	add	r3, ip
 801a890:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a892:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a894:	881b      	ldrh	r3, [r3, #0]
 801a896:	b29b      	uxth	r3, r3
 801a898:	059b      	lsls	r3, r3, #22
 801a89a:	0d9b      	lsrs	r3, r3, #22
 801a89c:	b29a      	uxth	r2, r3
 801a89e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a8a0:	801a      	strh	r2, [r3, #0]
 801a8a2:	1d7b      	adds	r3, r7, #5
 801a8a4:	33ff      	adds	r3, #255	@ 0xff
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	2b3e      	cmp	r3, #62	@ 0x3e
 801a8aa:	d922      	bls.n	801a8f2 <USB_EPStartXfer+0x95e>
 801a8ac:	1d7b      	adds	r3, r7, #5
 801a8ae:	33ff      	adds	r3, #255	@ 0xff
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	095b      	lsrs	r3, r3, #5
 801a8b4:	21ec      	movs	r1, #236	@ 0xec
 801a8b6:	187a      	adds	r2, r7, r1
 801a8b8:	6013      	str	r3, [r2, #0]
 801a8ba:	1d7b      	adds	r3, r7, #5
 801a8bc:	33ff      	adds	r3, #255	@ 0xff
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	221f      	movs	r2, #31
 801a8c2:	4013      	ands	r3, r2
 801a8c4:	d104      	bne.n	801a8d0 <USB_EPStartXfer+0x93c>
 801a8c6:	187b      	adds	r3, r7, r1
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	3b01      	subs	r3, #1
 801a8cc:	187a      	adds	r2, r7, r1
 801a8ce:	6013      	str	r3, [r2, #0]
 801a8d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a8d2:	881b      	ldrh	r3, [r3, #0]
 801a8d4:	b29a      	uxth	r2, r3
 801a8d6:	23ec      	movs	r3, #236	@ 0xec
 801a8d8:	18fb      	adds	r3, r7, r3
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	b29b      	uxth	r3, r3
 801a8de:	029b      	lsls	r3, r3, #10
 801a8e0:	b29b      	uxth	r3, r3
 801a8e2:	4313      	orrs	r3, r2
 801a8e4:	b29b      	uxth	r3, r3
 801a8e6:	4a55      	ldr	r2, [pc, #340]	@ (801aa3c <USB_EPStartXfer+0xaa8>)
 801a8e8:	4313      	orrs	r3, r2
 801a8ea:	b29a      	uxth	r2, r3
 801a8ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a8ee:	801a      	strh	r2, [r3, #0]
 801a8f0:	e052      	b.n	801a998 <USB_EPStartXfer+0xa04>
 801a8f2:	1d7b      	adds	r3, r7, #5
 801a8f4:	33ff      	adds	r3, #255	@ 0xff
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d108      	bne.n	801a90e <USB_EPStartXfer+0x97a>
 801a8fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a8fe:	881b      	ldrh	r3, [r3, #0]
 801a900:	b29b      	uxth	r3, r3
 801a902:	4a4e      	ldr	r2, [pc, #312]	@ (801aa3c <USB_EPStartXfer+0xaa8>)
 801a904:	4313      	orrs	r3, r2
 801a906:	b29a      	uxth	r2, r3
 801a908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a90a:	801a      	strh	r2, [r3, #0]
 801a90c:	e044      	b.n	801a998 <USB_EPStartXfer+0xa04>
 801a90e:	1d7b      	adds	r3, r7, #5
 801a910:	33ff      	adds	r3, #255	@ 0xff
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	085b      	lsrs	r3, r3, #1
 801a916:	21ec      	movs	r1, #236	@ 0xec
 801a918:	187a      	adds	r2, r7, r1
 801a91a:	6013      	str	r3, [r2, #0]
 801a91c:	1d7b      	adds	r3, r7, #5
 801a91e:	33ff      	adds	r3, #255	@ 0xff
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	2201      	movs	r2, #1
 801a924:	4013      	ands	r3, r2
 801a926:	d004      	beq.n	801a932 <USB_EPStartXfer+0x99e>
 801a928:	187b      	adds	r3, r7, r1
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	3301      	adds	r3, #1
 801a92e:	187a      	adds	r2, r7, r1
 801a930:	6013      	str	r3, [r2, #0]
 801a932:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a934:	881b      	ldrh	r3, [r3, #0]
 801a936:	b29a      	uxth	r2, r3
 801a938:	23ec      	movs	r3, #236	@ 0xec
 801a93a:	18fb      	adds	r3, r7, r3
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	b29b      	uxth	r3, r3
 801a940:	029b      	lsls	r3, r3, #10
 801a942:	b29b      	uxth	r3, r3
 801a944:	4313      	orrs	r3, r2
 801a946:	b29a      	uxth	r2, r3
 801a948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a94a:	801a      	strh	r2, [r3, #0]
 801a94c:	e024      	b.n	801a998 <USB_EPStartXfer+0xa04>
 801a94e:	683b      	ldr	r3, [r7, #0]
 801a950:	785b      	ldrb	r3, [r3, #1]
 801a952:	2b01      	cmp	r3, #1
 801a954:	d120      	bne.n	801a998 <USB_EPStartXfer+0xa04>
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	2184      	movs	r1, #132	@ 0x84
 801a95a:	187a      	adds	r2, r7, r1
 801a95c:	6013      	str	r3, [r2, #0]
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	2250      	movs	r2, #80	@ 0x50
 801a962:	5a9b      	ldrh	r3, [r3, r2]
 801a964:	b29b      	uxth	r3, r3
 801a966:	001a      	movs	r2, r3
 801a968:	187b      	adds	r3, r7, r1
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	189b      	adds	r3, r3, r2
 801a96e:	187a      	adds	r2, r7, r1
 801a970:	6013      	str	r3, [r2, #0]
 801a972:	683b      	ldr	r3, [r7, #0]
 801a974:	781b      	ldrb	r3, [r3, #0]
 801a976:	00da      	lsls	r2, r3, #3
 801a978:	187b      	adds	r3, r7, r1
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	18d3      	adds	r3, r2, r3
 801a97e:	4a30      	ldr	r2, [pc, #192]	@ (801aa40 <USB_EPStartXfer+0xaac>)
 801a980:	4694      	mov	ip, r2
 801a982:	4463      	add	r3, ip
 801a984:	2180      	movs	r1, #128	@ 0x80
 801a986:	187a      	adds	r2, r7, r1
 801a988:	6013      	str	r3, [r2, #0]
 801a98a:	1d7b      	adds	r3, r7, #5
 801a98c:	33ff      	adds	r3, #255	@ 0xff
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	b29a      	uxth	r2, r3
 801a992:	187b      	adds	r3, r7, r1
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a998:	2076      	movs	r0, #118	@ 0x76
 801a99a:	183b      	adds	r3, r7, r0
 801a99c:	683a      	ldr	r2, [r7, #0]
 801a99e:	8912      	ldrh	r2, [r2, #8]
 801a9a0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a9a2:	683b      	ldr	r3, [r7, #0]
 801a9a4:	6959      	ldr	r1, [r3, #20]
 801a9a6:	1d7b      	adds	r3, r7, #5
 801a9a8:	33ff      	adds	r3, #255	@ 0xff
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	b29c      	uxth	r4, r3
 801a9ae:	183b      	adds	r3, r7, r0
 801a9b0:	881a      	ldrh	r2, [r3, #0]
 801a9b2:	6878      	ldr	r0, [r7, #4]
 801a9b4:	0023      	movs	r3, r4
 801a9b6:	f000 fd5f 	bl	801b478 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a9ba:	687a      	ldr	r2, [r7, #4]
 801a9bc:	683b      	ldr	r3, [r7, #0]
 801a9be:	781b      	ldrb	r3, [r3, #0]
 801a9c0:	009b      	lsls	r3, r3, #2
 801a9c2:	18d3      	adds	r3, r2, r3
 801a9c4:	881b      	ldrh	r3, [r3, #0]
 801a9c6:	b29a      	uxth	r2, r3
 801a9c8:	200a      	movs	r0, #10
 801a9ca:	183b      	adds	r3, r7, r0
 801a9cc:	491d      	ldr	r1, [pc, #116]	@ (801aa44 <USB_EPStartXfer+0xab0>)
 801a9ce:	400a      	ands	r2, r1
 801a9d0:	801a      	strh	r2, [r3, #0]
 801a9d2:	183b      	adds	r3, r7, r0
 801a9d4:	183a      	adds	r2, r7, r0
 801a9d6:	8812      	ldrh	r2, [r2, #0]
 801a9d8:	2110      	movs	r1, #16
 801a9da:	404a      	eors	r2, r1
 801a9dc:	801a      	strh	r2, [r3, #0]
 801a9de:	183b      	adds	r3, r7, r0
 801a9e0:	183a      	adds	r2, r7, r0
 801a9e2:	8812      	ldrh	r2, [r2, #0]
 801a9e4:	2120      	movs	r1, #32
 801a9e6:	404a      	eors	r2, r1
 801a9e8:	801a      	strh	r2, [r3, #0]
 801a9ea:	687a      	ldr	r2, [r7, #4]
 801a9ec:	683b      	ldr	r3, [r7, #0]
 801a9ee:	781b      	ldrb	r3, [r3, #0]
 801a9f0:	009b      	lsls	r3, r3, #2
 801a9f2:	18d3      	adds	r3, r2, r3
 801a9f4:	183a      	adds	r2, r7, r0
 801a9f6:	8812      	ldrh	r2, [r2, #0]
 801a9f8:	4913      	ldr	r1, [pc, #76]	@ (801aa48 <USB_EPStartXfer+0xab4>)
 801a9fa:	430a      	orrs	r2, r1
 801a9fc:	b292      	uxth	r2, r2
 801a9fe:	801a      	strh	r2, [r3, #0]
 801aa00:	f000 fbf4 	bl	801b1ec <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801aa04:	683b      	ldr	r3, [r7, #0]
 801aa06:	7b1b      	ldrb	r3, [r3, #12]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d000      	beq.n	801aa0e <USB_EPStartXfer+0xa7a>
 801aa0c:	e0a9      	b.n	801ab62 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801aa0e:	683b      	ldr	r3, [r7, #0]
 801aa10:	699a      	ldr	r2, [r3, #24]
 801aa12:	683b      	ldr	r3, [r7, #0]
 801aa14:	691b      	ldr	r3, [r3, #16]
 801aa16:	429a      	cmp	r2, r3
 801aa18:	d918      	bls.n	801aa4c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	691b      	ldr	r3, [r3, #16]
 801aa1e:	1d7a      	adds	r2, r7, #5
 801aa20:	32ff      	adds	r2, #255	@ 0xff
 801aa22:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801aa24:	683b      	ldr	r3, [r7, #0]
 801aa26:	699a      	ldr	r2, [r3, #24]
 801aa28:	1d7b      	adds	r3, r7, #5
 801aa2a:	33ff      	adds	r3, #255	@ 0xff
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	1ad2      	subs	r2, r2, r3
 801aa30:	683b      	ldr	r3, [r7, #0]
 801aa32:	619a      	str	r2, [r3, #24]
 801aa34:	e012      	b.n	801aa5c <USB_EPStartXfer+0xac8>
 801aa36:	46c0      	nop			@ (mov r8, r8)
 801aa38:	00000406 	.word	0x00000406
 801aa3c:	ffff8000 	.word	0xffff8000
 801aa40:	00000402 	.word	0x00000402
 801aa44:	ffff8fbf 	.word	0xffff8fbf
 801aa48:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	699b      	ldr	r3, [r3, #24]
 801aa50:	1d7a      	adds	r2, r7, #5
 801aa52:	32ff      	adds	r2, #255	@ 0xff
 801aa54:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801aa56:	683b      	ldr	r3, [r7, #0]
 801aa58:	2200      	movs	r2, #0
 801aa5a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	2190      	movs	r1, #144	@ 0x90
 801aa60:	187a      	adds	r2, r7, r1
 801aa62:	6013      	str	r3, [r2, #0]
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	2250      	movs	r2, #80	@ 0x50
 801aa68:	5a9b      	ldrh	r3, [r3, r2]
 801aa6a:	b29b      	uxth	r3, r3
 801aa6c:	001a      	movs	r2, r3
 801aa6e:	187b      	adds	r3, r7, r1
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	189b      	adds	r3, r3, r2
 801aa74:	187a      	adds	r2, r7, r1
 801aa76:	6013      	str	r3, [r2, #0]
 801aa78:	683b      	ldr	r3, [r7, #0]
 801aa7a:	781b      	ldrb	r3, [r3, #0]
 801aa7c:	00da      	lsls	r2, r3, #3
 801aa7e:	187b      	adds	r3, r7, r1
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	18d3      	adds	r3, r2, r3
 801aa84:	4acf      	ldr	r2, [pc, #828]	@ (801adc4 <USB_EPStartXfer+0xe30>)
 801aa86:	4694      	mov	ip, r2
 801aa88:	4463      	add	r3, ip
 801aa8a:	218c      	movs	r1, #140	@ 0x8c
 801aa8c:	187a      	adds	r2, r7, r1
 801aa8e:	6013      	str	r3, [r2, #0]
 801aa90:	187b      	adds	r3, r7, r1
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	881b      	ldrh	r3, [r3, #0]
 801aa96:	b29b      	uxth	r3, r3
 801aa98:	059b      	lsls	r3, r3, #22
 801aa9a:	0d9b      	lsrs	r3, r3, #22
 801aa9c:	b29a      	uxth	r2, r3
 801aa9e:	187b      	adds	r3, r7, r1
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	801a      	strh	r2, [r3, #0]
 801aaa4:	1d7b      	adds	r3, r7, #5
 801aaa6:	33ff      	adds	r3, #255	@ 0xff
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	2b3e      	cmp	r3, #62	@ 0x3e
 801aaac:	d925      	bls.n	801aafa <USB_EPStartXfer+0xb66>
 801aaae:	1d7b      	adds	r3, r7, #5
 801aab0:	33ff      	adds	r3, #255	@ 0xff
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	095b      	lsrs	r3, r3, #5
 801aab6:	21e8      	movs	r1, #232	@ 0xe8
 801aab8:	187a      	adds	r2, r7, r1
 801aaba:	6013      	str	r3, [r2, #0]
 801aabc:	1d7b      	adds	r3, r7, #5
 801aabe:	33ff      	adds	r3, #255	@ 0xff
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	221f      	movs	r2, #31
 801aac4:	4013      	ands	r3, r2
 801aac6:	d104      	bne.n	801aad2 <USB_EPStartXfer+0xb3e>
 801aac8:	187b      	adds	r3, r7, r1
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	3b01      	subs	r3, #1
 801aace:	187a      	adds	r2, r7, r1
 801aad0:	6013      	str	r3, [r2, #0]
 801aad2:	218c      	movs	r1, #140	@ 0x8c
 801aad4:	187b      	adds	r3, r7, r1
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	881b      	ldrh	r3, [r3, #0]
 801aada:	b29a      	uxth	r2, r3
 801aadc:	23e8      	movs	r3, #232	@ 0xe8
 801aade:	18fb      	adds	r3, r7, r3
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	b29b      	uxth	r3, r3
 801aae4:	029b      	lsls	r3, r3, #10
 801aae6:	b29b      	uxth	r3, r3
 801aae8:	4313      	orrs	r3, r2
 801aaea:	b29b      	uxth	r3, r3
 801aaec:	4ab6      	ldr	r2, [pc, #728]	@ (801adc8 <USB_EPStartXfer+0xe34>)
 801aaee:	4313      	orrs	r3, r2
 801aaf0:	b29a      	uxth	r2, r3
 801aaf2:	187b      	adds	r3, r7, r1
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	801a      	strh	r2, [r3, #0]
 801aaf8:	e353      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
 801aafa:	1d7b      	adds	r3, r7, #5
 801aafc:	33ff      	adds	r3, #255	@ 0xff
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d10b      	bne.n	801ab1c <USB_EPStartXfer+0xb88>
 801ab04:	218c      	movs	r1, #140	@ 0x8c
 801ab06:	187b      	adds	r3, r7, r1
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	881b      	ldrh	r3, [r3, #0]
 801ab0c:	b29b      	uxth	r3, r3
 801ab0e:	4aae      	ldr	r2, [pc, #696]	@ (801adc8 <USB_EPStartXfer+0xe34>)
 801ab10:	4313      	orrs	r3, r2
 801ab12:	b29a      	uxth	r2, r3
 801ab14:	187b      	adds	r3, r7, r1
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	801a      	strh	r2, [r3, #0]
 801ab1a:	e342      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
 801ab1c:	1d7b      	adds	r3, r7, #5
 801ab1e:	33ff      	adds	r3, #255	@ 0xff
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	085b      	lsrs	r3, r3, #1
 801ab24:	21e8      	movs	r1, #232	@ 0xe8
 801ab26:	187a      	adds	r2, r7, r1
 801ab28:	6013      	str	r3, [r2, #0]
 801ab2a:	1d7b      	adds	r3, r7, #5
 801ab2c:	33ff      	adds	r3, #255	@ 0xff
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	2201      	movs	r2, #1
 801ab32:	4013      	ands	r3, r2
 801ab34:	d004      	beq.n	801ab40 <USB_EPStartXfer+0xbac>
 801ab36:	187b      	adds	r3, r7, r1
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	3301      	adds	r3, #1
 801ab3c:	187a      	adds	r2, r7, r1
 801ab3e:	6013      	str	r3, [r2, #0]
 801ab40:	218c      	movs	r1, #140	@ 0x8c
 801ab42:	187b      	adds	r3, r7, r1
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	881b      	ldrh	r3, [r3, #0]
 801ab48:	b29a      	uxth	r2, r3
 801ab4a:	23e8      	movs	r3, #232	@ 0xe8
 801ab4c:	18fb      	adds	r3, r7, r3
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	b29b      	uxth	r3, r3
 801ab52:	029b      	lsls	r3, r3, #10
 801ab54:	b29b      	uxth	r3, r3
 801ab56:	4313      	orrs	r3, r2
 801ab58:	b29a      	uxth	r2, r3
 801ab5a:	187b      	adds	r3, r7, r1
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	801a      	strh	r2, [r3, #0]
 801ab60:	e31f      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801ab62:	683b      	ldr	r3, [r7, #0]
 801ab64:	78db      	ldrb	r3, [r3, #3]
 801ab66:	2b02      	cmp	r3, #2
 801ab68:	d000      	beq.n	801ab6c <USB_EPStartXfer+0xbd8>
 801ab6a:	e191      	b.n	801ae90 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801ab6c:	683b      	ldr	r3, [r7, #0]
 801ab6e:	785b      	ldrb	r3, [r3, #1]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d000      	beq.n	801ab76 <USB_EPStartXfer+0xbe2>
 801ab74:	e07c      	b.n	801ac70 <USB_EPStartXfer+0xcdc>
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	21ac      	movs	r1, #172	@ 0xac
 801ab7a:	187a      	adds	r2, r7, r1
 801ab7c:	6013      	str	r3, [r2, #0]
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	2250      	movs	r2, #80	@ 0x50
 801ab82:	5a9b      	ldrh	r3, [r3, r2]
 801ab84:	b29b      	uxth	r3, r3
 801ab86:	001a      	movs	r2, r3
 801ab88:	187b      	adds	r3, r7, r1
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	189b      	adds	r3, r3, r2
 801ab8e:	187a      	adds	r2, r7, r1
 801ab90:	6013      	str	r3, [r2, #0]
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	781b      	ldrb	r3, [r3, #0]
 801ab96:	00da      	lsls	r2, r3, #3
 801ab98:	187b      	adds	r3, r7, r1
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	18d3      	adds	r3, r2, r3
 801ab9e:	4a8b      	ldr	r2, [pc, #556]	@ (801adcc <USB_EPStartXfer+0xe38>)
 801aba0:	4694      	mov	ip, r2
 801aba2:	4463      	add	r3, ip
 801aba4:	21a8      	movs	r1, #168	@ 0xa8
 801aba6:	187a      	adds	r2, r7, r1
 801aba8:	6013      	str	r3, [r2, #0]
 801abaa:	187b      	adds	r3, r7, r1
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	881b      	ldrh	r3, [r3, #0]
 801abb0:	b29b      	uxth	r3, r3
 801abb2:	059b      	lsls	r3, r3, #22
 801abb4:	0d9b      	lsrs	r3, r3, #22
 801abb6:	b29a      	uxth	r2, r3
 801abb8:	187b      	adds	r3, r7, r1
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	801a      	strh	r2, [r3, #0]
 801abbe:	683b      	ldr	r3, [r7, #0]
 801abc0:	691b      	ldr	r3, [r3, #16]
 801abc2:	2b3e      	cmp	r3, #62	@ 0x3e
 801abc4:	d923      	bls.n	801ac0e <USB_EPStartXfer+0xc7a>
 801abc6:	683b      	ldr	r3, [r7, #0]
 801abc8:	691b      	ldr	r3, [r3, #16]
 801abca:	095b      	lsrs	r3, r3, #5
 801abcc:	21e4      	movs	r1, #228	@ 0xe4
 801abce:	187a      	adds	r2, r7, r1
 801abd0:	6013      	str	r3, [r2, #0]
 801abd2:	683b      	ldr	r3, [r7, #0]
 801abd4:	691b      	ldr	r3, [r3, #16]
 801abd6:	221f      	movs	r2, #31
 801abd8:	4013      	ands	r3, r2
 801abda:	d104      	bne.n	801abe6 <USB_EPStartXfer+0xc52>
 801abdc:	187b      	adds	r3, r7, r1
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	3b01      	subs	r3, #1
 801abe2:	187a      	adds	r2, r7, r1
 801abe4:	6013      	str	r3, [r2, #0]
 801abe6:	21a8      	movs	r1, #168	@ 0xa8
 801abe8:	187b      	adds	r3, r7, r1
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	881b      	ldrh	r3, [r3, #0]
 801abee:	b29a      	uxth	r2, r3
 801abf0:	23e4      	movs	r3, #228	@ 0xe4
 801abf2:	18fb      	adds	r3, r7, r3
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	b29b      	uxth	r3, r3
 801abf8:	029b      	lsls	r3, r3, #10
 801abfa:	b29b      	uxth	r3, r3
 801abfc:	4313      	orrs	r3, r2
 801abfe:	b29b      	uxth	r3, r3
 801ac00:	4a71      	ldr	r2, [pc, #452]	@ (801adc8 <USB_EPStartXfer+0xe34>)
 801ac02:	4313      	orrs	r3, r2
 801ac04:	b29a      	uxth	r2, r3
 801ac06:	187b      	adds	r3, r7, r1
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	801a      	strh	r2, [r3, #0]
 801ac0c:	e054      	b.n	801acb8 <USB_EPStartXfer+0xd24>
 801ac0e:	683b      	ldr	r3, [r7, #0]
 801ac10:	691b      	ldr	r3, [r3, #16]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d10b      	bne.n	801ac2e <USB_EPStartXfer+0xc9a>
 801ac16:	21a8      	movs	r1, #168	@ 0xa8
 801ac18:	187b      	adds	r3, r7, r1
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	881b      	ldrh	r3, [r3, #0]
 801ac1e:	b29b      	uxth	r3, r3
 801ac20:	4a69      	ldr	r2, [pc, #420]	@ (801adc8 <USB_EPStartXfer+0xe34>)
 801ac22:	4313      	orrs	r3, r2
 801ac24:	b29a      	uxth	r2, r3
 801ac26:	187b      	adds	r3, r7, r1
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	801a      	strh	r2, [r3, #0]
 801ac2c:	e044      	b.n	801acb8 <USB_EPStartXfer+0xd24>
 801ac2e:	683b      	ldr	r3, [r7, #0]
 801ac30:	691b      	ldr	r3, [r3, #16]
 801ac32:	085b      	lsrs	r3, r3, #1
 801ac34:	21e4      	movs	r1, #228	@ 0xe4
 801ac36:	187a      	adds	r2, r7, r1
 801ac38:	6013      	str	r3, [r2, #0]
 801ac3a:	683b      	ldr	r3, [r7, #0]
 801ac3c:	691b      	ldr	r3, [r3, #16]
 801ac3e:	2201      	movs	r2, #1
 801ac40:	4013      	ands	r3, r2
 801ac42:	d004      	beq.n	801ac4e <USB_EPStartXfer+0xcba>
 801ac44:	187b      	adds	r3, r7, r1
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	3301      	adds	r3, #1
 801ac4a:	187a      	adds	r2, r7, r1
 801ac4c:	6013      	str	r3, [r2, #0]
 801ac4e:	21a8      	movs	r1, #168	@ 0xa8
 801ac50:	187b      	adds	r3, r7, r1
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	881b      	ldrh	r3, [r3, #0]
 801ac56:	b29a      	uxth	r2, r3
 801ac58:	23e4      	movs	r3, #228	@ 0xe4
 801ac5a:	18fb      	adds	r3, r7, r3
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	b29b      	uxth	r3, r3
 801ac60:	029b      	lsls	r3, r3, #10
 801ac62:	b29b      	uxth	r3, r3
 801ac64:	4313      	orrs	r3, r2
 801ac66:	b29a      	uxth	r2, r3
 801ac68:	187b      	adds	r3, r7, r1
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	801a      	strh	r2, [r3, #0]
 801ac6e:	e023      	b.n	801acb8 <USB_EPStartXfer+0xd24>
 801ac70:	683b      	ldr	r3, [r7, #0]
 801ac72:	785b      	ldrb	r3, [r3, #1]
 801ac74:	2b01      	cmp	r3, #1
 801ac76:	d11f      	bne.n	801acb8 <USB_EPStartXfer+0xd24>
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	21b4      	movs	r1, #180	@ 0xb4
 801ac7c:	187a      	adds	r2, r7, r1
 801ac7e:	6013      	str	r3, [r2, #0]
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	2250      	movs	r2, #80	@ 0x50
 801ac84:	5a9b      	ldrh	r3, [r3, r2]
 801ac86:	b29b      	uxth	r3, r3
 801ac88:	001a      	movs	r2, r3
 801ac8a:	187b      	adds	r3, r7, r1
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	189b      	adds	r3, r3, r2
 801ac90:	187a      	adds	r2, r7, r1
 801ac92:	6013      	str	r3, [r2, #0]
 801ac94:	683b      	ldr	r3, [r7, #0]
 801ac96:	781b      	ldrb	r3, [r3, #0]
 801ac98:	00da      	lsls	r2, r3, #3
 801ac9a:	187b      	adds	r3, r7, r1
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	18d3      	adds	r3, r2, r3
 801aca0:	4a4a      	ldr	r2, [pc, #296]	@ (801adcc <USB_EPStartXfer+0xe38>)
 801aca2:	4694      	mov	ip, r2
 801aca4:	4463      	add	r3, ip
 801aca6:	21b0      	movs	r1, #176	@ 0xb0
 801aca8:	187a      	adds	r2, r7, r1
 801acaa:	6013      	str	r3, [r2, #0]
 801acac:	683b      	ldr	r3, [r7, #0]
 801acae:	691b      	ldr	r3, [r3, #16]
 801acb0:	b29a      	uxth	r2, r3
 801acb2:	187b      	adds	r3, r7, r1
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	801a      	strh	r2, [r3, #0]
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	22a4      	movs	r2, #164	@ 0xa4
 801acbc:	18ba      	adds	r2, r7, r2
 801acbe:	6013      	str	r3, [r2, #0]
 801acc0:	683b      	ldr	r3, [r7, #0]
 801acc2:	785b      	ldrb	r3, [r3, #1]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d000      	beq.n	801acca <USB_EPStartXfer+0xd36>
 801acc8:	e082      	b.n	801add0 <USB_EPStartXfer+0xe3c>
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	219c      	movs	r1, #156	@ 0x9c
 801acce:	187a      	adds	r2, r7, r1
 801acd0:	6013      	str	r3, [r2, #0]
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	2250      	movs	r2, #80	@ 0x50
 801acd6:	5a9b      	ldrh	r3, [r3, r2]
 801acd8:	b29b      	uxth	r3, r3
 801acda:	001a      	movs	r2, r3
 801acdc:	187b      	adds	r3, r7, r1
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	189b      	adds	r3, r3, r2
 801ace2:	187a      	adds	r2, r7, r1
 801ace4:	6013      	str	r3, [r2, #0]
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	781b      	ldrb	r3, [r3, #0]
 801acea:	00da      	lsls	r2, r3, #3
 801acec:	187b      	adds	r3, r7, r1
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	18d3      	adds	r3, r2, r3
 801acf2:	4a34      	ldr	r2, [pc, #208]	@ (801adc4 <USB_EPStartXfer+0xe30>)
 801acf4:	4694      	mov	ip, r2
 801acf6:	4463      	add	r3, ip
 801acf8:	2198      	movs	r1, #152	@ 0x98
 801acfa:	187a      	adds	r2, r7, r1
 801acfc:	6013      	str	r3, [r2, #0]
 801acfe:	187b      	adds	r3, r7, r1
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	881b      	ldrh	r3, [r3, #0]
 801ad04:	b29b      	uxth	r3, r3
 801ad06:	059b      	lsls	r3, r3, #22
 801ad08:	0d9b      	lsrs	r3, r3, #22
 801ad0a:	b29a      	uxth	r2, r3
 801ad0c:	187b      	adds	r3, r7, r1
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	801a      	strh	r2, [r3, #0]
 801ad12:	683b      	ldr	r3, [r7, #0]
 801ad14:	691b      	ldr	r3, [r3, #16]
 801ad16:	2b3e      	cmp	r3, #62	@ 0x3e
 801ad18:	d923      	bls.n	801ad62 <USB_EPStartXfer+0xdce>
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	691b      	ldr	r3, [r3, #16]
 801ad1e:	095b      	lsrs	r3, r3, #5
 801ad20:	21e0      	movs	r1, #224	@ 0xe0
 801ad22:	187a      	adds	r2, r7, r1
 801ad24:	6013      	str	r3, [r2, #0]
 801ad26:	683b      	ldr	r3, [r7, #0]
 801ad28:	691b      	ldr	r3, [r3, #16]
 801ad2a:	221f      	movs	r2, #31
 801ad2c:	4013      	ands	r3, r2
 801ad2e:	d104      	bne.n	801ad3a <USB_EPStartXfer+0xda6>
 801ad30:	187b      	adds	r3, r7, r1
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	3b01      	subs	r3, #1
 801ad36:	187a      	adds	r2, r7, r1
 801ad38:	6013      	str	r3, [r2, #0]
 801ad3a:	2198      	movs	r1, #152	@ 0x98
 801ad3c:	187b      	adds	r3, r7, r1
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	881b      	ldrh	r3, [r3, #0]
 801ad42:	b29a      	uxth	r2, r3
 801ad44:	23e0      	movs	r3, #224	@ 0xe0
 801ad46:	18fb      	adds	r3, r7, r3
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	029b      	lsls	r3, r3, #10
 801ad4e:	b29b      	uxth	r3, r3
 801ad50:	4313      	orrs	r3, r2
 801ad52:	b29b      	uxth	r3, r3
 801ad54:	4a1c      	ldr	r2, [pc, #112]	@ (801adc8 <USB_EPStartXfer+0xe34>)
 801ad56:	4313      	orrs	r3, r2
 801ad58:	b29a      	uxth	r2, r3
 801ad5a:	187b      	adds	r3, r7, r1
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	801a      	strh	r2, [r3, #0]
 801ad60:	e057      	b.n	801ae12 <USB_EPStartXfer+0xe7e>
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	691b      	ldr	r3, [r3, #16]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d10b      	bne.n	801ad82 <USB_EPStartXfer+0xdee>
 801ad6a:	2198      	movs	r1, #152	@ 0x98
 801ad6c:	187b      	adds	r3, r7, r1
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	881b      	ldrh	r3, [r3, #0]
 801ad72:	b29b      	uxth	r3, r3
 801ad74:	4a14      	ldr	r2, [pc, #80]	@ (801adc8 <USB_EPStartXfer+0xe34>)
 801ad76:	4313      	orrs	r3, r2
 801ad78:	b29a      	uxth	r2, r3
 801ad7a:	187b      	adds	r3, r7, r1
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	801a      	strh	r2, [r3, #0]
 801ad80:	e047      	b.n	801ae12 <USB_EPStartXfer+0xe7e>
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	691b      	ldr	r3, [r3, #16]
 801ad86:	085b      	lsrs	r3, r3, #1
 801ad88:	21e0      	movs	r1, #224	@ 0xe0
 801ad8a:	187a      	adds	r2, r7, r1
 801ad8c:	6013      	str	r3, [r2, #0]
 801ad8e:	683b      	ldr	r3, [r7, #0]
 801ad90:	691b      	ldr	r3, [r3, #16]
 801ad92:	2201      	movs	r2, #1
 801ad94:	4013      	ands	r3, r2
 801ad96:	d004      	beq.n	801ada2 <USB_EPStartXfer+0xe0e>
 801ad98:	187b      	adds	r3, r7, r1
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	3301      	adds	r3, #1
 801ad9e:	187a      	adds	r2, r7, r1
 801ada0:	6013      	str	r3, [r2, #0]
 801ada2:	2198      	movs	r1, #152	@ 0x98
 801ada4:	187b      	adds	r3, r7, r1
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	881b      	ldrh	r3, [r3, #0]
 801adaa:	b29a      	uxth	r2, r3
 801adac:	23e0      	movs	r3, #224	@ 0xe0
 801adae:	18fb      	adds	r3, r7, r3
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	b29b      	uxth	r3, r3
 801adb4:	029b      	lsls	r3, r3, #10
 801adb6:	b29b      	uxth	r3, r3
 801adb8:	4313      	orrs	r3, r2
 801adba:	b29a      	uxth	r2, r3
 801adbc:	187b      	adds	r3, r7, r1
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	801a      	strh	r2, [r3, #0]
 801adc2:	e026      	b.n	801ae12 <USB_EPStartXfer+0xe7e>
 801adc4:	00000406 	.word	0x00000406
 801adc8:	ffff8000 	.word	0xffff8000
 801adcc:	00000402 	.word	0x00000402
 801add0:	683b      	ldr	r3, [r7, #0]
 801add2:	785b      	ldrb	r3, [r3, #1]
 801add4:	2b01      	cmp	r3, #1
 801add6:	d11c      	bne.n	801ae12 <USB_EPStartXfer+0xe7e>
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	2250      	movs	r2, #80	@ 0x50
 801addc:	5a9b      	ldrh	r3, [r3, r2]
 801adde:	b29b      	uxth	r3, r3
 801ade0:	001a      	movs	r2, r3
 801ade2:	21a4      	movs	r1, #164	@ 0xa4
 801ade4:	187b      	adds	r3, r7, r1
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	189b      	adds	r3, r3, r2
 801adea:	187a      	adds	r2, r7, r1
 801adec:	6013      	str	r3, [r2, #0]
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	781b      	ldrb	r3, [r3, #0]
 801adf2:	00da      	lsls	r2, r3, #3
 801adf4:	187b      	adds	r3, r7, r1
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	18d3      	adds	r3, r2, r3
 801adfa:	4ad2      	ldr	r2, [pc, #840]	@ (801b144 <USB_EPStartXfer+0x11b0>)
 801adfc:	4694      	mov	ip, r2
 801adfe:	4463      	add	r3, ip
 801ae00:	21a0      	movs	r1, #160	@ 0xa0
 801ae02:	187a      	adds	r2, r7, r1
 801ae04:	6013      	str	r3, [r2, #0]
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	691b      	ldr	r3, [r3, #16]
 801ae0a:	b29a      	uxth	r2, r3
 801ae0c:	187b      	adds	r3, r7, r1
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801ae12:	683b      	ldr	r3, [r7, #0]
 801ae14:	69db      	ldr	r3, [r3, #28]
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d100      	bne.n	801ae1c <USB_EPStartXfer+0xe88>
 801ae1a:	e1c2      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801ae1c:	687a      	ldr	r2, [r7, #4]
 801ae1e:	683b      	ldr	r3, [r7, #0]
 801ae20:	781b      	ldrb	r3, [r3, #0]
 801ae22:	009b      	lsls	r3, r3, #2
 801ae24:	18d2      	adds	r2, r2, r3
 801ae26:	2196      	movs	r1, #150	@ 0x96
 801ae28:	187b      	adds	r3, r7, r1
 801ae2a:	8812      	ldrh	r2, [r2, #0]
 801ae2c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ae2e:	187b      	adds	r3, r7, r1
 801ae30:	881a      	ldrh	r2, [r3, #0]
 801ae32:	2380      	movs	r3, #128	@ 0x80
 801ae34:	01db      	lsls	r3, r3, #7
 801ae36:	4013      	ands	r3, r2
 801ae38:	d004      	beq.n	801ae44 <USB_EPStartXfer+0xeb0>
 801ae3a:	187b      	adds	r3, r7, r1
 801ae3c:	881b      	ldrh	r3, [r3, #0]
 801ae3e:	2240      	movs	r2, #64	@ 0x40
 801ae40:	4013      	ands	r3, r2
 801ae42:	d10d      	bne.n	801ae60 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801ae44:	2196      	movs	r1, #150	@ 0x96
 801ae46:	187b      	adds	r3, r7, r1
 801ae48:	881a      	ldrh	r2, [r3, #0]
 801ae4a:	2380      	movs	r3, #128	@ 0x80
 801ae4c:	01db      	lsls	r3, r3, #7
 801ae4e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ae50:	d000      	beq.n	801ae54 <USB_EPStartXfer+0xec0>
 801ae52:	e1a6      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801ae54:	187b      	adds	r3, r7, r1
 801ae56:	881b      	ldrh	r3, [r3, #0]
 801ae58:	2240      	movs	r2, #64	@ 0x40
 801ae5a:	4013      	ands	r3, r2
 801ae5c:	d000      	beq.n	801ae60 <USB_EPStartXfer+0xecc>
 801ae5e:	e1a0      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801ae60:	687a      	ldr	r2, [r7, #4]
 801ae62:	683b      	ldr	r3, [r7, #0]
 801ae64:	781b      	ldrb	r3, [r3, #0]
 801ae66:	009b      	lsls	r3, r3, #2
 801ae68:	18d3      	adds	r3, r2, r3
 801ae6a:	881b      	ldrh	r3, [r3, #0]
 801ae6c:	b29a      	uxth	r2, r3
 801ae6e:	2094      	movs	r0, #148	@ 0x94
 801ae70:	183b      	adds	r3, r7, r0
 801ae72:	49b5      	ldr	r1, [pc, #724]	@ (801b148 <USB_EPStartXfer+0x11b4>)
 801ae74:	400a      	ands	r2, r1
 801ae76:	801a      	strh	r2, [r3, #0]
 801ae78:	687a      	ldr	r2, [r7, #4]
 801ae7a:	683b      	ldr	r3, [r7, #0]
 801ae7c:	781b      	ldrb	r3, [r3, #0]
 801ae7e:	009b      	lsls	r3, r3, #2
 801ae80:	18d3      	adds	r3, r2, r3
 801ae82:	183a      	adds	r2, r7, r0
 801ae84:	8812      	ldrh	r2, [r2, #0]
 801ae86:	49b1      	ldr	r1, [pc, #708]	@ (801b14c <USB_EPStartXfer+0x11b8>)
 801ae88:	430a      	orrs	r2, r1
 801ae8a:	b292      	uxth	r2, r2
 801ae8c:	801a      	strh	r2, [r3, #0]
 801ae8e:	e188      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801ae90:	683b      	ldr	r3, [r7, #0]
 801ae92:	78db      	ldrb	r3, [r3, #3]
 801ae94:	2b01      	cmp	r3, #1
 801ae96:	d000      	beq.n	801ae9a <USB_EPStartXfer+0xf06>
 801ae98:	e181      	b.n	801b19e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801ae9a:	683b      	ldr	r3, [r7, #0]
 801ae9c:	699a      	ldr	r2, [r3, #24]
 801ae9e:	683b      	ldr	r3, [r7, #0]
 801aea0:	691b      	ldr	r3, [r3, #16]
 801aea2:	429a      	cmp	r2, r3
 801aea4:	d90d      	bls.n	801aec2 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801aea6:	683b      	ldr	r3, [r7, #0]
 801aea8:	691b      	ldr	r3, [r3, #16]
 801aeaa:	1d7a      	adds	r2, r7, #5
 801aeac:	32ff      	adds	r2, #255	@ 0xff
 801aeae:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801aeb0:	683b      	ldr	r3, [r7, #0]
 801aeb2:	699a      	ldr	r2, [r3, #24]
 801aeb4:	1d7b      	adds	r3, r7, #5
 801aeb6:	33ff      	adds	r3, #255	@ 0xff
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	1ad2      	subs	r2, r2, r3
 801aebc:	683b      	ldr	r3, [r7, #0]
 801aebe:	619a      	str	r2, [r3, #24]
 801aec0:	e007      	b.n	801aed2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801aec2:	683b      	ldr	r3, [r7, #0]
 801aec4:	699b      	ldr	r3, [r3, #24]
 801aec6:	1d7a      	adds	r2, r7, #5
 801aec8:	32ff      	adds	r2, #255	@ 0xff
 801aeca:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801aecc:	683b      	ldr	r3, [r7, #0]
 801aece:	2200      	movs	r2, #0
 801aed0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801aed2:	683b      	ldr	r3, [r7, #0]
 801aed4:	785b      	ldrb	r3, [r3, #1]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d000      	beq.n	801aedc <USB_EPStartXfer+0xf48>
 801aeda:	e082      	b.n	801afe2 <USB_EPStartXfer+0x104e>
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	21cc      	movs	r1, #204	@ 0xcc
 801aee0:	187a      	adds	r2, r7, r1
 801aee2:	6013      	str	r3, [r2, #0]
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	2250      	movs	r2, #80	@ 0x50
 801aee8:	5a9b      	ldrh	r3, [r3, r2]
 801aeea:	b29b      	uxth	r3, r3
 801aeec:	001a      	movs	r2, r3
 801aeee:	187b      	adds	r3, r7, r1
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	189b      	adds	r3, r3, r2
 801aef4:	187a      	adds	r2, r7, r1
 801aef6:	6013      	str	r3, [r2, #0]
 801aef8:	683b      	ldr	r3, [r7, #0]
 801aefa:	781b      	ldrb	r3, [r3, #0]
 801aefc:	00da      	lsls	r2, r3, #3
 801aefe:	187b      	adds	r3, r7, r1
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	18d3      	adds	r3, r2, r3
 801af04:	4a92      	ldr	r2, [pc, #584]	@ (801b150 <USB_EPStartXfer+0x11bc>)
 801af06:	4694      	mov	ip, r2
 801af08:	4463      	add	r3, ip
 801af0a:	21c8      	movs	r1, #200	@ 0xc8
 801af0c:	187a      	adds	r2, r7, r1
 801af0e:	6013      	str	r3, [r2, #0]
 801af10:	187b      	adds	r3, r7, r1
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	881b      	ldrh	r3, [r3, #0]
 801af16:	b29b      	uxth	r3, r3
 801af18:	059b      	lsls	r3, r3, #22
 801af1a:	0d9b      	lsrs	r3, r3, #22
 801af1c:	b29a      	uxth	r2, r3
 801af1e:	187b      	adds	r3, r7, r1
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	801a      	strh	r2, [r3, #0]
 801af24:	1d7b      	adds	r3, r7, #5
 801af26:	33ff      	adds	r3, #255	@ 0xff
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	2b3e      	cmp	r3, #62	@ 0x3e
 801af2c:	d925      	bls.n	801af7a <USB_EPStartXfer+0xfe6>
 801af2e:	1d7b      	adds	r3, r7, #5
 801af30:	33ff      	adds	r3, #255	@ 0xff
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	095b      	lsrs	r3, r3, #5
 801af36:	21dc      	movs	r1, #220	@ 0xdc
 801af38:	187a      	adds	r2, r7, r1
 801af3a:	6013      	str	r3, [r2, #0]
 801af3c:	1d7b      	adds	r3, r7, #5
 801af3e:	33ff      	adds	r3, #255	@ 0xff
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	221f      	movs	r2, #31
 801af44:	4013      	ands	r3, r2
 801af46:	d104      	bne.n	801af52 <USB_EPStartXfer+0xfbe>
 801af48:	187b      	adds	r3, r7, r1
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	3b01      	subs	r3, #1
 801af4e:	187a      	adds	r2, r7, r1
 801af50:	6013      	str	r3, [r2, #0]
 801af52:	21c8      	movs	r1, #200	@ 0xc8
 801af54:	187b      	adds	r3, r7, r1
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	881b      	ldrh	r3, [r3, #0]
 801af5a:	b29a      	uxth	r2, r3
 801af5c:	23dc      	movs	r3, #220	@ 0xdc
 801af5e:	18fb      	adds	r3, r7, r3
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	b29b      	uxth	r3, r3
 801af64:	029b      	lsls	r3, r3, #10
 801af66:	b29b      	uxth	r3, r3
 801af68:	4313      	orrs	r3, r2
 801af6a:	b29b      	uxth	r3, r3
 801af6c:	4a79      	ldr	r2, [pc, #484]	@ (801b154 <USB_EPStartXfer+0x11c0>)
 801af6e:	4313      	orrs	r3, r2
 801af70:	b29a      	uxth	r2, r3
 801af72:	187b      	adds	r3, r7, r1
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	801a      	strh	r2, [r3, #0]
 801af78:	e058      	b.n	801b02c <USB_EPStartXfer+0x1098>
 801af7a:	1d7b      	adds	r3, r7, #5
 801af7c:	33ff      	adds	r3, #255	@ 0xff
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	2b00      	cmp	r3, #0
 801af82:	d10b      	bne.n	801af9c <USB_EPStartXfer+0x1008>
 801af84:	21c8      	movs	r1, #200	@ 0xc8
 801af86:	187b      	adds	r3, r7, r1
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	881b      	ldrh	r3, [r3, #0]
 801af8c:	b29b      	uxth	r3, r3
 801af8e:	4a71      	ldr	r2, [pc, #452]	@ (801b154 <USB_EPStartXfer+0x11c0>)
 801af90:	4313      	orrs	r3, r2
 801af92:	b29a      	uxth	r2, r3
 801af94:	187b      	adds	r3, r7, r1
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	801a      	strh	r2, [r3, #0]
 801af9a:	e047      	b.n	801b02c <USB_EPStartXfer+0x1098>
 801af9c:	1d7b      	adds	r3, r7, #5
 801af9e:	33ff      	adds	r3, #255	@ 0xff
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	085b      	lsrs	r3, r3, #1
 801afa4:	21dc      	movs	r1, #220	@ 0xdc
 801afa6:	187a      	adds	r2, r7, r1
 801afa8:	6013      	str	r3, [r2, #0]
 801afaa:	1d7b      	adds	r3, r7, #5
 801afac:	33ff      	adds	r3, #255	@ 0xff
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	2201      	movs	r2, #1
 801afb2:	4013      	ands	r3, r2
 801afb4:	d004      	beq.n	801afc0 <USB_EPStartXfer+0x102c>
 801afb6:	187b      	adds	r3, r7, r1
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	3301      	adds	r3, #1
 801afbc:	187a      	adds	r2, r7, r1
 801afbe:	6013      	str	r3, [r2, #0]
 801afc0:	21c8      	movs	r1, #200	@ 0xc8
 801afc2:	187b      	adds	r3, r7, r1
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	881b      	ldrh	r3, [r3, #0]
 801afc8:	b29a      	uxth	r2, r3
 801afca:	23dc      	movs	r3, #220	@ 0xdc
 801afcc:	18fb      	adds	r3, r7, r3
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	b29b      	uxth	r3, r3
 801afd2:	029b      	lsls	r3, r3, #10
 801afd4:	b29b      	uxth	r3, r3
 801afd6:	4313      	orrs	r3, r2
 801afd8:	b29a      	uxth	r2, r3
 801afda:	187b      	adds	r3, r7, r1
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	801a      	strh	r2, [r3, #0]
 801afe0:	e024      	b.n	801b02c <USB_EPStartXfer+0x1098>
 801afe2:	683b      	ldr	r3, [r7, #0]
 801afe4:	785b      	ldrb	r3, [r3, #1]
 801afe6:	2b01      	cmp	r3, #1
 801afe8:	d120      	bne.n	801b02c <USB_EPStartXfer+0x1098>
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	21d4      	movs	r1, #212	@ 0xd4
 801afee:	187a      	adds	r2, r7, r1
 801aff0:	6013      	str	r3, [r2, #0]
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	2250      	movs	r2, #80	@ 0x50
 801aff6:	5a9b      	ldrh	r3, [r3, r2]
 801aff8:	b29b      	uxth	r3, r3
 801affa:	001a      	movs	r2, r3
 801affc:	187b      	adds	r3, r7, r1
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	189b      	adds	r3, r3, r2
 801b002:	187a      	adds	r2, r7, r1
 801b004:	6013      	str	r3, [r2, #0]
 801b006:	683b      	ldr	r3, [r7, #0]
 801b008:	781b      	ldrb	r3, [r3, #0]
 801b00a:	00da      	lsls	r2, r3, #3
 801b00c:	187b      	adds	r3, r7, r1
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	18d3      	adds	r3, r2, r3
 801b012:	4a4f      	ldr	r2, [pc, #316]	@ (801b150 <USB_EPStartXfer+0x11bc>)
 801b014:	4694      	mov	ip, r2
 801b016:	4463      	add	r3, ip
 801b018:	21d0      	movs	r1, #208	@ 0xd0
 801b01a:	187a      	adds	r2, r7, r1
 801b01c:	6013      	str	r3, [r2, #0]
 801b01e:	1d7b      	adds	r3, r7, #5
 801b020:	33ff      	adds	r3, #255	@ 0xff
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	b29a      	uxth	r2, r3
 801b026:	187b      	adds	r3, r7, r1
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	801a      	strh	r2, [r3, #0]
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	22c4      	movs	r2, #196	@ 0xc4
 801b030:	18ba      	adds	r2, r7, r2
 801b032:	6013      	str	r3, [r2, #0]
 801b034:	683b      	ldr	r3, [r7, #0]
 801b036:	785b      	ldrb	r3, [r3, #1]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d000      	beq.n	801b03e <USB_EPStartXfer+0x10aa>
 801b03c:	e08c      	b.n	801b158 <USB_EPStartXfer+0x11c4>
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	21bc      	movs	r1, #188	@ 0xbc
 801b042:	187a      	adds	r2, r7, r1
 801b044:	6013      	str	r3, [r2, #0]
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	2250      	movs	r2, #80	@ 0x50
 801b04a:	5a9b      	ldrh	r3, [r3, r2]
 801b04c:	b29b      	uxth	r3, r3
 801b04e:	001a      	movs	r2, r3
 801b050:	187b      	adds	r3, r7, r1
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	189b      	adds	r3, r3, r2
 801b056:	187a      	adds	r2, r7, r1
 801b058:	6013      	str	r3, [r2, #0]
 801b05a:	683b      	ldr	r3, [r7, #0]
 801b05c:	781b      	ldrb	r3, [r3, #0]
 801b05e:	00da      	lsls	r2, r3, #3
 801b060:	187b      	adds	r3, r7, r1
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	18d3      	adds	r3, r2, r3
 801b066:	4a37      	ldr	r2, [pc, #220]	@ (801b144 <USB_EPStartXfer+0x11b0>)
 801b068:	4694      	mov	ip, r2
 801b06a:	4463      	add	r3, ip
 801b06c:	21b8      	movs	r1, #184	@ 0xb8
 801b06e:	187a      	adds	r2, r7, r1
 801b070:	6013      	str	r3, [r2, #0]
 801b072:	187b      	adds	r3, r7, r1
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	881b      	ldrh	r3, [r3, #0]
 801b078:	b29b      	uxth	r3, r3
 801b07a:	059b      	lsls	r3, r3, #22
 801b07c:	0d9b      	lsrs	r3, r3, #22
 801b07e:	b29a      	uxth	r2, r3
 801b080:	187b      	adds	r3, r7, r1
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	801a      	strh	r2, [r3, #0]
 801b086:	1d7b      	adds	r3, r7, #5
 801b088:	33ff      	adds	r3, #255	@ 0xff
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	2b3e      	cmp	r3, #62	@ 0x3e
 801b08e:	d925      	bls.n	801b0dc <USB_EPStartXfer+0x1148>
 801b090:	1d7b      	adds	r3, r7, #5
 801b092:	33ff      	adds	r3, #255	@ 0xff
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	095b      	lsrs	r3, r3, #5
 801b098:	21d8      	movs	r1, #216	@ 0xd8
 801b09a:	187a      	adds	r2, r7, r1
 801b09c:	6013      	str	r3, [r2, #0]
 801b09e:	1d7b      	adds	r3, r7, #5
 801b0a0:	33ff      	adds	r3, #255	@ 0xff
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	221f      	movs	r2, #31
 801b0a6:	4013      	ands	r3, r2
 801b0a8:	d104      	bne.n	801b0b4 <USB_EPStartXfer+0x1120>
 801b0aa:	187b      	adds	r3, r7, r1
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	3b01      	subs	r3, #1
 801b0b0:	187a      	adds	r2, r7, r1
 801b0b2:	6013      	str	r3, [r2, #0]
 801b0b4:	21b8      	movs	r1, #184	@ 0xb8
 801b0b6:	187b      	adds	r3, r7, r1
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	881b      	ldrh	r3, [r3, #0]
 801b0bc:	b29a      	uxth	r2, r3
 801b0be:	23d8      	movs	r3, #216	@ 0xd8
 801b0c0:	18fb      	adds	r3, r7, r3
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	b29b      	uxth	r3, r3
 801b0c6:	029b      	lsls	r3, r3, #10
 801b0c8:	b29b      	uxth	r3, r3
 801b0ca:	4313      	orrs	r3, r2
 801b0cc:	b29b      	uxth	r3, r3
 801b0ce:	4a21      	ldr	r2, [pc, #132]	@ (801b154 <USB_EPStartXfer+0x11c0>)
 801b0d0:	4313      	orrs	r3, r2
 801b0d2:	b29a      	uxth	r2, r3
 801b0d4:	187b      	adds	r3, r7, r1
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	801a      	strh	r2, [r3, #0]
 801b0da:	e062      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
 801b0dc:	1d7b      	adds	r3, r7, #5
 801b0de:	33ff      	adds	r3, #255	@ 0xff
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d10b      	bne.n	801b0fe <USB_EPStartXfer+0x116a>
 801b0e6:	21b8      	movs	r1, #184	@ 0xb8
 801b0e8:	187b      	adds	r3, r7, r1
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	881b      	ldrh	r3, [r3, #0]
 801b0ee:	b29b      	uxth	r3, r3
 801b0f0:	4a18      	ldr	r2, [pc, #96]	@ (801b154 <USB_EPStartXfer+0x11c0>)
 801b0f2:	4313      	orrs	r3, r2
 801b0f4:	b29a      	uxth	r2, r3
 801b0f6:	187b      	adds	r3, r7, r1
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	801a      	strh	r2, [r3, #0]
 801b0fc:	e051      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
 801b0fe:	1d7b      	adds	r3, r7, #5
 801b100:	33ff      	adds	r3, #255	@ 0xff
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	085b      	lsrs	r3, r3, #1
 801b106:	21d8      	movs	r1, #216	@ 0xd8
 801b108:	187a      	adds	r2, r7, r1
 801b10a:	6013      	str	r3, [r2, #0]
 801b10c:	1d7b      	adds	r3, r7, #5
 801b10e:	33ff      	adds	r3, #255	@ 0xff
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	2201      	movs	r2, #1
 801b114:	4013      	ands	r3, r2
 801b116:	d004      	beq.n	801b122 <USB_EPStartXfer+0x118e>
 801b118:	187b      	adds	r3, r7, r1
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	3301      	adds	r3, #1
 801b11e:	187a      	adds	r2, r7, r1
 801b120:	6013      	str	r3, [r2, #0]
 801b122:	21b8      	movs	r1, #184	@ 0xb8
 801b124:	187b      	adds	r3, r7, r1
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	881b      	ldrh	r3, [r3, #0]
 801b12a:	b29a      	uxth	r2, r3
 801b12c:	23d8      	movs	r3, #216	@ 0xd8
 801b12e:	18fb      	adds	r3, r7, r3
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	b29b      	uxth	r3, r3
 801b134:	029b      	lsls	r3, r3, #10
 801b136:	b29b      	uxth	r3, r3
 801b138:	4313      	orrs	r3, r2
 801b13a:	b29a      	uxth	r2, r3
 801b13c:	187b      	adds	r3, r7, r1
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	801a      	strh	r2, [r3, #0]
 801b142:	e02e      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
 801b144:	00000406 	.word	0x00000406
 801b148:	ffff8f8f 	.word	0xffff8f8f
 801b14c:	ffff80c0 	.word	0xffff80c0
 801b150:	00000402 	.word	0x00000402
 801b154:	ffff8000 	.word	0xffff8000
 801b158:	683b      	ldr	r3, [r7, #0]
 801b15a:	785b      	ldrb	r3, [r3, #1]
 801b15c:	2b01      	cmp	r3, #1
 801b15e:	d120      	bne.n	801b1a2 <USB_EPStartXfer+0x120e>
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	2250      	movs	r2, #80	@ 0x50
 801b164:	5a9b      	ldrh	r3, [r3, r2]
 801b166:	b29b      	uxth	r3, r3
 801b168:	001a      	movs	r2, r3
 801b16a:	21c4      	movs	r1, #196	@ 0xc4
 801b16c:	187b      	adds	r3, r7, r1
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	189b      	adds	r3, r3, r2
 801b172:	187a      	adds	r2, r7, r1
 801b174:	6013      	str	r3, [r2, #0]
 801b176:	683b      	ldr	r3, [r7, #0]
 801b178:	781b      	ldrb	r3, [r3, #0]
 801b17a:	00da      	lsls	r2, r3, #3
 801b17c:	187b      	adds	r3, r7, r1
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	18d3      	adds	r3, r2, r3
 801b182:	4a1d      	ldr	r2, [pc, #116]	@ (801b1f8 <USB_EPStartXfer+0x1264>)
 801b184:	4694      	mov	ip, r2
 801b186:	4463      	add	r3, ip
 801b188:	21c0      	movs	r1, #192	@ 0xc0
 801b18a:	187a      	adds	r2, r7, r1
 801b18c:	6013      	str	r3, [r2, #0]
 801b18e:	1d7b      	adds	r3, r7, #5
 801b190:	33ff      	adds	r3, #255	@ 0xff
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	b29a      	uxth	r2, r3
 801b196:	187b      	adds	r3, r7, r1
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	801a      	strh	r2, [r3, #0]
 801b19c:	e001      	b.n	801b1a2 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801b19e:	2301      	movs	r3, #1
 801b1a0:	e025      	b.n	801b1ee <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b1a2:	687a      	ldr	r2, [r7, #4]
 801b1a4:	683b      	ldr	r3, [r7, #0]
 801b1a6:	781b      	ldrb	r3, [r3, #0]
 801b1a8:	009b      	lsls	r3, r3, #2
 801b1aa:	18d3      	adds	r3, r2, r3
 801b1ac:	881b      	ldrh	r3, [r3, #0]
 801b1ae:	b29a      	uxth	r2, r3
 801b1b0:	208a      	movs	r0, #138	@ 0x8a
 801b1b2:	183b      	adds	r3, r7, r0
 801b1b4:	4911      	ldr	r1, [pc, #68]	@ (801b1fc <USB_EPStartXfer+0x1268>)
 801b1b6:	400a      	ands	r2, r1
 801b1b8:	801a      	strh	r2, [r3, #0]
 801b1ba:	183b      	adds	r3, r7, r0
 801b1bc:	183a      	adds	r2, r7, r0
 801b1be:	8812      	ldrh	r2, [r2, #0]
 801b1c0:	2180      	movs	r1, #128	@ 0x80
 801b1c2:	0149      	lsls	r1, r1, #5
 801b1c4:	404a      	eors	r2, r1
 801b1c6:	801a      	strh	r2, [r3, #0]
 801b1c8:	183b      	adds	r3, r7, r0
 801b1ca:	183a      	adds	r2, r7, r0
 801b1cc:	8812      	ldrh	r2, [r2, #0]
 801b1ce:	2180      	movs	r1, #128	@ 0x80
 801b1d0:	0189      	lsls	r1, r1, #6
 801b1d2:	404a      	eors	r2, r1
 801b1d4:	801a      	strh	r2, [r3, #0]
 801b1d6:	687a      	ldr	r2, [r7, #4]
 801b1d8:	683b      	ldr	r3, [r7, #0]
 801b1da:	781b      	ldrb	r3, [r3, #0]
 801b1dc:	009b      	lsls	r3, r3, #2
 801b1de:	18d3      	adds	r3, r2, r3
 801b1e0:	183a      	adds	r2, r7, r0
 801b1e2:	8812      	ldrh	r2, [r2, #0]
 801b1e4:	4906      	ldr	r1, [pc, #24]	@ (801b200 <USB_EPStartXfer+0x126c>)
 801b1e6:	430a      	orrs	r2, r1
 801b1e8:	b292      	uxth	r2, r2
 801b1ea:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801b1ec:	2300      	movs	r3, #0
}
 801b1ee:	0018      	movs	r0, r3
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	b043      	add	sp, #268	@ 0x10c
 801b1f4:	bd90      	pop	{r4, r7, pc}
 801b1f6:	46c0      	nop			@ (mov r8, r8)
 801b1f8:	00000406 	.word	0x00000406
 801b1fc:	ffffbf8f 	.word	0xffffbf8f
 801b200:	ffff8080 	.word	0xffff8080

0801b204 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b204:	b580      	push	{r7, lr}
 801b206:	b084      	sub	sp, #16
 801b208:	af00      	add	r7, sp, #0
 801b20a:	6078      	str	r0, [r7, #4]
 801b20c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	785b      	ldrb	r3, [r3, #1]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d01d      	beq.n	801b252 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801b216:	687a      	ldr	r2, [r7, #4]
 801b218:	683b      	ldr	r3, [r7, #0]
 801b21a:	781b      	ldrb	r3, [r3, #0]
 801b21c:	009b      	lsls	r3, r3, #2
 801b21e:	18d3      	adds	r3, r2, r3
 801b220:	881b      	ldrh	r3, [r3, #0]
 801b222:	b29a      	uxth	r2, r3
 801b224:	200c      	movs	r0, #12
 801b226:	183b      	adds	r3, r7, r0
 801b228:	491b      	ldr	r1, [pc, #108]	@ (801b298 <USB_EPSetStall+0x94>)
 801b22a:	400a      	ands	r2, r1
 801b22c:	801a      	strh	r2, [r3, #0]
 801b22e:	183b      	adds	r3, r7, r0
 801b230:	183a      	adds	r2, r7, r0
 801b232:	8812      	ldrh	r2, [r2, #0]
 801b234:	2110      	movs	r1, #16
 801b236:	404a      	eors	r2, r1
 801b238:	801a      	strh	r2, [r3, #0]
 801b23a:	687a      	ldr	r2, [r7, #4]
 801b23c:	683b      	ldr	r3, [r7, #0]
 801b23e:	781b      	ldrb	r3, [r3, #0]
 801b240:	009b      	lsls	r3, r3, #2
 801b242:	18d3      	adds	r3, r2, r3
 801b244:	183a      	adds	r2, r7, r0
 801b246:	8812      	ldrh	r2, [r2, #0]
 801b248:	4914      	ldr	r1, [pc, #80]	@ (801b29c <USB_EPSetStall+0x98>)
 801b24a:	430a      	orrs	r2, r1
 801b24c:	b292      	uxth	r2, r2
 801b24e:	801a      	strh	r2, [r3, #0]
 801b250:	e01d      	b.n	801b28e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801b252:	687a      	ldr	r2, [r7, #4]
 801b254:	683b      	ldr	r3, [r7, #0]
 801b256:	781b      	ldrb	r3, [r3, #0]
 801b258:	009b      	lsls	r3, r3, #2
 801b25a:	18d3      	adds	r3, r2, r3
 801b25c:	881b      	ldrh	r3, [r3, #0]
 801b25e:	b29a      	uxth	r2, r3
 801b260:	200e      	movs	r0, #14
 801b262:	183b      	adds	r3, r7, r0
 801b264:	490e      	ldr	r1, [pc, #56]	@ (801b2a0 <USB_EPSetStall+0x9c>)
 801b266:	400a      	ands	r2, r1
 801b268:	801a      	strh	r2, [r3, #0]
 801b26a:	183b      	adds	r3, r7, r0
 801b26c:	183a      	adds	r2, r7, r0
 801b26e:	8812      	ldrh	r2, [r2, #0]
 801b270:	2180      	movs	r1, #128	@ 0x80
 801b272:	0149      	lsls	r1, r1, #5
 801b274:	404a      	eors	r2, r1
 801b276:	801a      	strh	r2, [r3, #0]
 801b278:	687a      	ldr	r2, [r7, #4]
 801b27a:	683b      	ldr	r3, [r7, #0]
 801b27c:	781b      	ldrb	r3, [r3, #0]
 801b27e:	009b      	lsls	r3, r3, #2
 801b280:	18d3      	adds	r3, r2, r3
 801b282:	183a      	adds	r2, r7, r0
 801b284:	8812      	ldrh	r2, [r2, #0]
 801b286:	4905      	ldr	r1, [pc, #20]	@ (801b29c <USB_EPSetStall+0x98>)
 801b288:	430a      	orrs	r2, r1
 801b28a:	b292      	uxth	r2, r2
 801b28c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801b28e:	2300      	movs	r3, #0
}
 801b290:	0018      	movs	r0, r3
 801b292:	46bd      	mov	sp, r7
 801b294:	b004      	add	sp, #16
 801b296:	bd80      	pop	{r7, pc}
 801b298:	ffff8fbf 	.word	0xffff8fbf
 801b29c:	ffff8080 	.word	0xffff8080
 801b2a0:	ffffbf8f 	.word	0xffffbf8f

0801b2a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b2a4:	b580      	push	{r7, lr}
 801b2a6:	b086      	sub	sp, #24
 801b2a8:	af00      	add	r7, sp, #0
 801b2aa:	6078      	str	r0, [r7, #4]
 801b2ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801b2ae:	683b      	ldr	r3, [r7, #0]
 801b2b0:	7b1b      	ldrb	r3, [r3, #12]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d000      	beq.n	801b2b8 <USB_EPClearStall+0x14>
 801b2b6:	e095      	b.n	801b3e4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801b2b8:	683b      	ldr	r3, [r7, #0]
 801b2ba:	785b      	ldrb	r3, [r3, #1]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d046      	beq.n	801b34e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801b2c0:	687a      	ldr	r2, [r7, #4]
 801b2c2:	683b      	ldr	r3, [r7, #0]
 801b2c4:	781b      	ldrb	r3, [r3, #0]
 801b2c6:	009b      	lsls	r3, r3, #2
 801b2c8:	18d2      	adds	r2, r2, r3
 801b2ca:	2110      	movs	r1, #16
 801b2cc:	187b      	adds	r3, r7, r1
 801b2ce:	8812      	ldrh	r2, [r2, #0]
 801b2d0:	801a      	strh	r2, [r3, #0]
 801b2d2:	187b      	adds	r3, r7, r1
 801b2d4:	881b      	ldrh	r3, [r3, #0]
 801b2d6:	2240      	movs	r2, #64	@ 0x40
 801b2d8:	4013      	ands	r3, r2
 801b2da:	d016      	beq.n	801b30a <USB_EPClearStall+0x66>
 801b2dc:	687a      	ldr	r2, [r7, #4]
 801b2de:	683b      	ldr	r3, [r7, #0]
 801b2e0:	781b      	ldrb	r3, [r3, #0]
 801b2e2:	009b      	lsls	r3, r3, #2
 801b2e4:	18d3      	adds	r3, r2, r3
 801b2e6:	881b      	ldrh	r3, [r3, #0]
 801b2e8:	b29a      	uxth	r2, r3
 801b2ea:	200e      	movs	r0, #14
 801b2ec:	183b      	adds	r3, r7, r0
 801b2ee:	4940      	ldr	r1, [pc, #256]	@ (801b3f0 <USB_EPClearStall+0x14c>)
 801b2f0:	400a      	ands	r2, r1
 801b2f2:	801a      	strh	r2, [r3, #0]
 801b2f4:	687a      	ldr	r2, [r7, #4]
 801b2f6:	683b      	ldr	r3, [r7, #0]
 801b2f8:	781b      	ldrb	r3, [r3, #0]
 801b2fa:	009b      	lsls	r3, r3, #2
 801b2fc:	18d3      	adds	r3, r2, r3
 801b2fe:	183a      	adds	r2, r7, r0
 801b300:	8812      	ldrh	r2, [r2, #0]
 801b302:	493c      	ldr	r1, [pc, #240]	@ (801b3f4 <USB_EPClearStall+0x150>)
 801b304:	430a      	orrs	r2, r1
 801b306:	b292      	uxth	r2, r2
 801b308:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b30a:	683b      	ldr	r3, [r7, #0]
 801b30c:	78db      	ldrb	r3, [r3, #3]
 801b30e:	2b01      	cmp	r3, #1
 801b310:	d068      	beq.n	801b3e4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801b312:	687a      	ldr	r2, [r7, #4]
 801b314:	683b      	ldr	r3, [r7, #0]
 801b316:	781b      	ldrb	r3, [r3, #0]
 801b318:	009b      	lsls	r3, r3, #2
 801b31a:	18d3      	adds	r3, r2, r3
 801b31c:	881b      	ldrh	r3, [r3, #0]
 801b31e:	b29a      	uxth	r2, r3
 801b320:	200c      	movs	r0, #12
 801b322:	183b      	adds	r3, r7, r0
 801b324:	4934      	ldr	r1, [pc, #208]	@ (801b3f8 <USB_EPClearStall+0x154>)
 801b326:	400a      	ands	r2, r1
 801b328:	801a      	strh	r2, [r3, #0]
 801b32a:	183b      	adds	r3, r7, r0
 801b32c:	183a      	adds	r2, r7, r0
 801b32e:	8812      	ldrh	r2, [r2, #0]
 801b330:	2120      	movs	r1, #32
 801b332:	404a      	eors	r2, r1
 801b334:	801a      	strh	r2, [r3, #0]
 801b336:	687a      	ldr	r2, [r7, #4]
 801b338:	683b      	ldr	r3, [r7, #0]
 801b33a:	781b      	ldrb	r3, [r3, #0]
 801b33c:	009b      	lsls	r3, r3, #2
 801b33e:	18d3      	adds	r3, r2, r3
 801b340:	183a      	adds	r2, r7, r0
 801b342:	8812      	ldrh	r2, [r2, #0]
 801b344:	492d      	ldr	r1, [pc, #180]	@ (801b3fc <USB_EPClearStall+0x158>)
 801b346:	430a      	orrs	r2, r1
 801b348:	b292      	uxth	r2, r2
 801b34a:	801a      	strh	r2, [r3, #0]
 801b34c:	e04a      	b.n	801b3e4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801b34e:	687a      	ldr	r2, [r7, #4]
 801b350:	683b      	ldr	r3, [r7, #0]
 801b352:	781b      	ldrb	r3, [r3, #0]
 801b354:	009b      	lsls	r3, r3, #2
 801b356:	18d2      	adds	r2, r2, r3
 801b358:	2116      	movs	r1, #22
 801b35a:	187b      	adds	r3, r7, r1
 801b35c:	8812      	ldrh	r2, [r2, #0]
 801b35e:	801a      	strh	r2, [r3, #0]
 801b360:	187b      	adds	r3, r7, r1
 801b362:	881a      	ldrh	r2, [r3, #0]
 801b364:	2380      	movs	r3, #128	@ 0x80
 801b366:	01db      	lsls	r3, r3, #7
 801b368:	4013      	ands	r3, r2
 801b36a:	d016      	beq.n	801b39a <USB_EPClearStall+0xf6>
 801b36c:	687a      	ldr	r2, [r7, #4]
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	781b      	ldrb	r3, [r3, #0]
 801b372:	009b      	lsls	r3, r3, #2
 801b374:	18d3      	adds	r3, r2, r3
 801b376:	881b      	ldrh	r3, [r3, #0]
 801b378:	b29a      	uxth	r2, r3
 801b37a:	2014      	movs	r0, #20
 801b37c:	183b      	adds	r3, r7, r0
 801b37e:	491c      	ldr	r1, [pc, #112]	@ (801b3f0 <USB_EPClearStall+0x14c>)
 801b380:	400a      	ands	r2, r1
 801b382:	801a      	strh	r2, [r3, #0]
 801b384:	687a      	ldr	r2, [r7, #4]
 801b386:	683b      	ldr	r3, [r7, #0]
 801b388:	781b      	ldrb	r3, [r3, #0]
 801b38a:	009b      	lsls	r3, r3, #2
 801b38c:	18d3      	adds	r3, r2, r3
 801b38e:	183a      	adds	r2, r7, r0
 801b390:	8812      	ldrh	r2, [r2, #0]
 801b392:	491b      	ldr	r1, [pc, #108]	@ (801b400 <USB_EPClearStall+0x15c>)
 801b394:	430a      	orrs	r2, r1
 801b396:	b292      	uxth	r2, r2
 801b398:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b39a:	687a      	ldr	r2, [r7, #4]
 801b39c:	683b      	ldr	r3, [r7, #0]
 801b39e:	781b      	ldrb	r3, [r3, #0]
 801b3a0:	009b      	lsls	r3, r3, #2
 801b3a2:	18d3      	adds	r3, r2, r3
 801b3a4:	881b      	ldrh	r3, [r3, #0]
 801b3a6:	b29a      	uxth	r2, r3
 801b3a8:	2012      	movs	r0, #18
 801b3aa:	183b      	adds	r3, r7, r0
 801b3ac:	4915      	ldr	r1, [pc, #84]	@ (801b404 <USB_EPClearStall+0x160>)
 801b3ae:	400a      	ands	r2, r1
 801b3b0:	801a      	strh	r2, [r3, #0]
 801b3b2:	183b      	adds	r3, r7, r0
 801b3b4:	183a      	adds	r2, r7, r0
 801b3b6:	8812      	ldrh	r2, [r2, #0]
 801b3b8:	2180      	movs	r1, #128	@ 0x80
 801b3ba:	0149      	lsls	r1, r1, #5
 801b3bc:	404a      	eors	r2, r1
 801b3be:	801a      	strh	r2, [r3, #0]
 801b3c0:	183b      	adds	r3, r7, r0
 801b3c2:	183a      	adds	r2, r7, r0
 801b3c4:	8812      	ldrh	r2, [r2, #0]
 801b3c6:	2180      	movs	r1, #128	@ 0x80
 801b3c8:	0189      	lsls	r1, r1, #6
 801b3ca:	404a      	eors	r2, r1
 801b3cc:	801a      	strh	r2, [r3, #0]
 801b3ce:	687a      	ldr	r2, [r7, #4]
 801b3d0:	683b      	ldr	r3, [r7, #0]
 801b3d2:	781b      	ldrb	r3, [r3, #0]
 801b3d4:	009b      	lsls	r3, r3, #2
 801b3d6:	18d3      	adds	r3, r2, r3
 801b3d8:	183a      	adds	r2, r7, r0
 801b3da:	8812      	ldrh	r2, [r2, #0]
 801b3dc:	4907      	ldr	r1, [pc, #28]	@ (801b3fc <USB_EPClearStall+0x158>)
 801b3de:	430a      	orrs	r2, r1
 801b3e0:	b292      	uxth	r2, r2
 801b3e2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801b3e4:	2300      	movs	r3, #0
}
 801b3e6:	0018      	movs	r0, r3
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	b006      	add	sp, #24
 801b3ec:	bd80      	pop	{r7, pc}
 801b3ee:	46c0      	nop			@ (mov r8, r8)
 801b3f0:	ffff8f8f 	.word	0xffff8f8f
 801b3f4:	ffff80c0 	.word	0xffff80c0
 801b3f8:	ffff8fbf 	.word	0xffff8fbf
 801b3fc:	ffff8080 	.word	0xffff8080
 801b400:	ffffc080 	.word	0xffffc080
 801b404:	ffffbf8f 	.word	0xffffbf8f

0801b408 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b082      	sub	sp, #8
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
 801b410:	000a      	movs	r2, r1
 801b412:	1cfb      	adds	r3, r7, #3
 801b414:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801b416:	1cfb      	adds	r3, r7, #3
 801b418:	781b      	ldrb	r3, [r3, #0]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d103      	bne.n	801b426 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	224c      	movs	r2, #76	@ 0x4c
 801b422:	2180      	movs	r1, #128	@ 0x80
 801b424:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801b426:	2300      	movs	r3, #0
}
 801b428:	0018      	movs	r0, r3
 801b42a:	46bd      	mov	sp, r7
 801b42c:	b002      	add	sp, #8
 801b42e:	bd80      	pop	{r7, pc}

0801b430 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801b430:	b580      	push	{r7, lr}
 801b432:	b082      	sub	sp, #8
 801b434:	af00      	add	r7, sp, #0
 801b436:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	2258      	movs	r2, #88	@ 0x58
 801b43c:	5a9b      	ldrh	r3, [r3, r2]
 801b43e:	b29b      	uxth	r3, r3
 801b440:	4a05      	ldr	r2, [pc, #20]	@ (801b458 <USB_DevConnect+0x28>)
 801b442:	4313      	orrs	r3, r2
 801b444:	b299      	uxth	r1, r3
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	2258      	movs	r2, #88	@ 0x58
 801b44a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b44c:	2300      	movs	r3, #0
}
 801b44e:	0018      	movs	r0, r3
 801b450:	46bd      	mov	sp, r7
 801b452:	b002      	add	sp, #8
 801b454:	bd80      	pop	{r7, pc}
 801b456:	46c0      	nop			@ (mov r8, r8)
 801b458:	ffff8000 	.word	0xffff8000

0801b45c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b084      	sub	sp, #16
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	2244      	movs	r2, #68	@ 0x44
 801b468:	5a9b      	ldrh	r3, [r3, r2]
 801b46a:	b29b      	uxth	r3, r3
 801b46c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801b46e:	68fb      	ldr	r3, [r7, #12]
}
 801b470:	0018      	movs	r0, r3
 801b472:	46bd      	mov	sp, r7
 801b474:	b004      	add	sp, #16
 801b476:	bd80      	pop	{r7, pc}

0801b478 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b478:	b580      	push	{r7, lr}
 801b47a:	b08a      	sub	sp, #40	@ 0x28
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	60f8      	str	r0, [r7, #12]
 801b480:	60b9      	str	r1, [r7, #8]
 801b482:	0019      	movs	r1, r3
 801b484:	1dbb      	adds	r3, r7, #6
 801b486:	801a      	strh	r2, [r3, #0]
 801b488:	1d3b      	adds	r3, r7, #4
 801b48a:	1c0a      	adds	r2, r1, #0
 801b48c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801b48e:	1d3b      	adds	r3, r7, #4
 801b490:	881b      	ldrh	r3, [r3, #0]
 801b492:	3301      	adds	r3, #1
 801b494:	085b      	lsrs	r3, r3, #1
 801b496:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b49c:	68bb      	ldr	r3, [r7, #8]
 801b49e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b4a0:	1dbb      	adds	r3, r7, #6
 801b4a2:	881a      	ldrh	r2, [r3, #0]
 801b4a4:	697b      	ldr	r3, [r7, #20]
 801b4a6:	18d3      	adds	r3, r2, r3
 801b4a8:	2280      	movs	r2, #128	@ 0x80
 801b4aa:	00d2      	lsls	r2, r2, #3
 801b4ac:	4694      	mov	ip, r2
 801b4ae:	4463      	add	r3, ip
 801b4b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b4b2:	69bb      	ldr	r3, [r7, #24]
 801b4b4:	627b      	str	r3, [r7, #36]	@ 0x24
 801b4b6:	e020      	b.n	801b4fa <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801b4b8:	69fb      	ldr	r3, [r7, #28]
 801b4ba:	781a      	ldrb	r2, [r3, #0]
 801b4bc:	2112      	movs	r1, #18
 801b4be:	187b      	adds	r3, r7, r1
 801b4c0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801b4c2:	69fb      	ldr	r3, [r7, #28]
 801b4c4:	3301      	adds	r3, #1
 801b4c6:	781b      	ldrb	r3, [r3, #0]
 801b4c8:	021b      	lsls	r3, r3, #8
 801b4ca:	b21a      	sxth	r2, r3
 801b4cc:	187b      	adds	r3, r7, r1
 801b4ce:	2000      	movs	r0, #0
 801b4d0:	5e1b      	ldrsh	r3, [r3, r0]
 801b4d2:	4313      	orrs	r3, r2
 801b4d4:	b21a      	sxth	r2, r3
 801b4d6:	187b      	adds	r3, r7, r1
 801b4d8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801b4da:	6a3b      	ldr	r3, [r7, #32]
 801b4dc:	187a      	adds	r2, r7, r1
 801b4de:	8812      	ldrh	r2, [r2, #0]
 801b4e0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801b4e2:	6a3b      	ldr	r3, [r7, #32]
 801b4e4:	3302      	adds	r3, #2
 801b4e6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801b4e8:	69fb      	ldr	r3, [r7, #28]
 801b4ea:	3301      	adds	r3, #1
 801b4ec:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801b4ee:	69fb      	ldr	r3, [r7, #28]
 801b4f0:	3301      	adds	r3, #1
 801b4f2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4f6:	3b01      	subs	r3, #1
 801b4f8:	627b      	str	r3, [r7, #36]	@ 0x24
 801b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d1db      	bne.n	801b4b8 <USB_WritePMA+0x40>
  }
}
 801b500:	46c0      	nop			@ (mov r8, r8)
 801b502:	46c0      	nop			@ (mov r8, r8)
 801b504:	46bd      	mov	sp, r7
 801b506:	b00a      	add	sp, #40	@ 0x28
 801b508:	bd80      	pop	{r7, pc}

0801b50a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b50a:	b580      	push	{r7, lr}
 801b50c:	b08a      	sub	sp, #40	@ 0x28
 801b50e:	af00      	add	r7, sp, #0
 801b510:	60f8      	str	r0, [r7, #12]
 801b512:	60b9      	str	r1, [r7, #8]
 801b514:	0019      	movs	r1, r3
 801b516:	1dbb      	adds	r3, r7, #6
 801b518:	801a      	strh	r2, [r3, #0]
 801b51a:	1d3b      	adds	r3, r7, #4
 801b51c:	1c0a      	adds	r2, r1, #0
 801b51e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b520:	1d3b      	adds	r3, r7, #4
 801b522:	881b      	ldrh	r3, [r3, #0]
 801b524:	085b      	lsrs	r3, r3, #1
 801b526:	b29b      	uxth	r3, r3
 801b528:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b52a:	68fb      	ldr	r3, [r7, #12]
 801b52c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b52e:	68bb      	ldr	r3, [r7, #8]
 801b530:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b532:	1dbb      	adds	r3, r7, #6
 801b534:	881a      	ldrh	r2, [r3, #0]
 801b536:	697b      	ldr	r3, [r7, #20]
 801b538:	18d3      	adds	r3, r2, r3
 801b53a:	2280      	movs	r2, #128	@ 0x80
 801b53c:	00d2      	lsls	r2, r2, #3
 801b53e:	4694      	mov	ip, r2
 801b540:	4463      	add	r3, ip
 801b542:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b544:	69bb      	ldr	r3, [r7, #24]
 801b546:	627b      	str	r3, [r7, #36]	@ 0x24
 801b548:	e018      	b.n	801b57c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b54a:	6a3b      	ldr	r3, [r7, #32]
 801b54c:	881b      	ldrh	r3, [r3, #0]
 801b54e:	b29b      	uxth	r3, r3
 801b550:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b552:	6a3b      	ldr	r3, [r7, #32]
 801b554:	3302      	adds	r3, #2
 801b556:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b558:	693b      	ldr	r3, [r7, #16]
 801b55a:	b2da      	uxtb	r2, r3
 801b55c:	69fb      	ldr	r3, [r7, #28]
 801b55e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b560:	69fb      	ldr	r3, [r7, #28]
 801b562:	3301      	adds	r3, #1
 801b564:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b566:	693b      	ldr	r3, [r7, #16]
 801b568:	0a1b      	lsrs	r3, r3, #8
 801b56a:	b2da      	uxtb	r2, r3
 801b56c:	69fb      	ldr	r3, [r7, #28]
 801b56e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b570:	69fb      	ldr	r3, [r7, #28]
 801b572:	3301      	adds	r3, #1
 801b574:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b578:	3b01      	subs	r3, #1
 801b57a:	627b      	str	r3, [r7, #36]	@ 0x24
 801b57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d1e3      	bne.n	801b54a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b582:	1d3b      	adds	r3, r7, #4
 801b584:	881b      	ldrh	r3, [r3, #0]
 801b586:	2201      	movs	r2, #1
 801b588:	4013      	ands	r3, r2
 801b58a:	b29b      	uxth	r3, r3
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d007      	beq.n	801b5a0 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b590:	6a3b      	ldr	r3, [r7, #32]
 801b592:	881b      	ldrh	r3, [r3, #0]
 801b594:	b29b      	uxth	r3, r3
 801b596:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b598:	693b      	ldr	r3, [r7, #16]
 801b59a:	b2da      	uxtb	r2, r3
 801b59c:	69fb      	ldr	r3, [r7, #28]
 801b59e:	701a      	strb	r2, [r3, #0]
  }
}
 801b5a0:	46c0      	nop			@ (mov r8, r8)
 801b5a2:	46bd      	mov	sp, r7
 801b5a4:	b00a      	add	sp, #40	@ 0x28
 801b5a6:	bd80      	pop	{r7, pc}

0801b5a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b5a8:	b580      	push	{r7, lr}
 801b5aa:	b084      	sub	sp, #16
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]
 801b5b0:	000a      	movs	r2, r1
 801b5b2:	1cfb      	adds	r3, r7, #3
 801b5b4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b5b6:	230f      	movs	r3, #15
 801b5b8:	18fb      	adds	r3, r7, r3
 801b5ba:	2200      	movs	r2, #0
 801b5bc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	7c1b      	ldrb	r3, [r3, #16]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d116      	bne.n	801b5f4 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b5c6:	2380      	movs	r3, #128	@ 0x80
 801b5c8:	009b      	lsls	r3, r3, #2
 801b5ca:	6878      	ldr	r0, [r7, #4]
 801b5cc:	2202      	movs	r2, #2
 801b5ce:	2181      	movs	r1, #129	@ 0x81
 801b5d0:	f002 f8eb 	bl	801d7aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	2201      	movs	r2, #1
 801b5d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b5da:	2380      	movs	r3, #128	@ 0x80
 801b5dc:	009b      	lsls	r3, r3, #2
 801b5de:	6878      	ldr	r0, [r7, #4]
 801b5e0:	2202      	movs	r2, #2
 801b5e2:	2101      	movs	r1, #1
 801b5e4:	f002 f8e1 	bl	801d7aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b5e8:	687a      	ldr	r2, [r7, #4]
 801b5ea:	23b6      	movs	r3, #182	@ 0xb6
 801b5ec:	005b      	lsls	r3, r3, #1
 801b5ee:	2101      	movs	r1, #1
 801b5f0:	50d1      	str	r1, [r2, r3]
 801b5f2:	e013      	b.n	801b61c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b5f4:	6878      	ldr	r0, [r7, #4]
 801b5f6:	2340      	movs	r3, #64	@ 0x40
 801b5f8:	2202      	movs	r2, #2
 801b5fa:	2181      	movs	r1, #129	@ 0x81
 801b5fc:	f002 f8d5 	bl	801d7aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	2201      	movs	r2, #1
 801b604:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b606:	6878      	ldr	r0, [r7, #4]
 801b608:	2340      	movs	r3, #64	@ 0x40
 801b60a:	2202      	movs	r2, #2
 801b60c:	2101      	movs	r1, #1
 801b60e:	f002 f8cc 	bl	801d7aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b612:	687a      	ldr	r2, [r7, #4]
 801b614:	23b6      	movs	r3, #182	@ 0xb6
 801b616:	005b      	lsls	r3, r3, #1
 801b618:	2101      	movs	r1, #1
 801b61a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b61c:	6878      	ldr	r0, [r7, #4]
 801b61e:	2308      	movs	r3, #8
 801b620:	2203      	movs	r2, #3
 801b622:	2182      	movs	r1, #130	@ 0x82
 801b624:	f002 f8c1 	bl	801d7aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	2201      	movs	r2, #1
 801b62c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b62e:	2387      	movs	r3, #135	@ 0x87
 801b630:	009b      	lsls	r3, r3, #2
 801b632:	0018      	movs	r0, r3
 801b634:	f002 fa52 	bl	801dadc <USBD_static_malloc>
 801b638:	0001      	movs	r1, r0
 801b63a:	687a      	ldr	r2, [r7, #4]
 801b63c:	23ae      	movs	r3, #174	@ 0xae
 801b63e:	009b      	lsls	r3, r3, #2
 801b640:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b642:	687a      	ldr	r2, [r7, #4]
 801b644:	23ae      	movs	r3, #174	@ 0xae
 801b646:	009b      	lsls	r3, r3, #2
 801b648:	58d3      	ldr	r3, [r2, r3]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d104      	bne.n	801b658 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b64e:	230f      	movs	r3, #15
 801b650:	18fb      	adds	r3, r7, r3
 801b652:	2201      	movs	r2, #1
 801b654:	701a      	strb	r2, [r3, #0]
 801b656:	e02c      	b.n	801b6b2 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b658:	687a      	ldr	r2, [r7, #4]
 801b65a:	23ae      	movs	r3, #174	@ 0xae
 801b65c:	009b      	lsls	r3, r3, #2
 801b65e:	58d3      	ldr	r3, [r2, r3]
 801b660:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b662:	687a      	ldr	r2, [r7, #4]
 801b664:	23af      	movs	r3, #175	@ 0xaf
 801b666:	009b      	lsls	r3, r3, #2
 801b668:	58d3      	ldr	r3, [r2, r3]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b66e:	68ba      	ldr	r2, [r7, #8]
 801b670:	2385      	movs	r3, #133	@ 0x85
 801b672:	009b      	lsls	r3, r3, #2
 801b674:	2100      	movs	r1, #0
 801b676:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b678:	68ba      	ldr	r2, [r7, #8]
 801b67a:	2386      	movs	r3, #134	@ 0x86
 801b67c:	009b      	lsls	r3, r3, #2
 801b67e:	2100      	movs	r1, #0
 801b680:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	7c1b      	ldrb	r3, [r3, #16]
 801b686:	2b00      	cmp	r3, #0
 801b688:	d10a      	bne.n	801b6a0 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b68a:	68ba      	ldr	r2, [r7, #8]
 801b68c:	2381      	movs	r3, #129	@ 0x81
 801b68e:	009b      	lsls	r3, r3, #2
 801b690:	58d2      	ldr	r2, [r2, r3]
 801b692:	2380      	movs	r3, #128	@ 0x80
 801b694:	009b      	lsls	r3, r3, #2
 801b696:	6878      	ldr	r0, [r7, #4]
 801b698:	2101      	movs	r1, #1
 801b69a:	f002 f9d1 	bl	801da40 <USBD_LL_PrepareReceive>
 801b69e:	e008      	b.n	801b6b2 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b6a0:	68ba      	ldr	r2, [r7, #8]
 801b6a2:	2381      	movs	r3, #129	@ 0x81
 801b6a4:	009b      	lsls	r3, r3, #2
 801b6a6:	58d2      	ldr	r2, [r2, r3]
 801b6a8:	6878      	ldr	r0, [r7, #4]
 801b6aa:	2340      	movs	r3, #64	@ 0x40
 801b6ac:	2101      	movs	r1, #1
 801b6ae:	f002 f9c7 	bl	801da40 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b6b2:	230f      	movs	r3, #15
 801b6b4:	18fb      	adds	r3, r7, r3
 801b6b6:	781b      	ldrb	r3, [r3, #0]
}
 801b6b8:	0018      	movs	r0, r3
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	b004      	add	sp, #16
 801b6be:	bd80      	pop	{r7, pc}

0801b6c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	b084      	sub	sp, #16
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	6078      	str	r0, [r7, #4]
 801b6c8:	000a      	movs	r2, r1
 801b6ca:	1cfb      	adds	r3, r7, #3
 801b6cc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b6ce:	230f      	movs	r3, #15
 801b6d0:	18fb      	adds	r3, r7, r3
 801b6d2:	2200      	movs	r2, #0
 801b6d4:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	2181      	movs	r1, #129	@ 0x81
 801b6da:	0018      	movs	r0, r3
 801b6dc:	f002 f89c 	bl	801d818 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	2101      	movs	r1, #1
 801b6ea:	0018      	movs	r0, r3
 801b6ec:	f002 f894 	bl	801d818 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b6f0:	687a      	ldr	r2, [r7, #4]
 801b6f2:	23b6      	movs	r3, #182	@ 0xb6
 801b6f4:	005b      	lsls	r3, r3, #1
 801b6f6:	2100      	movs	r1, #0
 801b6f8:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	2182      	movs	r1, #130	@ 0x82
 801b6fe:	0018      	movs	r0, r3
 801b700:	f002 f88a 	bl	801d818 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	2200      	movs	r2, #0
 801b708:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b70a:	687a      	ldr	r2, [r7, #4]
 801b70c:	23ae      	movs	r3, #174	@ 0xae
 801b70e:	009b      	lsls	r3, r3, #2
 801b710:	58d3      	ldr	r3, [r2, r3]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d011      	beq.n	801b73a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b716:	687a      	ldr	r2, [r7, #4]
 801b718:	23af      	movs	r3, #175	@ 0xaf
 801b71a:	009b      	lsls	r3, r3, #2
 801b71c:	58d3      	ldr	r3, [r2, r3]
 801b71e:	685b      	ldr	r3, [r3, #4]
 801b720:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b722:	687a      	ldr	r2, [r7, #4]
 801b724:	23ae      	movs	r3, #174	@ 0xae
 801b726:	009b      	lsls	r3, r3, #2
 801b728:	58d3      	ldr	r3, [r2, r3]
 801b72a:	0018      	movs	r0, r3
 801b72c:	f002 f9e2 	bl	801daf4 <USBD_static_free>
    pdev->pClassData = NULL;
 801b730:	687a      	ldr	r2, [r7, #4]
 801b732:	23ae      	movs	r3, #174	@ 0xae
 801b734:	009b      	lsls	r3, r3, #2
 801b736:	2100      	movs	r1, #0
 801b738:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b73a:	230f      	movs	r3, #15
 801b73c:	18fb      	adds	r3, r7, r3
 801b73e:	781b      	ldrb	r3, [r3, #0]
}
 801b740:	0018      	movs	r0, r3
 801b742:	46bd      	mov	sp, r7
 801b744:	b004      	add	sp, #16
 801b746:	bd80      	pop	{r7, pc}

0801b748 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b748:	b580      	push	{r7, lr}
 801b74a:	b086      	sub	sp, #24
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	6078      	str	r0, [r7, #4]
 801b750:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b752:	687a      	ldr	r2, [r7, #4]
 801b754:	23ae      	movs	r3, #174	@ 0xae
 801b756:	009b      	lsls	r3, r3, #2
 801b758:	58d3      	ldr	r3, [r2, r3]
 801b75a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b75c:	230f      	movs	r3, #15
 801b75e:	18fb      	adds	r3, r7, r3
 801b760:	2200      	movs	r2, #0
 801b762:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b764:	230c      	movs	r3, #12
 801b766:	18fb      	adds	r3, r7, r3
 801b768:	2200      	movs	r2, #0
 801b76a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b76c:	2317      	movs	r3, #23
 801b76e:	18fb      	adds	r3, r7, r3
 801b770:	2200      	movs	r2, #0
 801b772:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b774:	683b      	ldr	r3, [r7, #0]
 801b776:	781b      	ldrb	r3, [r3, #0]
 801b778:	001a      	movs	r2, r3
 801b77a:	2360      	movs	r3, #96	@ 0x60
 801b77c:	4013      	ands	r3, r2
 801b77e:	d03d      	beq.n	801b7fc <USBD_CDC_Setup+0xb4>
 801b780:	2b20      	cmp	r3, #32
 801b782:	d000      	beq.n	801b786 <USBD_CDC_Setup+0x3e>
 801b784:	e094      	b.n	801b8b0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b786:	683b      	ldr	r3, [r7, #0]
 801b788:	88db      	ldrh	r3, [r3, #6]
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d02b      	beq.n	801b7e6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b78e:	683b      	ldr	r3, [r7, #0]
 801b790:	781b      	ldrb	r3, [r3, #0]
 801b792:	b25b      	sxtb	r3, r3
 801b794:	2b00      	cmp	r3, #0
 801b796:	da12      	bge.n	801b7be <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b798:	687a      	ldr	r2, [r7, #4]
 801b79a:	23af      	movs	r3, #175	@ 0xaf
 801b79c:	009b      	lsls	r3, r3, #2
 801b79e:	58d3      	ldr	r3, [r2, r3]
 801b7a0:	689b      	ldr	r3, [r3, #8]
 801b7a2:	683a      	ldr	r2, [r7, #0]
 801b7a4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b7a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b7a8:	683a      	ldr	r2, [r7, #0]
 801b7aa:	88d2      	ldrh	r2, [r2, #6]
 801b7ac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b7ae:	6939      	ldr	r1, [r7, #16]
 801b7b0:	683b      	ldr	r3, [r7, #0]
 801b7b2:	88da      	ldrh	r2, [r3, #6]
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	0018      	movs	r0, r3
 801b7b8:	f001 fbaf 	bl	801cf1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b7bc:	e083      	b.n	801b8c6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	7859      	ldrb	r1, [r3, #1]
 801b7c2:	693a      	ldr	r2, [r7, #16]
 801b7c4:	2380      	movs	r3, #128	@ 0x80
 801b7c6:	009b      	lsls	r3, r3, #2
 801b7c8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b7ca:	683b      	ldr	r3, [r7, #0]
 801b7cc:	88db      	ldrh	r3, [r3, #6]
 801b7ce:	b2d9      	uxtb	r1, r3
 801b7d0:	693b      	ldr	r3, [r7, #16]
 801b7d2:	4a40      	ldr	r2, [pc, #256]	@ (801b8d4 <USBD_CDC_Setup+0x18c>)
 801b7d4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b7d6:	6939      	ldr	r1, [r7, #16]
 801b7d8:	683b      	ldr	r3, [r7, #0]
 801b7da:	88da      	ldrh	r2, [r3, #6]
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	0018      	movs	r0, r3
 801b7e0:	f001 fbce 	bl	801cf80 <USBD_CtlPrepareRx>
      break;
 801b7e4:	e06f      	b.n	801b8c6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b7e6:	687a      	ldr	r2, [r7, #4]
 801b7e8:	23af      	movs	r3, #175	@ 0xaf
 801b7ea:	009b      	lsls	r3, r3, #2
 801b7ec:	58d3      	ldr	r3, [r2, r3]
 801b7ee:	689b      	ldr	r3, [r3, #8]
 801b7f0:	683a      	ldr	r2, [r7, #0]
 801b7f2:	7850      	ldrb	r0, [r2, #1]
 801b7f4:	6839      	ldr	r1, [r7, #0]
 801b7f6:	2200      	movs	r2, #0
 801b7f8:	4798      	blx	r3
      break;
 801b7fa:	e064      	b.n	801b8c6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b7fc:	683b      	ldr	r3, [r7, #0]
 801b7fe:	785b      	ldrb	r3, [r3, #1]
 801b800:	2b0b      	cmp	r3, #11
 801b802:	d037      	beq.n	801b874 <USBD_CDC_Setup+0x12c>
 801b804:	dc47      	bgt.n	801b896 <USBD_CDC_Setup+0x14e>
 801b806:	2b00      	cmp	r3, #0
 801b808:	d002      	beq.n	801b810 <USBD_CDC_Setup+0xc8>
 801b80a:	2b0a      	cmp	r3, #10
 801b80c:	d019      	beq.n	801b842 <USBD_CDC_Setup+0xfa>
 801b80e:	e042      	b.n	801b896 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b810:	687a      	ldr	r2, [r7, #4]
 801b812:	23a7      	movs	r3, #167	@ 0xa7
 801b814:	009b      	lsls	r3, r3, #2
 801b816:	5cd3      	ldrb	r3, [r2, r3]
 801b818:	2b03      	cmp	r3, #3
 801b81a:	d107      	bne.n	801b82c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b81c:	230c      	movs	r3, #12
 801b81e:	18f9      	adds	r1, r7, r3
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	2202      	movs	r2, #2
 801b824:	0018      	movs	r0, r3
 801b826:	f001 fb78 	bl	801cf1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b82a:	e040      	b.n	801b8ae <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b82c:	683a      	ldr	r2, [r7, #0]
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	0011      	movs	r1, r2
 801b832:	0018      	movs	r0, r3
 801b834:	f001 faf3 	bl	801ce1e <USBD_CtlError>
            ret = USBD_FAIL;
 801b838:	2317      	movs	r3, #23
 801b83a:	18fb      	adds	r3, r7, r3
 801b83c:	2202      	movs	r2, #2
 801b83e:	701a      	strb	r2, [r3, #0]
          break;
 801b840:	e035      	b.n	801b8ae <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b842:	687a      	ldr	r2, [r7, #4]
 801b844:	23a7      	movs	r3, #167	@ 0xa7
 801b846:	009b      	lsls	r3, r3, #2
 801b848:	5cd3      	ldrb	r3, [r2, r3]
 801b84a:	2b03      	cmp	r3, #3
 801b84c:	d107      	bne.n	801b85e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b84e:	230f      	movs	r3, #15
 801b850:	18f9      	adds	r1, r7, r3
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	2201      	movs	r2, #1
 801b856:	0018      	movs	r0, r3
 801b858:	f001 fb5f 	bl	801cf1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b85c:	e027      	b.n	801b8ae <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b85e:	683a      	ldr	r2, [r7, #0]
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	0011      	movs	r1, r2
 801b864:	0018      	movs	r0, r3
 801b866:	f001 fada 	bl	801ce1e <USBD_CtlError>
            ret = USBD_FAIL;
 801b86a:	2317      	movs	r3, #23
 801b86c:	18fb      	adds	r3, r7, r3
 801b86e:	2202      	movs	r2, #2
 801b870:	701a      	strb	r2, [r3, #0]
          break;
 801b872:	e01c      	b.n	801b8ae <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b874:	687a      	ldr	r2, [r7, #4]
 801b876:	23a7      	movs	r3, #167	@ 0xa7
 801b878:	009b      	lsls	r3, r3, #2
 801b87a:	5cd3      	ldrb	r3, [r2, r3]
 801b87c:	2b03      	cmp	r3, #3
 801b87e:	d015      	beq.n	801b8ac <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b880:	683a      	ldr	r2, [r7, #0]
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	0011      	movs	r1, r2
 801b886:	0018      	movs	r0, r3
 801b888:	f001 fac9 	bl	801ce1e <USBD_CtlError>
            ret = USBD_FAIL;
 801b88c:	2317      	movs	r3, #23
 801b88e:	18fb      	adds	r3, r7, r3
 801b890:	2202      	movs	r2, #2
 801b892:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b894:	e00a      	b.n	801b8ac <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b896:	683a      	ldr	r2, [r7, #0]
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	0011      	movs	r1, r2
 801b89c:	0018      	movs	r0, r3
 801b89e:	f001 fabe 	bl	801ce1e <USBD_CtlError>
          ret = USBD_FAIL;
 801b8a2:	2317      	movs	r3, #23
 801b8a4:	18fb      	adds	r3, r7, r3
 801b8a6:	2202      	movs	r2, #2
 801b8a8:	701a      	strb	r2, [r3, #0]
          break;
 801b8aa:	e000      	b.n	801b8ae <USBD_CDC_Setup+0x166>
          break;
 801b8ac:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b8ae:	e00a      	b.n	801b8c6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b8b0:	683a      	ldr	r2, [r7, #0]
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	0011      	movs	r1, r2
 801b8b6:	0018      	movs	r0, r3
 801b8b8:	f001 fab1 	bl	801ce1e <USBD_CtlError>
      ret = USBD_FAIL;
 801b8bc:	2317      	movs	r3, #23
 801b8be:	18fb      	adds	r3, r7, r3
 801b8c0:	2202      	movs	r2, #2
 801b8c2:	701a      	strb	r2, [r3, #0]
      break;
 801b8c4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b8c6:	2317      	movs	r3, #23
 801b8c8:	18fb      	adds	r3, r7, r3
 801b8ca:	781b      	ldrb	r3, [r3, #0]
}
 801b8cc:	0018      	movs	r0, r3
 801b8ce:	46bd      	mov	sp, r7
 801b8d0:	b006      	add	sp, #24
 801b8d2:	bd80      	pop	{r7, pc}
 801b8d4:	00000201 	.word	0x00000201

0801b8d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b8d8:	b580      	push	{r7, lr}
 801b8da:	b084      	sub	sp, #16
 801b8dc:	af00      	add	r7, sp, #0
 801b8de:	6078      	str	r0, [r7, #4]
 801b8e0:	000a      	movs	r2, r1
 801b8e2:	1cfb      	adds	r3, r7, #3
 801b8e4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b8e6:	687a      	ldr	r2, [r7, #4]
 801b8e8:	23ae      	movs	r3, #174	@ 0xae
 801b8ea:	009b      	lsls	r3, r3, #2
 801b8ec:	58d3      	ldr	r3, [r2, r3]
 801b8ee:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b8f0:	687a      	ldr	r2, [r7, #4]
 801b8f2:	23b0      	movs	r3, #176	@ 0xb0
 801b8f4:	009b      	lsls	r3, r3, #2
 801b8f6:	58d3      	ldr	r3, [r2, r3]
 801b8f8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b8fa:	687a      	ldr	r2, [r7, #4]
 801b8fc:	23ae      	movs	r3, #174	@ 0xae
 801b8fe:	009b      	lsls	r3, r3, #2
 801b900:	58d3      	ldr	r3, [r2, r3]
 801b902:	2b00      	cmp	r3, #0
 801b904:	d03e      	beq.n	801b984 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b906:	1cfb      	adds	r3, r7, #3
 801b908:	781a      	ldrb	r2, [r3, #0]
 801b90a:	6879      	ldr	r1, [r7, #4]
 801b90c:	0013      	movs	r3, r2
 801b90e:	009b      	lsls	r3, r3, #2
 801b910:	189b      	adds	r3, r3, r2
 801b912:	009b      	lsls	r3, r3, #2
 801b914:	18cb      	adds	r3, r1, r3
 801b916:	331c      	adds	r3, #28
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d02b      	beq.n	801b976 <USBD_CDC_DataIn+0x9e>
 801b91e:	1cfb      	adds	r3, r7, #3
 801b920:	781a      	ldrb	r2, [r3, #0]
 801b922:	6879      	ldr	r1, [r7, #4]
 801b924:	0013      	movs	r3, r2
 801b926:	009b      	lsls	r3, r3, #2
 801b928:	189b      	adds	r3, r3, r2
 801b92a:	009b      	lsls	r3, r3, #2
 801b92c:	18cb      	adds	r3, r1, r3
 801b92e:	331c      	adds	r3, #28
 801b930:	6818      	ldr	r0, [r3, #0]
 801b932:	1cfb      	adds	r3, r7, #3
 801b934:	781a      	ldrb	r2, [r3, #0]
 801b936:	68b9      	ldr	r1, [r7, #8]
 801b938:	0013      	movs	r3, r2
 801b93a:	009b      	lsls	r3, r3, #2
 801b93c:	189b      	adds	r3, r3, r2
 801b93e:	00db      	lsls	r3, r3, #3
 801b940:	18cb      	adds	r3, r1, r3
 801b942:	3338      	adds	r3, #56	@ 0x38
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	0019      	movs	r1, r3
 801b948:	f7e4 fcb2 	bl	80002b0 <__aeabi_uidivmod>
 801b94c:	1e0b      	subs	r3, r1, #0
 801b94e:	d112      	bne.n	801b976 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b950:	1cfb      	adds	r3, r7, #3
 801b952:	781a      	ldrb	r2, [r3, #0]
 801b954:	6879      	ldr	r1, [r7, #4]
 801b956:	0013      	movs	r3, r2
 801b958:	009b      	lsls	r3, r3, #2
 801b95a:	189b      	adds	r3, r3, r2
 801b95c:	009b      	lsls	r3, r3, #2
 801b95e:	18cb      	adds	r3, r1, r3
 801b960:	331c      	adds	r3, #28
 801b962:	2200      	movs	r2, #0
 801b964:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b966:	1cfb      	adds	r3, r7, #3
 801b968:	7819      	ldrb	r1, [r3, #0]
 801b96a:	6878      	ldr	r0, [r7, #4]
 801b96c:	2300      	movs	r3, #0
 801b96e:	2200      	movs	r2, #0
 801b970:	f002 f82f 	bl	801d9d2 <USBD_LL_Transmit>
 801b974:	e004      	b.n	801b980 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b976:	68fa      	ldr	r2, [r7, #12]
 801b978:	2385      	movs	r3, #133	@ 0x85
 801b97a:	009b      	lsls	r3, r3, #2
 801b97c:	2100      	movs	r1, #0
 801b97e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b980:	2300      	movs	r3, #0
 801b982:	e000      	b.n	801b986 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b984:	2302      	movs	r3, #2
  }
}
 801b986:	0018      	movs	r0, r3
 801b988:	46bd      	mov	sp, r7
 801b98a:	b004      	add	sp, #16
 801b98c:	bd80      	pop	{r7, pc}

0801b98e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b98e:	b580      	push	{r7, lr}
 801b990:	b084      	sub	sp, #16
 801b992:	af00      	add	r7, sp, #0
 801b994:	6078      	str	r0, [r7, #4]
 801b996:	000a      	movs	r2, r1
 801b998:	1cfb      	adds	r3, r7, #3
 801b99a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b99c:	687a      	ldr	r2, [r7, #4]
 801b99e:	23ae      	movs	r3, #174	@ 0xae
 801b9a0:	009b      	lsls	r3, r3, #2
 801b9a2:	58d3      	ldr	r3, [r2, r3]
 801b9a4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b9a6:	1cfb      	adds	r3, r7, #3
 801b9a8:	781a      	ldrb	r2, [r3, #0]
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	0011      	movs	r1, r2
 801b9ae:	0018      	movs	r0, r3
 801b9b0:	f002 f87d 	bl	801daae <USBD_LL_GetRxDataSize>
 801b9b4:	0001      	movs	r1, r0
 801b9b6:	68fa      	ldr	r2, [r7, #12]
 801b9b8:	2383      	movs	r3, #131	@ 0x83
 801b9ba:	009b      	lsls	r3, r3, #2
 801b9bc:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b9be:	687a      	ldr	r2, [r7, #4]
 801b9c0:	23ae      	movs	r3, #174	@ 0xae
 801b9c2:	009b      	lsls	r3, r3, #2
 801b9c4:	58d3      	ldr	r3, [r2, r3]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d011      	beq.n	801b9ee <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b9ca:	687a      	ldr	r2, [r7, #4]
 801b9cc:	23af      	movs	r3, #175	@ 0xaf
 801b9ce:	009b      	lsls	r3, r3, #2
 801b9d0:	58d3      	ldr	r3, [r2, r3]
 801b9d2:	68da      	ldr	r2, [r3, #12]
 801b9d4:	68f9      	ldr	r1, [r7, #12]
 801b9d6:	2381      	movs	r3, #129	@ 0x81
 801b9d8:	009b      	lsls	r3, r3, #2
 801b9da:	58c8      	ldr	r0, [r1, r3]
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	2183      	movs	r1, #131	@ 0x83
 801b9e0:	0089      	lsls	r1, r1, #2
 801b9e2:	468c      	mov	ip, r1
 801b9e4:	4463      	add	r3, ip
 801b9e6:	0019      	movs	r1, r3
 801b9e8:	4790      	blx	r2

    return USBD_OK;
 801b9ea:	2300      	movs	r3, #0
 801b9ec:	e000      	b.n	801b9f0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b9ee:	2302      	movs	r3, #2
  }
}
 801b9f0:	0018      	movs	r0, r3
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	b004      	add	sp, #16
 801b9f6:	bd80      	pop	{r7, pc}

0801b9f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b9f8:	b590      	push	{r4, r7, lr}
 801b9fa:	b085      	sub	sp, #20
 801b9fc:	af00      	add	r7, sp, #0
 801b9fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ba00:	687a      	ldr	r2, [r7, #4]
 801ba02:	23ae      	movs	r3, #174	@ 0xae
 801ba04:	009b      	lsls	r3, r3, #2
 801ba06:	58d3      	ldr	r3, [r2, r3]
 801ba08:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801ba0a:	687a      	ldr	r2, [r7, #4]
 801ba0c:	23af      	movs	r3, #175	@ 0xaf
 801ba0e:	009b      	lsls	r3, r3, #2
 801ba10:	58d3      	ldr	r3, [r2, r3]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d018      	beq.n	801ba48 <USBD_CDC_EP0_RxReady+0x50>
 801ba16:	68fa      	ldr	r2, [r7, #12]
 801ba18:	2380      	movs	r3, #128	@ 0x80
 801ba1a:	009b      	lsls	r3, r3, #2
 801ba1c:	5cd3      	ldrb	r3, [r2, r3]
 801ba1e:	2bff      	cmp	r3, #255	@ 0xff
 801ba20:	d012      	beq.n	801ba48 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ba22:	687a      	ldr	r2, [r7, #4]
 801ba24:	23af      	movs	r3, #175	@ 0xaf
 801ba26:	009b      	lsls	r3, r3, #2
 801ba28:	58d3      	ldr	r3, [r2, r3]
 801ba2a:	689b      	ldr	r3, [r3, #8]
 801ba2c:	68f9      	ldr	r1, [r7, #12]
 801ba2e:	2280      	movs	r2, #128	@ 0x80
 801ba30:	0092      	lsls	r2, r2, #2
 801ba32:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801ba34:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801ba36:	68fa      	ldr	r2, [r7, #12]
 801ba38:	4c06      	ldr	r4, [pc, #24]	@ (801ba54 <USBD_CDC_EP0_RxReady+0x5c>)
 801ba3a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ba3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801ba3e:	68fa      	ldr	r2, [r7, #12]
 801ba40:	2380      	movs	r3, #128	@ 0x80
 801ba42:	009b      	lsls	r3, r3, #2
 801ba44:	21ff      	movs	r1, #255	@ 0xff
 801ba46:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801ba48:	2300      	movs	r3, #0
}
 801ba4a:	0018      	movs	r0, r3
 801ba4c:	46bd      	mov	sp, r7
 801ba4e:	b005      	add	sp, #20
 801ba50:	bd90      	pop	{r4, r7, pc}
 801ba52:	46c0      	nop			@ (mov r8, r8)
 801ba54:	00000201 	.word	0x00000201

0801ba58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b082      	sub	sp, #8
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	2243      	movs	r2, #67	@ 0x43
 801ba64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801ba66:	4b02      	ldr	r3, [pc, #8]	@ (801ba70 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801ba68:	0018      	movs	r0, r3
 801ba6a:	46bd      	mov	sp, r7
 801ba6c:	b002      	add	sp, #8
 801ba6e:	bd80      	pop	{r7, pc}
 801ba70:	20000170 	.word	0x20000170

0801ba74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801ba74:	b580      	push	{r7, lr}
 801ba76:	b082      	sub	sp, #8
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	2243      	movs	r2, #67	@ 0x43
 801ba80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801ba82:	4b02      	ldr	r3, [pc, #8]	@ (801ba8c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801ba84:	0018      	movs	r0, r3
 801ba86:	46bd      	mov	sp, r7
 801ba88:	b002      	add	sp, #8
 801ba8a:	bd80      	pop	{r7, pc}
 801ba8c:	2000012c 	.word	0x2000012c

0801ba90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b082      	sub	sp, #8
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	2243      	movs	r2, #67	@ 0x43
 801ba9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801ba9e:	4b02      	ldr	r3, [pc, #8]	@ (801baa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801baa0:	0018      	movs	r0, r3
 801baa2:	46bd      	mov	sp, r7
 801baa4:	b002      	add	sp, #8
 801baa6:	bd80      	pop	{r7, pc}
 801baa8:	200001b4 	.word	0x200001b4

0801baac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801baac:	b580      	push	{r7, lr}
 801baae:	b082      	sub	sp, #8
 801bab0:	af00      	add	r7, sp, #0
 801bab2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	220a      	movs	r2, #10
 801bab8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801baba:	4b02      	ldr	r3, [pc, #8]	@ (801bac4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801babc:	0018      	movs	r0, r3
 801babe:	46bd      	mov	sp, r7
 801bac0:	b002      	add	sp, #8
 801bac2:	bd80      	pop	{r7, pc}
 801bac4:	200000e8 	.word	0x200000e8

0801bac8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801bac8:	b580      	push	{r7, lr}
 801baca:	b084      	sub	sp, #16
 801bacc:	af00      	add	r7, sp, #0
 801bace:	6078      	str	r0, [r7, #4]
 801bad0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801bad2:	200f      	movs	r0, #15
 801bad4:	183b      	adds	r3, r7, r0
 801bad6:	2202      	movs	r2, #2
 801bad8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801bada:	683b      	ldr	r3, [r7, #0]
 801badc:	2b00      	cmp	r3, #0
 801bade:	d007      	beq.n	801baf0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801bae0:	687a      	ldr	r2, [r7, #4]
 801bae2:	23af      	movs	r3, #175	@ 0xaf
 801bae4:	009b      	lsls	r3, r3, #2
 801bae6:	6839      	ldr	r1, [r7, #0]
 801bae8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801baea:	183b      	adds	r3, r7, r0
 801baec:	2200      	movs	r2, #0
 801baee:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801baf0:	230f      	movs	r3, #15
 801baf2:	18fb      	adds	r3, r7, r3
 801baf4:	781b      	ldrb	r3, [r3, #0]
}
 801baf6:	0018      	movs	r0, r3
 801baf8:	46bd      	mov	sp, r7
 801bafa:	b004      	add	sp, #16
 801bafc:	bd80      	pop	{r7, pc}

0801bafe <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801bafe:	b580      	push	{r7, lr}
 801bb00:	b086      	sub	sp, #24
 801bb02:	af00      	add	r7, sp, #0
 801bb04:	60f8      	str	r0, [r7, #12]
 801bb06:	60b9      	str	r1, [r7, #8]
 801bb08:	1dbb      	adds	r3, r7, #6
 801bb0a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bb0c:	68fa      	ldr	r2, [r7, #12]
 801bb0e:	23ae      	movs	r3, #174	@ 0xae
 801bb10:	009b      	lsls	r3, r3, #2
 801bb12:	58d3      	ldr	r3, [r2, r3]
 801bb14:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801bb16:	697a      	ldr	r2, [r7, #20]
 801bb18:	2382      	movs	r3, #130	@ 0x82
 801bb1a:	009b      	lsls	r3, r3, #2
 801bb1c:	68b9      	ldr	r1, [r7, #8]
 801bb1e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801bb20:	1dbb      	adds	r3, r7, #6
 801bb22:	8819      	ldrh	r1, [r3, #0]
 801bb24:	697a      	ldr	r2, [r7, #20]
 801bb26:	2384      	movs	r3, #132	@ 0x84
 801bb28:	009b      	lsls	r3, r3, #2
 801bb2a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801bb2c:	2300      	movs	r3, #0
}
 801bb2e:	0018      	movs	r0, r3
 801bb30:	46bd      	mov	sp, r7
 801bb32:	b006      	add	sp, #24
 801bb34:	bd80      	pop	{r7, pc}

0801bb36 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801bb36:	b580      	push	{r7, lr}
 801bb38:	b084      	sub	sp, #16
 801bb3a:	af00      	add	r7, sp, #0
 801bb3c:	6078      	str	r0, [r7, #4]
 801bb3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bb40:	687a      	ldr	r2, [r7, #4]
 801bb42:	23ae      	movs	r3, #174	@ 0xae
 801bb44:	009b      	lsls	r3, r3, #2
 801bb46:	58d3      	ldr	r3, [r2, r3]
 801bb48:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801bb4a:	68fa      	ldr	r2, [r7, #12]
 801bb4c:	2381      	movs	r3, #129	@ 0x81
 801bb4e:	009b      	lsls	r3, r3, #2
 801bb50:	6839      	ldr	r1, [r7, #0]
 801bb52:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801bb54:	2300      	movs	r3, #0
}
 801bb56:	0018      	movs	r0, r3
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	b004      	add	sp, #16
 801bb5c:	bd80      	pop	{r7, pc}

0801bb5e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801bb5e:	b580      	push	{r7, lr}
 801bb60:	b084      	sub	sp, #16
 801bb62:	af00      	add	r7, sp, #0
 801bb64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bb66:	687a      	ldr	r2, [r7, #4]
 801bb68:	23ae      	movs	r3, #174	@ 0xae
 801bb6a:	009b      	lsls	r3, r3, #2
 801bb6c:	58d3      	ldr	r3, [r2, r3]
 801bb6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801bb70:	687a      	ldr	r2, [r7, #4]
 801bb72:	23ae      	movs	r3, #174	@ 0xae
 801bb74:	009b      	lsls	r3, r3, #2
 801bb76:	58d3      	ldr	r3, [r2, r3]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d022      	beq.n	801bbc2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801bb7c:	68fa      	ldr	r2, [r7, #12]
 801bb7e:	2385      	movs	r3, #133	@ 0x85
 801bb80:	009b      	lsls	r3, r3, #2
 801bb82:	58d3      	ldr	r3, [r2, r3]
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d11a      	bne.n	801bbbe <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801bb88:	68fa      	ldr	r2, [r7, #12]
 801bb8a:	2385      	movs	r3, #133	@ 0x85
 801bb8c:	009b      	lsls	r3, r3, #2
 801bb8e:	2101      	movs	r1, #1
 801bb90:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801bb92:	68fa      	ldr	r2, [r7, #12]
 801bb94:	2384      	movs	r3, #132	@ 0x84
 801bb96:	009b      	lsls	r3, r3, #2
 801bb98:	58d2      	ldr	r2, [r2, r3]
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801bb9e:	68fa      	ldr	r2, [r7, #12]
 801bba0:	2382      	movs	r3, #130	@ 0x82
 801bba2:	009b      	lsls	r3, r3, #2
 801bba4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801bba6:	68fa      	ldr	r2, [r7, #12]
 801bba8:	2384      	movs	r3, #132	@ 0x84
 801bbaa:	009b      	lsls	r3, r3, #2
 801bbac:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801bbae:	b29b      	uxth	r3, r3
 801bbb0:	6878      	ldr	r0, [r7, #4]
 801bbb2:	000a      	movs	r2, r1
 801bbb4:	2181      	movs	r1, #129	@ 0x81
 801bbb6:	f001 ff0c 	bl	801d9d2 <USBD_LL_Transmit>

      return USBD_OK;
 801bbba:	2300      	movs	r3, #0
 801bbbc:	e002      	b.n	801bbc4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801bbbe:	2301      	movs	r3, #1
 801bbc0:	e000      	b.n	801bbc4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801bbc2:	2302      	movs	r3, #2
  }
}
 801bbc4:	0018      	movs	r0, r3
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	b004      	add	sp, #16
 801bbca:	bd80      	pop	{r7, pc}

0801bbcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801bbcc:	b580      	push	{r7, lr}
 801bbce:	b084      	sub	sp, #16
 801bbd0:	af00      	add	r7, sp, #0
 801bbd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bbd4:	687a      	ldr	r2, [r7, #4]
 801bbd6:	23ae      	movs	r3, #174	@ 0xae
 801bbd8:	009b      	lsls	r3, r3, #2
 801bbda:	58d3      	ldr	r3, [r2, r3]
 801bbdc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801bbde:	687a      	ldr	r2, [r7, #4]
 801bbe0:	23ae      	movs	r3, #174	@ 0xae
 801bbe2:	009b      	lsls	r3, r3, #2
 801bbe4:	58d3      	ldr	r3, [r2, r3]
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d019      	beq.n	801bc1e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	7c1b      	ldrb	r3, [r3, #16]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d10a      	bne.n	801bc08 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801bbf2:	68fa      	ldr	r2, [r7, #12]
 801bbf4:	2381      	movs	r3, #129	@ 0x81
 801bbf6:	009b      	lsls	r3, r3, #2
 801bbf8:	58d2      	ldr	r2, [r2, r3]
 801bbfa:	2380      	movs	r3, #128	@ 0x80
 801bbfc:	009b      	lsls	r3, r3, #2
 801bbfe:	6878      	ldr	r0, [r7, #4]
 801bc00:	2101      	movs	r1, #1
 801bc02:	f001 ff1d 	bl	801da40 <USBD_LL_PrepareReceive>
 801bc06:	e008      	b.n	801bc1a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801bc08:	68fa      	ldr	r2, [r7, #12]
 801bc0a:	2381      	movs	r3, #129	@ 0x81
 801bc0c:	009b      	lsls	r3, r3, #2
 801bc0e:	58d2      	ldr	r2, [r2, r3]
 801bc10:	6878      	ldr	r0, [r7, #4]
 801bc12:	2340      	movs	r3, #64	@ 0x40
 801bc14:	2101      	movs	r1, #1
 801bc16:	f001 ff13 	bl	801da40 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801bc1a:	2300      	movs	r3, #0
 801bc1c:	e000      	b.n	801bc20 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801bc1e:	2302      	movs	r3, #2
  }
}
 801bc20:	0018      	movs	r0, r3
 801bc22:	46bd      	mov	sp, r7
 801bc24:	b004      	add	sp, #16
 801bc26:	bd80      	pop	{r7, pc}

0801bc28 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801bc28:	b580      	push	{r7, lr}
 801bc2a:	b084      	sub	sp, #16
 801bc2c:	af00      	add	r7, sp, #0
 801bc2e:	60f8      	str	r0, [r7, #12]
 801bc30:	60b9      	str	r1, [r7, #8]
 801bc32:	1dfb      	adds	r3, r7, #7
 801bc34:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801bc36:	68fb      	ldr	r3, [r7, #12]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d101      	bne.n	801bc40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801bc3c:	2302      	movs	r3, #2
 801bc3e:	e020      	b.n	801bc82 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801bc40:	68fa      	ldr	r2, [r7, #12]
 801bc42:	23ad      	movs	r3, #173	@ 0xad
 801bc44:	009b      	lsls	r3, r3, #2
 801bc46:	58d3      	ldr	r3, [r2, r3]
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d004      	beq.n	801bc56 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801bc4c:	68fa      	ldr	r2, [r7, #12]
 801bc4e:	23ad      	movs	r3, #173	@ 0xad
 801bc50:	009b      	lsls	r3, r3, #2
 801bc52:	2100      	movs	r1, #0
 801bc54:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801bc56:	68bb      	ldr	r3, [r7, #8]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d004      	beq.n	801bc66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801bc5c:	68fa      	ldr	r2, [r7, #12]
 801bc5e:	23ac      	movs	r3, #172	@ 0xac
 801bc60:	009b      	lsls	r3, r3, #2
 801bc62:	68b9      	ldr	r1, [r7, #8]
 801bc64:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801bc66:	68fa      	ldr	r2, [r7, #12]
 801bc68:	23a7      	movs	r3, #167	@ 0xa7
 801bc6a:	009b      	lsls	r3, r3, #2
 801bc6c:	2101      	movs	r1, #1
 801bc6e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	1dfa      	adds	r2, r7, #7
 801bc74:	7812      	ldrb	r2, [r2, #0]
 801bc76:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	0018      	movs	r0, r3
 801bc7c:	f001 fd0c 	bl	801d698 <USBD_LL_Init>

  return USBD_OK;
 801bc80:	2300      	movs	r3, #0
}
 801bc82:	0018      	movs	r0, r3
 801bc84:	46bd      	mov	sp, r7
 801bc86:	b004      	add	sp, #16
 801bc88:	bd80      	pop	{r7, pc}

0801bc8a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801bc8a:	b580      	push	{r7, lr}
 801bc8c:	b084      	sub	sp, #16
 801bc8e:	af00      	add	r7, sp, #0
 801bc90:	6078      	str	r0, [r7, #4]
 801bc92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801bc94:	200f      	movs	r0, #15
 801bc96:	183b      	adds	r3, r7, r0
 801bc98:	2200      	movs	r2, #0
 801bc9a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801bc9c:	683b      	ldr	r3, [r7, #0]
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d008      	beq.n	801bcb4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801bca2:	687a      	ldr	r2, [r7, #4]
 801bca4:	23ad      	movs	r3, #173	@ 0xad
 801bca6:	009b      	lsls	r3, r3, #2
 801bca8:	6839      	ldr	r1, [r7, #0]
 801bcaa:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801bcac:	183b      	adds	r3, r7, r0
 801bcae:	2200      	movs	r2, #0
 801bcb0:	701a      	strb	r2, [r3, #0]
 801bcb2:	e003      	b.n	801bcbc <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801bcb4:	230f      	movs	r3, #15
 801bcb6:	18fb      	adds	r3, r7, r3
 801bcb8:	2202      	movs	r2, #2
 801bcba:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801bcbc:	230f      	movs	r3, #15
 801bcbe:	18fb      	adds	r3, r7, r3
 801bcc0:	781b      	ldrb	r3, [r3, #0]
}
 801bcc2:	0018      	movs	r0, r3
 801bcc4:	46bd      	mov	sp, r7
 801bcc6:	b004      	add	sp, #16
 801bcc8:	bd80      	pop	{r7, pc}

0801bcca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801bcca:	b580      	push	{r7, lr}
 801bccc:	b082      	sub	sp, #8
 801bcce:	af00      	add	r7, sp, #0
 801bcd0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	0018      	movs	r0, r3
 801bcd6:	f001 fd43 	bl	801d760 <USBD_LL_Start>

  return USBD_OK;
 801bcda:	2300      	movs	r3, #0
}
 801bcdc:	0018      	movs	r0, r3
 801bcde:	46bd      	mov	sp, r7
 801bce0:	b002      	add	sp, #8
 801bce2:	bd80      	pop	{r7, pc}

0801bce4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801bce4:	b580      	push	{r7, lr}
 801bce6:	b082      	sub	sp, #8
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801bcec:	2300      	movs	r3, #0
}
 801bcee:	0018      	movs	r0, r3
 801bcf0:	46bd      	mov	sp, r7
 801bcf2:	b002      	add	sp, #8
 801bcf4:	bd80      	pop	{r7, pc}

0801bcf6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801bcf6:	b590      	push	{r4, r7, lr}
 801bcf8:	b085      	sub	sp, #20
 801bcfa:	af00      	add	r7, sp, #0
 801bcfc:	6078      	str	r0, [r7, #4]
 801bcfe:	000a      	movs	r2, r1
 801bd00:	1cfb      	adds	r3, r7, #3
 801bd02:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801bd04:	240f      	movs	r4, #15
 801bd06:	193b      	adds	r3, r7, r4
 801bd08:	2202      	movs	r2, #2
 801bd0a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801bd0c:	687a      	ldr	r2, [r7, #4]
 801bd0e:	23ad      	movs	r3, #173	@ 0xad
 801bd10:	009b      	lsls	r3, r3, #2
 801bd12:	58d3      	ldr	r3, [r2, r3]
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d00e      	beq.n	801bd36 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801bd18:	687a      	ldr	r2, [r7, #4]
 801bd1a:	23ad      	movs	r3, #173	@ 0xad
 801bd1c:	009b      	lsls	r3, r3, #2
 801bd1e:	58d3      	ldr	r3, [r2, r3]
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	1cfa      	adds	r2, r7, #3
 801bd24:	7811      	ldrb	r1, [r2, #0]
 801bd26:	687a      	ldr	r2, [r7, #4]
 801bd28:	0010      	movs	r0, r2
 801bd2a:	4798      	blx	r3
 801bd2c:	1e03      	subs	r3, r0, #0
 801bd2e:	d102      	bne.n	801bd36 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801bd30:	193b      	adds	r3, r7, r4
 801bd32:	2200      	movs	r2, #0
 801bd34:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801bd36:	230f      	movs	r3, #15
 801bd38:	18fb      	adds	r3, r7, r3
 801bd3a:	781b      	ldrb	r3, [r3, #0]
}
 801bd3c:	0018      	movs	r0, r3
 801bd3e:	46bd      	mov	sp, r7
 801bd40:	b005      	add	sp, #20
 801bd42:	bd90      	pop	{r4, r7, pc}

0801bd44 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b082      	sub	sp, #8
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
 801bd4c:	000a      	movs	r2, r1
 801bd4e:	1cfb      	adds	r3, r7, #3
 801bd50:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801bd52:	687a      	ldr	r2, [r7, #4]
 801bd54:	23ad      	movs	r3, #173	@ 0xad
 801bd56:	009b      	lsls	r3, r3, #2
 801bd58:	58d3      	ldr	r3, [r2, r3]
 801bd5a:	685b      	ldr	r3, [r3, #4]
 801bd5c:	1cfa      	adds	r2, r7, #3
 801bd5e:	7811      	ldrb	r1, [r2, #0]
 801bd60:	687a      	ldr	r2, [r7, #4]
 801bd62:	0010      	movs	r0, r2
 801bd64:	4798      	blx	r3

  return USBD_OK;
 801bd66:	2300      	movs	r3, #0
}
 801bd68:	0018      	movs	r0, r3
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	b002      	add	sp, #8
 801bd6e:	bd80      	pop	{r7, pc}

0801bd70 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b082      	sub	sp, #8
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	6078      	str	r0, [r7, #4]
 801bd78:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	22aa      	movs	r2, #170	@ 0xaa
 801bd7e:	0092      	lsls	r2, r2, #2
 801bd80:	4694      	mov	ip, r2
 801bd82:	4463      	add	r3, ip
 801bd84:	683a      	ldr	r2, [r7, #0]
 801bd86:	0011      	movs	r1, r2
 801bd88:	0018      	movs	r0, r3
 801bd8a:	f001 f810 	bl	801cdae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801bd8e:	687a      	ldr	r2, [r7, #4]
 801bd90:	23a5      	movs	r3, #165	@ 0xa5
 801bd92:	009b      	lsls	r3, r3, #2
 801bd94:	2101      	movs	r1, #1
 801bd96:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	4a23      	ldr	r2, [pc, #140]	@ (801be28 <USBD_LL_SetupStage+0xb8>)
 801bd9c:	5a9b      	ldrh	r3, [r3, r2]
 801bd9e:	0019      	movs	r1, r3
 801bda0:	687a      	ldr	r2, [r7, #4]
 801bda2:	23a6      	movs	r3, #166	@ 0xa6
 801bda4:	009b      	lsls	r3, r3, #2
 801bda6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801bda8:	687a      	ldr	r2, [r7, #4]
 801bdaa:	23aa      	movs	r3, #170	@ 0xaa
 801bdac:	009b      	lsls	r3, r3, #2
 801bdae:	5cd3      	ldrb	r3, [r2, r3]
 801bdb0:	001a      	movs	r2, r3
 801bdb2:	231f      	movs	r3, #31
 801bdb4:	4013      	ands	r3, r2
 801bdb6:	2b02      	cmp	r3, #2
 801bdb8:	d019      	beq.n	801bdee <USBD_LL_SetupStage+0x7e>
 801bdba:	d822      	bhi.n	801be02 <USBD_LL_SetupStage+0x92>
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d002      	beq.n	801bdc6 <USBD_LL_SetupStage+0x56>
 801bdc0:	2b01      	cmp	r3, #1
 801bdc2:	d00a      	beq.n	801bdda <USBD_LL_SetupStage+0x6a>
 801bdc4:	e01d      	b.n	801be02 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	22aa      	movs	r2, #170	@ 0xaa
 801bdca:	0092      	lsls	r2, r2, #2
 801bdcc:	189a      	adds	r2, r3, r2
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	0011      	movs	r1, r2
 801bdd2:	0018      	movs	r0, r3
 801bdd4:	f000 fa10 	bl	801c1f8 <USBD_StdDevReq>
      break;
 801bdd8:	e020      	b.n	801be1c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	22aa      	movs	r2, #170	@ 0xaa
 801bdde:	0092      	lsls	r2, r2, #2
 801bde0:	189a      	adds	r2, r3, r2
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	0011      	movs	r1, r2
 801bde6:	0018      	movs	r0, r3
 801bde8:	f000 fa78 	bl	801c2dc <USBD_StdItfReq>
      break;
 801bdec:	e016      	b.n	801be1c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	22aa      	movs	r2, #170	@ 0xaa
 801bdf2:	0092      	lsls	r2, r2, #2
 801bdf4:	189a      	adds	r2, r3, r2
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	0011      	movs	r1, r2
 801bdfa:	0018      	movs	r0, r3
 801bdfc:	f000 fac5 	bl	801c38a <USBD_StdEPReq>
      break;
 801be00:	e00c      	b.n	801be1c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801be02:	687a      	ldr	r2, [r7, #4]
 801be04:	23aa      	movs	r3, #170	@ 0xaa
 801be06:	009b      	lsls	r3, r3, #2
 801be08:	5cd3      	ldrb	r3, [r2, r3]
 801be0a:	227f      	movs	r2, #127	@ 0x7f
 801be0c:	4393      	bics	r3, r2
 801be0e:	b2da      	uxtb	r2, r3
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	0011      	movs	r1, r2
 801be14:	0018      	movs	r0, r3
 801be16:	f001 fd2a 	bl	801d86e <USBD_LL_StallEP>
      break;
 801be1a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801be1c:	2300      	movs	r3, #0
}
 801be1e:	0018      	movs	r0, r3
 801be20:	46bd      	mov	sp, r7
 801be22:	b002      	add	sp, #8
 801be24:	bd80      	pop	{r7, pc}
 801be26:	46c0      	nop			@ (mov r8, r8)
 801be28:	000002ae 	.word	0x000002ae

0801be2c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801be2c:	b580      	push	{r7, lr}
 801be2e:	b086      	sub	sp, #24
 801be30:	af00      	add	r7, sp, #0
 801be32:	60f8      	str	r0, [r7, #12]
 801be34:	607a      	str	r2, [r7, #4]
 801be36:	200b      	movs	r0, #11
 801be38:	183b      	adds	r3, r7, r0
 801be3a:	1c0a      	adds	r2, r1, #0
 801be3c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801be3e:	183b      	adds	r3, r7, r0
 801be40:	781b      	ldrb	r3, [r3, #0]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d154      	bne.n	801bef0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	3355      	adds	r3, #85	@ 0x55
 801be4a:	33ff      	adds	r3, #255	@ 0xff
 801be4c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801be4e:	68fa      	ldr	r2, [r7, #12]
 801be50:	23a5      	movs	r3, #165	@ 0xa5
 801be52:	009b      	lsls	r3, r3, #2
 801be54:	58d3      	ldr	r3, [r2, r3]
 801be56:	2b03      	cmp	r3, #3
 801be58:	d139      	bne.n	801bece <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801be5a:	697b      	ldr	r3, [r7, #20]
 801be5c:	68da      	ldr	r2, [r3, #12]
 801be5e:	697b      	ldr	r3, [r7, #20]
 801be60:	691b      	ldr	r3, [r3, #16]
 801be62:	429a      	cmp	r2, r3
 801be64:	d919      	bls.n	801be9a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801be66:	697b      	ldr	r3, [r7, #20]
 801be68:	68da      	ldr	r2, [r3, #12]
 801be6a:	697b      	ldr	r3, [r7, #20]
 801be6c:	691b      	ldr	r3, [r3, #16]
 801be6e:	1ad2      	subs	r2, r2, r3
 801be70:	697b      	ldr	r3, [r7, #20]
 801be72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801be74:	697b      	ldr	r3, [r7, #20]
 801be76:	68da      	ldr	r2, [r3, #12]
 801be78:	697b      	ldr	r3, [r7, #20]
 801be7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801be7c:	429a      	cmp	r2, r3
 801be7e:	d203      	bcs.n	801be88 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801be80:	697b      	ldr	r3, [r7, #20]
 801be82:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801be84:	b29b      	uxth	r3, r3
 801be86:	e002      	b.n	801be8e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801be88:	697b      	ldr	r3, [r7, #20]
 801be8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801be8c:	b29b      	uxth	r3, r3
 801be8e:	6879      	ldr	r1, [r7, #4]
 801be90:	68f8      	ldr	r0, [r7, #12]
 801be92:	001a      	movs	r2, r3
 801be94:	f001 f898 	bl	801cfc8 <USBD_CtlContinueRx>
 801be98:	e045      	b.n	801bf26 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801be9a:	68fa      	ldr	r2, [r7, #12]
 801be9c:	23ad      	movs	r3, #173	@ 0xad
 801be9e:	009b      	lsls	r3, r3, #2
 801bea0:	58d3      	ldr	r3, [r2, r3]
 801bea2:	691b      	ldr	r3, [r3, #16]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d00d      	beq.n	801bec4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bea8:	68fa      	ldr	r2, [r7, #12]
 801beaa:	23a7      	movs	r3, #167	@ 0xa7
 801beac:	009b      	lsls	r3, r3, #2
 801beae:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801beb0:	2b03      	cmp	r3, #3
 801beb2:	d107      	bne.n	801bec4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801beb4:	68fa      	ldr	r2, [r7, #12]
 801beb6:	23ad      	movs	r3, #173	@ 0xad
 801beb8:	009b      	lsls	r3, r3, #2
 801beba:	58d3      	ldr	r3, [r2, r3]
 801bebc:	691b      	ldr	r3, [r3, #16]
 801bebe:	68fa      	ldr	r2, [r7, #12]
 801bec0:	0010      	movs	r0, r2
 801bec2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801bec4:	68fb      	ldr	r3, [r7, #12]
 801bec6:	0018      	movs	r0, r3
 801bec8:	f001 f891 	bl	801cfee <USBD_CtlSendStatus>
 801becc:	e02b      	b.n	801bf26 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801bece:	68fa      	ldr	r2, [r7, #12]
 801bed0:	23a5      	movs	r3, #165	@ 0xa5
 801bed2:	009b      	lsls	r3, r3, #2
 801bed4:	58d3      	ldr	r3, [r2, r3]
 801bed6:	2b05      	cmp	r3, #5
 801bed8:	d125      	bne.n	801bf26 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801beda:	68fa      	ldr	r2, [r7, #12]
 801bedc:	23a5      	movs	r3, #165	@ 0xa5
 801bede:	009b      	lsls	r3, r3, #2
 801bee0:	2100      	movs	r1, #0
 801bee2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	2100      	movs	r1, #0
 801bee8:	0018      	movs	r0, r3
 801beea:	f001 fcc0 	bl	801d86e <USBD_LL_StallEP>
 801beee:	e01a      	b.n	801bf26 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801bef0:	68fa      	ldr	r2, [r7, #12]
 801bef2:	23ad      	movs	r3, #173	@ 0xad
 801bef4:	009b      	lsls	r3, r3, #2
 801bef6:	58d3      	ldr	r3, [r2, r3]
 801bef8:	699b      	ldr	r3, [r3, #24]
 801befa:	2b00      	cmp	r3, #0
 801befc:	d011      	beq.n	801bf22 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801befe:	68fa      	ldr	r2, [r7, #12]
 801bf00:	23a7      	movs	r3, #167	@ 0xa7
 801bf02:	009b      	lsls	r3, r3, #2
 801bf04:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801bf06:	2b03      	cmp	r3, #3
 801bf08:	d10b      	bne.n	801bf22 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801bf0a:	68fa      	ldr	r2, [r7, #12]
 801bf0c:	23ad      	movs	r3, #173	@ 0xad
 801bf0e:	009b      	lsls	r3, r3, #2
 801bf10:	58d3      	ldr	r3, [r2, r3]
 801bf12:	699b      	ldr	r3, [r3, #24]
 801bf14:	220b      	movs	r2, #11
 801bf16:	18ba      	adds	r2, r7, r2
 801bf18:	7811      	ldrb	r1, [r2, #0]
 801bf1a:	68fa      	ldr	r2, [r7, #12]
 801bf1c:	0010      	movs	r0, r2
 801bf1e:	4798      	blx	r3
 801bf20:	e001      	b.n	801bf26 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bf22:	2302      	movs	r3, #2
 801bf24:	e000      	b.n	801bf28 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801bf26:	2300      	movs	r3, #0
}
 801bf28:	0018      	movs	r0, r3
 801bf2a:	46bd      	mov	sp, r7
 801bf2c:	b006      	add	sp, #24
 801bf2e:	bd80      	pop	{r7, pc}

0801bf30 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801bf30:	b580      	push	{r7, lr}
 801bf32:	b086      	sub	sp, #24
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	60f8      	str	r0, [r7, #12]
 801bf38:	607a      	str	r2, [r7, #4]
 801bf3a:	200b      	movs	r0, #11
 801bf3c:	183b      	adds	r3, r7, r0
 801bf3e:	1c0a      	adds	r2, r1, #0
 801bf40:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bf42:	183b      	adds	r3, r7, r0
 801bf44:	781b      	ldrb	r3, [r3, #0]
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d000      	beq.n	801bf4c <USBD_LL_DataInStage+0x1c>
 801bf4a:	e08e      	b.n	801c06a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	3314      	adds	r3, #20
 801bf50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801bf52:	68fa      	ldr	r2, [r7, #12]
 801bf54:	23a5      	movs	r3, #165	@ 0xa5
 801bf56:	009b      	lsls	r3, r3, #2
 801bf58:	58d3      	ldr	r3, [r2, r3]
 801bf5a:	2b02      	cmp	r3, #2
 801bf5c:	d164      	bne.n	801c028 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801bf5e:	697b      	ldr	r3, [r7, #20]
 801bf60:	68da      	ldr	r2, [r3, #12]
 801bf62:	697b      	ldr	r3, [r7, #20]
 801bf64:	691b      	ldr	r3, [r3, #16]
 801bf66:	429a      	cmp	r2, r3
 801bf68:	d915      	bls.n	801bf96 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801bf6a:	697b      	ldr	r3, [r7, #20]
 801bf6c:	68da      	ldr	r2, [r3, #12]
 801bf6e:	697b      	ldr	r3, [r7, #20]
 801bf70:	691b      	ldr	r3, [r3, #16]
 801bf72:	1ad2      	subs	r2, r2, r3
 801bf74:	697b      	ldr	r3, [r7, #20]
 801bf76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801bf78:	697b      	ldr	r3, [r7, #20]
 801bf7a:	68db      	ldr	r3, [r3, #12]
 801bf7c:	b29a      	uxth	r2, r3
 801bf7e:	6879      	ldr	r1, [r7, #4]
 801bf80:	68fb      	ldr	r3, [r7, #12]
 801bf82:	0018      	movs	r0, r3
 801bf84:	f000 ffe9 	bl	801cf5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bf88:	68f8      	ldr	r0, [r7, #12]
 801bf8a:	2300      	movs	r3, #0
 801bf8c:	2200      	movs	r2, #0
 801bf8e:	2100      	movs	r1, #0
 801bf90:	f001 fd56 	bl	801da40 <USBD_LL_PrepareReceive>
 801bf94:	e059      	b.n	801c04a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bf96:	697b      	ldr	r3, [r7, #20]
 801bf98:	689a      	ldr	r2, [r3, #8]
 801bf9a:	697b      	ldr	r3, [r7, #20]
 801bf9c:	691b      	ldr	r3, [r3, #16]
 801bf9e:	0019      	movs	r1, r3
 801bfa0:	0010      	movs	r0, r2
 801bfa2:	f7e4 f985 	bl	80002b0 <__aeabi_uidivmod>
 801bfa6:	1e0b      	subs	r3, r1, #0
 801bfa8:	d11f      	bne.n	801bfea <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801bfaa:	697b      	ldr	r3, [r7, #20]
 801bfac:	689a      	ldr	r2, [r3, #8]
 801bfae:	697b      	ldr	r3, [r7, #20]
 801bfb0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bfb2:	429a      	cmp	r2, r3
 801bfb4:	d319      	bcc.n	801bfea <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801bfb6:	697b      	ldr	r3, [r7, #20]
 801bfb8:	689a      	ldr	r2, [r3, #8]
 801bfba:	68f9      	ldr	r1, [r7, #12]
 801bfbc:	23a6      	movs	r3, #166	@ 0xa6
 801bfbe:	009b      	lsls	r3, r3, #2
 801bfc0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801bfc2:	429a      	cmp	r2, r3
 801bfc4:	d211      	bcs.n	801bfea <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	2200      	movs	r2, #0
 801bfca:	2100      	movs	r1, #0
 801bfcc:	0018      	movs	r0, r3
 801bfce:	f000 ffc4 	bl	801cf5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bfd2:	68fa      	ldr	r2, [r7, #12]
 801bfd4:	23a6      	movs	r3, #166	@ 0xa6
 801bfd6:	009b      	lsls	r3, r3, #2
 801bfd8:	2100      	movs	r1, #0
 801bfda:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bfdc:	68f8      	ldr	r0, [r7, #12]
 801bfde:	2300      	movs	r3, #0
 801bfe0:	2200      	movs	r2, #0
 801bfe2:	2100      	movs	r1, #0
 801bfe4:	f001 fd2c 	bl	801da40 <USBD_LL_PrepareReceive>
 801bfe8:	e02f      	b.n	801c04a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bfea:	68fa      	ldr	r2, [r7, #12]
 801bfec:	23ad      	movs	r3, #173	@ 0xad
 801bfee:	009b      	lsls	r3, r3, #2
 801bff0:	58d3      	ldr	r3, [r2, r3]
 801bff2:	68db      	ldr	r3, [r3, #12]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d00d      	beq.n	801c014 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bff8:	68fa      	ldr	r2, [r7, #12]
 801bffa:	23a7      	movs	r3, #167	@ 0xa7
 801bffc:	009b      	lsls	r3, r3, #2
 801bffe:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c000:	2b03      	cmp	r3, #3
 801c002:	d107      	bne.n	801c014 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801c004:	68fa      	ldr	r2, [r7, #12]
 801c006:	23ad      	movs	r3, #173	@ 0xad
 801c008:	009b      	lsls	r3, r3, #2
 801c00a:	58d3      	ldr	r3, [r2, r3]
 801c00c:	68db      	ldr	r3, [r3, #12]
 801c00e:	68fa      	ldr	r2, [r7, #12]
 801c010:	0010      	movs	r0, r2
 801c012:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	2180      	movs	r1, #128	@ 0x80
 801c018:	0018      	movs	r0, r3
 801c01a:	f001 fc28 	bl	801d86e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801c01e:	68fb      	ldr	r3, [r7, #12]
 801c020:	0018      	movs	r0, r3
 801c022:	f000 fff8 	bl	801d016 <USBD_CtlReceiveStatus>
 801c026:	e010      	b.n	801c04a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c028:	68fa      	ldr	r2, [r7, #12]
 801c02a:	23a5      	movs	r3, #165	@ 0xa5
 801c02c:	009b      	lsls	r3, r3, #2
 801c02e:	58d3      	ldr	r3, [r2, r3]
 801c030:	2b04      	cmp	r3, #4
 801c032:	d005      	beq.n	801c040 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801c034:	68fa      	ldr	r2, [r7, #12]
 801c036:	23a5      	movs	r3, #165	@ 0xa5
 801c038:	009b      	lsls	r3, r3, #2
 801c03a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d104      	bne.n	801c04a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	2180      	movs	r1, #128	@ 0x80
 801c044:	0018      	movs	r0, r3
 801c046:	f001 fc12 	bl	801d86e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801c04a:	68fa      	ldr	r2, [r7, #12]
 801c04c:	23a8      	movs	r3, #168	@ 0xa8
 801c04e:	009b      	lsls	r3, r3, #2
 801c050:	5cd3      	ldrb	r3, [r2, r3]
 801c052:	2b01      	cmp	r3, #1
 801c054:	d124      	bne.n	801c0a0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	0018      	movs	r0, r3
 801c05a:	f7ff fe43 	bl	801bce4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801c05e:	68fa      	ldr	r2, [r7, #12]
 801c060:	23a8      	movs	r3, #168	@ 0xa8
 801c062:	009b      	lsls	r3, r3, #2
 801c064:	2100      	movs	r1, #0
 801c066:	54d1      	strb	r1, [r2, r3]
 801c068:	e01a      	b.n	801c0a0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801c06a:	68fa      	ldr	r2, [r7, #12]
 801c06c:	23ad      	movs	r3, #173	@ 0xad
 801c06e:	009b      	lsls	r3, r3, #2
 801c070:	58d3      	ldr	r3, [r2, r3]
 801c072:	695b      	ldr	r3, [r3, #20]
 801c074:	2b00      	cmp	r3, #0
 801c076:	d011      	beq.n	801c09c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c078:	68fa      	ldr	r2, [r7, #12]
 801c07a:	23a7      	movs	r3, #167	@ 0xa7
 801c07c:	009b      	lsls	r3, r3, #2
 801c07e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801c080:	2b03      	cmp	r3, #3
 801c082:	d10b      	bne.n	801c09c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801c084:	68fa      	ldr	r2, [r7, #12]
 801c086:	23ad      	movs	r3, #173	@ 0xad
 801c088:	009b      	lsls	r3, r3, #2
 801c08a:	58d3      	ldr	r3, [r2, r3]
 801c08c:	695b      	ldr	r3, [r3, #20]
 801c08e:	220b      	movs	r2, #11
 801c090:	18ba      	adds	r2, r7, r2
 801c092:	7811      	ldrb	r1, [r2, #0]
 801c094:	68fa      	ldr	r2, [r7, #12]
 801c096:	0010      	movs	r0, r2
 801c098:	4798      	blx	r3
 801c09a:	e001      	b.n	801c0a0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c09c:	2302      	movs	r3, #2
 801c09e:	e000      	b.n	801c0a2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801c0a0:	2300      	movs	r3, #0
}
 801c0a2:	0018      	movs	r0, r3
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	b006      	add	sp, #24
 801c0a8:	bd80      	pop	{r7, pc}

0801c0aa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801c0aa:	b580      	push	{r7, lr}
 801c0ac:	b082      	sub	sp, #8
 801c0ae:	af00      	add	r7, sp, #0
 801c0b0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c0b2:	6878      	ldr	r0, [r7, #4]
 801c0b4:	2340      	movs	r3, #64	@ 0x40
 801c0b6:	2200      	movs	r2, #0
 801c0b8:	2100      	movs	r1, #0
 801c0ba:	f001 fb76 	bl	801d7aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801c0be:	687a      	ldr	r2, [r7, #4]
 801c0c0:	23ac      	movs	r3, #172	@ 0xac
 801c0c2:	005b      	lsls	r3, r3, #1
 801c0c4:	2101      	movs	r1, #1
 801c0c6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c0c8:	687a      	ldr	r2, [r7, #4]
 801c0ca:	23b2      	movs	r3, #178	@ 0xb2
 801c0cc:	005b      	lsls	r3, r3, #1
 801c0ce:	2140      	movs	r1, #64	@ 0x40
 801c0d0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c0d2:	6878      	ldr	r0, [r7, #4]
 801c0d4:	2340      	movs	r3, #64	@ 0x40
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	2180      	movs	r1, #128	@ 0x80
 801c0da:	f001 fb66 	bl	801d7aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	2201      	movs	r2, #1
 801c0e2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	2240      	movs	r2, #64	@ 0x40
 801c0e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c0ea:	687a      	ldr	r2, [r7, #4]
 801c0ec:	23a7      	movs	r3, #167	@ 0xa7
 801c0ee:	009b      	lsls	r3, r3, #2
 801c0f0:	2101      	movs	r1, #1
 801c0f2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801c0f4:	687a      	ldr	r2, [r7, #4]
 801c0f6:	23a5      	movs	r3, #165	@ 0xa5
 801c0f8:	009b      	lsls	r3, r3, #2
 801c0fa:	2100      	movs	r1, #0
 801c0fc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	2200      	movs	r2, #0
 801c102:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801c104:	687a      	ldr	r2, [r7, #4]
 801c106:	23a9      	movs	r3, #169	@ 0xa9
 801c108:	009b      	lsls	r3, r3, #2
 801c10a:	2100      	movs	r1, #0
 801c10c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801c10e:	687a      	ldr	r2, [r7, #4]
 801c110:	23ae      	movs	r3, #174	@ 0xae
 801c112:	009b      	lsls	r3, r3, #2
 801c114:	58d3      	ldr	r3, [r2, r3]
 801c116:	2b00      	cmp	r3, #0
 801c118:	d00a      	beq.n	801c130 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801c11a:	687a      	ldr	r2, [r7, #4]
 801c11c:	23ad      	movs	r3, #173	@ 0xad
 801c11e:	009b      	lsls	r3, r3, #2
 801c120:	58d3      	ldr	r3, [r2, r3]
 801c122:	685a      	ldr	r2, [r3, #4]
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	685b      	ldr	r3, [r3, #4]
 801c128:	b2d9      	uxtb	r1, r3
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	0018      	movs	r0, r3
 801c12e:	4790      	blx	r2
  }

  return USBD_OK;
 801c130:	2300      	movs	r3, #0
}
 801c132:	0018      	movs	r0, r3
 801c134:	46bd      	mov	sp, r7
 801c136:	b002      	add	sp, #8
 801c138:	bd80      	pop	{r7, pc}

0801c13a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801c13a:	b580      	push	{r7, lr}
 801c13c:	b082      	sub	sp, #8
 801c13e:	af00      	add	r7, sp, #0
 801c140:	6078      	str	r0, [r7, #4]
 801c142:	000a      	movs	r2, r1
 801c144:	1cfb      	adds	r3, r7, #3
 801c146:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	1cfa      	adds	r2, r7, #3
 801c14c:	7812      	ldrb	r2, [r2, #0]
 801c14e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801c150:	2300      	movs	r3, #0
}
 801c152:	0018      	movs	r0, r3
 801c154:	46bd      	mov	sp, r7
 801c156:	b002      	add	sp, #8
 801c158:	bd80      	pop	{r7, pc}
	...

0801c15c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801c15c:	b580      	push	{r7, lr}
 801c15e:	b082      	sub	sp, #8
 801c160:	af00      	add	r7, sp, #0
 801c162:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801c164:	687a      	ldr	r2, [r7, #4]
 801c166:	23a7      	movs	r3, #167	@ 0xa7
 801c168:	009b      	lsls	r3, r3, #2
 801c16a:	5cd1      	ldrb	r1, [r2, r3]
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	4a06      	ldr	r2, [pc, #24]	@ (801c188 <USBD_LL_Suspend+0x2c>)
 801c170:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801c172:	687a      	ldr	r2, [r7, #4]
 801c174:	23a7      	movs	r3, #167	@ 0xa7
 801c176:	009b      	lsls	r3, r3, #2
 801c178:	2104      	movs	r1, #4
 801c17a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801c17c:	2300      	movs	r3, #0
}
 801c17e:	0018      	movs	r0, r3
 801c180:	46bd      	mov	sp, r7
 801c182:	b002      	add	sp, #8
 801c184:	bd80      	pop	{r7, pc}
 801c186:	46c0      	nop			@ (mov r8, r8)
 801c188:	0000029d 	.word	0x0000029d

0801c18c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801c18c:	b580      	push	{r7, lr}
 801c18e:	b082      	sub	sp, #8
 801c190:	af00      	add	r7, sp, #0
 801c192:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801c194:	687a      	ldr	r2, [r7, #4]
 801c196:	23a7      	movs	r3, #167	@ 0xa7
 801c198:	009b      	lsls	r3, r3, #2
 801c19a:	5cd3      	ldrb	r3, [r2, r3]
 801c19c:	2b04      	cmp	r3, #4
 801c19e:	d106      	bne.n	801c1ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	4a05      	ldr	r2, [pc, #20]	@ (801c1b8 <USBD_LL_Resume+0x2c>)
 801c1a4:	5c99      	ldrb	r1, [r3, r2]
 801c1a6:	687a      	ldr	r2, [r7, #4]
 801c1a8:	23a7      	movs	r3, #167	@ 0xa7
 801c1aa:	009b      	lsls	r3, r3, #2
 801c1ac:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801c1ae:	2300      	movs	r3, #0
}
 801c1b0:	0018      	movs	r0, r3
 801c1b2:	46bd      	mov	sp, r7
 801c1b4:	b002      	add	sp, #8
 801c1b6:	bd80      	pop	{r7, pc}
 801c1b8:	0000029d 	.word	0x0000029d

0801c1bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801c1bc:	b580      	push	{r7, lr}
 801c1be:	b082      	sub	sp, #8
 801c1c0:	af00      	add	r7, sp, #0
 801c1c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c1c4:	687a      	ldr	r2, [r7, #4]
 801c1c6:	23a7      	movs	r3, #167	@ 0xa7
 801c1c8:	009b      	lsls	r3, r3, #2
 801c1ca:	5cd3      	ldrb	r3, [r2, r3]
 801c1cc:	2b03      	cmp	r3, #3
 801c1ce:	d10e      	bne.n	801c1ee <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801c1d0:	687a      	ldr	r2, [r7, #4]
 801c1d2:	23ad      	movs	r3, #173	@ 0xad
 801c1d4:	009b      	lsls	r3, r3, #2
 801c1d6:	58d3      	ldr	r3, [r2, r3]
 801c1d8:	69db      	ldr	r3, [r3, #28]
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	d007      	beq.n	801c1ee <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801c1de:	687a      	ldr	r2, [r7, #4]
 801c1e0:	23ad      	movs	r3, #173	@ 0xad
 801c1e2:	009b      	lsls	r3, r3, #2
 801c1e4:	58d3      	ldr	r3, [r2, r3]
 801c1e6:	69db      	ldr	r3, [r3, #28]
 801c1e8:	687a      	ldr	r2, [r7, #4]
 801c1ea:	0010      	movs	r0, r2
 801c1ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c1ee:	2300      	movs	r3, #0
}
 801c1f0:	0018      	movs	r0, r3
 801c1f2:	46bd      	mov	sp, r7
 801c1f4:	b002      	add	sp, #8
 801c1f6:	bd80      	pop	{r7, pc}

0801c1f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801c1f8:	b580      	push	{r7, lr}
 801c1fa:	b084      	sub	sp, #16
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	6078      	str	r0, [r7, #4]
 801c200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c202:	230f      	movs	r3, #15
 801c204:	18fb      	adds	r3, r7, r3
 801c206:	2200      	movs	r2, #0
 801c208:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c20a:	683b      	ldr	r3, [r7, #0]
 801c20c:	781b      	ldrb	r3, [r3, #0]
 801c20e:	001a      	movs	r2, r3
 801c210:	2360      	movs	r3, #96	@ 0x60
 801c212:	4013      	ands	r3, r2
 801c214:	2b40      	cmp	r3, #64	@ 0x40
 801c216:	d004      	beq.n	801c222 <USBD_StdDevReq+0x2a>
 801c218:	d84f      	bhi.n	801c2ba <USBD_StdDevReq+0xc2>
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d00b      	beq.n	801c236 <USBD_StdDevReq+0x3e>
 801c21e:	2b20      	cmp	r3, #32
 801c220:	d14b      	bne.n	801c2ba <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c222:	687a      	ldr	r2, [r7, #4]
 801c224:	23ad      	movs	r3, #173	@ 0xad
 801c226:	009b      	lsls	r3, r3, #2
 801c228:	58d3      	ldr	r3, [r2, r3]
 801c22a:	689b      	ldr	r3, [r3, #8]
 801c22c:	6839      	ldr	r1, [r7, #0]
 801c22e:	687a      	ldr	r2, [r7, #4]
 801c230:	0010      	movs	r0, r2
 801c232:	4798      	blx	r3
      break;
 801c234:	e048      	b.n	801c2c8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c236:	683b      	ldr	r3, [r7, #0]
 801c238:	785b      	ldrb	r3, [r3, #1]
 801c23a:	2b09      	cmp	r3, #9
 801c23c:	d835      	bhi.n	801c2aa <USBD_StdDevReq+0xb2>
 801c23e:	009a      	lsls	r2, r3, #2
 801c240:	4b25      	ldr	r3, [pc, #148]	@ (801c2d8 <USBD_StdDevReq+0xe0>)
 801c242:	18d3      	adds	r3, r2, r3
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801c248:	683a      	ldr	r2, [r7, #0]
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	0011      	movs	r1, r2
 801c24e:	0018      	movs	r0, r3
 801c250:	f000 fa52 	bl	801c6f8 <USBD_GetDescriptor>
          break;
 801c254:	e030      	b.n	801c2b8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801c256:	683a      	ldr	r2, [r7, #0]
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	0011      	movs	r1, r2
 801c25c:	0018      	movs	r0, r3
 801c25e:	f000 fbfd 	bl	801ca5c <USBD_SetAddress>
          break;
 801c262:	e029      	b.n	801c2b8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801c264:	683a      	ldr	r2, [r7, #0]
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	0011      	movs	r1, r2
 801c26a:	0018      	movs	r0, r3
 801c26c:	f000 fc4a 	bl	801cb04 <USBD_SetConfig>
          break;
 801c270:	e022      	b.n	801c2b8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801c272:	683a      	ldr	r2, [r7, #0]
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	0011      	movs	r1, r2
 801c278:	0018      	movs	r0, r3
 801c27a:	f000 fce7 	bl	801cc4c <USBD_GetConfig>
          break;
 801c27e:	e01b      	b.n	801c2b8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801c280:	683a      	ldr	r2, [r7, #0]
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	0011      	movs	r1, r2
 801c286:	0018      	movs	r0, r3
 801c288:	f000 fd1b 	bl	801ccc2 <USBD_GetStatus>
          break;
 801c28c:	e014      	b.n	801c2b8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801c28e:	683a      	ldr	r2, [r7, #0]
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	0011      	movs	r1, r2
 801c294:	0018      	movs	r0, r3
 801c296:	f000 fd4e 	bl	801cd36 <USBD_SetFeature>
          break;
 801c29a:	e00d      	b.n	801c2b8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801c29c:	683a      	ldr	r2, [r7, #0]
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	0011      	movs	r1, r2
 801c2a2:	0018      	movs	r0, r3
 801c2a4:	f000 fd5d 	bl	801cd62 <USBD_ClrFeature>
          break;
 801c2a8:	e006      	b.n	801c2b8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801c2aa:	683a      	ldr	r2, [r7, #0]
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	0011      	movs	r1, r2
 801c2b0:	0018      	movs	r0, r3
 801c2b2:	f000 fdb4 	bl	801ce1e <USBD_CtlError>
          break;
 801c2b6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c2b8:	e006      	b.n	801c2c8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801c2ba:	683a      	ldr	r2, [r7, #0]
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	0011      	movs	r1, r2
 801c2c0:	0018      	movs	r0, r3
 801c2c2:	f000 fdac 	bl	801ce1e <USBD_CtlError>
      break;
 801c2c6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c2c8:	230f      	movs	r3, #15
 801c2ca:	18fb      	adds	r3, r7, r3
 801c2cc:	781b      	ldrb	r3, [r3, #0]
}
 801c2ce:	0018      	movs	r0, r3
 801c2d0:	46bd      	mov	sp, r7
 801c2d2:	b004      	add	sp, #16
 801c2d4:	bd80      	pop	{r7, pc}
 801c2d6:	46c0      	nop			@ (mov r8, r8)
 801c2d8:	08025d88 	.word	0x08025d88

0801c2dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801c2dc:	b5b0      	push	{r4, r5, r7, lr}
 801c2de:	b084      	sub	sp, #16
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
 801c2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c2e6:	230f      	movs	r3, #15
 801c2e8:	18fb      	adds	r3, r7, r3
 801c2ea:	2200      	movs	r2, #0
 801c2ec:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c2ee:	683b      	ldr	r3, [r7, #0]
 801c2f0:	781b      	ldrb	r3, [r3, #0]
 801c2f2:	001a      	movs	r2, r3
 801c2f4:	2360      	movs	r3, #96	@ 0x60
 801c2f6:	4013      	ands	r3, r2
 801c2f8:	2b40      	cmp	r3, #64	@ 0x40
 801c2fa:	d004      	beq.n	801c306 <USBD_StdItfReq+0x2a>
 801c2fc:	d839      	bhi.n	801c372 <USBD_StdItfReq+0x96>
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d001      	beq.n	801c306 <USBD_StdItfReq+0x2a>
 801c302:	2b20      	cmp	r3, #32
 801c304:	d135      	bne.n	801c372 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801c306:	687a      	ldr	r2, [r7, #4]
 801c308:	23a7      	movs	r3, #167	@ 0xa7
 801c30a:	009b      	lsls	r3, r3, #2
 801c30c:	5cd3      	ldrb	r3, [r2, r3]
 801c30e:	3b01      	subs	r3, #1
 801c310:	2b02      	cmp	r3, #2
 801c312:	d825      	bhi.n	801c360 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801c314:	683b      	ldr	r3, [r7, #0]
 801c316:	889b      	ldrh	r3, [r3, #4]
 801c318:	b2db      	uxtb	r3, r3
 801c31a:	2b01      	cmp	r3, #1
 801c31c:	d819      	bhi.n	801c352 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c31e:	687a      	ldr	r2, [r7, #4]
 801c320:	23ad      	movs	r3, #173	@ 0xad
 801c322:	009b      	lsls	r3, r3, #2
 801c324:	58d3      	ldr	r3, [r2, r3]
 801c326:	689b      	ldr	r3, [r3, #8]
 801c328:	250f      	movs	r5, #15
 801c32a:	197c      	adds	r4, r7, r5
 801c32c:	6839      	ldr	r1, [r7, #0]
 801c32e:	687a      	ldr	r2, [r7, #4]
 801c330:	0010      	movs	r0, r2
 801c332:	4798      	blx	r3
 801c334:	0003      	movs	r3, r0
 801c336:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	88db      	ldrh	r3, [r3, #6]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d116      	bne.n	801c36e <USBD_StdItfReq+0x92>
 801c340:	197b      	adds	r3, r7, r5
 801c342:	781b      	ldrb	r3, [r3, #0]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d112      	bne.n	801c36e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	0018      	movs	r0, r3
 801c34c:	f000 fe4f 	bl	801cfee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801c350:	e00d      	b.n	801c36e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801c352:	683a      	ldr	r2, [r7, #0]
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	0011      	movs	r1, r2
 801c358:	0018      	movs	r0, r3
 801c35a:	f000 fd60 	bl	801ce1e <USBD_CtlError>
          break;
 801c35e:	e006      	b.n	801c36e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801c360:	683a      	ldr	r2, [r7, #0]
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	0011      	movs	r1, r2
 801c366:	0018      	movs	r0, r3
 801c368:	f000 fd59 	bl	801ce1e <USBD_CtlError>
          break;
 801c36c:	e000      	b.n	801c370 <USBD_StdItfReq+0x94>
          break;
 801c36e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c370:	e006      	b.n	801c380 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801c372:	683a      	ldr	r2, [r7, #0]
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	0011      	movs	r1, r2
 801c378:	0018      	movs	r0, r3
 801c37a:	f000 fd50 	bl	801ce1e <USBD_CtlError>
      break;
 801c37e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801c380:	2300      	movs	r3, #0
}
 801c382:	0018      	movs	r0, r3
 801c384:	46bd      	mov	sp, r7
 801c386:	b004      	add	sp, #16
 801c388:	bdb0      	pop	{r4, r5, r7, pc}

0801c38a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801c38a:	b5b0      	push	{r4, r5, r7, lr}
 801c38c:	b084      	sub	sp, #16
 801c38e:	af00      	add	r7, sp, #0
 801c390:	6078      	str	r0, [r7, #4]
 801c392:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801c394:	230f      	movs	r3, #15
 801c396:	18fb      	adds	r3, r7, r3
 801c398:	2200      	movs	r2, #0
 801c39a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801c39c:	683b      	ldr	r3, [r7, #0]
 801c39e:	889a      	ldrh	r2, [r3, #4]
 801c3a0:	230e      	movs	r3, #14
 801c3a2:	18fb      	adds	r3, r7, r3
 801c3a4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c3a6:	683b      	ldr	r3, [r7, #0]
 801c3a8:	781b      	ldrb	r3, [r3, #0]
 801c3aa:	001a      	movs	r2, r3
 801c3ac:	2360      	movs	r3, #96	@ 0x60
 801c3ae:	4013      	ands	r3, r2
 801c3b0:	2b40      	cmp	r3, #64	@ 0x40
 801c3b2:	d006      	beq.n	801c3c2 <USBD_StdEPReq+0x38>
 801c3b4:	d900      	bls.n	801c3b8 <USBD_StdEPReq+0x2e>
 801c3b6:	e190      	b.n	801c6da <USBD_StdEPReq+0x350>
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d00c      	beq.n	801c3d6 <USBD_StdEPReq+0x4c>
 801c3bc:	2b20      	cmp	r3, #32
 801c3be:	d000      	beq.n	801c3c2 <USBD_StdEPReq+0x38>
 801c3c0:	e18b      	b.n	801c6da <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c3c2:	687a      	ldr	r2, [r7, #4]
 801c3c4:	23ad      	movs	r3, #173	@ 0xad
 801c3c6:	009b      	lsls	r3, r3, #2
 801c3c8:	58d3      	ldr	r3, [r2, r3]
 801c3ca:	689b      	ldr	r3, [r3, #8]
 801c3cc:	6839      	ldr	r1, [r7, #0]
 801c3ce:	687a      	ldr	r2, [r7, #4]
 801c3d0:	0010      	movs	r0, r2
 801c3d2:	4798      	blx	r3
      break;
 801c3d4:	e188      	b.n	801c6e8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801c3d6:	683b      	ldr	r3, [r7, #0]
 801c3d8:	781b      	ldrb	r3, [r3, #0]
 801c3da:	001a      	movs	r2, r3
 801c3dc:	2360      	movs	r3, #96	@ 0x60
 801c3de:	4013      	ands	r3, r2
 801c3e0:	2b20      	cmp	r3, #32
 801c3e2:	d10f      	bne.n	801c404 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c3e4:	687a      	ldr	r2, [r7, #4]
 801c3e6:	23ad      	movs	r3, #173	@ 0xad
 801c3e8:	009b      	lsls	r3, r3, #2
 801c3ea:	58d3      	ldr	r3, [r2, r3]
 801c3ec:	689b      	ldr	r3, [r3, #8]
 801c3ee:	250f      	movs	r5, #15
 801c3f0:	197c      	adds	r4, r7, r5
 801c3f2:	6839      	ldr	r1, [r7, #0]
 801c3f4:	687a      	ldr	r2, [r7, #4]
 801c3f6:	0010      	movs	r0, r2
 801c3f8:	4798      	blx	r3
 801c3fa:	0003      	movs	r3, r0
 801c3fc:	7023      	strb	r3, [r4, #0]

        return ret;
 801c3fe:	197b      	adds	r3, r7, r5
 801c400:	781b      	ldrb	r3, [r3, #0]
 801c402:	e174      	b.n	801c6ee <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801c404:	683b      	ldr	r3, [r7, #0]
 801c406:	785b      	ldrb	r3, [r3, #1]
 801c408:	2b03      	cmp	r3, #3
 801c40a:	d007      	beq.n	801c41c <USBD_StdEPReq+0x92>
 801c40c:	dd00      	ble.n	801c410 <USBD_StdEPReq+0x86>
 801c40e:	e15c      	b.n	801c6ca <USBD_StdEPReq+0x340>
 801c410:	2b00      	cmp	r3, #0
 801c412:	d100      	bne.n	801c416 <USBD_StdEPReq+0x8c>
 801c414:	e092      	b.n	801c53c <USBD_StdEPReq+0x1b2>
 801c416:	2b01      	cmp	r3, #1
 801c418:	d04b      	beq.n	801c4b2 <USBD_StdEPReq+0x128>
 801c41a:	e156      	b.n	801c6ca <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801c41c:	687a      	ldr	r2, [r7, #4]
 801c41e:	23a7      	movs	r3, #167	@ 0xa7
 801c420:	009b      	lsls	r3, r3, #2
 801c422:	5cd3      	ldrb	r3, [r2, r3]
 801c424:	2b02      	cmp	r3, #2
 801c426:	d002      	beq.n	801c42e <USBD_StdEPReq+0xa4>
 801c428:	2b03      	cmp	r3, #3
 801c42a:	d01d      	beq.n	801c468 <USBD_StdEPReq+0xde>
 801c42c:	e039      	b.n	801c4a2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c42e:	220e      	movs	r2, #14
 801c430:	18bb      	adds	r3, r7, r2
 801c432:	781b      	ldrb	r3, [r3, #0]
 801c434:	2b00      	cmp	r3, #0
 801c436:	d010      	beq.n	801c45a <USBD_StdEPReq+0xd0>
 801c438:	18bb      	adds	r3, r7, r2
 801c43a:	781b      	ldrb	r3, [r3, #0]
 801c43c:	2b80      	cmp	r3, #128	@ 0x80
 801c43e:	d00c      	beq.n	801c45a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c440:	18bb      	adds	r3, r7, r2
 801c442:	781a      	ldrb	r2, [r3, #0]
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	0011      	movs	r1, r2
 801c448:	0018      	movs	r0, r3
 801c44a:	f001 fa10 	bl	801d86e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	2180      	movs	r1, #128	@ 0x80
 801c452:	0018      	movs	r0, r3
 801c454:	f001 fa0b 	bl	801d86e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c458:	e02a      	b.n	801c4b0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801c45a:	683a      	ldr	r2, [r7, #0]
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	0011      	movs	r1, r2
 801c460:	0018      	movs	r0, r3
 801c462:	f000 fcdc 	bl	801ce1e <USBD_CtlError>
              break;
 801c466:	e023      	b.n	801c4b0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c468:	683b      	ldr	r3, [r7, #0]
 801c46a:	885b      	ldrh	r3, [r3, #2]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d113      	bne.n	801c498 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801c470:	220e      	movs	r2, #14
 801c472:	18bb      	adds	r3, r7, r2
 801c474:	781b      	ldrb	r3, [r3, #0]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d00e      	beq.n	801c498 <USBD_StdEPReq+0x10e>
 801c47a:	18bb      	adds	r3, r7, r2
 801c47c:	781b      	ldrb	r3, [r3, #0]
 801c47e:	2b80      	cmp	r3, #128	@ 0x80
 801c480:	d00a      	beq.n	801c498 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801c482:	683b      	ldr	r3, [r7, #0]
 801c484:	88db      	ldrh	r3, [r3, #6]
 801c486:	2b00      	cmp	r3, #0
 801c488:	d106      	bne.n	801c498 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801c48a:	18bb      	adds	r3, r7, r2
 801c48c:	781a      	ldrb	r2, [r3, #0]
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	0011      	movs	r1, r2
 801c492:	0018      	movs	r0, r3
 801c494:	f001 f9eb 	bl	801d86e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	0018      	movs	r0, r3
 801c49c:	f000 fda7 	bl	801cfee <USBD_CtlSendStatus>

              break;
 801c4a0:	e006      	b.n	801c4b0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801c4a2:	683a      	ldr	r2, [r7, #0]
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	0011      	movs	r1, r2
 801c4a8:	0018      	movs	r0, r3
 801c4aa:	f000 fcb8 	bl	801ce1e <USBD_CtlError>
              break;
 801c4ae:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c4b0:	e112      	b.n	801c6d8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c4b2:	687a      	ldr	r2, [r7, #4]
 801c4b4:	23a7      	movs	r3, #167	@ 0xa7
 801c4b6:	009b      	lsls	r3, r3, #2
 801c4b8:	5cd3      	ldrb	r3, [r2, r3]
 801c4ba:	2b02      	cmp	r3, #2
 801c4bc:	d002      	beq.n	801c4c4 <USBD_StdEPReq+0x13a>
 801c4be:	2b03      	cmp	r3, #3
 801c4c0:	d01d      	beq.n	801c4fe <USBD_StdEPReq+0x174>
 801c4c2:	e032      	b.n	801c52a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c4c4:	220e      	movs	r2, #14
 801c4c6:	18bb      	adds	r3, r7, r2
 801c4c8:	781b      	ldrb	r3, [r3, #0]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d010      	beq.n	801c4f0 <USBD_StdEPReq+0x166>
 801c4ce:	18bb      	adds	r3, r7, r2
 801c4d0:	781b      	ldrb	r3, [r3, #0]
 801c4d2:	2b80      	cmp	r3, #128	@ 0x80
 801c4d4:	d00c      	beq.n	801c4f0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c4d6:	18bb      	adds	r3, r7, r2
 801c4d8:	781a      	ldrb	r2, [r3, #0]
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	0011      	movs	r1, r2
 801c4de:	0018      	movs	r0, r3
 801c4e0:	f001 f9c5 	bl	801d86e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	2180      	movs	r1, #128	@ 0x80
 801c4e8:	0018      	movs	r0, r3
 801c4ea:	f001 f9c0 	bl	801d86e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c4ee:	e024      	b.n	801c53a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801c4f0:	683a      	ldr	r2, [r7, #0]
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	0011      	movs	r1, r2
 801c4f6:	0018      	movs	r0, r3
 801c4f8:	f000 fc91 	bl	801ce1e <USBD_CtlError>
              break;
 801c4fc:	e01d      	b.n	801c53a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c4fe:	683b      	ldr	r3, [r7, #0]
 801c500:	885b      	ldrh	r3, [r3, #2]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d118      	bne.n	801c538 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c506:	210e      	movs	r1, #14
 801c508:	187b      	adds	r3, r7, r1
 801c50a:	781b      	ldrb	r3, [r3, #0]
 801c50c:	227f      	movs	r2, #127	@ 0x7f
 801c50e:	4013      	ands	r3, r2
 801c510:	d006      	beq.n	801c520 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c512:	187b      	adds	r3, r7, r1
 801c514:	781a      	ldrb	r2, [r3, #0]
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	0011      	movs	r1, r2
 801c51a:	0018      	movs	r0, r3
 801c51c:	f001 f9d2 	bl	801d8c4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	0018      	movs	r0, r3
 801c524:	f000 fd63 	bl	801cfee <USBD_CtlSendStatus>
              }
              break;
 801c528:	e006      	b.n	801c538 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c52a:	683a      	ldr	r2, [r7, #0]
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	0011      	movs	r1, r2
 801c530:	0018      	movs	r0, r3
 801c532:	f000 fc74 	bl	801ce1e <USBD_CtlError>
              break;
 801c536:	e000      	b.n	801c53a <USBD_StdEPReq+0x1b0>
              break;
 801c538:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c53a:	e0cd      	b.n	801c6d8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c53c:	687a      	ldr	r2, [r7, #4]
 801c53e:	23a7      	movs	r3, #167	@ 0xa7
 801c540:	009b      	lsls	r3, r3, #2
 801c542:	5cd3      	ldrb	r3, [r2, r3]
 801c544:	2b02      	cmp	r3, #2
 801c546:	d002      	beq.n	801c54e <USBD_StdEPReq+0x1c4>
 801c548:	2b03      	cmp	r3, #3
 801c54a:	d03c      	beq.n	801c5c6 <USBD_StdEPReq+0x23c>
 801c54c:	e0b5      	b.n	801c6ba <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c54e:	220e      	movs	r2, #14
 801c550:	18bb      	adds	r3, r7, r2
 801c552:	781b      	ldrb	r3, [r3, #0]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d00a      	beq.n	801c56e <USBD_StdEPReq+0x1e4>
 801c558:	18bb      	adds	r3, r7, r2
 801c55a:	781b      	ldrb	r3, [r3, #0]
 801c55c:	2b80      	cmp	r3, #128	@ 0x80
 801c55e:	d006      	beq.n	801c56e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c560:	683a      	ldr	r2, [r7, #0]
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	0011      	movs	r1, r2
 801c566:	0018      	movs	r0, r3
 801c568:	f000 fc59 	bl	801ce1e <USBD_CtlError>
                break;
 801c56c:	e0ac      	b.n	801c6c8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c56e:	220e      	movs	r2, #14
 801c570:	18bb      	adds	r3, r7, r2
 801c572:	781b      	ldrb	r3, [r3, #0]
 801c574:	b25b      	sxtb	r3, r3
 801c576:	2b00      	cmp	r3, #0
 801c578:	da0c      	bge.n	801c594 <USBD_StdEPReq+0x20a>
 801c57a:	18bb      	adds	r3, r7, r2
 801c57c:	781b      	ldrb	r3, [r3, #0]
 801c57e:	227f      	movs	r2, #127	@ 0x7f
 801c580:	401a      	ands	r2, r3
 801c582:	0013      	movs	r3, r2
 801c584:	009b      	lsls	r3, r3, #2
 801c586:	189b      	adds	r3, r3, r2
 801c588:	009b      	lsls	r3, r3, #2
 801c58a:	3310      	adds	r3, #16
 801c58c:	687a      	ldr	r2, [r7, #4]
 801c58e:	18d3      	adds	r3, r2, r3
 801c590:	3304      	adds	r3, #4
 801c592:	e00d      	b.n	801c5b0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c594:	230e      	movs	r3, #14
 801c596:	18fb      	adds	r3, r7, r3
 801c598:	781b      	ldrb	r3, [r3, #0]
 801c59a:	227f      	movs	r2, #127	@ 0x7f
 801c59c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c59e:	0013      	movs	r3, r2
 801c5a0:	009b      	lsls	r3, r3, #2
 801c5a2:	189b      	adds	r3, r3, r2
 801c5a4:	009b      	lsls	r3, r3, #2
 801c5a6:	3351      	adds	r3, #81	@ 0x51
 801c5a8:	33ff      	adds	r3, #255	@ 0xff
 801c5aa:	687a      	ldr	r2, [r7, #4]
 801c5ac:	18d3      	adds	r3, r2, r3
 801c5ae:	3304      	adds	r3, #4
 801c5b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c5b2:	68bb      	ldr	r3, [r7, #8]
 801c5b4:	2200      	movs	r2, #0
 801c5b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c5b8:	68b9      	ldr	r1, [r7, #8]
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	2202      	movs	r2, #2
 801c5be:	0018      	movs	r0, r3
 801c5c0:	f000 fcab 	bl	801cf1a <USBD_CtlSendData>
              break;
 801c5c4:	e080      	b.n	801c6c8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c5c6:	220e      	movs	r2, #14
 801c5c8:	18bb      	adds	r3, r7, r2
 801c5ca:	781b      	ldrb	r3, [r3, #0]
 801c5cc:	b25b      	sxtb	r3, r3
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	da14      	bge.n	801c5fc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c5d2:	18bb      	adds	r3, r7, r2
 801c5d4:	781b      	ldrb	r3, [r3, #0]
 801c5d6:	220f      	movs	r2, #15
 801c5d8:	401a      	ands	r2, r3
 801c5da:	6879      	ldr	r1, [r7, #4]
 801c5dc:	0013      	movs	r3, r2
 801c5de:	009b      	lsls	r3, r3, #2
 801c5e0:	189b      	adds	r3, r3, r2
 801c5e2:	009b      	lsls	r3, r3, #2
 801c5e4:	18cb      	adds	r3, r1, r3
 801c5e6:	3318      	adds	r3, #24
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d11e      	bne.n	801c62c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c5ee:	683a      	ldr	r2, [r7, #0]
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	0011      	movs	r1, r2
 801c5f4:	0018      	movs	r0, r3
 801c5f6:	f000 fc12 	bl	801ce1e <USBD_CtlError>
                  break;
 801c5fa:	e065      	b.n	801c6c8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c5fc:	230e      	movs	r3, #14
 801c5fe:	18fb      	adds	r3, r7, r3
 801c600:	781b      	ldrb	r3, [r3, #0]
 801c602:	220f      	movs	r2, #15
 801c604:	401a      	ands	r2, r3
 801c606:	6878      	ldr	r0, [r7, #4]
 801c608:	23ac      	movs	r3, #172	@ 0xac
 801c60a:	0059      	lsls	r1, r3, #1
 801c60c:	0013      	movs	r3, r2
 801c60e:	009b      	lsls	r3, r3, #2
 801c610:	189b      	adds	r3, r3, r2
 801c612:	009b      	lsls	r3, r3, #2
 801c614:	18c3      	adds	r3, r0, r3
 801c616:	185b      	adds	r3, r3, r1
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d106      	bne.n	801c62c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c61e:	683a      	ldr	r2, [r7, #0]
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	0011      	movs	r1, r2
 801c624:	0018      	movs	r0, r3
 801c626:	f000 fbfa 	bl	801ce1e <USBD_CtlError>
                  break;
 801c62a:	e04d      	b.n	801c6c8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c62c:	220e      	movs	r2, #14
 801c62e:	18bb      	adds	r3, r7, r2
 801c630:	781b      	ldrb	r3, [r3, #0]
 801c632:	b25b      	sxtb	r3, r3
 801c634:	2b00      	cmp	r3, #0
 801c636:	da0c      	bge.n	801c652 <USBD_StdEPReq+0x2c8>
 801c638:	18bb      	adds	r3, r7, r2
 801c63a:	781b      	ldrb	r3, [r3, #0]
 801c63c:	227f      	movs	r2, #127	@ 0x7f
 801c63e:	401a      	ands	r2, r3
 801c640:	0013      	movs	r3, r2
 801c642:	009b      	lsls	r3, r3, #2
 801c644:	189b      	adds	r3, r3, r2
 801c646:	009b      	lsls	r3, r3, #2
 801c648:	3310      	adds	r3, #16
 801c64a:	687a      	ldr	r2, [r7, #4]
 801c64c:	18d3      	adds	r3, r2, r3
 801c64e:	3304      	adds	r3, #4
 801c650:	e00d      	b.n	801c66e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c652:	230e      	movs	r3, #14
 801c654:	18fb      	adds	r3, r7, r3
 801c656:	781b      	ldrb	r3, [r3, #0]
 801c658:	227f      	movs	r2, #127	@ 0x7f
 801c65a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c65c:	0013      	movs	r3, r2
 801c65e:	009b      	lsls	r3, r3, #2
 801c660:	189b      	adds	r3, r3, r2
 801c662:	009b      	lsls	r3, r3, #2
 801c664:	3351      	adds	r3, #81	@ 0x51
 801c666:	33ff      	adds	r3, #255	@ 0xff
 801c668:	687a      	ldr	r2, [r7, #4]
 801c66a:	18d3      	adds	r3, r2, r3
 801c66c:	3304      	adds	r3, #4
 801c66e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c670:	220e      	movs	r2, #14
 801c672:	18bb      	adds	r3, r7, r2
 801c674:	781b      	ldrb	r3, [r3, #0]
 801c676:	2b00      	cmp	r3, #0
 801c678:	d003      	beq.n	801c682 <USBD_StdEPReq+0x2f8>
 801c67a:	18bb      	adds	r3, r7, r2
 801c67c:	781b      	ldrb	r3, [r3, #0]
 801c67e:	2b80      	cmp	r3, #128	@ 0x80
 801c680:	d103      	bne.n	801c68a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c682:	68bb      	ldr	r3, [r7, #8]
 801c684:	2200      	movs	r2, #0
 801c686:	601a      	str	r2, [r3, #0]
 801c688:	e010      	b.n	801c6ac <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c68a:	230e      	movs	r3, #14
 801c68c:	18fb      	adds	r3, r7, r3
 801c68e:	781a      	ldrb	r2, [r3, #0]
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	0011      	movs	r1, r2
 801c694:	0018      	movs	r0, r3
 801c696:	f001 f940 	bl	801d91a <USBD_LL_IsStallEP>
 801c69a:	1e03      	subs	r3, r0, #0
 801c69c:	d003      	beq.n	801c6a6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c69e:	68bb      	ldr	r3, [r7, #8]
 801c6a0:	2201      	movs	r2, #1
 801c6a2:	601a      	str	r2, [r3, #0]
 801c6a4:	e002      	b.n	801c6ac <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c6a6:	68bb      	ldr	r3, [r7, #8]
 801c6a8:	2200      	movs	r2, #0
 801c6aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c6ac:	68b9      	ldr	r1, [r7, #8]
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	2202      	movs	r2, #2
 801c6b2:	0018      	movs	r0, r3
 801c6b4:	f000 fc31 	bl	801cf1a <USBD_CtlSendData>
              break;
 801c6b8:	e006      	b.n	801c6c8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c6ba:	683a      	ldr	r2, [r7, #0]
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	0011      	movs	r1, r2
 801c6c0:	0018      	movs	r0, r3
 801c6c2:	f000 fbac 	bl	801ce1e <USBD_CtlError>
              break;
 801c6c6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c6c8:	e006      	b.n	801c6d8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c6ca:	683a      	ldr	r2, [r7, #0]
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	0011      	movs	r1, r2
 801c6d0:	0018      	movs	r0, r3
 801c6d2:	f000 fba4 	bl	801ce1e <USBD_CtlError>
          break;
 801c6d6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c6d8:	e006      	b.n	801c6e8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c6da:	683a      	ldr	r2, [r7, #0]
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	0011      	movs	r1, r2
 801c6e0:	0018      	movs	r0, r3
 801c6e2:	f000 fb9c 	bl	801ce1e <USBD_CtlError>
      break;
 801c6e6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c6e8:	230f      	movs	r3, #15
 801c6ea:	18fb      	adds	r3, r7, r3
 801c6ec:	781b      	ldrb	r3, [r3, #0]
}
 801c6ee:	0018      	movs	r0, r3
 801c6f0:	46bd      	mov	sp, r7
 801c6f2:	b004      	add	sp, #16
 801c6f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c6f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c6f8:	b580      	push	{r7, lr}
 801c6fa:	b084      	sub	sp, #16
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	6078      	str	r0, [r7, #4]
 801c700:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c702:	2308      	movs	r3, #8
 801c704:	18fb      	adds	r3, r7, r3
 801c706:	2200      	movs	r2, #0
 801c708:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c70a:	2300      	movs	r3, #0
 801c70c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c70e:	230b      	movs	r3, #11
 801c710:	18fb      	adds	r3, r7, r3
 801c712:	2200      	movs	r2, #0
 801c714:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c716:	683b      	ldr	r3, [r7, #0]
 801c718:	885b      	ldrh	r3, [r3, #2]
 801c71a:	0a1b      	lsrs	r3, r3, #8
 801c71c:	b29b      	uxth	r3, r3
 801c71e:	2b07      	cmp	r3, #7
 801c720:	d900      	bls.n	801c724 <USBD_GetDescriptor+0x2c>
 801c722:	e159      	b.n	801c9d8 <USBD_GetDescriptor+0x2e0>
 801c724:	009a      	lsls	r2, r3, #2
 801c726:	4bcb      	ldr	r3, [pc, #812]	@ (801ca54 <USBD_GetDescriptor+0x35c>)
 801c728:	18d3      	adds	r3, r2, r3
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c72e:	687a      	ldr	r2, [r7, #4]
 801c730:	23ac      	movs	r3, #172	@ 0xac
 801c732:	009b      	lsls	r3, r3, #2
 801c734:	58d3      	ldr	r3, [r2, r3]
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	687a      	ldr	r2, [r7, #4]
 801c73a:	7c12      	ldrb	r2, [r2, #16]
 801c73c:	2108      	movs	r1, #8
 801c73e:	1879      	adds	r1, r7, r1
 801c740:	0010      	movs	r0, r2
 801c742:	4798      	blx	r3
 801c744:	0003      	movs	r3, r0
 801c746:	60fb      	str	r3, [r7, #12]
      break;
 801c748:	e153      	b.n	801c9f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	7c1b      	ldrb	r3, [r3, #16]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d10f      	bne.n	801c772 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c752:	687a      	ldr	r2, [r7, #4]
 801c754:	23ad      	movs	r3, #173	@ 0xad
 801c756:	009b      	lsls	r3, r3, #2
 801c758:	58d3      	ldr	r3, [r2, r3]
 801c75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c75c:	2208      	movs	r2, #8
 801c75e:	18ba      	adds	r2, r7, r2
 801c760:	0010      	movs	r0, r2
 801c762:	4798      	blx	r3
 801c764:	0003      	movs	r3, r0
 801c766:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	3301      	adds	r3, #1
 801c76c:	2202      	movs	r2, #2
 801c76e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c770:	e13f      	b.n	801c9f2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c772:	687a      	ldr	r2, [r7, #4]
 801c774:	23ad      	movs	r3, #173	@ 0xad
 801c776:	009b      	lsls	r3, r3, #2
 801c778:	58d3      	ldr	r3, [r2, r3]
 801c77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c77c:	2208      	movs	r2, #8
 801c77e:	18ba      	adds	r2, r7, r2
 801c780:	0010      	movs	r0, r2
 801c782:	4798      	blx	r3
 801c784:	0003      	movs	r3, r0
 801c786:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	3301      	adds	r3, #1
 801c78c:	2202      	movs	r2, #2
 801c78e:	701a      	strb	r2, [r3, #0]
      break;
 801c790:	e12f      	b.n	801c9f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c792:	683b      	ldr	r3, [r7, #0]
 801c794:	885b      	ldrh	r3, [r3, #2]
 801c796:	b2db      	uxtb	r3, r3
 801c798:	2b05      	cmp	r3, #5
 801c79a:	d900      	bls.n	801c79e <USBD_GetDescriptor+0xa6>
 801c79c:	e0d0      	b.n	801c940 <USBD_GetDescriptor+0x248>
 801c79e:	009a      	lsls	r2, r3, #2
 801c7a0:	4bad      	ldr	r3, [pc, #692]	@ (801ca58 <USBD_GetDescriptor+0x360>)
 801c7a2:	18d3      	adds	r3, r2, r3
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c7a8:	687a      	ldr	r2, [r7, #4]
 801c7aa:	23ac      	movs	r3, #172	@ 0xac
 801c7ac:	009b      	lsls	r3, r3, #2
 801c7ae:	58d3      	ldr	r3, [r2, r3]
 801c7b0:	685b      	ldr	r3, [r3, #4]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d00d      	beq.n	801c7d2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c7b6:	687a      	ldr	r2, [r7, #4]
 801c7b8:	23ac      	movs	r3, #172	@ 0xac
 801c7ba:	009b      	lsls	r3, r3, #2
 801c7bc:	58d3      	ldr	r3, [r2, r3]
 801c7be:	685b      	ldr	r3, [r3, #4]
 801c7c0:	687a      	ldr	r2, [r7, #4]
 801c7c2:	7c12      	ldrb	r2, [r2, #16]
 801c7c4:	2108      	movs	r1, #8
 801c7c6:	1879      	adds	r1, r7, r1
 801c7c8:	0010      	movs	r0, r2
 801c7ca:	4798      	blx	r3
 801c7cc:	0003      	movs	r3, r0
 801c7ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c7d0:	e0c3      	b.n	801c95a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c7d2:	683a      	ldr	r2, [r7, #0]
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	0011      	movs	r1, r2
 801c7d8:	0018      	movs	r0, r3
 801c7da:	f000 fb20 	bl	801ce1e <USBD_CtlError>
            err++;
 801c7de:	210b      	movs	r1, #11
 801c7e0:	187b      	adds	r3, r7, r1
 801c7e2:	781a      	ldrb	r2, [r3, #0]
 801c7e4:	187b      	adds	r3, r7, r1
 801c7e6:	3201      	adds	r2, #1
 801c7e8:	701a      	strb	r2, [r3, #0]
          break;
 801c7ea:	e0b6      	b.n	801c95a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c7ec:	687a      	ldr	r2, [r7, #4]
 801c7ee:	23ac      	movs	r3, #172	@ 0xac
 801c7f0:	009b      	lsls	r3, r3, #2
 801c7f2:	58d3      	ldr	r3, [r2, r3]
 801c7f4:	689b      	ldr	r3, [r3, #8]
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d00d      	beq.n	801c816 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c7fa:	687a      	ldr	r2, [r7, #4]
 801c7fc:	23ac      	movs	r3, #172	@ 0xac
 801c7fe:	009b      	lsls	r3, r3, #2
 801c800:	58d3      	ldr	r3, [r2, r3]
 801c802:	689b      	ldr	r3, [r3, #8]
 801c804:	687a      	ldr	r2, [r7, #4]
 801c806:	7c12      	ldrb	r2, [r2, #16]
 801c808:	2108      	movs	r1, #8
 801c80a:	1879      	adds	r1, r7, r1
 801c80c:	0010      	movs	r0, r2
 801c80e:	4798      	blx	r3
 801c810:	0003      	movs	r3, r0
 801c812:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c814:	e0a1      	b.n	801c95a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c816:	683a      	ldr	r2, [r7, #0]
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	0011      	movs	r1, r2
 801c81c:	0018      	movs	r0, r3
 801c81e:	f000 fafe 	bl	801ce1e <USBD_CtlError>
            err++;
 801c822:	210b      	movs	r1, #11
 801c824:	187b      	adds	r3, r7, r1
 801c826:	781a      	ldrb	r2, [r3, #0]
 801c828:	187b      	adds	r3, r7, r1
 801c82a:	3201      	adds	r2, #1
 801c82c:	701a      	strb	r2, [r3, #0]
          break;
 801c82e:	e094      	b.n	801c95a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c830:	687a      	ldr	r2, [r7, #4]
 801c832:	23ac      	movs	r3, #172	@ 0xac
 801c834:	009b      	lsls	r3, r3, #2
 801c836:	58d3      	ldr	r3, [r2, r3]
 801c838:	68db      	ldr	r3, [r3, #12]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d00d      	beq.n	801c85a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c83e:	687a      	ldr	r2, [r7, #4]
 801c840:	23ac      	movs	r3, #172	@ 0xac
 801c842:	009b      	lsls	r3, r3, #2
 801c844:	58d3      	ldr	r3, [r2, r3]
 801c846:	68db      	ldr	r3, [r3, #12]
 801c848:	687a      	ldr	r2, [r7, #4]
 801c84a:	7c12      	ldrb	r2, [r2, #16]
 801c84c:	2108      	movs	r1, #8
 801c84e:	1879      	adds	r1, r7, r1
 801c850:	0010      	movs	r0, r2
 801c852:	4798      	blx	r3
 801c854:	0003      	movs	r3, r0
 801c856:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c858:	e07f      	b.n	801c95a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c85a:	683a      	ldr	r2, [r7, #0]
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	0011      	movs	r1, r2
 801c860:	0018      	movs	r0, r3
 801c862:	f000 fadc 	bl	801ce1e <USBD_CtlError>
            err++;
 801c866:	210b      	movs	r1, #11
 801c868:	187b      	adds	r3, r7, r1
 801c86a:	781a      	ldrb	r2, [r3, #0]
 801c86c:	187b      	adds	r3, r7, r1
 801c86e:	3201      	adds	r2, #1
 801c870:	701a      	strb	r2, [r3, #0]
          break;
 801c872:	e072      	b.n	801c95a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c874:	687a      	ldr	r2, [r7, #4]
 801c876:	23ac      	movs	r3, #172	@ 0xac
 801c878:	009b      	lsls	r3, r3, #2
 801c87a:	58d3      	ldr	r3, [r2, r3]
 801c87c:	691b      	ldr	r3, [r3, #16]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d00d      	beq.n	801c89e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c882:	687a      	ldr	r2, [r7, #4]
 801c884:	23ac      	movs	r3, #172	@ 0xac
 801c886:	009b      	lsls	r3, r3, #2
 801c888:	58d3      	ldr	r3, [r2, r3]
 801c88a:	691b      	ldr	r3, [r3, #16]
 801c88c:	687a      	ldr	r2, [r7, #4]
 801c88e:	7c12      	ldrb	r2, [r2, #16]
 801c890:	2108      	movs	r1, #8
 801c892:	1879      	adds	r1, r7, r1
 801c894:	0010      	movs	r0, r2
 801c896:	4798      	blx	r3
 801c898:	0003      	movs	r3, r0
 801c89a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c89c:	e05d      	b.n	801c95a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c89e:	683a      	ldr	r2, [r7, #0]
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	0011      	movs	r1, r2
 801c8a4:	0018      	movs	r0, r3
 801c8a6:	f000 faba 	bl	801ce1e <USBD_CtlError>
            err++;
 801c8aa:	210b      	movs	r1, #11
 801c8ac:	187b      	adds	r3, r7, r1
 801c8ae:	781a      	ldrb	r2, [r3, #0]
 801c8b0:	187b      	adds	r3, r7, r1
 801c8b2:	3201      	adds	r2, #1
 801c8b4:	701a      	strb	r2, [r3, #0]
          break;
 801c8b6:	e050      	b.n	801c95a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c8b8:	687a      	ldr	r2, [r7, #4]
 801c8ba:	23ac      	movs	r3, #172	@ 0xac
 801c8bc:	009b      	lsls	r3, r3, #2
 801c8be:	58d3      	ldr	r3, [r2, r3]
 801c8c0:	695b      	ldr	r3, [r3, #20]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d00d      	beq.n	801c8e2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c8c6:	687a      	ldr	r2, [r7, #4]
 801c8c8:	23ac      	movs	r3, #172	@ 0xac
 801c8ca:	009b      	lsls	r3, r3, #2
 801c8cc:	58d3      	ldr	r3, [r2, r3]
 801c8ce:	695b      	ldr	r3, [r3, #20]
 801c8d0:	687a      	ldr	r2, [r7, #4]
 801c8d2:	7c12      	ldrb	r2, [r2, #16]
 801c8d4:	2108      	movs	r1, #8
 801c8d6:	1879      	adds	r1, r7, r1
 801c8d8:	0010      	movs	r0, r2
 801c8da:	4798      	blx	r3
 801c8dc:	0003      	movs	r3, r0
 801c8de:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c8e0:	e03b      	b.n	801c95a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c8e2:	683a      	ldr	r2, [r7, #0]
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	0011      	movs	r1, r2
 801c8e8:	0018      	movs	r0, r3
 801c8ea:	f000 fa98 	bl	801ce1e <USBD_CtlError>
            err++;
 801c8ee:	210b      	movs	r1, #11
 801c8f0:	187b      	adds	r3, r7, r1
 801c8f2:	781a      	ldrb	r2, [r3, #0]
 801c8f4:	187b      	adds	r3, r7, r1
 801c8f6:	3201      	adds	r2, #1
 801c8f8:	701a      	strb	r2, [r3, #0]
          break;
 801c8fa:	e02e      	b.n	801c95a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c8fc:	687a      	ldr	r2, [r7, #4]
 801c8fe:	23ac      	movs	r3, #172	@ 0xac
 801c900:	009b      	lsls	r3, r3, #2
 801c902:	58d3      	ldr	r3, [r2, r3]
 801c904:	699b      	ldr	r3, [r3, #24]
 801c906:	2b00      	cmp	r3, #0
 801c908:	d00d      	beq.n	801c926 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c90a:	687a      	ldr	r2, [r7, #4]
 801c90c:	23ac      	movs	r3, #172	@ 0xac
 801c90e:	009b      	lsls	r3, r3, #2
 801c910:	58d3      	ldr	r3, [r2, r3]
 801c912:	699b      	ldr	r3, [r3, #24]
 801c914:	687a      	ldr	r2, [r7, #4]
 801c916:	7c12      	ldrb	r2, [r2, #16]
 801c918:	2108      	movs	r1, #8
 801c91a:	1879      	adds	r1, r7, r1
 801c91c:	0010      	movs	r0, r2
 801c91e:	4798      	blx	r3
 801c920:	0003      	movs	r3, r0
 801c922:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c924:	e019      	b.n	801c95a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c926:	683a      	ldr	r2, [r7, #0]
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	0011      	movs	r1, r2
 801c92c:	0018      	movs	r0, r3
 801c92e:	f000 fa76 	bl	801ce1e <USBD_CtlError>
            err++;
 801c932:	210b      	movs	r1, #11
 801c934:	187b      	adds	r3, r7, r1
 801c936:	781a      	ldrb	r2, [r3, #0]
 801c938:	187b      	adds	r3, r7, r1
 801c93a:	3201      	adds	r2, #1
 801c93c:	701a      	strb	r2, [r3, #0]
          break;
 801c93e:	e00c      	b.n	801c95a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c940:	683a      	ldr	r2, [r7, #0]
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	0011      	movs	r1, r2
 801c946:	0018      	movs	r0, r3
 801c948:	f000 fa69 	bl	801ce1e <USBD_CtlError>
          err++;
 801c94c:	210b      	movs	r1, #11
 801c94e:	187b      	adds	r3, r7, r1
 801c950:	781a      	ldrb	r2, [r3, #0]
 801c952:	187b      	adds	r3, r7, r1
 801c954:	3201      	adds	r2, #1
 801c956:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c958:	e04b      	b.n	801c9f2 <USBD_GetDescriptor+0x2fa>
 801c95a:	e04a      	b.n	801c9f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	7c1b      	ldrb	r3, [r3, #16]
 801c960:	2b00      	cmp	r3, #0
 801c962:	d10b      	bne.n	801c97c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c964:	687a      	ldr	r2, [r7, #4]
 801c966:	23ad      	movs	r3, #173	@ 0xad
 801c968:	009b      	lsls	r3, r3, #2
 801c96a:	58d3      	ldr	r3, [r2, r3]
 801c96c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c96e:	2208      	movs	r2, #8
 801c970:	18ba      	adds	r2, r7, r2
 801c972:	0010      	movs	r0, r2
 801c974:	4798      	blx	r3
 801c976:	0003      	movs	r3, r0
 801c978:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c97a:	e03a      	b.n	801c9f2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c97c:	683a      	ldr	r2, [r7, #0]
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	0011      	movs	r1, r2
 801c982:	0018      	movs	r0, r3
 801c984:	f000 fa4b 	bl	801ce1e <USBD_CtlError>
        err++;
 801c988:	210b      	movs	r1, #11
 801c98a:	187b      	adds	r3, r7, r1
 801c98c:	781a      	ldrb	r2, [r3, #0]
 801c98e:	187b      	adds	r3, r7, r1
 801c990:	3201      	adds	r2, #1
 801c992:	701a      	strb	r2, [r3, #0]
      break;
 801c994:	e02d      	b.n	801c9f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	7c1b      	ldrb	r3, [r3, #16]
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d10f      	bne.n	801c9be <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c99e:	687a      	ldr	r2, [r7, #4]
 801c9a0:	23ad      	movs	r3, #173	@ 0xad
 801c9a2:	009b      	lsls	r3, r3, #2
 801c9a4:	58d3      	ldr	r3, [r2, r3]
 801c9a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c9a8:	2208      	movs	r2, #8
 801c9aa:	18ba      	adds	r2, r7, r2
 801c9ac:	0010      	movs	r0, r2
 801c9ae:	4798      	blx	r3
 801c9b0:	0003      	movs	r3, r0
 801c9b2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	3301      	adds	r3, #1
 801c9b8:	2207      	movs	r2, #7
 801c9ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c9bc:	e019      	b.n	801c9f2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c9be:	683a      	ldr	r2, [r7, #0]
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	0011      	movs	r1, r2
 801c9c4:	0018      	movs	r0, r3
 801c9c6:	f000 fa2a 	bl	801ce1e <USBD_CtlError>
        err++;
 801c9ca:	210b      	movs	r1, #11
 801c9cc:	187b      	adds	r3, r7, r1
 801c9ce:	781a      	ldrb	r2, [r3, #0]
 801c9d0:	187b      	adds	r3, r7, r1
 801c9d2:	3201      	adds	r2, #1
 801c9d4:	701a      	strb	r2, [r3, #0]
      break;
 801c9d6:	e00c      	b.n	801c9f2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c9d8:	683a      	ldr	r2, [r7, #0]
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	0011      	movs	r1, r2
 801c9de:	0018      	movs	r0, r3
 801c9e0:	f000 fa1d 	bl	801ce1e <USBD_CtlError>
      err++;
 801c9e4:	210b      	movs	r1, #11
 801c9e6:	187b      	adds	r3, r7, r1
 801c9e8:	781a      	ldrb	r2, [r3, #0]
 801c9ea:	187b      	adds	r3, r7, r1
 801c9ec:	3201      	adds	r2, #1
 801c9ee:	701a      	strb	r2, [r3, #0]
      break;
 801c9f0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c9f2:	230b      	movs	r3, #11
 801c9f4:	18fb      	adds	r3, r7, r3
 801c9f6:	781b      	ldrb	r3, [r3, #0]
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d127      	bne.n	801ca4c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801c9fc:	2108      	movs	r1, #8
 801c9fe:	187b      	adds	r3, r7, r1
 801ca00:	881b      	ldrh	r3, [r3, #0]
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	d019      	beq.n	801ca3a <USBD_GetDescriptor+0x342>
 801ca06:	683b      	ldr	r3, [r7, #0]
 801ca08:	88db      	ldrh	r3, [r3, #6]
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	d015      	beq.n	801ca3a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801ca0e:	683b      	ldr	r3, [r7, #0]
 801ca10:	88da      	ldrh	r2, [r3, #6]
 801ca12:	187b      	adds	r3, r7, r1
 801ca14:	881b      	ldrh	r3, [r3, #0]
 801ca16:	1c18      	adds	r0, r3, #0
 801ca18:	1c11      	adds	r1, r2, #0
 801ca1a:	b28a      	uxth	r2, r1
 801ca1c:	b283      	uxth	r3, r0
 801ca1e:	429a      	cmp	r2, r3
 801ca20:	d900      	bls.n	801ca24 <USBD_GetDescriptor+0x32c>
 801ca22:	1c01      	adds	r1, r0, #0
 801ca24:	b28a      	uxth	r2, r1
 801ca26:	2108      	movs	r1, #8
 801ca28:	187b      	adds	r3, r7, r1
 801ca2a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801ca2c:	187b      	adds	r3, r7, r1
 801ca2e:	881a      	ldrh	r2, [r3, #0]
 801ca30:	68f9      	ldr	r1, [r7, #12]
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	0018      	movs	r0, r3
 801ca36:	f000 fa70 	bl	801cf1a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801ca3a:	683b      	ldr	r3, [r7, #0]
 801ca3c:	88db      	ldrh	r3, [r3, #6]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d105      	bne.n	801ca4e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	0018      	movs	r0, r3
 801ca46:	f000 fad2 	bl	801cfee <USBD_CtlSendStatus>
 801ca4a:	e000      	b.n	801ca4e <USBD_GetDescriptor+0x356>
    return;
 801ca4c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801ca4e:	46bd      	mov	sp, r7
 801ca50:	b004      	add	sp, #16
 801ca52:	bd80      	pop	{r7, pc}
 801ca54:	08025db0 	.word	0x08025db0
 801ca58:	08025dd0 	.word	0x08025dd0

0801ca5c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ca5c:	b590      	push	{r4, r7, lr}
 801ca5e:	b085      	sub	sp, #20
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	6078      	str	r0, [r7, #4]
 801ca64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ca66:	683b      	ldr	r3, [r7, #0]
 801ca68:	889b      	ldrh	r3, [r3, #4]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d13d      	bne.n	801caea <USBD_SetAddress+0x8e>
 801ca6e:	683b      	ldr	r3, [r7, #0]
 801ca70:	88db      	ldrh	r3, [r3, #6]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d139      	bne.n	801caea <USBD_SetAddress+0x8e>
 801ca76:	683b      	ldr	r3, [r7, #0]
 801ca78:	885b      	ldrh	r3, [r3, #2]
 801ca7a:	2b7f      	cmp	r3, #127	@ 0x7f
 801ca7c:	d835      	bhi.n	801caea <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ca7e:	683b      	ldr	r3, [r7, #0]
 801ca80:	885b      	ldrh	r3, [r3, #2]
 801ca82:	b2da      	uxtb	r2, r3
 801ca84:	230f      	movs	r3, #15
 801ca86:	18fb      	adds	r3, r7, r3
 801ca88:	217f      	movs	r1, #127	@ 0x7f
 801ca8a:	400a      	ands	r2, r1
 801ca8c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ca8e:	687a      	ldr	r2, [r7, #4]
 801ca90:	23a7      	movs	r3, #167	@ 0xa7
 801ca92:	009b      	lsls	r3, r3, #2
 801ca94:	5cd3      	ldrb	r3, [r2, r3]
 801ca96:	2b03      	cmp	r3, #3
 801ca98:	d106      	bne.n	801caa8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801ca9a:	683a      	ldr	r2, [r7, #0]
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	0011      	movs	r1, r2
 801caa0:	0018      	movs	r0, r3
 801caa2:	f000 f9bc 	bl	801ce1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801caa6:	e027      	b.n	801caf8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	240f      	movs	r4, #15
 801caac:	193a      	adds	r2, r7, r4
 801caae:	4914      	ldr	r1, [pc, #80]	@ (801cb00 <USBD_SetAddress+0xa4>)
 801cab0:	7812      	ldrb	r2, [r2, #0]
 801cab2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801cab4:	193b      	adds	r3, r7, r4
 801cab6:	781a      	ldrb	r2, [r3, #0]
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	0011      	movs	r1, r2
 801cabc:	0018      	movs	r0, r3
 801cabe:	f000 ff5d 	bl	801d97c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	0018      	movs	r0, r3
 801cac6:	f000 fa92 	bl	801cfee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801caca:	193b      	adds	r3, r7, r4
 801cacc:	781b      	ldrb	r3, [r3, #0]
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d005      	beq.n	801cade <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801cad2:	687a      	ldr	r2, [r7, #4]
 801cad4:	23a7      	movs	r3, #167	@ 0xa7
 801cad6:	009b      	lsls	r3, r3, #2
 801cad8:	2102      	movs	r1, #2
 801cada:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cadc:	e00c      	b.n	801caf8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801cade:	687a      	ldr	r2, [r7, #4]
 801cae0:	23a7      	movs	r3, #167	@ 0xa7
 801cae2:	009b      	lsls	r3, r3, #2
 801cae4:	2101      	movs	r1, #1
 801cae6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cae8:	e006      	b.n	801caf8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801caea:	683a      	ldr	r2, [r7, #0]
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	0011      	movs	r1, r2
 801caf0:	0018      	movs	r0, r3
 801caf2:	f000 f994 	bl	801ce1e <USBD_CtlError>
  }
}
 801caf6:	46c0      	nop			@ (mov r8, r8)
 801caf8:	46c0      	nop			@ (mov r8, r8)
 801cafa:	46bd      	mov	sp, r7
 801cafc:	b005      	add	sp, #20
 801cafe:	bd90      	pop	{r4, r7, pc}
 801cb00:	0000029e 	.word	0x0000029e

0801cb04 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cb04:	b580      	push	{r7, lr}
 801cb06:	b082      	sub	sp, #8
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	6078      	str	r0, [r7, #4]
 801cb0c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801cb0e:	683b      	ldr	r3, [r7, #0]
 801cb10:	885b      	ldrh	r3, [r3, #2]
 801cb12:	b2da      	uxtb	r2, r3
 801cb14:	4b4c      	ldr	r3, [pc, #304]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cb16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801cb18:	4b4b      	ldr	r3, [pc, #300]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cb1a:	781b      	ldrb	r3, [r3, #0]
 801cb1c:	2b01      	cmp	r3, #1
 801cb1e:	d906      	bls.n	801cb2e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801cb20:	683a      	ldr	r2, [r7, #0]
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	0011      	movs	r1, r2
 801cb26:	0018      	movs	r0, r3
 801cb28:	f000 f979 	bl	801ce1e <USBD_CtlError>
 801cb2c:	e088      	b.n	801cc40 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801cb2e:	687a      	ldr	r2, [r7, #4]
 801cb30:	23a7      	movs	r3, #167	@ 0xa7
 801cb32:	009b      	lsls	r3, r3, #2
 801cb34:	5cd3      	ldrb	r3, [r2, r3]
 801cb36:	2b02      	cmp	r3, #2
 801cb38:	d002      	beq.n	801cb40 <USBD_SetConfig+0x3c>
 801cb3a:	2b03      	cmp	r3, #3
 801cb3c:	d029      	beq.n	801cb92 <USBD_SetConfig+0x8e>
 801cb3e:	e071      	b.n	801cc24 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801cb40:	4b41      	ldr	r3, [pc, #260]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cb42:	781b      	ldrb	r3, [r3, #0]
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d01f      	beq.n	801cb88 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801cb48:	4b3f      	ldr	r3, [pc, #252]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cb4a:	781b      	ldrb	r3, [r3, #0]
 801cb4c:	001a      	movs	r2, r3
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801cb52:	687a      	ldr	r2, [r7, #4]
 801cb54:	23a7      	movs	r3, #167	@ 0xa7
 801cb56:	009b      	lsls	r3, r3, #2
 801cb58:	2103      	movs	r1, #3
 801cb5a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801cb5c:	4b3a      	ldr	r3, [pc, #232]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cb5e:	781a      	ldrb	r2, [r3, #0]
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	0011      	movs	r1, r2
 801cb64:	0018      	movs	r0, r3
 801cb66:	f7ff f8c6 	bl	801bcf6 <USBD_SetClassConfig>
 801cb6a:	0003      	movs	r3, r0
 801cb6c:	2b02      	cmp	r3, #2
 801cb6e:	d106      	bne.n	801cb7e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801cb70:	683a      	ldr	r2, [r7, #0]
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	0011      	movs	r1, r2
 801cb76:	0018      	movs	r0, r3
 801cb78:	f000 f951 	bl	801ce1e <USBD_CtlError>
            return;
 801cb7c:	e060      	b.n	801cc40 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	0018      	movs	r0, r3
 801cb82:	f000 fa34 	bl	801cfee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801cb86:	e05b      	b.n	801cc40 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	0018      	movs	r0, r3
 801cb8c:	f000 fa2f 	bl	801cfee <USBD_CtlSendStatus>
        break;
 801cb90:	e056      	b.n	801cc40 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801cb92:	4b2d      	ldr	r3, [pc, #180]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cb94:	781b      	ldrb	r3, [r3, #0]
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d115      	bne.n	801cbc6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801cb9a:	687a      	ldr	r2, [r7, #4]
 801cb9c:	23a7      	movs	r3, #167	@ 0xa7
 801cb9e:	009b      	lsls	r3, r3, #2
 801cba0:	2102      	movs	r1, #2
 801cba2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801cba4:	4b28      	ldr	r3, [pc, #160]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cba6:	781b      	ldrb	r3, [r3, #0]
 801cba8:	001a      	movs	r2, r3
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801cbae:	4b26      	ldr	r3, [pc, #152]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cbb0:	781a      	ldrb	r2, [r3, #0]
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	0011      	movs	r1, r2
 801cbb6:	0018      	movs	r0, r3
 801cbb8:	f7ff f8c4 	bl	801bd44 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	0018      	movs	r0, r3
 801cbc0:	f000 fa15 	bl	801cfee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801cbc4:	e03c      	b.n	801cc40 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801cbc6:	4b20      	ldr	r3, [pc, #128]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cbc8:	781b      	ldrb	r3, [r3, #0]
 801cbca:	001a      	movs	r2, r3
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	685b      	ldr	r3, [r3, #4]
 801cbd0:	429a      	cmp	r2, r3
 801cbd2:	d022      	beq.n	801cc1a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	685b      	ldr	r3, [r3, #4]
 801cbd8:	b2da      	uxtb	r2, r3
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	0011      	movs	r1, r2
 801cbde:	0018      	movs	r0, r3
 801cbe0:	f7ff f8b0 	bl	801bd44 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801cbe4:	4b18      	ldr	r3, [pc, #96]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cbe6:	781b      	ldrb	r3, [r3, #0]
 801cbe8:	001a      	movs	r2, r3
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801cbee:	4b16      	ldr	r3, [pc, #88]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cbf0:	781a      	ldrb	r2, [r3, #0]
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	0011      	movs	r1, r2
 801cbf6:	0018      	movs	r0, r3
 801cbf8:	f7ff f87d 	bl	801bcf6 <USBD_SetClassConfig>
 801cbfc:	0003      	movs	r3, r0
 801cbfe:	2b02      	cmp	r3, #2
 801cc00:	d106      	bne.n	801cc10 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801cc02:	683a      	ldr	r2, [r7, #0]
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	0011      	movs	r1, r2
 801cc08:	0018      	movs	r0, r3
 801cc0a:	f000 f908 	bl	801ce1e <USBD_CtlError>
            return;
 801cc0e:	e017      	b.n	801cc40 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	0018      	movs	r0, r3
 801cc14:	f000 f9eb 	bl	801cfee <USBD_CtlSendStatus>
        break;
 801cc18:	e012      	b.n	801cc40 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	0018      	movs	r0, r3
 801cc1e:	f000 f9e6 	bl	801cfee <USBD_CtlSendStatus>
        break;
 801cc22:	e00d      	b.n	801cc40 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801cc24:	683a      	ldr	r2, [r7, #0]
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	0011      	movs	r1, r2
 801cc2a:	0018      	movs	r0, r3
 801cc2c:	f000 f8f7 	bl	801ce1e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801cc30:	4b05      	ldr	r3, [pc, #20]	@ (801cc48 <USBD_SetConfig+0x144>)
 801cc32:	781a      	ldrb	r2, [r3, #0]
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	0011      	movs	r1, r2
 801cc38:	0018      	movs	r0, r3
 801cc3a:	f7ff f883 	bl	801bd44 <USBD_ClrClassConfig>
        break;
 801cc3e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801cc40:	46bd      	mov	sp, r7
 801cc42:	b002      	add	sp, #8
 801cc44:	bd80      	pop	{r7, pc}
 801cc46:	46c0      	nop			@ (mov r8, r8)
 801cc48:	20001ff0 	.word	0x20001ff0

0801cc4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cc4c:	b580      	push	{r7, lr}
 801cc4e:	b082      	sub	sp, #8
 801cc50:	af00      	add	r7, sp, #0
 801cc52:	6078      	str	r0, [r7, #4]
 801cc54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801cc56:	683b      	ldr	r3, [r7, #0]
 801cc58:	88db      	ldrh	r3, [r3, #6]
 801cc5a:	2b01      	cmp	r3, #1
 801cc5c:	d006      	beq.n	801cc6c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801cc5e:	683a      	ldr	r2, [r7, #0]
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	0011      	movs	r1, r2
 801cc64:	0018      	movs	r0, r3
 801cc66:	f000 f8da 	bl	801ce1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801cc6a:	e026      	b.n	801ccba <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801cc6c:	687a      	ldr	r2, [r7, #4]
 801cc6e:	23a7      	movs	r3, #167	@ 0xa7
 801cc70:	009b      	lsls	r3, r3, #2
 801cc72:	5cd3      	ldrb	r3, [r2, r3]
 801cc74:	2b02      	cmp	r3, #2
 801cc76:	dc02      	bgt.n	801cc7e <USBD_GetConfig+0x32>
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	dc03      	bgt.n	801cc84 <USBD_GetConfig+0x38>
 801cc7c:	e016      	b.n	801ccac <USBD_GetConfig+0x60>
 801cc7e:	2b03      	cmp	r3, #3
 801cc80:	d00c      	beq.n	801cc9c <USBD_GetConfig+0x50>
 801cc82:	e013      	b.n	801ccac <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	2200      	movs	r2, #0
 801cc88:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	3308      	adds	r3, #8
 801cc8e:	0019      	movs	r1, r3
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	2201      	movs	r2, #1
 801cc94:	0018      	movs	r0, r3
 801cc96:	f000 f940 	bl	801cf1a <USBD_CtlSendData>
        break;
 801cc9a:	e00e      	b.n	801ccba <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	1d19      	adds	r1, r3, #4
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	2201      	movs	r2, #1
 801cca4:	0018      	movs	r0, r3
 801cca6:	f000 f938 	bl	801cf1a <USBD_CtlSendData>
        break;
 801ccaa:	e006      	b.n	801ccba <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801ccac:	683a      	ldr	r2, [r7, #0]
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	0011      	movs	r1, r2
 801ccb2:	0018      	movs	r0, r3
 801ccb4:	f000 f8b3 	bl	801ce1e <USBD_CtlError>
        break;
 801ccb8:	46c0      	nop			@ (mov r8, r8)
}
 801ccba:	46c0      	nop			@ (mov r8, r8)
 801ccbc:	46bd      	mov	sp, r7
 801ccbe:	b002      	add	sp, #8
 801ccc0:	bd80      	pop	{r7, pc}

0801ccc2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ccc2:	b580      	push	{r7, lr}
 801ccc4:	b082      	sub	sp, #8
 801ccc6:	af00      	add	r7, sp, #0
 801ccc8:	6078      	str	r0, [r7, #4]
 801ccca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801cccc:	687a      	ldr	r2, [r7, #4]
 801ccce:	23a7      	movs	r3, #167	@ 0xa7
 801ccd0:	009b      	lsls	r3, r3, #2
 801ccd2:	5cd3      	ldrb	r3, [r2, r3]
 801ccd4:	3b01      	subs	r3, #1
 801ccd6:	2b02      	cmp	r3, #2
 801ccd8:	d822      	bhi.n	801cd20 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801ccda:	683b      	ldr	r3, [r7, #0]
 801ccdc:	88db      	ldrh	r3, [r3, #6]
 801ccde:	2b02      	cmp	r3, #2
 801cce0:	d006      	beq.n	801ccf0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801cce2:	683a      	ldr	r2, [r7, #0]
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	0011      	movs	r1, r2
 801cce8:	0018      	movs	r0, r3
 801ccea:	f000 f898 	bl	801ce1e <USBD_CtlError>
        break;
 801ccee:	e01e      	b.n	801cd2e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	2201      	movs	r2, #1
 801ccf4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801ccf6:	687a      	ldr	r2, [r7, #4]
 801ccf8:	23a9      	movs	r3, #169	@ 0xa9
 801ccfa:	009b      	lsls	r3, r3, #2
 801ccfc:	58d3      	ldr	r3, [r2, r3]
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d005      	beq.n	801cd0e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	68db      	ldr	r3, [r3, #12]
 801cd06:	2202      	movs	r2, #2
 801cd08:	431a      	orrs	r2, r3
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	330c      	adds	r3, #12
 801cd12:	0019      	movs	r1, r3
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	2202      	movs	r2, #2
 801cd18:	0018      	movs	r0, r3
 801cd1a:	f000 f8fe 	bl	801cf1a <USBD_CtlSendData>
      break;
 801cd1e:	e006      	b.n	801cd2e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801cd20:	683a      	ldr	r2, [r7, #0]
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	0011      	movs	r1, r2
 801cd26:	0018      	movs	r0, r3
 801cd28:	f000 f879 	bl	801ce1e <USBD_CtlError>
      break;
 801cd2c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801cd2e:	46c0      	nop			@ (mov r8, r8)
 801cd30:	46bd      	mov	sp, r7
 801cd32:	b002      	add	sp, #8
 801cd34:	bd80      	pop	{r7, pc}

0801cd36 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801cd36:	b580      	push	{r7, lr}
 801cd38:	b082      	sub	sp, #8
 801cd3a:	af00      	add	r7, sp, #0
 801cd3c:	6078      	str	r0, [r7, #4]
 801cd3e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801cd40:	683b      	ldr	r3, [r7, #0]
 801cd42:	885b      	ldrh	r3, [r3, #2]
 801cd44:	2b01      	cmp	r3, #1
 801cd46:	d108      	bne.n	801cd5a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801cd48:	687a      	ldr	r2, [r7, #4]
 801cd4a:	23a9      	movs	r3, #169	@ 0xa9
 801cd4c:	009b      	lsls	r3, r3, #2
 801cd4e:	2101      	movs	r1, #1
 801cd50:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	0018      	movs	r0, r3
 801cd56:	f000 f94a 	bl	801cfee <USBD_CtlSendStatus>
  }
}
 801cd5a:	46c0      	nop			@ (mov r8, r8)
 801cd5c:	46bd      	mov	sp, r7
 801cd5e:	b002      	add	sp, #8
 801cd60:	bd80      	pop	{r7, pc}

0801cd62 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801cd62:	b580      	push	{r7, lr}
 801cd64:	b082      	sub	sp, #8
 801cd66:	af00      	add	r7, sp, #0
 801cd68:	6078      	str	r0, [r7, #4]
 801cd6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801cd6c:	687a      	ldr	r2, [r7, #4]
 801cd6e:	23a7      	movs	r3, #167	@ 0xa7
 801cd70:	009b      	lsls	r3, r3, #2
 801cd72:	5cd3      	ldrb	r3, [r2, r3]
 801cd74:	3b01      	subs	r3, #1
 801cd76:	2b02      	cmp	r3, #2
 801cd78:	d80d      	bhi.n	801cd96 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801cd7a:	683b      	ldr	r3, [r7, #0]
 801cd7c:	885b      	ldrh	r3, [r3, #2]
 801cd7e:	2b01      	cmp	r3, #1
 801cd80:	d110      	bne.n	801cda4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801cd82:	687a      	ldr	r2, [r7, #4]
 801cd84:	23a9      	movs	r3, #169	@ 0xa9
 801cd86:	009b      	lsls	r3, r3, #2
 801cd88:	2100      	movs	r1, #0
 801cd8a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	0018      	movs	r0, r3
 801cd90:	f000 f92d 	bl	801cfee <USBD_CtlSendStatus>
      }
      break;
 801cd94:	e006      	b.n	801cda4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801cd96:	683a      	ldr	r2, [r7, #0]
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	0011      	movs	r1, r2
 801cd9c:	0018      	movs	r0, r3
 801cd9e:	f000 f83e 	bl	801ce1e <USBD_CtlError>
      break;
 801cda2:	e000      	b.n	801cda6 <USBD_ClrFeature+0x44>
      break;
 801cda4:	46c0      	nop			@ (mov r8, r8)
  }
}
 801cda6:	46c0      	nop			@ (mov r8, r8)
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	b002      	add	sp, #8
 801cdac:	bd80      	pop	{r7, pc}

0801cdae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801cdae:	b580      	push	{r7, lr}
 801cdb0:	b082      	sub	sp, #8
 801cdb2:	af00      	add	r7, sp, #0
 801cdb4:	6078      	str	r0, [r7, #4]
 801cdb6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801cdb8:	683b      	ldr	r3, [r7, #0]
 801cdba:	781a      	ldrb	r2, [r3, #0]
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801cdc0:	683b      	ldr	r3, [r7, #0]
 801cdc2:	785a      	ldrb	r2, [r3, #1]
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801cdc8:	683b      	ldr	r3, [r7, #0]
 801cdca:	3302      	adds	r3, #2
 801cdcc:	781b      	ldrb	r3, [r3, #0]
 801cdce:	001a      	movs	r2, r3
 801cdd0:	683b      	ldr	r3, [r7, #0]
 801cdd2:	3303      	adds	r3, #3
 801cdd4:	781b      	ldrb	r3, [r3, #0]
 801cdd6:	021b      	lsls	r3, r3, #8
 801cdd8:	b29b      	uxth	r3, r3
 801cdda:	18d3      	adds	r3, r2, r3
 801cddc:	b29a      	uxth	r2, r3
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801cde2:	683b      	ldr	r3, [r7, #0]
 801cde4:	3304      	adds	r3, #4
 801cde6:	781b      	ldrb	r3, [r3, #0]
 801cde8:	001a      	movs	r2, r3
 801cdea:	683b      	ldr	r3, [r7, #0]
 801cdec:	3305      	adds	r3, #5
 801cdee:	781b      	ldrb	r3, [r3, #0]
 801cdf0:	021b      	lsls	r3, r3, #8
 801cdf2:	b29b      	uxth	r3, r3
 801cdf4:	18d3      	adds	r3, r2, r3
 801cdf6:	b29a      	uxth	r2, r3
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801cdfc:	683b      	ldr	r3, [r7, #0]
 801cdfe:	3306      	adds	r3, #6
 801ce00:	781b      	ldrb	r3, [r3, #0]
 801ce02:	001a      	movs	r2, r3
 801ce04:	683b      	ldr	r3, [r7, #0]
 801ce06:	3307      	adds	r3, #7
 801ce08:	781b      	ldrb	r3, [r3, #0]
 801ce0a:	021b      	lsls	r3, r3, #8
 801ce0c:	b29b      	uxth	r3, r3
 801ce0e:	18d3      	adds	r3, r2, r3
 801ce10:	b29a      	uxth	r2, r3
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	80da      	strh	r2, [r3, #6]

}
 801ce16:	46c0      	nop			@ (mov r8, r8)
 801ce18:	46bd      	mov	sp, r7
 801ce1a:	b002      	add	sp, #8
 801ce1c:	bd80      	pop	{r7, pc}

0801ce1e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801ce1e:	b580      	push	{r7, lr}
 801ce20:	b082      	sub	sp, #8
 801ce22:	af00      	add	r7, sp, #0
 801ce24:	6078      	str	r0, [r7, #4]
 801ce26:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	2180      	movs	r1, #128	@ 0x80
 801ce2c:	0018      	movs	r0, r3
 801ce2e:	f000 fd1e 	bl	801d86e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	2100      	movs	r1, #0
 801ce36:	0018      	movs	r0, r3
 801ce38:	f000 fd19 	bl	801d86e <USBD_LL_StallEP>
}
 801ce3c:	46c0      	nop			@ (mov r8, r8)
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	b002      	add	sp, #8
 801ce42:	bd80      	pop	{r7, pc}

0801ce44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801ce44:	b590      	push	{r4, r7, lr}
 801ce46:	b087      	sub	sp, #28
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	60f8      	str	r0, [r7, #12]
 801ce4c:	60b9      	str	r1, [r7, #8]
 801ce4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801ce50:	2417      	movs	r4, #23
 801ce52:	193b      	adds	r3, r7, r4
 801ce54:	2200      	movs	r2, #0
 801ce56:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d03c      	beq.n	801ced8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	0018      	movs	r0, r3
 801ce62:	f000 f83d 	bl	801cee0 <USBD_GetLen>
 801ce66:	0003      	movs	r3, r0
 801ce68:	3301      	adds	r3, #1
 801ce6a:	b29b      	uxth	r3, r3
 801ce6c:	18db      	adds	r3, r3, r3
 801ce6e:	b29a      	uxth	r2, r3
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801ce74:	193b      	adds	r3, r7, r4
 801ce76:	781b      	ldrb	r3, [r3, #0]
 801ce78:	193a      	adds	r2, r7, r4
 801ce7a:	1c59      	adds	r1, r3, #1
 801ce7c:	7011      	strb	r1, [r2, #0]
 801ce7e:	001a      	movs	r2, r3
 801ce80:	68bb      	ldr	r3, [r7, #8]
 801ce82:	189b      	adds	r3, r3, r2
 801ce84:	687a      	ldr	r2, [r7, #4]
 801ce86:	7812      	ldrb	r2, [r2, #0]
 801ce88:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801ce8a:	193b      	adds	r3, r7, r4
 801ce8c:	781b      	ldrb	r3, [r3, #0]
 801ce8e:	193a      	adds	r2, r7, r4
 801ce90:	1c59      	adds	r1, r3, #1
 801ce92:	7011      	strb	r1, [r2, #0]
 801ce94:	001a      	movs	r2, r3
 801ce96:	68bb      	ldr	r3, [r7, #8]
 801ce98:	189b      	adds	r3, r3, r2
 801ce9a:	2203      	movs	r2, #3
 801ce9c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801ce9e:	e017      	b.n	801ced0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801cea0:	68fb      	ldr	r3, [r7, #12]
 801cea2:	1c5a      	adds	r2, r3, #1
 801cea4:	60fa      	str	r2, [r7, #12]
 801cea6:	2417      	movs	r4, #23
 801cea8:	193a      	adds	r2, r7, r4
 801ceaa:	7812      	ldrb	r2, [r2, #0]
 801ceac:	1939      	adds	r1, r7, r4
 801ceae:	1c50      	adds	r0, r2, #1
 801ceb0:	7008      	strb	r0, [r1, #0]
 801ceb2:	0011      	movs	r1, r2
 801ceb4:	68ba      	ldr	r2, [r7, #8]
 801ceb6:	1852      	adds	r2, r2, r1
 801ceb8:	781b      	ldrb	r3, [r3, #0]
 801ceba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801cebc:	193b      	adds	r3, r7, r4
 801cebe:	781b      	ldrb	r3, [r3, #0]
 801cec0:	193a      	adds	r2, r7, r4
 801cec2:	1c59      	adds	r1, r3, #1
 801cec4:	7011      	strb	r1, [r2, #0]
 801cec6:	001a      	movs	r2, r3
 801cec8:	68bb      	ldr	r3, [r7, #8]
 801ceca:	189b      	adds	r3, r3, r2
 801cecc:	2200      	movs	r2, #0
 801cece:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	781b      	ldrb	r3, [r3, #0]
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	d1e3      	bne.n	801cea0 <USBD_GetString+0x5c>
    }
  }
}
 801ced8:	46c0      	nop			@ (mov r8, r8)
 801ceda:	46bd      	mov	sp, r7
 801cedc:	b007      	add	sp, #28
 801cede:	bd90      	pop	{r4, r7, pc}

0801cee0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801cee0:	b580      	push	{r7, lr}
 801cee2:	b084      	sub	sp, #16
 801cee4:	af00      	add	r7, sp, #0
 801cee6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801cee8:	230f      	movs	r3, #15
 801ceea:	18fb      	adds	r3, r7, r3
 801ceec:	2200      	movs	r2, #0
 801ceee:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801cef0:	e008      	b.n	801cf04 <USBD_GetLen+0x24>
  {
    len++;
 801cef2:	210f      	movs	r1, #15
 801cef4:	187b      	adds	r3, r7, r1
 801cef6:	781a      	ldrb	r2, [r3, #0]
 801cef8:	187b      	adds	r3, r7, r1
 801cefa:	3201      	adds	r2, #1
 801cefc:	701a      	strb	r2, [r3, #0]
    buf++;
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	3301      	adds	r3, #1
 801cf02:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	781b      	ldrb	r3, [r3, #0]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d1f2      	bne.n	801cef2 <USBD_GetLen+0x12>
  }

  return len;
 801cf0c:	230f      	movs	r3, #15
 801cf0e:	18fb      	adds	r3, r7, r3
 801cf10:	781b      	ldrb	r3, [r3, #0]
}
 801cf12:	0018      	movs	r0, r3
 801cf14:	46bd      	mov	sp, r7
 801cf16:	b004      	add	sp, #16
 801cf18:	bd80      	pop	{r7, pc}

0801cf1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801cf1a:	b580      	push	{r7, lr}
 801cf1c:	b084      	sub	sp, #16
 801cf1e:	af00      	add	r7, sp, #0
 801cf20:	60f8      	str	r0, [r7, #12]
 801cf22:	60b9      	str	r1, [r7, #8]
 801cf24:	1dbb      	adds	r3, r7, #6
 801cf26:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801cf28:	68fa      	ldr	r2, [r7, #12]
 801cf2a:	23a5      	movs	r3, #165	@ 0xa5
 801cf2c:	009b      	lsls	r3, r3, #2
 801cf2e:	2102      	movs	r1, #2
 801cf30:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801cf32:	1dbb      	adds	r3, r7, #6
 801cf34:	881a      	ldrh	r2, [r3, #0]
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801cf3a:	1dbb      	adds	r3, r7, #6
 801cf3c:	881a      	ldrh	r2, [r3, #0]
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cf42:	1dbb      	adds	r3, r7, #6
 801cf44:	881b      	ldrh	r3, [r3, #0]
 801cf46:	68ba      	ldr	r2, [r7, #8]
 801cf48:	68f8      	ldr	r0, [r7, #12]
 801cf4a:	2100      	movs	r1, #0
 801cf4c:	f000 fd41 	bl	801d9d2 <USBD_LL_Transmit>

  return USBD_OK;
 801cf50:	2300      	movs	r3, #0
}
 801cf52:	0018      	movs	r0, r3
 801cf54:	46bd      	mov	sp, r7
 801cf56:	b004      	add	sp, #16
 801cf58:	bd80      	pop	{r7, pc}

0801cf5a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801cf5a:	b580      	push	{r7, lr}
 801cf5c:	b084      	sub	sp, #16
 801cf5e:	af00      	add	r7, sp, #0
 801cf60:	60f8      	str	r0, [r7, #12]
 801cf62:	60b9      	str	r1, [r7, #8]
 801cf64:	1dbb      	adds	r3, r7, #6
 801cf66:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cf68:	1dbb      	adds	r3, r7, #6
 801cf6a:	881b      	ldrh	r3, [r3, #0]
 801cf6c:	68ba      	ldr	r2, [r7, #8]
 801cf6e:	68f8      	ldr	r0, [r7, #12]
 801cf70:	2100      	movs	r1, #0
 801cf72:	f000 fd2e 	bl	801d9d2 <USBD_LL_Transmit>

  return USBD_OK;
 801cf76:	2300      	movs	r3, #0
}
 801cf78:	0018      	movs	r0, r3
 801cf7a:	46bd      	mov	sp, r7
 801cf7c:	b004      	add	sp, #16
 801cf7e:	bd80      	pop	{r7, pc}

0801cf80 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801cf80:	b580      	push	{r7, lr}
 801cf82:	b084      	sub	sp, #16
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	60f8      	str	r0, [r7, #12]
 801cf88:	60b9      	str	r1, [r7, #8]
 801cf8a:	1dbb      	adds	r3, r7, #6
 801cf8c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801cf8e:	68fa      	ldr	r2, [r7, #12]
 801cf90:	23a5      	movs	r3, #165	@ 0xa5
 801cf92:	009b      	lsls	r3, r3, #2
 801cf94:	2103      	movs	r1, #3
 801cf96:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801cf98:	1dbb      	adds	r3, r7, #6
 801cf9a:	8819      	ldrh	r1, [r3, #0]
 801cf9c:	68fa      	ldr	r2, [r7, #12]
 801cf9e:	23ae      	movs	r3, #174	@ 0xae
 801cfa0:	005b      	lsls	r3, r3, #1
 801cfa2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801cfa4:	1dbb      	adds	r3, r7, #6
 801cfa6:	8819      	ldrh	r1, [r3, #0]
 801cfa8:	68fa      	ldr	r2, [r7, #12]
 801cfaa:	23b0      	movs	r3, #176	@ 0xb0
 801cfac:	005b      	lsls	r3, r3, #1
 801cfae:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cfb0:	1dbb      	adds	r3, r7, #6
 801cfb2:	881b      	ldrh	r3, [r3, #0]
 801cfb4:	68ba      	ldr	r2, [r7, #8]
 801cfb6:	68f8      	ldr	r0, [r7, #12]
 801cfb8:	2100      	movs	r1, #0
 801cfba:	f000 fd41 	bl	801da40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cfbe:	2300      	movs	r3, #0
}
 801cfc0:	0018      	movs	r0, r3
 801cfc2:	46bd      	mov	sp, r7
 801cfc4:	b004      	add	sp, #16
 801cfc6:	bd80      	pop	{r7, pc}

0801cfc8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801cfc8:	b580      	push	{r7, lr}
 801cfca:	b084      	sub	sp, #16
 801cfcc:	af00      	add	r7, sp, #0
 801cfce:	60f8      	str	r0, [r7, #12]
 801cfd0:	60b9      	str	r1, [r7, #8]
 801cfd2:	1dbb      	adds	r3, r7, #6
 801cfd4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cfd6:	1dbb      	adds	r3, r7, #6
 801cfd8:	881b      	ldrh	r3, [r3, #0]
 801cfda:	68ba      	ldr	r2, [r7, #8]
 801cfdc:	68f8      	ldr	r0, [r7, #12]
 801cfde:	2100      	movs	r1, #0
 801cfe0:	f000 fd2e 	bl	801da40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cfe4:	2300      	movs	r3, #0
}
 801cfe6:	0018      	movs	r0, r3
 801cfe8:	46bd      	mov	sp, r7
 801cfea:	b004      	add	sp, #16
 801cfec:	bd80      	pop	{r7, pc}

0801cfee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801cfee:	b580      	push	{r7, lr}
 801cff0:	b082      	sub	sp, #8
 801cff2:	af00      	add	r7, sp, #0
 801cff4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cff6:	687a      	ldr	r2, [r7, #4]
 801cff8:	23a5      	movs	r3, #165	@ 0xa5
 801cffa:	009b      	lsls	r3, r3, #2
 801cffc:	2104      	movs	r1, #4
 801cffe:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801d000:	6878      	ldr	r0, [r7, #4]
 801d002:	2300      	movs	r3, #0
 801d004:	2200      	movs	r2, #0
 801d006:	2100      	movs	r1, #0
 801d008:	f000 fce3 	bl	801d9d2 <USBD_LL_Transmit>

  return USBD_OK;
 801d00c:	2300      	movs	r3, #0
}
 801d00e:	0018      	movs	r0, r3
 801d010:	46bd      	mov	sp, r7
 801d012:	b002      	add	sp, #8
 801d014:	bd80      	pop	{r7, pc}

0801d016 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801d016:	b580      	push	{r7, lr}
 801d018:	b082      	sub	sp, #8
 801d01a:	af00      	add	r7, sp, #0
 801d01c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801d01e:	687a      	ldr	r2, [r7, #4]
 801d020:	23a5      	movs	r3, #165	@ 0xa5
 801d022:	009b      	lsls	r3, r3, #2
 801d024:	2105      	movs	r1, #5
 801d026:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d028:	6878      	ldr	r0, [r7, #4]
 801d02a:	2300      	movs	r3, #0
 801d02c:	2200      	movs	r2, #0
 801d02e:	2100      	movs	r1, #0
 801d030:	f000 fd06 	bl	801da40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d034:	2300      	movs	r3, #0
}
 801d036:	0018      	movs	r0, r3
 801d038:	46bd      	mov	sp, r7
 801d03a:	b002      	add	sp, #8
 801d03c:	bd80      	pop	{r7, pc}
	...

0801d040 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d040:	b580      	push	{r7, lr}
 801d042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d044:	4914      	ldr	r1, [pc, #80]	@ (801d098 <MX_USB_DEVICE_Init+0x58>)
 801d046:	4b15      	ldr	r3, [pc, #84]	@ (801d09c <MX_USB_DEVICE_Init+0x5c>)
 801d048:	2200      	movs	r2, #0
 801d04a:	0018      	movs	r0, r3
 801d04c:	f7fe fdec 	bl	801bc28 <USBD_Init>
 801d050:	1e03      	subs	r3, r0, #0
 801d052:	d001      	beq.n	801d058 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d054:	f7eb faf8 	bl	8008648 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d058:	4a11      	ldr	r2, [pc, #68]	@ (801d0a0 <MX_USB_DEVICE_Init+0x60>)
 801d05a:	4b10      	ldr	r3, [pc, #64]	@ (801d09c <MX_USB_DEVICE_Init+0x5c>)
 801d05c:	0011      	movs	r1, r2
 801d05e:	0018      	movs	r0, r3
 801d060:	f7fe fe13 	bl	801bc8a <USBD_RegisterClass>
 801d064:	1e03      	subs	r3, r0, #0
 801d066:	d001      	beq.n	801d06c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801d068:	f7eb faee 	bl	8008648 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d06c:	4a0d      	ldr	r2, [pc, #52]	@ (801d0a4 <MX_USB_DEVICE_Init+0x64>)
 801d06e:	4b0b      	ldr	r3, [pc, #44]	@ (801d09c <MX_USB_DEVICE_Init+0x5c>)
 801d070:	0011      	movs	r1, r2
 801d072:	0018      	movs	r0, r3
 801d074:	f7fe fd28 	bl	801bac8 <USBD_CDC_RegisterInterface>
 801d078:	1e03      	subs	r3, r0, #0
 801d07a:	d001      	beq.n	801d080 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801d07c:	f7eb fae4 	bl	8008648 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d080:	4b06      	ldr	r3, [pc, #24]	@ (801d09c <MX_USB_DEVICE_Init+0x5c>)
 801d082:	0018      	movs	r0, r3
 801d084:	f7fe fe21 	bl	801bcca <USBD_Start>
 801d088:	1e03      	subs	r3, r0, #0
 801d08a:	d001      	beq.n	801d090 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801d08c:	f7eb fadc 	bl	8008648 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d090:	46c0      	nop			@ (mov r8, r8)
 801d092:	46bd      	mov	sp, r7
 801d094:	bd80      	pop	{r7, pc}
 801d096:	46c0      	nop			@ (mov r8, r8)
 801d098:	20000208 	.word	0x20000208
 801d09c:	20001ff4 	.word	0x20001ff4
 801d0a0:	200000f4 	.word	0x200000f4
 801d0a4:	200001f8 	.word	0x200001f8

0801d0a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d0a8:	b580      	push	{r7, lr}
 801d0aa:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d0ac:	4907      	ldr	r1, [pc, #28]	@ (801d0cc <CDC_Init_FS+0x24>)
 801d0ae:	4b08      	ldr	r3, [pc, #32]	@ (801d0d0 <CDC_Init_FS+0x28>)
 801d0b0:	2200      	movs	r2, #0
 801d0b2:	0018      	movs	r0, r3
 801d0b4:	f7fe fd23 	bl	801bafe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d0b8:	4a06      	ldr	r2, [pc, #24]	@ (801d0d4 <CDC_Init_FS+0x2c>)
 801d0ba:	4b05      	ldr	r3, [pc, #20]	@ (801d0d0 <CDC_Init_FS+0x28>)
 801d0bc:	0011      	movs	r1, r2
 801d0be:	0018      	movs	r0, r3
 801d0c0:	f7fe fd39 	bl	801bb36 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d0c4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d0c6:	0018      	movs	r0, r3
 801d0c8:	46bd      	mov	sp, r7
 801d0ca:	bd80      	pop	{r7, pc}
 801d0cc:	20002778 	.word	0x20002778
 801d0d0:	20001ff4 	.word	0x20001ff4
 801d0d4:	20002378 	.word	0x20002378

0801d0d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d0d8:	b580      	push	{r7, lr}
 801d0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d0dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d0de:	0018      	movs	r0, r3
 801d0e0:	46bd      	mov	sp, r7
 801d0e2:	bd80      	pop	{r7, pc}

0801d0e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	b082      	sub	sp, #8
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6039      	str	r1, [r7, #0]
 801d0ec:	0011      	movs	r1, r2
 801d0ee:	1dfb      	adds	r3, r7, #7
 801d0f0:	1c02      	adds	r2, r0, #0
 801d0f2:	701a      	strb	r2, [r3, #0]
 801d0f4:	1d3b      	adds	r3, r7, #4
 801d0f6:	1c0a      	adds	r2, r1, #0
 801d0f8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d0fa:	1dfb      	adds	r3, r7, #7
 801d0fc:	781b      	ldrb	r3, [r3, #0]
 801d0fe:	2b23      	cmp	r3, #35	@ 0x23
 801d100:	d804      	bhi.n	801d10c <CDC_Control_FS+0x28>
 801d102:	009a      	lsls	r2, r3, #2
 801d104:	4b04      	ldr	r3, [pc, #16]	@ (801d118 <CDC_Control_FS+0x34>)
 801d106:	18d3      	adds	r3, r2, r3
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d10c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801d10e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d110:	0018      	movs	r0, r3
 801d112:	46bd      	mov	sp, r7
 801d114:	b002      	add	sp, #8
 801d116:	bd80      	pop	{r7, pc}
 801d118:	08025de8 	.word	0x08025de8

0801d11c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d11c:	b580      	push	{r7, lr}
 801d11e:	b082      	sub	sp, #8
 801d120:	af00      	add	r7, sp, #0
 801d122:	6078      	str	r0, [r7, #4]
 801d124:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801d126:	4b12      	ldr	r3, [pc, #72]	@ (801d170 <CDC_Receive_FS+0x54>)
 801d128:	781b      	ldrb	r3, [r3, #0]
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d013      	beq.n	801d156 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801d12e:	683b      	ldr	r3, [r7, #0]
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	b29a      	uxth	r2, r3
 801d134:	2301      	movs	r3, #1
 801d136:	425b      	negs	r3, r3
 801d138:	6879      	ldr	r1, [r7, #4]
 801d13a:	480e      	ldr	r0, [pc, #56]	@ (801d174 <CDC_Receive_FS+0x58>)
 801d13c:	f7fa fa46 	bl	80175cc <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d140:	687a      	ldr	r2, [r7, #4]
 801d142:	4b0d      	ldr	r3, [pc, #52]	@ (801d178 <CDC_Receive_FS+0x5c>)
 801d144:	0011      	movs	r1, r2
 801d146:	0018      	movs	r0, r3
 801d148:	f7fe fcf5 	bl	801bb36 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d14c:	4b0a      	ldr	r3, [pc, #40]	@ (801d178 <CDC_Receive_FS+0x5c>)
 801d14e:	0018      	movs	r0, r3
 801d150:	f7fe fd3c 	bl	801bbcc <USBD_CDC_ReceivePacket>
 801d154:	e006      	b.n	801d164 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801d156:	683b      	ldr	r3, [r7, #0]
 801d158:	681a      	ldr	r2, [r3, #0]
 801d15a:	4b08      	ldr	r3, [pc, #32]	@ (801d17c <CDC_Receive_FS+0x60>)
 801d15c:	681b      	ldr	r3, [r3, #0]
 801d15e:	18d2      	adds	r2, r2, r3
 801d160:	4b06      	ldr	r3, [pc, #24]	@ (801d17c <CDC_Receive_FS+0x60>)
 801d162:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801d164:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d166:	0018      	movs	r0, r3
 801d168:	46bd      	mov	sp, r7
 801d16a:	b002      	add	sp, #8
 801d16c:	bd80      	pop	{r7, pc}
 801d16e:	46c0      	nop			@ (mov r8, r8)
 801d170:	200022b8 	.word	0x200022b8
 801d174:	200022bc 	.word	0x200022bc
 801d178:	20001ff4 	.word	0x20001ff4
 801d17c:	20002374 	.word	0x20002374

0801d180 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d180:	b5b0      	push	{r4, r5, r7, lr}
 801d182:	b084      	sub	sp, #16
 801d184:	af00      	add	r7, sp, #0
 801d186:	6078      	str	r0, [r7, #4]
 801d188:	000a      	movs	r2, r1
 801d18a:	1cbb      	adds	r3, r7, #2
 801d18c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801d18e:	230f      	movs	r3, #15
 801d190:	18fb      	adds	r3, r7, r3
 801d192:	2200      	movs	r2, #0
 801d194:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d196:	4a11      	ldr	r2, [pc, #68]	@ (801d1dc <CDC_Transmit_FS+0x5c>)
 801d198:	23ae      	movs	r3, #174	@ 0xae
 801d19a:	009b      	lsls	r3, r3, #2
 801d19c:	58d3      	ldr	r3, [r2, r3]
 801d19e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d1a0:	68ba      	ldr	r2, [r7, #8]
 801d1a2:	2385      	movs	r3, #133	@ 0x85
 801d1a4:	009b      	lsls	r3, r3, #2
 801d1a6:	58d3      	ldr	r3, [r2, r3]
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d001      	beq.n	801d1b0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801d1ac:	2301      	movs	r3, #1
 801d1ae:	e010      	b.n	801d1d2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d1b0:	1cbb      	adds	r3, r7, #2
 801d1b2:	881a      	ldrh	r2, [r3, #0]
 801d1b4:	6879      	ldr	r1, [r7, #4]
 801d1b6:	4b09      	ldr	r3, [pc, #36]	@ (801d1dc <CDC_Transmit_FS+0x5c>)
 801d1b8:	0018      	movs	r0, r3
 801d1ba:	f7fe fca0 	bl	801bafe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d1be:	250f      	movs	r5, #15
 801d1c0:	197c      	adds	r4, r7, r5
 801d1c2:	4b06      	ldr	r3, [pc, #24]	@ (801d1dc <CDC_Transmit_FS+0x5c>)
 801d1c4:	0018      	movs	r0, r3
 801d1c6:	f7fe fcca 	bl	801bb5e <USBD_CDC_TransmitPacket>
 801d1ca:	0003      	movs	r3, r0
 801d1cc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801d1ce:	197b      	adds	r3, r7, r5
 801d1d0:	781b      	ldrb	r3, [r3, #0]
}
 801d1d2:	0018      	movs	r0, r3
 801d1d4:	46bd      	mov	sp, r7
 801d1d6:	b004      	add	sp, #16
 801d1d8:	bdb0      	pop	{r4, r5, r7, pc}
 801d1da:	46c0      	nop			@ (mov r8, r8)
 801d1dc:	20001ff4 	.word	0x20001ff4

0801d1e0 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801d1e0:	b580      	push	{r7, lr}
 801d1e2:	af00      	add	r7, sp, #0
  ESPProg = true;
 801d1e4:	4b02      	ldr	r3, [pc, #8]	@ (801d1f0 <EnableESPProg+0x10>)
 801d1e6:	2201      	movs	r2, #1
 801d1e8:	701a      	strb	r2, [r3, #0]
}
 801d1ea:	46c0      	nop			@ (mov r8, r8)
 801d1ec:	46bd      	mov	sp, r7
 801d1ee:	bd80      	pop	{r7, pc}
 801d1f0:	200022b8 	.word	0x200022b8

0801d1f4 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801d1f8:	4b01      	ldr	r3, [pc, #4]	@ (801d200 <GetUsbRxPointer+0xc>)
}
 801d1fa:	0018      	movs	r0, r3
 801d1fc:	46bd      	mov	sp, r7
 801d1fe:	bd80      	pop	{r7, pc}
 801d200:	20002378 	.word	0x20002378

0801d204 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801d204:	b580      	push	{r7, lr}
 801d206:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801d208:	4b07      	ldr	r3, [pc, #28]	@ (801d228 <ResetUsbRxDataSize+0x24>)
 801d20a:	2200      	movs	r2, #0
 801d20c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801d20e:	4a07      	ldr	r2, [pc, #28]	@ (801d22c <ResetUsbRxDataSize+0x28>)
 801d210:	4b07      	ldr	r3, [pc, #28]	@ (801d230 <ResetUsbRxDataSize+0x2c>)
 801d212:	0011      	movs	r1, r2
 801d214:	0018      	movs	r0, r3
 801d216:	f7fe fc8e 	bl	801bb36 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d21a:	4b05      	ldr	r3, [pc, #20]	@ (801d230 <ResetUsbRxDataSize+0x2c>)
 801d21c:	0018      	movs	r0, r3
 801d21e:	f7fe fcd5 	bl	801bbcc <USBD_CDC_ReceivePacket>
}
 801d222:	46c0      	nop			@ (mov r8, r8)
 801d224:	46bd      	mov	sp, r7
 801d226:	bd80      	pop	{r7, pc}
 801d228:	20002374 	.word	0x20002374
 801d22c:	20002378 	.word	0x20002378
 801d230:	20001ff4 	.word	0x20001ff4

0801d234 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801d234:	b580      	push	{r7, lr}
 801d236:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801d238:	4b02      	ldr	r3, [pc, #8]	@ (801d244 <GetUsbRxDataSize+0x10>)
 801d23a:	681b      	ldr	r3, [r3, #0]
}
 801d23c:	0018      	movs	r0, r3
 801d23e:	46bd      	mov	sp, r7
 801d240:	bd80      	pop	{r7, pc}
 801d242:	46c0      	nop			@ (mov r8, r8)
 801d244:	20002374 	.word	0x20002374

0801d248 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801d248:	b580      	push	{r7, lr}
 801d24a:	b082      	sub	sp, #8
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801d250:	687a      	ldr	r2, [r7, #4]
 801d252:	4b07      	ldr	r3, [pc, #28]	@ (801d270 <GetUsbRxNextChunk+0x28>)
 801d254:	18d2      	adds	r2, r2, r3
 801d256:	4b07      	ldr	r3, [pc, #28]	@ (801d274 <GetUsbRxNextChunk+0x2c>)
 801d258:	0011      	movs	r1, r2
 801d25a:	0018      	movs	r0, r3
 801d25c:	f7fe fc6b 	bl	801bb36 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d260:	4b04      	ldr	r3, [pc, #16]	@ (801d274 <GetUsbRxNextChunk+0x2c>)
 801d262:	0018      	movs	r0, r3
 801d264:	f7fe fcb2 	bl	801bbcc <USBD_CDC_ReceivePacket>
}
 801d268:	46c0      	nop			@ (mov r8, r8)
 801d26a:	46bd      	mov	sp, r7
 801d26c:	b002      	add	sp, #8
 801d26e:	bd80      	pop	{r7, pc}
 801d270:	20002378 	.word	0x20002378
 801d274:	20001ff4 	.word	0x20001ff4

0801d278 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d278:	b580      	push	{r7, lr}
 801d27a:	b082      	sub	sp, #8
 801d27c:	af00      	add	r7, sp, #0
 801d27e:	0002      	movs	r2, r0
 801d280:	6039      	str	r1, [r7, #0]
 801d282:	1dfb      	adds	r3, r7, #7
 801d284:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d286:	683b      	ldr	r3, [r7, #0]
 801d288:	2212      	movs	r2, #18
 801d28a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d28c:	4b02      	ldr	r3, [pc, #8]	@ (801d298 <USBD_FS_DeviceDescriptor+0x20>)
}
 801d28e:	0018      	movs	r0, r3
 801d290:	46bd      	mov	sp, r7
 801d292:	b002      	add	sp, #8
 801d294:	bd80      	pop	{r7, pc}
 801d296:	46c0      	nop			@ (mov r8, r8)
 801d298:	20000224 	.word	0x20000224

0801d29c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d29c:	b580      	push	{r7, lr}
 801d29e:	b082      	sub	sp, #8
 801d2a0:	af00      	add	r7, sp, #0
 801d2a2:	0002      	movs	r2, r0
 801d2a4:	6039      	str	r1, [r7, #0]
 801d2a6:	1dfb      	adds	r3, r7, #7
 801d2a8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d2aa:	683b      	ldr	r3, [r7, #0]
 801d2ac:	2204      	movs	r2, #4
 801d2ae:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d2b0:	4b02      	ldr	r3, [pc, #8]	@ (801d2bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d2b2:	0018      	movs	r0, r3
 801d2b4:	46bd      	mov	sp, r7
 801d2b6:	b002      	add	sp, #8
 801d2b8:	bd80      	pop	{r7, pc}
 801d2ba:	46c0      	nop			@ (mov r8, r8)
 801d2bc:	20000238 	.word	0x20000238

0801d2c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d2c0:	b580      	push	{r7, lr}
 801d2c2:	b082      	sub	sp, #8
 801d2c4:	af00      	add	r7, sp, #0
 801d2c6:	0002      	movs	r2, r0
 801d2c8:	6039      	str	r1, [r7, #0]
 801d2ca:	1dfb      	adds	r3, r7, #7
 801d2cc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d2ce:	1dfb      	adds	r3, r7, #7
 801d2d0:	781b      	ldrb	r3, [r3, #0]
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d106      	bne.n	801d2e4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d2d6:	683a      	ldr	r2, [r7, #0]
 801d2d8:	4908      	ldr	r1, [pc, #32]	@ (801d2fc <USBD_FS_ProductStrDescriptor+0x3c>)
 801d2da:	4b09      	ldr	r3, [pc, #36]	@ (801d300 <USBD_FS_ProductStrDescriptor+0x40>)
 801d2dc:	0018      	movs	r0, r3
 801d2de:	f7ff fdb1 	bl	801ce44 <USBD_GetString>
 801d2e2:	e005      	b.n	801d2f0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d2e4:	683a      	ldr	r2, [r7, #0]
 801d2e6:	4905      	ldr	r1, [pc, #20]	@ (801d2fc <USBD_FS_ProductStrDescriptor+0x3c>)
 801d2e8:	4b05      	ldr	r3, [pc, #20]	@ (801d300 <USBD_FS_ProductStrDescriptor+0x40>)
 801d2ea:	0018      	movs	r0, r3
 801d2ec:	f7ff fdaa 	bl	801ce44 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d2f0:	4b02      	ldr	r3, [pc, #8]	@ (801d2fc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801d2f2:	0018      	movs	r0, r3
 801d2f4:	46bd      	mov	sp, r7
 801d2f6:	b002      	add	sp, #8
 801d2f8:	bd80      	pop	{r7, pc}
 801d2fa:	46c0      	nop			@ (mov r8, r8)
 801d2fc:	20002b78 	.word	0x20002b78
 801d300:	08025840 	.word	0x08025840

0801d304 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d304:	b580      	push	{r7, lr}
 801d306:	b082      	sub	sp, #8
 801d308:	af00      	add	r7, sp, #0
 801d30a:	0002      	movs	r2, r0
 801d30c:	6039      	str	r1, [r7, #0]
 801d30e:	1dfb      	adds	r3, r7, #7
 801d310:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d312:	683a      	ldr	r2, [r7, #0]
 801d314:	4904      	ldr	r1, [pc, #16]	@ (801d328 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d316:	4b05      	ldr	r3, [pc, #20]	@ (801d32c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801d318:	0018      	movs	r0, r3
 801d31a:	f7ff fd93 	bl	801ce44 <USBD_GetString>
  return USBD_StrDesc;
 801d31e:	4b02      	ldr	r3, [pc, #8]	@ (801d328 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801d320:	0018      	movs	r0, r3
 801d322:	46bd      	mov	sp, r7
 801d324:	b002      	add	sp, #8
 801d326:	bd80      	pop	{r7, pc}
 801d328:	20002b78 	.word	0x20002b78
 801d32c:	08025858 	.word	0x08025858

0801d330 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d330:	b580      	push	{r7, lr}
 801d332:	b082      	sub	sp, #8
 801d334:	af00      	add	r7, sp, #0
 801d336:	0002      	movs	r2, r0
 801d338:	6039      	str	r1, [r7, #0]
 801d33a:	1dfb      	adds	r3, r7, #7
 801d33c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d33e:	683b      	ldr	r3, [r7, #0]
 801d340:	221a      	movs	r2, #26
 801d342:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d344:	f000 f84c 	bl	801d3e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d348:	4b02      	ldr	r3, [pc, #8]	@ (801d354 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801d34a:	0018      	movs	r0, r3
 801d34c:	46bd      	mov	sp, r7
 801d34e:	b002      	add	sp, #8
 801d350:	bd80      	pop	{r7, pc}
 801d352:	46c0      	nop			@ (mov r8, r8)
 801d354:	2000023c 	.word	0x2000023c

0801d358 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d358:	b580      	push	{r7, lr}
 801d35a:	b082      	sub	sp, #8
 801d35c:	af00      	add	r7, sp, #0
 801d35e:	0002      	movs	r2, r0
 801d360:	6039      	str	r1, [r7, #0]
 801d362:	1dfb      	adds	r3, r7, #7
 801d364:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801d366:	1dfb      	adds	r3, r7, #7
 801d368:	781b      	ldrb	r3, [r3, #0]
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d106      	bne.n	801d37c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d36e:	683a      	ldr	r2, [r7, #0]
 801d370:	4908      	ldr	r1, [pc, #32]	@ (801d394 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d372:	4b09      	ldr	r3, [pc, #36]	@ (801d398 <USBD_FS_ConfigStrDescriptor+0x40>)
 801d374:	0018      	movs	r0, r3
 801d376:	f7ff fd65 	bl	801ce44 <USBD_GetString>
 801d37a:	e005      	b.n	801d388 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d37c:	683a      	ldr	r2, [r7, #0]
 801d37e:	4905      	ldr	r1, [pc, #20]	@ (801d394 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d380:	4b05      	ldr	r3, [pc, #20]	@ (801d398 <USBD_FS_ConfigStrDescriptor+0x40>)
 801d382:	0018      	movs	r0, r3
 801d384:	f7ff fd5e 	bl	801ce44 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d388:	4b02      	ldr	r3, [pc, #8]	@ (801d394 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801d38a:	0018      	movs	r0, r3
 801d38c:	46bd      	mov	sp, r7
 801d38e:	b002      	add	sp, #8
 801d390:	bd80      	pop	{r7, pc}
 801d392:	46c0      	nop			@ (mov r8, r8)
 801d394:	20002b78 	.word	0x20002b78
 801d398:	0802586c 	.word	0x0802586c

0801d39c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d39c:	b580      	push	{r7, lr}
 801d39e:	b082      	sub	sp, #8
 801d3a0:	af00      	add	r7, sp, #0
 801d3a2:	0002      	movs	r2, r0
 801d3a4:	6039      	str	r1, [r7, #0]
 801d3a6:	1dfb      	adds	r3, r7, #7
 801d3a8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d3aa:	1dfb      	adds	r3, r7, #7
 801d3ac:	781b      	ldrb	r3, [r3, #0]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	d106      	bne.n	801d3c0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d3b2:	683a      	ldr	r2, [r7, #0]
 801d3b4:	4908      	ldr	r1, [pc, #32]	@ (801d3d8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d3b6:	4b09      	ldr	r3, [pc, #36]	@ (801d3dc <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d3b8:	0018      	movs	r0, r3
 801d3ba:	f7ff fd43 	bl	801ce44 <USBD_GetString>
 801d3be:	e005      	b.n	801d3cc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d3c0:	683a      	ldr	r2, [r7, #0]
 801d3c2:	4905      	ldr	r1, [pc, #20]	@ (801d3d8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d3c4:	4b05      	ldr	r3, [pc, #20]	@ (801d3dc <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d3c6:	0018      	movs	r0, r3
 801d3c8:	f7ff fd3c 	bl	801ce44 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d3cc:	4b02      	ldr	r3, [pc, #8]	@ (801d3d8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801d3ce:	0018      	movs	r0, r3
 801d3d0:	46bd      	mov	sp, r7
 801d3d2:	b002      	add	sp, #8
 801d3d4:	bd80      	pop	{r7, pc}
 801d3d6:	46c0      	nop			@ (mov r8, r8)
 801d3d8:	20002b78 	.word	0x20002b78
 801d3dc:	08025878 	.word	0x08025878

0801d3e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d3e0:	b580      	push	{r7, lr}
 801d3e2:	b084      	sub	sp, #16
 801d3e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d3e6:	4b10      	ldr	r3, [pc, #64]	@ (801d428 <Get_SerialNum+0x48>)
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d3ec:	4b0f      	ldr	r3, [pc, #60]	@ (801d42c <Get_SerialNum+0x4c>)
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d3f2:	4b0f      	ldr	r3, [pc, #60]	@ (801d430 <Get_SerialNum+0x50>)
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d3f8:	68fa      	ldr	r2, [r7, #12]
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	18d3      	adds	r3, r2, r3
 801d3fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	2b00      	cmp	r3, #0
 801d404:	d00b      	beq.n	801d41e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d406:	490b      	ldr	r1, [pc, #44]	@ (801d434 <Get_SerialNum+0x54>)
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	2208      	movs	r2, #8
 801d40c:	0018      	movs	r0, r3
 801d40e:	f000 f815 	bl	801d43c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d412:	4909      	ldr	r1, [pc, #36]	@ (801d438 <Get_SerialNum+0x58>)
 801d414:	68bb      	ldr	r3, [r7, #8]
 801d416:	2204      	movs	r2, #4
 801d418:	0018      	movs	r0, r3
 801d41a:	f000 f80f 	bl	801d43c <IntToUnicode>
  }
}
 801d41e:	46c0      	nop			@ (mov r8, r8)
 801d420:	46bd      	mov	sp, r7
 801d422:	b004      	add	sp, #16
 801d424:	bd80      	pop	{r7, pc}
 801d426:	46c0      	nop			@ (mov r8, r8)
 801d428:	1ff80050 	.word	0x1ff80050
 801d42c:	1ff80054 	.word	0x1ff80054
 801d430:	1ff80058 	.word	0x1ff80058
 801d434:	2000023e 	.word	0x2000023e
 801d438:	2000024e 	.word	0x2000024e

0801d43c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d43c:	b580      	push	{r7, lr}
 801d43e:	b086      	sub	sp, #24
 801d440:	af00      	add	r7, sp, #0
 801d442:	60f8      	str	r0, [r7, #12]
 801d444:	60b9      	str	r1, [r7, #8]
 801d446:	1dfb      	adds	r3, r7, #7
 801d448:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801d44a:	2117      	movs	r1, #23
 801d44c:	187b      	adds	r3, r7, r1
 801d44e:	2200      	movs	r2, #0
 801d450:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801d452:	187b      	adds	r3, r7, r1
 801d454:	2200      	movs	r2, #0
 801d456:	701a      	strb	r2, [r3, #0]
 801d458:	e02f      	b.n	801d4ba <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	0f1b      	lsrs	r3, r3, #28
 801d45e:	2b09      	cmp	r3, #9
 801d460:	d80d      	bhi.n	801d47e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	0f1b      	lsrs	r3, r3, #28
 801d466:	b2da      	uxtb	r2, r3
 801d468:	2317      	movs	r3, #23
 801d46a:	18fb      	adds	r3, r7, r3
 801d46c:	781b      	ldrb	r3, [r3, #0]
 801d46e:	005b      	lsls	r3, r3, #1
 801d470:	0019      	movs	r1, r3
 801d472:	68bb      	ldr	r3, [r7, #8]
 801d474:	185b      	adds	r3, r3, r1
 801d476:	3230      	adds	r2, #48	@ 0x30
 801d478:	b2d2      	uxtb	r2, r2
 801d47a:	701a      	strb	r2, [r3, #0]
 801d47c:	e00c      	b.n	801d498 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d47e:	68fb      	ldr	r3, [r7, #12]
 801d480:	0f1b      	lsrs	r3, r3, #28
 801d482:	b2da      	uxtb	r2, r3
 801d484:	2317      	movs	r3, #23
 801d486:	18fb      	adds	r3, r7, r3
 801d488:	781b      	ldrb	r3, [r3, #0]
 801d48a:	005b      	lsls	r3, r3, #1
 801d48c:	0019      	movs	r1, r3
 801d48e:	68bb      	ldr	r3, [r7, #8]
 801d490:	185b      	adds	r3, r3, r1
 801d492:	3237      	adds	r2, #55	@ 0x37
 801d494:	b2d2      	uxtb	r2, r2
 801d496:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	011b      	lsls	r3, r3, #4
 801d49c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d49e:	2117      	movs	r1, #23
 801d4a0:	187b      	adds	r3, r7, r1
 801d4a2:	781b      	ldrb	r3, [r3, #0]
 801d4a4:	005b      	lsls	r3, r3, #1
 801d4a6:	3301      	adds	r3, #1
 801d4a8:	68ba      	ldr	r2, [r7, #8]
 801d4aa:	18d3      	adds	r3, r2, r3
 801d4ac:	2200      	movs	r2, #0
 801d4ae:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d4b0:	187b      	adds	r3, r7, r1
 801d4b2:	781a      	ldrb	r2, [r3, #0]
 801d4b4:	187b      	adds	r3, r7, r1
 801d4b6:	3201      	adds	r2, #1
 801d4b8:	701a      	strb	r2, [r3, #0]
 801d4ba:	2317      	movs	r3, #23
 801d4bc:	18fa      	adds	r2, r7, r3
 801d4be:	1dfb      	adds	r3, r7, #7
 801d4c0:	7812      	ldrb	r2, [r2, #0]
 801d4c2:	781b      	ldrb	r3, [r3, #0]
 801d4c4:	429a      	cmp	r2, r3
 801d4c6:	d3c8      	bcc.n	801d45a <IntToUnicode+0x1e>
  }
}
 801d4c8:	46c0      	nop			@ (mov r8, r8)
 801d4ca:	46c0      	nop			@ (mov r8, r8)
 801d4cc:	46bd      	mov	sp, r7
 801d4ce:	b006      	add	sp, #24
 801d4d0:	bd80      	pop	{r7, pc}
	...

0801d4d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d4d4:	b580      	push	{r7, lr}
 801d4d6:	b082      	sub	sp, #8
 801d4d8:	af00      	add	r7, sp, #0
 801d4da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	4a0a      	ldr	r2, [pc, #40]	@ (801d50c <HAL_PCD_MspInit+0x38>)
 801d4e2:	4293      	cmp	r3, r2
 801d4e4:	d10e      	bne.n	801d504 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d4e6:	4b0a      	ldr	r3, [pc, #40]	@ (801d510 <HAL_PCD_MspInit+0x3c>)
 801d4e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d4ea:	4b09      	ldr	r3, [pc, #36]	@ (801d510 <HAL_PCD_MspInit+0x3c>)
 801d4ec:	2180      	movs	r1, #128	@ 0x80
 801d4ee:	0409      	lsls	r1, r1, #16
 801d4f0:	430a      	orrs	r2, r1
 801d4f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801d4f4:	2200      	movs	r2, #0
 801d4f6:	2100      	movs	r1, #0
 801d4f8:	201f      	movs	r0, #31
 801d4fa:	f7f2 fadf 	bl	800fabc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801d4fe:	201f      	movs	r0, #31
 801d500:	f7f2 faf1 	bl	800fae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d504:	46c0      	nop			@ (mov r8, r8)
 801d506:	46bd      	mov	sp, r7
 801d508:	b002      	add	sp, #8
 801d50a:	bd80      	pop	{r7, pc}
 801d50c:	40005c00 	.word	0x40005c00
 801d510:	40021000 	.word	0x40021000

0801d514 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d514:	b580      	push	{r7, lr}
 801d516:	b082      	sub	sp, #8
 801d518:	af00      	add	r7, sp, #0
 801d51a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d51c:	687a      	ldr	r2, [r7, #4]
 801d51e:	23bc      	movs	r3, #188	@ 0xbc
 801d520:	009b      	lsls	r3, r3, #2
 801d522:	58d2      	ldr	r2, [r2, r3]
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	21ac      	movs	r1, #172	@ 0xac
 801d528:	0089      	lsls	r1, r1, #2
 801d52a:	468c      	mov	ip, r1
 801d52c:	4463      	add	r3, ip
 801d52e:	0019      	movs	r1, r3
 801d530:	0010      	movs	r0, r2
 801d532:	f7fe fc1d 	bl	801bd70 <USBD_LL_SetupStage>
}
 801d536:	46c0      	nop			@ (mov r8, r8)
 801d538:	46bd      	mov	sp, r7
 801d53a:	b002      	add	sp, #8
 801d53c:	bd80      	pop	{r7, pc}

0801d53e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d53e:	b590      	push	{r4, r7, lr}
 801d540:	b083      	sub	sp, #12
 801d542:	af00      	add	r7, sp, #0
 801d544:	6078      	str	r0, [r7, #4]
 801d546:	000a      	movs	r2, r1
 801d548:	1cfb      	adds	r3, r7, #3
 801d54a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d54c:	687a      	ldr	r2, [r7, #4]
 801d54e:	23bc      	movs	r3, #188	@ 0xbc
 801d550:	009b      	lsls	r3, r3, #2
 801d552:	58d4      	ldr	r4, [r2, r3]
 801d554:	1cfb      	adds	r3, r7, #3
 801d556:	781a      	ldrb	r2, [r3, #0]
 801d558:	6878      	ldr	r0, [r7, #4]
 801d55a:	23be      	movs	r3, #190	@ 0xbe
 801d55c:	0059      	lsls	r1, r3, #1
 801d55e:	0013      	movs	r3, r2
 801d560:	009b      	lsls	r3, r3, #2
 801d562:	189b      	adds	r3, r3, r2
 801d564:	00db      	lsls	r3, r3, #3
 801d566:	18c3      	adds	r3, r0, r3
 801d568:	185b      	adds	r3, r3, r1
 801d56a:	681a      	ldr	r2, [r3, #0]
 801d56c:	1cfb      	adds	r3, r7, #3
 801d56e:	781b      	ldrb	r3, [r3, #0]
 801d570:	0019      	movs	r1, r3
 801d572:	0020      	movs	r0, r4
 801d574:	f7fe fc5a 	bl	801be2c <USBD_LL_DataOutStage>
}
 801d578:	46c0      	nop			@ (mov r8, r8)
 801d57a:	46bd      	mov	sp, r7
 801d57c:	b003      	add	sp, #12
 801d57e:	bd90      	pop	{r4, r7, pc}

0801d580 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d580:	b580      	push	{r7, lr}
 801d582:	b082      	sub	sp, #8
 801d584:	af00      	add	r7, sp, #0
 801d586:	6078      	str	r0, [r7, #4]
 801d588:	000a      	movs	r2, r1
 801d58a:	1cfb      	adds	r3, r7, #3
 801d58c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d58e:	687a      	ldr	r2, [r7, #4]
 801d590:	23bc      	movs	r3, #188	@ 0xbc
 801d592:	009b      	lsls	r3, r3, #2
 801d594:	58d0      	ldr	r0, [r2, r3]
 801d596:	1cfb      	adds	r3, r7, #3
 801d598:	781a      	ldrb	r2, [r3, #0]
 801d59a:	6879      	ldr	r1, [r7, #4]
 801d59c:	0013      	movs	r3, r2
 801d59e:	009b      	lsls	r3, r3, #2
 801d5a0:	189b      	adds	r3, r3, r2
 801d5a2:	00db      	lsls	r3, r3, #3
 801d5a4:	18cb      	adds	r3, r1, r3
 801d5a6:	333c      	adds	r3, #60	@ 0x3c
 801d5a8:	681a      	ldr	r2, [r3, #0]
 801d5aa:	1cfb      	adds	r3, r7, #3
 801d5ac:	781b      	ldrb	r3, [r3, #0]
 801d5ae:	0019      	movs	r1, r3
 801d5b0:	f7fe fcbe 	bl	801bf30 <USBD_LL_DataInStage>
}
 801d5b4:	46c0      	nop			@ (mov r8, r8)
 801d5b6:	46bd      	mov	sp, r7
 801d5b8:	b002      	add	sp, #8
 801d5ba:	bd80      	pop	{r7, pc}

0801d5bc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b082      	sub	sp, #8
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d5c4:	687a      	ldr	r2, [r7, #4]
 801d5c6:	23bc      	movs	r3, #188	@ 0xbc
 801d5c8:	009b      	lsls	r3, r3, #2
 801d5ca:	58d3      	ldr	r3, [r2, r3]
 801d5cc:	0018      	movs	r0, r3
 801d5ce:	f7fe fdf5 	bl	801c1bc <USBD_LL_SOF>
}
 801d5d2:	46c0      	nop			@ (mov r8, r8)
 801d5d4:	46bd      	mov	sp, r7
 801d5d6:	b002      	add	sp, #8
 801d5d8:	bd80      	pop	{r7, pc}

0801d5da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d5da:	b580      	push	{r7, lr}
 801d5dc:	b084      	sub	sp, #16
 801d5de:	af00      	add	r7, sp, #0
 801d5e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d5e2:	230f      	movs	r3, #15
 801d5e4:	18fb      	adds	r3, r7, r3
 801d5e6:	2201      	movs	r2, #1
 801d5e8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	689b      	ldr	r3, [r3, #8]
 801d5ee:	2b02      	cmp	r3, #2
 801d5f0:	d001      	beq.n	801d5f6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d5f2:	f7eb f829 	bl	8008648 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d5f6:	687a      	ldr	r2, [r7, #4]
 801d5f8:	23bc      	movs	r3, #188	@ 0xbc
 801d5fa:	009b      	lsls	r3, r3, #2
 801d5fc:	58d2      	ldr	r2, [r2, r3]
 801d5fe:	230f      	movs	r3, #15
 801d600:	18fb      	adds	r3, r7, r3
 801d602:	781b      	ldrb	r3, [r3, #0]
 801d604:	0019      	movs	r1, r3
 801d606:	0010      	movs	r0, r2
 801d608:	f7fe fd97 	bl	801c13a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d60c:	687a      	ldr	r2, [r7, #4]
 801d60e:	23bc      	movs	r3, #188	@ 0xbc
 801d610:	009b      	lsls	r3, r3, #2
 801d612:	58d3      	ldr	r3, [r2, r3]
 801d614:	0018      	movs	r0, r3
 801d616:	f7fe fd48 	bl	801c0aa <USBD_LL_Reset>
}
 801d61a:	46c0      	nop			@ (mov r8, r8)
 801d61c:	46bd      	mov	sp, r7
 801d61e:	b004      	add	sp, #16
 801d620:	bd80      	pop	{r7, pc}
	...

0801d624 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d624:	b580      	push	{r7, lr}
 801d626:	b082      	sub	sp, #8
 801d628:	af00      	add	r7, sp, #0
 801d62a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d62c:	687a      	ldr	r2, [r7, #4]
 801d62e:	23bc      	movs	r3, #188	@ 0xbc
 801d630:	009b      	lsls	r3, r3, #2
 801d632:	58d3      	ldr	r3, [r2, r3]
 801d634:	0018      	movs	r0, r3
 801d636:	f7fe fd91 	bl	801c15c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	699b      	ldr	r3, [r3, #24]
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d005      	beq.n	801d64e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d642:	4b05      	ldr	r3, [pc, #20]	@ (801d658 <HAL_PCD_SuspendCallback+0x34>)
 801d644:	691a      	ldr	r2, [r3, #16]
 801d646:	4b04      	ldr	r3, [pc, #16]	@ (801d658 <HAL_PCD_SuspendCallback+0x34>)
 801d648:	2106      	movs	r1, #6
 801d64a:	430a      	orrs	r2, r1
 801d64c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d64e:	46c0      	nop			@ (mov r8, r8)
 801d650:	46bd      	mov	sp, r7
 801d652:	b002      	add	sp, #8
 801d654:	bd80      	pop	{r7, pc}
 801d656:	46c0      	nop			@ (mov r8, r8)
 801d658:	e000ed00 	.word	0xe000ed00

0801d65c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d65c:	b580      	push	{r7, lr}
 801d65e:	b082      	sub	sp, #8
 801d660:	af00      	add	r7, sp, #0
 801d662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	699b      	ldr	r3, [r3, #24]
 801d668:	2b00      	cmp	r3, #0
 801d66a:	d007      	beq.n	801d67c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d66c:	4b09      	ldr	r3, [pc, #36]	@ (801d694 <HAL_PCD_ResumeCallback+0x38>)
 801d66e:	691a      	ldr	r2, [r3, #16]
 801d670:	4b08      	ldr	r3, [pc, #32]	@ (801d694 <HAL_PCD_ResumeCallback+0x38>)
 801d672:	2106      	movs	r1, #6
 801d674:	438a      	bics	r2, r1
 801d676:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d678:	f000 fa44 	bl	801db04 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d67c:	687a      	ldr	r2, [r7, #4]
 801d67e:	23bc      	movs	r3, #188	@ 0xbc
 801d680:	009b      	lsls	r3, r3, #2
 801d682:	58d3      	ldr	r3, [r2, r3]
 801d684:	0018      	movs	r0, r3
 801d686:	f7fe fd81 	bl	801c18c <USBD_LL_Resume>
}
 801d68a:	46c0      	nop			@ (mov r8, r8)
 801d68c:	46bd      	mov	sp, r7
 801d68e:	b002      	add	sp, #8
 801d690:	bd80      	pop	{r7, pc}
 801d692:	46c0      	nop			@ (mov r8, r8)
 801d694:	e000ed00 	.word	0xe000ed00

0801d698 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d698:	b580      	push	{r7, lr}
 801d69a:	b082      	sub	sp, #8
 801d69c:	af00      	add	r7, sp, #0
 801d69e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d6a0:	4a2d      	ldr	r2, [pc, #180]	@ (801d758 <USBD_LL_Init+0xc0>)
 801d6a2:	23bc      	movs	r3, #188	@ 0xbc
 801d6a4:	009b      	lsls	r3, r3, #2
 801d6a6:	6879      	ldr	r1, [r7, #4]
 801d6a8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d6aa:	687a      	ldr	r2, [r7, #4]
 801d6ac:	23b0      	movs	r3, #176	@ 0xb0
 801d6ae:	009b      	lsls	r3, r3, #2
 801d6b0:	4929      	ldr	r1, [pc, #164]	@ (801d758 <USBD_LL_Init+0xc0>)
 801d6b2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d6b4:	4b28      	ldr	r3, [pc, #160]	@ (801d758 <USBD_LL_Init+0xc0>)
 801d6b6:	4a29      	ldr	r2, [pc, #164]	@ (801d75c <USBD_LL_Init+0xc4>)
 801d6b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d6ba:	4b27      	ldr	r3, [pc, #156]	@ (801d758 <USBD_LL_Init+0xc0>)
 801d6bc:	2208      	movs	r2, #8
 801d6be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d6c0:	4b25      	ldr	r3, [pc, #148]	@ (801d758 <USBD_LL_Init+0xc0>)
 801d6c2:	2202      	movs	r2, #2
 801d6c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d6c6:	4b24      	ldr	r3, [pc, #144]	@ (801d758 <USBD_LL_Init+0xc0>)
 801d6c8:	2202      	movs	r2, #2
 801d6ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d6cc:	4b22      	ldr	r3, [pc, #136]	@ (801d758 <USBD_LL_Init+0xc0>)
 801d6ce:	2200      	movs	r2, #0
 801d6d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d6d2:	4b21      	ldr	r3, [pc, #132]	@ (801d758 <USBD_LL_Init+0xc0>)
 801d6d4:	2200      	movs	r2, #0
 801d6d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d6d8:	4b1f      	ldr	r3, [pc, #124]	@ (801d758 <USBD_LL_Init+0xc0>)
 801d6da:	2200      	movs	r2, #0
 801d6dc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d6de:	4b1e      	ldr	r3, [pc, #120]	@ (801d758 <USBD_LL_Init+0xc0>)
 801d6e0:	0018      	movs	r0, r3
 801d6e2:	f7f5 ff95 	bl	8013610 <HAL_PCD_Init>
 801d6e6:	1e03      	subs	r3, r0, #0
 801d6e8:	d001      	beq.n	801d6ee <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d6ea:	f7ea ffad 	bl	8008648 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d6ee:	687a      	ldr	r2, [r7, #4]
 801d6f0:	23b0      	movs	r3, #176	@ 0xb0
 801d6f2:	009b      	lsls	r3, r3, #2
 801d6f4:	58d0      	ldr	r0, [r2, r3]
 801d6f6:	2318      	movs	r3, #24
 801d6f8:	2200      	movs	r2, #0
 801d6fa:	2100      	movs	r1, #0
 801d6fc:	f7f7 fd56 	bl	80151ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d700:	687a      	ldr	r2, [r7, #4]
 801d702:	23b0      	movs	r3, #176	@ 0xb0
 801d704:	009b      	lsls	r3, r3, #2
 801d706:	58d0      	ldr	r0, [r2, r3]
 801d708:	2358      	movs	r3, #88	@ 0x58
 801d70a:	2200      	movs	r2, #0
 801d70c:	2180      	movs	r1, #128	@ 0x80
 801d70e:	f7f7 fd4d 	bl	80151ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d712:	687a      	ldr	r2, [r7, #4]
 801d714:	23b0      	movs	r3, #176	@ 0xb0
 801d716:	009b      	lsls	r3, r3, #2
 801d718:	58d0      	ldr	r0, [r2, r3]
 801d71a:	23c0      	movs	r3, #192	@ 0xc0
 801d71c:	2200      	movs	r2, #0
 801d71e:	2181      	movs	r1, #129	@ 0x81
 801d720:	f7f7 fd44 	bl	80151ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d724:	687a      	ldr	r2, [r7, #4]
 801d726:	23b0      	movs	r3, #176	@ 0xb0
 801d728:	009b      	lsls	r3, r3, #2
 801d72a:	58d0      	ldr	r0, [r2, r3]
 801d72c:	2388      	movs	r3, #136	@ 0x88
 801d72e:	005b      	lsls	r3, r3, #1
 801d730:	2200      	movs	r2, #0
 801d732:	2101      	movs	r1, #1
 801d734:	f7f7 fd3a 	bl	80151ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d738:	687a      	ldr	r2, [r7, #4]
 801d73a:	23b0      	movs	r3, #176	@ 0xb0
 801d73c:	009b      	lsls	r3, r3, #2
 801d73e:	58d0      	ldr	r0, [r2, r3]
 801d740:	2380      	movs	r3, #128	@ 0x80
 801d742:	005b      	lsls	r3, r3, #1
 801d744:	2200      	movs	r2, #0
 801d746:	2182      	movs	r1, #130	@ 0x82
 801d748:	f7f7 fd30 	bl	80151ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d74c:	2300      	movs	r3, #0
}
 801d74e:	0018      	movs	r0, r3
 801d750:	46bd      	mov	sp, r7
 801d752:	b002      	add	sp, #8
 801d754:	bd80      	pop	{r7, pc}
 801d756:	46c0      	nop			@ (mov r8, r8)
 801d758:	20002d78 	.word	0x20002d78
 801d75c:	40005c00 	.word	0x40005c00

0801d760 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d760:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d762:	b085      	sub	sp, #20
 801d764:	af00      	add	r7, sp, #0
 801d766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d768:	210f      	movs	r1, #15
 801d76a:	187b      	adds	r3, r7, r1
 801d76c:	2200      	movs	r2, #0
 801d76e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d770:	260e      	movs	r6, #14
 801d772:	19bb      	adds	r3, r7, r6
 801d774:	2200      	movs	r2, #0
 801d776:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d778:	687a      	ldr	r2, [r7, #4]
 801d77a:	23b0      	movs	r3, #176	@ 0xb0
 801d77c:	009b      	lsls	r3, r3, #2
 801d77e:	58d3      	ldr	r3, [r2, r3]
 801d780:	000d      	movs	r5, r1
 801d782:	187c      	adds	r4, r7, r1
 801d784:	0018      	movs	r0, r3
 801d786:	f7f6 f843 	bl	8013810 <HAL_PCD_Start>
 801d78a:	0003      	movs	r3, r0
 801d78c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d78e:	19bc      	adds	r4, r7, r6
 801d790:	197b      	adds	r3, r7, r5
 801d792:	781b      	ldrb	r3, [r3, #0]
 801d794:	0018      	movs	r0, r3
 801d796:	f000 f9bc 	bl	801db12 <USBD_Get_USB_Status>
 801d79a:	0003      	movs	r3, r0
 801d79c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d79e:	19bb      	adds	r3, r7, r6
 801d7a0:	781b      	ldrb	r3, [r3, #0]
}
 801d7a2:	0018      	movs	r0, r3
 801d7a4:	46bd      	mov	sp, r7
 801d7a6:	b005      	add	sp, #20
 801d7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d7aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d7aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7ac:	b085      	sub	sp, #20
 801d7ae:	af00      	add	r7, sp, #0
 801d7b0:	6078      	str	r0, [r7, #4]
 801d7b2:	000c      	movs	r4, r1
 801d7b4:	0010      	movs	r0, r2
 801d7b6:	0019      	movs	r1, r3
 801d7b8:	1cfb      	adds	r3, r7, #3
 801d7ba:	1c22      	adds	r2, r4, #0
 801d7bc:	701a      	strb	r2, [r3, #0]
 801d7be:	1cbb      	adds	r3, r7, #2
 801d7c0:	1c02      	adds	r2, r0, #0
 801d7c2:	701a      	strb	r2, [r3, #0]
 801d7c4:	003b      	movs	r3, r7
 801d7c6:	1c0a      	adds	r2, r1, #0
 801d7c8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d7ca:	260f      	movs	r6, #15
 801d7cc:	19bb      	adds	r3, r7, r6
 801d7ce:	2200      	movs	r2, #0
 801d7d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d7d2:	250e      	movs	r5, #14
 801d7d4:	197b      	adds	r3, r7, r5
 801d7d6:	2200      	movs	r2, #0
 801d7d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d7da:	687a      	ldr	r2, [r7, #4]
 801d7dc:	23b0      	movs	r3, #176	@ 0xb0
 801d7de:	009b      	lsls	r3, r3, #2
 801d7e0:	58d0      	ldr	r0, [r2, r3]
 801d7e2:	19bc      	adds	r4, r7, r6
 801d7e4:	1cbb      	adds	r3, r7, #2
 801d7e6:	781d      	ldrb	r5, [r3, #0]
 801d7e8:	003b      	movs	r3, r7
 801d7ea:	881a      	ldrh	r2, [r3, #0]
 801d7ec:	1cfb      	adds	r3, r7, #3
 801d7ee:	7819      	ldrb	r1, [r3, #0]
 801d7f0:	002b      	movs	r3, r5
 801d7f2:	f7f6 f9a2 	bl	8013b3a <HAL_PCD_EP_Open>
 801d7f6:	0003      	movs	r3, r0
 801d7f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d7fa:	250e      	movs	r5, #14
 801d7fc:	197c      	adds	r4, r7, r5
 801d7fe:	19bb      	adds	r3, r7, r6
 801d800:	781b      	ldrb	r3, [r3, #0]
 801d802:	0018      	movs	r0, r3
 801d804:	f000 f985 	bl	801db12 <USBD_Get_USB_Status>
 801d808:	0003      	movs	r3, r0
 801d80a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d80c:	197b      	adds	r3, r7, r5
 801d80e:	781b      	ldrb	r3, [r3, #0]
}
 801d810:	0018      	movs	r0, r3
 801d812:	46bd      	mov	sp, r7
 801d814:	b005      	add	sp, #20
 801d816:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d818 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d81a:	b085      	sub	sp, #20
 801d81c:	af00      	add	r7, sp, #0
 801d81e:	6078      	str	r0, [r7, #4]
 801d820:	000a      	movs	r2, r1
 801d822:	1cfb      	adds	r3, r7, #3
 801d824:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d826:	210f      	movs	r1, #15
 801d828:	187b      	adds	r3, r7, r1
 801d82a:	2200      	movs	r2, #0
 801d82c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d82e:	260e      	movs	r6, #14
 801d830:	19bb      	adds	r3, r7, r6
 801d832:	2200      	movs	r2, #0
 801d834:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d836:	687a      	ldr	r2, [r7, #4]
 801d838:	23b0      	movs	r3, #176	@ 0xb0
 801d83a:	009b      	lsls	r3, r3, #2
 801d83c:	58d2      	ldr	r2, [r2, r3]
 801d83e:	000d      	movs	r5, r1
 801d840:	187c      	adds	r4, r7, r1
 801d842:	1cfb      	adds	r3, r7, #3
 801d844:	781b      	ldrb	r3, [r3, #0]
 801d846:	0019      	movs	r1, r3
 801d848:	0010      	movs	r0, r2
 801d84a:	f7f6 f9e5 	bl	8013c18 <HAL_PCD_EP_Close>
 801d84e:	0003      	movs	r3, r0
 801d850:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d852:	19bc      	adds	r4, r7, r6
 801d854:	197b      	adds	r3, r7, r5
 801d856:	781b      	ldrb	r3, [r3, #0]
 801d858:	0018      	movs	r0, r3
 801d85a:	f000 f95a 	bl	801db12 <USBD_Get_USB_Status>
 801d85e:	0003      	movs	r3, r0
 801d860:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d862:	19bb      	adds	r3, r7, r6
 801d864:	781b      	ldrb	r3, [r3, #0]
}
 801d866:	0018      	movs	r0, r3
 801d868:	46bd      	mov	sp, r7
 801d86a:	b005      	add	sp, #20
 801d86c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d86e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d86e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d870:	b085      	sub	sp, #20
 801d872:	af00      	add	r7, sp, #0
 801d874:	6078      	str	r0, [r7, #4]
 801d876:	000a      	movs	r2, r1
 801d878:	1cfb      	adds	r3, r7, #3
 801d87a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d87c:	210f      	movs	r1, #15
 801d87e:	187b      	adds	r3, r7, r1
 801d880:	2200      	movs	r2, #0
 801d882:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d884:	260e      	movs	r6, #14
 801d886:	19bb      	adds	r3, r7, r6
 801d888:	2200      	movs	r2, #0
 801d88a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d88c:	687a      	ldr	r2, [r7, #4]
 801d88e:	23b0      	movs	r3, #176	@ 0xb0
 801d890:	009b      	lsls	r3, r3, #2
 801d892:	58d2      	ldr	r2, [r2, r3]
 801d894:	000d      	movs	r5, r1
 801d896:	187c      	adds	r4, r7, r1
 801d898:	1cfb      	adds	r3, r7, #3
 801d89a:	781b      	ldrb	r3, [r3, #0]
 801d89c:	0019      	movs	r1, r3
 801d89e:	0010      	movs	r0, r2
 801d8a0:	f7f6 fa97 	bl	8013dd2 <HAL_PCD_EP_SetStall>
 801d8a4:	0003      	movs	r3, r0
 801d8a6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d8a8:	19bc      	adds	r4, r7, r6
 801d8aa:	197b      	adds	r3, r7, r5
 801d8ac:	781b      	ldrb	r3, [r3, #0]
 801d8ae:	0018      	movs	r0, r3
 801d8b0:	f000 f92f 	bl	801db12 <USBD_Get_USB_Status>
 801d8b4:	0003      	movs	r3, r0
 801d8b6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d8b8:	19bb      	adds	r3, r7, r6
 801d8ba:	781b      	ldrb	r3, [r3, #0]
}
 801d8bc:	0018      	movs	r0, r3
 801d8be:	46bd      	mov	sp, r7
 801d8c0:	b005      	add	sp, #20
 801d8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d8c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8c6:	b085      	sub	sp, #20
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	6078      	str	r0, [r7, #4]
 801d8cc:	000a      	movs	r2, r1
 801d8ce:	1cfb      	adds	r3, r7, #3
 801d8d0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d8d2:	210f      	movs	r1, #15
 801d8d4:	187b      	adds	r3, r7, r1
 801d8d6:	2200      	movs	r2, #0
 801d8d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d8da:	260e      	movs	r6, #14
 801d8dc:	19bb      	adds	r3, r7, r6
 801d8de:	2200      	movs	r2, #0
 801d8e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d8e2:	687a      	ldr	r2, [r7, #4]
 801d8e4:	23b0      	movs	r3, #176	@ 0xb0
 801d8e6:	009b      	lsls	r3, r3, #2
 801d8e8:	58d2      	ldr	r2, [r2, r3]
 801d8ea:	000d      	movs	r5, r1
 801d8ec:	187c      	adds	r4, r7, r1
 801d8ee:	1cfb      	adds	r3, r7, #3
 801d8f0:	781b      	ldrb	r3, [r3, #0]
 801d8f2:	0019      	movs	r1, r3
 801d8f4:	0010      	movs	r0, r2
 801d8f6:	f7f6 fac8 	bl	8013e8a <HAL_PCD_EP_ClrStall>
 801d8fa:	0003      	movs	r3, r0
 801d8fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d8fe:	19bc      	adds	r4, r7, r6
 801d900:	197b      	adds	r3, r7, r5
 801d902:	781b      	ldrb	r3, [r3, #0]
 801d904:	0018      	movs	r0, r3
 801d906:	f000 f904 	bl	801db12 <USBD_Get_USB_Status>
 801d90a:	0003      	movs	r3, r0
 801d90c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d90e:	19bb      	adds	r3, r7, r6
 801d910:	781b      	ldrb	r3, [r3, #0]
}
 801d912:	0018      	movs	r0, r3
 801d914:	46bd      	mov	sp, r7
 801d916:	b005      	add	sp, #20
 801d918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d91a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d91a:	b580      	push	{r7, lr}
 801d91c:	b084      	sub	sp, #16
 801d91e:	af00      	add	r7, sp, #0
 801d920:	6078      	str	r0, [r7, #4]
 801d922:	000a      	movs	r2, r1
 801d924:	1cfb      	adds	r3, r7, #3
 801d926:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d928:	687a      	ldr	r2, [r7, #4]
 801d92a:	23b0      	movs	r3, #176	@ 0xb0
 801d92c:	009b      	lsls	r3, r3, #2
 801d92e:	58d3      	ldr	r3, [r2, r3]
 801d930:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d932:	1cfb      	adds	r3, r7, #3
 801d934:	781b      	ldrb	r3, [r3, #0]
 801d936:	b25b      	sxtb	r3, r3
 801d938:	2b00      	cmp	r3, #0
 801d93a:	da0d      	bge.n	801d958 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d93c:	1cfb      	adds	r3, r7, #3
 801d93e:	781b      	ldrb	r3, [r3, #0]
 801d940:	227f      	movs	r2, #127	@ 0x7f
 801d942:	4013      	ands	r3, r2
 801d944:	68f9      	ldr	r1, [r7, #12]
 801d946:	1c5a      	adds	r2, r3, #1
 801d948:	0013      	movs	r3, r2
 801d94a:	009b      	lsls	r3, r3, #2
 801d94c:	189b      	adds	r3, r3, r2
 801d94e:	00db      	lsls	r3, r3, #3
 801d950:	18cb      	adds	r3, r1, r3
 801d952:	3302      	adds	r3, #2
 801d954:	781b      	ldrb	r3, [r3, #0]
 801d956:	e00d      	b.n	801d974 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d958:	1cfb      	adds	r3, r7, #3
 801d95a:	781b      	ldrb	r3, [r3, #0]
 801d95c:	227f      	movs	r2, #127	@ 0x7f
 801d95e:	401a      	ands	r2, r3
 801d960:	68f8      	ldr	r0, [r7, #12]
 801d962:	23b5      	movs	r3, #181	@ 0xb5
 801d964:	0059      	lsls	r1, r3, #1
 801d966:	0013      	movs	r3, r2
 801d968:	009b      	lsls	r3, r3, #2
 801d96a:	189b      	adds	r3, r3, r2
 801d96c:	00db      	lsls	r3, r3, #3
 801d96e:	18c3      	adds	r3, r0, r3
 801d970:	185b      	adds	r3, r3, r1
 801d972:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d974:	0018      	movs	r0, r3
 801d976:	46bd      	mov	sp, r7
 801d978:	b004      	add	sp, #16
 801d97a:	bd80      	pop	{r7, pc}

0801d97c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d97e:	b085      	sub	sp, #20
 801d980:	af00      	add	r7, sp, #0
 801d982:	6078      	str	r0, [r7, #4]
 801d984:	000a      	movs	r2, r1
 801d986:	1cfb      	adds	r3, r7, #3
 801d988:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d98a:	210f      	movs	r1, #15
 801d98c:	187b      	adds	r3, r7, r1
 801d98e:	2200      	movs	r2, #0
 801d990:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d992:	260e      	movs	r6, #14
 801d994:	19bb      	adds	r3, r7, r6
 801d996:	2200      	movs	r2, #0
 801d998:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d99a:	687a      	ldr	r2, [r7, #4]
 801d99c:	23b0      	movs	r3, #176	@ 0xb0
 801d99e:	009b      	lsls	r3, r3, #2
 801d9a0:	58d2      	ldr	r2, [r2, r3]
 801d9a2:	000d      	movs	r5, r1
 801d9a4:	187c      	adds	r4, r7, r1
 801d9a6:	1cfb      	adds	r3, r7, #3
 801d9a8:	781b      	ldrb	r3, [r3, #0]
 801d9aa:	0019      	movs	r1, r3
 801d9ac:	0010      	movs	r0, r2
 801d9ae:	f7f6 f899 	bl	8013ae4 <HAL_PCD_SetAddress>
 801d9b2:	0003      	movs	r3, r0
 801d9b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d9b6:	19bc      	adds	r4, r7, r6
 801d9b8:	197b      	adds	r3, r7, r5
 801d9ba:	781b      	ldrb	r3, [r3, #0]
 801d9bc:	0018      	movs	r0, r3
 801d9be:	f000 f8a8 	bl	801db12 <USBD_Get_USB_Status>
 801d9c2:	0003      	movs	r3, r0
 801d9c4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d9c6:	19bb      	adds	r3, r7, r6
 801d9c8:	781b      	ldrb	r3, [r3, #0]
}
 801d9ca:	0018      	movs	r0, r3
 801d9cc:	46bd      	mov	sp, r7
 801d9ce:	b005      	add	sp, #20
 801d9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d9d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d9d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9d4:	b087      	sub	sp, #28
 801d9d6:	af00      	add	r7, sp, #0
 801d9d8:	60f8      	str	r0, [r7, #12]
 801d9da:	0008      	movs	r0, r1
 801d9dc:	607a      	str	r2, [r7, #4]
 801d9de:	0019      	movs	r1, r3
 801d9e0:	230b      	movs	r3, #11
 801d9e2:	18fb      	adds	r3, r7, r3
 801d9e4:	1c02      	adds	r2, r0, #0
 801d9e6:	701a      	strb	r2, [r3, #0]
 801d9e8:	2408      	movs	r4, #8
 801d9ea:	193b      	adds	r3, r7, r4
 801d9ec:	1c0a      	adds	r2, r1, #0
 801d9ee:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d9f0:	2117      	movs	r1, #23
 801d9f2:	187b      	adds	r3, r7, r1
 801d9f4:	2200      	movs	r2, #0
 801d9f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d9f8:	2516      	movs	r5, #22
 801d9fa:	197b      	adds	r3, r7, r5
 801d9fc:	2200      	movs	r2, #0
 801d9fe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801da00:	68fa      	ldr	r2, [r7, #12]
 801da02:	23b0      	movs	r3, #176	@ 0xb0
 801da04:	009b      	lsls	r3, r3, #2
 801da06:	58d0      	ldr	r0, [r2, r3]
 801da08:	193b      	adds	r3, r7, r4
 801da0a:	881d      	ldrh	r5, [r3, #0]
 801da0c:	000e      	movs	r6, r1
 801da0e:	187c      	adds	r4, r7, r1
 801da10:	687a      	ldr	r2, [r7, #4]
 801da12:	230b      	movs	r3, #11
 801da14:	18fb      	adds	r3, r7, r3
 801da16:	7819      	ldrb	r1, [r3, #0]
 801da18:	002b      	movs	r3, r5
 801da1a:	f7f6 f99e 	bl	8013d5a <HAL_PCD_EP_Transmit>
 801da1e:	0003      	movs	r3, r0
 801da20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801da22:	2516      	movs	r5, #22
 801da24:	197c      	adds	r4, r7, r5
 801da26:	19bb      	adds	r3, r7, r6
 801da28:	781b      	ldrb	r3, [r3, #0]
 801da2a:	0018      	movs	r0, r3
 801da2c:	f000 f871 	bl	801db12 <USBD_Get_USB_Status>
 801da30:	0003      	movs	r3, r0
 801da32:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801da34:	197b      	adds	r3, r7, r5
 801da36:	781b      	ldrb	r3, [r3, #0]
}
 801da38:	0018      	movs	r0, r3
 801da3a:	46bd      	mov	sp, r7
 801da3c:	b007      	add	sp, #28
 801da3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801da40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801da40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da42:	b087      	sub	sp, #28
 801da44:	af00      	add	r7, sp, #0
 801da46:	60f8      	str	r0, [r7, #12]
 801da48:	0008      	movs	r0, r1
 801da4a:	607a      	str	r2, [r7, #4]
 801da4c:	0019      	movs	r1, r3
 801da4e:	230b      	movs	r3, #11
 801da50:	18fb      	adds	r3, r7, r3
 801da52:	1c02      	adds	r2, r0, #0
 801da54:	701a      	strb	r2, [r3, #0]
 801da56:	2408      	movs	r4, #8
 801da58:	193b      	adds	r3, r7, r4
 801da5a:	1c0a      	adds	r2, r1, #0
 801da5c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da5e:	2117      	movs	r1, #23
 801da60:	187b      	adds	r3, r7, r1
 801da62:	2200      	movs	r2, #0
 801da64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da66:	2516      	movs	r5, #22
 801da68:	197b      	adds	r3, r7, r5
 801da6a:	2200      	movs	r2, #0
 801da6c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801da6e:	68fa      	ldr	r2, [r7, #12]
 801da70:	23b0      	movs	r3, #176	@ 0xb0
 801da72:	009b      	lsls	r3, r3, #2
 801da74:	58d0      	ldr	r0, [r2, r3]
 801da76:	193b      	adds	r3, r7, r4
 801da78:	881d      	ldrh	r5, [r3, #0]
 801da7a:	000e      	movs	r6, r1
 801da7c:	187c      	adds	r4, r7, r1
 801da7e:	687a      	ldr	r2, [r7, #4]
 801da80:	230b      	movs	r3, #11
 801da82:	18fb      	adds	r3, r7, r3
 801da84:	7819      	ldrb	r1, [r3, #0]
 801da86:	002b      	movs	r3, r5
 801da88:	f7f6 f917 	bl	8013cba <HAL_PCD_EP_Receive>
 801da8c:	0003      	movs	r3, r0
 801da8e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801da90:	2516      	movs	r5, #22
 801da92:	197c      	adds	r4, r7, r5
 801da94:	19bb      	adds	r3, r7, r6
 801da96:	781b      	ldrb	r3, [r3, #0]
 801da98:	0018      	movs	r0, r3
 801da9a:	f000 f83a 	bl	801db12 <USBD_Get_USB_Status>
 801da9e:	0003      	movs	r3, r0
 801daa0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801daa2:	197b      	adds	r3, r7, r5
 801daa4:	781b      	ldrb	r3, [r3, #0]
}
 801daa6:	0018      	movs	r0, r3
 801daa8:	46bd      	mov	sp, r7
 801daaa:	b007      	add	sp, #28
 801daac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801daae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801daae:	b580      	push	{r7, lr}
 801dab0:	b082      	sub	sp, #8
 801dab2:	af00      	add	r7, sp, #0
 801dab4:	6078      	str	r0, [r7, #4]
 801dab6:	000a      	movs	r2, r1
 801dab8:	1cfb      	adds	r3, r7, #3
 801daba:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801dabc:	687a      	ldr	r2, [r7, #4]
 801dabe:	23b0      	movs	r3, #176	@ 0xb0
 801dac0:	009b      	lsls	r3, r3, #2
 801dac2:	58d2      	ldr	r2, [r2, r3]
 801dac4:	1cfb      	adds	r3, r7, #3
 801dac6:	781b      	ldrb	r3, [r3, #0]
 801dac8:	0019      	movs	r1, r3
 801daca:	0010      	movs	r0, r2
 801dacc:	f7f6 f92c 	bl	8013d28 <HAL_PCD_EP_GetRxCount>
 801dad0:	0003      	movs	r3, r0
}
 801dad2:	0018      	movs	r0, r3
 801dad4:	46bd      	mov	sp, r7
 801dad6:	b002      	add	sp, #8
 801dad8:	bd80      	pop	{r7, pc}
	...

0801dadc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801dadc:	b580      	push	{r7, lr}
 801dade:	b082      	sub	sp, #8
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801dae4:	4b02      	ldr	r3, [pc, #8]	@ (801daf0 <USBD_static_malloc+0x14>)
}
 801dae6:	0018      	movs	r0, r3
 801dae8:	46bd      	mov	sp, r7
 801daea:	b002      	add	sp, #8
 801daec:	bd80      	pop	{r7, pc}
 801daee:	46c0      	nop			@ (mov r8, r8)
 801daf0:	2000306c 	.word	0x2000306c

0801daf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801daf4:	b580      	push	{r7, lr}
 801daf6:	b082      	sub	sp, #8
 801daf8:	af00      	add	r7, sp, #0
 801dafa:	6078      	str	r0, [r7, #4]

}
 801dafc:	46c0      	nop			@ (mov r8, r8)
 801dafe:	46bd      	mov	sp, r7
 801db00:	b002      	add	sp, #8
 801db02:	bd80      	pop	{r7, pc}

0801db04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801db04:	b580      	push	{r7, lr}
 801db06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801db08:	f7ea fc58 	bl	80083bc <SystemClock_Config>
}
 801db0c:	46c0      	nop			@ (mov r8, r8)
 801db0e:	46bd      	mov	sp, r7
 801db10:	bd80      	pop	{r7, pc}

0801db12 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801db12:	b580      	push	{r7, lr}
 801db14:	b084      	sub	sp, #16
 801db16:	af00      	add	r7, sp, #0
 801db18:	0002      	movs	r2, r0
 801db1a:	1dfb      	adds	r3, r7, #7
 801db1c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801db1e:	230f      	movs	r3, #15
 801db20:	18fb      	adds	r3, r7, r3
 801db22:	2200      	movs	r2, #0
 801db24:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801db26:	1dfb      	adds	r3, r7, #7
 801db28:	781b      	ldrb	r3, [r3, #0]
 801db2a:	2b03      	cmp	r3, #3
 801db2c:	d017      	beq.n	801db5e <USBD_Get_USB_Status+0x4c>
 801db2e:	dc1b      	bgt.n	801db68 <USBD_Get_USB_Status+0x56>
 801db30:	2b02      	cmp	r3, #2
 801db32:	d00f      	beq.n	801db54 <USBD_Get_USB_Status+0x42>
 801db34:	dc18      	bgt.n	801db68 <USBD_Get_USB_Status+0x56>
 801db36:	2b00      	cmp	r3, #0
 801db38:	d002      	beq.n	801db40 <USBD_Get_USB_Status+0x2e>
 801db3a:	2b01      	cmp	r3, #1
 801db3c:	d005      	beq.n	801db4a <USBD_Get_USB_Status+0x38>
 801db3e:	e013      	b.n	801db68 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801db40:	230f      	movs	r3, #15
 801db42:	18fb      	adds	r3, r7, r3
 801db44:	2200      	movs	r2, #0
 801db46:	701a      	strb	r2, [r3, #0]
    break;
 801db48:	e013      	b.n	801db72 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801db4a:	230f      	movs	r3, #15
 801db4c:	18fb      	adds	r3, r7, r3
 801db4e:	2202      	movs	r2, #2
 801db50:	701a      	strb	r2, [r3, #0]
    break;
 801db52:	e00e      	b.n	801db72 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801db54:	230f      	movs	r3, #15
 801db56:	18fb      	adds	r3, r7, r3
 801db58:	2201      	movs	r2, #1
 801db5a:	701a      	strb	r2, [r3, #0]
    break;
 801db5c:	e009      	b.n	801db72 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801db5e:	230f      	movs	r3, #15
 801db60:	18fb      	adds	r3, r7, r3
 801db62:	2202      	movs	r2, #2
 801db64:	701a      	strb	r2, [r3, #0]
    break;
 801db66:	e004      	b.n	801db72 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801db68:	230f      	movs	r3, #15
 801db6a:	18fb      	adds	r3, r7, r3
 801db6c:	2202      	movs	r2, #2
 801db6e:	701a      	strb	r2, [r3, #0]
    break;
 801db70:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801db72:	230f      	movs	r3, #15
 801db74:	18fb      	adds	r3, r7, r3
 801db76:	781b      	ldrb	r3, [r3, #0]
}
 801db78:	0018      	movs	r0, r3
 801db7a:	46bd      	mov	sp, r7
 801db7c:	b004      	add	sp, #16
 801db7e:	bd80      	pop	{r7, pc}

0801db80 <arm_cfft_radix4by2_q31>:
 801db80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db82:	465f      	mov	r7, fp
 801db84:	4656      	mov	r6, sl
 801db86:	464d      	mov	r5, r9
 801db88:	4644      	mov	r4, r8
 801db8a:	000b      	movs	r3, r1
 801db8c:	b4f0      	push	{r4, r5, r6, r7}
 801db8e:	085b      	lsrs	r3, r3, #1
 801db90:	b08f      	sub	sp, #60	@ 0x3c
 801db92:	910a      	str	r1, [sp, #40]	@ 0x28
 801db94:	0007      	movs	r7, r0
 801db96:	9009      	str	r0, [sp, #36]	@ 0x24
 801db98:	0011      	movs	r1, r2
 801db9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801db9c:	930c      	str	r3, [sp, #48]	@ 0x30
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d100      	bne.n	801dba4 <arm_cfft_radix4by2_q31+0x24>
 801dba2:	e0a0      	b.n	801dce6 <arm_cfft_radix4by2_q31+0x166>
 801dba4:	0002      	movs	r2, r0
 801dba6:	00db      	lsls	r3, r3, #3
 801dba8:	3204      	adds	r2, #4
 801dbaa:	4691      	mov	r9, r2
 801dbac:	4698      	mov	r8, r3
 801dbae:	000a      	movs	r2, r1
 801dbb0:	464e      	mov	r6, r9
 801dbb2:	4442      	add	r2, r8
 801dbb4:	4699      	mov	r9, r3
 801dbb6:	4688      	mov	r8, r1
 801dbb8:	9208      	str	r2, [sp, #32]
 801dbba:	900d      	str	r0, [sp, #52]	@ 0x34
 801dbbc:	4643      	mov	r3, r8
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	469b      	mov	fp, r3
 801dbc2:	4643      	mov	r3, r8
 801dbc4:	685b      	ldr	r3, [r3, #4]
 801dbc6:	469a      	mov	sl, r3
 801dbc8:	683b      	ldr	r3, [r7, #0]
 801dbca:	109c      	asrs	r4, r3, #2
 801dbcc:	464b      	mov	r3, r9
 801dbce:	58fb      	ldr	r3, [r7, r3]
 801dbd0:	109a      	asrs	r2, r3, #2
 801dbd2:	18a3      	adds	r3, r4, r2
 801dbd4:	603b      	str	r3, [r7, #0]
 801dbd6:	6833      	ldr	r3, [r6, #0]
 801dbd8:	1aa4      	subs	r4, r4, r2
 801dbda:	109d      	asrs	r5, r3, #2
 801dbdc:	464b      	mov	r3, r9
 801dbde:	58f3      	ldr	r3, [r6, r3]
 801dbe0:	17e2      	asrs	r2, r4, #31
 801dbe2:	109b      	asrs	r3, r3, #2
 801dbe4:	18e9      	adds	r1, r5, r3
 801dbe6:	6031      	str	r1, [r6, #0]
 801dbe8:	0011      	movs	r1, r2
 801dbea:	465a      	mov	r2, fp
 801dbec:	17d2      	asrs	r2, r2, #31
 801dbee:	0010      	movs	r0, r2
 801dbf0:	4652      	mov	r2, sl
 801dbf2:	1aed      	subs	r5, r5, r3
 801dbf4:	17eb      	asrs	r3, r5, #31
 801dbf6:	17d2      	asrs	r2, r2, #31
 801dbf8:	9307      	str	r3, [sp, #28]
 801dbfa:	9204      	str	r2, [sp, #16]
 801dbfc:	0003      	movs	r3, r0
 801dbfe:	465a      	mov	r2, fp
 801dc00:	9006      	str	r0, [sp, #24]
 801dc02:	0020      	movs	r0, r4
 801dc04:	9105      	str	r1, [sp, #20]
 801dc06:	f7e2 fcdb 	bl	80005c0 <__aeabi_lmul>
 801dc0a:	2280      	movs	r2, #128	@ 0x80
 801dc0c:	2300      	movs	r3, #0
 801dc0e:	0612      	lsls	r2, r2, #24
 801dc10:	1880      	adds	r0, r0, r2
 801dc12:	4159      	adcs	r1, r3
 801dc14:	2300      	movs	r3, #0
 801dc16:	9101      	str	r1, [sp, #4]
 801dc18:	9300      	str	r3, [sp, #0]
 801dc1a:	4652      	mov	r2, sl
 801dc1c:	9b04      	ldr	r3, [sp, #16]
 801dc1e:	0028      	movs	r0, r5
 801dc20:	17e9      	asrs	r1, r5, #31
 801dc22:	f7e2 fccd 	bl	80005c0 <__aeabi_lmul>
 801dc26:	9a00      	ldr	r2, [sp, #0]
 801dc28:	9b01      	ldr	r3, [sp, #4]
 801dc2a:	1880      	adds	r0, r0, r2
 801dc2c:	4159      	adcs	r1, r3
 801dc2e:	2280      	movs	r2, #128	@ 0x80
 801dc30:	2300      	movs	r3, #0
 801dc32:	0612      	lsls	r2, r2, #24
 801dc34:	1880      	adds	r0, r0, r2
 801dc36:	4159      	adcs	r1, r3
 801dc38:	464a      	mov	r2, r9
 801dc3a:	004b      	lsls	r3, r1, #1
 801dc3c:	50bb      	str	r3, [r7, r2]
 801dc3e:	4658      	mov	r0, fp
 801dc40:	002a      	movs	r2, r5
 801dc42:	9b07      	ldr	r3, [sp, #28]
 801dc44:	9906      	ldr	r1, [sp, #24]
 801dc46:	f7e2 fcbb 	bl	80005c0 <__aeabi_lmul>
 801dc4a:	2280      	movs	r2, #128	@ 0x80
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	0612      	lsls	r2, r2, #24
 801dc50:	1880      	adds	r0, r0, r2
 801dc52:	4159      	adcs	r1, r3
 801dc54:	2000      	movs	r0, #0
 801dc56:	9103      	str	r1, [sp, #12]
 801dc58:	9002      	str	r0, [sp, #8]
 801dc5a:	4652      	mov	r2, sl
 801dc5c:	9b04      	ldr	r3, [sp, #16]
 801dc5e:	0020      	movs	r0, r4
 801dc60:	9905      	ldr	r1, [sp, #20]
 801dc62:	f7e2 fcad 	bl	80005c0 <__aeabi_lmul>
 801dc66:	9a02      	ldr	r2, [sp, #8]
 801dc68:	9b03      	ldr	r3, [sp, #12]
 801dc6a:	1a12      	subs	r2, r2, r0
 801dc6c:	418b      	sbcs	r3, r1
 801dc6e:	2080      	movs	r0, #128	@ 0x80
 801dc70:	2100      	movs	r1, #0
 801dc72:	0600      	lsls	r0, r0, #24
 801dc74:	1812      	adds	r2, r2, r0
 801dc76:	414b      	adcs	r3, r1
 801dc78:	464a      	mov	r2, r9
 801dc7a:	005b      	lsls	r3, r3, #1
 801dc7c:	50b3      	str	r3, [r6, r2]
 801dc7e:	2308      	movs	r3, #8
 801dc80:	469c      	mov	ip, r3
 801dc82:	9b08      	ldr	r3, [sp, #32]
 801dc84:	44e0      	add	r8, ip
 801dc86:	3708      	adds	r7, #8
 801dc88:	3608      	adds	r6, #8
 801dc8a:	4598      	cmp	r8, r3
 801dc8c:	d196      	bne.n	801dbbc <arm_cfft_radix4by2_q31+0x3c>
 801dc8e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801dc90:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801dc92:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801dc94:	2302      	movs	r3, #2
 801dc96:	003a      	movs	r2, r7
 801dc98:	0029      	movs	r1, r5
 801dc9a:	0020      	movs	r0, r4
 801dc9c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801dc9e:	f000 f957 	bl	801df50 <arm_radix4_butterfly_q31>
 801dca2:	46a4      	mov	ip, r4
 801dca4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dca6:	2302      	movs	r3, #2
 801dca8:	0088      	lsls	r0, r1, #2
 801dcaa:	4460      	add	r0, ip
 801dcac:	003a      	movs	r2, r7
 801dcae:	0029      	movs	r1, r5
 801dcb0:	f000 f94e 	bl	801df50 <arm_radix4_butterfly_q31>
 801dcb4:	46a4      	mov	ip, r4
 801dcb6:	0128      	lsls	r0, r5, #4
 801dcb8:	4460      	add	r0, ip
 801dcba:	6833      	ldr	r3, [r6, #0]
 801dcbc:	005b      	lsls	r3, r3, #1
 801dcbe:	6033      	str	r3, [r6, #0]
 801dcc0:	6873      	ldr	r3, [r6, #4]
 801dcc2:	005b      	lsls	r3, r3, #1
 801dcc4:	6073      	str	r3, [r6, #4]
 801dcc6:	68b3      	ldr	r3, [r6, #8]
 801dcc8:	005b      	lsls	r3, r3, #1
 801dcca:	60b3      	str	r3, [r6, #8]
 801dccc:	68f3      	ldr	r3, [r6, #12]
 801dcce:	005b      	lsls	r3, r3, #1
 801dcd0:	60f3      	str	r3, [r6, #12]
 801dcd2:	3610      	adds	r6, #16
 801dcd4:	42b0      	cmp	r0, r6
 801dcd6:	d1f0      	bne.n	801dcba <arm_cfft_radix4by2_q31+0x13a>
 801dcd8:	b00f      	add	sp, #60	@ 0x3c
 801dcda:	bc3c      	pop	{r2, r3, r4, r5}
 801dcdc:	4690      	mov	r8, r2
 801dcde:	4699      	mov	r9, r3
 801dce0:	46a2      	mov	sl, r4
 801dce2:	46ab      	mov	fp, r5
 801dce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dce6:	2302      	movs	r3, #2
 801dce8:	2100      	movs	r1, #0
 801dcea:	0015      	movs	r5, r2
 801dcec:	f000 f930 	bl	801df50 <arm_radix4_butterfly_q31>
 801dcf0:	46bc      	mov	ip, r7
 801dcf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dcf4:	002a      	movs	r2, r5
 801dcf6:	0098      	lsls	r0, r3, #2
 801dcf8:	4460      	add	r0, ip
 801dcfa:	2302      	movs	r3, #2
 801dcfc:	2100      	movs	r1, #0
 801dcfe:	f000 f927 	bl	801df50 <arm_radix4_butterfly_q31>
 801dd02:	e7e9      	b.n	801dcd8 <arm_cfft_radix4by2_q31+0x158>

0801dd04 <arm_cfft_radix4by2_inverse_q31>:
 801dd04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd06:	465f      	mov	r7, fp
 801dd08:	4656      	mov	r6, sl
 801dd0a:	464d      	mov	r5, r9
 801dd0c:	4644      	mov	r4, r8
 801dd0e:	000b      	movs	r3, r1
 801dd10:	b4f0      	push	{r4, r5, r6, r7}
 801dd12:	085b      	lsrs	r3, r3, #1
 801dd14:	b08f      	sub	sp, #60	@ 0x3c
 801dd16:	910a      	str	r1, [sp, #40]	@ 0x28
 801dd18:	0007      	movs	r7, r0
 801dd1a:	9009      	str	r0, [sp, #36]	@ 0x24
 801dd1c:	0011      	movs	r1, r2
 801dd1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801dd20:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	d100      	bne.n	801dd28 <arm_cfft_radix4by2_inverse_q31+0x24>
 801dd26:	e0a0      	b.n	801de6a <arm_cfft_radix4by2_inverse_q31+0x166>
 801dd28:	0002      	movs	r2, r0
 801dd2a:	00db      	lsls	r3, r3, #3
 801dd2c:	3204      	adds	r2, #4
 801dd2e:	4691      	mov	r9, r2
 801dd30:	4698      	mov	r8, r3
 801dd32:	000a      	movs	r2, r1
 801dd34:	464e      	mov	r6, r9
 801dd36:	4442      	add	r2, r8
 801dd38:	4699      	mov	r9, r3
 801dd3a:	4688      	mov	r8, r1
 801dd3c:	9208      	str	r2, [sp, #32]
 801dd3e:	900d      	str	r0, [sp, #52]	@ 0x34
 801dd40:	4643      	mov	r3, r8
 801dd42:	681b      	ldr	r3, [r3, #0]
 801dd44:	469b      	mov	fp, r3
 801dd46:	4643      	mov	r3, r8
 801dd48:	685b      	ldr	r3, [r3, #4]
 801dd4a:	469a      	mov	sl, r3
 801dd4c:	683b      	ldr	r3, [r7, #0]
 801dd4e:	109c      	asrs	r4, r3, #2
 801dd50:	464b      	mov	r3, r9
 801dd52:	58fb      	ldr	r3, [r7, r3]
 801dd54:	109a      	asrs	r2, r3, #2
 801dd56:	18a3      	adds	r3, r4, r2
 801dd58:	603b      	str	r3, [r7, #0]
 801dd5a:	6833      	ldr	r3, [r6, #0]
 801dd5c:	1aa4      	subs	r4, r4, r2
 801dd5e:	109d      	asrs	r5, r3, #2
 801dd60:	464b      	mov	r3, r9
 801dd62:	58f3      	ldr	r3, [r6, r3]
 801dd64:	17e2      	asrs	r2, r4, #31
 801dd66:	109b      	asrs	r3, r3, #2
 801dd68:	18e9      	adds	r1, r5, r3
 801dd6a:	6031      	str	r1, [r6, #0]
 801dd6c:	0011      	movs	r1, r2
 801dd6e:	465a      	mov	r2, fp
 801dd70:	17d2      	asrs	r2, r2, #31
 801dd72:	0010      	movs	r0, r2
 801dd74:	4652      	mov	r2, sl
 801dd76:	1aed      	subs	r5, r5, r3
 801dd78:	17eb      	asrs	r3, r5, #31
 801dd7a:	17d2      	asrs	r2, r2, #31
 801dd7c:	9307      	str	r3, [sp, #28]
 801dd7e:	9204      	str	r2, [sp, #16]
 801dd80:	0003      	movs	r3, r0
 801dd82:	465a      	mov	r2, fp
 801dd84:	9006      	str	r0, [sp, #24]
 801dd86:	0020      	movs	r0, r4
 801dd88:	9105      	str	r1, [sp, #20]
 801dd8a:	f7e2 fc19 	bl	80005c0 <__aeabi_lmul>
 801dd8e:	2280      	movs	r2, #128	@ 0x80
 801dd90:	2300      	movs	r3, #0
 801dd92:	0612      	lsls	r2, r2, #24
 801dd94:	1880      	adds	r0, r0, r2
 801dd96:	4159      	adcs	r1, r3
 801dd98:	2300      	movs	r3, #0
 801dd9a:	9101      	str	r1, [sp, #4]
 801dd9c:	9300      	str	r3, [sp, #0]
 801dd9e:	4652      	mov	r2, sl
 801dda0:	9b04      	ldr	r3, [sp, #16]
 801dda2:	0028      	movs	r0, r5
 801dda4:	17e9      	asrs	r1, r5, #31
 801dda6:	f7e2 fc0b 	bl	80005c0 <__aeabi_lmul>
 801ddaa:	9a00      	ldr	r2, [sp, #0]
 801ddac:	9b01      	ldr	r3, [sp, #4]
 801ddae:	1a12      	subs	r2, r2, r0
 801ddb0:	418b      	sbcs	r3, r1
 801ddb2:	2080      	movs	r0, #128	@ 0x80
 801ddb4:	2100      	movs	r1, #0
 801ddb6:	0600      	lsls	r0, r0, #24
 801ddb8:	1812      	adds	r2, r2, r0
 801ddba:	414b      	adcs	r3, r1
 801ddbc:	464a      	mov	r2, r9
 801ddbe:	005b      	lsls	r3, r3, #1
 801ddc0:	50bb      	str	r3, [r7, r2]
 801ddc2:	4658      	mov	r0, fp
 801ddc4:	002a      	movs	r2, r5
 801ddc6:	9b07      	ldr	r3, [sp, #28]
 801ddc8:	9906      	ldr	r1, [sp, #24]
 801ddca:	f7e2 fbf9 	bl	80005c0 <__aeabi_lmul>
 801ddce:	2280      	movs	r2, #128	@ 0x80
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	0612      	lsls	r2, r2, #24
 801ddd4:	1880      	adds	r0, r0, r2
 801ddd6:	4159      	adcs	r1, r3
 801ddd8:	2000      	movs	r0, #0
 801ddda:	9103      	str	r1, [sp, #12]
 801dddc:	9002      	str	r0, [sp, #8]
 801ddde:	4652      	mov	r2, sl
 801dde0:	9b04      	ldr	r3, [sp, #16]
 801dde2:	0020      	movs	r0, r4
 801dde4:	9905      	ldr	r1, [sp, #20]
 801dde6:	f7e2 fbeb 	bl	80005c0 <__aeabi_lmul>
 801ddea:	9b02      	ldr	r3, [sp, #8]
 801ddec:	9c03      	ldr	r4, [sp, #12]
 801ddee:	18c0      	adds	r0, r0, r3
 801ddf0:	4161      	adcs	r1, r4
 801ddf2:	2380      	movs	r3, #128	@ 0x80
 801ddf4:	2400      	movs	r4, #0
 801ddf6:	061b      	lsls	r3, r3, #24
 801ddf8:	18c0      	adds	r0, r0, r3
 801ddfa:	4161      	adcs	r1, r4
 801ddfc:	464a      	mov	r2, r9
 801ddfe:	004b      	lsls	r3, r1, #1
 801de00:	50b3      	str	r3, [r6, r2]
 801de02:	2308      	movs	r3, #8
 801de04:	469c      	mov	ip, r3
 801de06:	9b08      	ldr	r3, [sp, #32]
 801de08:	44e0      	add	r8, ip
 801de0a:	3708      	adds	r7, #8
 801de0c:	3608      	adds	r6, #8
 801de0e:	4598      	cmp	r8, r3
 801de10:	d196      	bne.n	801dd40 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801de12:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801de14:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801de16:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801de18:	2302      	movs	r3, #2
 801de1a:	003a      	movs	r2, r7
 801de1c:	0029      	movs	r1, r5
 801de1e:	0020      	movs	r0, r4
 801de20:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801de22:	f000 fb3b 	bl	801e49c <arm_radix4_butterfly_inverse_q31>
 801de26:	46a4      	mov	ip, r4
 801de28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de2a:	2302      	movs	r3, #2
 801de2c:	0088      	lsls	r0, r1, #2
 801de2e:	4460      	add	r0, ip
 801de30:	003a      	movs	r2, r7
 801de32:	0029      	movs	r1, r5
 801de34:	f000 fb32 	bl	801e49c <arm_radix4_butterfly_inverse_q31>
 801de38:	46a4      	mov	ip, r4
 801de3a:	0128      	lsls	r0, r5, #4
 801de3c:	4460      	add	r0, ip
 801de3e:	6833      	ldr	r3, [r6, #0]
 801de40:	005b      	lsls	r3, r3, #1
 801de42:	6033      	str	r3, [r6, #0]
 801de44:	6873      	ldr	r3, [r6, #4]
 801de46:	005b      	lsls	r3, r3, #1
 801de48:	6073      	str	r3, [r6, #4]
 801de4a:	68b3      	ldr	r3, [r6, #8]
 801de4c:	005b      	lsls	r3, r3, #1
 801de4e:	60b3      	str	r3, [r6, #8]
 801de50:	68f3      	ldr	r3, [r6, #12]
 801de52:	005b      	lsls	r3, r3, #1
 801de54:	60f3      	str	r3, [r6, #12]
 801de56:	3610      	adds	r6, #16
 801de58:	42b0      	cmp	r0, r6
 801de5a:	d1f0      	bne.n	801de3e <arm_cfft_radix4by2_inverse_q31+0x13a>
 801de5c:	b00f      	add	sp, #60	@ 0x3c
 801de5e:	bc3c      	pop	{r2, r3, r4, r5}
 801de60:	4690      	mov	r8, r2
 801de62:	4699      	mov	r9, r3
 801de64:	46a2      	mov	sl, r4
 801de66:	46ab      	mov	fp, r5
 801de68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de6a:	2302      	movs	r3, #2
 801de6c:	2100      	movs	r1, #0
 801de6e:	0015      	movs	r5, r2
 801de70:	f000 fb14 	bl	801e49c <arm_radix4_butterfly_inverse_q31>
 801de74:	46bc      	mov	ip, r7
 801de76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de78:	002a      	movs	r2, r5
 801de7a:	0098      	lsls	r0, r3, #2
 801de7c:	4460      	add	r0, ip
 801de7e:	2302      	movs	r3, #2
 801de80:	2100      	movs	r1, #0
 801de82:	f000 fb0b 	bl	801e49c <arm_radix4_butterfly_inverse_q31>
 801de86:	e7e9      	b.n	801de5c <arm_cfft_radix4by2_inverse_q31+0x158>

0801de88 <arm_cfft_q31>:
 801de88:	b570      	push	{r4, r5, r6, lr}
 801de8a:	001e      	movs	r6, r3
 801de8c:	2380      	movs	r3, #128	@ 0x80
 801de8e:	000d      	movs	r5, r1
 801de90:	0004      	movs	r4, r0
 801de92:	8801      	ldrh	r1, [r0, #0]
 801de94:	005b      	lsls	r3, r3, #1
 801de96:	2a01      	cmp	r2, #1
 801de98:	d028      	beq.n	801deec <arm_cfft_q31+0x64>
 801de9a:	4299      	cmp	r1, r3
 801de9c:	d020      	beq.n	801dee0 <arm_cfft_q31+0x58>
 801de9e:	d812      	bhi.n	801dec6 <arm_cfft_q31+0x3e>
 801dea0:	2920      	cmp	r1, #32
 801dea2:	d004      	beq.n	801deae <arm_cfft_q31+0x26>
 801dea4:	d949      	bls.n	801df3a <arm_cfft_q31+0xb2>
 801dea6:	2940      	cmp	r1, #64	@ 0x40
 801dea8:	d01a      	beq.n	801dee0 <arm_cfft_q31+0x58>
 801deaa:	2980      	cmp	r1, #128	@ 0x80
 801deac:	d103      	bne.n	801deb6 <arm_cfft_q31+0x2e>
 801deae:	6862      	ldr	r2, [r4, #4]
 801deb0:	0028      	movs	r0, r5
 801deb2:	f7ff fe65 	bl	801db80 <arm_cfft_radix4by2_q31>
 801deb6:	2e00      	cmp	r6, #0
 801deb8:	d004      	beq.n	801dec4 <arm_cfft_q31+0x3c>
 801deba:	68a2      	ldr	r2, [r4, #8]
 801debc:	89a1      	ldrh	r1, [r4, #12]
 801debe:	0028      	movs	r0, r5
 801dec0:	f7e2 f922 	bl	8000108 <arm_bitreversal_32>
 801dec4:	bd70      	pop	{r4, r5, r6, pc}
 801dec6:	2380      	movs	r3, #128	@ 0x80
 801dec8:	00db      	lsls	r3, r3, #3
 801deca:	4299      	cmp	r1, r3
 801decc:	d008      	beq.n	801dee0 <arm_cfft_q31+0x58>
 801dece:	d92f      	bls.n	801df30 <arm_cfft_q31+0xa8>
 801ded0:	2380      	movs	r3, #128	@ 0x80
 801ded2:	011b      	lsls	r3, r3, #4
 801ded4:	4299      	cmp	r1, r3
 801ded6:	d0ea      	beq.n	801deae <arm_cfft_q31+0x26>
 801ded8:	2380      	movs	r3, #128	@ 0x80
 801deda:	015b      	lsls	r3, r3, #5
 801dedc:	4299      	cmp	r1, r3
 801dede:	d1ea      	bne.n	801deb6 <arm_cfft_q31+0x2e>
 801dee0:	2301      	movs	r3, #1
 801dee2:	6862      	ldr	r2, [r4, #4]
 801dee4:	0028      	movs	r0, r5
 801dee6:	f000 f833 	bl	801df50 <arm_radix4_butterfly_q31>
 801deea:	e7e4      	b.n	801deb6 <arm_cfft_q31+0x2e>
 801deec:	4299      	cmp	r1, r3
 801deee:	d019      	beq.n	801df24 <arm_cfft_q31+0x9c>
 801def0:	d80b      	bhi.n	801df0a <arm_cfft_q31+0x82>
 801def2:	2920      	cmp	r1, #32
 801def4:	d004      	beq.n	801df00 <arm_cfft_q31+0x78>
 801def6:	d928      	bls.n	801df4a <arm_cfft_q31+0xc2>
 801def8:	2940      	cmp	r1, #64	@ 0x40
 801defa:	d013      	beq.n	801df24 <arm_cfft_q31+0x9c>
 801defc:	2980      	cmp	r1, #128	@ 0x80
 801defe:	d1da      	bne.n	801deb6 <arm_cfft_q31+0x2e>
 801df00:	6862      	ldr	r2, [r4, #4]
 801df02:	0028      	movs	r0, r5
 801df04:	f7ff fefe 	bl	801dd04 <arm_cfft_radix4by2_inverse_q31>
 801df08:	e7d5      	b.n	801deb6 <arm_cfft_q31+0x2e>
 801df0a:	2380      	movs	r3, #128	@ 0x80
 801df0c:	00db      	lsls	r3, r3, #3
 801df0e:	4299      	cmp	r1, r3
 801df10:	d008      	beq.n	801df24 <arm_cfft_q31+0x9c>
 801df12:	d915      	bls.n	801df40 <arm_cfft_q31+0xb8>
 801df14:	2380      	movs	r3, #128	@ 0x80
 801df16:	011b      	lsls	r3, r3, #4
 801df18:	4299      	cmp	r1, r3
 801df1a:	d0f1      	beq.n	801df00 <arm_cfft_q31+0x78>
 801df1c:	2380      	movs	r3, #128	@ 0x80
 801df1e:	015b      	lsls	r3, r3, #5
 801df20:	4299      	cmp	r1, r3
 801df22:	d1c8      	bne.n	801deb6 <arm_cfft_q31+0x2e>
 801df24:	2301      	movs	r3, #1
 801df26:	6862      	ldr	r2, [r4, #4]
 801df28:	0028      	movs	r0, r5
 801df2a:	f000 fab7 	bl	801e49c <arm_radix4_butterfly_inverse_q31>
 801df2e:	e7c2      	b.n	801deb6 <arm_cfft_q31+0x2e>
 801df30:	2380      	movs	r3, #128	@ 0x80
 801df32:	009b      	lsls	r3, r3, #2
 801df34:	4299      	cmp	r1, r3
 801df36:	d0ba      	beq.n	801deae <arm_cfft_q31+0x26>
 801df38:	e7bd      	b.n	801deb6 <arm_cfft_q31+0x2e>
 801df3a:	2910      	cmp	r1, #16
 801df3c:	d1bb      	bne.n	801deb6 <arm_cfft_q31+0x2e>
 801df3e:	e7cf      	b.n	801dee0 <arm_cfft_q31+0x58>
 801df40:	2380      	movs	r3, #128	@ 0x80
 801df42:	009b      	lsls	r3, r3, #2
 801df44:	4299      	cmp	r1, r3
 801df46:	d0db      	beq.n	801df00 <arm_cfft_q31+0x78>
 801df48:	e7b5      	b.n	801deb6 <arm_cfft_q31+0x2e>
 801df4a:	2910      	cmp	r1, #16
 801df4c:	d1b3      	bne.n	801deb6 <arm_cfft_q31+0x2e>
 801df4e:	e7e9      	b.n	801df24 <arm_cfft_q31+0x9c>

0801df50 <arm_radix4_butterfly_q31>:
 801df50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df52:	464d      	mov	r5, r9
 801df54:	4644      	mov	r4, r8
 801df56:	465f      	mov	r7, fp
 801df58:	4656      	mov	r6, sl
 801df5a:	469c      	mov	ip, r3
 801df5c:	b4f0      	push	{r4, r5, r6, r7}
 801df5e:	b0a7      	sub	sp, #156	@ 0x9c
 801df60:	9114      	str	r1, [sp, #80]	@ 0x50
 801df62:	0889      	lsrs	r1, r1, #2
 801df64:	9310      	str	r3, [sp, #64]	@ 0x40
 801df66:	00cb      	lsls	r3, r1, #3
 801df68:	0015      	movs	r5, r2
 801df6a:	9223      	str	r2, [sp, #140]	@ 0x8c
 801df6c:	18c2      	adds	r2, r0, r3
 801df6e:	000c      	movs	r4, r1
 801df70:	469a      	mov	sl, r3
 801df72:	9124      	str	r1, [sp, #144]	@ 0x90
 801df74:	18d1      	adds	r1, r2, r3
 801df76:	4663      	mov	r3, ip
 801df78:	468b      	mov	fp, r1
 801df7a:	0119      	lsls	r1, r3, #4
 801df7c:	910d      	str	r1, [sp, #52]	@ 0x34
 801df7e:	00d9      	lsls	r1, r3, #3
 801df80:	005b      	lsls	r3, r3, #1
 801df82:	4463      	add	r3, ip
 801df84:	910e      	str	r1, [sp, #56]	@ 0x38
 801df86:	00d9      	lsls	r1, r3, #3
 801df88:	465b      	mov	r3, fp
 801df8a:	44da      	add	sl, fp
 801df8c:	4690      	mov	r8, r2
 801df8e:	4683      	mov	fp, r0
 801df90:	4699      	mov	r9, r3
 801df92:	9022      	str	r0, [sp, #136]	@ 0x88
 801df94:	9025      	str	r0, [sp, #148]	@ 0x94
 801df96:	910f      	str	r1, [sp, #60]	@ 0x3c
 801df98:	9502      	str	r5, [sp, #8]
 801df9a:	9500      	str	r5, [sp, #0]
 801df9c:	9501      	str	r5, [sp, #4]
 801df9e:	9407      	str	r4, [sp, #28]
 801dfa0:	465b      	mov	r3, fp
 801dfa2:	681b      	ldr	r3, [r3, #0]
 801dfa4:	4642      	mov	r2, r8
 801dfa6:	111c      	asrs	r4, r3, #4
 801dfa8:	464b      	mov	r3, r9
 801dfaa:	4658      	mov	r0, fp
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	6812      	ldr	r2, [r2, #0]
 801dfb0:	111b      	asrs	r3, r3, #4
 801dfb2:	18e7      	adds	r7, r4, r3
 801dfb4:	1ae3      	subs	r3, r4, r3
 801dfb6:	1114      	asrs	r4, r2, #4
 801dfb8:	4652      	mov	r2, sl
 801dfba:	6840      	ldr	r0, [r0, #4]
 801dfbc:	6812      	ldr	r2, [r2, #0]
 801dfbe:	1105      	asrs	r5, r0, #4
 801dfc0:	4648      	mov	r0, r9
 801dfc2:	9303      	str	r3, [sp, #12]
 801dfc4:	1113      	asrs	r3, r2, #4
 801dfc6:	18e2      	adds	r2, r4, r3
 801dfc8:	465c      	mov	r4, fp
 801dfca:	6840      	ldr	r0, [r0, #4]
 801dfcc:	1103      	asrs	r3, r0, #4
 801dfce:	18ee      	adds	r6, r5, r3
 801dfd0:	1ae8      	subs	r0, r5, r3
 801dfd2:	18bb      	adds	r3, r7, r2
 801dfd4:	6023      	str	r3, [r4, #0]
 801dfd6:	4644      	mov	r4, r8
 801dfd8:	6864      	ldr	r4, [r4, #4]
 801dfda:	9004      	str	r0, [sp, #16]
 801dfdc:	1125      	asrs	r5, r4, #4
 801dfde:	4654      	mov	r4, sl
 801dfe0:	6864      	ldr	r4, [r4, #4]
 801dfe2:	1123      	asrs	r3, r4, #4
 801dfe4:	465c      	mov	r4, fp
 801dfe6:	18eb      	adds	r3, r5, r3
 801dfe8:	18f1      	adds	r1, r6, r3
 801dfea:	6061      	str	r1, [r4, #4]
 801dfec:	4655      	mov	r5, sl
 801dfee:	4644      	mov	r4, r8
 801dff0:	686d      	ldr	r5, [r5, #4]
 801dff2:	6864      	ldr	r4, [r4, #4]
 801dff4:	1129      	asrs	r1, r5, #4
 801dff6:	1124      	asrs	r4, r4, #4
 801dff8:	1a64      	subs	r4, r4, r1
 801dffa:	4641      	mov	r1, r8
 801dffc:	6809      	ldr	r1, [r1, #0]
 801dffe:	9405      	str	r4, [sp, #20]
 801e000:	1108      	asrs	r0, r1, #4
 801e002:	4651      	mov	r1, sl
 801e004:	6809      	ldr	r1, [r1, #0]
 801e006:	1abc      	subs	r4, r7, r2
 801e008:	1109      	asrs	r1, r1, #4
 801e00a:	1a41      	subs	r1, r0, r1
 801e00c:	17e2      	asrs	r2, r4, #31
 801e00e:	9106      	str	r1, [sp, #24]
 801e010:	0011      	movs	r1, r2
 801e012:	9a01      	ldr	r2, [sp, #4]
 801e014:	9108      	str	r1, [sp, #32]
 801e016:	6817      	ldr	r7, [r2, #0]
 801e018:	17fd      	asrs	r5, r7, #31
 801e01a:	0028      	movs	r0, r5
 801e01c:	1af5      	subs	r5, r6, r3
 801e01e:	17ee      	asrs	r6, r5, #31
 801e020:	960a      	str	r6, [sp, #40]	@ 0x28
 801e022:	6856      	ldr	r6, [r2, #4]
 801e024:	9009      	str	r0, [sp, #36]	@ 0x24
 801e026:	17f3      	asrs	r3, r6, #31
 801e028:	003a      	movs	r2, r7
 801e02a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e02c:	0003      	movs	r3, r0
 801e02e:	0020      	movs	r0, r4
 801e030:	f7e2 fac6 	bl	80005c0 <__aeabi_lmul>
 801e034:	0032      	movs	r2, r6
 801e036:	17f3      	asrs	r3, r6, #31
 801e038:	910c      	str	r1, [sp, #48]	@ 0x30
 801e03a:	0028      	movs	r0, r5
 801e03c:	17e9      	asrs	r1, r5, #31
 801e03e:	f7e2 fabf 	bl	80005c0 <__aeabi_lmul>
 801e042:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e044:	002a      	movs	r2, r5
 801e046:	4684      	mov	ip, r0
 801e048:	4640      	mov	r0, r8
 801e04a:	4461      	add	r1, ip
 801e04c:	0049      	lsls	r1, r1, #1
 801e04e:	6001      	str	r1, [r0, #0]
 801e050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e052:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e054:	0038      	movs	r0, r7
 801e056:	f7e2 fab3 	bl	80005c0 <__aeabi_lmul>
 801e05a:	0032      	movs	r2, r6
 801e05c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e05e:	000d      	movs	r5, r1
 801e060:	0020      	movs	r0, r4
 801e062:	9908      	ldr	r1, [sp, #32]
 801e064:	f7e2 faac 	bl	80005c0 <__aeabi_lmul>
 801e068:	4646      	mov	r6, r8
 801e06a:	1a6d      	subs	r5, r5, r1
 801e06c:	006d      	lsls	r5, r5, #1
 801e06e:	6075      	str	r5, [r6, #4]
 801e070:	9903      	ldr	r1, [sp, #12]
 801e072:	9d05      	ldr	r5, [sp, #20]
 801e074:	000c      	movs	r4, r1
 801e076:	46ac      	mov	ip, r5
 801e078:	4464      	add	r4, ip
 801e07a:	17e6      	asrs	r6, r4, #31
 801e07c:	0031      	movs	r1, r6
 801e07e:	9b00      	ldr	r3, [sp, #0]
 801e080:	9804      	ldr	r0, [sp, #16]
 801e082:	681e      	ldr	r6, [r3, #0]
 801e084:	17f7      	asrs	r7, r6, #31
 801e086:	9709      	str	r7, [sp, #36]	@ 0x24
 801e088:	9f06      	ldr	r7, [sp, #24]
 801e08a:	0032      	movs	r2, r6
 801e08c:	1bc7      	subs	r7, r0, r7
 801e08e:	17fd      	asrs	r5, r7, #31
 801e090:	950a      	str	r5, [sp, #40]	@ 0x28
 801e092:	685d      	ldr	r5, [r3, #4]
 801e094:	17f3      	asrs	r3, r6, #31
 801e096:	17e8      	asrs	r0, r5, #31
 801e098:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e09a:	0020      	movs	r0, r4
 801e09c:	9108      	str	r1, [sp, #32]
 801e09e:	f7e2 fa8f 	bl	80005c0 <__aeabi_lmul>
 801e0a2:	002a      	movs	r2, r5
 801e0a4:	17eb      	asrs	r3, r5, #31
 801e0a6:	910c      	str	r1, [sp, #48]	@ 0x30
 801e0a8:	0038      	movs	r0, r7
 801e0aa:	17f9      	asrs	r1, r7, #31
 801e0ac:	f7e2 fa88 	bl	80005c0 <__aeabi_lmul>
 801e0b0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e0b2:	003a      	movs	r2, r7
 801e0b4:	4684      	mov	ip, r0
 801e0b6:	4648      	mov	r0, r9
 801e0b8:	4461      	add	r1, ip
 801e0ba:	0049      	lsls	r1, r1, #1
 801e0bc:	6001      	str	r1, [r0, #0]
 801e0be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e0c0:	0030      	movs	r0, r6
 801e0c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e0c4:	f7e2 fa7c 	bl	80005c0 <__aeabi_lmul>
 801e0c8:	002a      	movs	r2, r5
 801e0ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0cc:	000e      	movs	r6, r1
 801e0ce:	0020      	movs	r0, r4
 801e0d0:	9908      	ldr	r1, [sp, #32]
 801e0d2:	f7e2 fa75 	bl	80005c0 <__aeabi_lmul>
 801e0d6:	464c      	mov	r4, r9
 801e0d8:	9d05      	ldr	r5, [sp, #20]
 801e0da:	1a76      	subs	r6, r6, r1
 801e0dc:	9903      	ldr	r1, [sp, #12]
 801e0de:	0076      	lsls	r6, r6, #1
 801e0e0:	6066      	str	r6, [r4, #4]
 801e0e2:	1b4c      	subs	r4, r1, r5
 801e0e4:	9e06      	ldr	r6, [sp, #24]
 801e0e6:	17e1      	asrs	r1, r4, #31
 801e0e8:	9103      	str	r1, [sp, #12]
 801e0ea:	9902      	ldr	r1, [sp, #8]
 801e0ec:	46b4      	mov	ip, r6
 801e0ee:	680f      	ldr	r7, [r1, #0]
 801e0f0:	9804      	ldr	r0, [sp, #16]
 801e0f2:	17fd      	asrs	r5, r7, #31
 801e0f4:	002b      	movs	r3, r5
 801e0f6:	684e      	ldr	r6, [r1, #4]
 801e0f8:	4460      	add	r0, ip
 801e0fa:	0005      	movs	r5, r0
 801e0fc:	17c0      	asrs	r0, r0, #31
 801e0fe:	9005      	str	r0, [sp, #20]
 801e100:	17f0      	asrs	r0, r6, #31
 801e102:	9006      	str	r0, [sp, #24]
 801e104:	003a      	movs	r2, r7
 801e106:	0020      	movs	r0, r4
 801e108:	17e1      	asrs	r1, r4, #31
 801e10a:	9304      	str	r3, [sp, #16]
 801e10c:	f7e2 fa58 	bl	80005c0 <__aeabi_lmul>
 801e110:	0032      	movs	r2, r6
 801e112:	9108      	str	r1, [sp, #32]
 801e114:	17f3      	asrs	r3, r6, #31
 801e116:	0028      	movs	r0, r5
 801e118:	17e9      	asrs	r1, r5, #31
 801e11a:	f7e2 fa51 	bl	80005c0 <__aeabi_lmul>
 801e11e:	9808      	ldr	r0, [sp, #32]
 801e120:	002a      	movs	r2, r5
 801e122:	4684      	mov	ip, r0
 801e124:	4650      	mov	r0, sl
 801e126:	4461      	add	r1, ip
 801e128:	0049      	lsls	r1, r1, #1
 801e12a:	6001      	str	r1, [r0, #0]
 801e12c:	9b05      	ldr	r3, [sp, #20]
 801e12e:	9904      	ldr	r1, [sp, #16]
 801e130:	0038      	movs	r0, r7
 801e132:	f7e2 fa45 	bl	80005c0 <__aeabi_lmul>
 801e136:	0020      	movs	r0, r4
 801e138:	2408      	movs	r4, #8
 801e13a:	000d      	movs	r5, r1
 801e13c:	0032      	movs	r2, r6
 801e13e:	9b06      	ldr	r3, [sp, #24]
 801e140:	9903      	ldr	r1, [sp, #12]
 801e142:	f7e2 fa3d 	bl	80005c0 <__aeabi_lmul>
 801e146:	46a4      	mov	ip, r4
 801e148:	4650      	mov	r0, sl
 801e14a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e14c:	44e3      	add	fp, ip
 801e14e:	44e0      	add	r8, ip
 801e150:	44e1      	add	r9, ip
 801e152:	44e2      	add	sl, ip
 801e154:	46a4      	mov	ip, r4
 801e156:	1a6d      	subs	r5, r5, r1
 801e158:	006d      	lsls	r5, r5, #1
 801e15a:	9a01      	ldr	r2, [sp, #4]
 801e15c:	6045      	str	r5, [r0, #4]
 801e15e:	9807      	ldr	r0, [sp, #28]
 801e160:	4462      	add	r2, ip
 801e162:	3801      	subs	r0, #1
 801e164:	9201      	str	r2, [sp, #4]
 801e166:	9007      	str	r0, [sp, #28]
 801e168:	9b00      	ldr	r3, [sp, #0]
 801e16a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e16c:	9902      	ldr	r1, [sp, #8]
 801e16e:	4694      	mov	ip, r2
 801e170:	4463      	add	r3, ip
 801e172:	9300      	str	r3, [sp, #0]
 801e174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e176:	469c      	mov	ip, r3
 801e178:	4461      	add	r1, ip
 801e17a:	9102      	str	r1, [sp, #8]
 801e17c:	2800      	cmp	r0, #0
 801e17e:	d000      	beq.n	801e182 <arm_radix4_butterfly_q31+0x232>
 801e180:	e70e      	b.n	801dfa0 <arm_radix4_butterfly_q31+0x50>
 801e182:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e184:	009b      	lsls	r3, r3, #2
 801e186:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e188:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e18a:	9320      	str	r3, [sp, #128]	@ 0x80
 801e18c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e18e:	2b04      	cmp	r3, #4
 801e190:	d800      	bhi.n	801e194 <arm_radix4_butterfly_q31+0x244>
 801e192:	e180      	b.n	801e496 <arm_radix4_butterfly_q31+0x546>
 801e194:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e196:	0893      	lsrs	r3, r2, #2
 801e198:	1e59      	subs	r1, r3, #1
 801e19a:	9321      	str	r3, [sp, #132]	@ 0x84
 801e19c:	00db      	lsls	r3, r3, #3
 801e19e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e1a0:	00d3      	lsls	r3, r2, #3
 801e1a2:	9300      	str	r3, [sp, #0]
 801e1a4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e1a6:	911a      	str	r1, [sp, #104]	@ 0x68
 801e1a8:	00da      	lsls	r2, r3, #3
 801e1aa:	921e      	str	r2, [sp, #120]	@ 0x78
 801e1ac:	011a      	lsls	r2, r3, #4
 801e1ae:	921d      	str	r2, [sp, #116]	@ 0x74
 801e1b0:	001a      	movs	r2, r3
 801e1b2:	4694      	mov	ip, r2
 801e1b4:	005b      	lsls	r3, r3, #1
 801e1b6:	4463      	add	r3, ip
 801e1b8:	00db      	lsls	r3, r3, #3
 801e1ba:	931c      	str	r3, [sp, #112]	@ 0x70
 801e1bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e1be:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e1c0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e1c2:	9318      	str	r3, [sp, #96]	@ 0x60
 801e1c4:	9319      	str	r3, [sp, #100]	@ 0x64
 801e1c6:	9316      	str	r3, [sp, #88]	@ 0x58
 801e1c8:	2300      	movs	r3, #0
 801e1ca:	9315      	str	r3, [sp, #84]	@ 0x54
 801e1cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e1ce:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e1d0:	681a      	ldr	r2, [r3, #0]
 801e1d2:	685b      	ldr	r3, [r3, #4]
 801e1d4:	9205      	str	r2, [sp, #20]
 801e1d6:	9306      	str	r3, [sp, #24]
 801e1d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e1da:	468c      	mov	ip, r1
 801e1dc:	681a      	ldr	r2, [r3, #0]
 801e1de:	685b      	ldr	r3, [r3, #4]
 801e1e0:	9207      	str	r2, [sp, #28]
 801e1e2:	9308      	str	r3, [sp, #32]
 801e1e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e1e6:	681a      	ldr	r2, [r3, #0]
 801e1e8:	685b      	ldr	r3, [r3, #4]
 801e1ea:	9209      	str	r2, [sp, #36]	@ 0x24
 801e1ec:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 801e1f0:	0013      	movs	r3, r2
 801e1f2:	4463      	add	r3, ip
 801e1f4:	4698      	mov	r8, r3
 801e1f6:	0013      	movs	r3, r2
 801e1f8:	4442      	add	r2, r8
 801e1fa:	4691      	mov	r9, r2
 801e1fc:	001a      	movs	r2, r3
 801e1fe:	444a      	add	r2, r9
 801e200:	4692      	mov	sl, r2
 801e202:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e204:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e206:	4293      	cmp	r3, r2
 801e208:	d800      	bhi.n	801e20c <arm_radix4_butterfly_q31+0x2bc>
 801e20a:	e0dd      	b.n	801e3c8 <arm_radix4_butterfly_q31+0x478>
 801e20c:	4694      	mov	ip, r2
 801e20e:	468b      	mov	fp, r1
 801e210:	4644      	mov	r4, r8
 801e212:	4655      	mov	r5, sl
 801e214:	9b07      	ldr	r3, [sp, #28]
 801e216:	17db      	asrs	r3, r3, #31
 801e218:	930c      	str	r3, [sp, #48]	@ 0x30
 801e21a:	9b08      	ldr	r3, [sp, #32]
 801e21c:	17db      	asrs	r3, r3, #31
 801e21e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e220:	9b05      	ldr	r3, [sp, #20]
 801e222:	17db      	asrs	r3, r3, #31
 801e224:	930e      	str	r3, [sp, #56]	@ 0x38
 801e226:	9b06      	ldr	r3, [sp, #24]
 801e228:	17db      	asrs	r3, r3, #31
 801e22a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e22e:	17db      	asrs	r3, r3, #31
 801e230:	9310      	str	r3, [sp, #64]	@ 0x40
 801e232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e234:	17db      	asrs	r3, r3, #31
 801e236:	9311      	str	r3, [sp, #68]	@ 0x44
 801e238:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e23a:	4463      	add	r3, ip
 801e23c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e23e:	465b      	mov	r3, fp
 801e240:	4659      	mov	r1, fp
 801e242:	681a      	ldr	r2, [r3, #0]
 801e244:	464b      	mov	r3, r9
 801e246:	684f      	ldr	r7, [r1, #4]
 801e248:	4649      	mov	r1, r9
 801e24a:	681b      	ldr	r3, [r3, #0]
 801e24c:	18d6      	adds	r6, r2, r3
 801e24e:	1ad3      	subs	r3, r2, r3
 801e250:	9301      	str	r3, [sp, #4]
 801e252:	684b      	ldr	r3, [r1, #4]
 801e254:	18f8      	adds	r0, r7, r3
 801e256:	1af9      	subs	r1, r7, r3
 801e258:	6827      	ldr	r7, [r4, #0]
 801e25a:	9102      	str	r1, [sp, #8]
 801e25c:	003a      	movs	r2, r7
 801e25e:	682f      	ldr	r7, [r5, #0]
 801e260:	46bc      	mov	ip, r7
 801e262:	465f      	mov	r7, fp
 801e264:	4462      	add	r2, ip
 801e266:	18b3      	adds	r3, r6, r2
 801e268:	109b      	asrs	r3, r3, #2
 801e26a:	603b      	str	r3, [r7, #0]
 801e26c:	6867      	ldr	r7, [r4, #4]
 801e26e:	1ab6      	subs	r6, r6, r2
 801e270:	46b8      	mov	r8, r7
 801e272:	686f      	ldr	r7, [r5, #4]
 801e274:	17f2      	asrs	r2, r6, #31
 801e276:	46bc      	mov	ip, r7
 801e278:	44e0      	add	r8, ip
 801e27a:	4643      	mov	r3, r8
 801e27c:	465f      	mov	r7, fp
 801e27e:	18c1      	adds	r1, r0, r3
 801e280:	1089      	asrs	r1, r1, #2
 801e282:	6079      	str	r1, [r7, #4]
 801e284:	9900      	ldr	r1, [sp, #0]
 801e286:	4690      	mov	r8, r2
 801e288:	468c      	mov	ip, r1
 801e28a:	6867      	ldr	r7, [r4, #4]
 801e28c:	6869      	ldr	r1, [r5, #4]
 801e28e:	44e3      	add	fp, ip
 801e290:	1a7f      	subs	r7, r7, r1
 801e292:	9703      	str	r7, [sp, #12]
 801e294:	6829      	ldr	r1, [r5, #0]
 801e296:	6827      	ldr	r7, [r4, #0]
 801e298:	1a7f      	subs	r7, r7, r1
 801e29a:	9704      	str	r7, [sp, #16]
 801e29c:	1ac7      	subs	r7, r0, r3
 801e29e:	17fa      	asrs	r2, r7, #31
 801e2a0:	4692      	mov	sl, r2
 801e2a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2a4:	9a07      	ldr	r2, [sp, #28]
 801e2a6:	0030      	movs	r0, r6
 801e2a8:	4641      	mov	r1, r8
 801e2aa:	f7e2 f989 	bl	80005c0 <__aeabi_lmul>
 801e2ae:	9a08      	ldr	r2, [sp, #32]
 801e2b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2b2:	9112      	str	r1, [sp, #72]	@ 0x48
 801e2b4:	0038      	movs	r0, r7
 801e2b6:	4651      	mov	r1, sl
 801e2b8:	f7e2 f982 	bl	80005c0 <__aeabi_lmul>
 801e2bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e2be:	9a07      	ldr	r2, [sp, #28]
 801e2c0:	4684      	mov	ip, r0
 801e2c2:	4461      	add	r1, ip
 801e2c4:	1049      	asrs	r1, r1, #1
 801e2c6:	6021      	str	r1, [r4, #0]
 801e2c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2ca:	0038      	movs	r0, r7
 801e2cc:	4651      	mov	r1, sl
 801e2ce:	f7e2 f977 	bl	80005c0 <__aeabi_lmul>
 801e2d2:	9a08      	ldr	r2, [sp, #32]
 801e2d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2d6:	000f      	movs	r7, r1
 801e2d8:	0030      	movs	r0, r6
 801e2da:	4641      	mov	r1, r8
 801e2dc:	f7e2 f970 	bl	80005c0 <__aeabi_lmul>
 801e2e0:	9b00      	ldr	r3, [sp, #0]
 801e2e2:	9a01      	ldr	r2, [sp, #4]
 801e2e4:	469c      	mov	ip, r3
 801e2e6:	9803      	ldr	r0, [sp, #12]
 801e2e8:	1a7f      	subs	r7, r7, r1
 801e2ea:	107f      	asrs	r7, r7, #1
 801e2ec:	6067      	str	r7, [r4, #4]
 801e2ee:	0016      	movs	r6, r2
 801e2f0:	4464      	add	r4, ip
 801e2f2:	4684      	mov	ip, r0
 801e2f4:	4466      	add	r6, ip
 801e2f6:	17f2      	asrs	r2, r6, #31
 801e2f8:	4690      	mov	r8, r2
 801e2fa:	9902      	ldr	r1, [sp, #8]
 801e2fc:	9f04      	ldr	r7, [sp, #16]
 801e2fe:	0030      	movs	r0, r6
 801e300:	1bcf      	subs	r7, r1, r7
 801e302:	17fa      	asrs	r2, r7, #31
 801e304:	4692      	mov	sl, r2
 801e306:	4641      	mov	r1, r8
 801e308:	9a05      	ldr	r2, [sp, #20]
 801e30a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e30c:	f7e2 f958 	bl	80005c0 <__aeabi_lmul>
 801e310:	9a06      	ldr	r2, [sp, #24]
 801e312:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e314:	9112      	str	r1, [sp, #72]	@ 0x48
 801e316:	0038      	movs	r0, r7
 801e318:	4651      	mov	r1, sl
 801e31a:	f7e2 f951 	bl	80005c0 <__aeabi_lmul>
 801e31e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e320:	9a05      	ldr	r2, [sp, #20]
 801e322:	4684      	mov	ip, r0
 801e324:	4648      	mov	r0, r9
 801e326:	4461      	add	r1, ip
 801e328:	1049      	asrs	r1, r1, #1
 801e32a:	6001      	str	r1, [r0, #0]
 801e32c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e32e:	0038      	movs	r0, r7
 801e330:	4651      	mov	r1, sl
 801e332:	f7e2 f945 	bl	80005c0 <__aeabi_lmul>
 801e336:	9a06      	ldr	r2, [sp, #24]
 801e338:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e33a:	000f      	movs	r7, r1
 801e33c:	0030      	movs	r0, r6
 801e33e:	4641      	mov	r1, r8
 801e340:	f7e2 f93e 	bl	80005c0 <__aeabi_lmul>
 801e344:	464e      	mov	r6, r9
 801e346:	9a00      	ldr	r2, [sp, #0]
 801e348:	9b01      	ldr	r3, [sp, #4]
 801e34a:	4694      	mov	ip, r2
 801e34c:	9803      	ldr	r0, [sp, #12]
 801e34e:	1a7f      	subs	r7, r7, r1
 801e350:	107f      	asrs	r7, r7, #1
 801e352:	6077      	str	r7, [r6, #4]
 801e354:	1a1e      	subs	r6, r3, r0
 801e356:	9b04      	ldr	r3, [sp, #16]
 801e358:	44e1      	add	r9, ip
 801e35a:	469c      	mov	ip, r3
 801e35c:	17f0      	asrs	r0, r6, #31
 801e35e:	4680      	mov	r8, r0
 801e360:	9902      	ldr	r1, [sp, #8]
 801e362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e364:	4461      	add	r1, ip
 801e366:	17cb      	asrs	r3, r1, #31
 801e368:	000f      	movs	r7, r1
 801e36a:	469a      	mov	sl, r3
 801e36c:	0030      	movs	r0, r6
 801e36e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e370:	4641      	mov	r1, r8
 801e372:	f7e2 f925 	bl	80005c0 <__aeabi_lmul>
 801e376:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e378:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e37a:	9101      	str	r1, [sp, #4]
 801e37c:	0038      	movs	r0, r7
 801e37e:	4651      	mov	r1, sl
 801e380:	f7e2 f91e 	bl	80005c0 <__aeabi_lmul>
 801e384:	9801      	ldr	r0, [sp, #4]
 801e386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e388:	4684      	mov	ip, r0
 801e38a:	4461      	add	r1, ip
 801e38c:	1049      	asrs	r1, r1, #1
 801e38e:	6029      	str	r1, [r5, #0]
 801e390:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e392:	0038      	movs	r0, r7
 801e394:	4651      	mov	r1, sl
 801e396:	f7e2 f913 	bl	80005c0 <__aeabi_lmul>
 801e39a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e39c:	000f      	movs	r7, r1
 801e39e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e3a0:	0030      	movs	r0, r6
 801e3a2:	4641      	mov	r1, r8
 801e3a4:	f7e2 f90c 	bl	80005c0 <__aeabi_lmul>
 801e3a8:	1a7f      	subs	r7, r7, r1
 801e3aa:	107f      	asrs	r7, r7, #1
 801e3ac:	606f      	str	r7, [r5, #4]
 801e3ae:	9a00      	ldr	r2, [sp, #0]
 801e3b0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e3b2:	4694      	mov	ip, r2
 801e3b4:	4465      	add	r5, ip
 801e3b6:	468c      	mov	ip, r1
 801e3b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e3ba:	0013      	movs	r3, r2
 801e3bc:	4462      	add	r2, ip
 801e3be:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e3c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e3c2:	429a      	cmp	r2, r3
 801e3c4:	d900      	bls.n	801e3c8 <arm_radix4_butterfly_q31+0x478>
 801e3c6:	e73a      	b.n	801e23e <arm_radix4_butterfly_q31+0x2ee>
 801e3c8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e3ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e3cc:	468c      	mov	ip, r1
 801e3ce:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e3d0:	4462      	add	r2, ip
 801e3d2:	468c      	mov	ip, r1
 801e3d4:	9216      	str	r2, [sp, #88]	@ 0x58
 801e3d6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e3d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e3da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e3dc:	4462      	add	r2, ip
 801e3de:	468c      	mov	ip, r1
 801e3e0:	9219      	str	r2, [sp, #100]	@ 0x64
 801e3e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e3e4:	3301      	adds	r3, #1
 801e3e6:	4462      	add	r2, ip
 801e3e8:	9218      	str	r2, [sp, #96]	@ 0x60
 801e3ea:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e3ec:	9315      	str	r3, [sp, #84]	@ 0x54
 801e3ee:	3208      	adds	r2, #8
 801e3f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e3f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e3f4:	4293      	cmp	r3, r2
 801e3f6:	d800      	bhi.n	801e3fa <arm_radix4_butterfly_q31+0x4aa>
 801e3f8:	e6e8      	b.n	801e1cc <arm_radix4_butterfly_q31+0x27c>
 801e3fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e3fc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e3fe:	009b      	lsls	r3, r3, #2
 801e400:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e402:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e404:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e406:	089b      	lsrs	r3, r3, #2
 801e408:	9320      	str	r3, [sp, #128]	@ 0x80
 801e40a:	2b04      	cmp	r3, #4
 801e40c:	d900      	bls.n	801e410 <arm_radix4_butterfly_q31+0x4c0>
 801e40e:	e6c1      	b.n	801e194 <arm_radix4_butterfly_q31+0x244>
 801e410:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e412:	469a      	mov	sl, r3
 801e414:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e416:	691c      	ldr	r4, [r3, #16]
 801e418:	685a      	ldr	r2, [r3, #4]
 801e41a:	46a1      	mov	r9, r4
 801e41c:	4690      	mov	r8, r2
 801e41e:	6819      	ldr	r1, [r3, #0]
 801e420:	689a      	ldr	r2, [r3, #8]
 801e422:	699f      	ldr	r7, [r3, #24]
 801e424:	188d      	adds	r5, r1, r2
 801e426:	444d      	add	r5, r9
 801e428:	19ed      	adds	r5, r5, r7
 801e42a:	69de      	ldr	r6, [r3, #28]
 801e42c:	601d      	str	r5, [r3, #0]
 801e42e:	4645      	mov	r5, r8
 801e430:	46b4      	mov	ip, r6
 801e432:	68d8      	ldr	r0, [r3, #12]
 801e434:	695c      	ldr	r4, [r3, #20]
 801e436:	182d      	adds	r5, r5, r0
 801e438:	192d      	adds	r5, r5, r4
 801e43a:	4465      	add	r5, ip
 801e43c:	605d      	str	r5, [r3, #4]
 801e43e:	1a8d      	subs	r5, r1, r2
 801e440:	444d      	add	r5, r9
 801e442:	1bed      	subs	r5, r5, r7
 801e444:	609d      	str	r5, [r3, #8]
 801e446:	4645      	mov	r5, r8
 801e448:	1a2d      	subs	r5, r5, r0
 801e44a:	192d      	adds	r5, r5, r4
 801e44c:	1bad      	subs	r5, r5, r6
 801e44e:	464e      	mov	r6, r9
 801e450:	60dd      	str	r5, [r3, #12]
 801e452:	180d      	adds	r5, r1, r0
 801e454:	1bad      	subs	r5, r5, r6
 801e456:	4666      	mov	r6, ip
 801e458:	1bad      	subs	r5, r5, r6
 801e45a:	611d      	str	r5, [r3, #16]
 801e45c:	4645      	mov	r5, r8
 801e45e:	1aad      	subs	r5, r5, r2
 801e460:	4442      	add	r2, r8
 801e462:	1b12      	subs	r2, r2, r4
 801e464:	1bd2      	subs	r2, r2, r7
 801e466:	1a08      	subs	r0, r1, r0
 801e468:	61da      	str	r2, [r3, #28]
 801e46a:	4649      	mov	r1, r9
 801e46c:	2201      	movs	r2, #1
 801e46e:	1a41      	subs	r1, r0, r1
 801e470:	4252      	negs	r2, r2
 801e472:	4461      	add	r1, ip
 801e474:	4694      	mov	ip, r2
 801e476:	44e2      	add	sl, ip
 801e478:	4652      	mov	r2, sl
 801e47a:	1b2d      	subs	r5, r5, r4
 801e47c:	19ed      	adds	r5, r5, r7
 801e47e:	615d      	str	r5, [r3, #20]
 801e480:	6199      	str	r1, [r3, #24]
 801e482:	3320      	adds	r3, #32
 801e484:	2a00      	cmp	r2, #0
 801e486:	d1c6      	bne.n	801e416 <arm_radix4_butterfly_q31+0x4c6>
 801e488:	b027      	add	sp, #156	@ 0x9c
 801e48a:	bc3c      	pop	{r2, r3, r4, r5}
 801e48c:	4690      	mov	r8, r2
 801e48e:	4699      	mov	r9, r3
 801e490:	46a2      	mov	sl, r4
 801e492:	46ab      	mov	fp, r5
 801e494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e496:	469a      	mov	sl, r3
 801e498:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e49a:	e7bc      	b.n	801e416 <arm_radix4_butterfly_q31+0x4c6>

0801e49c <arm_radix4_butterfly_inverse_q31>:
 801e49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e49e:	464d      	mov	r5, r9
 801e4a0:	4644      	mov	r4, r8
 801e4a2:	465f      	mov	r7, fp
 801e4a4:	4656      	mov	r6, sl
 801e4a6:	b4f0      	push	{r4, r5, r6, r7}
 801e4a8:	b0a7      	sub	sp, #156	@ 0x9c
 801e4aa:	469c      	mov	ip, r3
 801e4ac:	9114      	str	r1, [sp, #80]	@ 0x50
 801e4ae:	0889      	lsrs	r1, r1, #2
 801e4b0:	9310      	str	r3, [sp, #64]	@ 0x40
 801e4b2:	00cb      	lsls	r3, r1, #3
 801e4b4:	0015      	movs	r5, r2
 801e4b6:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e4b8:	18c2      	adds	r2, r0, r3
 801e4ba:	000c      	movs	r4, r1
 801e4bc:	9124      	str	r1, [sp, #144]	@ 0x90
 801e4be:	18d1      	adds	r1, r2, r3
 801e4c0:	468b      	mov	fp, r1
 801e4c2:	469a      	mov	sl, r3
 801e4c4:	4663      	mov	r3, ip
 801e4c6:	44da      	add	sl, fp
 801e4c8:	46d0      	mov	r8, sl
 801e4ca:	4681      	mov	r9, r0
 801e4cc:	4692      	mov	sl, r2
 801e4ce:	0119      	lsls	r1, r3, #4
 801e4d0:	910d      	str	r1, [sp, #52]	@ 0x34
 801e4d2:	00d9      	lsls	r1, r3, #3
 801e4d4:	005b      	lsls	r3, r3, #1
 801e4d6:	4463      	add	r3, ip
 801e4d8:	910e      	str	r1, [sp, #56]	@ 0x38
 801e4da:	00d9      	lsls	r1, r3, #3
 801e4dc:	9022      	str	r0, [sp, #136]	@ 0x88
 801e4de:	9025      	str	r0, [sp, #148]	@ 0x94
 801e4e0:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e4e2:	9502      	str	r5, [sp, #8]
 801e4e4:	9500      	str	r5, [sp, #0]
 801e4e6:	9501      	str	r5, [sp, #4]
 801e4e8:	9409      	str	r4, [sp, #36]	@ 0x24
 801e4ea:	464b      	mov	r3, r9
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	4652      	mov	r2, sl
 801e4f0:	111c      	asrs	r4, r3, #4
 801e4f2:	465b      	mov	r3, fp
 801e4f4:	4648      	mov	r0, r9
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	6812      	ldr	r2, [r2, #0]
 801e4fa:	6840      	ldr	r0, [r0, #4]
 801e4fc:	111b      	asrs	r3, r3, #4
 801e4fe:	18e7      	adds	r7, r4, r3
 801e500:	1ae3      	subs	r3, r4, r3
 801e502:	1114      	asrs	r4, r2, #4
 801e504:	4642      	mov	r2, r8
 801e506:	1105      	asrs	r5, r0, #4
 801e508:	4658      	mov	r0, fp
 801e50a:	6812      	ldr	r2, [r2, #0]
 801e50c:	6840      	ldr	r0, [r0, #4]
 801e50e:	9303      	str	r3, [sp, #12]
 801e510:	1113      	asrs	r3, r2, #4
 801e512:	18e2      	adds	r2, r4, r3
 801e514:	1103      	asrs	r3, r0, #4
 801e516:	18ee      	adds	r6, r5, r3
 801e518:	1ae8      	subs	r0, r5, r3
 801e51a:	464d      	mov	r5, r9
 801e51c:	18bb      	adds	r3, r7, r2
 801e51e:	602b      	str	r3, [r5, #0]
 801e520:	4641      	mov	r1, r8
 801e522:	4655      	mov	r5, sl
 801e524:	6849      	ldr	r1, [r1, #4]
 801e526:	686d      	ldr	r5, [r5, #4]
 801e528:	110b      	asrs	r3, r1, #4
 801e52a:	112d      	asrs	r5, r5, #4
 801e52c:	18eb      	adds	r3, r5, r3
 801e52e:	464d      	mov	r5, r9
 801e530:	18f1      	adds	r1, r6, r3
 801e532:	6069      	str	r1, [r5, #4]
 801e534:	4655      	mov	r5, sl
 801e536:	686d      	ldr	r5, [r5, #4]
 801e538:	9004      	str	r0, [sp, #16]
 801e53a:	112c      	asrs	r4, r5, #4
 801e53c:	4645      	mov	r5, r8
 801e53e:	686d      	ldr	r5, [r5, #4]
 801e540:	1129      	asrs	r1, r5, #4
 801e542:	1a65      	subs	r5, r4, r1
 801e544:	4651      	mov	r1, sl
 801e546:	6809      	ldr	r1, [r1, #0]
 801e548:	1abc      	subs	r4, r7, r2
 801e54a:	1108      	asrs	r0, r1, #4
 801e54c:	4641      	mov	r1, r8
 801e54e:	17e2      	asrs	r2, r4, #31
 801e550:	6809      	ldr	r1, [r1, #0]
 801e552:	9207      	str	r2, [sp, #28]
 801e554:	9a01      	ldr	r2, [sp, #4]
 801e556:	1109      	asrs	r1, r1, #4
 801e558:	6817      	ldr	r7, [r2, #0]
 801e55a:	1a41      	subs	r1, r0, r1
 801e55c:	9106      	str	r1, [sp, #24]
 801e55e:	0039      	movs	r1, r7
 801e560:	17ff      	asrs	r7, r7, #31
 801e562:	0038      	movs	r0, r7
 801e564:	9505      	str	r5, [sp, #20]
 801e566:	1af5      	subs	r5, r6, r3
 801e568:	17ef      	asrs	r7, r5, #31
 801e56a:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e56c:	6857      	ldr	r7, [r2, #4]
 801e56e:	0003      	movs	r3, r0
 801e570:	17fe      	asrs	r6, r7, #31
 801e572:	000a      	movs	r2, r1
 801e574:	9108      	str	r1, [sp, #32]
 801e576:	900a      	str	r0, [sp, #40]	@ 0x28
 801e578:	17e1      	asrs	r1, r4, #31
 801e57a:	0020      	movs	r0, r4
 801e57c:	960c      	str	r6, [sp, #48]	@ 0x30
 801e57e:	f7e2 f81f 	bl	80005c0 <__aeabi_lmul>
 801e582:	003a      	movs	r2, r7
 801e584:	17fb      	asrs	r3, r7, #31
 801e586:	000e      	movs	r6, r1
 801e588:	0028      	movs	r0, r5
 801e58a:	17e9      	asrs	r1, r5, #31
 801e58c:	f7e2 f818 	bl	80005c0 <__aeabi_lmul>
 801e590:	4653      	mov	r3, sl
 801e592:	1a76      	subs	r6, r6, r1
 801e594:	0076      	lsls	r6, r6, #1
 801e596:	601e      	str	r6, [r3, #0]
 801e598:	002a      	movs	r2, r5
 801e59a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e59c:	9808      	ldr	r0, [sp, #32]
 801e59e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e5a0:	f7e2 f80e 	bl	80005c0 <__aeabi_lmul>
 801e5a4:	003a      	movs	r2, r7
 801e5a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e5a8:	000d      	movs	r5, r1
 801e5aa:	0020      	movs	r0, r4
 801e5ac:	9907      	ldr	r1, [sp, #28]
 801e5ae:	f7e2 f807 	bl	80005c0 <__aeabi_lmul>
 801e5b2:	4657      	mov	r7, sl
 801e5b4:	186d      	adds	r5, r5, r1
 801e5b6:	006d      	lsls	r5, r5, #1
 801e5b8:	607d      	str	r5, [r7, #4]
 801e5ba:	9b03      	ldr	r3, [sp, #12]
 801e5bc:	9e06      	ldr	r6, [sp, #24]
 801e5be:	9d05      	ldr	r5, [sp, #20]
 801e5c0:	46b4      	mov	ip, r6
 801e5c2:	1b5d      	subs	r5, r3, r5
 801e5c4:	9b00      	ldr	r3, [sp, #0]
 801e5c6:	17ef      	asrs	r7, r5, #31
 801e5c8:	0039      	movs	r1, r7
 801e5ca:	681f      	ldr	r7, [r3, #0]
 801e5cc:	17fc      	asrs	r4, r7, #31
 801e5ce:	0020      	movs	r0, r4
 801e5d0:	9c04      	ldr	r4, [sp, #16]
 801e5d2:	4464      	add	r4, ip
 801e5d4:	17e6      	asrs	r6, r4, #31
 801e5d6:	9407      	str	r4, [sp, #28]
 801e5d8:	9608      	str	r6, [sp, #32]
 801e5da:	685e      	ldr	r6, [r3, #4]
 801e5dc:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e5de:	17f2      	asrs	r2, r6, #31
 801e5e0:	0003      	movs	r3, r0
 801e5e2:	920c      	str	r2, [sp, #48]	@ 0x30
 801e5e4:	0028      	movs	r0, r5
 801e5e6:	003a      	movs	r2, r7
 801e5e8:	910a      	str	r1, [sp, #40]	@ 0x28
 801e5ea:	f7e1 ffe9 	bl	80005c0 <__aeabi_lmul>
 801e5ee:	0032      	movs	r2, r6
 801e5f0:	17f3      	asrs	r3, r6, #31
 801e5f2:	9807      	ldr	r0, [sp, #28]
 801e5f4:	000c      	movs	r4, r1
 801e5f6:	9908      	ldr	r1, [sp, #32]
 801e5f8:	f7e1 ffe2 	bl	80005c0 <__aeabi_lmul>
 801e5fc:	4658      	mov	r0, fp
 801e5fe:	1a64      	subs	r4, r4, r1
 801e600:	0064      	lsls	r4, r4, #1
 801e602:	9a07      	ldr	r2, [sp, #28]
 801e604:	6004      	str	r4, [r0, #0]
 801e606:	9b08      	ldr	r3, [sp, #32]
 801e608:	0038      	movs	r0, r7
 801e60a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e60c:	f7e1 ffd8 	bl	80005c0 <__aeabi_lmul>
 801e610:	0032      	movs	r2, r6
 801e612:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e614:	000c      	movs	r4, r1
 801e616:	0028      	movs	r0, r5
 801e618:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e61a:	f7e1 ffd1 	bl	80005c0 <__aeabi_lmul>
 801e61e:	9d05      	ldr	r5, [sp, #20]
 801e620:	465f      	mov	r7, fp
 801e622:	46ac      	mov	ip, r5
 801e624:	1864      	adds	r4, r4, r1
 801e626:	9903      	ldr	r1, [sp, #12]
 801e628:	0064      	lsls	r4, r4, #1
 801e62a:	4461      	add	r1, ip
 801e62c:	607c      	str	r4, [r7, #4]
 801e62e:	000c      	movs	r4, r1
 801e630:	17c9      	asrs	r1, r1, #31
 801e632:	9105      	str	r1, [sp, #20]
 801e634:	9902      	ldr	r1, [sp, #8]
 801e636:	9804      	ldr	r0, [sp, #16]
 801e638:	680d      	ldr	r5, [r1, #0]
 801e63a:	9e06      	ldr	r6, [sp, #24]
 801e63c:	002b      	movs	r3, r5
 801e63e:	17ed      	asrs	r5, r5, #31
 801e640:	684f      	ldr	r7, [r1, #4]
 801e642:	9503      	str	r5, [sp, #12]
 801e644:	1b85      	subs	r5, r0, r6
 801e646:	17e8      	asrs	r0, r5, #31
 801e648:	001a      	movs	r2, r3
 801e64a:	9006      	str	r0, [sp, #24]
 801e64c:	17fe      	asrs	r6, r7, #31
 801e64e:	9304      	str	r3, [sp, #16]
 801e650:	0020      	movs	r0, r4
 801e652:	9b03      	ldr	r3, [sp, #12]
 801e654:	17e1      	asrs	r1, r4, #31
 801e656:	9607      	str	r6, [sp, #28]
 801e658:	f7e1 ffb2 	bl	80005c0 <__aeabi_lmul>
 801e65c:	003a      	movs	r2, r7
 801e65e:	000e      	movs	r6, r1
 801e660:	17fb      	asrs	r3, r7, #31
 801e662:	0028      	movs	r0, r5
 801e664:	17e9      	asrs	r1, r5, #31
 801e666:	f7e1 ffab 	bl	80005c0 <__aeabi_lmul>
 801e66a:	4640      	mov	r0, r8
 801e66c:	1a76      	subs	r6, r6, r1
 801e66e:	0076      	lsls	r6, r6, #1
 801e670:	002a      	movs	r2, r5
 801e672:	9b06      	ldr	r3, [sp, #24]
 801e674:	6006      	str	r6, [r0, #0]
 801e676:	9903      	ldr	r1, [sp, #12]
 801e678:	9804      	ldr	r0, [sp, #16]
 801e67a:	f7e1 ffa1 	bl	80005c0 <__aeabi_lmul>
 801e67e:	0020      	movs	r0, r4
 801e680:	2408      	movs	r4, #8
 801e682:	9b07      	ldr	r3, [sp, #28]
 801e684:	000d      	movs	r5, r1
 801e686:	003a      	movs	r2, r7
 801e688:	9905      	ldr	r1, [sp, #20]
 801e68a:	f7e1 ff99 	bl	80005c0 <__aeabi_lmul>
 801e68e:	4640      	mov	r0, r8
 801e690:	46a4      	mov	ip, r4
 801e692:	186d      	adds	r5, r5, r1
 801e694:	006d      	lsls	r5, r5, #1
 801e696:	6045      	str	r5, [r0, #4]
 801e698:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e69a:	44e1      	add	r9, ip
 801e69c:	3801      	subs	r0, #1
 801e69e:	9009      	str	r0, [sp, #36]	@ 0x24
 801e6a0:	9a01      	ldr	r2, [sp, #4]
 801e6a2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e6a4:	44e2      	add	sl, ip
 801e6a6:	44e3      	add	fp, ip
 801e6a8:	44e0      	add	r8, ip
 801e6aa:	46a4      	mov	ip, r4
 801e6ac:	4462      	add	r2, ip
 801e6ae:	9201      	str	r2, [sp, #4]
 801e6b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e6b2:	9b00      	ldr	r3, [sp, #0]
 801e6b4:	4694      	mov	ip, r2
 801e6b6:	4463      	add	r3, ip
 801e6b8:	9300      	str	r3, [sp, #0]
 801e6ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e6bc:	9902      	ldr	r1, [sp, #8]
 801e6be:	469c      	mov	ip, r3
 801e6c0:	4461      	add	r1, ip
 801e6c2:	9102      	str	r1, [sp, #8]
 801e6c4:	2800      	cmp	r0, #0
 801e6c6:	d000      	beq.n	801e6ca <arm_radix4_butterfly_inverse_q31+0x22e>
 801e6c8:	e70f      	b.n	801e4ea <arm_radix4_butterfly_inverse_q31+0x4e>
 801e6ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e6cc:	009b      	lsls	r3, r3, #2
 801e6ce:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e6d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e6d2:	9320      	str	r3, [sp, #128]	@ 0x80
 801e6d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e6d6:	2b04      	cmp	r3, #4
 801e6d8:	d800      	bhi.n	801e6dc <arm_radix4_butterfly_inverse_q31+0x240>
 801e6da:	e17c      	b.n	801e9d6 <arm_radix4_butterfly_inverse_q31+0x53a>
 801e6dc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e6de:	0893      	lsrs	r3, r2, #2
 801e6e0:	1e59      	subs	r1, r3, #1
 801e6e2:	9321      	str	r3, [sp, #132]	@ 0x84
 801e6e4:	00db      	lsls	r3, r3, #3
 801e6e6:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e6e8:	00d3      	lsls	r3, r2, #3
 801e6ea:	9300      	str	r3, [sp, #0]
 801e6ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e6ee:	911a      	str	r1, [sp, #104]	@ 0x68
 801e6f0:	00da      	lsls	r2, r3, #3
 801e6f2:	921e      	str	r2, [sp, #120]	@ 0x78
 801e6f4:	011a      	lsls	r2, r3, #4
 801e6f6:	921d      	str	r2, [sp, #116]	@ 0x74
 801e6f8:	001a      	movs	r2, r3
 801e6fa:	4694      	mov	ip, r2
 801e6fc:	005b      	lsls	r3, r3, #1
 801e6fe:	4463      	add	r3, ip
 801e700:	00db      	lsls	r3, r3, #3
 801e702:	931c      	str	r3, [sp, #112]	@ 0x70
 801e704:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e706:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e708:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e70a:	9318      	str	r3, [sp, #96]	@ 0x60
 801e70c:	9319      	str	r3, [sp, #100]	@ 0x64
 801e70e:	9316      	str	r3, [sp, #88]	@ 0x58
 801e710:	2300      	movs	r3, #0
 801e712:	9315      	str	r3, [sp, #84]	@ 0x54
 801e714:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e716:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e718:	681a      	ldr	r2, [r3, #0]
 801e71a:	685b      	ldr	r3, [r3, #4]
 801e71c:	9205      	str	r2, [sp, #20]
 801e71e:	9306      	str	r3, [sp, #24]
 801e720:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e722:	468c      	mov	ip, r1
 801e724:	681a      	ldr	r2, [r3, #0]
 801e726:	685b      	ldr	r3, [r3, #4]
 801e728:	9207      	str	r2, [sp, #28]
 801e72a:	9308      	str	r3, [sp, #32]
 801e72c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e72e:	681a      	ldr	r2, [r3, #0]
 801e730:	685b      	ldr	r3, [r3, #4]
 801e732:	9209      	str	r2, [sp, #36]	@ 0x24
 801e734:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e736:	930a      	str	r3, [sp, #40]	@ 0x28
 801e738:	0013      	movs	r3, r2
 801e73a:	4463      	add	r3, ip
 801e73c:	4698      	mov	r8, r3
 801e73e:	0013      	movs	r3, r2
 801e740:	4442      	add	r2, r8
 801e742:	4691      	mov	r9, r2
 801e744:	001a      	movs	r2, r3
 801e746:	444a      	add	r2, r9
 801e748:	4692      	mov	sl, r2
 801e74a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e74c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e74e:	4293      	cmp	r3, r2
 801e750:	d800      	bhi.n	801e754 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e752:	e0d9      	b.n	801e908 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e754:	4694      	mov	ip, r2
 801e756:	4644      	mov	r4, r8
 801e758:	4655      	mov	r5, sl
 801e75a:	4688      	mov	r8, r1
 801e75c:	9b07      	ldr	r3, [sp, #28]
 801e75e:	17db      	asrs	r3, r3, #31
 801e760:	930c      	str	r3, [sp, #48]	@ 0x30
 801e762:	9b08      	ldr	r3, [sp, #32]
 801e764:	17db      	asrs	r3, r3, #31
 801e766:	930d      	str	r3, [sp, #52]	@ 0x34
 801e768:	9b05      	ldr	r3, [sp, #20]
 801e76a:	17db      	asrs	r3, r3, #31
 801e76c:	930e      	str	r3, [sp, #56]	@ 0x38
 801e76e:	9b06      	ldr	r3, [sp, #24]
 801e770:	17db      	asrs	r3, r3, #31
 801e772:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e776:	17db      	asrs	r3, r3, #31
 801e778:	9310      	str	r3, [sp, #64]	@ 0x40
 801e77a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e77c:	17db      	asrs	r3, r3, #31
 801e77e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e780:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e782:	4463      	add	r3, ip
 801e784:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e786:	4643      	mov	r3, r8
 801e788:	4641      	mov	r1, r8
 801e78a:	681a      	ldr	r2, [r3, #0]
 801e78c:	464b      	mov	r3, r9
 801e78e:	684f      	ldr	r7, [r1, #4]
 801e790:	4649      	mov	r1, r9
 801e792:	681b      	ldr	r3, [r3, #0]
 801e794:	18d6      	adds	r6, r2, r3
 801e796:	1ad3      	subs	r3, r2, r3
 801e798:	9301      	str	r3, [sp, #4]
 801e79a:	684b      	ldr	r3, [r1, #4]
 801e79c:	1af9      	subs	r1, r7, r3
 801e79e:	9102      	str	r1, [sp, #8]
 801e7a0:	6829      	ldr	r1, [r5, #0]
 801e7a2:	18f8      	adds	r0, r7, r3
 801e7a4:	468c      	mov	ip, r1
 801e7a6:	6827      	ldr	r7, [r4, #0]
 801e7a8:	4467      	add	r7, ip
 801e7aa:	003a      	movs	r2, r7
 801e7ac:	19f3      	adds	r3, r6, r7
 801e7ae:	4647      	mov	r7, r8
 801e7b0:	109b      	asrs	r3, r3, #2
 801e7b2:	603b      	str	r3, [r7, #0]
 801e7b4:	6869      	ldr	r1, [r5, #4]
 801e7b6:	6867      	ldr	r7, [r4, #4]
 801e7b8:	468c      	mov	ip, r1
 801e7ba:	4467      	add	r7, ip
 801e7bc:	003b      	movs	r3, r7
 801e7be:	19c1      	adds	r1, r0, r7
 801e7c0:	4647      	mov	r7, r8
 801e7c2:	1ab6      	subs	r6, r6, r2
 801e7c4:	1089      	asrs	r1, r1, #2
 801e7c6:	6079      	str	r1, [r7, #4]
 801e7c8:	17f2      	asrs	r2, r6, #31
 801e7ca:	9900      	ldr	r1, [sp, #0]
 801e7cc:	4692      	mov	sl, r2
 801e7ce:	468c      	mov	ip, r1
 801e7d0:	6867      	ldr	r7, [r4, #4]
 801e7d2:	6869      	ldr	r1, [r5, #4]
 801e7d4:	44e0      	add	r8, ip
 801e7d6:	1a7f      	subs	r7, r7, r1
 801e7d8:	9703      	str	r7, [sp, #12]
 801e7da:	6821      	ldr	r1, [r4, #0]
 801e7dc:	682f      	ldr	r7, [r5, #0]
 801e7de:	1bc9      	subs	r1, r1, r7
 801e7e0:	1ac7      	subs	r7, r0, r3
 801e7e2:	17fa      	asrs	r2, r7, #31
 801e7e4:	4693      	mov	fp, r2
 801e7e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e7e8:	9a07      	ldr	r2, [sp, #28]
 801e7ea:	9104      	str	r1, [sp, #16]
 801e7ec:	0030      	movs	r0, r6
 801e7ee:	4651      	mov	r1, sl
 801e7f0:	f7e1 fee6 	bl	80005c0 <__aeabi_lmul>
 801e7f4:	9a08      	ldr	r2, [sp, #32]
 801e7f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e7f8:	9112      	str	r1, [sp, #72]	@ 0x48
 801e7fa:	0038      	movs	r0, r7
 801e7fc:	4659      	mov	r1, fp
 801e7fe:	f7e1 fedf 	bl	80005c0 <__aeabi_lmul>
 801e802:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e804:	9a07      	ldr	r2, [sp, #28]
 801e806:	1a41      	subs	r1, r0, r1
 801e808:	1049      	asrs	r1, r1, #1
 801e80a:	6021      	str	r1, [r4, #0]
 801e80c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e80e:	0038      	movs	r0, r7
 801e810:	4659      	mov	r1, fp
 801e812:	f7e1 fed5 	bl	80005c0 <__aeabi_lmul>
 801e816:	9a08      	ldr	r2, [sp, #32]
 801e818:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e81a:	000f      	movs	r7, r1
 801e81c:	0030      	movs	r0, r6
 801e81e:	4651      	mov	r1, sl
 801e820:	f7e1 fece 	bl	80005c0 <__aeabi_lmul>
 801e824:	9b00      	ldr	r3, [sp, #0]
 801e826:	187f      	adds	r7, r7, r1
 801e828:	469c      	mov	ip, r3
 801e82a:	107f      	asrs	r7, r7, #1
 801e82c:	6067      	str	r7, [r4, #4]
 801e82e:	9a01      	ldr	r2, [sp, #4]
 801e830:	9f03      	ldr	r7, [sp, #12]
 801e832:	9802      	ldr	r0, [sp, #8]
 801e834:	1bd7      	subs	r7, r2, r7
 801e836:	17fe      	asrs	r6, r7, #31
 801e838:	0031      	movs	r1, r6
 801e83a:	9e04      	ldr	r6, [sp, #16]
 801e83c:	4682      	mov	sl, r0
 801e83e:	4464      	add	r4, ip
 801e840:	46b4      	mov	ip, r6
 801e842:	44e2      	add	sl, ip
 801e844:	4652      	mov	r2, sl
 801e846:	17d2      	asrs	r2, r2, #31
 801e848:	4693      	mov	fp, r2
 801e84a:	0038      	movs	r0, r7
 801e84c:	9a05      	ldr	r2, [sp, #20]
 801e84e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e850:	9112      	str	r1, [sp, #72]	@ 0x48
 801e852:	f7e1 feb5 	bl	80005c0 <__aeabi_lmul>
 801e856:	9a06      	ldr	r2, [sp, #24]
 801e858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e85a:	000e      	movs	r6, r1
 801e85c:	4650      	mov	r0, sl
 801e85e:	4659      	mov	r1, fp
 801e860:	f7e1 feae 	bl	80005c0 <__aeabi_lmul>
 801e864:	4648      	mov	r0, r9
 801e866:	1a76      	subs	r6, r6, r1
 801e868:	1076      	asrs	r6, r6, #1
 801e86a:	6006      	str	r6, [r0, #0]
 801e86c:	9a05      	ldr	r2, [sp, #20]
 801e86e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e870:	4650      	mov	r0, sl
 801e872:	4659      	mov	r1, fp
 801e874:	f7e1 fea4 	bl	80005c0 <__aeabi_lmul>
 801e878:	9a06      	ldr	r2, [sp, #24]
 801e87a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e87c:	000e      	movs	r6, r1
 801e87e:	0038      	movs	r0, r7
 801e880:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e882:	f7e1 fe9d 	bl	80005c0 <__aeabi_lmul>
 801e886:	9a00      	ldr	r2, [sp, #0]
 801e888:	9f03      	ldr	r7, [sp, #12]
 801e88a:	4694      	mov	ip, r2
 801e88c:	1876      	adds	r6, r6, r1
 801e88e:	4649      	mov	r1, r9
 801e890:	44e1      	add	r9, ip
 801e892:	46bc      	mov	ip, r7
 801e894:	9b01      	ldr	r3, [sp, #4]
 801e896:	1076      	asrs	r6, r6, #1
 801e898:	4463      	add	r3, ip
 801e89a:	17df      	asrs	r7, r3, #31
 801e89c:	604e      	str	r6, [r1, #4]
 801e89e:	46ba      	mov	sl, r7
 801e8a0:	001e      	movs	r6, r3
 801e8a2:	9802      	ldr	r0, [sp, #8]
 801e8a4:	9b04      	ldr	r3, [sp, #16]
 801e8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e8a8:	1ac7      	subs	r7, r0, r3
 801e8aa:	17fb      	asrs	r3, r7, #31
 801e8ac:	469b      	mov	fp, r3
 801e8ae:	0030      	movs	r0, r6
 801e8b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8b2:	4651      	mov	r1, sl
 801e8b4:	f7e1 fe84 	bl	80005c0 <__aeabi_lmul>
 801e8b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e8ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e8bc:	9101      	str	r1, [sp, #4]
 801e8be:	0038      	movs	r0, r7
 801e8c0:	4659      	mov	r1, fp
 801e8c2:	f7e1 fe7d 	bl	80005c0 <__aeabi_lmul>
 801e8c6:	9801      	ldr	r0, [sp, #4]
 801e8c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e8ca:	1a41      	subs	r1, r0, r1
 801e8cc:	1049      	asrs	r1, r1, #1
 801e8ce:	6029      	str	r1, [r5, #0]
 801e8d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8d2:	0038      	movs	r0, r7
 801e8d4:	4659      	mov	r1, fp
 801e8d6:	f7e1 fe73 	bl	80005c0 <__aeabi_lmul>
 801e8da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e8dc:	000f      	movs	r7, r1
 801e8de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e8e0:	0030      	movs	r0, r6
 801e8e2:	4651      	mov	r1, sl
 801e8e4:	f7e1 fe6c 	bl	80005c0 <__aeabi_lmul>
 801e8e8:	187f      	adds	r7, r7, r1
 801e8ea:	107f      	asrs	r7, r7, #1
 801e8ec:	606f      	str	r7, [r5, #4]
 801e8ee:	9a00      	ldr	r2, [sp, #0]
 801e8f0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e8f2:	4694      	mov	ip, r2
 801e8f4:	4465      	add	r5, ip
 801e8f6:	468c      	mov	ip, r1
 801e8f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e8fa:	0013      	movs	r3, r2
 801e8fc:	4462      	add	r2, ip
 801e8fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e900:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e902:	429a      	cmp	r2, r3
 801e904:	d900      	bls.n	801e908 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e906:	e73e      	b.n	801e786 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e908:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e90a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e90c:	468c      	mov	ip, r1
 801e90e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e910:	4462      	add	r2, ip
 801e912:	468c      	mov	ip, r1
 801e914:	9216      	str	r2, [sp, #88]	@ 0x58
 801e916:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e918:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e91a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e91c:	4462      	add	r2, ip
 801e91e:	468c      	mov	ip, r1
 801e920:	9219      	str	r2, [sp, #100]	@ 0x64
 801e922:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e924:	3301      	adds	r3, #1
 801e926:	4462      	add	r2, ip
 801e928:	9218      	str	r2, [sp, #96]	@ 0x60
 801e92a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e92c:	9315      	str	r3, [sp, #84]	@ 0x54
 801e92e:	3208      	adds	r2, #8
 801e930:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e932:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e934:	4293      	cmp	r3, r2
 801e936:	d800      	bhi.n	801e93a <arm_radix4_butterfly_inverse_q31+0x49e>
 801e938:	e6ec      	b.n	801e714 <arm_radix4_butterfly_inverse_q31+0x278>
 801e93a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e93c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e93e:	009b      	lsls	r3, r3, #2
 801e940:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e942:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e944:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e946:	089b      	lsrs	r3, r3, #2
 801e948:	9320      	str	r3, [sp, #128]	@ 0x80
 801e94a:	2b04      	cmp	r3, #4
 801e94c:	d900      	bls.n	801e950 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e94e:	e6c5      	b.n	801e6dc <arm_radix4_butterfly_inverse_q31+0x240>
 801e950:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e952:	469a      	mov	sl, r3
 801e954:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e956:	681a      	ldr	r2, [r3, #0]
 801e958:	6918      	ldr	r0, [r3, #16]
 801e95a:	4691      	mov	r9, r2
 801e95c:	464c      	mov	r4, r9
 801e95e:	4680      	mov	r8, r0
 801e960:	69de      	ldr	r6, [r3, #28]
 801e962:	689d      	ldr	r5, [r3, #8]
 801e964:	46b4      	mov	ip, r6
 801e966:	6998      	ldr	r0, [r3, #24]
 801e968:	1964      	adds	r4, r4, r5
 801e96a:	6859      	ldr	r1, [r3, #4]
 801e96c:	68da      	ldr	r2, [r3, #12]
 801e96e:	4444      	add	r4, r8
 801e970:	695f      	ldr	r7, [r3, #20]
 801e972:	1824      	adds	r4, r4, r0
 801e974:	601c      	str	r4, [r3, #0]
 801e976:	188c      	adds	r4, r1, r2
 801e978:	19e4      	adds	r4, r4, r7
 801e97a:	4464      	add	r4, ip
 801e97c:	605c      	str	r4, [r3, #4]
 801e97e:	464c      	mov	r4, r9
 801e980:	1b64      	subs	r4, r4, r5
 801e982:	4444      	add	r4, r8
 801e984:	1a24      	subs	r4, r4, r0
 801e986:	609c      	str	r4, [r3, #8]
 801e988:	1a8c      	subs	r4, r1, r2
 801e98a:	19e4      	adds	r4, r4, r7
 801e98c:	1ba4      	subs	r4, r4, r6
 801e98e:	60dc      	str	r4, [r3, #12]
 801e990:	464c      	mov	r4, r9
 801e992:	4646      	mov	r6, r8
 801e994:	1aa4      	subs	r4, r4, r2
 801e996:	1ba4      	subs	r4, r4, r6
 801e998:	4464      	add	r4, ip
 801e99a:	611c      	str	r4, [r3, #16]
 801e99c:	194c      	adds	r4, r1, r5
 801e99e:	1be4      	subs	r4, r4, r7
 801e9a0:	1a24      	subs	r4, r4, r0
 801e9a2:	615c      	str	r4, [r3, #20]
 801e9a4:	4644      	mov	r4, r8
 801e9a6:	4666      	mov	r6, ip
 801e9a8:	444a      	add	r2, r9
 801e9aa:	1b12      	subs	r2, r2, r4
 801e9ac:	1b92      	subs	r2, r2, r6
 801e9ae:	619a      	str	r2, [r3, #24]
 801e9b0:	1b4a      	subs	r2, r1, r5
 801e9b2:	1bd1      	subs	r1, r2, r7
 801e9b4:	2201      	movs	r2, #1
 801e9b6:	4252      	negs	r2, r2
 801e9b8:	4694      	mov	ip, r2
 801e9ba:	44e2      	add	sl, ip
 801e9bc:	4652      	mov	r2, sl
 801e9be:	1809      	adds	r1, r1, r0
 801e9c0:	61d9      	str	r1, [r3, #28]
 801e9c2:	3320      	adds	r3, #32
 801e9c4:	2a00      	cmp	r2, #0
 801e9c6:	d1c6      	bne.n	801e956 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e9c8:	b027      	add	sp, #156	@ 0x9c
 801e9ca:	bc3c      	pop	{r2, r3, r4, r5}
 801e9cc:	4690      	mov	r8, r2
 801e9ce:	4699      	mov	r9, r3
 801e9d0:	46a2      	mov	sl, r4
 801e9d2:	46ab      	mov	fp, r5
 801e9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9d6:	469a      	mov	sl, r3
 801e9d8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e9da:	e7bc      	b.n	801e956 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e9dc <arm_cmplx_mag_squared_q31>:
 801e9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9de:	464f      	mov	r7, r9
 801e9e0:	4646      	mov	r6, r8
 801e9e2:	0004      	movs	r4, r0
 801e9e4:	b4c0      	push	{r6, r7}
 801e9e6:	0016      	movs	r6, r2
 801e9e8:	000f      	movs	r7, r1
 801e9ea:	2a00      	cmp	r2, #0
 801e9ec:	d018      	beq.n	801ea20 <arm_cmplx_mag_squared_q31+0x44>
 801e9ee:	6823      	ldr	r3, [r4, #0]
 801e9f0:	6822      	ldr	r2, [r4, #0]
 801e9f2:	17d9      	asrs	r1, r3, #31
 801e9f4:	6863      	ldr	r3, [r4, #4]
 801e9f6:	0010      	movs	r0, r2
 801e9f8:	4698      	mov	r8, r3
 801e9fa:	17db      	asrs	r3, r3, #31
 801e9fc:	4699      	mov	r9, r3
 801e9fe:	000b      	movs	r3, r1
 801ea00:	f7e1 fdde 	bl	80005c0 <__aeabi_lmul>
 801ea04:	4642      	mov	r2, r8
 801ea06:	104d      	asrs	r5, r1, #1
 801ea08:	464b      	mov	r3, r9
 801ea0a:	4640      	mov	r0, r8
 801ea0c:	4649      	mov	r1, r9
 801ea0e:	f7e1 fdd7 	bl	80005c0 <__aeabi_lmul>
 801ea12:	1049      	asrs	r1, r1, #1
 801ea14:	1869      	adds	r1, r5, r1
 801ea16:	3e01      	subs	r6, #1
 801ea18:	c702      	stmia	r7!, {r1}
 801ea1a:	3408      	adds	r4, #8
 801ea1c:	2e00      	cmp	r6, #0
 801ea1e:	d1e6      	bne.n	801e9ee <arm_cmplx_mag_squared_q31+0x12>
 801ea20:	bc0c      	pop	{r2, r3}
 801ea22:	4690      	mov	r8, r2
 801ea24:	4699      	mov	r9, r3
 801ea26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ea28 <arm_mult_q31>:
 801ea28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea2a:	4646      	mov	r6, r8
 801ea2c:	464f      	mov	r7, r9
 801ea2e:	4690      	mov	r8, r2
 801ea30:	b4c0      	push	{r6, r7}
 801ea32:	001d      	movs	r5, r3
 801ea34:	0006      	movs	r6, r0
 801ea36:	000f      	movs	r7, r1
 801ea38:	2400      	movs	r4, #0
 801ea3a:	2b00      	cmp	r3, #0
 801ea3c:	d020      	beq.n	801ea80 <arm_mult_q31+0x58>
 801ea3e:	4b12      	ldr	r3, [pc, #72]	@ (801ea88 <arm_mult_q31+0x60>)
 801ea40:	4699      	mov	r9, r3
 801ea42:	e007      	b.n	801ea54 <arm_mult_q31+0x2c>
 801ea44:	464b      	mov	r3, r9
 801ea46:	4059      	eors	r1, r3
 801ea48:	4643      	mov	r3, r8
 801ea4a:	3d01      	subs	r5, #1
 801ea4c:	5119      	str	r1, [r3, r4]
 801ea4e:	3404      	adds	r4, #4
 801ea50:	2d00      	cmp	r5, #0
 801ea52:	d015      	beq.n	801ea80 <arm_mult_q31+0x58>
 801ea54:	5933      	ldr	r3, [r6, r4]
 801ea56:	593a      	ldr	r2, [r7, r4]
 801ea58:	17d9      	asrs	r1, r3, #31
 801ea5a:	593b      	ldr	r3, [r7, r4]
 801ea5c:	5930      	ldr	r0, [r6, r4]
 801ea5e:	17db      	asrs	r3, r3, #31
 801ea60:	f7e1 fdae 	bl	80005c0 <__aeabi_lmul>
 801ea64:	004b      	lsls	r3, r1, #1
 801ea66:	0fc0      	lsrs	r0, r0, #31
 801ea68:	4318      	orrs	r0, r3
 801ea6a:	17c9      	asrs	r1, r1, #31
 801ea6c:	17c3      	asrs	r3, r0, #31
 801ea6e:	428b      	cmp	r3, r1
 801ea70:	d1e8      	bne.n	801ea44 <arm_mult_q31+0x1c>
 801ea72:	0001      	movs	r1, r0
 801ea74:	4643      	mov	r3, r8
 801ea76:	3d01      	subs	r5, #1
 801ea78:	5119      	str	r1, [r3, r4]
 801ea7a:	3404      	adds	r4, #4
 801ea7c:	2d00      	cmp	r5, #0
 801ea7e:	d1e9      	bne.n	801ea54 <arm_mult_q31+0x2c>
 801ea80:	bc0c      	pop	{r2, r3}
 801ea82:	4690      	mov	r8, r2
 801ea84:	4699      	mov	r9, r3
 801ea86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea88:	7fffffff 	.word	0x7fffffff

0801ea8c <arm_add_q31>:
 801ea8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea8e:	465f      	mov	r7, fp
 801ea90:	4656      	mov	r6, sl
 801ea92:	464d      	mov	r5, r9
 801ea94:	4644      	mov	r4, r8
 801ea96:	b4f0      	push	{r4, r5, r6, r7}
 801ea98:	4693      	mov	fp, r2
 801ea9a:	b083      	sub	sp, #12
 801ea9c:	4681      	mov	r9, r0
 801ea9e:	468a      	mov	sl, r1
 801eaa0:	4698      	mov	r8, r3
 801eaa2:	2200      	movs	r2, #0
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d020      	beq.n	801eaea <arm_add_q31+0x5e>
 801eaa8:	4649      	mov	r1, r9
 801eaaa:	4653      	mov	r3, sl
 801eaac:	588e      	ldr	r6, [r1, r2]
 801eaae:	589b      	ldr	r3, [r3, r2]
 801eab0:	17f7      	asrs	r7, r6, #31
 801eab2:	001c      	movs	r4, r3
 801eab4:	0030      	movs	r0, r6
 801eab6:	0039      	movs	r1, r7
 801eab8:	17dd      	asrs	r5, r3, #31
 801eaba:	46b4      	mov	ip, r6
 801eabc:	1900      	adds	r0, r0, r4
 801eabe:	4169      	adcs	r1, r5
 801eac0:	4463      	add	r3, ip
 801eac2:	9000      	str	r0, [sp, #0]
 801eac4:	9101      	str	r1, [sp, #4]
 801eac6:	17d9      	asrs	r1, r3, #31
 801eac8:	468c      	mov	ip, r1
 801eaca:	9901      	ldr	r1, [sp, #4]
 801eacc:	458c      	cmp	ip, r1
 801eace:	d002      	beq.n	801ead6 <arm_add_q31+0x4a>
 801ead0:	17cb      	asrs	r3, r1, #31
 801ead2:	4909      	ldr	r1, [pc, #36]	@ (801eaf8 <arm_add_q31+0x6c>)
 801ead4:	404b      	eors	r3, r1
 801ead6:	4659      	mov	r1, fp
 801ead8:	508b      	str	r3, [r1, r2]
 801eada:	2301      	movs	r3, #1
 801eadc:	425b      	negs	r3, r3
 801eade:	469c      	mov	ip, r3
 801eae0:	44e0      	add	r8, ip
 801eae2:	4643      	mov	r3, r8
 801eae4:	3204      	adds	r2, #4
 801eae6:	2b00      	cmp	r3, #0
 801eae8:	d1de      	bne.n	801eaa8 <arm_add_q31+0x1c>
 801eaea:	b003      	add	sp, #12
 801eaec:	bc3c      	pop	{r2, r3, r4, r5}
 801eaee:	4690      	mov	r8, r2
 801eaf0:	4699      	mov	r9, r3
 801eaf2:	46a2      	mov	sl, r4
 801eaf4:	46ab      	mov	fp, r5
 801eaf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eaf8:	7fffffff 	.word	0x7fffffff

0801eafc <atof>:
 801eafc:	b510      	push	{r4, lr}
 801eafe:	2100      	movs	r1, #0
 801eb00:	f000 fe12 	bl	801f728 <strtod>
 801eb04:	bd10      	pop	{r4, pc}

0801eb06 <atoi>:
 801eb06:	b510      	push	{r4, lr}
 801eb08:	220a      	movs	r2, #10
 801eb0a:	2100      	movs	r1, #0
 801eb0c:	f000 fea4 	bl	801f858 <strtol>
 801eb10:	bd10      	pop	{r4, pc}
	...

0801eb14 <sulp>:
 801eb14:	b570      	push	{r4, r5, r6, lr}
 801eb16:	0016      	movs	r6, r2
 801eb18:	000d      	movs	r5, r1
 801eb1a:	f003 fcf3 	bl	8022504 <__ulp>
 801eb1e:	2e00      	cmp	r6, #0
 801eb20:	d00d      	beq.n	801eb3e <sulp+0x2a>
 801eb22:	236b      	movs	r3, #107	@ 0x6b
 801eb24:	006a      	lsls	r2, r5, #1
 801eb26:	0d52      	lsrs	r2, r2, #21
 801eb28:	1a9b      	subs	r3, r3, r2
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	dd07      	ble.n	801eb3e <sulp+0x2a>
 801eb2e:	2400      	movs	r4, #0
 801eb30:	4a03      	ldr	r2, [pc, #12]	@ (801eb40 <sulp+0x2c>)
 801eb32:	051b      	lsls	r3, r3, #20
 801eb34:	189d      	adds	r5, r3, r2
 801eb36:	002b      	movs	r3, r5
 801eb38:	0022      	movs	r2, r4
 801eb3a:	f7e3 fd7f 	bl	800263c <__aeabi_dmul>
 801eb3e:	bd70      	pop	{r4, r5, r6, pc}
 801eb40:	3ff00000 	.word	0x3ff00000

0801eb44 <_strtod_l>:
 801eb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb46:	b0a3      	sub	sp, #140	@ 0x8c
 801eb48:	921b      	str	r2, [sp, #108]	@ 0x6c
 801eb4a:	2200      	movs	r2, #0
 801eb4c:	2600      	movs	r6, #0
 801eb4e:	2700      	movs	r7, #0
 801eb50:	9005      	str	r0, [sp, #20]
 801eb52:	9109      	str	r1, [sp, #36]	@ 0x24
 801eb54:	921e      	str	r2, [sp, #120]	@ 0x78
 801eb56:	911d      	str	r1, [sp, #116]	@ 0x74
 801eb58:	780a      	ldrb	r2, [r1, #0]
 801eb5a:	2a2b      	cmp	r2, #43	@ 0x2b
 801eb5c:	d053      	beq.n	801ec06 <_strtod_l+0xc2>
 801eb5e:	d83f      	bhi.n	801ebe0 <_strtod_l+0x9c>
 801eb60:	2a0d      	cmp	r2, #13
 801eb62:	d839      	bhi.n	801ebd8 <_strtod_l+0x94>
 801eb64:	2a08      	cmp	r2, #8
 801eb66:	d839      	bhi.n	801ebdc <_strtod_l+0x98>
 801eb68:	2a00      	cmp	r2, #0
 801eb6a:	d042      	beq.n	801ebf2 <_strtod_l+0xae>
 801eb6c:	2200      	movs	r2, #0
 801eb6e:	9212      	str	r2, [sp, #72]	@ 0x48
 801eb70:	2100      	movs	r1, #0
 801eb72:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801eb74:	910c      	str	r1, [sp, #48]	@ 0x30
 801eb76:	782a      	ldrb	r2, [r5, #0]
 801eb78:	2a30      	cmp	r2, #48	@ 0x30
 801eb7a:	d000      	beq.n	801eb7e <_strtod_l+0x3a>
 801eb7c:	e083      	b.n	801ec86 <_strtod_l+0x142>
 801eb7e:	786a      	ldrb	r2, [r5, #1]
 801eb80:	3120      	adds	r1, #32
 801eb82:	438a      	bics	r2, r1
 801eb84:	2a58      	cmp	r2, #88	@ 0x58
 801eb86:	d000      	beq.n	801eb8a <_strtod_l+0x46>
 801eb88:	e073      	b.n	801ec72 <_strtod_l+0x12e>
 801eb8a:	9302      	str	r3, [sp, #8]
 801eb8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801eb8e:	4a95      	ldr	r2, [pc, #596]	@ (801ede4 <_strtod_l+0x2a0>)
 801eb90:	9301      	str	r3, [sp, #4]
 801eb92:	ab1e      	add	r3, sp, #120	@ 0x78
 801eb94:	9300      	str	r3, [sp, #0]
 801eb96:	9805      	ldr	r0, [sp, #20]
 801eb98:	ab1f      	add	r3, sp, #124	@ 0x7c
 801eb9a:	a91d      	add	r1, sp, #116	@ 0x74
 801eb9c:	f002 fd62 	bl	8021664 <__gethex>
 801eba0:	230f      	movs	r3, #15
 801eba2:	0002      	movs	r2, r0
 801eba4:	401a      	ands	r2, r3
 801eba6:	0004      	movs	r4, r0
 801eba8:	9206      	str	r2, [sp, #24]
 801ebaa:	4218      	tst	r0, r3
 801ebac:	d005      	beq.n	801ebba <_strtod_l+0x76>
 801ebae:	2a06      	cmp	r2, #6
 801ebb0:	d12b      	bne.n	801ec0a <_strtod_l+0xc6>
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	3501      	adds	r5, #1
 801ebb6:	951d      	str	r5, [sp, #116]	@ 0x74
 801ebb8:	9312      	str	r3, [sp, #72]	@ 0x48
 801ebba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	d002      	beq.n	801ebc6 <_strtod_l+0x82>
 801ebc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ebc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ebc4:	6013      	str	r3, [r2, #0]
 801ebc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	d019      	beq.n	801ec00 <_strtod_l+0xbc>
 801ebcc:	2380      	movs	r3, #128	@ 0x80
 801ebce:	0030      	movs	r0, r6
 801ebd0:	061b      	lsls	r3, r3, #24
 801ebd2:	18f9      	adds	r1, r7, r3
 801ebd4:	b023      	add	sp, #140	@ 0x8c
 801ebd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebd8:	2a20      	cmp	r2, #32
 801ebda:	d1c7      	bne.n	801eb6c <_strtod_l+0x28>
 801ebdc:	3101      	adds	r1, #1
 801ebde:	e7ba      	b.n	801eb56 <_strtod_l+0x12>
 801ebe0:	2a2d      	cmp	r2, #45	@ 0x2d
 801ebe2:	d1c3      	bne.n	801eb6c <_strtod_l+0x28>
 801ebe4:	3a2c      	subs	r2, #44	@ 0x2c
 801ebe6:	9212      	str	r2, [sp, #72]	@ 0x48
 801ebe8:	1c4a      	adds	r2, r1, #1
 801ebea:	921d      	str	r2, [sp, #116]	@ 0x74
 801ebec:	784a      	ldrb	r2, [r1, #1]
 801ebee:	2a00      	cmp	r2, #0
 801ebf0:	d1be      	bne.n	801eb70 <_strtod_l+0x2c>
 801ebf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ebf4:	931d      	str	r3, [sp, #116]	@ 0x74
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	9312      	str	r3, [sp, #72]	@ 0x48
 801ebfa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d1df      	bne.n	801ebc0 <_strtod_l+0x7c>
 801ec00:	0030      	movs	r0, r6
 801ec02:	0039      	movs	r1, r7
 801ec04:	e7e6      	b.n	801ebd4 <_strtod_l+0x90>
 801ec06:	2200      	movs	r2, #0
 801ec08:	e7ed      	b.n	801ebe6 <_strtod_l+0xa2>
 801ec0a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ec0c:	2a00      	cmp	r2, #0
 801ec0e:	d007      	beq.n	801ec20 <_strtod_l+0xdc>
 801ec10:	2135      	movs	r1, #53	@ 0x35
 801ec12:	a820      	add	r0, sp, #128	@ 0x80
 801ec14:	f003 fd6c 	bl	80226f0 <__copybits>
 801ec18:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ec1a:	9805      	ldr	r0, [sp, #20]
 801ec1c:	f003 f926 	bl	8021e6c <_Bfree>
 801ec20:	9806      	ldr	r0, [sp, #24]
 801ec22:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ec24:	3801      	subs	r0, #1
 801ec26:	2804      	cmp	r0, #4
 801ec28:	d806      	bhi.n	801ec38 <_strtod_l+0xf4>
 801ec2a:	f7e1 faa7 	bl	800017c <__gnu_thumb1_case_uqi>
 801ec2e:	0312      	.short	0x0312
 801ec30:	1e1c      	.short	0x1e1c
 801ec32:	12          	.byte	0x12
 801ec33:	00          	.byte	0x00
 801ec34:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ec36:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801ec38:	05e4      	lsls	r4, r4, #23
 801ec3a:	d502      	bpl.n	801ec42 <_strtod_l+0xfe>
 801ec3c:	2380      	movs	r3, #128	@ 0x80
 801ec3e:	061b      	lsls	r3, r3, #24
 801ec40:	431f      	orrs	r7, r3
 801ec42:	4b69      	ldr	r3, [pc, #420]	@ (801ede8 <_strtod_l+0x2a4>)
 801ec44:	423b      	tst	r3, r7
 801ec46:	d1b8      	bne.n	801ebba <_strtod_l+0x76>
 801ec48:	f001 fd90 	bl	802076c <__errno>
 801ec4c:	2322      	movs	r3, #34	@ 0x22
 801ec4e:	6003      	str	r3, [r0, #0]
 801ec50:	e7b3      	b.n	801ebba <_strtod_l+0x76>
 801ec52:	4966      	ldr	r1, [pc, #408]	@ (801edec <_strtod_l+0x2a8>)
 801ec54:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ec56:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ec58:	400a      	ands	r2, r1
 801ec5a:	4965      	ldr	r1, [pc, #404]	@ (801edf0 <_strtod_l+0x2ac>)
 801ec5c:	185b      	adds	r3, r3, r1
 801ec5e:	051b      	lsls	r3, r3, #20
 801ec60:	431a      	orrs	r2, r3
 801ec62:	0017      	movs	r7, r2
 801ec64:	e7e8      	b.n	801ec38 <_strtod_l+0xf4>
 801ec66:	4f60      	ldr	r7, [pc, #384]	@ (801ede8 <_strtod_l+0x2a4>)
 801ec68:	e7e6      	b.n	801ec38 <_strtod_l+0xf4>
 801ec6a:	2601      	movs	r6, #1
 801ec6c:	4f61      	ldr	r7, [pc, #388]	@ (801edf4 <_strtod_l+0x2b0>)
 801ec6e:	4276      	negs	r6, r6
 801ec70:	e7e2      	b.n	801ec38 <_strtod_l+0xf4>
 801ec72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ec74:	1c5a      	adds	r2, r3, #1
 801ec76:	921d      	str	r2, [sp, #116]	@ 0x74
 801ec78:	785b      	ldrb	r3, [r3, #1]
 801ec7a:	2b30      	cmp	r3, #48	@ 0x30
 801ec7c:	d0f9      	beq.n	801ec72 <_strtod_l+0x12e>
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	d09b      	beq.n	801ebba <_strtod_l+0x76>
 801ec82:	2301      	movs	r3, #1
 801ec84:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec86:	2500      	movs	r5, #0
 801ec88:	220a      	movs	r2, #10
 801ec8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ec8c:	950d      	str	r5, [sp, #52]	@ 0x34
 801ec8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ec90:	9508      	str	r5, [sp, #32]
 801ec92:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801ec94:	7804      	ldrb	r4, [r0, #0]
 801ec96:	0023      	movs	r3, r4
 801ec98:	3b30      	subs	r3, #48	@ 0x30
 801ec9a:	b2d9      	uxtb	r1, r3
 801ec9c:	2909      	cmp	r1, #9
 801ec9e:	d927      	bls.n	801ecf0 <_strtod_l+0x1ac>
 801eca0:	2201      	movs	r2, #1
 801eca2:	4955      	ldr	r1, [pc, #340]	@ (801edf8 <_strtod_l+0x2b4>)
 801eca4:	f001 fcd4 	bl	8020650 <strncmp>
 801eca8:	2800      	cmp	r0, #0
 801ecaa:	d031      	beq.n	801ed10 <_strtod_l+0x1cc>
 801ecac:	2000      	movs	r0, #0
 801ecae:	0023      	movs	r3, r4
 801ecb0:	4684      	mov	ip, r0
 801ecb2:	9a08      	ldr	r2, [sp, #32]
 801ecb4:	900e      	str	r0, [sp, #56]	@ 0x38
 801ecb6:	9206      	str	r2, [sp, #24]
 801ecb8:	2220      	movs	r2, #32
 801ecba:	0019      	movs	r1, r3
 801ecbc:	4391      	bics	r1, r2
 801ecbe:	000a      	movs	r2, r1
 801ecc0:	2100      	movs	r1, #0
 801ecc2:	9107      	str	r1, [sp, #28]
 801ecc4:	2a45      	cmp	r2, #69	@ 0x45
 801ecc6:	d000      	beq.n	801ecca <_strtod_l+0x186>
 801ecc8:	e0c0      	b.n	801ee4c <_strtod_l+0x308>
 801ecca:	9b06      	ldr	r3, [sp, #24]
 801eccc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ecce:	4303      	orrs	r3, r0
 801ecd0:	4313      	orrs	r3, r2
 801ecd2:	428b      	cmp	r3, r1
 801ecd4:	d08d      	beq.n	801ebf2 <_strtod_l+0xae>
 801ecd6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ecd8:	9309      	str	r3, [sp, #36]	@ 0x24
 801ecda:	3301      	adds	r3, #1
 801ecdc:	931d      	str	r3, [sp, #116]	@ 0x74
 801ecde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ece0:	785b      	ldrb	r3, [r3, #1]
 801ece2:	2b2b      	cmp	r3, #43	@ 0x2b
 801ece4:	d070      	beq.n	801edc8 <_strtod_l+0x284>
 801ece6:	000c      	movs	r4, r1
 801ece8:	2b2d      	cmp	r3, #45	@ 0x2d
 801ecea:	d173      	bne.n	801edd4 <_strtod_l+0x290>
 801ecec:	2401      	movs	r4, #1
 801ecee:	e06c      	b.n	801edca <_strtod_l+0x286>
 801ecf0:	9908      	ldr	r1, [sp, #32]
 801ecf2:	2908      	cmp	r1, #8
 801ecf4:	dc09      	bgt.n	801ed0a <_strtod_l+0x1c6>
 801ecf6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ecf8:	4351      	muls	r1, r2
 801ecfa:	185b      	adds	r3, r3, r1
 801ecfc:	930d      	str	r3, [sp, #52]	@ 0x34
 801ecfe:	9b08      	ldr	r3, [sp, #32]
 801ed00:	3001      	adds	r0, #1
 801ed02:	3301      	adds	r3, #1
 801ed04:	9308      	str	r3, [sp, #32]
 801ed06:	901d      	str	r0, [sp, #116]	@ 0x74
 801ed08:	e7c3      	b.n	801ec92 <_strtod_l+0x14e>
 801ed0a:	4355      	muls	r5, r2
 801ed0c:	195d      	adds	r5, r3, r5
 801ed0e:	e7f6      	b.n	801ecfe <_strtod_l+0x1ba>
 801ed10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ed12:	1c5a      	adds	r2, r3, #1
 801ed14:	921d      	str	r2, [sp, #116]	@ 0x74
 801ed16:	9a08      	ldr	r2, [sp, #32]
 801ed18:	785b      	ldrb	r3, [r3, #1]
 801ed1a:	2a00      	cmp	r2, #0
 801ed1c:	d03a      	beq.n	801ed94 <_strtod_l+0x250>
 801ed1e:	900e      	str	r0, [sp, #56]	@ 0x38
 801ed20:	9206      	str	r2, [sp, #24]
 801ed22:	001a      	movs	r2, r3
 801ed24:	3a30      	subs	r2, #48	@ 0x30
 801ed26:	2a09      	cmp	r2, #9
 801ed28:	d912      	bls.n	801ed50 <_strtod_l+0x20c>
 801ed2a:	2201      	movs	r2, #1
 801ed2c:	4694      	mov	ip, r2
 801ed2e:	e7c3      	b.n	801ecb8 <_strtod_l+0x174>
 801ed30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ed32:	3001      	adds	r0, #1
 801ed34:	1c5a      	adds	r2, r3, #1
 801ed36:	921d      	str	r2, [sp, #116]	@ 0x74
 801ed38:	785b      	ldrb	r3, [r3, #1]
 801ed3a:	2b30      	cmp	r3, #48	@ 0x30
 801ed3c:	d0f8      	beq.n	801ed30 <_strtod_l+0x1ec>
 801ed3e:	001a      	movs	r2, r3
 801ed40:	3a31      	subs	r2, #49	@ 0x31
 801ed42:	2a08      	cmp	r2, #8
 801ed44:	d83b      	bhi.n	801edbe <_strtod_l+0x27a>
 801ed46:	900e      	str	r0, [sp, #56]	@ 0x38
 801ed48:	2000      	movs	r0, #0
 801ed4a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ed4c:	9006      	str	r0, [sp, #24]
 801ed4e:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ed50:	001a      	movs	r2, r3
 801ed52:	1c41      	adds	r1, r0, #1
 801ed54:	3a30      	subs	r2, #48	@ 0x30
 801ed56:	2b30      	cmp	r3, #48	@ 0x30
 801ed58:	d016      	beq.n	801ed88 <_strtod_l+0x244>
 801ed5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed5c:	185b      	adds	r3, r3, r1
 801ed5e:	930e      	str	r3, [sp, #56]	@ 0x38
 801ed60:	9b06      	ldr	r3, [sp, #24]
 801ed62:	210a      	movs	r1, #10
 801ed64:	469c      	mov	ip, r3
 801ed66:	4484      	add	ip, r0
 801ed68:	459c      	cmp	ip, r3
 801ed6a:	d115      	bne.n	801ed98 <_strtod_l+0x254>
 801ed6c:	9906      	ldr	r1, [sp, #24]
 801ed6e:	9b06      	ldr	r3, [sp, #24]
 801ed70:	3101      	adds	r1, #1
 801ed72:	1809      	adds	r1, r1, r0
 801ed74:	181b      	adds	r3, r3, r0
 801ed76:	9106      	str	r1, [sp, #24]
 801ed78:	2b08      	cmp	r3, #8
 801ed7a:	dc19      	bgt.n	801edb0 <_strtod_l+0x26c>
 801ed7c:	230a      	movs	r3, #10
 801ed7e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ed80:	434b      	muls	r3, r1
 801ed82:	2100      	movs	r1, #0
 801ed84:	18d3      	adds	r3, r2, r3
 801ed86:	930d      	str	r3, [sp, #52]	@ 0x34
 801ed88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ed8a:	0008      	movs	r0, r1
 801ed8c:	1c5a      	adds	r2, r3, #1
 801ed8e:	921d      	str	r2, [sp, #116]	@ 0x74
 801ed90:	785b      	ldrb	r3, [r3, #1]
 801ed92:	e7c6      	b.n	801ed22 <_strtod_l+0x1de>
 801ed94:	9808      	ldr	r0, [sp, #32]
 801ed96:	e7d0      	b.n	801ed3a <_strtod_l+0x1f6>
 801ed98:	1c5c      	adds	r4, r3, #1
 801ed9a:	2b08      	cmp	r3, #8
 801ed9c:	dc04      	bgt.n	801eda8 <_strtod_l+0x264>
 801ed9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eda0:	434b      	muls	r3, r1
 801eda2:	930d      	str	r3, [sp, #52]	@ 0x34
 801eda4:	0023      	movs	r3, r4
 801eda6:	e7df      	b.n	801ed68 <_strtod_l+0x224>
 801eda8:	2c10      	cmp	r4, #16
 801edaa:	dcfb      	bgt.n	801eda4 <_strtod_l+0x260>
 801edac:	434d      	muls	r5, r1
 801edae:	e7f9      	b.n	801eda4 <_strtod_l+0x260>
 801edb0:	2100      	movs	r1, #0
 801edb2:	2b0f      	cmp	r3, #15
 801edb4:	dce8      	bgt.n	801ed88 <_strtod_l+0x244>
 801edb6:	230a      	movs	r3, #10
 801edb8:	435d      	muls	r5, r3
 801edba:	1955      	adds	r5, r2, r5
 801edbc:	e7e4      	b.n	801ed88 <_strtod_l+0x244>
 801edbe:	2200      	movs	r2, #0
 801edc0:	920e      	str	r2, [sp, #56]	@ 0x38
 801edc2:	9206      	str	r2, [sp, #24]
 801edc4:	3201      	adds	r2, #1
 801edc6:	e7b1      	b.n	801ed2c <_strtod_l+0x1e8>
 801edc8:	2400      	movs	r4, #0
 801edca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edcc:	3302      	adds	r3, #2
 801edce:	931d      	str	r3, [sp, #116]	@ 0x74
 801edd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edd2:	789b      	ldrb	r3, [r3, #2]
 801edd4:	001a      	movs	r2, r3
 801edd6:	3a30      	subs	r2, #48	@ 0x30
 801edd8:	2a09      	cmp	r2, #9
 801edda:	d913      	bls.n	801ee04 <_strtod_l+0x2c0>
 801eddc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801edde:	921d      	str	r2, [sp, #116]	@ 0x74
 801ede0:	2200      	movs	r2, #0
 801ede2:	e032      	b.n	801ee4a <_strtod_l+0x306>
 801ede4:	08026280 	.word	0x08026280
 801ede8:	7ff00000 	.word	0x7ff00000
 801edec:	ffefffff 	.word	0xffefffff
 801edf0:	00000433 	.word	0x00000433
 801edf4:	7fffffff 	.word	0x7fffffff
 801edf8:	08026268 	.word	0x08026268
 801edfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801edfe:	1c5a      	adds	r2, r3, #1
 801ee00:	921d      	str	r2, [sp, #116]	@ 0x74
 801ee02:	785b      	ldrb	r3, [r3, #1]
 801ee04:	2b30      	cmp	r3, #48	@ 0x30
 801ee06:	d0f9      	beq.n	801edfc <_strtod_l+0x2b8>
 801ee08:	2200      	movs	r2, #0
 801ee0a:	9207      	str	r2, [sp, #28]
 801ee0c:	001a      	movs	r2, r3
 801ee0e:	3a31      	subs	r2, #49	@ 0x31
 801ee10:	2a08      	cmp	r2, #8
 801ee12:	d81b      	bhi.n	801ee4c <_strtod_l+0x308>
 801ee14:	3b30      	subs	r3, #48	@ 0x30
 801ee16:	9310      	str	r3, [sp, #64]	@ 0x40
 801ee18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee1a:	9307      	str	r3, [sp, #28]
 801ee1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee1e:	1c59      	adds	r1, r3, #1
 801ee20:	911d      	str	r1, [sp, #116]	@ 0x74
 801ee22:	785b      	ldrb	r3, [r3, #1]
 801ee24:	001a      	movs	r2, r3
 801ee26:	3a30      	subs	r2, #48	@ 0x30
 801ee28:	2a09      	cmp	r2, #9
 801ee2a:	d93a      	bls.n	801eea2 <_strtod_l+0x35e>
 801ee2c:	9a07      	ldr	r2, [sp, #28]
 801ee2e:	1a8a      	subs	r2, r1, r2
 801ee30:	49b4      	ldr	r1, [pc, #720]	@ (801f104 <_strtod_l+0x5c0>)
 801ee32:	9107      	str	r1, [sp, #28]
 801ee34:	2a08      	cmp	r2, #8
 801ee36:	dc04      	bgt.n	801ee42 <_strtod_l+0x2fe>
 801ee38:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ee3a:	9207      	str	r2, [sp, #28]
 801ee3c:	428a      	cmp	r2, r1
 801ee3e:	dd00      	ble.n	801ee42 <_strtod_l+0x2fe>
 801ee40:	9107      	str	r1, [sp, #28]
 801ee42:	2c00      	cmp	r4, #0
 801ee44:	d002      	beq.n	801ee4c <_strtod_l+0x308>
 801ee46:	9a07      	ldr	r2, [sp, #28]
 801ee48:	4252      	negs	r2, r2
 801ee4a:	9207      	str	r2, [sp, #28]
 801ee4c:	9a06      	ldr	r2, [sp, #24]
 801ee4e:	2a00      	cmp	r2, #0
 801ee50:	d14d      	bne.n	801eeee <_strtod_l+0x3aa>
 801ee52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee54:	4310      	orrs	r0, r2
 801ee56:	d000      	beq.n	801ee5a <_strtod_l+0x316>
 801ee58:	e6af      	b.n	801ebba <_strtod_l+0x76>
 801ee5a:	4662      	mov	r2, ip
 801ee5c:	2a00      	cmp	r2, #0
 801ee5e:	d000      	beq.n	801ee62 <_strtod_l+0x31e>
 801ee60:	e6c7      	b.n	801ebf2 <_strtod_l+0xae>
 801ee62:	2b69      	cmp	r3, #105	@ 0x69
 801ee64:	d027      	beq.n	801eeb6 <_strtod_l+0x372>
 801ee66:	dc23      	bgt.n	801eeb0 <_strtod_l+0x36c>
 801ee68:	2b49      	cmp	r3, #73	@ 0x49
 801ee6a:	d024      	beq.n	801eeb6 <_strtod_l+0x372>
 801ee6c:	2b4e      	cmp	r3, #78	@ 0x4e
 801ee6e:	d000      	beq.n	801ee72 <_strtod_l+0x32e>
 801ee70:	e6bf      	b.n	801ebf2 <_strtod_l+0xae>
 801ee72:	49a5      	ldr	r1, [pc, #660]	@ (801f108 <_strtod_l+0x5c4>)
 801ee74:	a81d      	add	r0, sp, #116	@ 0x74
 801ee76:	f002 fe2b 	bl	8021ad0 <__match>
 801ee7a:	2800      	cmp	r0, #0
 801ee7c:	d100      	bne.n	801ee80 <_strtod_l+0x33c>
 801ee7e:	e6b8      	b.n	801ebf2 <_strtod_l+0xae>
 801ee80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee82:	781b      	ldrb	r3, [r3, #0]
 801ee84:	2b28      	cmp	r3, #40	@ 0x28
 801ee86:	d12c      	bne.n	801eee2 <_strtod_l+0x39e>
 801ee88:	49a0      	ldr	r1, [pc, #640]	@ (801f10c <_strtod_l+0x5c8>)
 801ee8a:	aa20      	add	r2, sp, #128	@ 0x80
 801ee8c:	a81d      	add	r0, sp, #116	@ 0x74
 801ee8e:	f002 fe33 	bl	8021af8 <__hexnan>
 801ee92:	2805      	cmp	r0, #5
 801ee94:	d125      	bne.n	801eee2 <_strtod_l+0x39e>
 801ee96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ee98:	4a9d      	ldr	r2, [pc, #628]	@ (801f110 <_strtod_l+0x5cc>)
 801ee9a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ee9c:	431a      	orrs	r2, r3
 801ee9e:	0017      	movs	r7, r2
 801eea0:	e68b      	b.n	801ebba <_strtod_l+0x76>
 801eea2:	220a      	movs	r2, #10
 801eea4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801eea6:	434a      	muls	r2, r1
 801eea8:	18d2      	adds	r2, r2, r3
 801eeaa:	3a30      	subs	r2, #48	@ 0x30
 801eeac:	9210      	str	r2, [sp, #64]	@ 0x40
 801eeae:	e7b5      	b.n	801ee1c <_strtod_l+0x2d8>
 801eeb0:	2b6e      	cmp	r3, #110	@ 0x6e
 801eeb2:	d0de      	beq.n	801ee72 <_strtod_l+0x32e>
 801eeb4:	e69d      	b.n	801ebf2 <_strtod_l+0xae>
 801eeb6:	4997      	ldr	r1, [pc, #604]	@ (801f114 <_strtod_l+0x5d0>)
 801eeb8:	a81d      	add	r0, sp, #116	@ 0x74
 801eeba:	f002 fe09 	bl	8021ad0 <__match>
 801eebe:	2800      	cmp	r0, #0
 801eec0:	d100      	bne.n	801eec4 <_strtod_l+0x380>
 801eec2:	e696      	b.n	801ebf2 <_strtod_l+0xae>
 801eec4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eec6:	4994      	ldr	r1, [pc, #592]	@ (801f118 <_strtod_l+0x5d4>)
 801eec8:	3b01      	subs	r3, #1
 801eeca:	a81d      	add	r0, sp, #116	@ 0x74
 801eecc:	931d      	str	r3, [sp, #116]	@ 0x74
 801eece:	f002 fdff 	bl	8021ad0 <__match>
 801eed2:	2800      	cmp	r0, #0
 801eed4:	d102      	bne.n	801eedc <_strtod_l+0x398>
 801eed6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eed8:	3301      	adds	r3, #1
 801eeda:	931d      	str	r3, [sp, #116]	@ 0x74
 801eedc:	2600      	movs	r6, #0
 801eede:	4f8c      	ldr	r7, [pc, #560]	@ (801f110 <_strtod_l+0x5cc>)
 801eee0:	e66b      	b.n	801ebba <_strtod_l+0x76>
 801eee2:	488e      	ldr	r0, [pc, #568]	@ (801f11c <_strtod_l+0x5d8>)
 801eee4:	f001 fc84 	bl	80207f0 <nan>
 801eee8:	0006      	movs	r6, r0
 801eeea:	000f      	movs	r7, r1
 801eeec:	e665      	b.n	801ebba <_strtod_l+0x76>
 801eeee:	9b07      	ldr	r3, [sp, #28]
 801eef0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eef2:	1a9b      	subs	r3, r3, r2
 801eef4:	930c      	str	r3, [sp, #48]	@ 0x30
 801eef6:	9b08      	ldr	r3, [sp, #32]
 801eef8:	2b00      	cmp	r3, #0
 801eefa:	d101      	bne.n	801ef00 <_strtod_l+0x3bc>
 801eefc:	9b06      	ldr	r3, [sp, #24]
 801eefe:	9308      	str	r3, [sp, #32]
 801ef00:	9c06      	ldr	r4, [sp, #24]
 801ef02:	2c10      	cmp	r4, #16
 801ef04:	dd00      	ble.n	801ef08 <_strtod_l+0x3c4>
 801ef06:	2410      	movs	r4, #16
 801ef08:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ef0a:	f7e4 fa87 	bl	800341c <__aeabi_ui2d>
 801ef0e:	9b06      	ldr	r3, [sp, #24]
 801ef10:	0006      	movs	r6, r0
 801ef12:	000f      	movs	r7, r1
 801ef14:	2b09      	cmp	r3, #9
 801ef16:	dc13      	bgt.n	801ef40 <_strtod_l+0x3fc>
 801ef18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d100      	bne.n	801ef20 <_strtod_l+0x3dc>
 801ef1e:	e64c      	b.n	801ebba <_strtod_l+0x76>
 801ef20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef22:	2b00      	cmp	r3, #0
 801ef24:	dc00      	bgt.n	801ef28 <_strtod_l+0x3e4>
 801ef26:	e07e      	b.n	801f026 <_strtod_l+0x4e2>
 801ef28:	2b16      	cmp	r3, #22
 801ef2a:	dc63      	bgt.n	801eff4 <_strtod_l+0x4b0>
 801ef2c:	497c      	ldr	r1, [pc, #496]	@ (801f120 <_strtod_l+0x5dc>)
 801ef2e:	00db      	lsls	r3, r3, #3
 801ef30:	18c9      	adds	r1, r1, r3
 801ef32:	0032      	movs	r2, r6
 801ef34:	6808      	ldr	r0, [r1, #0]
 801ef36:	6849      	ldr	r1, [r1, #4]
 801ef38:	003b      	movs	r3, r7
 801ef3a:	f7e3 fb7f 	bl	800263c <__aeabi_dmul>
 801ef3e:	e7d3      	b.n	801eee8 <_strtod_l+0x3a4>
 801ef40:	0022      	movs	r2, r4
 801ef42:	4b77      	ldr	r3, [pc, #476]	@ (801f120 <_strtod_l+0x5dc>)
 801ef44:	3a09      	subs	r2, #9
 801ef46:	00d2      	lsls	r2, r2, #3
 801ef48:	189b      	adds	r3, r3, r2
 801ef4a:	681a      	ldr	r2, [r3, #0]
 801ef4c:	685b      	ldr	r3, [r3, #4]
 801ef4e:	f7e3 fb75 	bl	800263c <__aeabi_dmul>
 801ef52:	0006      	movs	r6, r0
 801ef54:	0028      	movs	r0, r5
 801ef56:	000f      	movs	r7, r1
 801ef58:	f7e4 fa60 	bl	800341c <__aeabi_ui2d>
 801ef5c:	000b      	movs	r3, r1
 801ef5e:	0002      	movs	r2, r0
 801ef60:	0039      	movs	r1, r7
 801ef62:	0030      	movs	r0, r6
 801ef64:	f7e2 fbc2 	bl	80016ec <__aeabi_dadd>
 801ef68:	9b06      	ldr	r3, [sp, #24]
 801ef6a:	0006      	movs	r6, r0
 801ef6c:	000f      	movs	r7, r1
 801ef6e:	2b0f      	cmp	r3, #15
 801ef70:	ddd2      	ble.n	801ef18 <_strtod_l+0x3d4>
 801ef72:	9b06      	ldr	r3, [sp, #24]
 801ef74:	1b1c      	subs	r4, r3, r4
 801ef76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef78:	18e4      	adds	r4, r4, r3
 801ef7a:	2c00      	cmp	r4, #0
 801ef7c:	dc00      	bgt.n	801ef80 <_strtod_l+0x43c>
 801ef7e:	e09b      	b.n	801f0b8 <_strtod_l+0x574>
 801ef80:	220f      	movs	r2, #15
 801ef82:	0023      	movs	r3, r4
 801ef84:	4013      	ands	r3, r2
 801ef86:	4214      	tst	r4, r2
 801ef88:	d00a      	beq.n	801efa0 <_strtod_l+0x45c>
 801ef8a:	4965      	ldr	r1, [pc, #404]	@ (801f120 <_strtod_l+0x5dc>)
 801ef8c:	00db      	lsls	r3, r3, #3
 801ef8e:	18c9      	adds	r1, r1, r3
 801ef90:	0032      	movs	r2, r6
 801ef92:	6808      	ldr	r0, [r1, #0]
 801ef94:	6849      	ldr	r1, [r1, #4]
 801ef96:	003b      	movs	r3, r7
 801ef98:	f7e3 fb50 	bl	800263c <__aeabi_dmul>
 801ef9c:	0006      	movs	r6, r0
 801ef9e:	000f      	movs	r7, r1
 801efa0:	230f      	movs	r3, #15
 801efa2:	439c      	bics	r4, r3
 801efa4:	d073      	beq.n	801f08e <_strtod_l+0x54a>
 801efa6:	3326      	adds	r3, #38	@ 0x26
 801efa8:	33ff      	adds	r3, #255	@ 0xff
 801efaa:	429c      	cmp	r4, r3
 801efac:	dd4b      	ble.n	801f046 <_strtod_l+0x502>
 801efae:	2300      	movs	r3, #0
 801efb0:	9306      	str	r3, [sp, #24]
 801efb2:	9307      	str	r3, [sp, #28]
 801efb4:	930d      	str	r3, [sp, #52]	@ 0x34
 801efb6:	9308      	str	r3, [sp, #32]
 801efb8:	2322      	movs	r3, #34	@ 0x22
 801efba:	2600      	movs	r6, #0
 801efbc:	9a05      	ldr	r2, [sp, #20]
 801efbe:	4f54      	ldr	r7, [pc, #336]	@ (801f110 <_strtod_l+0x5cc>)
 801efc0:	6013      	str	r3, [r2, #0]
 801efc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801efc4:	42b3      	cmp	r3, r6
 801efc6:	d100      	bne.n	801efca <_strtod_l+0x486>
 801efc8:	e5f7      	b.n	801ebba <_strtod_l+0x76>
 801efca:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801efcc:	9805      	ldr	r0, [sp, #20]
 801efce:	f002 ff4d 	bl	8021e6c <_Bfree>
 801efd2:	9908      	ldr	r1, [sp, #32]
 801efd4:	9805      	ldr	r0, [sp, #20]
 801efd6:	f002 ff49 	bl	8021e6c <_Bfree>
 801efda:	9907      	ldr	r1, [sp, #28]
 801efdc:	9805      	ldr	r0, [sp, #20]
 801efde:	f002 ff45 	bl	8021e6c <_Bfree>
 801efe2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801efe4:	9805      	ldr	r0, [sp, #20]
 801efe6:	f002 ff41 	bl	8021e6c <_Bfree>
 801efea:	9906      	ldr	r1, [sp, #24]
 801efec:	9805      	ldr	r0, [sp, #20]
 801efee:	f002 ff3d 	bl	8021e6c <_Bfree>
 801eff2:	e5e2      	b.n	801ebba <_strtod_l+0x76>
 801eff4:	2325      	movs	r3, #37	@ 0x25
 801eff6:	9a06      	ldr	r2, [sp, #24]
 801eff8:	1a9b      	subs	r3, r3, r2
 801effa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801effc:	4293      	cmp	r3, r2
 801effe:	dbb8      	blt.n	801ef72 <_strtod_l+0x42e>
 801f000:	240f      	movs	r4, #15
 801f002:	9b06      	ldr	r3, [sp, #24]
 801f004:	4d46      	ldr	r5, [pc, #280]	@ (801f120 <_strtod_l+0x5dc>)
 801f006:	1ae4      	subs	r4, r4, r3
 801f008:	00e1      	lsls	r1, r4, #3
 801f00a:	1869      	adds	r1, r5, r1
 801f00c:	0032      	movs	r2, r6
 801f00e:	6808      	ldr	r0, [r1, #0]
 801f010:	6849      	ldr	r1, [r1, #4]
 801f012:	003b      	movs	r3, r7
 801f014:	f7e3 fb12 	bl	800263c <__aeabi_dmul>
 801f018:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f01a:	1b1c      	subs	r4, r3, r4
 801f01c:	00e4      	lsls	r4, r4, #3
 801f01e:	192d      	adds	r5, r5, r4
 801f020:	682a      	ldr	r2, [r5, #0]
 801f022:	686b      	ldr	r3, [r5, #4]
 801f024:	e789      	b.n	801ef3a <_strtod_l+0x3f6>
 801f026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f028:	3316      	adds	r3, #22
 801f02a:	dba2      	blt.n	801ef72 <_strtod_l+0x42e>
 801f02c:	9907      	ldr	r1, [sp, #28]
 801f02e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f030:	4b3b      	ldr	r3, [pc, #236]	@ (801f120 <_strtod_l+0x5dc>)
 801f032:	1a52      	subs	r2, r2, r1
 801f034:	00d2      	lsls	r2, r2, #3
 801f036:	189b      	adds	r3, r3, r2
 801f038:	0030      	movs	r0, r6
 801f03a:	681a      	ldr	r2, [r3, #0]
 801f03c:	685b      	ldr	r3, [r3, #4]
 801f03e:	0039      	movs	r1, r7
 801f040:	f7e2 feb8 	bl	8001db4 <__aeabi_ddiv>
 801f044:	e750      	b.n	801eee8 <_strtod_l+0x3a4>
 801f046:	2300      	movs	r3, #0
 801f048:	0030      	movs	r0, r6
 801f04a:	0039      	movs	r1, r7
 801f04c:	4d35      	ldr	r5, [pc, #212]	@ (801f124 <_strtod_l+0x5e0>)
 801f04e:	1124      	asrs	r4, r4, #4
 801f050:	9309      	str	r3, [sp, #36]	@ 0x24
 801f052:	2c01      	cmp	r4, #1
 801f054:	dc1e      	bgt.n	801f094 <_strtod_l+0x550>
 801f056:	2b00      	cmp	r3, #0
 801f058:	d001      	beq.n	801f05e <_strtod_l+0x51a>
 801f05a:	0006      	movs	r6, r0
 801f05c:	000f      	movs	r7, r1
 801f05e:	4b32      	ldr	r3, [pc, #200]	@ (801f128 <_strtod_l+0x5e4>)
 801f060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f062:	18ff      	adds	r7, r7, r3
 801f064:	4b2f      	ldr	r3, [pc, #188]	@ (801f124 <_strtod_l+0x5e0>)
 801f066:	00d5      	lsls	r5, r2, #3
 801f068:	195d      	adds	r5, r3, r5
 801f06a:	0032      	movs	r2, r6
 801f06c:	6828      	ldr	r0, [r5, #0]
 801f06e:	6869      	ldr	r1, [r5, #4]
 801f070:	003b      	movs	r3, r7
 801f072:	f7e3 fae3 	bl	800263c <__aeabi_dmul>
 801f076:	4b26      	ldr	r3, [pc, #152]	@ (801f110 <_strtod_l+0x5cc>)
 801f078:	4a2c      	ldr	r2, [pc, #176]	@ (801f12c <_strtod_l+0x5e8>)
 801f07a:	0006      	movs	r6, r0
 801f07c:	400b      	ands	r3, r1
 801f07e:	4293      	cmp	r3, r2
 801f080:	d895      	bhi.n	801efae <_strtod_l+0x46a>
 801f082:	4a2b      	ldr	r2, [pc, #172]	@ (801f130 <_strtod_l+0x5ec>)
 801f084:	4293      	cmp	r3, r2
 801f086:	d913      	bls.n	801f0b0 <_strtod_l+0x56c>
 801f088:	2601      	movs	r6, #1
 801f08a:	4f2a      	ldr	r7, [pc, #168]	@ (801f134 <_strtod_l+0x5f0>)
 801f08c:	4276      	negs	r6, r6
 801f08e:	2300      	movs	r3, #0
 801f090:	9309      	str	r3, [sp, #36]	@ 0x24
 801f092:	e086      	b.n	801f1a2 <_strtod_l+0x65e>
 801f094:	2201      	movs	r2, #1
 801f096:	4214      	tst	r4, r2
 801f098:	d004      	beq.n	801f0a4 <_strtod_l+0x560>
 801f09a:	682a      	ldr	r2, [r5, #0]
 801f09c:	686b      	ldr	r3, [r5, #4]
 801f09e:	f7e3 facd 	bl	800263c <__aeabi_dmul>
 801f0a2:	2301      	movs	r3, #1
 801f0a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f0a6:	1064      	asrs	r4, r4, #1
 801f0a8:	3201      	adds	r2, #1
 801f0aa:	9209      	str	r2, [sp, #36]	@ 0x24
 801f0ac:	3508      	adds	r5, #8
 801f0ae:	e7d0      	b.n	801f052 <_strtod_l+0x50e>
 801f0b0:	23d4      	movs	r3, #212	@ 0xd4
 801f0b2:	049b      	lsls	r3, r3, #18
 801f0b4:	18cf      	adds	r7, r1, r3
 801f0b6:	e7ea      	b.n	801f08e <_strtod_l+0x54a>
 801f0b8:	2c00      	cmp	r4, #0
 801f0ba:	d0e8      	beq.n	801f08e <_strtod_l+0x54a>
 801f0bc:	4264      	negs	r4, r4
 801f0be:	230f      	movs	r3, #15
 801f0c0:	0022      	movs	r2, r4
 801f0c2:	401a      	ands	r2, r3
 801f0c4:	421c      	tst	r4, r3
 801f0c6:	d00a      	beq.n	801f0de <_strtod_l+0x59a>
 801f0c8:	4b15      	ldr	r3, [pc, #84]	@ (801f120 <_strtod_l+0x5dc>)
 801f0ca:	00d2      	lsls	r2, r2, #3
 801f0cc:	189b      	adds	r3, r3, r2
 801f0ce:	0030      	movs	r0, r6
 801f0d0:	681a      	ldr	r2, [r3, #0]
 801f0d2:	685b      	ldr	r3, [r3, #4]
 801f0d4:	0039      	movs	r1, r7
 801f0d6:	f7e2 fe6d 	bl	8001db4 <__aeabi_ddiv>
 801f0da:	0006      	movs	r6, r0
 801f0dc:	000f      	movs	r7, r1
 801f0de:	1124      	asrs	r4, r4, #4
 801f0e0:	d0d5      	beq.n	801f08e <_strtod_l+0x54a>
 801f0e2:	2c1f      	cmp	r4, #31
 801f0e4:	dd28      	ble.n	801f138 <_strtod_l+0x5f4>
 801f0e6:	2300      	movs	r3, #0
 801f0e8:	9306      	str	r3, [sp, #24]
 801f0ea:	9307      	str	r3, [sp, #28]
 801f0ec:	930d      	str	r3, [sp, #52]	@ 0x34
 801f0ee:	9308      	str	r3, [sp, #32]
 801f0f0:	2322      	movs	r3, #34	@ 0x22
 801f0f2:	9a05      	ldr	r2, [sp, #20]
 801f0f4:	2600      	movs	r6, #0
 801f0f6:	6013      	str	r3, [r2, #0]
 801f0f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f0fa:	2700      	movs	r7, #0
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	d000      	beq.n	801f102 <_strtod_l+0x5be>
 801f100:	e763      	b.n	801efca <_strtod_l+0x486>
 801f102:	e55a      	b.n	801ebba <_strtod_l+0x76>
 801f104:	00004e1f 	.word	0x00004e1f
 801f108:	080263ce 	.word	0x080263ce
 801f10c:	0802626c 	.word	0x0802626c
 801f110:	7ff00000 	.word	0x7ff00000
 801f114:	080263c6 	.word	0x080263c6
 801f118:	08026400 	.word	0x08026400
 801f11c:	0802668c 	.word	0x0802668c
 801f120:	08026578 	.word	0x08026578
 801f124:	08026550 	.word	0x08026550
 801f128:	fcb00000 	.word	0xfcb00000
 801f12c:	7ca00000 	.word	0x7ca00000
 801f130:	7c900000 	.word	0x7c900000
 801f134:	7fefffff 	.word	0x7fefffff
 801f138:	2310      	movs	r3, #16
 801f13a:	0022      	movs	r2, r4
 801f13c:	401a      	ands	r2, r3
 801f13e:	9209      	str	r2, [sp, #36]	@ 0x24
 801f140:	421c      	tst	r4, r3
 801f142:	d001      	beq.n	801f148 <_strtod_l+0x604>
 801f144:	335a      	adds	r3, #90	@ 0x5a
 801f146:	9309      	str	r3, [sp, #36]	@ 0x24
 801f148:	0030      	movs	r0, r6
 801f14a:	0039      	movs	r1, r7
 801f14c:	2300      	movs	r3, #0
 801f14e:	4dbf      	ldr	r5, [pc, #764]	@ (801f44c <_strtod_l+0x908>)
 801f150:	2201      	movs	r2, #1
 801f152:	4214      	tst	r4, r2
 801f154:	d004      	beq.n	801f160 <_strtod_l+0x61c>
 801f156:	682a      	ldr	r2, [r5, #0]
 801f158:	686b      	ldr	r3, [r5, #4]
 801f15a:	f7e3 fa6f 	bl	800263c <__aeabi_dmul>
 801f15e:	2301      	movs	r3, #1
 801f160:	1064      	asrs	r4, r4, #1
 801f162:	3508      	adds	r5, #8
 801f164:	2c00      	cmp	r4, #0
 801f166:	d1f3      	bne.n	801f150 <_strtod_l+0x60c>
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d001      	beq.n	801f170 <_strtod_l+0x62c>
 801f16c:	0006      	movs	r6, r0
 801f16e:	000f      	movs	r7, r1
 801f170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f172:	2b00      	cmp	r3, #0
 801f174:	d00d      	beq.n	801f192 <_strtod_l+0x64e>
 801f176:	236b      	movs	r3, #107	@ 0x6b
 801f178:	007a      	lsls	r2, r7, #1
 801f17a:	0d52      	lsrs	r2, r2, #21
 801f17c:	0039      	movs	r1, r7
 801f17e:	1a9b      	subs	r3, r3, r2
 801f180:	2b00      	cmp	r3, #0
 801f182:	dd06      	ble.n	801f192 <_strtod_l+0x64e>
 801f184:	2b1f      	cmp	r3, #31
 801f186:	dd5a      	ble.n	801f23e <_strtod_l+0x6fa>
 801f188:	2600      	movs	r6, #0
 801f18a:	2b34      	cmp	r3, #52	@ 0x34
 801f18c:	dd50      	ble.n	801f230 <_strtod_l+0x6ec>
 801f18e:	27dc      	movs	r7, #220	@ 0xdc
 801f190:	04bf      	lsls	r7, r7, #18
 801f192:	2200      	movs	r2, #0
 801f194:	2300      	movs	r3, #0
 801f196:	0030      	movs	r0, r6
 801f198:	0039      	movs	r1, r7
 801f19a:	f7e1 f989 	bl	80004b0 <__aeabi_dcmpeq>
 801f19e:	2800      	cmp	r0, #0
 801f1a0:	d1a1      	bne.n	801f0e6 <_strtod_l+0x5a2>
 801f1a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f1a4:	9a08      	ldr	r2, [sp, #32]
 801f1a6:	9300      	str	r3, [sp, #0]
 801f1a8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f1aa:	9b06      	ldr	r3, [sp, #24]
 801f1ac:	9805      	ldr	r0, [sp, #20]
 801f1ae:	f002 fec5 	bl	8021f3c <__s2b>
 801f1b2:	900d      	str	r0, [sp, #52]	@ 0x34
 801f1b4:	2800      	cmp	r0, #0
 801f1b6:	d100      	bne.n	801f1ba <_strtod_l+0x676>
 801f1b8:	e6f9      	b.n	801efae <_strtod_l+0x46a>
 801f1ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f1bc:	9907      	ldr	r1, [sp, #28]
 801f1be:	17da      	asrs	r2, r3, #31
 801f1c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f1c2:	1a5b      	subs	r3, r3, r1
 801f1c4:	401a      	ands	r2, r3
 801f1c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f1c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801f1ca:	43db      	mvns	r3, r3
 801f1cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f1ce:	17db      	asrs	r3, r3, #31
 801f1d0:	401a      	ands	r2, r3
 801f1d2:	2300      	movs	r3, #0
 801f1d4:	921a      	str	r2, [sp, #104]	@ 0x68
 801f1d6:	9306      	str	r3, [sp, #24]
 801f1d8:	9307      	str	r3, [sp, #28]
 801f1da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f1dc:	9805      	ldr	r0, [sp, #20]
 801f1de:	6859      	ldr	r1, [r3, #4]
 801f1e0:	f002 fe00 	bl	8021de4 <_Balloc>
 801f1e4:	9008      	str	r0, [sp, #32]
 801f1e6:	2800      	cmp	r0, #0
 801f1e8:	d100      	bne.n	801f1ec <_strtod_l+0x6a8>
 801f1ea:	e6e5      	b.n	801efb8 <_strtod_l+0x474>
 801f1ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f1ee:	300c      	adds	r0, #12
 801f1f0:	0019      	movs	r1, r3
 801f1f2:	691a      	ldr	r2, [r3, #16]
 801f1f4:	310c      	adds	r1, #12
 801f1f6:	3202      	adds	r2, #2
 801f1f8:	0092      	lsls	r2, r2, #2
 801f1fa:	f001 faef 	bl	80207dc <memcpy>
 801f1fe:	ab20      	add	r3, sp, #128	@ 0x80
 801f200:	9301      	str	r3, [sp, #4]
 801f202:	ab1f      	add	r3, sp, #124	@ 0x7c
 801f204:	9300      	str	r3, [sp, #0]
 801f206:	0032      	movs	r2, r6
 801f208:	003b      	movs	r3, r7
 801f20a:	9805      	ldr	r0, [sp, #20]
 801f20c:	9610      	str	r6, [sp, #64]	@ 0x40
 801f20e:	9711      	str	r7, [sp, #68]	@ 0x44
 801f210:	f003 f9e4 	bl	80225dc <__d2b>
 801f214:	901e      	str	r0, [sp, #120]	@ 0x78
 801f216:	2800      	cmp	r0, #0
 801f218:	d100      	bne.n	801f21c <_strtod_l+0x6d8>
 801f21a:	e6cd      	b.n	801efb8 <_strtod_l+0x474>
 801f21c:	2101      	movs	r1, #1
 801f21e:	9805      	ldr	r0, [sp, #20]
 801f220:	f002 ff28 	bl	8022074 <__i2b>
 801f224:	9007      	str	r0, [sp, #28]
 801f226:	2800      	cmp	r0, #0
 801f228:	d10e      	bne.n	801f248 <_strtod_l+0x704>
 801f22a:	2300      	movs	r3, #0
 801f22c:	9307      	str	r3, [sp, #28]
 801f22e:	e6c3      	b.n	801efb8 <_strtod_l+0x474>
 801f230:	234b      	movs	r3, #75	@ 0x4b
 801f232:	1a9a      	subs	r2, r3, r2
 801f234:	3b4c      	subs	r3, #76	@ 0x4c
 801f236:	4093      	lsls	r3, r2
 801f238:	4019      	ands	r1, r3
 801f23a:	000f      	movs	r7, r1
 801f23c:	e7a9      	b.n	801f192 <_strtod_l+0x64e>
 801f23e:	2201      	movs	r2, #1
 801f240:	4252      	negs	r2, r2
 801f242:	409a      	lsls	r2, r3
 801f244:	4016      	ands	r6, r2
 801f246:	e7a4      	b.n	801f192 <_strtod_l+0x64e>
 801f248:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f24a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f24c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801f24e:	1ad4      	subs	r4, r2, r3
 801f250:	2b00      	cmp	r3, #0
 801f252:	db01      	blt.n	801f258 <_strtod_l+0x714>
 801f254:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801f256:	195d      	adds	r5, r3, r5
 801f258:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f25a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f25c:	1a5b      	subs	r3, r3, r1
 801f25e:	2136      	movs	r1, #54	@ 0x36
 801f260:	189b      	adds	r3, r3, r2
 801f262:	1a8a      	subs	r2, r1, r2
 801f264:	497a      	ldr	r1, [pc, #488]	@ (801f450 <_strtod_l+0x90c>)
 801f266:	2001      	movs	r0, #1
 801f268:	468c      	mov	ip, r1
 801f26a:	2100      	movs	r1, #0
 801f26c:	3b01      	subs	r3, #1
 801f26e:	9116      	str	r1, [sp, #88]	@ 0x58
 801f270:	9014      	str	r0, [sp, #80]	@ 0x50
 801f272:	4563      	cmp	r3, ip
 801f274:	da06      	bge.n	801f284 <_strtod_l+0x740>
 801f276:	4661      	mov	r1, ip
 801f278:	1ac9      	subs	r1, r1, r3
 801f27a:	1a52      	subs	r2, r2, r1
 801f27c:	291f      	cmp	r1, #31
 801f27e:	dc3f      	bgt.n	801f300 <_strtod_l+0x7bc>
 801f280:	4088      	lsls	r0, r1
 801f282:	9014      	str	r0, [sp, #80]	@ 0x50
 801f284:	18ab      	adds	r3, r5, r2
 801f286:	930e      	str	r3, [sp, #56]	@ 0x38
 801f288:	18a4      	adds	r4, r4, r2
 801f28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f28c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f28e:	191c      	adds	r4, r3, r4
 801f290:	002b      	movs	r3, r5
 801f292:	4295      	cmp	r5, r2
 801f294:	dd00      	ble.n	801f298 <_strtod_l+0x754>
 801f296:	0013      	movs	r3, r2
 801f298:	42a3      	cmp	r3, r4
 801f29a:	dd00      	ble.n	801f29e <_strtod_l+0x75a>
 801f29c:	0023      	movs	r3, r4
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	dd04      	ble.n	801f2ac <_strtod_l+0x768>
 801f2a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f2a4:	1ae4      	subs	r4, r4, r3
 801f2a6:	1ad2      	subs	r2, r2, r3
 801f2a8:	920e      	str	r2, [sp, #56]	@ 0x38
 801f2aa:	1aed      	subs	r5, r5, r3
 801f2ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	dd16      	ble.n	801f2e0 <_strtod_l+0x79c>
 801f2b2:	001a      	movs	r2, r3
 801f2b4:	9907      	ldr	r1, [sp, #28]
 801f2b6:	9805      	ldr	r0, [sp, #20]
 801f2b8:	f002 ffa6 	bl	8022208 <__pow5mult>
 801f2bc:	9007      	str	r0, [sp, #28]
 801f2be:	2800      	cmp	r0, #0
 801f2c0:	d0b3      	beq.n	801f22a <_strtod_l+0x6e6>
 801f2c2:	0001      	movs	r1, r0
 801f2c4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f2c6:	9805      	ldr	r0, [sp, #20]
 801f2c8:	f002 feec 	bl	80220a4 <__multiply>
 801f2cc:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f2ce:	2800      	cmp	r0, #0
 801f2d0:	d100      	bne.n	801f2d4 <_strtod_l+0x790>
 801f2d2:	e671      	b.n	801efb8 <_strtod_l+0x474>
 801f2d4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f2d6:	9805      	ldr	r0, [sp, #20]
 801f2d8:	f002 fdc8 	bl	8021e6c <_Bfree>
 801f2dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f2de:	931e      	str	r3, [sp, #120]	@ 0x78
 801f2e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2e2:	2b00      	cmp	r3, #0
 801f2e4:	dc12      	bgt.n	801f30c <_strtod_l+0x7c8>
 801f2e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	dd18      	ble.n	801f31e <_strtod_l+0x7da>
 801f2ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f2ee:	9908      	ldr	r1, [sp, #32]
 801f2f0:	9805      	ldr	r0, [sp, #20]
 801f2f2:	f002 ff89 	bl	8022208 <__pow5mult>
 801f2f6:	9008      	str	r0, [sp, #32]
 801f2f8:	2800      	cmp	r0, #0
 801f2fa:	d110      	bne.n	801f31e <_strtod_l+0x7da>
 801f2fc:	2300      	movs	r3, #0
 801f2fe:	e65a      	b.n	801efb6 <_strtod_l+0x472>
 801f300:	4954      	ldr	r1, [pc, #336]	@ (801f454 <_strtod_l+0x910>)
 801f302:	1acb      	subs	r3, r1, r3
 801f304:	0001      	movs	r1, r0
 801f306:	4099      	lsls	r1, r3
 801f308:	9116      	str	r1, [sp, #88]	@ 0x58
 801f30a:	e7ba      	b.n	801f282 <_strtod_l+0x73e>
 801f30c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f30e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f310:	9805      	ldr	r0, [sp, #20]
 801f312:	f002 ffd5 	bl	80222c0 <__lshift>
 801f316:	901e      	str	r0, [sp, #120]	@ 0x78
 801f318:	2800      	cmp	r0, #0
 801f31a:	d1e4      	bne.n	801f2e6 <_strtod_l+0x7a2>
 801f31c:	e64c      	b.n	801efb8 <_strtod_l+0x474>
 801f31e:	2c00      	cmp	r4, #0
 801f320:	dd07      	ble.n	801f332 <_strtod_l+0x7ee>
 801f322:	0022      	movs	r2, r4
 801f324:	9908      	ldr	r1, [sp, #32]
 801f326:	9805      	ldr	r0, [sp, #20]
 801f328:	f002 ffca 	bl	80222c0 <__lshift>
 801f32c:	9008      	str	r0, [sp, #32]
 801f32e:	2800      	cmp	r0, #0
 801f330:	d0e4      	beq.n	801f2fc <_strtod_l+0x7b8>
 801f332:	2d00      	cmp	r5, #0
 801f334:	dd08      	ble.n	801f348 <_strtod_l+0x804>
 801f336:	002a      	movs	r2, r5
 801f338:	9907      	ldr	r1, [sp, #28]
 801f33a:	9805      	ldr	r0, [sp, #20]
 801f33c:	f002 ffc0 	bl	80222c0 <__lshift>
 801f340:	9007      	str	r0, [sp, #28]
 801f342:	2800      	cmp	r0, #0
 801f344:	d100      	bne.n	801f348 <_strtod_l+0x804>
 801f346:	e637      	b.n	801efb8 <_strtod_l+0x474>
 801f348:	9a08      	ldr	r2, [sp, #32]
 801f34a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f34c:	9805      	ldr	r0, [sp, #20]
 801f34e:	f003 f83f 	bl	80223d0 <__mdiff>
 801f352:	9006      	str	r0, [sp, #24]
 801f354:	2800      	cmp	r0, #0
 801f356:	d100      	bne.n	801f35a <_strtod_l+0x816>
 801f358:	e62e      	b.n	801efb8 <_strtod_l+0x474>
 801f35a:	68c3      	ldr	r3, [r0, #12]
 801f35c:	9907      	ldr	r1, [sp, #28]
 801f35e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f360:	2300      	movs	r3, #0
 801f362:	60c3      	str	r3, [r0, #12]
 801f364:	f003 f818 	bl	8022398 <__mcmp>
 801f368:	2800      	cmp	r0, #0
 801f36a:	da3b      	bge.n	801f3e4 <_strtod_l+0x8a0>
 801f36c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f36e:	4333      	orrs	r3, r6
 801f370:	d167      	bne.n	801f442 <_strtod_l+0x8fe>
 801f372:	033b      	lsls	r3, r7, #12
 801f374:	d165      	bne.n	801f442 <_strtod_l+0x8fe>
 801f376:	22d6      	movs	r2, #214	@ 0xd6
 801f378:	4b37      	ldr	r3, [pc, #220]	@ (801f458 <_strtod_l+0x914>)
 801f37a:	04d2      	lsls	r2, r2, #19
 801f37c:	403b      	ands	r3, r7
 801f37e:	4293      	cmp	r3, r2
 801f380:	d95f      	bls.n	801f442 <_strtod_l+0x8fe>
 801f382:	9b06      	ldr	r3, [sp, #24]
 801f384:	695b      	ldr	r3, [r3, #20]
 801f386:	2b00      	cmp	r3, #0
 801f388:	d103      	bne.n	801f392 <_strtod_l+0x84e>
 801f38a:	9b06      	ldr	r3, [sp, #24]
 801f38c:	691b      	ldr	r3, [r3, #16]
 801f38e:	2b01      	cmp	r3, #1
 801f390:	dd57      	ble.n	801f442 <_strtod_l+0x8fe>
 801f392:	9906      	ldr	r1, [sp, #24]
 801f394:	2201      	movs	r2, #1
 801f396:	9805      	ldr	r0, [sp, #20]
 801f398:	f002 ff92 	bl	80222c0 <__lshift>
 801f39c:	9907      	ldr	r1, [sp, #28]
 801f39e:	9006      	str	r0, [sp, #24]
 801f3a0:	f002 fffa 	bl	8022398 <__mcmp>
 801f3a4:	2800      	cmp	r0, #0
 801f3a6:	dd4c      	ble.n	801f442 <_strtod_l+0x8fe>
 801f3a8:	4b2b      	ldr	r3, [pc, #172]	@ (801f458 <_strtod_l+0x914>)
 801f3aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f3ac:	403b      	ands	r3, r7
 801f3ae:	2a00      	cmp	r2, #0
 801f3b0:	d074      	beq.n	801f49c <_strtod_l+0x958>
 801f3b2:	22d6      	movs	r2, #214	@ 0xd6
 801f3b4:	04d2      	lsls	r2, r2, #19
 801f3b6:	4293      	cmp	r3, r2
 801f3b8:	d870      	bhi.n	801f49c <_strtod_l+0x958>
 801f3ba:	22dc      	movs	r2, #220	@ 0xdc
 801f3bc:	0492      	lsls	r2, r2, #18
 801f3be:	4293      	cmp	r3, r2
 801f3c0:	d800      	bhi.n	801f3c4 <_strtod_l+0x880>
 801f3c2:	e695      	b.n	801f0f0 <_strtod_l+0x5ac>
 801f3c4:	0030      	movs	r0, r6
 801f3c6:	0039      	movs	r1, r7
 801f3c8:	4b24      	ldr	r3, [pc, #144]	@ (801f45c <_strtod_l+0x918>)
 801f3ca:	2200      	movs	r2, #0
 801f3cc:	f7e3 f936 	bl	800263c <__aeabi_dmul>
 801f3d0:	4b21      	ldr	r3, [pc, #132]	@ (801f458 <_strtod_l+0x914>)
 801f3d2:	0006      	movs	r6, r0
 801f3d4:	000f      	movs	r7, r1
 801f3d6:	420b      	tst	r3, r1
 801f3d8:	d000      	beq.n	801f3dc <_strtod_l+0x898>
 801f3da:	e5f6      	b.n	801efca <_strtod_l+0x486>
 801f3dc:	2322      	movs	r3, #34	@ 0x22
 801f3de:	9a05      	ldr	r2, [sp, #20]
 801f3e0:	6013      	str	r3, [r2, #0]
 801f3e2:	e5f2      	b.n	801efca <_strtod_l+0x486>
 801f3e4:	970e      	str	r7, [sp, #56]	@ 0x38
 801f3e6:	2800      	cmp	r0, #0
 801f3e8:	d175      	bne.n	801f4d6 <_strtod_l+0x992>
 801f3ea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f3ec:	033b      	lsls	r3, r7, #12
 801f3ee:	0b1b      	lsrs	r3, r3, #12
 801f3f0:	2a00      	cmp	r2, #0
 801f3f2:	d039      	beq.n	801f468 <_strtod_l+0x924>
 801f3f4:	4a1a      	ldr	r2, [pc, #104]	@ (801f460 <_strtod_l+0x91c>)
 801f3f6:	4293      	cmp	r3, r2
 801f3f8:	d138      	bne.n	801f46c <_strtod_l+0x928>
 801f3fa:	2101      	movs	r1, #1
 801f3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3fe:	4249      	negs	r1, r1
 801f400:	0032      	movs	r2, r6
 801f402:	0008      	movs	r0, r1
 801f404:	2b00      	cmp	r3, #0
 801f406:	d00b      	beq.n	801f420 <_strtod_l+0x8dc>
 801f408:	24d4      	movs	r4, #212	@ 0xd4
 801f40a:	4b13      	ldr	r3, [pc, #76]	@ (801f458 <_strtod_l+0x914>)
 801f40c:	0008      	movs	r0, r1
 801f40e:	403b      	ands	r3, r7
 801f410:	04e4      	lsls	r4, r4, #19
 801f412:	42a3      	cmp	r3, r4
 801f414:	d804      	bhi.n	801f420 <_strtod_l+0x8dc>
 801f416:	306c      	adds	r0, #108	@ 0x6c
 801f418:	0d1b      	lsrs	r3, r3, #20
 801f41a:	1ac3      	subs	r3, r0, r3
 801f41c:	4099      	lsls	r1, r3
 801f41e:	0008      	movs	r0, r1
 801f420:	4282      	cmp	r2, r0
 801f422:	d123      	bne.n	801f46c <_strtod_l+0x928>
 801f424:	4b0f      	ldr	r3, [pc, #60]	@ (801f464 <_strtod_l+0x920>)
 801f426:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f428:	4299      	cmp	r1, r3
 801f42a:	d102      	bne.n	801f432 <_strtod_l+0x8ee>
 801f42c:	3201      	adds	r2, #1
 801f42e:	d100      	bne.n	801f432 <_strtod_l+0x8ee>
 801f430:	e5c2      	b.n	801efb8 <_strtod_l+0x474>
 801f432:	4b09      	ldr	r3, [pc, #36]	@ (801f458 <_strtod_l+0x914>)
 801f434:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f436:	2600      	movs	r6, #0
 801f438:	401a      	ands	r2, r3
 801f43a:	0013      	movs	r3, r2
 801f43c:	2280      	movs	r2, #128	@ 0x80
 801f43e:	0352      	lsls	r2, r2, #13
 801f440:	189f      	adds	r7, r3, r2
 801f442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f444:	2b00      	cmp	r3, #0
 801f446:	d1bd      	bne.n	801f3c4 <_strtod_l+0x880>
 801f448:	e5bf      	b.n	801efca <_strtod_l+0x486>
 801f44a:	46c0      	nop			@ (mov r8, r8)
 801f44c:	08026298 	.word	0x08026298
 801f450:	fffffc02 	.word	0xfffffc02
 801f454:	fffffbe2 	.word	0xfffffbe2
 801f458:	7ff00000 	.word	0x7ff00000
 801f45c:	39500000 	.word	0x39500000
 801f460:	000fffff 	.word	0x000fffff
 801f464:	7fefffff 	.word	0x7fefffff
 801f468:	4333      	orrs	r3, r6
 801f46a:	d09d      	beq.n	801f3a8 <_strtod_l+0x864>
 801f46c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d01c      	beq.n	801f4ac <_strtod_l+0x968>
 801f472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f474:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f476:	4213      	tst	r3, r2
 801f478:	d0e3      	beq.n	801f442 <_strtod_l+0x8fe>
 801f47a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f47c:	0030      	movs	r0, r6
 801f47e:	0039      	movs	r1, r7
 801f480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f482:	2b00      	cmp	r3, #0
 801f484:	d016      	beq.n	801f4b4 <_strtod_l+0x970>
 801f486:	f7ff fb45 	bl	801eb14 <sulp>
 801f48a:	0002      	movs	r2, r0
 801f48c:	000b      	movs	r3, r1
 801f48e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f490:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f492:	f7e2 f92b 	bl	80016ec <__aeabi_dadd>
 801f496:	0006      	movs	r6, r0
 801f498:	000f      	movs	r7, r1
 801f49a:	e7d2      	b.n	801f442 <_strtod_l+0x8fe>
 801f49c:	2601      	movs	r6, #1
 801f49e:	4a92      	ldr	r2, [pc, #584]	@ (801f6e8 <_strtod_l+0xba4>)
 801f4a0:	4276      	negs	r6, r6
 801f4a2:	189b      	adds	r3, r3, r2
 801f4a4:	4a91      	ldr	r2, [pc, #580]	@ (801f6ec <_strtod_l+0xba8>)
 801f4a6:	431a      	orrs	r2, r3
 801f4a8:	0017      	movs	r7, r2
 801f4aa:	e7ca      	b.n	801f442 <_strtod_l+0x8fe>
 801f4ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f4ae:	4233      	tst	r3, r6
 801f4b0:	d0c7      	beq.n	801f442 <_strtod_l+0x8fe>
 801f4b2:	e7e2      	b.n	801f47a <_strtod_l+0x936>
 801f4b4:	f7ff fb2e 	bl	801eb14 <sulp>
 801f4b8:	0002      	movs	r2, r0
 801f4ba:	000b      	movs	r3, r1
 801f4bc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f4be:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f4c0:	f7e3 fb84 	bl	8002bcc <__aeabi_dsub>
 801f4c4:	2200      	movs	r2, #0
 801f4c6:	2300      	movs	r3, #0
 801f4c8:	0006      	movs	r6, r0
 801f4ca:	000f      	movs	r7, r1
 801f4cc:	f7e0 fff0 	bl	80004b0 <__aeabi_dcmpeq>
 801f4d0:	2800      	cmp	r0, #0
 801f4d2:	d0b6      	beq.n	801f442 <_strtod_l+0x8fe>
 801f4d4:	e60c      	b.n	801f0f0 <_strtod_l+0x5ac>
 801f4d6:	9907      	ldr	r1, [sp, #28]
 801f4d8:	9806      	ldr	r0, [sp, #24]
 801f4da:	f003 f8df 	bl	802269c <__ratio>
 801f4de:	2380      	movs	r3, #128	@ 0x80
 801f4e0:	2200      	movs	r2, #0
 801f4e2:	05db      	lsls	r3, r3, #23
 801f4e4:	0004      	movs	r4, r0
 801f4e6:	000d      	movs	r5, r1
 801f4e8:	f7e0 fff2 	bl	80004d0 <__aeabi_dcmple>
 801f4ec:	2800      	cmp	r0, #0
 801f4ee:	d06c      	beq.n	801f5ca <_strtod_l+0xa86>
 801f4f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	d177      	bne.n	801f5e6 <_strtod_l+0xaa2>
 801f4f6:	2e00      	cmp	r6, #0
 801f4f8:	d157      	bne.n	801f5aa <_strtod_l+0xa66>
 801f4fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4fc:	031b      	lsls	r3, r3, #12
 801f4fe:	d15a      	bne.n	801f5b6 <_strtod_l+0xa72>
 801f500:	2200      	movs	r2, #0
 801f502:	0020      	movs	r0, r4
 801f504:	0029      	movs	r1, r5
 801f506:	4b7a      	ldr	r3, [pc, #488]	@ (801f6f0 <_strtod_l+0xbac>)
 801f508:	f7e0 ffd8 	bl	80004bc <__aeabi_dcmplt>
 801f50c:	2800      	cmp	r0, #0
 801f50e:	d159      	bne.n	801f5c4 <_strtod_l+0xa80>
 801f510:	0020      	movs	r0, r4
 801f512:	0029      	movs	r1, r5
 801f514:	2200      	movs	r2, #0
 801f516:	4b77      	ldr	r3, [pc, #476]	@ (801f6f4 <_strtod_l+0xbb0>)
 801f518:	f7e3 f890 	bl	800263c <__aeabi_dmul>
 801f51c:	0004      	movs	r4, r0
 801f51e:	000d      	movs	r5, r1
 801f520:	2380      	movs	r3, #128	@ 0x80
 801f522:	061b      	lsls	r3, r3, #24
 801f524:	18eb      	adds	r3, r5, r3
 801f526:	940a      	str	r4, [sp, #40]	@ 0x28
 801f528:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f52a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f52c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f52e:	9214      	str	r2, [sp, #80]	@ 0x50
 801f530:	9315      	str	r3, [sp, #84]	@ 0x54
 801f532:	4a71      	ldr	r2, [pc, #452]	@ (801f6f8 <_strtod_l+0xbb4>)
 801f534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f536:	4013      	ands	r3, r2
 801f538:	9316      	str	r3, [sp, #88]	@ 0x58
 801f53a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f53c:	4b6f      	ldr	r3, [pc, #444]	@ (801f6fc <_strtod_l+0xbb8>)
 801f53e:	429a      	cmp	r2, r3
 801f540:	d000      	beq.n	801f544 <_strtod_l+0xa00>
 801f542:	e087      	b.n	801f654 <_strtod_l+0xb10>
 801f544:	4a6e      	ldr	r2, [pc, #440]	@ (801f700 <_strtod_l+0xbbc>)
 801f546:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f548:	4694      	mov	ip, r2
 801f54a:	4463      	add	r3, ip
 801f54c:	001f      	movs	r7, r3
 801f54e:	0030      	movs	r0, r6
 801f550:	0019      	movs	r1, r3
 801f552:	f002 ffd7 	bl	8022504 <__ulp>
 801f556:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f558:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f55a:	f7e3 f86f 	bl	800263c <__aeabi_dmul>
 801f55e:	0032      	movs	r2, r6
 801f560:	003b      	movs	r3, r7
 801f562:	f7e2 f8c3 	bl	80016ec <__aeabi_dadd>
 801f566:	4a64      	ldr	r2, [pc, #400]	@ (801f6f8 <_strtod_l+0xbb4>)
 801f568:	4b66      	ldr	r3, [pc, #408]	@ (801f704 <_strtod_l+0xbc0>)
 801f56a:	0006      	movs	r6, r0
 801f56c:	400a      	ands	r2, r1
 801f56e:	429a      	cmp	r2, r3
 801f570:	d940      	bls.n	801f5f4 <_strtod_l+0xab0>
 801f572:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f574:	4a64      	ldr	r2, [pc, #400]	@ (801f708 <_strtod_l+0xbc4>)
 801f576:	4293      	cmp	r3, r2
 801f578:	d103      	bne.n	801f582 <_strtod_l+0xa3e>
 801f57a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f57c:	3301      	adds	r3, #1
 801f57e:	d100      	bne.n	801f582 <_strtod_l+0xa3e>
 801f580:	e51a      	b.n	801efb8 <_strtod_l+0x474>
 801f582:	2601      	movs	r6, #1
 801f584:	4f60      	ldr	r7, [pc, #384]	@ (801f708 <_strtod_l+0xbc4>)
 801f586:	4276      	negs	r6, r6
 801f588:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f58a:	9805      	ldr	r0, [sp, #20]
 801f58c:	f002 fc6e 	bl	8021e6c <_Bfree>
 801f590:	9908      	ldr	r1, [sp, #32]
 801f592:	9805      	ldr	r0, [sp, #20]
 801f594:	f002 fc6a 	bl	8021e6c <_Bfree>
 801f598:	9907      	ldr	r1, [sp, #28]
 801f59a:	9805      	ldr	r0, [sp, #20]
 801f59c:	f002 fc66 	bl	8021e6c <_Bfree>
 801f5a0:	9906      	ldr	r1, [sp, #24]
 801f5a2:	9805      	ldr	r0, [sp, #20]
 801f5a4:	f002 fc62 	bl	8021e6c <_Bfree>
 801f5a8:	e617      	b.n	801f1da <_strtod_l+0x696>
 801f5aa:	2e01      	cmp	r6, #1
 801f5ac:	d103      	bne.n	801f5b6 <_strtod_l+0xa72>
 801f5ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d100      	bne.n	801f5b6 <_strtod_l+0xa72>
 801f5b4:	e59c      	b.n	801f0f0 <_strtod_l+0x5ac>
 801f5b6:	2300      	movs	r3, #0
 801f5b8:	4c54      	ldr	r4, [pc, #336]	@ (801f70c <_strtod_l+0xbc8>)
 801f5ba:	4d4d      	ldr	r5, [pc, #308]	@ (801f6f0 <_strtod_l+0xbac>)
 801f5bc:	930a      	str	r3, [sp, #40]	@ 0x28
 801f5be:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f5c0:	2400      	movs	r4, #0
 801f5c2:	e7b2      	b.n	801f52a <_strtod_l+0x9e6>
 801f5c4:	2400      	movs	r4, #0
 801f5c6:	4d4b      	ldr	r5, [pc, #300]	@ (801f6f4 <_strtod_l+0xbb0>)
 801f5c8:	e7aa      	b.n	801f520 <_strtod_l+0x9dc>
 801f5ca:	0020      	movs	r0, r4
 801f5cc:	0029      	movs	r1, r5
 801f5ce:	4b49      	ldr	r3, [pc, #292]	@ (801f6f4 <_strtod_l+0xbb0>)
 801f5d0:	2200      	movs	r2, #0
 801f5d2:	f7e3 f833 	bl	800263c <__aeabi_dmul>
 801f5d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f5d8:	0004      	movs	r4, r0
 801f5da:	000d      	movs	r5, r1
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d09f      	beq.n	801f520 <_strtod_l+0x9dc>
 801f5e0:	940a      	str	r4, [sp, #40]	@ 0x28
 801f5e2:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f5e4:	e7a1      	b.n	801f52a <_strtod_l+0x9e6>
 801f5e6:	2300      	movs	r3, #0
 801f5e8:	4c41      	ldr	r4, [pc, #260]	@ (801f6f0 <_strtod_l+0xbac>)
 801f5ea:	0025      	movs	r5, r4
 801f5ec:	930a      	str	r3, [sp, #40]	@ 0x28
 801f5ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f5f0:	001c      	movs	r4, r3
 801f5f2:	e79a      	b.n	801f52a <_strtod_l+0x9e6>
 801f5f4:	23d4      	movs	r3, #212	@ 0xd4
 801f5f6:	049b      	lsls	r3, r3, #18
 801f5f8:	18cf      	adds	r7, r1, r3
 801f5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5fc:	9710      	str	r7, [sp, #64]	@ 0x40
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d1c2      	bne.n	801f588 <_strtod_l+0xa44>
 801f602:	4b3d      	ldr	r3, [pc, #244]	@ (801f6f8 <_strtod_l+0xbb4>)
 801f604:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f606:	403b      	ands	r3, r7
 801f608:	429a      	cmp	r2, r3
 801f60a:	d1bd      	bne.n	801f588 <_strtod_l+0xa44>
 801f60c:	0020      	movs	r0, r4
 801f60e:	0029      	movs	r1, r5
 801f610:	f7e1 f83a 	bl	8000688 <__aeabi_d2lz>
 801f614:	f7e1 f872 	bl	80006fc <__aeabi_l2d>
 801f618:	0002      	movs	r2, r0
 801f61a:	000b      	movs	r3, r1
 801f61c:	0020      	movs	r0, r4
 801f61e:	0029      	movs	r1, r5
 801f620:	f7e3 fad4 	bl	8002bcc <__aeabi_dsub>
 801f624:	033c      	lsls	r4, r7, #12
 801f626:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f628:	0b24      	lsrs	r4, r4, #12
 801f62a:	4334      	orrs	r4, r6
 801f62c:	900e      	str	r0, [sp, #56]	@ 0x38
 801f62e:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f630:	4a37      	ldr	r2, [pc, #220]	@ (801f710 <_strtod_l+0xbcc>)
 801f632:	431c      	orrs	r4, r3
 801f634:	d052      	beq.n	801f6dc <_strtod_l+0xb98>
 801f636:	4b37      	ldr	r3, [pc, #220]	@ (801f714 <_strtod_l+0xbd0>)
 801f638:	f7e0 ff40 	bl	80004bc <__aeabi_dcmplt>
 801f63c:	2800      	cmp	r0, #0
 801f63e:	d000      	beq.n	801f642 <_strtod_l+0xafe>
 801f640:	e4c3      	b.n	801efca <_strtod_l+0x486>
 801f642:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f644:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f646:	4a34      	ldr	r2, [pc, #208]	@ (801f718 <_strtod_l+0xbd4>)
 801f648:	4b2a      	ldr	r3, [pc, #168]	@ (801f6f4 <_strtod_l+0xbb0>)
 801f64a:	f7e0 ff4b 	bl	80004e4 <__aeabi_dcmpgt>
 801f64e:	2800      	cmp	r0, #0
 801f650:	d09a      	beq.n	801f588 <_strtod_l+0xa44>
 801f652:	e4ba      	b.n	801efca <_strtod_l+0x486>
 801f654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f656:	2b00      	cmp	r3, #0
 801f658:	d02a      	beq.n	801f6b0 <_strtod_l+0xb6c>
 801f65a:	23d4      	movs	r3, #212	@ 0xd4
 801f65c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f65e:	04db      	lsls	r3, r3, #19
 801f660:	429a      	cmp	r2, r3
 801f662:	d825      	bhi.n	801f6b0 <_strtod_l+0xb6c>
 801f664:	0020      	movs	r0, r4
 801f666:	0029      	movs	r1, r5
 801f668:	4a2c      	ldr	r2, [pc, #176]	@ (801f71c <_strtod_l+0xbd8>)
 801f66a:	4b2d      	ldr	r3, [pc, #180]	@ (801f720 <_strtod_l+0xbdc>)
 801f66c:	f7e0 ff30 	bl	80004d0 <__aeabi_dcmple>
 801f670:	2800      	cmp	r0, #0
 801f672:	d016      	beq.n	801f6a2 <_strtod_l+0xb5e>
 801f674:	0020      	movs	r0, r4
 801f676:	0029      	movs	r1, r5
 801f678:	f7e0 ffe8 	bl	800064c <__aeabi_d2uiz>
 801f67c:	2800      	cmp	r0, #0
 801f67e:	d100      	bne.n	801f682 <_strtod_l+0xb3e>
 801f680:	3001      	adds	r0, #1
 801f682:	f7e3 fecb 	bl	800341c <__aeabi_ui2d>
 801f686:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f688:	0004      	movs	r4, r0
 801f68a:	000d      	movs	r5, r1
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d122      	bne.n	801f6d6 <_strtod_l+0xb92>
 801f690:	2380      	movs	r3, #128	@ 0x80
 801f692:	061b      	lsls	r3, r3, #24
 801f694:	18cb      	adds	r3, r1, r3
 801f696:	9018      	str	r0, [sp, #96]	@ 0x60
 801f698:	9319      	str	r3, [sp, #100]	@ 0x64
 801f69a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f69c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f69e:	9214      	str	r2, [sp, #80]	@ 0x50
 801f6a0:	9315      	str	r3, [sp, #84]	@ 0x54
 801f6a2:	22d6      	movs	r2, #214	@ 0xd6
 801f6a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f6a6:	04d2      	lsls	r2, r2, #19
 801f6a8:	189b      	adds	r3, r3, r2
 801f6aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f6ac:	1a9b      	subs	r3, r3, r2
 801f6ae:	9315      	str	r3, [sp, #84]	@ 0x54
 801f6b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f6b2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f6b4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f6b6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f6b8:	f002 ff24 	bl	8022504 <__ulp>
 801f6bc:	0002      	movs	r2, r0
 801f6be:	000b      	movs	r3, r1
 801f6c0:	0030      	movs	r0, r6
 801f6c2:	0039      	movs	r1, r7
 801f6c4:	f7e2 ffba 	bl	800263c <__aeabi_dmul>
 801f6c8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f6ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f6cc:	f7e2 f80e 	bl	80016ec <__aeabi_dadd>
 801f6d0:	0006      	movs	r6, r0
 801f6d2:	000f      	movs	r7, r1
 801f6d4:	e791      	b.n	801f5fa <_strtod_l+0xab6>
 801f6d6:	9418      	str	r4, [sp, #96]	@ 0x60
 801f6d8:	9519      	str	r5, [sp, #100]	@ 0x64
 801f6da:	e7de      	b.n	801f69a <_strtod_l+0xb56>
 801f6dc:	4b11      	ldr	r3, [pc, #68]	@ (801f724 <_strtod_l+0xbe0>)
 801f6de:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f6e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f6e2:	f7e0 feeb 	bl	80004bc <__aeabi_dcmplt>
 801f6e6:	e7b2      	b.n	801f64e <_strtod_l+0xb0a>
 801f6e8:	fff00000 	.word	0xfff00000
 801f6ec:	000fffff 	.word	0x000fffff
 801f6f0:	3ff00000 	.word	0x3ff00000
 801f6f4:	3fe00000 	.word	0x3fe00000
 801f6f8:	7ff00000 	.word	0x7ff00000
 801f6fc:	7fe00000 	.word	0x7fe00000
 801f700:	fcb00000 	.word	0xfcb00000
 801f704:	7c9fffff 	.word	0x7c9fffff
 801f708:	7fefffff 	.word	0x7fefffff
 801f70c:	bff00000 	.word	0xbff00000
 801f710:	94a03595 	.word	0x94a03595
 801f714:	3fdfffff 	.word	0x3fdfffff
 801f718:	35afe535 	.word	0x35afe535
 801f71c:	ffc00000 	.word	0xffc00000
 801f720:	41dfffff 	.word	0x41dfffff
 801f724:	3fcfffff 	.word	0x3fcfffff

0801f728 <strtod>:
 801f728:	b510      	push	{r4, lr}
 801f72a:	4c04      	ldr	r4, [pc, #16]	@ (801f73c <strtod+0x14>)
 801f72c:	000a      	movs	r2, r1
 801f72e:	0001      	movs	r1, r0
 801f730:	4b03      	ldr	r3, [pc, #12]	@ (801f740 <strtod+0x18>)
 801f732:	6820      	ldr	r0, [r4, #0]
 801f734:	f7ff fa06 	bl	801eb44 <_strtod_l>
 801f738:	bd10      	pop	{r4, pc}
 801f73a:	46c0      	nop			@ (mov r8, r8)
 801f73c:	200003d0 	.word	0x200003d0
 801f740:	20000264 	.word	0x20000264

0801f744 <_strtol_l.constprop.0>:
 801f744:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f746:	b085      	sub	sp, #20
 801f748:	0017      	movs	r7, r2
 801f74a:	001e      	movs	r6, r3
 801f74c:	9003      	str	r0, [sp, #12]
 801f74e:	9101      	str	r1, [sp, #4]
 801f750:	2b24      	cmp	r3, #36	@ 0x24
 801f752:	d844      	bhi.n	801f7de <_strtol_l.constprop.0+0x9a>
 801f754:	000c      	movs	r4, r1
 801f756:	2b01      	cmp	r3, #1
 801f758:	d041      	beq.n	801f7de <_strtol_l.constprop.0+0x9a>
 801f75a:	4b3d      	ldr	r3, [pc, #244]	@ (801f850 <_strtol_l.constprop.0+0x10c>)
 801f75c:	2208      	movs	r2, #8
 801f75e:	469c      	mov	ip, r3
 801f760:	0023      	movs	r3, r4
 801f762:	4661      	mov	r1, ip
 801f764:	781d      	ldrb	r5, [r3, #0]
 801f766:	3401      	adds	r4, #1
 801f768:	5d48      	ldrb	r0, [r1, r5]
 801f76a:	0001      	movs	r1, r0
 801f76c:	4011      	ands	r1, r2
 801f76e:	4210      	tst	r0, r2
 801f770:	d1f6      	bne.n	801f760 <_strtol_l.constprop.0+0x1c>
 801f772:	2d2d      	cmp	r5, #45	@ 0x2d
 801f774:	d13a      	bne.n	801f7ec <_strtol_l.constprop.0+0xa8>
 801f776:	7825      	ldrb	r5, [r4, #0]
 801f778:	1c9c      	adds	r4, r3, #2
 801f77a:	2301      	movs	r3, #1
 801f77c:	9300      	str	r3, [sp, #0]
 801f77e:	2210      	movs	r2, #16
 801f780:	0033      	movs	r3, r6
 801f782:	4393      	bics	r3, r2
 801f784:	d109      	bne.n	801f79a <_strtol_l.constprop.0+0x56>
 801f786:	2d30      	cmp	r5, #48	@ 0x30
 801f788:	d136      	bne.n	801f7f8 <_strtol_l.constprop.0+0xb4>
 801f78a:	2120      	movs	r1, #32
 801f78c:	7823      	ldrb	r3, [r4, #0]
 801f78e:	438b      	bics	r3, r1
 801f790:	2b58      	cmp	r3, #88	@ 0x58
 801f792:	d131      	bne.n	801f7f8 <_strtol_l.constprop.0+0xb4>
 801f794:	0016      	movs	r6, r2
 801f796:	7865      	ldrb	r5, [r4, #1]
 801f798:	3402      	adds	r4, #2
 801f79a:	4a2e      	ldr	r2, [pc, #184]	@ (801f854 <_strtol_l.constprop.0+0x110>)
 801f79c:	9b00      	ldr	r3, [sp, #0]
 801f79e:	4694      	mov	ip, r2
 801f7a0:	4463      	add	r3, ip
 801f7a2:	0031      	movs	r1, r6
 801f7a4:	0018      	movs	r0, r3
 801f7a6:	9302      	str	r3, [sp, #8]
 801f7a8:	f7e0 fd82 	bl	80002b0 <__aeabi_uidivmod>
 801f7ac:	2200      	movs	r2, #0
 801f7ae:	4684      	mov	ip, r0
 801f7b0:	0010      	movs	r0, r2
 801f7b2:	002b      	movs	r3, r5
 801f7b4:	3b30      	subs	r3, #48	@ 0x30
 801f7b6:	2b09      	cmp	r3, #9
 801f7b8:	d825      	bhi.n	801f806 <_strtol_l.constprop.0+0xc2>
 801f7ba:	001d      	movs	r5, r3
 801f7bc:	42ae      	cmp	r6, r5
 801f7be:	dd31      	ble.n	801f824 <_strtol_l.constprop.0+0xe0>
 801f7c0:	1c53      	adds	r3, r2, #1
 801f7c2:	d009      	beq.n	801f7d8 <_strtol_l.constprop.0+0x94>
 801f7c4:	2201      	movs	r2, #1
 801f7c6:	4252      	negs	r2, r2
 801f7c8:	4584      	cmp	ip, r0
 801f7ca:	d305      	bcc.n	801f7d8 <_strtol_l.constprop.0+0x94>
 801f7cc:	d101      	bne.n	801f7d2 <_strtol_l.constprop.0+0x8e>
 801f7ce:	42a9      	cmp	r1, r5
 801f7d0:	db25      	blt.n	801f81e <_strtol_l.constprop.0+0xda>
 801f7d2:	2201      	movs	r2, #1
 801f7d4:	4370      	muls	r0, r6
 801f7d6:	1828      	adds	r0, r5, r0
 801f7d8:	7825      	ldrb	r5, [r4, #0]
 801f7da:	3401      	adds	r4, #1
 801f7dc:	e7e9      	b.n	801f7b2 <_strtol_l.constprop.0+0x6e>
 801f7de:	f000 ffc5 	bl	802076c <__errno>
 801f7e2:	2316      	movs	r3, #22
 801f7e4:	6003      	str	r3, [r0, #0]
 801f7e6:	2000      	movs	r0, #0
 801f7e8:	b005      	add	sp, #20
 801f7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7ec:	9100      	str	r1, [sp, #0]
 801f7ee:	2d2b      	cmp	r5, #43	@ 0x2b
 801f7f0:	d1c5      	bne.n	801f77e <_strtol_l.constprop.0+0x3a>
 801f7f2:	7825      	ldrb	r5, [r4, #0]
 801f7f4:	1c9c      	adds	r4, r3, #2
 801f7f6:	e7c2      	b.n	801f77e <_strtol_l.constprop.0+0x3a>
 801f7f8:	2e00      	cmp	r6, #0
 801f7fa:	d1ce      	bne.n	801f79a <_strtol_l.constprop.0+0x56>
 801f7fc:	3608      	adds	r6, #8
 801f7fe:	2d30      	cmp	r5, #48	@ 0x30
 801f800:	d0cb      	beq.n	801f79a <_strtol_l.constprop.0+0x56>
 801f802:	3602      	adds	r6, #2
 801f804:	e7c9      	b.n	801f79a <_strtol_l.constprop.0+0x56>
 801f806:	002b      	movs	r3, r5
 801f808:	3b41      	subs	r3, #65	@ 0x41
 801f80a:	2b19      	cmp	r3, #25
 801f80c:	d801      	bhi.n	801f812 <_strtol_l.constprop.0+0xce>
 801f80e:	3d37      	subs	r5, #55	@ 0x37
 801f810:	e7d4      	b.n	801f7bc <_strtol_l.constprop.0+0x78>
 801f812:	002b      	movs	r3, r5
 801f814:	3b61      	subs	r3, #97	@ 0x61
 801f816:	2b19      	cmp	r3, #25
 801f818:	d804      	bhi.n	801f824 <_strtol_l.constprop.0+0xe0>
 801f81a:	3d57      	subs	r5, #87	@ 0x57
 801f81c:	e7ce      	b.n	801f7bc <_strtol_l.constprop.0+0x78>
 801f81e:	2201      	movs	r2, #1
 801f820:	4252      	negs	r2, r2
 801f822:	e7d9      	b.n	801f7d8 <_strtol_l.constprop.0+0x94>
 801f824:	1c53      	adds	r3, r2, #1
 801f826:	d108      	bne.n	801f83a <_strtol_l.constprop.0+0xf6>
 801f828:	2322      	movs	r3, #34	@ 0x22
 801f82a:	9a03      	ldr	r2, [sp, #12]
 801f82c:	9802      	ldr	r0, [sp, #8]
 801f82e:	6013      	str	r3, [r2, #0]
 801f830:	2f00      	cmp	r7, #0
 801f832:	d0d9      	beq.n	801f7e8 <_strtol_l.constprop.0+0xa4>
 801f834:	1e63      	subs	r3, r4, #1
 801f836:	9301      	str	r3, [sp, #4]
 801f838:	e007      	b.n	801f84a <_strtol_l.constprop.0+0x106>
 801f83a:	9b00      	ldr	r3, [sp, #0]
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	d000      	beq.n	801f842 <_strtol_l.constprop.0+0xfe>
 801f840:	4240      	negs	r0, r0
 801f842:	2f00      	cmp	r7, #0
 801f844:	d0d0      	beq.n	801f7e8 <_strtol_l.constprop.0+0xa4>
 801f846:	2a00      	cmp	r2, #0
 801f848:	d1f4      	bne.n	801f834 <_strtol_l.constprop.0+0xf0>
 801f84a:	9b01      	ldr	r3, [sp, #4]
 801f84c:	603b      	str	r3, [r7, #0]
 801f84e:	e7cb      	b.n	801f7e8 <_strtol_l.constprop.0+0xa4>
 801f850:	080262c1 	.word	0x080262c1
 801f854:	7fffffff 	.word	0x7fffffff

0801f858 <strtol>:
 801f858:	b510      	push	{r4, lr}
 801f85a:	4c04      	ldr	r4, [pc, #16]	@ (801f86c <strtol+0x14>)
 801f85c:	0013      	movs	r3, r2
 801f85e:	000a      	movs	r2, r1
 801f860:	0001      	movs	r1, r0
 801f862:	6820      	ldr	r0, [r4, #0]
 801f864:	f7ff ff6e 	bl	801f744 <_strtol_l.constprop.0>
 801f868:	bd10      	pop	{r4, pc}
 801f86a:	46c0      	nop			@ (mov r8, r8)
 801f86c:	200003d0 	.word	0x200003d0

0801f870 <__cvt>:
 801f870:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f872:	001f      	movs	r7, r3
 801f874:	2300      	movs	r3, #0
 801f876:	0016      	movs	r6, r2
 801f878:	b08b      	sub	sp, #44	@ 0x2c
 801f87a:	429f      	cmp	r7, r3
 801f87c:	da04      	bge.n	801f888 <__cvt+0x18>
 801f87e:	2180      	movs	r1, #128	@ 0x80
 801f880:	0609      	lsls	r1, r1, #24
 801f882:	187b      	adds	r3, r7, r1
 801f884:	001f      	movs	r7, r3
 801f886:	232d      	movs	r3, #45	@ 0x2d
 801f888:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f88a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f88c:	7013      	strb	r3, [r2, #0]
 801f88e:	2320      	movs	r3, #32
 801f890:	2203      	movs	r2, #3
 801f892:	439d      	bics	r5, r3
 801f894:	2d46      	cmp	r5, #70	@ 0x46
 801f896:	d007      	beq.n	801f8a8 <__cvt+0x38>
 801f898:	002b      	movs	r3, r5
 801f89a:	3b45      	subs	r3, #69	@ 0x45
 801f89c:	4259      	negs	r1, r3
 801f89e:	414b      	adcs	r3, r1
 801f8a0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f8a2:	3a01      	subs	r2, #1
 801f8a4:	18cb      	adds	r3, r1, r3
 801f8a6:	9310      	str	r3, [sp, #64]	@ 0x40
 801f8a8:	ab09      	add	r3, sp, #36	@ 0x24
 801f8aa:	9304      	str	r3, [sp, #16]
 801f8ac:	ab08      	add	r3, sp, #32
 801f8ae:	9303      	str	r3, [sp, #12]
 801f8b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8b2:	9200      	str	r2, [sp, #0]
 801f8b4:	9302      	str	r3, [sp, #8]
 801f8b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f8b8:	0032      	movs	r2, r6
 801f8ba:	9301      	str	r3, [sp, #4]
 801f8bc:	003b      	movs	r3, r7
 801f8be:	f001 f82b 	bl	8020918 <_dtoa_r>
 801f8c2:	0004      	movs	r4, r0
 801f8c4:	2d47      	cmp	r5, #71	@ 0x47
 801f8c6:	d11b      	bne.n	801f900 <__cvt+0x90>
 801f8c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f8ca:	07db      	lsls	r3, r3, #31
 801f8cc:	d511      	bpl.n	801f8f2 <__cvt+0x82>
 801f8ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f8d0:	18c3      	adds	r3, r0, r3
 801f8d2:	9307      	str	r3, [sp, #28]
 801f8d4:	2200      	movs	r2, #0
 801f8d6:	2300      	movs	r3, #0
 801f8d8:	0030      	movs	r0, r6
 801f8da:	0039      	movs	r1, r7
 801f8dc:	f7e0 fde8 	bl	80004b0 <__aeabi_dcmpeq>
 801f8e0:	2800      	cmp	r0, #0
 801f8e2:	d001      	beq.n	801f8e8 <__cvt+0x78>
 801f8e4:	9b07      	ldr	r3, [sp, #28]
 801f8e6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f8e8:	2230      	movs	r2, #48	@ 0x30
 801f8ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8ec:	9907      	ldr	r1, [sp, #28]
 801f8ee:	428b      	cmp	r3, r1
 801f8f0:	d320      	bcc.n	801f934 <__cvt+0xc4>
 801f8f2:	0020      	movs	r0, r4
 801f8f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8f6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f8f8:	1b1b      	subs	r3, r3, r4
 801f8fa:	6013      	str	r3, [r2, #0]
 801f8fc:	b00b      	add	sp, #44	@ 0x2c
 801f8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f900:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f902:	18c3      	adds	r3, r0, r3
 801f904:	9307      	str	r3, [sp, #28]
 801f906:	2d46      	cmp	r5, #70	@ 0x46
 801f908:	d1e4      	bne.n	801f8d4 <__cvt+0x64>
 801f90a:	7803      	ldrb	r3, [r0, #0]
 801f90c:	2b30      	cmp	r3, #48	@ 0x30
 801f90e:	d10c      	bne.n	801f92a <__cvt+0xba>
 801f910:	2200      	movs	r2, #0
 801f912:	2300      	movs	r3, #0
 801f914:	0030      	movs	r0, r6
 801f916:	0039      	movs	r1, r7
 801f918:	f7e0 fdca 	bl	80004b0 <__aeabi_dcmpeq>
 801f91c:	2800      	cmp	r0, #0
 801f91e:	d104      	bne.n	801f92a <__cvt+0xba>
 801f920:	2301      	movs	r3, #1
 801f922:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f924:	1a9b      	subs	r3, r3, r2
 801f926:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f928:	6013      	str	r3, [r2, #0]
 801f92a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f92c:	9a07      	ldr	r2, [sp, #28]
 801f92e:	681b      	ldr	r3, [r3, #0]
 801f930:	18d3      	adds	r3, r2, r3
 801f932:	e7ce      	b.n	801f8d2 <__cvt+0x62>
 801f934:	1c59      	adds	r1, r3, #1
 801f936:	9109      	str	r1, [sp, #36]	@ 0x24
 801f938:	701a      	strb	r2, [r3, #0]
 801f93a:	e7d6      	b.n	801f8ea <__cvt+0x7a>

0801f93c <__exponent>:
 801f93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f93e:	232b      	movs	r3, #43	@ 0x2b
 801f940:	0005      	movs	r5, r0
 801f942:	000c      	movs	r4, r1
 801f944:	b085      	sub	sp, #20
 801f946:	7002      	strb	r2, [r0, #0]
 801f948:	2900      	cmp	r1, #0
 801f94a:	da01      	bge.n	801f950 <__exponent+0x14>
 801f94c:	424c      	negs	r4, r1
 801f94e:	3302      	adds	r3, #2
 801f950:	706b      	strb	r3, [r5, #1]
 801f952:	2c09      	cmp	r4, #9
 801f954:	dd2c      	ble.n	801f9b0 <__exponent+0x74>
 801f956:	ab02      	add	r3, sp, #8
 801f958:	1dde      	adds	r6, r3, #7
 801f95a:	0020      	movs	r0, r4
 801f95c:	210a      	movs	r1, #10
 801f95e:	f7e0 fd91 	bl	8000484 <__aeabi_idivmod>
 801f962:	0037      	movs	r7, r6
 801f964:	3130      	adds	r1, #48	@ 0x30
 801f966:	3e01      	subs	r6, #1
 801f968:	0020      	movs	r0, r4
 801f96a:	7031      	strb	r1, [r6, #0]
 801f96c:	210a      	movs	r1, #10
 801f96e:	9401      	str	r4, [sp, #4]
 801f970:	f7e0 fca2 	bl	80002b8 <__divsi3>
 801f974:	9b01      	ldr	r3, [sp, #4]
 801f976:	0004      	movs	r4, r0
 801f978:	2b63      	cmp	r3, #99	@ 0x63
 801f97a:	dcee      	bgt.n	801f95a <__exponent+0x1e>
 801f97c:	1eba      	subs	r2, r7, #2
 801f97e:	1ca8      	adds	r0, r5, #2
 801f980:	0001      	movs	r1, r0
 801f982:	0013      	movs	r3, r2
 801f984:	3430      	adds	r4, #48	@ 0x30
 801f986:	7014      	strb	r4, [r2, #0]
 801f988:	ac02      	add	r4, sp, #8
 801f98a:	3407      	adds	r4, #7
 801f98c:	429c      	cmp	r4, r3
 801f98e:	d80a      	bhi.n	801f9a6 <__exponent+0x6a>
 801f990:	2300      	movs	r3, #0
 801f992:	42a2      	cmp	r2, r4
 801f994:	d803      	bhi.n	801f99e <__exponent+0x62>
 801f996:	3309      	adds	r3, #9
 801f998:	aa02      	add	r2, sp, #8
 801f99a:	189b      	adds	r3, r3, r2
 801f99c:	1bdb      	subs	r3, r3, r7
 801f99e:	18c0      	adds	r0, r0, r3
 801f9a0:	1b40      	subs	r0, r0, r5
 801f9a2:	b005      	add	sp, #20
 801f9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f9a6:	781c      	ldrb	r4, [r3, #0]
 801f9a8:	3301      	adds	r3, #1
 801f9aa:	700c      	strb	r4, [r1, #0]
 801f9ac:	3101      	adds	r1, #1
 801f9ae:	e7eb      	b.n	801f988 <__exponent+0x4c>
 801f9b0:	2330      	movs	r3, #48	@ 0x30
 801f9b2:	18e4      	adds	r4, r4, r3
 801f9b4:	70ab      	strb	r3, [r5, #2]
 801f9b6:	1d28      	adds	r0, r5, #4
 801f9b8:	70ec      	strb	r4, [r5, #3]
 801f9ba:	e7f1      	b.n	801f9a0 <__exponent+0x64>

0801f9bc <_printf_float>:
 801f9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9be:	b097      	sub	sp, #92	@ 0x5c
 801f9c0:	000d      	movs	r5, r1
 801f9c2:	920a      	str	r2, [sp, #40]	@ 0x28
 801f9c4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f9c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f9c8:	9009      	str	r0, [sp, #36]	@ 0x24
 801f9ca:	f000 fe7d 	bl	80206c8 <_localeconv_r>
 801f9ce:	6803      	ldr	r3, [r0, #0]
 801f9d0:	0018      	movs	r0, r3
 801f9d2:	930d      	str	r3, [sp, #52]	@ 0x34
 801f9d4:	f7e0 fbca 	bl	800016c <strlen>
 801f9d8:	2300      	movs	r3, #0
 801f9da:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f9dc:	9314      	str	r3, [sp, #80]	@ 0x50
 801f9de:	7e2b      	ldrb	r3, [r5, #24]
 801f9e0:	2207      	movs	r2, #7
 801f9e2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f9e4:	682b      	ldr	r3, [r5, #0]
 801f9e6:	930e      	str	r3, [sp, #56]	@ 0x38
 801f9e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f9ea:	6823      	ldr	r3, [r4, #0]
 801f9ec:	05c9      	lsls	r1, r1, #23
 801f9ee:	d545      	bpl.n	801fa7c <_printf_float+0xc0>
 801f9f0:	189b      	adds	r3, r3, r2
 801f9f2:	4393      	bics	r3, r2
 801f9f4:	001a      	movs	r2, r3
 801f9f6:	3208      	adds	r2, #8
 801f9f8:	6022      	str	r2, [r4, #0]
 801f9fa:	2201      	movs	r2, #1
 801f9fc:	681e      	ldr	r6, [r3, #0]
 801f9fe:	685f      	ldr	r7, [r3, #4]
 801fa00:	007b      	lsls	r3, r7, #1
 801fa02:	085b      	lsrs	r3, r3, #1
 801fa04:	9311      	str	r3, [sp, #68]	@ 0x44
 801fa06:	9610      	str	r6, [sp, #64]	@ 0x40
 801fa08:	64ae      	str	r6, [r5, #72]	@ 0x48
 801fa0a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801fa0c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fa0e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fa10:	4ba7      	ldr	r3, [pc, #668]	@ (801fcb0 <_printf_float+0x2f4>)
 801fa12:	4252      	negs	r2, r2
 801fa14:	f7e3 fc76 	bl	8003304 <__aeabi_dcmpun>
 801fa18:	2800      	cmp	r0, #0
 801fa1a:	d131      	bne.n	801fa80 <_printf_float+0xc4>
 801fa1c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fa1e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fa20:	2201      	movs	r2, #1
 801fa22:	4ba3      	ldr	r3, [pc, #652]	@ (801fcb0 <_printf_float+0x2f4>)
 801fa24:	4252      	negs	r2, r2
 801fa26:	f7e0 fd53 	bl	80004d0 <__aeabi_dcmple>
 801fa2a:	2800      	cmp	r0, #0
 801fa2c:	d128      	bne.n	801fa80 <_printf_float+0xc4>
 801fa2e:	2200      	movs	r2, #0
 801fa30:	2300      	movs	r3, #0
 801fa32:	0030      	movs	r0, r6
 801fa34:	0039      	movs	r1, r7
 801fa36:	f7e0 fd41 	bl	80004bc <__aeabi_dcmplt>
 801fa3a:	2800      	cmp	r0, #0
 801fa3c:	d003      	beq.n	801fa46 <_printf_float+0x8a>
 801fa3e:	002b      	movs	r3, r5
 801fa40:	222d      	movs	r2, #45	@ 0x2d
 801fa42:	3343      	adds	r3, #67	@ 0x43
 801fa44:	701a      	strb	r2, [r3, #0]
 801fa46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fa48:	4f9a      	ldr	r7, [pc, #616]	@ (801fcb4 <_printf_float+0x2f8>)
 801fa4a:	2b47      	cmp	r3, #71	@ 0x47
 801fa4c:	d900      	bls.n	801fa50 <_printf_float+0x94>
 801fa4e:	4f9a      	ldr	r7, [pc, #616]	@ (801fcb8 <_printf_float+0x2fc>)
 801fa50:	2303      	movs	r3, #3
 801fa52:	2400      	movs	r4, #0
 801fa54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fa56:	612b      	str	r3, [r5, #16]
 801fa58:	3301      	adds	r3, #1
 801fa5a:	439a      	bics	r2, r3
 801fa5c:	602a      	str	r2, [r5, #0]
 801fa5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fa60:	0029      	movs	r1, r5
 801fa62:	9300      	str	r3, [sp, #0]
 801fa64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fa68:	aa15      	add	r2, sp, #84	@ 0x54
 801fa6a:	f000 f9e5 	bl	801fe38 <_printf_common>
 801fa6e:	3001      	adds	r0, #1
 801fa70:	d000      	beq.n	801fa74 <_printf_float+0xb8>
 801fa72:	e09f      	b.n	801fbb4 <_printf_float+0x1f8>
 801fa74:	2001      	movs	r0, #1
 801fa76:	4240      	negs	r0, r0
 801fa78:	b017      	add	sp, #92	@ 0x5c
 801fa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa7c:	3307      	adds	r3, #7
 801fa7e:	e7b8      	b.n	801f9f2 <_printf_float+0x36>
 801fa80:	0032      	movs	r2, r6
 801fa82:	003b      	movs	r3, r7
 801fa84:	0030      	movs	r0, r6
 801fa86:	0039      	movs	r1, r7
 801fa88:	f7e3 fc3c 	bl	8003304 <__aeabi_dcmpun>
 801fa8c:	2800      	cmp	r0, #0
 801fa8e:	d00b      	beq.n	801faa8 <_printf_float+0xec>
 801fa90:	2f00      	cmp	r7, #0
 801fa92:	da03      	bge.n	801fa9c <_printf_float+0xe0>
 801fa94:	002b      	movs	r3, r5
 801fa96:	222d      	movs	r2, #45	@ 0x2d
 801fa98:	3343      	adds	r3, #67	@ 0x43
 801fa9a:	701a      	strb	r2, [r3, #0]
 801fa9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fa9e:	4f87      	ldr	r7, [pc, #540]	@ (801fcbc <_printf_float+0x300>)
 801faa0:	2b47      	cmp	r3, #71	@ 0x47
 801faa2:	d9d5      	bls.n	801fa50 <_printf_float+0x94>
 801faa4:	4f86      	ldr	r7, [pc, #536]	@ (801fcc0 <_printf_float+0x304>)
 801faa6:	e7d3      	b.n	801fa50 <_printf_float+0x94>
 801faa8:	2220      	movs	r2, #32
 801faaa:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801faac:	686b      	ldr	r3, [r5, #4]
 801faae:	4394      	bics	r4, r2
 801fab0:	1c5a      	adds	r2, r3, #1
 801fab2:	d146      	bne.n	801fb42 <_printf_float+0x186>
 801fab4:	3307      	adds	r3, #7
 801fab6:	606b      	str	r3, [r5, #4]
 801fab8:	2380      	movs	r3, #128	@ 0x80
 801faba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fabc:	00db      	lsls	r3, r3, #3
 801fabe:	4313      	orrs	r3, r2
 801fac0:	2200      	movs	r2, #0
 801fac2:	602b      	str	r3, [r5, #0]
 801fac4:	9206      	str	r2, [sp, #24]
 801fac6:	aa14      	add	r2, sp, #80	@ 0x50
 801fac8:	9205      	str	r2, [sp, #20]
 801faca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801facc:	a90a      	add	r1, sp, #40	@ 0x28
 801face:	9204      	str	r2, [sp, #16]
 801fad0:	aa13      	add	r2, sp, #76	@ 0x4c
 801fad2:	9203      	str	r2, [sp, #12]
 801fad4:	2223      	movs	r2, #35	@ 0x23
 801fad6:	1852      	adds	r2, r2, r1
 801fad8:	9202      	str	r2, [sp, #8]
 801fada:	9301      	str	r3, [sp, #4]
 801fadc:	686b      	ldr	r3, [r5, #4]
 801fade:	0032      	movs	r2, r6
 801fae0:	9300      	str	r3, [sp, #0]
 801fae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fae4:	003b      	movs	r3, r7
 801fae6:	f7ff fec3 	bl	801f870 <__cvt>
 801faea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801faec:	0007      	movs	r7, r0
 801faee:	2c47      	cmp	r4, #71	@ 0x47
 801faf0:	d12d      	bne.n	801fb4e <_printf_float+0x192>
 801faf2:	1cd3      	adds	r3, r2, #3
 801faf4:	db02      	blt.n	801fafc <_printf_float+0x140>
 801faf6:	686b      	ldr	r3, [r5, #4]
 801faf8:	429a      	cmp	r2, r3
 801fafa:	dd48      	ble.n	801fb8e <_printf_float+0x1d2>
 801fafc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fafe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fb00:	3b02      	subs	r3, #2
 801fb02:	b2db      	uxtb	r3, r3
 801fb04:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb06:	0028      	movs	r0, r5
 801fb08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fb0a:	3901      	subs	r1, #1
 801fb0c:	3050      	adds	r0, #80	@ 0x50
 801fb0e:	9113      	str	r1, [sp, #76]	@ 0x4c
 801fb10:	f7ff ff14 	bl	801f93c <__exponent>
 801fb14:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fb16:	0004      	movs	r4, r0
 801fb18:	1813      	adds	r3, r2, r0
 801fb1a:	612b      	str	r3, [r5, #16]
 801fb1c:	2a01      	cmp	r2, #1
 801fb1e:	dc02      	bgt.n	801fb26 <_printf_float+0x16a>
 801fb20:	682a      	ldr	r2, [r5, #0]
 801fb22:	07d2      	lsls	r2, r2, #31
 801fb24:	d501      	bpl.n	801fb2a <_printf_float+0x16e>
 801fb26:	3301      	adds	r3, #1
 801fb28:	612b      	str	r3, [r5, #16]
 801fb2a:	2323      	movs	r3, #35	@ 0x23
 801fb2c:	aa0a      	add	r2, sp, #40	@ 0x28
 801fb2e:	189b      	adds	r3, r3, r2
 801fb30:	781b      	ldrb	r3, [r3, #0]
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d100      	bne.n	801fb38 <_printf_float+0x17c>
 801fb36:	e792      	b.n	801fa5e <_printf_float+0xa2>
 801fb38:	002b      	movs	r3, r5
 801fb3a:	222d      	movs	r2, #45	@ 0x2d
 801fb3c:	3343      	adds	r3, #67	@ 0x43
 801fb3e:	701a      	strb	r2, [r3, #0]
 801fb40:	e78d      	b.n	801fa5e <_printf_float+0xa2>
 801fb42:	2c47      	cmp	r4, #71	@ 0x47
 801fb44:	d1b8      	bne.n	801fab8 <_printf_float+0xfc>
 801fb46:	2b00      	cmp	r3, #0
 801fb48:	d1b6      	bne.n	801fab8 <_printf_float+0xfc>
 801fb4a:	3301      	adds	r3, #1
 801fb4c:	e7b3      	b.n	801fab6 <_printf_float+0xfa>
 801fb4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb50:	0011      	movs	r1, r2
 801fb52:	2b65      	cmp	r3, #101	@ 0x65
 801fb54:	d9d7      	bls.n	801fb06 <_printf_float+0x14a>
 801fb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb58:	2b66      	cmp	r3, #102	@ 0x66
 801fb5a:	d11a      	bne.n	801fb92 <_printf_float+0x1d6>
 801fb5c:	686b      	ldr	r3, [r5, #4]
 801fb5e:	2a00      	cmp	r2, #0
 801fb60:	dd09      	ble.n	801fb76 <_printf_float+0x1ba>
 801fb62:	612a      	str	r2, [r5, #16]
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	d102      	bne.n	801fb6e <_printf_float+0x1b2>
 801fb68:	6829      	ldr	r1, [r5, #0]
 801fb6a:	07c9      	lsls	r1, r1, #31
 801fb6c:	d50b      	bpl.n	801fb86 <_printf_float+0x1ca>
 801fb6e:	3301      	adds	r3, #1
 801fb70:	189b      	adds	r3, r3, r2
 801fb72:	612b      	str	r3, [r5, #16]
 801fb74:	e007      	b.n	801fb86 <_printf_float+0x1ca>
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	d103      	bne.n	801fb82 <_printf_float+0x1c6>
 801fb7a:	2201      	movs	r2, #1
 801fb7c:	6829      	ldr	r1, [r5, #0]
 801fb7e:	4211      	tst	r1, r2
 801fb80:	d000      	beq.n	801fb84 <_printf_float+0x1c8>
 801fb82:	1c9a      	adds	r2, r3, #2
 801fb84:	612a      	str	r2, [r5, #16]
 801fb86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fb88:	2400      	movs	r4, #0
 801fb8a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801fb8c:	e7cd      	b.n	801fb2a <_printf_float+0x16e>
 801fb8e:	2367      	movs	r3, #103	@ 0x67
 801fb90:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fb94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fb96:	4299      	cmp	r1, r3
 801fb98:	db06      	blt.n	801fba8 <_printf_float+0x1ec>
 801fb9a:	682b      	ldr	r3, [r5, #0]
 801fb9c:	6129      	str	r1, [r5, #16]
 801fb9e:	07db      	lsls	r3, r3, #31
 801fba0:	d5f1      	bpl.n	801fb86 <_printf_float+0x1ca>
 801fba2:	3101      	adds	r1, #1
 801fba4:	6129      	str	r1, [r5, #16]
 801fba6:	e7ee      	b.n	801fb86 <_printf_float+0x1ca>
 801fba8:	2201      	movs	r2, #1
 801fbaa:	2900      	cmp	r1, #0
 801fbac:	dce0      	bgt.n	801fb70 <_printf_float+0x1b4>
 801fbae:	1892      	adds	r2, r2, r2
 801fbb0:	1a52      	subs	r2, r2, r1
 801fbb2:	e7dd      	b.n	801fb70 <_printf_float+0x1b4>
 801fbb4:	682a      	ldr	r2, [r5, #0]
 801fbb6:	0553      	lsls	r3, r2, #21
 801fbb8:	d408      	bmi.n	801fbcc <_printf_float+0x210>
 801fbba:	692b      	ldr	r3, [r5, #16]
 801fbbc:	003a      	movs	r2, r7
 801fbbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fbc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fbc2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fbc4:	47a0      	blx	r4
 801fbc6:	3001      	adds	r0, #1
 801fbc8:	d129      	bne.n	801fc1e <_printf_float+0x262>
 801fbca:	e753      	b.n	801fa74 <_printf_float+0xb8>
 801fbcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fbce:	2b65      	cmp	r3, #101	@ 0x65
 801fbd0:	d800      	bhi.n	801fbd4 <_printf_float+0x218>
 801fbd2:	e0da      	b.n	801fd8a <_printf_float+0x3ce>
 801fbd4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801fbd6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801fbd8:	2200      	movs	r2, #0
 801fbda:	2300      	movs	r3, #0
 801fbdc:	f7e0 fc68 	bl	80004b0 <__aeabi_dcmpeq>
 801fbe0:	2800      	cmp	r0, #0
 801fbe2:	d033      	beq.n	801fc4c <_printf_float+0x290>
 801fbe4:	2301      	movs	r3, #1
 801fbe6:	4a37      	ldr	r2, [pc, #220]	@ (801fcc4 <_printf_float+0x308>)
 801fbe8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fbea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fbec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fbee:	47a0      	blx	r4
 801fbf0:	3001      	adds	r0, #1
 801fbf2:	d100      	bne.n	801fbf6 <_printf_float+0x23a>
 801fbf4:	e73e      	b.n	801fa74 <_printf_float+0xb8>
 801fbf6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801fbf8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fbfa:	42b3      	cmp	r3, r6
 801fbfc:	db02      	blt.n	801fc04 <_printf_float+0x248>
 801fbfe:	682b      	ldr	r3, [r5, #0]
 801fc00:	07db      	lsls	r3, r3, #31
 801fc02:	d50c      	bpl.n	801fc1e <_printf_float+0x262>
 801fc04:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fc06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fc08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fc0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fc0e:	47a0      	blx	r4
 801fc10:	2400      	movs	r4, #0
 801fc12:	3001      	adds	r0, #1
 801fc14:	d100      	bne.n	801fc18 <_printf_float+0x25c>
 801fc16:	e72d      	b.n	801fa74 <_printf_float+0xb8>
 801fc18:	1e73      	subs	r3, r6, #1
 801fc1a:	42a3      	cmp	r3, r4
 801fc1c:	dc0a      	bgt.n	801fc34 <_printf_float+0x278>
 801fc1e:	682b      	ldr	r3, [r5, #0]
 801fc20:	079b      	lsls	r3, r3, #30
 801fc22:	d500      	bpl.n	801fc26 <_printf_float+0x26a>
 801fc24:	e105      	b.n	801fe32 <_printf_float+0x476>
 801fc26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fc28:	68e8      	ldr	r0, [r5, #12]
 801fc2a:	4298      	cmp	r0, r3
 801fc2c:	db00      	blt.n	801fc30 <_printf_float+0x274>
 801fc2e:	e723      	b.n	801fa78 <_printf_float+0xbc>
 801fc30:	0018      	movs	r0, r3
 801fc32:	e721      	b.n	801fa78 <_printf_float+0xbc>
 801fc34:	002a      	movs	r2, r5
 801fc36:	2301      	movs	r3, #1
 801fc38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fc3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fc3e:	321a      	adds	r2, #26
 801fc40:	47b8      	blx	r7
 801fc42:	3001      	adds	r0, #1
 801fc44:	d100      	bne.n	801fc48 <_printf_float+0x28c>
 801fc46:	e715      	b.n	801fa74 <_printf_float+0xb8>
 801fc48:	3401      	adds	r4, #1
 801fc4a:	e7e5      	b.n	801fc18 <_printf_float+0x25c>
 801fc4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc4e:	2b00      	cmp	r3, #0
 801fc50:	dc3a      	bgt.n	801fcc8 <_printf_float+0x30c>
 801fc52:	2301      	movs	r3, #1
 801fc54:	4a1b      	ldr	r2, [pc, #108]	@ (801fcc4 <_printf_float+0x308>)
 801fc56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fc5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fc5c:	47a0      	blx	r4
 801fc5e:	3001      	adds	r0, #1
 801fc60:	d100      	bne.n	801fc64 <_printf_float+0x2a8>
 801fc62:	e707      	b.n	801fa74 <_printf_float+0xb8>
 801fc64:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801fc66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc68:	4333      	orrs	r3, r6
 801fc6a:	d102      	bne.n	801fc72 <_printf_float+0x2b6>
 801fc6c:	682b      	ldr	r3, [r5, #0]
 801fc6e:	07db      	lsls	r3, r3, #31
 801fc70:	d5d5      	bpl.n	801fc1e <_printf_float+0x262>
 801fc72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fc74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fc76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fc7a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fc7c:	47a0      	blx	r4
 801fc7e:	2300      	movs	r3, #0
 801fc80:	3001      	adds	r0, #1
 801fc82:	d100      	bne.n	801fc86 <_printf_float+0x2ca>
 801fc84:	e6f6      	b.n	801fa74 <_printf_float+0xb8>
 801fc86:	930c      	str	r3, [sp, #48]	@ 0x30
 801fc88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fc8c:	425b      	negs	r3, r3
 801fc8e:	4293      	cmp	r3, r2
 801fc90:	dc01      	bgt.n	801fc96 <_printf_float+0x2da>
 801fc92:	0033      	movs	r3, r6
 801fc94:	e792      	b.n	801fbbc <_printf_float+0x200>
 801fc96:	002a      	movs	r2, r5
 801fc98:	2301      	movs	r3, #1
 801fc9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fc9e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fca0:	321a      	adds	r2, #26
 801fca2:	47a0      	blx	r4
 801fca4:	3001      	adds	r0, #1
 801fca6:	d100      	bne.n	801fcaa <_printf_float+0x2ee>
 801fca8:	e6e4      	b.n	801fa74 <_printf_float+0xb8>
 801fcaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fcac:	3301      	adds	r3, #1
 801fcae:	e7ea      	b.n	801fc86 <_printf_float+0x2ca>
 801fcb0:	7fefffff 	.word	0x7fefffff
 801fcb4:	080263c1 	.word	0x080263c1
 801fcb8:	080263c5 	.word	0x080263c5
 801fcbc:	080263c9 	.word	0x080263c9
 801fcc0:	080263cd 	.word	0x080263cd
 801fcc4:	080263d1 	.word	0x080263d1
 801fcc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fcca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801fccc:	930c      	str	r3, [sp, #48]	@ 0x30
 801fcce:	429e      	cmp	r6, r3
 801fcd0:	dd00      	ble.n	801fcd4 <_printf_float+0x318>
 801fcd2:	001e      	movs	r6, r3
 801fcd4:	2e00      	cmp	r6, #0
 801fcd6:	dc31      	bgt.n	801fd3c <_printf_float+0x380>
 801fcd8:	43f3      	mvns	r3, r6
 801fcda:	2400      	movs	r4, #0
 801fcdc:	17db      	asrs	r3, r3, #31
 801fcde:	4033      	ands	r3, r6
 801fce0:	930e      	str	r3, [sp, #56]	@ 0x38
 801fce2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801fce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fce6:	1af3      	subs	r3, r6, r3
 801fce8:	42a3      	cmp	r3, r4
 801fcea:	dc30      	bgt.n	801fd4e <_printf_float+0x392>
 801fcec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fcee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fcf0:	429a      	cmp	r2, r3
 801fcf2:	dc38      	bgt.n	801fd66 <_printf_float+0x3aa>
 801fcf4:	682b      	ldr	r3, [r5, #0]
 801fcf6:	07db      	lsls	r3, r3, #31
 801fcf8:	d435      	bmi.n	801fd66 <_printf_float+0x3aa>
 801fcfa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fcfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fcfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fd00:	1b9b      	subs	r3, r3, r6
 801fd02:	1b14      	subs	r4, r2, r4
 801fd04:	429c      	cmp	r4, r3
 801fd06:	dd00      	ble.n	801fd0a <_printf_float+0x34e>
 801fd08:	001c      	movs	r4, r3
 801fd0a:	2c00      	cmp	r4, #0
 801fd0c:	dc34      	bgt.n	801fd78 <_printf_float+0x3bc>
 801fd0e:	43e3      	mvns	r3, r4
 801fd10:	2600      	movs	r6, #0
 801fd12:	17db      	asrs	r3, r3, #31
 801fd14:	401c      	ands	r4, r3
 801fd16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fd18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fd1a:	1ad3      	subs	r3, r2, r3
 801fd1c:	1b1b      	subs	r3, r3, r4
 801fd1e:	42b3      	cmp	r3, r6
 801fd20:	dc00      	bgt.n	801fd24 <_printf_float+0x368>
 801fd22:	e77c      	b.n	801fc1e <_printf_float+0x262>
 801fd24:	002a      	movs	r2, r5
 801fd26:	2301      	movs	r3, #1
 801fd28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd2c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fd2e:	321a      	adds	r2, #26
 801fd30:	47b8      	blx	r7
 801fd32:	3001      	adds	r0, #1
 801fd34:	d100      	bne.n	801fd38 <_printf_float+0x37c>
 801fd36:	e69d      	b.n	801fa74 <_printf_float+0xb8>
 801fd38:	3601      	adds	r6, #1
 801fd3a:	e7ec      	b.n	801fd16 <_printf_float+0x35a>
 801fd3c:	0033      	movs	r3, r6
 801fd3e:	003a      	movs	r2, r7
 801fd40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd44:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fd46:	47a0      	blx	r4
 801fd48:	3001      	adds	r0, #1
 801fd4a:	d1c5      	bne.n	801fcd8 <_printf_float+0x31c>
 801fd4c:	e692      	b.n	801fa74 <_printf_float+0xb8>
 801fd4e:	002a      	movs	r2, r5
 801fd50:	2301      	movs	r3, #1
 801fd52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd56:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fd58:	321a      	adds	r2, #26
 801fd5a:	47b0      	blx	r6
 801fd5c:	3001      	adds	r0, #1
 801fd5e:	d100      	bne.n	801fd62 <_printf_float+0x3a6>
 801fd60:	e688      	b.n	801fa74 <_printf_float+0xb8>
 801fd62:	3401      	adds	r4, #1
 801fd64:	e7bd      	b.n	801fce2 <_printf_float+0x326>
 801fd66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fd68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fd6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd6e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fd70:	47a0      	blx	r4
 801fd72:	3001      	adds	r0, #1
 801fd74:	d1c1      	bne.n	801fcfa <_printf_float+0x33e>
 801fd76:	e67d      	b.n	801fa74 <_printf_float+0xb8>
 801fd78:	19ba      	adds	r2, r7, r6
 801fd7a:	0023      	movs	r3, r4
 801fd7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd80:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fd82:	47b0      	blx	r6
 801fd84:	3001      	adds	r0, #1
 801fd86:	d1c2      	bne.n	801fd0e <_printf_float+0x352>
 801fd88:	e674      	b.n	801fa74 <_printf_float+0xb8>
 801fd8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fd8c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fd8e:	2b01      	cmp	r3, #1
 801fd90:	dc02      	bgt.n	801fd98 <_printf_float+0x3dc>
 801fd92:	2301      	movs	r3, #1
 801fd94:	421a      	tst	r2, r3
 801fd96:	d039      	beq.n	801fe0c <_printf_float+0x450>
 801fd98:	2301      	movs	r3, #1
 801fd9a:	003a      	movs	r2, r7
 801fd9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fda0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fda2:	47b0      	blx	r6
 801fda4:	3001      	adds	r0, #1
 801fda6:	d100      	bne.n	801fdaa <_printf_float+0x3ee>
 801fda8:	e664      	b.n	801fa74 <_printf_float+0xb8>
 801fdaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fdac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fdae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fdb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fdb2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fdb4:	47b0      	blx	r6
 801fdb6:	3001      	adds	r0, #1
 801fdb8:	d100      	bne.n	801fdbc <_printf_float+0x400>
 801fdba:	e65b      	b.n	801fa74 <_printf_float+0xb8>
 801fdbc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801fdbe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801fdc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fdc2:	2200      	movs	r2, #0
 801fdc4:	3b01      	subs	r3, #1
 801fdc6:	930c      	str	r3, [sp, #48]	@ 0x30
 801fdc8:	2300      	movs	r3, #0
 801fdca:	f7e0 fb71 	bl	80004b0 <__aeabi_dcmpeq>
 801fdce:	2800      	cmp	r0, #0
 801fdd0:	d11a      	bne.n	801fe08 <_printf_float+0x44c>
 801fdd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fdd4:	1c7a      	adds	r2, r7, #1
 801fdd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fdd8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fdda:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fddc:	47b0      	blx	r6
 801fdde:	3001      	adds	r0, #1
 801fde0:	d10e      	bne.n	801fe00 <_printf_float+0x444>
 801fde2:	e647      	b.n	801fa74 <_printf_float+0xb8>
 801fde4:	002a      	movs	r2, r5
 801fde6:	2301      	movs	r3, #1
 801fde8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fdea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fdec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fdee:	321a      	adds	r2, #26
 801fdf0:	47b8      	blx	r7
 801fdf2:	3001      	adds	r0, #1
 801fdf4:	d100      	bne.n	801fdf8 <_printf_float+0x43c>
 801fdf6:	e63d      	b.n	801fa74 <_printf_float+0xb8>
 801fdf8:	3601      	adds	r6, #1
 801fdfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fdfc:	429e      	cmp	r6, r3
 801fdfe:	dbf1      	blt.n	801fde4 <_printf_float+0x428>
 801fe00:	002a      	movs	r2, r5
 801fe02:	0023      	movs	r3, r4
 801fe04:	3250      	adds	r2, #80	@ 0x50
 801fe06:	e6da      	b.n	801fbbe <_printf_float+0x202>
 801fe08:	2600      	movs	r6, #0
 801fe0a:	e7f6      	b.n	801fdfa <_printf_float+0x43e>
 801fe0c:	003a      	movs	r2, r7
 801fe0e:	e7e2      	b.n	801fdd6 <_printf_float+0x41a>
 801fe10:	002a      	movs	r2, r5
 801fe12:	2301      	movs	r3, #1
 801fe14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fe18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fe1a:	3219      	adds	r2, #25
 801fe1c:	47b0      	blx	r6
 801fe1e:	3001      	adds	r0, #1
 801fe20:	d100      	bne.n	801fe24 <_printf_float+0x468>
 801fe22:	e627      	b.n	801fa74 <_printf_float+0xb8>
 801fe24:	3401      	adds	r4, #1
 801fe26:	68eb      	ldr	r3, [r5, #12]
 801fe28:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801fe2a:	1a9b      	subs	r3, r3, r2
 801fe2c:	42a3      	cmp	r3, r4
 801fe2e:	dcef      	bgt.n	801fe10 <_printf_float+0x454>
 801fe30:	e6f9      	b.n	801fc26 <_printf_float+0x26a>
 801fe32:	2400      	movs	r4, #0
 801fe34:	e7f7      	b.n	801fe26 <_printf_float+0x46a>
 801fe36:	46c0      	nop			@ (mov r8, r8)

0801fe38 <_printf_common>:
 801fe38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fe3a:	0016      	movs	r6, r2
 801fe3c:	9301      	str	r3, [sp, #4]
 801fe3e:	688a      	ldr	r2, [r1, #8]
 801fe40:	690b      	ldr	r3, [r1, #16]
 801fe42:	000c      	movs	r4, r1
 801fe44:	9000      	str	r0, [sp, #0]
 801fe46:	4293      	cmp	r3, r2
 801fe48:	da00      	bge.n	801fe4c <_printf_common+0x14>
 801fe4a:	0013      	movs	r3, r2
 801fe4c:	0022      	movs	r2, r4
 801fe4e:	6033      	str	r3, [r6, #0]
 801fe50:	3243      	adds	r2, #67	@ 0x43
 801fe52:	7812      	ldrb	r2, [r2, #0]
 801fe54:	2a00      	cmp	r2, #0
 801fe56:	d001      	beq.n	801fe5c <_printf_common+0x24>
 801fe58:	3301      	adds	r3, #1
 801fe5a:	6033      	str	r3, [r6, #0]
 801fe5c:	6823      	ldr	r3, [r4, #0]
 801fe5e:	069b      	lsls	r3, r3, #26
 801fe60:	d502      	bpl.n	801fe68 <_printf_common+0x30>
 801fe62:	6833      	ldr	r3, [r6, #0]
 801fe64:	3302      	adds	r3, #2
 801fe66:	6033      	str	r3, [r6, #0]
 801fe68:	6822      	ldr	r2, [r4, #0]
 801fe6a:	2306      	movs	r3, #6
 801fe6c:	0015      	movs	r5, r2
 801fe6e:	401d      	ands	r5, r3
 801fe70:	421a      	tst	r2, r3
 801fe72:	d027      	beq.n	801fec4 <_printf_common+0x8c>
 801fe74:	0023      	movs	r3, r4
 801fe76:	3343      	adds	r3, #67	@ 0x43
 801fe78:	781b      	ldrb	r3, [r3, #0]
 801fe7a:	1e5a      	subs	r2, r3, #1
 801fe7c:	4193      	sbcs	r3, r2
 801fe7e:	6822      	ldr	r2, [r4, #0]
 801fe80:	0692      	lsls	r2, r2, #26
 801fe82:	d430      	bmi.n	801fee6 <_printf_common+0xae>
 801fe84:	0022      	movs	r2, r4
 801fe86:	9901      	ldr	r1, [sp, #4]
 801fe88:	9800      	ldr	r0, [sp, #0]
 801fe8a:	9d08      	ldr	r5, [sp, #32]
 801fe8c:	3243      	adds	r2, #67	@ 0x43
 801fe8e:	47a8      	blx	r5
 801fe90:	3001      	adds	r0, #1
 801fe92:	d025      	beq.n	801fee0 <_printf_common+0xa8>
 801fe94:	2206      	movs	r2, #6
 801fe96:	6823      	ldr	r3, [r4, #0]
 801fe98:	2500      	movs	r5, #0
 801fe9a:	4013      	ands	r3, r2
 801fe9c:	2b04      	cmp	r3, #4
 801fe9e:	d105      	bne.n	801feac <_printf_common+0x74>
 801fea0:	6833      	ldr	r3, [r6, #0]
 801fea2:	68e5      	ldr	r5, [r4, #12]
 801fea4:	1aed      	subs	r5, r5, r3
 801fea6:	43eb      	mvns	r3, r5
 801fea8:	17db      	asrs	r3, r3, #31
 801feaa:	401d      	ands	r5, r3
 801feac:	68a3      	ldr	r3, [r4, #8]
 801feae:	6922      	ldr	r2, [r4, #16]
 801feb0:	4293      	cmp	r3, r2
 801feb2:	dd01      	ble.n	801feb8 <_printf_common+0x80>
 801feb4:	1a9b      	subs	r3, r3, r2
 801feb6:	18ed      	adds	r5, r5, r3
 801feb8:	2600      	movs	r6, #0
 801feba:	42b5      	cmp	r5, r6
 801febc:	d120      	bne.n	801ff00 <_printf_common+0xc8>
 801febe:	2000      	movs	r0, #0
 801fec0:	e010      	b.n	801fee4 <_printf_common+0xac>
 801fec2:	3501      	adds	r5, #1
 801fec4:	68e3      	ldr	r3, [r4, #12]
 801fec6:	6832      	ldr	r2, [r6, #0]
 801fec8:	1a9b      	subs	r3, r3, r2
 801feca:	42ab      	cmp	r3, r5
 801fecc:	ddd2      	ble.n	801fe74 <_printf_common+0x3c>
 801fece:	0022      	movs	r2, r4
 801fed0:	2301      	movs	r3, #1
 801fed2:	9901      	ldr	r1, [sp, #4]
 801fed4:	9800      	ldr	r0, [sp, #0]
 801fed6:	9f08      	ldr	r7, [sp, #32]
 801fed8:	3219      	adds	r2, #25
 801feda:	47b8      	blx	r7
 801fedc:	3001      	adds	r0, #1
 801fede:	d1f0      	bne.n	801fec2 <_printf_common+0x8a>
 801fee0:	2001      	movs	r0, #1
 801fee2:	4240      	negs	r0, r0
 801fee4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fee6:	2030      	movs	r0, #48	@ 0x30
 801fee8:	18e1      	adds	r1, r4, r3
 801feea:	3143      	adds	r1, #67	@ 0x43
 801feec:	7008      	strb	r0, [r1, #0]
 801feee:	0021      	movs	r1, r4
 801fef0:	1c5a      	adds	r2, r3, #1
 801fef2:	3145      	adds	r1, #69	@ 0x45
 801fef4:	7809      	ldrb	r1, [r1, #0]
 801fef6:	18a2      	adds	r2, r4, r2
 801fef8:	3243      	adds	r2, #67	@ 0x43
 801fefa:	3302      	adds	r3, #2
 801fefc:	7011      	strb	r1, [r2, #0]
 801fefe:	e7c1      	b.n	801fe84 <_printf_common+0x4c>
 801ff00:	0022      	movs	r2, r4
 801ff02:	2301      	movs	r3, #1
 801ff04:	9901      	ldr	r1, [sp, #4]
 801ff06:	9800      	ldr	r0, [sp, #0]
 801ff08:	9f08      	ldr	r7, [sp, #32]
 801ff0a:	321a      	adds	r2, #26
 801ff0c:	47b8      	blx	r7
 801ff0e:	3001      	adds	r0, #1
 801ff10:	d0e6      	beq.n	801fee0 <_printf_common+0xa8>
 801ff12:	3601      	adds	r6, #1
 801ff14:	e7d1      	b.n	801feba <_printf_common+0x82>
	...

0801ff18 <_printf_i>:
 801ff18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff1a:	b08b      	sub	sp, #44	@ 0x2c
 801ff1c:	9206      	str	r2, [sp, #24]
 801ff1e:	000a      	movs	r2, r1
 801ff20:	3243      	adds	r2, #67	@ 0x43
 801ff22:	9307      	str	r3, [sp, #28]
 801ff24:	9005      	str	r0, [sp, #20]
 801ff26:	9203      	str	r2, [sp, #12]
 801ff28:	7e0a      	ldrb	r2, [r1, #24]
 801ff2a:	000c      	movs	r4, r1
 801ff2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ff2e:	2a78      	cmp	r2, #120	@ 0x78
 801ff30:	d809      	bhi.n	801ff46 <_printf_i+0x2e>
 801ff32:	2a62      	cmp	r2, #98	@ 0x62
 801ff34:	d80b      	bhi.n	801ff4e <_printf_i+0x36>
 801ff36:	2a00      	cmp	r2, #0
 801ff38:	d100      	bne.n	801ff3c <_printf_i+0x24>
 801ff3a:	e0bc      	b.n	80200b6 <_printf_i+0x19e>
 801ff3c:	497b      	ldr	r1, [pc, #492]	@ (802012c <_printf_i+0x214>)
 801ff3e:	9104      	str	r1, [sp, #16]
 801ff40:	2a58      	cmp	r2, #88	@ 0x58
 801ff42:	d100      	bne.n	801ff46 <_printf_i+0x2e>
 801ff44:	e090      	b.n	8020068 <_printf_i+0x150>
 801ff46:	0025      	movs	r5, r4
 801ff48:	3542      	adds	r5, #66	@ 0x42
 801ff4a:	702a      	strb	r2, [r5, #0]
 801ff4c:	e022      	b.n	801ff94 <_printf_i+0x7c>
 801ff4e:	0010      	movs	r0, r2
 801ff50:	3863      	subs	r0, #99	@ 0x63
 801ff52:	2815      	cmp	r0, #21
 801ff54:	d8f7      	bhi.n	801ff46 <_printf_i+0x2e>
 801ff56:	f7e0 f91b 	bl	8000190 <__gnu_thumb1_case_shi>
 801ff5a:	0016      	.short	0x0016
 801ff5c:	fff6001f 	.word	0xfff6001f
 801ff60:	fff6fff6 	.word	0xfff6fff6
 801ff64:	001ffff6 	.word	0x001ffff6
 801ff68:	fff6fff6 	.word	0xfff6fff6
 801ff6c:	fff6fff6 	.word	0xfff6fff6
 801ff70:	003600a1 	.word	0x003600a1
 801ff74:	fff60080 	.word	0xfff60080
 801ff78:	00b2fff6 	.word	0x00b2fff6
 801ff7c:	0036fff6 	.word	0x0036fff6
 801ff80:	fff6fff6 	.word	0xfff6fff6
 801ff84:	0084      	.short	0x0084
 801ff86:	0025      	movs	r5, r4
 801ff88:	681a      	ldr	r2, [r3, #0]
 801ff8a:	3542      	adds	r5, #66	@ 0x42
 801ff8c:	1d11      	adds	r1, r2, #4
 801ff8e:	6019      	str	r1, [r3, #0]
 801ff90:	6813      	ldr	r3, [r2, #0]
 801ff92:	702b      	strb	r3, [r5, #0]
 801ff94:	2301      	movs	r3, #1
 801ff96:	e0a0      	b.n	80200da <_printf_i+0x1c2>
 801ff98:	6818      	ldr	r0, [r3, #0]
 801ff9a:	6809      	ldr	r1, [r1, #0]
 801ff9c:	1d02      	adds	r2, r0, #4
 801ff9e:	060d      	lsls	r5, r1, #24
 801ffa0:	d50b      	bpl.n	801ffba <_printf_i+0xa2>
 801ffa2:	6806      	ldr	r6, [r0, #0]
 801ffa4:	601a      	str	r2, [r3, #0]
 801ffa6:	2e00      	cmp	r6, #0
 801ffa8:	da03      	bge.n	801ffb2 <_printf_i+0x9a>
 801ffaa:	232d      	movs	r3, #45	@ 0x2d
 801ffac:	9a03      	ldr	r2, [sp, #12]
 801ffae:	4276      	negs	r6, r6
 801ffb0:	7013      	strb	r3, [r2, #0]
 801ffb2:	4b5e      	ldr	r3, [pc, #376]	@ (802012c <_printf_i+0x214>)
 801ffb4:	270a      	movs	r7, #10
 801ffb6:	9304      	str	r3, [sp, #16]
 801ffb8:	e018      	b.n	801ffec <_printf_i+0xd4>
 801ffba:	6806      	ldr	r6, [r0, #0]
 801ffbc:	601a      	str	r2, [r3, #0]
 801ffbe:	0649      	lsls	r1, r1, #25
 801ffc0:	d5f1      	bpl.n	801ffa6 <_printf_i+0x8e>
 801ffc2:	b236      	sxth	r6, r6
 801ffc4:	e7ef      	b.n	801ffa6 <_printf_i+0x8e>
 801ffc6:	6808      	ldr	r0, [r1, #0]
 801ffc8:	6819      	ldr	r1, [r3, #0]
 801ffca:	c940      	ldmia	r1!, {r6}
 801ffcc:	0605      	lsls	r5, r0, #24
 801ffce:	d402      	bmi.n	801ffd6 <_printf_i+0xbe>
 801ffd0:	0640      	lsls	r0, r0, #25
 801ffd2:	d500      	bpl.n	801ffd6 <_printf_i+0xbe>
 801ffd4:	b2b6      	uxth	r6, r6
 801ffd6:	6019      	str	r1, [r3, #0]
 801ffd8:	4b54      	ldr	r3, [pc, #336]	@ (802012c <_printf_i+0x214>)
 801ffda:	270a      	movs	r7, #10
 801ffdc:	9304      	str	r3, [sp, #16]
 801ffde:	2a6f      	cmp	r2, #111	@ 0x6f
 801ffe0:	d100      	bne.n	801ffe4 <_printf_i+0xcc>
 801ffe2:	3f02      	subs	r7, #2
 801ffe4:	0023      	movs	r3, r4
 801ffe6:	2200      	movs	r2, #0
 801ffe8:	3343      	adds	r3, #67	@ 0x43
 801ffea:	701a      	strb	r2, [r3, #0]
 801ffec:	6863      	ldr	r3, [r4, #4]
 801ffee:	60a3      	str	r3, [r4, #8]
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	db03      	blt.n	801fffc <_printf_i+0xe4>
 801fff4:	2104      	movs	r1, #4
 801fff6:	6822      	ldr	r2, [r4, #0]
 801fff8:	438a      	bics	r2, r1
 801fffa:	6022      	str	r2, [r4, #0]
 801fffc:	2e00      	cmp	r6, #0
 801fffe:	d102      	bne.n	8020006 <_printf_i+0xee>
 8020000:	9d03      	ldr	r5, [sp, #12]
 8020002:	2b00      	cmp	r3, #0
 8020004:	d00c      	beq.n	8020020 <_printf_i+0x108>
 8020006:	9d03      	ldr	r5, [sp, #12]
 8020008:	0030      	movs	r0, r6
 802000a:	0039      	movs	r1, r7
 802000c:	f7e0 f950 	bl	80002b0 <__aeabi_uidivmod>
 8020010:	9b04      	ldr	r3, [sp, #16]
 8020012:	3d01      	subs	r5, #1
 8020014:	5c5b      	ldrb	r3, [r3, r1]
 8020016:	702b      	strb	r3, [r5, #0]
 8020018:	0033      	movs	r3, r6
 802001a:	0006      	movs	r6, r0
 802001c:	429f      	cmp	r7, r3
 802001e:	d9f3      	bls.n	8020008 <_printf_i+0xf0>
 8020020:	2f08      	cmp	r7, #8
 8020022:	d109      	bne.n	8020038 <_printf_i+0x120>
 8020024:	6823      	ldr	r3, [r4, #0]
 8020026:	07db      	lsls	r3, r3, #31
 8020028:	d506      	bpl.n	8020038 <_printf_i+0x120>
 802002a:	6862      	ldr	r2, [r4, #4]
 802002c:	6923      	ldr	r3, [r4, #16]
 802002e:	429a      	cmp	r2, r3
 8020030:	dc02      	bgt.n	8020038 <_printf_i+0x120>
 8020032:	2330      	movs	r3, #48	@ 0x30
 8020034:	3d01      	subs	r5, #1
 8020036:	702b      	strb	r3, [r5, #0]
 8020038:	9b03      	ldr	r3, [sp, #12]
 802003a:	1b5b      	subs	r3, r3, r5
 802003c:	6123      	str	r3, [r4, #16]
 802003e:	9b07      	ldr	r3, [sp, #28]
 8020040:	0021      	movs	r1, r4
 8020042:	9300      	str	r3, [sp, #0]
 8020044:	9805      	ldr	r0, [sp, #20]
 8020046:	9b06      	ldr	r3, [sp, #24]
 8020048:	aa09      	add	r2, sp, #36	@ 0x24
 802004a:	f7ff fef5 	bl	801fe38 <_printf_common>
 802004e:	3001      	adds	r0, #1
 8020050:	d148      	bne.n	80200e4 <_printf_i+0x1cc>
 8020052:	2001      	movs	r0, #1
 8020054:	4240      	negs	r0, r0
 8020056:	b00b      	add	sp, #44	@ 0x2c
 8020058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802005a:	2220      	movs	r2, #32
 802005c:	6809      	ldr	r1, [r1, #0]
 802005e:	430a      	orrs	r2, r1
 8020060:	6022      	str	r2, [r4, #0]
 8020062:	2278      	movs	r2, #120	@ 0x78
 8020064:	4932      	ldr	r1, [pc, #200]	@ (8020130 <_printf_i+0x218>)
 8020066:	9104      	str	r1, [sp, #16]
 8020068:	0021      	movs	r1, r4
 802006a:	3145      	adds	r1, #69	@ 0x45
 802006c:	700a      	strb	r2, [r1, #0]
 802006e:	6819      	ldr	r1, [r3, #0]
 8020070:	6822      	ldr	r2, [r4, #0]
 8020072:	c940      	ldmia	r1!, {r6}
 8020074:	0610      	lsls	r0, r2, #24
 8020076:	d402      	bmi.n	802007e <_printf_i+0x166>
 8020078:	0650      	lsls	r0, r2, #25
 802007a:	d500      	bpl.n	802007e <_printf_i+0x166>
 802007c:	b2b6      	uxth	r6, r6
 802007e:	6019      	str	r1, [r3, #0]
 8020080:	07d3      	lsls	r3, r2, #31
 8020082:	d502      	bpl.n	802008a <_printf_i+0x172>
 8020084:	2320      	movs	r3, #32
 8020086:	4313      	orrs	r3, r2
 8020088:	6023      	str	r3, [r4, #0]
 802008a:	2e00      	cmp	r6, #0
 802008c:	d001      	beq.n	8020092 <_printf_i+0x17a>
 802008e:	2710      	movs	r7, #16
 8020090:	e7a8      	b.n	801ffe4 <_printf_i+0xcc>
 8020092:	2220      	movs	r2, #32
 8020094:	6823      	ldr	r3, [r4, #0]
 8020096:	4393      	bics	r3, r2
 8020098:	6023      	str	r3, [r4, #0]
 802009a:	e7f8      	b.n	802008e <_printf_i+0x176>
 802009c:	681a      	ldr	r2, [r3, #0]
 802009e:	680d      	ldr	r5, [r1, #0]
 80200a0:	1d10      	adds	r0, r2, #4
 80200a2:	6949      	ldr	r1, [r1, #20]
 80200a4:	6018      	str	r0, [r3, #0]
 80200a6:	6813      	ldr	r3, [r2, #0]
 80200a8:	062e      	lsls	r6, r5, #24
 80200aa:	d501      	bpl.n	80200b0 <_printf_i+0x198>
 80200ac:	6019      	str	r1, [r3, #0]
 80200ae:	e002      	b.n	80200b6 <_printf_i+0x19e>
 80200b0:	066d      	lsls	r5, r5, #25
 80200b2:	d5fb      	bpl.n	80200ac <_printf_i+0x194>
 80200b4:	8019      	strh	r1, [r3, #0]
 80200b6:	2300      	movs	r3, #0
 80200b8:	9d03      	ldr	r5, [sp, #12]
 80200ba:	6123      	str	r3, [r4, #16]
 80200bc:	e7bf      	b.n	802003e <_printf_i+0x126>
 80200be:	681a      	ldr	r2, [r3, #0]
 80200c0:	1d11      	adds	r1, r2, #4
 80200c2:	6019      	str	r1, [r3, #0]
 80200c4:	6815      	ldr	r5, [r2, #0]
 80200c6:	2100      	movs	r1, #0
 80200c8:	0028      	movs	r0, r5
 80200ca:	6862      	ldr	r2, [r4, #4]
 80200cc:	f000 fb7b 	bl	80207c6 <memchr>
 80200d0:	2800      	cmp	r0, #0
 80200d2:	d001      	beq.n	80200d8 <_printf_i+0x1c0>
 80200d4:	1b40      	subs	r0, r0, r5
 80200d6:	6060      	str	r0, [r4, #4]
 80200d8:	6863      	ldr	r3, [r4, #4]
 80200da:	6123      	str	r3, [r4, #16]
 80200dc:	2300      	movs	r3, #0
 80200de:	9a03      	ldr	r2, [sp, #12]
 80200e0:	7013      	strb	r3, [r2, #0]
 80200e2:	e7ac      	b.n	802003e <_printf_i+0x126>
 80200e4:	002a      	movs	r2, r5
 80200e6:	6923      	ldr	r3, [r4, #16]
 80200e8:	9906      	ldr	r1, [sp, #24]
 80200ea:	9805      	ldr	r0, [sp, #20]
 80200ec:	9d07      	ldr	r5, [sp, #28]
 80200ee:	47a8      	blx	r5
 80200f0:	3001      	adds	r0, #1
 80200f2:	d0ae      	beq.n	8020052 <_printf_i+0x13a>
 80200f4:	6823      	ldr	r3, [r4, #0]
 80200f6:	079b      	lsls	r3, r3, #30
 80200f8:	d415      	bmi.n	8020126 <_printf_i+0x20e>
 80200fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80200fc:	68e0      	ldr	r0, [r4, #12]
 80200fe:	4298      	cmp	r0, r3
 8020100:	daa9      	bge.n	8020056 <_printf_i+0x13e>
 8020102:	0018      	movs	r0, r3
 8020104:	e7a7      	b.n	8020056 <_printf_i+0x13e>
 8020106:	0022      	movs	r2, r4
 8020108:	2301      	movs	r3, #1
 802010a:	9906      	ldr	r1, [sp, #24]
 802010c:	9805      	ldr	r0, [sp, #20]
 802010e:	9e07      	ldr	r6, [sp, #28]
 8020110:	3219      	adds	r2, #25
 8020112:	47b0      	blx	r6
 8020114:	3001      	adds	r0, #1
 8020116:	d09c      	beq.n	8020052 <_printf_i+0x13a>
 8020118:	3501      	adds	r5, #1
 802011a:	68e3      	ldr	r3, [r4, #12]
 802011c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802011e:	1a9b      	subs	r3, r3, r2
 8020120:	42ab      	cmp	r3, r5
 8020122:	dcf0      	bgt.n	8020106 <_printf_i+0x1ee>
 8020124:	e7e9      	b.n	80200fa <_printf_i+0x1e2>
 8020126:	2500      	movs	r5, #0
 8020128:	e7f7      	b.n	802011a <_printf_i+0x202>
 802012a:	46c0      	nop			@ (mov r8, r8)
 802012c:	080263d3 	.word	0x080263d3
 8020130:	080263e4 	.word	0x080263e4

08020134 <std>:
 8020134:	2300      	movs	r3, #0
 8020136:	b510      	push	{r4, lr}
 8020138:	0004      	movs	r4, r0
 802013a:	6003      	str	r3, [r0, #0]
 802013c:	6043      	str	r3, [r0, #4]
 802013e:	6083      	str	r3, [r0, #8]
 8020140:	8181      	strh	r1, [r0, #12]
 8020142:	6643      	str	r3, [r0, #100]	@ 0x64
 8020144:	81c2      	strh	r2, [r0, #14]
 8020146:	6103      	str	r3, [r0, #16]
 8020148:	6143      	str	r3, [r0, #20]
 802014a:	6183      	str	r3, [r0, #24]
 802014c:	0019      	movs	r1, r3
 802014e:	2208      	movs	r2, #8
 8020150:	305c      	adds	r0, #92	@ 0x5c
 8020152:	f000 fa67 	bl	8020624 <memset>
 8020156:	4b0b      	ldr	r3, [pc, #44]	@ (8020184 <std+0x50>)
 8020158:	6224      	str	r4, [r4, #32]
 802015a:	6263      	str	r3, [r4, #36]	@ 0x24
 802015c:	4b0a      	ldr	r3, [pc, #40]	@ (8020188 <std+0x54>)
 802015e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020160:	4b0a      	ldr	r3, [pc, #40]	@ (802018c <std+0x58>)
 8020162:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020164:	4b0a      	ldr	r3, [pc, #40]	@ (8020190 <std+0x5c>)
 8020166:	6323      	str	r3, [r4, #48]	@ 0x30
 8020168:	4b0a      	ldr	r3, [pc, #40]	@ (8020194 <std+0x60>)
 802016a:	429c      	cmp	r4, r3
 802016c:	d005      	beq.n	802017a <std+0x46>
 802016e:	4b0a      	ldr	r3, [pc, #40]	@ (8020198 <std+0x64>)
 8020170:	429c      	cmp	r4, r3
 8020172:	d002      	beq.n	802017a <std+0x46>
 8020174:	4b09      	ldr	r3, [pc, #36]	@ (802019c <std+0x68>)
 8020176:	429c      	cmp	r4, r3
 8020178:	d103      	bne.n	8020182 <std+0x4e>
 802017a:	0020      	movs	r0, r4
 802017c:	3058      	adds	r0, #88	@ 0x58
 802017e:	f000 fb1f 	bl	80207c0 <__retarget_lock_init_recursive>
 8020182:	bd10      	pop	{r4, pc}
 8020184:	080203dd 	.word	0x080203dd
 8020188:	08020405 	.word	0x08020405
 802018c:	0802043d 	.word	0x0802043d
 8020190:	08020469 	.word	0x08020469
 8020194:	2000328c 	.word	0x2000328c
 8020198:	200032f4 	.word	0x200032f4
 802019c:	2000335c 	.word	0x2000335c

080201a0 <stdio_exit_handler>:
 80201a0:	b510      	push	{r4, lr}
 80201a2:	4a03      	ldr	r2, [pc, #12]	@ (80201b0 <stdio_exit_handler+0x10>)
 80201a4:	4903      	ldr	r1, [pc, #12]	@ (80201b4 <stdio_exit_handler+0x14>)
 80201a6:	4804      	ldr	r0, [pc, #16]	@ (80201b8 <stdio_exit_handler+0x18>)
 80201a8:	f000 f86c 	bl	8020284 <_fwalk_sglue>
 80201ac:	bd10      	pop	{r4, pc}
 80201ae:	46c0      	nop			@ (mov r8, r8)
 80201b0:	20000258 	.word	0x20000258
 80201b4:	08022de5 	.word	0x08022de5
 80201b8:	200003d4 	.word	0x200003d4

080201bc <cleanup_stdio>:
 80201bc:	6841      	ldr	r1, [r0, #4]
 80201be:	4b0b      	ldr	r3, [pc, #44]	@ (80201ec <cleanup_stdio+0x30>)
 80201c0:	b510      	push	{r4, lr}
 80201c2:	0004      	movs	r4, r0
 80201c4:	4299      	cmp	r1, r3
 80201c6:	d001      	beq.n	80201cc <cleanup_stdio+0x10>
 80201c8:	f002 fe0c 	bl	8022de4 <_fflush_r>
 80201cc:	68a1      	ldr	r1, [r4, #8]
 80201ce:	4b08      	ldr	r3, [pc, #32]	@ (80201f0 <cleanup_stdio+0x34>)
 80201d0:	4299      	cmp	r1, r3
 80201d2:	d002      	beq.n	80201da <cleanup_stdio+0x1e>
 80201d4:	0020      	movs	r0, r4
 80201d6:	f002 fe05 	bl	8022de4 <_fflush_r>
 80201da:	68e1      	ldr	r1, [r4, #12]
 80201dc:	4b05      	ldr	r3, [pc, #20]	@ (80201f4 <cleanup_stdio+0x38>)
 80201de:	4299      	cmp	r1, r3
 80201e0:	d002      	beq.n	80201e8 <cleanup_stdio+0x2c>
 80201e2:	0020      	movs	r0, r4
 80201e4:	f002 fdfe 	bl	8022de4 <_fflush_r>
 80201e8:	bd10      	pop	{r4, pc}
 80201ea:	46c0      	nop			@ (mov r8, r8)
 80201ec:	2000328c 	.word	0x2000328c
 80201f0:	200032f4 	.word	0x200032f4
 80201f4:	2000335c 	.word	0x2000335c

080201f8 <global_stdio_init.part.0>:
 80201f8:	b510      	push	{r4, lr}
 80201fa:	4b09      	ldr	r3, [pc, #36]	@ (8020220 <global_stdio_init.part.0+0x28>)
 80201fc:	4a09      	ldr	r2, [pc, #36]	@ (8020224 <global_stdio_init.part.0+0x2c>)
 80201fe:	2104      	movs	r1, #4
 8020200:	601a      	str	r2, [r3, #0]
 8020202:	4809      	ldr	r0, [pc, #36]	@ (8020228 <global_stdio_init.part.0+0x30>)
 8020204:	2200      	movs	r2, #0
 8020206:	f7ff ff95 	bl	8020134 <std>
 802020a:	2201      	movs	r2, #1
 802020c:	2109      	movs	r1, #9
 802020e:	4807      	ldr	r0, [pc, #28]	@ (802022c <global_stdio_init.part.0+0x34>)
 8020210:	f7ff ff90 	bl	8020134 <std>
 8020214:	2202      	movs	r2, #2
 8020216:	2112      	movs	r1, #18
 8020218:	4805      	ldr	r0, [pc, #20]	@ (8020230 <global_stdio_init.part.0+0x38>)
 802021a:	f7ff ff8b 	bl	8020134 <std>
 802021e:	bd10      	pop	{r4, pc}
 8020220:	200033c4 	.word	0x200033c4
 8020224:	080201a1 	.word	0x080201a1
 8020228:	2000328c 	.word	0x2000328c
 802022c:	200032f4 	.word	0x200032f4
 8020230:	2000335c 	.word	0x2000335c

08020234 <__sfp_lock_acquire>:
 8020234:	b510      	push	{r4, lr}
 8020236:	4802      	ldr	r0, [pc, #8]	@ (8020240 <__sfp_lock_acquire+0xc>)
 8020238:	f000 fac3 	bl	80207c2 <__retarget_lock_acquire_recursive>
 802023c:	bd10      	pop	{r4, pc}
 802023e:	46c0      	nop			@ (mov r8, r8)
 8020240:	200033cd 	.word	0x200033cd

08020244 <__sfp_lock_release>:
 8020244:	b510      	push	{r4, lr}
 8020246:	4802      	ldr	r0, [pc, #8]	@ (8020250 <__sfp_lock_release+0xc>)
 8020248:	f000 fabc 	bl	80207c4 <__retarget_lock_release_recursive>
 802024c:	bd10      	pop	{r4, pc}
 802024e:	46c0      	nop			@ (mov r8, r8)
 8020250:	200033cd 	.word	0x200033cd

08020254 <__sinit>:
 8020254:	b510      	push	{r4, lr}
 8020256:	0004      	movs	r4, r0
 8020258:	f7ff ffec 	bl	8020234 <__sfp_lock_acquire>
 802025c:	6a23      	ldr	r3, [r4, #32]
 802025e:	2b00      	cmp	r3, #0
 8020260:	d002      	beq.n	8020268 <__sinit+0x14>
 8020262:	f7ff ffef 	bl	8020244 <__sfp_lock_release>
 8020266:	bd10      	pop	{r4, pc}
 8020268:	4b04      	ldr	r3, [pc, #16]	@ (802027c <__sinit+0x28>)
 802026a:	6223      	str	r3, [r4, #32]
 802026c:	4b04      	ldr	r3, [pc, #16]	@ (8020280 <__sinit+0x2c>)
 802026e:	681b      	ldr	r3, [r3, #0]
 8020270:	2b00      	cmp	r3, #0
 8020272:	d1f6      	bne.n	8020262 <__sinit+0xe>
 8020274:	f7ff ffc0 	bl	80201f8 <global_stdio_init.part.0>
 8020278:	e7f3      	b.n	8020262 <__sinit+0xe>
 802027a:	46c0      	nop			@ (mov r8, r8)
 802027c:	080201bd 	.word	0x080201bd
 8020280:	200033c4 	.word	0x200033c4

08020284 <_fwalk_sglue>:
 8020284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020286:	0014      	movs	r4, r2
 8020288:	2600      	movs	r6, #0
 802028a:	9000      	str	r0, [sp, #0]
 802028c:	9101      	str	r1, [sp, #4]
 802028e:	68a5      	ldr	r5, [r4, #8]
 8020290:	6867      	ldr	r7, [r4, #4]
 8020292:	3f01      	subs	r7, #1
 8020294:	d504      	bpl.n	80202a0 <_fwalk_sglue+0x1c>
 8020296:	6824      	ldr	r4, [r4, #0]
 8020298:	2c00      	cmp	r4, #0
 802029a:	d1f8      	bne.n	802028e <_fwalk_sglue+0xa>
 802029c:	0030      	movs	r0, r6
 802029e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80202a0:	89ab      	ldrh	r3, [r5, #12]
 80202a2:	2b01      	cmp	r3, #1
 80202a4:	d908      	bls.n	80202b8 <_fwalk_sglue+0x34>
 80202a6:	220e      	movs	r2, #14
 80202a8:	5eab      	ldrsh	r3, [r5, r2]
 80202aa:	3301      	adds	r3, #1
 80202ac:	d004      	beq.n	80202b8 <_fwalk_sglue+0x34>
 80202ae:	0029      	movs	r1, r5
 80202b0:	9800      	ldr	r0, [sp, #0]
 80202b2:	9b01      	ldr	r3, [sp, #4]
 80202b4:	4798      	blx	r3
 80202b6:	4306      	orrs	r6, r0
 80202b8:	3568      	adds	r5, #104	@ 0x68
 80202ba:	e7ea      	b.n	8020292 <_fwalk_sglue+0xe>

080202bc <iprintf>:
 80202bc:	b40f      	push	{r0, r1, r2, r3}
 80202be:	b507      	push	{r0, r1, r2, lr}
 80202c0:	4905      	ldr	r1, [pc, #20]	@ (80202d8 <iprintf+0x1c>)
 80202c2:	ab04      	add	r3, sp, #16
 80202c4:	6808      	ldr	r0, [r1, #0]
 80202c6:	cb04      	ldmia	r3!, {r2}
 80202c8:	6881      	ldr	r1, [r0, #8]
 80202ca:	9301      	str	r3, [sp, #4]
 80202cc:	f002 fbe8 	bl	8022aa0 <_vfiprintf_r>
 80202d0:	b003      	add	sp, #12
 80202d2:	bc08      	pop	{r3}
 80202d4:	b004      	add	sp, #16
 80202d6:	4718      	bx	r3
 80202d8:	200003d0 	.word	0x200003d0

080202dc <_puts_r>:
 80202dc:	6a03      	ldr	r3, [r0, #32]
 80202de:	b570      	push	{r4, r5, r6, lr}
 80202e0:	0005      	movs	r5, r0
 80202e2:	000e      	movs	r6, r1
 80202e4:	6884      	ldr	r4, [r0, #8]
 80202e6:	2b00      	cmp	r3, #0
 80202e8:	d101      	bne.n	80202ee <_puts_r+0x12>
 80202ea:	f7ff ffb3 	bl	8020254 <__sinit>
 80202ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80202f0:	07db      	lsls	r3, r3, #31
 80202f2:	d405      	bmi.n	8020300 <_puts_r+0x24>
 80202f4:	89a3      	ldrh	r3, [r4, #12]
 80202f6:	059b      	lsls	r3, r3, #22
 80202f8:	d402      	bmi.n	8020300 <_puts_r+0x24>
 80202fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80202fc:	f000 fa61 	bl	80207c2 <__retarget_lock_acquire_recursive>
 8020300:	89a3      	ldrh	r3, [r4, #12]
 8020302:	071b      	lsls	r3, r3, #28
 8020304:	d502      	bpl.n	802030c <_puts_r+0x30>
 8020306:	6923      	ldr	r3, [r4, #16]
 8020308:	2b00      	cmp	r3, #0
 802030a:	d11f      	bne.n	802034c <_puts_r+0x70>
 802030c:	0021      	movs	r1, r4
 802030e:	0028      	movs	r0, r5
 8020310:	f000 f92a 	bl	8020568 <__swsetup_r>
 8020314:	2800      	cmp	r0, #0
 8020316:	d019      	beq.n	802034c <_puts_r+0x70>
 8020318:	2501      	movs	r5, #1
 802031a:	426d      	negs	r5, r5
 802031c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802031e:	07db      	lsls	r3, r3, #31
 8020320:	d405      	bmi.n	802032e <_puts_r+0x52>
 8020322:	89a3      	ldrh	r3, [r4, #12]
 8020324:	059b      	lsls	r3, r3, #22
 8020326:	d402      	bmi.n	802032e <_puts_r+0x52>
 8020328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802032a:	f000 fa4b 	bl	80207c4 <__retarget_lock_release_recursive>
 802032e:	0028      	movs	r0, r5
 8020330:	bd70      	pop	{r4, r5, r6, pc}
 8020332:	3601      	adds	r6, #1
 8020334:	60a3      	str	r3, [r4, #8]
 8020336:	2b00      	cmp	r3, #0
 8020338:	da04      	bge.n	8020344 <_puts_r+0x68>
 802033a:	69a2      	ldr	r2, [r4, #24]
 802033c:	429a      	cmp	r2, r3
 802033e:	dc16      	bgt.n	802036e <_puts_r+0x92>
 8020340:	290a      	cmp	r1, #10
 8020342:	d014      	beq.n	802036e <_puts_r+0x92>
 8020344:	6823      	ldr	r3, [r4, #0]
 8020346:	1c5a      	adds	r2, r3, #1
 8020348:	6022      	str	r2, [r4, #0]
 802034a:	7019      	strb	r1, [r3, #0]
 802034c:	68a3      	ldr	r3, [r4, #8]
 802034e:	7831      	ldrb	r1, [r6, #0]
 8020350:	3b01      	subs	r3, #1
 8020352:	2900      	cmp	r1, #0
 8020354:	d1ed      	bne.n	8020332 <_puts_r+0x56>
 8020356:	60a3      	str	r3, [r4, #8]
 8020358:	2b00      	cmp	r3, #0
 802035a:	da0f      	bge.n	802037c <_puts_r+0xa0>
 802035c:	0022      	movs	r2, r4
 802035e:	0028      	movs	r0, r5
 8020360:	310a      	adds	r1, #10
 8020362:	f000 f8bf 	bl	80204e4 <__swbuf_r>
 8020366:	3001      	adds	r0, #1
 8020368:	d0d6      	beq.n	8020318 <_puts_r+0x3c>
 802036a:	250a      	movs	r5, #10
 802036c:	e7d6      	b.n	802031c <_puts_r+0x40>
 802036e:	0022      	movs	r2, r4
 8020370:	0028      	movs	r0, r5
 8020372:	f000 f8b7 	bl	80204e4 <__swbuf_r>
 8020376:	3001      	adds	r0, #1
 8020378:	d1e8      	bne.n	802034c <_puts_r+0x70>
 802037a:	e7cd      	b.n	8020318 <_puts_r+0x3c>
 802037c:	6823      	ldr	r3, [r4, #0]
 802037e:	1c5a      	adds	r2, r3, #1
 8020380:	6022      	str	r2, [r4, #0]
 8020382:	220a      	movs	r2, #10
 8020384:	701a      	strb	r2, [r3, #0]
 8020386:	e7f0      	b.n	802036a <_puts_r+0x8e>

08020388 <puts>:
 8020388:	b510      	push	{r4, lr}
 802038a:	4b03      	ldr	r3, [pc, #12]	@ (8020398 <puts+0x10>)
 802038c:	0001      	movs	r1, r0
 802038e:	6818      	ldr	r0, [r3, #0]
 8020390:	f7ff ffa4 	bl	80202dc <_puts_r>
 8020394:	bd10      	pop	{r4, pc}
 8020396:	46c0      	nop			@ (mov r8, r8)
 8020398:	200003d0 	.word	0x200003d0

0802039c <siprintf>:
 802039c:	b40e      	push	{r1, r2, r3}
 802039e:	b500      	push	{lr}
 80203a0:	490b      	ldr	r1, [pc, #44]	@ (80203d0 <siprintf+0x34>)
 80203a2:	b09c      	sub	sp, #112	@ 0x70
 80203a4:	ab1d      	add	r3, sp, #116	@ 0x74
 80203a6:	9002      	str	r0, [sp, #8]
 80203a8:	9006      	str	r0, [sp, #24]
 80203aa:	9107      	str	r1, [sp, #28]
 80203ac:	9104      	str	r1, [sp, #16]
 80203ae:	4809      	ldr	r0, [pc, #36]	@ (80203d4 <siprintf+0x38>)
 80203b0:	4909      	ldr	r1, [pc, #36]	@ (80203d8 <siprintf+0x3c>)
 80203b2:	cb04      	ldmia	r3!, {r2}
 80203b4:	9105      	str	r1, [sp, #20]
 80203b6:	6800      	ldr	r0, [r0, #0]
 80203b8:	a902      	add	r1, sp, #8
 80203ba:	9301      	str	r3, [sp, #4]
 80203bc:	f002 fa4a 	bl	8022854 <_svfiprintf_r>
 80203c0:	2200      	movs	r2, #0
 80203c2:	9b02      	ldr	r3, [sp, #8]
 80203c4:	701a      	strb	r2, [r3, #0]
 80203c6:	b01c      	add	sp, #112	@ 0x70
 80203c8:	bc08      	pop	{r3}
 80203ca:	b003      	add	sp, #12
 80203cc:	4718      	bx	r3
 80203ce:	46c0      	nop			@ (mov r8, r8)
 80203d0:	7fffffff 	.word	0x7fffffff
 80203d4:	200003d0 	.word	0x200003d0
 80203d8:	ffff0208 	.word	0xffff0208

080203dc <__sread>:
 80203dc:	b570      	push	{r4, r5, r6, lr}
 80203de:	000c      	movs	r4, r1
 80203e0:	250e      	movs	r5, #14
 80203e2:	5f49      	ldrsh	r1, [r1, r5]
 80203e4:	f000 f99a 	bl	802071c <_read_r>
 80203e8:	2800      	cmp	r0, #0
 80203ea:	db03      	blt.n	80203f4 <__sread+0x18>
 80203ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80203ee:	181b      	adds	r3, r3, r0
 80203f0:	6563      	str	r3, [r4, #84]	@ 0x54
 80203f2:	bd70      	pop	{r4, r5, r6, pc}
 80203f4:	89a3      	ldrh	r3, [r4, #12]
 80203f6:	4a02      	ldr	r2, [pc, #8]	@ (8020400 <__sread+0x24>)
 80203f8:	4013      	ands	r3, r2
 80203fa:	81a3      	strh	r3, [r4, #12]
 80203fc:	e7f9      	b.n	80203f2 <__sread+0x16>
 80203fe:	46c0      	nop			@ (mov r8, r8)
 8020400:	ffffefff 	.word	0xffffefff

08020404 <__swrite>:
 8020404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020406:	001f      	movs	r7, r3
 8020408:	898b      	ldrh	r3, [r1, #12]
 802040a:	0005      	movs	r5, r0
 802040c:	000c      	movs	r4, r1
 802040e:	0016      	movs	r6, r2
 8020410:	05db      	lsls	r3, r3, #23
 8020412:	d505      	bpl.n	8020420 <__swrite+0x1c>
 8020414:	230e      	movs	r3, #14
 8020416:	5ec9      	ldrsh	r1, [r1, r3]
 8020418:	2200      	movs	r2, #0
 802041a:	2302      	movs	r3, #2
 802041c:	f000 f96a 	bl	80206f4 <_lseek_r>
 8020420:	89a3      	ldrh	r3, [r4, #12]
 8020422:	4a05      	ldr	r2, [pc, #20]	@ (8020438 <__swrite+0x34>)
 8020424:	0028      	movs	r0, r5
 8020426:	4013      	ands	r3, r2
 8020428:	81a3      	strh	r3, [r4, #12]
 802042a:	0032      	movs	r2, r6
 802042c:	230e      	movs	r3, #14
 802042e:	5ee1      	ldrsh	r1, [r4, r3]
 8020430:	003b      	movs	r3, r7
 8020432:	f000 f987 	bl	8020744 <_write_r>
 8020436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020438:	ffffefff 	.word	0xffffefff

0802043c <__sseek>:
 802043c:	b570      	push	{r4, r5, r6, lr}
 802043e:	000c      	movs	r4, r1
 8020440:	250e      	movs	r5, #14
 8020442:	5f49      	ldrsh	r1, [r1, r5]
 8020444:	f000 f956 	bl	80206f4 <_lseek_r>
 8020448:	89a3      	ldrh	r3, [r4, #12]
 802044a:	1c42      	adds	r2, r0, #1
 802044c:	d103      	bne.n	8020456 <__sseek+0x1a>
 802044e:	4a05      	ldr	r2, [pc, #20]	@ (8020464 <__sseek+0x28>)
 8020450:	4013      	ands	r3, r2
 8020452:	81a3      	strh	r3, [r4, #12]
 8020454:	bd70      	pop	{r4, r5, r6, pc}
 8020456:	2280      	movs	r2, #128	@ 0x80
 8020458:	0152      	lsls	r2, r2, #5
 802045a:	4313      	orrs	r3, r2
 802045c:	81a3      	strh	r3, [r4, #12]
 802045e:	6560      	str	r0, [r4, #84]	@ 0x54
 8020460:	e7f8      	b.n	8020454 <__sseek+0x18>
 8020462:	46c0      	nop			@ (mov r8, r8)
 8020464:	ffffefff 	.word	0xffffefff

08020468 <__sclose>:
 8020468:	b510      	push	{r4, lr}
 802046a:	230e      	movs	r3, #14
 802046c:	5ec9      	ldrsh	r1, [r1, r3]
 802046e:	f000 f92f 	bl	80206d0 <_close_r>
 8020472:	bd10      	pop	{r4, pc}

08020474 <_vsniprintf_r>:
 8020474:	b530      	push	{r4, r5, lr}
 8020476:	0014      	movs	r4, r2
 8020478:	0005      	movs	r5, r0
 802047a:	001a      	movs	r2, r3
 802047c:	b09b      	sub	sp, #108	@ 0x6c
 802047e:	2c00      	cmp	r4, #0
 8020480:	da05      	bge.n	802048e <_vsniprintf_r+0x1a>
 8020482:	238b      	movs	r3, #139	@ 0x8b
 8020484:	6003      	str	r3, [r0, #0]
 8020486:	2001      	movs	r0, #1
 8020488:	4240      	negs	r0, r0
 802048a:	b01b      	add	sp, #108	@ 0x6c
 802048c:	bd30      	pop	{r4, r5, pc}
 802048e:	2382      	movs	r3, #130	@ 0x82
 8020490:	4668      	mov	r0, sp
 8020492:	009b      	lsls	r3, r3, #2
 8020494:	8183      	strh	r3, [r0, #12]
 8020496:	2300      	movs	r3, #0
 8020498:	9100      	str	r1, [sp, #0]
 802049a:	9104      	str	r1, [sp, #16]
 802049c:	429c      	cmp	r4, r3
 802049e:	d000      	beq.n	80204a2 <_vsniprintf_r+0x2e>
 80204a0:	1e63      	subs	r3, r4, #1
 80204a2:	9302      	str	r3, [sp, #8]
 80204a4:	9305      	str	r3, [sp, #20]
 80204a6:	2301      	movs	r3, #1
 80204a8:	4669      	mov	r1, sp
 80204aa:	425b      	negs	r3, r3
 80204ac:	81cb      	strh	r3, [r1, #14]
 80204ae:	0028      	movs	r0, r5
 80204b0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80204b2:	f002 f9cf 	bl	8022854 <_svfiprintf_r>
 80204b6:	1c43      	adds	r3, r0, #1
 80204b8:	da01      	bge.n	80204be <_vsniprintf_r+0x4a>
 80204ba:	238b      	movs	r3, #139	@ 0x8b
 80204bc:	602b      	str	r3, [r5, #0]
 80204be:	2c00      	cmp	r4, #0
 80204c0:	d0e3      	beq.n	802048a <_vsniprintf_r+0x16>
 80204c2:	2200      	movs	r2, #0
 80204c4:	9b00      	ldr	r3, [sp, #0]
 80204c6:	701a      	strb	r2, [r3, #0]
 80204c8:	e7df      	b.n	802048a <_vsniprintf_r+0x16>
	...

080204cc <vsniprintf>:
 80204cc:	b513      	push	{r0, r1, r4, lr}
 80204ce:	4c04      	ldr	r4, [pc, #16]	@ (80204e0 <vsniprintf+0x14>)
 80204d0:	9300      	str	r3, [sp, #0]
 80204d2:	0013      	movs	r3, r2
 80204d4:	000a      	movs	r2, r1
 80204d6:	0001      	movs	r1, r0
 80204d8:	6820      	ldr	r0, [r4, #0]
 80204da:	f7ff ffcb 	bl	8020474 <_vsniprintf_r>
 80204de:	bd16      	pop	{r1, r2, r4, pc}
 80204e0:	200003d0 	.word	0x200003d0

080204e4 <__swbuf_r>:
 80204e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204e6:	0006      	movs	r6, r0
 80204e8:	000d      	movs	r5, r1
 80204ea:	0014      	movs	r4, r2
 80204ec:	2800      	cmp	r0, #0
 80204ee:	d004      	beq.n	80204fa <__swbuf_r+0x16>
 80204f0:	6a03      	ldr	r3, [r0, #32]
 80204f2:	2b00      	cmp	r3, #0
 80204f4:	d101      	bne.n	80204fa <__swbuf_r+0x16>
 80204f6:	f7ff fead 	bl	8020254 <__sinit>
 80204fa:	69a3      	ldr	r3, [r4, #24]
 80204fc:	60a3      	str	r3, [r4, #8]
 80204fe:	89a3      	ldrh	r3, [r4, #12]
 8020500:	071b      	lsls	r3, r3, #28
 8020502:	d502      	bpl.n	802050a <__swbuf_r+0x26>
 8020504:	6923      	ldr	r3, [r4, #16]
 8020506:	2b00      	cmp	r3, #0
 8020508:	d109      	bne.n	802051e <__swbuf_r+0x3a>
 802050a:	0021      	movs	r1, r4
 802050c:	0030      	movs	r0, r6
 802050e:	f000 f82b 	bl	8020568 <__swsetup_r>
 8020512:	2800      	cmp	r0, #0
 8020514:	d003      	beq.n	802051e <__swbuf_r+0x3a>
 8020516:	2501      	movs	r5, #1
 8020518:	426d      	negs	r5, r5
 802051a:	0028      	movs	r0, r5
 802051c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802051e:	6923      	ldr	r3, [r4, #16]
 8020520:	6820      	ldr	r0, [r4, #0]
 8020522:	b2ef      	uxtb	r7, r5
 8020524:	1ac0      	subs	r0, r0, r3
 8020526:	6963      	ldr	r3, [r4, #20]
 8020528:	b2ed      	uxtb	r5, r5
 802052a:	4283      	cmp	r3, r0
 802052c:	dc05      	bgt.n	802053a <__swbuf_r+0x56>
 802052e:	0021      	movs	r1, r4
 8020530:	0030      	movs	r0, r6
 8020532:	f002 fc57 	bl	8022de4 <_fflush_r>
 8020536:	2800      	cmp	r0, #0
 8020538:	d1ed      	bne.n	8020516 <__swbuf_r+0x32>
 802053a:	68a3      	ldr	r3, [r4, #8]
 802053c:	3001      	adds	r0, #1
 802053e:	3b01      	subs	r3, #1
 8020540:	60a3      	str	r3, [r4, #8]
 8020542:	6823      	ldr	r3, [r4, #0]
 8020544:	1c5a      	adds	r2, r3, #1
 8020546:	6022      	str	r2, [r4, #0]
 8020548:	701f      	strb	r7, [r3, #0]
 802054a:	6963      	ldr	r3, [r4, #20]
 802054c:	4283      	cmp	r3, r0
 802054e:	d004      	beq.n	802055a <__swbuf_r+0x76>
 8020550:	89a3      	ldrh	r3, [r4, #12]
 8020552:	07db      	lsls	r3, r3, #31
 8020554:	d5e1      	bpl.n	802051a <__swbuf_r+0x36>
 8020556:	2d0a      	cmp	r5, #10
 8020558:	d1df      	bne.n	802051a <__swbuf_r+0x36>
 802055a:	0021      	movs	r1, r4
 802055c:	0030      	movs	r0, r6
 802055e:	f002 fc41 	bl	8022de4 <_fflush_r>
 8020562:	2800      	cmp	r0, #0
 8020564:	d0d9      	beq.n	802051a <__swbuf_r+0x36>
 8020566:	e7d6      	b.n	8020516 <__swbuf_r+0x32>

08020568 <__swsetup_r>:
 8020568:	4b2d      	ldr	r3, [pc, #180]	@ (8020620 <__swsetup_r+0xb8>)
 802056a:	b570      	push	{r4, r5, r6, lr}
 802056c:	0005      	movs	r5, r0
 802056e:	6818      	ldr	r0, [r3, #0]
 8020570:	000c      	movs	r4, r1
 8020572:	2800      	cmp	r0, #0
 8020574:	d004      	beq.n	8020580 <__swsetup_r+0x18>
 8020576:	6a03      	ldr	r3, [r0, #32]
 8020578:	2b00      	cmp	r3, #0
 802057a:	d101      	bne.n	8020580 <__swsetup_r+0x18>
 802057c:	f7ff fe6a 	bl	8020254 <__sinit>
 8020580:	230c      	movs	r3, #12
 8020582:	5ee2      	ldrsh	r2, [r4, r3]
 8020584:	0713      	lsls	r3, r2, #28
 8020586:	d423      	bmi.n	80205d0 <__swsetup_r+0x68>
 8020588:	06d3      	lsls	r3, r2, #27
 802058a:	d407      	bmi.n	802059c <__swsetup_r+0x34>
 802058c:	2309      	movs	r3, #9
 802058e:	602b      	str	r3, [r5, #0]
 8020590:	2340      	movs	r3, #64	@ 0x40
 8020592:	2001      	movs	r0, #1
 8020594:	4313      	orrs	r3, r2
 8020596:	81a3      	strh	r3, [r4, #12]
 8020598:	4240      	negs	r0, r0
 802059a:	e03a      	b.n	8020612 <__swsetup_r+0xaa>
 802059c:	0752      	lsls	r2, r2, #29
 802059e:	d513      	bpl.n	80205c8 <__swsetup_r+0x60>
 80205a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80205a2:	2900      	cmp	r1, #0
 80205a4:	d008      	beq.n	80205b8 <__swsetup_r+0x50>
 80205a6:	0023      	movs	r3, r4
 80205a8:	3344      	adds	r3, #68	@ 0x44
 80205aa:	4299      	cmp	r1, r3
 80205ac:	d002      	beq.n	80205b4 <__swsetup_r+0x4c>
 80205ae:	0028      	movs	r0, r5
 80205b0:	f000 ffa6 	bl	8021500 <_free_r>
 80205b4:	2300      	movs	r3, #0
 80205b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80205b8:	2224      	movs	r2, #36	@ 0x24
 80205ba:	89a3      	ldrh	r3, [r4, #12]
 80205bc:	4393      	bics	r3, r2
 80205be:	81a3      	strh	r3, [r4, #12]
 80205c0:	2300      	movs	r3, #0
 80205c2:	6063      	str	r3, [r4, #4]
 80205c4:	6923      	ldr	r3, [r4, #16]
 80205c6:	6023      	str	r3, [r4, #0]
 80205c8:	2308      	movs	r3, #8
 80205ca:	89a2      	ldrh	r2, [r4, #12]
 80205cc:	4313      	orrs	r3, r2
 80205ce:	81a3      	strh	r3, [r4, #12]
 80205d0:	6923      	ldr	r3, [r4, #16]
 80205d2:	2b00      	cmp	r3, #0
 80205d4:	d10b      	bne.n	80205ee <__swsetup_r+0x86>
 80205d6:	21a0      	movs	r1, #160	@ 0xa0
 80205d8:	2280      	movs	r2, #128	@ 0x80
 80205da:	89a3      	ldrh	r3, [r4, #12]
 80205dc:	0089      	lsls	r1, r1, #2
 80205de:	0092      	lsls	r2, r2, #2
 80205e0:	400b      	ands	r3, r1
 80205e2:	4293      	cmp	r3, r2
 80205e4:	d003      	beq.n	80205ee <__swsetup_r+0x86>
 80205e6:	0021      	movs	r1, r4
 80205e8:	0028      	movs	r0, r5
 80205ea:	f002 fc51 	bl	8022e90 <__smakebuf_r>
 80205ee:	230c      	movs	r3, #12
 80205f0:	5ee2      	ldrsh	r2, [r4, r3]
 80205f2:	2101      	movs	r1, #1
 80205f4:	0013      	movs	r3, r2
 80205f6:	400b      	ands	r3, r1
 80205f8:	420a      	tst	r2, r1
 80205fa:	d00b      	beq.n	8020614 <__swsetup_r+0xac>
 80205fc:	2300      	movs	r3, #0
 80205fe:	60a3      	str	r3, [r4, #8]
 8020600:	6963      	ldr	r3, [r4, #20]
 8020602:	425b      	negs	r3, r3
 8020604:	61a3      	str	r3, [r4, #24]
 8020606:	2000      	movs	r0, #0
 8020608:	6923      	ldr	r3, [r4, #16]
 802060a:	4283      	cmp	r3, r0
 802060c:	d101      	bne.n	8020612 <__swsetup_r+0xaa>
 802060e:	0613      	lsls	r3, r2, #24
 8020610:	d4be      	bmi.n	8020590 <__swsetup_r+0x28>
 8020612:	bd70      	pop	{r4, r5, r6, pc}
 8020614:	0791      	lsls	r1, r2, #30
 8020616:	d400      	bmi.n	802061a <__swsetup_r+0xb2>
 8020618:	6963      	ldr	r3, [r4, #20]
 802061a:	60a3      	str	r3, [r4, #8]
 802061c:	e7f3      	b.n	8020606 <__swsetup_r+0x9e>
 802061e:	46c0      	nop			@ (mov r8, r8)
 8020620:	200003d0 	.word	0x200003d0

08020624 <memset>:
 8020624:	0003      	movs	r3, r0
 8020626:	1882      	adds	r2, r0, r2
 8020628:	4293      	cmp	r3, r2
 802062a:	d100      	bne.n	802062e <memset+0xa>
 802062c:	4770      	bx	lr
 802062e:	7019      	strb	r1, [r3, #0]
 8020630:	3301      	adds	r3, #1
 8020632:	e7f9      	b.n	8020628 <memset+0x4>

08020634 <strchr>:
 8020634:	b2c9      	uxtb	r1, r1
 8020636:	7803      	ldrb	r3, [r0, #0]
 8020638:	2b00      	cmp	r3, #0
 802063a:	d004      	beq.n	8020646 <strchr+0x12>
 802063c:	428b      	cmp	r3, r1
 802063e:	d100      	bne.n	8020642 <strchr+0xe>
 8020640:	4770      	bx	lr
 8020642:	3001      	adds	r0, #1
 8020644:	e7f7      	b.n	8020636 <strchr+0x2>
 8020646:	424b      	negs	r3, r1
 8020648:	4159      	adcs	r1, r3
 802064a:	4249      	negs	r1, r1
 802064c:	4008      	ands	r0, r1
 802064e:	e7f7      	b.n	8020640 <strchr+0xc>

08020650 <strncmp>:
 8020650:	b530      	push	{r4, r5, lr}
 8020652:	0005      	movs	r5, r0
 8020654:	1e10      	subs	r0, r2, #0
 8020656:	d00b      	beq.n	8020670 <strncmp+0x20>
 8020658:	2400      	movs	r4, #0
 802065a:	3a01      	subs	r2, #1
 802065c:	5d2b      	ldrb	r3, [r5, r4]
 802065e:	5d08      	ldrb	r0, [r1, r4]
 8020660:	4283      	cmp	r3, r0
 8020662:	d104      	bne.n	802066e <strncmp+0x1e>
 8020664:	42a2      	cmp	r2, r4
 8020666:	d002      	beq.n	802066e <strncmp+0x1e>
 8020668:	3401      	adds	r4, #1
 802066a:	2b00      	cmp	r3, #0
 802066c:	d1f6      	bne.n	802065c <strncmp+0xc>
 802066e:	1a18      	subs	r0, r3, r0
 8020670:	bd30      	pop	{r4, r5, pc}

08020672 <strncpy>:
 8020672:	0003      	movs	r3, r0
 8020674:	b530      	push	{r4, r5, lr}
 8020676:	001d      	movs	r5, r3
 8020678:	2a00      	cmp	r2, #0
 802067a:	d006      	beq.n	802068a <strncpy+0x18>
 802067c:	780c      	ldrb	r4, [r1, #0]
 802067e:	3a01      	subs	r2, #1
 8020680:	3301      	adds	r3, #1
 8020682:	702c      	strb	r4, [r5, #0]
 8020684:	3101      	adds	r1, #1
 8020686:	2c00      	cmp	r4, #0
 8020688:	d1f5      	bne.n	8020676 <strncpy+0x4>
 802068a:	2100      	movs	r1, #0
 802068c:	189a      	adds	r2, r3, r2
 802068e:	4293      	cmp	r3, r2
 8020690:	d100      	bne.n	8020694 <strncpy+0x22>
 8020692:	bd30      	pop	{r4, r5, pc}
 8020694:	7019      	strb	r1, [r3, #0]
 8020696:	3301      	adds	r3, #1
 8020698:	e7f9      	b.n	802068e <strncpy+0x1c>

0802069a <strstr>:
 802069a:	780a      	ldrb	r2, [r1, #0]
 802069c:	b530      	push	{r4, r5, lr}
 802069e:	2a00      	cmp	r2, #0
 80206a0:	d10c      	bne.n	80206bc <strstr+0x22>
 80206a2:	bd30      	pop	{r4, r5, pc}
 80206a4:	429a      	cmp	r2, r3
 80206a6:	d108      	bne.n	80206ba <strstr+0x20>
 80206a8:	2301      	movs	r3, #1
 80206aa:	5ccc      	ldrb	r4, [r1, r3]
 80206ac:	2c00      	cmp	r4, #0
 80206ae:	d0f8      	beq.n	80206a2 <strstr+0x8>
 80206b0:	5cc5      	ldrb	r5, [r0, r3]
 80206b2:	42a5      	cmp	r5, r4
 80206b4:	d101      	bne.n	80206ba <strstr+0x20>
 80206b6:	3301      	adds	r3, #1
 80206b8:	e7f7      	b.n	80206aa <strstr+0x10>
 80206ba:	3001      	adds	r0, #1
 80206bc:	7803      	ldrb	r3, [r0, #0]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d1f0      	bne.n	80206a4 <strstr+0xa>
 80206c2:	0018      	movs	r0, r3
 80206c4:	e7ed      	b.n	80206a2 <strstr+0x8>
	...

080206c8 <_localeconv_r>:
 80206c8:	4800      	ldr	r0, [pc, #0]	@ (80206cc <_localeconv_r+0x4>)
 80206ca:	4770      	bx	lr
 80206cc:	20000354 	.word	0x20000354

080206d0 <_close_r>:
 80206d0:	2300      	movs	r3, #0
 80206d2:	b570      	push	{r4, r5, r6, lr}
 80206d4:	4d06      	ldr	r5, [pc, #24]	@ (80206f0 <_close_r+0x20>)
 80206d6:	0004      	movs	r4, r0
 80206d8:	0008      	movs	r0, r1
 80206da:	602b      	str	r3, [r5, #0]
 80206dc:	f7ed fca4 	bl	800e028 <_close>
 80206e0:	1c43      	adds	r3, r0, #1
 80206e2:	d103      	bne.n	80206ec <_close_r+0x1c>
 80206e4:	682b      	ldr	r3, [r5, #0]
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	d000      	beq.n	80206ec <_close_r+0x1c>
 80206ea:	6023      	str	r3, [r4, #0]
 80206ec:	bd70      	pop	{r4, r5, r6, pc}
 80206ee:	46c0      	nop			@ (mov r8, r8)
 80206f0:	200033c8 	.word	0x200033c8

080206f4 <_lseek_r>:
 80206f4:	b570      	push	{r4, r5, r6, lr}
 80206f6:	0004      	movs	r4, r0
 80206f8:	0008      	movs	r0, r1
 80206fa:	0011      	movs	r1, r2
 80206fc:	001a      	movs	r2, r3
 80206fe:	2300      	movs	r3, #0
 8020700:	4d05      	ldr	r5, [pc, #20]	@ (8020718 <_lseek_r+0x24>)
 8020702:	602b      	str	r3, [r5, #0]
 8020704:	f7ed fcb1 	bl	800e06a <_lseek>
 8020708:	1c43      	adds	r3, r0, #1
 802070a:	d103      	bne.n	8020714 <_lseek_r+0x20>
 802070c:	682b      	ldr	r3, [r5, #0]
 802070e:	2b00      	cmp	r3, #0
 8020710:	d000      	beq.n	8020714 <_lseek_r+0x20>
 8020712:	6023      	str	r3, [r4, #0]
 8020714:	bd70      	pop	{r4, r5, r6, pc}
 8020716:	46c0      	nop			@ (mov r8, r8)
 8020718:	200033c8 	.word	0x200033c8

0802071c <_read_r>:
 802071c:	b570      	push	{r4, r5, r6, lr}
 802071e:	0004      	movs	r4, r0
 8020720:	0008      	movs	r0, r1
 8020722:	0011      	movs	r1, r2
 8020724:	001a      	movs	r2, r3
 8020726:	2300      	movs	r3, #0
 8020728:	4d05      	ldr	r5, [pc, #20]	@ (8020740 <_read_r+0x24>)
 802072a:	602b      	str	r3, [r5, #0]
 802072c:	f7ed fc5f 	bl	800dfee <_read>
 8020730:	1c43      	adds	r3, r0, #1
 8020732:	d103      	bne.n	802073c <_read_r+0x20>
 8020734:	682b      	ldr	r3, [r5, #0]
 8020736:	2b00      	cmp	r3, #0
 8020738:	d000      	beq.n	802073c <_read_r+0x20>
 802073a:	6023      	str	r3, [r4, #0]
 802073c:	bd70      	pop	{r4, r5, r6, pc}
 802073e:	46c0      	nop			@ (mov r8, r8)
 8020740:	200033c8 	.word	0x200033c8

08020744 <_write_r>:
 8020744:	b570      	push	{r4, r5, r6, lr}
 8020746:	0004      	movs	r4, r0
 8020748:	0008      	movs	r0, r1
 802074a:	0011      	movs	r1, r2
 802074c:	001a      	movs	r2, r3
 802074e:	2300      	movs	r3, #0
 8020750:	4d05      	ldr	r5, [pc, #20]	@ (8020768 <_write_r+0x24>)
 8020752:	602b      	str	r3, [r5, #0]
 8020754:	f7ee f920 	bl	800e998 <_write>
 8020758:	1c43      	adds	r3, r0, #1
 802075a:	d103      	bne.n	8020764 <_write_r+0x20>
 802075c:	682b      	ldr	r3, [r5, #0]
 802075e:	2b00      	cmp	r3, #0
 8020760:	d000      	beq.n	8020764 <_write_r+0x20>
 8020762:	6023      	str	r3, [r4, #0]
 8020764:	bd70      	pop	{r4, r5, r6, pc}
 8020766:	46c0      	nop			@ (mov r8, r8)
 8020768:	200033c8 	.word	0x200033c8

0802076c <__errno>:
 802076c:	4b01      	ldr	r3, [pc, #4]	@ (8020774 <__errno+0x8>)
 802076e:	6818      	ldr	r0, [r3, #0]
 8020770:	4770      	bx	lr
 8020772:	46c0      	nop			@ (mov r8, r8)
 8020774:	200003d0 	.word	0x200003d0

08020778 <__libc_init_array>:
 8020778:	b570      	push	{r4, r5, r6, lr}
 802077a:	2600      	movs	r6, #0
 802077c:	4c0c      	ldr	r4, [pc, #48]	@ (80207b0 <__libc_init_array+0x38>)
 802077e:	4d0d      	ldr	r5, [pc, #52]	@ (80207b4 <__libc_init_array+0x3c>)
 8020780:	1b64      	subs	r4, r4, r5
 8020782:	10a4      	asrs	r4, r4, #2
 8020784:	42a6      	cmp	r6, r4
 8020786:	d109      	bne.n	802079c <__libc_init_array+0x24>
 8020788:	2600      	movs	r6, #0
 802078a:	f002 fee9 	bl	8023560 <_init>
 802078e:	4c0a      	ldr	r4, [pc, #40]	@ (80207b8 <__libc_init_array+0x40>)
 8020790:	4d0a      	ldr	r5, [pc, #40]	@ (80207bc <__libc_init_array+0x44>)
 8020792:	1b64      	subs	r4, r4, r5
 8020794:	10a4      	asrs	r4, r4, #2
 8020796:	42a6      	cmp	r6, r4
 8020798:	d105      	bne.n	80207a6 <__libc_init_array+0x2e>
 802079a:	bd70      	pop	{r4, r5, r6, pc}
 802079c:	00b3      	lsls	r3, r6, #2
 802079e:	58eb      	ldr	r3, [r5, r3]
 80207a0:	4798      	blx	r3
 80207a2:	3601      	adds	r6, #1
 80207a4:	e7ee      	b.n	8020784 <__libc_init_array+0xc>
 80207a6:	00b3      	lsls	r3, r6, #2
 80207a8:	58eb      	ldr	r3, [r5, r3]
 80207aa:	4798      	blx	r3
 80207ac:	3601      	adds	r6, #1
 80207ae:	e7f2      	b.n	8020796 <__libc_init_array+0x1e>
 80207b0:	080266b0 	.word	0x080266b0
 80207b4:	080266b0 	.word	0x080266b0
 80207b8:	080266b4 	.word	0x080266b4
 80207bc:	080266b0 	.word	0x080266b0

080207c0 <__retarget_lock_init_recursive>:
 80207c0:	4770      	bx	lr

080207c2 <__retarget_lock_acquire_recursive>:
 80207c2:	4770      	bx	lr

080207c4 <__retarget_lock_release_recursive>:
 80207c4:	4770      	bx	lr

080207c6 <memchr>:
 80207c6:	b2c9      	uxtb	r1, r1
 80207c8:	1882      	adds	r2, r0, r2
 80207ca:	4290      	cmp	r0, r2
 80207cc:	d101      	bne.n	80207d2 <memchr+0xc>
 80207ce:	2000      	movs	r0, #0
 80207d0:	4770      	bx	lr
 80207d2:	7803      	ldrb	r3, [r0, #0]
 80207d4:	428b      	cmp	r3, r1
 80207d6:	d0fb      	beq.n	80207d0 <memchr+0xa>
 80207d8:	3001      	adds	r0, #1
 80207da:	e7f6      	b.n	80207ca <memchr+0x4>

080207dc <memcpy>:
 80207dc:	2300      	movs	r3, #0
 80207de:	b510      	push	{r4, lr}
 80207e0:	429a      	cmp	r2, r3
 80207e2:	d100      	bne.n	80207e6 <memcpy+0xa>
 80207e4:	bd10      	pop	{r4, pc}
 80207e6:	5ccc      	ldrb	r4, [r1, r3]
 80207e8:	54c4      	strb	r4, [r0, r3]
 80207ea:	3301      	adds	r3, #1
 80207ec:	e7f8      	b.n	80207e0 <memcpy+0x4>
	...

080207f0 <nan>:
 80207f0:	2000      	movs	r0, #0
 80207f2:	4901      	ldr	r1, [pc, #4]	@ (80207f8 <nan+0x8>)
 80207f4:	4770      	bx	lr
 80207f6:	46c0      	nop			@ (mov r8, r8)
 80207f8:	7ff80000 	.word	0x7ff80000

080207fc <quorem>:
 80207fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80207fe:	6902      	ldr	r2, [r0, #16]
 8020800:	690f      	ldr	r7, [r1, #16]
 8020802:	b087      	sub	sp, #28
 8020804:	0006      	movs	r6, r0
 8020806:	000b      	movs	r3, r1
 8020808:	2000      	movs	r0, #0
 802080a:	9102      	str	r1, [sp, #8]
 802080c:	42ba      	cmp	r2, r7
 802080e:	db6d      	blt.n	80208ec <quorem+0xf0>
 8020810:	3f01      	subs	r7, #1
 8020812:	00bc      	lsls	r4, r7, #2
 8020814:	3314      	adds	r3, #20
 8020816:	9305      	str	r3, [sp, #20]
 8020818:	191b      	adds	r3, r3, r4
 802081a:	9303      	str	r3, [sp, #12]
 802081c:	0033      	movs	r3, r6
 802081e:	3314      	adds	r3, #20
 8020820:	191c      	adds	r4, r3, r4
 8020822:	9301      	str	r3, [sp, #4]
 8020824:	6823      	ldr	r3, [r4, #0]
 8020826:	9304      	str	r3, [sp, #16]
 8020828:	9b03      	ldr	r3, [sp, #12]
 802082a:	9804      	ldr	r0, [sp, #16]
 802082c:	681d      	ldr	r5, [r3, #0]
 802082e:	3501      	adds	r5, #1
 8020830:	0029      	movs	r1, r5
 8020832:	f7df fcb7 	bl	80001a4 <__udivsi3>
 8020836:	9b04      	ldr	r3, [sp, #16]
 8020838:	9000      	str	r0, [sp, #0]
 802083a:	42ab      	cmp	r3, r5
 802083c:	d32b      	bcc.n	8020896 <quorem+0x9a>
 802083e:	9b05      	ldr	r3, [sp, #20]
 8020840:	9d01      	ldr	r5, [sp, #4]
 8020842:	469c      	mov	ip, r3
 8020844:	2300      	movs	r3, #0
 8020846:	9305      	str	r3, [sp, #20]
 8020848:	9304      	str	r3, [sp, #16]
 802084a:	4662      	mov	r2, ip
 802084c:	ca08      	ldmia	r2!, {r3}
 802084e:	6828      	ldr	r0, [r5, #0]
 8020850:	4694      	mov	ip, r2
 8020852:	9a00      	ldr	r2, [sp, #0]
 8020854:	b299      	uxth	r1, r3
 8020856:	4351      	muls	r1, r2
 8020858:	9a05      	ldr	r2, [sp, #20]
 802085a:	0c1b      	lsrs	r3, r3, #16
 802085c:	1889      	adds	r1, r1, r2
 802085e:	9a00      	ldr	r2, [sp, #0]
 8020860:	4353      	muls	r3, r2
 8020862:	0c0a      	lsrs	r2, r1, #16
 8020864:	189b      	adds	r3, r3, r2
 8020866:	0c1a      	lsrs	r2, r3, #16
 8020868:	b289      	uxth	r1, r1
 802086a:	9205      	str	r2, [sp, #20]
 802086c:	b282      	uxth	r2, r0
 802086e:	1a52      	subs	r2, r2, r1
 8020870:	9904      	ldr	r1, [sp, #16]
 8020872:	0c00      	lsrs	r0, r0, #16
 8020874:	1852      	adds	r2, r2, r1
 8020876:	b29b      	uxth	r3, r3
 8020878:	1411      	asrs	r1, r2, #16
 802087a:	1ac3      	subs	r3, r0, r3
 802087c:	185b      	adds	r3, r3, r1
 802087e:	1419      	asrs	r1, r3, #16
 8020880:	b292      	uxth	r2, r2
 8020882:	041b      	lsls	r3, r3, #16
 8020884:	431a      	orrs	r2, r3
 8020886:	9b03      	ldr	r3, [sp, #12]
 8020888:	9104      	str	r1, [sp, #16]
 802088a:	c504      	stmia	r5!, {r2}
 802088c:	4563      	cmp	r3, ip
 802088e:	d2dc      	bcs.n	802084a <quorem+0x4e>
 8020890:	6823      	ldr	r3, [r4, #0]
 8020892:	2b00      	cmp	r3, #0
 8020894:	d030      	beq.n	80208f8 <quorem+0xfc>
 8020896:	0030      	movs	r0, r6
 8020898:	9902      	ldr	r1, [sp, #8]
 802089a:	f001 fd7d 	bl	8022398 <__mcmp>
 802089e:	2800      	cmp	r0, #0
 80208a0:	db23      	blt.n	80208ea <quorem+0xee>
 80208a2:	0034      	movs	r4, r6
 80208a4:	2500      	movs	r5, #0
 80208a6:	9902      	ldr	r1, [sp, #8]
 80208a8:	3414      	adds	r4, #20
 80208aa:	3114      	adds	r1, #20
 80208ac:	6823      	ldr	r3, [r4, #0]
 80208ae:	c901      	ldmia	r1!, {r0}
 80208b0:	9302      	str	r3, [sp, #8]
 80208b2:	466b      	mov	r3, sp
 80208b4:	891b      	ldrh	r3, [r3, #8]
 80208b6:	b282      	uxth	r2, r0
 80208b8:	1a9a      	subs	r2, r3, r2
 80208ba:	9b02      	ldr	r3, [sp, #8]
 80208bc:	1952      	adds	r2, r2, r5
 80208be:	0c00      	lsrs	r0, r0, #16
 80208c0:	0c1b      	lsrs	r3, r3, #16
 80208c2:	1a1b      	subs	r3, r3, r0
 80208c4:	1410      	asrs	r0, r2, #16
 80208c6:	181b      	adds	r3, r3, r0
 80208c8:	141d      	asrs	r5, r3, #16
 80208ca:	b292      	uxth	r2, r2
 80208cc:	041b      	lsls	r3, r3, #16
 80208ce:	431a      	orrs	r2, r3
 80208d0:	9b03      	ldr	r3, [sp, #12]
 80208d2:	c404      	stmia	r4!, {r2}
 80208d4:	428b      	cmp	r3, r1
 80208d6:	d2e9      	bcs.n	80208ac <quorem+0xb0>
 80208d8:	9a01      	ldr	r2, [sp, #4]
 80208da:	00bb      	lsls	r3, r7, #2
 80208dc:	18d3      	adds	r3, r2, r3
 80208de:	681a      	ldr	r2, [r3, #0]
 80208e0:	2a00      	cmp	r2, #0
 80208e2:	d013      	beq.n	802090c <quorem+0x110>
 80208e4:	9b00      	ldr	r3, [sp, #0]
 80208e6:	3301      	adds	r3, #1
 80208e8:	9300      	str	r3, [sp, #0]
 80208ea:	9800      	ldr	r0, [sp, #0]
 80208ec:	b007      	add	sp, #28
 80208ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208f0:	6823      	ldr	r3, [r4, #0]
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d104      	bne.n	8020900 <quorem+0x104>
 80208f6:	3f01      	subs	r7, #1
 80208f8:	9b01      	ldr	r3, [sp, #4]
 80208fa:	3c04      	subs	r4, #4
 80208fc:	42a3      	cmp	r3, r4
 80208fe:	d3f7      	bcc.n	80208f0 <quorem+0xf4>
 8020900:	6137      	str	r7, [r6, #16]
 8020902:	e7c8      	b.n	8020896 <quorem+0x9a>
 8020904:	681a      	ldr	r2, [r3, #0]
 8020906:	2a00      	cmp	r2, #0
 8020908:	d104      	bne.n	8020914 <quorem+0x118>
 802090a:	3f01      	subs	r7, #1
 802090c:	9a01      	ldr	r2, [sp, #4]
 802090e:	3b04      	subs	r3, #4
 8020910:	429a      	cmp	r2, r3
 8020912:	d3f7      	bcc.n	8020904 <quorem+0x108>
 8020914:	6137      	str	r7, [r6, #16]
 8020916:	e7e5      	b.n	80208e4 <quorem+0xe8>

08020918 <_dtoa_r>:
 8020918:	b5f0      	push	{r4, r5, r6, r7, lr}
 802091a:	0014      	movs	r4, r2
 802091c:	001d      	movs	r5, r3
 802091e:	69c6      	ldr	r6, [r0, #28]
 8020920:	b09d      	sub	sp, #116	@ 0x74
 8020922:	940a      	str	r4, [sp, #40]	@ 0x28
 8020924:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020926:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020928:	9003      	str	r0, [sp, #12]
 802092a:	2e00      	cmp	r6, #0
 802092c:	d10f      	bne.n	802094e <_dtoa_r+0x36>
 802092e:	2010      	movs	r0, #16
 8020930:	f001 f98a 	bl	8021c48 <malloc>
 8020934:	9b03      	ldr	r3, [sp, #12]
 8020936:	1e02      	subs	r2, r0, #0
 8020938:	61d8      	str	r0, [r3, #28]
 802093a:	d104      	bne.n	8020946 <_dtoa_r+0x2e>
 802093c:	21ef      	movs	r1, #239	@ 0xef
 802093e:	4bc7      	ldr	r3, [pc, #796]	@ (8020c5c <_dtoa_r+0x344>)
 8020940:	48c7      	ldr	r0, [pc, #796]	@ (8020c60 <_dtoa_r+0x348>)
 8020942:	f002 fb2f 	bl	8022fa4 <__assert_func>
 8020946:	6046      	str	r6, [r0, #4]
 8020948:	6086      	str	r6, [r0, #8]
 802094a:	6006      	str	r6, [r0, #0]
 802094c:	60c6      	str	r6, [r0, #12]
 802094e:	9b03      	ldr	r3, [sp, #12]
 8020950:	69db      	ldr	r3, [r3, #28]
 8020952:	6819      	ldr	r1, [r3, #0]
 8020954:	2900      	cmp	r1, #0
 8020956:	d00b      	beq.n	8020970 <_dtoa_r+0x58>
 8020958:	685a      	ldr	r2, [r3, #4]
 802095a:	2301      	movs	r3, #1
 802095c:	4093      	lsls	r3, r2
 802095e:	604a      	str	r2, [r1, #4]
 8020960:	608b      	str	r3, [r1, #8]
 8020962:	9803      	ldr	r0, [sp, #12]
 8020964:	f001 fa82 	bl	8021e6c <_Bfree>
 8020968:	2200      	movs	r2, #0
 802096a:	9b03      	ldr	r3, [sp, #12]
 802096c:	69db      	ldr	r3, [r3, #28]
 802096e:	601a      	str	r2, [r3, #0]
 8020970:	2d00      	cmp	r5, #0
 8020972:	da1e      	bge.n	80209b2 <_dtoa_r+0x9a>
 8020974:	2301      	movs	r3, #1
 8020976:	603b      	str	r3, [r7, #0]
 8020978:	006b      	lsls	r3, r5, #1
 802097a:	085b      	lsrs	r3, r3, #1
 802097c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802097e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020980:	4bb8      	ldr	r3, [pc, #736]	@ (8020c64 <_dtoa_r+0x34c>)
 8020982:	4ab8      	ldr	r2, [pc, #736]	@ (8020c64 <_dtoa_r+0x34c>)
 8020984:	403b      	ands	r3, r7
 8020986:	4293      	cmp	r3, r2
 8020988:	d116      	bne.n	80209b8 <_dtoa_r+0xa0>
 802098a:	4bb7      	ldr	r3, [pc, #732]	@ (8020c68 <_dtoa_r+0x350>)
 802098c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802098e:	6013      	str	r3, [r2, #0]
 8020990:	033b      	lsls	r3, r7, #12
 8020992:	0b1b      	lsrs	r3, r3, #12
 8020994:	4323      	orrs	r3, r4
 8020996:	d101      	bne.n	802099c <_dtoa_r+0x84>
 8020998:	f000 fd83 	bl	80214a2 <_dtoa_r+0xb8a>
 802099c:	4bb3      	ldr	r3, [pc, #716]	@ (8020c6c <_dtoa_r+0x354>)
 802099e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80209a0:	9308      	str	r3, [sp, #32]
 80209a2:	2a00      	cmp	r2, #0
 80209a4:	d002      	beq.n	80209ac <_dtoa_r+0x94>
 80209a6:	4bb2      	ldr	r3, [pc, #712]	@ (8020c70 <_dtoa_r+0x358>)
 80209a8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80209aa:	6013      	str	r3, [r2, #0]
 80209ac:	9808      	ldr	r0, [sp, #32]
 80209ae:	b01d      	add	sp, #116	@ 0x74
 80209b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209b2:	2300      	movs	r3, #0
 80209b4:	603b      	str	r3, [r7, #0]
 80209b6:	e7e2      	b.n	802097e <_dtoa_r+0x66>
 80209b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80209ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80209bc:	9212      	str	r2, [sp, #72]	@ 0x48
 80209be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80209c0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80209c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80209c4:	2200      	movs	r2, #0
 80209c6:	2300      	movs	r3, #0
 80209c8:	f7df fd72 	bl	80004b0 <__aeabi_dcmpeq>
 80209cc:	1e06      	subs	r6, r0, #0
 80209ce:	d00b      	beq.n	80209e8 <_dtoa_r+0xd0>
 80209d0:	2301      	movs	r3, #1
 80209d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80209d4:	6013      	str	r3, [r2, #0]
 80209d6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80209d8:	2b00      	cmp	r3, #0
 80209da:	d002      	beq.n	80209e2 <_dtoa_r+0xca>
 80209dc:	4ba5      	ldr	r3, [pc, #660]	@ (8020c74 <_dtoa_r+0x35c>)
 80209de:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80209e0:	6013      	str	r3, [r2, #0]
 80209e2:	4ba5      	ldr	r3, [pc, #660]	@ (8020c78 <_dtoa_r+0x360>)
 80209e4:	9308      	str	r3, [sp, #32]
 80209e6:	e7e1      	b.n	80209ac <_dtoa_r+0x94>
 80209e8:	ab1a      	add	r3, sp, #104	@ 0x68
 80209ea:	9301      	str	r3, [sp, #4]
 80209ec:	ab1b      	add	r3, sp, #108	@ 0x6c
 80209ee:	9300      	str	r3, [sp, #0]
 80209f0:	9803      	ldr	r0, [sp, #12]
 80209f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80209f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80209f6:	f001 fdf1 	bl	80225dc <__d2b>
 80209fa:	007a      	lsls	r2, r7, #1
 80209fc:	9005      	str	r0, [sp, #20]
 80209fe:	0d52      	lsrs	r2, r2, #21
 8020a00:	d100      	bne.n	8020a04 <_dtoa_r+0xec>
 8020a02:	e07b      	b.n	8020afc <_dtoa_r+0x1e4>
 8020a04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020a06:	9618      	str	r6, [sp, #96]	@ 0x60
 8020a08:	0319      	lsls	r1, r3, #12
 8020a0a:	4b9c      	ldr	r3, [pc, #624]	@ (8020c7c <_dtoa_r+0x364>)
 8020a0c:	0b09      	lsrs	r1, r1, #12
 8020a0e:	430b      	orrs	r3, r1
 8020a10:	499b      	ldr	r1, [pc, #620]	@ (8020c80 <_dtoa_r+0x368>)
 8020a12:	1857      	adds	r7, r2, r1
 8020a14:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020a16:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020a18:	0019      	movs	r1, r3
 8020a1a:	2200      	movs	r2, #0
 8020a1c:	4b99      	ldr	r3, [pc, #612]	@ (8020c84 <_dtoa_r+0x36c>)
 8020a1e:	f7e2 f8d5 	bl	8002bcc <__aeabi_dsub>
 8020a22:	4a99      	ldr	r2, [pc, #612]	@ (8020c88 <_dtoa_r+0x370>)
 8020a24:	4b99      	ldr	r3, [pc, #612]	@ (8020c8c <_dtoa_r+0x374>)
 8020a26:	f7e1 fe09 	bl	800263c <__aeabi_dmul>
 8020a2a:	4a99      	ldr	r2, [pc, #612]	@ (8020c90 <_dtoa_r+0x378>)
 8020a2c:	4b99      	ldr	r3, [pc, #612]	@ (8020c94 <_dtoa_r+0x37c>)
 8020a2e:	f7e0 fe5d 	bl	80016ec <__aeabi_dadd>
 8020a32:	0004      	movs	r4, r0
 8020a34:	0038      	movs	r0, r7
 8020a36:	000d      	movs	r5, r1
 8020a38:	f7e2 fcc2 	bl	80033c0 <__aeabi_i2d>
 8020a3c:	4a96      	ldr	r2, [pc, #600]	@ (8020c98 <_dtoa_r+0x380>)
 8020a3e:	4b97      	ldr	r3, [pc, #604]	@ (8020c9c <_dtoa_r+0x384>)
 8020a40:	f7e1 fdfc 	bl	800263c <__aeabi_dmul>
 8020a44:	0002      	movs	r2, r0
 8020a46:	000b      	movs	r3, r1
 8020a48:	0020      	movs	r0, r4
 8020a4a:	0029      	movs	r1, r5
 8020a4c:	f7e0 fe4e 	bl	80016ec <__aeabi_dadd>
 8020a50:	0004      	movs	r4, r0
 8020a52:	000d      	movs	r5, r1
 8020a54:	f7e2 fc78 	bl	8003348 <__aeabi_d2iz>
 8020a58:	2200      	movs	r2, #0
 8020a5a:	9004      	str	r0, [sp, #16]
 8020a5c:	2300      	movs	r3, #0
 8020a5e:	0020      	movs	r0, r4
 8020a60:	0029      	movs	r1, r5
 8020a62:	f7df fd2b 	bl	80004bc <__aeabi_dcmplt>
 8020a66:	2800      	cmp	r0, #0
 8020a68:	d00b      	beq.n	8020a82 <_dtoa_r+0x16a>
 8020a6a:	9804      	ldr	r0, [sp, #16]
 8020a6c:	f7e2 fca8 	bl	80033c0 <__aeabi_i2d>
 8020a70:	002b      	movs	r3, r5
 8020a72:	0022      	movs	r2, r4
 8020a74:	f7df fd1c 	bl	80004b0 <__aeabi_dcmpeq>
 8020a78:	4243      	negs	r3, r0
 8020a7a:	4158      	adcs	r0, r3
 8020a7c:	9b04      	ldr	r3, [sp, #16]
 8020a7e:	1a1b      	subs	r3, r3, r0
 8020a80:	9304      	str	r3, [sp, #16]
 8020a82:	2301      	movs	r3, #1
 8020a84:	9315      	str	r3, [sp, #84]	@ 0x54
 8020a86:	9b04      	ldr	r3, [sp, #16]
 8020a88:	2b16      	cmp	r3, #22
 8020a8a:	d810      	bhi.n	8020aae <_dtoa_r+0x196>
 8020a8c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020a8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020a90:	9a04      	ldr	r2, [sp, #16]
 8020a92:	4b83      	ldr	r3, [pc, #524]	@ (8020ca0 <_dtoa_r+0x388>)
 8020a94:	00d2      	lsls	r2, r2, #3
 8020a96:	189b      	adds	r3, r3, r2
 8020a98:	681a      	ldr	r2, [r3, #0]
 8020a9a:	685b      	ldr	r3, [r3, #4]
 8020a9c:	f7df fd0e 	bl	80004bc <__aeabi_dcmplt>
 8020aa0:	2800      	cmp	r0, #0
 8020aa2:	d047      	beq.n	8020b34 <_dtoa_r+0x21c>
 8020aa4:	9b04      	ldr	r3, [sp, #16]
 8020aa6:	3b01      	subs	r3, #1
 8020aa8:	9304      	str	r3, [sp, #16]
 8020aaa:	2300      	movs	r3, #0
 8020aac:	9315      	str	r3, [sp, #84]	@ 0x54
 8020aae:	2200      	movs	r2, #0
 8020ab0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020ab2:	9206      	str	r2, [sp, #24]
 8020ab4:	1bdb      	subs	r3, r3, r7
 8020ab6:	1e5a      	subs	r2, r3, #1
 8020ab8:	d53e      	bpl.n	8020b38 <_dtoa_r+0x220>
 8020aba:	2201      	movs	r2, #1
 8020abc:	1ad3      	subs	r3, r2, r3
 8020abe:	9306      	str	r3, [sp, #24]
 8020ac0:	2300      	movs	r3, #0
 8020ac2:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ac4:	9b04      	ldr	r3, [sp, #16]
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	db38      	blt.n	8020b3c <_dtoa_r+0x224>
 8020aca:	9a04      	ldr	r2, [sp, #16]
 8020acc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ace:	4694      	mov	ip, r2
 8020ad0:	4463      	add	r3, ip
 8020ad2:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ad4:	2300      	movs	r3, #0
 8020ad6:	9214      	str	r2, [sp, #80]	@ 0x50
 8020ad8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020ada:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020adc:	2401      	movs	r4, #1
 8020ade:	2b09      	cmp	r3, #9
 8020ae0:	d867      	bhi.n	8020bb2 <_dtoa_r+0x29a>
 8020ae2:	2b05      	cmp	r3, #5
 8020ae4:	dd02      	ble.n	8020aec <_dtoa_r+0x1d4>
 8020ae6:	2400      	movs	r4, #0
 8020ae8:	3b04      	subs	r3, #4
 8020aea:	9322      	str	r3, [sp, #136]	@ 0x88
 8020aec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020aee:	1e98      	subs	r0, r3, #2
 8020af0:	2803      	cmp	r0, #3
 8020af2:	d867      	bhi.n	8020bc4 <_dtoa_r+0x2ac>
 8020af4:	f7df fb42 	bl	800017c <__gnu_thumb1_case_uqi>
 8020af8:	5b383a2b 	.word	0x5b383a2b
 8020afc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020afe:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8020b00:	18f6      	adds	r6, r6, r3
 8020b02:	4b68      	ldr	r3, [pc, #416]	@ (8020ca4 <_dtoa_r+0x38c>)
 8020b04:	18f2      	adds	r2, r6, r3
 8020b06:	2a20      	cmp	r2, #32
 8020b08:	dd0f      	ble.n	8020b2a <_dtoa_r+0x212>
 8020b0a:	2340      	movs	r3, #64	@ 0x40
 8020b0c:	1a9b      	subs	r3, r3, r2
 8020b0e:	409f      	lsls	r7, r3
 8020b10:	4b65      	ldr	r3, [pc, #404]	@ (8020ca8 <_dtoa_r+0x390>)
 8020b12:	0038      	movs	r0, r7
 8020b14:	18f3      	adds	r3, r6, r3
 8020b16:	40dc      	lsrs	r4, r3
 8020b18:	4320      	orrs	r0, r4
 8020b1a:	f7e2 fc7f 	bl	800341c <__aeabi_ui2d>
 8020b1e:	2201      	movs	r2, #1
 8020b20:	4b62      	ldr	r3, [pc, #392]	@ (8020cac <_dtoa_r+0x394>)
 8020b22:	1e77      	subs	r7, r6, #1
 8020b24:	18cb      	adds	r3, r1, r3
 8020b26:	9218      	str	r2, [sp, #96]	@ 0x60
 8020b28:	e776      	b.n	8020a18 <_dtoa_r+0x100>
 8020b2a:	2320      	movs	r3, #32
 8020b2c:	0020      	movs	r0, r4
 8020b2e:	1a9b      	subs	r3, r3, r2
 8020b30:	4098      	lsls	r0, r3
 8020b32:	e7f2      	b.n	8020b1a <_dtoa_r+0x202>
 8020b34:	9015      	str	r0, [sp, #84]	@ 0x54
 8020b36:	e7ba      	b.n	8020aae <_dtoa_r+0x196>
 8020b38:	920d      	str	r2, [sp, #52]	@ 0x34
 8020b3a:	e7c3      	b.n	8020ac4 <_dtoa_r+0x1ac>
 8020b3c:	9b06      	ldr	r3, [sp, #24]
 8020b3e:	9a04      	ldr	r2, [sp, #16]
 8020b40:	1a9b      	subs	r3, r3, r2
 8020b42:	9306      	str	r3, [sp, #24]
 8020b44:	4253      	negs	r3, r2
 8020b46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020b48:	2300      	movs	r3, #0
 8020b4a:	9314      	str	r3, [sp, #80]	@ 0x50
 8020b4c:	e7c5      	b.n	8020ada <_dtoa_r+0x1c2>
 8020b4e:	2300      	movs	r3, #0
 8020b50:	9310      	str	r3, [sp, #64]	@ 0x40
 8020b52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020b54:	930e      	str	r3, [sp, #56]	@ 0x38
 8020b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	dc13      	bgt.n	8020b84 <_dtoa_r+0x26c>
 8020b5c:	2301      	movs	r3, #1
 8020b5e:	001a      	movs	r2, r3
 8020b60:	930e      	str	r3, [sp, #56]	@ 0x38
 8020b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b64:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020b66:	e00d      	b.n	8020b84 <_dtoa_r+0x26c>
 8020b68:	2301      	movs	r3, #1
 8020b6a:	e7f1      	b.n	8020b50 <_dtoa_r+0x238>
 8020b6c:	2300      	movs	r3, #0
 8020b6e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8020b70:	9310      	str	r3, [sp, #64]	@ 0x40
 8020b72:	4694      	mov	ip, r2
 8020b74:	9b04      	ldr	r3, [sp, #16]
 8020b76:	4463      	add	r3, ip
 8020b78:	930e      	str	r3, [sp, #56]	@ 0x38
 8020b7a:	3301      	adds	r3, #1
 8020b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	dc00      	bgt.n	8020b84 <_dtoa_r+0x26c>
 8020b82:	2301      	movs	r3, #1
 8020b84:	9a03      	ldr	r2, [sp, #12]
 8020b86:	2100      	movs	r1, #0
 8020b88:	69d0      	ldr	r0, [r2, #28]
 8020b8a:	2204      	movs	r2, #4
 8020b8c:	0015      	movs	r5, r2
 8020b8e:	3514      	adds	r5, #20
 8020b90:	429d      	cmp	r5, r3
 8020b92:	d91b      	bls.n	8020bcc <_dtoa_r+0x2b4>
 8020b94:	6041      	str	r1, [r0, #4]
 8020b96:	9803      	ldr	r0, [sp, #12]
 8020b98:	f001 f924 	bl	8021de4 <_Balloc>
 8020b9c:	9008      	str	r0, [sp, #32]
 8020b9e:	2800      	cmp	r0, #0
 8020ba0:	d117      	bne.n	8020bd2 <_dtoa_r+0x2ba>
 8020ba2:	21b0      	movs	r1, #176	@ 0xb0
 8020ba4:	4b42      	ldr	r3, [pc, #264]	@ (8020cb0 <_dtoa_r+0x398>)
 8020ba6:	482e      	ldr	r0, [pc, #184]	@ (8020c60 <_dtoa_r+0x348>)
 8020ba8:	9a08      	ldr	r2, [sp, #32]
 8020baa:	31ff      	adds	r1, #255	@ 0xff
 8020bac:	e6c9      	b.n	8020942 <_dtoa_r+0x2a>
 8020bae:	2301      	movs	r3, #1
 8020bb0:	e7dd      	b.n	8020b6e <_dtoa_r+0x256>
 8020bb2:	2300      	movs	r3, #0
 8020bb4:	9410      	str	r4, [sp, #64]	@ 0x40
 8020bb6:	9322      	str	r3, [sp, #136]	@ 0x88
 8020bb8:	3b01      	subs	r3, #1
 8020bba:	930e      	str	r3, [sp, #56]	@ 0x38
 8020bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8020bbe:	2200      	movs	r2, #0
 8020bc0:	3313      	adds	r3, #19
 8020bc2:	e7cf      	b.n	8020b64 <_dtoa_r+0x24c>
 8020bc4:	2301      	movs	r3, #1
 8020bc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8020bc8:	3b02      	subs	r3, #2
 8020bca:	e7f6      	b.n	8020bba <_dtoa_r+0x2a2>
 8020bcc:	3101      	adds	r1, #1
 8020bce:	0052      	lsls	r2, r2, #1
 8020bd0:	e7dc      	b.n	8020b8c <_dtoa_r+0x274>
 8020bd2:	9b03      	ldr	r3, [sp, #12]
 8020bd4:	9a08      	ldr	r2, [sp, #32]
 8020bd6:	69db      	ldr	r3, [r3, #28]
 8020bd8:	601a      	str	r2, [r3, #0]
 8020bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bdc:	2b0e      	cmp	r3, #14
 8020bde:	d900      	bls.n	8020be2 <_dtoa_r+0x2ca>
 8020be0:	e0d9      	b.n	8020d96 <_dtoa_r+0x47e>
 8020be2:	2c00      	cmp	r4, #0
 8020be4:	d100      	bne.n	8020be8 <_dtoa_r+0x2d0>
 8020be6:	e0d6      	b.n	8020d96 <_dtoa_r+0x47e>
 8020be8:	9b04      	ldr	r3, [sp, #16]
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	dd64      	ble.n	8020cb8 <_dtoa_r+0x3a0>
 8020bee:	210f      	movs	r1, #15
 8020bf0:	9a04      	ldr	r2, [sp, #16]
 8020bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8020ca0 <_dtoa_r+0x388>)
 8020bf4:	400a      	ands	r2, r1
 8020bf6:	00d2      	lsls	r2, r2, #3
 8020bf8:	189b      	adds	r3, r3, r2
 8020bfa:	681e      	ldr	r6, [r3, #0]
 8020bfc:	685f      	ldr	r7, [r3, #4]
 8020bfe:	9b04      	ldr	r3, [sp, #16]
 8020c00:	2402      	movs	r4, #2
 8020c02:	111d      	asrs	r5, r3, #4
 8020c04:	05db      	lsls	r3, r3, #23
 8020c06:	d50a      	bpl.n	8020c1e <_dtoa_r+0x306>
 8020c08:	4b2a      	ldr	r3, [pc, #168]	@ (8020cb4 <_dtoa_r+0x39c>)
 8020c0a:	400d      	ands	r5, r1
 8020c0c:	6a1a      	ldr	r2, [r3, #32]
 8020c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020c10:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020c12:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020c14:	f7e1 f8ce 	bl	8001db4 <__aeabi_ddiv>
 8020c18:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c1a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020c1c:	3401      	adds	r4, #1
 8020c1e:	4b25      	ldr	r3, [pc, #148]	@ (8020cb4 <_dtoa_r+0x39c>)
 8020c20:	930c      	str	r3, [sp, #48]	@ 0x30
 8020c22:	2d00      	cmp	r5, #0
 8020c24:	d108      	bne.n	8020c38 <_dtoa_r+0x320>
 8020c26:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c2a:	0032      	movs	r2, r6
 8020c2c:	003b      	movs	r3, r7
 8020c2e:	f7e1 f8c1 	bl	8001db4 <__aeabi_ddiv>
 8020c32:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c34:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020c36:	e05a      	b.n	8020cee <_dtoa_r+0x3d6>
 8020c38:	2301      	movs	r3, #1
 8020c3a:	421d      	tst	r5, r3
 8020c3c:	d009      	beq.n	8020c52 <_dtoa_r+0x33a>
 8020c3e:	18e4      	adds	r4, r4, r3
 8020c40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020c42:	0030      	movs	r0, r6
 8020c44:	681a      	ldr	r2, [r3, #0]
 8020c46:	685b      	ldr	r3, [r3, #4]
 8020c48:	0039      	movs	r1, r7
 8020c4a:	f7e1 fcf7 	bl	800263c <__aeabi_dmul>
 8020c4e:	0006      	movs	r6, r0
 8020c50:	000f      	movs	r7, r1
 8020c52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020c54:	106d      	asrs	r5, r5, #1
 8020c56:	3308      	adds	r3, #8
 8020c58:	e7e2      	b.n	8020c20 <_dtoa_r+0x308>
 8020c5a:	46c0      	nop			@ (mov r8, r8)
 8020c5c:	0802640a 	.word	0x0802640a
 8020c60:	08026421 	.word	0x08026421
 8020c64:	7ff00000 	.word	0x7ff00000
 8020c68:	0000270f 	.word	0x0000270f
 8020c6c:	08026406 	.word	0x08026406
 8020c70:	08026409 	.word	0x08026409
 8020c74:	080263d2 	.word	0x080263d2
 8020c78:	080263d1 	.word	0x080263d1
 8020c7c:	3ff00000 	.word	0x3ff00000
 8020c80:	fffffc01 	.word	0xfffffc01
 8020c84:	3ff80000 	.word	0x3ff80000
 8020c88:	636f4361 	.word	0x636f4361
 8020c8c:	3fd287a7 	.word	0x3fd287a7
 8020c90:	8b60c8b3 	.word	0x8b60c8b3
 8020c94:	3fc68a28 	.word	0x3fc68a28
 8020c98:	509f79fb 	.word	0x509f79fb
 8020c9c:	3fd34413 	.word	0x3fd34413
 8020ca0:	08026578 	.word	0x08026578
 8020ca4:	00000432 	.word	0x00000432
 8020ca8:	00000412 	.word	0x00000412
 8020cac:	fe100000 	.word	0xfe100000
 8020cb0:	08026479 	.word	0x08026479
 8020cb4:	08026550 	.word	0x08026550
 8020cb8:	9b04      	ldr	r3, [sp, #16]
 8020cba:	2402      	movs	r4, #2
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	d016      	beq.n	8020cee <_dtoa_r+0x3d6>
 8020cc0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020cc2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020cc4:	220f      	movs	r2, #15
 8020cc6:	425d      	negs	r5, r3
 8020cc8:	402a      	ands	r2, r5
 8020cca:	4bd7      	ldr	r3, [pc, #860]	@ (8021028 <_dtoa_r+0x710>)
 8020ccc:	00d2      	lsls	r2, r2, #3
 8020cce:	189b      	adds	r3, r3, r2
 8020cd0:	681a      	ldr	r2, [r3, #0]
 8020cd2:	685b      	ldr	r3, [r3, #4]
 8020cd4:	f7e1 fcb2 	bl	800263c <__aeabi_dmul>
 8020cd8:	2701      	movs	r7, #1
 8020cda:	2300      	movs	r3, #0
 8020cdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8020cde:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020ce0:	4ed2      	ldr	r6, [pc, #840]	@ (802102c <_dtoa_r+0x714>)
 8020ce2:	112d      	asrs	r5, r5, #4
 8020ce4:	2d00      	cmp	r5, #0
 8020ce6:	d000      	beq.n	8020cea <_dtoa_r+0x3d2>
 8020ce8:	e0ba      	b.n	8020e60 <_dtoa_r+0x548>
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	d1a1      	bne.n	8020c32 <_dtoa_r+0x31a>
 8020cee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020cf0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020cf2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020cf4:	2b00      	cmp	r3, #0
 8020cf6:	d100      	bne.n	8020cfa <_dtoa_r+0x3e2>
 8020cf8:	e0bd      	b.n	8020e76 <_dtoa_r+0x55e>
 8020cfa:	2200      	movs	r2, #0
 8020cfc:	0030      	movs	r0, r6
 8020cfe:	0039      	movs	r1, r7
 8020d00:	4bcb      	ldr	r3, [pc, #812]	@ (8021030 <_dtoa_r+0x718>)
 8020d02:	f7df fbdb 	bl	80004bc <__aeabi_dcmplt>
 8020d06:	2800      	cmp	r0, #0
 8020d08:	d100      	bne.n	8020d0c <_dtoa_r+0x3f4>
 8020d0a:	e0b4      	b.n	8020e76 <_dtoa_r+0x55e>
 8020d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d100      	bne.n	8020d14 <_dtoa_r+0x3fc>
 8020d12:	e0b0      	b.n	8020e76 <_dtoa_r+0x55e>
 8020d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	dd39      	ble.n	8020d8e <_dtoa_r+0x476>
 8020d1a:	9b04      	ldr	r3, [sp, #16]
 8020d1c:	2200      	movs	r2, #0
 8020d1e:	3b01      	subs	r3, #1
 8020d20:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d22:	0030      	movs	r0, r6
 8020d24:	4bc3      	ldr	r3, [pc, #780]	@ (8021034 <_dtoa_r+0x71c>)
 8020d26:	0039      	movs	r1, r7
 8020d28:	f7e1 fc88 	bl	800263c <__aeabi_dmul>
 8020d2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8020d2e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020d30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d32:	3401      	adds	r4, #1
 8020d34:	0020      	movs	r0, r4
 8020d36:	9311      	str	r3, [sp, #68]	@ 0x44
 8020d38:	f7e2 fb42 	bl	80033c0 <__aeabi_i2d>
 8020d3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020d40:	f7e1 fc7c 	bl	800263c <__aeabi_dmul>
 8020d44:	4bbc      	ldr	r3, [pc, #752]	@ (8021038 <_dtoa_r+0x720>)
 8020d46:	2200      	movs	r2, #0
 8020d48:	f7e0 fcd0 	bl	80016ec <__aeabi_dadd>
 8020d4c:	4bbb      	ldr	r3, [pc, #748]	@ (802103c <_dtoa_r+0x724>)
 8020d4e:	0006      	movs	r6, r0
 8020d50:	18cf      	adds	r7, r1, r3
 8020d52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	d000      	beq.n	8020d5a <_dtoa_r+0x442>
 8020d58:	e091      	b.n	8020e7e <_dtoa_r+0x566>
 8020d5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020d5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020d5e:	2200      	movs	r2, #0
 8020d60:	4bb7      	ldr	r3, [pc, #732]	@ (8021040 <_dtoa_r+0x728>)
 8020d62:	f7e1 ff33 	bl	8002bcc <__aeabi_dsub>
 8020d66:	0032      	movs	r2, r6
 8020d68:	003b      	movs	r3, r7
 8020d6a:	0004      	movs	r4, r0
 8020d6c:	000d      	movs	r5, r1
 8020d6e:	f7df fbb9 	bl	80004e4 <__aeabi_dcmpgt>
 8020d72:	2800      	cmp	r0, #0
 8020d74:	d000      	beq.n	8020d78 <_dtoa_r+0x460>
 8020d76:	e29d      	b.n	80212b4 <_dtoa_r+0x99c>
 8020d78:	2180      	movs	r1, #128	@ 0x80
 8020d7a:	0609      	lsls	r1, r1, #24
 8020d7c:	187b      	adds	r3, r7, r1
 8020d7e:	0032      	movs	r2, r6
 8020d80:	0020      	movs	r0, r4
 8020d82:	0029      	movs	r1, r5
 8020d84:	f7df fb9a 	bl	80004bc <__aeabi_dcmplt>
 8020d88:	2800      	cmp	r0, #0
 8020d8a:	d000      	beq.n	8020d8e <_dtoa_r+0x476>
 8020d8c:	e130      	b.n	8020ff0 <_dtoa_r+0x6d8>
 8020d8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020d90:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020d92:	930a      	str	r3, [sp, #40]	@ 0x28
 8020d94:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020d96:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	da00      	bge.n	8020d9e <_dtoa_r+0x486>
 8020d9c:	e177      	b.n	802108e <_dtoa_r+0x776>
 8020d9e:	9a04      	ldr	r2, [sp, #16]
 8020da0:	2a0e      	cmp	r2, #14
 8020da2:	dd00      	ble.n	8020da6 <_dtoa_r+0x48e>
 8020da4:	e173      	b.n	802108e <_dtoa_r+0x776>
 8020da6:	4ba0      	ldr	r3, [pc, #640]	@ (8021028 <_dtoa_r+0x710>)
 8020da8:	00d2      	lsls	r2, r2, #3
 8020daa:	189b      	adds	r3, r3, r2
 8020dac:	685c      	ldr	r4, [r3, #4]
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	9306      	str	r3, [sp, #24]
 8020db2:	9407      	str	r4, [sp, #28]
 8020db4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	da03      	bge.n	8020dc2 <_dtoa_r+0x4aa>
 8020dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	dc00      	bgt.n	8020dc2 <_dtoa_r+0x4aa>
 8020dc0:	e106      	b.n	8020fd0 <_dtoa_r+0x6b8>
 8020dc2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020dc4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020dc8:	9d08      	ldr	r5, [sp, #32]
 8020dca:	3b01      	subs	r3, #1
 8020dcc:	195b      	adds	r3, r3, r5
 8020dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8020dd0:	9a06      	ldr	r2, [sp, #24]
 8020dd2:	9b07      	ldr	r3, [sp, #28]
 8020dd4:	0030      	movs	r0, r6
 8020dd6:	0039      	movs	r1, r7
 8020dd8:	f7e0 ffec 	bl	8001db4 <__aeabi_ddiv>
 8020ddc:	f7e2 fab4 	bl	8003348 <__aeabi_d2iz>
 8020de0:	9009      	str	r0, [sp, #36]	@ 0x24
 8020de2:	f7e2 faed 	bl	80033c0 <__aeabi_i2d>
 8020de6:	9a06      	ldr	r2, [sp, #24]
 8020de8:	9b07      	ldr	r3, [sp, #28]
 8020dea:	f7e1 fc27 	bl	800263c <__aeabi_dmul>
 8020dee:	0002      	movs	r2, r0
 8020df0:	000b      	movs	r3, r1
 8020df2:	0030      	movs	r0, r6
 8020df4:	0039      	movs	r1, r7
 8020df6:	f7e1 fee9 	bl	8002bcc <__aeabi_dsub>
 8020dfa:	002b      	movs	r3, r5
 8020dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020dfe:	3501      	adds	r5, #1
 8020e00:	3230      	adds	r2, #48	@ 0x30
 8020e02:	701a      	strb	r2, [r3, #0]
 8020e04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020e06:	002c      	movs	r4, r5
 8020e08:	429a      	cmp	r2, r3
 8020e0a:	d000      	beq.n	8020e0e <_dtoa_r+0x4f6>
 8020e0c:	e131      	b.n	8021072 <_dtoa_r+0x75a>
 8020e0e:	0002      	movs	r2, r0
 8020e10:	000b      	movs	r3, r1
 8020e12:	f7e0 fc6b 	bl	80016ec <__aeabi_dadd>
 8020e16:	9a06      	ldr	r2, [sp, #24]
 8020e18:	9b07      	ldr	r3, [sp, #28]
 8020e1a:	0006      	movs	r6, r0
 8020e1c:	000f      	movs	r7, r1
 8020e1e:	f7df fb61 	bl	80004e4 <__aeabi_dcmpgt>
 8020e22:	2800      	cmp	r0, #0
 8020e24:	d000      	beq.n	8020e28 <_dtoa_r+0x510>
 8020e26:	e10f      	b.n	8021048 <_dtoa_r+0x730>
 8020e28:	9a06      	ldr	r2, [sp, #24]
 8020e2a:	9b07      	ldr	r3, [sp, #28]
 8020e2c:	0030      	movs	r0, r6
 8020e2e:	0039      	movs	r1, r7
 8020e30:	f7df fb3e 	bl	80004b0 <__aeabi_dcmpeq>
 8020e34:	2800      	cmp	r0, #0
 8020e36:	d003      	beq.n	8020e40 <_dtoa_r+0x528>
 8020e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e3a:	07dd      	lsls	r5, r3, #31
 8020e3c:	d500      	bpl.n	8020e40 <_dtoa_r+0x528>
 8020e3e:	e103      	b.n	8021048 <_dtoa_r+0x730>
 8020e40:	9905      	ldr	r1, [sp, #20]
 8020e42:	9803      	ldr	r0, [sp, #12]
 8020e44:	f001 f812 	bl	8021e6c <_Bfree>
 8020e48:	2300      	movs	r3, #0
 8020e4a:	7023      	strb	r3, [r4, #0]
 8020e4c:	9b04      	ldr	r3, [sp, #16]
 8020e4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020e50:	3301      	adds	r3, #1
 8020e52:	6013      	str	r3, [r2, #0]
 8020e54:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020e56:	2b00      	cmp	r3, #0
 8020e58:	d100      	bne.n	8020e5c <_dtoa_r+0x544>
 8020e5a:	e5a7      	b.n	80209ac <_dtoa_r+0x94>
 8020e5c:	601c      	str	r4, [r3, #0]
 8020e5e:	e5a5      	b.n	80209ac <_dtoa_r+0x94>
 8020e60:	423d      	tst	r5, r7
 8020e62:	d005      	beq.n	8020e70 <_dtoa_r+0x558>
 8020e64:	6832      	ldr	r2, [r6, #0]
 8020e66:	6873      	ldr	r3, [r6, #4]
 8020e68:	f7e1 fbe8 	bl	800263c <__aeabi_dmul>
 8020e6c:	003b      	movs	r3, r7
 8020e6e:	3401      	adds	r4, #1
 8020e70:	106d      	asrs	r5, r5, #1
 8020e72:	3608      	adds	r6, #8
 8020e74:	e736      	b.n	8020ce4 <_dtoa_r+0x3cc>
 8020e76:	9b04      	ldr	r3, [sp, #16]
 8020e78:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e7c:	e75a      	b.n	8020d34 <_dtoa_r+0x41c>
 8020e7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020e80:	4b69      	ldr	r3, [pc, #420]	@ (8021028 <_dtoa_r+0x710>)
 8020e82:	3a01      	subs	r2, #1
 8020e84:	00d2      	lsls	r2, r2, #3
 8020e86:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020e88:	189b      	adds	r3, r3, r2
 8020e8a:	681a      	ldr	r2, [r3, #0]
 8020e8c:	685b      	ldr	r3, [r3, #4]
 8020e8e:	2900      	cmp	r1, #0
 8020e90:	d04c      	beq.n	8020f2c <_dtoa_r+0x614>
 8020e92:	2000      	movs	r0, #0
 8020e94:	496b      	ldr	r1, [pc, #428]	@ (8021044 <_dtoa_r+0x72c>)
 8020e96:	f7e0 ff8d 	bl	8001db4 <__aeabi_ddiv>
 8020e9a:	0032      	movs	r2, r6
 8020e9c:	003b      	movs	r3, r7
 8020e9e:	f7e1 fe95 	bl	8002bcc <__aeabi_dsub>
 8020ea2:	9a08      	ldr	r2, [sp, #32]
 8020ea4:	0006      	movs	r6, r0
 8020ea6:	4694      	mov	ip, r2
 8020ea8:	000f      	movs	r7, r1
 8020eaa:	9b08      	ldr	r3, [sp, #32]
 8020eac:	9316      	str	r3, [sp, #88]	@ 0x58
 8020eae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020eb0:	4463      	add	r3, ip
 8020eb2:	9311      	str	r3, [sp, #68]	@ 0x44
 8020eb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020eb6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020eb8:	f7e2 fa46 	bl	8003348 <__aeabi_d2iz>
 8020ebc:	0005      	movs	r5, r0
 8020ebe:	f7e2 fa7f 	bl	80033c0 <__aeabi_i2d>
 8020ec2:	0002      	movs	r2, r0
 8020ec4:	000b      	movs	r3, r1
 8020ec6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020ec8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020eca:	f7e1 fe7f 	bl	8002bcc <__aeabi_dsub>
 8020ece:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020ed0:	3530      	adds	r5, #48	@ 0x30
 8020ed2:	1c5c      	adds	r4, r3, #1
 8020ed4:	701d      	strb	r5, [r3, #0]
 8020ed6:	0032      	movs	r2, r6
 8020ed8:	003b      	movs	r3, r7
 8020eda:	900a      	str	r0, [sp, #40]	@ 0x28
 8020edc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020ede:	f7df faed 	bl	80004bc <__aeabi_dcmplt>
 8020ee2:	2800      	cmp	r0, #0
 8020ee4:	d16a      	bne.n	8020fbc <_dtoa_r+0x6a4>
 8020ee6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020ee8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020eea:	2000      	movs	r0, #0
 8020eec:	4950      	ldr	r1, [pc, #320]	@ (8021030 <_dtoa_r+0x718>)
 8020eee:	f7e1 fe6d 	bl	8002bcc <__aeabi_dsub>
 8020ef2:	0032      	movs	r2, r6
 8020ef4:	003b      	movs	r3, r7
 8020ef6:	f7df fae1 	bl	80004bc <__aeabi_dcmplt>
 8020efa:	2800      	cmp	r0, #0
 8020efc:	d000      	beq.n	8020f00 <_dtoa_r+0x5e8>
 8020efe:	e0a5      	b.n	802104c <_dtoa_r+0x734>
 8020f00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020f02:	42a3      	cmp	r3, r4
 8020f04:	d100      	bne.n	8020f08 <_dtoa_r+0x5f0>
 8020f06:	e742      	b.n	8020d8e <_dtoa_r+0x476>
 8020f08:	2200      	movs	r2, #0
 8020f0a:	0030      	movs	r0, r6
 8020f0c:	0039      	movs	r1, r7
 8020f0e:	4b49      	ldr	r3, [pc, #292]	@ (8021034 <_dtoa_r+0x71c>)
 8020f10:	f7e1 fb94 	bl	800263c <__aeabi_dmul>
 8020f14:	2200      	movs	r2, #0
 8020f16:	0006      	movs	r6, r0
 8020f18:	000f      	movs	r7, r1
 8020f1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020f1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f1e:	4b45      	ldr	r3, [pc, #276]	@ (8021034 <_dtoa_r+0x71c>)
 8020f20:	f7e1 fb8c 	bl	800263c <__aeabi_dmul>
 8020f24:	9416      	str	r4, [sp, #88]	@ 0x58
 8020f26:	900a      	str	r0, [sp, #40]	@ 0x28
 8020f28:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020f2a:	e7c3      	b.n	8020eb4 <_dtoa_r+0x59c>
 8020f2c:	0030      	movs	r0, r6
 8020f2e:	0039      	movs	r1, r7
 8020f30:	f7e1 fb84 	bl	800263c <__aeabi_dmul>
 8020f34:	9d08      	ldr	r5, [sp, #32]
 8020f36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020f38:	002b      	movs	r3, r5
 8020f3a:	4694      	mov	ip, r2
 8020f3c:	9016      	str	r0, [sp, #88]	@ 0x58
 8020f3e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020f40:	4463      	add	r3, ip
 8020f42:	9319      	str	r3, [sp, #100]	@ 0x64
 8020f44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020f46:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f48:	f7e2 f9fe 	bl	8003348 <__aeabi_d2iz>
 8020f4c:	0004      	movs	r4, r0
 8020f4e:	f7e2 fa37 	bl	80033c0 <__aeabi_i2d>
 8020f52:	000b      	movs	r3, r1
 8020f54:	0002      	movs	r2, r0
 8020f56:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020f58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f5a:	f7e1 fe37 	bl	8002bcc <__aeabi_dsub>
 8020f5e:	3430      	adds	r4, #48	@ 0x30
 8020f60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020f62:	702c      	strb	r4, [r5, #0]
 8020f64:	3501      	adds	r5, #1
 8020f66:	0006      	movs	r6, r0
 8020f68:	000f      	movs	r7, r1
 8020f6a:	42ab      	cmp	r3, r5
 8020f6c:	d129      	bne.n	8020fc2 <_dtoa_r+0x6aa>
 8020f6e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020f70:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020f72:	9b08      	ldr	r3, [sp, #32]
 8020f74:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020f76:	469c      	mov	ip, r3
 8020f78:	2200      	movs	r2, #0
 8020f7a:	4b32      	ldr	r3, [pc, #200]	@ (8021044 <_dtoa_r+0x72c>)
 8020f7c:	4464      	add	r4, ip
 8020f7e:	f7e0 fbb5 	bl	80016ec <__aeabi_dadd>
 8020f82:	0002      	movs	r2, r0
 8020f84:	000b      	movs	r3, r1
 8020f86:	0030      	movs	r0, r6
 8020f88:	0039      	movs	r1, r7
 8020f8a:	f7df faab 	bl	80004e4 <__aeabi_dcmpgt>
 8020f8e:	2800      	cmp	r0, #0
 8020f90:	d15c      	bne.n	802104c <_dtoa_r+0x734>
 8020f92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020f94:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020f96:	2000      	movs	r0, #0
 8020f98:	492a      	ldr	r1, [pc, #168]	@ (8021044 <_dtoa_r+0x72c>)
 8020f9a:	f7e1 fe17 	bl	8002bcc <__aeabi_dsub>
 8020f9e:	0002      	movs	r2, r0
 8020fa0:	000b      	movs	r3, r1
 8020fa2:	0030      	movs	r0, r6
 8020fa4:	0039      	movs	r1, r7
 8020fa6:	f7df fa89 	bl	80004bc <__aeabi_dcmplt>
 8020faa:	2800      	cmp	r0, #0
 8020fac:	d100      	bne.n	8020fb0 <_dtoa_r+0x698>
 8020fae:	e6ee      	b.n	8020d8e <_dtoa_r+0x476>
 8020fb0:	0023      	movs	r3, r4
 8020fb2:	3c01      	subs	r4, #1
 8020fb4:	7822      	ldrb	r2, [r4, #0]
 8020fb6:	2a30      	cmp	r2, #48	@ 0x30
 8020fb8:	d0fa      	beq.n	8020fb0 <_dtoa_r+0x698>
 8020fba:	001c      	movs	r4, r3
 8020fbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020fbe:	9304      	str	r3, [sp, #16]
 8020fc0:	e73e      	b.n	8020e40 <_dtoa_r+0x528>
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8021034 <_dtoa_r+0x71c>)
 8020fc6:	f7e1 fb39 	bl	800263c <__aeabi_dmul>
 8020fca:	900a      	str	r0, [sp, #40]	@ 0x28
 8020fcc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020fce:	e7b9      	b.n	8020f44 <_dtoa_r+0x62c>
 8020fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	d10c      	bne.n	8020ff0 <_dtoa_r+0x6d8>
 8020fd6:	9806      	ldr	r0, [sp, #24]
 8020fd8:	9907      	ldr	r1, [sp, #28]
 8020fda:	2200      	movs	r2, #0
 8020fdc:	4b18      	ldr	r3, [pc, #96]	@ (8021040 <_dtoa_r+0x728>)
 8020fde:	f7e1 fb2d 	bl	800263c <__aeabi_dmul>
 8020fe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020fe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020fe6:	f7df fa87 	bl	80004f8 <__aeabi_dcmpge>
 8020fea:	2800      	cmp	r0, #0
 8020fec:	d100      	bne.n	8020ff0 <_dtoa_r+0x6d8>
 8020fee:	e164      	b.n	80212ba <_dtoa_r+0x9a2>
 8020ff0:	2600      	movs	r6, #0
 8020ff2:	0037      	movs	r7, r6
 8020ff4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020ff6:	9c08      	ldr	r4, [sp, #32]
 8020ff8:	43db      	mvns	r3, r3
 8020ffa:	930c      	str	r3, [sp, #48]	@ 0x30
 8020ffc:	2300      	movs	r3, #0
 8020ffe:	9304      	str	r3, [sp, #16]
 8021000:	0031      	movs	r1, r6
 8021002:	9803      	ldr	r0, [sp, #12]
 8021004:	f000 ff32 	bl	8021e6c <_Bfree>
 8021008:	2f00      	cmp	r7, #0
 802100a:	d0d7      	beq.n	8020fbc <_dtoa_r+0x6a4>
 802100c:	9b04      	ldr	r3, [sp, #16]
 802100e:	2b00      	cmp	r3, #0
 8021010:	d005      	beq.n	802101e <_dtoa_r+0x706>
 8021012:	42bb      	cmp	r3, r7
 8021014:	d003      	beq.n	802101e <_dtoa_r+0x706>
 8021016:	0019      	movs	r1, r3
 8021018:	9803      	ldr	r0, [sp, #12]
 802101a:	f000 ff27 	bl	8021e6c <_Bfree>
 802101e:	0039      	movs	r1, r7
 8021020:	9803      	ldr	r0, [sp, #12]
 8021022:	f000 ff23 	bl	8021e6c <_Bfree>
 8021026:	e7c9      	b.n	8020fbc <_dtoa_r+0x6a4>
 8021028:	08026578 	.word	0x08026578
 802102c:	08026550 	.word	0x08026550
 8021030:	3ff00000 	.word	0x3ff00000
 8021034:	40240000 	.word	0x40240000
 8021038:	401c0000 	.word	0x401c0000
 802103c:	fcc00000 	.word	0xfcc00000
 8021040:	40140000 	.word	0x40140000
 8021044:	3fe00000 	.word	0x3fe00000
 8021048:	9b04      	ldr	r3, [sp, #16]
 802104a:	930c      	str	r3, [sp, #48]	@ 0x30
 802104c:	0023      	movs	r3, r4
 802104e:	001c      	movs	r4, r3
 8021050:	3b01      	subs	r3, #1
 8021052:	781a      	ldrb	r2, [r3, #0]
 8021054:	2a39      	cmp	r2, #57	@ 0x39
 8021056:	d108      	bne.n	802106a <_dtoa_r+0x752>
 8021058:	9a08      	ldr	r2, [sp, #32]
 802105a:	429a      	cmp	r2, r3
 802105c:	d1f7      	bne.n	802104e <_dtoa_r+0x736>
 802105e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021060:	9908      	ldr	r1, [sp, #32]
 8021062:	3201      	adds	r2, #1
 8021064:	920c      	str	r2, [sp, #48]	@ 0x30
 8021066:	2230      	movs	r2, #48	@ 0x30
 8021068:	700a      	strb	r2, [r1, #0]
 802106a:	781a      	ldrb	r2, [r3, #0]
 802106c:	3201      	adds	r2, #1
 802106e:	701a      	strb	r2, [r3, #0]
 8021070:	e7a4      	b.n	8020fbc <_dtoa_r+0x6a4>
 8021072:	2200      	movs	r2, #0
 8021074:	4bc6      	ldr	r3, [pc, #792]	@ (8021390 <_dtoa_r+0xa78>)
 8021076:	f7e1 fae1 	bl	800263c <__aeabi_dmul>
 802107a:	2200      	movs	r2, #0
 802107c:	2300      	movs	r3, #0
 802107e:	0006      	movs	r6, r0
 8021080:	000f      	movs	r7, r1
 8021082:	f7df fa15 	bl	80004b0 <__aeabi_dcmpeq>
 8021086:	2800      	cmp	r0, #0
 8021088:	d100      	bne.n	802108c <_dtoa_r+0x774>
 802108a:	e6a1      	b.n	8020dd0 <_dtoa_r+0x4b8>
 802108c:	e6d8      	b.n	8020e40 <_dtoa_r+0x528>
 802108e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021090:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021092:	9c06      	ldr	r4, [sp, #24]
 8021094:	2f00      	cmp	r7, #0
 8021096:	d014      	beq.n	80210c2 <_dtoa_r+0x7aa>
 8021098:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802109a:	2a01      	cmp	r2, #1
 802109c:	dd00      	ble.n	80210a0 <_dtoa_r+0x788>
 802109e:	e0c8      	b.n	8021232 <_dtoa_r+0x91a>
 80210a0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80210a2:	2a00      	cmp	r2, #0
 80210a4:	d100      	bne.n	80210a8 <_dtoa_r+0x790>
 80210a6:	e0be      	b.n	8021226 <_dtoa_r+0x90e>
 80210a8:	4aba      	ldr	r2, [pc, #744]	@ (8021394 <_dtoa_r+0xa7c>)
 80210aa:	189b      	adds	r3, r3, r2
 80210ac:	9a06      	ldr	r2, [sp, #24]
 80210ae:	2101      	movs	r1, #1
 80210b0:	18d2      	adds	r2, r2, r3
 80210b2:	9206      	str	r2, [sp, #24]
 80210b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80210b6:	9803      	ldr	r0, [sp, #12]
 80210b8:	18d3      	adds	r3, r2, r3
 80210ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80210bc:	f000 ffda 	bl	8022074 <__i2b>
 80210c0:	0007      	movs	r7, r0
 80210c2:	2c00      	cmp	r4, #0
 80210c4:	d00e      	beq.n	80210e4 <_dtoa_r+0x7cc>
 80210c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	dd0b      	ble.n	80210e4 <_dtoa_r+0x7cc>
 80210cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80210ce:	0023      	movs	r3, r4
 80210d0:	4294      	cmp	r4, r2
 80210d2:	dd00      	ble.n	80210d6 <_dtoa_r+0x7be>
 80210d4:	0013      	movs	r3, r2
 80210d6:	9a06      	ldr	r2, [sp, #24]
 80210d8:	1ae4      	subs	r4, r4, r3
 80210da:	1ad2      	subs	r2, r2, r3
 80210dc:	9206      	str	r2, [sp, #24]
 80210de:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80210e0:	1ad3      	subs	r3, r2, r3
 80210e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80210e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	d01f      	beq.n	802112a <_dtoa_r+0x812>
 80210ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	d100      	bne.n	80210f2 <_dtoa_r+0x7da>
 80210f0:	e0b5      	b.n	802125e <_dtoa_r+0x946>
 80210f2:	2d00      	cmp	r5, #0
 80210f4:	d010      	beq.n	8021118 <_dtoa_r+0x800>
 80210f6:	0039      	movs	r1, r7
 80210f8:	002a      	movs	r2, r5
 80210fa:	9803      	ldr	r0, [sp, #12]
 80210fc:	f001 f884 	bl	8022208 <__pow5mult>
 8021100:	9a05      	ldr	r2, [sp, #20]
 8021102:	0001      	movs	r1, r0
 8021104:	0007      	movs	r7, r0
 8021106:	9803      	ldr	r0, [sp, #12]
 8021108:	f000 ffcc 	bl	80220a4 <__multiply>
 802110c:	0006      	movs	r6, r0
 802110e:	9905      	ldr	r1, [sp, #20]
 8021110:	9803      	ldr	r0, [sp, #12]
 8021112:	f000 feab 	bl	8021e6c <_Bfree>
 8021116:	9605      	str	r6, [sp, #20]
 8021118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802111a:	1b5a      	subs	r2, r3, r5
 802111c:	42ab      	cmp	r3, r5
 802111e:	d004      	beq.n	802112a <_dtoa_r+0x812>
 8021120:	9905      	ldr	r1, [sp, #20]
 8021122:	9803      	ldr	r0, [sp, #12]
 8021124:	f001 f870 	bl	8022208 <__pow5mult>
 8021128:	9005      	str	r0, [sp, #20]
 802112a:	2101      	movs	r1, #1
 802112c:	9803      	ldr	r0, [sp, #12]
 802112e:	f000 ffa1 	bl	8022074 <__i2b>
 8021132:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021134:	0006      	movs	r6, r0
 8021136:	2b00      	cmp	r3, #0
 8021138:	d100      	bne.n	802113c <_dtoa_r+0x824>
 802113a:	e1bc      	b.n	80214b6 <_dtoa_r+0xb9e>
 802113c:	001a      	movs	r2, r3
 802113e:	0001      	movs	r1, r0
 8021140:	9803      	ldr	r0, [sp, #12]
 8021142:	f001 f861 	bl	8022208 <__pow5mult>
 8021146:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021148:	0006      	movs	r6, r0
 802114a:	2500      	movs	r5, #0
 802114c:	2b01      	cmp	r3, #1
 802114e:	dc16      	bgt.n	802117e <_dtoa_r+0x866>
 8021150:	2500      	movs	r5, #0
 8021152:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021154:	42ab      	cmp	r3, r5
 8021156:	d10e      	bne.n	8021176 <_dtoa_r+0x85e>
 8021158:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802115a:	031b      	lsls	r3, r3, #12
 802115c:	42ab      	cmp	r3, r5
 802115e:	d10a      	bne.n	8021176 <_dtoa_r+0x85e>
 8021160:	4b8d      	ldr	r3, [pc, #564]	@ (8021398 <_dtoa_r+0xa80>)
 8021162:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021164:	4213      	tst	r3, r2
 8021166:	d006      	beq.n	8021176 <_dtoa_r+0x85e>
 8021168:	9b06      	ldr	r3, [sp, #24]
 802116a:	3501      	adds	r5, #1
 802116c:	3301      	adds	r3, #1
 802116e:	9306      	str	r3, [sp, #24]
 8021170:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021172:	3301      	adds	r3, #1
 8021174:	930d      	str	r3, [sp, #52]	@ 0x34
 8021176:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021178:	2001      	movs	r0, #1
 802117a:	2b00      	cmp	r3, #0
 802117c:	d008      	beq.n	8021190 <_dtoa_r+0x878>
 802117e:	6933      	ldr	r3, [r6, #16]
 8021180:	3303      	adds	r3, #3
 8021182:	009b      	lsls	r3, r3, #2
 8021184:	18f3      	adds	r3, r6, r3
 8021186:	6858      	ldr	r0, [r3, #4]
 8021188:	f000 ff24 	bl	8021fd4 <__hi0bits>
 802118c:	2320      	movs	r3, #32
 802118e:	1a18      	subs	r0, r3, r0
 8021190:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021192:	1818      	adds	r0, r3, r0
 8021194:	0002      	movs	r2, r0
 8021196:	231f      	movs	r3, #31
 8021198:	401a      	ands	r2, r3
 802119a:	4218      	tst	r0, r3
 802119c:	d065      	beq.n	802126a <_dtoa_r+0x952>
 802119e:	3301      	adds	r3, #1
 80211a0:	1a9b      	subs	r3, r3, r2
 80211a2:	2b04      	cmp	r3, #4
 80211a4:	dd5d      	ble.n	8021262 <_dtoa_r+0x94a>
 80211a6:	231c      	movs	r3, #28
 80211a8:	1a9b      	subs	r3, r3, r2
 80211aa:	9a06      	ldr	r2, [sp, #24]
 80211ac:	18e4      	adds	r4, r4, r3
 80211ae:	18d2      	adds	r2, r2, r3
 80211b0:	9206      	str	r2, [sp, #24]
 80211b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80211b4:	18d3      	adds	r3, r2, r3
 80211b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80211b8:	9b06      	ldr	r3, [sp, #24]
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	dd05      	ble.n	80211ca <_dtoa_r+0x8b2>
 80211be:	001a      	movs	r2, r3
 80211c0:	9905      	ldr	r1, [sp, #20]
 80211c2:	9803      	ldr	r0, [sp, #12]
 80211c4:	f001 f87c 	bl	80222c0 <__lshift>
 80211c8:	9005      	str	r0, [sp, #20]
 80211ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	dd05      	ble.n	80211dc <_dtoa_r+0x8c4>
 80211d0:	0031      	movs	r1, r6
 80211d2:	001a      	movs	r2, r3
 80211d4:	9803      	ldr	r0, [sp, #12]
 80211d6:	f001 f873 	bl	80222c0 <__lshift>
 80211da:	0006      	movs	r6, r0
 80211dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80211de:	2b00      	cmp	r3, #0
 80211e0:	d045      	beq.n	802126e <_dtoa_r+0x956>
 80211e2:	0031      	movs	r1, r6
 80211e4:	9805      	ldr	r0, [sp, #20]
 80211e6:	f001 f8d7 	bl	8022398 <__mcmp>
 80211ea:	2800      	cmp	r0, #0
 80211ec:	da3f      	bge.n	802126e <_dtoa_r+0x956>
 80211ee:	9b04      	ldr	r3, [sp, #16]
 80211f0:	220a      	movs	r2, #10
 80211f2:	3b01      	subs	r3, #1
 80211f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80211f6:	9905      	ldr	r1, [sp, #20]
 80211f8:	2300      	movs	r3, #0
 80211fa:	9803      	ldr	r0, [sp, #12]
 80211fc:	f000 fe5a 	bl	8021eb4 <__multadd>
 8021200:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021202:	9005      	str	r0, [sp, #20]
 8021204:	2b00      	cmp	r3, #0
 8021206:	d100      	bne.n	802120a <_dtoa_r+0x8f2>
 8021208:	e15c      	b.n	80214c4 <_dtoa_r+0xbac>
 802120a:	2300      	movs	r3, #0
 802120c:	0039      	movs	r1, r7
 802120e:	220a      	movs	r2, #10
 8021210:	9803      	ldr	r0, [sp, #12]
 8021212:	f000 fe4f 	bl	8021eb4 <__multadd>
 8021216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021218:	0007      	movs	r7, r0
 802121a:	2b00      	cmp	r3, #0
 802121c:	dc55      	bgt.n	80212ca <_dtoa_r+0x9b2>
 802121e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021220:	2b02      	cmp	r3, #2
 8021222:	dc2d      	bgt.n	8021280 <_dtoa_r+0x968>
 8021224:	e051      	b.n	80212ca <_dtoa_r+0x9b2>
 8021226:	2336      	movs	r3, #54	@ 0x36
 8021228:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802122a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802122c:	9c06      	ldr	r4, [sp, #24]
 802122e:	1a9b      	subs	r3, r3, r2
 8021230:	e73c      	b.n	80210ac <_dtoa_r+0x794>
 8021232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021234:	1e5d      	subs	r5, r3, #1
 8021236:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021238:	42ab      	cmp	r3, r5
 802123a:	db08      	blt.n	802124e <_dtoa_r+0x936>
 802123c:	1b5d      	subs	r5, r3, r5
 802123e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021240:	9c06      	ldr	r4, [sp, #24]
 8021242:	2b00      	cmp	r3, #0
 8021244:	db00      	blt.n	8021248 <_dtoa_r+0x930>
 8021246:	e731      	b.n	80210ac <_dtoa_r+0x794>
 8021248:	1ae4      	subs	r4, r4, r3
 802124a:	2300      	movs	r3, #0
 802124c:	e72e      	b.n	80210ac <_dtoa_r+0x794>
 802124e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021250:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021252:	1aeb      	subs	r3, r5, r3
 8021254:	18d3      	adds	r3, r2, r3
 8021256:	950f      	str	r5, [sp, #60]	@ 0x3c
 8021258:	9314      	str	r3, [sp, #80]	@ 0x50
 802125a:	2500      	movs	r5, #0
 802125c:	e7ef      	b.n	802123e <_dtoa_r+0x926>
 802125e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021260:	e75e      	b.n	8021120 <_dtoa_r+0x808>
 8021262:	2b04      	cmp	r3, #4
 8021264:	d0a8      	beq.n	80211b8 <_dtoa_r+0x8a0>
 8021266:	331c      	adds	r3, #28
 8021268:	e79f      	b.n	80211aa <_dtoa_r+0x892>
 802126a:	0013      	movs	r3, r2
 802126c:	e7fb      	b.n	8021266 <_dtoa_r+0x94e>
 802126e:	9b04      	ldr	r3, [sp, #16]
 8021270:	930c      	str	r3, [sp, #48]	@ 0x30
 8021272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021274:	930e      	str	r3, [sp, #56]	@ 0x38
 8021276:	2b00      	cmp	r3, #0
 8021278:	dc23      	bgt.n	80212c2 <_dtoa_r+0x9aa>
 802127a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802127c:	2b02      	cmp	r3, #2
 802127e:	dd20      	ble.n	80212c2 <_dtoa_r+0x9aa>
 8021280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021282:	2b00      	cmp	r3, #0
 8021284:	d000      	beq.n	8021288 <_dtoa_r+0x970>
 8021286:	e6b5      	b.n	8020ff4 <_dtoa_r+0x6dc>
 8021288:	0031      	movs	r1, r6
 802128a:	2205      	movs	r2, #5
 802128c:	9803      	ldr	r0, [sp, #12]
 802128e:	f000 fe11 	bl	8021eb4 <__multadd>
 8021292:	0006      	movs	r6, r0
 8021294:	0001      	movs	r1, r0
 8021296:	9805      	ldr	r0, [sp, #20]
 8021298:	f001 f87e 	bl	8022398 <__mcmp>
 802129c:	2800      	cmp	r0, #0
 802129e:	dc00      	bgt.n	80212a2 <_dtoa_r+0x98a>
 80212a0:	e6a8      	b.n	8020ff4 <_dtoa_r+0x6dc>
 80212a2:	9b08      	ldr	r3, [sp, #32]
 80212a4:	9a08      	ldr	r2, [sp, #32]
 80212a6:	1c5c      	adds	r4, r3, #1
 80212a8:	2331      	movs	r3, #49	@ 0x31
 80212aa:	7013      	strb	r3, [r2, #0]
 80212ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80212ae:	3301      	adds	r3, #1
 80212b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80212b2:	e6a3      	b.n	8020ffc <_dtoa_r+0x6e4>
 80212b4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80212b6:	0037      	movs	r7, r6
 80212b8:	e7f3      	b.n	80212a2 <_dtoa_r+0x98a>
 80212ba:	9b04      	ldr	r3, [sp, #16]
 80212bc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80212be:	930c      	str	r3, [sp, #48]	@ 0x30
 80212c0:	e7f9      	b.n	80212b6 <_dtoa_r+0x99e>
 80212c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	d100      	bne.n	80212ca <_dtoa_r+0x9b2>
 80212c8:	e100      	b.n	80214cc <_dtoa_r+0xbb4>
 80212ca:	2c00      	cmp	r4, #0
 80212cc:	dd05      	ble.n	80212da <_dtoa_r+0x9c2>
 80212ce:	0039      	movs	r1, r7
 80212d0:	0022      	movs	r2, r4
 80212d2:	9803      	ldr	r0, [sp, #12]
 80212d4:	f000 fff4 	bl	80222c0 <__lshift>
 80212d8:	0007      	movs	r7, r0
 80212da:	0038      	movs	r0, r7
 80212dc:	2d00      	cmp	r5, #0
 80212de:	d018      	beq.n	8021312 <_dtoa_r+0x9fa>
 80212e0:	6879      	ldr	r1, [r7, #4]
 80212e2:	9803      	ldr	r0, [sp, #12]
 80212e4:	f000 fd7e 	bl	8021de4 <_Balloc>
 80212e8:	1e04      	subs	r4, r0, #0
 80212ea:	d105      	bne.n	80212f8 <_dtoa_r+0x9e0>
 80212ec:	0022      	movs	r2, r4
 80212ee:	4b2b      	ldr	r3, [pc, #172]	@ (802139c <_dtoa_r+0xa84>)
 80212f0:	482b      	ldr	r0, [pc, #172]	@ (80213a0 <_dtoa_r+0xa88>)
 80212f2:	492c      	ldr	r1, [pc, #176]	@ (80213a4 <_dtoa_r+0xa8c>)
 80212f4:	f7ff fb25 	bl	8020942 <_dtoa_r+0x2a>
 80212f8:	0039      	movs	r1, r7
 80212fa:	693a      	ldr	r2, [r7, #16]
 80212fc:	310c      	adds	r1, #12
 80212fe:	3202      	adds	r2, #2
 8021300:	0092      	lsls	r2, r2, #2
 8021302:	300c      	adds	r0, #12
 8021304:	f7ff fa6a 	bl	80207dc <memcpy>
 8021308:	2201      	movs	r2, #1
 802130a:	0021      	movs	r1, r4
 802130c:	9803      	ldr	r0, [sp, #12]
 802130e:	f000 ffd7 	bl	80222c0 <__lshift>
 8021312:	9b08      	ldr	r3, [sp, #32]
 8021314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021316:	9306      	str	r3, [sp, #24]
 8021318:	3b01      	subs	r3, #1
 802131a:	189b      	adds	r3, r3, r2
 802131c:	2201      	movs	r2, #1
 802131e:	9704      	str	r7, [sp, #16]
 8021320:	0007      	movs	r7, r0
 8021322:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021326:	4013      	ands	r3, r2
 8021328:	930e      	str	r3, [sp, #56]	@ 0x38
 802132a:	0031      	movs	r1, r6
 802132c:	9805      	ldr	r0, [sp, #20]
 802132e:	f7ff fa65 	bl	80207fc <quorem>
 8021332:	9904      	ldr	r1, [sp, #16]
 8021334:	0005      	movs	r5, r0
 8021336:	900a      	str	r0, [sp, #40]	@ 0x28
 8021338:	9805      	ldr	r0, [sp, #20]
 802133a:	f001 f82d 	bl	8022398 <__mcmp>
 802133e:	003a      	movs	r2, r7
 8021340:	900d      	str	r0, [sp, #52]	@ 0x34
 8021342:	0031      	movs	r1, r6
 8021344:	9803      	ldr	r0, [sp, #12]
 8021346:	f001 f843 	bl	80223d0 <__mdiff>
 802134a:	2201      	movs	r2, #1
 802134c:	68c3      	ldr	r3, [r0, #12]
 802134e:	0004      	movs	r4, r0
 8021350:	3530      	adds	r5, #48	@ 0x30
 8021352:	9209      	str	r2, [sp, #36]	@ 0x24
 8021354:	2b00      	cmp	r3, #0
 8021356:	d104      	bne.n	8021362 <_dtoa_r+0xa4a>
 8021358:	0001      	movs	r1, r0
 802135a:	9805      	ldr	r0, [sp, #20]
 802135c:	f001 f81c 	bl	8022398 <__mcmp>
 8021360:	9009      	str	r0, [sp, #36]	@ 0x24
 8021362:	0021      	movs	r1, r4
 8021364:	9803      	ldr	r0, [sp, #12]
 8021366:	f000 fd81 	bl	8021e6c <_Bfree>
 802136a:	9b06      	ldr	r3, [sp, #24]
 802136c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802136e:	1c5c      	adds	r4, r3, #1
 8021370:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021372:	4313      	orrs	r3, r2
 8021374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021376:	4313      	orrs	r3, r2
 8021378:	d116      	bne.n	80213a8 <_dtoa_r+0xa90>
 802137a:	2d39      	cmp	r5, #57	@ 0x39
 802137c:	d02f      	beq.n	80213de <_dtoa_r+0xac6>
 802137e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021380:	2b00      	cmp	r3, #0
 8021382:	dd01      	ble.n	8021388 <_dtoa_r+0xa70>
 8021384:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021386:	3531      	adds	r5, #49	@ 0x31
 8021388:	9b06      	ldr	r3, [sp, #24]
 802138a:	701d      	strb	r5, [r3, #0]
 802138c:	e638      	b.n	8021000 <_dtoa_r+0x6e8>
 802138e:	46c0      	nop			@ (mov r8, r8)
 8021390:	40240000 	.word	0x40240000
 8021394:	00000433 	.word	0x00000433
 8021398:	7ff00000 	.word	0x7ff00000
 802139c:	08026479 	.word	0x08026479
 80213a0:	08026421 	.word	0x08026421
 80213a4:	000002ef 	.word	0x000002ef
 80213a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	db04      	blt.n	80213b8 <_dtoa_r+0xaa0>
 80213ae:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80213b0:	4313      	orrs	r3, r2
 80213b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80213b4:	4313      	orrs	r3, r2
 80213b6:	d11e      	bne.n	80213f6 <_dtoa_r+0xade>
 80213b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213ba:	2b00      	cmp	r3, #0
 80213bc:	dde4      	ble.n	8021388 <_dtoa_r+0xa70>
 80213be:	9905      	ldr	r1, [sp, #20]
 80213c0:	2201      	movs	r2, #1
 80213c2:	9803      	ldr	r0, [sp, #12]
 80213c4:	f000 ff7c 	bl	80222c0 <__lshift>
 80213c8:	0031      	movs	r1, r6
 80213ca:	9005      	str	r0, [sp, #20]
 80213cc:	f000 ffe4 	bl	8022398 <__mcmp>
 80213d0:	2800      	cmp	r0, #0
 80213d2:	dc02      	bgt.n	80213da <_dtoa_r+0xac2>
 80213d4:	d1d8      	bne.n	8021388 <_dtoa_r+0xa70>
 80213d6:	07eb      	lsls	r3, r5, #31
 80213d8:	d5d6      	bpl.n	8021388 <_dtoa_r+0xa70>
 80213da:	2d39      	cmp	r5, #57	@ 0x39
 80213dc:	d1d2      	bne.n	8021384 <_dtoa_r+0xa6c>
 80213de:	2339      	movs	r3, #57	@ 0x39
 80213e0:	9a06      	ldr	r2, [sp, #24]
 80213e2:	7013      	strb	r3, [r2, #0]
 80213e4:	0023      	movs	r3, r4
 80213e6:	001c      	movs	r4, r3
 80213e8:	3b01      	subs	r3, #1
 80213ea:	781a      	ldrb	r2, [r3, #0]
 80213ec:	2a39      	cmp	r2, #57	@ 0x39
 80213ee:	d04f      	beq.n	8021490 <_dtoa_r+0xb78>
 80213f0:	3201      	adds	r2, #1
 80213f2:	701a      	strb	r2, [r3, #0]
 80213f4:	e604      	b.n	8021000 <_dtoa_r+0x6e8>
 80213f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	dd03      	ble.n	8021404 <_dtoa_r+0xaec>
 80213fc:	2d39      	cmp	r5, #57	@ 0x39
 80213fe:	d0ee      	beq.n	80213de <_dtoa_r+0xac6>
 8021400:	3501      	adds	r5, #1
 8021402:	e7c1      	b.n	8021388 <_dtoa_r+0xa70>
 8021404:	9b06      	ldr	r3, [sp, #24]
 8021406:	9a06      	ldr	r2, [sp, #24]
 8021408:	701d      	strb	r5, [r3, #0]
 802140a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802140c:	4293      	cmp	r3, r2
 802140e:	d02a      	beq.n	8021466 <_dtoa_r+0xb4e>
 8021410:	2300      	movs	r3, #0
 8021412:	220a      	movs	r2, #10
 8021414:	9905      	ldr	r1, [sp, #20]
 8021416:	9803      	ldr	r0, [sp, #12]
 8021418:	f000 fd4c 	bl	8021eb4 <__multadd>
 802141c:	9b04      	ldr	r3, [sp, #16]
 802141e:	9005      	str	r0, [sp, #20]
 8021420:	42bb      	cmp	r3, r7
 8021422:	d109      	bne.n	8021438 <_dtoa_r+0xb20>
 8021424:	2300      	movs	r3, #0
 8021426:	220a      	movs	r2, #10
 8021428:	9904      	ldr	r1, [sp, #16]
 802142a:	9803      	ldr	r0, [sp, #12]
 802142c:	f000 fd42 	bl	8021eb4 <__multadd>
 8021430:	9004      	str	r0, [sp, #16]
 8021432:	0007      	movs	r7, r0
 8021434:	9406      	str	r4, [sp, #24]
 8021436:	e778      	b.n	802132a <_dtoa_r+0xa12>
 8021438:	9904      	ldr	r1, [sp, #16]
 802143a:	2300      	movs	r3, #0
 802143c:	220a      	movs	r2, #10
 802143e:	9803      	ldr	r0, [sp, #12]
 8021440:	f000 fd38 	bl	8021eb4 <__multadd>
 8021444:	2300      	movs	r3, #0
 8021446:	9004      	str	r0, [sp, #16]
 8021448:	220a      	movs	r2, #10
 802144a:	0039      	movs	r1, r7
 802144c:	9803      	ldr	r0, [sp, #12]
 802144e:	f000 fd31 	bl	8021eb4 <__multadd>
 8021452:	e7ee      	b.n	8021432 <_dtoa_r+0xb1a>
 8021454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021456:	2401      	movs	r4, #1
 8021458:	2b00      	cmp	r3, #0
 802145a:	dd00      	ble.n	802145e <_dtoa_r+0xb46>
 802145c:	001c      	movs	r4, r3
 802145e:	9b08      	ldr	r3, [sp, #32]
 8021460:	191c      	adds	r4, r3, r4
 8021462:	2300      	movs	r3, #0
 8021464:	9304      	str	r3, [sp, #16]
 8021466:	9905      	ldr	r1, [sp, #20]
 8021468:	2201      	movs	r2, #1
 802146a:	9803      	ldr	r0, [sp, #12]
 802146c:	f000 ff28 	bl	80222c0 <__lshift>
 8021470:	0031      	movs	r1, r6
 8021472:	9005      	str	r0, [sp, #20]
 8021474:	f000 ff90 	bl	8022398 <__mcmp>
 8021478:	2800      	cmp	r0, #0
 802147a:	dcb3      	bgt.n	80213e4 <_dtoa_r+0xacc>
 802147c:	d101      	bne.n	8021482 <_dtoa_r+0xb6a>
 802147e:	07ed      	lsls	r5, r5, #31
 8021480:	d4b0      	bmi.n	80213e4 <_dtoa_r+0xacc>
 8021482:	0023      	movs	r3, r4
 8021484:	001c      	movs	r4, r3
 8021486:	3b01      	subs	r3, #1
 8021488:	781a      	ldrb	r2, [r3, #0]
 802148a:	2a30      	cmp	r2, #48	@ 0x30
 802148c:	d0fa      	beq.n	8021484 <_dtoa_r+0xb6c>
 802148e:	e5b7      	b.n	8021000 <_dtoa_r+0x6e8>
 8021490:	9a08      	ldr	r2, [sp, #32]
 8021492:	429a      	cmp	r2, r3
 8021494:	d1a7      	bne.n	80213e6 <_dtoa_r+0xace>
 8021496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021498:	3301      	adds	r3, #1
 802149a:	930c      	str	r3, [sp, #48]	@ 0x30
 802149c:	2331      	movs	r3, #49	@ 0x31
 802149e:	7013      	strb	r3, [r2, #0]
 80214a0:	e5ae      	b.n	8021000 <_dtoa_r+0x6e8>
 80214a2:	4b15      	ldr	r3, [pc, #84]	@ (80214f8 <_dtoa_r+0xbe0>)
 80214a4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80214a6:	9308      	str	r3, [sp, #32]
 80214a8:	4b14      	ldr	r3, [pc, #80]	@ (80214fc <_dtoa_r+0xbe4>)
 80214aa:	2a00      	cmp	r2, #0
 80214ac:	d001      	beq.n	80214b2 <_dtoa_r+0xb9a>
 80214ae:	f7ff fa7b 	bl	80209a8 <_dtoa_r+0x90>
 80214b2:	f7ff fa7b 	bl	80209ac <_dtoa_r+0x94>
 80214b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80214b8:	2b01      	cmp	r3, #1
 80214ba:	dc00      	bgt.n	80214be <_dtoa_r+0xba6>
 80214bc:	e648      	b.n	8021150 <_dtoa_r+0x838>
 80214be:	2001      	movs	r0, #1
 80214c0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80214c2:	e665      	b.n	8021190 <_dtoa_r+0x878>
 80214c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214c6:	2b00      	cmp	r3, #0
 80214c8:	dc00      	bgt.n	80214cc <_dtoa_r+0xbb4>
 80214ca:	e6d6      	b.n	802127a <_dtoa_r+0x962>
 80214cc:	2400      	movs	r4, #0
 80214ce:	0031      	movs	r1, r6
 80214d0:	9805      	ldr	r0, [sp, #20]
 80214d2:	f7ff f993 	bl	80207fc <quorem>
 80214d6:	9b08      	ldr	r3, [sp, #32]
 80214d8:	3030      	adds	r0, #48	@ 0x30
 80214da:	5518      	strb	r0, [r3, r4]
 80214dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214de:	3401      	adds	r4, #1
 80214e0:	0005      	movs	r5, r0
 80214e2:	429c      	cmp	r4, r3
 80214e4:	dab6      	bge.n	8021454 <_dtoa_r+0xb3c>
 80214e6:	2300      	movs	r3, #0
 80214e8:	220a      	movs	r2, #10
 80214ea:	9905      	ldr	r1, [sp, #20]
 80214ec:	9803      	ldr	r0, [sp, #12]
 80214ee:	f000 fce1 	bl	8021eb4 <__multadd>
 80214f2:	9005      	str	r0, [sp, #20]
 80214f4:	e7eb      	b.n	80214ce <_dtoa_r+0xbb6>
 80214f6:	46c0      	nop			@ (mov r8, r8)
 80214f8:	080263fd 	.word	0x080263fd
 80214fc:	08026405 	.word	0x08026405

08021500 <_free_r>:
 8021500:	b570      	push	{r4, r5, r6, lr}
 8021502:	0005      	movs	r5, r0
 8021504:	1e0c      	subs	r4, r1, #0
 8021506:	d010      	beq.n	802152a <_free_r+0x2a>
 8021508:	3c04      	subs	r4, #4
 802150a:	6823      	ldr	r3, [r4, #0]
 802150c:	2b00      	cmp	r3, #0
 802150e:	da00      	bge.n	8021512 <_free_r+0x12>
 8021510:	18e4      	adds	r4, r4, r3
 8021512:	0028      	movs	r0, r5
 8021514:	f000 fc56 	bl	8021dc4 <__malloc_lock>
 8021518:	4a1d      	ldr	r2, [pc, #116]	@ (8021590 <_free_r+0x90>)
 802151a:	6813      	ldr	r3, [r2, #0]
 802151c:	2b00      	cmp	r3, #0
 802151e:	d105      	bne.n	802152c <_free_r+0x2c>
 8021520:	6063      	str	r3, [r4, #4]
 8021522:	6014      	str	r4, [r2, #0]
 8021524:	0028      	movs	r0, r5
 8021526:	f000 fc55 	bl	8021dd4 <__malloc_unlock>
 802152a:	bd70      	pop	{r4, r5, r6, pc}
 802152c:	42a3      	cmp	r3, r4
 802152e:	d908      	bls.n	8021542 <_free_r+0x42>
 8021530:	6820      	ldr	r0, [r4, #0]
 8021532:	1821      	adds	r1, r4, r0
 8021534:	428b      	cmp	r3, r1
 8021536:	d1f3      	bne.n	8021520 <_free_r+0x20>
 8021538:	6819      	ldr	r1, [r3, #0]
 802153a:	685b      	ldr	r3, [r3, #4]
 802153c:	1809      	adds	r1, r1, r0
 802153e:	6021      	str	r1, [r4, #0]
 8021540:	e7ee      	b.n	8021520 <_free_r+0x20>
 8021542:	001a      	movs	r2, r3
 8021544:	685b      	ldr	r3, [r3, #4]
 8021546:	2b00      	cmp	r3, #0
 8021548:	d001      	beq.n	802154e <_free_r+0x4e>
 802154a:	42a3      	cmp	r3, r4
 802154c:	d9f9      	bls.n	8021542 <_free_r+0x42>
 802154e:	6811      	ldr	r1, [r2, #0]
 8021550:	1850      	adds	r0, r2, r1
 8021552:	42a0      	cmp	r0, r4
 8021554:	d10b      	bne.n	802156e <_free_r+0x6e>
 8021556:	6820      	ldr	r0, [r4, #0]
 8021558:	1809      	adds	r1, r1, r0
 802155a:	1850      	adds	r0, r2, r1
 802155c:	6011      	str	r1, [r2, #0]
 802155e:	4283      	cmp	r3, r0
 8021560:	d1e0      	bne.n	8021524 <_free_r+0x24>
 8021562:	6818      	ldr	r0, [r3, #0]
 8021564:	685b      	ldr	r3, [r3, #4]
 8021566:	1841      	adds	r1, r0, r1
 8021568:	6011      	str	r1, [r2, #0]
 802156a:	6053      	str	r3, [r2, #4]
 802156c:	e7da      	b.n	8021524 <_free_r+0x24>
 802156e:	42a0      	cmp	r0, r4
 8021570:	d902      	bls.n	8021578 <_free_r+0x78>
 8021572:	230c      	movs	r3, #12
 8021574:	602b      	str	r3, [r5, #0]
 8021576:	e7d5      	b.n	8021524 <_free_r+0x24>
 8021578:	6820      	ldr	r0, [r4, #0]
 802157a:	1821      	adds	r1, r4, r0
 802157c:	428b      	cmp	r3, r1
 802157e:	d103      	bne.n	8021588 <_free_r+0x88>
 8021580:	6819      	ldr	r1, [r3, #0]
 8021582:	685b      	ldr	r3, [r3, #4]
 8021584:	1809      	adds	r1, r1, r0
 8021586:	6021      	str	r1, [r4, #0]
 8021588:	6063      	str	r3, [r4, #4]
 802158a:	6054      	str	r4, [r2, #4]
 802158c:	e7ca      	b.n	8021524 <_free_r+0x24>
 802158e:	46c0      	nop			@ (mov r8, r8)
 8021590:	200033d4 	.word	0x200033d4

08021594 <rshift>:
 8021594:	0002      	movs	r2, r0
 8021596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021598:	6904      	ldr	r4, [r0, #16]
 802159a:	b085      	sub	sp, #20
 802159c:	3214      	adds	r2, #20
 802159e:	114b      	asrs	r3, r1, #5
 80215a0:	0016      	movs	r6, r2
 80215a2:	9302      	str	r3, [sp, #8]
 80215a4:	429c      	cmp	r4, r3
 80215a6:	dd31      	ble.n	802160c <rshift+0x78>
 80215a8:	261f      	movs	r6, #31
 80215aa:	000f      	movs	r7, r1
 80215ac:	009b      	lsls	r3, r3, #2
 80215ae:	00a5      	lsls	r5, r4, #2
 80215b0:	18d3      	adds	r3, r2, r3
 80215b2:	4037      	ands	r7, r6
 80215b4:	1955      	adds	r5, r2, r5
 80215b6:	9300      	str	r3, [sp, #0]
 80215b8:	9701      	str	r7, [sp, #4]
 80215ba:	4231      	tst	r1, r6
 80215bc:	d10d      	bne.n	80215da <rshift+0x46>
 80215be:	0016      	movs	r6, r2
 80215c0:	0019      	movs	r1, r3
 80215c2:	428d      	cmp	r5, r1
 80215c4:	d836      	bhi.n	8021634 <rshift+0xa0>
 80215c6:	9b00      	ldr	r3, [sp, #0]
 80215c8:	2600      	movs	r6, #0
 80215ca:	3b03      	subs	r3, #3
 80215cc:	429d      	cmp	r5, r3
 80215ce:	d302      	bcc.n	80215d6 <rshift+0x42>
 80215d0:	9b02      	ldr	r3, [sp, #8]
 80215d2:	1ae4      	subs	r4, r4, r3
 80215d4:	00a6      	lsls	r6, r4, #2
 80215d6:	1996      	adds	r6, r2, r6
 80215d8:	e018      	b.n	802160c <rshift+0x78>
 80215da:	2120      	movs	r1, #32
 80215dc:	9e01      	ldr	r6, [sp, #4]
 80215de:	9f01      	ldr	r7, [sp, #4]
 80215e0:	1b89      	subs	r1, r1, r6
 80215e2:	9e00      	ldr	r6, [sp, #0]
 80215e4:	9103      	str	r1, [sp, #12]
 80215e6:	ce02      	ldmia	r6!, {r1}
 80215e8:	4694      	mov	ip, r2
 80215ea:	40f9      	lsrs	r1, r7
 80215ec:	42b5      	cmp	r5, r6
 80215ee:	d816      	bhi.n	802161e <rshift+0x8a>
 80215f0:	9b00      	ldr	r3, [sp, #0]
 80215f2:	2600      	movs	r6, #0
 80215f4:	3301      	adds	r3, #1
 80215f6:	429d      	cmp	r5, r3
 80215f8:	d303      	bcc.n	8021602 <rshift+0x6e>
 80215fa:	9b02      	ldr	r3, [sp, #8]
 80215fc:	1ae4      	subs	r4, r4, r3
 80215fe:	00a6      	lsls	r6, r4, #2
 8021600:	3e04      	subs	r6, #4
 8021602:	1996      	adds	r6, r2, r6
 8021604:	6031      	str	r1, [r6, #0]
 8021606:	2900      	cmp	r1, #0
 8021608:	d000      	beq.n	802160c <rshift+0x78>
 802160a:	3604      	adds	r6, #4
 802160c:	1ab1      	subs	r1, r6, r2
 802160e:	1089      	asrs	r1, r1, #2
 8021610:	6101      	str	r1, [r0, #16]
 8021612:	4296      	cmp	r6, r2
 8021614:	d101      	bne.n	802161a <rshift+0x86>
 8021616:	2300      	movs	r3, #0
 8021618:	6143      	str	r3, [r0, #20]
 802161a:	b005      	add	sp, #20
 802161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802161e:	6837      	ldr	r7, [r6, #0]
 8021620:	9b03      	ldr	r3, [sp, #12]
 8021622:	409f      	lsls	r7, r3
 8021624:	430f      	orrs	r7, r1
 8021626:	4661      	mov	r1, ip
 8021628:	c180      	stmia	r1!, {r7}
 802162a:	468c      	mov	ip, r1
 802162c:	9b01      	ldr	r3, [sp, #4]
 802162e:	ce02      	ldmia	r6!, {r1}
 8021630:	40d9      	lsrs	r1, r3
 8021632:	e7db      	b.n	80215ec <rshift+0x58>
 8021634:	c980      	ldmia	r1!, {r7}
 8021636:	c680      	stmia	r6!, {r7}
 8021638:	e7c3      	b.n	80215c2 <rshift+0x2e>

0802163a <__hexdig_fun>:
 802163a:	0002      	movs	r2, r0
 802163c:	3a30      	subs	r2, #48	@ 0x30
 802163e:	0003      	movs	r3, r0
 8021640:	2a09      	cmp	r2, #9
 8021642:	d802      	bhi.n	802164a <__hexdig_fun+0x10>
 8021644:	3b20      	subs	r3, #32
 8021646:	b2d8      	uxtb	r0, r3
 8021648:	4770      	bx	lr
 802164a:	0002      	movs	r2, r0
 802164c:	3a61      	subs	r2, #97	@ 0x61
 802164e:	2a05      	cmp	r2, #5
 8021650:	d801      	bhi.n	8021656 <__hexdig_fun+0x1c>
 8021652:	3b47      	subs	r3, #71	@ 0x47
 8021654:	e7f7      	b.n	8021646 <__hexdig_fun+0xc>
 8021656:	001a      	movs	r2, r3
 8021658:	3a41      	subs	r2, #65	@ 0x41
 802165a:	2000      	movs	r0, #0
 802165c:	2a05      	cmp	r2, #5
 802165e:	d8f3      	bhi.n	8021648 <__hexdig_fun+0xe>
 8021660:	3b27      	subs	r3, #39	@ 0x27
 8021662:	e7f0      	b.n	8021646 <__hexdig_fun+0xc>

08021664 <__gethex>:
 8021664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021666:	b089      	sub	sp, #36	@ 0x24
 8021668:	9307      	str	r3, [sp, #28]
 802166a:	680b      	ldr	r3, [r1, #0]
 802166c:	9201      	str	r2, [sp, #4]
 802166e:	9003      	str	r0, [sp, #12]
 8021670:	9106      	str	r1, [sp, #24]
 8021672:	1c9a      	adds	r2, r3, #2
 8021674:	0011      	movs	r1, r2
 8021676:	3201      	adds	r2, #1
 8021678:	1e50      	subs	r0, r2, #1
 802167a:	7800      	ldrb	r0, [r0, #0]
 802167c:	2830      	cmp	r0, #48	@ 0x30
 802167e:	d0f9      	beq.n	8021674 <__gethex+0x10>
 8021680:	1acb      	subs	r3, r1, r3
 8021682:	3b02      	subs	r3, #2
 8021684:	9305      	str	r3, [sp, #20]
 8021686:	9100      	str	r1, [sp, #0]
 8021688:	f7ff ffd7 	bl	802163a <__hexdig_fun>
 802168c:	2300      	movs	r3, #0
 802168e:	001d      	movs	r5, r3
 8021690:	9302      	str	r3, [sp, #8]
 8021692:	4298      	cmp	r0, r3
 8021694:	d11e      	bne.n	80216d4 <__gethex+0x70>
 8021696:	2201      	movs	r2, #1
 8021698:	49a6      	ldr	r1, [pc, #664]	@ (8021934 <__gethex+0x2d0>)
 802169a:	9800      	ldr	r0, [sp, #0]
 802169c:	f7fe ffd8 	bl	8020650 <strncmp>
 80216a0:	0007      	movs	r7, r0
 80216a2:	42a8      	cmp	r0, r5
 80216a4:	d000      	beq.n	80216a8 <__gethex+0x44>
 80216a6:	e06a      	b.n	802177e <__gethex+0x11a>
 80216a8:	9b00      	ldr	r3, [sp, #0]
 80216aa:	7858      	ldrb	r0, [r3, #1]
 80216ac:	1c5c      	adds	r4, r3, #1
 80216ae:	f7ff ffc4 	bl	802163a <__hexdig_fun>
 80216b2:	2301      	movs	r3, #1
 80216b4:	9302      	str	r3, [sp, #8]
 80216b6:	42a8      	cmp	r0, r5
 80216b8:	d02f      	beq.n	802171a <__gethex+0xb6>
 80216ba:	9400      	str	r4, [sp, #0]
 80216bc:	9b00      	ldr	r3, [sp, #0]
 80216be:	7818      	ldrb	r0, [r3, #0]
 80216c0:	2830      	cmp	r0, #48	@ 0x30
 80216c2:	d009      	beq.n	80216d8 <__gethex+0x74>
 80216c4:	f7ff ffb9 	bl	802163a <__hexdig_fun>
 80216c8:	4242      	negs	r2, r0
 80216ca:	4142      	adcs	r2, r0
 80216cc:	2301      	movs	r3, #1
 80216ce:	0025      	movs	r5, r4
 80216d0:	9202      	str	r2, [sp, #8]
 80216d2:	9305      	str	r3, [sp, #20]
 80216d4:	9c00      	ldr	r4, [sp, #0]
 80216d6:	e004      	b.n	80216e2 <__gethex+0x7e>
 80216d8:	9b00      	ldr	r3, [sp, #0]
 80216da:	3301      	adds	r3, #1
 80216dc:	9300      	str	r3, [sp, #0]
 80216de:	e7ed      	b.n	80216bc <__gethex+0x58>
 80216e0:	3401      	adds	r4, #1
 80216e2:	7820      	ldrb	r0, [r4, #0]
 80216e4:	f7ff ffa9 	bl	802163a <__hexdig_fun>
 80216e8:	1e07      	subs	r7, r0, #0
 80216ea:	d1f9      	bne.n	80216e0 <__gethex+0x7c>
 80216ec:	2201      	movs	r2, #1
 80216ee:	0020      	movs	r0, r4
 80216f0:	4990      	ldr	r1, [pc, #576]	@ (8021934 <__gethex+0x2d0>)
 80216f2:	f7fe ffad 	bl	8020650 <strncmp>
 80216f6:	2800      	cmp	r0, #0
 80216f8:	d10d      	bne.n	8021716 <__gethex+0xb2>
 80216fa:	2d00      	cmp	r5, #0
 80216fc:	d106      	bne.n	802170c <__gethex+0xa8>
 80216fe:	3401      	adds	r4, #1
 8021700:	0025      	movs	r5, r4
 8021702:	7820      	ldrb	r0, [r4, #0]
 8021704:	f7ff ff99 	bl	802163a <__hexdig_fun>
 8021708:	2800      	cmp	r0, #0
 802170a:	d102      	bne.n	8021712 <__gethex+0xae>
 802170c:	1b2d      	subs	r5, r5, r4
 802170e:	00af      	lsls	r7, r5, #2
 8021710:	e003      	b.n	802171a <__gethex+0xb6>
 8021712:	3401      	adds	r4, #1
 8021714:	e7f5      	b.n	8021702 <__gethex+0x9e>
 8021716:	2d00      	cmp	r5, #0
 8021718:	d1f8      	bne.n	802170c <__gethex+0xa8>
 802171a:	2220      	movs	r2, #32
 802171c:	7823      	ldrb	r3, [r4, #0]
 802171e:	0026      	movs	r6, r4
 8021720:	4393      	bics	r3, r2
 8021722:	2b50      	cmp	r3, #80	@ 0x50
 8021724:	d11d      	bne.n	8021762 <__gethex+0xfe>
 8021726:	7863      	ldrb	r3, [r4, #1]
 8021728:	2b2b      	cmp	r3, #43	@ 0x2b
 802172a:	d02d      	beq.n	8021788 <__gethex+0x124>
 802172c:	2b2d      	cmp	r3, #45	@ 0x2d
 802172e:	d02f      	beq.n	8021790 <__gethex+0x12c>
 8021730:	2300      	movs	r3, #0
 8021732:	1c66      	adds	r6, r4, #1
 8021734:	9304      	str	r3, [sp, #16]
 8021736:	7830      	ldrb	r0, [r6, #0]
 8021738:	f7ff ff7f 	bl	802163a <__hexdig_fun>
 802173c:	1e43      	subs	r3, r0, #1
 802173e:	b2db      	uxtb	r3, r3
 8021740:	0005      	movs	r5, r0
 8021742:	2b18      	cmp	r3, #24
 8021744:	d82a      	bhi.n	802179c <__gethex+0x138>
 8021746:	7870      	ldrb	r0, [r6, #1]
 8021748:	f7ff ff77 	bl	802163a <__hexdig_fun>
 802174c:	1e43      	subs	r3, r0, #1
 802174e:	b2db      	uxtb	r3, r3
 8021750:	3601      	adds	r6, #1
 8021752:	3d10      	subs	r5, #16
 8021754:	2b18      	cmp	r3, #24
 8021756:	d91d      	bls.n	8021794 <__gethex+0x130>
 8021758:	9b04      	ldr	r3, [sp, #16]
 802175a:	2b00      	cmp	r3, #0
 802175c:	d000      	beq.n	8021760 <__gethex+0xfc>
 802175e:	426d      	negs	r5, r5
 8021760:	197f      	adds	r7, r7, r5
 8021762:	9b06      	ldr	r3, [sp, #24]
 8021764:	601e      	str	r6, [r3, #0]
 8021766:	9b02      	ldr	r3, [sp, #8]
 8021768:	2b00      	cmp	r3, #0
 802176a:	d019      	beq.n	80217a0 <__gethex+0x13c>
 802176c:	9b05      	ldr	r3, [sp, #20]
 802176e:	2606      	movs	r6, #6
 8021770:	425a      	negs	r2, r3
 8021772:	4153      	adcs	r3, r2
 8021774:	425b      	negs	r3, r3
 8021776:	401e      	ands	r6, r3
 8021778:	0030      	movs	r0, r6
 802177a:	b009      	add	sp, #36	@ 0x24
 802177c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802177e:	2301      	movs	r3, #1
 8021780:	2700      	movs	r7, #0
 8021782:	9c00      	ldr	r4, [sp, #0]
 8021784:	9302      	str	r3, [sp, #8]
 8021786:	e7c8      	b.n	802171a <__gethex+0xb6>
 8021788:	2300      	movs	r3, #0
 802178a:	9304      	str	r3, [sp, #16]
 802178c:	1ca6      	adds	r6, r4, #2
 802178e:	e7d2      	b.n	8021736 <__gethex+0xd2>
 8021790:	2301      	movs	r3, #1
 8021792:	e7fa      	b.n	802178a <__gethex+0x126>
 8021794:	230a      	movs	r3, #10
 8021796:	435d      	muls	r5, r3
 8021798:	182d      	adds	r5, r5, r0
 802179a:	e7d4      	b.n	8021746 <__gethex+0xe2>
 802179c:	0026      	movs	r6, r4
 802179e:	e7e0      	b.n	8021762 <__gethex+0xfe>
 80217a0:	9b00      	ldr	r3, [sp, #0]
 80217a2:	9902      	ldr	r1, [sp, #8]
 80217a4:	1ae3      	subs	r3, r4, r3
 80217a6:	3b01      	subs	r3, #1
 80217a8:	2b07      	cmp	r3, #7
 80217aa:	dc0a      	bgt.n	80217c2 <__gethex+0x15e>
 80217ac:	9803      	ldr	r0, [sp, #12]
 80217ae:	f000 fb19 	bl	8021de4 <_Balloc>
 80217b2:	1e05      	subs	r5, r0, #0
 80217b4:	d108      	bne.n	80217c8 <__gethex+0x164>
 80217b6:	002a      	movs	r2, r5
 80217b8:	21e4      	movs	r1, #228	@ 0xe4
 80217ba:	4b5f      	ldr	r3, [pc, #380]	@ (8021938 <__gethex+0x2d4>)
 80217bc:	485f      	ldr	r0, [pc, #380]	@ (802193c <__gethex+0x2d8>)
 80217be:	f001 fbf1 	bl	8022fa4 <__assert_func>
 80217c2:	3101      	adds	r1, #1
 80217c4:	105b      	asrs	r3, r3, #1
 80217c6:	e7ef      	b.n	80217a8 <__gethex+0x144>
 80217c8:	0003      	movs	r3, r0
 80217ca:	3314      	adds	r3, #20
 80217cc:	9302      	str	r3, [sp, #8]
 80217ce:	9305      	str	r3, [sp, #20]
 80217d0:	2300      	movs	r3, #0
 80217d2:	001e      	movs	r6, r3
 80217d4:	9304      	str	r3, [sp, #16]
 80217d6:	9b00      	ldr	r3, [sp, #0]
 80217d8:	42a3      	cmp	r3, r4
 80217da:	d338      	bcc.n	802184e <__gethex+0x1ea>
 80217dc:	9c05      	ldr	r4, [sp, #20]
 80217de:	9b02      	ldr	r3, [sp, #8]
 80217e0:	c440      	stmia	r4!, {r6}
 80217e2:	1ae4      	subs	r4, r4, r3
 80217e4:	10a4      	asrs	r4, r4, #2
 80217e6:	0030      	movs	r0, r6
 80217e8:	612c      	str	r4, [r5, #16]
 80217ea:	f000 fbf3 	bl	8021fd4 <__hi0bits>
 80217ee:	9b01      	ldr	r3, [sp, #4]
 80217f0:	0164      	lsls	r4, r4, #5
 80217f2:	681b      	ldr	r3, [r3, #0]
 80217f4:	1a26      	subs	r6, r4, r0
 80217f6:	9300      	str	r3, [sp, #0]
 80217f8:	429e      	cmp	r6, r3
 80217fa:	dd52      	ble.n	80218a2 <__gethex+0x23e>
 80217fc:	1af6      	subs	r6, r6, r3
 80217fe:	0031      	movs	r1, r6
 8021800:	0028      	movs	r0, r5
 8021802:	f000 ff96 	bl	8022732 <__any_on>
 8021806:	1e04      	subs	r4, r0, #0
 8021808:	d00f      	beq.n	802182a <__gethex+0x1c6>
 802180a:	2401      	movs	r4, #1
 802180c:	231f      	movs	r3, #31
 802180e:	0020      	movs	r0, r4
 8021810:	1e72      	subs	r2, r6, #1
 8021812:	4013      	ands	r3, r2
 8021814:	4098      	lsls	r0, r3
 8021816:	0003      	movs	r3, r0
 8021818:	1151      	asrs	r1, r2, #5
 802181a:	9802      	ldr	r0, [sp, #8]
 802181c:	0089      	lsls	r1, r1, #2
 802181e:	5809      	ldr	r1, [r1, r0]
 8021820:	4219      	tst	r1, r3
 8021822:	d002      	beq.n	802182a <__gethex+0x1c6>
 8021824:	42a2      	cmp	r2, r4
 8021826:	dc34      	bgt.n	8021892 <__gethex+0x22e>
 8021828:	2402      	movs	r4, #2
 802182a:	0031      	movs	r1, r6
 802182c:	0028      	movs	r0, r5
 802182e:	f7ff feb1 	bl	8021594 <rshift>
 8021832:	19bf      	adds	r7, r7, r6
 8021834:	9b01      	ldr	r3, [sp, #4]
 8021836:	689b      	ldr	r3, [r3, #8]
 8021838:	42bb      	cmp	r3, r7
 802183a:	da42      	bge.n	80218c2 <__gethex+0x25e>
 802183c:	0029      	movs	r1, r5
 802183e:	9803      	ldr	r0, [sp, #12]
 8021840:	f000 fb14 	bl	8021e6c <_Bfree>
 8021844:	2300      	movs	r3, #0
 8021846:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021848:	26a3      	movs	r6, #163	@ 0xa3
 802184a:	6013      	str	r3, [r2, #0]
 802184c:	e794      	b.n	8021778 <__gethex+0x114>
 802184e:	3c01      	subs	r4, #1
 8021850:	7823      	ldrb	r3, [r4, #0]
 8021852:	2b2e      	cmp	r3, #46	@ 0x2e
 8021854:	d012      	beq.n	802187c <__gethex+0x218>
 8021856:	9b04      	ldr	r3, [sp, #16]
 8021858:	2b20      	cmp	r3, #32
 802185a:	d104      	bne.n	8021866 <__gethex+0x202>
 802185c:	9b05      	ldr	r3, [sp, #20]
 802185e:	c340      	stmia	r3!, {r6}
 8021860:	2600      	movs	r6, #0
 8021862:	9305      	str	r3, [sp, #20]
 8021864:	9604      	str	r6, [sp, #16]
 8021866:	7820      	ldrb	r0, [r4, #0]
 8021868:	f7ff fee7 	bl	802163a <__hexdig_fun>
 802186c:	230f      	movs	r3, #15
 802186e:	4018      	ands	r0, r3
 8021870:	9b04      	ldr	r3, [sp, #16]
 8021872:	4098      	lsls	r0, r3
 8021874:	3304      	adds	r3, #4
 8021876:	4306      	orrs	r6, r0
 8021878:	9304      	str	r3, [sp, #16]
 802187a:	e7ac      	b.n	80217d6 <__gethex+0x172>
 802187c:	9b00      	ldr	r3, [sp, #0]
 802187e:	42a3      	cmp	r3, r4
 8021880:	d8e9      	bhi.n	8021856 <__gethex+0x1f2>
 8021882:	2201      	movs	r2, #1
 8021884:	0020      	movs	r0, r4
 8021886:	492b      	ldr	r1, [pc, #172]	@ (8021934 <__gethex+0x2d0>)
 8021888:	f7fe fee2 	bl	8020650 <strncmp>
 802188c:	2800      	cmp	r0, #0
 802188e:	d1e2      	bne.n	8021856 <__gethex+0x1f2>
 8021890:	e7a1      	b.n	80217d6 <__gethex+0x172>
 8021892:	0028      	movs	r0, r5
 8021894:	1eb1      	subs	r1, r6, #2
 8021896:	f000 ff4c 	bl	8022732 <__any_on>
 802189a:	2800      	cmp	r0, #0
 802189c:	d0c4      	beq.n	8021828 <__gethex+0x1c4>
 802189e:	2403      	movs	r4, #3
 80218a0:	e7c3      	b.n	802182a <__gethex+0x1c6>
 80218a2:	9b00      	ldr	r3, [sp, #0]
 80218a4:	2400      	movs	r4, #0
 80218a6:	429e      	cmp	r6, r3
 80218a8:	dac4      	bge.n	8021834 <__gethex+0x1d0>
 80218aa:	1b9e      	subs	r6, r3, r6
 80218ac:	0029      	movs	r1, r5
 80218ae:	0032      	movs	r2, r6
 80218b0:	9803      	ldr	r0, [sp, #12]
 80218b2:	f000 fd05 	bl	80222c0 <__lshift>
 80218b6:	0003      	movs	r3, r0
 80218b8:	3314      	adds	r3, #20
 80218ba:	0005      	movs	r5, r0
 80218bc:	1bbf      	subs	r7, r7, r6
 80218be:	9302      	str	r3, [sp, #8]
 80218c0:	e7b8      	b.n	8021834 <__gethex+0x1d0>
 80218c2:	9b01      	ldr	r3, [sp, #4]
 80218c4:	685e      	ldr	r6, [r3, #4]
 80218c6:	42be      	cmp	r6, r7
 80218c8:	dd6f      	ble.n	80219aa <__gethex+0x346>
 80218ca:	9b00      	ldr	r3, [sp, #0]
 80218cc:	1bf6      	subs	r6, r6, r7
 80218ce:	42b3      	cmp	r3, r6
 80218d0:	dc36      	bgt.n	8021940 <__gethex+0x2dc>
 80218d2:	9b01      	ldr	r3, [sp, #4]
 80218d4:	68db      	ldr	r3, [r3, #12]
 80218d6:	2b02      	cmp	r3, #2
 80218d8:	d024      	beq.n	8021924 <__gethex+0x2c0>
 80218da:	2b03      	cmp	r3, #3
 80218dc:	d026      	beq.n	802192c <__gethex+0x2c8>
 80218de:	2b01      	cmp	r3, #1
 80218e0:	d117      	bne.n	8021912 <__gethex+0x2ae>
 80218e2:	9b00      	ldr	r3, [sp, #0]
 80218e4:	42b3      	cmp	r3, r6
 80218e6:	d114      	bne.n	8021912 <__gethex+0x2ae>
 80218e8:	2b01      	cmp	r3, #1
 80218ea:	d10b      	bne.n	8021904 <__gethex+0x2a0>
 80218ec:	9b01      	ldr	r3, [sp, #4]
 80218ee:	9a07      	ldr	r2, [sp, #28]
 80218f0:	685b      	ldr	r3, [r3, #4]
 80218f2:	2662      	movs	r6, #98	@ 0x62
 80218f4:	6013      	str	r3, [r2, #0]
 80218f6:	2301      	movs	r3, #1
 80218f8:	9a02      	ldr	r2, [sp, #8]
 80218fa:	612b      	str	r3, [r5, #16]
 80218fc:	6013      	str	r3, [r2, #0]
 80218fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021900:	601d      	str	r5, [r3, #0]
 8021902:	e739      	b.n	8021778 <__gethex+0x114>
 8021904:	9900      	ldr	r1, [sp, #0]
 8021906:	0028      	movs	r0, r5
 8021908:	3901      	subs	r1, #1
 802190a:	f000 ff12 	bl	8022732 <__any_on>
 802190e:	2800      	cmp	r0, #0
 8021910:	d1ec      	bne.n	80218ec <__gethex+0x288>
 8021912:	0029      	movs	r1, r5
 8021914:	9803      	ldr	r0, [sp, #12]
 8021916:	f000 faa9 	bl	8021e6c <_Bfree>
 802191a:	2300      	movs	r3, #0
 802191c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802191e:	2650      	movs	r6, #80	@ 0x50
 8021920:	6013      	str	r3, [r2, #0]
 8021922:	e729      	b.n	8021778 <__gethex+0x114>
 8021924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021926:	2b00      	cmp	r3, #0
 8021928:	d1f3      	bne.n	8021912 <__gethex+0x2ae>
 802192a:	e7df      	b.n	80218ec <__gethex+0x288>
 802192c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802192e:	2b00      	cmp	r3, #0
 8021930:	d1dc      	bne.n	80218ec <__gethex+0x288>
 8021932:	e7ee      	b.n	8021912 <__gethex+0x2ae>
 8021934:	08026268 	.word	0x08026268
 8021938:	08026479 	.word	0x08026479
 802193c:	0802648a 	.word	0x0802648a
 8021940:	1e77      	subs	r7, r6, #1
 8021942:	2c00      	cmp	r4, #0
 8021944:	d12f      	bne.n	80219a6 <__gethex+0x342>
 8021946:	2f00      	cmp	r7, #0
 8021948:	d004      	beq.n	8021954 <__gethex+0x2f0>
 802194a:	0039      	movs	r1, r7
 802194c:	0028      	movs	r0, r5
 802194e:	f000 fef0 	bl	8022732 <__any_on>
 8021952:	0004      	movs	r4, r0
 8021954:	231f      	movs	r3, #31
 8021956:	117a      	asrs	r2, r7, #5
 8021958:	401f      	ands	r7, r3
 802195a:	3b1e      	subs	r3, #30
 802195c:	40bb      	lsls	r3, r7
 802195e:	9902      	ldr	r1, [sp, #8]
 8021960:	0092      	lsls	r2, r2, #2
 8021962:	5852      	ldr	r2, [r2, r1]
 8021964:	421a      	tst	r2, r3
 8021966:	d001      	beq.n	802196c <__gethex+0x308>
 8021968:	2302      	movs	r3, #2
 802196a:	431c      	orrs	r4, r3
 802196c:	9b00      	ldr	r3, [sp, #0]
 802196e:	0031      	movs	r1, r6
 8021970:	1b9b      	subs	r3, r3, r6
 8021972:	2602      	movs	r6, #2
 8021974:	0028      	movs	r0, r5
 8021976:	9300      	str	r3, [sp, #0]
 8021978:	f7ff fe0c 	bl	8021594 <rshift>
 802197c:	9b01      	ldr	r3, [sp, #4]
 802197e:	685f      	ldr	r7, [r3, #4]
 8021980:	2c00      	cmp	r4, #0
 8021982:	d03f      	beq.n	8021a04 <__gethex+0x3a0>
 8021984:	9b01      	ldr	r3, [sp, #4]
 8021986:	68db      	ldr	r3, [r3, #12]
 8021988:	2b02      	cmp	r3, #2
 802198a:	d010      	beq.n	80219ae <__gethex+0x34a>
 802198c:	2b03      	cmp	r3, #3
 802198e:	d012      	beq.n	80219b6 <__gethex+0x352>
 8021990:	2b01      	cmp	r3, #1
 8021992:	d106      	bne.n	80219a2 <__gethex+0x33e>
 8021994:	07a2      	lsls	r2, r4, #30
 8021996:	d504      	bpl.n	80219a2 <__gethex+0x33e>
 8021998:	9a02      	ldr	r2, [sp, #8]
 802199a:	6812      	ldr	r2, [r2, #0]
 802199c:	4314      	orrs	r4, r2
 802199e:	421c      	tst	r4, r3
 80219a0:	d10c      	bne.n	80219bc <__gethex+0x358>
 80219a2:	2310      	movs	r3, #16
 80219a4:	e02d      	b.n	8021a02 <__gethex+0x39e>
 80219a6:	2401      	movs	r4, #1
 80219a8:	e7d4      	b.n	8021954 <__gethex+0x2f0>
 80219aa:	2601      	movs	r6, #1
 80219ac:	e7e8      	b.n	8021980 <__gethex+0x31c>
 80219ae:	2301      	movs	r3, #1
 80219b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80219b2:	1a9b      	subs	r3, r3, r2
 80219b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80219b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80219b8:	2b00      	cmp	r3, #0
 80219ba:	d0f2      	beq.n	80219a2 <__gethex+0x33e>
 80219bc:	692b      	ldr	r3, [r5, #16]
 80219be:	2000      	movs	r0, #0
 80219c0:	9302      	str	r3, [sp, #8]
 80219c2:	009b      	lsls	r3, r3, #2
 80219c4:	9304      	str	r3, [sp, #16]
 80219c6:	002b      	movs	r3, r5
 80219c8:	9a04      	ldr	r2, [sp, #16]
 80219ca:	3314      	adds	r3, #20
 80219cc:	1899      	adds	r1, r3, r2
 80219ce:	681a      	ldr	r2, [r3, #0]
 80219d0:	1c54      	adds	r4, r2, #1
 80219d2:	d01c      	beq.n	8021a0e <__gethex+0x3aa>
 80219d4:	3201      	adds	r2, #1
 80219d6:	601a      	str	r2, [r3, #0]
 80219d8:	002b      	movs	r3, r5
 80219da:	3314      	adds	r3, #20
 80219dc:	2e02      	cmp	r6, #2
 80219de:	d13f      	bne.n	8021a60 <__gethex+0x3fc>
 80219e0:	9a01      	ldr	r2, [sp, #4]
 80219e2:	9900      	ldr	r1, [sp, #0]
 80219e4:	6812      	ldr	r2, [r2, #0]
 80219e6:	3a01      	subs	r2, #1
 80219e8:	428a      	cmp	r2, r1
 80219ea:	d109      	bne.n	8021a00 <__gethex+0x39c>
 80219ec:	000a      	movs	r2, r1
 80219ee:	201f      	movs	r0, #31
 80219f0:	4010      	ands	r0, r2
 80219f2:	2201      	movs	r2, #1
 80219f4:	4082      	lsls	r2, r0
 80219f6:	1149      	asrs	r1, r1, #5
 80219f8:	0089      	lsls	r1, r1, #2
 80219fa:	58cb      	ldr	r3, [r1, r3]
 80219fc:	4213      	tst	r3, r2
 80219fe:	d13d      	bne.n	8021a7c <__gethex+0x418>
 8021a00:	2320      	movs	r3, #32
 8021a02:	431e      	orrs	r6, r3
 8021a04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021a06:	601d      	str	r5, [r3, #0]
 8021a08:	9b07      	ldr	r3, [sp, #28]
 8021a0a:	601f      	str	r7, [r3, #0]
 8021a0c:	e6b4      	b.n	8021778 <__gethex+0x114>
 8021a0e:	c301      	stmia	r3!, {r0}
 8021a10:	4299      	cmp	r1, r3
 8021a12:	d8dc      	bhi.n	80219ce <__gethex+0x36a>
 8021a14:	68ab      	ldr	r3, [r5, #8]
 8021a16:	9a02      	ldr	r2, [sp, #8]
 8021a18:	429a      	cmp	r2, r3
 8021a1a:	db18      	blt.n	8021a4e <__gethex+0x3ea>
 8021a1c:	6869      	ldr	r1, [r5, #4]
 8021a1e:	9803      	ldr	r0, [sp, #12]
 8021a20:	3101      	adds	r1, #1
 8021a22:	f000 f9df 	bl	8021de4 <_Balloc>
 8021a26:	1e04      	subs	r4, r0, #0
 8021a28:	d104      	bne.n	8021a34 <__gethex+0x3d0>
 8021a2a:	0022      	movs	r2, r4
 8021a2c:	2184      	movs	r1, #132	@ 0x84
 8021a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8021aa4 <__gethex+0x440>)
 8021a30:	481d      	ldr	r0, [pc, #116]	@ (8021aa8 <__gethex+0x444>)
 8021a32:	e6c4      	b.n	80217be <__gethex+0x15a>
 8021a34:	0029      	movs	r1, r5
 8021a36:	692a      	ldr	r2, [r5, #16]
 8021a38:	310c      	adds	r1, #12
 8021a3a:	3202      	adds	r2, #2
 8021a3c:	0092      	lsls	r2, r2, #2
 8021a3e:	300c      	adds	r0, #12
 8021a40:	f7fe fecc 	bl	80207dc <memcpy>
 8021a44:	0029      	movs	r1, r5
 8021a46:	9803      	ldr	r0, [sp, #12]
 8021a48:	f000 fa10 	bl	8021e6c <_Bfree>
 8021a4c:	0025      	movs	r5, r4
 8021a4e:	692b      	ldr	r3, [r5, #16]
 8021a50:	1c5a      	adds	r2, r3, #1
 8021a52:	612a      	str	r2, [r5, #16]
 8021a54:	2201      	movs	r2, #1
 8021a56:	3304      	adds	r3, #4
 8021a58:	009b      	lsls	r3, r3, #2
 8021a5a:	18eb      	adds	r3, r5, r3
 8021a5c:	605a      	str	r2, [r3, #4]
 8021a5e:	e7bb      	b.n	80219d8 <__gethex+0x374>
 8021a60:	692a      	ldr	r2, [r5, #16]
 8021a62:	9902      	ldr	r1, [sp, #8]
 8021a64:	428a      	cmp	r2, r1
 8021a66:	dd0b      	ble.n	8021a80 <__gethex+0x41c>
 8021a68:	2101      	movs	r1, #1
 8021a6a:	0028      	movs	r0, r5
 8021a6c:	f7ff fd92 	bl	8021594 <rshift>
 8021a70:	9b01      	ldr	r3, [sp, #4]
 8021a72:	3701      	adds	r7, #1
 8021a74:	689b      	ldr	r3, [r3, #8]
 8021a76:	42bb      	cmp	r3, r7
 8021a78:	da00      	bge.n	8021a7c <__gethex+0x418>
 8021a7a:	e6df      	b.n	802183c <__gethex+0x1d8>
 8021a7c:	2601      	movs	r6, #1
 8021a7e:	e7bf      	b.n	8021a00 <__gethex+0x39c>
 8021a80:	221f      	movs	r2, #31
 8021a82:	9c00      	ldr	r4, [sp, #0]
 8021a84:	9900      	ldr	r1, [sp, #0]
 8021a86:	4014      	ands	r4, r2
 8021a88:	4211      	tst	r1, r2
 8021a8a:	d0f7      	beq.n	8021a7c <__gethex+0x418>
 8021a8c:	9a04      	ldr	r2, [sp, #16]
 8021a8e:	189b      	adds	r3, r3, r2
 8021a90:	3b04      	subs	r3, #4
 8021a92:	6818      	ldr	r0, [r3, #0]
 8021a94:	f000 fa9e 	bl	8021fd4 <__hi0bits>
 8021a98:	2320      	movs	r3, #32
 8021a9a:	1b1b      	subs	r3, r3, r4
 8021a9c:	4298      	cmp	r0, r3
 8021a9e:	dbe3      	blt.n	8021a68 <__gethex+0x404>
 8021aa0:	e7ec      	b.n	8021a7c <__gethex+0x418>
 8021aa2:	46c0      	nop			@ (mov r8, r8)
 8021aa4:	08026479 	.word	0x08026479
 8021aa8:	0802648a 	.word	0x0802648a

08021aac <L_shift>:
 8021aac:	2308      	movs	r3, #8
 8021aae:	b570      	push	{r4, r5, r6, lr}
 8021ab0:	2520      	movs	r5, #32
 8021ab2:	1a9a      	subs	r2, r3, r2
 8021ab4:	0092      	lsls	r2, r2, #2
 8021ab6:	1aad      	subs	r5, r5, r2
 8021ab8:	6843      	ldr	r3, [r0, #4]
 8021aba:	6804      	ldr	r4, [r0, #0]
 8021abc:	001e      	movs	r6, r3
 8021abe:	40ae      	lsls	r6, r5
 8021ac0:	40d3      	lsrs	r3, r2
 8021ac2:	4334      	orrs	r4, r6
 8021ac4:	6004      	str	r4, [r0, #0]
 8021ac6:	6043      	str	r3, [r0, #4]
 8021ac8:	3004      	adds	r0, #4
 8021aca:	4288      	cmp	r0, r1
 8021acc:	d3f4      	bcc.n	8021ab8 <L_shift+0xc>
 8021ace:	bd70      	pop	{r4, r5, r6, pc}

08021ad0 <__match>:
 8021ad0:	b530      	push	{r4, r5, lr}
 8021ad2:	6803      	ldr	r3, [r0, #0]
 8021ad4:	780c      	ldrb	r4, [r1, #0]
 8021ad6:	3301      	adds	r3, #1
 8021ad8:	2c00      	cmp	r4, #0
 8021ada:	d102      	bne.n	8021ae2 <__match+0x12>
 8021adc:	6003      	str	r3, [r0, #0]
 8021ade:	2001      	movs	r0, #1
 8021ae0:	bd30      	pop	{r4, r5, pc}
 8021ae2:	781a      	ldrb	r2, [r3, #0]
 8021ae4:	0015      	movs	r5, r2
 8021ae6:	3d41      	subs	r5, #65	@ 0x41
 8021ae8:	2d19      	cmp	r5, #25
 8021aea:	d800      	bhi.n	8021aee <__match+0x1e>
 8021aec:	3220      	adds	r2, #32
 8021aee:	3101      	adds	r1, #1
 8021af0:	42a2      	cmp	r2, r4
 8021af2:	d0ef      	beq.n	8021ad4 <__match+0x4>
 8021af4:	2000      	movs	r0, #0
 8021af6:	e7f3      	b.n	8021ae0 <__match+0x10>

08021af8 <__hexnan>:
 8021af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021afa:	680b      	ldr	r3, [r1, #0]
 8021afc:	b08b      	sub	sp, #44	@ 0x2c
 8021afe:	9201      	str	r2, [sp, #4]
 8021b00:	9901      	ldr	r1, [sp, #4]
 8021b02:	115a      	asrs	r2, r3, #5
 8021b04:	0092      	lsls	r2, r2, #2
 8021b06:	188a      	adds	r2, r1, r2
 8021b08:	9202      	str	r2, [sp, #8]
 8021b0a:	0019      	movs	r1, r3
 8021b0c:	221f      	movs	r2, #31
 8021b0e:	4011      	ands	r1, r2
 8021b10:	9008      	str	r0, [sp, #32]
 8021b12:	9106      	str	r1, [sp, #24]
 8021b14:	4213      	tst	r3, r2
 8021b16:	d002      	beq.n	8021b1e <__hexnan+0x26>
 8021b18:	9b02      	ldr	r3, [sp, #8]
 8021b1a:	3304      	adds	r3, #4
 8021b1c:	9302      	str	r3, [sp, #8]
 8021b1e:	9b02      	ldr	r3, [sp, #8]
 8021b20:	2500      	movs	r5, #0
 8021b22:	1f1f      	subs	r7, r3, #4
 8021b24:	003e      	movs	r6, r7
 8021b26:	003c      	movs	r4, r7
 8021b28:	9b08      	ldr	r3, [sp, #32]
 8021b2a:	603d      	str	r5, [r7, #0]
 8021b2c:	681b      	ldr	r3, [r3, #0]
 8021b2e:	9507      	str	r5, [sp, #28]
 8021b30:	9305      	str	r3, [sp, #20]
 8021b32:	9503      	str	r5, [sp, #12]
 8021b34:	9b05      	ldr	r3, [sp, #20]
 8021b36:	3301      	adds	r3, #1
 8021b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b3a:	9b05      	ldr	r3, [sp, #20]
 8021b3c:	785b      	ldrb	r3, [r3, #1]
 8021b3e:	9304      	str	r3, [sp, #16]
 8021b40:	2b00      	cmp	r3, #0
 8021b42:	d028      	beq.n	8021b96 <__hexnan+0x9e>
 8021b44:	9804      	ldr	r0, [sp, #16]
 8021b46:	f7ff fd78 	bl	802163a <__hexdig_fun>
 8021b4a:	2800      	cmp	r0, #0
 8021b4c:	d155      	bne.n	8021bfa <__hexnan+0x102>
 8021b4e:	9b04      	ldr	r3, [sp, #16]
 8021b50:	2b20      	cmp	r3, #32
 8021b52:	d819      	bhi.n	8021b88 <__hexnan+0x90>
 8021b54:	9b03      	ldr	r3, [sp, #12]
 8021b56:	9a07      	ldr	r2, [sp, #28]
 8021b58:	4293      	cmp	r3, r2
 8021b5a:	dd12      	ble.n	8021b82 <__hexnan+0x8a>
 8021b5c:	42b4      	cmp	r4, r6
 8021b5e:	d206      	bcs.n	8021b6e <__hexnan+0x76>
 8021b60:	2d07      	cmp	r5, #7
 8021b62:	dc04      	bgt.n	8021b6e <__hexnan+0x76>
 8021b64:	002a      	movs	r2, r5
 8021b66:	0031      	movs	r1, r6
 8021b68:	0020      	movs	r0, r4
 8021b6a:	f7ff ff9f 	bl	8021aac <L_shift>
 8021b6e:	9b01      	ldr	r3, [sp, #4]
 8021b70:	2508      	movs	r5, #8
 8021b72:	429c      	cmp	r4, r3
 8021b74:	d905      	bls.n	8021b82 <__hexnan+0x8a>
 8021b76:	1f26      	subs	r6, r4, #4
 8021b78:	2500      	movs	r5, #0
 8021b7a:	0034      	movs	r4, r6
 8021b7c:	9b03      	ldr	r3, [sp, #12]
 8021b7e:	6035      	str	r5, [r6, #0]
 8021b80:	9307      	str	r3, [sp, #28]
 8021b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b84:	9305      	str	r3, [sp, #20]
 8021b86:	e7d5      	b.n	8021b34 <__hexnan+0x3c>
 8021b88:	9b04      	ldr	r3, [sp, #16]
 8021b8a:	2b29      	cmp	r3, #41	@ 0x29
 8021b8c:	d15a      	bne.n	8021c44 <__hexnan+0x14c>
 8021b8e:	9b05      	ldr	r3, [sp, #20]
 8021b90:	9a08      	ldr	r2, [sp, #32]
 8021b92:	3302      	adds	r3, #2
 8021b94:	6013      	str	r3, [r2, #0]
 8021b96:	9b03      	ldr	r3, [sp, #12]
 8021b98:	2b00      	cmp	r3, #0
 8021b9a:	d053      	beq.n	8021c44 <__hexnan+0x14c>
 8021b9c:	42b4      	cmp	r4, r6
 8021b9e:	d206      	bcs.n	8021bae <__hexnan+0xb6>
 8021ba0:	2d07      	cmp	r5, #7
 8021ba2:	dc04      	bgt.n	8021bae <__hexnan+0xb6>
 8021ba4:	002a      	movs	r2, r5
 8021ba6:	0031      	movs	r1, r6
 8021ba8:	0020      	movs	r0, r4
 8021baa:	f7ff ff7f 	bl	8021aac <L_shift>
 8021bae:	9b01      	ldr	r3, [sp, #4]
 8021bb0:	429c      	cmp	r4, r3
 8021bb2:	d936      	bls.n	8021c22 <__hexnan+0x12a>
 8021bb4:	001a      	movs	r2, r3
 8021bb6:	0023      	movs	r3, r4
 8021bb8:	cb02      	ldmia	r3!, {r1}
 8021bba:	c202      	stmia	r2!, {r1}
 8021bbc:	429f      	cmp	r7, r3
 8021bbe:	d2fb      	bcs.n	8021bb8 <__hexnan+0xc0>
 8021bc0:	9b02      	ldr	r3, [sp, #8]
 8021bc2:	1c61      	adds	r1, r4, #1
 8021bc4:	1eda      	subs	r2, r3, #3
 8021bc6:	2304      	movs	r3, #4
 8021bc8:	4291      	cmp	r1, r2
 8021bca:	d805      	bhi.n	8021bd8 <__hexnan+0xe0>
 8021bcc:	9b02      	ldr	r3, [sp, #8]
 8021bce:	3b04      	subs	r3, #4
 8021bd0:	1b1b      	subs	r3, r3, r4
 8021bd2:	089b      	lsrs	r3, r3, #2
 8021bd4:	3301      	adds	r3, #1
 8021bd6:	009b      	lsls	r3, r3, #2
 8021bd8:	9a01      	ldr	r2, [sp, #4]
 8021bda:	18d3      	adds	r3, r2, r3
 8021bdc:	2200      	movs	r2, #0
 8021bde:	c304      	stmia	r3!, {r2}
 8021be0:	429f      	cmp	r7, r3
 8021be2:	d2fc      	bcs.n	8021bde <__hexnan+0xe6>
 8021be4:	683b      	ldr	r3, [r7, #0]
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d104      	bne.n	8021bf4 <__hexnan+0xfc>
 8021bea:	9b01      	ldr	r3, [sp, #4]
 8021bec:	429f      	cmp	r7, r3
 8021bee:	d127      	bne.n	8021c40 <__hexnan+0x148>
 8021bf0:	2301      	movs	r3, #1
 8021bf2:	603b      	str	r3, [r7, #0]
 8021bf4:	2005      	movs	r0, #5
 8021bf6:	b00b      	add	sp, #44	@ 0x2c
 8021bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021bfa:	9b03      	ldr	r3, [sp, #12]
 8021bfc:	3501      	adds	r5, #1
 8021bfe:	3301      	adds	r3, #1
 8021c00:	9303      	str	r3, [sp, #12]
 8021c02:	2d08      	cmp	r5, #8
 8021c04:	dd06      	ble.n	8021c14 <__hexnan+0x11c>
 8021c06:	9b01      	ldr	r3, [sp, #4]
 8021c08:	429c      	cmp	r4, r3
 8021c0a:	d9ba      	bls.n	8021b82 <__hexnan+0x8a>
 8021c0c:	2300      	movs	r3, #0
 8021c0e:	2501      	movs	r5, #1
 8021c10:	3c04      	subs	r4, #4
 8021c12:	6023      	str	r3, [r4, #0]
 8021c14:	220f      	movs	r2, #15
 8021c16:	6823      	ldr	r3, [r4, #0]
 8021c18:	4010      	ands	r0, r2
 8021c1a:	011b      	lsls	r3, r3, #4
 8021c1c:	4303      	orrs	r3, r0
 8021c1e:	6023      	str	r3, [r4, #0]
 8021c20:	e7af      	b.n	8021b82 <__hexnan+0x8a>
 8021c22:	9b06      	ldr	r3, [sp, #24]
 8021c24:	2b00      	cmp	r3, #0
 8021c26:	d0dd      	beq.n	8021be4 <__hexnan+0xec>
 8021c28:	2320      	movs	r3, #32
 8021c2a:	9a06      	ldr	r2, [sp, #24]
 8021c2c:	9902      	ldr	r1, [sp, #8]
 8021c2e:	1a9b      	subs	r3, r3, r2
 8021c30:	2201      	movs	r2, #1
 8021c32:	4252      	negs	r2, r2
 8021c34:	40da      	lsrs	r2, r3
 8021c36:	3904      	subs	r1, #4
 8021c38:	680b      	ldr	r3, [r1, #0]
 8021c3a:	4013      	ands	r3, r2
 8021c3c:	600b      	str	r3, [r1, #0]
 8021c3e:	e7d1      	b.n	8021be4 <__hexnan+0xec>
 8021c40:	3f04      	subs	r7, #4
 8021c42:	e7cf      	b.n	8021be4 <__hexnan+0xec>
 8021c44:	2004      	movs	r0, #4
 8021c46:	e7d6      	b.n	8021bf6 <__hexnan+0xfe>

08021c48 <malloc>:
 8021c48:	b510      	push	{r4, lr}
 8021c4a:	4b03      	ldr	r3, [pc, #12]	@ (8021c58 <malloc+0x10>)
 8021c4c:	0001      	movs	r1, r0
 8021c4e:	6818      	ldr	r0, [r3, #0]
 8021c50:	f000 f826 	bl	8021ca0 <_malloc_r>
 8021c54:	bd10      	pop	{r4, pc}
 8021c56:	46c0      	nop			@ (mov r8, r8)
 8021c58:	200003d0 	.word	0x200003d0

08021c5c <sbrk_aligned>:
 8021c5c:	b570      	push	{r4, r5, r6, lr}
 8021c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8021c9c <sbrk_aligned+0x40>)
 8021c60:	000d      	movs	r5, r1
 8021c62:	6831      	ldr	r1, [r6, #0]
 8021c64:	0004      	movs	r4, r0
 8021c66:	2900      	cmp	r1, #0
 8021c68:	d102      	bne.n	8021c70 <sbrk_aligned+0x14>
 8021c6a:	f001 f989 	bl	8022f80 <_sbrk_r>
 8021c6e:	6030      	str	r0, [r6, #0]
 8021c70:	0029      	movs	r1, r5
 8021c72:	0020      	movs	r0, r4
 8021c74:	f001 f984 	bl	8022f80 <_sbrk_r>
 8021c78:	1c43      	adds	r3, r0, #1
 8021c7a:	d103      	bne.n	8021c84 <sbrk_aligned+0x28>
 8021c7c:	2501      	movs	r5, #1
 8021c7e:	426d      	negs	r5, r5
 8021c80:	0028      	movs	r0, r5
 8021c82:	bd70      	pop	{r4, r5, r6, pc}
 8021c84:	2303      	movs	r3, #3
 8021c86:	1cc5      	adds	r5, r0, #3
 8021c88:	439d      	bics	r5, r3
 8021c8a:	42a8      	cmp	r0, r5
 8021c8c:	d0f8      	beq.n	8021c80 <sbrk_aligned+0x24>
 8021c8e:	1a29      	subs	r1, r5, r0
 8021c90:	0020      	movs	r0, r4
 8021c92:	f001 f975 	bl	8022f80 <_sbrk_r>
 8021c96:	3001      	adds	r0, #1
 8021c98:	d1f2      	bne.n	8021c80 <sbrk_aligned+0x24>
 8021c9a:	e7ef      	b.n	8021c7c <sbrk_aligned+0x20>
 8021c9c:	200033d0 	.word	0x200033d0

08021ca0 <_malloc_r>:
 8021ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021ca2:	2203      	movs	r2, #3
 8021ca4:	1ccb      	adds	r3, r1, #3
 8021ca6:	4393      	bics	r3, r2
 8021ca8:	3308      	adds	r3, #8
 8021caa:	0005      	movs	r5, r0
 8021cac:	001f      	movs	r7, r3
 8021cae:	2b0c      	cmp	r3, #12
 8021cb0:	d234      	bcs.n	8021d1c <_malloc_r+0x7c>
 8021cb2:	270c      	movs	r7, #12
 8021cb4:	42b9      	cmp	r1, r7
 8021cb6:	d833      	bhi.n	8021d20 <_malloc_r+0x80>
 8021cb8:	0028      	movs	r0, r5
 8021cba:	f000 f883 	bl	8021dc4 <__malloc_lock>
 8021cbe:	4e37      	ldr	r6, [pc, #220]	@ (8021d9c <_malloc_r+0xfc>)
 8021cc0:	6833      	ldr	r3, [r6, #0]
 8021cc2:	001c      	movs	r4, r3
 8021cc4:	2c00      	cmp	r4, #0
 8021cc6:	d12f      	bne.n	8021d28 <_malloc_r+0x88>
 8021cc8:	0039      	movs	r1, r7
 8021cca:	0028      	movs	r0, r5
 8021ccc:	f7ff ffc6 	bl	8021c5c <sbrk_aligned>
 8021cd0:	0004      	movs	r4, r0
 8021cd2:	1c43      	adds	r3, r0, #1
 8021cd4:	d15f      	bne.n	8021d96 <_malloc_r+0xf6>
 8021cd6:	6834      	ldr	r4, [r6, #0]
 8021cd8:	9400      	str	r4, [sp, #0]
 8021cda:	9b00      	ldr	r3, [sp, #0]
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	d14a      	bne.n	8021d76 <_malloc_r+0xd6>
 8021ce0:	2c00      	cmp	r4, #0
 8021ce2:	d052      	beq.n	8021d8a <_malloc_r+0xea>
 8021ce4:	6823      	ldr	r3, [r4, #0]
 8021ce6:	0028      	movs	r0, r5
 8021ce8:	18e3      	adds	r3, r4, r3
 8021cea:	9900      	ldr	r1, [sp, #0]
 8021cec:	9301      	str	r3, [sp, #4]
 8021cee:	f001 f947 	bl	8022f80 <_sbrk_r>
 8021cf2:	9b01      	ldr	r3, [sp, #4]
 8021cf4:	4283      	cmp	r3, r0
 8021cf6:	d148      	bne.n	8021d8a <_malloc_r+0xea>
 8021cf8:	6823      	ldr	r3, [r4, #0]
 8021cfa:	0028      	movs	r0, r5
 8021cfc:	1aff      	subs	r7, r7, r3
 8021cfe:	0039      	movs	r1, r7
 8021d00:	f7ff ffac 	bl	8021c5c <sbrk_aligned>
 8021d04:	3001      	adds	r0, #1
 8021d06:	d040      	beq.n	8021d8a <_malloc_r+0xea>
 8021d08:	6823      	ldr	r3, [r4, #0]
 8021d0a:	19db      	adds	r3, r3, r7
 8021d0c:	6023      	str	r3, [r4, #0]
 8021d0e:	6833      	ldr	r3, [r6, #0]
 8021d10:	685a      	ldr	r2, [r3, #4]
 8021d12:	2a00      	cmp	r2, #0
 8021d14:	d133      	bne.n	8021d7e <_malloc_r+0xde>
 8021d16:	9b00      	ldr	r3, [sp, #0]
 8021d18:	6033      	str	r3, [r6, #0]
 8021d1a:	e019      	b.n	8021d50 <_malloc_r+0xb0>
 8021d1c:	2b00      	cmp	r3, #0
 8021d1e:	dac9      	bge.n	8021cb4 <_malloc_r+0x14>
 8021d20:	230c      	movs	r3, #12
 8021d22:	602b      	str	r3, [r5, #0]
 8021d24:	2000      	movs	r0, #0
 8021d26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021d28:	6821      	ldr	r1, [r4, #0]
 8021d2a:	1bc9      	subs	r1, r1, r7
 8021d2c:	d420      	bmi.n	8021d70 <_malloc_r+0xd0>
 8021d2e:	290b      	cmp	r1, #11
 8021d30:	d90a      	bls.n	8021d48 <_malloc_r+0xa8>
 8021d32:	19e2      	adds	r2, r4, r7
 8021d34:	6027      	str	r7, [r4, #0]
 8021d36:	42a3      	cmp	r3, r4
 8021d38:	d104      	bne.n	8021d44 <_malloc_r+0xa4>
 8021d3a:	6032      	str	r2, [r6, #0]
 8021d3c:	6863      	ldr	r3, [r4, #4]
 8021d3e:	6011      	str	r1, [r2, #0]
 8021d40:	6053      	str	r3, [r2, #4]
 8021d42:	e005      	b.n	8021d50 <_malloc_r+0xb0>
 8021d44:	605a      	str	r2, [r3, #4]
 8021d46:	e7f9      	b.n	8021d3c <_malloc_r+0x9c>
 8021d48:	6862      	ldr	r2, [r4, #4]
 8021d4a:	42a3      	cmp	r3, r4
 8021d4c:	d10e      	bne.n	8021d6c <_malloc_r+0xcc>
 8021d4e:	6032      	str	r2, [r6, #0]
 8021d50:	0028      	movs	r0, r5
 8021d52:	f000 f83f 	bl	8021dd4 <__malloc_unlock>
 8021d56:	0020      	movs	r0, r4
 8021d58:	2207      	movs	r2, #7
 8021d5a:	300b      	adds	r0, #11
 8021d5c:	1d23      	adds	r3, r4, #4
 8021d5e:	4390      	bics	r0, r2
 8021d60:	1ac2      	subs	r2, r0, r3
 8021d62:	4298      	cmp	r0, r3
 8021d64:	d0df      	beq.n	8021d26 <_malloc_r+0x86>
 8021d66:	1a1b      	subs	r3, r3, r0
 8021d68:	50a3      	str	r3, [r4, r2]
 8021d6a:	e7dc      	b.n	8021d26 <_malloc_r+0x86>
 8021d6c:	605a      	str	r2, [r3, #4]
 8021d6e:	e7ef      	b.n	8021d50 <_malloc_r+0xb0>
 8021d70:	0023      	movs	r3, r4
 8021d72:	6864      	ldr	r4, [r4, #4]
 8021d74:	e7a6      	b.n	8021cc4 <_malloc_r+0x24>
 8021d76:	9c00      	ldr	r4, [sp, #0]
 8021d78:	6863      	ldr	r3, [r4, #4]
 8021d7a:	9300      	str	r3, [sp, #0]
 8021d7c:	e7ad      	b.n	8021cda <_malloc_r+0x3a>
 8021d7e:	001a      	movs	r2, r3
 8021d80:	685b      	ldr	r3, [r3, #4]
 8021d82:	42a3      	cmp	r3, r4
 8021d84:	d1fb      	bne.n	8021d7e <_malloc_r+0xde>
 8021d86:	2300      	movs	r3, #0
 8021d88:	e7da      	b.n	8021d40 <_malloc_r+0xa0>
 8021d8a:	230c      	movs	r3, #12
 8021d8c:	0028      	movs	r0, r5
 8021d8e:	602b      	str	r3, [r5, #0]
 8021d90:	f000 f820 	bl	8021dd4 <__malloc_unlock>
 8021d94:	e7c6      	b.n	8021d24 <_malloc_r+0x84>
 8021d96:	6007      	str	r7, [r0, #0]
 8021d98:	e7da      	b.n	8021d50 <_malloc_r+0xb0>
 8021d9a:	46c0      	nop			@ (mov r8, r8)
 8021d9c:	200033d4 	.word	0x200033d4

08021da0 <__ascii_mbtowc>:
 8021da0:	b082      	sub	sp, #8
 8021da2:	2900      	cmp	r1, #0
 8021da4:	d100      	bne.n	8021da8 <__ascii_mbtowc+0x8>
 8021da6:	a901      	add	r1, sp, #4
 8021da8:	1e10      	subs	r0, r2, #0
 8021daa:	d006      	beq.n	8021dba <__ascii_mbtowc+0x1a>
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	d006      	beq.n	8021dbe <__ascii_mbtowc+0x1e>
 8021db0:	7813      	ldrb	r3, [r2, #0]
 8021db2:	600b      	str	r3, [r1, #0]
 8021db4:	7810      	ldrb	r0, [r2, #0]
 8021db6:	1e43      	subs	r3, r0, #1
 8021db8:	4198      	sbcs	r0, r3
 8021dba:	b002      	add	sp, #8
 8021dbc:	4770      	bx	lr
 8021dbe:	2002      	movs	r0, #2
 8021dc0:	4240      	negs	r0, r0
 8021dc2:	e7fa      	b.n	8021dba <__ascii_mbtowc+0x1a>

08021dc4 <__malloc_lock>:
 8021dc4:	b510      	push	{r4, lr}
 8021dc6:	4802      	ldr	r0, [pc, #8]	@ (8021dd0 <__malloc_lock+0xc>)
 8021dc8:	f7fe fcfb 	bl	80207c2 <__retarget_lock_acquire_recursive>
 8021dcc:	bd10      	pop	{r4, pc}
 8021dce:	46c0      	nop			@ (mov r8, r8)
 8021dd0:	200033cc 	.word	0x200033cc

08021dd4 <__malloc_unlock>:
 8021dd4:	b510      	push	{r4, lr}
 8021dd6:	4802      	ldr	r0, [pc, #8]	@ (8021de0 <__malloc_unlock+0xc>)
 8021dd8:	f7fe fcf4 	bl	80207c4 <__retarget_lock_release_recursive>
 8021ddc:	bd10      	pop	{r4, pc}
 8021dde:	46c0      	nop			@ (mov r8, r8)
 8021de0:	200033cc 	.word	0x200033cc

08021de4 <_Balloc>:
 8021de4:	b570      	push	{r4, r5, r6, lr}
 8021de6:	69c5      	ldr	r5, [r0, #28]
 8021de8:	0006      	movs	r6, r0
 8021dea:	000c      	movs	r4, r1
 8021dec:	2d00      	cmp	r5, #0
 8021dee:	d10e      	bne.n	8021e0e <_Balloc+0x2a>
 8021df0:	2010      	movs	r0, #16
 8021df2:	f7ff ff29 	bl	8021c48 <malloc>
 8021df6:	1e02      	subs	r2, r0, #0
 8021df8:	61f0      	str	r0, [r6, #28]
 8021dfa:	d104      	bne.n	8021e06 <_Balloc+0x22>
 8021dfc:	216b      	movs	r1, #107	@ 0x6b
 8021dfe:	4b19      	ldr	r3, [pc, #100]	@ (8021e64 <_Balloc+0x80>)
 8021e00:	4819      	ldr	r0, [pc, #100]	@ (8021e68 <_Balloc+0x84>)
 8021e02:	f001 f8cf 	bl	8022fa4 <__assert_func>
 8021e06:	6045      	str	r5, [r0, #4]
 8021e08:	6085      	str	r5, [r0, #8]
 8021e0a:	6005      	str	r5, [r0, #0]
 8021e0c:	60c5      	str	r5, [r0, #12]
 8021e0e:	69f5      	ldr	r5, [r6, #28]
 8021e10:	68eb      	ldr	r3, [r5, #12]
 8021e12:	2b00      	cmp	r3, #0
 8021e14:	d013      	beq.n	8021e3e <_Balloc+0x5a>
 8021e16:	69f3      	ldr	r3, [r6, #28]
 8021e18:	00a2      	lsls	r2, r4, #2
 8021e1a:	68db      	ldr	r3, [r3, #12]
 8021e1c:	189b      	adds	r3, r3, r2
 8021e1e:	6818      	ldr	r0, [r3, #0]
 8021e20:	2800      	cmp	r0, #0
 8021e22:	d118      	bne.n	8021e56 <_Balloc+0x72>
 8021e24:	2101      	movs	r1, #1
 8021e26:	000d      	movs	r5, r1
 8021e28:	40a5      	lsls	r5, r4
 8021e2a:	1d6a      	adds	r2, r5, #5
 8021e2c:	0030      	movs	r0, r6
 8021e2e:	0092      	lsls	r2, r2, #2
 8021e30:	f001 f8d6 	bl	8022fe0 <_calloc_r>
 8021e34:	2800      	cmp	r0, #0
 8021e36:	d00c      	beq.n	8021e52 <_Balloc+0x6e>
 8021e38:	6044      	str	r4, [r0, #4]
 8021e3a:	6085      	str	r5, [r0, #8]
 8021e3c:	e00d      	b.n	8021e5a <_Balloc+0x76>
 8021e3e:	2221      	movs	r2, #33	@ 0x21
 8021e40:	2104      	movs	r1, #4
 8021e42:	0030      	movs	r0, r6
 8021e44:	f001 f8cc 	bl	8022fe0 <_calloc_r>
 8021e48:	69f3      	ldr	r3, [r6, #28]
 8021e4a:	60e8      	str	r0, [r5, #12]
 8021e4c:	68db      	ldr	r3, [r3, #12]
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d1e1      	bne.n	8021e16 <_Balloc+0x32>
 8021e52:	2000      	movs	r0, #0
 8021e54:	bd70      	pop	{r4, r5, r6, pc}
 8021e56:	6802      	ldr	r2, [r0, #0]
 8021e58:	601a      	str	r2, [r3, #0]
 8021e5a:	2300      	movs	r3, #0
 8021e5c:	6103      	str	r3, [r0, #16]
 8021e5e:	60c3      	str	r3, [r0, #12]
 8021e60:	e7f8      	b.n	8021e54 <_Balloc+0x70>
 8021e62:	46c0      	nop			@ (mov r8, r8)
 8021e64:	0802640a 	.word	0x0802640a
 8021e68:	080264ea 	.word	0x080264ea

08021e6c <_Bfree>:
 8021e6c:	b570      	push	{r4, r5, r6, lr}
 8021e6e:	69c6      	ldr	r6, [r0, #28]
 8021e70:	0005      	movs	r5, r0
 8021e72:	000c      	movs	r4, r1
 8021e74:	2e00      	cmp	r6, #0
 8021e76:	d10e      	bne.n	8021e96 <_Bfree+0x2a>
 8021e78:	2010      	movs	r0, #16
 8021e7a:	f7ff fee5 	bl	8021c48 <malloc>
 8021e7e:	1e02      	subs	r2, r0, #0
 8021e80:	61e8      	str	r0, [r5, #28]
 8021e82:	d104      	bne.n	8021e8e <_Bfree+0x22>
 8021e84:	218f      	movs	r1, #143	@ 0x8f
 8021e86:	4b09      	ldr	r3, [pc, #36]	@ (8021eac <_Bfree+0x40>)
 8021e88:	4809      	ldr	r0, [pc, #36]	@ (8021eb0 <_Bfree+0x44>)
 8021e8a:	f001 f88b 	bl	8022fa4 <__assert_func>
 8021e8e:	6046      	str	r6, [r0, #4]
 8021e90:	6086      	str	r6, [r0, #8]
 8021e92:	6006      	str	r6, [r0, #0]
 8021e94:	60c6      	str	r6, [r0, #12]
 8021e96:	2c00      	cmp	r4, #0
 8021e98:	d007      	beq.n	8021eaa <_Bfree+0x3e>
 8021e9a:	69eb      	ldr	r3, [r5, #28]
 8021e9c:	6862      	ldr	r2, [r4, #4]
 8021e9e:	68db      	ldr	r3, [r3, #12]
 8021ea0:	0092      	lsls	r2, r2, #2
 8021ea2:	189b      	adds	r3, r3, r2
 8021ea4:	681a      	ldr	r2, [r3, #0]
 8021ea6:	6022      	str	r2, [r4, #0]
 8021ea8:	601c      	str	r4, [r3, #0]
 8021eaa:	bd70      	pop	{r4, r5, r6, pc}
 8021eac:	0802640a 	.word	0x0802640a
 8021eb0:	080264ea 	.word	0x080264ea

08021eb4 <__multadd>:
 8021eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021eb6:	000f      	movs	r7, r1
 8021eb8:	9001      	str	r0, [sp, #4]
 8021eba:	000c      	movs	r4, r1
 8021ebc:	001e      	movs	r6, r3
 8021ebe:	2000      	movs	r0, #0
 8021ec0:	690d      	ldr	r5, [r1, #16]
 8021ec2:	3714      	adds	r7, #20
 8021ec4:	683b      	ldr	r3, [r7, #0]
 8021ec6:	3001      	adds	r0, #1
 8021ec8:	b299      	uxth	r1, r3
 8021eca:	4351      	muls	r1, r2
 8021ecc:	0c1b      	lsrs	r3, r3, #16
 8021ece:	4353      	muls	r3, r2
 8021ed0:	1989      	adds	r1, r1, r6
 8021ed2:	0c0e      	lsrs	r6, r1, #16
 8021ed4:	199b      	adds	r3, r3, r6
 8021ed6:	0c1e      	lsrs	r6, r3, #16
 8021ed8:	b289      	uxth	r1, r1
 8021eda:	041b      	lsls	r3, r3, #16
 8021edc:	185b      	adds	r3, r3, r1
 8021ede:	c708      	stmia	r7!, {r3}
 8021ee0:	4285      	cmp	r5, r0
 8021ee2:	dcef      	bgt.n	8021ec4 <__multadd+0x10>
 8021ee4:	2e00      	cmp	r6, #0
 8021ee6:	d022      	beq.n	8021f2e <__multadd+0x7a>
 8021ee8:	68a3      	ldr	r3, [r4, #8]
 8021eea:	42ab      	cmp	r3, r5
 8021eec:	dc19      	bgt.n	8021f22 <__multadd+0x6e>
 8021eee:	6861      	ldr	r1, [r4, #4]
 8021ef0:	9801      	ldr	r0, [sp, #4]
 8021ef2:	3101      	adds	r1, #1
 8021ef4:	f7ff ff76 	bl	8021de4 <_Balloc>
 8021ef8:	1e07      	subs	r7, r0, #0
 8021efa:	d105      	bne.n	8021f08 <__multadd+0x54>
 8021efc:	003a      	movs	r2, r7
 8021efe:	21ba      	movs	r1, #186	@ 0xba
 8021f00:	4b0c      	ldr	r3, [pc, #48]	@ (8021f34 <__multadd+0x80>)
 8021f02:	480d      	ldr	r0, [pc, #52]	@ (8021f38 <__multadd+0x84>)
 8021f04:	f001 f84e 	bl	8022fa4 <__assert_func>
 8021f08:	0021      	movs	r1, r4
 8021f0a:	6922      	ldr	r2, [r4, #16]
 8021f0c:	310c      	adds	r1, #12
 8021f0e:	3202      	adds	r2, #2
 8021f10:	0092      	lsls	r2, r2, #2
 8021f12:	300c      	adds	r0, #12
 8021f14:	f7fe fc62 	bl	80207dc <memcpy>
 8021f18:	0021      	movs	r1, r4
 8021f1a:	9801      	ldr	r0, [sp, #4]
 8021f1c:	f7ff ffa6 	bl	8021e6c <_Bfree>
 8021f20:	003c      	movs	r4, r7
 8021f22:	1d2b      	adds	r3, r5, #4
 8021f24:	009b      	lsls	r3, r3, #2
 8021f26:	18e3      	adds	r3, r4, r3
 8021f28:	3501      	adds	r5, #1
 8021f2a:	605e      	str	r6, [r3, #4]
 8021f2c:	6125      	str	r5, [r4, #16]
 8021f2e:	0020      	movs	r0, r4
 8021f30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021f32:	46c0      	nop			@ (mov r8, r8)
 8021f34:	08026479 	.word	0x08026479
 8021f38:	080264ea 	.word	0x080264ea

08021f3c <__s2b>:
 8021f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021f3e:	0007      	movs	r7, r0
 8021f40:	0018      	movs	r0, r3
 8021f42:	000c      	movs	r4, r1
 8021f44:	3008      	adds	r0, #8
 8021f46:	2109      	movs	r1, #9
 8021f48:	9301      	str	r3, [sp, #4]
 8021f4a:	0015      	movs	r5, r2
 8021f4c:	f7de f9b4 	bl	80002b8 <__divsi3>
 8021f50:	2301      	movs	r3, #1
 8021f52:	2100      	movs	r1, #0
 8021f54:	4283      	cmp	r3, r0
 8021f56:	db0a      	blt.n	8021f6e <__s2b+0x32>
 8021f58:	0038      	movs	r0, r7
 8021f5a:	f7ff ff43 	bl	8021de4 <_Balloc>
 8021f5e:	1e01      	subs	r1, r0, #0
 8021f60:	d108      	bne.n	8021f74 <__s2b+0x38>
 8021f62:	000a      	movs	r2, r1
 8021f64:	4b19      	ldr	r3, [pc, #100]	@ (8021fcc <__s2b+0x90>)
 8021f66:	481a      	ldr	r0, [pc, #104]	@ (8021fd0 <__s2b+0x94>)
 8021f68:	31d3      	adds	r1, #211	@ 0xd3
 8021f6a:	f001 f81b 	bl	8022fa4 <__assert_func>
 8021f6e:	005b      	lsls	r3, r3, #1
 8021f70:	3101      	adds	r1, #1
 8021f72:	e7ef      	b.n	8021f54 <__s2b+0x18>
 8021f74:	9b08      	ldr	r3, [sp, #32]
 8021f76:	6143      	str	r3, [r0, #20]
 8021f78:	2301      	movs	r3, #1
 8021f7a:	6103      	str	r3, [r0, #16]
 8021f7c:	2d09      	cmp	r5, #9
 8021f7e:	dd18      	ble.n	8021fb2 <__s2b+0x76>
 8021f80:	0023      	movs	r3, r4
 8021f82:	3309      	adds	r3, #9
 8021f84:	001e      	movs	r6, r3
 8021f86:	9300      	str	r3, [sp, #0]
 8021f88:	1964      	adds	r4, r4, r5
 8021f8a:	7833      	ldrb	r3, [r6, #0]
 8021f8c:	220a      	movs	r2, #10
 8021f8e:	0038      	movs	r0, r7
 8021f90:	3b30      	subs	r3, #48	@ 0x30
 8021f92:	f7ff ff8f 	bl	8021eb4 <__multadd>
 8021f96:	3601      	adds	r6, #1
 8021f98:	0001      	movs	r1, r0
 8021f9a:	42a6      	cmp	r6, r4
 8021f9c:	d1f5      	bne.n	8021f8a <__s2b+0x4e>
 8021f9e:	002c      	movs	r4, r5
 8021fa0:	9b00      	ldr	r3, [sp, #0]
 8021fa2:	3c08      	subs	r4, #8
 8021fa4:	191c      	adds	r4, r3, r4
 8021fa6:	002e      	movs	r6, r5
 8021fa8:	9b01      	ldr	r3, [sp, #4]
 8021faa:	429e      	cmp	r6, r3
 8021fac:	db04      	blt.n	8021fb8 <__s2b+0x7c>
 8021fae:	0008      	movs	r0, r1
 8021fb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021fb2:	2509      	movs	r5, #9
 8021fb4:	340a      	adds	r4, #10
 8021fb6:	e7f6      	b.n	8021fa6 <__s2b+0x6a>
 8021fb8:	1b63      	subs	r3, r4, r5
 8021fba:	5d9b      	ldrb	r3, [r3, r6]
 8021fbc:	220a      	movs	r2, #10
 8021fbe:	0038      	movs	r0, r7
 8021fc0:	3b30      	subs	r3, #48	@ 0x30
 8021fc2:	f7ff ff77 	bl	8021eb4 <__multadd>
 8021fc6:	3601      	adds	r6, #1
 8021fc8:	0001      	movs	r1, r0
 8021fca:	e7ed      	b.n	8021fa8 <__s2b+0x6c>
 8021fcc:	08026479 	.word	0x08026479
 8021fd0:	080264ea 	.word	0x080264ea

08021fd4 <__hi0bits>:
 8021fd4:	2280      	movs	r2, #128	@ 0x80
 8021fd6:	0003      	movs	r3, r0
 8021fd8:	0252      	lsls	r2, r2, #9
 8021fda:	2000      	movs	r0, #0
 8021fdc:	4293      	cmp	r3, r2
 8021fde:	d201      	bcs.n	8021fe4 <__hi0bits+0x10>
 8021fe0:	041b      	lsls	r3, r3, #16
 8021fe2:	3010      	adds	r0, #16
 8021fe4:	2280      	movs	r2, #128	@ 0x80
 8021fe6:	0452      	lsls	r2, r2, #17
 8021fe8:	4293      	cmp	r3, r2
 8021fea:	d201      	bcs.n	8021ff0 <__hi0bits+0x1c>
 8021fec:	3008      	adds	r0, #8
 8021fee:	021b      	lsls	r3, r3, #8
 8021ff0:	2280      	movs	r2, #128	@ 0x80
 8021ff2:	0552      	lsls	r2, r2, #21
 8021ff4:	4293      	cmp	r3, r2
 8021ff6:	d201      	bcs.n	8021ffc <__hi0bits+0x28>
 8021ff8:	3004      	adds	r0, #4
 8021ffa:	011b      	lsls	r3, r3, #4
 8021ffc:	2280      	movs	r2, #128	@ 0x80
 8021ffe:	05d2      	lsls	r2, r2, #23
 8022000:	4293      	cmp	r3, r2
 8022002:	d201      	bcs.n	8022008 <__hi0bits+0x34>
 8022004:	3002      	adds	r0, #2
 8022006:	009b      	lsls	r3, r3, #2
 8022008:	2b00      	cmp	r3, #0
 802200a:	db03      	blt.n	8022014 <__hi0bits+0x40>
 802200c:	3001      	adds	r0, #1
 802200e:	4213      	tst	r3, r2
 8022010:	d100      	bne.n	8022014 <__hi0bits+0x40>
 8022012:	2020      	movs	r0, #32
 8022014:	4770      	bx	lr

08022016 <__lo0bits>:
 8022016:	6803      	ldr	r3, [r0, #0]
 8022018:	0001      	movs	r1, r0
 802201a:	2207      	movs	r2, #7
 802201c:	0018      	movs	r0, r3
 802201e:	4010      	ands	r0, r2
 8022020:	4213      	tst	r3, r2
 8022022:	d00d      	beq.n	8022040 <__lo0bits+0x2a>
 8022024:	3a06      	subs	r2, #6
 8022026:	2000      	movs	r0, #0
 8022028:	4213      	tst	r3, r2
 802202a:	d105      	bne.n	8022038 <__lo0bits+0x22>
 802202c:	3002      	adds	r0, #2
 802202e:	4203      	tst	r3, r0
 8022030:	d003      	beq.n	802203a <__lo0bits+0x24>
 8022032:	40d3      	lsrs	r3, r2
 8022034:	0010      	movs	r0, r2
 8022036:	600b      	str	r3, [r1, #0]
 8022038:	4770      	bx	lr
 802203a:	089b      	lsrs	r3, r3, #2
 802203c:	600b      	str	r3, [r1, #0]
 802203e:	e7fb      	b.n	8022038 <__lo0bits+0x22>
 8022040:	b29a      	uxth	r2, r3
 8022042:	2a00      	cmp	r2, #0
 8022044:	d101      	bne.n	802204a <__lo0bits+0x34>
 8022046:	2010      	movs	r0, #16
 8022048:	0c1b      	lsrs	r3, r3, #16
 802204a:	b2da      	uxtb	r2, r3
 802204c:	2a00      	cmp	r2, #0
 802204e:	d101      	bne.n	8022054 <__lo0bits+0x3e>
 8022050:	3008      	adds	r0, #8
 8022052:	0a1b      	lsrs	r3, r3, #8
 8022054:	071a      	lsls	r2, r3, #28
 8022056:	d101      	bne.n	802205c <__lo0bits+0x46>
 8022058:	3004      	adds	r0, #4
 802205a:	091b      	lsrs	r3, r3, #4
 802205c:	079a      	lsls	r2, r3, #30
 802205e:	d101      	bne.n	8022064 <__lo0bits+0x4e>
 8022060:	3002      	adds	r0, #2
 8022062:	089b      	lsrs	r3, r3, #2
 8022064:	07da      	lsls	r2, r3, #31
 8022066:	d4e9      	bmi.n	802203c <__lo0bits+0x26>
 8022068:	3001      	adds	r0, #1
 802206a:	085b      	lsrs	r3, r3, #1
 802206c:	d1e6      	bne.n	802203c <__lo0bits+0x26>
 802206e:	2020      	movs	r0, #32
 8022070:	e7e2      	b.n	8022038 <__lo0bits+0x22>
	...

08022074 <__i2b>:
 8022074:	b510      	push	{r4, lr}
 8022076:	000c      	movs	r4, r1
 8022078:	2101      	movs	r1, #1
 802207a:	f7ff feb3 	bl	8021de4 <_Balloc>
 802207e:	2800      	cmp	r0, #0
 8022080:	d107      	bne.n	8022092 <__i2b+0x1e>
 8022082:	2146      	movs	r1, #70	@ 0x46
 8022084:	4c05      	ldr	r4, [pc, #20]	@ (802209c <__i2b+0x28>)
 8022086:	0002      	movs	r2, r0
 8022088:	4b05      	ldr	r3, [pc, #20]	@ (80220a0 <__i2b+0x2c>)
 802208a:	0020      	movs	r0, r4
 802208c:	31ff      	adds	r1, #255	@ 0xff
 802208e:	f000 ff89 	bl	8022fa4 <__assert_func>
 8022092:	2301      	movs	r3, #1
 8022094:	6144      	str	r4, [r0, #20]
 8022096:	6103      	str	r3, [r0, #16]
 8022098:	bd10      	pop	{r4, pc}
 802209a:	46c0      	nop			@ (mov r8, r8)
 802209c:	080264ea 	.word	0x080264ea
 80220a0:	08026479 	.word	0x08026479

080220a4 <__multiply>:
 80220a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80220a6:	0014      	movs	r4, r2
 80220a8:	690a      	ldr	r2, [r1, #16]
 80220aa:	6923      	ldr	r3, [r4, #16]
 80220ac:	000d      	movs	r5, r1
 80220ae:	b08b      	sub	sp, #44	@ 0x2c
 80220b0:	429a      	cmp	r2, r3
 80220b2:	db02      	blt.n	80220ba <__multiply+0x16>
 80220b4:	0023      	movs	r3, r4
 80220b6:	000c      	movs	r4, r1
 80220b8:	001d      	movs	r5, r3
 80220ba:	6927      	ldr	r7, [r4, #16]
 80220bc:	692e      	ldr	r6, [r5, #16]
 80220be:	6861      	ldr	r1, [r4, #4]
 80220c0:	19bb      	adds	r3, r7, r6
 80220c2:	9303      	str	r3, [sp, #12]
 80220c4:	68a3      	ldr	r3, [r4, #8]
 80220c6:	19ba      	adds	r2, r7, r6
 80220c8:	4293      	cmp	r3, r2
 80220ca:	da00      	bge.n	80220ce <__multiply+0x2a>
 80220cc:	3101      	adds	r1, #1
 80220ce:	f7ff fe89 	bl	8021de4 <_Balloc>
 80220d2:	9002      	str	r0, [sp, #8]
 80220d4:	2800      	cmp	r0, #0
 80220d6:	d106      	bne.n	80220e6 <__multiply+0x42>
 80220d8:	21b1      	movs	r1, #177	@ 0xb1
 80220da:	4b49      	ldr	r3, [pc, #292]	@ (8022200 <__multiply+0x15c>)
 80220dc:	4849      	ldr	r0, [pc, #292]	@ (8022204 <__multiply+0x160>)
 80220de:	9a02      	ldr	r2, [sp, #8]
 80220e0:	0049      	lsls	r1, r1, #1
 80220e2:	f000 ff5f 	bl	8022fa4 <__assert_func>
 80220e6:	9b02      	ldr	r3, [sp, #8]
 80220e8:	2200      	movs	r2, #0
 80220ea:	3314      	adds	r3, #20
 80220ec:	469c      	mov	ip, r3
 80220ee:	19bb      	adds	r3, r7, r6
 80220f0:	009b      	lsls	r3, r3, #2
 80220f2:	4463      	add	r3, ip
 80220f4:	9304      	str	r3, [sp, #16]
 80220f6:	4663      	mov	r3, ip
 80220f8:	9904      	ldr	r1, [sp, #16]
 80220fa:	428b      	cmp	r3, r1
 80220fc:	d32a      	bcc.n	8022154 <__multiply+0xb0>
 80220fe:	0023      	movs	r3, r4
 8022100:	00bf      	lsls	r7, r7, #2
 8022102:	3314      	adds	r3, #20
 8022104:	3514      	adds	r5, #20
 8022106:	9308      	str	r3, [sp, #32]
 8022108:	00b6      	lsls	r6, r6, #2
 802210a:	19db      	adds	r3, r3, r7
 802210c:	9305      	str	r3, [sp, #20]
 802210e:	19ab      	adds	r3, r5, r6
 8022110:	9309      	str	r3, [sp, #36]	@ 0x24
 8022112:	2304      	movs	r3, #4
 8022114:	9306      	str	r3, [sp, #24]
 8022116:	0023      	movs	r3, r4
 8022118:	9a05      	ldr	r2, [sp, #20]
 802211a:	3315      	adds	r3, #21
 802211c:	9501      	str	r5, [sp, #4]
 802211e:	429a      	cmp	r2, r3
 8022120:	d305      	bcc.n	802212e <__multiply+0x8a>
 8022122:	1b13      	subs	r3, r2, r4
 8022124:	3b15      	subs	r3, #21
 8022126:	089b      	lsrs	r3, r3, #2
 8022128:	3301      	adds	r3, #1
 802212a:	009b      	lsls	r3, r3, #2
 802212c:	9306      	str	r3, [sp, #24]
 802212e:	9b01      	ldr	r3, [sp, #4]
 8022130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022132:	4293      	cmp	r3, r2
 8022134:	d310      	bcc.n	8022158 <__multiply+0xb4>
 8022136:	9b03      	ldr	r3, [sp, #12]
 8022138:	2b00      	cmp	r3, #0
 802213a:	dd05      	ble.n	8022148 <__multiply+0xa4>
 802213c:	9b04      	ldr	r3, [sp, #16]
 802213e:	3b04      	subs	r3, #4
 8022140:	9304      	str	r3, [sp, #16]
 8022142:	681b      	ldr	r3, [r3, #0]
 8022144:	2b00      	cmp	r3, #0
 8022146:	d056      	beq.n	80221f6 <__multiply+0x152>
 8022148:	9b02      	ldr	r3, [sp, #8]
 802214a:	9a03      	ldr	r2, [sp, #12]
 802214c:	0018      	movs	r0, r3
 802214e:	611a      	str	r2, [r3, #16]
 8022150:	b00b      	add	sp, #44	@ 0x2c
 8022152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022154:	c304      	stmia	r3!, {r2}
 8022156:	e7cf      	b.n	80220f8 <__multiply+0x54>
 8022158:	9b01      	ldr	r3, [sp, #4]
 802215a:	6818      	ldr	r0, [r3, #0]
 802215c:	b280      	uxth	r0, r0
 802215e:	2800      	cmp	r0, #0
 8022160:	d01e      	beq.n	80221a0 <__multiply+0xfc>
 8022162:	4667      	mov	r7, ip
 8022164:	2500      	movs	r5, #0
 8022166:	9e08      	ldr	r6, [sp, #32]
 8022168:	ce02      	ldmia	r6!, {r1}
 802216a:	683b      	ldr	r3, [r7, #0]
 802216c:	9307      	str	r3, [sp, #28]
 802216e:	b28b      	uxth	r3, r1
 8022170:	4343      	muls	r3, r0
 8022172:	001a      	movs	r2, r3
 8022174:	466b      	mov	r3, sp
 8022176:	0c09      	lsrs	r1, r1, #16
 8022178:	8b9b      	ldrh	r3, [r3, #28]
 802217a:	4341      	muls	r1, r0
 802217c:	18d3      	adds	r3, r2, r3
 802217e:	9a07      	ldr	r2, [sp, #28]
 8022180:	195b      	adds	r3, r3, r5
 8022182:	0c12      	lsrs	r2, r2, #16
 8022184:	1889      	adds	r1, r1, r2
 8022186:	0c1a      	lsrs	r2, r3, #16
 8022188:	188a      	adds	r2, r1, r2
 802218a:	b29b      	uxth	r3, r3
 802218c:	0c15      	lsrs	r5, r2, #16
 802218e:	0412      	lsls	r2, r2, #16
 8022190:	431a      	orrs	r2, r3
 8022192:	9b05      	ldr	r3, [sp, #20]
 8022194:	c704      	stmia	r7!, {r2}
 8022196:	42b3      	cmp	r3, r6
 8022198:	d8e6      	bhi.n	8022168 <__multiply+0xc4>
 802219a:	4663      	mov	r3, ip
 802219c:	9a06      	ldr	r2, [sp, #24]
 802219e:	509d      	str	r5, [r3, r2]
 80221a0:	9b01      	ldr	r3, [sp, #4]
 80221a2:	6818      	ldr	r0, [r3, #0]
 80221a4:	0c00      	lsrs	r0, r0, #16
 80221a6:	d020      	beq.n	80221ea <__multiply+0x146>
 80221a8:	4663      	mov	r3, ip
 80221aa:	0025      	movs	r5, r4
 80221ac:	4661      	mov	r1, ip
 80221ae:	2700      	movs	r7, #0
 80221b0:	681b      	ldr	r3, [r3, #0]
 80221b2:	3514      	adds	r5, #20
 80221b4:	682a      	ldr	r2, [r5, #0]
 80221b6:	680e      	ldr	r6, [r1, #0]
 80221b8:	b292      	uxth	r2, r2
 80221ba:	4342      	muls	r2, r0
 80221bc:	0c36      	lsrs	r6, r6, #16
 80221be:	1992      	adds	r2, r2, r6
 80221c0:	19d2      	adds	r2, r2, r7
 80221c2:	0416      	lsls	r6, r2, #16
 80221c4:	b29b      	uxth	r3, r3
 80221c6:	431e      	orrs	r6, r3
 80221c8:	600e      	str	r6, [r1, #0]
 80221ca:	cd40      	ldmia	r5!, {r6}
 80221cc:	684b      	ldr	r3, [r1, #4]
 80221ce:	0c36      	lsrs	r6, r6, #16
 80221d0:	4346      	muls	r6, r0
 80221d2:	b29b      	uxth	r3, r3
 80221d4:	0c12      	lsrs	r2, r2, #16
 80221d6:	18f3      	adds	r3, r6, r3
 80221d8:	189b      	adds	r3, r3, r2
 80221da:	9a05      	ldr	r2, [sp, #20]
 80221dc:	0c1f      	lsrs	r7, r3, #16
 80221de:	3104      	adds	r1, #4
 80221e0:	42aa      	cmp	r2, r5
 80221e2:	d8e7      	bhi.n	80221b4 <__multiply+0x110>
 80221e4:	4662      	mov	r2, ip
 80221e6:	9906      	ldr	r1, [sp, #24]
 80221e8:	5053      	str	r3, [r2, r1]
 80221ea:	9b01      	ldr	r3, [sp, #4]
 80221ec:	3304      	adds	r3, #4
 80221ee:	9301      	str	r3, [sp, #4]
 80221f0:	2304      	movs	r3, #4
 80221f2:	449c      	add	ip, r3
 80221f4:	e79b      	b.n	802212e <__multiply+0x8a>
 80221f6:	9b03      	ldr	r3, [sp, #12]
 80221f8:	3b01      	subs	r3, #1
 80221fa:	9303      	str	r3, [sp, #12]
 80221fc:	e79b      	b.n	8022136 <__multiply+0x92>
 80221fe:	46c0      	nop			@ (mov r8, r8)
 8022200:	08026479 	.word	0x08026479
 8022204:	080264ea 	.word	0x080264ea

08022208 <__pow5mult>:
 8022208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802220a:	2303      	movs	r3, #3
 802220c:	0015      	movs	r5, r2
 802220e:	0007      	movs	r7, r0
 8022210:	000e      	movs	r6, r1
 8022212:	401a      	ands	r2, r3
 8022214:	421d      	tst	r5, r3
 8022216:	d008      	beq.n	802222a <__pow5mult+0x22>
 8022218:	4925      	ldr	r1, [pc, #148]	@ (80222b0 <__pow5mult+0xa8>)
 802221a:	3a01      	subs	r2, #1
 802221c:	0092      	lsls	r2, r2, #2
 802221e:	5852      	ldr	r2, [r2, r1]
 8022220:	2300      	movs	r3, #0
 8022222:	0031      	movs	r1, r6
 8022224:	f7ff fe46 	bl	8021eb4 <__multadd>
 8022228:	0006      	movs	r6, r0
 802222a:	10ad      	asrs	r5, r5, #2
 802222c:	d03d      	beq.n	80222aa <__pow5mult+0xa2>
 802222e:	69fc      	ldr	r4, [r7, #28]
 8022230:	2c00      	cmp	r4, #0
 8022232:	d10f      	bne.n	8022254 <__pow5mult+0x4c>
 8022234:	2010      	movs	r0, #16
 8022236:	f7ff fd07 	bl	8021c48 <malloc>
 802223a:	1e02      	subs	r2, r0, #0
 802223c:	61f8      	str	r0, [r7, #28]
 802223e:	d105      	bne.n	802224c <__pow5mult+0x44>
 8022240:	21b4      	movs	r1, #180	@ 0xb4
 8022242:	4b1c      	ldr	r3, [pc, #112]	@ (80222b4 <__pow5mult+0xac>)
 8022244:	481c      	ldr	r0, [pc, #112]	@ (80222b8 <__pow5mult+0xb0>)
 8022246:	31ff      	adds	r1, #255	@ 0xff
 8022248:	f000 feac 	bl	8022fa4 <__assert_func>
 802224c:	6044      	str	r4, [r0, #4]
 802224e:	6084      	str	r4, [r0, #8]
 8022250:	6004      	str	r4, [r0, #0]
 8022252:	60c4      	str	r4, [r0, #12]
 8022254:	69fb      	ldr	r3, [r7, #28]
 8022256:	689c      	ldr	r4, [r3, #8]
 8022258:	9301      	str	r3, [sp, #4]
 802225a:	2c00      	cmp	r4, #0
 802225c:	d108      	bne.n	8022270 <__pow5mult+0x68>
 802225e:	0038      	movs	r0, r7
 8022260:	4916      	ldr	r1, [pc, #88]	@ (80222bc <__pow5mult+0xb4>)
 8022262:	f7ff ff07 	bl	8022074 <__i2b>
 8022266:	9b01      	ldr	r3, [sp, #4]
 8022268:	0004      	movs	r4, r0
 802226a:	6098      	str	r0, [r3, #8]
 802226c:	2300      	movs	r3, #0
 802226e:	6003      	str	r3, [r0, #0]
 8022270:	2301      	movs	r3, #1
 8022272:	421d      	tst	r5, r3
 8022274:	d00a      	beq.n	802228c <__pow5mult+0x84>
 8022276:	0031      	movs	r1, r6
 8022278:	0022      	movs	r2, r4
 802227a:	0038      	movs	r0, r7
 802227c:	f7ff ff12 	bl	80220a4 <__multiply>
 8022280:	0031      	movs	r1, r6
 8022282:	9001      	str	r0, [sp, #4]
 8022284:	0038      	movs	r0, r7
 8022286:	f7ff fdf1 	bl	8021e6c <_Bfree>
 802228a:	9e01      	ldr	r6, [sp, #4]
 802228c:	106d      	asrs	r5, r5, #1
 802228e:	d00c      	beq.n	80222aa <__pow5mult+0xa2>
 8022290:	6820      	ldr	r0, [r4, #0]
 8022292:	2800      	cmp	r0, #0
 8022294:	d107      	bne.n	80222a6 <__pow5mult+0x9e>
 8022296:	0022      	movs	r2, r4
 8022298:	0021      	movs	r1, r4
 802229a:	0038      	movs	r0, r7
 802229c:	f7ff ff02 	bl	80220a4 <__multiply>
 80222a0:	2300      	movs	r3, #0
 80222a2:	6020      	str	r0, [r4, #0]
 80222a4:	6003      	str	r3, [r0, #0]
 80222a6:	0004      	movs	r4, r0
 80222a8:	e7e2      	b.n	8022270 <__pow5mult+0x68>
 80222aa:	0030      	movs	r0, r6
 80222ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80222ae:	46c0      	nop			@ (mov r8, r8)
 80222b0:	08026544 	.word	0x08026544
 80222b4:	0802640a 	.word	0x0802640a
 80222b8:	080264ea 	.word	0x080264ea
 80222bc:	00000271 	.word	0x00000271

080222c0 <__lshift>:
 80222c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222c2:	000c      	movs	r4, r1
 80222c4:	0016      	movs	r6, r2
 80222c6:	6923      	ldr	r3, [r4, #16]
 80222c8:	1157      	asrs	r7, r2, #5
 80222ca:	b085      	sub	sp, #20
 80222cc:	18fb      	adds	r3, r7, r3
 80222ce:	9301      	str	r3, [sp, #4]
 80222d0:	3301      	adds	r3, #1
 80222d2:	9300      	str	r3, [sp, #0]
 80222d4:	6849      	ldr	r1, [r1, #4]
 80222d6:	68a3      	ldr	r3, [r4, #8]
 80222d8:	9002      	str	r0, [sp, #8]
 80222da:	9a00      	ldr	r2, [sp, #0]
 80222dc:	4293      	cmp	r3, r2
 80222de:	db10      	blt.n	8022302 <__lshift+0x42>
 80222e0:	9802      	ldr	r0, [sp, #8]
 80222e2:	f7ff fd7f 	bl	8021de4 <_Balloc>
 80222e6:	2300      	movs	r3, #0
 80222e8:	0001      	movs	r1, r0
 80222ea:	0005      	movs	r5, r0
 80222ec:	001a      	movs	r2, r3
 80222ee:	3114      	adds	r1, #20
 80222f0:	4298      	cmp	r0, r3
 80222f2:	d10c      	bne.n	802230e <__lshift+0x4e>
 80222f4:	21ef      	movs	r1, #239	@ 0xef
 80222f6:	002a      	movs	r2, r5
 80222f8:	4b25      	ldr	r3, [pc, #148]	@ (8022390 <__lshift+0xd0>)
 80222fa:	4826      	ldr	r0, [pc, #152]	@ (8022394 <__lshift+0xd4>)
 80222fc:	0049      	lsls	r1, r1, #1
 80222fe:	f000 fe51 	bl	8022fa4 <__assert_func>
 8022302:	3101      	adds	r1, #1
 8022304:	005b      	lsls	r3, r3, #1
 8022306:	e7e8      	b.n	80222da <__lshift+0x1a>
 8022308:	0098      	lsls	r0, r3, #2
 802230a:	500a      	str	r2, [r1, r0]
 802230c:	3301      	adds	r3, #1
 802230e:	42bb      	cmp	r3, r7
 8022310:	dbfa      	blt.n	8022308 <__lshift+0x48>
 8022312:	43fb      	mvns	r3, r7
 8022314:	17db      	asrs	r3, r3, #31
 8022316:	401f      	ands	r7, r3
 8022318:	00bf      	lsls	r7, r7, #2
 802231a:	0023      	movs	r3, r4
 802231c:	201f      	movs	r0, #31
 802231e:	19c9      	adds	r1, r1, r7
 8022320:	0037      	movs	r7, r6
 8022322:	6922      	ldr	r2, [r4, #16]
 8022324:	3314      	adds	r3, #20
 8022326:	0092      	lsls	r2, r2, #2
 8022328:	189a      	adds	r2, r3, r2
 802232a:	4007      	ands	r7, r0
 802232c:	4206      	tst	r6, r0
 802232e:	d029      	beq.n	8022384 <__lshift+0xc4>
 8022330:	3001      	adds	r0, #1
 8022332:	1bc0      	subs	r0, r0, r7
 8022334:	9003      	str	r0, [sp, #12]
 8022336:	468c      	mov	ip, r1
 8022338:	2000      	movs	r0, #0
 802233a:	681e      	ldr	r6, [r3, #0]
 802233c:	40be      	lsls	r6, r7
 802233e:	4306      	orrs	r6, r0
 8022340:	4660      	mov	r0, ip
 8022342:	c040      	stmia	r0!, {r6}
 8022344:	4684      	mov	ip, r0
 8022346:	9e03      	ldr	r6, [sp, #12]
 8022348:	cb01      	ldmia	r3!, {r0}
 802234a:	40f0      	lsrs	r0, r6
 802234c:	429a      	cmp	r2, r3
 802234e:	d8f4      	bhi.n	802233a <__lshift+0x7a>
 8022350:	0026      	movs	r6, r4
 8022352:	3615      	adds	r6, #21
 8022354:	2304      	movs	r3, #4
 8022356:	42b2      	cmp	r2, r6
 8022358:	d304      	bcc.n	8022364 <__lshift+0xa4>
 802235a:	1b13      	subs	r3, r2, r4
 802235c:	3b15      	subs	r3, #21
 802235e:	089b      	lsrs	r3, r3, #2
 8022360:	3301      	adds	r3, #1
 8022362:	009b      	lsls	r3, r3, #2
 8022364:	50c8      	str	r0, [r1, r3]
 8022366:	2800      	cmp	r0, #0
 8022368:	d002      	beq.n	8022370 <__lshift+0xb0>
 802236a:	9b01      	ldr	r3, [sp, #4]
 802236c:	3302      	adds	r3, #2
 802236e:	9300      	str	r3, [sp, #0]
 8022370:	9b00      	ldr	r3, [sp, #0]
 8022372:	9802      	ldr	r0, [sp, #8]
 8022374:	3b01      	subs	r3, #1
 8022376:	0021      	movs	r1, r4
 8022378:	612b      	str	r3, [r5, #16]
 802237a:	f7ff fd77 	bl	8021e6c <_Bfree>
 802237e:	0028      	movs	r0, r5
 8022380:	b005      	add	sp, #20
 8022382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022384:	cb01      	ldmia	r3!, {r0}
 8022386:	c101      	stmia	r1!, {r0}
 8022388:	429a      	cmp	r2, r3
 802238a:	d8fb      	bhi.n	8022384 <__lshift+0xc4>
 802238c:	e7f0      	b.n	8022370 <__lshift+0xb0>
 802238e:	46c0      	nop			@ (mov r8, r8)
 8022390:	08026479 	.word	0x08026479
 8022394:	080264ea 	.word	0x080264ea

08022398 <__mcmp>:
 8022398:	b530      	push	{r4, r5, lr}
 802239a:	690b      	ldr	r3, [r1, #16]
 802239c:	6904      	ldr	r4, [r0, #16]
 802239e:	0002      	movs	r2, r0
 80223a0:	1ae0      	subs	r0, r4, r3
 80223a2:	429c      	cmp	r4, r3
 80223a4:	d10f      	bne.n	80223c6 <__mcmp+0x2e>
 80223a6:	3214      	adds	r2, #20
 80223a8:	009b      	lsls	r3, r3, #2
 80223aa:	3114      	adds	r1, #20
 80223ac:	0014      	movs	r4, r2
 80223ae:	18c9      	adds	r1, r1, r3
 80223b0:	18d2      	adds	r2, r2, r3
 80223b2:	3a04      	subs	r2, #4
 80223b4:	3904      	subs	r1, #4
 80223b6:	6815      	ldr	r5, [r2, #0]
 80223b8:	680b      	ldr	r3, [r1, #0]
 80223ba:	429d      	cmp	r5, r3
 80223bc:	d004      	beq.n	80223c8 <__mcmp+0x30>
 80223be:	2001      	movs	r0, #1
 80223c0:	429d      	cmp	r5, r3
 80223c2:	d200      	bcs.n	80223c6 <__mcmp+0x2e>
 80223c4:	3802      	subs	r0, #2
 80223c6:	bd30      	pop	{r4, r5, pc}
 80223c8:	4294      	cmp	r4, r2
 80223ca:	d3f2      	bcc.n	80223b2 <__mcmp+0x1a>
 80223cc:	e7fb      	b.n	80223c6 <__mcmp+0x2e>
	...

080223d0 <__mdiff>:
 80223d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223d2:	000c      	movs	r4, r1
 80223d4:	b087      	sub	sp, #28
 80223d6:	9000      	str	r0, [sp, #0]
 80223d8:	0011      	movs	r1, r2
 80223da:	0020      	movs	r0, r4
 80223dc:	0017      	movs	r7, r2
 80223de:	f7ff ffdb 	bl	8022398 <__mcmp>
 80223e2:	1e05      	subs	r5, r0, #0
 80223e4:	d110      	bne.n	8022408 <__mdiff+0x38>
 80223e6:	0001      	movs	r1, r0
 80223e8:	9800      	ldr	r0, [sp, #0]
 80223ea:	f7ff fcfb 	bl	8021de4 <_Balloc>
 80223ee:	1e02      	subs	r2, r0, #0
 80223f0:	d104      	bne.n	80223fc <__mdiff+0x2c>
 80223f2:	4b40      	ldr	r3, [pc, #256]	@ (80224f4 <__mdiff+0x124>)
 80223f4:	4840      	ldr	r0, [pc, #256]	@ (80224f8 <__mdiff+0x128>)
 80223f6:	4941      	ldr	r1, [pc, #260]	@ (80224fc <__mdiff+0x12c>)
 80223f8:	f000 fdd4 	bl	8022fa4 <__assert_func>
 80223fc:	2301      	movs	r3, #1
 80223fe:	6145      	str	r5, [r0, #20]
 8022400:	6103      	str	r3, [r0, #16]
 8022402:	0010      	movs	r0, r2
 8022404:	b007      	add	sp, #28
 8022406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022408:	2600      	movs	r6, #0
 802240a:	42b0      	cmp	r0, r6
 802240c:	da03      	bge.n	8022416 <__mdiff+0x46>
 802240e:	0023      	movs	r3, r4
 8022410:	003c      	movs	r4, r7
 8022412:	001f      	movs	r7, r3
 8022414:	3601      	adds	r6, #1
 8022416:	6861      	ldr	r1, [r4, #4]
 8022418:	9800      	ldr	r0, [sp, #0]
 802241a:	f7ff fce3 	bl	8021de4 <_Balloc>
 802241e:	1e02      	subs	r2, r0, #0
 8022420:	d103      	bne.n	802242a <__mdiff+0x5a>
 8022422:	4b34      	ldr	r3, [pc, #208]	@ (80224f4 <__mdiff+0x124>)
 8022424:	4834      	ldr	r0, [pc, #208]	@ (80224f8 <__mdiff+0x128>)
 8022426:	4936      	ldr	r1, [pc, #216]	@ (8022500 <__mdiff+0x130>)
 8022428:	e7e6      	b.n	80223f8 <__mdiff+0x28>
 802242a:	6923      	ldr	r3, [r4, #16]
 802242c:	3414      	adds	r4, #20
 802242e:	9300      	str	r3, [sp, #0]
 8022430:	009b      	lsls	r3, r3, #2
 8022432:	18e3      	adds	r3, r4, r3
 8022434:	0021      	movs	r1, r4
 8022436:	9401      	str	r4, [sp, #4]
 8022438:	003c      	movs	r4, r7
 802243a:	9302      	str	r3, [sp, #8]
 802243c:	693b      	ldr	r3, [r7, #16]
 802243e:	3414      	adds	r4, #20
 8022440:	009b      	lsls	r3, r3, #2
 8022442:	18e3      	adds	r3, r4, r3
 8022444:	9303      	str	r3, [sp, #12]
 8022446:	0003      	movs	r3, r0
 8022448:	60c6      	str	r6, [r0, #12]
 802244a:	468c      	mov	ip, r1
 802244c:	2000      	movs	r0, #0
 802244e:	3314      	adds	r3, #20
 8022450:	9304      	str	r3, [sp, #16]
 8022452:	9305      	str	r3, [sp, #20]
 8022454:	4663      	mov	r3, ip
 8022456:	cb20      	ldmia	r3!, {r5}
 8022458:	b2a9      	uxth	r1, r5
 802245a:	000e      	movs	r6, r1
 802245c:	469c      	mov	ip, r3
 802245e:	cc08      	ldmia	r4!, {r3}
 8022460:	0c2d      	lsrs	r5, r5, #16
 8022462:	b299      	uxth	r1, r3
 8022464:	1a71      	subs	r1, r6, r1
 8022466:	1809      	adds	r1, r1, r0
 8022468:	0c1b      	lsrs	r3, r3, #16
 802246a:	1408      	asrs	r0, r1, #16
 802246c:	1aeb      	subs	r3, r5, r3
 802246e:	181b      	adds	r3, r3, r0
 8022470:	1418      	asrs	r0, r3, #16
 8022472:	b289      	uxth	r1, r1
 8022474:	041b      	lsls	r3, r3, #16
 8022476:	4319      	orrs	r1, r3
 8022478:	9b05      	ldr	r3, [sp, #20]
 802247a:	c302      	stmia	r3!, {r1}
 802247c:	9305      	str	r3, [sp, #20]
 802247e:	9b03      	ldr	r3, [sp, #12]
 8022480:	42a3      	cmp	r3, r4
 8022482:	d8e7      	bhi.n	8022454 <__mdiff+0x84>
 8022484:	0039      	movs	r1, r7
 8022486:	9c03      	ldr	r4, [sp, #12]
 8022488:	3115      	adds	r1, #21
 802248a:	2304      	movs	r3, #4
 802248c:	428c      	cmp	r4, r1
 802248e:	d304      	bcc.n	802249a <__mdiff+0xca>
 8022490:	1be3      	subs	r3, r4, r7
 8022492:	3b15      	subs	r3, #21
 8022494:	089b      	lsrs	r3, r3, #2
 8022496:	3301      	adds	r3, #1
 8022498:	009b      	lsls	r3, r3, #2
 802249a:	9901      	ldr	r1, [sp, #4]
 802249c:	18cd      	adds	r5, r1, r3
 802249e:	9904      	ldr	r1, [sp, #16]
 80224a0:	002e      	movs	r6, r5
 80224a2:	18cb      	adds	r3, r1, r3
 80224a4:	001f      	movs	r7, r3
 80224a6:	9902      	ldr	r1, [sp, #8]
 80224a8:	428e      	cmp	r6, r1
 80224aa:	d311      	bcc.n	80224d0 <__mdiff+0x100>
 80224ac:	9c02      	ldr	r4, [sp, #8]
 80224ae:	1ee9      	subs	r1, r5, #3
 80224b0:	2000      	movs	r0, #0
 80224b2:	428c      	cmp	r4, r1
 80224b4:	d304      	bcc.n	80224c0 <__mdiff+0xf0>
 80224b6:	0021      	movs	r1, r4
 80224b8:	3103      	adds	r1, #3
 80224ba:	1b49      	subs	r1, r1, r5
 80224bc:	0889      	lsrs	r1, r1, #2
 80224be:	0088      	lsls	r0, r1, #2
 80224c0:	181b      	adds	r3, r3, r0
 80224c2:	3b04      	subs	r3, #4
 80224c4:	6819      	ldr	r1, [r3, #0]
 80224c6:	2900      	cmp	r1, #0
 80224c8:	d010      	beq.n	80224ec <__mdiff+0x11c>
 80224ca:	9b00      	ldr	r3, [sp, #0]
 80224cc:	6113      	str	r3, [r2, #16]
 80224ce:	e798      	b.n	8022402 <__mdiff+0x32>
 80224d0:	4684      	mov	ip, r0
 80224d2:	ce02      	ldmia	r6!, {r1}
 80224d4:	b288      	uxth	r0, r1
 80224d6:	4460      	add	r0, ip
 80224d8:	1400      	asrs	r0, r0, #16
 80224da:	0c0c      	lsrs	r4, r1, #16
 80224dc:	1904      	adds	r4, r0, r4
 80224de:	4461      	add	r1, ip
 80224e0:	1420      	asrs	r0, r4, #16
 80224e2:	b289      	uxth	r1, r1
 80224e4:	0424      	lsls	r4, r4, #16
 80224e6:	4321      	orrs	r1, r4
 80224e8:	c702      	stmia	r7!, {r1}
 80224ea:	e7dc      	b.n	80224a6 <__mdiff+0xd6>
 80224ec:	9900      	ldr	r1, [sp, #0]
 80224ee:	3901      	subs	r1, #1
 80224f0:	9100      	str	r1, [sp, #0]
 80224f2:	e7e6      	b.n	80224c2 <__mdiff+0xf2>
 80224f4:	08026479 	.word	0x08026479
 80224f8:	080264ea 	.word	0x080264ea
 80224fc:	00000237 	.word	0x00000237
 8022500:	00000245 	.word	0x00000245

08022504 <__ulp>:
 8022504:	b510      	push	{r4, lr}
 8022506:	2400      	movs	r4, #0
 8022508:	4b0c      	ldr	r3, [pc, #48]	@ (802253c <__ulp+0x38>)
 802250a:	4a0d      	ldr	r2, [pc, #52]	@ (8022540 <__ulp+0x3c>)
 802250c:	400b      	ands	r3, r1
 802250e:	189b      	adds	r3, r3, r2
 8022510:	42a3      	cmp	r3, r4
 8022512:	dc06      	bgt.n	8022522 <__ulp+0x1e>
 8022514:	425b      	negs	r3, r3
 8022516:	151a      	asrs	r2, r3, #20
 8022518:	2a13      	cmp	r2, #19
 802251a:	dc05      	bgt.n	8022528 <__ulp+0x24>
 802251c:	2380      	movs	r3, #128	@ 0x80
 802251e:	031b      	lsls	r3, r3, #12
 8022520:	4113      	asrs	r3, r2
 8022522:	0019      	movs	r1, r3
 8022524:	0020      	movs	r0, r4
 8022526:	bd10      	pop	{r4, pc}
 8022528:	3a14      	subs	r2, #20
 802252a:	2401      	movs	r4, #1
 802252c:	2a1e      	cmp	r2, #30
 802252e:	dc02      	bgt.n	8022536 <__ulp+0x32>
 8022530:	2480      	movs	r4, #128	@ 0x80
 8022532:	0624      	lsls	r4, r4, #24
 8022534:	40d4      	lsrs	r4, r2
 8022536:	2300      	movs	r3, #0
 8022538:	e7f3      	b.n	8022522 <__ulp+0x1e>
 802253a:	46c0      	nop			@ (mov r8, r8)
 802253c:	7ff00000 	.word	0x7ff00000
 8022540:	fcc00000 	.word	0xfcc00000

08022544 <__b2d>:
 8022544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022546:	0006      	movs	r6, r0
 8022548:	6903      	ldr	r3, [r0, #16]
 802254a:	3614      	adds	r6, #20
 802254c:	009b      	lsls	r3, r3, #2
 802254e:	18f3      	adds	r3, r6, r3
 8022550:	1f1d      	subs	r5, r3, #4
 8022552:	682c      	ldr	r4, [r5, #0]
 8022554:	000f      	movs	r7, r1
 8022556:	0020      	movs	r0, r4
 8022558:	9301      	str	r3, [sp, #4]
 802255a:	f7ff fd3b 	bl	8021fd4 <__hi0bits>
 802255e:	2220      	movs	r2, #32
 8022560:	1a12      	subs	r2, r2, r0
 8022562:	603a      	str	r2, [r7, #0]
 8022564:	0003      	movs	r3, r0
 8022566:	4a1c      	ldr	r2, [pc, #112]	@ (80225d8 <__b2d+0x94>)
 8022568:	280a      	cmp	r0, #10
 802256a:	dc15      	bgt.n	8022598 <__b2d+0x54>
 802256c:	210b      	movs	r1, #11
 802256e:	0027      	movs	r7, r4
 8022570:	1a09      	subs	r1, r1, r0
 8022572:	40cf      	lsrs	r7, r1
 8022574:	433a      	orrs	r2, r7
 8022576:	468c      	mov	ip, r1
 8022578:	0011      	movs	r1, r2
 802257a:	2200      	movs	r2, #0
 802257c:	42ae      	cmp	r6, r5
 802257e:	d202      	bcs.n	8022586 <__b2d+0x42>
 8022580:	9a01      	ldr	r2, [sp, #4]
 8022582:	3a08      	subs	r2, #8
 8022584:	6812      	ldr	r2, [r2, #0]
 8022586:	3315      	adds	r3, #21
 8022588:	409c      	lsls	r4, r3
 802258a:	4663      	mov	r3, ip
 802258c:	0027      	movs	r7, r4
 802258e:	40da      	lsrs	r2, r3
 8022590:	4317      	orrs	r7, r2
 8022592:	0038      	movs	r0, r7
 8022594:	b003      	add	sp, #12
 8022596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022598:	2700      	movs	r7, #0
 802259a:	42ae      	cmp	r6, r5
 802259c:	d202      	bcs.n	80225a4 <__b2d+0x60>
 802259e:	9d01      	ldr	r5, [sp, #4]
 80225a0:	3d08      	subs	r5, #8
 80225a2:	682f      	ldr	r7, [r5, #0]
 80225a4:	210b      	movs	r1, #11
 80225a6:	4249      	negs	r1, r1
 80225a8:	468c      	mov	ip, r1
 80225aa:	449c      	add	ip, r3
 80225ac:	2b0b      	cmp	r3, #11
 80225ae:	d010      	beq.n	80225d2 <__b2d+0x8e>
 80225b0:	4661      	mov	r1, ip
 80225b2:	2320      	movs	r3, #32
 80225b4:	408c      	lsls	r4, r1
 80225b6:	1a5b      	subs	r3, r3, r1
 80225b8:	0039      	movs	r1, r7
 80225ba:	40d9      	lsrs	r1, r3
 80225bc:	430c      	orrs	r4, r1
 80225be:	4322      	orrs	r2, r4
 80225c0:	0011      	movs	r1, r2
 80225c2:	2200      	movs	r2, #0
 80225c4:	42b5      	cmp	r5, r6
 80225c6:	d901      	bls.n	80225cc <__b2d+0x88>
 80225c8:	3d04      	subs	r5, #4
 80225ca:	682a      	ldr	r2, [r5, #0]
 80225cc:	4664      	mov	r4, ip
 80225ce:	40a7      	lsls	r7, r4
 80225d0:	e7dd      	b.n	802258e <__b2d+0x4a>
 80225d2:	4322      	orrs	r2, r4
 80225d4:	0011      	movs	r1, r2
 80225d6:	e7dc      	b.n	8022592 <__b2d+0x4e>
 80225d8:	3ff00000 	.word	0x3ff00000

080225dc <__d2b>:
 80225dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80225de:	2101      	movs	r1, #1
 80225e0:	0016      	movs	r6, r2
 80225e2:	001f      	movs	r7, r3
 80225e4:	f7ff fbfe 	bl	8021de4 <_Balloc>
 80225e8:	1e04      	subs	r4, r0, #0
 80225ea:	d105      	bne.n	80225f8 <__d2b+0x1c>
 80225ec:	0022      	movs	r2, r4
 80225ee:	4b25      	ldr	r3, [pc, #148]	@ (8022684 <__d2b+0xa8>)
 80225f0:	4825      	ldr	r0, [pc, #148]	@ (8022688 <__d2b+0xac>)
 80225f2:	4926      	ldr	r1, [pc, #152]	@ (802268c <__d2b+0xb0>)
 80225f4:	f000 fcd6 	bl	8022fa4 <__assert_func>
 80225f8:	033b      	lsls	r3, r7, #12
 80225fa:	007d      	lsls	r5, r7, #1
 80225fc:	0b1b      	lsrs	r3, r3, #12
 80225fe:	0d6d      	lsrs	r5, r5, #21
 8022600:	d002      	beq.n	8022608 <__d2b+0x2c>
 8022602:	2280      	movs	r2, #128	@ 0x80
 8022604:	0352      	lsls	r2, r2, #13
 8022606:	4313      	orrs	r3, r2
 8022608:	9301      	str	r3, [sp, #4]
 802260a:	2e00      	cmp	r6, #0
 802260c:	d025      	beq.n	802265a <__d2b+0x7e>
 802260e:	4668      	mov	r0, sp
 8022610:	9600      	str	r6, [sp, #0]
 8022612:	f7ff fd00 	bl	8022016 <__lo0bits>
 8022616:	9b01      	ldr	r3, [sp, #4]
 8022618:	9900      	ldr	r1, [sp, #0]
 802261a:	2800      	cmp	r0, #0
 802261c:	d01b      	beq.n	8022656 <__d2b+0x7a>
 802261e:	2220      	movs	r2, #32
 8022620:	001e      	movs	r6, r3
 8022622:	1a12      	subs	r2, r2, r0
 8022624:	4096      	lsls	r6, r2
 8022626:	0032      	movs	r2, r6
 8022628:	40c3      	lsrs	r3, r0
 802262a:	430a      	orrs	r2, r1
 802262c:	6162      	str	r2, [r4, #20]
 802262e:	9301      	str	r3, [sp, #4]
 8022630:	9e01      	ldr	r6, [sp, #4]
 8022632:	61a6      	str	r6, [r4, #24]
 8022634:	1e73      	subs	r3, r6, #1
 8022636:	419e      	sbcs	r6, r3
 8022638:	3601      	adds	r6, #1
 802263a:	6126      	str	r6, [r4, #16]
 802263c:	2d00      	cmp	r5, #0
 802263e:	d014      	beq.n	802266a <__d2b+0x8e>
 8022640:	2635      	movs	r6, #53	@ 0x35
 8022642:	4b13      	ldr	r3, [pc, #76]	@ (8022690 <__d2b+0xb4>)
 8022644:	18ed      	adds	r5, r5, r3
 8022646:	9b08      	ldr	r3, [sp, #32]
 8022648:	182d      	adds	r5, r5, r0
 802264a:	601d      	str	r5, [r3, #0]
 802264c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802264e:	1a36      	subs	r6, r6, r0
 8022650:	601e      	str	r6, [r3, #0]
 8022652:	0020      	movs	r0, r4
 8022654:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022656:	6161      	str	r1, [r4, #20]
 8022658:	e7ea      	b.n	8022630 <__d2b+0x54>
 802265a:	a801      	add	r0, sp, #4
 802265c:	f7ff fcdb 	bl	8022016 <__lo0bits>
 8022660:	9b01      	ldr	r3, [sp, #4]
 8022662:	2601      	movs	r6, #1
 8022664:	6163      	str	r3, [r4, #20]
 8022666:	3020      	adds	r0, #32
 8022668:	e7e7      	b.n	802263a <__d2b+0x5e>
 802266a:	4b0a      	ldr	r3, [pc, #40]	@ (8022694 <__d2b+0xb8>)
 802266c:	18c0      	adds	r0, r0, r3
 802266e:	9b08      	ldr	r3, [sp, #32]
 8022670:	6018      	str	r0, [r3, #0]
 8022672:	4b09      	ldr	r3, [pc, #36]	@ (8022698 <__d2b+0xbc>)
 8022674:	18f3      	adds	r3, r6, r3
 8022676:	009b      	lsls	r3, r3, #2
 8022678:	18e3      	adds	r3, r4, r3
 802267a:	6958      	ldr	r0, [r3, #20]
 802267c:	f7ff fcaa 	bl	8021fd4 <__hi0bits>
 8022680:	0176      	lsls	r6, r6, #5
 8022682:	e7e3      	b.n	802264c <__d2b+0x70>
 8022684:	08026479 	.word	0x08026479
 8022688:	080264ea 	.word	0x080264ea
 802268c:	0000030f 	.word	0x0000030f
 8022690:	fffffbcd 	.word	0xfffffbcd
 8022694:	fffffbce 	.word	0xfffffbce
 8022698:	3fffffff 	.word	0x3fffffff

0802269c <__ratio>:
 802269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802269e:	b087      	sub	sp, #28
 80226a0:	000f      	movs	r7, r1
 80226a2:	a904      	add	r1, sp, #16
 80226a4:	0006      	movs	r6, r0
 80226a6:	f7ff ff4d 	bl	8022544 <__b2d>
 80226aa:	9000      	str	r0, [sp, #0]
 80226ac:	9101      	str	r1, [sp, #4]
 80226ae:	9b00      	ldr	r3, [sp, #0]
 80226b0:	9c01      	ldr	r4, [sp, #4]
 80226b2:	0038      	movs	r0, r7
 80226b4:	a905      	add	r1, sp, #20
 80226b6:	9302      	str	r3, [sp, #8]
 80226b8:	9403      	str	r4, [sp, #12]
 80226ba:	f7ff ff43 	bl	8022544 <__b2d>
 80226be:	000d      	movs	r5, r1
 80226c0:	0002      	movs	r2, r0
 80226c2:	000b      	movs	r3, r1
 80226c4:	6930      	ldr	r0, [r6, #16]
 80226c6:	6939      	ldr	r1, [r7, #16]
 80226c8:	9e04      	ldr	r6, [sp, #16]
 80226ca:	1a40      	subs	r0, r0, r1
 80226cc:	9905      	ldr	r1, [sp, #20]
 80226ce:	0140      	lsls	r0, r0, #5
 80226d0:	1a71      	subs	r1, r6, r1
 80226d2:	1841      	adds	r1, r0, r1
 80226d4:	0508      	lsls	r0, r1, #20
 80226d6:	2900      	cmp	r1, #0
 80226d8:	dd08      	ble.n	80226ec <__ratio+0x50>
 80226da:	9901      	ldr	r1, [sp, #4]
 80226dc:	1841      	adds	r1, r0, r1
 80226de:	9103      	str	r1, [sp, #12]
 80226e0:	9802      	ldr	r0, [sp, #8]
 80226e2:	9903      	ldr	r1, [sp, #12]
 80226e4:	f7df fb66 	bl	8001db4 <__aeabi_ddiv>
 80226e8:	b007      	add	sp, #28
 80226ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80226ec:	1a2b      	subs	r3, r5, r0
 80226ee:	e7f7      	b.n	80226e0 <__ratio+0x44>

080226f0 <__copybits>:
 80226f0:	b570      	push	{r4, r5, r6, lr}
 80226f2:	0014      	movs	r4, r2
 80226f4:	0005      	movs	r5, r0
 80226f6:	3901      	subs	r1, #1
 80226f8:	6913      	ldr	r3, [r2, #16]
 80226fa:	1149      	asrs	r1, r1, #5
 80226fc:	3101      	adds	r1, #1
 80226fe:	0089      	lsls	r1, r1, #2
 8022700:	3414      	adds	r4, #20
 8022702:	009b      	lsls	r3, r3, #2
 8022704:	1841      	adds	r1, r0, r1
 8022706:	18e3      	adds	r3, r4, r3
 8022708:	42a3      	cmp	r3, r4
 802270a:	d80d      	bhi.n	8022728 <__copybits+0x38>
 802270c:	0014      	movs	r4, r2
 802270e:	3411      	adds	r4, #17
 8022710:	2500      	movs	r5, #0
 8022712:	429c      	cmp	r4, r3
 8022714:	d803      	bhi.n	802271e <__copybits+0x2e>
 8022716:	1a9b      	subs	r3, r3, r2
 8022718:	3b11      	subs	r3, #17
 802271a:	089b      	lsrs	r3, r3, #2
 802271c:	009d      	lsls	r5, r3, #2
 802271e:	2300      	movs	r3, #0
 8022720:	1940      	adds	r0, r0, r5
 8022722:	4281      	cmp	r1, r0
 8022724:	d803      	bhi.n	802272e <__copybits+0x3e>
 8022726:	bd70      	pop	{r4, r5, r6, pc}
 8022728:	cc40      	ldmia	r4!, {r6}
 802272a:	c540      	stmia	r5!, {r6}
 802272c:	e7ec      	b.n	8022708 <__copybits+0x18>
 802272e:	c008      	stmia	r0!, {r3}
 8022730:	e7f7      	b.n	8022722 <__copybits+0x32>

08022732 <__any_on>:
 8022732:	0002      	movs	r2, r0
 8022734:	6900      	ldr	r0, [r0, #16]
 8022736:	b510      	push	{r4, lr}
 8022738:	3214      	adds	r2, #20
 802273a:	114b      	asrs	r3, r1, #5
 802273c:	4298      	cmp	r0, r3
 802273e:	db13      	blt.n	8022768 <__any_on+0x36>
 8022740:	dd0c      	ble.n	802275c <__any_on+0x2a>
 8022742:	241f      	movs	r4, #31
 8022744:	0008      	movs	r0, r1
 8022746:	4020      	ands	r0, r4
 8022748:	4221      	tst	r1, r4
 802274a:	d007      	beq.n	802275c <__any_on+0x2a>
 802274c:	0099      	lsls	r1, r3, #2
 802274e:	588c      	ldr	r4, [r1, r2]
 8022750:	0021      	movs	r1, r4
 8022752:	40c1      	lsrs	r1, r0
 8022754:	4081      	lsls	r1, r0
 8022756:	2001      	movs	r0, #1
 8022758:	428c      	cmp	r4, r1
 802275a:	d104      	bne.n	8022766 <__any_on+0x34>
 802275c:	009b      	lsls	r3, r3, #2
 802275e:	18d3      	adds	r3, r2, r3
 8022760:	4293      	cmp	r3, r2
 8022762:	d803      	bhi.n	802276c <__any_on+0x3a>
 8022764:	2000      	movs	r0, #0
 8022766:	bd10      	pop	{r4, pc}
 8022768:	0003      	movs	r3, r0
 802276a:	e7f7      	b.n	802275c <__any_on+0x2a>
 802276c:	3b04      	subs	r3, #4
 802276e:	6819      	ldr	r1, [r3, #0]
 8022770:	2900      	cmp	r1, #0
 8022772:	d0f5      	beq.n	8022760 <__any_on+0x2e>
 8022774:	2001      	movs	r0, #1
 8022776:	e7f6      	b.n	8022766 <__any_on+0x34>

08022778 <__ascii_wctomb>:
 8022778:	0003      	movs	r3, r0
 802277a:	1e08      	subs	r0, r1, #0
 802277c:	d005      	beq.n	802278a <__ascii_wctomb+0x12>
 802277e:	2aff      	cmp	r2, #255	@ 0xff
 8022780:	d904      	bls.n	802278c <__ascii_wctomb+0x14>
 8022782:	228a      	movs	r2, #138	@ 0x8a
 8022784:	2001      	movs	r0, #1
 8022786:	601a      	str	r2, [r3, #0]
 8022788:	4240      	negs	r0, r0
 802278a:	4770      	bx	lr
 802278c:	2001      	movs	r0, #1
 802278e:	700a      	strb	r2, [r1, #0]
 8022790:	e7fb      	b.n	802278a <__ascii_wctomb+0x12>
	...

08022794 <__ssputs_r>:
 8022794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022796:	688e      	ldr	r6, [r1, #8]
 8022798:	b085      	sub	sp, #20
 802279a:	001f      	movs	r7, r3
 802279c:	000c      	movs	r4, r1
 802279e:	680b      	ldr	r3, [r1, #0]
 80227a0:	9002      	str	r0, [sp, #8]
 80227a2:	9203      	str	r2, [sp, #12]
 80227a4:	42be      	cmp	r6, r7
 80227a6:	d830      	bhi.n	802280a <__ssputs_r+0x76>
 80227a8:	210c      	movs	r1, #12
 80227aa:	5e62      	ldrsh	r2, [r4, r1]
 80227ac:	2190      	movs	r1, #144	@ 0x90
 80227ae:	00c9      	lsls	r1, r1, #3
 80227b0:	420a      	tst	r2, r1
 80227b2:	d028      	beq.n	8022806 <__ssputs_r+0x72>
 80227b4:	2003      	movs	r0, #3
 80227b6:	6921      	ldr	r1, [r4, #16]
 80227b8:	1a5b      	subs	r3, r3, r1
 80227ba:	9301      	str	r3, [sp, #4]
 80227bc:	6963      	ldr	r3, [r4, #20]
 80227be:	4343      	muls	r3, r0
 80227c0:	9801      	ldr	r0, [sp, #4]
 80227c2:	0fdd      	lsrs	r5, r3, #31
 80227c4:	18ed      	adds	r5, r5, r3
 80227c6:	1c7b      	adds	r3, r7, #1
 80227c8:	181b      	adds	r3, r3, r0
 80227ca:	106d      	asrs	r5, r5, #1
 80227cc:	42ab      	cmp	r3, r5
 80227ce:	d900      	bls.n	80227d2 <__ssputs_r+0x3e>
 80227d0:	001d      	movs	r5, r3
 80227d2:	0552      	lsls	r2, r2, #21
 80227d4:	d528      	bpl.n	8022828 <__ssputs_r+0x94>
 80227d6:	0029      	movs	r1, r5
 80227d8:	9802      	ldr	r0, [sp, #8]
 80227da:	f7ff fa61 	bl	8021ca0 <_malloc_r>
 80227de:	1e06      	subs	r6, r0, #0
 80227e0:	d02c      	beq.n	802283c <__ssputs_r+0xa8>
 80227e2:	9a01      	ldr	r2, [sp, #4]
 80227e4:	6921      	ldr	r1, [r4, #16]
 80227e6:	f7fd fff9 	bl	80207dc <memcpy>
 80227ea:	89a2      	ldrh	r2, [r4, #12]
 80227ec:	4b18      	ldr	r3, [pc, #96]	@ (8022850 <__ssputs_r+0xbc>)
 80227ee:	401a      	ands	r2, r3
 80227f0:	2380      	movs	r3, #128	@ 0x80
 80227f2:	4313      	orrs	r3, r2
 80227f4:	81a3      	strh	r3, [r4, #12]
 80227f6:	9b01      	ldr	r3, [sp, #4]
 80227f8:	6126      	str	r6, [r4, #16]
 80227fa:	18f6      	adds	r6, r6, r3
 80227fc:	6026      	str	r6, [r4, #0]
 80227fe:	003e      	movs	r6, r7
 8022800:	6165      	str	r5, [r4, #20]
 8022802:	1aed      	subs	r5, r5, r3
 8022804:	60a5      	str	r5, [r4, #8]
 8022806:	42be      	cmp	r6, r7
 8022808:	d900      	bls.n	802280c <__ssputs_r+0x78>
 802280a:	003e      	movs	r6, r7
 802280c:	0032      	movs	r2, r6
 802280e:	9903      	ldr	r1, [sp, #12]
 8022810:	6820      	ldr	r0, [r4, #0]
 8022812:	f000 fb7e 	bl	8022f12 <memmove>
 8022816:	2000      	movs	r0, #0
 8022818:	68a3      	ldr	r3, [r4, #8]
 802281a:	1b9b      	subs	r3, r3, r6
 802281c:	60a3      	str	r3, [r4, #8]
 802281e:	6823      	ldr	r3, [r4, #0]
 8022820:	199b      	adds	r3, r3, r6
 8022822:	6023      	str	r3, [r4, #0]
 8022824:	b005      	add	sp, #20
 8022826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022828:	002a      	movs	r2, r5
 802282a:	9802      	ldr	r0, [sp, #8]
 802282c:	f000 fc05 	bl	802303a <_realloc_r>
 8022830:	1e06      	subs	r6, r0, #0
 8022832:	d1e0      	bne.n	80227f6 <__ssputs_r+0x62>
 8022834:	6921      	ldr	r1, [r4, #16]
 8022836:	9802      	ldr	r0, [sp, #8]
 8022838:	f7fe fe62 	bl	8021500 <_free_r>
 802283c:	230c      	movs	r3, #12
 802283e:	2001      	movs	r0, #1
 8022840:	9a02      	ldr	r2, [sp, #8]
 8022842:	4240      	negs	r0, r0
 8022844:	6013      	str	r3, [r2, #0]
 8022846:	89a2      	ldrh	r2, [r4, #12]
 8022848:	3334      	adds	r3, #52	@ 0x34
 802284a:	4313      	orrs	r3, r2
 802284c:	81a3      	strh	r3, [r4, #12]
 802284e:	e7e9      	b.n	8022824 <__ssputs_r+0x90>
 8022850:	fffffb7f 	.word	0xfffffb7f

08022854 <_svfiprintf_r>:
 8022854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022856:	b0a1      	sub	sp, #132	@ 0x84
 8022858:	9003      	str	r0, [sp, #12]
 802285a:	001d      	movs	r5, r3
 802285c:	898b      	ldrh	r3, [r1, #12]
 802285e:	000f      	movs	r7, r1
 8022860:	0016      	movs	r6, r2
 8022862:	061b      	lsls	r3, r3, #24
 8022864:	d511      	bpl.n	802288a <_svfiprintf_r+0x36>
 8022866:	690b      	ldr	r3, [r1, #16]
 8022868:	2b00      	cmp	r3, #0
 802286a:	d10e      	bne.n	802288a <_svfiprintf_r+0x36>
 802286c:	2140      	movs	r1, #64	@ 0x40
 802286e:	f7ff fa17 	bl	8021ca0 <_malloc_r>
 8022872:	6038      	str	r0, [r7, #0]
 8022874:	6138      	str	r0, [r7, #16]
 8022876:	2800      	cmp	r0, #0
 8022878:	d105      	bne.n	8022886 <_svfiprintf_r+0x32>
 802287a:	230c      	movs	r3, #12
 802287c:	9a03      	ldr	r2, [sp, #12]
 802287e:	6013      	str	r3, [r2, #0]
 8022880:	2001      	movs	r0, #1
 8022882:	4240      	negs	r0, r0
 8022884:	e0cf      	b.n	8022a26 <_svfiprintf_r+0x1d2>
 8022886:	2340      	movs	r3, #64	@ 0x40
 8022888:	617b      	str	r3, [r7, #20]
 802288a:	2300      	movs	r3, #0
 802288c:	ac08      	add	r4, sp, #32
 802288e:	6163      	str	r3, [r4, #20]
 8022890:	3320      	adds	r3, #32
 8022892:	7663      	strb	r3, [r4, #25]
 8022894:	3310      	adds	r3, #16
 8022896:	76a3      	strb	r3, [r4, #26]
 8022898:	9507      	str	r5, [sp, #28]
 802289a:	0035      	movs	r5, r6
 802289c:	782b      	ldrb	r3, [r5, #0]
 802289e:	2b00      	cmp	r3, #0
 80228a0:	d001      	beq.n	80228a6 <_svfiprintf_r+0x52>
 80228a2:	2b25      	cmp	r3, #37	@ 0x25
 80228a4:	d148      	bne.n	8022938 <_svfiprintf_r+0xe4>
 80228a6:	1bab      	subs	r3, r5, r6
 80228a8:	9305      	str	r3, [sp, #20]
 80228aa:	42b5      	cmp	r5, r6
 80228ac:	d00b      	beq.n	80228c6 <_svfiprintf_r+0x72>
 80228ae:	0032      	movs	r2, r6
 80228b0:	0039      	movs	r1, r7
 80228b2:	9803      	ldr	r0, [sp, #12]
 80228b4:	f7ff ff6e 	bl	8022794 <__ssputs_r>
 80228b8:	3001      	adds	r0, #1
 80228ba:	d100      	bne.n	80228be <_svfiprintf_r+0x6a>
 80228bc:	e0ae      	b.n	8022a1c <_svfiprintf_r+0x1c8>
 80228be:	6963      	ldr	r3, [r4, #20]
 80228c0:	9a05      	ldr	r2, [sp, #20]
 80228c2:	189b      	adds	r3, r3, r2
 80228c4:	6163      	str	r3, [r4, #20]
 80228c6:	782b      	ldrb	r3, [r5, #0]
 80228c8:	2b00      	cmp	r3, #0
 80228ca:	d100      	bne.n	80228ce <_svfiprintf_r+0x7a>
 80228cc:	e0a6      	b.n	8022a1c <_svfiprintf_r+0x1c8>
 80228ce:	2201      	movs	r2, #1
 80228d0:	2300      	movs	r3, #0
 80228d2:	4252      	negs	r2, r2
 80228d4:	6062      	str	r2, [r4, #4]
 80228d6:	a904      	add	r1, sp, #16
 80228d8:	3254      	adds	r2, #84	@ 0x54
 80228da:	1852      	adds	r2, r2, r1
 80228dc:	1c6e      	adds	r6, r5, #1
 80228de:	6023      	str	r3, [r4, #0]
 80228e0:	60e3      	str	r3, [r4, #12]
 80228e2:	60a3      	str	r3, [r4, #8]
 80228e4:	7013      	strb	r3, [r2, #0]
 80228e6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80228e8:	4b54      	ldr	r3, [pc, #336]	@ (8022a3c <_svfiprintf_r+0x1e8>)
 80228ea:	2205      	movs	r2, #5
 80228ec:	0018      	movs	r0, r3
 80228ee:	7831      	ldrb	r1, [r6, #0]
 80228f0:	9305      	str	r3, [sp, #20]
 80228f2:	f7fd ff68 	bl	80207c6 <memchr>
 80228f6:	1c75      	adds	r5, r6, #1
 80228f8:	2800      	cmp	r0, #0
 80228fa:	d11f      	bne.n	802293c <_svfiprintf_r+0xe8>
 80228fc:	6822      	ldr	r2, [r4, #0]
 80228fe:	06d3      	lsls	r3, r2, #27
 8022900:	d504      	bpl.n	802290c <_svfiprintf_r+0xb8>
 8022902:	2353      	movs	r3, #83	@ 0x53
 8022904:	a904      	add	r1, sp, #16
 8022906:	185b      	adds	r3, r3, r1
 8022908:	2120      	movs	r1, #32
 802290a:	7019      	strb	r1, [r3, #0]
 802290c:	0713      	lsls	r3, r2, #28
 802290e:	d504      	bpl.n	802291a <_svfiprintf_r+0xc6>
 8022910:	2353      	movs	r3, #83	@ 0x53
 8022912:	a904      	add	r1, sp, #16
 8022914:	185b      	adds	r3, r3, r1
 8022916:	212b      	movs	r1, #43	@ 0x2b
 8022918:	7019      	strb	r1, [r3, #0]
 802291a:	7833      	ldrb	r3, [r6, #0]
 802291c:	2b2a      	cmp	r3, #42	@ 0x2a
 802291e:	d016      	beq.n	802294e <_svfiprintf_r+0xfa>
 8022920:	0035      	movs	r5, r6
 8022922:	2100      	movs	r1, #0
 8022924:	200a      	movs	r0, #10
 8022926:	68e3      	ldr	r3, [r4, #12]
 8022928:	782a      	ldrb	r2, [r5, #0]
 802292a:	1c6e      	adds	r6, r5, #1
 802292c:	3a30      	subs	r2, #48	@ 0x30
 802292e:	2a09      	cmp	r2, #9
 8022930:	d950      	bls.n	80229d4 <_svfiprintf_r+0x180>
 8022932:	2900      	cmp	r1, #0
 8022934:	d111      	bne.n	802295a <_svfiprintf_r+0x106>
 8022936:	e017      	b.n	8022968 <_svfiprintf_r+0x114>
 8022938:	3501      	adds	r5, #1
 802293a:	e7af      	b.n	802289c <_svfiprintf_r+0x48>
 802293c:	9b05      	ldr	r3, [sp, #20]
 802293e:	6822      	ldr	r2, [r4, #0]
 8022940:	1ac0      	subs	r0, r0, r3
 8022942:	2301      	movs	r3, #1
 8022944:	4083      	lsls	r3, r0
 8022946:	4313      	orrs	r3, r2
 8022948:	002e      	movs	r6, r5
 802294a:	6023      	str	r3, [r4, #0]
 802294c:	e7cc      	b.n	80228e8 <_svfiprintf_r+0x94>
 802294e:	9b07      	ldr	r3, [sp, #28]
 8022950:	1d19      	adds	r1, r3, #4
 8022952:	681b      	ldr	r3, [r3, #0]
 8022954:	9107      	str	r1, [sp, #28]
 8022956:	2b00      	cmp	r3, #0
 8022958:	db01      	blt.n	802295e <_svfiprintf_r+0x10a>
 802295a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802295c:	e004      	b.n	8022968 <_svfiprintf_r+0x114>
 802295e:	425b      	negs	r3, r3
 8022960:	60e3      	str	r3, [r4, #12]
 8022962:	2302      	movs	r3, #2
 8022964:	4313      	orrs	r3, r2
 8022966:	6023      	str	r3, [r4, #0]
 8022968:	782b      	ldrb	r3, [r5, #0]
 802296a:	2b2e      	cmp	r3, #46	@ 0x2e
 802296c:	d10c      	bne.n	8022988 <_svfiprintf_r+0x134>
 802296e:	786b      	ldrb	r3, [r5, #1]
 8022970:	2b2a      	cmp	r3, #42	@ 0x2a
 8022972:	d134      	bne.n	80229de <_svfiprintf_r+0x18a>
 8022974:	9b07      	ldr	r3, [sp, #28]
 8022976:	3502      	adds	r5, #2
 8022978:	1d1a      	adds	r2, r3, #4
 802297a:	681b      	ldr	r3, [r3, #0]
 802297c:	9207      	str	r2, [sp, #28]
 802297e:	2b00      	cmp	r3, #0
 8022980:	da01      	bge.n	8022986 <_svfiprintf_r+0x132>
 8022982:	2301      	movs	r3, #1
 8022984:	425b      	negs	r3, r3
 8022986:	9309      	str	r3, [sp, #36]	@ 0x24
 8022988:	4e2d      	ldr	r6, [pc, #180]	@ (8022a40 <_svfiprintf_r+0x1ec>)
 802298a:	2203      	movs	r2, #3
 802298c:	0030      	movs	r0, r6
 802298e:	7829      	ldrb	r1, [r5, #0]
 8022990:	f7fd ff19 	bl	80207c6 <memchr>
 8022994:	2800      	cmp	r0, #0
 8022996:	d006      	beq.n	80229a6 <_svfiprintf_r+0x152>
 8022998:	2340      	movs	r3, #64	@ 0x40
 802299a:	1b80      	subs	r0, r0, r6
 802299c:	4083      	lsls	r3, r0
 802299e:	6822      	ldr	r2, [r4, #0]
 80229a0:	3501      	adds	r5, #1
 80229a2:	4313      	orrs	r3, r2
 80229a4:	6023      	str	r3, [r4, #0]
 80229a6:	7829      	ldrb	r1, [r5, #0]
 80229a8:	2206      	movs	r2, #6
 80229aa:	4826      	ldr	r0, [pc, #152]	@ (8022a44 <_svfiprintf_r+0x1f0>)
 80229ac:	1c6e      	adds	r6, r5, #1
 80229ae:	7621      	strb	r1, [r4, #24]
 80229b0:	f7fd ff09 	bl	80207c6 <memchr>
 80229b4:	2800      	cmp	r0, #0
 80229b6:	d038      	beq.n	8022a2a <_svfiprintf_r+0x1d6>
 80229b8:	4b23      	ldr	r3, [pc, #140]	@ (8022a48 <_svfiprintf_r+0x1f4>)
 80229ba:	2b00      	cmp	r3, #0
 80229bc:	d122      	bne.n	8022a04 <_svfiprintf_r+0x1b0>
 80229be:	2207      	movs	r2, #7
 80229c0:	9b07      	ldr	r3, [sp, #28]
 80229c2:	3307      	adds	r3, #7
 80229c4:	4393      	bics	r3, r2
 80229c6:	3308      	adds	r3, #8
 80229c8:	9307      	str	r3, [sp, #28]
 80229ca:	6963      	ldr	r3, [r4, #20]
 80229cc:	9a04      	ldr	r2, [sp, #16]
 80229ce:	189b      	adds	r3, r3, r2
 80229d0:	6163      	str	r3, [r4, #20]
 80229d2:	e762      	b.n	802289a <_svfiprintf_r+0x46>
 80229d4:	4343      	muls	r3, r0
 80229d6:	0035      	movs	r5, r6
 80229d8:	2101      	movs	r1, #1
 80229da:	189b      	adds	r3, r3, r2
 80229dc:	e7a4      	b.n	8022928 <_svfiprintf_r+0xd4>
 80229de:	2300      	movs	r3, #0
 80229e0:	200a      	movs	r0, #10
 80229e2:	0019      	movs	r1, r3
 80229e4:	3501      	adds	r5, #1
 80229e6:	6063      	str	r3, [r4, #4]
 80229e8:	782a      	ldrb	r2, [r5, #0]
 80229ea:	1c6e      	adds	r6, r5, #1
 80229ec:	3a30      	subs	r2, #48	@ 0x30
 80229ee:	2a09      	cmp	r2, #9
 80229f0:	d903      	bls.n	80229fa <_svfiprintf_r+0x1a6>
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	d0c8      	beq.n	8022988 <_svfiprintf_r+0x134>
 80229f6:	9109      	str	r1, [sp, #36]	@ 0x24
 80229f8:	e7c6      	b.n	8022988 <_svfiprintf_r+0x134>
 80229fa:	4341      	muls	r1, r0
 80229fc:	0035      	movs	r5, r6
 80229fe:	2301      	movs	r3, #1
 8022a00:	1889      	adds	r1, r1, r2
 8022a02:	e7f1      	b.n	80229e8 <_svfiprintf_r+0x194>
 8022a04:	aa07      	add	r2, sp, #28
 8022a06:	9200      	str	r2, [sp, #0]
 8022a08:	0021      	movs	r1, r4
 8022a0a:	003a      	movs	r2, r7
 8022a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8022a4c <_svfiprintf_r+0x1f8>)
 8022a0e:	9803      	ldr	r0, [sp, #12]
 8022a10:	f7fc ffd4 	bl	801f9bc <_printf_float>
 8022a14:	9004      	str	r0, [sp, #16]
 8022a16:	9b04      	ldr	r3, [sp, #16]
 8022a18:	3301      	adds	r3, #1
 8022a1a:	d1d6      	bne.n	80229ca <_svfiprintf_r+0x176>
 8022a1c:	89bb      	ldrh	r3, [r7, #12]
 8022a1e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022a20:	065b      	lsls	r3, r3, #25
 8022a22:	d500      	bpl.n	8022a26 <_svfiprintf_r+0x1d2>
 8022a24:	e72c      	b.n	8022880 <_svfiprintf_r+0x2c>
 8022a26:	b021      	add	sp, #132	@ 0x84
 8022a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a2a:	aa07      	add	r2, sp, #28
 8022a2c:	9200      	str	r2, [sp, #0]
 8022a2e:	0021      	movs	r1, r4
 8022a30:	003a      	movs	r2, r7
 8022a32:	4b06      	ldr	r3, [pc, #24]	@ (8022a4c <_svfiprintf_r+0x1f8>)
 8022a34:	9803      	ldr	r0, [sp, #12]
 8022a36:	f7fd fa6f 	bl	801ff18 <_printf_i>
 8022a3a:	e7eb      	b.n	8022a14 <_svfiprintf_r+0x1c0>
 8022a3c:	08026640 	.word	0x08026640
 8022a40:	08026646 	.word	0x08026646
 8022a44:	0802664a 	.word	0x0802664a
 8022a48:	0801f9bd 	.word	0x0801f9bd
 8022a4c:	08022795 	.word	0x08022795

08022a50 <__sfputc_r>:
 8022a50:	6893      	ldr	r3, [r2, #8]
 8022a52:	b510      	push	{r4, lr}
 8022a54:	3b01      	subs	r3, #1
 8022a56:	6093      	str	r3, [r2, #8]
 8022a58:	2b00      	cmp	r3, #0
 8022a5a:	da04      	bge.n	8022a66 <__sfputc_r+0x16>
 8022a5c:	6994      	ldr	r4, [r2, #24]
 8022a5e:	42a3      	cmp	r3, r4
 8022a60:	db07      	blt.n	8022a72 <__sfputc_r+0x22>
 8022a62:	290a      	cmp	r1, #10
 8022a64:	d005      	beq.n	8022a72 <__sfputc_r+0x22>
 8022a66:	6813      	ldr	r3, [r2, #0]
 8022a68:	1c58      	adds	r0, r3, #1
 8022a6a:	6010      	str	r0, [r2, #0]
 8022a6c:	7019      	strb	r1, [r3, #0]
 8022a6e:	0008      	movs	r0, r1
 8022a70:	bd10      	pop	{r4, pc}
 8022a72:	f7fd fd37 	bl	80204e4 <__swbuf_r>
 8022a76:	0001      	movs	r1, r0
 8022a78:	e7f9      	b.n	8022a6e <__sfputc_r+0x1e>

08022a7a <__sfputs_r>:
 8022a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a7c:	0006      	movs	r6, r0
 8022a7e:	000f      	movs	r7, r1
 8022a80:	0014      	movs	r4, r2
 8022a82:	18d5      	adds	r5, r2, r3
 8022a84:	42ac      	cmp	r4, r5
 8022a86:	d101      	bne.n	8022a8c <__sfputs_r+0x12>
 8022a88:	2000      	movs	r0, #0
 8022a8a:	e007      	b.n	8022a9c <__sfputs_r+0x22>
 8022a8c:	7821      	ldrb	r1, [r4, #0]
 8022a8e:	003a      	movs	r2, r7
 8022a90:	0030      	movs	r0, r6
 8022a92:	f7ff ffdd 	bl	8022a50 <__sfputc_r>
 8022a96:	3401      	adds	r4, #1
 8022a98:	1c43      	adds	r3, r0, #1
 8022a9a:	d1f3      	bne.n	8022a84 <__sfputs_r+0xa>
 8022a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022aa0 <_vfiprintf_r>:
 8022aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022aa2:	b0a1      	sub	sp, #132	@ 0x84
 8022aa4:	000f      	movs	r7, r1
 8022aa6:	0015      	movs	r5, r2
 8022aa8:	001e      	movs	r6, r3
 8022aaa:	9003      	str	r0, [sp, #12]
 8022aac:	2800      	cmp	r0, #0
 8022aae:	d004      	beq.n	8022aba <_vfiprintf_r+0x1a>
 8022ab0:	6a03      	ldr	r3, [r0, #32]
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	d101      	bne.n	8022aba <_vfiprintf_r+0x1a>
 8022ab6:	f7fd fbcd 	bl	8020254 <__sinit>
 8022aba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022abc:	07db      	lsls	r3, r3, #31
 8022abe:	d405      	bmi.n	8022acc <_vfiprintf_r+0x2c>
 8022ac0:	89bb      	ldrh	r3, [r7, #12]
 8022ac2:	059b      	lsls	r3, r3, #22
 8022ac4:	d402      	bmi.n	8022acc <_vfiprintf_r+0x2c>
 8022ac6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022ac8:	f7fd fe7b 	bl	80207c2 <__retarget_lock_acquire_recursive>
 8022acc:	89bb      	ldrh	r3, [r7, #12]
 8022ace:	071b      	lsls	r3, r3, #28
 8022ad0:	d502      	bpl.n	8022ad8 <_vfiprintf_r+0x38>
 8022ad2:	693b      	ldr	r3, [r7, #16]
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	d113      	bne.n	8022b00 <_vfiprintf_r+0x60>
 8022ad8:	0039      	movs	r1, r7
 8022ada:	9803      	ldr	r0, [sp, #12]
 8022adc:	f7fd fd44 	bl	8020568 <__swsetup_r>
 8022ae0:	2800      	cmp	r0, #0
 8022ae2:	d00d      	beq.n	8022b00 <_vfiprintf_r+0x60>
 8022ae4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022ae6:	07db      	lsls	r3, r3, #31
 8022ae8:	d503      	bpl.n	8022af2 <_vfiprintf_r+0x52>
 8022aea:	2001      	movs	r0, #1
 8022aec:	4240      	negs	r0, r0
 8022aee:	b021      	add	sp, #132	@ 0x84
 8022af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022af2:	89bb      	ldrh	r3, [r7, #12]
 8022af4:	059b      	lsls	r3, r3, #22
 8022af6:	d4f8      	bmi.n	8022aea <_vfiprintf_r+0x4a>
 8022af8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022afa:	f7fd fe63 	bl	80207c4 <__retarget_lock_release_recursive>
 8022afe:	e7f4      	b.n	8022aea <_vfiprintf_r+0x4a>
 8022b00:	2300      	movs	r3, #0
 8022b02:	ac08      	add	r4, sp, #32
 8022b04:	6163      	str	r3, [r4, #20]
 8022b06:	3320      	adds	r3, #32
 8022b08:	7663      	strb	r3, [r4, #25]
 8022b0a:	3310      	adds	r3, #16
 8022b0c:	76a3      	strb	r3, [r4, #26]
 8022b0e:	9607      	str	r6, [sp, #28]
 8022b10:	002e      	movs	r6, r5
 8022b12:	7833      	ldrb	r3, [r6, #0]
 8022b14:	2b00      	cmp	r3, #0
 8022b16:	d001      	beq.n	8022b1c <_vfiprintf_r+0x7c>
 8022b18:	2b25      	cmp	r3, #37	@ 0x25
 8022b1a:	d148      	bne.n	8022bae <_vfiprintf_r+0x10e>
 8022b1c:	1b73      	subs	r3, r6, r5
 8022b1e:	9305      	str	r3, [sp, #20]
 8022b20:	42ae      	cmp	r6, r5
 8022b22:	d00b      	beq.n	8022b3c <_vfiprintf_r+0x9c>
 8022b24:	002a      	movs	r2, r5
 8022b26:	0039      	movs	r1, r7
 8022b28:	9803      	ldr	r0, [sp, #12]
 8022b2a:	f7ff ffa6 	bl	8022a7a <__sfputs_r>
 8022b2e:	3001      	adds	r0, #1
 8022b30:	d100      	bne.n	8022b34 <_vfiprintf_r+0x94>
 8022b32:	e0ae      	b.n	8022c92 <_vfiprintf_r+0x1f2>
 8022b34:	6963      	ldr	r3, [r4, #20]
 8022b36:	9a05      	ldr	r2, [sp, #20]
 8022b38:	189b      	adds	r3, r3, r2
 8022b3a:	6163      	str	r3, [r4, #20]
 8022b3c:	7833      	ldrb	r3, [r6, #0]
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	d100      	bne.n	8022b44 <_vfiprintf_r+0xa4>
 8022b42:	e0a6      	b.n	8022c92 <_vfiprintf_r+0x1f2>
 8022b44:	2201      	movs	r2, #1
 8022b46:	2300      	movs	r3, #0
 8022b48:	4252      	negs	r2, r2
 8022b4a:	6062      	str	r2, [r4, #4]
 8022b4c:	a904      	add	r1, sp, #16
 8022b4e:	3254      	adds	r2, #84	@ 0x54
 8022b50:	1852      	adds	r2, r2, r1
 8022b52:	1c75      	adds	r5, r6, #1
 8022b54:	6023      	str	r3, [r4, #0]
 8022b56:	60e3      	str	r3, [r4, #12]
 8022b58:	60a3      	str	r3, [r4, #8]
 8022b5a:	7013      	strb	r3, [r2, #0]
 8022b5c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022b5e:	4b59      	ldr	r3, [pc, #356]	@ (8022cc4 <_vfiprintf_r+0x224>)
 8022b60:	2205      	movs	r2, #5
 8022b62:	0018      	movs	r0, r3
 8022b64:	7829      	ldrb	r1, [r5, #0]
 8022b66:	9305      	str	r3, [sp, #20]
 8022b68:	f7fd fe2d 	bl	80207c6 <memchr>
 8022b6c:	1c6e      	adds	r6, r5, #1
 8022b6e:	2800      	cmp	r0, #0
 8022b70:	d11f      	bne.n	8022bb2 <_vfiprintf_r+0x112>
 8022b72:	6822      	ldr	r2, [r4, #0]
 8022b74:	06d3      	lsls	r3, r2, #27
 8022b76:	d504      	bpl.n	8022b82 <_vfiprintf_r+0xe2>
 8022b78:	2353      	movs	r3, #83	@ 0x53
 8022b7a:	a904      	add	r1, sp, #16
 8022b7c:	185b      	adds	r3, r3, r1
 8022b7e:	2120      	movs	r1, #32
 8022b80:	7019      	strb	r1, [r3, #0]
 8022b82:	0713      	lsls	r3, r2, #28
 8022b84:	d504      	bpl.n	8022b90 <_vfiprintf_r+0xf0>
 8022b86:	2353      	movs	r3, #83	@ 0x53
 8022b88:	a904      	add	r1, sp, #16
 8022b8a:	185b      	adds	r3, r3, r1
 8022b8c:	212b      	movs	r1, #43	@ 0x2b
 8022b8e:	7019      	strb	r1, [r3, #0]
 8022b90:	782b      	ldrb	r3, [r5, #0]
 8022b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8022b94:	d016      	beq.n	8022bc4 <_vfiprintf_r+0x124>
 8022b96:	002e      	movs	r6, r5
 8022b98:	2100      	movs	r1, #0
 8022b9a:	200a      	movs	r0, #10
 8022b9c:	68e3      	ldr	r3, [r4, #12]
 8022b9e:	7832      	ldrb	r2, [r6, #0]
 8022ba0:	1c75      	adds	r5, r6, #1
 8022ba2:	3a30      	subs	r2, #48	@ 0x30
 8022ba4:	2a09      	cmp	r2, #9
 8022ba6:	d950      	bls.n	8022c4a <_vfiprintf_r+0x1aa>
 8022ba8:	2900      	cmp	r1, #0
 8022baa:	d111      	bne.n	8022bd0 <_vfiprintf_r+0x130>
 8022bac:	e017      	b.n	8022bde <_vfiprintf_r+0x13e>
 8022bae:	3601      	adds	r6, #1
 8022bb0:	e7af      	b.n	8022b12 <_vfiprintf_r+0x72>
 8022bb2:	9b05      	ldr	r3, [sp, #20]
 8022bb4:	6822      	ldr	r2, [r4, #0]
 8022bb6:	1ac0      	subs	r0, r0, r3
 8022bb8:	2301      	movs	r3, #1
 8022bba:	4083      	lsls	r3, r0
 8022bbc:	4313      	orrs	r3, r2
 8022bbe:	0035      	movs	r5, r6
 8022bc0:	6023      	str	r3, [r4, #0]
 8022bc2:	e7cc      	b.n	8022b5e <_vfiprintf_r+0xbe>
 8022bc4:	9b07      	ldr	r3, [sp, #28]
 8022bc6:	1d19      	adds	r1, r3, #4
 8022bc8:	681b      	ldr	r3, [r3, #0]
 8022bca:	9107      	str	r1, [sp, #28]
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	db01      	blt.n	8022bd4 <_vfiprintf_r+0x134>
 8022bd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022bd2:	e004      	b.n	8022bde <_vfiprintf_r+0x13e>
 8022bd4:	425b      	negs	r3, r3
 8022bd6:	60e3      	str	r3, [r4, #12]
 8022bd8:	2302      	movs	r3, #2
 8022bda:	4313      	orrs	r3, r2
 8022bdc:	6023      	str	r3, [r4, #0]
 8022bde:	7833      	ldrb	r3, [r6, #0]
 8022be0:	2b2e      	cmp	r3, #46	@ 0x2e
 8022be2:	d10c      	bne.n	8022bfe <_vfiprintf_r+0x15e>
 8022be4:	7873      	ldrb	r3, [r6, #1]
 8022be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8022be8:	d134      	bne.n	8022c54 <_vfiprintf_r+0x1b4>
 8022bea:	9b07      	ldr	r3, [sp, #28]
 8022bec:	3602      	adds	r6, #2
 8022bee:	1d1a      	adds	r2, r3, #4
 8022bf0:	681b      	ldr	r3, [r3, #0]
 8022bf2:	9207      	str	r2, [sp, #28]
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	da01      	bge.n	8022bfc <_vfiprintf_r+0x15c>
 8022bf8:	2301      	movs	r3, #1
 8022bfa:	425b      	negs	r3, r3
 8022bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8022bfe:	4d32      	ldr	r5, [pc, #200]	@ (8022cc8 <_vfiprintf_r+0x228>)
 8022c00:	2203      	movs	r2, #3
 8022c02:	0028      	movs	r0, r5
 8022c04:	7831      	ldrb	r1, [r6, #0]
 8022c06:	f7fd fdde 	bl	80207c6 <memchr>
 8022c0a:	2800      	cmp	r0, #0
 8022c0c:	d006      	beq.n	8022c1c <_vfiprintf_r+0x17c>
 8022c0e:	2340      	movs	r3, #64	@ 0x40
 8022c10:	1b40      	subs	r0, r0, r5
 8022c12:	4083      	lsls	r3, r0
 8022c14:	6822      	ldr	r2, [r4, #0]
 8022c16:	3601      	adds	r6, #1
 8022c18:	4313      	orrs	r3, r2
 8022c1a:	6023      	str	r3, [r4, #0]
 8022c1c:	7831      	ldrb	r1, [r6, #0]
 8022c1e:	2206      	movs	r2, #6
 8022c20:	482a      	ldr	r0, [pc, #168]	@ (8022ccc <_vfiprintf_r+0x22c>)
 8022c22:	1c75      	adds	r5, r6, #1
 8022c24:	7621      	strb	r1, [r4, #24]
 8022c26:	f7fd fdce 	bl	80207c6 <memchr>
 8022c2a:	2800      	cmp	r0, #0
 8022c2c:	d040      	beq.n	8022cb0 <_vfiprintf_r+0x210>
 8022c2e:	4b28      	ldr	r3, [pc, #160]	@ (8022cd0 <_vfiprintf_r+0x230>)
 8022c30:	2b00      	cmp	r3, #0
 8022c32:	d122      	bne.n	8022c7a <_vfiprintf_r+0x1da>
 8022c34:	2207      	movs	r2, #7
 8022c36:	9b07      	ldr	r3, [sp, #28]
 8022c38:	3307      	adds	r3, #7
 8022c3a:	4393      	bics	r3, r2
 8022c3c:	3308      	adds	r3, #8
 8022c3e:	9307      	str	r3, [sp, #28]
 8022c40:	6963      	ldr	r3, [r4, #20]
 8022c42:	9a04      	ldr	r2, [sp, #16]
 8022c44:	189b      	adds	r3, r3, r2
 8022c46:	6163      	str	r3, [r4, #20]
 8022c48:	e762      	b.n	8022b10 <_vfiprintf_r+0x70>
 8022c4a:	4343      	muls	r3, r0
 8022c4c:	002e      	movs	r6, r5
 8022c4e:	2101      	movs	r1, #1
 8022c50:	189b      	adds	r3, r3, r2
 8022c52:	e7a4      	b.n	8022b9e <_vfiprintf_r+0xfe>
 8022c54:	2300      	movs	r3, #0
 8022c56:	200a      	movs	r0, #10
 8022c58:	0019      	movs	r1, r3
 8022c5a:	3601      	adds	r6, #1
 8022c5c:	6063      	str	r3, [r4, #4]
 8022c5e:	7832      	ldrb	r2, [r6, #0]
 8022c60:	1c75      	adds	r5, r6, #1
 8022c62:	3a30      	subs	r2, #48	@ 0x30
 8022c64:	2a09      	cmp	r2, #9
 8022c66:	d903      	bls.n	8022c70 <_vfiprintf_r+0x1d0>
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	d0c8      	beq.n	8022bfe <_vfiprintf_r+0x15e>
 8022c6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8022c6e:	e7c6      	b.n	8022bfe <_vfiprintf_r+0x15e>
 8022c70:	4341      	muls	r1, r0
 8022c72:	002e      	movs	r6, r5
 8022c74:	2301      	movs	r3, #1
 8022c76:	1889      	adds	r1, r1, r2
 8022c78:	e7f1      	b.n	8022c5e <_vfiprintf_r+0x1be>
 8022c7a:	aa07      	add	r2, sp, #28
 8022c7c:	9200      	str	r2, [sp, #0]
 8022c7e:	0021      	movs	r1, r4
 8022c80:	003a      	movs	r2, r7
 8022c82:	4b14      	ldr	r3, [pc, #80]	@ (8022cd4 <_vfiprintf_r+0x234>)
 8022c84:	9803      	ldr	r0, [sp, #12]
 8022c86:	f7fc fe99 	bl	801f9bc <_printf_float>
 8022c8a:	9004      	str	r0, [sp, #16]
 8022c8c:	9b04      	ldr	r3, [sp, #16]
 8022c8e:	3301      	adds	r3, #1
 8022c90:	d1d6      	bne.n	8022c40 <_vfiprintf_r+0x1a0>
 8022c92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022c94:	07db      	lsls	r3, r3, #31
 8022c96:	d405      	bmi.n	8022ca4 <_vfiprintf_r+0x204>
 8022c98:	89bb      	ldrh	r3, [r7, #12]
 8022c9a:	059b      	lsls	r3, r3, #22
 8022c9c:	d402      	bmi.n	8022ca4 <_vfiprintf_r+0x204>
 8022c9e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022ca0:	f7fd fd90 	bl	80207c4 <__retarget_lock_release_recursive>
 8022ca4:	89bb      	ldrh	r3, [r7, #12]
 8022ca6:	065b      	lsls	r3, r3, #25
 8022ca8:	d500      	bpl.n	8022cac <_vfiprintf_r+0x20c>
 8022caa:	e71e      	b.n	8022aea <_vfiprintf_r+0x4a>
 8022cac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022cae:	e71e      	b.n	8022aee <_vfiprintf_r+0x4e>
 8022cb0:	aa07      	add	r2, sp, #28
 8022cb2:	9200      	str	r2, [sp, #0]
 8022cb4:	0021      	movs	r1, r4
 8022cb6:	003a      	movs	r2, r7
 8022cb8:	4b06      	ldr	r3, [pc, #24]	@ (8022cd4 <_vfiprintf_r+0x234>)
 8022cba:	9803      	ldr	r0, [sp, #12]
 8022cbc:	f7fd f92c 	bl	801ff18 <_printf_i>
 8022cc0:	e7e3      	b.n	8022c8a <_vfiprintf_r+0x1ea>
 8022cc2:	46c0      	nop			@ (mov r8, r8)
 8022cc4:	08026640 	.word	0x08026640
 8022cc8:	08026646 	.word	0x08026646
 8022ccc:	0802664a 	.word	0x0802664a
 8022cd0:	0801f9bd 	.word	0x0801f9bd
 8022cd4:	08022a7b 	.word	0x08022a7b

08022cd8 <__sflush_r>:
 8022cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022cda:	220c      	movs	r2, #12
 8022cdc:	5e8b      	ldrsh	r3, [r1, r2]
 8022cde:	0005      	movs	r5, r0
 8022ce0:	000c      	movs	r4, r1
 8022ce2:	071a      	lsls	r2, r3, #28
 8022ce4:	d456      	bmi.n	8022d94 <__sflush_r+0xbc>
 8022ce6:	684a      	ldr	r2, [r1, #4]
 8022ce8:	2a00      	cmp	r2, #0
 8022cea:	dc02      	bgt.n	8022cf2 <__sflush_r+0x1a>
 8022cec:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8022cee:	2a00      	cmp	r2, #0
 8022cf0:	dd4e      	ble.n	8022d90 <__sflush_r+0xb8>
 8022cf2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022cf4:	2f00      	cmp	r7, #0
 8022cf6:	d04b      	beq.n	8022d90 <__sflush_r+0xb8>
 8022cf8:	2200      	movs	r2, #0
 8022cfa:	2080      	movs	r0, #128	@ 0x80
 8022cfc:	682e      	ldr	r6, [r5, #0]
 8022cfe:	602a      	str	r2, [r5, #0]
 8022d00:	001a      	movs	r2, r3
 8022d02:	0140      	lsls	r0, r0, #5
 8022d04:	6a21      	ldr	r1, [r4, #32]
 8022d06:	4002      	ands	r2, r0
 8022d08:	4203      	tst	r3, r0
 8022d0a:	d033      	beq.n	8022d74 <__sflush_r+0x9c>
 8022d0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022d0e:	89a3      	ldrh	r3, [r4, #12]
 8022d10:	075b      	lsls	r3, r3, #29
 8022d12:	d506      	bpl.n	8022d22 <__sflush_r+0x4a>
 8022d14:	6863      	ldr	r3, [r4, #4]
 8022d16:	1ad2      	subs	r2, r2, r3
 8022d18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022d1a:	2b00      	cmp	r3, #0
 8022d1c:	d001      	beq.n	8022d22 <__sflush_r+0x4a>
 8022d1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022d20:	1ad2      	subs	r2, r2, r3
 8022d22:	2300      	movs	r3, #0
 8022d24:	0028      	movs	r0, r5
 8022d26:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022d28:	6a21      	ldr	r1, [r4, #32]
 8022d2a:	47b8      	blx	r7
 8022d2c:	89a2      	ldrh	r2, [r4, #12]
 8022d2e:	1c43      	adds	r3, r0, #1
 8022d30:	d106      	bne.n	8022d40 <__sflush_r+0x68>
 8022d32:	6829      	ldr	r1, [r5, #0]
 8022d34:	291d      	cmp	r1, #29
 8022d36:	d846      	bhi.n	8022dc6 <__sflush_r+0xee>
 8022d38:	4b29      	ldr	r3, [pc, #164]	@ (8022de0 <__sflush_r+0x108>)
 8022d3a:	410b      	asrs	r3, r1
 8022d3c:	07db      	lsls	r3, r3, #31
 8022d3e:	d442      	bmi.n	8022dc6 <__sflush_r+0xee>
 8022d40:	2300      	movs	r3, #0
 8022d42:	6063      	str	r3, [r4, #4]
 8022d44:	6923      	ldr	r3, [r4, #16]
 8022d46:	6023      	str	r3, [r4, #0]
 8022d48:	04d2      	lsls	r2, r2, #19
 8022d4a:	d505      	bpl.n	8022d58 <__sflush_r+0x80>
 8022d4c:	1c43      	adds	r3, r0, #1
 8022d4e:	d102      	bne.n	8022d56 <__sflush_r+0x7e>
 8022d50:	682b      	ldr	r3, [r5, #0]
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	d100      	bne.n	8022d58 <__sflush_r+0x80>
 8022d56:	6560      	str	r0, [r4, #84]	@ 0x54
 8022d58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022d5a:	602e      	str	r6, [r5, #0]
 8022d5c:	2900      	cmp	r1, #0
 8022d5e:	d017      	beq.n	8022d90 <__sflush_r+0xb8>
 8022d60:	0023      	movs	r3, r4
 8022d62:	3344      	adds	r3, #68	@ 0x44
 8022d64:	4299      	cmp	r1, r3
 8022d66:	d002      	beq.n	8022d6e <__sflush_r+0x96>
 8022d68:	0028      	movs	r0, r5
 8022d6a:	f7fe fbc9 	bl	8021500 <_free_r>
 8022d6e:	2300      	movs	r3, #0
 8022d70:	6363      	str	r3, [r4, #52]	@ 0x34
 8022d72:	e00d      	b.n	8022d90 <__sflush_r+0xb8>
 8022d74:	2301      	movs	r3, #1
 8022d76:	0028      	movs	r0, r5
 8022d78:	47b8      	blx	r7
 8022d7a:	0002      	movs	r2, r0
 8022d7c:	1c43      	adds	r3, r0, #1
 8022d7e:	d1c6      	bne.n	8022d0e <__sflush_r+0x36>
 8022d80:	682b      	ldr	r3, [r5, #0]
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	d0c3      	beq.n	8022d0e <__sflush_r+0x36>
 8022d86:	2b1d      	cmp	r3, #29
 8022d88:	d001      	beq.n	8022d8e <__sflush_r+0xb6>
 8022d8a:	2b16      	cmp	r3, #22
 8022d8c:	d11a      	bne.n	8022dc4 <__sflush_r+0xec>
 8022d8e:	602e      	str	r6, [r5, #0]
 8022d90:	2000      	movs	r0, #0
 8022d92:	e01e      	b.n	8022dd2 <__sflush_r+0xfa>
 8022d94:	690e      	ldr	r6, [r1, #16]
 8022d96:	2e00      	cmp	r6, #0
 8022d98:	d0fa      	beq.n	8022d90 <__sflush_r+0xb8>
 8022d9a:	680f      	ldr	r7, [r1, #0]
 8022d9c:	600e      	str	r6, [r1, #0]
 8022d9e:	1bba      	subs	r2, r7, r6
 8022da0:	9201      	str	r2, [sp, #4]
 8022da2:	2200      	movs	r2, #0
 8022da4:	079b      	lsls	r3, r3, #30
 8022da6:	d100      	bne.n	8022daa <__sflush_r+0xd2>
 8022da8:	694a      	ldr	r2, [r1, #20]
 8022daa:	60a2      	str	r2, [r4, #8]
 8022dac:	9b01      	ldr	r3, [sp, #4]
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	ddee      	ble.n	8022d90 <__sflush_r+0xb8>
 8022db2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8022db4:	0032      	movs	r2, r6
 8022db6:	001f      	movs	r7, r3
 8022db8:	0028      	movs	r0, r5
 8022dba:	9b01      	ldr	r3, [sp, #4]
 8022dbc:	6a21      	ldr	r1, [r4, #32]
 8022dbe:	47b8      	blx	r7
 8022dc0:	2800      	cmp	r0, #0
 8022dc2:	dc07      	bgt.n	8022dd4 <__sflush_r+0xfc>
 8022dc4:	89a2      	ldrh	r2, [r4, #12]
 8022dc6:	2340      	movs	r3, #64	@ 0x40
 8022dc8:	2001      	movs	r0, #1
 8022dca:	4313      	orrs	r3, r2
 8022dcc:	b21b      	sxth	r3, r3
 8022dce:	81a3      	strh	r3, [r4, #12]
 8022dd0:	4240      	negs	r0, r0
 8022dd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022dd4:	9b01      	ldr	r3, [sp, #4]
 8022dd6:	1836      	adds	r6, r6, r0
 8022dd8:	1a1b      	subs	r3, r3, r0
 8022dda:	9301      	str	r3, [sp, #4]
 8022ddc:	e7e6      	b.n	8022dac <__sflush_r+0xd4>
 8022dde:	46c0      	nop			@ (mov r8, r8)
 8022de0:	dfbffffe 	.word	0xdfbffffe

08022de4 <_fflush_r>:
 8022de4:	690b      	ldr	r3, [r1, #16]
 8022de6:	b570      	push	{r4, r5, r6, lr}
 8022de8:	0005      	movs	r5, r0
 8022dea:	000c      	movs	r4, r1
 8022dec:	2b00      	cmp	r3, #0
 8022dee:	d102      	bne.n	8022df6 <_fflush_r+0x12>
 8022df0:	2500      	movs	r5, #0
 8022df2:	0028      	movs	r0, r5
 8022df4:	bd70      	pop	{r4, r5, r6, pc}
 8022df6:	2800      	cmp	r0, #0
 8022df8:	d004      	beq.n	8022e04 <_fflush_r+0x20>
 8022dfa:	6a03      	ldr	r3, [r0, #32]
 8022dfc:	2b00      	cmp	r3, #0
 8022dfe:	d101      	bne.n	8022e04 <_fflush_r+0x20>
 8022e00:	f7fd fa28 	bl	8020254 <__sinit>
 8022e04:	220c      	movs	r2, #12
 8022e06:	5ea3      	ldrsh	r3, [r4, r2]
 8022e08:	2b00      	cmp	r3, #0
 8022e0a:	d0f1      	beq.n	8022df0 <_fflush_r+0xc>
 8022e0c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022e0e:	07d2      	lsls	r2, r2, #31
 8022e10:	d404      	bmi.n	8022e1c <_fflush_r+0x38>
 8022e12:	059b      	lsls	r3, r3, #22
 8022e14:	d402      	bmi.n	8022e1c <_fflush_r+0x38>
 8022e16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022e18:	f7fd fcd3 	bl	80207c2 <__retarget_lock_acquire_recursive>
 8022e1c:	0028      	movs	r0, r5
 8022e1e:	0021      	movs	r1, r4
 8022e20:	f7ff ff5a 	bl	8022cd8 <__sflush_r>
 8022e24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022e26:	0005      	movs	r5, r0
 8022e28:	07db      	lsls	r3, r3, #31
 8022e2a:	d4e2      	bmi.n	8022df2 <_fflush_r+0xe>
 8022e2c:	89a3      	ldrh	r3, [r4, #12]
 8022e2e:	059b      	lsls	r3, r3, #22
 8022e30:	d4df      	bmi.n	8022df2 <_fflush_r+0xe>
 8022e32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022e34:	f7fd fcc6 	bl	80207c4 <__retarget_lock_release_recursive>
 8022e38:	e7db      	b.n	8022df2 <_fflush_r+0xe>
	...

08022e3c <__swhatbuf_r>:
 8022e3c:	b570      	push	{r4, r5, r6, lr}
 8022e3e:	000e      	movs	r6, r1
 8022e40:	001d      	movs	r5, r3
 8022e42:	230e      	movs	r3, #14
 8022e44:	5ec9      	ldrsh	r1, [r1, r3]
 8022e46:	0014      	movs	r4, r2
 8022e48:	b096      	sub	sp, #88	@ 0x58
 8022e4a:	2900      	cmp	r1, #0
 8022e4c:	da0c      	bge.n	8022e68 <__swhatbuf_r+0x2c>
 8022e4e:	89b2      	ldrh	r2, [r6, #12]
 8022e50:	2380      	movs	r3, #128	@ 0x80
 8022e52:	0011      	movs	r1, r2
 8022e54:	4019      	ands	r1, r3
 8022e56:	421a      	tst	r2, r3
 8022e58:	d114      	bne.n	8022e84 <__swhatbuf_r+0x48>
 8022e5a:	2380      	movs	r3, #128	@ 0x80
 8022e5c:	00db      	lsls	r3, r3, #3
 8022e5e:	2000      	movs	r0, #0
 8022e60:	6029      	str	r1, [r5, #0]
 8022e62:	6023      	str	r3, [r4, #0]
 8022e64:	b016      	add	sp, #88	@ 0x58
 8022e66:	bd70      	pop	{r4, r5, r6, pc}
 8022e68:	466a      	mov	r2, sp
 8022e6a:	f000 f865 	bl	8022f38 <_fstat_r>
 8022e6e:	2800      	cmp	r0, #0
 8022e70:	dbed      	blt.n	8022e4e <__swhatbuf_r+0x12>
 8022e72:	23f0      	movs	r3, #240	@ 0xf0
 8022e74:	9901      	ldr	r1, [sp, #4]
 8022e76:	021b      	lsls	r3, r3, #8
 8022e78:	4019      	ands	r1, r3
 8022e7a:	4b04      	ldr	r3, [pc, #16]	@ (8022e8c <__swhatbuf_r+0x50>)
 8022e7c:	18c9      	adds	r1, r1, r3
 8022e7e:	424b      	negs	r3, r1
 8022e80:	4159      	adcs	r1, r3
 8022e82:	e7ea      	b.n	8022e5a <__swhatbuf_r+0x1e>
 8022e84:	2100      	movs	r1, #0
 8022e86:	2340      	movs	r3, #64	@ 0x40
 8022e88:	e7e9      	b.n	8022e5e <__swhatbuf_r+0x22>
 8022e8a:	46c0      	nop			@ (mov r8, r8)
 8022e8c:	ffffe000 	.word	0xffffe000

08022e90 <__smakebuf_r>:
 8022e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e92:	2602      	movs	r6, #2
 8022e94:	898b      	ldrh	r3, [r1, #12]
 8022e96:	0005      	movs	r5, r0
 8022e98:	000c      	movs	r4, r1
 8022e9a:	b085      	sub	sp, #20
 8022e9c:	4233      	tst	r3, r6
 8022e9e:	d007      	beq.n	8022eb0 <__smakebuf_r+0x20>
 8022ea0:	0023      	movs	r3, r4
 8022ea2:	3347      	adds	r3, #71	@ 0x47
 8022ea4:	6023      	str	r3, [r4, #0]
 8022ea6:	6123      	str	r3, [r4, #16]
 8022ea8:	2301      	movs	r3, #1
 8022eaa:	6163      	str	r3, [r4, #20]
 8022eac:	b005      	add	sp, #20
 8022eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022eb0:	ab03      	add	r3, sp, #12
 8022eb2:	aa02      	add	r2, sp, #8
 8022eb4:	f7ff ffc2 	bl	8022e3c <__swhatbuf_r>
 8022eb8:	9f02      	ldr	r7, [sp, #8]
 8022eba:	9001      	str	r0, [sp, #4]
 8022ebc:	0039      	movs	r1, r7
 8022ebe:	0028      	movs	r0, r5
 8022ec0:	f7fe feee 	bl	8021ca0 <_malloc_r>
 8022ec4:	2800      	cmp	r0, #0
 8022ec6:	d108      	bne.n	8022eda <__smakebuf_r+0x4a>
 8022ec8:	220c      	movs	r2, #12
 8022eca:	5ea3      	ldrsh	r3, [r4, r2]
 8022ecc:	059a      	lsls	r2, r3, #22
 8022ece:	d4ed      	bmi.n	8022eac <__smakebuf_r+0x1c>
 8022ed0:	2203      	movs	r2, #3
 8022ed2:	4393      	bics	r3, r2
 8022ed4:	431e      	orrs	r6, r3
 8022ed6:	81a6      	strh	r6, [r4, #12]
 8022ed8:	e7e2      	b.n	8022ea0 <__smakebuf_r+0x10>
 8022eda:	2380      	movs	r3, #128	@ 0x80
 8022edc:	89a2      	ldrh	r2, [r4, #12]
 8022ede:	6020      	str	r0, [r4, #0]
 8022ee0:	4313      	orrs	r3, r2
 8022ee2:	81a3      	strh	r3, [r4, #12]
 8022ee4:	9b03      	ldr	r3, [sp, #12]
 8022ee6:	6120      	str	r0, [r4, #16]
 8022ee8:	6167      	str	r7, [r4, #20]
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	d00c      	beq.n	8022f08 <__smakebuf_r+0x78>
 8022eee:	0028      	movs	r0, r5
 8022ef0:	230e      	movs	r3, #14
 8022ef2:	5ee1      	ldrsh	r1, [r4, r3]
 8022ef4:	f000 f832 	bl	8022f5c <_isatty_r>
 8022ef8:	2800      	cmp	r0, #0
 8022efa:	d005      	beq.n	8022f08 <__smakebuf_r+0x78>
 8022efc:	2303      	movs	r3, #3
 8022efe:	89a2      	ldrh	r2, [r4, #12]
 8022f00:	439a      	bics	r2, r3
 8022f02:	3b02      	subs	r3, #2
 8022f04:	4313      	orrs	r3, r2
 8022f06:	81a3      	strh	r3, [r4, #12]
 8022f08:	89a3      	ldrh	r3, [r4, #12]
 8022f0a:	9a01      	ldr	r2, [sp, #4]
 8022f0c:	4313      	orrs	r3, r2
 8022f0e:	81a3      	strh	r3, [r4, #12]
 8022f10:	e7cc      	b.n	8022eac <__smakebuf_r+0x1c>

08022f12 <memmove>:
 8022f12:	b510      	push	{r4, lr}
 8022f14:	4288      	cmp	r0, r1
 8022f16:	d806      	bhi.n	8022f26 <memmove+0x14>
 8022f18:	2300      	movs	r3, #0
 8022f1a:	429a      	cmp	r2, r3
 8022f1c:	d008      	beq.n	8022f30 <memmove+0x1e>
 8022f1e:	5ccc      	ldrb	r4, [r1, r3]
 8022f20:	54c4      	strb	r4, [r0, r3]
 8022f22:	3301      	adds	r3, #1
 8022f24:	e7f9      	b.n	8022f1a <memmove+0x8>
 8022f26:	188b      	adds	r3, r1, r2
 8022f28:	4298      	cmp	r0, r3
 8022f2a:	d2f5      	bcs.n	8022f18 <memmove+0x6>
 8022f2c:	3a01      	subs	r2, #1
 8022f2e:	d200      	bcs.n	8022f32 <memmove+0x20>
 8022f30:	bd10      	pop	{r4, pc}
 8022f32:	5c8b      	ldrb	r3, [r1, r2]
 8022f34:	5483      	strb	r3, [r0, r2]
 8022f36:	e7f9      	b.n	8022f2c <memmove+0x1a>

08022f38 <_fstat_r>:
 8022f38:	2300      	movs	r3, #0
 8022f3a:	b570      	push	{r4, r5, r6, lr}
 8022f3c:	4d06      	ldr	r5, [pc, #24]	@ (8022f58 <_fstat_r+0x20>)
 8022f3e:	0004      	movs	r4, r0
 8022f40:	0008      	movs	r0, r1
 8022f42:	0011      	movs	r1, r2
 8022f44:	602b      	str	r3, [r5, #0]
 8022f46:	f7eb f879 	bl	800e03c <_fstat>
 8022f4a:	1c43      	adds	r3, r0, #1
 8022f4c:	d103      	bne.n	8022f56 <_fstat_r+0x1e>
 8022f4e:	682b      	ldr	r3, [r5, #0]
 8022f50:	2b00      	cmp	r3, #0
 8022f52:	d000      	beq.n	8022f56 <_fstat_r+0x1e>
 8022f54:	6023      	str	r3, [r4, #0]
 8022f56:	bd70      	pop	{r4, r5, r6, pc}
 8022f58:	200033c8 	.word	0x200033c8

08022f5c <_isatty_r>:
 8022f5c:	2300      	movs	r3, #0
 8022f5e:	b570      	push	{r4, r5, r6, lr}
 8022f60:	4d06      	ldr	r5, [pc, #24]	@ (8022f7c <_isatty_r+0x20>)
 8022f62:	0004      	movs	r4, r0
 8022f64:	0008      	movs	r0, r1
 8022f66:	602b      	str	r3, [r5, #0]
 8022f68:	f7eb f876 	bl	800e058 <_isatty>
 8022f6c:	1c43      	adds	r3, r0, #1
 8022f6e:	d103      	bne.n	8022f78 <_isatty_r+0x1c>
 8022f70:	682b      	ldr	r3, [r5, #0]
 8022f72:	2b00      	cmp	r3, #0
 8022f74:	d000      	beq.n	8022f78 <_isatty_r+0x1c>
 8022f76:	6023      	str	r3, [r4, #0]
 8022f78:	bd70      	pop	{r4, r5, r6, pc}
 8022f7a:	46c0      	nop			@ (mov r8, r8)
 8022f7c:	200033c8 	.word	0x200033c8

08022f80 <_sbrk_r>:
 8022f80:	2300      	movs	r3, #0
 8022f82:	b570      	push	{r4, r5, r6, lr}
 8022f84:	4d06      	ldr	r5, [pc, #24]	@ (8022fa0 <_sbrk_r+0x20>)
 8022f86:	0004      	movs	r4, r0
 8022f88:	0008      	movs	r0, r1
 8022f8a:	602b      	str	r3, [r5, #0]
 8022f8c:	f7eb f878 	bl	800e080 <_sbrk>
 8022f90:	1c43      	adds	r3, r0, #1
 8022f92:	d103      	bne.n	8022f9c <_sbrk_r+0x1c>
 8022f94:	682b      	ldr	r3, [r5, #0]
 8022f96:	2b00      	cmp	r3, #0
 8022f98:	d000      	beq.n	8022f9c <_sbrk_r+0x1c>
 8022f9a:	6023      	str	r3, [r4, #0]
 8022f9c:	bd70      	pop	{r4, r5, r6, pc}
 8022f9e:	46c0      	nop			@ (mov r8, r8)
 8022fa0:	200033c8 	.word	0x200033c8

08022fa4 <__assert_func>:
 8022fa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022fa6:	0014      	movs	r4, r2
 8022fa8:	001a      	movs	r2, r3
 8022faa:	4b09      	ldr	r3, [pc, #36]	@ (8022fd0 <__assert_func+0x2c>)
 8022fac:	0005      	movs	r5, r0
 8022fae:	681b      	ldr	r3, [r3, #0]
 8022fb0:	000e      	movs	r6, r1
 8022fb2:	68d8      	ldr	r0, [r3, #12]
 8022fb4:	4b07      	ldr	r3, [pc, #28]	@ (8022fd4 <__assert_func+0x30>)
 8022fb6:	2c00      	cmp	r4, #0
 8022fb8:	d101      	bne.n	8022fbe <__assert_func+0x1a>
 8022fba:	4b07      	ldr	r3, [pc, #28]	@ (8022fd8 <__assert_func+0x34>)
 8022fbc:	001c      	movs	r4, r3
 8022fbe:	4907      	ldr	r1, [pc, #28]	@ (8022fdc <__assert_func+0x38>)
 8022fc0:	9301      	str	r3, [sp, #4]
 8022fc2:	9402      	str	r4, [sp, #8]
 8022fc4:	002b      	movs	r3, r5
 8022fc6:	9600      	str	r6, [sp, #0]
 8022fc8:	f000 f866 	bl	8023098 <fiprintf>
 8022fcc:	f000 f874 	bl	80230b8 <abort>
 8022fd0:	200003d0 	.word	0x200003d0
 8022fd4:	08026651 	.word	0x08026651
 8022fd8:	0802668c 	.word	0x0802668c
 8022fdc:	0802665e 	.word	0x0802665e

08022fe0 <_calloc_r>:
 8022fe0:	b570      	push	{r4, r5, r6, lr}
 8022fe2:	0c0b      	lsrs	r3, r1, #16
 8022fe4:	0c15      	lsrs	r5, r2, #16
 8022fe6:	2b00      	cmp	r3, #0
 8022fe8:	d11e      	bne.n	8023028 <_calloc_r+0x48>
 8022fea:	2d00      	cmp	r5, #0
 8022fec:	d10c      	bne.n	8023008 <_calloc_r+0x28>
 8022fee:	b289      	uxth	r1, r1
 8022ff0:	b294      	uxth	r4, r2
 8022ff2:	434c      	muls	r4, r1
 8022ff4:	0021      	movs	r1, r4
 8022ff6:	f7fe fe53 	bl	8021ca0 <_malloc_r>
 8022ffa:	1e05      	subs	r5, r0, #0
 8022ffc:	d01a      	beq.n	8023034 <_calloc_r+0x54>
 8022ffe:	0022      	movs	r2, r4
 8023000:	2100      	movs	r1, #0
 8023002:	f7fd fb0f 	bl	8020624 <memset>
 8023006:	e016      	b.n	8023036 <_calloc_r+0x56>
 8023008:	1c2b      	adds	r3, r5, #0
 802300a:	1c0c      	adds	r4, r1, #0
 802300c:	b289      	uxth	r1, r1
 802300e:	b292      	uxth	r2, r2
 8023010:	434a      	muls	r2, r1
 8023012:	b29b      	uxth	r3, r3
 8023014:	b2a1      	uxth	r1, r4
 8023016:	4359      	muls	r1, r3
 8023018:	0c14      	lsrs	r4, r2, #16
 802301a:	190c      	adds	r4, r1, r4
 802301c:	0c23      	lsrs	r3, r4, #16
 802301e:	d107      	bne.n	8023030 <_calloc_r+0x50>
 8023020:	0424      	lsls	r4, r4, #16
 8023022:	b292      	uxth	r2, r2
 8023024:	4314      	orrs	r4, r2
 8023026:	e7e5      	b.n	8022ff4 <_calloc_r+0x14>
 8023028:	2d00      	cmp	r5, #0
 802302a:	d101      	bne.n	8023030 <_calloc_r+0x50>
 802302c:	1c14      	adds	r4, r2, #0
 802302e:	e7ed      	b.n	802300c <_calloc_r+0x2c>
 8023030:	230c      	movs	r3, #12
 8023032:	6003      	str	r3, [r0, #0]
 8023034:	2500      	movs	r5, #0
 8023036:	0028      	movs	r0, r5
 8023038:	bd70      	pop	{r4, r5, r6, pc}

0802303a <_realloc_r>:
 802303a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802303c:	0006      	movs	r6, r0
 802303e:	000c      	movs	r4, r1
 8023040:	0015      	movs	r5, r2
 8023042:	2900      	cmp	r1, #0
 8023044:	d105      	bne.n	8023052 <_realloc_r+0x18>
 8023046:	0011      	movs	r1, r2
 8023048:	f7fe fe2a 	bl	8021ca0 <_malloc_r>
 802304c:	0004      	movs	r4, r0
 802304e:	0020      	movs	r0, r4
 8023050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023052:	2a00      	cmp	r2, #0
 8023054:	d103      	bne.n	802305e <_realloc_r+0x24>
 8023056:	f7fe fa53 	bl	8021500 <_free_r>
 802305a:	2400      	movs	r4, #0
 802305c:	e7f7      	b.n	802304e <_realloc_r+0x14>
 802305e:	f000 f832 	bl	80230c6 <_malloc_usable_size_r>
 8023062:	0007      	movs	r7, r0
 8023064:	4285      	cmp	r5, r0
 8023066:	d802      	bhi.n	802306e <_realloc_r+0x34>
 8023068:	0843      	lsrs	r3, r0, #1
 802306a:	42ab      	cmp	r3, r5
 802306c:	d3ef      	bcc.n	802304e <_realloc_r+0x14>
 802306e:	0029      	movs	r1, r5
 8023070:	0030      	movs	r0, r6
 8023072:	f7fe fe15 	bl	8021ca0 <_malloc_r>
 8023076:	9001      	str	r0, [sp, #4]
 8023078:	2800      	cmp	r0, #0
 802307a:	d0ee      	beq.n	802305a <_realloc_r+0x20>
 802307c:	002a      	movs	r2, r5
 802307e:	42bd      	cmp	r5, r7
 8023080:	d900      	bls.n	8023084 <_realloc_r+0x4a>
 8023082:	003a      	movs	r2, r7
 8023084:	0021      	movs	r1, r4
 8023086:	9801      	ldr	r0, [sp, #4]
 8023088:	f7fd fba8 	bl	80207dc <memcpy>
 802308c:	0021      	movs	r1, r4
 802308e:	0030      	movs	r0, r6
 8023090:	f7fe fa36 	bl	8021500 <_free_r>
 8023094:	9c01      	ldr	r4, [sp, #4]
 8023096:	e7da      	b.n	802304e <_realloc_r+0x14>

08023098 <fiprintf>:
 8023098:	b40e      	push	{r1, r2, r3}
 802309a:	b517      	push	{r0, r1, r2, r4, lr}
 802309c:	4c05      	ldr	r4, [pc, #20]	@ (80230b4 <fiprintf+0x1c>)
 802309e:	ab05      	add	r3, sp, #20
 80230a0:	cb04      	ldmia	r3!, {r2}
 80230a2:	0001      	movs	r1, r0
 80230a4:	6820      	ldr	r0, [r4, #0]
 80230a6:	9301      	str	r3, [sp, #4]
 80230a8:	f7ff fcfa 	bl	8022aa0 <_vfiprintf_r>
 80230ac:	bc1e      	pop	{r1, r2, r3, r4}
 80230ae:	bc08      	pop	{r3}
 80230b0:	b003      	add	sp, #12
 80230b2:	4718      	bx	r3
 80230b4:	200003d0 	.word	0x200003d0

080230b8 <abort>:
 80230b8:	2006      	movs	r0, #6
 80230ba:	b510      	push	{r4, lr}
 80230bc:	f000 f834 	bl	8023128 <raise>
 80230c0:	2001      	movs	r0, #1
 80230c2:	f7ea ff87 	bl	800dfd4 <_exit>

080230c6 <_malloc_usable_size_r>:
 80230c6:	1f0b      	subs	r3, r1, #4
 80230c8:	681b      	ldr	r3, [r3, #0]
 80230ca:	1f18      	subs	r0, r3, #4
 80230cc:	2b00      	cmp	r3, #0
 80230ce:	da01      	bge.n	80230d4 <_malloc_usable_size_r+0xe>
 80230d0:	580b      	ldr	r3, [r1, r0]
 80230d2:	18c0      	adds	r0, r0, r3
 80230d4:	4770      	bx	lr

080230d6 <_raise_r>:
 80230d6:	b570      	push	{r4, r5, r6, lr}
 80230d8:	0004      	movs	r4, r0
 80230da:	000d      	movs	r5, r1
 80230dc:	291f      	cmp	r1, #31
 80230de:	d904      	bls.n	80230ea <_raise_r+0x14>
 80230e0:	2316      	movs	r3, #22
 80230e2:	6003      	str	r3, [r0, #0]
 80230e4:	2001      	movs	r0, #1
 80230e6:	4240      	negs	r0, r0
 80230e8:	bd70      	pop	{r4, r5, r6, pc}
 80230ea:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80230ec:	2b00      	cmp	r3, #0
 80230ee:	d004      	beq.n	80230fa <_raise_r+0x24>
 80230f0:	008a      	lsls	r2, r1, #2
 80230f2:	189b      	adds	r3, r3, r2
 80230f4:	681a      	ldr	r2, [r3, #0]
 80230f6:	2a00      	cmp	r2, #0
 80230f8:	d108      	bne.n	802310c <_raise_r+0x36>
 80230fa:	0020      	movs	r0, r4
 80230fc:	f000 f830 	bl	8023160 <_getpid_r>
 8023100:	002a      	movs	r2, r5
 8023102:	0001      	movs	r1, r0
 8023104:	0020      	movs	r0, r4
 8023106:	f000 f819 	bl	802313c <_kill_r>
 802310a:	e7ed      	b.n	80230e8 <_raise_r+0x12>
 802310c:	2a01      	cmp	r2, #1
 802310e:	d009      	beq.n	8023124 <_raise_r+0x4e>
 8023110:	1c51      	adds	r1, r2, #1
 8023112:	d103      	bne.n	802311c <_raise_r+0x46>
 8023114:	2316      	movs	r3, #22
 8023116:	6003      	str	r3, [r0, #0]
 8023118:	2001      	movs	r0, #1
 802311a:	e7e5      	b.n	80230e8 <_raise_r+0x12>
 802311c:	2100      	movs	r1, #0
 802311e:	0028      	movs	r0, r5
 8023120:	6019      	str	r1, [r3, #0]
 8023122:	4790      	blx	r2
 8023124:	2000      	movs	r0, #0
 8023126:	e7df      	b.n	80230e8 <_raise_r+0x12>

08023128 <raise>:
 8023128:	b510      	push	{r4, lr}
 802312a:	4b03      	ldr	r3, [pc, #12]	@ (8023138 <raise+0x10>)
 802312c:	0001      	movs	r1, r0
 802312e:	6818      	ldr	r0, [r3, #0]
 8023130:	f7ff ffd1 	bl	80230d6 <_raise_r>
 8023134:	bd10      	pop	{r4, pc}
 8023136:	46c0      	nop			@ (mov r8, r8)
 8023138:	200003d0 	.word	0x200003d0

0802313c <_kill_r>:
 802313c:	2300      	movs	r3, #0
 802313e:	b570      	push	{r4, r5, r6, lr}
 8023140:	4d06      	ldr	r5, [pc, #24]	@ (802315c <_kill_r+0x20>)
 8023142:	0004      	movs	r4, r0
 8023144:	0008      	movs	r0, r1
 8023146:	0011      	movs	r1, r2
 8023148:	602b      	str	r3, [r5, #0]
 802314a:	f7ea ff33 	bl	800dfb4 <_kill>
 802314e:	1c43      	adds	r3, r0, #1
 8023150:	d103      	bne.n	802315a <_kill_r+0x1e>
 8023152:	682b      	ldr	r3, [r5, #0]
 8023154:	2b00      	cmp	r3, #0
 8023156:	d000      	beq.n	802315a <_kill_r+0x1e>
 8023158:	6023      	str	r3, [r4, #0]
 802315a:	bd70      	pop	{r4, r5, r6, pc}
 802315c:	200033c8 	.word	0x200033c8

08023160 <_getpid_r>:
 8023160:	b510      	push	{r4, lr}
 8023162:	f7ea ff21 	bl	800dfa8 <_getpid>
 8023166:	bd10      	pop	{r4, pc}

08023168 <expf>:
 8023168:	b570      	push	{r4, r5, r6, lr}
 802316a:	1c04      	adds	r4, r0, #0
 802316c:	f000 f8e6 	bl	802333c <__ieee754_expf>
 8023170:	1c05      	adds	r5, r0, #0
 8023172:	1c20      	adds	r0, r4, #0
 8023174:	f000 f83c 	bl	80231f0 <finitef>
 8023178:	2800      	cmp	r0, #0
 802317a:	d00b      	beq.n	8023194 <expf+0x2c>
 802317c:	490c      	ldr	r1, [pc, #48]	@ (80231b0 <expf+0x48>)
 802317e:	1c20      	adds	r0, r4, #0
 8023180:	f7dd f9ea 	bl	8000558 <__aeabi_fcmpgt>
 8023184:	2800      	cmp	r0, #0
 8023186:	d007      	beq.n	8023198 <expf+0x30>
 8023188:	f7fd faf0 	bl	802076c <__errno>
 802318c:	25ff      	movs	r5, #255	@ 0xff
 802318e:	2322      	movs	r3, #34	@ 0x22
 8023190:	05ed      	lsls	r5, r5, #23
 8023192:	6003      	str	r3, [r0, #0]
 8023194:	1c28      	adds	r0, r5, #0
 8023196:	bd70      	pop	{r4, r5, r6, pc}
 8023198:	4906      	ldr	r1, [pc, #24]	@ (80231b4 <expf+0x4c>)
 802319a:	1c20      	adds	r0, r4, #0
 802319c:	f7dd f9c8 	bl	8000530 <__aeabi_fcmplt>
 80231a0:	2800      	cmp	r0, #0
 80231a2:	d0f7      	beq.n	8023194 <expf+0x2c>
 80231a4:	f7fd fae2 	bl	802076c <__errno>
 80231a8:	2322      	movs	r3, #34	@ 0x22
 80231aa:	2500      	movs	r5, #0
 80231ac:	6003      	str	r3, [r0, #0]
 80231ae:	e7f1      	b.n	8023194 <expf+0x2c>
 80231b0:	42b17217 	.word	0x42b17217
 80231b4:	c2cff1b5 	.word	0xc2cff1b5

080231b8 <sqrtf>:
 80231b8:	b570      	push	{r4, r5, r6, lr}
 80231ba:	1c05      	adds	r5, r0, #0
 80231bc:	f000 f822 	bl	8023204 <__ieee754_sqrtf>
 80231c0:	1c29      	adds	r1, r5, #0
 80231c2:	1c04      	adds	r4, r0, #0
 80231c4:	1c28      	adds	r0, r5, #0
 80231c6:	f7de f9cd 	bl	8001564 <__aeabi_fcmpun>
 80231ca:	2800      	cmp	r0, #0
 80231cc:	d10e      	bne.n	80231ec <sqrtf+0x34>
 80231ce:	2100      	movs	r1, #0
 80231d0:	1c28      	adds	r0, r5, #0
 80231d2:	f7dd f9ad 	bl	8000530 <__aeabi_fcmplt>
 80231d6:	2800      	cmp	r0, #0
 80231d8:	d008      	beq.n	80231ec <sqrtf+0x34>
 80231da:	f7fd fac7 	bl	802076c <__errno>
 80231de:	2321      	movs	r3, #33	@ 0x21
 80231e0:	2100      	movs	r1, #0
 80231e2:	6003      	str	r3, [r0, #0]
 80231e4:	1c08      	adds	r0, r1, #0
 80231e6:	f7dd fcf5 	bl	8000bd4 <__aeabi_fdiv>
 80231ea:	1c04      	adds	r4, r0, #0
 80231ec:	1c20      	adds	r0, r4, #0
 80231ee:	bd70      	pop	{r4, r5, r6, pc}

080231f0 <finitef>:
 80231f0:	22ff      	movs	r2, #255	@ 0xff
 80231f2:	0043      	lsls	r3, r0, #1
 80231f4:	085b      	lsrs	r3, r3, #1
 80231f6:	2001      	movs	r0, #1
 80231f8:	05d2      	lsls	r2, r2, #23
 80231fa:	4293      	cmp	r3, r2
 80231fc:	db00      	blt.n	8023200 <finitef+0x10>
 80231fe:	2000      	movs	r0, #0
 8023200:	4770      	bx	lr
	...

08023204 <__ieee754_sqrtf>:
 8023204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023206:	0003      	movs	r3, r0
 8023208:	0042      	lsls	r2, r0, #1
 802320a:	1c04      	adds	r4, r0, #0
 802320c:	20ff      	movs	r0, #255	@ 0xff
 802320e:	0852      	lsrs	r2, r2, #1
 8023210:	05c0      	lsls	r0, r0, #23
 8023212:	4282      	cmp	r2, r0
 8023214:	d30a      	bcc.n	802322c <__ieee754_sqrtf+0x28>
 8023216:	1c21      	adds	r1, r4, #0
 8023218:	1c20      	adds	r0, r4, #0
 802321a:	f7dd fec1 	bl	8000fa0 <__aeabi_fmul>
 802321e:	1c01      	adds	r1, r0, #0
 8023220:	1c20      	adds	r0, r4, #0
 8023222:	f7dd fb4d 	bl	80008c0 <__aeabi_fadd>
 8023226:	1c04      	adds	r4, r0, #0
 8023228:	1c20      	adds	r0, r4, #0
 802322a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802322c:	2a00      	cmp	r2, #0
 802322e:	d0fb      	beq.n	8023228 <__ieee754_sqrtf+0x24>
 8023230:	2c00      	cmp	r4, #0
 8023232:	da07      	bge.n	8023244 <__ieee754_sqrtf+0x40>
 8023234:	1c21      	adds	r1, r4, #0
 8023236:	1c20      	adds	r0, r4, #0
 8023238:	f7dd fff0 	bl	800121c <__aeabi_fsub>
 802323c:	1c01      	adds	r1, r0, #0
 802323e:	f7dd fcc9 	bl	8000bd4 <__aeabi_fdiv>
 8023242:	e7f0      	b.n	8023226 <__ieee754_sqrtf+0x22>
 8023244:	0022      	movs	r2, r4
 8023246:	15e1      	asrs	r1, r4, #23
 8023248:	4002      	ands	r2, r0
 802324a:	4204      	tst	r4, r0
 802324c:	d046      	beq.n	80232dc <__ieee754_sqrtf+0xd8>
 802324e:	2280      	movs	r2, #128	@ 0x80
 8023250:	000f      	movs	r7, r1
 8023252:	025b      	lsls	r3, r3, #9
 8023254:	0a5b      	lsrs	r3, r3, #9
 8023256:	0412      	lsls	r2, r2, #16
 8023258:	3f7f      	subs	r7, #127	@ 0x7f
 802325a:	4313      	orrs	r3, r2
 802325c:	07c9      	lsls	r1, r1, #31
 802325e:	d400      	bmi.n	8023262 <__ieee754_sqrtf+0x5e>
 8023260:	005b      	lsls	r3, r3, #1
 8023262:	2400      	movs	r4, #0
 8023264:	2180      	movs	r1, #128	@ 0x80
 8023266:	2019      	movs	r0, #25
 8023268:	0026      	movs	r6, r4
 802326a:	107f      	asrs	r7, r7, #1
 802326c:	005b      	lsls	r3, r3, #1
 802326e:	0449      	lsls	r1, r1, #17
 8023270:	1875      	adds	r5, r6, r1
 8023272:	001a      	movs	r2, r3
 8023274:	429d      	cmp	r5, r3
 8023276:	dc02      	bgt.n	802327e <__ieee754_sqrtf+0x7a>
 8023278:	186e      	adds	r6, r5, r1
 802327a:	1b5a      	subs	r2, r3, r5
 802327c:	1864      	adds	r4, r4, r1
 802327e:	3801      	subs	r0, #1
 8023280:	0053      	lsls	r3, r2, #1
 8023282:	0849      	lsrs	r1, r1, #1
 8023284:	2800      	cmp	r0, #0
 8023286:	d1f3      	bne.n	8023270 <__ieee754_sqrtf+0x6c>
 8023288:	2a00      	cmp	r2, #0
 802328a:	d019      	beq.n	80232c0 <__ieee754_sqrtf+0xbc>
 802328c:	4d17      	ldr	r5, [pc, #92]	@ (80232ec <__ieee754_sqrtf+0xe8>)
 802328e:	4e18      	ldr	r6, [pc, #96]	@ (80232f0 <__ieee754_sqrtf+0xec>)
 8023290:	6828      	ldr	r0, [r5, #0]
 8023292:	6831      	ldr	r1, [r6, #0]
 8023294:	682b      	ldr	r3, [r5, #0]
 8023296:	9301      	str	r3, [sp, #4]
 8023298:	f7dd ffc0 	bl	800121c <__aeabi_fsub>
 802329c:	1c01      	adds	r1, r0, #0
 802329e:	9801      	ldr	r0, [sp, #4]
 80232a0:	f7dd f950 	bl	8000544 <__aeabi_fcmple>
 80232a4:	2800      	cmp	r0, #0
 80232a6:	d00b      	beq.n	80232c0 <__ieee754_sqrtf+0xbc>
 80232a8:	6828      	ldr	r0, [r5, #0]
 80232aa:	6831      	ldr	r1, [r6, #0]
 80232ac:	f7dd fb08 	bl	80008c0 <__aeabi_fadd>
 80232b0:	682d      	ldr	r5, [r5, #0]
 80232b2:	1c01      	adds	r1, r0, #0
 80232b4:	1c28      	adds	r0, r5, #0
 80232b6:	f7dd f93b 	bl	8000530 <__aeabi_fcmplt>
 80232ba:	2800      	cmp	r0, #0
 80232bc:	d011      	beq.n	80232e2 <__ieee754_sqrtf+0xde>
 80232be:	3402      	adds	r4, #2
 80232c0:	23fc      	movs	r3, #252	@ 0xfc
 80232c2:	1064      	asrs	r4, r4, #1
 80232c4:	059b      	lsls	r3, r3, #22
 80232c6:	18e3      	adds	r3, r4, r3
 80232c8:	05fc      	lsls	r4, r7, #23
 80232ca:	18e4      	adds	r4, r4, r3
 80232cc:	e7ac      	b.n	8023228 <__ieee754_sqrtf+0x24>
 80232ce:	005b      	lsls	r3, r3, #1
 80232d0:	3201      	adds	r2, #1
 80232d2:	4203      	tst	r3, r0
 80232d4:	d0fb      	beq.n	80232ce <__ieee754_sqrtf+0xca>
 80232d6:	3a01      	subs	r2, #1
 80232d8:	1a89      	subs	r1, r1, r2
 80232da:	e7b8      	b.n	802324e <__ieee754_sqrtf+0x4a>
 80232dc:	2080      	movs	r0, #128	@ 0x80
 80232de:	0400      	lsls	r0, r0, #16
 80232e0:	e7f7      	b.n	80232d2 <__ieee754_sqrtf+0xce>
 80232e2:	2301      	movs	r3, #1
 80232e4:	3401      	adds	r4, #1
 80232e6:	439c      	bics	r4, r3
 80232e8:	e7ea      	b.n	80232c0 <__ieee754_sqrtf+0xbc>
 80232ea:	46c0      	nop			@ (mov r8, r8)
 80232ec:	20000424 	.word	0x20000424
 80232f0:	20000420 	.word	0x20000420

080232f4 <roundf>:
 80232f4:	0dc3      	lsrs	r3, r0, #23
 80232f6:	b2db      	uxtb	r3, r3
 80232f8:	3b7f      	subs	r3, #127	@ 0x7f
 80232fa:	0002      	movs	r2, r0
 80232fc:	b510      	push	{r4, lr}
 80232fe:	2b16      	cmp	r3, #22
 8023300:	dc13      	bgt.n	802332a <roundf+0x36>
 8023302:	2b00      	cmp	r3, #0
 8023304:	da07      	bge.n	8023316 <roundf+0x22>
 8023306:	0fc2      	lsrs	r2, r0, #31
 8023308:	07d0      	lsls	r0, r2, #31
 802330a:	3301      	adds	r3, #1
 802330c:	d102      	bne.n	8023314 <roundf+0x20>
 802330e:	23fe      	movs	r3, #254	@ 0xfe
 8023310:	059b      	lsls	r3, r3, #22
 8023312:	4318      	orrs	r0, r3
 8023314:	bd10      	pop	{r4, pc}
 8023316:	4908      	ldr	r1, [pc, #32]	@ (8023338 <roundf+0x44>)
 8023318:	4119      	asrs	r1, r3
 802331a:	4208      	tst	r0, r1
 802331c:	d0fa      	beq.n	8023314 <roundf+0x20>
 802331e:	2080      	movs	r0, #128	@ 0x80
 8023320:	03c0      	lsls	r0, r0, #15
 8023322:	4118      	asrs	r0, r3
 8023324:	1880      	adds	r0, r0, r2
 8023326:	4388      	bics	r0, r1
 8023328:	e7f4      	b.n	8023314 <roundf+0x20>
 802332a:	2b80      	cmp	r3, #128	@ 0x80
 802332c:	d1f2      	bne.n	8023314 <roundf+0x20>
 802332e:	1c01      	adds	r1, r0, #0
 8023330:	f7dd fac6 	bl	80008c0 <__aeabi_fadd>
 8023334:	e7ee      	b.n	8023314 <roundf+0x20>
 8023336:	46c0      	nop			@ (mov r8, r8)
 8023338:	007fffff 	.word	0x007fffff

0802333c <__ieee754_expf>:
 802333c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802333e:	21ff      	movs	r1, #255	@ 0xff
 8023340:	0043      	lsls	r3, r0, #1
 8023342:	1c04      	adds	r4, r0, #0
 8023344:	085b      	lsrs	r3, r3, #1
 8023346:	05c9      	lsls	r1, r1, #23
 8023348:	428b      	cmp	r3, r1
 802334a:	d904      	bls.n	8023356 <__ieee754_expf+0x1a>
 802334c:	1c01      	adds	r1, r0, #0
 802334e:	1c20      	adds	r0, r4, #0
 8023350:	f7dd fab6 	bl	80008c0 <__aeabi_fadd>
 8023354:	e00d      	b.n	8023372 <__ieee754_expf+0x36>
 8023356:	0fc6      	lsrs	r6, r0, #31
 8023358:	428b      	cmp	r3, r1
 802335a:	d104      	bne.n	8023366 <__ieee754_expf+0x2a>
 802335c:	2e00      	cmp	r6, #0
 802335e:	d000      	beq.n	8023362 <__ieee754_expf+0x26>
 8023360:	e0ba      	b.n	80234d8 <__ieee754_expf+0x19c>
 8023362:	1c20      	adds	r0, r4, #0
 8023364:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023366:	495d      	ldr	r1, [pc, #372]	@ (80234dc <__ieee754_expf+0x1a0>)
 8023368:	4288      	cmp	r0, r1
 802336a:	dd04      	ble.n	8023376 <__ieee754_expf+0x3a>
 802336c:	2000      	movs	r0, #0
 802336e:	f000 f8f1 	bl	8023554 <__math_oflowf>
 8023372:	1c04      	adds	r4, r0, #0
 8023374:	e7f5      	b.n	8023362 <__ieee754_expf+0x26>
 8023376:	2800      	cmp	r0, #0
 8023378:	da06      	bge.n	8023388 <__ieee754_expf+0x4c>
 802337a:	4a59      	ldr	r2, [pc, #356]	@ (80234e0 <__ieee754_expf+0x1a4>)
 802337c:	4293      	cmp	r3, r2
 802337e:	d903      	bls.n	8023388 <__ieee754_expf+0x4c>
 8023380:	2000      	movs	r0, #0
 8023382:	f000 f8e1 	bl	8023548 <__math_uflowf>
 8023386:	e7f4      	b.n	8023372 <__ieee754_expf+0x36>
 8023388:	4a56      	ldr	r2, [pc, #344]	@ (80234e4 <__ieee754_expf+0x1a8>)
 802338a:	4293      	cmp	r3, r2
 802338c:	d96e      	bls.n	802346c <__ieee754_expf+0x130>
 802338e:	4a56      	ldr	r2, [pc, #344]	@ (80234e8 <__ieee754_expf+0x1ac>)
 8023390:	00b5      	lsls	r5, r6, #2
 8023392:	4293      	cmp	r3, r2
 8023394:	d84e      	bhi.n	8023434 <__ieee754_expf+0xf8>
 8023396:	4b55      	ldr	r3, [pc, #340]	@ (80234ec <__ieee754_expf+0x1b0>)
 8023398:	1c20      	adds	r0, r4, #0
 802339a:	5959      	ldr	r1, [r3, r5]
 802339c:	f7dd ff3e 	bl	800121c <__aeabi_fsub>
 80233a0:	4b53      	ldr	r3, [pc, #332]	@ (80234f0 <__ieee754_expf+0x1b4>)
 80233a2:	1c07      	adds	r7, r0, #0
 80233a4:	595b      	ldr	r3, [r3, r5]
 80233a6:	2501      	movs	r5, #1
 80233a8:	1bad      	subs	r5, r5, r6
 80233aa:	9300      	str	r3, [sp, #0]
 80233ac:	1bad      	subs	r5, r5, r6
 80233ae:	9900      	ldr	r1, [sp, #0]
 80233b0:	1c38      	adds	r0, r7, #0
 80233b2:	f7dd ff33 	bl	800121c <__aeabi_fsub>
 80233b6:	1c04      	adds	r4, r0, #0
 80233b8:	1c21      	adds	r1, r4, #0
 80233ba:	1c20      	adds	r0, r4, #0
 80233bc:	f7dd fdf0 	bl	8000fa0 <__aeabi_fmul>
 80233c0:	494c      	ldr	r1, [pc, #304]	@ (80234f4 <__ieee754_expf+0x1b8>)
 80233c2:	1c06      	adds	r6, r0, #0
 80233c4:	f7dd fdec 	bl	8000fa0 <__aeabi_fmul>
 80233c8:	494b      	ldr	r1, [pc, #300]	@ (80234f8 <__ieee754_expf+0x1bc>)
 80233ca:	f7dd ff27 	bl	800121c <__aeabi_fsub>
 80233ce:	1c31      	adds	r1, r6, #0
 80233d0:	f7dd fde6 	bl	8000fa0 <__aeabi_fmul>
 80233d4:	4949      	ldr	r1, [pc, #292]	@ (80234fc <__ieee754_expf+0x1c0>)
 80233d6:	f7dd fa73 	bl	80008c0 <__aeabi_fadd>
 80233da:	1c31      	adds	r1, r6, #0
 80233dc:	f7dd fde0 	bl	8000fa0 <__aeabi_fmul>
 80233e0:	4947      	ldr	r1, [pc, #284]	@ (8023500 <__ieee754_expf+0x1c4>)
 80233e2:	f7dd ff1b 	bl	800121c <__aeabi_fsub>
 80233e6:	1c31      	adds	r1, r6, #0
 80233e8:	f7dd fdda 	bl	8000fa0 <__aeabi_fmul>
 80233ec:	4945      	ldr	r1, [pc, #276]	@ (8023504 <__ieee754_expf+0x1c8>)
 80233ee:	f7dd fa67 	bl	80008c0 <__aeabi_fadd>
 80233f2:	1c31      	adds	r1, r6, #0
 80233f4:	f7dd fdd4 	bl	8000fa0 <__aeabi_fmul>
 80233f8:	1c01      	adds	r1, r0, #0
 80233fa:	1c20      	adds	r0, r4, #0
 80233fc:	f7dd ff0e 	bl	800121c <__aeabi_fsub>
 8023400:	1c01      	adds	r1, r0, #0
 8023402:	1c06      	adds	r6, r0, #0
 8023404:	1c20      	adds	r0, r4, #0
 8023406:	f7dd fdcb 	bl	8000fa0 <__aeabi_fmul>
 802340a:	9001      	str	r0, [sp, #4]
 802340c:	2d00      	cmp	r5, #0
 802340e:	d140      	bne.n	8023492 <__ieee754_expf+0x156>
 8023410:	2180      	movs	r1, #128	@ 0x80
 8023412:	1c30      	adds	r0, r6, #0
 8023414:	05c9      	lsls	r1, r1, #23
 8023416:	f7dd ff01 	bl	800121c <__aeabi_fsub>
 802341a:	1c01      	adds	r1, r0, #0
 802341c:	9801      	ldr	r0, [sp, #4]
 802341e:	f7dd fbd9 	bl	8000bd4 <__aeabi_fdiv>
 8023422:	1c21      	adds	r1, r4, #0
 8023424:	f7dd fefa 	bl	800121c <__aeabi_fsub>
 8023428:	1c01      	adds	r1, r0, #0
 802342a:	20fe      	movs	r0, #254	@ 0xfe
 802342c:	0580      	lsls	r0, r0, #22
 802342e:	f7dd fef5 	bl	800121c <__aeabi_fsub>
 8023432:	e79e      	b.n	8023372 <__ieee754_expf+0x36>
 8023434:	4934      	ldr	r1, [pc, #208]	@ (8023508 <__ieee754_expf+0x1cc>)
 8023436:	1c20      	adds	r0, r4, #0
 8023438:	f7dd fdb2 	bl	8000fa0 <__aeabi_fmul>
 802343c:	4b33      	ldr	r3, [pc, #204]	@ (802350c <__ieee754_expf+0x1d0>)
 802343e:	5959      	ldr	r1, [r3, r5]
 8023440:	f7dd fa3e 	bl	80008c0 <__aeabi_fadd>
 8023444:	f7de f8a4 	bl	8001590 <__aeabi_f2iz>
 8023448:	0005      	movs	r5, r0
 802344a:	f7de f8c1 	bl	80015d0 <__aeabi_i2f>
 802344e:	4930      	ldr	r1, [pc, #192]	@ (8023510 <__ieee754_expf+0x1d4>)
 8023450:	1c06      	adds	r6, r0, #0
 8023452:	f7dd fda5 	bl	8000fa0 <__aeabi_fmul>
 8023456:	1c01      	adds	r1, r0, #0
 8023458:	1c20      	adds	r0, r4, #0
 802345a:	f7dd fedf 	bl	800121c <__aeabi_fsub>
 802345e:	492d      	ldr	r1, [pc, #180]	@ (8023514 <__ieee754_expf+0x1d8>)
 8023460:	1c07      	adds	r7, r0, #0
 8023462:	1c30      	adds	r0, r6, #0
 8023464:	f7dd fd9c 	bl	8000fa0 <__aeabi_fmul>
 8023468:	9000      	str	r0, [sp, #0]
 802346a:	e7a0      	b.n	80233ae <__ieee754_expf+0x72>
 802346c:	22d0      	movs	r2, #208	@ 0xd0
 802346e:	0592      	lsls	r2, r2, #22
 8023470:	4293      	cmp	r3, r2
 8023472:	d20c      	bcs.n	802348e <__ieee754_expf+0x152>
 8023474:	4928      	ldr	r1, [pc, #160]	@ (8023518 <__ieee754_expf+0x1dc>)
 8023476:	1c20      	adds	r0, r4, #0
 8023478:	f7dd fa22 	bl	80008c0 <__aeabi_fadd>
 802347c:	21fe      	movs	r1, #254	@ 0xfe
 802347e:	0589      	lsls	r1, r1, #22
 8023480:	f7dd f86a 	bl	8000558 <__aeabi_fcmpgt>
 8023484:	1e05      	subs	r5, r0, #0
 8023486:	d097      	beq.n	80233b8 <__ieee754_expf+0x7c>
 8023488:	21fe      	movs	r1, #254	@ 0xfe
 802348a:	0589      	lsls	r1, r1, #22
 802348c:	e75f      	b.n	802334e <__ieee754_expf+0x12>
 802348e:	2500      	movs	r5, #0
 8023490:	e792      	b.n	80233b8 <__ieee754_expf+0x7c>
 8023492:	2080      	movs	r0, #128	@ 0x80
 8023494:	1c31      	adds	r1, r6, #0
 8023496:	05c0      	lsls	r0, r0, #23
 8023498:	f7dd fec0 	bl	800121c <__aeabi_fsub>
 802349c:	1c01      	adds	r1, r0, #0
 802349e:	9801      	ldr	r0, [sp, #4]
 80234a0:	f7dd fb98 	bl	8000bd4 <__aeabi_fdiv>
 80234a4:	1c01      	adds	r1, r0, #0
 80234a6:	9800      	ldr	r0, [sp, #0]
 80234a8:	f7dd feb8 	bl	800121c <__aeabi_fsub>
 80234ac:	1c39      	adds	r1, r7, #0
 80234ae:	f7dd feb5 	bl	800121c <__aeabi_fsub>
 80234b2:	1c01      	adds	r1, r0, #0
 80234b4:	20fe      	movs	r0, #254	@ 0xfe
 80234b6:	0580      	lsls	r0, r0, #22
 80234b8:	f7dd feb0 	bl	800121c <__aeabi_fsub>
 80234bc:	002b      	movs	r3, r5
 80234be:	337d      	adds	r3, #125	@ 0x7d
 80234c0:	db02      	blt.n	80234c8 <__ieee754_expf+0x18c>
 80234c2:	05ec      	lsls	r4, r5, #23
 80234c4:	1824      	adds	r4, r4, r0
 80234c6:	e74c      	b.n	8023362 <__ieee754_expf+0x26>
 80234c8:	21d8      	movs	r1, #216	@ 0xd8
 80234ca:	3564      	adds	r5, #100	@ 0x64
 80234cc:	05ed      	lsls	r5, r5, #23
 80234ce:	1828      	adds	r0, r5, r0
 80234d0:	0509      	lsls	r1, r1, #20
 80234d2:	f7dd fd65 	bl	8000fa0 <__aeabi_fmul>
 80234d6:	e74c      	b.n	8023372 <__ieee754_expf+0x36>
 80234d8:	2400      	movs	r4, #0
 80234da:	e742      	b.n	8023362 <__ieee754_expf+0x26>
 80234dc:	42b17217 	.word	0x42b17217
 80234e0:	42cff1b5 	.word	0x42cff1b5
 80234e4:	3eb17218 	.word	0x3eb17218
 80234e8:	3f851591 	.word	0x3f851591
 80234ec:	08026698 	.word	0x08026698
 80234f0:	08026690 	.word	0x08026690
 80234f4:	3331bb4c 	.word	0x3331bb4c
 80234f8:	35ddea0e 	.word	0x35ddea0e
 80234fc:	388ab355 	.word	0x388ab355
 8023500:	3b360b61 	.word	0x3b360b61
 8023504:	3e2aaaab 	.word	0x3e2aaaab
 8023508:	3fb8aa3b 	.word	0x3fb8aa3b
 802350c:	080266a0 	.word	0x080266a0
 8023510:	3f317180 	.word	0x3f317180
 8023514:	3717f7d1 	.word	0x3717f7d1
 8023518:	7149f2ca 	.word	0x7149f2ca

0802351c <with_errnof>:
 802351c:	b570      	push	{r4, r5, r6, lr}
 802351e:	000d      	movs	r5, r1
 8023520:	1c04      	adds	r4, r0, #0
 8023522:	f7fd f923 	bl	802076c <__errno>
 8023526:	6005      	str	r5, [r0, #0]
 8023528:	1c20      	adds	r0, r4, #0
 802352a:	bd70      	pop	{r4, r5, r6, pc}

0802352c <xflowf>:
 802352c:	b510      	push	{r4, lr}
 802352e:	1c0b      	adds	r3, r1, #0
 8023530:	2800      	cmp	r0, #0
 8023532:	d002      	beq.n	802353a <xflowf+0xe>
 8023534:	2380      	movs	r3, #128	@ 0x80
 8023536:	061b      	lsls	r3, r3, #24
 8023538:	18cb      	adds	r3, r1, r3
 802353a:	1c18      	adds	r0, r3, #0
 802353c:	f7dd fd30 	bl	8000fa0 <__aeabi_fmul>
 8023540:	2122      	movs	r1, #34	@ 0x22
 8023542:	f7ff ffeb 	bl	802351c <with_errnof>
 8023546:	bd10      	pop	{r4, pc}

08023548 <__math_uflowf>:
 8023548:	2180      	movs	r1, #128	@ 0x80
 802354a:	b510      	push	{r4, lr}
 802354c:	0549      	lsls	r1, r1, #21
 802354e:	f7ff ffed 	bl	802352c <xflowf>
 8023552:	bd10      	pop	{r4, pc}

08023554 <__math_oflowf>:
 8023554:	21e0      	movs	r1, #224	@ 0xe0
 8023556:	b510      	push	{r4, lr}
 8023558:	05c9      	lsls	r1, r1, #23
 802355a:	f7ff ffe7 	bl	802352c <xflowf>
 802355e:	bd10      	pop	{r4, pc}

08023560 <_init>:
 8023560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023562:	46c0      	nop			@ (mov r8, r8)
 8023564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023566:	bc08      	pop	{r3}
 8023568:	469e      	mov	lr, r3
 802356a:	4770      	bx	lr

0802356c <_fini>:
 802356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802356e:	46c0      	nop			@ (mov r8, r8)
 8023570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023572:	bc08      	pop	{r3}
 8023574:	469e      	mov	lr, r3
 8023576:	4770      	bx	lr
