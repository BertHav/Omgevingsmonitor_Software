
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a50c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004848  0802a5d0  0802a5d0  0002b5d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ee18  0802ee18  0003043c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802ee18  0802ee18  0002fe18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ee20  0802ee20  0003043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ee20  0802ee20  0002fe20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802ee24  0802ee24  0002fe24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  0802ee28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e0  2000043c  0802f264  0003043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000391c  0802f264  0003091c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036f12  00000000  00000000  00030464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009e85  00000000  00000000  00067376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dc8  00000000  00000000  00071200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002224  00000000  00000000  00073fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024651  00000000  00000000  000761ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046a0b  00000000  00000000  0009a83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a35d8  00000000  00000000  000e1248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00184820  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc04  00000000  00000000  001848d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001904d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00190545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00192ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802a5b4 	.word	0x0802a5b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	0802a5b4 	.word	0x0802a5b4

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802dbfc 	.word	0x0802dbfc
 8000ec8:	0802dc3c 	.word	0x0802dc3c
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802dc78 	.word	0x0802dc78
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000468 	.word	0x20000468
 8003ad8:	20000498 	.word	0x20000498

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000464 	.word	0x20000464
 8003b38:	20000498 	.word	0x20000498

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000460 	.word	0x20000460

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 feb2 	bl	80148c0 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000045c 	.word	0x2000045c

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000464 	.word	0x20000464
 8003b98:	20000468 	.word	0x20000468

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 fe89 	bl	80148d4 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f010 f8c9 	bl	8013dd0 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	0802a5d0 	.word	0x0802a5d0
 8003c84:	0802a5dc 	.word	0x0802a5dc
 8003c88:	0802a5e0 	.word	0x0802a5e0
 8003c8c:	0802a5ec 	.word	0x0802a5ec
 8003c90:	0802a60c 	.word	0x0802a60c
 8003c94:	20000498 	.word	0x20000498

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 fe0e 	bl	80148d4 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 fdfa 	bl	80148d4 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f010 f855 	bl	8013dd0 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 fdd4 	bl	80148d4 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	200004a1 	.word	0x200004a1
 8003d44:	20000458 	.word	0x20000458
 8003d48:	0802a610 	.word	0x0802a610
 8003d4c:	0802a5dc 	.word	0x0802a5dc
 8003d50:	0802a614 	.word	0x0802a614
 8003d54:	0802a60c 	.word	0x0802a60c

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 fdb6 	bl	80148d4 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 fdaa 	bl	80148d4 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f00f fff7 	bl	8013dd0 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 fd76 	bl	80148d4 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000498 	.word	0x20000498
 8003e00:	20000458 	.word	0x20000458
 8003e04:	0802a640 	.word	0x0802a640
 8003e08:	0802a60c 	.word	0x0802a60c

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 fd43 	bl	80148d4 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000498 	.word	0x20000498

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f ff84 	bl	8013dd0 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f ff45 	bl	8013dd0 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000498 	.word	0x20000498
 8003f58:	0802a65c 	.word	0x0802a65c
 8003f5c:	0802a67c 	.word	0x0802a67c
 8003f60:	20000458 	.word	0x20000458
 8003f64:	0802a680 	.word	0x0802a680
 8003f68:	0802a60c 	.word	0x0802a60c

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f ff1e 	bl	8013dd0 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	0802a6b4 	.word	0x0802a6b4
 8003fa8:	0802a60c 	.word	0x0802a60c

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f fefe 	bl	8013dd0 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fc79 	bl	80148d4 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f010 fc68 	bl	80148d4 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000458 	.word	0x20000458
 8004094:	0802a6c8 	.word	0x0802a6c8
 8004098:	0802a60c 	.word	0x0802a60c
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000498 	.word	0x20000498

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f fe82 	bl	8013dd0 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f010 fbfd 	bl	80148d4 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f024 ff83 	bl	8029040 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f024 ff5f 	bl	8029040 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f024 ff3b 	bl	8029040 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f024 ff17 	bl	8029040 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f024 feed 	bl	8029040 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f024 fec9 	bl	8029040 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 fea5 	bl	8029040 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 fe81 	bl	8029040 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000458 	.word	0x20000458
 8004378:	0802a6e4 	.word	0x0802a6e4
 800437c:	0802a60c 	.word	0x0802a60c
 8004380:	2000046c 	.word	0x2000046c

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bc5      	ldr	r3, [pc, #788]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00f fc5e 	bl	8013d24 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc0      	ldr	r3, [pc, #768]	@ (8004778 <ENS_Upkeep+0x320>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e1fb      	b.n	8004874 <ENS_Upkeep+0x41c>
  }
  switch(ENSState) {
 800447c:	4bbe      	ldr	r3, [pc, #760]	@ (8004778 <ENS_Upkeep+0x320>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e1dd      	b.n	8004842 <ENS_Upkeep+0x3ea>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bbc      	ldr	r3, [pc, #752]	@ (800477c <ENS_Upkeep+0x324>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4abb      	ldr	r2, [pc, #748]	@ (8004780 <ENS_Upkeep+0x328>)
 8004492:	4bbc      	ldr	r3, [pc, #752]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00f fc9a 	bl	8013dd0 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f010 fa10 	bl	80148c0 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ab9      	ldr	r2, [pc, #740]	@ (8004788 <ENS_Upkeep+0x330>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bb3      	ldr	r3, [pc, #716]	@ (8004774 <ENS_Upkeep+0x31c>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bb8      	ldr	r3, [pc, #736]	@ (800478c <ENS_Upkeep+0x334>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bb8      	ldr	r3, [pc, #736]	@ (8004790 <ENS_Upkeep+0x338>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e1d0      	b.n	800485a <ENS_Upkeep+0x402>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4baf      	ldr	r3, [pc, #700]	@ (8004778 <ENS_Upkeep+0x320>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1cc      	b.n	800485a <ENS_Upkeep+0x402>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 fc70 	bl	800dda4 <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1c9      	b.n	800485e <ENS_Upkeep+0x406>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 fc56 	bl	800dd7c <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bab      	ldr	r3, [pc, #684]	@ (8004794 <ENS_Upkeep+0x33c>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bab      	ldr	r3, [pc, #684]	@ (8004798 <ENS_Upkeep+0x340>)
 80044ea:	4aac      	ldr	r2, [pc, #688]	@ (800479c <ENS_Upkeep+0x344>)
 80044ec:	49a5      	ldr	r1, [pc, #660]	@ (8004784 <ENS_Upkeep+0x32c>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00f fc6e 	bl	8013dd0 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f010 f9ed 	bl	80148d4 <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 fc3e 	bl	800dd7c <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4b9d      	ldr	r3, [pc, #628]	@ (8004778 <ENS_Upkeep+0x320>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f010 f9db 	bl	80148c0 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4b98      	ldr	r3, [pc, #608]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1ab      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 fc44 	bl	800dda4 <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e19f      	b.n	8004862 <ENS_Upkeep+0x40a>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f009 fc2a 	bl	800dd7c <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f010 f9ce 	bl	80148d4 <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f009 fc1f 	bl	800dd7c <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a8f      	ldr	r2, [pc, #572]	@ (80047a0 <ENS_Upkeep+0x348>)
 8004562:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00f fc32 	bl	8013dd0 <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a8d      	ldr	r2, [pc, #564]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004570:	4b84      	ldr	r3, [pc, #528]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00f fc2b 	bl	8013dd0 <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a8a      	ldr	r2, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 800457e:	4b81      	ldr	r3, [pc, #516]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00f fc24 	bl	8013dd0 <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f010 f994 	bl	80148c0 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b74      	ldr	r3, [pc, #464]	@ (8004774 <ENS_Upkeep+0x31c>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e164      	b.n	8004870 <ENS_Upkeep+0x418>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b74      	ldr	r3, [pc, #464]	@ (8004778 <ENS_Upkeep+0x320>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e160      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f009 fbf9 	bl	800dda4 <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f009 fbf5 	bl	800dda4 <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f009 fbef 	bl	800dda4 <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b6e      	ldr	r3, [pc, #440]	@ (80047ac <ENS_Upkeep+0x354>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b6e      	ldr	r3, [pc, #440]	@ (80047b0 <ENS_Upkeep+0x358>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b6e      	ldr	r3, [pc, #440]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b6e      	ldr	r3, [pc, #440]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b6e      	ldr	r3, [pc, #440]	@ (80047bc <ENS_Upkeep+0x364>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b6e      	ldr	r3, [pc, #440]	@ (80047c0 <ENS_Upkeep+0x368>)
 8004608:	4a6e      	ldr	r2, [pc, #440]	@ (80047c4 <ENS_Upkeep+0x36c>)
 800460a:	495e      	ldr	r1, [pc, #376]	@ (8004784 <ENS_Upkeep+0x32c>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00f fbdf 	bl	8013dd0 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f010 f955 	bl	80148c0 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b55      	ldr	r3, [pc, #340]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e125      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f009 fba9 	bl	800dd7c <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f010 f93f 	bl	80148c0 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b4a      	ldr	r3, [pc, #296]	@ (8004774 <ENS_Upkeep+0x31c>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f010 f940 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f009 fb91 	bl	800dd7c <setSensorLock>
      break;
 800465a:	e109      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f010 f936 	bl	80148d4 <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f010 f930 	bl	80148d4 <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f009 fb81 	bl	800dd7c <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b3f      	ldr	r3, [pc, #252]	@ (8004778 <ENS_Upkeep+0x320>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e0f6      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10f      	bne.n	80046aa <ENS_Upkeep+0x252>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <ENS_Upkeep+0x374>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b4e      	ldr	r3, [pc, #312]	@ (80047cc <ENS_Upkeep+0x374>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b4d      	ldr	r3, [pc, #308]	@ (80047cc <ENS_Upkeep+0x374>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a4d      	ldr	r2, [pc, #308]	@ (80047d0 <ENS_Upkeep+0x378>)
 800469c:	494d      	ldr	r1, [pc, #308]	@ (80047d4 <ENS_Upkeep+0x37c>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00f fb93 	bl	8013dd0 <CreateLine>
//    Debug("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
//    Debug("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
//    Debug("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
//    Debug("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d103      	bne.n	80046ba <ENS_Upkeep+0x262>
 80046b2:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e005      	b.n	80046c6 <ENS_Upkeep+0x26e>
 80046ba:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046c4:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 80046c6:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <ENS_Upkeep+0x374>)
 80046c8:	7818      	ldrb	r0, [r3, #0]
 80046ca:	4b40      	ldr	r3, [pc, #256]	@ (80047cc <ENS_Upkeep+0x374>)
 80046cc:	8859      	ldrh	r1, [r3, #2]
 80046ce:	4b3f      	ldr	r3, [pc, #252]	@ (80047cc <ENS_Upkeep+0x374>)
 80046d0:	889b      	ldrh	r3, [r3, #4]
 80046d2:	001a      	movs	r2, r3
 80046d4:	f000 fa2c 	bl	8004b30 <setENS160>
    ENSState = ENS_LOW_POWER;
 80046d8:	4b27      	ldr	r3, [pc, #156]	@ (8004778 <ENS_Upkeep+0x320>)
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
    break;
 80046de:	e0c7      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80046e0:	f010 f8ee 	bl	80148c0 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	22fa      	movs	r2, #250	@ 0xfa
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	189a      	adds	r2, r3, r2
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <ENS_Upkeep+0x31c>)
 80046ee:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 80046f0:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4053      	eors	r3, r2
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d035      	beq.n	800476a <ENS_Upkeep+0x312>
 80046fe:	4b37      	ldr	r3, [pc, #220]	@ (80047dc <ENS_Upkeep+0x384>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	4053      	eors	r3, r2
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d02e      	beq.n	800476a <ENS_Upkeep+0x312>
 800470c:	4b2e      	ldr	r3, [pc, #184]	@ (80047c8 <ENS_Upkeep+0x370>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d92a      	bls.n	800476a <ENS_Upkeep+0x312>
      if (getSensorLock() != FREE) {
 8004714:	f009 fb46 	bl	800dda4 <getSensorLock>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d000      	beq.n	800471e <ENS_Upkeep+0x2c6>
 800471c:	e0a3      	b.n	8004866 <ENS_Upkeep+0x40e>
        break;
      }
      setSensorLock(ENS160);
 800471e:	2004      	movs	r0, #4
 8004720:	f009 fb2c 	bl	800dd7c <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004724:	1cfc      	adds	r4, r7, #3
 8004726:	2000      	movs	r0, #0
 8004728:	f7ff fb70 	bl	8003e0c <ENS160_setMode>
 800472c:	0003      	movs	r3, r0
 800472e:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004730:	1cfb      	adds	r3, r7, #3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <ENS_Upkeep+0x2e4>
 8004738:	4b16      	ldr	r3, [pc, #88]	@ (8004794 <ENS_Upkeep+0x33c>)
 800473a:	e000      	b.n	800473e <ENS_Upkeep+0x2e6>
 800473c:	4b16      	ldr	r3, [pc, #88]	@ (8004798 <ENS_Upkeep+0x340>)
 800473e:	4a22      	ldr	r2, [pc, #136]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	0010      	movs	r0, r2
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004746:	490f      	ldr	r1, [pc, #60]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	2003      	movs	r0, #3
 800474c:	f00f fb40 	bl	8013dd0 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 8004750:	200a      	movs	r0, #10
 8004752:	f010 f8bf 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 8004756:	2000      	movs	r0, #0
 8004758:	f009 fb10 	bl	800dd7c <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 800475c:	f010 f8b0 	bl	80148c0 <HAL_GetTick>
 8004760:	0003      	movs	r3, r0
 8004762:	4a20      	ldr	r2, [pc, #128]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004764:	189a      	adds	r2, r3, r2
 8004766:	4b03      	ldr	r3, [pc, #12]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004768:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 800476a:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <ENS_Upkeep+0x320>)
 800476c:	2208      	movs	r2, #8
 800476e:	701a      	strb	r2, [r3, #0]
    break;
 8004770:	e07e      	b.n	8004870 <ENS_Upkeep+0x418>
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	2000045c 	.word	0x2000045c
 8004778:	20000000 	.word	0x20000000
 800477c:	0802dcb8 	.word	0x0802dcb8
 8004780:	0802a704 	.word	0x0802a704
 8004784:	0802a60c 	.word	0x0802a60c
 8004788:	000be6e0 	.word	0x000be6e0
 800478c:	20000e43 	.word	0x20000e43
 8004790:	20000461 	.word	0x20000461
 8004794:	0802a738 	.word	0x0802a738
 8004798:	0802a740 	.word	0x0802a740
 800479c:	0802a748 	.word	0x0802a748
 80047a0:	0802a76c 	.word	0x0802a76c
 80047a4:	0802a784 	.word	0x0802a784
 80047a8:	0802a7a4 	.word	0x0802a7a4
 80047ac:	0802a7bc 	.word	0x0802a7bc
 80047b0:	0802a7c4 	.word	0x0802a7c4
 80047b4:	0802a7cc 	.word	0x0802a7cc
 80047b8:	0802a7d4 	.word	0x0802a7d4
 80047bc:	0802a7dc 	.word	0x0802a7dc
 80047c0:	0802a7e4 	.word	0x0802a7e4
 80047c4:	0802a7ec 	.word	0x0802a7ec
 80047c8:	20000460 	.word	0x20000460
 80047cc:	20000490 	.word	0x20000490
 80047d0:	0802a814 	.word	0x0802a814
 80047d4:	0802a67c 	.word	0x0802a67c
 80047d8:	20002151 	.word	0x20002151
 80047dc:	20002152 	.word	0x20002152
 80047e0:	0802a840 	.word	0x0802a840
 80047e4:	0000afc8 	.word	0x0000afc8

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 80047e8:	f009 fadc 	bl	800dda4 <getSensorLock>
 80047ec:	1e03      	subs	r3, r0, #0
 80047ee:	d13c      	bne.n	800486a <ENS_Upkeep+0x412>
        break;
      }
      setSensorLock(ENS160);
 80047f0:	2004      	movs	r0, #4
 80047f2:	f009 fac3 	bl	800dd7c <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 80047f6:	1cba      	adds	r2, r7, #2
 80047f8:	2301      	movs	r3, #1
 80047fa:	2101      	movs	r1, #1
 80047fc:	2010      	movs	r0, #16
 80047fe:	f7ff f96d 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004802:	1cbb      	adds	r3, r7, #2
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d111      	bne.n	800482e <ENS_Upkeep+0x3d6>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 800480a:	1dfc      	adds	r4, r7, #7
 800480c:	2002      	movs	r0, #2
 800480e:	f7ff fafd 	bl	8003e0c <ENS160_setMode>
 8004812:	0003      	movs	r3, r0
 8004814:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <ENS_Upkeep+0x3ca>
 800481e:	4b17      	ldr	r3, [pc, #92]	@ (800487c <ENS_Upkeep+0x424>)
 8004820:	e000      	b.n	8004824 <ENS_Upkeep+0x3cc>
 8004822:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <ENS_Upkeep+0x428>)
 8004824:	4a17      	ldr	r2, [pc, #92]	@ (8004884 <ENS_Upkeep+0x42c>)
 8004826:	4918      	ldr	r1, [pc, #96]	@ (8004888 <ENS_Upkeep+0x430>)
 8004828:	2003      	movs	r0, #3
 800482a:	f00f fad1 	bl	8013dd0 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 800482e:	200a      	movs	r0, #10
 8004830:	f010 f850 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 8004834:	2000      	movs	r0, #0
 8004836:	f009 faa1 	bl	800dd7c <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 800483a:	4b14      	ldr	r3, [pc, #80]	@ (800488c <ENS_Upkeep+0x434>)
 800483c:	2203      	movs	r2, #3
 800483e:	701a      	strb	r2, [r3, #0]
    break;
 8004840:	e016      	b.n	8004870 <ENS_Upkeep+0x418>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <ENS_Upkeep+0x434>)
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 8004848:	f009 faac 	bl	800dda4 <getSensorLock>
 800484c:	0003      	movs	r3, r0
 800484e:	2b04      	cmp	r3, #4
 8004850:	d00d      	beq.n	800486e <ENS_Upkeep+0x416>
      setSensorLock(FREE);
 8004852:	2000      	movs	r0, #0
 8004854:	f009 fa92 	bl	800dd7c <setSensorLock>
    }
    break;
 8004858:	e009      	b.n	800486e <ENS_Upkeep+0x416>
    break;
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	e008      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	e006      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	e004      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	e002      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	e000      	b.n	8004870 <ENS_Upkeep+0x418>
    break;
 800486e:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <ENS_Upkeep+0x434>)
 8004872:	781b      	ldrb	r3, [r3, #0]
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b003      	add	sp, #12
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	0802a738 	.word	0x0802a738
 8004880:	0802a740 	.word	0x0802a740
 8004884:	0802a878 	.word	0x0802a878
 8004888:	0802a60c 	.word	0x0802a60c
 800488c:	20000000 	.word	0x20000000

08004890 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8004894:	4b02      	ldr	r3, [pc, #8]	@ (80048a0 <forceNTPupdate+0x10>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000698 	.word	0x20000698

080048a4 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80048ac:	f010 f808 	bl	80148c0 <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	18d2      	adds	r2, r2, r3
 80048b6:	4b03      	ldr	r3, [pc, #12]	@ (80048c4 <setESPTimeStamp+0x20>)
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b002      	add	sp, #8
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	20000694 	.word	0x20000694

080048c8 <setCharges>:

void setCharges(){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80048cc:	f005 f890 	bl	80099f0 <ReadBatteryVoltage>
 80048d0:	1c02      	adds	r2, r0, #0
 80048d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <setCharges+0x3c>)
 80048d4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80048d6:	f005 f8ed 	bl	8009ab4 <ReadSolarVoltage>
 80048da:	0003      	movs	r3, r0
 80048dc:	0018      	movs	r0, r3
 80048de:	f7fe ff87 	bl	80037f0 <__aeabi_i2d>
 80048e2:	2200      	movs	r2, #0
 80048e4:	4b08      	ldr	r3, [pc, #32]	@ (8004908 <setCharges+0x40>)
 80048e6:	f7fd fbfb 	bl	80020e0 <__aeabi_ddiv>
 80048ea:	0002      	movs	r2, r0
 80048ec:	000b      	movs	r3, r1
 80048ee:	0010      	movs	r0, r2
 80048f0:	0019      	movs	r1, r3
 80048f2:	f7ff f817 	bl	8003924 <__aeabi_d2f>
 80048f6:	1c02      	adds	r2, r0, #0
 80048f8:	4b04      	ldr	r3, [pc, #16]	@ (800490c <setCharges+0x44>)
 80048fa:	601a      	str	r2, [r3, #0]
}
 80048fc:	46c0      	nop			@ (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	20002160 	.word	0x20002160
 8004908:	408f4000 	.word	0x408f4000
 800490c:	200005c0 	.word	0x200005c0

08004910 <getWifiCred>:

void getWifiCred(void){
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  ReadUint8ArrayEEprom(SSIDConfigAddr, (uint8_t*)Credentials.SSID, SSIDMaxLength);
 8004914:	4b14      	ldr	r3, [pc, #80]	@ (8004968 <getWifiCred+0x58>)
 8004916:	4815      	ldr	r0, [pc, #84]	@ (800496c <getWifiCred+0x5c>)
 8004918:	2220      	movs	r2, #32
 800491a:	0019      	movs	r1, r3
 800491c:	f007 fbaa 	bl	800c074 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(pwdConfigAddr, (uint8_t*)Credentials.Password, pwdMaxLength);
 8004920:	4b13      	ldr	r3, [pc, #76]	@ (8004970 <getWifiCred+0x60>)
 8004922:	4814      	ldr	r0, [pc, #80]	@ (8004974 <getWifiCred+0x64>)
 8004924:	2240      	movs	r2, #64	@ 0x40
 8004926:	0019      	movs	r1, r3
 8004928:	f007 fba4 	bl	800c074 <ReadUint8ArrayEEprom>
  if ((Credentials.SSID[0] == 0) || (Credentials.Password[0] == 0)) {
 800492c:	4b0e      	ldr	r3, [pc, #56]	@ (8004968 <getWifiCred+0x58>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <getWifiCred+0x2e>
 8004934:	4b0c      	ldr	r3, [pc, #48]	@ (8004968 <getWifiCred+0x58>)
 8004936:	2220      	movs	r2, #32
 8004938:	5c9b      	ldrb	r3, [r3, r2]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d105      	bne.n	800494a <getWifiCred+0x3a>
    Error("Wifi credentials not found, reprogram or connect to PC and type Helpme");
 800493e:	4a0e      	ldr	r2, [pc, #56]	@ (8004978 <getWifiCred+0x68>)
 8004940:	4b0e      	ldr	r3, [pc, #56]	@ (800497c <getWifiCred+0x6c>)
 8004942:	0019      	movs	r1, r3
 8004944:	2001      	movs	r0, #1
 8004946:	f00f fa43 	bl	8013dd0 <CreateLine>
  }
  Info("The SSID is: %s", Credentials.SSID);
 800494a:	4b07      	ldr	r3, [pc, #28]	@ (8004968 <getWifiCred+0x58>)
 800494c:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <getWifiCred+0x70>)
 800494e:	490d      	ldr	r1, [pc, #52]	@ (8004984 <getWifiCred+0x74>)
 8004950:	2002      	movs	r0, #2
 8004952:	f00f fa3d 	bl	8013dd0 <CreateLine>
  Info("The Password is: %s", Credentials.Password);
 8004956:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <getWifiCred+0x60>)
 8004958:	4a0b      	ldr	r2, [pc, #44]	@ (8004988 <getWifiCred+0x78>)
 800495a:	490a      	ldr	r1, [pc, #40]	@ (8004984 <getWifiCred+0x74>)
 800495c:	2002      	movs	r0, #2
 800495e:	f00f fa37 	bl	8013dd0 <CreateLine>
}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	200006a0 	.word	0x200006a0
 800496c:	08080200 	.word	0x08080200
 8004970:	200006c0 	.word	0x200006c0
 8004974:	08080220 	.word	0x08080220
 8004978:	0802a8a8 	.word	0x0802a8a8
 800497c:	0802a8f0 	.word	0x0802a8f0
 8004980:	0802a8f4 	.word	0x0802a8f4
 8004984:	0802a904 	.word	0x0802a904
 8004988:	0802a908 	.word	0x0802a908

0800498c <checkName>:
  }
  test = (configSum == 0);
  return test;
}

bool checkName(){
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004992:	4b15      	ldr	r3, [pc, #84]	@ (80049e8 <checkName+0x5c>)
 8004994:	4815      	ldr	r0, [pc, #84]	@ (80049ec <checkName+0x60>)
 8004996:	2220      	movs	r2, #32
 8004998:	0019      	movs	r1, r3
 800499a:	f007 fb6b 	bl	800c074 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800499e:	1dfb      	adds	r3, r7, #7
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e00e      	b.n	80049c4 <checkName+0x38>
    configSum += nameConfig[i];
 80049a6:	1dfb      	adds	r3, r7, #7
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	4a0f      	ldr	r2, [pc, #60]	@ (80049e8 <checkName+0x5c>)
 80049ac:	5cd3      	ldrb	r3, [r2, r3]
 80049ae:	001a      	movs	r2, r3
 80049b0:	4b0f      	ldr	r3, [pc, #60]	@ (80049f0 <checkName+0x64>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	18d2      	adds	r2, r2, r3
 80049b6:	4b0e      	ldr	r3, [pc, #56]	@ (80049f0 <checkName+0x64>)
 80049b8:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049ba:	1dfb      	adds	r3, r7, #7
 80049bc:	781a      	ldrb	r2, [r3, #0]
 80049be:	1dfb      	adds	r3, r7, #7
 80049c0:	3201      	adds	r2, #1
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	1dfb      	adds	r3, r7, #7
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b0b      	cmp	r3, #11
 80049ca:	d9ec      	bls.n	80049a6 <checkName+0x1a>
  }
  test = (configSum != 0);
 80049cc:	4b08      	ldr	r3, [pc, #32]	@ (80049f0 <checkName+0x64>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	4193      	sbcs	r3, r2
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <checkName+0x68>)
 80049d8:	701a      	strb	r2, [r3, #0]
  return test;
 80049da:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <checkName+0x68>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
}
 80049de:	0018      	movs	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b002      	add	sp, #8
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	20000768 	.word	0x20000768
 80049ec:	08080090 	.word	0x08080090
 80049f0:	20000788 	.word	0x20000788
 80049f4:	2000078c 	.word	0x2000078c

080049f8 <setModePowerMail>:

#ifdef USE_MAIL
void setModePowerMail() {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08c      	sub	sp, #48	@ 0x30
 80049fc:	af00      	add	r7, sp, #0
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80049fe:	003b      	movs	r3, r7
 8004a00:	4814      	ldr	r0, [pc, #80]	@ (8004a54 <setModePowerMail+0x5c>)
 8004a02:	2230      	movs	r2, #48	@ 0x30
 8004a04:	0019      	movs	r1, r3
 8004a06:	f007 fb35 	bl	800c074 <ReadUint8ArrayEEprom>
  if ( strlen((char*)MailAPIKeyConfig) == 0) {
 8004a0a:	003b      	movs	r3, r7
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <setModePowerMail+0x28>
    Error("No mail API key defined");
 8004a12:	4a11      	ldr	r2, [pc, #68]	@ (8004a58 <setModePowerMail+0x60>)
 8004a14:	4b11      	ldr	r3, [pc, #68]	@ (8004a5c <setModePowerMail+0x64>)
 8004a16:	0019      	movs	r1, r3
 8004a18:	2001      	movs	r0, #1
 8004a1a:	f00f f9d9 	bl	8013dd0 <CreateLine>
 8004a1e:	e015      	b.n	8004a4c <setModePowerMail+0x54>
    return;
  }
//  Debug("Powermail is forced.");
  sendpwremail = DO_PWR_MAIL;
 8004a20:	4b0f      	ldr	r3, [pc, #60]	@ (8004a60 <setModePowerMail+0x68>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	701a      	strb	r2, [r3, #0]
  Mode = AT_MODE_MAIL;
 8004a26:	4b0f      	ldr	r3, [pc, #60]	@ (8004a64 <setModePowerMail+0x6c>)
 8004a28:	2206      	movs	r2, #6
 8004a2a:	701a      	strb	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <setModePowerMail+0x70>)
 8004a2e:	2202      	movs	r2, #2
 8004a30:	701a      	strb	r2, [r3, #0]
  savedESPTimeStamp = ESPTimeStamp;
 8004a32:	4b0e      	ldr	r3, [pc, #56]	@ (8004a6c <setModePowerMail+0x74>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b0e      	ldr	r3, [pc, #56]	@ (8004a70 <setModePowerMail+0x78>)
 8004a38:	601a      	str	r2, [r3, #0]
  ESPTimeStamp = 0;
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <setModePowerMail+0x74>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
  sendpwrmaildate = getDate();
 8004a40:	f005 f942 	bl	8009cc8 <getDate>
 8004a44:	0003      	movs	r3, r0
 8004a46:	001a      	movs	r2, r3
 8004a48:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <setModePowerMail+0x7c>)
 8004a4a:	701a      	strb	r2, [r3, #0]
}
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b00c      	add	sp, #48	@ 0x30
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	080802c0 	.word	0x080802c0
 8004a58:	0802a91c 	.word	0x0802a91c
 8004a5c:	0802a8f0 	.word	0x0802a8f0
 8004a60:	200010f9 	.word	0x200010f9
 8004a64:	20000702 	.word	0x20000702
 8004a68:	20000030 	.word	0x20000030
 8004a6c:	20000694 	.word	0x20000694
 8004a70:	2000002c 	.word	0x2000002c
 8004a74:	20001110 	.word	0x20001110

08004a78 <pwrmailTodaySend>:

void pwrmailTodaySend() {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  if (sendpwrmaildate != getDate()) {
 8004a7c:	f005 f924 	bl	8009cc8 <getDate>
 8004a80:	0003      	movs	r3, r0
 8004a82:	001a      	movs	r2, r3
 8004a84:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <pwrmailTodaySend+0x20>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d002      	beq.n	8004a92 <pwrmailTodaySend+0x1a>
    sendpwremail = CLEAR;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	@ (8004a9c <pwrmailTodaySend+0x24>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]
  }
}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20001110 	.word	0x20001110
 8004a9c:	200010f9 	.word	0x200010f9

08004aa0 <setHIDS>:
#endif

void setHIDS(float temp, float humid){
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004aaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <setHIDS+0x20>)
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	@ (8004ac0 <setHIDS+0x20>)
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b002      	add	sp, #8
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	20000704 	.word	0x20000704

08004ac4 <setVOC>:

void setVOC(uint16_t voc) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	0002      	movs	r2, r0
 8004acc:	1dbb      	adds	r3, r7, #6
 8004ace:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004ad0:	4b04      	ldr	r3, [pc, #16]	@ (8004ae4 <setVOC+0x20>)
 8004ad2:	1dba      	adds	r2, r7, #6
 8004ad4:	2148      	movs	r1, #72	@ 0x48
 8004ad6:	8812      	ldrh	r2, [r2, #0]
 8004ad8:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b002      	add	sp, #8
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	20000704 	.word	0x20000704

08004ae8 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <setAHT2x+0x20>)
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	639a      	str	r2, [r3, #56]	@ 0x38
//  if (airhum > MeasVal.AHT2x_humiditymax) {
//    MeasVal.AHT2x_humiditymax = airhum;
//  }
  MeasVal.AHT2x_temperature = airtemp;
 8004af8:	4b03      	ldr	r3, [pc, #12]	@ (8004b08 <setAHT2x+0x20>)
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	63da      	str	r2, [r3, #60]	@ 0x3c
//  if (airtemp > MeasVal.AHT2x_temperaturemax) {
//    MeasVal.AHT2x_temperaturemax = airtemp;
//  }
}
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b002      	add	sp, #8
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			@ (mov r8, r8)
 8004b08:	20000704 	.word	0x20000704

08004b0c <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004b16:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <setBMP280+0x20>)
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40
//  if (airtemp > MeasVal.BMP280_temperaturemax) {
//    MeasVal.BMP280_temperaturemax = airtemp;
//  }
  MeasVal.BMP280_airpressure = airhpa;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	@ (8004b2c <setBMP280+0x20>)
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	645a      	str	r2, [r3, #68]	@ 0x44
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b002      	add	sp, #8
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			@ (mov r8, r8)
 8004b2c:	20000704 	.word	0x20000704

08004b30 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	0004      	movs	r4, r0
 8004b38:	0008      	movs	r0, r1
 8004b3a:	0011      	movs	r1, r2
 8004b3c:	1dfb      	adds	r3, r7, #7
 8004b3e:	1c22      	adds	r2, r4, #0
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	1d3b      	adds	r3, r7, #4
 8004b44:	1c02      	adds	r2, r0, #0
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	1cbb      	adds	r3, r7, #2
 8004b4a:	1c0a      	adds	r2, r1, #0
 8004b4c:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ba4 <setENS160+0x74>)
 8004b50:	1dfa      	adds	r2, r7, #7
 8004b52:	2154      	movs	r1, #84	@ 0x54
 8004b54:	7812      	ldrb	r2, [r2, #0]
 8004b56:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b58:	4b12      	ldr	r3, [pc, #72]	@ (8004ba4 <setENS160+0x74>)
 8004b5a:	2255      	movs	r2, #85	@ 0x55
 8004b5c:	5c9b      	ldrb	r3, [r3, r2]
 8004b5e:	1dfa      	adds	r2, r7, #7
 8004b60:	7812      	ldrb	r2, [r2, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d904      	bls.n	8004b70 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b66:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba4 <setENS160+0x74>)
 8004b68:	1dfa      	adds	r2, r7, #7
 8004b6a:	2155      	movs	r1, #85	@ 0x55
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba4 <setENS160+0x74>)
 8004b72:	1d3a      	adds	r2, r7, #4
 8004b74:	214a      	movs	r1, #74	@ 0x4a
 8004b76:	8812      	ldrh	r2, [r2, #0]
 8004b78:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <setENS160+0x74>)
 8004b7c:	1cba      	adds	r2, r7, #2
 8004b7e:	2150      	movs	r1, #80	@ 0x50
 8004b80:	8812      	ldrh	r2, [r2, #0]
 8004b82:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b84:	4b07      	ldr	r3, [pc, #28]	@ (8004ba4 <setENS160+0x74>)
 8004b86:	2252      	movs	r2, #82	@ 0x52
 8004b88:	5a9b      	ldrh	r3, [r3, r2]
 8004b8a:	1cba      	adds	r2, r7, #2
 8004b8c:	8812      	ldrh	r2, [r2, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d904      	bls.n	8004b9c <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b92:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <setENS160+0x74>)
 8004b94:	1cba      	adds	r2, r7, #2
 8004b96:	2152      	movs	r1, #82	@ 0x52
 8004b98:	8812      	ldrh	r2, [r2, #0]
 8004b9a:	525a      	strh	r2, [r3, r1]
  }
}
 8004b9c:	46c0      	nop			@ (mov r8, r8)
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b003      	add	sp, #12
 8004ba2:	bd90      	pop	{r4, r7, pc}
 8004ba4:	20000704 	.word	0x20000704

08004ba8 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004bb4:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <setMic+0x28>)
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004bba:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <setMic+0x28>)
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004bc0:	4b03      	ldr	r3, [pc, #12]	@ (8004bd0 <setMic+0x28>)
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b004      	add	sp, #16
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	46c0      	nop			@ (mov r8, r8)
 8004bd0:	20000704 	.word	0x20000704

08004bd4 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	0002      	movs	r2, r0
 8004bdc:	1dbb      	adds	r3, r7, #6
 8004bde:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004be0:	1dbb      	adds	r3, r7, #6
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7fc fe1f 	bl	8001828 <__aeabi_i2f>
 8004bea:	1c03      	adds	r3, r0, #0
 8004bec:	490d      	ldr	r1, [pc, #52]	@ (8004c24 <setPM1p0+0x50>)
 8004bee:	1c18      	adds	r0, r3, #0
 8004bf0:	f7fc f858 	bl	8000ca4 <__aeabi_fdiv>
 8004bf4:	1c03      	adds	r3, r0, #0
 8004bf6:	1c1a      	adds	r2, r3, #0
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <setPM1p0+0x54>)
 8004bfa:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c28 <setPM1p0+0x54>)
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	4b09      	ldr	r3, [pc, #36]	@ (8004c28 <setPM1p0+0x54>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	1c19      	adds	r1, r3, #0
 8004c06:	1c10      	adds	r0, r2, #0
 8004c08:	f7fb fca6 	bl	8000558 <__aeabi_fcmpgt>
 8004c0c:	1e03      	subs	r3, r0, #0
 8004c0e:	d100      	bne.n	8004c12 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c10:	e003      	b.n	8004c1a <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c12:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <setPM1p0+0x54>)
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	4b04      	ldr	r3, [pc, #16]	@ (8004c28 <setPM1p0+0x54>)
 8004c18:	60da      	str	r2, [r3, #12]
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	41200000 	.word	0x41200000
 8004c28:	20000704 	.word	0x20000704

08004c2c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	0002      	movs	r2, r0
 8004c34:	1dbb      	adds	r3, r7, #6
 8004c36:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004c38:	1dbb      	adds	r3, r7, #6
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f7fc fdf3 	bl	8001828 <__aeabi_i2f>
 8004c42:	1c03      	adds	r3, r0, #0
 8004c44:	490d      	ldr	r1, [pc, #52]	@ (8004c7c <setPM2p5+0x50>)
 8004c46:	1c18      	adds	r0, r3, #0
 8004c48:	f7fc f82c 	bl	8000ca4 <__aeabi_fdiv>
 8004c4c:	1c03      	adds	r3, r0, #0
 8004c4e:	1c1a      	adds	r2, r3, #0
 8004c50:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <setPM2p5+0x54>)
 8004c52:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c54:	4b0a      	ldr	r3, [pc, #40]	@ (8004c80 <setPM2p5+0x54>)
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	4b09      	ldr	r3, [pc, #36]	@ (8004c80 <setPM2p5+0x54>)
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	1c19      	adds	r1, r3, #0
 8004c5e:	1c10      	adds	r0, r2, #0
 8004c60:	f7fb fc7a 	bl	8000558 <__aeabi_fcmpgt>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d100      	bne.n	8004c6a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c68:	e003      	b.n	8004c72 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c6a:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <setPM2p5+0x54>)
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	4b04      	ldr	r3, [pc, #16]	@ (8004c80 <setPM2p5+0x54>)
 8004c70:	615a      	str	r2, [r3, #20]
}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b002      	add	sp, #8
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	41200000 	.word	0x41200000
 8004c80:	20000704 	.word	0x20000704

08004c84 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	1dbb      	adds	r3, r7, #6
 8004c8e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004c90:	1dbb      	adds	r3, r7, #6
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	0018      	movs	r0, r3
 8004c96:	f7fc fdc7 	bl	8001828 <__aeabi_i2f>
 8004c9a:	1c03      	adds	r3, r0, #0
 8004c9c:	490d      	ldr	r1, [pc, #52]	@ (8004cd4 <setPM4p0+0x50>)
 8004c9e:	1c18      	adds	r0, r3, #0
 8004ca0:	f7fc f800 	bl	8000ca4 <__aeabi_fdiv>
 8004ca4:	1c03      	adds	r3, r0, #0
 8004ca6:	1c1a      	adds	r2, r3, #0
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <setPM4p0+0x54>)
 8004caa:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004cac:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <setPM4p0+0x54>)
 8004cae:	699a      	ldr	r2, [r3, #24]
 8004cb0:	4b09      	ldr	r3, [pc, #36]	@ (8004cd8 <setPM4p0+0x54>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	1c19      	adds	r1, r3, #0
 8004cb6:	1c10      	adds	r0, r2, #0
 8004cb8:	f7fb fc4e 	bl	8000558 <__aeabi_fcmpgt>
 8004cbc:	1e03      	subs	r3, r0, #0
 8004cbe:	d100      	bne.n	8004cc2 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004cc0:	e003      	b.n	8004cca <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004cc2:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <setPM4p0+0x54>)
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	4b04      	ldr	r3, [pc, #16]	@ (8004cd8 <setPM4p0+0x54>)
 8004cc8:	61da      	str	r2, [r3, #28]
}
 8004cca:	46c0      	nop			@ (mov r8, r8)
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b002      	add	sp, #8
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	41200000 	.word	0x41200000
 8004cd8:	20000704 	.word	0x20000704

08004cdc <setPM10>:

void setPM10(uint16_t PM10) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	1dbb      	adds	r3, r7, #6
 8004ce6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004ce8:	1dbb      	adds	r3, r7, #6
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7fc fd9b 	bl	8001828 <__aeabi_i2f>
 8004cf2:	1c03      	adds	r3, r0, #0
 8004cf4:	490d      	ldr	r1, [pc, #52]	@ (8004d2c <setPM10+0x50>)
 8004cf6:	1c18      	adds	r0, r3, #0
 8004cf8:	f7fb ffd4 	bl	8000ca4 <__aeabi_fdiv>
 8004cfc:	1c03      	adds	r3, r0, #0
 8004cfe:	1c1a      	adds	r2, r3, #0
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <setPM10+0x54>)
 8004d02:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004d04:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <setPM10+0x54>)
 8004d06:	6a1a      	ldr	r2, [r3, #32]
 8004d08:	4b09      	ldr	r3, [pc, #36]	@ (8004d30 <setPM10+0x54>)
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0c:	1c19      	adds	r1, r3, #0
 8004d0e:	1c10      	adds	r0, r2, #0
 8004d10:	f7fb fc22 	bl	8000558 <__aeabi_fcmpgt>
 8004d14:	1e03      	subs	r3, r0, #0
 8004d16:	d100      	bne.n	8004d1a <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d18:	e003      	b.n	8004d22 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d1a:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <setPM10+0x54>)
 8004d1c:	6a1a      	ldr	r2, [r3, #32]
 8004d1e:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <setPM10+0x54>)
 8004d20:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b002      	add	sp, #8
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	41200000 	.word	0x41200000
 8004d30:	20000704 	.word	0x20000704

08004d34 <setNOx>:

void setNOx(uint16_t nox) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	0002      	movs	r2, r0
 8004d3c:	1dbb      	adds	r3, r7, #6
 8004d3e:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	@ (8004d6c <setNOx+0x38>)
 8004d42:	1dba      	adds	r2, r7, #6
 8004d44:	214c      	movs	r1, #76	@ 0x4c
 8004d46:	8812      	ldrh	r2, [r2, #0]
 8004d48:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d4a:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <setNOx+0x38>)
 8004d4c:	224e      	movs	r2, #78	@ 0x4e
 8004d4e:	5a9b      	ldrh	r3, [r3, r2]
 8004d50:	1dba      	adds	r2, r7, #6
 8004d52:	8812      	ldrh	r2, [r2, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d904      	bls.n	8004d62 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d58:	4b04      	ldr	r3, [pc, #16]	@ (8004d6c <setNOx+0x38>)
 8004d5a:	1dba      	adds	r2, r7, #6
 8004d5c:	214e      	movs	r1, #78	@ 0x4e
 8004d5e:	8812      	ldrh	r2, [r2, #0]
 8004d60:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b002      	add	sp, #8
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	20000704 	.word	0x20000704

08004d70 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004d7a:	490a      	ldr	r1, [pc, #40]	@ (8004da4 <SetSEN545temphum+0x34>)
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7fb ff91 	bl	8000ca4 <__aeabi_fdiv>
 8004d82:	1c03      	adds	r3, r0, #0
 8004d84:	1c1a      	adds	r2, r3, #0
 8004d86:	4b08      	ldr	r3, [pc, #32]	@ (8004da8 <SetSEN545temphum+0x38>)
 8004d88:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004d8a:	4908      	ldr	r1, [pc, #32]	@ (8004dac <SetSEN545temphum+0x3c>)
 8004d8c:	6838      	ldr	r0, [r7, #0]
 8004d8e:	f7fb ff89 	bl	8000ca4 <__aeabi_fdiv>
 8004d92:	1c03      	adds	r3, r0, #0
 8004d94:	1c1a      	adds	r2, r3, #0
 8004d96:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <SetSEN545temphum+0x38>)
 8004d98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	46c0      	nop			@ (mov r8, r8)
 8004da4:	43480000 	.word	0x43480000
 8004da8:	20000704 	.word	0x20000704
 8004dac:	42c80000 	.word	0x42c80000

08004db0 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004db4:	f009 fbb2 	bl	800e51c <sen5x_Get_sen5x_enable_state>
 8004db8:	1e03      	subs	r3, r0, #0
 8004dba:	d00f      	beq.n	8004ddc <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <resetMaxMeasurementValues+0x44>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004df4 <resetMaxMeasurementValues+0x44>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004df4 <resetMaxMeasurementValues+0x44>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004dce:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <resetMaxMeasurementValues+0x44>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004dd4:	4b07      	ldr	r3, [pc, #28]	@ (8004df4 <resetMaxMeasurementValues+0x44>)
 8004dd6:	224e      	movs	r2, #78	@ 0x4e
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5299      	strh	r1, [r3, r2]
  }
//  MeasVal.AHT2x_humiditymax = 0.0;
//  MeasVal.AHT2x_temperaturemax = 0.0;
//  MeasVal.BMP280_temperaturemax = 0.0;
//  MeasVal.BMP280_airpressuremax = 0.0;
  MeasVal.eCO2Indexmax = 0;
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <resetMaxMeasurementValues+0x44>)
 8004dde:	2252      	movs	r2, #82	@ 0x52
 8004de0:	2100      	movs	r1, #0
 8004de2:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004de4:	4b03      	ldr	r3, [pc, #12]	@ (8004df4 <resetMaxMeasurementValues+0x44>)
 8004de6:	2255      	movs	r2, #85	@ 0x55
 8004de8:	2100      	movs	r1, #0
 8004dea:	5499      	strb	r1, [r3, r2]
}
 8004dec:	46c0      	nop			@ (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	20000704 	.word	0x20000704

08004df8 <SetConfigMode>:

void SetConfigMode(){
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e28 <SetConfigMode+0x30>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2201      	movs	r2, #1
 8004e02:	4053      	eors	r3, r2
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004e0a:	4a08      	ldr	r2, [pc, #32]	@ (8004e2c <SetConfigMode+0x34>)
 8004e0c:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <SetConfigMode+0x38>)
 8004e0e:	0019      	movs	r1, r3
 8004e10:	2003      	movs	r0, #3
 8004e12:	f00e ffdd 	bl	8013dd0 <CreateLine>
  }
  ReconfigSet = true;
 8004e16:	4b04      	ldr	r3, [pc, #16]	@ (8004e28 <SetConfigMode+0x30>)
 8004e18:	2201      	movs	r2, #1
 8004e1a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <SetConfigMode+0x3c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
}
 8004e22:	46c0      	nop			@ (mov r8, r8)
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	200005af 	.word	0x200005af
 8004e2c:	0802a934 	.word	0x0802a934
 8004e30:	0802a954 	.word	0x0802a954
 8004e34:	200010f7 	.word	0x200010f7

08004e38 <GetReconfigMode>:

bool GetReconfigMode() {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e3c:	4b02      	ldr	r3, [pc, #8]	@ (8004e48 <GetReconfigMode+0x10>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
}
 8004e40:	0018      	movs	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			@ (mov r8, r8)
 8004e48:	200005af 	.word	0x200005af

08004e4c <ESP_Init>:
  uid[1] = HAL_GetUIDw1();
  uid[2] = HAL_GetUIDw2();
}
#endif

void ESP_Init(UART_HandleTypeDef* espUart) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004e54:	4b04      	ldr	r3, [pc, #16]	@ (8004e68 <ESP_Init+0x1c>)
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004e5a:	4b04      	ldr	r3, [pc, #16]	@ (8004e6c <ESP_Init+0x20>)
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	701a      	strb	r2, [r3, #0]
#ifndef OPENSENSEMAP
  ESP_GetUID();
#endif
//  beurs = checkEEprom();
}
 8004e60:	46c0      	nop			@ (mov r8, r8)
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b002      	add	sp, #8
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	200004a4 	.word	0x200004a4
 8004e6c:	20000030 	.word	0x20000030

08004e70 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004e70:	b5b0      	push	{r4, r5, r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	000a      	movs	r2, r1
 8004e7a:	1cbb      	adds	r3, r7, #2
 8004e7c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004e7e:	4b27      	ldr	r3, [pc, #156]	@ (8004f1c <ESP_Send+0xac>)
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	250f      	movs	r5, #15
 8004e84:	197c      	adds	r4, r7, r5
 8004e86:	1cbb      	adds	r3, r7, #2
 8004e88:	881a      	ldrh	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	f018 fbc7 	bl	801d620 <HAL_UART_Transmit_DMA>
 8004e92:	0003      	movs	r3, r0
 8004e94:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004e96:	197b      	adds	r3, r7, r5
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004e9e:	4a20      	ldr	r2, [pc, #128]	@ (8004f20 <ESP_Send+0xb0>)
 8004ea0:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <ESP_Send+0xb4>)
 8004ea2:	0019      	movs	r1, r3
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	f00e ff93 	bl	8013dd0 <CreateLine>
    return false;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e032      	b.n	8004f14 <ESP_Send+0xa4>
  }
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004eae:	1cbb      	adds	r3, r7, #2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	2b5a      	cmp	r3, #90	@ 0x5a
 8004eb4:	d927      	bls.n	8004f06 <ESP_Send+0x96>
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f28 <ESP_Send+0xb8>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d023      	beq.n	8004f06 <ESP_Send+0x96>
 8004ebe:	f004 fe4d 	bl	8009b5c <Check_USB_PowerOn>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d01f      	beq.n	8004f06 <ESP_Send+0x96>
    char splitchar;
    splitchar = command[SPLIT_POS];
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	334c      	adds	r3, #76	@ 0x4c
 8004eca:	001a      	movs	r2, r3
 8004ecc:	240e      	movs	r4, #14
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	701a      	strb	r2, [r3, #0]
    command[SPLIT_POS] = '\0';
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	334c      	adds	r3, #76	@ 0x4c
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
//    printf_USB((char*)"ESP_Send: ");
    printf_USB((char*)command);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f003 fd82 	bl	80089e8 <printf_USB>
    command[SPLIT_POS] = splitchar;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	334c      	adds	r3, #76	@ 0x4c
 8004ee8:	193a      	adds	r2, r7, r4
 8004eea:	7812      	ldrb	r2, [r2, #0]
 8004eec:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)&command[SPLIT_POS]);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	334c      	adds	r3, #76	@ 0x4c
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f003 fd78 	bl	80089e8 <printf_USB>
    printf("ESP_Send: %s", command);
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	4b0c      	ldr	r3, [pc, #48]	@ (8004f2c <ESP_Send+0xbc>)
 8004efc:	0011      	movs	r1, r2
 8004efe:	0018      	movs	r0, r3
 8004f00:	f021 f920 	bl	8026144 <iprintf>
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004f04:	e005      	b.n	8004f12 <ESP_Send+0xa2>
  }
  else
    Debug("ESP_Send: %s", command);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a08      	ldr	r2, [pc, #32]	@ (8004f2c <ESP_Send+0xbc>)
 8004f0a:	4909      	ldr	r1, [pc, #36]	@ (8004f30 <ESP_Send+0xc0>)
 8004f0c:	2003      	movs	r0, #3
 8004f0e:	f00e ff5f 	bl	8013dd0 <CreateLine>
  return true;
 8004f12:	2301      	movs	r3, #1
}
 8004f14:	0018      	movs	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b004      	add	sp, #16
 8004f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1c:	200004a4 	.word	0x200004a4
 8004f20:	0802a958 	.word	0x0802a958
 8004f24:	0802a8f0 	.word	0x0802a8f0
 8004f28:	200010f7 	.word	0x200010f7
 8004f2c:	0802a978 	.word	0x0802a978
 8004f30:	0802a954 	.word	0x0802a954

08004f34 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f36:	b08b      	sub	sp, #44	@ 0x2c
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	000a      	movs	r2, r1
 8004f3e:	1cbb      	adds	r3, r7, #2
 8004f40:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004f42:	4b6c      	ldr	r3, [pc, #432]	@ (80050f4 <ESP_Receive+0x1c0>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004f48:	2627      	movs	r6, #39	@ 0x27
 8004f4a:	19bb      	adds	r3, r7, r6
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004f50:	4b69      	ldr	r3, [pc, #420]	@ (80050f8 <ESP_Receive+0x1c4>)
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	2525      	movs	r5, #37	@ 0x25
 8004f56:	197c      	adds	r4, r7, r5
 8004f58:	1cbb      	adds	r3, r7, #2
 8004f5a:	881a      	ldrh	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	0019      	movs	r1, r3
 8004f60:	f018 fbee 	bl	801d740 <HAL_UART_Receive_DMA>
 8004f64:	0003      	movs	r3, r0
 8004f66:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f68:	197b      	adds	r3, r7, r5
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d100      	bne.n	8004f72 <ESP_Receive+0x3e>
 8004f70:	e0ba      	b.n	80050e8 <ESP_Receive+0x1b4>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f72:	4b61      	ldr	r3, [pc, #388]	@ (80050f8 <ESP_Receive+0x1c4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2284      	movs	r2, #132	@ 0x84
 8004f78:	589b      	ldr	r3, [r3, r2]
 8004f7a:	4a60      	ldr	r2, [pc, #384]	@ (80050fc <ESP_Receive+0x1c8>)
 8004f7c:	4960      	ldr	r1, [pc, #384]	@ (8005100 <ESP_Receive+0x1cc>)
 8004f7e:	2001      	movs	r0, #1
 8004f80:	f00e ff26 	bl	8013dd0 <CreateLine>
#ifndef SMALLBUILD
    char uartespmod[] =" error in UART to ESP module";
 8004f84:	2308      	movs	r3, #8
 8004f86:	18fb      	adds	r3, r7, r3
 8004f88:	4a5e      	ldr	r2, [pc, #376]	@ (8005104 <ESP_Receive+0x1d0>)
 8004f8a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f8c:	c313      	stmia	r3!, {r0, r1, r4}
 8004f8e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f90:	c313      	stmia	r3!, {r0, r1, r4}
 8004f92:	6811      	ldr	r1, [r2, #0]
 8004f94:	6019      	str	r1, [r3, #0]
 8004f96:	7912      	ldrb	r2, [r2, #4]
 8004f98:	711a      	strb	r2, [r3, #4]
    if (status & HAL_UART_ERROR_PE) {
 8004f9a:	197b      	adds	r3, r7, r5
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <ESP_Receive+0x84>
      Error("Parity%s", uartespmod);
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	4a57      	ldr	r2, [pc, #348]	@ (8005108 <ESP_Receive+0x1d4>)
 8004faa:	4955      	ldr	r1, [pc, #340]	@ (8005100 <ESP_Receive+0x1cc>)
 8004fac:	2001      	movs	r0, #1
 8004fae:	f00e ff0f 	bl	8013dd0 <CreateLine>
      reset = true;
 8004fb2:	19bb      	adds	r3, r7, r6
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004fb8:	2325      	movs	r3, #37	@ 0x25
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d00a      	beq.n	8004fda <ESP_Receive+0xa6>
      Error("Noise%s", uartespmod);
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	4a50      	ldr	r2, [pc, #320]	@ (800510c <ESP_Receive+0x1d8>)
 8004fca:	494d      	ldr	r1, [pc, #308]	@ (8005100 <ESP_Receive+0x1cc>)
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f00e feff 	bl	8013dd0 <CreateLine>
      reset = true;
 8004fd2:	2327      	movs	r3, #39	@ 0x27
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_FE) {
 8004fda:	2325      	movs	r3, #37	@ 0x25
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d006      	beq.n	8004ff4 <ESP_Receive+0xc0>
      Error("Frame%s", uartespmod);
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	4a49      	ldr	r2, [pc, #292]	@ (8005110 <ESP_Receive+0x1dc>)
 8004fec:	4944      	ldr	r1, [pc, #272]	@ (8005100 <ESP_Receive+0x1cc>)
 8004fee:	2001      	movs	r0, #1
 8004ff0:	f00e feee 	bl	8013dd0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004ff4:	2325      	movs	r3, #37	@ 0x25
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d006      	beq.n	800500e <ESP_Receive+0xda>
      Error("Overrun%s", uartespmod);
 8005000:	2308      	movs	r3, #8
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	4a43      	ldr	r2, [pc, #268]	@ (8005114 <ESP_Receive+0x1e0>)
 8005006:	493e      	ldr	r1, [pc, #248]	@ (8005100 <ESP_Receive+0x1cc>)
 8005008:	2001      	movs	r0, #1
 800500a:	f00e fee1 	bl	8013dd0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 800500e:	2325      	movs	r3, #37	@ 0x25
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2210      	movs	r2, #16
 8005016:	4013      	ands	r3, r2
 8005018:	d006      	beq.n	8005028 <ESP_Receive+0xf4>
      Error("DMA transfer%s", uartespmod);
 800501a:	2308      	movs	r3, #8
 800501c:	18fb      	adds	r3, r7, r3
 800501e:	4a3e      	ldr	r2, [pc, #248]	@ (8005118 <ESP_Receive+0x1e4>)
 8005020:	4937      	ldr	r1, [pc, #220]	@ (8005100 <ESP_Receive+0x1cc>)
 8005022:	2001      	movs	r0, #1
 8005024:	f00e fed4 	bl	8013dd0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8005028:	2325      	movs	r3, #37	@ 0x25
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2220      	movs	r2, #32
 8005030:	4013      	ands	r3, r2
 8005032:	d006      	beq.n	8005042 <ESP_Receive+0x10e>
      Error("Receiver Timeout%s", uartespmod);
 8005034:	2308      	movs	r3, #8
 8005036:	18fb      	adds	r3, r7, r3
 8005038:	4a38      	ldr	r2, [pc, #224]	@ (800511c <ESP_Receive+0x1e8>)
 800503a:	4931      	ldr	r1, [pc, #196]	@ (8005100 <ESP_Receive+0x1cc>)
 800503c:	2001      	movs	r0, #1
 800503e:	f00e fec7 	bl	8013dd0 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8005042:	2325      	movs	r3, #37	@ 0x25
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2240      	movs	r2, #64	@ 0x40
 800504a:	4013      	ands	r3, r2
 800504c:	d006      	beq.n	800505c <ESP_Receive+0x128>
      Error("Invalid Callback%s", uartespmod);
 800504e:	2308      	movs	r3, #8
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	4a33      	ldr	r2, [pc, #204]	@ (8005120 <ESP_Receive+0x1ec>)
 8005054:	492a      	ldr	r1, [pc, #168]	@ (8005100 <ESP_Receive+0x1cc>)
 8005056:	2001      	movs	r0, #1
 8005058:	f00e feba 	bl	8013dd0 <CreateLine>
    }
#endif
    if (reset) {
 800505c:	2327      	movs	r3, #39	@ 0x27
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d03b      	beq.n	80050de <ESP_Receive+0x1aa>
      //switch off the ESP and reset the system
//      HAL_UART_Abort_IT(EspUart);
//      HAL_UART_DMAStop(EspUart);
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005066:	4b2f      	ldr	r3, [pc, #188]	@ (8005124 <ESP_Receive+0x1f0>)
 8005068:	2200      	movs	r2, #0
 800506a:	2101      	movs	r1, #1
 800506c:	0018      	movs	r0, r3
 800506e:	f010 fe9a 	bl	8015da6 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8005072:	200a      	movs	r0, #10
 8005074:	f00f fc2e 	bl	80148d4 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	482a      	ldr	r0, [pc, #168]	@ (8005128 <ESP_Receive+0x1f4>)
 800507e:	2200      	movs	r2, #0
 8005080:	0019      	movs	r1, r3
 8005082:	f010 fe90 	bl	8015da6 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8005086:	200a      	movs	r0, #10
 8005088:	f00f fc24 	bl	80148d4 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800508c:	4b25      	ldr	r3, [pc, #148]	@ (8005124 <ESP_Receive+0x1f0>)
 800508e:	2200      	movs	r2, #0
 8005090:	2102      	movs	r1, #2
 8005092:	0018      	movs	r0, r3
 8005094:	f010 fe87 	bl	8015da6 <HAL_GPIO_WritePin>
//      HAL_UART_DMAStop(EspUart);
      // line below from: https://stackoverflow.com/questions/71287996/stm32-uart-in-dma-mode-stops-receiving-after-receiving-from-a-host-with-wrong-ba
      UART_Start_Receive_DMA(EspUart, EspUart->pRxBuffPtr, EspUart->RxXferSize);
 8005098:	4b17      	ldr	r3, [pc, #92]	@ (80050f8 <ESP_Receive+0x1c4>)
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	4b16      	ldr	r3, [pc, #88]	@ (80050f8 <ESP_Receive+0x1c4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80050a2:	4b15      	ldr	r3, [pc, #84]	@ (80050f8 <ESP_Receive+0x1c4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2258      	movs	r2, #88	@ 0x58
 80050a8:	5a9b      	ldrh	r3, [r3, r2]
 80050aa:	001a      	movs	r2, r3
 80050ac:	f019 fc40 	bl	801e930 <UART_Start_Receive_DMA>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 80050b0:	2326      	movs	r3, #38	@ 0x26
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e00a      	b.n	80050d0 <ESP_Receive+0x19c>
        SetAllREDLED();
 80050ba:	f00d fcff 	bl	8012abc <SetAllREDLED>
        HAL_Delay(100);
 80050be:	2064      	movs	r0, #100	@ 0x64
 80050c0:	f00f fc08 	bl	80148d4 <HAL_Delay>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 80050c4:	2126      	movs	r1, #38	@ 0x26
 80050c6:	187b      	adds	r3, r7, r1
 80050c8:	781a      	ldrb	r2, [r3, #0]
 80050ca:	187b      	adds	r3, r7, r1
 80050cc:	3201      	adds	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	2326      	movs	r3, #38	@ 0x26
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b09      	cmp	r3, #9
 80050d8:	d9ef      	bls.n	80050ba <ESP_Receive+0x186>
      }
      HAL_NVIC_SystemReset();
 80050da:	f010 f89c 	bl	8015216 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 80050de:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <ESP_Receive+0x1c0>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
    return false;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <ESP_Receive+0x1b6>
#endif
  }
  return true;
 80050e8:	2301      	movs	r3, #1
}
 80050ea:	0018      	movs	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b00b      	add	sp, #44	@ 0x2c
 80050f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	200004a8 	.word	0x200004a8
 80050f8:	200004a4 	.word	0x200004a4
 80050fc:	0802a988 	.word	0x0802a988
 8005100:	0802a8f0 	.word	0x0802a8f0
 8005104:	0802aa18 	.word	0x0802aa18
 8005108:	0802a9b8 	.word	0x0802a9b8
 800510c:	0802a9c4 	.word	0x0802a9c4
 8005110:	0802a9cc 	.word	0x0802a9cc
 8005114:	0802a9d4 	.word	0x0802a9d4
 8005118:	0802a9e0 	.word	0x0802a9e0
 800511c:	0802a9f0 	.word	0x0802a9f0
 8005120:	0802aa04 	.word	0x0802aa04
 8005124:	50001c00 	.word	0x50001c00
 8005128:	50000800 	.word	0x50000800

0800512c <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b093      	sub	sp, #76	@ 0x4c
 8005130:	af02      	add	r7, sp, #8
 8005132:	6078      	str	r0, [r7, #4]
  char espconnuart[] = "ESP connection UART ";
 8005134:	2328      	movs	r3, #40	@ 0x28
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	4a6b      	ldr	r2, [pc, #428]	@ (80052e8 <HAL_UART_ErrorCallback+0x1bc>)
 800513a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800513c:	c313      	stmia	r3!, {r0, r1, r4}
 800513e:	ca03      	ldmia	r2!, {r0, r1}
 8005140:	c303      	stmia	r3!, {r0, r1}
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	701a      	strb	r2, [r3, #0]
  char comcalb[] = " Complete";
 8005146:	231c      	movs	r3, #28
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	4a68      	ldr	r2, [pc, #416]	@ (80052ec <HAL_UART_ErrorCallback+0x1c0>)
 800514c:	ca03      	ldmia	r2!, {r0, r1}
 800514e:	c303      	stmia	r3!, {r0, r1}
 8005150:	8812      	ldrh	r2, [r2, #0]
 8005152:	801a      	strh	r2, [r3, #0]
  char cid[] = " Callback ID";
 8005154:	230c      	movs	r3, #12
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	4a65      	ldr	r2, [pc, #404]	@ (80052f0 <HAL_UART_ErrorCallback+0x1c4>)
 800515a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800515c:	c313      	stmia	r3!, {r0, r1, r4}
 800515e:	7812      	ldrb	r2, [r2, #0]
 8005160:	701a      	strb	r2, [r3, #0]
  if (huart == EspUart) {
 8005162:	4b64      	ldr	r3, [pc, #400]	@ (80052f4 <HAL_UART_ErrorCallback+0x1c8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d000      	beq.n	800516e <HAL_UART_ErrorCallback+0x42>
 800516c:	e0b9      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
    if (huart->ErrorCode == 4) {
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2284      	movs	r2, #132	@ 0x84
 8005172:	589b      	ldr	r3, [r3, r2]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d100      	bne.n	800517a <HAL_UART_ErrorCallback+0x4e>
 8005178:	e0b2      	b.n	80052e0 <HAL_UART_ErrorCallback+0x1b4>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2284      	movs	r2, #132	@ 0x84
 800517e:	589b      	ldr	r3, [r3, r2]
 8005180:	4a5d      	ldr	r2, [pc, #372]	@ (80052f8 <HAL_UART_ErrorCallback+0x1cc>)
 8005182:	495e      	ldr	r1, [pc, #376]	@ (80052fc <HAL_UART_ErrorCallback+0x1d0>)
 8005184:	2003      	movs	r0, #3
 8005186:	f00e fe23 	bl	8013dd0 <CreateLine>
    switch (huart->ErrorCode) {
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2284      	movs	r2, #132	@ 0x84
 800518e:	589b      	ldr	r3, [r3, r2]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	d900      	bls.n	8005196 <HAL_UART_ErrorCallback+0x6a>
 8005194:	e09d      	b.n	80052d2 <HAL_UART_ErrorCallback+0x1a6>
 8005196:	009a      	lsls	r2, r3, #2
 8005198:	4b59      	ldr	r3, [pc, #356]	@ (8005300 <HAL_UART_ErrorCallback+0x1d4>)
 800519a:	18d3      	adds	r3, r2, r3
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("%sTx Half%s%s", espconnuart, comcalb, cid);
 80051a0:	2328      	movs	r3, #40	@ 0x28
 80051a2:	18f8      	adds	r0, r7, r3
 80051a4:	4a57      	ldr	r2, [pc, #348]	@ (8005304 <HAL_UART_ErrorCallback+0x1d8>)
 80051a6:	4958      	ldr	r1, [pc, #352]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 80051a8:	230c      	movs	r3, #12
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	231c      	movs	r3, #28
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	0003      	movs	r3, r0
 80051b6:	2001      	movs	r0, #1
 80051b8:	f00e fe0a 	bl	8013dd0 <CreateLine>
        break;
 80051bc:	e091      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("%sTx%s%s", espconnuart, comcalb, cid);
 80051be:	2328      	movs	r3, #40	@ 0x28
 80051c0:	18f8      	adds	r0, r7, r3
 80051c2:	4a52      	ldr	r2, [pc, #328]	@ (800530c <HAL_UART_ErrorCallback+0x1e0>)
 80051c4:	4950      	ldr	r1, [pc, #320]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 80051c6:	230c      	movs	r3, #12
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	231c      	movs	r3, #28
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	0003      	movs	r3, r0
 80051d4:	2001      	movs	r0, #1
 80051d6:	f00e fdfb 	bl	8013dd0 <CreateLine>
        break;
 80051da:	e082      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("%sRx Half%s%s", espconnuart, comcalb, cid);
 80051dc:	2328      	movs	r3, #40	@ 0x28
 80051de:	18f8      	adds	r0, r7, r3
 80051e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005310 <HAL_UART_ErrorCallback+0x1e4>)
 80051e2:	4949      	ldr	r1, [pc, #292]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 80051e4:	230c      	movs	r3, #12
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	231c      	movs	r3, #28
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	0003      	movs	r3, r0
 80051f2:	2001      	movs	r0, #1
 80051f4:	f00e fdec 	bl	8013dd0 <CreateLine>
        break;
 80051f8:	e073      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("%sRx%s%s", espconnuart, comcalb, cid);
 80051fa:	2328      	movs	r3, #40	@ 0x28
 80051fc:	18f8      	adds	r0, r7, r3
 80051fe:	4a45      	ldr	r2, [pc, #276]	@ (8005314 <HAL_UART_ErrorCallback+0x1e8>)
 8005200:	4941      	ldr	r1, [pc, #260]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 8005202:	230c      	movs	r3, #12
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	231c      	movs	r3, #28
 800520a:	18fb      	adds	r3, r7, r3
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	0003      	movs	r3, r0
 8005210:	2001      	movs	r0, #1
 8005212:	f00e fddd 	bl	8013dd0 <CreateLine>
        break;
 8005216:	e064      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ERROR_CB_ID:
        Error("%sError%s", espconnuart, cid);
 8005218:	2328      	movs	r3, #40	@ 0x28
 800521a:	18f8      	adds	r0, r7, r3
 800521c:	4a3e      	ldr	r2, [pc, #248]	@ (8005318 <HAL_UART_ErrorCallback+0x1ec>)
 800521e:	493a      	ldr	r1, [pc, #232]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 8005220:	230c      	movs	r3, #12
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	0003      	movs	r3, r0
 8005228:	2001      	movs	r0, #1
 800522a:	f00e fdd1 	bl	8013dd0 <CreateLine>
        break;
 800522e:	e058      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("%sAbort%s%s", espconnuart, comcalb, cid);
 8005230:	2328      	movs	r3, #40	@ 0x28
 8005232:	18f8      	adds	r0, r7, r3
 8005234:	4a39      	ldr	r2, [pc, #228]	@ (800531c <HAL_UART_ErrorCallback+0x1f0>)
 8005236:	4934      	ldr	r1, [pc, #208]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 8005238:	230c      	movs	r3, #12
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	231c      	movs	r3, #28
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	0003      	movs	r3, r0
 8005246:	2001      	movs	r0, #1
 8005248:	f00e fdc2 	bl	8013dd0 <CreateLine>
        break;
 800524c:	e049      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("%sAbort Transmit%s%s", espconnuart, comcalb, cid);
 800524e:	2328      	movs	r3, #40	@ 0x28
 8005250:	18f8      	adds	r0, r7, r3
 8005252:	4a33      	ldr	r2, [pc, #204]	@ (8005320 <HAL_UART_ErrorCallback+0x1f4>)
 8005254:	492c      	ldr	r1, [pc, #176]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 8005256:	230c      	movs	r3, #12
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	231c      	movs	r3, #28
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	0003      	movs	r3, r0
 8005264:	2001      	movs	r0, #1
 8005266:	f00e fdb3 	bl	8013dd0 <CreateLine>
        break;
 800526a:	e03a      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("%sAbort Receive%s%s", espconnuart, comcalb, cid);
 800526c:	2328      	movs	r3, #40	@ 0x28
 800526e:	18f8      	adds	r0, r7, r3
 8005270:	4a2c      	ldr	r2, [pc, #176]	@ (8005324 <HAL_UART_ErrorCallback+0x1f8>)
 8005272:	4925      	ldr	r1, [pc, #148]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 8005274:	230c      	movs	r3, #12
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	231c      	movs	r3, #28
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	0003      	movs	r3, r0
 8005282:	2001      	movs	r0, #1
 8005284:	f00e fda4 	bl	8013dd0 <CreateLine>
        break;
 8005288:	e02b      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_WAKEUP_CB_ID:
        Error("%sWakeup%s", espconnuart, cid);
 800528a:	2328      	movs	r3, #40	@ 0x28
 800528c:	18f8      	adds	r0, r7, r3
 800528e:	4a26      	ldr	r2, [pc, #152]	@ (8005328 <HAL_UART_ErrorCallback+0x1fc>)
 8005290:	491d      	ldr	r1, [pc, #116]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 8005292:	230c      	movs	r3, #12
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	0003      	movs	r3, r0
 800529a:	2001      	movs	r0, #1
 800529c:	f00e fd98 	bl	8013dd0 <CreateLine>
        break;
 80052a0:	e01f      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_MSPINIT_CB_ID:
        Error("%sMspInit%s", espconnuart, cid);
 80052a2:	2328      	movs	r3, #40	@ 0x28
 80052a4:	18f8      	adds	r0, r7, r3
 80052a6:	4a21      	ldr	r2, [pc, #132]	@ (800532c <HAL_UART_ErrorCallback+0x200>)
 80052a8:	4917      	ldr	r1, [pc, #92]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 80052aa:	230c      	movs	r3, #12
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	0003      	movs	r3, r0
 80052b2:	2001      	movs	r0, #1
 80052b4:	f00e fd8c 	bl	8013dd0 <CreateLine>
        break;
 80052b8:	e013      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("%sMspDeInit%s", espconnuart, cid);
 80052ba:	2328      	movs	r3, #40	@ 0x28
 80052bc:	18f8      	adds	r0, r7, r3
 80052be:	4a1c      	ldr	r2, [pc, #112]	@ (8005330 <HAL_UART_ErrorCallback+0x204>)
 80052c0:	4911      	ldr	r1, [pc, #68]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 80052c2:	230c      	movs	r3, #12
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	0003      	movs	r3, r0
 80052ca:	2001      	movs	r0, #1
 80052cc:	f00e fd80 	bl	8013dd0 <CreateLine>
        break;
 80052d0:	e007      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      default:
        Error("%sUnknown error");
 80052d2:	4a18      	ldr	r2, [pc, #96]	@ (8005334 <HAL_UART_ErrorCallback+0x208>)
 80052d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <HAL_UART_ErrorCallback+0x1dc>)
 80052d6:	0019      	movs	r1, r3
 80052d8:	2001      	movs	r0, #1
 80052da:	f00e fd79 	bl	8013dd0 <CreateLine>
 80052de:	e000      	b.n	80052e2 <HAL_UART_ErrorCallback+0x1b6>
      return;
 80052e0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b011      	add	sp, #68	@ 0x44
 80052e6:	bd90      	pop	{r4, r7, pc}
 80052e8:	0802ab1c 	.word	0x0802ab1c
 80052ec:	0802ab34 	.word	0x0802ab34
 80052f0:	0802ab40 	.word	0x0802ab40
 80052f4:	200004a4 	.word	0x200004a4
 80052f8:	0802aa38 	.word	0x0802aa38
 80052fc:	0802a954 	.word	0x0802a954
 8005300:	0802dd0c 	.word	0x0802dd0c
 8005304:	0802aa68 	.word	0x0802aa68
 8005308:	0802a8f0 	.word	0x0802a8f0
 800530c:	0802aa78 	.word	0x0802aa78
 8005310:	0802aa84 	.word	0x0802aa84
 8005314:	0802aa94 	.word	0x0802aa94
 8005318:	0802aaa0 	.word	0x0802aaa0
 800531c:	0802aaac 	.word	0x0802aaac
 8005320:	0802aab8 	.word	0x0802aab8
 8005324:	0802aad0 	.word	0x0802aad0
 8005328:	0802aae4 	.word	0x0802aae4
 800532c:	0802aaf0 	.word	0x0802aaf0
 8005330:	0802aafc 	.word	0x0802aafc
 8005334:	0802ab0c 	.word	0x0802ab0c

08005338 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b42      	cmp	r3, #66	@ 0x42
 800534a:	d905      	bls.n	8005358 <isKeyValid+0x20>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2bff      	cmp	r3, #255	@ 0xff
 8005352:	d001      	beq.n	8005358 <isKeyValid+0x20>
    return true;
 8005354:	2301      	movs	r3, #1
 8005356:	e03e      	b.n	80053d6 <isKeyValid+0x9e>
  else {
    Error("Error sensor %s has no stored key for %s: ", sensormodel, sensortype);
 8005358:	68b8      	ldr	r0, [r7, #8]
 800535a:	4a21      	ldr	r2, [pc, #132]	@ (80053e0 <isKeyValid+0xa8>)
 800535c:	4921      	ldr	r1, [pc, #132]	@ (80053e4 <isKeyValid+0xac>)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	0003      	movs	r3, r0
 8005364:	2001      	movs	r0, #1
 8005366:	f00e fd33 	bl	8013dd0 <CreateLine>
    for (int i = 0; i < 12; i++) {
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	e01e      	b.n	80053ae <isKeyValid+0x76>
      if (usblog && Check_USB_PowerOn()) {
 8005370:	4b1d      	ldr	r3, [pc, #116]	@ (80053e8 <isKeyValid+0xb0>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <isKeyValid+0x5c>
 8005378:	f004 fbf0 	bl	8009b5c <Check_USB_PowerOn>
 800537c:	1e03      	subs	r3, r0, #0
 800537e:	d009      	beq.n	8005394 <isKeyValid+0x5c>
        printf_USB("%02x", data[i]);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	18d3      	adds	r3, r2, r3
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	001a      	movs	r2, r3
 800538a:	4b18      	ldr	r3, [pc, #96]	@ (80053ec <isKeyValid+0xb4>)
 800538c:	0011      	movs	r1, r2
 800538e:	0018      	movs	r0, r3
 8005390:	f003 fb2a 	bl	80089e8 <printf_USB>
      }
      printf("%02x", data[i]);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	18d3      	adds	r3, r2, r3
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	001a      	movs	r2, r3
 800539e:	4b13      	ldr	r3, [pc, #76]	@ (80053ec <isKeyValid+0xb4>)
 80053a0:	0011      	movs	r1, r2
 80053a2:	0018      	movs	r0, r3
 80053a4:	f020 fece 	bl	8026144 <iprintf>
    for (int i = 0; i < 12; i++) {
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3301      	adds	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b0b      	cmp	r3, #11
 80053b2:	dddd      	ble.n	8005370 <isKeyValid+0x38>
    }
    if (usblog && Check_USB_PowerOn()) {
 80053b4:	4b0c      	ldr	r3, [pc, #48]	@ (80053e8 <isKeyValid+0xb0>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <isKeyValid+0x94>
 80053bc:	f004 fbce 	bl	8009b5c <Check_USB_PowerOn>
 80053c0:	1e03      	subs	r3, r0, #0
 80053c2:	d003      	beq.n	80053cc <isKeyValid+0x94>
      printf_USB("\r\n");
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <isKeyValid+0xb8>)
 80053c6:	0018      	movs	r0, r3
 80053c8:	f003 fb0e 	bl	80089e8 <printf_USB>
    }
    printf("\r\n");
 80053cc:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <isKeyValid+0xbc>)
 80053ce:	0018      	movs	r0, r3
 80053d0:	f020 ff1e 	bl	8026210 <puts>
    return false;
 80053d4:	2300      	movs	r3, #0
  }
}
 80053d6:	0018      	movs	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	b006      	add	sp, #24
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	0802ab50 	.word	0x0802ab50
 80053e4:	0802a8f0 	.word	0x0802a8f0
 80053e8:	200010f7 	.word	0x200010f7
 80053ec:	0802ab7c 	.word	0x0802ab7c
 80053f0:	0802ab84 	.word	0x0802ab84
 80053f4:	0802ab88 	.word	0x0802ab88

080053f8 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e010      	b.n	800542a <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	001a      	movs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	1898      	adds	r0, r3, r2
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	18d3      	adds	r3, r2, r3
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	001a      	movs	r2, r3
 800541c:	4b07      	ldr	r3, [pc, #28]	@ (800543c <uint8ArrayToString+0x44>)
 800541e:	0019      	movs	r1, r3
 8005420:	f020 ff00 	bl	8026224 <siprintf>
  for (int i = 0; i < 12; i++) {
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b0b      	cmp	r3, #11
 800542e:	ddeb      	ble.n	8005408 <uint8ArrayToString+0x10>
  }
}
 8005430:	46c0      	nop			@ (mov r8, r8)
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b004      	add	sp, #16
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	0802ab7c 	.word	0x0802ab7c

08005440 <CreateMailMessage>:

#ifdef USE_MAIL
uint16_t CreateMailMessage(bool *txstat, bool send) {
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b087      	sub	sp, #28
 8005444:	af02      	add	r7, sp, #8
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	000a      	movs	r2, r1
 800544a:	1cfb      	adds	r3, r7, #3
 800544c:	701a      	strb	r2, [r3, #0]
  static bool status = false;
  static bool retstat = true;
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint8_t SendFromnameConfig[SendFromNameMaxLength];
  static uint8_t SendTonameConfig[SendToNameMaxLength];
  uint16_t lngth = 0;
 800544e:	240e      	movs	r4, #14
 8005450:	193b      	adds	r3, r7, r4
 8005452:	2200      	movs	r2, #0
 8005454:	801a      	strh	r2, [r3, #0]
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005456:	4b41      	ldr	r3, [pc, #260]	@ (800555c <CreateMailMessage+0x11c>)
 8005458:	4841      	ldr	r0, [pc, #260]	@ (8005560 <CreateMailMessage+0x120>)
 800545a:	2220      	movs	r2, #32
 800545c:	0019      	movs	r1, r3
 800545e:	f006 fe09 	bl	800c074 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 8005462:	4b40      	ldr	r3, [pc, #256]	@ (8005564 <CreateMailMessage+0x124>)
 8005464:	4840      	ldr	r0, [pc, #256]	@ (8005568 <CreateMailMessage+0x128>)
 8005466:	2230      	movs	r2, #48	@ 0x30
 8005468:	0019      	movs	r1, r3
 800546a:	f006 fe03 	bl	800c074 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 800546e:	4b3f      	ldr	r3, [pc, #252]	@ (800556c <CreateMailMessage+0x12c>)
 8005470:	483f      	ldr	r0, [pc, #252]	@ (8005570 <CreateMailMessage+0x130>)
 8005472:	2230      	movs	r2, #48	@ 0x30
 8005474:	0019      	movs	r1, r3
 8005476:	f006 fdfd 	bl	800c074 <ReadUint8ArrayEEprom>
  sprintf(message, "{\r\n\"sender\": \"%s\",\r\n\"to\": [\r\n\"%s\"\r\n],\r\n\"subject\": \"Battery status\",\r\n", (char*)SendFromnameConfig, (char*)SendTonameConfig);
 800547a:	4b3c      	ldr	r3, [pc, #240]	@ (800556c <CreateMailMessage+0x12c>)
 800547c:	4a39      	ldr	r2, [pc, #228]	@ (8005564 <CreateMailMessage+0x124>)
 800547e:	493d      	ldr	r1, [pc, #244]	@ (8005574 <CreateMailMessage+0x134>)
 8005480:	483d      	ldr	r0, [pc, #244]	@ (8005578 <CreateMailMessage+0x138>)
 8005482:	f020 fecf 	bl	8026224 <siprintf>
  lngth = strlen(message);
 8005486:	4b3c      	ldr	r3, [pc, #240]	@ (8005578 <CreateMailMessage+0x138>)
 8005488:	0018      	movs	r0, r3
 800548a:	f7fa fe6f 	bl	800016c <strlen>
 800548e:	0002      	movs	r2, r0
 8005490:	193b      	adds	r3, r7, r4
 8005492:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005494:	1cfb      	adds	r3, r7, #3
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d019      	beq.n	80054d0 <CreateMailMessage+0x90>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800549c:	4b36      	ldr	r3, [pc, #216]	@ (8005578 <CreateMailMessage+0x138>)
 800549e:	0018      	movs	r0, r3
 80054a0:	f7fa fe64 	bl	800016c <strlen>
 80054a4:	0003      	movs	r3, r0
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	4b33      	ldr	r3, [pc, #204]	@ (8005578 <CreateMailMessage+0x138>)
 80054aa:	0011      	movs	r1, r2
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7ff fcdf 	bl	8004e70 <ESP_Send>
 80054b2:	0003      	movs	r3, r0
 80054b4:	001a      	movs	r2, r3
 80054b6:	4b31      	ldr	r3, [pc, #196]	@ (800557c <CreateMailMessage+0x13c>)
 80054b8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80054ba:	4b31      	ldr	r3, [pc, #196]	@ (8005580 <CreateMailMessage+0x140>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	001a      	movs	r2, r3
 80054c0:	4b2e      	ldr	r3, [pc, #184]	@ (800557c <CreateMailMessage+0x13c>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	4013      	ands	r3, r2
 80054c6:	1e5a      	subs	r2, r3, #1
 80054c8:	4193      	sbcs	r3, r2
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005580 <CreateMailMessage+0x140>)
 80054ce:	701a      	strb	r2, [r3, #0]
  }
  sprintf(message, "\"text_body\": \"Battery of device %s is nearly empty. Actual voltage is %.2fV\"\r\n}\r\n", (char*)nameConfig, ReadBatteryVoltage());
 80054d0:	f004 fa8e 	bl	80099f0 <ReadBatteryVoltage>
 80054d4:	1c03      	adds	r3, r0, #0
 80054d6:	1c18      	adds	r0, r3, #0
 80054d8:	f7fe f9dc 	bl	8003894 <__aeabi_f2d>
 80054dc:	0002      	movs	r2, r0
 80054de:	000b      	movs	r3, r1
 80054e0:	4c1e      	ldr	r4, [pc, #120]	@ (800555c <CreateMailMessage+0x11c>)
 80054e2:	4928      	ldr	r1, [pc, #160]	@ (8005584 <CreateMailMessage+0x144>)
 80054e4:	4824      	ldr	r0, [pc, #144]	@ (8005578 <CreateMailMessage+0x138>)
 80054e6:	9200      	str	r2, [sp, #0]
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	0022      	movs	r2, r4
 80054ec:	f020 fe9a 	bl	8026224 <siprintf>
  lngth += strlen(message);
 80054f0:	4b21      	ldr	r3, [pc, #132]	@ (8005578 <CreateMailMessage+0x138>)
 80054f2:	0018      	movs	r0, r3
 80054f4:	f7fa fe3a 	bl	800016c <strlen>
 80054f8:	0003      	movs	r3, r0
 80054fa:	b299      	uxth	r1, r3
 80054fc:	220e      	movs	r2, #14
 80054fe:	18bb      	adds	r3, r7, r2
 8005500:	18ba      	adds	r2, r7, r2
 8005502:	8812      	ldrh	r2, [r2, #0]
 8005504:	188a      	adds	r2, r1, r2
 8005506:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005508:	1cfb      	adds	r3, r7, #3
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d019      	beq.n	8005544 <CreateMailMessage+0x104>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005510:	4b19      	ldr	r3, [pc, #100]	@ (8005578 <CreateMailMessage+0x138>)
 8005512:	0018      	movs	r0, r3
 8005514:	f7fa fe2a 	bl	800016c <strlen>
 8005518:	0003      	movs	r3, r0
 800551a:	b29a      	uxth	r2, r3
 800551c:	4b16      	ldr	r3, [pc, #88]	@ (8005578 <CreateMailMessage+0x138>)
 800551e:	0011      	movs	r1, r2
 8005520:	0018      	movs	r0, r3
 8005522:	f7ff fca5 	bl	8004e70 <ESP_Send>
 8005526:	0003      	movs	r3, r0
 8005528:	001a      	movs	r2, r3
 800552a:	4b14      	ldr	r3, [pc, #80]	@ (800557c <CreateMailMessage+0x13c>)
 800552c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800552e:	4b14      	ldr	r3, [pc, #80]	@ (8005580 <CreateMailMessage+0x140>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	001a      	movs	r2, r3
 8005534:	4b11      	ldr	r3, [pc, #68]	@ (800557c <CreateMailMessage+0x13c>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	4013      	ands	r3, r2
 800553a:	1e5a      	subs	r2, r3, #1
 800553c:	4193      	sbcs	r3, r2
 800553e:	b2da      	uxtb	r2, r3
 8005540:	4b0f      	ldr	r3, [pc, #60]	@ (8005580 <CreateMailMessage+0x140>)
 8005542:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8005544:	4b0e      	ldr	r3, [pc, #56]	@ (8005580 <CreateMailMessage+0x140>)
 8005546:	781a      	ldrb	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	701a      	strb	r2, [r3, #0]
  return lngth;
 800554c:	230e      	movs	r3, #14
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	881b      	ldrh	r3, [r3, #0]
}
 8005552:	0018      	movs	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	b005      	add	sp, #20
 8005558:	bd90      	pop	{r4, r7, pc}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	20000790 	.word	0x20000790
 8005560:	08080090 	.word	0x08080090
 8005564:	200007b0 	.word	0x200007b0
 8005568:	08080260 	.word	0x08080260
 800556c:	200007e0 	.word	0x200007e0
 8005570:	08080290 	.word	0x08080290
 8005574:	0802ab8c 	.word	0x0802ab8c
 8005578:	200005c4 	.word	0x200005c4
 800557c:	20000810 	.word	0x20000810
 8005580:	20000031 	.word	0x20000031
 8005584:	0802abd4 	.word	0x0802abd4

08005588 <CreateMessage>:
#endif

uint16_t CreateMessage(bool *txstat, bool send) {
 8005588:	b5b0      	push	{r4, r5, r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af02      	add	r7, sp, #8
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	000a      	movs	r2, r1
 8005592:	1cfb      	adds	r3, r7, #3
 8005594:	701a      	strb	r2, [r3, #0]
  static char uptimeBuf[14];
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 8005596:	f7ff f9f9 	bl	800498c <checkName>
 800559a:	1e03      	subs	r3, r0, #0
 800559c:	d00a      	beq.n	80055b4 <CreateMessage+0x2c>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800559e:	4b03      	ldr	r3, [pc, #12]	@ (80055ac <CreateMessage+0x24>)
 80055a0:	4803      	ldr	r0, [pc, #12]	@ (80055b0 <CreateMessage+0x28>)
 80055a2:	2220      	movs	r2, #32
 80055a4:	0019      	movs	r1, r3
 80055a6:	f006 fd65 	bl	800c074 <ReadUint8ArrayEEprom>
 80055aa:	e009      	b.n	80055c0 <CreateMessage+0x38>
 80055ac:	20000814 	.word	0x20000814
 80055b0:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 80055b4:	4bed      	ldr	r3, [pc, #948]	@ (800596c <CreateMessage+0x3e4>)
 80055b6:	4aee      	ldr	r2, [pc, #952]	@ (8005970 <CreateMessage+0x3e8>)
 80055b8:	6811      	ldr	r1, [r2, #0]
 80055ba:	6019      	str	r1, [r3, #0]
 80055bc:	7912      	ldrb	r2, [r2, #4]
 80055be:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 80055c0:	f7ff f982 	bl	80048c8 <setCharges>
  uint16_t index = 0;
 80055c4:	250e      	movs	r5, #14
 80055c6:	197b      	adds	r3, r7, r5
 80055c8:	2200      	movs	r2, #0
 80055ca:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80055cc:	197b      	adds	r3, r7, r5
 80055ce:	881a      	ldrh	r2, [r3, #0]
 80055d0:	4be8      	ldr	r3, [pc, #928]	@ (8005974 <CreateMessage+0x3ec>)
 80055d2:	18d3      	adds	r3, r2, r3
 80055d4:	4ae8      	ldr	r2, [pc, #928]	@ (8005978 <CreateMessage+0x3f0>)
 80055d6:	0011      	movs	r1, r2
 80055d8:	0018      	movs	r0, r3
 80055da:	f020 fe23 	bl	8026224 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 80055de:	4be7      	ldr	r3, [pc, #924]	@ (800597c <CreateMessage+0x3f4>)
 80055e0:	48e7      	ldr	r0, [pc, #924]	@ (8005980 <CreateMessage+0x3f8>)
 80055e2:	220c      	movs	r2, #12
 80055e4:	0019      	movs	r1, r3
 80055e6:	f006 fd45 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055ea:	4ae4      	ldr	r2, [pc, #912]	@ (800597c <CreateMessage+0x3f4>)
 80055ec:	4be5      	ldr	r3, [pc, #916]	@ (8005984 <CreateMessage+0x3fc>)
 80055ee:	0011      	movs	r1, r2
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7ff ff01 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
 80055f6:	4be4      	ldr	r3, [pc, #912]	@ (8005988 <CreateMessage+0x400>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	1c18      	adds	r0, r3, #0
 80055fc:	f7fe f94a 	bl	8003894 <__aeabi_f2d>
 8005600:	0002      	movs	r2, r0
 8005602:	000b      	movs	r3, r1
 8005604:	4cdf      	ldr	r4, [pc, #892]	@ (8005984 <CreateMessage+0x3fc>)
 8005606:	49e1      	ldr	r1, [pc, #900]	@ (800598c <CreateMessage+0x404>)
 8005608:	48e1      	ldr	r0, [pc, #900]	@ (8005990 <CreateMessage+0x408>)
 800560a:	9200      	str	r2, [sp, #0]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	0022      	movs	r2, r4
 8005610:	f020 fe08 	bl	8026224 <siprintf>
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
#endif
index = strlen(message);
 8005614:	4bd7      	ldr	r3, [pc, #860]	@ (8005974 <CreateMessage+0x3ec>)
 8005616:	0018      	movs	r0, r3
 8005618:	f7fa fda8 	bl	800016c <strlen>
 800561c:	0002      	movs	r2, r0
 800561e:	197b      	adds	r3, r7, r5
 8005620:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005622:	1cfb      	adds	r3, r7, #3
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d019      	beq.n	800565e <CreateMessage+0xd6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800562a:	4bd2      	ldr	r3, [pc, #840]	@ (8005974 <CreateMessage+0x3ec>)
 800562c:	0018      	movs	r0, r3
 800562e:	f7fa fd9d 	bl	800016c <strlen>
 8005632:	0003      	movs	r3, r0
 8005634:	b29a      	uxth	r2, r3
 8005636:	4bcf      	ldr	r3, [pc, #828]	@ (8005974 <CreateMessage+0x3ec>)
 8005638:	0011      	movs	r1, r2
 800563a:	0018      	movs	r0, r3
 800563c:	f7ff fc18 	bl	8004e70 <ESP_Send>
 8005640:	0003      	movs	r3, r0
 8005642:	001a      	movs	r2, r3
 8005644:	4bd3      	ldr	r3, [pc, #844]	@ (8005994 <CreateMessage+0x40c>)
 8005646:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005648:	4bd3      	ldr	r3, [pc, #844]	@ (8005998 <CreateMessage+0x410>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	001a      	movs	r2, r3
 800564e:	4bd1      	ldr	r3, [pc, #836]	@ (8005994 <CreateMessage+0x40c>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	4013      	ands	r3, r2
 8005654:	1e5a      	subs	r2, r3, #1
 8005656:	4193      	sbcs	r3, r2
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4bcf      	ldr	r3, [pc, #828]	@ (8005998 <CreateMessage+0x410>)
 800565c:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 800565e:	4bc7      	ldr	r3, [pc, #796]	@ (800597c <CreateMessage+0x3f4>)
 8005660:	48ce      	ldr	r0, [pc, #824]	@ (800599c <CreateMessage+0x414>)
 8005662:	220c      	movs	r2, #12
 8005664:	0019      	movs	r1, r3
 8005666:	f006 fd05 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800566a:	4ac4      	ldr	r2, [pc, #784]	@ (800597c <CreateMessage+0x3f4>)
 800566c:	4bc5      	ldr	r3, [pc, #788]	@ (8005984 <CreateMessage+0x3fc>)
 800566e:	0011      	movs	r1, r2
 8005670:	0018      	movs	r0, r3
 8005672:	f7ff fec1 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
 8005676:	4bc4      	ldr	r3, [pc, #784]	@ (8005988 <CreateMessage+0x400>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	1c18      	adds	r0, r3, #0
 800567c:	f7fe f90a 	bl	8003894 <__aeabi_f2d>
 8005680:	0002      	movs	r2, r0
 8005682:	000b      	movs	r3, r1
 8005684:	4cbf      	ldr	r4, [pc, #764]	@ (8005984 <CreateMessage+0x3fc>)
 8005686:	49c6      	ldr	r1, [pc, #792]	@ (80059a0 <CreateMessage+0x418>)
 8005688:	48ba      	ldr	r0, [pc, #744]	@ (8005974 <CreateMessage+0x3ec>)
 800568a:	9200      	str	r2, [sp, #0]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	0022      	movs	r2, r4
 8005690:	f020 fdc8 	bl	8026224 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
#endif
  index += strlen(message);
 8005694:	4bb7      	ldr	r3, [pc, #732]	@ (8005974 <CreateMessage+0x3ec>)
 8005696:	0018      	movs	r0, r3
 8005698:	f7fa fd68 	bl	800016c <strlen>
 800569c:	0003      	movs	r3, r0
 800569e:	b299      	uxth	r1, r3
 80056a0:	220e      	movs	r2, #14
 80056a2:	18bb      	adds	r3, r7, r2
 80056a4:	18ba      	adds	r2, r7, r2
 80056a6:	8812      	ldrh	r2, [r2, #0]
 80056a8:	188a      	adds	r2, r1, r2
 80056aa:	801a      	strh	r2, [r3, #0]
  if (send) {
 80056ac:	1cfb      	adds	r3, r7, #3
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d019      	beq.n	80056e8 <CreateMessage+0x160>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80056b4:	4baf      	ldr	r3, [pc, #700]	@ (8005974 <CreateMessage+0x3ec>)
 80056b6:	0018      	movs	r0, r3
 80056b8:	f7fa fd58 	bl	800016c <strlen>
 80056bc:	0003      	movs	r3, r0
 80056be:	b29a      	uxth	r2, r3
 80056c0:	4bac      	ldr	r3, [pc, #688]	@ (8005974 <CreateMessage+0x3ec>)
 80056c2:	0011      	movs	r1, r2
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7ff fbd3 	bl	8004e70 <ESP_Send>
 80056ca:	0003      	movs	r3, r0
 80056cc:	001a      	movs	r2, r3
 80056ce:	4bb1      	ldr	r3, [pc, #708]	@ (8005994 <CreateMessage+0x40c>)
 80056d0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80056d2:	4bb1      	ldr	r3, [pc, #708]	@ (8005998 <CreateMessage+0x410>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	001a      	movs	r2, r3
 80056d8:	4bae      	ldr	r3, [pc, #696]	@ (8005994 <CreateMessage+0x40c>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	4013      	ands	r3, r2
 80056de:	1e5a      	subs	r2, r3, #1
 80056e0:	4193      	sbcs	r3, r2
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	4bac      	ldr	r3, [pc, #688]	@ (8005998 <CreateMessage+0x410>)
 80056e6:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 80056e8:	4ba4      	ldr	r3, [pc, #656]	@ (800597c <CreateMessage+0x3f4>)
 80056ea:	48ae      	ldr	r0, [pc, #696]	@ (80059a4 <CreateMessage+0x41c>)
 80056ec:	220c      	movs	r2, #12
 80056ee:	0019      	movs	r1, r3
 80056f0:	f006 fcc0 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80056f4:	4aa1      	ldr	r2, [pc, #644]	@ (800597c <CreateMessage+0x3f4>)
 80056f6:	4ba3      	ldr	r3, [pc, #652]	@ (8005984 <CreateMessage+0x3fc>)
 80056f8:	0011      	movs	r1, r2
 80056fa:	0018      	movs	r0, r3
 80056fc:	f7ff fe7c 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
 8005700:	4ba1      	ldr	r3, [pc, #644]	@ (8005988 <CreateMessage+0x400>)
 8005702:	2248      	movs	r2, #72	@ 0x48
 8005704:	5a9b      	ldrh	r3, [r3, r2]
 8005706:	4a9f      	ldr	r2, [pc, #636]	@ (8005984 <CreateMessage+0x3fc>)
 8005708:	49a7      	ldr	r1, [pc, #668]	@ (80059a8 <CreateMessage+0x420>)
 800570a:	489a      	ldr	r0, [pc, #616]	@ (8005974 <CreateMessage+0x3ec>)
 800570c:	f020 fd8a 	bl	8026224 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
#endif
  index += strlen(message);
 8005710:	4b98      	ldr	r3, [pc, #608]	@ (8005974 <CreateMessage+0x3ec>)
 8005712:	0018      	movs	r0, r3
 8005714:	f7fa fd2a 	bl	800016c <strlen>
 8005718:	0003      	movs	r3, r0
 800571a:	b299      	uxth	r1, r3
 800571c:	220e      	movs	r2, #14
 800571e:	18bb      	adds	r3, r7, r2
 8005720:	18ba      	adds	r2, r7, r2
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	188a      	adds	r2, r1, r2
 8005726:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005728:	1cfb      	adds	r3, r7, #3
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d019      	beq.n	8005764 <CreateMessage+0x1dc>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005730:	4b90      	ldr	r3, [pc, #576]	@ (8005974 <CreateMessage+0x3ec>)
 8005732:	0018      	movs	r0, r3
 8005734:	f7fa fd1a 	bl	800016c <strlen>
 8005738:	0003      	movs	r3, r0
 800573a:	b29a      	uxth	r2, r3
 800573c:	4b8d      	ldr	r3, [pc, #564]	@ (8005974 <CreateMessage+0x3ec>)
 800573e:	0011      	movs	r1, r2
 8005740:	0018      	movs	r0, r3
 8005742:	f7ff fb95 	bl	8004e70 <ESP_Send>
 8005746:	0003      	movs	r3, r0
 8005748:	001a      	movs	r2, r3
 800574a:	4b92      	ldr	r3, [pc, #584]	@ (8005994 <CreateMessage+0x40c>)
 800574c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800574e:	4b92      	ldr	r3, [pc, #584]	@ (8005998 <CreateMessage+0x410>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	001a      	movs	r2, r3
 8005754:	4b8f      	ldr	r3, [pc, #572]	@ (8005994 <CreateMessage+0x40c>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	4013      	ands	r3, r2
 800575a:	1e5a      	subs	r2, r3, #1
 800575c:	4193      	sbcs	r3, r2
 800575e:	b2da      	uxtb	r2, r3
 8005760:	4b8d      	ldr	r3, [pc, #564]	@ (8005998 <CreateMessage+0x410>)
 8005762:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(UptimeConfigAddr, keybuffer, IdSize);
 8005764:	4b85      	ldr	r3, [pc, #532]	@ (800597c <CreateMessage+0x3f4>)
 8005766:	4891      	ldr	r0, [pc, #580]	@ (80059ac <CreateMessage+0x424>)
 8005768:	220c      	movs	r2, #12
 800576a:	0019      	movs	r1, r3
 800576c:	f006 fc82 	bl	800c074 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Uptime", "dhhmm")) {
 8005770:	4a8f      	ldr	r2, [pc, #572]	@ (80059b0 <CreateMessage+0x428>)
 8005772:	4990      	ldr	r1, [pc, #576]	@ (80059b4 <CreateMessage+0x42c>)
 8005774:	4b81      	ldr	r3, [pc, #516]	@ (800597c <CreateMessage+0x3f4>)
 8005776:	0018      	movs	r0, r3
 8005778:	f7ff fdde 	bl	8005338 <isKeyValid>
 800577c:	1e03      	subs	r3, r0, #0
 800577e:	d039      	beq.n	80057f4 <CreateMessage+0x26c>
    uint8ArrayToString(Buffer, keybuffer);
 8005780:	4a7e      	ldr	r2, [pc, #504]	@ (800597c <CreateMessage+0x3f4>)
 8005782:	4b80      	ldr	r3, [pc, #512]	@ (8005984 <CreateMessage+0x3fc>)
 8005784:	0011      	movs	r1, r2
 8005786:	0018      	movs	r0, r3
 8005788:	f7ff fe36 	bl	80053f8 <uint8ArrayToString>
    getUptime(uptimeBuf);
 800578c:	4b8a      	ldr	r3, [pc, #552]	@ (80059b8 <CreateMessage+0x430>)
 800578e:	0018      	movs	r0, r3
 8005790:	f004 fa80 	bl	8009c94 <getUptime>

#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
 8005794:	4b88      	ldr	r3, [pc, #544]	@ (80059b8 <CreateMessage+0x430>)
 8005796:	4a7b      	ldr	r2, [pc, #492]	@ (8005984 <CreateMessage+0x3fc>)
 8005798:	4988      	ldr	r1, [pc, #544]	@ (80059bc <CreateMessage+0x434>)
 800579a:	4876      	ldr	r0, [pc, #472]	@ (8005974 <CreateMessage+0x3ec>)
 800579c:	f020 fd42 	bl	8026224 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"uptime\", \"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
#endif
    index += strlen(message);
 80057a0:	4b74      	ldr	r3, [pc, #464]	@ (8005974 <CreateMessage+0x3ec>)
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7fa fce2 	bl	800016c <strlen>
 80057a8:	0003      	movs	r3, r0
 80057aa:	b299      	uxth	r1, r3
 80057ac:	220e      	movs	r2, #14
 80057ae:	18bb      	adds	r3, r7, r2
 80057b0:	18ba      	adds	r2, r7, r2
 80057b2:	8812      	ldrh	r2, [r2, #0]
 80057b4:	188a      	adds	r2, r1, r2
 80057b6:	801a      	strh	r2, [r3, #0]
    if (send) {
 80057b8:	1cfb      	adds	r3, r7, #3
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d019      	beq.n	80057f4 <CreateMessage+0x26c>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80057c0:	4b6c      	ldr	r3, [pc, #432]	@ (8005974 <CreateMessage+0x3ec>)
 80057c2:	0018      	movs	r0, r3
 80057c4:	f7fa fcd2 	bl	800016c <strlen>
 80057c8:	0003      	movs	r3, r0
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	4b69      	ldr	r3, [pc, #420]	@ (8005974 <CreateMessage+0x3ec>)
 80057ce:	0011      	movs	r1, r2
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7ff fb4d 	bl	8004e70 <ESP_Send>
 80057d6:	0003      	movs	r3, r0
 80057d8:	001a      	movs	r2, r3
 80057da:	4b6e      	ldr	r3, [pc, #440]	@ (8005994 <CreateMessage+0x40c>)
 80057dc:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80057de:	4b6e      	ldr	r3, [pc, #440]	@ (8005998 <CreateMessage+0x410>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	001a      	movs	r2, r3
 80057e4:	4b6b      	ldr	r3, [pc, #428]	@ (8005994 <CreateMessage+0x40c>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	4013      	ands	r3, r2
 80057ea:	1e5a      	subs	r2, r3, #1
 80057ec:	4193      	sbcs	r3, r2
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	4b69      	ldr	r3, [pc, #420]	@ (8005998 <CreateMessage+0x410>)
 80057f2:	701a      	strb	r2, [r3, #0]
    }
  }

  if (IsBMP280SensorPresent()) {
 80057f4:	f007 fe08 	bl	800d408 <IsBMP280SensorPresent>
 80057f8:	1e03      	subs	r3, r0, #0
 80057fa:	d100      	bne.n	80057fe <CreateMessage+0x276>
 80057fc:	e0a1      	b.n	8005942 <CreateMessage+0x3ba>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 80057fe:	4b5f      	ldr	r3, [pc, #380]	@ (800597c <CreateMessage+0x3f4>)
 8005800:	486f      	ldr	r0, [pc, #444]	@ (80059c0 <CreateMessage+0x438>)
 8005802:	220c      	movs	r2, #12
 8005804:	0019      	movs	r1, r3
 8005806:	f006 fc35 	bl	800c074 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 800580a:	4a6e      	ldr	r2, [pc, #440]	@ (80059c4 <CreateMessage+0x43c>)
 800580c:	496e      	ldr	r1, [pc, #440]	@ (80059c8 <CreateMessage+0x440>)
 800580e:	4b5b      	ldr	r3, [pc, #364]	@ (800597c <CreateMessage+0x3f4>)
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff fd91 	bl	8005338 <isKeyValid>
 8005816:	1e03      	subs	r3, r0, #0
 8005818:	d046      	beq.n	80058a8 <CreateMessage+0x320>
 800581a:	4b5b      	ldr	r3, [pc, #364]	@ (8005988 <CreateMessage+0x400>)
 800581c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581e:	2100      	movs	r1, #0
 8005820:	1c18      	adds	r0, r3, #0
 8005822:	f7fa fe7f 	bl	8000524 <__aeabi_fcmpeq>
 8005826:	1e03      	subs	r3, r0, #0
 8005828:	d13e      	bne.n	80058a8 <CreateMessage+0x320>
      uint8ArrayToString(Buffer, keybuffer);
 800582a:	4a54      	ldr	r2, [pc, #336]	@ (800597c <CreateMessage+0x3f4>)
 800582c:	4b55      	ldr	r3, [pc, #340]	@ (8005984 <CreateMessage+0x3fc>)
 800582e:	0011      	movs	r1, r2
 8005830:	0018      	movs	r0, r3
 8005832:	f7ff fde1 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
 8005836:	4b54      	ldr	r3, [pc, #336]	@ (8005988 <CreateMessage+0x400>)
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	1c18      	adds	r0, r3, #0
 800583c:	f7fe f82a 	bl	8003894 <__aeabi_f2d>
 8005840:	0002      	movs	r2, r0
 8005842:	000b      	movs	r3, r1
 8005844:	4c4f      	ldr	r4, [pc, #316]	@ (8005984 <CreateMessage+0x3fc>)
 8005846:	4956      	ldr	r1, [pc, #344]	@ (80059a0 <CreateMessage+0x418>)
 8005848:	484a      	ldr	r0, [pc, #296]	@ (8005974 <CreateMessage+0x3ec>)
 800584a:	9200      	str	r2, [sp, #0]
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	0022      	movs	r2, r4
 8005850:	f020 fce8 	bl	8026224 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
#endif
      index += strlen(message);
 8005854:	4b47      	ldr	r3, [pc, #284]	@ (8005974 <CreateMessage+0x3ec>)
 8005856:	0018      	movs	r0, r3
 8005858:	f7fa fc88 	bl	800016c <strlen>
 800585c:	0003      	movs	r3, r0
 800585e:	b299      	uxth	r1, r3
 8005860:	220e      	movs	r2, #14
 8005862:	18bb      	adds	r3, r7, r2
 8005864:	18ba      	adds	r2, r7, r2
 8005866:	8812      	ldrh	r2, [r2, #0]
 8005868:	188a      	adds	r2, r1, r2
 800586a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800586c:	1cfb      	adds	r3, r7, #3
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d019      	beq.n	80058a8 <CreateMessage+0x320>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005874:	4b3f      	ldr	r3, [pc, #252]	@ (8005974 <CreateMessage+0x3ec>)
 8005876:	0018      	movs	r0, r3
 8005878:	f7fa fc78 	bl	800016c <strlen>
 800587c:	0003      	movs	r3, r0
 800587e:	b29a      	uxth	r2, r3
 8005880:	4b3c      	ldr	r3, [pc, #240]	@ (8005974 <CreateMessage+0x3ec>)
 8005882:	0011      	movs	r1, r2
 8005884:	0018      	movs	r0, r3
 8005886:	f7ff faf3 	bl	8004e70 <ESP_Send>
 800588a:	0003      	movs	r3, r0
 800588c:	001a      	movs	r2, r3
 800588e:	4b41      	ldr	r3, [pc, #260]	@ (8005994 <CreateMessage+0x40c>)
 8005890:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005892:	4b41      	ldr	r3, [pc, #260]	@ (8005998 <CreateMessage+0x410>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	001a      	movs	r2, r3
 8005898:	4b3e      	ldr	r3, [pc, #248]	@ (8005994 <CreateMessage+0x40c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	4013      	ands	r3, r2
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	4193      	sbcs	r3, r2
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005998 <CreateMessage+0x410>)
 80058a6:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 80058a8:	4b34      	ldr	r3, [pc, #208]	@ (800597c <CreateMessage+0x3f4>)
 80058aa:	4848      	ldr	r0, [pc, #288]	@ (80059cc <CreateMessage+0x444>)
 80058ac:	220c      	movs	r2, #12
 80058ae:	0019      	movs	r1, r3
 80058b0:	f006 fbe0 	bl	800c074 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 80058b4:	4a46      	ldr	r2, [pc, #280]	@ (80059d0 <CreateMessage+0x448>)
 80058b6:	4944      	ldr	r1, [pc, #272]	@ (80059c8 <CreateMessage+0x440>)
 80058b8:	4b30      	ldr	r3, [pc, #192]	@ (800597c <CreateMessage+0x3f4>)
 80058ba:	0018      	movs	r0, r3
 80058bc:	f7ff fd3c 	bl	8005338 <isKeyValid>
 80058c0:	1e03      	subs	r3, r0, #0
 80058c2:	d03e      	beq.n	8005942 <CreateMessage+0x3ba>
      uint8ArrayToString(Buffer, keybuffer);
 80058c4:	4a2d      	ldr	r2, [pc, #180]	@ (800597c <CreateMessage+0x3f4>)
 80058c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005984 <CreateMessage+0x3fc>)
 80058c8:	0011      	movs	r1, r2
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff fd94 	bl	80053f8 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
 80058d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005988 <CreateMessage+0x400>)
 80058d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d4:	1c18      	adds	r0, r3, #0
 80058d6:	f7fd ffdd 	bl	8003894 <__aeabi_f2d>
 80058da:	0002      	movs	r2, r0
 80058dc:	000b      	movs	r3, r1
 80058de:	4c29      	ldr	r4, [pc, #164]	@ (8005984 <CreateMessage+0x3fc>)
 80058e0:	492f      	ldr	r1, [pc, #188]	@ (80059a0 <CreateMessage+0x418>)
 80058e2:	4824      	ldr	r0, [pc, #144]	@ (8005974 <CreateMessage+0x3ec>)
 80058e4:	9200      	str	r2, [sp, #0]
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	0022      	movs	r2, r4
 80058ea:	f020 fc9b 	bl	8026224 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
  #endif
      index += strlen(message);
 80058ee:	4b21      	ldr	r3, [pc, #132]	@ (8005974 <CreateMessage+0x3ec>)
 80058f0:	0018      	movs	r0, r3
 80058f2:	f7fa fc3b 	bl	800016c <strlen>
 80058f6:	0003      	movs	r3, r0
 80058f8:	b299      	uxth	r1, r3
 80058fa:	220e      	movs	r2, #14
 80058fc:	18bb      	adds	r3, r7, r2
 80058fe:	18ba      	adds	r2, r7, r2
 8005900:	8812      	ldrh	r2, [r2, #0]
 8005902:	188a      	adds	r2, r1, r2
 8005904:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005906:	1cfb      	adds	r3, r7, #3
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d019      	beq.n	8005942 <CreateMessage+0x3ba>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800590e:	4b19      	ldr	r3, [pc, #100]	@ (8005974 <CreateMessage+0x3ec>)
 8005910:	0018      	movs	r0, r3
 8005912:	f7fa fc2b 	bl	800016c <strlen>
 8005916:	0003      	movs	r3, r0
 8005918:	b29a      	uxth	r2, r3
 800591a:	4b16      	ldr	r3, [pc, #88]	@ (8005974 <CreateMessage+0x3ec>)
 800591c:	0011      	movs	r1, r2
 800591e:	0018      	movs	r0, r3
 8005920:	f7ff faa6 	bl	8004e70 <ESP_Send>
 8005924:	0003      	movs	r3, r0
 8005926:	001a      	movs	r2, r3
 8005928:	4b1a      	ldr	r3, [pc, #104]	@ (8005994 <CreateMessage+0x40c>)
 800592a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800592c:	4b1a      	ldr	r3, [pc, #104]	@ (8005998 <CreateMessage+0x410>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	001a      	movs	r2, r3
 8005932:	4b18      	ldr	r3, [pc, #96]	@ (8005994 <CreateMessage+0x40c>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	4013      	ands	r3, r2
 8005938:	1e5a      	subs	r2, r3, #1
 800593a:	4193      	sbcs	r3, r2
 800593c:	b2da      	uxtb	r2, r3
 800593e:	4b16      	ldr	r3, [pc, #88]	@ (8005998 <CreateMessage+0x410>)
 8005940:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 8005942:	4b0e      	ldr	r3, [pc, #56]	@ (800597c <CreateMessage+0x3f4>)
 8005944:	4823      	ldr	r0, [pc, #140]	@ (80059d4 <CreateMessage+0x44c>)
 8005946:	220c      	movs	r2, #12
 8005948:	0019      	movs	r1, r3
 800594a:	f006 fb93 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800594e:	4a0b      	ldr	r2, [pc, #44]	@ (800597c <CreateMessage+0x3f4>)
 8005950:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <CreateMessage+0x3fc>)
 8005952:	0011      	movs	r1, r2
 8005954:	0018      	movs	r0, r3
 8005956:	f7ff fd4f 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
 800595a:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <CreateMessage+0x400>)
 800595c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800595e:	1c18      	adds	r0, r3, #0
 8005960:	f7fd ff98 	bl	8003894 <__aeabi_f2d>
 8005964:	0002      	movs	r2, r0
 8005966:	000b      	movs	r3, r1
 8005968:	e036      	b.n	80059d8 <CreateMessage+0x450>
 800596a:	46c0      	nop			@ (mov r8, r8)
 800596c:	20000814 	.word	0x20000814
 8005970:	0802dcdc 	.word	0x0802dcdc
 8005974:	200005c4 	.word	0x200005c4
 8005978:	0802ac28 	.word	0x0802ac28
 800597c:	20000834 	.word	0x20000834
 8005980:	0808000c 	.word	0x0808000c
 8005984:	20000840 	.word	0x20000840
 8005988:	20000704 	.word	0x20000704
 800598c:	0802ac2c 	.word	0x0802ac2c
 8005990:	200005c5 	.word	0x200005c5
 8005994:	20000859 	.word	0x20000859
 8005998:	20000032 	.word	0x20000032
 800599c:	08080018 	.word	0x08080018
 80059a0:	0802ac4c 	.word	0x0802ac4c
 80059a4:	08080030 	.word	0x08080030
 80059a8:	0802ac6c 	.word	0x0802ac6c
 80059ac:	080801a0 	.word	0x080801a0
 80059b0:	0802ac8c 	.word	0x0802ac8c
 80059b4:	0802ac94 	.word	0x0802ac94
 80059b8:	2000085c 	.word	0x2000085c
 80059bc:	0802ac9c 	.word	0x0802ac9c
 80059c0:	08080188 	.word	0x08080188
 80059c4:	0802acbc 	.word	0x0802acbc
 80059c8:	0802acc0 	.word	0x0802acc0
 80059cc:	080800e0 	.word	0x080800e0
 80059d0:	0802acc8 	.word	0x0802acc8
 80059d4:	08080048 	.word	0x08080048
 80059d8:	4ce6      	ldr	r4, [pc, #920]	@ (8005d74 <CreateMessage+0x7ec>)
 80059da:	49e7      	ldr	r1, [pc, #924]	@ (8005d78 <CreateMessage+0x7f0>)
 80059dc:	48e7      	ldr	r0, [pc, #924]	@ (8005d7c <CreateMessage+0x7f4>)
 80059de:	9200      	str	r2, [sp, #0]
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	0022      	movs	r2, r4
 80059e4:	f020 fc1e 	bl	8026224 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
#endif
  index += strlen(message);
 80059e8:	4be4      	ldr	r3, [pc, #912]	@ (8005d7c <CreateMessage+0x7f4>)
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7fa fbbe 	bl	800016c <strlen>
 80059f0:	0003      	movs	r3, r0
 80059f2:	b299      	uxth	r1, r3
 80059f4:	220e      	movs	r2, #14
 80059f6:	18bb      	adds	r3, r7, r2
 80059f8:	18ba      	adds	r2, r7, r2
 80059fa:	8812      	ldrh	r2, [r2, #0]
 80059fc:	188a      	adds	r2, r1, r2
 80059fe:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005a00:	1cfb      	adds	r3, r7, #3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d019      	beq.n	8005a3c <CreateMessage+0x4b4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005a08:	4bdc      	ldr	r3, [pc, #880]	@ (8005d7c <CreateMessage+0x7f4>)
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f7fa fbae 	bl	800016c <strlen>
 8005a10:	0003      	movs	r3, r0
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	4bd9      	ldr	r3, [pc, #868]	@ (8005d7c <CreateMessage+0x7f4>)
 8005a16:	0011      	movs	r1, r2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f7ff fa29 	bl	8004e70 <ESP_Send>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	001a      	movs	r2, r3
 8005a22:	4bd7      	ldr	r3, [pc, #860]	@ (8005d80 <CreateMessage+0x7f8>)
 8005a24:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005a26:	4bd7      	ldr	r3, [pc, #860]	@ (8005d84 <CreateMessage+0x7fc>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	001a      	movs	r2, r3
 8005a2c:	4bd4      	ldr	r3, [pc, #848]	@ (8005d80 <CreateMessage+0x7f8>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4013      	ands	r3, r2
 8005a32:	1e5a      	subs	r2, r3, #1
 8005a34:	4193      	sbcs	r3, r2
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	4bd2      	ldr	r3, [pc, #840]	@ (8005d84 <CreateMessage+0x7fc>)
 8005a3a:	701a      	strb	r2, [r3, #0]
  }

//  if(!onBeurs){
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 8005a3c:	4bd2      	ldr	r3, [pc, #840]	@ (8005d88 <CreateMessage+0x800>)
 8005a3e:	48d3      	ldr	r0, [pc, #844]	@ (8005d8c <CreateMessage+0x804>)
 8005a40:	220c      	movs	r2, #12
 8005a42:	0019      	movs	r1, r3
 8005a44:	f006 fb16 	bl	800c074 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 8005a48:	4acf      	ldr	r2, [pc, #828]	@ (8005d88 <CreateMessage+0x800>)
 8005a4a:	4bca      	ldr	r3, [pc, #808]	@ (8005d74 <CreateMessage+0x7ec>)
 8005a4c:	0011      	movs	r1, r2
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f7ff fcd2 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
 8005a54:	4bce      	ldr	r3, [pc, #824]	@ (8005d90 <CreateMessage+0x808>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	1c18      	adds	r0, r3, #0
 8005a5a:	f7fd ff1b 	bl	8003894 <__aeabi_f2d>
 8005a5e:	0002      	movs	r2, r0
 8005a60:	000b      	movs	r3, r1
 8005a62:	4cc4      	ldr	r4, [pc, #784]	@ (8005d74 <CreateMessage+0x7ec>)
 8005a64:	49c4      	ldr	r1, [pc, #784]	@ (8005d78 <CreateMessage+0x7f0>)
 8005a66:	48c5      	ldr	r0, [pc, #788]	@ (8005d7c <CreateMessage+0x7f4>)
 8005a68:	9200      	str	r2, [sp, #0]
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	0022      	movs	r2, r4
 8005a6e:	f020 fbd9 	bl	8026224 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
#endif
    index += strlen(message);
 8005a72:	4bc2      	ldr	r3, [pc, #776]	@ (8005d7c <CreateMessage+0x7f4>)
 8005a74:	0018      	movs	r0, r3
 8005a76:	f7fa fb79 	bl	800016c <strlen>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	b299      	uxth	r1, r3
 8005a7e:	220e      	movs	r2, #14
 8005a80:	18bb      	adds	r3, r7, r2
 8005a82:	18ba      	adds	r2, r7, r2
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	188a      	adds	r2, r1, r2
 8005a88:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005a8a:	1cfb      	adds	r3, r7, #3
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d019      	beq.n	8005ac6 <CreateMessage+0x53e>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005a92:	4bba      	ldr	r3, [pc, #744]	@ (8005d7c <CreateMessage+0x7f4>)
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7fa fb69 	bl	800016c <strlen>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	4bb7      	ldr	r3, [pc, #732]	@ (8005d7c <CreateMessage+0x7f4>)
 8005aa0:	0011      	movs	r1, r2
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f7ff f9e4 	bl	8004e70 <ESP_Send>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	001a      	movs	r2, r3
 8005aac:	4bb4      	ldr	r3, [pc, #720]	@ (8005d80 <CreateMessage+0x7f8>)
 8005aae:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005ab0:	4bb4      	ldr	r3, [pc, #720]	@ (8005d84 <CreateMessage+0x7fc>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	001a      	movs	r2, r3
 8005ab6:	4bb2      	ldr	r3, [pc, #712]	@ (8005d80 <CreateMessage+0x7f8>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	4013      	ands	r3, r2
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	4193      	sbcs	r3, r2
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	4bb0      	ldr	r3, [pc, #704]	@ (8005d84 <CreateMessage+0x7fc>)
 8005ac4:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005ac6:	4bb3      	ldr	r3, [pc, #716]	@ (8005d94 <CreateMessage+0x80c>)
 8005ac8:	791b      	ldrb	r3, [r3, #4]
 8005aca:	2b35      	cmp	r3, #53	@ 0x35
 8005acc:	d141      	bne.n	8005b52 <CreateMessage+0x5ca>
 8005ace:	f004 f845 	bl	8009b5c <Check_USB_PowerOn>
 8005ad2:	1e03      	subs	r3, r0, #0
 8005ad4:	d03d      	beq.n	8005b52 <CreateMessage+0x5ca>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005ad6:	4bac      	ldr	r3, [pc, #688]	@ (8005d88 <CreateMessage+0x800>)
 8005ad8:	48af      	ldr	r0, [pc, #700]	@ (8005d98 <CreateMessage+0x810>)
 8005ada:	220c      	movs	r2, #12
 8005adc:	0019      	movs	r1, r3
 8005ade:	f006 fac9 	bl	800c074 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005ae2:	4aa9      	ldr	r2, [pc, #676]	@ (8005d88 <CreateMessage+0x800>)
 8005ae4:	4ba3      	ldr	r3, [pc, #652]	@ (8005d74 <CreateMessage+0x7ec>)
 8005ae6:	0011      	movs	r1, r2
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff fc85 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
 8005aee:	4bab      	ldr	r3, [pc, #684]	@ (8005d9c <CreateMessage+0x814>)
 8005af0:	224e      	movs	r2, #78	@ 0x4e
 8005af2:	5a9b      	ldrh	r3, [r3, r2]
 8005af4:	4a9f      	ldr	r2, [pc, #636]	@ (8005d74 <CreateMessage+0x7ec>)
 8005af6:	49aa      	ldr	r1, [pc, #680]	@ (8005da0 <CreateMessage+0x818>)
 8005af8:	48a0      	ldr	r0, [pc, #640]	@ (8005d7c <CreateMessage+0x7f4>)
 8005afa:	f020 fb93 	bl	8026224 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
#endif
      index += strlen(message);
 8005afe:	4b9f      	ldr	r3, [pc, #636]	@ (8005d7c <CreateMessage+0x7f4>)
 8005b00:	0018      	movs	r0, r3
 8005b02:	f7fa fb33 	bl	800016c <strlen>
 8005b06:	0003      	movs	r3, r0
 8005b08:	b299      	uxth	r1, r3
 8005b0a:	220e      	movs	r2, #14
 8005b0c:	18bb      	adds	r3, r7, r2
 8005b0e:	18ba      	adds	r2, r7, r2
 8005b10:	8812      	ldrh	r2, [r2, #0]
 8005b12:	188a      	adds	r2, r1, r2
 8005b14:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b16:	1cfb      	adds	r3, r7, #3
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d019      	beq.n	8005b52 <CreateMessage+0x5ca>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b1e:	4b97      	ldr	r3, [pc, #604]	@ (8005d7c <CreateMessage+0x7f4>)
 8005b20:	0018      	movs	r0, r3
 8005b22:	f7fa fb23 	bl	800016c <strlen>
 8005b26:	0003      	movs	r3, r0
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	4b94      	ldr	r3, [pc, #592]	@ (8005d7c <CreateMessage+0x7f4>)
 8005b2c:	0011      	movs	r1, r2
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f7ff f99e 	bl	8004e70 <ESP_Send>
 8005b34:	0003      	movs	r3, r0
 8005b36:	001a      	movs	r2, r3
 8005b38:	4b91      	ldr	r3, [pc, #580]	@ (8005d80 <CreateMessage+0x7f8>)
 8005b3a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005b3c:	4b91      	ldr	r3, [pc, #580]	@ (8005d84 <CreateMessage+0x7fc>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	001a      	movs	r2, r3
 8005b42:	4b8f      	ldr	r3, [pc, #572]	@ (8005d80 <CreateMessage+0x7f8>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	4013      	ands	r3, r2
 8005b48:	1e5a      	subs	r2, r3, #1
 8005b4a:	4193      	sbcs	r3, r2
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8005d84 <CreateMessage+0x7fc>)
 8005b50:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005b52:	4b8d      	ldr	r3, [pc, #564]	@ (8005d88 <CreateMessage+0x800>)
 8005b54:	4893      	ldr	r0, [pc, #588]	@ (8005da4 <CreateMessage+0x81c>)
 8005b56:	220c      	movs	r2, #12
 8005b58:	0019      	movs	r1, r3
 8005b5a:	f006 fa8b 	bl	800c074 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8005d94 <CreateMessage+0x80c>)
 8005b60:	791b      	ldrb	r3, [r3, #4]
 8005b62:	2b34      	cmp	r3, #52	@ 0x34
 8005b64:	d003      	beq.n	8005b6e <CreateMessage+0x5e6>
 8005b66:	4b8b      	ldr	r3, [pc, #556]	@ (8005d94 <CreateMessage+0x80c>)
 8005b68:	791b      	ldrb	r3, [r3, #4]
 8005b6a:	2b35      	cmp	r3, #53	@ 0x35
 8005b6c:	d146      	bne.n	8005bfc <CreateMessage+0x674>
 8005b6e:	4a8e      	ldr	r2, [pc, #568]	@ (8005da8 <CreateMessage+0x820>)
 8005b70:	498e      	ldr	r1, [pc, #568]	@ (8005dac <CreateMessage+0x824>)
 8005b72:	4b85      	ldr	r3, [pc, #532]	@ (8005d88 <CreateMessage+0x800>)
 8005b74:	0018      	movs	r0, r3
 8005b76:	f7ff fbdf 	bl	8005338 <isKeyValid>
 8005b7a:	1e03      	subs	r3, r0, #0
 8005b7c:	d03e      	beq.n	8005bfc <CreateMessage+0x674>
      uint8ArrayToString(Buffer, keybuffer);
 8005b7e:	4a82      	ldr	r2, [pc, #520]	@ (8005d88 <CreateMessage+0x800>)
 8005b80:	4b7c      	ldr	r3, [pc, #496]	@ (8005d74 <CreateMessage+0x7ec>)
 8005b82:	0011      	movs	r1, r2
 8005b84:	0018      	movs	r0, r3
 8005b86:	f7ff fc37 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_temperature);
 8005b8a:	4b84      	ldr	r3, [pc, #528]	@ (8005d9c <CreateMessage+0x814>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8e:	1c18      	adds	r0, r3, #0
 8005b90:	f7fd fe80 	bl	8003894 <__aeabi_f2d>
 8005b94:	0002      	movs	r2, r0
 8005b96:	000b      	movs	r3, r1
 8005b98:	4c76      	ldr	r4, [pc, #472]	@ (8005d74 <CreateMessage+0x7ec>)
 8005b9a:	4985      	ldr	r1, [pc, #532]	@ (8005db0 <CreateMessage+0x828>)
 8005b9c:	4877      	ldr	r0, [pc, #476]	@ (8005d7c <CreateMessage+0x7f4>)
 8005b9e:	9200      	str	r2, [sp, #0]
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	0022      	movs	r2, r4
 8005ba4:	f020 fb3e 	bl	8026224 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
#endif
      index += strlen(message);
 8005ba8:	4b74      	ldr	r3, [pc, #464]	@ (8005d7c <CreateMessage+0x7f4>)
 8005baa:	0018      	movs	r0, r3
 8005bac:	f7fa fade 	bl	800016c <strlen>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	b299      	uxth	r1, r3
 8005bb4:	220e      	movs	r2, #14
 8005bb6:	18bb      	adds	r3, r7, r2
 8005bb8:	18ba      	adds	r2, r7, r2
 8005bba:	8812      	ldrh	r2, [r2, #0]
 8005bbc:	188a      	adds	r2, r1, r2
 8005bbe:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005bc0:	1cfb      	adds	r3, r7, #3
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d019      	beq.n	8005bfc <CreateMessage+0x674>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d7c <CreateMessage+0x7f4>)
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f7fa face 	bl	800016c <strlen>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	4b69      	ldr	r3, [pc, #420]	@ (8005d7c <CreateMessage+0x7f4>)
 8005bd6:	0011      	movs	r1, r2
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f7ff f949 	bl	8004e70 <ESP_Send>
 8005bde:	0003      	movs	r3, r0
 8005be0:	001a      	movs	r2, r3
 8005be2:	4b67      	ldr	r3, [pc, #412]	@ (8005d80 <CreateMessage+0x7f8>)
 8005be4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005be6:	4b67      	ldr	r3, [pc, #412]	@ (8005d84 <CreateMessage+0x7fc>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	001a      	movs	r2, r3
 8005bec:	4b64      	ldr	r3, [pc, #400]	@ (8005d80 <CreateMessage+0x7f8>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	1e5a      	subs	r2, r3, #1
 8005bf4:	4193      	sbcs	r3, r2
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	4b62      	ldr	r3, [pc, #392]	@ (8005d84 <CreateMessage+0x7fc>)
 8005bfa:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005bfc:	4b62      	ldr	r3, [pc, #392]	@ (8005d88 <CreateMessage+0x800>)
 8005bfe:	486d      	ldr	r0, [pc, #436]	@ (8005db4 <CreateMessage+0x82c>)
 8005c00:	220c      	movs	r2, #12
 8005c02:	0019      	movs	r1, r3
 8005c04:	f006 fa36 	bl	800c074 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005c08:	4b62      	ldr	r3, [pc, #392]	@ (8005d94 <CreateMessage+0x80c>)
 8005c0a:	791b      	ldrb	r3, [r3, #4]
 8005c0c:	2b34      	cmp	r3, #52	@ 0x34
 8005c0e:	d003      	beq.n	8005c18 <CreateMessage+0x690>
 8005c10:	4b60      	ldr	r3, [pc, #384]	@ (8005d94 <CreateMessage+0x80c>)
 8005c12:	791b      	ldrb	r3, [r3, #4]
 8005c14:	2b35      	cmp	r3, #53	@ 0x35
 8005c16:	d146      	bne.n	8005ca6 <CreateMessage+0x71e>
 8005c18:	4a67      	ldr	r2, [pc, #412]	@ (8005db8 <CreateMessage+0x830>)
 8005c1a:	4964      	ldr	r1, [pc, #400]	@ (8005dac <CreateMessage+0x824>)
 8005c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8005d88 <CreateMessage+0x800>)
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7ff fb8a 	bl	8005338 <isKeyValid>
 8005c24:	1e03      	subs	r3, r0, #0
 8005c26:	d03e      	beq.n	8005ca6 <CreateMessage+0x71e>
      uint8ArrayToString(Buffer, keybuffer);
 8005c28:	4a57      	ldr	r2, [pc, #348]	@ (8005d88 <CreateMessage+0x800>)
 8005c2a:	4b52      	ldr	r3, [pc, #328]	@ (8005d74 <CreateMessage+0x7ec>)
 8005c2c:	0011      	movs	r1, r2
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f7ff fbe2 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_humidity);
 8005c34:	4b59      	ldr	r3, [pc, #356]	@ (8005d9c <CreateMessage+0x814>)
 8005c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c38:	1c18      	adds	r0, r3, #0
 8005c3a:	f7fd fe2b 	bl	8003894 <__aeabi_f2d>
 8005c3e:	0002      	movs	r2, r0
 8005c40:	000b      	movs	r3, r1
 8005c42:	4c4c      	ldr	r4, [pc, #304]	@ (8005d74 <CreateMessage+0x7ec>)
 8005c44:	495a      	ldr	r1, [pc, #360]	@ (8005db0 <CreateMessage+0x828>)
 8005c46:	484d      	ldr	r0, [pc, #308]	@ (8005d7c <CreateMessage+0x7f4>)
 8005c48:	9200      	str	r2, [sp, #0]
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	0022      	movs	r2, r4
 8005c4e:	f020 fae9 	bl	8026224 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
#endif
      index += strlen(message);
 8005c52:	4b4a      	ldr	r3, [pc, #296]	@ (8005d7c <CreateMessage+0x7f4>)
 8005c54:	0018      	movs	r0, r3
 8005c56:	f7fa fa89 	bl	800016c <strlen>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	b299      	uxth	r1, r3
 8005c5e:	220e      	movs	r2, #14
 8005c60:	18bb      	adds	r3, r7, r2
 8005c62:	18ba      	adds	r2, r7, r2
 8005c64:	8812      	ldrh	r2, [r2, #0]
 8005c66:	188a      	adds	r2, r1, r2
 8005c68:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c6a:	1cfb      	adds	r3, r7, #3
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d019      	beq.n	8005ca6 <CreateMessage+0x71e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c72:	4b42      	ldr	r3, [pc, #264]	@ (8005d7c <CreateMessage+0x7f4>)
 8005c74:	0018      	movs	r0, r3
 8005c76:	f7fa fa79 	bl	800016c <strlen>
 8005c7a:	0003      	movs	r3, r0
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d7c <CreateMessage+0x7f4>)
 8005c80:	0011      	movs	r1, r2
 8005c82:	0018      	movs	r0, r3
 8005c84:	f7ff f8f4 	bl	8004e70 <ESP_Send>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	001a      	movs	r2, r3
 8005c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d80 <CreateMessage+0x7f8>)
 8005c8e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005c90:	4b3c      	ldr	r3, [pc, #240]	@ (8005d84 <CreateMessage+0x7fc>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	001a      	movs	r2, r3
 8005c96:	4b3a      	ldr	r3, [pc, #232]	@ (8005d80 <CreateMessage+0x7f8>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	1e5a      	subs	r2, r3, #1
 8005c9e:	4193      	sbcs	r3, r2
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	4b38      	ldr	r3, [pc, #224]	@ (8005d84 <CreateMessage+0x7fc>)
 8005ca4:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 8005ca6:	f008 fc39 	bl	800e51c <sen5x_Get_sen5x_enable_state>
 8005caa:	1e03      	subs	r3, r0, #0
 8005cac:	d100      	bne.n	8005cb0 <CreateMessage+0x728>
 8005cae:	e150      	b.n	8005f52 <CreateMessage+0x9ca>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005cb0:	4b35      	ldr	r3, [pc, #212]	@ (8005d88 <CreateMessage+0x800>)
 8005cb2:	4842      	ldr	r0, [pc, #264]	@ (8005dbc <CreateMessage+0x834>)
 8005cb4:	220c      	movs	r2, #12
 8005cb6:	0019      	movs	r1, r3
 8005cb8:	f006 f9dc 	bl	800c074 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005cbc:	4a40      	ldr	r2, [pc, #256]	@ (8005dc0 <CreateMessage+0x838>)
 8005cbe:	4941      	ldr	r1, [pc, #260]	@ (8005dc4 <CreateMessage+0x83c>)
 8005cc0:	4b31      	ldr	r3, [pc, #196]	@ (8005d88 <CreateMessage+0x800>)
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f7ff fb38 	bl	8005338 <isKeyValid>
 8005cc8:	1e03      	subs	r3, r0, #0
 8005cca:	d03e      	beq.n	8005d4a <CreateMessage+0x7c2>
        uint8ArrayToString(Buffer, keybuffer);
 8005ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8005d88 <CreateMessage+0x800>)
 8005cce:	4b29      	ldr	r3, [pc, #164]	@ (8005d74 <CreateMessage+0x7ec>)
 8005cd0:	0011      	movs	r1, r2
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f7ff fb90 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
 8005cd8:	4b30      	ldr	r3, [pc, #192]	@ (8005d9c <CreateMessage+0x814>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	1c18      	adds	r0, r3, #0
 8005cde:	f7fd fdd9 	bl	8003894 <__aeabi_f2d>
 8005ce2:	0002      	movs	r2, r0
 8005ce4:	000b      	movs	r3, r1
 8005ce6:	4c23      	ldr	r4, [pc, #140]	@ (8005d74 <CreateMessage+0x7ec>)
 8005ce8:	4923      	ldr	r1, [pc, #140]	@ (8005d78 <CreateMessage+0x7f0>)
 8005cea:	4824      	ldr	r0, [pc, #144]	@ (8005d7c <CreateMessage+0x7f4>)
 8005cec:	9200      	str	r2, [sp, #0]
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	0022      	movs	r2, r4
 8005cf2:	f020 fa97 	bl	8026224 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
#endif
        index += strlen(message);
 8005cf6:	4b21      	ldr	r3, [pc, #132]	@ (8005d7c <CreateMessage+0x7f4>)
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f7fa fa37 	bl	800016c <strlen>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	b299      	uxth	r1, r3
 8005d02:	220e      	movs	r2, #14
 8005d04:	18bb      	adds	r3, r7, r2
 8005d06:	18ba      	adds	r2, r7, r2
 8005d08:	8812      	ldrh	r2, [r2, #0]
 8005d0a:	188a      	adds	r2, r1, r2
 8005d0c:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005d0e:	1cfb      	adds	r3, r7, #3
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d019      	beq.n	8005d4a <CreateMessage+0x7c2>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005d16:	4b19      	ldr	r3, [pc, #100]	@ (8005d7c <CreateMessage+0x7f4>)
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7fa fa27 	bl	800016c <strlen>
 8005d1e:	0003      	movs	r3, r0
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	4b16      	ldr	r3, [pc, #88]	@ (8005d7c <CreateMessage+0x7f4>)
 8005d24:	0011      	movs	r1, r2
 8005d26:	0018      	movs	r0, r3
 8005d28:	f7ff f8a2 	bl	8004e70 <ESP_Send>
 8005d2c:	0003      	movs	r3, r0
 8005d2e:	001a      	movs	r2, r3
 8005d30:	4b13      	ldr	r3, [pc, #76]	@ (8005d80 <CreateMessage+0x7f8>)
 8005d32:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005d34:	4b13      	ldr	r3, [pc, #76]	@ (8005d84 <CreateMessage+0x7fc>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	001a      	movs	r2, r3
 8005d3a:	4b11      	ldr	r3, [pc, #68]	@ (8005d80 <CreateMessage+0x7f8>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	1e5a      	subs	r2, r3, #1
 8005d42:	4193      	sbcs	r3, r2
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	4b0f      	ldr	r3, [pc, #60]	@ (8005d84 <CreateMessage+0x7fc>)
 8005d48:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d88 <CreateMessage+0x800>)
 8005d4c:	481e      	ldr	r0, [pc, #120]	@ (8005dc8 <CreateMessage+0x840>)
 8005d4e:	220c      	movs	r2, #12
 8005d50:	0019      	movs	r1, r3
 8005d52:	f006 f98f 	bl	800c074 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005d56:	4a0c      	ldr	r2, [pc, #48]	@ (8005d88 <CreateMessage+0x800>)
 8005d58:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <CreateMessage+0x7ec>)
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f7ff fb4b 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
 8005d62:	4b0e      	ldr	r3, [pc, #56]	@ (8005d9c <CreateMessage+0x814>)
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	1c18      	adds	r0, r3, #0
 8005d68:	f7fd fd94 	bl	8003894 <__aeabi_f2d>
 8005d6c:	0002      	movs	r2, r0
 8005d6e:	000b      	movs	r3, r1
 8005d70:	4c00      	ldr	r4, [pc, #0]	@ (8005d74 <CreateMessage+0x7ec>)
 8005d72:	e02b      	b.n	8005dcc <CreateMessage+0x844>
 8005d74:	20000840 	.word	0x20000840
 8005d78:	0802ac4c 	.word	0x0802ac4c
 8005d7c:	200005c4 	.word	0x200005c4
 8005d80:	20000859 	.word	0x20000859
 8005d84:	20000032 	.word	0x20000032
 8005d88:	20000834 	.word	0x20000834
 8005d8c:	08080078 	.word	0x08080078
 8005d90:	200005c0 	.word	0x200005c0
 8005d94:	200011c4 	.word	0x200011c4
 8005d98:	08080024 	.word	0x08080024
 8005d9c:	20000704 	.word	0x20000704
 8005da0:	0802ac6c 	.word	0x0802ac6c
 8005da4:	08080170 	.word	0x08080170
 8005da8:	0802acd4 	.word	0x0802acd4
 8005dac:	0802ace0 	.word	0x0802ace0
 8005db0:	0802ace8 	.word	0x0802ace8
 8005db4:	0808017c 	.word	0x0808017c
 8005db8:	0802ad08 	.word	0x0802ad08
 8005dbc:	080800b0 	.word	0x080800b0
 8005dc0:	0802ad14 	.word	0x0802ad14
 8005dc4:	0802ad20 	.word	0x0802ad20
 8005dc8:	08080054 	.word	0x08080054
 8005dcc:	49ea      	ldr	r1, [pc, #936]	@ (8006178 <CreateMessage+0xbf0>)
 8005dce:	48eb      	ldr	r0, [pc, #940]	@ (800617c <CreateMessage+0xbf4>)
 8005dd0:	9200      	str	r2, [sp, #0]
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	0022      	movs	r2, r4
 8005dd6:	f020 fa25 	bl	8026224 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
#endif
      index += strlen(message);
 8005dda:	4be8      	ldr	r3, [pc, #928]	@ (800617c <CreateMessage+0xbf4>)
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f7fa f9c5 	bl	800016c <strlen>
 8005de2:	0003      	movs	r3, r0
 8005de4:	b299      	uxth	r1, r3
 8005de6:	220e      	movs	r2, #14
 8005de8:	18bb      	adds	r3, r7, r2
 8005dea:	18ba      	adds	r2, r7, r2
 8005dec:	8812      	ldrh	r2, [r2, #0]
 8005dee:	188a      	adds	r2, r1, r2
 8005df0:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005df2:	1cfb      	adds	r3, r7, #3
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d019      	beq.n	8005e2e <CreateMessage+0x8a6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005dfa:	4be0      	ldr	r3, [pc, #896]	@ (800617c <CreateMessage+0xbf4>)
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f7fa f9b5 	bl	800016c <strlen>
 8005e02:	0003      	movs	r3, r0
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	4bdd      	ldr	r3, [pc, #884]	@ (800617c <CreateMessage+0xbf4>)
 8005e08:	0011      	movs	r1, r2
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f7ff f830 	bl	8004e70 <ESP_Send>
 8005e10:	0003      	movs	r3, r0
 8005e12:	001a      	movs	r2, r3
 8005e14:	4bda      	ldr	r3, [pc, #872]	@ (8006180 <CreateMessage+0xbf8>)
 8005e16:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e18:	4bda      	ldr	r3, [pc, #872]	@ (8006184 <CreateMessage+0xbfc>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	001a      	movs	r2, r3
 8005e1e:	4bd8      	ldr	r3, [pc, #864]	@ (8006180 <CreateMessage+0xbf8>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	4013      	ands	r3, r2
 8005e24:	1e5a      	subs	r2, r3, #1
 8005e26:	4193      	sbcs	r3, r2
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	4bd6      	ldr	r3, [pc, #856]	@ (8006184 <CreateMessage+0xbfc>)
 8005e2c:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005e2e:	4bd6      	ldr	r3, [pc, #856]	@ (8006188 <CreateMessage+0xc00>)
 8005e30:	48d6      	ldr	r0, [pc, #856]	@ (800618c <CreateMessage+0xc04>)
 8005e32:	220c      	movs	r2, #12
 8005e34:	0019      	movs	r1, r3
 8005e36:	f006 f91d 	bl	800c074 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005e3a:	4ad5      	ldr	r2, [pc, #852]	@ (8006190 <CreateMessage+0xc08>)
 8005e3c:	49d5      	ldr	r1, [pc, #852]	@ (8006194 <CreateMessage+0xc0c>)
 8005e3e:	4bd2      	ldr	r3, [pc, #840]	@ (8006188 <CreateMessage+0xc00>)
 8005e40:	0018      	movs	r0, r3
 8005e42:	f7ff fa79 	bl	8005338 <isKeyValid>
 8005e46:	1e03      	subs	r3, r0, #0
 8005e48:	d03e      	beq.n	8005ec8 <CreateMessage+0x940>
        uint8ArrayToString(Buffer, keybuffer);
 8005e4a:	4acf      	ldr	r2, [pc, #828]	@ (8006188 <CreateMessage+0xc00>)
 8005e4c:	4bd2      	ldr	r3, [pc, #840]	@ (8006198 <CreateMessage+0xc10>)
 8005e4e:	0011      	movs	r1, r2
 8005e50:	0018      	movs	r0, r3
 8005e52:	f7ff fad1 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
 8005e56:	4bd1      	ldr	r3, [pc, #836]	@ (800619c <CreateMessage+0xc14>)
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	1c18      	adds	r0, r3, #0
 8005e5c:	f7fd fd1a 	bl	8003894 <__aeabi_f2d>
 8005e60:	0002      	movs	r2, r0
 8005e62:	000b      	movs	r3, r1
 8005e64:	4ccc      	ldr	r4, [pc, #816]	@ (8006198 <CreateMessage+0xc10>)
 8005e66:	49c4      	ldr	r1, [pc, #784]	@ (8006178 <CreateMessage+0xbf0>)
 8005e68:	48c4      	ldr	r0, [pc, #784]	@ (800617c <CreateMessage+0xbf4>)
 8005e6a:	9200      	str	r2, [sp, #0]
 8005e6c:	9301      	str	r3, [sp, #4]
 8005e6e:	0022      	movs	r2, r4
 8005e70:	f020 f9d8 	bl	8026224 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
#endif
        index += strlen(message);
 8005e74:	4bc1      	ldr	r3, [pc, #772]	@ (800617c <CreateMessage+0xbf4>)
 8005e76:	0018      	movs	r0, r3
 8005e78:	f7fa f978 	bl	800016c <strlen>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	b299      	uxth	r1, r3
 8005e80:	220e      	movs	r2, #14
 8005e82:	18bb      	adds	r3, r7, r2
 8005e84:	18ba      	adds	r2, r7, r2
 8005e86:	8812      	ldrh	r2, [r2, #0]
 8005e88:	188a      	adds	r2, r1, r2
 8005e8a:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005e8c:	1cfb      	adds	r3, r7, #3
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d019      	beq.n	8005ec8 <CreateMessage+0x940>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005e94:	4bb9      	ldr	r3, [pc, #740]	@ (800617c <CreateMessage+0xbf4>)
 8005e96:	0018      	movs	r0, r3
 8005e98:	f7fa f968 	bl	800016c <strlen>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	4bb6      	ldr	r3, [pc, #728]	@ (800617c <CreateMessage+0xbf4>)
 8005ea2:	0011      	movs	r1, r2
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f7fe ffe3 	bl	8004e70 <ESP_Send>
 8005eaa:	0003      	movs	r3, r0
 8005eac:	001a      	movs	r2, r3
 8005eae:	4bb4      	ldr	r3, [pc, #720]	@ (8006180 <CreateMessage+0xbf8>)
 8005eb0:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005eb2:	4bb4      	ldr	r3, [pc, #720]	@ (8006184 <CreateMessage+0xbfc>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	4bb1      	ldr	r3, [pc, #708]	@ (8006180 <CreateMessage+0xbf8>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	1e5a      	subs	r2, r3, #1
 8005ec0:	4193      	sbcs	r3, r2
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	4baf      	ldr	r3, [pc, #700]	@ (8006184 <CreateMessage+0xbfc>)
 8005ec6:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005ec8:	4baf      	ldr	r3, [pc, #700]	@ (8006188 <CreateMessage+0xc00>)
 8005eca:	48b5      	ldr	r0, [pc, #724]	@ (80061a0 <CreateMessage+0xc18>)
 8005ecc:	220c      	movs	r2, #12
 8005ece:	0019      	movs	r1, r3
 8005ed0:	f006 f8d0 	bl	800c074 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005ed4:	4aac      	ldr	r2, [pc, #688]	@ (8006188 <CreateMessage+0xc00>)
 8005ed6:	4bb0      	ldr	r3, [pc, #704]	@ (8006198 <CreateMessage+0xc10>)
 8005ed8:	0011      	movs	r1, r2
 8005eda:	0018      	movs	r0, r3
 8005edc:	f7ff fa8c 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
 8005ee0:	4bae      	ldr	r3, [pc, #696]	@ (800619c <CreateMessage+0xc14>)
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	1c18      	adds	r0, r3, #0
 8005ee6:	f7fd fcd5 	bl	8003894 <__aeabi_f2d>
 8005eea:	0002      	movs	r2, r0
 8005eec:	000b      	movs	r3, r1
 8005eee:	4caa      	ldr	r4, [pc, #680]	@ (8006198 <CreateMessage+0xc10>)
 8005ef0:	49a1      	ldr	r1, [pc, #644]	@ (8006178 <CreateMessage+0xbf0>)
 8005ef2:	48a2      	ldr	r0, [pc, #648]	@ (800617c <CreateMessage+0xbf4>)
 8005ef4:	9200      	str	r2, [sp, #0]
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	0022      	movs	r2, r4
 8005efa:	f020 f993 	bl	8026224 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
#endif
      index += strlen(message);
 8005efe:	4b9f      	ldr	r3, [pc, #636]	@ (800617c <CreateMessage+0xbf4>)
 8005f00:	0018      	movs	r0, r3
 8005f02:	f7fa f933 	bl	800016c <strlen>
 8005f06:	0003      	movs	r3, r0
 8005f08:	b299      	uxth	r1, r3
 8005f0a:	220e      	movs	r2, #14
 8005f0c:	18bb      	adds	r3, r7, r2
 8005f0e:	18ba      	adds	r2, r7, r2
 8005f10:	8812      	ldrh	r2, [r2, #0]
 8005f12:	188a      	adds	r2, r1, r2
 8005f14:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f16:	1cfb      	adds	r3, r7, #3
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d019      	beq.n	8005f52 <CreateMessage+0x9ca>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f1e:	4b97      	ldr	r3, [pc, #604]	@ (800617c <CreateMessage+0xbf4>)
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7fa f923 	bl	800016c <strlen>
 8005f26:	0003      	movs	r3, r0
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	4b94      	ldr	r3, [pc, #592]	@ (800617c <CreateMessage+0xbf4>)
 8005f2c:	0011      	movs	r1, r2
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f7fe ff9e 	bl	8004e70 <ESP_Send>
 8005f34:	0003      	movs	r3, r0
 8005f36:	001a      	movs	r2, r3
 8005f38:	4b91      	ldr	r3, [pc, #580]	@ (8006180 <CreateMessage+0xbf8>)
 8005f3a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005f3c:	4b91      	ldr	r3, [pc, #580]	@ (8006184 <CreateMessage+0xbfc>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	001a      	movs	r2, r3
 8005f42:	4b8f      	ldr	r3, [pc, #572]	@ (8006180 <CreateMessage+0xbf8>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	4013      	ands	r3, r2
 8005f48:	1e5a      	subs	r2, r3, #1
 8005f4a:	4193      	sbcs	r3, r2
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8006184 <CreateMessage+0xbfc>)
 8005f50:	701a      	strb	r2, [r3, #0]
      }
    }
//  }

  if (IsAHT20SensorPresent()) {
 8005f52:	f007 fa4f 	bl	800d3f4 <IsAHT20SensorPresent>
 8005f56:	1e03      	subs	r3, r0, #0
 8005f58:	d100      	bne.n	8005f5c <CreateMessage+0x9d4>
 8005f5a:	e099      	b.n	8006090 <CreateMessage+0xb08>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005f5c:	4b8a      	ldr	r3, [pc, #552]	@ (8006188 <CreateMessage+0xc00>)
 8005f5e:	4891      	ldr	r0, [pc, #580]	@ (80061a4 <CreateMessage+0xc1c>)
 8005f60:	220c      	movs	r2, #12
 8005f62:	0019      	movs	r1, r3
 8005f64:	f006 f886 	bl	800c074 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005f68:	4a8f      	ldr	r2, [pc, #572]	@ (80061a8 <CreateMessage+0xc20>)
 8005f6a:	4990      	ldr	r1, [pc, #576]	@ (80061ac <CreateMessage+0xc24>)
 8005f6c:	4b86      	ldr	r3, [pc, #536]	@ (8006188 <CreateMessage+0xc00>)
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7ff f9e2 	bl	8005338 <isKeyValid>
 8005f74:	1e03      	subs	r3, r0, #0
 8005f76:	d03e      	beq.n	8005ff6 <CreateMessage+0xa6e>
      uint8ArrayToString(Buffer, keybuffer);
 8005f78:	4a83      	ldr	r2, [pc, #524]	@ (8006188 <CreateMessage+0xc00>)
 8005f7a:	4b87      	ldr	r3, [pc, #540]	@ (8006198 <CreateMessage+0xc10>)
 8005f7c:	0011      	movs	r1, r2
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f7ff fa3a 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
 8005f84:	4b85      	ldr	r3, [pc, #532]	@ (800619c <CreateMessage+0xc14>)
 8005f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f88:	1c18      	adds	r0, r3, #0
 8005f8a:	f7fd fc83 	bl	8003894 <__aeabi_f2d>
 8005f8e:	0002      	movs	r2, r0
 8005f90:	000b      	movs	r3, r1
 8005f92:	4c81      	ldr	r4, [pc, #516]	@ (8006198 <CreateMessage+0xc10>)
 8005f94:	4978      	ldr	r1, [pc, #480]	@ (8006178 <CreateMessage+0xbf0>)
 8005f96:	4879      	ldr	r0, [pc, #484]	@ (800617c <CreateMessage+0xbf4>)
 8005f98:	9200      	str	r2, [sp, #0]
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	0022      	movs	r2, r4
 8005f9e:	f020 f941 	bl	8026224 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
#endif
      index += strlen(message);
 8005fa2:	4b76      	ldr	r3, [pc, #472]	@ (800617c <CreateMessage+0xbf4>)
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7fa f8e1 	bl	800016c <strlen>
 8005faa:	0003      	movs	r3, r0
 8005fac:	b299      	uxth	r1, r3
 8005fae:	220e      	movs	r2, #14
 8005fb0:	18bb      	adds	r3, r7, r2
 8005fb2:	18ba      	adds	r2, r7, r2
 8005fb4:	8812      	ldrh	r2, [r2, #0]
 8005fb6:	188a      	adds	r2, r1, r2
 8005fb8:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fba:	1cfb      	adds	r3, r7, #3
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d019      	beq.n	8005ff6 <CreateMessage+0xa6e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fc2:	4b6e      	ldr	r3, [pc, #440]	@ (800617c <CreateMessage+0xbf4>)
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f7fa f8d1 	bl	800016c <strlen>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	4b6b      	ldr	r3, [pc, #428]	@ (800617c <CreateMessage+0xbf4>)
 8005fd0:	0011      	movs	r1, r2
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f7fe ff4c 	bl	8004e70 <ESP_Send>
 8005fd8:	0003      	movs	r3, r0
 8005fda:	001a      	movs	r2, r3
 8005fdc:	4b68      	ldr	r3, [pc, #416]	@ (8006180 <CreateMessage+0xbf8>)
 8005fde:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005fe0:	4b68      	ldr	r3, [pc, #416]	@ (8006184 <CreateMessage+0xbfc>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	001a      	movs	r2, r3
 8005fe6:	4b66      	ldr	r3, [pc, #408]	@ (8006180 <CreateMessage+0xbf8>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	4013      	ands	r3, r2
 8005fec:	1e5a      	subs	r2, r3, #1
 8005fee:	4193      	sbcs	r3, r2
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	4b64      	ldr	r3, [pc, #400]	@ (8006184 <CreateMessage+0xbfc>)
 8005ff4:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005ff6:	4b64      	ldr	r3, [pc, #400]	@ (8006188 <CreateMessage+0xc00>)
 8005ff8:	486d      	ldr	r0, [pc, #436]	@ (80061b0 <CreateMessage+0xc28>)
 8005ffa:	220c      	movs	r2, #12
 8005ffc:	0019      	movs	r1, r3
 8005ffe:	f006 f839 	bl	800c074 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8006002:	4a6c      	ldr	r2, [pc, #432]	@ (80061b4 <CreateMessage+0xc2c>)
 8006004:	4969      	ldr	r1, [pc, #420]	@ (80061ac <CreateMessage+0xc24>)
 8006006:	4b60      	ldr	r3, [pc, #384]	@ (8006188 <CreateMessage+0xc00>)
 8006008:	0018      	movs	r0, r3
 800600a:	f7ff f995 	bl	8005338 <isKeyValid>
 800600e:	1e03      	subs	r3, r0, #0
 8006010:	d03e      	beq.n	8006090 <CreateMessage+0xb08>
      uint8ArrayToString(Buffer, keybuffer);
 8006012:	4a5d      	ldr	r2, [pc, #372]	@ (8006188 <CreateMessage+0xc00>)
 8006014:	4b60      	ldr	r3, [pc, #384]	@ (8006198 <CreateMessage+0xc10>)
 8006016:	0011      	movs	r1, r2
 8006018:	0018      	movs	r0, r3
 800601a:	f7ff f9ed 	bl	80053f8 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
 800601e:	4b5f      	ldr	r3, [pc, #380]	@ (800619c <CreateMessage+0xc14>)
 8006020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006022:	1c18      	adds	r0, r3, #0
 8006024:	f7fd fc36 	bl	8003894 <__aeabi_f2d>
 8006028:	0002      	movs	r2, r0
 800602a:	000b      	movs	r3, r1
 800602c:	4c5a      	ldr	r4, [pc, #360]	@ (8006198 <CreateMessage+0xc10>)
 800602e:	4952      	ldr	r1, [pc, #328]	@ (8006178 <CreateMessage+0xbf0>)
 8006030:	4852      	ldr	r0, [pc, #328]	@ (800617c <CreateMessage+0xbf4>)
 8006032:	9200      	str	r2, [sp, #0]
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	0022      	movs	r2, r4
 8006038:	f020 f8f4 	bl	8026224 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
  #endif
      index += strlen(message);
 800603c:	4b4f      	ldr	r3, [pc, #316]	@ (800617c <CreateMessage+0xbf4>)
 800603e:	0018      	movs	r0, r3
 8006040:	f7fa f894 	bl	800016c <strlen>
 8006044:	0003      	movs	r3, r0
 8006046:	b299      	uxth	r1, r3
 8006048:	220e      	movs	r2, #14
 800604a:	18bb      	adds	r3, r7, r2
 800604c:	18ba      	adds	r2, r7, r2
 800604e:	8812      	ldrh	r2, [r2, #0]
 8006050:	188a      	adds	r2, r1, r2
 8006052:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006054:	1cfb      	adds	r3, r7, #3
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d019      	beq.n	8006090 <CreateMessage+0xb08>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800605c:	4b47      	ldr	r3, [pc, #284]	@ (800617c <CreateMessage+0xbf4>)
 800605e:	0018      	movs	r0, r3
 8006060:	f7fa f884 	bl	800016c <strlen>
 8006064:	0003      	movs	r3, r0
 8006066:	b29a      	uxth	r2, r3
 8006068:	4b44      	ldr	r3, [pc, #272]	@ (800617c <CreateMessage+0xbf4>)
 800606a:	0011      	movs	r1, r2
 800606c:	0018      	movs	r0, r3
 800606e:	f7fe feff 	bl	8004e70 <ESP_Send>
 8006072:	0003      	movs	r3, r0
 8006074:	001a      	movs	r2, r3
 8006076:	4b42      	ldr	r3, [pc, #264]	@ (8006180 <CreateMessage+0xbf8>)
 8006078:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800607a:	4b42      	ldr	r3, [pc, #264]	@ (8006184 <CreateMessage+0xbfc>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	001a      	movs	r2, r3
 8006080:	4b3f      	ldr	r3, [pc, #252]	@ (8006180 <CreateMessage+0xbf8>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	4013      	ands	r3, r2
 8006086:	1e5a      	subs	r2, r3, #1
 8006088:	4193      	sbcs	r3, r2
 800608a:	b2da      	uxtb	r2, r3
 800608c:	4b3d      	ldr	r3, [pc, #244]	@ (8006184 <CreateMessage+0xbfc>)
 800608e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8006090:	f007 f9c4 	bl	800d41c <IsENS160SensorPresent>
 8006094:	1e03      	subs	r3, r0, #0
 8006096:	d100      	bne.n	800609a <CreateMessage+0xb12>
 8006098:	e0ff      	b.n	800629a <CreateMessage+0xd12>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 800609a:	4b3b      	ldr	r3, [pc, #236]	@ (8006188 <CreateMessage+0xc00>)
 800609c:	4846      	ldr	r0, [pc, #280]	@ (80061b8 <CreateMessage+0xc30>)
 800609e:	220c      	movs	r2, #12
 80060a0:	0019      	movs	r1, r3
 80060a2:	f005 ffe7 	bl	800c074 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 80060a6:	4a45      	ldr	r2, [pc, #276]	@ (80061bc <CreateMessage+0xc34>)
 80060a8:	4945      	ldr	r1, [pc, #276]	@ (80061c0 <CreateMessage+0xc38>)
 80060aa:	4b37      	ldr	r3, [pc, #220]	@ (8006188 <CreateMessage+0xc00>)
 80060ac:	0018      	movs	r0, r3
 80060ae:	f7ff f943 	bl	8005338 <isKeyValid>
 80060b2:	1e03      	subs	r3, r0, #0
 80060b4:	d037      	beq.n	8006126 <CreateMessage+0xb9e>
      uint8ArrayToString(Buffer, keybuffer);
 80060b6:	4a34      	ldr	r2, [pc, #208]	@ (8006188 <CreateMessage+0xc00>)
 80060b8:	4b37      	ldr	r3, [pc, #220]	@ (8006198 <CreateMessage+0xc10>)
 80060ba:	0011      	movs	r1, r2
 80060bc:	0018      	movs	r0, r3
 80060be:	f7ff f99b 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
 80060c2:	4b36      	ldr	r3, [pc, #216]	@ (800619c <CreateMessage+0xc14>)
 80060c4:	2255      	movs	r2, #85	@ 0x55
 80060c6:	5c9b      	ldrb	r3, [r3, r2]
 80060c8:	4a33      	ldr	r2, [pc, #204]	@ (8006198 <CreateMessage+0xc10>)
 80060ca:	493e      	ldr	r1, [pc, #248]	@ (80061c4 <CreateMessage+0xc3c>)
 80060cc:	482b      	ldr	r0, [pc, #172]	@ (800617c <CreateMessage+0xbf4>)
 80060ce:	f020 f8a9 	bl	8026224 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
#endif
      index += strlen(message);
 80060d2:	4b2a      	ldr	r3, [pc, #168]	@ (800617c <CreateMessage+0xbf4>)
 80060d4:	0018      	movs	r0, r3
 80060d6:	f7fa f849 	bl	800016c <strlen>
 80060da:	0003      	movs	r3, r0
 80060dc:	b299      	uxth	r1, r3
 80060de:	220e      	movs	r2, #14
 80060e0:	18bb      	adds	r3, r7, r2
 80060e2:	18ba      	adds	r2, r7, r2
 80060e4:	8812      	ldrh	r2, [r2, #0]
 80060e6:	188a      	adds	r2, r1, r2
 80060e8:	801a      	strh	r2, [r3, #0]
      if (send) {
 80060ea:	1cfb      	adds	r3, r7, #3
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d019      	beq.n	8006126 <CreateMessage+0xb9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80060f2:	4b22      	ldr	r3, [pc, #136]	@ (800617c <CreateMessage+0xbf4>)
 80060f4:	0018      	movs	r0, r3
 80060f6:	f7fa f839 	bl	800016c <strlen>
 80060fa:	0003      	movs	r3, r0
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	4b1f      	ldr	r3, [pc, #124]	@ (800617c <CreateMessage+0xbf4>)
 8006100:	0011      	movs	r1, r2
 8006102:	0018      	movs	r0, r3
 8006104:	f7fe feb4 	bl	8004e70 <ESP_Send>
 8006108:	0003      	movs	r3, r0
 800610a:	001a      	movs	r2, r3
 800610c:	4b1c      	ldr	r3, [pc, #112]	@ (8006180 <CreateMessage+0xbf8>)
 800610e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006110:	4b1c      	ldr	r3, [pc, #112]	@ (8006184 <CreateMessage+0xbfc>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	001a      	movs	r2, r3
 8006116:	4b1a      	ldr	r3, [pc, #104]	@ (8006180 <CreateMessage+0xbf8>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	4013      	ands	r3, r2
 800611c:	1e5a      	subs	r2, r3, #1
 800611e:	4193      	sbcs	r3, r2
 8006120:	b2da      	uxtb	r2, r3
 8006122:	4b18      	ldr	r3, [pc, #96]	@ (8006184 <CreateMessage+0xbfc>)
 8006124:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8006126:	4b18      	ldr	r3, [pc, #96]	@ (8006188 <CreateMessage+0xc00>)
 8006128:	4827      	ldr	r0, [pc, #156]	@ (80061c8 <CreateMessage+0xc40>)
 800612a:	220c      	movs	r2, #12
 800612c:	0019      	movs	r1, r3
 800612e:	f005 ffa1 	bl	800c074 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8006132:	4a26      	ldr	r2, [pc, #152]	@ (80061cc <CreateMessage+0xc44>)
 8006134:	4922      	ldr	r1, [pc, #136]	@ (80061c0 <CreateMessage+0xc38>)
 8006136:	4b14      	ldr	r3, [pc, #80]	@ (8006188 <CreateMessage+0xc00>)
 8006138:	0018      	movs	r0, r3
 800613a:	f7ff f8fd 	bl	8005338 <isKeyValid>
 800613e:	1e03      	subs	r3, r0, #0
 8006140:	d065      	beq.n	800620e <CreateMessage+0xc86>
      uint8ArrayToString(Buffer, keybuffer);
 8006142:	4a11      	ldr	r2, [pc, #68]	@ (8006188 <CreateMessage+0xc00>)
 8006144:	4b14      	ldr	r3, [pc, #80]	@ (8006198 <CreateMessage+0xc10>)
 8006146:	0011      	movs	r1, r2
 8006148:	0018      	movs	r0, r3
 800614a:	f7ff f955 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
 800614e:	4b13      	ldr	r3, [pc, #76]	@ (800619c <CreateMessage+0xc14>)
 8006150:	224a      	movs	r2, #74	@ 0x4a
 8006152:	5a9b      	ldrh	r3, [r3, r2]
 8006154:	4a10      	ldr	r2, [pc, #64]	@ (8006198 <CreateMessage+0xc10>)
 8006156:	491b      	ldr	r1, [pc, #108]	@ (80061c4 <CreateMessage+0xc3c>)
 8006158:	4808      	ldr	r0, [pc, #32]	@ (800617c <CreateMessage+0xbf4>)
 800615a:	f020 f863 	bl	8026224 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
#endif
      index += strlen(message);
 800615e:	4b07      	ldr	r3, [pc, #28]	@ (800617c <CreateMessage+0xbf4>)
 8006160:	0018      	movs	r0, r3
 8006162:	f7fa f803 	bl	800016c <strlen>
 8006166:	0003      	movs	r3, r0
 8006168:	b299      	uxth	r1, r3
 800616a:	220e      	movs	r2, #14
 800616c:	18bb      	adds	r3, r7, r2
 800616e:	18ba      	adds	r2, r7, r2
 8006170:	8812      	ldrh	r2, [r2, #0]
 8006172:	188a      	adds	r2, r1, r2
 8006174:	e02c      	b.n	80061d0 <CreateMessage+0xc48>
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	0802ac4c 	.word	0x0802ac4c
 800617c:	200005c4 	.word	0x200005c4
 8006180:	20000859 	.word	0x20000859
 8006184:	20000032 	.word	0x20000032
 8006188:	20000834 	.word	0x20000834
 800618c:	080800bc 	.word	0x080800bc
 8006190:	0802ad14 	.word	0x0802ad14
 8006194:	0802ad24 	.word	0x0802ad24
 8006198:	20000840 	.word	0x20000840
 800619c:	20000704 	.word	0x20000704
 80061a0:	08080060 	.word	0x08080060
 80061a4:	080800c8 	.word	0x080800c8
 80061a8:	0802acd4 	.word	0x0802acd4
 80061ac:	0802ad28 	.word	0x0802ad28
 80061b0:	080800d4 	.word	0x080800d4
 80061b4:	0802ad08 	.word	0x0802ad08
 80061b8:	080800ec 	.word	0x080800ec
 80061bc:	0802ad30 	.word	0x0802ad30
 80061c0:	0802ad44 	.word	0x0802ad44
 80061c4:	0802ac6c 	.word	0x0802ac6c
 80061c8:	080800f8 	.word	0x080800f8
 80061cc:	0802ad4c 	.word	0x0802ad4c
 80061d0:	801a      	strh	r2, [r3, #0]
      if (send) {
 80061d2:	1cfb      	adds	r3, r7, #3
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d019      	beq.n	800620e <CreateMessage+0xc86>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80061da:	4b5e      	ldr	r3, [pc, #376]	@ (8006354 <CreateMessage+0xdcc>)
 80061dc:	0018      	movs	r0, r3
 80061de:	f7f9 ffc5 	bl	800016c <strlen>
 80061e2:	0003      	movs	r3, r0
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006354 <CreateMessage+0xdcc>)
 80061e8:	0011      	movs	r1, r2
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7fe fe40 	bl	8004e70 <ESP_Send>
 80061f0:	0003      	movs	r3, r0
 80061f2:	001a      	movs	r2, r3
 80061f4:	4b58      	ldr	r3, [pc, #352]	@ (8006358 <CreateMessage+0xdd0>)
 80061f6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80061f8:	4b58      	ldr	r3, [pc, #352]	@ (800635c <CreateMessage+0xdd4>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	001a      	movs	r2, r3
 80061fe:	4b56      	ldr	r3, [pc, #344]	@ (8006358 <CreateMessage+0xdd0>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	4013      	ands	r3, r2
 8006204:	1e5a      	subs	r2, r3, #1
 8006206:	4193      	sbcs	r3, r2
 8006208:	b2da      	uxtb	r2, r3
 800620a:	4b54      	ldr	r3, [pc, #336]	@ (800635c <CreateMessage+0xdd4>)
 800620c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 800620e:	4b54      	ldr	r3, [pc, #336]	@ (8006360 <CreateMessage+0xdd8>)
 8006210:	4854      	ldr	r0, [pc, #336]	@ (8006364 <CreateMessage+0xddc>)
 8006212:	220c      	movs	r2, #12
 8006214:	0019      	movs	r1, r3
 8006216:	f005 ff2d 	bl	800c074 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 800621a:	4a53      	ldr	r2, [pc, #332]	@ (8006368 <CreateMessage+0xde0>)
 800621c:	4953      	ldr	r1, [pc, #332]	@ (800636c <CreateMessage+0xde4>)
 800621e:	4b50      	ldr	r3, [pc, #320]	@ (8006360 <CreateMessage+0xdd8>)
 8006220:	0018      	movs	r0, r3
 8006222:	f7ff f889 	bl	8005338 <isKeyValid>
 8006226:	1e03      	subs	r3, r0, #0
 8006228:	d037      	beq.n	800629a <CreateMessage+0xd12>
      uint8ArrayToString(Buffer, keybuffer);
 800622a:	4a4d      	ldr	r2, [pc, #308]	@ (8006360 <CreateMessage+0xdd8>)
 800622c:	4b50      	ldr	r3, [pc, #320]	@ (8006370 <CreateMessage+0xde8>)
 800622e:	0011      	movs	r1, r2
 8006230:	0018      	movs	r0, r3
 8006232:	f7ff f8e1 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
 8006236:	4b4f      	ldr	r3, [pc, #316]	@ (8006374 <CreateMessage+0xdec>)
 8006238:	2252      	movs	r2, #82	@ 0x52
 800623a:	5a9b      	ldrh	r3, [r3, r2]
 800623c:	4a4c      	ldr	r2, [pc, #304]	@ (8006370 <CreateMessage+0xde8>)
 800623e:	494e      	ldr	r1, [pc, #312]	@ (8006378 <CreateMessage+0xdf0>)
 8006240:	4844      	ldr	r0, [pc, #272]	@ (8006354 <CreateMessage+0xdcc>)
 8006242:	f01f ffef 	bl	8026224 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
#endif
      index += strlen(message);
 8006246:	4b43      	ldr	r3, [pc, #268]	@ (8006354 <CreateMessage+0xdcc>)
 8006248:	0018      	movs	r0, r3
 800624a:	f7f9 ff8f 	bl	800016c <strlen>
 800624e:	0003      	movs	r3, r0
 8006250:	b299      	uxth	r1, r3
 8006252:	220e      	movs	r2, #14
 8006254:	18bb      	adds	r3, r7, r2
 8006256:	18ba      	adds	r2, r7, r2
 8006258:	8812      	ldrh	r2, [r2, #0]
 800625a:	188a      	adds	r2, r1, r2
 800625c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800625e:	1cfb      	adds	r3, r7, #3
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d019      	beq.n	800629a <CreateMessage+0xd12>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8006266:	4b3b      	ldr	r3, [pc, #236]	@ (8006354 <CreateMessage+0xdcc>)
 8006268:	0018      	movs	r0, r3
 800626a:	f7f9 ff7f 	bl	800016c <strlen>
 800626e:	0003      	movs	r3, r0
 8006270:	b29a      	uxth	r2, r3
 8006272:	4b38      	ldr	r3, [pc, #224]	@ (8006354 <CreateMessage+0xdcc>)
 8006274:	0011      	movs	r1, r2
 8006276:	0018      	movs	r0, r3
 8006278:	f7fe fdfa 	bl	8004e70 <ESP_Send>
 800627c:	0003      	movs	r3, r0
 800627e:	001a      	movs	r2, r3
 8006280:	4b35      	ldr	r3, [pc, #212]	@ (8006358 <CreateMessage+0xdd0>)
 8006282:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006284:	4b35      	ldr	r3, [pc, #212]	@ (800635c <CreateMessage+0xdd4>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	001a      	movs	r2, r3
 800628a:	4b33      	ldr	r3, [pc, #204]	@ (8006358 <CreateMessage+0xdd0>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	4013      	ands	r3, r2
 8006290:	1e5a      	subs	r2, r3, #1
 8006292:	4193      	sbcs	r3, r2
 8006294:	b2da      	uxtb	r2, r3
 8006296:	4b31      	ldr	r3, [pc, #196]	@ (800635c <CreateMessage+0xdd4>)
 8006298:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 800629a:	4b31      	ldr	r3, [pc, #196]	@ (8006360 <CreateMessage+0xdd8>)
 800629c:	4837      	ldr	r0, [pc, #220]	@ (800637c <CreateMessage+0xdf4>)
 800629e:	220c      	movs	r2, #12
 80062a0:	0019      	movs	r1, r3
 80062a2:	f005 fee7 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80062a6:	4a2e      	ldr	r2, [pc, #184]	@ (8006360 <CreateMessage+0xdd8>)
 80062a8:	4b31      	ldr	r3, [pc, #196]	@ (8006370 <CreateMessage+0xde8>)
 80062aa:	0011      	movs	r1, r2
 80062ac:	0018      	movs	r0, r3
 80062ae:	f7ff f8a3 	bl	80053f8 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
 80062b2:	4b33      	ldr	r3, [pc, #204]	@ (8006380 <CreateMessage+0xdf8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	1c18      	adds	r0, r3, #0
 80062b8:	f7fd faec 	bl	8003894 <__aeabi_f2d>
 80062bc:	0002      	movs	r2, r0
 80062be:	000b      	movs	r3, r1
 80062c0:	4c2b      	ldr	r4, [pc, #172]	@ (8006370 <CreateMessage+0xde8>)
 80062c2:	4930      	ldr	r1, [pc, #192]	@ (8006384 <CreateMessage+0xdfc>)
 80062c4:	4823      	ldr	r0, [pc, #140]	@ (8006354 <CreateMessage+0xdcc>)
 80062c6:	9200      	str	r2, [sp, #0]
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	0022      	movs	r2, r4
 80062cc:	f01f ffaa 	bl	8026224 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 80062d0:	4b20      	ldr	r3, [pc, #128]	@ (8006354 <CreateMessage+0xdcc>)
 80062d2:	0018      	movs	r0, r3
 80062d4:	f7f9 ff4a 	bl	800016c <strlen>
 80062d8:	0002      	movs	r2, r0
 80062da:	4b1e      	ldr	r3, [pc, #120]	@ (8006354 <CreateMessage+0xdcc>)
 80062dc:	18d3      	adds	r3, r2, r3
 80062de:	4a2a      	ldr	r2, [pc, #168]	@ (8006388 <CreateMessage+0xe00>)
 80062e0:	0011      	movs	r1, r2
 80062e2:	0018      	movs	r0, r3
 80062e4:	f01f ff9e 	bl	8026224 <siprintf>
  index += strlen(message);
 80062e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <CreateMessage+0xdcc>)
 80062ea:	0018      	movs	r0, r3
 80062ec:	f7f9 ff3e 	bl	800016c <strlen>
 80062f0:	0003      	movs	r3, r0
 80062f2:	b299      	uxth	r1, r3
 80062f4:	220e      	movs	r2, #14
 80062f6:	18bb      	adds	r3, r7, r2
 80062f8:	18ba      	adds	r2, r7, r2
 80062fa:	8812      	ldrh	r2, [r2, #0]
 80062fc:	188a      	adds	r2, r1, r2
 80062fe:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006300:	1cfb      	adds	r3, r7, #3
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d019      	beq.n	800633c <CreateMessage+0xdb4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8006308:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <CreateMessage+0xdcc>)
 800630a:	0018      	movs	r0, r3
 800630c:	f7f9 ff2e 	bl	800016c <strlen>
 8006310:	0003      	movs	r3, r0
 8006312:	b29a      	uxth	r2, r3
 8006314:	4b0f      	ldr	r3, [pc, #60]	@ (8006354 <CreateMessage+0xdcc>)
 8006316:	0011      	movs	r1, r2
 8006318:	0018      	movs	r0, r3
 800631a:	f7fe fda9 	bl	8004e70 <ESP_Send>
 800631e:	0003      	movs	r3, r0
 8006320:	001a      	movs	r2, r3
 8006322:	4b0d      	ldr	r3, [pc, #52]	@ (8006358 <CreateMessage+0xdd0>)
 8006324:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <CreateMessage+0xdd4>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	001a      	movs	r2, r3
 800632c:	4b0a      	ldr	r3, [pc, #40]	@ (8006358 <CreateMessage+0xdd0>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	4013      	ands	r3, r2
 8006332:	1e5a      	subs	r2, r3, #1
 8006334:	4193      	sbcs	r3, r2
 8006336:	b2da      	uxtb	r2, r3
 8006338:	4b08      	ldr	r3, [pc, #32]	@ (800635c <CreateMessage+0xdd4>)
 800633a:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800633c:	4b07      	ldr	r3, [pc, #28]	@ (800635c <CreateMessage+0xdd4>)
 800633e:	781a      	ldrb	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	701a      	strb	r2, [r3, #0]
  return index;
 8006344:	230e      	movs	r3, #14
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	881b      	ldrh	r3, [r3, #0]
}
 800634a:	0018      	movs	r0, r3
 800634c:	46bd      	mov	sp, r7
 800634e:	b004      	add	sp, #16
 8006350:	bdb0      	pop	{r4, r5, r7, pc}
 8006352:	46c0      	nop			@ (mov r8, r8)
 8006354:	200005c4 	.word	0x200005c4
 8006358:	20000859 	.word	0x20000859
 800635c:	20000032 	.word	0x20000032
 8006360:	20000834 	.word	0x20000834
 8006364:	08080104 	.word	0x08080104
 8006368:	0802ad54 	.word	0x0802ad54
 800636c:	0802ad44 	.word	0x0802ad44
 8006370:	20000840 	.word	0x20000840
 8006374:	20000704 	.word	0x20000704
 8006378:	0802ac6c 	.word	0x0802ac6c
 800637c:	0808006c 	.word	0x0808006c
 8006380:	20002160 	.word	0x20002160
 8006384:	0802ac4c 	.word	0x0802ac4c
 8006388:	0802ad5c 	.word	0x0802ad5c

0800638c <StartProg>:

void StartProg(){
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8006390:	2064      	movs	r0, #100	@ 0x64
 8006392:	f00e fa9f 	bl	80148d4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006396:	4b15      	ldr	r3, [pc, #84]	@ (80063ec <StartProg+0x60>)
 8006398:	2200      	movs	r2, #0
 800639a:	2101      	movs	r1, #1
 800639c:	0018      	movs	r0, r3
 800639e:	f00f fd02 	bl	8015da6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80063a2:	2064      	movs	r0, #100	@ 0x64
 80063a4:	f00e fa96 	bl	80148d4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80063a8:	4b10      	ldr	r3, [pc, #64]	@ (80063ec <StartProg+0x60>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	2102      	movs	r1, #2
 80063ae:	0018      	movs	r0, r3
 80063b0:	f00f fcf9 	bl	8015da6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80063b4:	23fa      	movs	r3, #250	@ 0xfa
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	0018      	movs	r0, r3
 80063ba:	f00e fa8b 	bl	80148d4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80063be:	4b0b      	ldr	r3, [pc, #44]	@ (80063ec <StartProg+0x60>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	2101      	movs	r1, #1
 80063c4:	0018      	movs	r0, r3
 80063c6:	f00f fcee 	bl	8015da6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80063ca:	23fa      	movs	r3, #250	@ 0xfa
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	0018      	movs	r0, r3
 80063d0:	f00e fa80 	bl	80148d4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80063d4:	4b05      	ldr	r3, [pc, #20]	@ (80063ec <StartProg+0x60>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	2102      	movs	r1, #2
 80063da:	0018      	movs	r0, r3
 80063dc:	f00f fce3 	bl	8015da6 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80063e0:	2028      	movs	r0, #40	@ 0x28
 80063e2:	f00e fa77 	bl	80148d4 <HAL_Delay>
}
 80063e6:	46c0      	nop			@ (mov r8, r8)
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	50001c00 	.word	0x50001c00

080063f0 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80063f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063f2:	b0d9      	sub	sp, #356	@ 0x164
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	0008      	movs	r0, r1
 80063fa:	0011      	movs	r1, r2
 80063fc:	4bab      	ldr	r3, [pc, #684]	@ (80066ac <ParseBuffer+0x2bc>)
 80063fe:	24b0      	movs	r4, #176	@ 0xb0
 8006400:	0064      	lsls	r4, r4, #1
 8006402:	191b      	adds	r3, r3, r4
 8006404:	19db      	adds	r3, r3, r7
 8006406:	1c02      	adds	r2, r0, #0
 8006408:	801a      	strh	r2, [r3, #0]
 800640a:	4ba9      	ldr	r3, [pc, #676]	@ (80066b0 <ParseBuffer+0x2c0>)
 800640c:	191b      	adds	r3, r3, r4
 800640e:	19db      	adds	r3, r3, r7
 8006410:	1c0a      	adds	r2, r1, #0
 8006412:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8006414:	2380      	movs	r3, #128	@ 0x80
 8006416:	005a      	lsls	r2, r3, #1
 8006418:	2348      	movs	r3, #72	@ 0x48
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	2100      	movs	r1, #0
 800641e:	0018      	movs	r0, r3
 8006420:	f020 f848 	bl	80264b4 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8006424:	2360      	movs	r3, #96	@ 0x60
 8006426:	33ff      	adds	r3, #255	@ 0xff
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	2203      	movs	r2, #3
 800642c:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800642e:	23ae      	movs	r3, #174	@ 0xae
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	2200      	movs	r2, #0
 8006436:	801a      	strh	r2, [r3, #0]
 8006438:	e013      	b.n	8006462 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800643a:	20ae      	movs	r0, #174	@ 0xae
 800643c:	0040      	lsls	r0, r0, #1
 800643e:	183b      	adds	r3, r7, r0
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	18d2      	adds	r2, r2, r3
 8006446:	183b      	adds	r3, r7, r0
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	7811      	ldrb	r1, [r2, #0]
 800644c:	4a99      	ldr	r2, [pc, #612]	@ (80066b4 <ParseBuffer+0x2c4>)
 800644e:	24b0      	movs	r4, #176	@ 0xb0
 8006450:	0064      	lsls	r4, r4, #1
 8006452:	1912      	adds	r2, r2, r4
 8006454:	19d2      	adds	r2, r2, r7
 8006456:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8006458:	183b      	adds	r3, r7, r0
 800645a:	881a      	ldrh	r2, [r3, #0]
 800645c:	183b      	adds	r3, r7, r0
 800645e:	3201      	adds	r2, #1
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	23ae      	movs	r3, #174	@ 0xae
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	18fa      	adds	r2, r7, r3
 8006468:	4b90      	ldr	r3, [pc, #576]	@ (80066ac <ParseBuffer+0x2bc>)
 800646a:	21b0      	movs	r1, #176	@ 0xb0
 800646c:	0049      	lsls	r1, r1, #1
 800646e:	185b      	adds	r3, r3, r1
 8006470:	19db      	adds	r3, r3, r7
 8006472:	8812      	ldrh	r2, [r2, #0]
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d3df      	bcc.n	800643a <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800647a:	4b8c      	ldr	r3, [pc, #560]	@ (80066ac <ParseBuffer+0x2bc>)
 800647c:	185b      	adds	r3, r3, r1
 800647e:	19db      	adds	r3, r3, r7
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	4a8c      	ldr	r2, [pc, #560]	@ (80066b4 <ParseBuffer+0x2c4>)
 8006484:	1852      	adds	r2, r2, r1
 8006486:	19d2      	adds	r2, r2, r7
 8006488:	2100      	movs	r1, #0
 800648a:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 800648c:	f00d fd2a 	bl	8013ee4 <GetVerboseLevel>
 8006490:	0003      	movs	r3, r0
 8006492:	2b03      	cmp	r3, #3
 8006494:	d115      	bne.n	80064c2 <ParseBuffer+0xd2>
#ifdef LONGMESSAGES
  if (usblog && Check_USB_PowerOn()) {
 8006496:	4b88      	ldr	r3, [pc, #544]	@ (80066b8 <ParseBuffer+0x2c8>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <ParseBuffer+0xc4>
 800649e:	f003 fb5d 	bl	8009b5c <Check_USB_PowerOn>
 80064a2:	1e03      	subs	r3, r0, #0
 80064a4:	d006      	beq.n	80064b4 <ParseBuffer+0xc4>
    printf_USB("%s\r\n", tempBuf);
 80064a6:	2348      	movs	r3, #72	@ 0x48
 80064a8:	18fa      	adds	r2, r7, r3
 80064aa:	4b84      	ldr	r3, [pc, #528]	@ (80066bc <ParseBuffer+0x2cc>)
 80064ac:	0011      	movs	r1, r2
 80064ae:	0018      	movs	r0, r3
 80064b0:	f002 fa9a 	bl	80089e8 <printf_USB>
  }
  printf("Receive ParseBuffer: %s\r\n", tempBuf );
 80064b4:	2348      	movs	r3, #72	@ 0x48
 80064b6:	18fa      	adds	r2, r7, r3
 80064b8:	4b81      	ldr	r3, [pc, #516]	@ (80066c0 <ParseBuffer+0x2d0>)
 80064ba:	0011      	movs	r1, r2
 80064bc:	0018      	movs	r0, r3
 80064be:	f01f fe41 	bl	8026144 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	26ac      	movs	r6, #172	@ 0xac
 80064c6:	0076      	lsls	r6, r6, #1
 80064c8:	19ba      	adds	r2, r7, r6
 80064ca:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80064cc:	4b7d      	ldr	r3, [pc, #500]	@ (80066c4 <ParseBuffer+0x2d4>)
 80064ce:	25b0      	movs	r5, #176	@ 0xb0
 80064d0:	006d      	lsls	r5, r5, #1
 80064d2:	195b      	adds	r3, r3, r5
 80064d4:	19db      	adds	r3, r3, r7
 80064d6:	4a7c      	ldr	r2, [pc, #496]	@ (80066c8 <ParseBuffer+0x2d8>)
 80064d8:	8811      	ldrh	r1, [r2, #0]
 80064da:	8019      	strh	r1, [r3, #0]
 80064dc:	7892      	ldrb	r2, [r2, #2]
 80064de:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80064e0:	4b7a      	ldr	r3, [pc, #488]	@ (80066cc <ParseBuffer+0x2dc>)
 80064e2:	195b      	adds	r3, r3, r5
 80064e4:	19db      	adds	r3, r3, r7
 80064e6:	4a7a      	ldr	r2, [pc, #488]	@ (80066d0 <ParseBuffer+0x2e0>)
 80064e8:	6811      	ldr	r1, [r2, #0]
 80064ea:	6019      	str	r1, [r3, #0]
 80064ec:	8892      	ldrh	r2, [r2, #4]
 80064ee:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80064f0:	4b78      	ldr	r3, [pc, #480]	@ (80066d4 <ParseBuffer+0x2e4>)
 80064f2:	195b      	adds	r3, r3, r5
 80064f4:	19db      	adds	r3, r3, r7
 80064f6:	4a78      	ldr	r2, [pc, #480]	@ (80066d8 <ParseBuffer+0x2e8>)
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80064fe:	4b77      	ldr	r3, [pc, #476]	@ (80066dc <ParseBuffer+0x2ec>)
 8006500:	195b      	adds	r3, r3, r5
 8006502:	19db      	adds	r3, r3, r7
 8006504:	4a76      	ldr	r2, [pc, #472]	@ (80066e0 <ParseBuffer+0x2f0>)
 8006506:	6811      	ldr	r1, [r2, #0]
 8006508:	6019      	str	r1, [r3, #0]
 800650a:	8892      	ldrh	r2, [r2, #4]
 800650c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800650e:	4b75      	ldr	r3, [pc, #468]	@ (80066e4 <ParseBuffer+0x2f4>)
 8006510:	195b      	adds	r3, r3, r5
 8006512:	19db      	adds	r3, r3, r7
 8006514:	223e      	movs	r2, #62	@ 0x3e
 8006516:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8006518:	4b73      	ldr	r3, [pc, #460]	@ (80066e8 <ParseBuffer+0x2f8>)
 800651a:	195b      	adds	r3, r3, r5
 800651c:	19db      	adds	r3, r3, r7
 800651e:	4a73      	ldr	r2, [pc, #460]	@ (80066ec <ParseBuffer+0x2fc>)
 8006520:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006522:	c313      	stmia	r3!, {r0, r1, r4}
 8006524:	8811      	ldrh	r1, [r2, #0]
 8006526:	8019      	strh	r1, [r3, #0]
 8006528:	7892      	ldrb	r2, [r2, #2]
 800652a:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 800652c:	4b70      	ldr	r3, [pc, #448]	@ (80066f0 <ParseBuffer+0x300>)
 800652e:	195b      	adds	r3, r3, r5
 8006530:	19db      	adds	r3, r3, r7
 8006532:	4a70      	ldr	r2, [pc, #448]	@ (80066f4 <ParseBuffer+0x304>)
 8006534:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006536:	c313      	stmia	r3!, {r0, r1, r4}
 8006538:	8812      	ldrh	r2, [r2, #0]
 800653a:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800653c:	4b5c      	ldr	r3, [pc, #368]	@ (80066b0 <ParseBuffer+0x2c0>)
 800653e:	195b      	adds	r3, r3, r5
 8006540:	19db      	adds	r3, r3, r7
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <ParseBuffer+0x16e>
    ParsePoint = strstr(tempBuf, OK);
 8006548:	2344      	movs	r3, #68	@ 0x44
 800654a:	18fa      	adds	r2, r7, r3
 800654c:	2348      	movs	r3, #72	@ 0x48
 800654e:	18fb      	adds	r3, r7, r3
 8006550:	0011      	movs	r1, r2
 8006552:	0018      	movs	r0, r3
 8006554:	f01f ffe9 	bl	802652a <strstr>
 8006558:	0003      	movs	r3, r0
 800655a:	19ba      	adds	r2, r7, r6
 800655c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 800655e:	4b54      	ldr	r3, [pc, #336]	@ (80066b0 <ParseBuffer+0x2c0>)
 8006560:	22b0      	movs	r2, #176	@ 0xb0
 8006562:	0052      	lsls	r2, r2, #1
 8006564:	189b      	adds	r3, r3, r2
 8006566:	19db      	adds	r3, r3, r7
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d10c      	bne.n	8006588 <ParseBuffer+0x198>
    ParsePoint = strstr(tempBuf, ready);
 800656e:	232c      	movs	r3, #44	@ 0x2c
 8006570:	18fa      	adds	r2, r7, r3
 8006572:	2348      	movs	r3, #72	@ 0x48
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	0011      	movs	r1, r2
 8006578:	0018      	movs	r0, r3
 800657a:	f01f ffd6 	bl	802652a <strstr>
 800657e:	0003      	movs	r3, r0
 8006580:	22ac      	movs	r2, #172	@ 0xac
 8006582:	0052      	lsls	r2, r2, #1
 8006584:	18ba      	adds	r2, r7, r2
 8006586:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8006588:	4b49      	ldr	r3, [pc, #292]	@ (80066b0 <ParseBuffer+0x2c0>)
 800658a:	22b0      	movs	r2, #176	@ 0xb0
 800658c:	0052      	lsls	r2, r2, #1
 800658e:	189b      	adds	r3, r3, r2
 8006590:	19db      	adds	r3, r3, r7
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b02      	cmp	r3, #2
 8006596:	d10c      	bne.n	80065b2 <ParseBuffer+0x1c2>
    ParsePoint = strstr(tempBuf, start);
 8006598:	2328      	movs	r3, #40	@ 0x28
 800659a:	18fa      	adds	r2, r7, r3
 800659c:	2348      	movs	r3, #72	@ 0x48
 800659e:	18fb      	adds	r3, r7, r3
 80065a0:	0011      	movs	r1, r2
 80065a2:	0018      	movs	r0, r3
 80065a4:	f01f ffc1 	bl	802652a <strstr>
 80065a8:	0003      	movs	r3, r0
 80065aa:	22ac      	movs	r2, #172	@ 0xac
 80065ac:	0052      	lsls	r2, r2, #1
 80065ae:	18ba      	adds	r2, r7, r2
 80065b0:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80065b2:	4b3f      	ldr	r3, [pc, #252]	@ (80066b0 <ParseBuffer+0x2c0>)
 80065b4:	22b0      	movs	r2, #176	@ 0xb0
 80065b6:	0052      	lsls	r2, r2, #1
 80065b8:	189b      	adds	r3, r3, r2
 80065ba:	19db      	adds	r3, r3, r7
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b05      	cmp	r3, #5
 80065c0:	d10c      	bne.n	80065dc <ParseBuffer+0x1ec>
    ParsePoint = strstr(tempBuf, TIME);
 80065c2:	2308      	movs	r3, #8
 80065c4:	18fa      	adds	r2, r7, r3
 80065c6:	2348      	movs	r3, #72	@ 0x48
 80065c8:	18fb      	adds	r3, r7, r3
 80065ca:	0011      	movs	r1, r2
 80065cc:	0018      	movs	r0, r3
 80065ce:	f01f ffac 	bl	802652a <strstr>
 80065d2:	0003      	movs	r3, r0
 80065d4:	22ac      	movs	r2, #172	@ 0xac
 80065d6:	0052      	lsls	r2, r2, #1
 80065d8:	18ba      	adds	r2, r7, r2
 80065da:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80065dc:	233c      	movs	r3, #60	@ 0x3c
 80065de:	18fa      	adds	r2, r7, r3
 80065e0:	2448      	movs	r4, #72	@ 0x48
 80065e2:	193b      	adds	r3, r7, r4
 80065e4:	0011      	movs	r1, r2
 80065e6:	0018      	movs	r0, r3
 80065e8:	f01f ff9f 	bl	802652a <strstr>
 80065ec:	0003      	movs	r3, r0
 80065ee:	22aa      	movs	r2, #170	@ 0xaa
 80065f0:	0052      	lsls	r2, r2, #1
 80065f2:	18ba      	adds	r2, r7, r2
 80065f4:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80065f6:	2318      	movs	r3, #24
 80065f8:	18fa      	adds	r2, r7, r3
 80065fa:	193b      	adds	r3, r7, r4
 80065fc:	0011      	movs	r1, r2
 80065fe:	0018      	movs	r0, r3
 8006600:	f01f ff93 	bl	802652a <strstr>
 8006604:	0003      	movs	r3, r0
 8006606:	22a8      	movs	r2, #168	@ 0xa8
 8006608:	0052      	lsls	r2, r2, #1
 800660a:	18ba      	adds	r2, r7, r2
 800660c:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, Credentials.SSID);
 800660e:	4a3a      	ldr	r2, [pc, #232]	@ (80066f8 <ParseBuffer+0x308>)
 8006610:	193b      	adds	r3, r7, r4
 8006612:	0011      	movs	r1, r2
 8006614:	0018      	movs	r0, r3
 8006616:	f01f ff88 	bl	802652a <strstr>
 800661a:	0003      	movs	r3, r0
 800661c:	22a6      	movs	r2, #166	@ 0xa6
 800661e:	0052      	lsls	r2, r2, #1
 8006620:	18ba      	adds	r2, r7, r2
 8006622:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8006624:	2334      	movs	r3, #52	@ 0x34
 8006626:	18fa      	adds	r2, r7, r3
 8006628:	193b      	adds	r3, r7, r4
 800662a:	0011      	movs	r1, r2
 800662c:	0018      	movs	r0, r3
 800662e:	f01f ff7c 	bl	802652a <strstr>
 8006632:	0003      	movs	r3, r0
 8006634:	22a4      	movs	r2, #164	@ 0xa4
 8006636:	0052      	lsls	r2, r2, #1
 8006638:	18ba      	adds	r2, r7, r2
 800663a:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 800663c:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <ParseBuffer+0x2bc>)
 800663e:	21b0      	movs	r1, #176	@ 0xb0
 8006640:	0049      	lsls	r1, r1, #1
 8006642:	185b      	adds	r3, r3, r1
 8006644:	19db      	adds	r3, r3, r7
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d800      	bhi.n	800664e <ParseBuffer+0x25e>
 800664c:	e0b5      	b.n	80067ba <ParseBuffer+0x3ca>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 800664e:	22ac      	movs	r2, #172	@ 0xac
 8006650:	0052      	lsls	r2, r2, #1
 8006652:	18bb      	adds	r3, r7, r2
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d056      	beq.n	8006708 <ParseBuffer+0x318>
 800665a:	18bb      	adds	r3, r7, r2
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b4f      	cmp	r3, #79	@ 0x4f
 8006662:	d151      	bne.n	8006708 <ParseBuffer+0x318>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8006664:	2360      	movs	r3, #96	@ 0x60
 8006666:	33ff      	adds	r3, #255	@ 0xff
 8006668:	18fb      	adds	r3, r7, r3
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 800666e:	4b23      	ldr	r3, [pc, #140]	@ (80066fc <ParseBuffer+0x30c>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b12      	cmp	r3, #18
 8006674:	d148      	bne.n	8006708 <ParseBuffer+0x318>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8006676:	4b0d      	ldr	r3, [pc, #52]	@ (80066ac <ParseBuffer+0x2bc>)
 8006678:	185b      	adds	r3, r3, r1
 800667a:	19db      	adds	r3, r3, r7
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	2b2b      	cmp	r3, #43	@ 0x2b
 8006680:	d10b      	bne.n	800669a <ParseBuffer+0x2aa>
 8006682:	4b0c      	ldr	r3, [pc, #48]	@ (80066b4 <ParseBuffer+0x2c4>)
 8006684:	185b      	adds	r3, r3, r1
 8006686:	19db      	adds	r3, r3, r7
 8006688:	2221      	movs	r2, #33	@ 0x21
 800668a:	5c9b      	ldrb	r3, [r3, r2]
 800668c:	2b32      	cmp	r3, #50	@ 0x32
 800668e:	d104      	bne.n	800669a <ParseBuffer+0x2aa>
          ParseTime(tempBuf);
 8006690:	193b      	adds	r3, r7, r4
 8006692:	0018      	movs	r0, r3
 8006694:	f003 fd10 	bl	800a0b8 <ParseTime>
 8006698:	e036      	b.n	8006708 <ParseBuffer+0x318>
        }
        else {
          Error("Error getting time");
 800669a:	4a19      	ldr	r2, [pc, #100]	@ (8006700 <ParseBuffer+0x310>)
 800669c:	4b19      	ldr	r3, [pc, #100]	@ (8006704 <ParseBuffer+0x314>)
 800669e:	0019      	movs	r1, r3
 80066a0:	2001      	movs	r0, #1
 80066a2:	f00d fb95 	bl	8013dd0 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80066a6:	2306      	movs	r3, #6
 80066a8:	e08b      	b.n	80067c2 <ParseBuffer+0x3d2>
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	fffffea2 	.word	0xfffffea2
 80066b0:	fffffea1 	.word	0xfffffea1
 80066b4:	fffffee8 	.word	0xfffffee8
 80066b8:	200010f7 	.word	0x200010f7
 80066bc:	0802ad60 	.word	0x0802ad60
 80066c0:	0802ad68 	.word	0x0802ad68
 80066c4:	fffffee4 	.word	0xfffffee4
 80066c8:	0802ad98 	.word	0x0802ad98
 80066cc:	fffffedc 	.word	0xfffffedc
 80066d0:	0802ad9c 	.word	0x0802ad9c
 80066d4:	fffffed4 	.word	0xfffffed4
 80066d8:	4c494146 	.word	0x4c494146
 80066dc:	fffffecc 	.word	0xfffffecc
 80066e0:	0802ada4 	.word	0x0802ada4
 80066e4:	fffffec8 	.word	0xfffffec8
 80066e8:	fffffeb8 	.word	0xfffffeb8
 80066ec:	0802adac 	.word	0x0802adac
 80066f0:	fffffea8 	.word	0xfffffea8
 80066f4:	0802adbc 	.word	0x0802adbc
 80066f8:	200006a0 	.word	0x200006a0
 80066fc:	20000701 	.word	0x20000701
 8006700:	0802ad84 	.word	0x0802ad84
 8006704:	0802a8f0 	.word	0x0802a8f0
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8006708:	22ac      	movs	r2, #172	@ 0xac
 800670a:	0052      	lsls	r2, r2, #1
 800670c:	18bb      	adds	r3, r7, r2
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d009      	beq.n	8006728 <ParseBuffer+0x338>
 8006714:	18bb      	adds	r3, r7, r2
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b72      	cmp	r3, #114	@ 0x72
 800671c:	d104      	bne.n	8006728 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_READY;
 800671e:	2360      	movs	r3, #96	@ 0x60
 8006720:	33ff      	adds	r3, #255	@ 0xff
 8006722:	18fb      	adds	r3, r7, r3
 8006724:	2202      	movs	r2, #2
 8006726:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8006728:	22ac      	movs	r2, #172	@ 0xac
 800672a:	0052      	lsls	r2, r2, #1
 800672c:	18bb      	adds	r3, r7, r2
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <ParseBuffer+0x358>
 8006734:	18bb      	adds	r3, r7, r2
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b3e      	cmp	r3, #62	@ 0x3e
 800673c:	d104      	bne.n	8006748 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_START;
 800673e:	2360      	movs	r3, #96	@ 0x60
 8006740:	33ff      	adds	r3, #255	@ 0xff
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	2205      	movs	r2, #5
 8006746:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8006748:	22ac      	movs	r2, #172	@ 0xac
 800674a:	0052      	lsls	r2, r2, #1
 800674c:	18bb      	adds	r3, r7, r2
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <ParseBuffer+0x378>
 8006754:	18bb      	adds	r3, r7, r2
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b2b      	cmp	r3, #43	@ 0x2b
 800675c:	d104      	bne.n	8006768 <ParseBuffer+0x378>
      status = RECEIVE_STATUS_TIME;
 800675e:	2360      	movs	r3, #96	@ 0x60
 8006760:	33ff      	adds	r3, #255	@ 0xff
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	220b      	movs	r2, #11
 8006766:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006768:	22aa      	movs	r2, #170	@ 0xaa
 800676a:	0052      	lsls	r2, r2, #1
 800676c:	18bb      	adds	r3, r7, r2
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <ParseBuffer+0x38e>
 8006774:	18bb      	adds	r3, r7, r2
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b45      	cmp	r3, #69	@ 0x45
 800677c:	d00a      	beq.n	8006794 <ParseBuffer+0x3a4>
 800677e:	22a4      	movs	r2, #164	@ 0xa4
 8006780:	0052      	lsls	r2, r2, #1
 8006782:	18bb      	adds	r3, r7, r2
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <ParseBuffer+0x3ae>
 800678a:	18bb      	adds	r3, r7, r2
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b46      	cmp	r3, #70	@ 0x46
 8006792:	d104      	bne.n	800679e <ParseBuffer+0x3ae>
      status = RECEIVE_STATUS_ERROR;
 8006794:	2360      	movs	r3, #96	@ 0x60
 8006796:	33ff      	adds	r3, #255	@ 0xff
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	2201      	movs	r2, #1
 800679c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800679e:	22a8      	movs	r2, #168	@ 0xa8
 80067a0:	0052      	lsls	r2, r2, #1
 80067a2:	18bb      	adds	r3, r7, r2
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <ParseBuffer+0x3ca>
 80067aa:	18bb      	adds	r3, r7, r2
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b57      	cmp	r3, #87	@ 0x57
 80067b2:	d102      	bne.n	80067ba <ParseBuffer+0x3ca>
      ConnectionMade = true;
 80067b4:	4b05      	ldr	r3, [pc, #20]	@ (80067cc <ParseBuffer+0x3dc>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
    }
  }
  return(status);
 80067ba:	2360      	movs	r3, #96	@ 0x60
 80067bc:	33ff      	adds	r3, #255	@ 0xff
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	781b      	ldrb	r3, [r3, #0]

}
 80067c2:	0018      	movs	r0, r3
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b059      	add	sp, #356	@ 0x164
 80067c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ca:	46c0      	nop			@ (mov r8, r8)
 80067cc:	200005b0 	.word	0x200005b0

080067d0 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80067d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <PollAwake+0x34>)
 80067d8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	0018      	movs	r0, r3
 80067de:	f7f9 fcc5 	bl	800016c <strlen>
 80067e2:	0003      	movs	r3, r0
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	0011      	movs	r1, r2
 80067ea:	0018      	movs	r0, r3
 80067ec:	f7fe fb40 	bl	8004e70 <ESP_Send>
 80067f0:	1e03      	subs	r3, r0, #0
 80067f2:	d001      	beq.n	80067f8 <PollAwake+0x28>
    return true;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e000      	b.n	80067fa <PollAwake+0x2a>
  }
  else{
    return false;
 80067f8:	2300      	movs	r3, #0
  }
}
 80067fa:	0018      	movs	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	b002      	add	sp, #8
 8006800:	bd80      	pop	{r7, pc}
 8006802:	46c0      	nop			@ (mov r8, r8)
 8006804:	0802adcc 	.word	0x0802adcc

08006808 <RFPower>:

bool RFPower(){
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800680e:	4b0b      	ldr	r3, [pc, #44]	@ (800683c <RFPower+0x34>)
 8006810:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0018      	movs	r0, r3
 8006816:	f7f9 fca9 	bl	800016c <strlen>
 800681a:	0003      	movs	r3, r0
 800681c:	b29a      	uxth	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	0011      	movs	r1, r2
 8006822:	0018      	movs	r0, r3
 8006824:	f7fe fb24 	bl	8004e70 <ESP_Send>
 8006828:	1e03      	subs	r3, r0, #0
 800682a:	d001      	beq.n	8006830 <RFPower+0x28>
    return true;
 800682c:	2301      	movs	r3, #1
 800682e:	e000      	b.n	8006832 <RFPower+0x2a>
  }
  else{
    return false;
 8006830:	2300      	movs	r3, #0
  }
}
 8006832:	0018      	movs	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	b002      	add	sp, #8
 8006838:	bd80      	pop	{r7, pc}
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	0802add4 	.word	0x0802add4

08006840 <CheckRFPower>:

bool CheckRFPower(){
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8006846:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <CheckRFPower+0x34>)
 8006848:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	0018      	movs	r0, r3
 800684e:	f7f9 fc8d 	bl	800016c <strlen>
 8006852:	0003      	movs	r3, r0
 8006854:	b29a      	uxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	0011      	movs	r1, r2
 800685a:	0018      	movs	r0, r3
 800685c:	f7fe fb08 	bl	8004e70 <ESP_Send>
 8006860:	1e03      	subs	r3, r0, #0
 8006862:	d001      	beq.n	8006868 <CheckRFPower+0x28>
    return true;
 8006864:	2301      	movs	r3, #1
 8006866:	e000      	b.n	800686a <CheckRFPower+0x2a>
  }
  else{
    return false;
 8006868:	2300      	movs	r3, #0
  }
}
 800686a:	0018      	movs	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	b002      	add	sp, #8
 8006870:	bd80      	pop	{r7, pc}
 8006872:	46c0      	nop			@ (mov r8, r8)
 8006874:	0802ade4 	.word	0x0802ade4

08006878 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800687e:	4b0b      	ldr	r3, [pc, #44]	@ (80068ac <ATRestore+0x34>)
 8006880:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	0018      	movs	r0, r3
 8006886:	f7f9 fc71 	bl	800016c <strlen>
 800688a:	0003      	movs	r3, r0
 800688c:	b29a      	uxth	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	0011      	movs	r1, r2
 8006892:	0018      	movs	r0, r3
 8006894:	f7fe faec 	bl	8004e70 <ESP_Send>
 8006898:	1e03      	subs	r3, r0, #0
 800689a:	d001      	beq.n	80068a0 <ATRestore+0x28>
    return true;
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <ATRestore+0x2a>
  }
  else{
    return false;
 80068a0:	2300      	movs	r3, #0
  }
}
 80068a2:	0018      	movs	r0, r3
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b002      	add	sp, #8
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	46c0      	nop			@ (mov r8, r8)
 80068ac:	0802adf4 	.word	0x0802adf4

080068b0 <CWINIT>:

bool CWINIT(){
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <CWINIT+0x34>)
 80068b8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	0018      	movs	r0, r3
 80068be:	f7f9 fc55 	bl	800016c <strlen>
 80068c2:	0003      	movs	r3, r0
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	0011      	movs	r1, r2
 80068ca:	0018      	movs	r0, r3
 80068cc:	f7fe fad0 	bl	8004e70 <ESP_Send>
 80068d0:	1e03      	subs	r3, r0, #0
 80068d2:	d001      	beq.n	80068d8 <CWINIT+0x28>
    return true;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <CWINIT+0x2a>
  }
  else{
    return false;
 80068d8:	2300      	movs	r3, #0
  }
}
 80068da:	0018      	movs	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	b002      	add	sp, #8
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	46c0      	nop			@ (mov r8, r8)
 80068e4:	0802ae04 	.word	0x0802ae04

080068e8 <CWMODE1>:

bool CWMODE1(){
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <CWMODE1+0x34>)
 80068f0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0018      	movs	r0, r3
 80068f6:	f7f9 fc39 	bl	800016c <strlen>
 80068fa:	0003      	movs	r3, r0
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	0011      	movs	r1, r2
 8006902:	0018      	movs	r0, r3
 8006904:	f7fe fab4 	bl	8004e70 <ESP_Send>
 8006908:	1e03      	subs	r3, r0, #0
 800690a:	d001      	beq.n	8006910 <CWMODE1+0x28>
    return true;
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <CWMODE1+0x2a>
  }
  else{
    return false;
 8006910:	2300      	movs	r3, #0
  }
}
 8006912:	0018      	movs	r0, r3
 8006914:	46bd      	mov	sp, r7
 8006916:	b002      	add	sp, #8
 8006918:	bd80      	pop	{r7, pc}
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	0802ae14 	.word	0x0802ae14

08006920 <CWMODE2>:

bool CWMODE2(){
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8006926:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <CWMODE2+0x34>)
 8006928:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	0018      	movs	r0, r3
 800692e:	f7f9 fc1d 	bl	800016c <strlen>
 8006932:	0003      	movs	r3, r0
 8006934:	b29a      	uxth	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0011      	movs	r1, r2
 800693a:	0018      	movs	r0, r3
 800693c:	f7fe fa98 	bl	8004e70 <ESP_Send>
 8006940:	1e03      	subs	r3, r0, #0
 8006942:	d001      	beq.n	8006948 <CWMODE2+0x28>
    return true;
 8006944:	2301      	movs	r3, #1
 8006946:	e000      	b.n	800694a <CWMODE2+0x2a>
  }
  else{
    return false;
 8006948:	2300      	movs	r3, #0
  }
}
 800694a:	0018      	movs	r0, r3
 800694c:	46bd      	mov	sp, r7
 800694e:	b002      	add	sp, #8
 8006950:	bd80      	pop	{r7, pc}
 8006952:	46c0      	nop			@ (mov r8, r8)
 8006954:	0802ae24 	.word	0x0802ae24

08006958 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800695e:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <CWAUTOCONN+0x34>)
 8006960:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	0018      	movs	r0, r3
 8006966:	f7f9 fc01 	bl	800016c <strlen>
 800696a:	0003      	movs	r3, r0
 800696c:	b29a      	uxth	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	0011      	movs	r1, r2
 8006972:	0018      	movs	r0, r3
 8006974:	f7fe fa7c 	bl	8004e70 <ESP_Send>
 8006978:	1e03      	subs	r3, r0, #0
 800697a:	d001      	beq.n	8006980 <CWAUTOCONN+0x28>
    return true;
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8006980:	2300      	movs	r3, #0
  }
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b002      	add	sp, #8
 8006988:	bd80      	pop	{r7, pc}
 800698a:	46c0      	nop			@ (mov r8, r8)
 800698c:	0802ae34 	.word	0x0802ae34

08006990 <CWJAP>:

bool CWJAP()
{
 8006990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006992:	46c6      	mov	lr, r8
 8006994:	b500      	push	{lr}
 8006996:	b08a      	sub	sp, #40	@ 0x28
 8006998:	af00      	add	r7, sp, #0
 800699a:	466b      	mov	r3, sp
 800699c:	4698      	mov	r8, r3
  APtested = true;
 800699e:	4b36      	ldr	r3, [pc, #216]	@ (8006a78 <CWJAP+0xe8>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	701a      	strb	r2, [r3, #0]
  getWifiCred();
 80069a4:	f7fd ffb4 	bl	8004910 <getWifiCred>
  static char atCommandBuff[112];
  memset(atCommandBuff, '\0', 112);
 80069a8:	4b34      	ldr	r3, [pc, #208]	@ (8006a7c <CWJAP+0xec>)
 80069aa:	2270      	movs	r2, #112	@ 0x70
 80069ac:	2100      	movs	r1, #0
 80069ae:	0018      	movs	r0, r3
 80069b0:	f01f fd80 	bl	80264b4 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", Credentials.SSID, Credentials.Password);
 80069b4:	4b32      	ldr	r3, [pc, #200]	@ (8006a80 <CWJAP+0xf0>)
 80069b6:	4a33      	ldr	r2, [pc, #204]	@ (8006a84 <CWJAP+0xf4>)
 80069b8:	4933      	ldr	r1, [pc, #204]	@ (8006a88 <CWJAP+0xf8>)
 80069ba:	4830      	ldr	r0, [pc, #192]	@ (8006a7c <CWJAP+0xec>)
 80069bc:	f01f fc32 	bl	8026224 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80069c0:	4b2e      	ldr	r3, [pc, #184]	@ (8006a7c <CWJAP+0xec>)
 80069c2:	0018      	movs	r0, r3
 80069c4:	f7f9 fbd2 	bl	800016c <strlen>
 80069c8:	0002      	movs	r2, r0
 80069ca:	210f      	movs	r1, #15
 80069cc:	2018      	movs	r0, #24
 80069ce:	180b      	adds	r3, r1, r0
 80069d0:	19db      	adds	r3, r3, r7
 80069d2:	701a      	strb	r2, [r3, #0]
  char atCommand[len + 1];
 80069d4:	180b      	adds	r3, r1, r0
 80069d6:	19db      	adds	r3, r3, r7
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	3301      	adds	r3, #1
 80069dc:	1e5a      	subs	r2, r3, #1
 80069de:	623a      	str	r2, [r7, #32]
 80069e0:	001a      	movs	r2, r3
 80069e2:	60ba      	str	r2, [r7, #8]
 80069e4:	2200      	movs	r2, #0
 80069e6:	60fa      	str	r2, [r7, #12]
 80069e8:	68b8      	ldr	r0, [r7, #8]
 80069ea:	68f9      	ldr	r1, [r7, #12]
 80069ec:	0002      	movs	r2, r0
 80069ee:	0f52      	lsrs	r2, r2, #29
 80069f0:	000e      	movs	r6, r1
 80069f2:	00f6      	lsls	r6, r6, #3
 80069f4:	617e      	str	r6, [r7, #20]
 80069f6:	697e      	ldr	r6, [r7, #20]
 80069f8:	4316      	orrs	r6, r2
 80069fa:	617e      	str	r6, [r7, #20]
 80069fc:	0002      	movs	r2, r0
 80069fe:	00d2      	lsls	r2, r2, #3
 8006a00:	613a      	str	r2, [r7, #16]
 8006a02:	001a      	movs	r2, r3
 8006a04:	603a      	str	r2, [r7, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	607a      	str	r2, [r7, #4]
 8006a0a:	6838      	ldr	r0, [r7, #0]
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	0002      	movs	r2, r0
 8006a10:	0f52      	lsrs	r2, r2, #29
 8006a12:	000e      	movs	r6, r1
 8006a14:	00f5      	lsls	r5, r6, #3
 8006a16:	4315      	orrs	r5, r2
 8006a18:	0002      	movs	r2, r0
 8006a1a:	00d4      	lsls	r4, r2, #3
 8006a1c:	3307      	adds	r3, #7
 8006a1e:	08db      	lsrs	r3, r3, #3
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	466a      	mov	r2, sp
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	469d      	mov	sp, r3
 8006a28:	466b      	mov	r3, sp
 8006a2a:	3300      	adds	r3, #0
 8006a2c:	61fb      	str	r3, [r7, #28]
  memset(atCommand, '\0', len + 1);
 8006a2e:	240f      	movs	r4, #15
 8006a30:	2518      	movs	r5, #24
 8006a32:	1963      	adds	r3, r4, r5
 8006a34:	19db      	adds	r3, r3, r7
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	001a      	movs	r2, r3
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2100      	movs	r1, #0
 8006a40:	0018      	movs	r0, r3
 8006a42:	f01f fd37 	bl	80264b4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006a46:	1963      	adds	r3, r4, r5
 8006a48:	19db      	adds	r3, r3, r7
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	490b      	ldr	r1, [pc, #44]	@ (8006a7c <CWJAP+0xec>)
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	0018      	movs	r0, r3
 8006a52:	f01f fd56 	bl	8026502 <strncpy>
  return ESP_Send((uint8_t*)atCommand, len);
 8006a56:	1963      	adds	r3, r4, r5
 8006a58:	19db      	adds	r3, r3, r7
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	0011      	movs	r1, r2
 8006a62:	0018      	movs	r0, r3
 8006a64:	f7fe fa04 	bl	8004e70 <ESP_Send>
 8006a68:	0003      	movs	r3, r0
 8006a6a:	46c5      	mov	sp, r8
}
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b00a      	add	sp, #40	@ 0x28
 8006a72:	bc80      	pop	{r7}
 8006a74:	46b8      	mov	r8, r7
 8006a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a78:	200005b1 	.word	0x200005b1
 8006a7c:	2000086c 	.word	0x2000086c
 8006a80:	200006c0 	.word	0x200006c0
 8006a84:	200006a0 	.word	0x200006a0
 8006a88:	0802ae48 	.word	0x0802ae48

08006a8c <CWMODE3>:


bool CWMODE3(){
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006a92:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <CWMODE3+0x34>)
 8006a94:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7f9 fb67 	bl	800016c <strlen>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	0011      	movs	r1, r2
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f7fe f9e2 	bl	8004e70 <ESP_Send>
 8006aac:	1e03      	subs	r3, r0, #0
 8006aae:	d001      	beq.n	8006ab4 <CWMODE3+0x28>
    return true;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <CWMODE3+0x2a>
  }
  else{
    return false;
 8006ab4:	2300      	movs	r3, #0
  }
}
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b002      	add	sp, #8
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	46c0      	nop			@ (mov r8, r8)
 8006ac0:	0802ae60 	.word	0x0802ae60

08006ac4 <CWSTATE>:

bool CWSTATE(){
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8006aca:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <CWSTATE+0x34>)
 8006acc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f7f9 fb4b 	bl	800016c <strlen>
 8006ad6:	0003      	movs	r3, r0
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	0011      	movs	r1, r2
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7fe f9c6 	bl	8004e70 <ESP_Send>
 8006ae4:	1e03      	subs	r3, r0, #0
 8006ae6:	d001      	beq.n	8006aec <CWSTATE+0x28>
    return true;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <CWSTATE+0x2a>
  }
  else{
    return false;
 8006aec:	2300      	movs	r3, #0
  }
}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b002      	add	sp, #8
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	0802ae70 	.word	0x0802ae70

08006afc <CWSAP>:

bool CWSAP(){
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006b02:	4b0b      	ldr	r3, [pc, #44]	@ (8006b30 <CWSAP+0x34>)
 8006b04:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f7f9 fb2f 	bl	800016c <strlen>
 8006b0e:	0003      	movs	r3, r0
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	0011      	movs	r1, r2
 8006b16:	0018      	movs	r0, r3
 8006b18:	f7fe f9aa 	bl	8004e70 <ESP_Send>
 8006b1c:	1e03      	subs	r3, r0, #0
 8006b1e:	d001      	beq.n	8006b24 <CWSAP+0x28>
    return true;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <CWSAP+0x2a>
  }
  else{
    return false;
 8006b24:	2300      	movs	r3, #0
  }
}
 8006b26:	0018      	movs	r0, r3
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b002      	add	sp, #8
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	46c0      	nop			@ (mov r8, r8)
 8006b30:	0802ae80 	.word	0x0802ae80

08006b34 <CIPMUX>:

bool CIPMUX(){
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b68 <CIPMUX+0x34>)
 8006b3c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	0018      	movs	r0, r3
 8006b42:	f7f9 fb13 	bl	800016c <strlen>
 8006b46:	0003      	movs	r3, r0
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	0011      	movs	r1, r2
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f7fe f98e 	bl	8004e70 <ESP_Send>
 8006b54:	1e03      	subs	r3, r0, #0
 8006b56:	d001      	beq.n	8006b5c <CIPMUX+0x28>
    return true;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <CIPMUX+0x2a>
  }
  else{
    return false;
 8006b5c:	2300      	movs	r3, #0
  }
}
 8006b5e:	0018      	movs	r0, r3
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			@ (mov r8, r8)
 8006b68:	0802aea4 	.word	0x0802aea4

08006b6c <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006b72:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <WEBSERVER+0x34>)
 8006b74:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f7f9 faf7 	bl	800016c <strlen>
 8006b7e:	0003      	movs	r3, r0
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	0011      	movs	r1, r2
 8006b86:	0018      	movs	r0, r3
 8006b88:	f7fe f972 	bl	8004e70 <ESP_Send>
 8006b8c:	1e03      	subs	r3, r0, #0
 8006b8e:	d001      	beq.n	8006b94 <WEBSERVER+0x28>
    return true;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006b94:	2300      	movs	r3, #0
  }
}
 8006b96:	0018      	movs	r0, r3
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	b002      	add	sp, #8
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	46c0      	nop			@ (mov r8, r8)
 8006ba0:	0802aeb4 	.word	0x0802aeb4

08006ba4 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006ba4:	b5b0      	push	{r4, r5, r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006baa:	1cfb      	adds	r3, r7, #3
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
  uint16_t length = CreateMessage(&txresult, false);
 8006bb0:	1dbc      	adds	r4, r7, #6
 8006bb2:	1cfb      	adds	r3, r7, #3
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f7fe fce6 	bl	8005588 <CreateMessage>
 8006bbc:	0003      	movs	r3, r0
 8006bbe:	8023      	strh	r3, [r4, #0]
  static uint8_t boxConfig[IdSize];
  static char Buffer[1+(2*IdSize)];
  static uint8_t URLToUpload[URLToUploadMaxLength];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006bc0:	4b22      	ldr	r3, [pc, #136]	@ (8006c4c <HTTPCPOST+0xa8>)
 8006bc2:	4823      	ldr	r0, [pc, #140]	@ (8006c50 <HTTPCPOST+0xac>)
 8006bc4:	220c      	movs	r2, #12
 8006bc6:	0019      	movs	r1, r3
 8006bc8:	f005 fa54 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c4c <HTTPCPOST+0xa8>)
 8006bce:	4b21      	ldr	r3, [pc, #132]	@ (8006c54 <HTTPCPOST+0xb0>)
 8006bd0:	0011      	movs	r1, r2
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f7fe fc10 	bl	80053f8 <uint8ArrayToString>
//  sprintf(message, "AT+HTTPCPOST=%s/%s/data\",%d,1,%s\r\n", API, Buffer, length, header1);
  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUpload, URLToUploadMaxLength);
 8006bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8006c58 <HTTPCPOST+0xb4>)
 8006bda:	4820      	ldr	r0, [pc, #128]	@ (8006c5c <HTTPCPOST+0xb8>)
 8006bdc:	2230      	movs	r2, #48	@ 0x30
 8006bde:	0019      	movs	r1, r3
 8006be0:	f005 fa48 	bl	800c074 <ReadUint8ArrayEEprom>
  if (strlen((char*)URLToUpload) == 0) {
 8006be4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c58 <HTTPCPOST+0xb4>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10b      	bne.n	8006c04 <HTTPCPOST+0x60>
    strcpy ((char*)URLToUpload,API);
 8006bec:	4b1a      	ldr	r3, [pc, #104]	@ (8006c58 <HTTPCPOST+0xb4>)
 8006bee:	4a1c      	ldr	r2, [pc, #112]	@ (8006c60 <HTTPCPOST+0xbc>)
 8006bf0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006bf2:	c313      	stmia	r3!, {r0, r1, r4}
 8006bf4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006bf6:	c313      	stmia	r3!, {r0, r1, r4}
 8006bf8:	ca03      	ldmia	r2!, {r0, r1}
 8006bfa:	c303      	stmia	r3!, {r0, r1}
 8006bfc:	8811      	ldrh	r1, [r2, #0]
 8006bfe:	8019      	strh	r1, [r3, #0]
 8006c00:	7892      	ldrb	r2, [r2, #2]
 8006c02:	709a      	strb	r2, [r3, #2]
  }
  sprintf(message, "AT+HTTPCPOST=\"%s/%s/data\",%d,1,%s\r\n", (char*)URLToUpload, Buffer, length, HEADER1);
 8006c04:	1dbb      	adds	r3, r7, #6
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	4d12      	ldr	r5, [pc, #72]	@ (8006c54 <HTTPCPOST+0xb0>)
 8006c0a:	4c13      	ldr	r4, [pc, #76]	@ (8006c58 <HTTPCPOST+0xb4>)
 8006c0c:	4915      	ldr	r1, [pc, #84]	@ (8006c64 <HTTPCPOST+0xc0>)
 8006c0e:	4816      	ldr	r0, [pc, #88]	@ (8006c68 <HTTPCPOST+0xc4>)
 8006c10:	4a16      	ldr	r2, [pc, #88]	@ (8006c6c <HTTPCPOST+0xc8>)
 8006c12:	9201      	str	r2, [sp, #4]
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	002b      	movs	r3, r5
 8006c18:	0022      	movs	r2, r4
 8006c1a:	f01f fb03 	bl	8026224 <siprintf>
  uint16_t len = strlen(message);
 8006c1e:	4b12      	ldr	r3, [pc, #72]	@ (8006c68 <HTTPCPOST+0xc4>)
 8006c20:	0018      	movs	r0, r3
 8006c22:	f7f9 faa3 	bl	800016c <strlen>
 8006c26:	0002      	movs	r2, r0
 8006c28:	1d3b      	adds	r3, r7, #4
 8006c2a:	801a      	strh	r2, [r3, #0]
//  Debug("ESP_send result of header: %d, transmitted data %d chars", txresult, len);
  if(ESP_Send((uint8_t*)message, len)){
 8006c2c:	1d3b      	adds	r3, r7, #4
 8006c2e:	881a      	ldrh	r2, [r3, #0]
 8006c30:	4b0d      	ldr	r3, [pc, #52]	@ (8006c68 <HTTPCPOST+0xc4>)
 8006c32:	0011      	movs	r1, r2
 8006c34:	0018      	movs	r0, r3
 8006c36:	f7fe f91b 	bl	8004e70 <ESP_Send>
 8006c3a:	1e03      	subs	r3, r0, #0
 8006c3c:	d001      	beq.n	8006c42 <HTTPCPOST+0x9e>
    return true;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006c42:	2300      	movs	r3, #0
  }
}
 8006c44:	0018      	movs	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b002      	add	sp, #8
 8006c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8006c4c:	200008dc 	.word	0x200008dc
 8006c50:	08080000 	.word	0x08080000
 8006c54:	200008e8 	.word	0x200008e8
 8006c58:	20000904 	.word	0x20000904
 8006c5c:	08080110 	.word	0x08080110
 8006c60:	0802aecc 	.word	0x0802aecc
 8006c64:	0802aef0 	.word	0x0802aef0
 8006c68:	200005c4 	.word	0x200005c4
 8006c6c:	0802af14 	.word	0x0802af14

08006c70 <SENDMAIL>:

#ifdef USE_MAIL
bool SENDMAIL() {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
  bool result = false;
 8006c76:	1dfb      	adds	r3, r7, #7
 8006c78:	2200      	movs	r2, #0
 8006c7a:	701a      	strb	r2, [r3, #0]
  txLength = CreateMailMessage(&result, true);
 8006c7c:	1dfb      	adds	r3, r7, #7
 8006c7e:	2101      	movs	r1, #1
 8006c80:	0018      	movs	r0, r3
 8006c82:	f7fe fbdd 	bl	8005440 <CreateMailMessage>
 8006c86:	0003      	movs	r3, r0
 8006c88:	001a      	movs	r2, r3
 8006c8a:	4b04      	ldr	r3, [pc, #16]	@ (8006c9c <SENDMAIL+0x2c>)
 8006c8c:	801a      	strh	r2, [r3, #0]
//  Debug("SENDMAIL ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006c8e:	1dfb      	adds	r3, r7, #7
 8006c90:	781b      	ldrb	r3, [r3, #0]
}
 8006c92:	0018      	movs	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b002      	add	sp, #8
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	46c0      	nop			@ (mov r8, r8)
 8006c9c:	200005bc 	.word	0x200005bc

08006ca0 <HTTPCPOST_MAILAPI>:

bool HTTPCPOST_MAILAPI() {
 8006ca0:	b5b0      	push	{r4, r5, r7, lr}
 8006ca2:	b090      	sub	sp, #64	@ 0x40
 8006ca4:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006ca6:	2133      	movs	r1, #51	@ 0x33
 8006ca8:	187b      	adds	r3, r7, r1
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
  uint16_t maillength = CreateMailMessage(&txresult, false);
 8006cae:	2536      	movs	r5, #54	@ 0x36
 8006cb0:	197c      	adds	r4, r7, r5
 8006cb2:	187b      	adds	r3, r7, r1
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f7fe fbc2 	bl	8005440 <CreateMailMessage>
 8006cbc:	0003      	movs	r3, r0
 8006cbe:	8023      	strh	r3, [r4, #0]
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8006cc0:	003b      	movs	r3, r7
 8006cc2:	4814      	ldr	r0, [pc, #80]	@ (8006d14 <HTTPCPOST_MAILAPI+0x74>)
 8006cc4:	2230      	movs	r2, #48	@ 0x30
 8006cc6:	0019      	movs	r1, r3
 8006cc8:	f005 f9d4 	bl	800c074 <ReadUint8ArrayEEprom>
  sprintf(message, "AT+HTTPCPOST=%s,%d,3,%s,\"accept: application/json\",\"X-Smtp2go-Api-Key: %s\"\r\n", APIMail, maillength, HEADER1, (char*)MailAPIKeyConfig);
 8006ccc:	197b      	adds	r3, r7, r5
 8006cce:	881c      	ldrh	r4, [r3, #0]
 8006cd0:	4a11      	ldr	r2, [pc, #68]	@ (8006d18 <HTTPCPOST_MAILAPI+0x78>)
 8006cd2:	4912      	ldr	r1, [pc, #72]	@ (8006d1c <HTTPCPOST_MAILAPI+0x7c>)
 8006cd4:	4812      	ldr	r0, [pc, #72]	@ (8006d20 <HTTPCPOST_MAILAPI+0x80>)
 8006cd6:	003b      	movs	r3, r7
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	4b12      	ldr	r3, [pc, #72]	@ (8006d24 <HTTPCPOST_MAILAPI+0x84>)
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	0023      	movs	r3, r4
 8006ce0:	f01f faa0 	bl	8026224 <siprintf>
  uint16_t len = strlen(message);
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8006d20 <HTTPCPOST_MAILAPI+0x80>)
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f7f9 fa40 	bl	800016c <strlen>
 8006cec:	0002      	movs	r2, r0
 8006cee:	2134      	movs	r1, #52	@ 0x34
 8006cf0:	187b      	adds	r3, r7, r1
 8006cf2:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)){
 8006cf4:	187b      	adds	r3, r7, r1
 8006cf6:	881a      	ldrh	r2, [r3, #0]
 8006cf8:	4b09      	ldr	r3, [pc, #36]	@ (8006d20 <HTTPCPOST_MAILAPI+0x80>)
 8006cfa:	0011      	movs	r1, r2
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f7fe f8b7 	bl	8004e70 <ESP_Send>
 8006d02:	1e03      	subs	r3, r0, #0
 8006d04:	d001      	beq.n	8006d0a <HTTPCPOST_MAILAPI+0x6a>
    return true;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <HTTPCPOST_MAILAPI+0x6c>
  }
  return false;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	b00e      	add	sp, #56	@ 0x38
 8006d12:	bdb0      	pop	{r4, r5, r7, pc}
 8006d14:	080802c0 	.word	0x080802c0
 8006d18:	0802dce4 	.word	0x0802dce4
 8006d1c:	0802af38 	.word	0x0802af38
 8006d20:	200005c4 	.word	0x200005c4
 8006d24:	0802af14 	.word	0x0802af14

08006d28 <SENDDATA>:
#endif

bool SENDDATA(){
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
  bool result = false;
 8006d2e:	1dfb      	adds	r3, r7, #7
 8006d30:	2200      	movs	r2, #0
 8006d32:	701a      	strb	r2, [r3, #0]
  txLength = CreateMessage(&result, true);
 8006d34:	1dfb      	adds	r3, r7, #7
 8006d36:	2101      	movs	r1, #1
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f7fe fc25 	bl	8005588 <CreateMessage>
 8006d3e:	0003      	movs	r3, r0
 8006d40:	001a      	movs	r2, r3
 8006d42:	4b04      	ldr	r3, [pc, #16]	@ (8006d54 <SENDDATA+0x2c>)
 8006d44:	801a      	strh	r2, [r3, #0]
//  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006d46:	1dfb      	adds	r3, r7, #7
 8006d48:	781b      	ldrb	r3, [r3, #0]
}
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b002      	add	sp, #8
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	46c0      	nop			@ (mov r8, r8)
 8006d54:	200005bc 	.word	0x200005bc

08006d58 <SLEEP>:

bool SLEEP(){
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d8c <SLEEP+0x34>)
 8006d60:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	0018      	movs	r0, r3
 8006d66:	f7f9 fa01 	bl	800016c <strlen>
 8006d6a:	0003      	movs	r3, r0
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	0011      	movs	r1, r2
 8006d72:	0018      	movs	r0, r3
 8006d74:	f7fe f87c 	bl	8004e70 <ESP_Send>
 8006d78:	1e03      	subs	r3, r0, #0
 8006d7a:	d001      	beq.n	8006d80 <SLEEP+0x28>
    return true;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <SLEEP+0x2a>
  }
  else{
    return false;
 8006d80:	2300      	movs	r3, #0
  }
}
 8006d82:	0018      	movs	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b002      	add	sp, #8
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	0802af88 	.word	0x0802af88

08006d90 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006d96:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <CIPSNTPCFG+0x3c>)
 8006d98:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f7f9 f9e5 	bl	800016c <strlen>
 8006da2:	0003      	movs	r3, r0
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	0011      	movs	r1, r2
 8006daa:	0018      	movs	r0, r3
 8006dac:	f7fe f860 	bl	8004e70 <ESP_Send>
 8006db0:	1e03      	subs	r3, r0, #0
 8006db2:	d006      	beq.n	8006dc2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006db4:	23fa      	movs	r3, #250	@ 0xfa
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	0018      	movs	r0, r3
 8006dba:	f00d fd8b 	bl	80148d4 <HAL_Delay>
    return true;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006dc2:	2300      	movs	r3, #0
  }
}
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b002      	add	sp, #8
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	0802af98 	.word	0x0802af98

08006dd0 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e04 <CIPSNTPTIME+0x34>)
 8006dd8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f7f9 f9c5 	bl	800016c <strlen>
 8006de2:	0003      	movs	r3, r0
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0011      	movs	r1, r2
 8006dea:	0018      	movs	r0, r3
 8006dec:	f7fe f840 	bl	8004e70 <ESP_Send>
 8006df0:	1e03      	subs	r3, r0, #0
 8006df2:	d001      	beq.n	8006df8 <CIPSNTPTIME+0x28>
    return true;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e000      	b.n	8006dfa <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006df8:	2300      	movs	r3, #0
  }
}
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	b002      	add	sp, #8
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	46c0      	nop			@ (mov r8, r8)
 8006e04:	0802afe8 	.word	0x0802afe8

08006e08 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e3c <CIPSNTPINTV+0x34>)
 8006e10:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	0018      	movs	r0, r3
 8006e16:	f7f9 f9a9 	bl	800016c <strlen>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	0011      	movs	r1, r2
 8006e22:	0018      	movs	r0, r3
 8006e24:	f7fe f824 	bl	8004e70 <ESP_Send>
 8006e28:	1e03      	subs	r3, r0, #0
 8006e2a:	d001      	beq.n	8006e30 <CIPSNTPINTV+0x28>
    return true;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006e30:	2300      	movs	r3, #0
  }
}
 8006e32:	0018      	movs	r0, r3
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b002      	add	sp, #8
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	46c0      	nop			@ (mov r8, r8)
 8006e3c:	0802affc 	.word	0x0802affc

08006e40 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006e40:	b5b0      	push	{r4, r5, r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	0002      	movs	r2, r0
 8006e48:	1dfb      	adds	r3, r7, #7
 8006e4a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8007000 <DMA_ProcessBuffer+0x1c0>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	200e      	movs	r0, #14
 8006e56:	183b      	adds	r3, r7, r0
 8006e58:	2180      	movs	r1, #128	@ 0x80
 8006e5a:	0049      	lsls	r1, r1, #1
 8006e5c:	1a8a      	subs	r2, r1, r2
 8006e5e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006e60:	230d      	movs	r3, #13
 8006e62:	18fb      	adds	r3, r7, r3
 8006e64:	2203      	movs	r2, #3
 8006e66:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006e68:	183b      	adds	r3, r7, r0
 8006e6a:	881a      	ldrh	r2, [r3, #0]
 8006e6c:	2380      	movs	r3, #128	@ 0x80
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d903      	bls.n	8006e7c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006e74:	183b      	adds	r3, r7, r0
 8006e76:	2280      	movs	r2, #128	@ 0x80
 8006e78:	0052      	lsls	r2, r2, #1
 8006e7a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006e7c:	4b61      	ldr	r3, [pc, #388]	@ (8007004 <DMA_ProcessBuffer+0x1c4>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	001a      	movs	r2, r3
 8006e84:	230e      	movs	r3, #14
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d131      	bne.n	8006ef2 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006e8e:	4b5e      	ldr	r3, [pc, #376]	@ (8007008 <DMA_ProcessBuffer+0x1c8>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b14      	cmp	r3, #20
 8006e94:	d91b      	bls.n	8006ece <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006e96:	4b5c      	ldr	r3, [pc, #368]	@ (8007008 <DMA_ProcessBuffer+0x1c8>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006e9c:	4b5b      	ldr	r3, [pc, #364]	@ (800700c <DMA_ProcessBuffer+0x1cc>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d107      	bne.n	8006eb4 <DMA_ProcessBuffer+0x74>
 8006ea4:	4b5a      	ldr	r3, [pc, #360]	@ (8007010 <DMA_ProcessBuffer+0x1d0>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006eac:	230d      	movs	r3, #13
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006eb4:	4b55      	ldr	r3, [pc, #340]	@ (800700c <DMA_ProcessBuffer+0x1cc>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d103      	bne.n	8006ec4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006ebc:	4b55      	ldr	r3, [pc, #340]	@ (8007014 <DMA_ProcessBuffer+0x1d4>)
 8006ebe:	220b      	movs	r2, #11
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	e016      	b.n	8006ef2 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006ec4:	230d      	movs	r3, #13
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	2206      	movs	r2, #6
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	e011      	b.n	8006ef2 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006ece:	4b4e      	ldr	r3, [pc, #312]	@ (8007008 <DMA_ProcessBuffer+0x1c8>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8007008 <DMA_ProcessBuffer+0x1c8>)
 8006ed8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006eda:	f00d fcf1 	bl	80148c0 <HAL_GetTick>
 8006ede:	0003      	movs	r3, r0
 8006ee0:	33f5      	adds	r3, #245	@ 0xf5
 8006ee2:	33ff      	adds	r3, #255	@ 0xff
 8006ee4:	001a      	movs	r2, r3
 8006ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8007018 <DMA_ProcessBuffer+0x1d8>)
 8006ee8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006eea:	230d      	movs	r3, #13
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	2204      	movs	r2, #4
 8006ef0:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006ef2:	4b44      	ldr	r3, [pc, #272]	@ (8007004 <DMA_ProcessBuffer+0x1c4>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	001a      	movs	r2, r3
 8006efa:	210e      	movs	r1, #14
 8006efc:	187b      	adds	r3, r7, r1
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d100      	bne.n	8006f06 <DMA_ProcessBuffer+0xc6>
 8006f04:	e075      	b.n	8006ff2 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006f06:	4b40      	ldr	r3, [pc, #256]	@ (8007008 <DMA_ProcessBuffer+0x1c8>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006f0c:	4b43      	ldr	r3, [pc, #268]	@ (800701c <DMA_ProcessBuffer+0x1dc>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	4b3c      	ldr	r3, [pc, #240]	@ (8007004 <DMA_ProcessBuffer+0x1c4>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d109      	bne.n	8006f30 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006f1c:	187b      	adds	r3, r7, r1
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	4b3e      	ldr	r3, [pc, #248]	@ (800701c <DMA_ProcessBuffer+0x1dc>)
 8006f24:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006f26:	230d      	movs	r3, #13
 8006f28:	18fb      	adds	r3, r7, r3
 8006f2a:	220a      	movs	r2, #10
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e060      	b.n	8006ff2 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006f30:	4b3a      	ldr	r3, [pc, #232]	@ (800701c <DMA_ProcessBuffer+0x1dc>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	001a      	movs	r2, r3
 8006f38:	210e      	movs	r1, #14
 8006f3a:	187b      	adds	r3, r7, r1
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d009      	beq.n	8006f56 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006f42:	187b      	adds	r3, r7, r1
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	4b34      	ldr	r3, [pc, #208]	@ (800701c <DMA_ProcessBuffer+0x1dc>)
 8006f4a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006f4c:	230d      	movs	r3, #13
 8006f4e:	18fb      	adds	r3, r7, r3
 8006f50:	220a      	movs	r2, #10
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	e04d      	b.n	8006ff2 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006f56:	4b2b      	ldr	r3, [pc, #172]	@ (8007004 <DMA_ProcessBuffer+0x1c4>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	001a      	movs	r2, r3
 8006f5e:	210e      	movs	r1, #14
 8006f60:	187b      	adds	r3, r7, r1
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d917      	bls.n	8006f98 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006f68:	4b26      	ldr	r3, [pc, #152]	@ (8007004 <DMA_ProcessBuffer+0x1c4>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	001a      	movs	r2, r3
 8006f70:	4b2b      	ldr	r3, [pc, #172]	@ (8007020 <DMA_ProcessBuffer+0x1e0>)
 8006f72:	18d0      	adds	r0, r2, r3
 8006f74:	4b23      	ldr	r3, [pc, #140]	@ (8007004 <DMA_ProcessBuffer+0x1c4>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	001a      	movs	r2, r3
 8006f7c:	187b      	adds	r3, r7, r1
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	b299      	uxth	r1, r3
 8006f84:	230d      	movs	r3, #13
 8006f86:	18fc      	adds	r4, r7, r3
 8006f88:	1dfb      	adds	r3, r7, #7
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	001a      	movs	r2, r3
 8006f8e:	f7ff fa2f 	bl	80063f0 <ParseBuffer>
 8006f92:	0003      	movs	r3, r0
 8006f94:	7023      	strb	r3, [r4, #0]
 8006f96:	e026      	b.n	8006fe6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006f98:	4b1a      	ldr	r3, [pc, #104]	@ (8007004 <DMA_ProcessBuffer+0x1c4>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	001a      	movs	r2, r3
 8006fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8007020 <DMA_ProcessBuffer+0x1e0>)
 8006fa2:	18d0      	adds	r0, r2, r3
 8006fa4:	4b17      	ldr	r3, [pc, #92]	@ (8007004 <DMA_ProcessBuffer+0x1c4>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	001a      	movs	r2, r3
 8006fac:	2380      	movs	r3, #128	@ 0x80
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	b299      	uxth	r1, r3
 8006fb4:	250d      	movs	r5, #13
 8006fb6:	197c      	adds	r4, r7, r5
 8006fb8:	1dfb      	adds	r3, r7, #7
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	001a      	movs	r2, r3
 8006fbe:	f7ff fa17 	bl	80063f0 <ParseBuffer>
 8006fc2:	0003      	movs	r3, r0
 8006fc4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006fc6:	210e      	movs	r1, #14
 8006fc8:	187b      	adds	r3, r7, r1
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00a      	beq.n	8006fe6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006fd0:	197c      	adds	r4, r7, r5
 8006fd2:	1dfb      	adds	r3, r7, #7
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	187b      	adds	r3, r7, r1
 8006fd8:	8819      	ldrh	r1, [r3, #0]
 8006fda:	4b11      	ldr	r3, [pc, #68]	@ (8007020 <DMA_ProcessBuffer+0x1e0>)
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7ff fa07 	bl	80063f0 <ParseBuffer>
 8006fe2:	0003      	movs	r3, r0
 8006fe4:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8006fe6:	230e      	movs	r3, #14
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	4b05      	ldr	r3, [pc, #20]	@ (8007004 <DMA_ProcessBuffer+0x1c4>)
 8006ff0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8006ff2:	230d      	movs	r3, #13
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	781b      	ldrb	r3, [r3, #0]
}
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b004      	add	sp, #16
 8006ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8007000:	20002458 	.word	0x20002458
 8007004:	20000934 	.word	0x20000934
 8007008:	2000069c 	.word	0x2000069c
 800700c:	20000701 	.word	0x20000701
 8007010:	20000001 	.word	0x20000001
 8007014:	20000030 	.word	0x20000030
 8007018:	20000694 	.word	0x20000694
 800701c:	20000935 	.word	0x20000935
 8007020:	200004ac 	.word	0x200004ac

08007024 <clearDMABuffer>:

void clearDMABuffer(){
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8007028:	2380      	movs	r3, #128	@ 0x80
 800702a:	005a      	lsls	r2, r3, #1
 800702c:	4b03      	ldr	r3, [pc, #12]	@ (800703c <clearDMABuffer+0x18>)
 800702e:	2100      	movs	r1, #0
 8007030:	0018      	movs	r0, r3
 8007032:	f01f fa3f 	bl	80264b4 <memset>
}
 8007036:	46c0      	nop			@ (mov r8, r8)
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	200004ac 	.word	0x200004ac

08007040 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	0002      	movs	r2, r0
 8007048:	1dfb      	adds	r3, r7, #7
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	1dbb      	adds	r3, r7, #6
 800704e:	1c0a      	adds	r2, r1, #0
 8007050:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8007052:	210f      	movs	r1, #15
 8007054:	187b      	adds	r3, r7, r1
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800705a:	1dbb      	adds	r3, r7, #6
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d105      	bne.n	800706e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8007062:	187b      	adds	r3, r7, r1
 8007064:	1dfa      	adds	r2, r7, #7
 8007066:	7812      	ldrb	r2, [r2, #0]
 8007068:	4251      	negs	r1, r2
 800706a:	414a      	adcs	r2, r1
 800706c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800706e:	1dbb      	adds	r3, r7, #6
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d107      	bne.n	8007086 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8007076:	230f      	movs	r3, #15
 8007078:	18fb      	adds	r3, r7, r3
 800707a:	1dfa      	adds	r2, r7, #7
 800707c:	7812      	ldrb	r2, [r2, #0]
 800707e:	3a02      	subs	r2, #2
 8007080:	4251      	negs	r1, r2
 8007082:	414a      	adcs	r2, r1
 8007084:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8007086:	1dbb      	adds	r3, r7, #6
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d107      	bne.n	800709e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800708e:	230f      	movs	r3, #15
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	1dfa      	adds	r2, r7, #7
 8007094:	7812      	ldrb	r2, [r2, #0]
 8007096:	3a05      	subs	r2, #5
 8007098:	4251      	negs	r1, r2
 800709a:	414a      	adcs	r2, r1
 800709c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 800709e:	1dbb      	adds	r3, r7, #6
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	d107      	bne.n	80070b6 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 80070a6:	230f      	movs	r3, #15
 80070a8:	18fb      	adds	r3, r7, r3
 80070aa:	1dfa      	adds	r2, r7, #7
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	3a0b      	subs	r2, #11
 80070b0:	4251      	negs	r1, r2
 80070b2:	414a      	adcs	r2, r1
 80070b4:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80070b6:	230f      	movs	r3, #15
 80070b8:	18fb      	adds	r3, r7, r3
 80070ba:	781b      	ldrb	r3, [r3, #0]
}
 80070bc:	0018      	movs	r0, r3
 80070be:	46bd      	mov	sp, r7
 80070c0:	b004      	add	sp, #16
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <AT_Send>:

bool AT_Send(AT_Commands state){
 80070c4:	b590      	push	{r4, r7, lr}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	0002      	movs	r2, r0
 80070cc:	1dfb      	adds	r3, r7, #7
 80070ce:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80070d0:	230f      	movs	r3, #15
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
  switch (state){
 80070d8:	1dfb      	adds	r3, r7, #7
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b16      	cmp	r3, #22
 80070de:	d900      	bls.n	80070e2 <AT_Send+0x1e>
 80070e0:	e161      	b.n	80073a6 <AT_Send+0x2e2>
 80070e2:	009a      	lsls	r2, r3, #2
 80070e4:	4bb3      	ldr	r3, [pc, #716]	@ (80073b4 <AT_Send+0x2f0>)
 80070e6:	18d3      	adds	r3, r2, r3
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80070ec:	4bb2      	ldr	r3, [pc, #712]	@ (80073b8 <AT_Send+0x2f4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	0018      	movs	r0, r3
 80070f2:	f00c fe17 	bl	8013d24 <TimestampIsReached>
 80070f6:	1e03      	subs	r3, r0, #0
 80070f8:	d100      	bne.n	80070fc <AT_Send+0x38>
 80070fa:	e153      	b.n	80073a4 <AT_Send+0x2e0>
    Debug("AT_WAKEUP");
 80070fc:	4aaf      	ldr	r2, [pc, #700]	@ (80073bc <AT_Send+0x2f8>)
 80070fe:	4bb0      	ldr	r3, [pc, #704]	@ (80073c0 <AT_Send+0x2fc>)
 8007100:	0019      	movs	r1, r3
 8007102:	2003      	movs	r0, #3
 8007104:	f00c fe64 	bl	8013dd0 <CreateLine>
    ATCommandSend = PollAwake();
 8007108:	230f      	movs	r3, #15
 800710a:	18fc      	adds	r4, r7, r3
 800710c:	f7ff fb60 	bl	80067d0 <PollAwake>
 8007110:	0003      	movs	r3, r0
 8007112:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007114:	f00d fbd4 	bl	80148c0 <HAL_GetTick>
 8007118:	0003      	movs	r3, r0
 800711a:	3332      	adds	r3, #50	@ 0x32
 800711c:	001a      	movs	r2, r3
 800711e:	4ba6      	ldr	r3, [pc, #664]	@ (80073b8 <AT_Send+0x2f4>)
 8007120:	601a      	str	r2, [r3, #0]
  }
  break;
 8007122:	e13f      	b.n	80073a4 <AT_Send+0x2e0>

  case AT_SET_RFPOWER:
//    Debug("Setting RF Power");
    ATCommandSend = RFPower();
 8007124:	230f      	movs	r3, #15
 8007126:	18fc      	adds	r4, r7, r3
 8007128:	f7ff fb6e 	bl	8006808 <RFPower>
 800712c:	0003      	movs	r3, r0
 800712e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007130:	f00d fbc6 	bl	80148c0 <HAL_GetTick>
 8007134:	0003      	movs	r3, r0
 8007136:	330a      	adds	r3, #10
 8007138:	001a      	movs	r2, r3
 800713a:	4b9f      	ldr	r3, [pc, #636]	@ (80073b8 <AT_Send+0x2f4>)
 800713c:	601a      	str	r2, [r3, #0]
    break;
 800713e:	e132      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CHECK_RFPOWER:
//    Debug("Checking RF Power");
    ATCommandSend = CheckRFPower();
 8007140:	230f      	movs	r3, #15
 8007142:	18fc      	adds	r4, r7, r3
 8007144:	f7ff fb7c 	bl	8006840 <CheckRFPower>
 8007148:	0003      	movs	r3, r0
 800714a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800714c:	f00d fbb8 	bl	80148c0 <HAL_GetTick>
 8007150:	0003      	movs	r3, r0
 8007152:	330a      	adds	r3, #10
 8007154:	001a      	movs	r2, r3
 8007156:	4b98      	ldr	r3, [pc, #608]	@ (80073b8 <AT_Send+0x2f4>)
 8007158:	601a      	str	r2, [r3, #0]
    break;
 800715a:	e124      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_RESTORE:
//    Debug("Restoring ESP");
    ATCommandSend = ATRestore();
 800715c:	230f      	movs	r3, #15
 800715e:	18fc      	adds	r4, r7, r3
 8007160:	f7ff fb8a 	bl	8006878 <ATRestore>
 8007164:	0003      	movs	r3, r0
 8007166:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007168:	f00d fbaa 	bl	80148c0 <HAL_GetTick>
 800716c:	0003      	movs	r3, r0
 800716e:	3332      	adds	r3, #50	@ 0x32
 8007170:	001a      	movs	r2, r3
 8007172:	4b91      	ldr	r3, [pc, #580]	@ (80073b8 <AT_Send+0x2f4>)
 8007174:	601a      	str	r2, [r3, #0]
    break;
 8007176:	e116      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CWINIT:
//    Debug("Initializing Wi-Fi");
    ATCommandSend = CWINIT();
 8007178:	230f      	movs	r3, #15
 800717a:	18fc      	adds	r4, r7, r3
 800717c:	f7ff fb98 	bl	80068b0 <CWINIT>
 8007180:	0003      	movs	r3, r0
 8007182:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007184:	f00d fb9c 	bl	80148c0 <HAL_GetTick>
 8007188:	0003      	movs	r3, r0
 800718a:	33f5      	adds	r3, #245	@ 0xf5
 800718c:	33ff      	adds	r3, #255	@ 0xff
 800718e:	001a      	movs	r2, r3
 8007190:	4b89      	ldr	r3, [pc, #548]	@ (80073b8 <AT_Send+0x2f4>)
 8007192:	601a      	str	r2, [r3, #0]
    break;
 8007194:	e107      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CWSTATE:
//    Debug("Checking current SSID");
    ATCommandSend = CWSTATE();
 8007196:	230f      	movs	r3, #15
 8007198:	18fc      	adds	r4, r7, r3
 800719a:	f7ff fc93 	bl	8006ac4 <CWSTATE>
 800719e:	0003      	movs	r3, r0
 80071a0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80071a2:	f00d fb8d 	bl	80148c0 <HAL_GetTick>
 80071a6:	0003      	movs	r3, r0
 80071a8:	33f5      	adds	r3, #245	@ 0xf5
 80071aa:	33ff      	adds	r3, #255	@ 0xff
 80071ac:	001a      	movs	r2, r3
 80071ae:	4b82      	ldr	r3, [pc, #520]	@ (80073b8 <AT_Send+0x2f4>)
 80071b0:	601a      	str	r2, [r3, #0]
    break;
 80071b2:	e0f8      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CWMODE1:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE1();
 80071b4:	230f      	movs	r3, #15
 80071b6:	18fc      	adds	r4, r7, r3
 80071b8:	f7ff fb96 	bl	80068e8 <CWMODE1>
 80071bc:	0003      	movs	r3, r0
 80071be:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071c0:	f00d fb7e 	bl	80148c0 <HAL_GetTick>
 80071c4:	0003      	movs	r3, r0
 80071c6:	330a      	adds	r3, #10
 80071c8:	001a      	movs	r2, r3
 80071ca:	4b7b      	ldr	r3, [pc, #492]	@ (80073b8 <AT_Send+0x2f4>)
 80071cc:	601a      	str	r2, [r3, #0]
    break;
 80071ce:	e0ea      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CWMODE2:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE2();
 80071d0:	230f      	movs	r3, #15
 80071d2:	18fc      	adds	r4, r7, r3
 80071d4:	f7ff fba4 	bl	8006920 <CWMODE2>
 80071d8:	0003      	movs	r3, r0
 80071da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071dc:	f00d fb70 	bl	80148c0 <HAL_GetTick>
 80071e0:	0003      	movs	r3, r0
 80071e2:	330a      	adds	r3, #10
 80071e4:	001a      	movs	r2, r3
 80071e6:	4b74      	ldr	r3, [pc, #464]	@ (80073b8 <AT_Send+0x2f4>)
 80071e8:	601a      	str	r2, [r3, #0]
    break;
 80071ea:	e0dc      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CWAUTOCONN:
//    Debug("Setting auto connect");
    ATCommandSend = CWAUTOCONN();
 80071ec:	230f      	movs	r3, #15
 80071ee:	18fc      	adds	r4, r7, r3
 80071f0:	f7ff fbb2 	bl	8006958 <CWAUTOCONN>
 80071f4:	0003      	movs	r3, r0
 80071f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071f8:	f00d fb62 	bl	80148c0 <HAL_GetTick>
 80071fc:	0003      	movs	r3, r0
 80071fe:	330a      	adds	r3, #10
 8007200:	001a      	movs	r2, r3
 8007202:	4b6d      	ldr	r3, [pc, #436]	@ (80073b8 <AT_Send+0x2f4>)
 8007204:	601a      	str	r2, [r3, #0]
    break;
 8007206:	e0ce      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8007208:	4a6e      	ldr	r2, [pc, #440]	@ (80073c4 <AT_Send+0x300>)
 800720a:	4b6d      	ldr	r3, [pc, #436]	@ (80073c0 <AT_Send+0x2fc>)
 800720c:	0019      	movs	r1, r3
 800720e:	2003      	movs	r0, #3
 8007210:	f00c fdde 	bl	8013dd0 <CreateLine>
    ATCommandSend = CWJAP();
 8007214:	230f      	movs	r3, #15
 8007216:	18fc      	adds	r4, r7, r3
 8007218:	f7ff fbba 	bl	8006990 <CWJAP>
 800721c:	0003      	movs	r3, r0
 800721e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007220:	f00d fb4e 	bl	80148c0 <HAL_GetTick>
 8007224:	0003      	movs	r3, r0
 8007226:	3332      	adds	r3, #50	@ 0x32
 8007228:	001a      	movs	r2, r3
 800722a:	4b63      	ldr	r3, [pc, #396]	@ (80073b8 <AT_Send+0x2f4>)
 800722c:	601a      	str	r2, [r3, #0]
    break;
 800722e:	e0ba      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CWMODE3:
//    Debug("SET in station/soft-ap mode");
    ATCommandSend = CWMODE3();
 8007230:	230f      	movs	r3, #15
 8007232:	18fc      	adds	r4, r7, r3
 8007234:	f7ff fc2a 	bl	8006a8c <CWMODE3>
 8007238:	0003      	movs	r3, r0
 800723a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800723c:	f00d fb40 	bl	80148c0 <HAL_GetTick>
 8007240:	0003      	movs	r3, r0
 8007242:	330a      	adds	r3, #10
 8007244:	001a      	movs	r2, r3
 8007246:	4b5c      	ldr	r3, [pc, #368]	@ (80073b8 <AT_Send+0x2f4>)
 8007248:	601a      	str	r2, [r3, #0]
    break;
 800724a:	e0ac      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CWSAP:
//    Debug("SET soft AP mode parameters");
    ATCommandSend = CWSAP();
 800724c:	230f      	movs	r3, #15
 800724e:	18fc      	adds	r4, r7, r3
 8007250:	f7ff fc54 	bl	8006afc <CWSAP>
 8007254:	0003      	movs	r3, r0
 8007256:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007258:	f00d fb32 	bl	80148c0 <HAL_GetTick>
 800725c:	0003      	movs	r3, r0
 800725e:	330a      	adds	r3, #10
 8007260:	001a      	movs	r2, r3
 8007262:	4b55      	ldr	r3, [pc, #340]	@ (80073b8 <AT_Send+0x2f4>)
 8007264:	601a      	str	r2, [r3, #0]
    break;
 8007266:	e09e      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CIPMUX:
//    Debug("ATCommandSend = CIPMUX()");
    ATCommandSend = CIPMUX();
 8007268:	230f      	movs	r3, #15
 800726a:	18fc      	adds	r4, r7, r3
 800726c:	f7ff fc62 	bl	8006b34 <CIPMUX>
 8007270:	0003      	movs	r3, r0
 8007272:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007274:	f00d fb24 	bl	80148c0 <HAL_GetTick>
 8007278:	0003      	movs	r3, r0
 800727a:	330a      	adds	r3, #10
 800727c:	001a      	movs	r2, r3
 800727e:	4b4e      	ldr	r3, [pc, #312]	@ (80073b8 <AT_Send+0x2f4>)
 8007280:	601a      	str	r2, [r3, #0]
    break;
 8007282:	e090      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_WEBSERVER:
//    Debug("ATCommandSend = WEBSERVER()");
    ATCommandSend = WEBSERVER();
 8007284:	230f      	movs	r3, #15
 8007286:	18fc      	adds	r4, r7, r3
 8007288:	f7ff fc70 	bl	8006b6c <WEBSERVER>
 800728c:	0003      	movs	r3, r0
 800728e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007290:	f00d fb16 	bl	80148c0 <HAL_GetTick>
 8007294:	0003      	movs	r3, r0
 8007296:	330a      	adds	r3, #10
 8007298:	001a      	movs	r2, r3
 800729a:	4b47      	ldr	r3, [pc, #284]	@ (80073b8 <AT_Send+0x2f4>)
 800729c:	601a      	str	r2, [r3, #0]
    break;
 800729e:	e082      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80072a0:	230f      	movs	r3, #15
 80072a2:	18fc      	adds	r4, r7, r3
 80072a4:	f7ff fc7e 	bl	8006ba4 <HTTPCPOST>
 80072a8:	0003      	movs	r3, r0
 80072aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80072ac:	f00d fb08 	bl	80148c0 <HAL_GetTick>
 80072b0:	0003      	movs	r3, r0
 80072b2:	33f5      	adds	r3, #245	@ 0xf5
 80072b4:	33ff      	adds	r3, #255	@ 0xff
 80072b6:	001a      	movs	r2, r3
 80072b8:	4b3f      	ldr	r3, [pc, #252]	@ (80073b8 <AT_Send+0x2f4>)
 80072ba:	601a      	str	r2, [r3, #0]
    break;
 80072bc:	e073      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_SENDDATA:
//    Debug("Send the data");
    ATCommandSend = SENDDATA();
 80072be:	230f      	movs	r3, #15
 80072c0:	18fc      	adds	r4, r7, r3
 80072c2:	f7ff fd31 	bl	8006d28 <SENDDATA>
 80072c6:	0003      	movs	r3, r0
 80072c8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80072ca:	f00d faf9 	bl	80148c0 <HAL_GetTick>
 80072ce:	0003      	movs	r3, r0
 80072d0:	33f5      	adds	r3, #245	@ 0xf5
 80072d2:	33ff      	adds	r3, #255	@ 0xff
 80072d4:	001a      	movs	r2, r3
 80072d6:	4b38      	ldr	r3, [pc, #224]	@ (80073b8 <AT_Send+0x2f4>)
 80072d8:	601a      	str	r2, [r3, #0]
    break;
 80072da:	e064      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80072dc:	4a3a      	ldr	r2, [pc, #232]	@ (80073c8 <AT_Send+0x304>)
 80072de:	4b38      	ldr	r3, [pc, #224]	@ (80073c0 <AT_Send+0x2fc>)
 80072e0:	0019      	movs	r1, r3
 80072e2:	2003      	movs	r0, #3
 80072e4:	f00c fd74 	bl	8013dd0 <CreateLine>
    ATCommandSend = SLEEP();
 80072e8:	230f      	movs	r3, #15
 80072ea:	18fc      	adds	r4, r7, r3
 80072ec:	f7ff fd34 	bl	8006d58 <SLEEP>
 80072f0:	0003      	movs	r3, r0
 80072f2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072f4:	f00d fae4 	bl	80148c0 <HAL_GetTick>
 80072f8:	0003      	movs	r3, r0
 80072fa:	330a      	adds	r3, #10
 80072fc:	001a      	movs	r2, r3
 80072fe:	4b2e      	ldr	r3, [pc, #184]	@ (80073b8 <AT_Send+0x2f4>)
 8007300:	601a      	str	r2, [r3, #0]
    break;
 8007302:	e050      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CIPSNTPCFG:
//    Debug("Config SNTP client");
    ATCommandSend = CIPSNTPCFG();
 8007304:	230f      	movs	r3, #15
 8007306:	18fc      	adds	r4, r7, r3
 8007308:	f7ff fd42 	bl	8006d90 <CIPSNTPCFG>
 800730c:	0003      	movs	r3, r0
 800730e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007310:	f00d fad6 	bl	80148c0 <HAL_GetTick>
 8007314:	0003      	movs	r3, r0
 8007316:	330a      	adds	r3, #10
 8007318:	001a      	movs	r2, r3
 800731a:	4b27      	ldr	r3, [pc, #156]	@ (80073b8 <AT_Send+0x2f4>)
 800731c:	601a      	str	r2, [r3, #0]
    break;
 800731e:	e042      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CIPSNTPTIME:
//    Debug("Get time from internet");
    ATCommandSend = CIPSNTPTIME();
 8007320:	230f      	movs	r3, #15
 8007322:	18fc      	adds	r4, r7, r3
 8007324:	f7ff fd54 	bl	8006dd0 <CIPSNTPTIME>
 8007328:	0003      	movs	r3, r0
 800732a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800732c:	f00d fac8 	bl	80148c0 <HAL_GetTick>
 8007330:	0003      	movs	r3, r0
 8007332:	33f5      	adds	r3, #245	@ 0xf5
 8007334:	33ff      	adds	r3, #255	@ 0xff
 8007336:	001a      	movs	r2, r3
 8007338:	4b1f      	ldr	r3, [pc, #124]	@ (80073b8 <AT_Send+0x2f4>)
 800733a:	601a      	str	r2, [r3, #0]
    break;
 800733c:	e033      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_CIPSNTPINTV:
//    Debug("Set the interval to timesync");
    ATCommandSend = CIPSNTPINTV();
 800733e:	230f      	movs	r3, #15
 8007340:	18fc      	adds	r4, r7, r3
 8007342:	f7ff fd61 	bl	8006e08 <CIPSNTPINTV>
 8007346:	0003      	movs	r3, r0
 8007348:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800734a:	f00d fab9 	bl	80148c0 <HAL_GetTick>
 800734e:	0003      	movs	r3, r0
 8007350:	330a      	adds	r3, #10
 8007352:	001a      	movs	r2, r3
 8007354:	4b18      	ldr	r3, [pc, #96]	@ (80073b8 <AT_Send+0x2f4>)
 8007356:	601a      	str	r2, [r3, #0]
    break;
 8007358:	e025      	b.n	80073a6 <AT_Send+0x2e2>
#ifdef USE_MAIL
  case AT_HTTPCPOST_MAILAPI:
    Debug("Start EMAIL via API");
 800735a:	4a1c      	ldr	r2, [pc, #112]	@ (80073cc <AT_Send+0x308>)
 800735c:	4b18      	ldr	r3, [pc, #96]	@ (80073c0 <AT_Send+0x2fc>)
 800735e:	0019      	movs	r1, r3
 8007360:	2003      	movs	r0, #3
 8007362:	f00c fd35 	bl	8013dd0 <CreateLine>
    ATCommandSend = HTTPCPOST_MAILAPI();
 8007366:	230f      	movs	r3, #15
 8007368:	18fc      	adds	r4, r7, r3
 800736a:	f7ff fc99 	bl	8006ca0 <HTTPCPOST_MAILAPI>
 800736e:	0003      	movs	r3, r0
 8007370:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007372:	f00d faa5 	bl	80148c0 <HAL_GetTick>
 8007376:	0003      	movs	r3, r0
 8007378:	3332      	adds	r3, #50	@ 0x32
 800737a:	001a      	movs	r2, r3
 800737c:	4b0e      	ldr	r3, [pc, #56]	@ (80073b8 <AT_Send+0x2f4>)
 800737e:	601a      	str	r2, [r3, #0]
    break;
 8007380:	e011      	b.n	80073a6 <AT_Send+0x2e2>

  case AT_SENDMAIL:
//    Debug("Send Email content");
    ATCommandSend = SENDMAIL();
 8007382:	230f      	movs	r3, #15
 8007384:	18fc      	adds	r4, r7, r3
 8007386:	f7ff fc73 	bl	8006c70 <SENDMAIL>
 800738a:	0003      	movs	r3, r0
 800738c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 800738e:	f00d fa97 	bl	80148c0 <HAL_GetTick>
 8007392:	0003      	movs	r3, r0
 8007394:	33f5      	adds	r3, #245	@ 0xf5
 8007396:	33ff      	adds	r3, #255	@ 0xff
 8007398:	001a      	movs	r2, r3
 800739a:	4b07      	ldr	r3, [pc, #28]	@ (80073b8 <AT_Send+0x2f4>)
 800739c:	601a      	str	r2, [r3, #0]
    break;
 800739e:	e002      	b.n	80073a6 <AT_Send+0x2e2>
#endif

  case AT_END:
    break;
 80073a0:	46c0      	nop			@ (mov r8, r8)
 80073a2:	e000      	b.n	80073a6 <AT_Send+0x2e2>
  break;
 80073a4:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80073a6:	230f      	movs	r3, #15
 80073a8:	18fb      	adds	r3, r7, r3
 80073aa:	781b      	ldrb	r3, [r3, #0]
}
 80073ac:	0018      	movs	r0, r3
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b005      	add	sp, #20
 80073b2:	bd90      	pop	{r4, r7, pc}
 80073b4:	0802dd40 	.word	0x0802dd40
 80073b8:	20000694 	.word	0x20000694
 80073bc:	0802b014 	.word	0x0802b014
 80073c0:	0802a954 	.word	0x0802a954
 80073c4:	0802b020 	.word	0x0802b020
 80073c8:	0802b034 	.word	0x0802b034
 80073cc:	0802b058 	.word	0x0802b058

080073d0 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80073d0:	b590      	push	{r4, r7, lr}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80073d6:	1dfb      	adds	r3, r7, #7
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80073dc:	4b82      	ldr	r3, [pc, #520]	@ (80075e8 <ESP_WakeTest+0x218>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b05      	cmp	r3, #5
 80073e2:	d900      	bls.n	80073e6 <ESP_WakeTest+0x16>
 80073e4:	e0e4      	b.n	80075b0 <ESP_WakeTest+0x1e0>
 80073e6:	009a      	lsls	r2, r3, #2
 80073e8:	4b80      	ldr	r3, [pc, #512]	@ (80075ec <ESP_WakeTest+0x21c>)
 80073ea:	18d3      	adds	r3, r2, r3
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80073f0:	4b7f      	ldr	r3, [pc, #508]	@ (80075f0 <ESP_WakeTest+0x220>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2201      	movs	r2, #1
 80073f6:	4053      	eors	r3, r2
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d041      	beq.n	8007482 <ESP_WakeTest+0xb2>
        EspTurnedOn = true;
 80073fe:	4b7c      	ldr	r3, [pc, #496]	@ (80075f0 <ESP_WakeTest+0x220>)
 8007400:	2201      	movs	r2, #1
 8007402:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007404:	2380      	movs	r3, #128	@ 0x80
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	487a      	ldr	r0, [pc, #488]	@ (80075f4 <ESP_WakeTest+0x224>)
 800740a:	2200      	movs	r2, #0
 800740c:	0019      	movs	r1, r3
 800740e:	f00e fcca 	bl	8015da6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8007412:	2032      	movs	r0, #50	@ 0x32
 8007414:	f00d fa5e 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007418:	2380      	movs	r3, #128	@ 0x80
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	4875      	ldr	r0, [pc, #468]	@ (80075f4 <ESP_WakeTest+0x224>)
 800741e:	2201      	movs	r2, #1
 8007420:	0019      	movs	r1, r3
 8007422:	f00e fcc0 	bl	8015da6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8007426:	200a      	movs	r0, #10
 8007428:	f00d fa54 	bl	80148d4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800742c:	4b72      	ldr	r3, [pc, #456]	@ (80075f8 <ESP_WakeTest+0x228>)
 800742e:	2200      	movs	r2, #0
 8007430:	2101      	movs	r1, #1
 8007432:	0018      	movs	r0, r3
 8007434:	f00e fcb7 	bl	8015da6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8007438:	200a      	movs	r0, #10
 800743a:	f00d fa4b 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800743e:	4b6e      	ldr	r3, [pc, #440]	@ (80075f8 <ESP_WakeTest+0x228>)
 8007440:	2201      	movs	r2, #1
 8007442:	2102      	movs	r1, #2
 8007444:	0018      	movs	r0, r3
 8007446:	f00e fcae 	bl	8015da6 <HAL_GPIO_WritePin>
        HAL_Delay(50); // wait for 5RC
 800744a:	2032      	movs	r0, #50	@ 0x32
 800744c:	f00d fa42 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007450:	4b69      	ldr	r3, [pc, #420]	@ (80075f8 <ESP_WakeTest+0x228>)
 8007452:	2201      	movs	r2, #1
 8007454:	2101      	movs	r1, #1
 8007456:	0018      	movs	r0, r3
 8007458:	f00e fca5 	bl	8015da6 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800745c:	2064      	movs	r0, #100	@ 0x64
 800745e:	f00d fa39 	bl	80148d4 <HAL_Delay>
        batteryCharge = ReadBatteryVoltage();  // read voltage in loaded condition
 8007462:	f002 fac5 	bl	80099f0 <ReadBatteryVoltage>
 8007466:	1c02      	adds	r2, r0, #0
 8007468:	4b64      	ldr	r3, [pc, #400]	@ (80075fc <ESP_WakeTest+0x22c>)
 800746a:	601a      	str	r2, [r3, #0]
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800746c:	f00d fa28 	bl	80148c0 <HAL_GetTick>
 8007470:	0003      	movs	r3, r0
 8007472:	22e1      	movs	r2, #225	@ 0xe1
 8007474:	0092      	lsls	r2, r2, #2
 8007476:	189a      	adds	r2, r3, r2
 8007478:	4b61      	ldr	r3, [pc, #388]	@ (8007600 <ESP_WakeTest+0x230>)
 800747a:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800747c:	4b5c      	ldr	r3, [pc, #368]	@ (80075f0 <ESP_WakeTest+0x220>)
 800747e:	2201      	movs	r2, #1
 8007480:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8007482:	2380      	movs	r3, #128	@ 0x80
 8007484:	005a      	lsls	r2, r3, #1
 8007486:	4b5f      	ldr	r3, [pc, #380]	@ (8007604 <ESP_WakeTest+0x234>)
 8007488:	0011      	movs	r1, r2
 800748a:	0018      	movs	r0, r3
 800748c:	f7fd fd52 	bl	8004f34 <ESP_Receive>
 8007490:	1e03      	subs	r3, r0, #0
 8007492:	d100      	bne.n	8007496 <ESP_WakeTest+0xc6>
 8007494:	e09f      	b.n	80075d6 <ESP_WakeTest+0x206>
        TestState = ESP_TEST_SEND;
 8007496:	4b54      	ldr	r3, [pc, #336]	@ (80075e8 <ESP_WakeTest+0x218>)
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800749c:	e09b      	b.n	80075d6 <ESP_WakeTest+0x206>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 800749e:	4b58      	ldr	r3, [pc, #352]	@ (8007600 <ESP_WakeTest+0x230>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	0018      	movs	r0, r3
 80074a4:	f00c fc3e 	bl	8013d24 <TimestampIsReached>
 80074a8:	1e03      	subs	r3, r0, #0
 80074aa:	d100      	bne.n	80074ae <ESP_WakeTest+0xde>
 80074ac:	e095      	b.n	80075da <ESP_WakeTest+0x20a>
        ATSend = AT_Send(ATCommand);
 80074ae:	4b56      	ldr	r3, [pc, #344]	@ (8007608 <ESP_WakeTest+0x238>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	1dfc      	adds	r4, r7, #7
 80074b4:	0018      	movs	r0, r3
 80074b6:	f7ff fe05 	bl	80070c4 <AT_Send>
 80074ba:	0003      	movs	r3, r0
 80074bc:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80074be:	1dfb      	adds	r3, r7, #7
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d100      	bne.n	80074c8 <ESP_WakeTest+0xf8>
 80074c6:	e088      	b.n	80075da <ESP_WakeTest+0x20a>
          TestState = ESP_TEST_RECEIVE;
 80074c8:	4b47      	ldr	r3, [pc, #284]	@ (80075e8 <ESP_WakeTest+0x218>)
 80074ca:	2202      	movs	r2, #2
 80074cc:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80074ce:	e084      	b.n	80075da <ESP_WakeTest+0x20a>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80074d0:	4b4b      	ldr	r3, [pc, #300]	@ (8007600 <ESP_WakeTest+0x230>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	0018      	movs	r0, r3
 80074d6:	f00c fc25 	bl	8013d24 <TimestampIsReached>
 80074da:	1e03      	subs	r3, r0, #0
 80074dc:	d100      	bne.n	80074e0 <ESP_WakeTest+0x110>
 80074de:	e07e      	b.n	80075de <ESP_WakeTest+0x20e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80074e0:	4b4a      	ldr	r3, [pc, #296]	@ (800760c <ESP_WakeTest+0x23c>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	0018      	movs	r0, r3
 80074e6:	f7ff fcab 	bl	8006e40 <DMA_ProcessBuffer>
 80074ea:	0003      	movs	r3, r0
 80074ec:	001a      	movs	r2, r3
 80074ee:	4b48      	ldr	r3, [pc, #288]	@ (8007610 <ESP_WakeTest+0x240>)
 80074f0:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80074f2:	4b47      	ldr	r3, [pc, #284]	@ (8007610 <ESP_WakeTest+0x240>)
 80074f4:	781a      	ldrb	r2, [r3, #0]
 80074f6:	4b45      	ldr	r3, [pc, #276]	@ (800760c <ESP_WakeTest+0x23c>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	1dbc      	adds	r4, r7, #6
 80074fc:	0019      	movs	r1, r3
 80074fe:	0010      	movs	r0, r2
 8007500:	f7ff fd9e 	bl	8007040 <ATCompare>
 8007504:	0003      	movs	r3, r0
 8007506:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007508:	4b41      	ldr	r3, [pc, #260]	@ (8007610 <ESP_WakeTest+0x240>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d102      	bne.n	8007516 <ESP_WakeTest+0x146>
          TestState = ESP_TEST_SEND;
 8007510:	4b35      	ldr	r3, [pc, #212]	@ (80075e8 <ESP_WakeTest+0x218>)
 8007512:	2201      	movs	r2, #1
 8007514:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8007516:	4b3e      	ldr	r3, [pc, #248]	@ (8007610 <ESP_WakeTest+0x240>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b07      	cmp	r3, #7
 800751c:	d104      	bne.n	8007528 <ESP_WakeTest+0x158>
          StartProg();
 800751e:	f7fe ff35 	bl	800638c <StartProg>
          TestState = ESP_TEST_BOOT;
 8007522:	4b31      	ldr	r3, [pc, #196]	@ (80075e8 <ESP_WakeTest+0x218>)
 8007524:	2205      	movs	r2, #5
 8007526:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007528:	4b39      	ldr	r3, [pc, #228]	@ (8007610 <ESP_WakeTest+0x240>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b03      	cmp	r3, #3
 800752e:	d109      	bne.n	8007544 <ESP_WakeTest+0x174>
          ESPTimeStamp = HAL_GetTick() + 50;
 8007530:	f00d f9c6 	bl	80148c0 <HAL_GetTick>
 8007534:	0003      	movs	r3, r0
 8007536:	3332      	adds	r3, #50	@ 0x32
 8007538:	001a      	movs	r2, r3
 800753a:	4b31      	ldr	r3, [pc, #196]	@ (8007600 <ESP_WakeTest+0x230>)
 800753c:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 800753e:	4b2a      	ldr	r3, [pc, #168]	@ (80075e8 <ESP_WakeTest+0x218>)
 8007540:	2201      	movs	r2, #1
 8007542:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8007544:	1dbb      	adds	r3, r7, #6
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d048      	beq.n	80075de <ESP_WakeTest+0x20e>
          TestState = ESP_TEST_VALIDATE;
 800754c:	4b26      	ldr	r3, [pc, #152]	@ (80075e8 <ESP_WakeTest+0x218>)
 800754e:	2203      	movs	r2, #3
 8007550:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007552:	e044      	b.n	80075de <ESP_WakeTest+0x20e>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8007554:	4b2f      	ldr	r3, [pc, #188]	@ (8007614 <ESP_WakeTest+0x244>)
 8007556:	22fa      	movs	r2, #250	@ 0xfa
 8007558:	0112      	lsls	r2, r2, #4
 800755a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 800755c:	f00b f88c 	bl	8012678 <Calculate_LED_ON>
 8007560:	0003      	movs	r3, r0
 8007562:	001a      	movs	r2, r3
 8007564:	4b2b      	ldr	r3, [pc, #172]	@ (8007614 <ESP_WakeTest+0x244>)
 8007566:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8007568:	4b2a      	ldr	r3, [pc, #168]	@ (8007614 <ESP_WakeTest+0x244>)
 800756a:	22fa      	movs	r2, #250	@ 0xfa
 800756c:	0112      	lsls	r2, r2, #4
 800756e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8007570:	4b1d      	ldr	r3, [pc, #116]	@ (80075e8 <ESP_WakeTest+0x218>)
 8007572:	2204      	movs	r2, #4
 8007574:	701a      	strb	r2, [r3, #0]

      break;
 8007576:	e033      	b.n	80075e0 <ESP_WakeTest+0x210>

    case ESP_TEST_DEINIT:
      testRound = false;
 8007578:	4b27      	ldr	r3, [pc, #156]	@ (8007618 <ESP_WakeTest+0x248>)
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800757e:	4b1e      	ldr	r3, [pc, #120]	@ (80075f8 <ESP_WakeTest+0x228>)
 8007580:	2200      	movs	r2, #0
 8007582:	2101      	movs	r1, #1
 8007584:	0018      	movs	r0, r3
 8007586:	f00e fc0e 	bl	8015da6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800758a:	2380      	movs	r3, #128	@ 0x80
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	4819      	ldr	r0, [pc, #100]	@ (80075f4 <ESP_WakeTest+0x224>)
 8007590:	2200      	movs	r2, #0
 8007592:	0019      	movs	r1, r3
 8007594:	f00e fc07 	bl	8015da6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007598:	4b17      	ldr	r3, [pc, #92]	@ (80075f8 <ESP_WakeTest+0x228>)
 800759a:	2200      	movs	r2, #0
 800759c:	2102      	movs	r1, #2
 800759e:	0018      	movs	r0, r3
 80075a0:	f00e fc01 	bl	8015da6 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 80075a4:	f005 ffa8 	bl	800d4f8 <SetESPMeasurementDone>
      EspTurnedOn = false;
 80075a8:	4b11      	ldr	r3, [pc, #68]	@ (80075f0 <ESP_WakeTest+0x220>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	701a      	strb	r2, [r3, #0]
      break;
 80075ae:	e017      	b.n	80075e0 <ESP_WakeTest+0x210>

    default:
      TestState = ESP_TEST_INIT;
 80075b0:	4b0d      	ldr	r3, [pc, #52]	@ (80075e8 <ESP_WakeTest+0x218>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
      break;
 80075b6:	e013      	b.n	80075e0 <ESP_WakeTest+0x210>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 80075b8:	4b16      	ldr	r3, [pc, #88]	@ (8007614 <ESP_WakeTest+0x244>)
 80075ba:	22fa      	movs	r2, #250	@ 0xfa
 80075bc:	0112      	lsls	r2, r2, #4
 80075be:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 80075c0:	4b14      	ldr	r3, [pc, #80]	@ (8007614 <ESP_WakeTest+0x244>)
 80075c2:	22fa      	movs	r2, #250	@ 0xfa
 80075c4:	0112      	lsls	r2, r2, #4
 80075c6:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 80075c8:	f00b f856 	bl	8012678 <Calculate_LED_ON>
 80075cc:	0003      	movs	r3, r0
 80075ce:	001a      	movs	r2, r3
 80075d0:	4b10      	ldr	r3, [pc, #64]	@ (8007614 <ESP_WakeTest+0x244>)
 80075d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 80075d4:	e004      	b.n	80075e0 <ESP_WakeTest+0x210>
      break;
 80075d6:	46c0      	nop			@ (mov r8, r8)
 80075d8:	e002      	b.n	80075e0 <ESP_WakeTest+0x210>
      break;
 80075da:	46c0      	nop			@ (mov r8, r8)
 80075dc:	e000      	b.n	80075e0 <ESP_WakeTest+0x210>
      break;
 80075de:	46c0      	nop			@ (mov r8, r8)
  }
}
 80075e0:	46c0      	nop			@ (mov r8, r8)
 80075e2:	46bd      	mov	sp, r7
 80075e4:	b003      	add	sp, #12
 80075e6:	bd90      	pop	{r4, r7, pc}
 80075e8:	20000703 	.word	0x20000703
 80075ec:	0802dd9c 	.word	0x0802dd9c
 80075f0:	200005ac 	.word	0x200005ac
 80075f4:	50000800 	.word	0x50000800
 80075f8:	50001c00 	.word	0x50001c00
 80075fc:	20002160 	.word	0x20002160
 8007600:	20000694 	.word	0x20000694
 8007604:	200004ac 	.word	0x200004ac
 8007608:	20000701 	.word	0x20000701
 800760c:	20000700 	.word	0x20000700
 8007610:	20000033 	.word	0x20000033
 8007614:	40000400 	.word	0x40000400
 8007618:	20000001 	.word	0x20000001

0800761c <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 800761c:	b5b0      	push	{r4, r5, r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8007622:	1dfb      	adds	r3, r7, #7
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
// Het lijkt er op dat ESP32  niet meer start indien de batterijspanning onder de 3,77 Volt daalt.
// Om uart fouten te voorkomen mogelijk ESP niet meer afhandelen.
  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8007628:	4b67      	ldr	r3, [pc, #412]	@ (80077c8 <ESP_Upkeep+0x1ac>)
 800762a:	781a      	ldrb	r2, [r3, #0]
 800762c:	4b67      	ldr	r3, [pc, #412]	@ (80077cc <ESP_Upkeep+0x1b0>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d028      	beq.n	8007686 <ESP_Upkeep+0x6a>
 8007634:	f00c fc56 	bl	8013ee4 <GetVerboseLevel>
 8007638:	0003      	movs	r3, r0
 800763a:	2b03      	cmp	r3, #3
 800763c:	d123      	bne.n	8007686 <ESP_Upkeep+0x6a>
    oldEspState = EspState;
 800763e:	4b62      	ldr	r3, [pc, #392]	@ (80077c8 <ESP_Upkeep+0x1ac>)
 8007640:	781a      	ldrb	r2, [r3, #0]
 8007642:	4b62      	ldr	r3, [pc, #392]	@ (80077cc <ESP_Upkeep+0x1b0>)
 8007644:	701a      	strb	r2, [r3, #0]
#ifdef USE_MAIL
    if ( !((oldEspState == 3) && ((ATCommand == AT_HTTPCPOST) || (ATCommand == AT_HTTPCPOST_MAILAPI))) ) {
 8007646:	4b61      	ldr	r3, [pc, #388]	@ (80077cc <ESP_Upkeep+0x1b0>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b03      	cmp	r3, #3
 800764c:	d107      	bne.n	800765e <ESP_Upkeep+0x42>
 800764e:	4b60      	ldr	r3, [pc, #384]	@ (80077d0 <ESP_Upkeep+0x1b4>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b0e      	cmp	r3, #14
 8007654:	d017      	beq.n	8007686 <ESP_Upkeep+0x6a>
 8007656:	4b5e      	ldr	r3, [pc, #376]	@ (80077d0 <ESP_Upkeep+0x1b4>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b14      	cmp	r3, #20
 800765c:	d013      	beq.n	8007686 <ESP_Upkeep+0x6a>
#else
      if ( !((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
#endif
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 800765e:	4b5b      	ldr	r3, [pc, #364]	@ (80077cc <ESP_Upkeep+0x1b0>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	001d      	movs	r5, r3
 8007664:	4b5a      	ldr	r3, [pc, #360]	@ (80077d0 <ESP_Upkeep+0x1b4>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	0018      	movs	r0, r3
 800766a:	4b5a      	ldr	r3, [pc, #360]	@ (80077d4 <ESP_Upkeep+0x1b8>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	001c      	movs	r4, r3
 8007670:	4b59      	ldr	r3, [pc, #356]	@ (80077d8 <ESP_Upkeep+0x1bc>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	4a59      	ldr	r2, [pc, #356]	@ (80077dc <ESP_Upkeep+0x1c0>)
 8007676:	495a      	ldr	r1, [pc, #360]	@ (80077e0 <ESP_Upkeep+0x1c4>)
 8007678:	9302      	str	r3, [sp, #8]
 800767a:	9401      	str	r4, [sp, #4]
 800767c:	9000      	str	r0, [sp, #0]
 800767e:	002b      	movs	r3, r5
 8007680:	2003      	movs	r0, #3
 8007682:	f00c fba5 	bl	8013dd0 <CreateLine>
    }
  }
  switch (EspState) {
 8007686:	4b50      	ldr	r3, [pc, #320]	@ (80077c8 <ESP_Upkeep+0x1ac>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b0f      	cmp	r3, #15
 800768c:	d901      	bls.n	8007692 <ESP_Upkeep+0x76>
 800768e:	f000 fcea 	bl	8008066 <ESP_Upkeep+0xa4a>
 8007692:	009a      	lsls	r2, r3, #2
 8007694:	4b53      	ldr	r3, [pc, #332]	@ (80077e4 <ESP_Upkeep+0x1c8>)
 8007696:	18d3      	adds	r3, r2, r3
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 800769c:	4b4a      	ldr	r3, [pc, #296]	@ (80077c8 <ESP_Upkeep+0x1ac>)
 800769e:	2201      	movs	r2, #1
 80076a0:	701a      	strb	r2, [r3, #0]
      break;
 80076a2:	f000 fcfb 	bl	800809c <ESP_Upkeep+0xa80>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 80076a6:	4b50      	ldr	r3, [pc, #320]	@ (80077e8 <ESP_Upkeep+0x1cc>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 80076ac:	f006 f984 	bl	800d9b8 <AllDevicesReady>
 80076b0:	0003      	movs	r3, r0
 80076b2:	001a      	movs	r2, r3
 80076b4:	2301      	movs	r3, #1
 80076b6:	4053      	eors	r3, r2
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <ESP_Upkeep+0xa6>
 80076be:	f000 fcde 	bl	800807e <ESP_Upkeep+0xa62>
//        Debug("Waiting for all devices ready");
        break;
      }
      SetESPIndicator();
 80076c2:	f00b f96b 	bl	801299c <SetESPIndicator>
      if(!EspTurnedOn){
 80076c6:	4b49      	ldr	r3, [pc, #292]	@ (80077ec <ESP_Upkeep+0x1d0>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2201      	movs	r2, #1
 80076cc:	4053      	eors	r3, r2
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d03f      	beq.n	8007754 <ESP_Upkeep+0x138>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80076d4:	2380      	movs	r3, #128	@ 0x80
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	4845      	ldr	r0, [pc, #276]	@ (80077f0 <ESP_Upkeep+0x1d4>)
 80076da:	2200      	movs	r2, #0
 80076dc:	0019      	movs	r1, r3
 80076de:	f00e fb62 	bl	8015da6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80076e2:	200a      	movs	r0, #10
 80076e4:	f00d f8f6 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80076e8:	2380      	movs	r3, #128	@ 0x80
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	4840      	ldr	r0, [pc, #256]	@ (80077f0 <ESP_Upkeep+0x1d4>)
 80076ee:	2201      	movs	r2, #1
 80076f0:	0019      	movs	r1, r3
 80076f2:	f00e fb58 	bl	8015da6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80076f6:	2032      	movs	r0, #50	@ 0x32
 80076f8:	f00d f8ec 	bl	80148d4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80076fc:	4b3d      	ldr	r3, [pc, #244]	@ (80077f4 <ESP_Upkeep+0x1d8>)
 80076fe:	2200      	movs	r2, #0
 8007700:	2101      	movs	r1, #1
 8007702:	0018      	movs	r0, r3
 8007704:	f00e fb4f 	bl	8015da6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8007708:	200a      	movs	r0, #10
 800770a:	f00d f8e3 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800770e:	4b39      	ldr	r3, [pc, #228]	@ (80077f4 <ESP_Upkeep+0x1d8>)
 8007710:	2201      	movs	r2, #1
 8007712:	2102      	movs	r1, #2
 8007714:	0018      	movs	r0, r3
 8007716:	f00e fb46 	bl	8015da6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800771a:	2032      	movs	r0, #50	@ 0x32
 800771c:	f00d f8da 	bl	80148d4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007720:	4b34      	ldr	r3, [pc, #208]	@ (80077f4 <ESP_Upkeep+0x1d8>)
 8007722:	2201      	movs	r2, #1
 8007724:	2101      	movs	r1, #1
 8007726:	0018      	movs	r0, r3
 8007728:	f00e fb3d 	bl	8015da6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800772c:	2032      	movs	r0, #50	@ 0x32
 800772e:	f00d f8d1 	bl	80148d4 <HAL_Delay>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007732:	f00d f8c5 	bl	80148c0 <HAL_GetTick>
 8007736:	0003      	movs	r3, r0
 8007738:	22e1      	movs	r2, #225	@ 0xe1
 800773a:	0092      	lsls	r2, r2, #2
 800773c:	189a      	adds	r2, r3, r2
 800773e:	4b2e      	ldr	r3, [pc, #184]	@ (80077f8 <ESP_Upkeep+0x1dc>)
 8007740:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007742:	4b2a      	ldr	r3, [pc, #168]	@ (80077ec <ESP_Upkeep+0x1d0>)
 8007744:	2201      	movs	r2, #1
 8007746:	701a      	strb	r2, [r3, #0]
        Debug("ESP powered on.");
 8007748:	4a2c      	ldr	r2, [pc, #176]	@ (80077fc <ESP_Upkeep+0x1e0>)
 800774a:	4b25      	ldr	r3, [pc, #148]	@ (80077e0 <ESP_Upkeep+0x1c4>)
 800774c:	0019      	movs	r1, r3
 800774e:	2003      	movs	r0, #3
 8007750:	f00c fb3e 	bl	8013dd0 <CreateLine>
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8007754:	2380      	movs	r3, #128	@ 0x80
 8007756:	005a      	lsls	r2, r3, #1
 8007758:	4b29      	ldr	r3, [pc, #164]	@ (8007800 <ESP_Upkeep+0x1e4>)
 800775a:	0011      	movs	r1, r2
 800775c:	0018      	movs	r0, r3
 800775e:	f7fd fbe9 	bl	8004f34 <ESP_Receive>
 8007762:	1e03      	subs	r3, r0, #0
 8007764:	d101      	bne.n	800776a <ESP_Upkeep+0x14e>
 8007766:	f000 fc8c 	bl	8008082 <ESP_Upkeep+0xa66>
        EspState = ESP_STATE_WAIT_AWAKE;
 800776a:	4b17      	ldr	r3, [pc, #92]	@ (80077c8 <ESP_Upkeep+0x1ac>)
 800776c:	220f      	movs	r2, #15
 800776e:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8007770:	f00d f8a6 	bl	80148c0 <HAL_GetTick>
 8007774:	0003      	movs	r3, r0
 8007776:	22fa      	movs	r2, #250	@ 0xfa
 8007778:	00d2      	lsls	r2, r2, #3
 800777a:	189a      	adds	r2, r3, r2
 800777c:	4b21      	ldr	r3, [pc, #132]	@ (8007804 <ESP_Upkeep+0x1e8>)
 800777e:	601a      	str	r2, [r3, #0]
      }
      break;
 8007780:	f000 fc7f 	bl	8008082 <ESP_Upkeep+0xa66>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8007784:	2001      	movs	r0, #1
 8007786:	f7ff fb5b 	bl	8006e40 <DMA_ProcessBuffer>
 800778a:	0003      	movs	r3, r0
 800778c:	001a      	movs	r2, r3
 800778e:	4b1e      	ldr	r3, [pc, #120]	@ (8007808 <ESP_Upkeep+0x1ec>)
 8007790:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007792:	4b1d      	ldr	r3, [pc, #116]	@ (8007808 <ESP_Upkeep+0x1ec>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	1dbc      	adds	r4, r7, #6
 8007798:	2101      	movs	r1, #1
 800779a:	0018      	movs	r0, r3
 800779c:	f7ff fc50 	bl	8007040 <ATCompare>
 80077a0:	0003      	movs	r3, r0
 80077a2:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80077a4:	1dbb      	adds	r3, r7, #6
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d108      	bne.n	80077be <ESP_Upkeep+0x1a2>
 80077ac:	4b15      	ldr	r3, [pc, #84]	@ (8007804 <ESP_Upkeep+0x1e8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	0018      	movs	r0, r3
 80077b2:	f00c fab7 	bl	8013d24 <TimestampIsReached>
 80077b6:	1e03      	subs	r3, r0, #0
 80077b8:	d101      	bne.n	80077be <ESP_Upkeep+0x1a2>
 80077ba:	f000 fc64 	bl	8008086 <ESP_Upkeep+0xa6a>
          EspState = ESP_STATE_MODE_SELECT;
 80077be:	4b02      	ldr	r3, [pc, #8]	@ (80077c8 <ESP_Upkeep+0x1ac>)
 80077c0:	220b      	movs	r2, #11
 80077c2:	701a      	strb	r2, [r3, #0]
        }
        break;
 80077c4:	f000 fc5f 	bl	8008086 <ESP_Upkeep+0xa6a>
 80077c8:	20000030 	.word	0x20000030
 80077cc:	20000003 	.word	0x20000003
 80077d0:	20000701 	.word	0x20000701
 80077d4:	20000702 	.word	0x20000702
 80077d8:	20000700 	.word	0x20000700
 80077dc:	0802b06c 	.word	0x0802b06c
 80077e0:	0802a954 	.word	0x0802a954
 80077e4:	0802ddb4 	.word	0x0802ddb4
 80077e8:	20001114 	.word	0x20001114
 80077ec:	200005ac 	.word	0x200005ac
 80077f0:	50000800 	.word	0x50000800
 80077f4:	50001c00 	.word	0x50001c00
 80077f8:	20000694 	.word	0x20000694
 80077fc:	0802b098 	.word	0x0802b098
 8007800:	200004ac 	.word	0x200004ac
 8007804:	20000938 	.word	0x20000938
 8007808:	20000034 	.word	0x20000034

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 800780c:	4bd6      	ldr	r3, [pc, #856]	@ (8007b68 <ESP_Upkeep+0x54c>)
 800780e:	2209      	movs	r2, #9
 8007810:	2116      	movs	r1, #22
 8007812:	0018      	movs	r0, r3
 8007814:	f01e fe4e 	bl	80264b4 <memset>
      if(!InitIsDone || WifiReset){
 8007818:	4bd4      	ldr	r3, [pc, #848]	@ (8007b6c <ESP_Upkeep+0x550>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2201      	movs	r2, #1
 800781e:	4053      	eors	r3, r2
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d103      	bne.n	800782e <ESP_Upkeep+0x212>
 8007826:	4bd2      	ldr	r3, [pc, #840]	@ (8007b70 <ESP_Upkeep+0x554>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d016      	beq.n	800785c <ESP_Upkeep+0x240>
        memcpy(ATCommandArray, AT_INIT, sizeof(AT_INIT));
 800782e:	4bce      	ldr	r3, [pc, #824]	@ (8007b68 <ESP_Upkeep+0x54c>)
 8007830:	4ad0      	ldr	r2, [pc, #832]	@ (8007b74 <ESP_Upkeep+0x558>)
 8007832:	ca03      	ldmia	r2!, {r0, r1}
 8007834:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 8007836:	4bd0      	ldr	r3, [pc, #832]	@ (8007b78 <ESP_Upkeep+0x55c>)
 8007838:	2204      	movs	r2, #4
 800783a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800783c:	4bcf      	ldr	r3, [pc, #828]	@ (8007b7c <ESP_Upkeep+0x560>)
 800783e:	2200      	movs	r2, #0
 8007840:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8007842:	4bcf      	ldr	r3, [pc, #828]	@ (8007b80 <ESP_Upkeep+0x564>)
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007848:	4bcc      	ldr	r3, [pc, #816]	@ (8007b7c <ESP_Upkeep+0x560>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	001a      	movs	r2, r3
 800784e:	4bc6      	ldr	r3, [pc, #792]	@ (8007b68 <ESP_Upkeep+0x54c>)
 8007850:	5c9a      	ldrb	r2, [r3, r2]
 8007852:	4bcc      	ldr	r3, [pc, #816]	@ (8007b84 <ESP_Upkeep+0x568>)
 8007854:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007856:	4bcc      	ldr	r3, [pc, #816]	@ (8007b88 <ESP_Upkeep+0x56c>)
 8007858:	2200      	movs	r2, #0
 800785a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800785c:	4bc3      	ldr	r3, [pc, #780]	@ (8007b6c <ESP_Upkeep+0x550>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d01f      	beq.n	80078a4 <ESP_Upkeep+0x288>
 8007864:	4bc9      	ldr	r3, [pc, #804]	@ (8007b8c <ESP_Upkeep+0x570>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2201      	movs	r2, #1
 800786a:	4053      	eors	r3, r2
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d018      	beq.n	80078a4 <ESP_Upkeep+0x288>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8007872:	4bbd      	ldr	r3, [pc, #756]	@ (8007b68 <ESP_Upkeep+0x54c>)
 8007874:	4ac6      	ldr	r2, [pc, #792]	@ (8007b90 <ESP_Upkeep+0x574>)
 8007876:	6811      	ldr	r1, [r2, #0]
 8007878:	6019      	str	r1, [r3, #0]
 800787a:	8892      	ldrh	r2, [r2, #4]
 800787c:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800787e:	4bbe      	ldr	r3, [pc, #760]	@ (8007b78 <ESP_Upkeep+0x55c>)
 8007880:	2204      	movs	r2, #4
 8007882:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007884:	4bbd      	ldr	r3, [pc, #756]	@ (8007b7c <ESP_Upkeep+0x560>)
 8007886:	2200      	movs	r2, #0
 8007888:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800788a:	4bbd      	ldr	r3, [pc, #756]	@ (8007b80 <ESP_Upkeep+0x564>)
 800788c:	2201      	movs	r2, #1
 800788e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007890:	4bba      	ldr	r3, [pc, #744]	@ (8007b7c <ESP_Upkeep+0x560>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	001a      	movs	r2, r3
 8007896:	4bb4      	ldr	r3, [pc, #720]	@ (8007b68 <ESP_Upkeep+0x54c>)
 8007898:	5c9a      	ldrb	r2, [r3, r2]
 800789a:	4bba      	ldr	r3, [pc, #744]	@ (8007b84 <ESP_Upkeep+0x568>)
 800789c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800789e:	4bba      	ldr	r3, [pc, #744]	@ (8007b88 <ESP_Upkeep+0x56c>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !APtested){
 80078a4:	4bb1      	ldr	r3, [pc, #708]	@ (8007b6c <ESP_Upkeep+0x550>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d021      	beq.n	80078f0 <ESP_Upkeep+0x2d4>
 80078ac:	4bb7      	ldr	r3, [pc, #732]	@ (8007b8c <ESP_Upkeep+0x570>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01d      	beq.n	80078f0 <ESP_Upkeep+0x2d4>
 80078b4:	4bb7      	ldr	r3, [pc, #732]	@ (8007b94 <ESP_Upkeep+0x578>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2201      	movs	r2, #1
 80078ba:	4053      	eors	r3, r2
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d016      	beq.n	80078f0 <ESP_Upkeep+0x2d4>
        memcpy(ATCommandArray, AT_TEST, 2);
 80078c2:	4bb5      	ldr	r3, [pc, #724]	@ (8007b98 <ESP_Upkeep+0x57c>)
 80078c4:	881a      	ldrh	r2, [r3, #0]
 80078c6:	4ba8      	ldr	r3, [pc, #672]	@ (8007b68 <ESP_Upkeep+0x54c>)
 80078c8:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80078ca:	4bab      	ldr	r3, [pc, #684]	@ (8007b78 <ESP_Upkeep+0x55c>)
 80078cc:	2204      	movs	r2, #4
 80078ce:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80078d0:	4baa      	ldr	r3, [pc, #680]	@ (8007b7c <ESP_Upkeep+0x560>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80078d6:	4baa      	ldr	r3, [pc, #680]	@ (8007b80 <ESP_Upkeep+0x564>)
 80078d8:	2204      	movs	r2, #4
 80078da:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80078dc:	4ba7      	ldr	r3, [pc, #668]	@ (8007b7c <ESP_Upkeep+0x560>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	001a      	movs	r2, r3
 80078e2:	4ba1      	ldr	r3, [pc, #644]	@ (8007b68 <ESP_Upkeep+0x54c>)
 80078e4:	5c9a      	ldrb	r2, [r3, r2]
 80078e6:	4ba7      	ldr	r3, [pc, #668]	@ (8007b84 <ESP_Upkeep+0x568>)
 80078e8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80078ea:	4ba7      	ldr	r3, [pc, #668]	@ (8007b88 <ESP_Upkeep+0x56c>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(InitIsDone && ConnectionMade && APtested && (sendpwremail == DO_PWR_MAIL)){
 80078f0:	4b9e      	ldr	r3, [pc, #632]	@ (8007b6c <ESP_Upkeep+0x550>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d024      	beq.n	8007942 <ESP_Upkeep+0x326>
 80078f8:	4ba4      	ldr	r3, [pc, #656]	@ (8007b8c <ESP_Upkeep+0x570>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d020      	beq.n	8007942 <ESP_Upkeep+0x326>
 8007900:	4ba4      	ldr	r3, [pc, #656]	@ (8007b94 <ESP_Upkeep+0x578>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01c      	beq.n	8007942 <ESP_Upkeep+0x326>
 8007908:	4ba4      	ldr	r3, [pc, #656]	@ (8007b9c <ESP_Upkeep+0x580>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d118      	bne.n	8007942 <ESP_Upkeep+0x326>
        memcpy(ATCommandArray, AT_MAIL, 3);
 8007910:	4b95      	ldr	r3, [pc, #596]	@ (8007b68 <ESP_Upkeep+0x54c>)
 8007912:	4aa3      	ldr	r2, [pc, #652]	@ (8007ba0 <ESP_Upkeep+0x584>)
 8007914:	8811      	ldrh	r1, [r2, #0]
 8007916:	8019      	strh	r1, [r3, #0]
 8007918:	7892      	ldrb	r2, [r2, #2]
 800791a:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800791c:	4b96      	ldr	r3, [pc, #600]	@ (8007b78 <ESP_Upkeep+0x55c>)
 800791e:	2204      	movs	r2, #4
 8007920:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007922:	4b96      	ldr	r3, [pc, #600]	@ (8007b7c <ESP_Upkeep+0x560>)
 8007924:	2200      	movs	r2, #0
 8007926:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_MAIL;
 8007928:	4b95      	ldr	r3, [pc, #596]	@ (8007b80 <ESP_Upkeep+0x564>)
 800792a:	2206      	movs	r2, #6
 800792c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800792e:	4b93      	ldr	r3, [pc, #588]	@ (8007b7c <ESP_Upkeep+0x560>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	001a      	movs	r2, r3
 8007934:	4b8c      	ldr	r3, [pc, #560]	@ (8007b68 <ESP_Upkeep+0x54c>)
 8007936:	5c9a      	ldrb	r2, [r3, r2]
 8007938:	4b92      	ldr	r3, [pc, #584]	@ (8007b84 <ESP_Upkeep+0x568>)
 800793a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800793c:	4b92      	ldr	r3, [pc, #584]	@ (8007b88 <ESP_Upkeep+0x56c>)
 800793e:	2200      	movs	r2, #0
 8007940:	701a      	strb	r2, [r3, #0]
      }
#endif
      if(InitIsDone && ConnectionMade && APtested && !setTime && (sendpwremail != DO_PWR_MAIL)){
 8007942:	4b8a      	ldr	r3, [pc, #552]	@ (8007b6c <ESP_Upkeep+0x550>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d030      	beq.n	80079ac <ESP_Upkeep+0x390>
 800794a:	4b90      	ldr	r3, [pc, #576]	@ (8007b8c <ESP_Upkeep+0x570>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d02c      	beq.n	80079ac <ESP_Upkeep+0x390>
 8007952:	4b90      	ldr	r3, [pc, #576]	@ (8007b94 <ESP_Upkeep+0x578>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d028      	beq.n	80079ac <ESP_Upkeep+0x390>
 800795a:	4b92      	ldr	r3, [pc, #584]	@ (8007ba4 <ESP_Upkeep+0x588>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2201      	movs	r2, #1
 8007960:	4053      	eors	r3, r2
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d021      	beq.n	80079ac <ESP_Upkeep+0x390>
 8007968:	4b8c      	ldr	r3, [pc, #560]	@ (8007b9c <ESP_Upkeep+0x580>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d01d      	beq.n	80079ac <ESP_Upkeep+0x390>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007970:	4b7d      	ldr	r3, [pc, #500]	@ (8007b68 <ESP_Upkeep+0x54c>)
 8007972:	4a8d      	ldr	r2, [pc, #564]	@ (8007ba8 <ESP_Upkeep+0x58c>)
 8007974:	8811      	ldrh	r1, [r2, #0]
 8007976:	8019      	strh	r1, [r3, #0]
 8007978:	7892      	ldrb	r2, [r2, #2]
 800797a:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800797c:	4b7e      	ldr	r3, [pc, #504]	@ (8007b78 <ESP_Upkeep+0x55c>)
 800797e:	2204      	movs	r2, #4
 8007980:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007982:	4b7e      	ldr	r3, [pc, #504]	@ (8007b7c <ESP_Upkeep+0x560>)
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007988:	4b7d      	ldr	r3, [pc, #500]	@ (8007b80 <ESP_Upkeep+0x564>)
 800798a:	2202      	movs	r2, #2
 800798c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800798e:	f00c ff97 	bl	80148c0 <HAL_GetTick>
 8007992:	0002      	movs	r2, r0
 8007994:	4b85      	ldr	r3, [pc, #532]	@ (8007bac <ESP_Upkeep+0x590>)
 8007996:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007998:	4b78      	ldr	r3, [pc, #480]	@ (8007b7c <ESP_Upkeep+0x560>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	001a      	movs	r2, r3
 800799e:	4b72      	ldr	r3, [pc, #456]	@ (8007b68 <ESP_Upkeep+0x54c>)
 80079a0:	5c9a      	ldrb	r2, [r3, r2]
 80079a2:	4b78      	ldr	r3, [pc, #480]	@ (8007b84 <ESP_Upkeep+0x568>)
 80079a4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079a6:	4b78      	ldr	r3, [pc, #480]	@ (8007b88 <ESP_Upkeep+0x56c>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && APtested && setTime && (sendpwremail != DO_PWR_MAIL)){
 80079ac:	4b6f      	ldr	r3, [pc, #444]	@ (8007b6c <ESP_Upkeep+0x550>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d02b      	beq.n	8007a0c <ESP_Upkeep+0x3f0>
 80079b4:	4b75      	ldr	r3, [pc, #468]	@ (8007b8c <ESP_Upkeep+0x570>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d027      	beq.n	8007a0c <ESP_Upkeep+0x3f0>
 80079bc:	4b75      	ldr	r3, [pc, #468]	@ (8007b94 <ESP_Upkeep+0x578>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d023      	beq.n	8007a0c <ESP_Upkeep+0x3f0>
 80079c4:	4b77      	ldr	r3, [pc, #476]	@ (8007ba4 <ESP_Upkeep+0x588>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01f      	beq.n	8007a0c <ESP_Upkeep+0x3f0>
 80079cc:	4b73      	ldr	r3, [pc, #460]	@ (8007b9c <ESP_Upkeep+0x580>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d01b      	beq.n	8007a0c <ESP_Upkeep+0x3f0>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80079d4:	4b76      	ldr	r3, [pc, #472]	@ (8007bb0 <ESP_Upkeep+0x594>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	4b63      	ldr	r3, [pc, #396]	@ (8007b68 <ESP_Upkeep+0x54c>)
 80079da:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80079dc:	4b66      	ldr	r3, [pc, #408]	@ (8007b78 <ESP_Upkeep+0x55c>)
 80079de:	2204      	movs	r2, #4
 80079e0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80079e2:	4b66      	ldr	r3, [pc, #408]	@ (8007b7c <ESP_Upkeep+0x560>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80079e8:	4b65      	ldr	r3, [pc, #404]	@ (8007b80 <ESP_Upkeep+0x564>)
 80079ea:	2205      	movs	r2, #5
 80079ec:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80079ee:	f00c ff67 	bl	80148c0 <HAL_GetTick>
 80079f2:	0002      	movs	r2, r0
 80079f4:	4b6d      	ldr	r3, [pc, #436]	@ (8007bac <ESP_Upkeep+0x590>)
 80079f6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80079f8:	4b60      	ldr	r3, [pc, #384]	@ (8007b7c <ESP_Upkeep+0x560>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	001a      	movs	r2, r3
 80079fe:	4b5a      	ldr	r3, [pc, #360]	@ (8007b68 <ESP_Upkeep+0x54c>)
 8007a00:	5c9a      	ldrb	r2, [r3, r2]
 8007a02:	4b60      	ldr	r3, [pc, #384]	@ (8007b84 <ESP_Upkeep+0x568>)
 8007a04:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a06:	4b60      	ldr	r3, [pc, #384]	@ (8007b88 <ESP_Upkeep+0x56c>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007a0c:	4b69      	ldr	r3, [pc, #420]	@ (8007bb4 <ESP_Upkeep+0x598>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d100      	bne.n	8007a16 <ESP_Upkeep+0x3fa>
 8007a14:	e339      	b.n	800808a <ESP_Upkeep+0xa6e>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007a16:	4b54      	ldr	r3, [pc, #336]	@ (8007b68 <ESP_Upkeep+0x54c>)
 8007a18:	4a67      	ldr	r2, [pc, #412]	@ (8007bb8 <ESP_Upkeep+0x59c>)
 8007a1a:	6811      	ldr	r1, [r2, #0]
 8007a1c:	6019      	str	r1, [r3, #0]
 8007a1e:	7912      	ldrb	r2, [r2, #4]
 8007a20:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode for local wifi config selected");
 8007a22:	4a66      	ldr	r2, [pc, #408]	@ (8007bbc <ESP_Upkeep+0x5a0>)
 8007a24:	4b66      	ldr	r3, [pc, #408]	@ (8007bc0 <ESP_Upkeep+0x5a4>)
 8007a26:	0019      	movs	r1, r3
 8007a28:	2003      	movs	r0, #3
 8007a2a:	f00c f9d1 	bl	8013dd0 <CreateLine>
        DisableConnectedDevices();
 8007a2e:	f006 f97f 	bl	800dd30 <DisableConnectedDevices>
        usblog = false;
 8007a32:	4b64      	ldr	r3, [pc, #400]	@ (8007bc4 <ESP_Upkeep+0x5a8>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007a38:	4b4f      	ldr	r3, [pc, #316]	@ (8007b78 <ESP_Upkeep+0x55c>)
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a3e:	4b4f      	ldr	r3, [pc, #316]	@ (8007b7c <ESP_Upkeep+0x560>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007a44:	4b4e      	ldr	r3, [pc, #312]	@ (8007b80 <ESP_Upkeep+0x564>)
 8007a46:	2203      	movs	r2, #3
 8007a48:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8007b7c <ESP_Upkeep+0x560>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	001a      	movs	r2, r3
 8007a50:	4b45      	ldr	r3, [pc, #276]	@ (8007b68 <ESP_Upkeep+0x54c>)
 8007a52:	5c9a      	ldrb	r2, [r3, r2]
 8007a54:	4b4b      	ldr	r3, [pc, #300]	@ (8007b84 <ESP_Upkeep+0x568>)
 8007a56:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a58:	4b4b      	ldr	r3, [pc, #300]	@ (8007b88 <ESP_Upkeep+0x56c>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
      }
    break;
 8007a5e:	e314      	b.n	800808a <ESP_Upkeep+0xa6e>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007a60:	4b48      	ldr	r3, [pc, #288]	@ (8007b84 <ESP_Upkeep+0x568>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	1dfc      	adds	r4, r7, #7
 8007a66:	0018      	movs	r0, r3
 8007a68:	f7ff fb2c 	bl	80070c4 <AT_Send>
 8007a6c:	0003      	movs	r3, r0
 8007a6e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007a70:	1dfb      	adds	r3, r7, #7
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d100      	bne.n	8007a7a <ESP_Upkeep+0x45e>
 8007a78:	e309      	b.n	800808e <ESP_Upkeep+0xa72>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8007b78 <ESP_Upkeep+0x55c>)
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007a80:	e305      	b.n	800808e <ESP_Upkeep+0xa72>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007a82:	4b4c      	ldr	r3, [pc, #304]	@ (8007bb4 <ESP_Upkeep+0x598>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d007      	beq.n	8007a9a <ESP_Upkeep+0x47e>
 8007a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8007b80 <ESP_Upkeep+0x564>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d003      	beq.n	8007a9a <ESP_Upkeep+0x47e>
        EspState = ESP_STATE_MODE_SELECT;
 8007a92:	4b39      	ldr	r3, [pc, #228]	@ (8007b78 <ESP_Upkeep+0x55c>)
 8007a94:	220b      	movs	r2, #11
 8007a96:	701a      	strb	r2, [r3, #0]
        break;
 8007a98:	e300      	b.n	800809c <ESP_Upkeep+0xa80>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8007bc8 <ESP_Upkeep+0x5ac>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f00c f940 	bl	8013d24 <TimestampIsReached>
 8007aa4:	1e03      	subs	r3, r0, #0
 8007aa6:	d100      	bne.n	8007aaa <ESP_Upkeep+0x48e>
 8007aa8:	e2f3      	b.n	8008092 <ESP_Upkeep+0xa76>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007aaa:	4b37      	ldr	r3, [pc, #220]	@ (8007b88 <ESP_Upkeep+0x56c>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f7ff f9c6 	bl	8006e40 <DMA_ProcessBuffer>
 8007ab4:	0003      	movs	r3, r0
 8007ab6:	001a      	movs	r2, r3
 8007ab8:	4b44      	ldr	r3, [pc, #272]	@ (8007bcc <ESP_Upkeep+0x5b0>)
 8007aba:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007abc:	4b43      	ldr	r3, [pc, #268]	@ (8007bcc <ESP_Upkeep+0x5b0>)
 8007abe:	781a      	ldrb	r2, [r3, #0]
 8007ac0:	4b31      	ldr	r3, [pc, #196]	@ (8007b88 <ESP_Upkeep+0x56c>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	1d7c      	adds	r4, r7, #5
 8007ac6:	0019      	movs	r1, r3
 8007ac8:	0010      	movs	r0, r2
 8007aca:	f7ff fab9 	bl	8007040 <ATCompare>
 8007ace:	0003      	movs	r3, r0
 8007ad0:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8007bcc <ESP_Upkeep+0x5b0>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d000      	beq.n	8007adc <ESP_Upkeep+0x4c0>
 8007ada:	e085      	b.n	8007be8 <ESP_Upkeep+0x5cc>
          if(ATCommand == AT_SENDDATA){
 8007adc:	4b29      	ldr	r3, [pc, #164]	@ (8007b84 <ESP_Upkeep+0x568>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b0f      	cmp	r3, #15
 8007ae2:	d108      	bne.n	8007af6 <ESP_Upkeep+0x4da>
            ATCommand = AT_HTTPCPOST;
 8007ae4:	4b27      	ldr	r3, [pc, #156]	@ (8007b84 <ESP_Upkeep+0x568>)
 8007ae6:	220e      	movs	r2, #14
 8007ae8:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007aea:	4b27      	ldr	r3, [pc, #156]	@ (8007b88 <ESP_Upkeep+0x56c>)
 8007aec:	2202      	movs	r2, #2
 8007aee:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007af0:	4b22      	ldr	r3, [pc, #136]	@ (8007b7c <ESP_Upkeep+0x560>)
 8007af2:	2201      	movs	r2, #1
 8007af4:	701a      	strb	r2, [r3, #0]
          }
          if(ATCommand == AT_SENDMAIL){
 8007af6:	4b23      	ldr	r3, [pc, #140]	@ (8007b84 <ESP_Upkeep+0x568>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b15      	cmp	r3, #21
 8007afc:	d108      	bne.n	8007b10 <ESP_Upkeep+0x4f4>
            ATCommand = AT_HTTPCPOST_MAILAPI;
 8007afe:	4b21      	ldr	r3, [pc, #132]	@ (8007b84 <ESP_Upkeep+0x568>)
 8007b00:	2214      	movs	r2, #20
 8007b02:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007b04:	4b20      	ldr	r3, [pc, #128]	@ (8007b88 <ESP_Upkeep+0x56c>)
 8007b06:	2202      	movs	r2, #2
 8007b08:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8007b7c <ESP_Upkeep+0x560>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007b10:	4b19      	ldr	r3, [pc, #100]	@ (8007b78 <ESP_Upkeep+0x55c>)
 8007b12:	2204      	movs	r2, #4
 8007b14:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007b16:	4b2e      	ldr	r3, [pc, #184]	@ (8007bd0 <ESP_Upkeep+0x5b4>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8007bd0 <ESP_Upkeep+0x5b4>)
 8007b20:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007b22:	4b2b      	ldr	r3, [pc, #172]	@ (8007bd0 <ESP_Upkeep+0x5b4>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d95e      	bls.n	8007be8 <ESP_Upkeep+0x5cc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007b2a:	f00c fec9 	bl	80148c0 <HAL_GetTick>
 8007b2e:	0003      	movs	r3, r0
 8007b30:	4a28      	ldr	r2, [pc, #160]	@ (8007bd4 <ESP_Upkeep+0x5b8>)
 8007b32:	189a      	adds	r2, r3, r2
 8007b34:	4b24      	ldr	r3, [pc, #144]	@ (8007bc8 <ESP_Upkeep+0x5ac>)
 8007b36:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007b38:	4b27      	ldr	r3, [pc, #156]	@ (8007bd8 <ESP_Upkeep+0x5bc>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007b3e:	f7ff fa71 	bl	8007024 <clearDMABuffer>
            stop = HAL_GetTick();
 8007b42:	f00c febd 	bl	80148c0 <HAL_GetTick>
 8007b46:	0002      	movs	r2, r0
 8007b48:	4b24      	ldr	r3, [pc, #144]	@ (8007bdc <ESP_Upkeep+0x5c0>)
 8007b4a:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007b4c:	4b23      	ldr	r3, [pc, #140]	@ (8007bdc <ESP_Upkeep+0x5c0>)
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	4b16      	ldr	r3, [pc, #88]	@ (8007bac <ESP_Upkeep+0x590>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	4a22      	ldr	r2, [pc, #136]	@ (8007be0 <ESP_Upkeep+0x5c4>)
 8007b58:	4922      	ldr	r1, [pc, #136]	@ (8007be4 <ESP_Upkeep+0x5c8>)
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	f00c f938 	bl	8013dd0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007b60:	4b05      	ldr	r3, [pc, #20]	@ (8007b78 <ESP_Upkeep+0x55c>)
 8007b62:	220d      	movs	r2, #13
 8007b64:	701a      	strb	r2, [r3, #0]
            break;
 8007b66:	e299      	b.n	800809c <ESP_Upkeep+0xa80>
 8007b68:	20000684 	.word	0x20000684
 8007b6c:	200005ad 	.word	0x200005ad
 8007b70:	200005ae 	.word	0x200005ae
 8007b74:	20000004 	.word	0x20000004
 8007b78:	20000030 	.word	0x20000030
 8007b7c:	2000068e 	.word	0x2000068e
 8007b80:	20000702 	.word	0x20000702
 8007b84:	20000701 	.word	0x20000701
 8007b88:	20000700 	.word	0x20000700
 8007b8c:	200005b0 	.word	0x200005b0
 8007b90:	20000014 	.word	0x20000014
 8007b94:	200005b1 	.word	0x200005b1
 8007b98:	20000010 	.word	0x20000010
 8007b9c:	200010f9 	.word	0x200010f9
 8007ba0:	20000028 	.word	0x20000028
 8007ba4:	20000002 	.word	0x20000002
 8007ba8:	2000000c 	.word	0x2000000c
 8007bac:	200005b4 	.word	0x200005b4
 8007bb0:	20000024 	.word	0x20000024
 8007bb4:	200005af 	.word	0x200005af
 8007bb8:	2000001c 	.word	0x2000001c
 8007bbc:	0802b0a8 	.word	0x0802b0a8
 8007bc0:	0802a954 	.word	0x0802a954
 8007bc4:	200010f7 	.word	0x200010f7
 8007bc8:	20000694 	.word	0x20000694
 8007bcc:	20000034 	.word	0x20000034
 8007bd0:	2000068f 	.word	0x2000068f
 8007bd4:	0003a980 	.word	0x0003a980
 8007bd8:	200005b3 	.word	0x200005b3
 8007bdc:	200005b8 	.word	0x200005b8
 8007be0:	0802b0d8 	.word	0x0802b0d8
 8007be4:	0802a8f0 	.word	0x0802a8f0
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007be8:	4bb3      	ldr	r3, [pc, #716]	@ (8007eb8 <ESP_Upkeep+0x89c>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d106      	bne.n	8007bfe <ESP_Upkeep+0x5e2>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007bf0:	f00c fe66 	bl	80148c0 <HAL_GetTick>
 8007bf4:	0003      	movs	r3, r0
 8007bf6:	330a      	adds	r3, #10
 8007bf8:	001a      	movs	r2, r3
 8007bfa:	4bb0      	ldr	r3, [pc, #704]	@ (8007ebc <ESP_Upkeep+0x8a0>)
 8007bfc:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007bfe:	4bae      	ldr	r3, [pc, #696]	@ (8007eb8 <ESP_Upkeep+0x89c>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b0a      	cmp	r3, #10
 8007c04:	d106      	bne.n	8007c14 <ESP_Upkeep+0x5f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007c06:	f00c fe5b 	bl	80148c0 <HAL_GetTick>
 8007c0a:	0003      	movs	r3, r0
 8007c0c:	330a      	adds	r3, #10
 8007c0e:	001a      	movs	r2, r3
 8007c10:	4baa      	ldr	r3, [pc, #680]	@ (8007ebc <ESP_Upkeep+0x8a0>)
 8007c12:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007c14:	4ba8      	ldr	r3, [pc, #672]	@ (8007eb8 <ESP_Upkeep+0x89c>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b06      	cmp	r3, #6
 8007c1a:	d14b      	bne.n	8007cb4 <ESP_Upkeep+0x698>
          timeoutcntr++;
 8007c1c:	4ba8      	ldr	r3, [pc, #672]	@ (8007ec0 <ESP_Upkeep+0x8a4>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	3301      	adds	r3, #1
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	4ba6      	ldr	r3, [pc, #664]	@ (8007ec0 <ESP_Upkeep+0x8a4>)
 8007c26:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007c28:	4aa6      	ldr	r2, [pc, #664]	@ (8007ec4 <ESP_Upkeep+0x8a8>)
 8007c2a:	4ba7      	ldr	r3, [pc, #668]	@ (8007ec8 <ESP_Upkeep+0x8ac>)
 8007c2c:	0019      	movs	r1, r3
 8007c2e:	2001      	movs	r0, #1
 8007c30:	f00c f8ce 	bl	8013dd0 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007c34:	4ba2      	ldr	r3, [pc, #648]	@ (8007ec0 <ESP_Upkeep+0x8a4>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d924      	bls.n	8007c86 <ESP_Upkeep+0x66a>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007c3c:	f00c fe40 	bl	80148c0 <HAL_GetTick>
 8007c40:	0003      	movs	r3, r0
 8007c42:	4aa2      	ldr	r2, [pc, #648]	@ (8007ecc <ESP_Upkeep+0x8b0>)
 8007c44:	189a      	adds	r2, r3, r2
 8007c46:	4b9d      	ldr	r3, [pc, #628]	@ (8007ebc <ESP_Upkeep+0x8a0>)
 8007c48:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007c4a:	4ba1      	ldr	r3, [pc, #644]	@ (8007ed0 <ESP_Upkeep+0x8b4>)
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007c50:	f7ff f9e8 	bl	8007024 <clearDMABuffer>
            stop = HAL_GetTick();
 8007c54:	f00c fe34 	bl	80148c0 <HAL_GetTick>
 8007c58:	0002      	movs	r2, r0
 8007c5a:	4b9e      	ldr	r3, [pc, #632]	@ (8007ed4 <ESP_Upkeep+0x8b8>)
 8007c5c:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007c5e:	4b9d      	ldr	r3, [pc, #628]	@ (8007ed4 <ESP_Upkeep+0x8b8>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	4b9d      	ldr	r3, [pc, #628]	@ (8007ed8 <ESP_Upkeep+0x8bc>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	4a9c      	ldr	r2, [pc, #624]	@ (8007edc <ESP_Upkeep+0x8c0>)
 8007c6a:	4997      	ldr	r1, [pc, #604]	@ (8007ec8 <ESP_Upkeep+0x8ac>)
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	f00c f8af 	bl	8013dd0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007c72:	4b9b      	ldr	r3, [pc, #620]	@ (8007ee0 <ESP_Upkeep+0x8c4>)
 8007c74:	220d      	movs	r2, #13
 8007c76:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007c78:	4b9a      	ldr	r3, [pc, #616]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007c7a:	2216      	movs	r2, #22
 8007c7c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007c7e:	4b9a      	ldr	r3, [pc, #616]	@ (8007ee8 <ESP_Upkeep+0x8cc>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	701a      	strb	r2, [r3, #0]
            break;
 8007c84:	e20a      	b.n	800809c <ESP_Upkeep+0xa80>
          }
          if(ATCommand != AT_SENDDATA){
 8007c86:	4b97      	ldr	r3, [pc, #604]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b0f      	cmp	r3, #15
 8007c8c:	d003      	beq.n	8007c96 <ESP_Upkeep+0x67a>
            EspState = ESP_STATE_SEND;
 8007c8e:	4b94      	ldr	r3, [pc, #592]	@ (8007ee0 <ESP_Upkeep+0x8c4>)
 8007c90:	2204      	movs	r2, #4
 8007c92:	701a      	strb	r2, [r3, #0]
 8007c94:	e00e      	b.n	8007cb4 <ESP_Upkeep+0x698>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007c96:	4b93      	ldr	r3, [pc, #588]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007c98:	220e      	movs	r2, #14
 8007c9a:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007c9c:	4b93      	ldr	r3, [pc, #588]	@ (8007eec <ESP_Upkeep+0x8d0>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	4b91      	ldr	r3, [pc, #580]	@ (8007eec <ESP_Upkeep+0x8d0>)
 8007ca6:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8007ee8 <ESP_Upkeep+0x8cc>)
 8007caa:	2202      	movs	r2, #2
 8007cac:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007cae:	4b8c      	ldr	r3, [pc, #560]	@ (8007ee0 <ESP_Upkeep+0x8c4>)
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007cb4:	1d7b      	adds	r3, r7, #5
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d100      	bne.n	8007cbe <ESP_Upkeep+0x6a2>
 8007cbc:	e1e9      	b.n	8008092 <ESP_Upkeep+0xa76>
          EspState = ESP_STATE_NEXT_AT;
 8007cbe:	4b88      	ldr	r3, [pc, #544]	@ (8007ee0 <ESP_Upkeep+0x8c4>)
 8007cc0:	2205      	movs	r2, #5
 8007cc2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007cc4:	e1e5      	b.n	8008092 <ESP_Upkeep+0xa76>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007cc6:	4b89      	ldr	r3, [pc, #548]	@ (8007eec <ESP_Upkeep+0x8d0>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	4b87      	ldr	r3, [pc, #540]	@ (8007eec <ESP_Upkeep+0x8d0>)
 8007cd0:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007cd2:	4b86      	ldr	r3, [pc, #536]	@ (8007eec <ESP_Upkeep+0x8d0>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	001a      	movs	r2, r3
 8007cd8:	4b85      	ldr	r3, [pc, #532]	@ (8007ef0 <ESP_Upkeep+0x8d4>)
 8007cda:	5c9a      	ldrb	r2, [r3, r2]
 8007cdc:	4b81      	ldr	r3, [pc, #516]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007cde:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007ce0:	4b80      	ldr	r3, [pc, #512]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d102      	bne.n	8007cee <ESP_Upkeep+0x6d2>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007ce8:	4b7f      	ldr	r3, [pc, #508]	@ (8007ee8 <ESP_Upkeep+0x8cc>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007cee:	4b7d      	ldr	r3, [pc, #500]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b0e      	cmp	r3, #14
 8007cf4:	d102      	bne.n	8007cfc <ESP_Upkeep+0x6e0>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8007ee8 <ESP_Upkeep+0x8cc>)
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007cfc:	4b79      	ldr	r3, [pc, #484]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b0e      	cmp	r3, #14
 8007d02:	d006      	beq.n	8007d12 <ESP_Upkeep+0x6f6>
 8007d04:	4b77      	ldr	r3, [pc, #476]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d002      	beq.n	8007d12 <ESP_Upkeep+0x6f6>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007d0c:	4b76      	ldr	r3, [pc, #472]	@ (8007ee8 <ESP_Upkeep+0x8cc>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007d12:	4b74      	ldr	r3, [pc, #464]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b11      	cmp	r3, #17
 8007d18:	d102      	bne.n	8007d20 <ESP_Upkeep+0x704>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007d1a:	4b73      	ldr	r3, [pc, #460]	@ (8007ee8 <ESP_Upkeep+0x8cc>)
 8007d1c:	2205      	movs	r2, #5
 8007d1e:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(ATCommand == AT_SENDMAIL){
 8007d20:	4b70      	ldr	r3, [pc, #448]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b15      	cmp	r3, #21
 8007d26:	d102      	bne.n	8007d2e <ESP_Upkeep+0x712>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007d28:	4b6f      	ldr	r3, [pc, #444]	@ (8007ee8 <ESP_Upkeep+0x8cc>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	701a      	strb	r2, [r3, #0]
      }
#endif
      EspState = ESP_STATE_SEND;
 8007d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8007ee0 <ESP_Upkeep+0x8c4>)
 8007d30:	2204      	movs	r2, #4
 8007d32:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007d34:	4b6b      	ldr	r3, [pc, #428]	@ (8007ee4 <ESP_Upkeep+0x8c8>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b16      	cmp	r3, #22
 8007d3a:	d000      	beq.n	8007d3e <ESP_Upkeep+0x722>
 8007d3c:	e1ab      	b.n	8008096 <ESP_Upkeep+0xa7a>
        if(Mode == AT_MODE_SEND){
 8007d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8007ef4 <ESP_Upkeep+0x8d8>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d124      	bne.n	8007d90 <ESP_Upkeep+0x774>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007d46:	f00c fdbb 	bl	80148c0 <HAL_GetTick>
 8007d4a:	0003      	movs	r3, r0
 8007d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8007ef8 <ESP_Upkeep+0x8dc>)
 8007d4e:	189a      	adds	r2, r3, r2
 8007d50:	4b5a      	ldr	r3, [pc, #360]	@ (8007ebc <ESP_Upkeep+0x8a0>)
 8007d52:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007d54:	f7ff f966 	bl	8007024 <clearDMABuffer>
          stop = HAL_GetTick();
 8007d58:	f00c fdb2 	bl	80148c0 <HAL_GetTick>
 8007d5c:	0002      	movs	r2, r0
 8007d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8007ed4 <ESP_Upkeep+0x8b8>)
 8007d60:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007d62:	4b5c      	ldr	r3, [pc, #368]	@ (8007ed4 <ESP_Upkeep+0x8b8>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	4b5c      	ldr	r3, [pc, #368]	@ (8007ed8 <ESP_Upkeep+0x8bc>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	4a63      	ldr	r2, [pc, #396]	@ (8007efc <ESP_Upkeep+0x8e0>)
 8007d6e:	4964      	ldr	r1, [pc, #400]	@ (8007f00 <ESP_Upkeep+0x8e4>)
 8007d70:	2002      	movs	r0, #2
 8007d72:	f00c f82d 	bl	8013dd0 <CreateLine>
          ResetdBAmax();
 8007d76:	f006 f863 	bl	800de40 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007d7a:	f7fd f819 	bl	8004db0 <resetMaxMeasurementValues>
          showTime();
 8007d7e:	f001 fff5 	bl	8009d6c <showTime>
          ESPTransmitDone = true;
 8007d82:	4b53      	ldr	r3, [pc, #332]	@ (8007ed0 <ESP_Upkeep+0x8b4>)
 8007d84:	2201      	movs	r2, #1
 8007d86:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007d88:	4b55      	ldr	r3, [pc, #340]	@ (8007ee0 <ESP_Upkeep+0x8c4>)
 8007d8a:	220d      	movs	r2, #13
 8007d8c:	701a      	strb	r2, [r3, #0]
#endif
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007d8e:	e182      	b.n	8008096 <ESP_Upkeep+0xa7a>
        else if (Mode == AT_MODE_GETTIME) {
 8007d90:	4b58      	ldr	r3, [pc, #352]	@ (8007ef4 <ESP_Upkeep+0x8d8>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	d13a      	bne.n	8007e0e <ESP_Upkeep+0x7f2>
            setTime = false;
 8007d98:	4b5a      	ldr	r3, [pc, #360]	@ (8007f04 <ESP_Upkeep+0x8e8>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007d9e:	f002 f887 	bl	8009eb0 <calculateNextNTPTime>
 8007da2:	0002      	movs	r2, r0
 8007da4:	4b58      	ldr	r3, [pc, #352]	@ (8007f08 <ESP_Upkeep+0x8ec>)
 8007da6:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007da8:	4b57      	ldr	r3, [pc, #348]	@ (8007f08 <ESP_Upkeep+0x8ec>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a57      	ldr	r2, [pc, #348]	@ (8007f0c <ESP_Upkeep+0x8f0>)
 8007dae:	189a      	adds	r2, r3, r2
 8007db0:	4b55      	ldr	r3, [pc, #340]	@ (8007f08 <ESP_Upkeep+0x8ec>)
 8007db2:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007db4:	4b55      	ldr	r3, [pc, #340]	@ (8007f0c <ESP_Upkeep+0x8f0>)
 8007db6:	4a56      	ldr	r2, [pc, #344]	@ (8007f10 <ESP_Upkeep+0x8f4>)
 8007db8:	4951      	ldr	r1, [pc, #324]	@ (8007f00 <ESP_Upkeep+0x8e4>)
 8007dba:	2002      	movs	r0, #2
 8007dbc:	f00c f808 	bl	8013dd0 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007dc0:	4b54      	ldr	r3, [pc, #336]	@ (8007f14 <ESP_Upkeep+0x8f8>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8007ebc <ESP_Upkeep+0x8a0>)
 8007dc6:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007dc8:	f7ff f92c 	bl	8007024 <clearDMABuffer>
            stop = HAL_GetTick();
 8007dcc:	f00c fd78 	bl	80148c0 <HAL_GetTick>
 8007dd0:	0002      	movs	r2, r0
 8007dd2:	4b40      	ldr	r3, [pc, #256]	@ (8007ed4 <ESP_Upkeep+0x8b8>)
 8007dd4:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8007ed4 <ESP_Upkeep+0x8b8>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b3f      	ldr	r3, [pc, #252]	@ (8007ed8 <ESP_Upkeep+0x8bc>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	4a4d      	ldr	r2, [pc, #308]	@ (8007f18 <ESP_Upkeep+0x8fc>)
 8007de2:	4947      	ldr	r1, [pc, #284]	@ (8007f00 <ESP_Upkeep+0x8e4>)
 8007de4:	2002      	movs	r0, #2
 8007de6:	f00b fff3 	bl	8013dd0 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007dea:	f00c fd69 	bl	80148c0 <HAL_GetTick>
 8007dee:	0003      	movs	r3, r0
 8007df0:	4a4a      	ldr	r2, [pc, #296]	@ (8007f1c <ESP_Upkeep+0x900>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d804      	bhi.n	8007e00 <ESP_Upkeep+0x7e4>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007df6:	4b4a      	ldr	r3, [pc, #296]	@ (8007f20 <ESP_Upkeep+0x904>)
 8007df8:	4a4a      	ldr	r2, [pc, #296]	@ (8007f24 <ESP_Upkeep+0x908>)
 8007dfa:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007dfc:	f005 ff28 	bl	800dc50 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007e00:	4b37      	ldr	r3, [pc, #220]	@ (8007ee0 <ESP_Upkeep+0x8c4>)
 8007e02:	220d      	movs	r2, #13
 8007e04:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007e06:	4b3b      	ldr	r3, [pc, #236]	@ (8007ef4 <ESP_Upkeep+0x8d8>)
 8007e08:	2202      	movs	r2, #2
 8007e0a:	701a      	strb	r2, [r3, #0]
    break;
 8007e0c:	e143      	b.n	8008096 <ESP_Upkeep+0xa7a>
        else if (Mode == AT_MODE_MAIL) {
 8007e0e:	4b39      	ldr	r3, [pc, #228]	@ (8007ef4 <ESP_Upkeep+0x8d8>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b06      	cmp	r3, #6
 8007e14:	d111      	bne.n	8007e3a <ESP_Upkeep+0x81e>
            clearDMABuffer();
 8007e16:	f7ff f905 	bl	8007024 <clearDMABuffer>
            ESPTimeStamp = savedESPTimeStamp;
 8007e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8007f14 <ESP_Upkeep+0x8f8>)
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	4b27      	ldr	r3, [pc, #156]	@ (8007ebc <ESP_Upkeep+0x8a0>)
 8007e20:	601a      	str	r2, [r3, #0]
            sendpwremail = DONE;
 8007e22:	4b41      	ldr	r3, [pc, #260]	@ (8007f28 <ESP_Upkeep+0x90c>)
 8007e24:	2202      	movs	r2, #2
 8007e26:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_DEINIT;
 8007e28:	4b2d      	ldr	r3, [pc, #180]	@ (8007ee0 <ESP_Upkeep+0x8c4>)
 8007e2a:	220d      	movs	r2, #13
 8007e2c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007e2e:	4b31      	ldr	r3, [pc, #196]	@ (8007ef4 <ESP_Upkeep+0x8d8>)
 8007e30:	2202      	movs	r2, #2
 8007e32:	701a      	strb	r2, [r3, #0]
            EnabledConnectedDevices();
 8007e34:	f005 ff0c 	bl	800dc50 <EnabledConnectedDevices>
    break;
 8007e38:	e12d      	b.n	8008096 <ESP_Upkeep+0xa7a>
          EspState = ESP_STATE_RESET;
 8007e3a:	4b29      	ldr	r3, [pc, #164]	@ (8007ee0 <ESP_Upkeep+0x8c4>)
 8007e3c:	2209      	movs	r2, #9
 8007e3e:	701a      	strb	r2, [r3, #0]
    break;
 8007e40:	e129      	b.n	8008096 <ESP_Upkeep+0xa7a>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007e42:	4b3a      	ldr	r3, [pc, #232]	@ (8007f2c <ESP_Upkeep+0x910>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007e48:	4b39      	ldr	r3, [pc, #228]	@ (8007f30 <ESP_Upkeep+0x914>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f00d ffa9 	bl	8015da6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007e54:	2001      	movs	r0, #1
 8007e56:	f00c fd3d 	bl	80148d4 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007e5a:	2380      	movs	r3, #128	@ 0x80
 8007e5c:	011b      	lsls	r3, r3, #4
 8007e5e:	4835      	ldr	r0, [pc, #212]	@ (8007f34 <ESP_Upkeep+0x918>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	0019      	movs	r1, r3
 8007e64:	f00d ff9f 	bl	8015da6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f00c fd33 	bl	80148d4 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007e6e:	4b30      	ldr	r3, [pc, #192]	@ (8007f30 <ESP_Upkeep+0x914>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	2102      	movs	r1, #2
 8007e74:	0018      	movs	r0, r3
 8007e76:	f00d ff96 	bl	8015da6 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007e7a:	4b19      	ldr	r3, [pc, #100]	@ (8007ee0 <ESP_Upkeep+0x8c4>)
 8007e7c:	2209      	movs	r2, #9
 8007e7e:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007e80:	2001      	movs	r0, #1
 8007e82:	f00c fd27 	bl	80148d4 <HAL_Delay>
      ResetESPIndicator();
 8007e86:	f00a fda1 	bl	80129cc <ResetESPIndicator>
      Debug("ESP powered off.");
 8007e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8007f38 <ESP_Upkeep+0x91c>)
 8007e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8007f3c <ESP_Upkeep+0x920>)
 8007e8e:	0019      	movs	r1, r3
 8007e90:	2003      	movs	r0, #3
 8007e92:	f00b ff9d 	bl	8013dd0 <CreateLine>
      if (Check_USB_PowerOn() || userToggle) {
 8007e96:	f001 fe61 	bl	8009b5c <Check_USB_PowerOn>
 8007e9a:	1e03      	subs	r3, r0, #0
 8007e9c:	d103      	bne.n	8007ea6 <ESP_Upkeep+0x88a>
 8007e9e:	4b28      	ldr	r3, [pc, #160]	@ (8007f40 <ESP_Upkeep+0x924>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <ESP_Upkeep+0x88e>
        EnabledConnectedDevices();
 8007ea6:	f005 fed3 	bl	800dc50 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007eaa:	4b26      	ldr	r3, [pc, #152]	@ (8007f44 <ESP_Upkeep+0x928>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007eb0:	4b03      	ldr	r3, [pc, #12]	@ (8007ec0 <ESP_Upkeep+0x8a4>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]
      break;
 8007eb6:	e0f1      	b.n	800809c <ESP_Upkeep+0xa80>
 8007eb8:	20000034 	.word	0x20000034
 8007ebc:	20000694 	.word	0x20000694
 8007ec0:	20000690 	.word	0x20000690
 8007ec4:	0802b10c 	.word	0x0802b10c
 8007ec8:	0802a8f0 	.word	0x0802a8f0
 8007ecc:	0000c350 	.word	0x0000c350
 8007ed0:	200005b3 	.word	0x200005b3
 8007ed4:	200005b8 	.word	0x200005b8
 8007ed8:	200005b4 	.word	0x200005b4
 8007edc:	0802b148 	.word	0x0802b148
 8007ee0:	20000030 	.word	0x20000030
 8007ee4:	20000701 	.word	0x20000701
 8007ee8:	20000700 	.word	0x20000700
 8007eec:	2000068e 	.word	0x2000068e
 8007ef0:	20000684 	.word	0x20000684
 8007ef4:	20000702 	.word	0x20000702
 8007ef8:	0003a980 	.word	0x0003a980
 8007efc:	0802b178 	.word	0x0802b178
 8007f00:	0802a904 	.word	0x0802a904
 8007f04:	20000002 	.word	0x20000002
 8007f08:	20000698 	.word	0x20000698
 8007f0c:	00012686 	.word	0x00012686
 8007f10:	0802b190 	.word	0x0802b190
 8007f14:	2000002c 	.word	0x2000002c
 8007f18:	0802b1d4 	.word	0x0802b1d4
 8007f1c:	000061a7 	.word	0x000061a7
 8007f20:	20001114 	.word	0x20001114
 8007f24:	000061a8 	.word	0x000061a8
 8007f28:	200010f9 	.word	0x200010f9
 8007f2c:	200005ac 	.word	0x200005ac
 8007f30:	50001c00 	.word	0x50001c00
 8007f34:	50000800 	.word	0x50000800
 8007f38:	0802b1f4 	.word	0x0802b1f4
 8007f3c:	0802a954 	.word	0x0802a954
 8007f40:	20002152 	.word	0x20002152
 8007f44:	2000068f 	.word	0x2000068f

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007f48:	4b57      	ldr	r3, [pc, #348]	@ (80080a8 <ESP_Upkeep+0xa8c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f00b fee9 	bl	8013d24 <TimestampIsReached>
 8007f52:	1e03      	subs	r3, r0, #0
 8007f54:	d103      	bne.n	8007f5e <ESP_Upkeep+0x942>
 8007f56:	4b55      	ldr	r3, [pc, #340]	@ (80080ac <ESP_Upkeep+0xa90>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d047      	beq.n	8007fee <ESP_Upkeep+0x9d2>
        ESPTransmitDone = false;
 8007f5e:	4b54      	ldr	r3, [pc, #336]	@ (80080b0 <ESP_Upkeep+0xa94>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8007f64:	4b53      	ldr	r3, [pc, #332]	@ (80080b4 <ESP_Upkeep+0xa98>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d105      	bne.n	8007f78 <ESP_Upkeep+0x95c>
          InitIsDone = true;
 8007f6c:	4b52      	ldr	r3, [pc, #328]	@ (80080b8 <ESP_Upkeep+0xa9c>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007f72:	4b52      	ldr	r3, [pc, #328]	@ (80080bc <ESP_Upkeep+0xaa0>)
 8007f74:	220b      	movs	r2, #11
 8007f76:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8007f78:	4b4e      	ldr	r3, [pc, #312]	@ (80080b4 <ESP_Upkeep+0xa98>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d105      	bne.n	8007f8c <ESP_Upkeep+0x970>
          ConnectionMade = true;
 8007f80:	4b4f      	ldr	r3, [pc, #316]	@ (80080c0 <ESP_Upkeep+0xaa4>)
 8007f82:	2201      	movs	r2, #1
 8007f84:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007f86:	4b4d      	ldr	r3, [pc, #308]	@ (80080bc <ESP_Upkeep+0xaa0>)
 8007f88:	220b      	movs	r2, #11
 8007f8a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8007f8c:	4b49      	ldr	r3, [pc, #292]	@ (80080b4 <ESP_Upkeep+0xa98>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d102      	bne.n	8007f9a <ESP_Upkeep+0x97e>
          EspState = ESP_STATE_INIT;
 8007f94:	4b49      	ldr	r3, [pc, #292]	@ (80080bc <ESP_Upkeep+0xaa0>)
 8007f96:	2202      	movs	r2, #2
 8007f98:	701a      	strb	r2, [r3, #0]
        }
#ifdef USE_MAIL
        if(Mode == AT_MODE_MAIL){
 8007f9a:	4b46      	ldr	r3, [pc, #280]	@ (80080b4 <ESP_Upkeep+0xa98>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b06      	cmp	r3, #6
 8007fa0:	d102      	bne.n	8007fa8 <ESP_Upkeep+0x98c>
          EspState = ESP_STATE_CONFIG;
 8007fa2:	4b46      	ldr	r3, [pc, #280]	@ (80080bc <ESP_Upkeep+0xaa0>)
 8007fa4:	220e      	movs	r2, #14
 8007fa6:	701a      	strb	r2, [r3, #0]
        }
#endif
        if(Mode == AT_MODE_RECONFIG){
 8007fa8:	4b42      	ldr	r3, [pc, #264]	@ (80080b4 <ESP_Upkeep+0xa98>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d108      	bne.n	8007fc2 <ESP_Upkeep+0x9a6>
          EspState = ESP_STATE_CONFIG;
 8007fb0:	4b42      	ldr	r3, [pc, #264]	@ (80080bc <ESP_Upkeep+0xaa0>)
 8007fb2:	220e      	movs	r2, #14
 8007fb4:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8007fb6:	4a43      	ldr	r2, [pc, #268]	@ (80080c4 <ESP_Upkeep+0xaa8>)
 8007fb8:	4b43      	ldr	r3, [pc, #268]	@ (80080c8 <ESP_Upkeep+0xaac>)
 8007fba:	0019      	movs	r1, r3
 8007fbc:	2002      	movs	r0, #2
 8007fbe:	f00b ff07 	bl	8013dd0 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8007fc2:	4b3c      	ldr	r3, [pc, #240]	@ (80080b4 <ESP_Upkeep+0xa98>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d105      	bne.n	8007fd6 <ESP_Upkeep+0x9ba>
          EspState = ESP_STATE_MODE_SELECT;
 8007fca:	4b3c      	ldr	r3, [pc, #240]	@ (80080bc <ESP_Upkeep+0xaa0>)
 8007fcc:	220b      	movs	r2, #11
 8007fce:	701a      	strb	r2, [r3, #0]
          APtested = true;  // deze lijkt mij dubieus wordt in CWJAP gezet.
 8007fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80080cc <ESP_Upkeep+0xab0>)
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007fd6:	4b35      	ldr	r3, [pc, #212]	@ (80080ac <ESP_Upkeep+0xa90>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d020      	beq.n	8008020 <ESP_Upkeep+0xa04>
 8007fde:	4b35      	ldr	r3, [pc, #212]	@ (80080b4 <ESP_Upkeep+0xa98>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d01c      	beq.n	8008020 <ESP_Upkeep+0xa04>
          EspState = ESP_STATE_INIT;
 8007fe6:	4b35      	ldr	r3, [pc, #212]	@ (80080bc <ESP_Upkeep+0xaa0>)
 8007fe8:	2202      	movs	r2, #2
 8007fea:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007fec:	e018      	b.n	8008020 <ESP_Upkeep+0xa04>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8007fee:	f001 ff5f 	bl	8009eb0 <calculateNextNTPTime>
 8007ff2:	0002      	movs	r2, r0
 8007ff4:	4b36      	ldr	r3, [pc, #216]	@ (80080d0 <ESP_Upkeep+0xab4>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d94e      	bls.n	800809a <ESP_Upkeep+0xa7e>
        if(Mode == AT_MODE_SEND ) {
 8007ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80080b4 <ESP_Upkeep+0xa98>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d14a      	bne.n	800809a <ESP_Upkeep+0xa7e>
           Mode = AT_MODE_GETTIME;
 8008004:	4b2b      	ldr	r3, [pc, #172]	@ (80080b4 <ESP_Upkeep+0xa98>)
 8008006:	2205      	movs	r2, #5
 8008008:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 800800a:	4b2c      	ldr	r3, [pc, #176]	@ (80080bc <ESP_Upkeep+0xaa0>)
 800800c:	2202      	movs	r2, #2
 800800e:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8008010:	4b25      	ldr	r3, [pc, #148]	@ (80080a8 <ESP_Upkeep+0xa8c>)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	4b2f      	ldr	r3, [pc, #188]	@ (80080d4 <ESP_Upkeep+0xab8>)
 8008016:	601a      	str	r2, [r3, #0]
           setTime = true;
 8008018:	4b2f      	ldr	r3, [pc, #188]	@ (80080d8 <ESP_Upkeep+0xabc>)
 800801a:	2201      	movs	r2, #1
 800801c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800801e:	e03c      	b.n	800809a <ESP_Upkeep+0xa7e>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008020:	46c0      	nop			@ (mov r8, r8)
      break;
 8008022:	e03a      	b.n	800809a <ESP_Upkeep+0xa7e>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8008024:	4b2d      	ldr	r3, [pc, #180]	@ (80080dc <ESP_Upkeep+0xac0>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2201      	movs	r2, #1
 800802a:	4053      	eors	r3, r2
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d008      	beq.n	8008044 <ESP_Upkeep+0xa28>
        Info("Do nothing until reset");
 8008032:	4a24      	ldr	r2, [pc, #144]	@ (80080c4 <ESP_Upkeep+0xaa8>)
 8008034:	4b24      	ldr	r3, [pc, #144]	@ (80080c8 <ESP_Upkeep+0xaac>)
 8008036:	0019      	movs	r1, r3
 8008038:	2002      	movs	r0, #2
 800803a:	f00b fec9 	bl	8013dd0 <CreateLine>
        msgdone = true;
 800803e:	4b27      	ldr	r3, [pc, #156]	@ (80080dc <ESP_Upkeep+0xac0>)
 8008040:	2201      	movs	r2, #1
 8008042:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8008044:	f01b f810 	bl	8023068 <GetUsbRxPointer>
 8008048:	0003      	movs	r3, r0
 800804a:	0018      	movs	r0, r3
 800804c:	f000 f98c 	bl	8008368 <Process_PC_Config>
      break;
 8008050:	e024      	b.n	800809c <ESP_Upkeep+0xa80>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8008052:	4a23      	ldr	r2, [pc, #140]	@ (80080e0 <ESP_Upkeep+0xac4>)
 8008054:	4b23      	ldr	r3, [pc, #140]	@ (80080e4 <ESP_Upkeep+0xac8>)
 8008056:	0019      	movs	r1, r3
 8008058:	2001      	movs	r0, #1
 800805a:	f00b feb9 	bl	8013dd0 <CreateLine>
      EspState = ESP_STATE_INIT;
 800805e:	4b17      	ldr	r3, [pc, #92]	@ (80080bc <ESP_Upkeep+0xaa0>)
 8008060:	2202      	movs	r2, #2
 8008062:	701a      	strb	r2, [r3, #0]
      break;
 8008064:	e01a      	b.n	800809c <ESP_Upkeep+0xa80>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8008066:	4a20      	ldr	r2, [pc, #128]	@ (80080e8 <ESP_Upkeep+0xacc>)
 8008068:	4b1e      	ldr	r3, [pc, #120]	@ (80080e4 <ESP_Upkeep+0xac8>)
 800806a:	0019      	movs	r1, r3
 800806c:	2001      	movs	r0, #1
 800806e:	f00b feaf 	bl	8013dd0 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8008072:	4b12      	ldr	r3, [pc, #72]	@ (80080bc <ESP_Upkeep+0xaa0>)
 8008074:	2207      	movs	r2, #7
 8008076:	701a      	strb	r2, [r3, #0]
      break;
 8008078:	e010      	b.n	800809c <ESP_Upkeep+0xa80>
      break;
 800807a:	46c0      	nop			@ (mov r8, r8)
 800807c:	e00e      	b.n	800809c <ESP_Upkeep+0xa80>
        break;
 800807e:	46c0      	nop			@ (mov r8, r8)
 8008080:	e00c      	b.n	800809c <ESP_Upkeep+0xa80>
      break;
 8008082:	46c0      	nop			@ (mov r8, r8)
 8008084:	e00a      	b.n	800809c <ESP_Upkeep+0xa80>
        break;
 8008086:	46c0      	nop			@ (mov r8, r8)
 8008088:	e008      	b.n	800809c <ESP_Upkeep+0xa80>
    break;
 800808a:	46c0      	nop			@ (mov r8, r8)
 800808c:	e006      	b.n	800809c <ESP_Upkeep+0xa80>
    break;
 800808e:	46c0      	nop			@ (mov r8, r8)
 8008090:	e004      	b.n	800809c <ESP_Upkeep+0xa80>
      break;
 8008092:	46c0      	nop			@ (mov r8, r8)
 8008094:	e002      	b.n	800809c <ESP_Upkeep+0xa80>
    break;
 8008096:	46c0      	nop			@ (mov r8, r8)
 8008098:	e000      	b.n	800809c <ESP_Upkeep+0xa80>
      break;
 800809a:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 800809c:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <ESP_Upkeep+0xaa0>)
 800809e:	781b      	ldrb	r3, [r3, #0]
}
 80080a0:	0018      	movs	r0, r3
 80080a2:	46bd      	mov	sp, r7
 80080a4:	b002      	add	sp, #8
 80080a6:	bdb0      	pop	{r4, r5, r7, pc}
 80080a8:	20000694 	.word	0x20000694
 80080ac:	200005af 	.word	0x200005af
 80080b0:	200005b3 	.word	0x200005b3
 80080b4:	20000702 	.word	0x20000702
 80080b8:	200005ad 	.word	0x200005ad
 80080bc:	20000030 	.word	0x20000030
 80080c0:	200005b0 	.word	0x200005b0
 80080c4:	0802b208 	.word	0x0802b208
 80080c8:	0802a904 	.word	0x0802a904
 80080cc:	200005b1 	.word	0x200005b1
 80080d0:	20000698 	.word	0x20000698
 80080d4:	2000002c 	.word	0x2000002c
 80080d8:	20000002 	.word	0x20000002
 80080dc:	200005b2 	.word	0x200005b2
 80080e0:	0802b220 	.word	0x0802b220
 80080e4:	0802a8f0 	.word	0x0802a8f0
 80080e8:	0802b234 	.word	0x0802b234

080080ec <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80080f4:	4b12      	ldr	r3, [pc, #72]	@ (8008140 <I2CSensors_Init+0x54>)
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 80080fa:	4a12      	ldr	r2, [pc, #72]	@ (8008144 <I2CSensors_Init+0x58>)
 80080fc:	4b12      	ldr	r3, [pc, #72]	@ (8008148 <I2CSensors_Init+0x5c>)
 80080fe:	0011      	movs	r1, r2
 8008100:	0018      	movs	r0, r3
 8008102:	f00c f89b 	bl	801423c <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 8008106:	4a0f      	ldr	r2, [pc, #60]	@ (8008144 <I2CSensors_Init+0x58>)
 8008108:	4b0f      	ldr	r3, [pc, #60]	@ (8008148 <I2CSensors_Init+0x5c>)
 800810a:	0011      	movs	r1, r2
 800810c:	0018      	movs	r0, r3
 800810e:	f008 fe1f 	bl	8010d50 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8008112:	4a0e      	ldr	r2, [pc, #56]	@ (800814c <I2CSensors_Init+0x60>)
 8008114:	490b      	ldr	r1, [pc, #44]	@ (8008144 <I2CSensors_Init+0x58>)
 8008116:	4b0c      	ldr	r3, [pc, #48]	@ (8008148 <I2CSensors_Init+0x5c>)
 8008118:	0018      	movs	r0, r3
 800811a:	f002 fec3 	bl	800aea4 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 800811e:	4a0c      	ldr	r2, [pc, #48]	@ (8008150 <I2CSensors_Init+0x64>)
 8008120:	4b0c      	ldr	r3, [pc, #48]	@ (8008154 <I2CSensors_Init+0x68>)
 8008122:	0011      	movs	r1, r2
 8008124:	0018      	movs	r0, r3
 8008126:	f003 fa99 	bl	800b65c <BMP_Init>
//    BMP_Init(ReadI2CDirect, WriteI2CDirect);
    ENS_Init(ReadI2CMem, WriteI2CMem);
 800812a:	4a09      	ldr	r2, [pc, #36]	@ (8008150 <I2CSensors_Init+0x64>)
 800812c:	4b09      	ldr	r3, [pc, #36]	@ (8008154 <I2CSensors_Init+0x68>)
 800812e:	0011      	movs	r1, r2
 8008130:	0018      	movs	r0, r3
 8008132:	f7fb fd1f 	bl	8003b74 <ENS_Init>
}
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	46bd      	mov	sp, r7
 800813a:	b002      	add	sp, #8
 800813c:	bd80      	pop	{r7, pc}
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	2000093c 	.word	0x2000093c
 8008144:	08008211 	.word	0x08008211
 8008148:	080081b9 	.word	0x080081b9
 800814c:	08008159 	.word	0x08008159
 8008150:	080082e9 	.word	0x080082e9
 8008154:	08008265 	.word	0x08008265

08008158 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815a:	b087      	sub	sp, #28
 800815c:	af02      	add	r7, sp, #8
 800815e:	6039      	str	r1, [r7, #0]
 8008160:	0011      	movs	r1, r2
 8008162:	1dfb      	adds	r3, r7, #7
 8008164:	1c02      	adds	r2, r0, #0
 8008166:	701a      	strb	r2, [r3, #0]
 8008168:	1dbb      	adds	r3, r7, #6
 800816a:	1c0a      	adds	r2, r1, #0
 800816c:	701a      	strb	r2, [r3, #0]
//  Debug("ReadI2CDirect address 0x%02X", address);
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, ((address << 1)+1), buffer, nrBytes, 1000);
 800816e:	4b11      	ldr	r3, [pc, #68]	@ (80081b4 <ReadI2CDirect+0x5c>)
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	1dfb      	adds	r3, r7, #7
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	b29b      	uxth	r3, r3
 8008178:	18db      	adds	r3, r3, r3
 800817a:	b29b      	uxth	r3, r3
 800817c:	3301      	adds	r3, #1
 800817e:	b299      	uxth	r1, r3
 8008180:	1dbb      	adds	r3, r7, #6
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	b29d      	uxth	r5, r3
 8008186:	260f      	movs	r6, #15
 8008188:	19bc      	adds	r4, r7, r6
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	23fa      	movs	r3, #250	@ 0xfa
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	002b      	movs	r3, r5
 8008194:	f00d ffde 	bl	8016154 <HAL_I2C_Master_Receive>
 8008198:	0003      	movs	r3, r0
 800819a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800819c:	19bb      	adds	r3, r7, r6
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <ReadI2CDirect+0x50>
        return false;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e000      	b.n	80081aa <ReadI2CDirect+0x52>
    }
    return true;
 80081a8:	2301      	movs	r3, #1
}
 80081aa:	0018      	movs	r0, r3
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b005      	add	sp, #20
 80081b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081b2:	46c0      	nop			@ (mov r8, r8)
 80081b4:	2000093c 	.word	0x2000093c

080081b8 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80081b8:	b5b0      	push	{r4, r5, r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6039      	str	r1, [r7, #0]
 80081c0:	0011      	movs	r1, r2
 80081c2:	1dfb      	adds	r3, r7, #7
 80081c4:	1c02      	adds	r2, r0, #0
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	1dbb      	adds	r3, r7, #6
 80081ca:	1c0a      	adds	r2, r1, #0
 80081cc:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, ((address << 1)+1), buffer, nrBytes);
 80081ce:	4b0f      	ldr	r3, [pc, #60]	@ (800820c <ReadI2C+0x54>)
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	1dfb      	adds	r3, r7, #7
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	18db      	adds	r3, r3, r3
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3301      	adds	r3, #1
 80081de:	b299      	uxth	r1, r3
 80081e0:	1dbb      	adds	r3, r7, #6
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	250f      	movs	r5, #15
 80081e8:	197c      	adds	r4, r7, r5
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	f00e f9c0 	bl	8016570 <HAL_I2C_Master_Receive_DMA>
 80081f0:	0003      	movs	r3, r0
 80081f2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80081f4:	197b      	adds	r3, r7, r5
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <ReadI2C+0x48>
        return false;
 80081fc:	2300      	movs	r3, #0
 80081fe:	e000      	b.n	8008202 <ReadI2C+0x4a>
    }
    return true;
 8008200:	2301      	movs	r3, #1
}
 8008202:	0018      	movs	r0, r3
 8008204:	46bd      	mov	sp, r7
 8008206:	b004      	add	sp, #16
 8008208:	bdb0      	pop	{r4, r5, r7, pc}
 800820a:	46c0      	nop			@ (mov r8, r8)
 800820c:	2000093c 	.word	0x2000093c

08008210 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008210:	b5b0      	push	{r4, r5, r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6039      	str	r1, [r7, #0]
 8008218:	0011      	movs	r1, r2
 800821a:	1dfb      	adds	r3, r7, #7
 800821c:	1c02      	adds	r2, r0, #0
 800821e:	701a      	strb	r2, [r3, #0]
 8008220:	1dbb      	adds	r3, r7, #6
 8008222:	1c0a      	adds	r2, r1, #0
 8008224:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8008226:	4b0e      	ldr	r3, [pc, #56]	@ (8008260 <WriteI2C+0x50>)
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	1dfb      	adds	r3, r7, #7
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	18db      	adds	r3, r3, r3
 8008232:	b299      	uxth	r1, r3
 8008234:	1dbb      	adds	r3, r7, #6
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	b29b      	uxth	r3, r3
 800823a:	250f      	movs	r5, #15
 800823c:	197c      	adds	r4, r7, r5
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	f00e f890 	bl	8016364 <HAL_I2C_Master_Transmit_DMA>
 8008244:	0003      	movs	r3, r0
 8008246:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008248:	197b      	adds	r3, r7, r5
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <WriteI2C+0x44>
        return false;
 8008250:	2300      	movs	r3, #0
 8008252:	e000      	b.n	8008256 <WriteI2C+0x46>
    }
    return true;
 8008254:	2301      	movs	r3, #1
}
 8008256:	0018      	movs	r0, r3
 8008258:	46bd      	mov	sp, r7
 800825a:	b004      	add	sp, #16
 800825c:	bdb0      	pop	{r4, r5, r7, pc}
 800825e:	46c0      	nop			@ (mov r8, r8)
 8008260:	2000093c 	.word	0x2000093c

08008264 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008266:	b08b      	sub	sp, #44	@ 0x2c
 8008268:	af04      	add	r7, sp, #16
 800826a:	0004      	movs	r4, r0
 800826c:	0008      	movs	r0, r1
 800826e:	0011      	movs	r1, r2
 8008270:	607b      	str	r3, [r7, #4]
 8008272:	250f      	movs	r5, #15
 8008274:	197b      	adds	r3, r7, r5
 8008276:	1c22      	adds	r2, r4, #0
 8008278:	701a      	strb	r2, [r3, #0]
 800827a:	260c      	movs	r6, #12
 800827c:	19bb      	adds	r3, r7, r6
 800827e:	1c02      	adds	r2, r0, #0
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	230a      	movs	r3, #10
 8008284:	18fb      	adds	r3, r7, r3
 8008286:	1c0a      	adds	r2, r1, #0
 8008288:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, ((address << 1)+1), MemAddress, MemSize, buffer, nrBytes,1000);
 800828a:	4b16      	ldr	r3, [pc, #88]	@ (80082e4 <ReadI2CMem+0x80>)
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	197b      	adds	r3, r7, r5
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	18db      	adds	r3, r3, r3
 8008296:	b29b      	uxth	r3, r3
 8008298:	3301      	adds	r3, #1
 800829a:	b299      	uxth	r1, r3
 800829c:	2217      	movs	r2, #23
 800829e:	18bc      	adds	r4, r7, r2
 80082a0:	230a      	movs	r3, #10
 80082a2:	18fb      	adds	r3, r7, r3
 80082a4:	881d      	ldrh	r5, [r3, #0]
 80082a6:	19bb      	adds	r3, r7, r6
 80082a8:	881a      	ldrh	r2, [r3, #0]
 80082aa:	23fa      	movs	r3, #250	@ 0xfa
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	9302      	str	r3, [sp, #8]
 80082b0:	2328      	movs	r3, #40	@ 0x28
 80082b2:	2608      	movs	r6, #8
 80082b4:	199b      	adds	r3, r3, r6
 80082b6:	19db      	adds	r3, r3, r7
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	002b      	movs	r3, r5
 80082c2:	f00e fb89 	bl	80169d8 <HAL_I2C_Mem_Read>
 80082c6:	0003      	movs	r3, r0
 80082c8:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80082ca:	2217      	movs	r2, #23
 80082cc:	18bb      	adds	r3, r7, r2
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <ReadI2CMem+0x74>
     return false;
 80082d4:	2300      	movs	r3, #0
 80082d6:	e000      	b.n	80082da <ReadI2CMem+0x76>
   }
   return true;
 80082d8:	2301      	movs	r3, #1
}
 80082da:	0018      	movs	r0, r3
 80082dc:	46bd      	mov	sp, r7
 80082de:	b007      	add	sp, #28
 80082e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e2:	46c0      	nop			@ (mov r8, r8)
 80082e4:	2000093c 	.word	0x2000093c

080082e8 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80082e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ea:	b08b      	sub	sp, #44	@ 0x2c
 80082ec:	af04      	add	r7, sp, #16
 80082ee:	0004      	movs	r4, r0
 80082f0:	0008      	movs	r0, r1
 80082f2:	0011      	movs	r1, r2
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	250f      	movs	r5, #15
 80082f8:	197b      	adds	r3, r7, r5
 80082fa:	1c22      	adds	r2, r4, #0
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	260c      	movs	r6, #12
 8008300:	19bb      	adds	r3, r7, r6
 8008302:	1c02      	adds	r2, r0, #0
 8008304:	801a      	strh	r2, [r3, #0]
 8008306:	230a      	movs	r3, #10
 8008308:	18fb      	adds	r3, r7, r3
 800830a:	1c0a      	adds	r2, r1, #0
 800830c:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,1000);  // de dma verwijderd 16-8-2025
 800830e:	4b15      	ldr	r3, [pc, #84]	@ (8008364 <WriteI2CMem+0x7c>)
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	197b      	adds	r3, r7, r5
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	18db      	adds	r3, r3, r3
 800831a:	b299      	uxth	r1, r3
 800831c:	2217      	movs	r2, #23
 800831e:	18bc      	adds	r4, r7, r2
 8008320:	230a      	movs	r3, #10
 8008322:	18fb      	adds	r3, r7, r3
 8008324:	881d      	ldrh	r5, [r3, #0]
 8008326:	19bb      	adds	r3, r7, r6
 8008328:	881a      	ldrh	r2, [r3, #0]
 800832a:	23fa      	movs	r3, #250	@ 0xfa
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	2328      	movs	r3, #40	@ 0x28
 8008332:	2608      	movs	r6, #8
 8008334:	199b      	adds	r3, r3, r6
 8008336:	19db      	adds	r3, r3, r7
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	002b      	movs	r3, r5
 8008342:	f00e fa1b 	bl	801677c <HAL_I2C_Mem_Write>
 8008346:	0003      	movs	r3, r0
 8008348:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 800834a:	2217      	movs	r2, #23
 800834c:	18bb      	adds	r3, r7, r2
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <WriteI2CMem+0x70>
     return false;
 8008354:	2300      	movs	r3, #0
 8008356:	e000      	b.n	800835a <WriteI2CMem+0x72>
   }
   return true;
 8008358:	2301      	movs	r3, #1
}
 800835a:	0018      	movs	r0, r3
 800835c:	46bd      	mov	sp, r7
 800835e:	b007      	add	sp, #28
 8008360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008362:	46c0      	nop			@ (mov r8, r8)
 8008364:	2000093c 	.word	0x2000093c

08008368 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8008368:	b590      	push	{r4, r7, lr}
 800836a:	b0c3      	sub	sp, #268	@ 0x10c
 800836c:	af3e      	add	r7, sp, #248	@ 0xf8
 800836e:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8008370:	f01a fe9a 	bl	80230a8 <GetUsbRxDataSize>
 8008374:	0003      	movs	r3, r0
 8008376:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b05      	cmp	r3, #5
 800837c:	d972      	bls.n	8008464 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2123      	movs	r1, #35	@ 0x23
 8008382:	0018      	movs	r0, r3
 8008384:	f01e f89e 	bl	80264c4 <strchr>
 8008388:	0003      	movs	r3, r0
 800838a:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d066      	beq.n	8008460 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	785a      	ldrb	r2, [r3, #1]
 8008396:	4b35      	ldr	r3, [pc, #212]	@ (800846c <Process_PC_Config+0x104>)
 8008398:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	789a      	ldrb	r2, [r3, #2]
 800839e:	4b33      	ldr	r3, [pc, #204]	@ (800846c <Process_PC_Config+0x104>)
 80083a0:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80083a2:	4b32      	ldr	r3, [pc, #200]	@ (800846c <Process_PC_Config+0x104>)
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	3305      	adds	r3, #5
 80083a8:	001a      	movs	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d352      	bcc.n	8008456 <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	1cd9      	adds	r1, r3, #3
 80083b4:	4b2d      	ldr	r3, [pc, #180]	@ (800846c <Process_PC_Config+0x104>)
 80083b6:	785b      	ldrb	r3, [r3, #1]
 80083b8:	001a      	movs	r2, r3
 80083ba:	4b2d      	ldr	r3, [pc, #180]	@ (8008470 <Process_PC_Config+0x108>)
 80083bc:	0018      	movs	r0, r3
 80083be:	f01e f955 	bl	802666c <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80083c2:	4b2a      	ldr	r3, [pc, #168]	@ (800846c <Process_PC_Config+0x104>)
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	3303      	adds	r3, #3
 80083c8:	001a      	movs	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	189b      	adds	r3, r3, r2
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	b21b      	sxth	r3, r3
 80083d2:	021b      	lsls	r3, r3, #8
 80083d4:	b21a      	sxth	r2, r3
 80083d6:	4b25      	ldr	r3, [pc, #148]	@ (800846c <Process_PC_Config+0x104>)
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	3304      	adds	r3, #4
 80083dc:	68b9      	ldr	r1, [r7, #8]
 80083de:	18cb      	adds	r3, r1, r3
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	b21b      	sxth	r3, r3
 80083e4:	4313      	orrs	r3, r2
 80083e6:	b21b      	sxth	r3, r3
 80083e8:	b299      	uxth	r1, r3
 80083ea:	4a20      	ldr	r2, [pc, #128]	@ (800846c <Process_PC_Config+0x104>)
 80083ec:	2381      	movs	r3, #129	@ 0x81
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80083f2:	4a1e      	ldr	r2, [pc, #120]	@ (800846c <Process_PC_Config+0x104>)
 80083f4:	2381      	movs	r3, #129	@ 0x81
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	5ad4      	ldrh	r4, [r2, r3]
 80083fa:	4b1c      	ldr	r3, [pc, #112]	@ (800846c <Process_PC_Config+0x104>)
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	3303      	adds	r3, #3
 8008400:	b29a      	uxth	r2, r3
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	0011      	movs	r1, r2
 8008406:	0018      	movs	r0, r3
 8008408:	f000 faa2 	bl	8008950 <CRC16_ARC>
 800840c:	0003      	movs	r3, r0
 800840e:	429c      	cmp	r4, r3
 8008410:	d007      	beq.n	8008422 <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8008412:	4b16      	ldr	r3, [pc, #88]	@ (800846c <Process_PC_Config+0x104>)
 8008414:	785a      	ldrb	r2, [r3, #1]
 8008416:	4b16      	ldr	r3, [pc, #88]	@ (8008470 <Process_PC_Config+0x108>)
 8008418:	0019      	movs	r1, r3
 800841a:	2001      	movs	r0, #1
 800841c:	f000 fa46 	bl	80088ac <Create_Message>
 8008420:	e016      	b.n	8008450 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8008422:	4c12      	ldr	r4, [pc, #72]	@ (800846c <Process_PC_Config+0x104>)
 8008424:	466b      	mov	r3, sp
 8008426:	0018      	movs	r0, r3
 8008428:	0023      	movs	r3, r4
 800842a:	3310      	adds	r3, #16
 800842c:	22f4      	movs	r2, #244	@ 0xf4
 800842e:	0019      	movs	r1, r3
 8008430:	f01e f91c 	bl	802666c <memcpy>
 8008434:	6820      	ldr	r0, [r4, #0]
 8008436:	6861      	ldr	r1, [r4, #4]
 8008438:	68a2      	ldr	r2, [r4, #8]
 800843a:	68e3      	ldr	r3, [r4, #12]
 800843c:	f000 f81a 	bl	8008474 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8008440:	4b0a      	ldr	r3, [pc, #40]	@ (800846c <Process_PC_Config+0x104>)
 8008442:	7818      	ldrb	r0, [r3, #0]
 8008444:	4b09      	ldr	r3, [pc, #36]	@ (800846c <Process_PC_Config+0x104>)
 8008446:	785a      	ldrb	r2, [r3, #1]
 8008448:	4b09      	ldr	r3, [pc, #36]	@ (8008470 <Process_PC_Config+0x108>)
 800844a:	0019      	movs	r1, r3
 800844c:	f000 fa2e 	bl	80088ac <Create_Message>
                }
                ResetUsbRxDataSize();
 8008450:	f01a fe12 	bl	8023078 <ResetUsbRxDataSize>
                return;
 8008454:	e006      	b.n	8008464 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	0018      	movs	r0, r3
 800845a:	f01a fe2f 	bl	80230bc <GetUsbRxNextChunk>
 800845e:	e001      	b.n	8008464 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 8008460:	f01a fe0a 	bl	8023078 <ResetUsbRxDataSize>
        }
    }
}
 8008464:	46bd      	mov	sp, r7
 8008466:	b005      	add	sp, #20
 8008468:	bd90      	pop	{r4, r7, pc}
 800846a:	46c0      	nop			@ (mov r8, r8)
 800846c:	20000940 	.word	0x20000940
 8008470:	20000942 	.word	0x20000942

08008474 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8008474:	b084      	sub	sp, #16
 8008476:	b5b0      	push	{r4, r5, r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	2518      	movs	r5, #24
 800847e:	197c      	adds	r4, r7, r5
 8008480:	6020      	str	r0, [r4, #0]
 8008482:	6061      	str	r1, [r4, #4]
 8008484:	60a2      	str	r2, [r4, #8]
 8008486:	60e3      	str	r3, [r4, #12]
  switch (msg.Command)
 8008488:	197b      	adds	r3, r7, r5
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2bfe      	cmp	r3, #254	@ 0xfe
 800848e:	d900      	bls.n	8008492 <ProcessCmd+0x1e>
 8008490:	e202      	b.n	8008898 <ProcessCmd+0x424>
 8008492:	009a      	lsls	r2, r3, #2
 8008494:	4bdc      	ldr	r3, [pc, #880]	@ (8008808 <ProcessCmd+0x394>)
 8008496:	18d3      	adds	r3, r2, r3
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	469f      	mov	pc, r3
    {
        case BoxConfigCmd:  // 0
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800849c:	2118      	movs	r1, #24
 800849e:	187b      	adds	r3, r7, r1
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	001a      	movs	r2, r3
 80084a4:	187b      	adds	r3, r7, r1
 80084a6:	1c99      	adds	r1, r3, #2
 80084a8:	48d8      	ldr	r0, [pc, #864]	@ (800880c <ProcessCmd+0x398>)
 80084aa:	230c      	movs	r3, #12
 80084ac:	f003 fdc6 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80084b0:	e1f2      	b.n	8008898 <ProcessCmd+0x424>
        case TempConfigCmd:  // 1
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80084b2:	2118      	movs	r1, #24
 80084b4:	187b      	adds	r3, r7, r1
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	001a      	movs	r2, r3
 80084ba:	187b      	adds	r3, r7, r1
 80084bc:	1c99      	adds	r1, r3, #2
 80084be:	48d4      	ldr	r0, [pc, #848]	@ (8008810 <ProcessCmd+0x39c>)
 80084c0:	230c      	movs	r3, #12
 80084c2:	f003 fdbb 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80084c6:	e1e7      	b.n	8008898 <ProcessCmd+0x424>
        case HumidConfigCmd:  // 2
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80084c8:	2118      	movs	r1, #24
 80084ca:	187b      	adds	r3, r7, r1
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	001a      	movs	r2, r3
 80084d0:	187b      	adds	r3, r7, r1
 80084d2:	1c99      	adds	r1, r3, #2
 80084d4:	48cf      	ldr	r0, [pc, #828]	@ (8008814 <ProcessCmd+0x3a0>)
 80084d6:	230c      	movs	r3, #12
 80084d8:	f003 fdb0 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80084dc:	e1dc      	b.n	8008898 <ProcessCmd+0x424>
        case NOxIndexConfigCmd:  // 3
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80084de:	2118      	movs	r1, #24
 80084e0:	187b      	adds	r3, r7, r1
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	001a      	movs	r2, r3
 80084e6:	187b      	adds	r3, r7, r1
 80084e8:	1c99      	adds	r1, r3, #2
 80084ea:	48cb      	ldr	r0, [pc, #812]	@ (8008818 <ProcessCmd+0x3a4>)
 80084ec:	230c      	movs	r3, #12
 80084ee:	f003 fda5 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80084f2:	e1d1      	b.n	8008898 <ProcessCmd+0x424>
        case VocIndexConfigCmd:  // 4
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80084f4:	2118      	movs	r1, #24
 80084f6:	187b      	adds	r3, r7, r1
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	001a      	movs	r2, r3
 80084fc:	187b      	adds	r3, r7, r1
 80084fe:	1c99      	adds	r1, r3, #2
 8008500:	48c6      	ldr	r0, [pc, #792]	@ (800881c <ProcessCmd+0x3a8>)
 8008502:	230c      	movs	r3, #12
 8008504:	f003 fd9a 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008508:	e1c6      	b.n	8008898 <ProcessCmd+0x424>
        case dBAConfigCmd: // 5 was 6 will be dBAConfigCMD
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800850a:	2118      	movs	r1, #24
 800850c:	187b      	adds	r3, r7, r1
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	001a      	movs	r2, r3
 8008512:	187b      	adds	r3, r7, r1
 8008514:	1c99      	adds	r1, r3, #2
 8008516:	48c2      	ldr	r0, [pc, #776]	@ (8008820 <ProcessCmd+0x3ac>)
 8008518:	230c      	movs	r3, #12
 800851a:	f003 fd8f 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 800851e:	e1bb      	b.n	8008898 <ProcessCmd+0x424>
        case dBcConfigCmd:  // 6
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008520:	2118      	movs	r1, #24
 8008522:	187b      	adds	r3, r7, r1
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	001a      	movs	r2, r3
 8008528:	187b      	adds	r3, r7, r1
 800852a:	1c99      	adds	r1, r3, #2
 800852c:	48bd      	ldr	r0, [pc, #756]	@ (8008824 <ProcessCmd+0x3b0>)
 800852e:	230c      	movs	r3, #12
 8008530:	f003 fd84 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008534:	e1b0      	b.n	8008898 <ProcessCmd+0x424>
        case PM2ConfigCmd:  // 7
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008536:	2118      	movs	r1, #24
 8008538:	187b      	adds	r3, r7, r1
 800853a:	785b      	ldrb	r3, [r3, #1]
 800853c:	001a      	movs	r2, r3
 800853e:	187b      	adds	r3, r7, r1
 8008540:	1c99      	adds	r1, r3, #2
 8008542:	48b9      	ldr	r0, [pc, #740]	@ (8008828 <ProcessCmd+0x3b4>)
 8008544:	230c      	movs	r3, #12
 8008546:	f003 fd79 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 800854a:	e1a5      	b.n	8008898 <ProcessCmd+0x424>
        case PM10ConfigCmd:  // 8
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800854c:	2118      	movs	r1, #24
 800854e:	187b      	adds	r3, r7, r1
 8008550:	785b      	ldrb	r3, [r3, #1]
 8008552:	001a      	movs	r2, r3
 8008554:	187b      	adds	r3, r7, r1
 8008556:	1c99      	adds	r1, r3, #2
 8008558:	48b4      	ldr	r0, [pc, #720]	@ (800882c <ProcessCmd+0x3b8>)
 800855a:	230c      	movs	r3, #12
 800855c:	f003 fd6e 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008560:	e19a      	b.n	8008898 <ProcessCmd+0x424>
        case BatVoltConfigCmd:  // 9
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008562:	2118      	movs	r1, #24
 8008564:	187b      	adds	r3, r7, r1
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	001a      	movs	r2, r3
 800856a:	187b      	adds	r3, r7, r1
 800856c:	1c99      	adds	r1, r3, #2
 800856e:	48b0      	ldr	r0, [pc, #704]	@ (8008830 <ProcessCmd+0x3bc>)
 8008570:	230c      	movs	r3, #12
 8008572:	f003 fd63 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008576:	e18f      	b.n	8008898 <ProcessCmd+0x424>
        case SolVoltConfigCmd:  // 10
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008578:	2118      	movs	r1, #24
 800857a:	187b      	adds	r3, r7, r1
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	001a      	movs	r2, r3
 8008580:	187b      	adds	r3, r7, r1
 8008582:	1c99      	adds	r1, r3, #2
 8008584:	48ab      	ldr	r0, [pc, #684]	@ (8008834 <ProcessCmd+0x3c0>)
 8008586:	230c      	movs	r3, #12
 8008588:	f003 fd58 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 800858c:	e184      	b.n	8008898 <ProcessCmd+0x424>
        case CustomNameConfigCmd:  // 12
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 800858e:	2118      	movs	r1, #24
 8008590:	187b      	adds	r3, r7, r1
 8008592:	785b      	ldrb	r3, [r3, #1]
 8008594:	001a      	movs	r2, r3
 8008596:	187b      	adds	r3, r7, r1
 8008598:	1c99      	adds	r1, r3, #2
 800859a:	48a7      	ldr	r0, [pc, #668]	@ (8008838 <ProcessCmd+0x3c4>)
 800859c:	2320      	movs	r3, #32
 800859e:	f003 fd4d 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80085a2:	e179      	b.n	8008898 <ProcessCmd+0x424>
        case SSIDConfigCmd: // 13 was 21
          ClearEEprom(SSIDConfigAddr, SSIDMaxLength);
 80085a4:	4ba5      	ldr	r3, [pc, #660]	@ (800883c <ProcessCmd+0x3c8>)
 80085a6:	2120      	movs	r1, #32
 80085a8:	0018      	movs	r0, r3
 80085aa:	f003 fd8c 	bl	800c0c6 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, SSIDMaxLength);
 80085ae:	2118      	movs	r1, #24
 80085b0:	187b      	adds	r3, r7, r1
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	001a      	movs	r2, r3
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	1c99      	adds	r1, r3, #2
 80085ba:	48a0      	ldr	r0, [pc, #640]	@ (800883c <ProcessCmd+0x3c8>)
 80085bc:	2320      	movs	r3, #32
 80085be:	f003 fd3d 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80085c2:	e169      	b.n	8008898 <ProcessCmd+0x424>
        case PasswordConfigCmd: // 14 was 22
          ClearEEprom(pwdConfigAddr, pwdMaxLength);
 80085c4:	4b9e      	ldr	r3, [pc, #632]	@ (8008840 <ProcessCmd+0x3cc>)
 80085c6:	2140      	movs	r1, #64	@ 0x40
 80085c8:	0018      	movs	r0, r3
 80085ca:	f003 fd7c 	bl	800c0c6 <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80085ce:	2218      	movs	r2, #24
 80085d0:	18bb      	adds	r3, r7, r2
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	0019      	movs	r1, r3
 80085d6:	18bb      	adds	r3, r7, r2
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	001c      	movs	r4, r3
 80085dc:	0015      	movs	r5, r2
 80085de:	18bb      	adds	r3, r7, r2
 80085e0:	1c9a      	adds	r2, r3, #2
 80085e2:	4898      	ldr	r0, [pc, #608]	@ (8008844 <ProcessCmd+0x3d0>)
 80085e4:	0023      	movs	r3, r4
 80085e6:	f000 f9ff 	bl	80089e8 <printf_USB>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, pwdMaxLength);
 80085ea:	0029      	movs	r1, r5
 80085ec:	187b      	adds	r3, r7, r1
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	001a      	movs	r2, r3
 80085f2:	187b      	adds	r3, r7, r1
 80085f4:	1c99      	adds	r1, r3, #2
 80085f6:	4892      	ldr	r0, [pc, #584]	@ (8008840 <ProcessCmd+0x3cc>)
 80085f8:	2340      	movs	r3, #64	@ 0x40
 80085fa:	f003 fd1f 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80085fe:	e14b      	b.n	8008898 <ProcessCmd+0x424>
        case PM1ConfigCmd:  // 21 was 13
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008600:	2118      	movs	r1, #24
 8008602:	187b      	adds	r3, r7, r1
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	001a      	movs	r2, r3
 8008608:	187b      	adds	r3, r7, r1
 800860a:	1c99      	adds	r1, r3, #2
 800860c:	488e      	ldr	r0, [pc, #568]	@ (8008848 <ProcessCmd+0x3d4>)
 800860e:	230c      	movs	r3, #12
 8008610:	f003 fd14 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008614:	e140      	b.n	8008898 <ProcessCmd+0x424>
        case PM4ConfigCmd:  // 22 was 14
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008616:	2118      	movs	r1, #24
 8008618:	187b      	adds	r3, r7, r1
 800861a:	785b      	ldrb	r3, [r3, #1]
 800861c:	001a      	movs	r2, r3
 800861e:	187b      	adds	r3, r7, r1
 8008620:	1c99      	adds	r1, r3, #2
 8008622:	488a      	ldr	r0, [pc, #552]	@ (800884c <ProcessCmd+0x3d8>)
 8008624:	230c      	movs	r3, #12
 8008626:	f003 fd09 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 800862a:	e135      	b.n	8008898 <ProcessCmd+0x424>
        case AHTTempConfigCmd: // 15
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800862c:	2118      	movs	r1, #24
 800862e:	187b      	adds	r3, r7, r1
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	001a      	movs	r2, r3
 8008634:	187b      	adds	r3, r7, r1
 8008636:	1c99      	adds	r1, r3, #2
 8008638:	4885      	ldr	r0, [pc, #532]	@ (8008850 <ProcessCmd+0x3dc>)
 800863a:	230c      	movs	r3, #12
 800863c:	f003 fcfe 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008640:	e12a      	b.n	8008898 <ProcessCmd+0x424>
        case AHTHumidConfigCmd: // 16
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008642:	2118      	movs	r1, #24
 8008644:	187b      	adds	r3, r7, r1
 8008646:	785b      	ldrb	r3, [r3, #1]
 8008648:	001a      	movs	r2, r3
 800864a:	187b      	adds	r3, r7, r1
 800864c:	1c99      	adds	r1, r3, #2
 800864e:	4881      	ldr	r0, [pc, #516]	@ (8008854 <ProcessCmd+0x3e0>)
 8008650:	230c      	movs	r3, #12
 8008652:	f003 fcf3 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008656:	e11f      	b.n	8008898 <ProcessCmd+0x424>
        case BMPTempConfigCmd: // 17
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008658:	2118      	movs	r1, #24
 800865a:	187b      	adds	r3, r7, r1
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	001a      	movs	r2, r3
 8008660:	187b      	adds	r3, r7, r1
 8008662:	1c99      	adds	r1, r3, #2
 8008664:	487c      	ldr	r0, [pc, #496]	@ (8008858 <ProcessCmd+0x3e4>)
 8008666:	230c      	movs	r3, #12
 8008668:	f003 fce8 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 800866c:	e114      	b.n	8008898 <ProcessCmd+0x424>
        case ENSAQIConfigCmd: // 18
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800866e:	2118      	movs	r1, #24
 8008670:	187b      	adds	r3, r7, r1
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	001a      	movs	r2, r3
 8008676:	187b      	adds	r3, r7, r1
 8008678:	1c99      	adds	r1, r3, #2
 800867a:	4878      	ldr	r0, [pc, #480]	@ (800885c <ProcessCmd+0x3e8>)
 800867c:	230c      	movs	r3, #12
 800867e:	f003 fcdd 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008682:	e109      	b.n	8008898 <ProcessCmd+0x424>
        case ENSTVOCConfigCmd: // 19
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008684:	2118      	movs	r1, #24
 8008686:	187b      	adds	r3, r7, r1
 8008688:	785b      	ldrb	r3, [r3, #1]
 800868a:	001a      	movs	r2, r3
 800868c:	187b      	adds	r3, r7, r1
 800868e:	1c99      	adds	r1, r3, #2
 8008690:	4873      	ldr	r0, [pc, #460]	@ (8008860 <ProcessCmd+0x3ec>)
 8008692:	230c      	movs	r3, #12
 8008694:	f003 fcd2 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008698:	e0fe      	b.n	8008898 <ProcessCmd+0x424>
        case ENSeCO2ConfigCmd: // 20
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800869a:	2118      	movs	r1, #24
 800869c:	187b      	adds	r3, r7, r1
 800869e:	785b      	ldrb	r3, [r3, #1]
 80086a0:	001a      	movs	r2, r3
 80086a2:	187b      	adds	r3, r7, r1
 80086a4:	1c99      	adds	r1, r3, #2
 80086a6:	486f      	ldr	r0, [pc, #444]	@ (8008864 <ProcessCmd+0x3f0>)
 80086a8:	230c      	movs	r3, #12
 80086aa:	f003 fcc7 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80086ae:	e0f3      	b.n	8008898 <ProcessCmd+0x424>
        case SEN55TempConfigCmd: // 23
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086b0:	2118      	movs	r1, #24
 80086b2:	187b      	adds	r3, r7, r1
 80086b4:	785b      	ldrb	r3, [r3, #1]
 80086b6:	001a      	movs	r2, r3
 80086b8:	187b      	adds	r3, r7, r1
 80086ba:	1c99      	adds	r1, r3, #2
 80086bc:	486a      	ldr	r0, [pc, #424]	@ (8008868 <ProcessCmd+0x3f4>)
 80086be:	230c      	movs	r3, #12
 80086c0:	f003 fcbc 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80086c4:	e0e8      	b.n	8008898 <ProcessCmd+0x424>
        case SEN55HumidConfigCmd: // 24
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086c6:	2118      	movs	r1, #24
 80086c8:	187b      	adds	r3, r7, r1
 80086ca:	785b      	ldrb	r3, [r3, #1]
 80086cc:	001a      	movs	r2, r3
 80086ce:	187b      	adds	r3, r7, r1
 80086d0:	1c99      	adds	r1, r3, #2
 80086d2:	4866      	ldr	r0, [pc, #408]	@ (800886c <ProcessCmd+0x3f8>)
 80086d4:	230c      	movs	r3, #12
 80086d6:	f003 fcb1 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80086da:	e0dd      	b.n	8008898 <ProcessCmd+0x424>
        case SendFromNameConfigCmd:  // 25
          ClearEEprom(SendFromNameConfigAddr, SendFromNameMaxLength);
 80086dc:	4b64      	ldr	r3, [pc, #400]	@ (8008870 <ProcessCmd+0x3fc>)
 80086de:	2130      	movs	r1, #48	@ 0x30
 80086e0:	0018      	movs	r0, r3
 80086e2:	f003 fcf0 	bl	800c0c6 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SendFromNameConfigAddr, msg.Payload, msg.PayloadLength, SendFromNameMaxLength);
 80086e6:	2118      	movs	r1, #24
 80086e8:	187b      	adds	r3, r7, r1
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	001a      	movs	r2, r3
 80086ee:	187b      	adds	r3, r7, r1
 80086f0:	1c99      	adds	r1, r3, #2
 80086f2:	485f      	ldr	r0, [pc, #380]	@ (8008870 <ProcessCmd+0x3fc>)
 80086f4:	2330      	movs	r3, #48	@ 0x30
 80086f6:	f003 fca1 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80086fa:	e0cd      	b.n	8008898 <ProcessCmd+0x424>
        case SendToNameConfigCmd:  // 26
          ClearEEprom(SendToNameConfigAddr, SendToNameMaxLength);
 80086fc:	4b5d      	ldr	r3, [pc, #372]	@ (8008874 <ProcessCmd+0x400>)
 80086fe:	2130      	movs	r1, #48	@ 0x30
 8008700:	0018      	movs	r0, r3
 8008702:	f003 fce0 	bl	800c0c6 <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 8008706:	2218      	movs	r2, #24
 8008708:	18bb      	adds	r3, r7, r2
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	0019      	movs	r1, r3
 800870e:	18bb      	adds	r3, r7, r2
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	001c      	movs	r4, r3
 8008714:	0015      	movs	r5, r2
 8008716:	18bb      	adds	r3, r7, r2
 8008718:	1c9a      	adds	r2, r3, #2
 800871a:	484a      	ldr	r0, [pc, #296]	@ (8008844 <ProcessCmd+0x3d0>)
 800871c:	0023      	movs	r3, r4
 800871e:	f000 f963 	bl	80089e8 <printf_USB>
          WriteUint8ArrayEepromSafe(SendToNameConfigAddr, msg.Payload, msg.PayloadLength, SendToNameMaxLength);
 8008722:	0029      	movs	r1, r5
 8008724:	187b      	adds	r3, r7, r1
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	001a      	movs	r2, r3
 800872a:	187b      	adds	r3, r7, r1
 800872c:	1c99      	adds	r1, r3, #2
 800872e:	4851      	ldr	r0, [pc, #324]	@ (8008874 <ProcessCmd+0x400>)
 8008730:	2330      	movs	r3, #48	@ 0x30
 8008732:	f003 fc83 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008736:	e0af      	b.n	8008898 <ProcessCmd+0x424>
        case MailAPIKeyConfigCmd:  // 27
          ClearEEprom(MailAPIKeyConfigAddr, MailAPIKeyMaxLength);
 8008738:	4b4f      	ldr	r3, [pc, #316]	@ (8008878 <ProcessCmd+0x404>)
 800873a:	2130      	movs	r1, #48	@ 0x30
 800873c:	0018      	movs	r0, r3
 800873e:	f003 fcc2 	bl	800c0c6 <ClearEEprom>
          WriteUint8ArrayEepromSafe(MailAPIKeyConfigAddr, msg.Payload, msg.PayloadLength, MailAPIKeyMaxLength);
 8008742:	2118      	movs	r1, #24
 8008744:	187b      	adds	r3, r7, r1
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	001a      	movs	r2, r3
 800874a:	187b      	adds	r3, r7, r1
 800874c:	1c99      	adds	r1, r3, #2
 800874e:	484a      	ldr	r0, [pc, #296]	@ (8008878 <ProcessCmd+0x404>)
 8008750:	2330      	movs	r3, #48	@ 0x30
 8008752:	f003 fc73 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008756:	e09f      	b.n	8008898 <ProcessCmd+0x424>
        case hPaConfigCmd:  // 28 will be airpressure => hPaconfigCMD hPaConfigAddr ??
          WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008758:	2118      	movs	r1, #24
 800875a:	187b      	adds	r3, r7, r1
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	001a      	movs	r2, r3
 8008760:	187b      	adds	r3, r7, r1
 8008762:	1c99      	adds	r1, r3, #2
 8008764:	4845      	ldr	r0, [pc, #276]	@ (800887c <ProcessCmd+0x408>)
 8008766:	230c      	movs	r3, #12
 8008768:	f003 fc68 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 800876c:	e094      	b.n	8008898 <ProcessCmd+0x424>
        case UptimeConfigCmd: // 29
          WriteUint8ArrayEepromSafe(UptimeConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800876e:	2118      	movs	r1, #24
 8008770:	187b      	adds	r3, r7, r1
 8008772:	785b      	ldrb	r3, [r3, #1]
 8008774:	001a      	movs	r2, r3
 8008776:	187b      	adds	r3, r7, r1
 8008778:	1c99      	adds	r1, r3, #2
 800877a:	4841      	ldr	r0, [pc, #260]	@ (8008880 <ProcessCmd+0x40c>)
 800877c:	230c      	movs	r3, #12
 800877e:	f003 fc5d 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 8008782:	e089      	b.n	8008898 <ProcessCmd+0x424>
        case URLToUploadConfigCmd: // 30
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 8008784:	2218      	movs	r2, #24
 8008786:	18bb      	adds	r3, r7, r2
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	0019      	movs	r1, r3
 800878c:	18bb      	adds	r3, r7, r2
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	001c      	movs	r4, r3
 8008792:	0015      	movs	r5, r2
 8008794:	18bb      	adds	r3, r7, r2
 8008796:	1c9a      	adds	r2, r3, #2
 8008798:	482a      	ldr	r0, [pc, #168]	@ (8008844 <ProcessCmd+0x3d0>)
 800879a:	0023      	movs	r3, r4
 800879c:	f000 f924 	bl	80089e8 <printf_USB>
          WriteUint8ArrayEepromSafe(URLToUploadConfigAddr, msg.Payload, msg.PayloadLength, URLToUploadMaxLength);
 80087a0:	0029      	movs	r1, r5
 80087a2:	187b      	adds	r3, r7, r1
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	001a      	movs	r2, r3
 80087a8:	187b      	adds	r3, r7, r1
 80087aa:	1c99      	adds	r1, r3, #2
 80087ac:	4835      	ldr	r0, [pc, #212]	@ (8008884 <ProcessCmd+0x410>)
 80087ae:	2330      	movs	r3, #48	@ 0x30
 80087b0:	f003 fc44 	bl	800c03c <WriteUint8ArrayEepromSafe>
        break;
 80087b4:	e070      	b.n	8008898 <ProcessCmd+0x424>

        case ClearConfigCmd: // 253
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80087b6:	2396      	movs	r3, #150	@ 0x96
 80087b8:	33ff      	adds	r3, #255	@ 0xff
 80087ba:	4a14      	ldr	r2, [pc, #80]	@ (800880c <ProcessCmd+0x398>)
 80087bc:	0019      	movs	r1, r3
 80087be:	0010      	movs	r0, r2
 80087c0:	f003 fc81 	bl	800c0c6 <ClearEEprom>
            ClearEEprom(SSIDStartAddr, IPrelatedConfigSize);
 80087c4:	4b1d      	ldr	r3, [pc, #116]	@ (800883c <ProcessCmd+0x3c8>)
 80087c6:	21f0      	movs	r1, #240	@ 0xf0
 80087c8:	0018      	movs	r0, r3
 80087ca:	f003 fc7c 	bl	800c0c6 <ClearEEprom>
        break;
 80087ce:	e063      	b.n	8008898 <ProcessCmd+0x424>
        case ClearEepromCmd: //254
        {
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80087d0:	2118      	movs	r1, #24
 80087d2:	187b      	adds	r3, r7, r1
 80087d4:	789b      	ldrb	r3, [r3, #2]
 80087d6:	b21b      	sxth	r3, r3
 80087d8:	021b      	lsls	r3, r3, #8
 80087da:	b21a      	sxth	r2, r3
 80087dc:	187b      	adds	r3, r7, r1
 80087de:	78db      	ldrb	r3, [r3, #3]
 80087e0:	b21b      	sxth	r3, r3
 80087e2:	4313      	orrs	r3, r2
 80087e4:	b21a      	sxth	r2, r3
 80087e6:	1dbb      	adds	r3, r7, #6
 80087e8:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80087ea:	1dbb      	adds	r3, r7, #6
 80087ec:	881a      	ldrh	r2, [r3, #0]
 80087ee:	23c0      	movs	r3, #192	@ 0xc0
 80087f0:	015b      	lsls	r3, r3, #5
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d248      	bcs.n	8008888 <ProcessCmd+0x414>
            {
                ClearEEprom(EEPromStartAddr, size);
 80087f6:	1dbb      	adds	r3, r7, #6
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	4a04      	ldr	r2, [pc, #16]	@ (800880c <ProcessCmd+0x398>)
 80087fc:	0019      	movs	r1, r3
 80087fe:	0010      	movs	r0, r2
 8008800:	f003 fc61 	bl	800c0c6 <ClearEEprom>
            }
            else
            {
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
 8008804:	e047      	b.n	8008896 <ProcessCmd+0x422>
 8008806:	46c0      	nop			@ (mov r8, r8)
 8008808:	0802ddf4 	.word	0x0802ddf4
 800880c:	08080000 	.word	0x08080000
 8008810:	0808000c 	.word	0x0808000c
 8008814:	08080018 	.word	0x08080018
 8008818:	08080024 	.word	0x08080024
 800881c:	08080030 	.word	0x08080030
 8008820:	08080048 	.word	0x08080048
 8008824:	0808003c 	.word	0x0808003c
 8008828:	08080054 	.word	0x08080054
 800882c:	08080060 	.word	0x08080060
 8008830:	0808006c 	.word	0x0808006c
 8008834:	08080078 	.word	0x08080078
 8008838:	08080090 	.word	0x08080090
 800883c:	08080200 	.word	0x08080200
 8008840:	08080220 	.word	0x08080220
 8008844:	0802b264 	.word	0x0802b264
 8008848:	080800b0 	.word	0x080800b0
 800884c:	080800bc 	.word	0x080800bc
 8008850:	080800c8 	.word	0x080800c8
 8008854:	080800d4 	.word	0x080800d4
 8008858:	080800e0 	.word	0x080800e0
 800885c:	080800ec 	.word	0x080800ec
 8008860:	080800f8 	.word	0x080800f8
 8008864:	08080104 	.word	0x08080104
 8008868:	08080170 	.word	0x08080170
 800886c:	0808017c 	.word	0x0808017c
 8008870:	08080260 	.word	0x08080260
 8008874:	08080290 	.word	0x08080290
 8008878:	080802c0 	.word	0x080802c0
 800887c:	08080188 	.word	0x08080188
 8008880:	080801a0 	.word	0x080801a0
 8008884:	08080110 	.word	0x08080110
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8008888:	23c0      	movs	r3, #192	@ 0xc0
 800888a:	015b      	lsls	r3, r3, #5
 800888c:	4a06      	ldr	r2, [pc, #24]	@ (80088a8 <ProcessCmd+0x434>)
 800888e:	0019      	movs	r1, r3
 8008890:	0010      	movs	r0, r2
 8008892:	f003 fc18 	bl	800c0c6 <ClearEEprom>
            break;
 8008896:	46c0      	nop			@ (mov r8, r8)
        }
    }

}
 8008898:	46c0      	nop			@ (mov r8, r8)
 800889a:	46bd      	mov	sp, r7
 800889c:	b002      	add	sp, #8
 800889e:	bcb0      	pop	{r4, r5, r7}
 80088a0:	bc08      	pop	{r3}
 80088a2:	b004      	add	sp, #16
 80088a4:	4718      	bx	r3
 80088a6:	46c0      	nop			@ (mov r8, r8)
 80088a8:	08080000 	.word	0x08080000

080088ac <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80088ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6039      	str	r1, [r7, #0]
 80088b4:	0011      	movs	r1, r2
 80088b6:	1dfb      	adds	r3, r7, #7
 80088b8:	1c02      	adds	r2, r0, #0
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	1dbb      	adds	r3, r7, #6
 80088be:	1c0a      	adds	r2, r1, #0
 80088c0:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80088c2:	2223      	movs	r2, #35	@ 0x23
 80088c4:	4b20      	ldr	r3, [pc, #128]	@ (8008948 <Create_Message+0x9c>)
 80088c6:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80088c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008948 <Create_Message+0x9c>)
 80088ca:	1dfa      	adds	r2, r7, #7
 80088cc:	7812      	ldrb	r2, [r2, #0]
 80088ce:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80088d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008948 <Create_Message+0x9c>)
 80088d2:	1dba      	adds	r2, r7, #6
 80088d4:	7812      	ldrb	r2, [r2, #0]
 80088d6:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80088d8:	1dbb      	adds	r3, r7, #6
 80088da:	781a      	ldrb	r2, [r3, #0]
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	4b1b      	ldr	r3, [pc, #108]	@ (800894c <Create_Message+0xa0>)
 80088e0:	0018      	movs	r0, r3
 80088e2:	f01d fec3 	bl	802666c <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80088e6:	1dbb      	adds	r3, r7, #6
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	250e      	movs	r5, #14
 80088ee:	197b      	adds	r3, r7, r5
 80088f0:	3203      	adds	r2, #3
 80088f2:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80088f4:	260c      	movs	r6, #12
 80088f6:	19bc      	adds	r4, r7, r6
 80088f8:	197b      	adds	r3, r7, r5
 80088fa:	881a      	ldrh	r2, [r3, #0]
 80088fc:	4b12      	ldr	r3, [pc, #72]	@ (8008948 <Create_Message+0x9c>)
 80088fe:	0011      	movs	r1, r2
 8008900:	0018      	movs	r0, r3
 8008902:	f000 f825 	bl	8008950 <CRC16_ARC>
 8008906:	0003      	movs	r3, r0
 8008908:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800890a:	0030      	movs	r0, r6
 800890c:	183b      	adds	r3, r7, r0
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	0a1b      	lsrs	r3, r3, #8
 8008912:	b29a      	uxth	r2, r3
 8008914:	197b      	adds	r3, r7, r5
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b2d1      	uxtb	r1, r2
 800891a:	4a0b      	ldr	r2, [pc, #44]	@ (8008948 <Create_Message+0x9c>)
 800891c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800891e:	197b      	adds	r3, r7, r5
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	3301      	adds	r3, #1
 8008924:	183a      	adds	r2, r7, r0
 8008926:	8812      	ldrh	r2, [r2, #0]
 8008928:	b2d1      	uxtb	r1, r2
 800892a:	4a07      	ldr	r2, [pc, #28]	@ (8008948 <Create_Message+0x9c>)
 800892c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800892e:	197b      	adds	r3, r7, r5
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	3302      	adds	r3, #2
 8008934:	b29a      	uxth	r2, r3
 8008936:	4b04      	ldr	r3, [pc, #16]	@ (8008948 <Create_Message+0x9c>)
 8008938:	0011      	movs	r1, r2
 800893a:	0018      	movs	r0, r3
 800893c:	f01a fb5a 	bl	8022ff4 <CDC_Transmit_FS>
}
 8008940:	46c0      	nop			@ (mov r8, r8)
 8008942:	46bd      	mov	sp, r7
 8008944:	b005      	add	sp, #20
 8008946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008948:	20000a4c 	.word	0x20000a4c
 800894c:	20000a4f 	.word	0x20000a4f

08008950 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	000a      	movs	r2, r1
 800895a:	1cbb      	adds	r3, r7, #2
 800895c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800895e:	2316      	movs	r3, #22
 8008960:	18fb      	adds	r3, r7, r3
 8008962:	2200      	movs	r2, #0
 8008964:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8008966:	2300      	movs	r3, #0
 8008968:	613b      	str	r3, [r7, #16]
 800896a:	e02e      	b.n	80089ca <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	18d3      	adds	r3, r2, r3
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	0019      	movs	r1, r3
 8008976:	2216      	movs	r2, #22
 8008978:	18bb      	adds	r3, r7, r2
 800897a:	18ba      	adds	r2, r7, r2
 800897c:	8812      	ldrh	r2, [r2, #0]
 800897e:	404a      	eors	r2, r1
 8008980:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	e01a      	b.n	80089be <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008988:	2116      	movs	r1, #22
 800898a:	187b      	adds	r3, r7, r1
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	2201      	movs	r2, #1
 8008990:	4013      	ands	r3, r2
 8008992:	d00b      	beq.n	80089ac <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008994:	187b      	adds	r3, r7, r1
 8008996:	187a      	adds	r2, r7, r1
 8008998:	8812      	ldrh	r2, [r2, #0]
 800899a:	0852      	lsrs	r2, r2, #1
 800899c:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800899e:	187b      	adds	r3, r7, r1
 80089a0:	187a      	adds	r2, r7, r1
 80089a2:	8812      	ldrh	r2, [r2, #0]
 80089a4:	490f      	ldr	r1, [pc, #60]	@ (80089e4 <CRC16_ARC+0x94>)
 80089a6:	404a      	eors	r2, r1
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	e005      	b.n	80089b8 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80089ac:	2216      	movs	r2, #22
 80089ae:	18bb      	adds	r3, r7, r2
 80089b0:	18ba      	adds	r2, r7, r2
 80089b2:	8812      	ldrh	r2, [r2, #0]
 80089b4:	0852      	lsrs	r2, r2, #1
 80089b6:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b07      	cmp	r3, #7
 80089c2:	dde1      	ble.n	8008988 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	3301      	adds	r3, #1
 80089c8:	613b      	str	r3, [r7, #16]
 80089ca:	1cbb      	adds	r3, r7, #2
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	dbcb      	blt.n	800896c <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80089d4:	2316      	movs	r3, #22
 80089d6:	18fb      	adds	r3, r7, r3
 80089d8:	881b      	ldrh	r3, [r3, #0]
}
 80089da:	0018      	movs	r0, r3
 80089dc:	46bd      	mov	sp, r7
 80089de:	b006      	add	sp, #24
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	46c0      	nop			@ (mov r8, r8)
 80089e4:	ffffa001 	.word	0xffffa001

080089e8 <printf_USB>:

void printf_USB(const char* message, ...)
{
 80089e8:	b40f      	push	{r0, r1, r2, r3}
 80089ea:	b590      	push	{r4, r7, lr}
 80089ec:	b0a9      	sub	sp, #164	@ 0xa4
 80089ee:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 80089f0:	23ac      	movs	r3, #172	@ 0xac
 80089f2:	2108      	movs	r1, #8
 80089f4:	185b      	adds	r3, r3, r1
 80089f6:	19db      	adds	r3, r3, r7
 80089f8:	607b      	str	r3, [r7, #4]
  vsnprintf(string, 150, message, args);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	22a8      	movs	r2, #168	@ 0xa8
 80089fe:	1852      	adds	r2, r2, r1
 8008a00:	19d2      	adds	r2, r2, r7
 8008a02:	6812      	ldr	r2, [r2, #0]
 8008a04:	2408      	movs	r4, #8
 8008a06:	1938      	adds	r0, r7, r4
 8008a08:	2196      	movs	r1, #150	@ 0x96
 8008a0a:	f01d fca7 	bl	802635c <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008a0e:	193b      	adds	r3, r7, r4
 8008a10:	0018      	movs	r0, r3
 8008a12:	f7f7 fbab 	bl	800016c <strlen>
 8008a16:	0003      	movs	r3, r0
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	193b      	adds	r3, r7, r4
 8008a1c:	0011      	movs	r1, r2
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f01a fae8 	bl	8022ff4 <CDC_Transmit_FS>
}
 8008a24:	46c0      	nop			@ (mov r8, r8)
 8008a26:	46bd      	mov	sp, r7
 8008a28:	b029      	add	sp, #164	@ 0xa4
 8008a2a:	bc90      	pop	{r4, r7}
 8008a2c:	bc08      	pop	{r3}
 8008a2e:	b004      	add	sp, #16
 8008a30:	4718      	bx	r3

08008a32 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	000a      	movs	r2, r1
 8008a3c:	1cfb      	adds	r3, r7, #3
 8008a3e:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008a40:	1cfb      	adds	r3, r7, #3
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d006      	beq.n	8008a56 <PC_selectout+0x24>
    printf_USB(msg);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	f7ff ffcc 	bl	80089e8 <printf_USB>
    HAL_Delay(10); //wait for the host poll of the USB buffer
 8008a50:	200a      	movs	r0, #10
 8008a52:	f00b ff3f 	bl	80148d4 <HAL_Delay>
  }
//  else {
    printf(msg);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f01d fb73 	bl	8026144 <iprintf>
//  }
}
 8008a5e:	46c0      	nop			@ (mov r8, r8)
 8008a60:	46bd      	mov	sp, r7
 8008a62:	b002      	add	sp, #8
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <PC_show_Keys>:

void PC_show_Keys() {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  static uint8_t hPaConfig[IdSize];               // 28 was 5
  static uint8_t UptimeConfig[IdSize];            // 29
  static uint8_t URLToUploadConfig[URLToUploadMaxLength]; // 30
  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008a6c:	f001 f876 	bl	8009b5c <Check_USB_PowerOn>
 8008a70:	1e03      	subs	r3, r0, #0
 8008a72:	d005      	beq.n	8008a80 <PC_show_Keys+0x18>
    usb_out = true;
 8008a74:	4b01      	ldr	r3, [pc, #4]	@ (8008a7c <PC_show_Keys+0x14>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	e004      	b.n	8008a86 <PC_show_Keys+0x1e>
 8008a7c:	20000b51 	.word	0x20000b51
  }
  else {
    usb_out = false;
 8008a80:	4bfd      	ldr	r3, [pc, #1012]	@ (8008e78 <PC_show_Keys+0x410>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "\r\nOverview of stored keys:\r\n");
 8008a86:	4afd      	ldr	r2, [pc, #1012]	@ (8008e7c <PC_show_Keys+0x414>)
 8008a88:	4bfd      	ldr	r3, [pc, #1012]	@ (8008e80 <PC_show_Keys+0x418>)
 8008a8a:	0011      	movs	r1, r2
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	f01d fbc9 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008a92:	4bf9      	ldr	r3, [pc, #996]	@ (8008e78 <PC_show_Keys+0x410>)
 8008a94:	781a      	ldrb	r2, [r3, #0]
 8008a96:	4bfa      	ldr	r3, [pc, #1000]	@ (8008e80 <PC_show_Keys+0x418>)
 8008a98:	0011      	movs	r1, r2
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f7ff ffc9 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008aa0:	4bf8      	ldr	r3, [pc, #992]	@ (8008e84 <PC_show_Keys+0x41c>)
 8008aa2:	48f9      	ldr	r0, [pc, #996]	@ (8008e88 <PC_show_Keys+0x420>)
 8008aa4:	220c      	movs	r2, #12
 8008aa6:	0019      	movs	r1, r3
 8008aa8:	f003 fae4 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008aac:	4af5      	ldr	r2, [pc, #980]	@ (8008e84 <PC_show_Keys+0x41c>)
 8008aae:	4bf7      	ldr	r3, [pc, #988]	@ (8008e8c <PC_show_Keys+0x424>)
 8008ab0:	0011      	movs	r1, r2
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f7fc fca0 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - Box id ------------------------: %s\r\n", BoxConfigCmd, Buffer);
 8008ab8:	4bf4      	ldr	r3, [pc, #976]	@ (8008e8c <PC_show_Keys+0x424>)
 8008aba:	49f5      	ldr	r1, [pc, #980]	@ (8008e90 <PC_show_Keys+0x428>)
 8008abc:	48f0      	ldr	r0, [pc, #960]	@ (8008e80 <PC_show_Keys+0x418>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f01d fbb0 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ac4:	4bec      	ldr	r3, [pc, #944]	@ (8008e78 <PC_show_Keys+0x410>)
 8008ac6:	781a      	ldrb	r2, [r3, #0]
 8008ac8:	4bed      	ldr	r3, [pc, #948]	@ (8008e80 <PC_show_Keys+0x418>)
 8008aca:	0011      	movs	r1, r2
 8008acc:	0018      	movs	r0, r3
 8008ace:	f7ff ffb0 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008ad2:	4bf0      	ldr	r3, [pc, #960]	@ (8008e94 <PC_show_Keys+0x42c>)
 8008ad4:	48f0      	ldr	r0, [pc, #960]	@ (8008e98 <PC_show_Keys+0x430>)
 8008ad6:	220c      	movs	r2, #12
 8008ad8:	0019      	movs	r1, r3
 8008ada:	f003 facb 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008ade:	4aed      	ldr	r2, [pc, #948]	@ (8008e94 <PC_show_Keys+0x42c>)
 8008ae0:	4bea      	ldr	r3, [pc, #936]	@ (8008e8c <PC_show_Keys+0x424>)
 8008ae2:	0011      	movs	r1, r2
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f7fc fc87 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - Temperature sensor id: --------: %s\r\n", TempConfigCmd, Buffer);
 8008aea:	4be8      	ldr	r3, [pc, #928]	@ (8008e8c <PC_show_Keys+0x424>)
 8008aec:	49eb      	ldr	r1, [pc, #940]	@ (8008e9c <PC_show_Keys+0x434>)
 8008aee:	48e4      	ldr	r0, [pc, #912]	@ (8008e80 <PC_show_Keys+0x418>)
 8008af0:	2201      	movs	r2, #1
 8008af2:	f01d fb97 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008af6:	4be0      	ldr	r3, [pc, #896]	@ (8008e78 <PC_show_Keys+0x410>)
 8008af8:	781a      	ldrb	r2, [r3, #0]
 8008afa:	4be1      	ldr	r3, [pc, #900]	@ (8008e80 <PC_show_Keys+0x418>)
 8008afc:	0011      	movs	r1, r2
 8008afe:	0018      	movs	r0, r3
 8008b00:	f7ff ff97 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008b04:	4be6      	ldr	r3, [pc, #920]	@ (8008ea0 <PC_show_Keys+0x438>)
 8008b06:	48e7      	ldr	r0, [pc, #924]	@ (8008ea4 <PC_show_Keys+0x43c>)
 8008b08:	220c      	movs	r2, #12
 8008b0a:	0019      	movs	r1, r3
 8008b0c:	f003 fab2 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008b10:	4ae3      	ldr	r2, [pc, #908]	@ (8008ea0 <PC_show_Keys+0x438>)
 8008b12:	4bde      	ldr	r3, [pc, #888]	@ (8008e8c <PC_show_Keys+0x424>)
 8008b14:	0011      	movs	r1, r2
 8008b16:	0018      	movs	r0, r3
 8008b18:	f7fc fc6e 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - Humidity sensor id ------------: %s\r\n", HumidConfigCmd, Buffer);
 8008b1c:	4bdb      	ldr	r3, [pc, #876]	@ (8008e8c <PC_show_Keys+0x424>)
 8008b1e:	49e2      	ldr	r1, [pc, #904]	@ (8008ea8 <PC_show_Keys+0x440>)
 8008b20:	48d7      	ldr	r0, [pc, #860]	@ (8008e80 <PC_show_Keys+0x418>)
 8008b22:	2202      	movs	r2, #2
 8008b24:	f01d fb7e 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b28:	4bd3      	ldr	r3, [pc, #844]	@ (8008e78 <PC_show_Keys+0x410>)
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	4bd4      	ldr	r3, [pc, #848]	@ (8008e80 <PC_show_Keys+0x418>)
 8008b2e:	0011      	movs	r1, r2
 8008b30:	0018      	movs	r0, r3
 8008b32:	f7ff ff7e 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8008b36:	4bdd      	ldr	r3, [pc, #884]	@ (8008eac <PC_show_Keys+0x444>)
 8008b38:	48dd      	ldr	r0, [pc, #884]	@ (8008eb0 <PC_show_Keys+0x448>)
 8008b3a:	220c      	movs	r2, #12
 8008b3c:	0019      	movs	r1, r3
 8008b3e:	f003 fa99 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008b42:	4ada      	ldr	r2, [pc, #872]	@ (8008eac <PC_show_Keys+0x444>)
 8008b44:	4bd1      	ldr	r3, [pc, #836]	@ (8008e8c <PC_show_Keys+0x424>)
 8008b46:	0011      	movs	r1, r2
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f7fc fc55 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - NOx sensor id -----------------: %s\r\n", NOxIndexConfigCmd, Buffer);
 8008b4e:	4bcf      	ldr	r3, [pc, #828]	@ (8008e8c <PC_show_Keys+0x424>)
 8008b50:	49d8      	ldr	r1, [pc, #864]	@ (8008eb4 <PC_show_Keys+0x44c>)
 8008b52:	48cb      	ldr	r0, [pc, #812]	@ (8008e80 <PC_show_Keys+0x418>)
 8008b54:	2203      	movs	r2, #3
 8008b56:	f01d fb65 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b5a:	4bc7      	ldr	r3, [pc, #796]	@ (8008e78 <PC_show_Keys+0x410>)
 8008b5c:	781a      	ldrb	r2, [r3, #0]
 8008b5e:	4bc8      	ldr	r3, [pc, #800]	@ (8008e80 <PC_show_Keys+0x418>)
 8008b60:	0011      	movs	r1, r2
 8008b62:	0018      	movs	r0, r3
 8008b64:	f7ff ff65 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008b68:	4bd3      	ldr	r3, [pc, #844]	@ (8008eb8 <PC_show_Keys+0x450>)
 8008b6a:	48d4      	ldr	r0, [pc, #848]	@ (8008ebc <PC_show_Keys+0x454>)
 8008b6c:	220c      	movs	r2, #12
 8008b6e:	0019      	movs	r1, r3
 8008b70:	f003 fa80 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008b74:	4ad0      	ldr	r2, [pc, #832]	@ (8008eb8 <PC_show_Keys+0x450>)
 8008b76:	4bc5      	ldr	r3, [pc, #788]	@ (8008e8c <PC_show_Keys+0x424>)
 8008b78:	0011      	movs	r1, r2
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f7fc fc3c 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - VOC sensor id -----------------: %s\r\n", VocIndexConfigCmd, Buffer);
 8008b80:	4bc2      	ldr	r3, [pc, #776]	@ (8008e8c <PC_show_Keys+0x424>)
 8008b82:	49cf      	ldr	r1, [pc, #828]	@ (8008ec0 <PC_show_Keys+0x458>)
 8008b84:	48be      	ldr	r0, [pc, #760]	@ (8008e80 <PC_show_Keys+0x418>)
 8008b86:	2204      	movs	r2, #4
 8008b88:	f01d fb4c 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b8c:	4bba      	ldr	r3, [pc, #744]	@ (8008e78 <PC_show_Keys+0x410>)
 8008b8e:	781a      	ldrb	r2, [r3, #0]
 8008b90:	4bbb      	ldr	r3, [pc, #748]	@ (8008e80 <PC_show_Keys+0x418>)
 8008b92:	0011      	movs	r1, r2
 8008b94:	0018      	movs	r0, r3
 8008b96:	f7ff ff4c 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008b9a:	4bca      	ldr	r3, [pc, #808]	@ (8008ec4 <PC_show_Keys+0x45c>)
 8008b9c:	48ca      	ldr	r0, [pc, #808]	@ (8008ec8 <PC_show_Keys+0x460>)
 8008b9e:	220c      	movs	r2, #12
 8008ba0:	0019      	movs	r1, r3
 8008ba2:	f003 fa67 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008ba6:	4ac7      	ldr	r2, [pc, #796]	@ (8008ec4 <PC_show_Keys+0x45c>)
 8008ba8:	4bb8      	ldr	r3, [pc, #736]	@ (8008e8c <PC_show_Keys+0x424>)
 8008baa:	0011      	movs	r1, r2
 8008bac:	0018      	movs	r0, r3
 8008bae:	f7fc fc23 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - dBA sensor id -----------------: %s\r\n", dBAConfigCmd, Buffer);
 8008bb2:	4bb6      	ldr	r3, [pc, #728]	@ (8008e8c <PC_show_Keys+0x424>)
 8008bb4:	49c5      	ldr	r1, [pc, #788]	@ (8008ecc <PC_show_Keys+0x464>)
 8008bb6:	48b2      	ldr	r0, [pc, #712]	@ (8008e80 <PC_show_Keys+0x418>)
 8008bb8:	2205      	movs	r2, #5
 8008bba:	f01d fb33 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bbe:	4bae      	ldr	r3, [pc, #696]	@ (8008e78 <PC_show_Keys+0x410>)
 8008bc0:	781a      	ldrb	r2, [r3, #0]
 8008bc2:	4baf      	ldr	r3, [pc, #700]	@ (8008e80 <PC_show_Keys+0x418>)
 8008bc4:	0011      	movs	r1, r2
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f7ff ff33 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(dBcConfigAddr, dBcConfig, IdSize);
 8008bcc:	4bc0      	ldr	r3, [pc, #768]	@ (8008ed0 <PC_show_Keys+0x468>)
 8008bce:	48c1      	ldr	r0, [pc, #772]	@ (8008ed4 <PC_show_Keys+0x46c>)
 8008bd0:	220c      	movs	r2, #12
 8008bd2:	0019      	movs	r1, r3
 8008bd4:	f003 fa4e 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, dBcConfig);
 8008bd8:	4abd      	ldr	r2, [pc, #756]	@ (8008ed0 <PC_show_Keys+0x468>)
 8008bda:	4bac      	ldr	r3, [pc, #688]	@ (8008e8c <PC_show_Keys+0x424>)
 8008bdc:	0011      	movs	r1, r2
 8008bde:	0018      	movs	r0, r3
 8008be0:	f7fc fc0a 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - Sound dBc sensor id -----------: %s\r\n", dBcConfigCmd, Buffer);
 8008be4:	4ba9      	ldr	r3, [pc, #676]	@ (8008e8c <PC_show_Keys+0x424>)
 8008be6:	49bc      	ldr	r1, [pc, #752]	@ (8008ed8 <PC_show_Keys+0x470>)
 8008be8:	48a5      	ldr	r0, [pc, #660]	@ (8008e80 <PC_show_Keys+0x418>)
 8008bea:	2206      	movs	r2, #6
 8008bec:	f01d fb1a 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bf0:	4ba1      	ldr	r3, [pc, #644]	@ (8008e78 <PC_show_Keys+0x410>)
 8008bf2:	781a      	ldrb	r2, [r3, #0]
 8008bf4:	4ba2      	ldr	r3, [pc, #648]	@ (8008e80 <PC_show_Keys+0x418>)
 8008bf6:	0011      	movs	r1, r2
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	f7ff ff1a 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008bfe:	4bb7      	ldr	r3, [pc, #732]	@ (8008edc <PC_show_Keys+0x474>)
 8008c00:	48b7      	ldr	r0, [pc, #732]	@ (8008ee0 <PC_show_Keys+0x478>)
 8008c02:	220c      	movs	r2, #12
 8008c04:	0019      	movs	r1, r3
 8008c06:	f003 fa35 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008c0a:	4ab4      	ldr	r2, [pc, #720]	@ (8008edc <PC_show_Keys+0x474>)
 8008c0c:	4b9f      	ldr	r3, [pc, #636]	@ (8008e8c <PC_show_Keys+0x424>)
 8008c0e:	0011      	movs	r1, r2
 8008c10:	0018      	movs	r0, r3
 8008c12:	f7fc fbf1 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM2p5 sensor id ---------------: %s\r\n", PM2ConfigCmd, Buffer);
 8008c16:	4b9d      	ldr	r3, [pc, #628]	@ (8008e8c <PC_show_Keys+0x424>)
 8008c18:	49b2      	ldr	r1, [pc, #712]	@ (8008ee4 <PC_show_Keys+0x47c>)
 8008c1a:	4899      	ldr	r0, [pc, #612]	@ (8008e80 <PC_show_Keys+0x418>)
 8008c1c:	2207      	movs	r2, #7
 8008c1e:	f01d fb01 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c22:	4b95      	ldr	r3, [pc, #596]	@ (8008e78 <PC_show_Keys+0x410>)
 8008c24:	781a      	ldrb	r2, [r3, #0]
 8008c26:	4b96      	ldr	r3, [pc, #600]	@ (8008e80 <PC_show_Keys+0x418>)
 8008c28:	0011      	movs	r1, r2
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f7ff ff01 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008c30:	4bad      	ldr	r3, [pc, #692]	@ (8008ee8 <PC_show_Keys+0x480>)
 8008c32:	48ae      	ldr	r0, [pc, #696]	@ (8008eec <PC_show_Keys+0x484>)
 8008c34:	220c      	movs	r2, #12
 8008c36:	0019      	movs	r1, r3
 8008c38:	f003 fa1c 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008c3c:	4aaa      	ldr	r2, [pc, #680]	@ (8008ee8 <PC_show_Keys+0x480>)
 8008c3e:	4b93      	ldr	r3, [pc, #588]	@ (8008e8c <PC_show_Keys+0x424>)
 8008c40:	0011      	movs	r1, r2
 8008c42:	0018      	movs	r0, r3
 8008c44:	f7fc fbd8 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM10 sensor id ----------------: %s\r\n", PM10ConfigCmd, Buffer);
 8008c48:	4b90      	ldr	r3, [pc, #576]	@ (8008e8c <PC_show_Keys+0x424>)
 8008c4a:	49a9      	ldr	r1, [pc, #676]	@ (8008ef0 <PC_show_Keys+0x488>)
 8008c4c:	488c      	ldr	r0, [pc, #560]	@ (8008e80 <PC_show_Keys+0x418>)
 8008c4e:	2208      	movs	r2, #8
 8008c50:	f01d fae8 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c54:	4b88      	ldr	r3, [pc, #544]	@ (8008e78 <PC_show_Keys+0x410>)
 8008c56:	781a      	ldrb	r2, [r3, #0]
 8008c58:	4b89      	ldr	r3, [pc, #548]	@ (8008e80 <PC_show_Keys+0x418>)
 8008c5a:	0011      	movs	r1, r2
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f7ff fee8 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008c62:	4ba4      	ldr	r3, [pc, #656]	@ (8008ef4 <PC_show_Keys+0x48c>)
 8008c64:	48a4      	ldr	r0, [pc, #656]	@ (8008ef8 <PC_show_Keys+0x490>)
 8008c66:	220c      	movs	r2, #12
 8008c68:	0019      	movs	r1, r3
 8008c6a:	f003 fa03 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008c6e:	4aa1      	ldr	r2, [pc, #644]	@ (8008ef4 <PC_show_Keys+0x48c>)
 8008c70:	4b86      	ldr	r3, [pc, #536]	@ (8008e8c <PC_show_Keys+0x424>)
 8008c72:	0011      	movs	r1, r2
 8008c74:	0018      	movs	r0, r3
 8008c76:	f7fc fbbf 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - Battery voltage sensor id -----: %s\r\n", BatVoltConfigCmd, Buffer);
 8008c7a:	4b84      	ldr	r3, [pc, #528]	@ (8008e8c <PC_show_Keys+0x424>)
 8008c7c:	499f      	ldr	r1, [pc, #636]	@ (8008efc <PC_show_Keys+0x494>)
 8008c7e:	4880      	ldr	r0, [pc, #512]	@ (8008e80 <PC_show_Keys+0x418>)
 8008c80:	2209      	movs	r2, #9
 8008c82:	f01d facf 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c86:	4b7c      	ldr	r3, [pc, #496]	@ (8008e78 <PC_show_Keys+0x410>)
 8008c88:	781a      	ldrb	r2, [r3, #0]
 8008c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8008e80 <PC_show_Keys+0x418>)
 8008c8c:	0011      	movs	r1, r2
 8008c8e:	0018      	movs	r0, r3
 8008c90:	f7ff fecf 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008c94:	4b9a      	ldr	r3, [pc, #616]	@ (8008f00 <PC_show_Keys+0x498>)
 8008c96:	489b      	ldr	r0, [pc, #620]	@ (8008f04 <PC_show_Keys+0x49c>)
 8008c98:	220c      	movs	r2, #12
 8008c9a:	0019      	movs	r1, r3
 8008c9c:	f003 f9ea 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008ca0:	4a97      	ldr	r2, [pc, #604]	@ (8008f00 <PC_show_Keys+0x498>)
 8008ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8008e8c <PC_show_Keys+0x424>)
 8008ca4:	0011      	movs	r1, r2
 8008ca6:	0018      	movs	r0, r3
 8008ca8:	f7fc fba6 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - Solar voltage sensor id -------: %s\r\n", SolVoltConfigCmd, Buffer);
 8008cac:	4b77      	ldr	r3, [pc, #476]	@ (8008e8c <PC_show_Keys+0x424>)
 8008cae:	4996      	ldr	r1, [pc, #600]	@ (8008f08 <PC_show_Keys+0x4a0>)
 8008cb0:	4873      	ldr	r0, [pc, #460]	@ (8008e80 <PC_show_Keys+0x418>)
 8008cb2:	220a      	movs	r2, #10
 8008cb4:	f01d fab6 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8008e78 <PC_show_Keys+0x410>)
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	4b70      	ldr	r3, [pc, #448]	@ (8008e80 <PC_show_Keys+0x418>)
 8008cbe:	0011      	movs	r1, r2
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	f7ff feb6 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008cc6:	4b91      	ldr	r3, [pc, #580]	@ (8008f0c <PC_show_Keys+0x4a4>)
 8008cc8:	4891      	ldr	r0, [pc, #580]	@ (8008f10 <PC_show_Keys+0x4a8>)
 8008cca:	220c      	movs	r2, #12
 8008ccc:	0019      	movs	r1, r3
 8008cce:	f003 f9d1 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008cd2:	4a8e      	ldr	r2, [pc, #568]	@ (8008f0c <PC_show_Keys+0x4a4>)
 8008cd4:	4b6d      	ldr	r3, [pc, #436]	@ (8008e8c <PC_show_Keys+0x424>)
 8008cd6:	0011      	movs	r1, r2
 8008cd8:	0018      	movs	r0, r3
 8008cda:	f7fc fb8d 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - Charger status (not used) -----: %s\r\n", ChargerStatConfigCmd, Buffer);
 8008cde:	4b6b      	ldr	r3, [pc, #428]	@ (8008e8c <PC_show_Keys+0x424>)
 8008ce0:	498c      	ldr	r1, [pc, #560]	@ (8008f14 <PC_show_Keys+0x4ac>)
 8008ce2:	4867      	ldr	r0, [pc, #412]	@ (8008e80 <PC_show_Keys+0x418>)
 8008ce4:	220b      	movs	r2, #11
 8008ce6:	f01d fa9d 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cea:	4b63      	ldr	r3, [pc, #396]	@ (8008e78 <PC_show_Keys+0x410>)
 8008cec:	781a      	ldrb	r2, [r3, #0]
 8008cee:	4b64      	ldr	r3, [pc, #400]	@ (8008e80 <PC_show_Keys+0x418>)
 8008cf0:	0011      	movs	r1, r2
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f7ff fe9d 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008cf8:	4b87      	ldr	r3, [pc, #540]	@ (8008f18 <PC_show_Keys+0x4b0>)
 8008cfa:	4888      	ldr	r0, [pc, #544]	@ (8008f1c <PC_show_Keys+0x4b4>)
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	0019      	movs	r1, r3
 8008d00:	f003 f9b8 	bl	800c074 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Box name ---max 12 char--------: ", CustomNameConfigCmd);
 8008d04:	4986      	ldr	r1, [pc, #536]	@ (8008f20 <PC_show_Keys+0x4b8>)
 8008d06:	4b5e      	ldr	r3, [pc, #376]	@ (8008e80 <PC_show_Keys+0x418>)
 8008d08:	220c      	movs	r2, #12
 8008d0a:	0018      	movs	r0, r3
 8008d0c:	f01d fa8a 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d10:	4b59      	ldr	r3, [pc, #356]	@ (8008e78 <PC_show_Keys+0x410>)
 8008d12:	781a      	ldrb	r2, [r3, #0]
 8008d14:	4b5a      	ldr	r3, [pc, #360]	@ (8008e80 <PC_show_Keys+0x418>)
 8008d16:	0011      	movs	r1, r2
 8008d18:	0018      	movs	r0, r3
 8008d1a:	f7ff fe8a 	bl	8008a32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8008f18 <PC_show_Keys+0x4b0>)
 8008d20:	4980      	ldr	r1, [pc, #512]	@ (8008f24 <PC_show_Keys+0x4bc>)
 8008d22:	4b57      	ldr	r3, [pc, #348]	@ (8008e80 <PC_show_Keys+0x418>)
 8008d24:	0018      	movs	r0, r3
 8008d26:	f01d fa7d 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d2a:	4b53      	ldr	r3, [pc, #332]	@ (8008e78 <PC_show_Keys+0x410>)
 8008d2c:	781a      	ldrb	r2, [r3, #0]
 8008d2e:	4b54      	ldr	r3, [pc, #336]	@ (8008e80 <PC_show_Keys+0x418>)
 8008d30:	0011      	movs	r1, r2
 8008d32:	0018      	movs	r0, r3
 8008d34:	f7ff fe7d 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(SSIDConfigAddr, SSIDConfig, SSIDMaxLength);
 8008d38:	4b7b      	ldr	r3, [pc, #492]	@ (8008f28 <PC_show_Keys+0x4c0>)
 8008d3a:	487c      	ldr	r0, [pc, #496]	@ (8008f2c <PC_show_Keys+0x4c4>)
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	0019      	movs	r1, r3
 8008d40:	f003 f998 	bl	800c074 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, SSIDConfig);
  sprintf(msg, "%02d - SSID name ---------------------: ", SSIDConfigCmd);
 8008d44:	497a      	ldr	r1, [pc, #488]	@ (8008f30 <PC_show_Keys+0x4c8>)
 8008d46:	4b4e      	ldr	r3, [pc, #312]	@ (8008e80 <PC_show_Keys+0x418>)
 8008d48:	220d      	movs	r2, #13
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f01d fa6a 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d50:	4b49      	ldr	r3, [pc, #292]	@ (8008e78 <PC_show_Keys+0x410>)
 8008d52:	781a      	ldrb	r2, [r3, #0]
 8008d54:	4b4a      	ldr	r3, [pc, #296]	@ (8008e80 <PC_show_Keys+0x418>)
 8008d56:	0011      	movs	r1, r2
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f7ff fe6a 	bl	8008a32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SSIDConfig);  // probably too long to held in same buffer
 8008d5e:	4a72      	ldr	r2, [pc, #456]	@ (8008f28 <PC_show_Keys+0x4c0>)
 8008d60:	4970      	ldr	r1, [pc, #448]	@ (8008f24 <PC_show_Keys+0x4bc>)
 8008d62:	4b47      	ldr	r3, [pc, #284]	@ (8008e80 <PC_show_Keys+0x418>)
 8008d64:	0018      	movs	r0, r3
 8008d66:	f01d fa5d 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d6a:	4b43      	ldr	r3, [pc, #268]	@ (8008e78 <PC_show_Keys+0x410>)
 8008d6c:	781a      	ldrb	r2, [r3, #0]
 8008d6e:	4b44      	ldr	r3, [pc, #272]	@ (8008e80 <PC_show_Keys+0x418>)
 8008d70:	0011      	movs	r1, r2
 8008d72:	0018      	movs	r0, r3
 8008d74:	f7ff fe5d 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(pwdConfigAddr, pwdConfig, pwdMaxLength);
 8008d78:	4b6e      	ldr	r3, [pc, #440]	@ (8008f34 <PC_show_Keys+0x4cc>)
 8008d7a:	486f      	ldr	r0, [pc, #444]	@ (8008f38 <PC_show_Keys+0x4d0>)
 8008d7c:	2240      	movs	r2, #64	@ 0x40
 8008d7e:	0019      	movs	r1, r3
 8008d80:	f003 f978 	bl	800c074 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, pwdConfig);
  sprintf(msg, "%02d - WiFi password -----------------: ", PasswordConfigCmd);
 8008d84:	496d      	ldr	r1, [pc, #436]	@ (8008f3c <PC_show_Keys+0x4d4>)
 8008d86:	4b3e      	ldr	r3, [pc, #248]	@ (8008e80 <PC_show_Keys+0x418>)
 8008d88:	220e      	movs	r2, #14
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f01d fa4a 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d90:	4b39      	ldr	r3, [pc, #228]	@ (8008e78 <PC_show_Keys+0x410>)
 8008d92:	781a      	ldrb	r2, [r3, #0]
 8008d94:	4b3a      	ldr	r3, [pc, #232]	@ (8008e80 <PC_show_Keys+0x418>)
 8008d96:	0011      	movs	r1, r2
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f7ff fe4a 	bl	8008a32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)pwdConfig);  // probably too long to held in same buffer
 8008d9e:	4a65      	ldr	r2, [pc, #404]	@ (8008f34 <PC_show_Keys+0x4cc>)
 8008da0:	4960      	ldr	r1, [pc, #384]	@ (8008f24 <PC_show_Keys+0x4bc>)
 8008da2:	4b37      	ldr	r3, [pc, #220]	@ (8008e80 <PC_show_Keys+0x418>)
 8008da4:	0018      	movs	r0, r3
 8008da6:	f01d fa3d 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008daa:	4b33      	ldr	r3, [pc, #204]	@ (8008e78 <PC_show_Keys+0x410>)
 8008dac:	781a      	ldrb	r2, [r3, #0]
 8008dae:	4b34      	ldr	r3, [pc, #208]	@ (8008e80 <PC_show_Keys+0x418>)
 8008db0:	0011      	movs	r1, r2
 8008db2:	0018      	movs	r0, r3
 8008db4:	f7ff fe3d 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008db8:	4b61      	ldr	r3, [pc, #388]	@ (8008f40 <PC_show_Keys+0x4d8>)
 8008dba:	4862      	ldr	r0, [pc, #392]	@ (8008f44 <PC_show_Keys+0x4dc>)
 8008dbc:	220c      	movs	r2, #12
 8008dbe:	0019      	movs	r1, r3
 8008dc0:	f003 f958 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008dc4:	4a5e      	ldr	r2, [pc, #376]	@ (8008f40 <PC_show_Keys+0x4d8>)
 8008dc6:	4b31      	ldr	r3, [pc, #196]	@ (8008e8c <PC_show_Keys+0x424>)
 8008dc8:	0011      	movs	r1, r2
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f7fc fb14 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Temperature sensor id ---: %s\r\n", AHTTempConfigCmd, Buffer);
 8008dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8008e8c <PC_show_Keys+0x424>)
 8008dd2:	495d      	ldr	r1, [pc, #372]	@ (8008f48 <PC_show_Keys+0x4e0>)
 8008dd4:	482a      	ldr	r0, [pc, #168]	@ (8008e80 <PC_show_Keys+0x418>)
 8008dd6:	220f      	movs	r2, #15
 8008dd8:	f01d fa24 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ddc:	4b26      	ldr	r3, [pc, #152]	@ (8008e78 <PC_show_Keys+0x410>)
 8008dde:	781a      	ldrb	r2, [r3, #0]
 8008de0:	4b27      	ldr	r3, [pc, #156]	@ (8008e80 <PC_show_Keys+0x418>)
 8008de2:	0011      	movs	r1, r2
 8008de4:	0018      	movs	r0, r3
 8008de6:	f7ff fe24 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008dea:	4b58      	ldr	r3, [pc, #352]	@ (8008f4c <PC_show_Keys+0x4e4>)
 8008dec:	4858      	ldr	r0, [pc, #352]	@ (8008f50 <PC_show_Keys+0x4e8>)
 8008dee:	220c      	movs	r2, #12
 8008df0:	0019      	movs	r1, r3
 8008df2:	f003 f93f 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008df6:	4a55      	ldr	r2, [pc, #340]	@ (8008f4c <PC_show_Keys+0x4e4>)
 8008df8:	4b24      	ldr	r3, [pc, #144]	@ (8008e8c <PC_show_Keys+0x424>)
 8008dfa:	0011      	movs	r1, r2
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	f7fc fafb 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Humidity sensor id ------: %s\r\n", AHTHumidConfigCmd, Buffer);
 8008e02:	4b22      	ldr	r3, [pc, #136]	@ (8008e8c <PC_show_Keys+0x424>)
 8008e04:	4953      	ldr	r1, [pc, #332]	@ (8008f54 <PC_show_Keys+0x4ec>)
 8008e06:	481e      	ldr	r0, [pc, #120]	@ (8008e80 <PC_show_Keys+0x418>)
 8008e08:	2210      	movs	r2, #16
 8008e0a:	f01d fa0b 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008e78 <PC_show_Keys+0x410>)
 8008e10:	781a      	ldrb	r2, [r3, #0]
 8008e12:	4b1b      	ldr	r3, [pc, #108]	@ (8008e80 <PC_show_Keys+0x418>)
 8008e14:	0011      	movs	r1, r2
 8008e16:	0018      	movs	r0, r3
 8008e18:	f7ff fe0b 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8008f58 <PC_show_Keys+0x4f0>)
 8008e1e:	484f      	ldr	r0, [pc, #316]	@ (8008f5c <PC_show_Keys+0x4f4>)
 8008e20:	220c      	movs	r2, #12
 8008e22:	0019      	movs	r1, r3
 8008e24:	f003 f926 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008e28:	4a4b      	ldr	r2, [pc, #300]	@ (8008f58 <PC_show_Keys+0x4f0>)
 8008e2a:	4b18      	ldr	r3, [pc, #96]	@ (8008e8c <PC_show_Keys+0x424>)
 8008e2c:	0011      	movs	r1, r2
 8008e2e:	0018      	movs	r0, r3
 8008e30:	f7fc fae2 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Temperature sensor id --: %s\r\n", BMPTempConfigCmd, Buffer);
 8008e34:	4b15      	ldr	r3, [pc, #84]	@ (8008e8c <PC_show_Keys+0x424>)
 8008e36:	494a      	ldr	r1, [pc, #296]	@ (8008f60 <PC_show_Keys+0x4f8>)
 8008e38:	4811      	ldr	r0, [pc, #68]	@ (8008e80 <PC_show_Keys+0x418>)
 8008e3a:	2211      	movs	r2, #17
 8008e3c:	f01d f9f2 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e40:	4b0d      	ldr	r3, [pc, #52]	@ (8008e78 <PC_show_Keys+0x410>)
 8008e42:	781a      	ldrb	r2, [r3, #0]
 8008e44:	4b0e      	ldr	r3, [pc, #56]	@ (8008e80 <PC_show_Keys+0x418>)
 8008e46:	0011      	movs	r1, r2
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f7ff fdf2 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008e4e:	4b45      	ldr	r3, [pc, #276]	@ (8008f64 <PC_show_Keys+0x4fc>)
 8008e50:	4845      	ldr	r0, [pc, #276]	@ (8008f68 <PC_show_Keys+0x500>)
 8008e52:	220c      	movs	r2, #12
 8008e54:	0019      	movs	r1, r3
 8008e56:	f003 f90d 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008e5a:	4a42      	ldr	r2, [pc, #264]	@ (8008f64 <PC_show_Keys+0x4fc>)
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e8c <PC_show_Keys+0x424>)
 8008e5e:	0011      	movs	r1, r2
 8008e60:	0018      	movs	r0, r3
 8008e62:	f7fc fac9 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 AQI sensor id ----------: %s\r\n", ENSAQIConfigCmd, Buffer);
 8008e66:	4b09      	ldr	r3, [pc, #36]	@ (8008e8c <PC_show_Keys+0x424>)
 8008e68:	4940      	ldr	r1, [pc, #256]	@ (8008f6c <PC_show_Keys+0x504>)
 8008e6a:	4805      	ldr	r0, [pc, #20]	@ (8008e80 <PC_show_Keys+0x418>)
 8008e6c:	2212      	movs	r2, #18
 8008e6e:	f01d f9d9 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e72:	4b01      	ldr	r3, [pc, #4]	@ (8008e78 <PC_show_Keys+0x410>)
 8008e74:	781a      	ldrb	r2, [r3, #0]
 8008e76:	e07b      	b.n	8008f70 <PC_show_Keys+0x508>
 8008e78:	20000b51 	.word	0x20000b51
 8008e7c:	0802b298 	.word	0x0802b298
 8008e80:	20000b54 	.word	0x20000b54
 8008e84:	20000b9c 	.word	0x20000b9c
 8008e88:	08080000 	.word	0x08080000
 8008e8c:	20000ba8 	.word	0x20000ba8
 8008e90:	0802b2b8 	.word	0x0802b2b8
 8008e94:	20000bc4 	.word	0x20000bc4
 8008e98:	0808000c 	.word	0x0808000c
 8008e9c:	0802b2e8 	.word	0x0802b2e8
 8008ea0:	20000bd0 	.word	0x20000bd0
 8008ea4:	08080018 	.word	0x08080018
 8008ea8:	0802b318 	.word	0x0802b318
 8008eac:	20000bdc 	.word	0x20000bdc
 8008eb0:	08080024 	.word	0x08080024
 8008eb4:	0802b348 	.word	0x0802b348
 8008eb8:	20000be8 	.word	0x20000be8
 8008ebc:	08080030 	.word	0x08080030
 8008ec0:	0802b378 	.word	0x0802b378
 8008ec4:	20000bf4 	.word	0x20000bf4
 8008ec8:	08080048 	.word	0x08080048
 8008ecc:	0802b3a8 	.word	0x0802b3a8
 8008ed0:	20000c00 	.word	0x20000c00
 8008ed4:	0808003c 	.word	0x0808003c
 8008ed8:	0802b3d8 	.word	0x0802b3d8
 8008edc:	20000c0c 	.word	0x20000c0c
 8008ee0:	08080054 	.word	0x08080054
 8008ee4:	0802b408 	.word	0x0802b408
 8008ee8:	20000c18 	.word	0x20000c18
 8008eec:	08080060 	.word	0x08080060
 8008ef0:	0802b438 	.word	0x0802b438
 8008ef4:	20000c24 	.word	0x20000c24
 8008ef8:	0808006c 	.word	0x0808006c
 8008efc:	0802b468 	.word	0x0802b468
 8008f00:	20000c30 	.word	0x20000c30
 8008f04:	08080078 	.word	0x08080078
 8008f08:	0802b498 	.word	0x0802b498
 8008f0c:	20000c3c 	.word	0x20000c3c
 8008f10:	08080084 	.word	0x08080084
 8008f14:	0802b4c8 	.word	0x0802b4c8
 8008f18:	20000c48 	.word	0x20000c48
 8008f1c:	08080090 	.word	0x08080090
 8008f20:	0802b4f8 	.word	0x0802b4f8
 8008f24:	0802b524 	.word	0x0802b524
 8008f28:	20000c68 	.word	0x20000c68
 8008f2c:	08080200 	.word	0x08080200
 8008f30:	0802b52c 	.word	0x0802b52c
 8008f34:	20000c88 	.word	0x20000c88
 8008f38:	08080220 	.word	0x08080220
 8008f3c:	0802b558 	.word	0x0802b558
 8008f40:	20000cc8 	.word	0x20000cc8
 8008f44:	080800c8 	.word	0x080800c8
 8008f48:	0802b584 	.word	0x0802b584
 8008f4c:	20000cd4 	.word	0x20000cd4
 8008f50:	080800d4 	.word	0x080800d4
 8008f54:	0802b5b4 	.word	0x0802b5b4
 8008f58:	20000ce0 	.word	0x20000ce0
 8008f5c:	080800e0 	.word	0x080800e0
 8008f60:	0802b5e4 	.word	0x0802b5e4
 8008f64:	20000cec 	.word	0x20000cec
 8008f68:	080800ec 	.word	0x080800ec
 8008f6c:	0802b614 	.word	0x0802b614
 8008f70:	4be2      	ldr	r3, [pc, #904]	@ (80092fc <PC_show_Keys+0x894>)
 8008f72:	0011      	movs	r1, r2
 8008f74:	0018      	movs	r0, r3
 8008f76:	f7ff fd5c 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8008f7a:	4be1      	ldr	r3, [pc, #900]	@ (8009300 <PC_show_Keys+0x898>)
 8008f7c:	48e1      	ldr	r0, [pc, #900]	@ (8009304 <PC_show_Keys+0x89c>)
 8008f7e:	220c      	movs	r2, #12
 8008f80:	0019      	movs	r1, r3
 8008f82:	f003 f877 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8008f86:	4ade      	ldr	r2, [pc, #888]	@ (8009300 <PC_show_Keys+0x898>)
 8008f88:	4bdf      	ldr	r3, [pc, #892]	@ (8009308 <PC_show_Keys+0x8a0>)
 8008f8a:	0011      	movs	r1, r2
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	f7fc fa33 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 TVOC sensor id ---------: %s\r\n", ENSTVOCConfigCmd, Buffer);
 8008f92:	4bdd      	ldr	r3, [pc, #884]	@ (8009308 <PC_show_Keys+0x8a0>)
 8008f94:	49dd      	ldr	r1, [pc, #884]	@ (800930c <PC_show_Keys+0x8a4>)
 8008f96:	48d9      	ldr	r0, [pc, #868]	@ (80092fc <PC_show_Keys+0x894>)
 8008f98:	2213      	movs	r2, #19
 8008f9a:	f01d f943 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f9e:	4bdc      	ldr	r3, [pc, #880]	@ (8009310 <PC_show_Keys+0x8a8>)
 8008fa0:	781a      	ldrb	r2, [r3, #0]
 8008fa2:	4bd6      	ldr	r3, [pc, #856]	@ (80092fc <PC_show_Keys+0x894>)
 8008fa4:	0011      	movs	r1, r2
 8008fa6:	0018      	movs	r0, r3
 8008fa8:	f7ff fd43 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8008fac:	4bd9      	ldr	r3, [pc, #868]	@ (8009314 <PC_show_Keys+0x8ac>)
 8008fae:	48da      	ldr	r0, [pc, #872]	@ (8009318 <PC_show_Keys+0x8b0>)
 8008fb0:	220c      	movs	r2, #12
 8008fb2:	0019      	movs	r1, r3
 8008fb4:	f003 f85e 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8008fb8:	4ad6      	ldr	r2, [pc, #856]	@ (8009314 <PC_show_Keys+0x8ac>)
 8008fba:	4bd3      	ldr	r3, [pc, #844]	@ (8009308 <PC_show_Keys+0x8a0>)
 8008fbc:	0011      	movs	r1, r2
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	f7fc fa1a 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 eCO2 sensor id ---------: %s\r\n", ENSeCO2ConfigCmd, Buffer);
 8008fc4:	4bd0      	ldr	r3, [pc, #832]	@ (8009308 <PC_show_Keys+0x8a0>)
 8008fc6:	49d5      	ldr	r1, [pc, #852]	@ (800931c <PC_show_Keys+0x8b4>)
 8008fc8:	48cc      	ldr	r0, [pc, #816]	@ (80092fc <PC_show_Keys+0x894>)
 8008fca:	2214      	movs	r2, #20
 8008fcc:	f01d f92a 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008fd0:	4bcf      	ldr	r3, [pc, #828]	@ (8009310 <PC_show_Keys+0x8a8>)
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	4bc9      	ldr	r3, [pc, #804]	@ (80092fc <PC_show_Keys+0x894>)
 8008fd6:	0011      	movs	r1, r2
 8008fd8:	0018      	movs	r0, r3
 8008fda:	f7ff fd2a 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 8008fde:	4bd0      	ldr	r3, [pc, #832]	@ (8009320 <PC_show_Keys+0x8b8>)
 8008fe0:	48d0      	ldr	r0, [pc, #832]	@ (8009324 <PC_show_Keys+0x8bc>)
 8008fe2:	220c      	movs	r2, #12
 8008fe4:	0019      	movs	r1, r3
 8008fe6:	f003 f845 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 8008fea:	4acd      	ldr	r2, [pc, #820]	@ (8009320 <PC_show_Keys+0x8b8>)
 8008fec:	4bc6      	ldr	r3, [pc, #792]	@ (8009308 <PC_show_Keys+0x8a0>)
 8008fee:	0011      	movs	r1, r2
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	f7fc fa01 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM1p0 sensor id ---------------: %s\r\n", PM1ConfigCmd, Buffer);
 8008ff6:	4bc4      	ldr	r3, [pc, #784]	@ (8009308 <PC_show_Keys+0x8a0>)
 8008ff8:	49cb      	ldr	r1, [pc, #812]	@ (8009328 <PC_show_Keys+0x8c0>)
 8008ffa:	48c0      	ldr	r0, [pc, #768]	@ (80092fc <PC_show_Keys+0x894>)
 8008ffc:	2215      	movs	r2, #21
 8008ffe:	f01d f911 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009002:	4bc3      	ldr	r3, [pc, #780]	@ (8009310 <PC_show_Keys+0x8a8>)
 8009004:	781a      	ldrb	r2, [r3, #0]
 8009006:	4bbd      	ldr	r3, [pc, #756]	@ (80092fc <PC_show_Keys+0x894>)
 8009008:	0011      	movs	r1, r2
 800900a:	0018      	movs	r0, r3
 800900c:	f7ff fd11 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 8009010:	4bc6      	ldr	r3, [pc, #792]	@ (800932c <PC_show_Keys+0x8c4>)
 8009012:	48c7      	ldr	r0, [pc, #796]	@ (8009330 <PC_show_Keys+0x8c8>)
 8009014:	220c      	movs	r2, #12
 8009016:	0019      	movs	r1, r3
 8009018:	f003 f82c 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 800901c:	4ac3      	ldr	r2, [pc, #780]	@ (800932c <PC_show_Keys+0x8c4>)
 800901e:	4bba      	ldr	r3, [pc, #744]	@ (8009308 <PC_show_Keys+0x8a0>)
 8009020:	0011      	movs	r1, r2
 8009022:	0018      	movs	r0, r3
 8009024:	f7fc f9e8 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - PM4p0 sensor id ---------------: %s\r\n", PM4ConfigCmd, Buffer);
 8009028:	4bb7      	ldr	r3, [pc, #732]	@ (8009308 <PC_show_Keys+0x8a0>)
 800902a:	49c2      	ldr	r1, [pc, #776]	@ (8009334 <PC_show_Keys+0x8cc>)
 800902c:	48b3      	ldr	r0, [pc, #716]	@ (80092fc <PC_show_Keys+0x894>)
 800902e:	2216      	movs	r2, #22
 8009030:	f01d f8f8 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009034:	4bb6      	ldr	r3, [pc, #728]	@ (8009310 <PC_show_Keys+0x8a8>)
 8009036:	781a      	ldrb	r2, [r3, #0]
 8009038:	4bb0      	ldr	r3, [pc, #704]	@ (80092fc <PC_show_Keys+0x894>)
 800903a:	0011      	movs	r1, r2
 800903c:	0018      	movs	r0, r3
 800903e:	f7ff fcf8 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8009042:	4bbd      	ldr	r3, [pc, #756]	@ (8009338 <PC_show_Keys+0x8d0>)
 8009044:	48bd      	ldr	r0, [pc, #756]	@ (800933c <PC_show_Keys+0x8d4>)
 8009046:	220c      	movs	r2, #12
 8009048:	0019      	movs	r1, r3
 800904a:	f003 f813 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 800904e:	4aba      	ldr	r2, [pc, #744]	@ (8009338 <PC_show_Keys+0x8d0>)
 8009050:	4bad      	ldr	r3, [pc, #692]	@ (8009308 <PC_show_Keys+0x8a0>)
 8009052:	0011      	movs	r1, r2
 8009054:	0018      	movs	r0, r3
 8009056:	f7fc f9cf 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Temperature sensor id : %s\r\n", SEN55TempConfigCmd, Buffer);
 800905a:	4bab      	ldr	r3, [pc, #684]	@ (8009308 <PC_show_Keys+0x8a0>)
 800905c:	49b8      	ldr	r1, [pc, #736]	@ (8009340 <PC_show_Keys+0x8d8>)
 800905e:	48a7      	ldr	r0, [pc, #668]	@ (80092fc <PC_show_Keys+0x894>)
 8009060:	2217      	movs	r2, #23
 8009062:	f01d f8df 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009066:	4baa      	ldr	r3, [pc, #680]	@ (8009310 <PC_show_Keys+0x8a8>)
 8009068:	781a      	ldrb	r2, [r3, #0]
 800906a:	4ba4      	ldr	r3, [pc, #656]	@ (80092fc <PC_show_Keys+0x894>)
 800906c:	0011      	movs	r1, r2
 800906e:	0018      	movs	r0, r3
 8009070:	f7ff fcdf 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8009074:	4bb3      	ldr	r3, [pc, #716]	@ (8009344 <PC_show_Keys+0x8dc>)
 8009076:	48b4      	ldr	r0, [pc, #720]	@ (8009348 <PC_show_Keys+0x8e0>)
 8009078:	220c      	movs	r2, #12
 800907a:	0019      	movs	r1, r3
 800907c:	f002 fffa 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 8009080:	4ab0      	ldr	r2, [pc, #704]	@ (8009344 <PC_show_Keys+0x8dc>)
 8009082:	4ba1      	ldr	r3, [pc, #644]	@ (8009308 <PC_show_Keys+0x8a0>)
 8009084:	0011      	movs	r1, r2
 8009086:	0018      	movs	r0, r3
 8009088:	f7fc f9b6 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Humidity sensor id ---: %s\r\n", SEN55HumidConfigCmd, Buffer);
 800908c:	4b9e      	ldr	r3, [pc, #632]	@ (8009308 <PC_show_Keys+0x8a0>)
 800908e:	49af      	ldr	r1, [pc, #700]	@ (800934c <PC_show_Keys+0x8e4>)
 8009090:	489a      	ldr	r0, [pc, #616]	@ (80092fc <PC_show_Keys+0x894>)
 8009092:	2218      	movs	r2, #24
 8009094:	f01d f8c6 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009098:	4b9d      	ldr	r3, [pc, #628]	@ (8009310 <PC_show_Keys+0x8a8>)
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	4b97      	ldr	r3, [pc, #604]	@ (80092fc <PC_show_Keys+0x894>)
 800909e:	0011      	movs	r1, r2
 80090a0:	0018      	movs	r0, r3
 80090a2:	f7ff fcc6 	bl	8008a32 <PC_selectout>

#ifdef USE_MAIL
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 80090a6:	4baa      	ldr	r3, [pc, #680]	@ (8009350 <PC_show_Keys+0x8e8>)
 80090a8:	48aa      	ldr	r0, [pc, #680]	@ (8009354 <PC_show_Keys+0x8ec>)
 80090aa:	2230      	movs	r2, #48	@ 0x30
 80090ac:	0019      	movs	r1, r3
 80090ae:	f002 ffe1 	bl	800c074 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send from name ---------: ", SendFromNameConfigCmd);
 80090b2:	49a9      	ldr	r1, [pc, #676]	@ (8009358 <PC_show_Keys+0x8f0>)
 80090b4:	4b91      	ldr	r3, [pc, #580]	@ (80092fc <PC_show_Keys+0x894>)
 80090b6:	2219      	movs	r2, #25
 80090b8:	0018      	movs	r0, r3
 80090ba:	f01d f8b3 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090be:	4b94      	ldr	r3, [pc, #592]	@ (8009310 <PC_show_Keys+0x8a8>)
 80090c0:	781a      	ldrb	r2, [r3, #0]
 80090c2:	4b8e      	ldr	r3, [pc, #568]	@ (80092fc <PC_show_Keys+0x894>)
 80090c4:	0011      	movs	r1, r2
 80090c6:	0018      	movs	r0, r3
 80090c8:	f7ff fcb3 	bl	8008a32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendFromnameConfig);  // probably too long to held in same buffer
 80090cc:	4aa0      	ldr	r2, [pc, #640]	@ (8009350 <PC_show_Keys+0x8e8>)
 80090ce:	49a3      	ldr	r1, [pc, #652]	@ (800935c <PC_show_Keys+0x8f4>)
 80090d0:	4b8a      	ldr	r3, [pc, #552]	@ (80092fc <PC_show_Keys+0x894>)
 80090d2:	0018      	movs	r0, r3
 80090d4:	f01d f8a6 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090d8:	4b8d      	ldr	r3, [pc, #564]	@ (8009310 <PC_show_Keys+0x8a8>)
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	4b87      	ldr	r3, [pc, #540]	@ (80092fc <PC_show_Keys+0x894>)
 80090de:	0011      	movs	r1, r2
 80090e0:	0018      	movs	r0, r3
 80090e2:	f7ff fca6 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 80090e6:	4b9e      	ldr	r3, [pc, #632]	@ (8009360 <PC_show_Keys+0x8f8>)
 80090e8:	489e      	ldr	r0, [pc, #632]	@ (8009364 <PC_show_Keys+0x8fc>)
 80090ea:	2230      	movs	r2, #48	@ 0x30
 80090ec:	0019      	movs	r1, r3
 80090ee:	f002 ffc1 	bl	800c074 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send to name -----------: ", SendToNameConfigCmd);
 80090f2:	499d      	ldr	r1, [pc, #628]	@ (8009368 <PC_show_Keys+0x900>)
 80090f4:	4b81      	ldr	r3, [pc, #516]	@ (80092fc <PC_show_Keys+0x894>)
 80090f6:	221a      	movs	r2, #26
 80090f8:	0018      	movs	r0, r3
 80090fa:	f01d f893 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090fe:	4b84      	ldr	r3, [pc, #528]	@ (8009310 <PC_show_Keys+0x8a8>)
 8009100:	781a      	ldrb	r2, [r3, #0]
 8009102:	4b7e      	ldr	r3, [pc, #504]	@ (80092fc <PC_show_Keys+0x894>)
 8009104:	0011      	movs	r1, r2
 8009106:	0018      	movs	r0, r3
 8009108:	f7ff fc93 	bl	8008a32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendTonameConfig);  // probably too long to held in same buffer
 800910c:	4a94      	ldr	r2, [pc, #592]	@ (8009360 <PC_show_Keys+0x8f8>)
 800910e:	4993      	ldr	r1, [pc, #588]	@ (800935c <PC_show_Keys+0x8f4>)
 8009110:	4b7a      	ldr	r3, [pc, #488]	@ (80092fc <PC_show_Keys+0x894>)
 8009112:	0018      	movs	r0, r3
 8009114:	f01d f886 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009118:	4b7d      	ldr	r3, [pc, #500]	@ (8009310 <PC_show_Keys+0x8a8>)
 800911a:	781a      	ldrb	r2, [r3, #0]
 800911c:	4b77      	ldr	r3, [pc, #476]	@ (80092fc <PC_show_Keys+0x894>)
 800911e:	0011      	movs	r1, r2
 8009120:	0018      	movs	r0, r3
 8009122:	f7ff fc86 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8009126:	4b91      	ldr	r3, [pc, #580]	@ (800936c <PC_show_Keys+0x904>)
 8009128:	4891      	ldr	r0, [pc, #580]	@ (8009370 <PC_show_Keys+0x908>)
 800912a:	2230      	movs	r2, #48	@ 0x30
 800912c:	0019      	movs	r1, r3
 800912e:	f002 ffa1 	bl	800c074 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored SMTP2go API key --------: ", MailAPIKeyConfigCmd);
 8009132:	4990      	ldr	r1, [pc, #576]	@ (8009374 <PC_show_Keys+0x90c>)
 8009134:	4b71      	ldr	r3, [pc, #452]	@ (80092fc <PC_show_Keys+0x894>)
 8009136:	221b      	movs	r2, #27
 8009138:	0018      	movs	r0, r3
 800913a:	f01d f873 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800913e:	4b74      	ldr	r3, [pc, #464]	@ (8009310 <PC_show_Keys+0x8a8>)
 8009140:	781a      	ldrb	r2, [r3, #0]
 8009142:	4b6e      	ldr	r3, [pc, #440]	@ (80092fc <PC_show_Keys+0x894>)
 8009144:	0011      	movs	r1, r2
 8009146:	0018      	movs	r0, r3
 8009148:	f7ff fc73 	bl	8008a32 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)MailAPIKeyConfig);  // probably too long to held in same buffer
 800914c:	4a87      	ldr	r2, [pc, #540]	@ (800936c <PC_show_Keys+0x904>)
 800914e:	4983      	ldr	r1, [pc, #524]	@ (800935c <PC_show_Keys+0x8f4>)
 8009150:	4b6a      	ldr	r3, [pc, #424]	@ (80092fc <PC_show_Keys+0x894>)
 8009152:	0018      	movs	r0, r3
 8009154:	f01d f866 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009158:	4b6d      	ldr	r3, [pc, #436]	@ (8009310 <PC_show_Keys+0x8a8>)
 800915a:	781a      	ldrb	r2, [r3, #0]
 800915c:	4b67      	ldr	r3, [pc, #412]	@ (80092fc <PC_show_Keys+0x894>)
 800915e:	0011      	movs	r1, r2
 8009160:	0018      	movs	r0, r3
 8009162:	f7ff fc66 	bl	8008a32 <PC_selectout>
#endif

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8009166:	4b84      	ldr	r3, [pc, #528]	@ (8009378 <PC_show_Keys+0x910>)
 8009168:	4884      	ldr	r0, [pc, #528]	@ (800937c <PC_show_Keys+0x914>)
 800916a:	220c      	movs	r2, #12
 800916c:	0019      	movs	r1, r3
 800916e:	f002 ff81 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 8009172:	4a81      	ldr	r2, [pc, #516]	@ (8009378 <PC_show_Keys+0x910>)
 8009174:	4b64      	ldr	r3, [pc, #400]	@ (8009308 <PC_show_Keys+0x8a0>)
 8009176:	0011      	movs	r1, r2
 8009178:	0018      	movs	r0, r3
 800917a:	f7fc f93d 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Air pressure sensor id -: %s\r\n", hPaConfigCmd, Buffer);
 800917e:	4b62      	ldr	r3, [pc, #392]	@ (8009308 <PC_show_Keys+0x8a0>)
 8009180:	497f      	ldr	r1, [pc, #508]	@ (8009380 <PC_show_Keys+0x918>)
 8009182:	485e      	ldr	r0, [pc, #376]	@ (80092fc <PC_show_Keys+0x894>)
 8009184:	221c      	movs	r2, #28
 8009186:	f01d f84d 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800918a:	4b61      	ldr	r3, [pc, #388]	@ (8009310 <PC_show_Keys+0x8a8>)
 800918c:	781a      	ldrb	r2, [r3, #0]
 800918e:	4b5b      	ldr	r3, [pc, #364]	@ (80092fc <PC_show_Keys+0x894>)
 8009190:	0011      	movs	r1, r2
 8009192:	0018      	movs	r0, r3
 8009194:	f7ff fc4d 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(UptimeConfigAddr, UptimeConfig, IdSize);
 8009198:	4b7a      	ldr	r3, [pc, #488]	@ (8009384 <PC_show_Keys+0x91c>)
 800919a:	487b      	ldr	r0, [pc, #492]	@ (8009388 <PC_show_Keys+0x920>)
 800919c:	220c      	movs	r2, #12
 800919e:	0019      	movs	r1, r3
 80091a0:	f002 ff68 	bl	800c074 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, UptimeConfig);
 80091a4:	4a77      	ldr	r2, [pc, #476]	@ (8009384 <PC_show_Keys+0x91c>)
 80091a6:	4b58      	ldr	r3, [pc, #352]	@ (8009308 <PC_show_Keys+0x8a0>)
 80091a8:	0011      	movs	r1, r2
 80091aa:	0018      	movs	r0, r3
 80091ac:	f7fc f924 	bl	80053f8 <uint8ArrayToString>
  sprintf(msg, "%02d - Uptime sensor id --------------: %s\r\n", UptimeConfigCmd, Buffer);
 80091b0:	4b55      	ldr	r3, [pc, #340]	@ (8009308 <PC_show_Keys+0x8a0>)
 80091b2:	4976      	ldr	r1, [pc, #472]	@ (800938c <PC_show_Keys+0x924>)
 80091b4:	4851      	ldr	r0, [pc, #324]	@ (80092fc <PC_show_Keys+0x894>)
 80091b6:	221d      	movs	r2, #29
 80091b8:	f01d f834 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091bc:	4b54      	ldr	r3, [pc, #336]	@ (8009310 <PC_show_Keys+0x8a8>)
 80091be:	781a      	ldrb	r2, [r3, #0]
 80091c0:	4b4e      	ldr	r3, [pc, #312]	@ (80092fc <PC_show_Keys+0x894>)
 80091c2:	0011      	movs	r1, r2
 80091c4:	0018      	movs	r0, r3
 80091c6:	f7ff fc34 	bl	8008a32 <PC_selectout>

  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUploadConfig, URLToUploadMaxLength);
 80091ca:	4b71      	ldr	r3, [pc, #452]	@ (8009390 <PC_show_Keys+0x928>)
 80091cc:	4871      	ldr	r0, [pc, #452]	@ (8009394 <PC_show_Keys+0x92c>)
 80091ce:	2230      	movs	r2, #48	@ 0x30
 80091d0:	0019      	movs	r1, r3
 80091d2:	f002 ff4f 	bl	800c074 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - URL to upload -----------------: ", URLToUploadConfigCmd);
 80091d6:	4970      	ldr	r1, [pc, #448]	@ (8009398 <PC_show_Keys+0x930>)
 80091d8:	4b48      	ldr	r3, [pc, #288]	@ (80092fc <PC_show_Keys+0x894>)
 80091da:	221e      	movs	r2, #30
 80091dc:	0018      	movs	r0, r3
 80091de:	f01d f821 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091e2:	4b4b      	ldr	r3, [pc, #300]	@ (8009310 <PC_show_Keys+0x8a8>)
 80091e4:	781a      	ldrb	r2, [r3, #0]
 80091e6:	4b45      	ldr	r3, [pc, #276]	@ (80092fc <PC_show_Keys+0x894>)
 80091e8:	0011      	movs	r1, r2
 80091ea:	0018      	movs	r0, r3
 80091ec:	f7ff fc21 	bl	8008a32 <PC_selectout>
  if (strlen((char*)URLToUploadConfig) == 0) {
 80091f0:	4b67      	ldr	r3, [pc, #412]	@ (8009390 <PC_show_Keys+0x928>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d11b      	bne.n	8009230 <PC_show_Keys+0x7c8>
    sprintf(msg, "Undefined, defaulted to ");
 80091f8:	4a68      	ldr	r2, [pc, #416]	@ (800939c <PC_show_Keys+0x934>)
 80091fa:	4b40      	ldr	r3, [pc, #256]	@ (80092fc <PC_show_Keys+0x894>)
 80091fc:	0011      	movs	r1, r2
 80091fe:	0018      	movs	r0, r3
 8009200:	f01d f810 	bl	8026224 <siprintf>
    PC_selectout(&msg[0], usb_out);
 8009204:	4b42      	ldr	r3, [pc, #264]	@ (8009310 <PC_show_Keys+0x8a8>)
 8009206:	781a      	ldrb	r2, [r3, #0]
 8009208:	4b3c      	ldr	r3, [pc, #240]	@ (80092fc <PC_show_Keys+0x894>)
 800920a:	0011      	movs	r1, r2
 800920c:	0018      	movs	r0, r3
 800920e:	f7ff fc10 	bl	8008a32 <PC_selectout>
    PC_selectout((char*)API, usb_out);
 8009212:	4b3f      	ldr	r3, [pc, #252]	@ (8009310 <PC_show_Keys+0x8a8>)
 8009214:	781a      	ldrb	r2, [r3, #0]
 8009216:	4b62      	ldr	r3, [pc, #392]	@ (80093a0 <PC_show_Keys+0x938>)
 8009218:	0011      	movs	r1, r2
 800921a:	0018      	movs	r0, r3
 800921c:	f7ff fc09 	bl	8008a32 <PC_selectout>
    PC_selectout("\r\n\0", usb_out);
 8009220:	4b3b      	ldr	r3, [pc, #236]	@ (8009310 <PC_show_Keys+0x8a8>)
 8009222:	781a      	ldrb	r2, [r3, #0]
 8009224:	4b5f      	ldr	r3, [pc, #380]	@ (80093a4 <PC_show_Keys+0x93c>)
 8009226:	0011      	movs	r1, r2
 8009228:	0018      	movs	r0, r3
 800922a:	f7ff fc02 	bl	8008a32 <PC_selectout>
 800922e:	e00c      	b.n	800924a <PC_show_Keys+0x7e2>
  }
  else {
    sprintf(msg, "%s\r\n", (char*)URLToUploadConfig);  // probably too long to held in same buffer
 8009230:	4a57      	ldr	r2, [pc, #348]	@ (8009390 <PC_show_Keys+0x928>)
 8009232:	494a      	ldr	r1, [pc, #296]	@ (800935c <PC_show_Keys+0x8f4>)
 8009234:	4b31      	ldr	r3, [pc, #196]	@ (80092fc <PC_show_Keys+0x894>)
 8009236:	0018      	movs	r0, r3
 8009238:	f01c fff4 	bl	8026224 <siprintf>
    PC_selectout(&msg[0], usb_out);
 800923c:	4b34      	ldr	r3, [pc, #208]	@ (8009310 <PC_show_Keys+0x8a8>)
 800923e:	781a      	ldrb	r2, [r3, #0]
 8009240:	4b2e      	ldr	r3, [pc, #184]	@ (80092fc <PC_show_Keys+0x894>)
 8009242:	0011      	movs	r1, r2
 8009244:	0018      	movs	r0, r3
 8009246:	f7ff fbf4 	bl	8008a32 <PC_selectout>
  }

  sprintf(msg, "%02d - Clear all definitions in EEPROM\r\n", clearDefsCmd);
 800924a:	4957      	ldr	r1, [pc, #348]	@ (80093a8 <PC_show_Keys+0x940>)
 800924c:	4b2b      	ldr	r3, [pc, #172]	@ (80092fc <PC_show_Keys+0x894>)
 800924e:	221f      	movs	r2, #31
 8009250:	0018      	movs	r0, r3
 8009252:	f01c ffe7 	bl	8026224 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009256:	4b2e      	ldr	r3, [pc, #184]	@ (8009310 <PC_show_Keys+0x8a8>)
 8009258:	781a      	ldrb	r2, [r3, #0]
 800925a:	4b28      	ldr	r3, [pc, #160]	@ (80092fc <PC_show_Keys+0x894>)
 800925c:	0011      	movs	r1, r2
 800925e:	0018      	movs	r0, r3
 8009260:	f7ff fbe7 	bl	8008a32 <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8009264:	4b51      	ldr	r3, [pc, #324]	@ (80093ac <PC_show_Keys+0x944>)
 8009266:	0018      	movs	r0, r3
 8009268:	f7ff fbbe 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 800926c:	200a      	movs	r0, #10
 800926e:	f00b fb31 	bl	80148d4 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 8009272:	4b4f      	ldr	r3, [pc, #316]	@ (80093b0 <PC_show_Keys+0x948>)
 8009274:	0018      	movs	r0, r3
 8009276:	f7ff fbb7 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 800927a:	200a      	movs	r0, #10
 800927c:	f00b fb2a 	bl	80148d4 <HAL_Delay>
  printf_USB(" command example for air pressure => #28,6a\r\n");
 8009280:	4b4c      	ldr	r3, [pc, #304]	@ (80093b4 <PC_show_Keys+0x94c>)
 8009282:	0018      	movs	r0, r3
 8009284:	f7ff fbb0 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 8009288:	200a      	movs	r0, #10
 800928a:	f00b fb23 	bl	80148d4 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 800928e:	4b4a      	ldr	r3, [pc, #296]	@ (80093b8 <PC_show_Keys+0x950>)
 8009290:	0018      	movs	r0, r3
 8009292:	f7ff fba9 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 8009296:	200a      	movs	r0, #10
 8009298:	f00b fb1c 	bl	80148d4 <HAL_Delay>
  printf_USB(" from opensensemap.org in your account to this input.\r\n");
 800929c:	4b47      	ldr	r3, [pc, #284]	@ (80093bc <PC_show_Keys+0x954>)
 800929e:	0018      	movs	r0, r3
 80092a0:	f7ff fba2 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 80092a4:	200a      	movs	r0, #10
 80092a6:	f00b fb15 	bl	80148d4 <HAL_Delay>
  printf_USB("Command example for a full key for PM10 sensor =>");
 80092aa:	4b45      	ldr	r3, [pc, #276]	@ (80093c0 <PC_show_Keys+0x958>)
 80092ac:	0018      	movs	r0, r3
 80092ae:	f7ff fb9b 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 80092b2:	200a      	movs	r0, #10
 80092b4:	f00b fb0e 	bl	80148d4 <HAL_Delay>
  printf_USB(" $08,67af09374cdef30007b35055\r\n");
 80092b8:	4b42      	ldr	r3, [pc, #264]	@ (80093c4 <PC_show_Keys+0x95c>)
 80092ba:	0018      	movs	r0, r3
 80092bc:	f7ff fb94 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 80092c0:	200a      	movs	r0, #10
 80092c2:	f00b fb07 	bl	80148d4 <HAL_Delay>
  printf_USB("For changing string entries use prefix S, example: ");
 80092c6:	4b40      	ldr	r3, [pc, #256]	@ (80093c8 <PC_show_Keys+0x960>)
 80092c8:	0018      	movs	r0, r3
 80092ca:	f7ff fb8d 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 80092ce:	200a      	movs	r0, #10
 80092d0:	f00b fb00 	bl	80148d4 <HAL_Delay>
  printf_USB("S12,Testsysteem (max 12 chars)\r\n");
 80092d4:	4b3d      	ldr	r3, [pc, #244]	@ (80093cc <PC_show_Keys+0x964>)
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7ff fb86 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 80092dc:	200a      	movs	r0, #10
 80092de:	f00b faf9 	bl	80148d4 <HAL_Delay>
  printf_USB("To clear a string: $30,000000000000000000000000\r\n");
 80092e2:	4b3b      	ldr	r3, [pc, #236]	@ (80093d0 <PC_show_Keys+0x968>)
 80092e4:	0018      	movs	r0, r3
 80092e6:	f7ff fb7f 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 80092ea:	200a      	movs	r0, #10
 80092ec:	f00b faf2 	bl	80148d4 <HAL_Delay>
  printf_USB("L - toggle logging on/off, current: %s\r\n", usblog?"on":"off");
 80092f0:	4b38      	ldr	r3, [pc, #224]	@ (80093d4 <PC_show_Keys+0x96c>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d071      	beq.n	80093dc <PC_show_Keys+0x974>
 80092f8:	4b37      	ldr	r3, [pc, #220]	@ (80093d8 <PC_show_Keys+0x970>)
 80092fa:	e070      	b.n	80093de <PC_show_Keys+0x976>
 80092fc:	20000b54 	.word	0x20000b54
 8009300:	20000cf8 	.word	0x20000cf8
 8009304:	080800f8 	.word	0x080800f8
 8009308:	20000ba8 	.word	0x20000ba8
 800930c:	0802b644 	.word	0x0802b644
 8009310:	20000b51 	.word	0x20000b51
 8009314:	20000d04 	.word	0x20000d04
 8009318:	08080104 	.word	0x08080104
 800931c:	0802b674 	.word	0x0802b674
 8009320:	20000d10 	.word	0x20000d10
 8009324:	080800b0 	.word	0x080800b0
 8009328:	0802b6a4 	.word	0x0802b6a4
 800932c:	20000d1c 	.word	0x20000d1c
 8009330:	080800bc 	.word	0x080800bc
 8009334:	0802b6d4 	.word	0x0802b6d4
 8009338:	20000d28 	.word	0x20000d28
 800933c:	08080170 	.word	0x08080170
 8009340:	0802b704 	.word	0x0802b704
 8009344:	20000d34 	.word	0x20000d34
 8009348:	0808017c 	.word	0x0808017c
 800934c:	0802b734 	.word	0x0802b734
 8009350:	20000d40 	.word	0x20000d40
 8009354:	08080260 	.word	0x08080260
 8009358:	0802b764 	.word	0x0802b764
 800935c:	0802b524 	.word	0x0802b524
 8009360:	20000d70 	.word	0x20000d70
 8009364:	08080290 	.word	0x08080290
 8009368:	0802b790 	.word	0x0802b790
 800936c:	20000da0 	.word	0x20000da0
 8009370:	080802c0 	.word	0x080802c0
 8009374:	0802b7bc 	.word	0x0802b7bc
 8009378:	20000dd0 	.word	0x20000dd0
 800937c:	08080188 	.word	0x08080188
 8009380:	0802b7e8 	.word	0x0802b7e8
 8009384:	20000ddc 	.word	0x20000ddc
 8009388:	080801a0 	.word	0x080801a0
 800938c:	0802b818 	.word	0x0802b818
 8009390:	20000de8 	.word	0x20000de8
 8009394:	08080110 	.word	0x08080110
 8009398:	0802b848 	.word	0x0802b848
 800939c:	0802b874 	.word	0x0802b874
 80093a0:	0802b890 	.word	0x0802b890
 80093a4:	0802b8b4 	.word	0x0802b8b4
 80093a8:	0802b8b8 	.word	0x0802b8b8
 80093ac:	0802b8e4 	.word	0x0802b8e4
 80093b0:	0802b8fc 	.word	0x0802b8fc
 80093b4:	0802b928 	.word	0x0802b928
 80093b8:	0802b958 	.word	0x0802b958
 80093bc:	0802b994 	.word	0x0802b994
 80093c0:	0802b9cc 	.word	0x0802b9cc
 80093c4:	0802ba00 	.word	0x0802ba00
 80093c8:	0802ba20 	.word	0x0802ba20
 80093cc:	0802ba54 	.word	0x0802ba54
 80093d0:	0802ba78 	.word	0x0802ba78
 80093d4:	200010f7 	.word	0x200010f7
 80093d8:	0802baac 	.word	0x0802baac
 80093dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009418 <PC_show_Keys+0x9b0>)
 80093de:	4a0f      	ldr	r2, [pc, #60]	@ (800941c <PC_show_Keys+0x9b4>)
 80093e0:	0019      	movs	r1, r3
 80093e2:	0010      	movs	r0, r2
 80093e4:	f7ff fb00 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 80093e8:	200a      	movs	r0, #10
 80093ea:	f00b fa73 	bl	80148d4 <HAL_Delay>
  printf_USB("B - show build information\r\n");
 80093ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009420 <PC_show_Keys+0x9b8>)
 80093f0:	0018      	movs	r0, r3
 80093f2:	f7ff faf9 	bl	80089e8 <printf_USB>
  HAL_Delay(10);
 80093f6:	200a      	movs	r0, #10
 80093f8:	f00b fa6c 	bl	80148d4 <HAL_Delay>
  if (!usb_out) {
 80093fc:	4b09      	ldr	r3, [pc, #36]	@ (8009424 <PC_show_Keys+0x9bc>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2201      	movs	r2, #1
 8009402:	4053      	eors	r3, r2
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <PC_show_Keys+0x9aa>
    printf("A sensor key can only be changed by USB input or the by configuration programm.\r\n");
 800940a:	4b07      	ldr	r3, [pc, #28]	@ (8009428 <PC_show_Keys+0x9c0>)
 800940c:	0018      	movs	r0, r3
 800940e:	f01c feff 	bl	8026210 <puts>
  }
}
 8009412:	46c0      	nop			@ (mov r8, r8)
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	0802bab0 	.word	0x0802bab0
 800941c:	0802bab4 	.word	0x0802bab4
 8009420:	0802bae0 	.word	0x0802bae0
 8009424:	20000b51 	.word	0x20000b51
 8009428:	0802bb00 	.word	0x0802bb00

0800942c <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	4b20      	ldr	r3, [pc, #128]	@ (80094bc <ascii_to_uint8+0x90>)
 800943c:	18d3      	adds	r3, r2, r3
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	001a      	movs	r2, r3
 8009442:	2304      	movs	r3, #4
 8009444:	4013      	ands	r3, r2
 8009446:	d00a      	beq.n	800945e <ascii_to_uint8+0x32>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3301      	adds	r3, #1
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	4b1a      	ldr	r3, [pc, #104]	@ (80094bc <ascii_to_uint8+0x90>)
 8009452:	18d3      	adds	r3, r2, r3
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	001a      	movs	r2, r3
 8009458:	2304      	movs	r3, #4
 800945a:	4013      	ands	r3, r2
 800945c:	d105      	bne.n	800946a <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 800945e:	4b18      	ldr	r3, [pc, #96]	@ (80094c0 <ascii_to_uint8+0x94>)
 8009460:	0018      	movs	r0, r3
 8009462:	f7ff fac1 	bl	80089e8 <printf_USB>
    return 100;
 8009466:	2364      	movs	r3, #100	@ 0x64
 8009468:	e024      	b.n	80094b4 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	1c1a      	adds	r2, r3, #0
 8009470:	0092      	lsls	r2, r2, #2
 8009472:	18d3      	adds	r3, r2, r3
 8009474:	18db      	adds	r3, r3, r3
 8009476:	b2da      	uxtb	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3301      	adds	r3, #1
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	18d3      	adds	r3, r2, r3
 8009480:	b2da      	uxtb	r2, r3
 8009482:	210f      	movs	r1, #15
 8009484:	187b      	adds	r3, r7, r1
 8009486:	3a10      	subs	r2, #16
 8009488:	701a      	strb	r2, [r3, #0]

  if (value >= maxCmd) {
 800948a:	187b      	adds	r3, r7, r1
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b1f      	cmp	r3, #31
 8009490:	d905      	bls.n	800949e <ascii_to_uint8+0x72>
    printf_USB("Error: value out of range\r\n");
 8009492:	4b0c      	ldr	r3, [pc, #48]	@ (80094c4 <ascii_to_uint8+0x98>)
 8009494:	0018      	movs	r0, r3
 8009496:	f7ff faa7 	bl	80089e8 <printf_USB>
    return 100;
 800949a:	2364      	movs	r3, #100	@ 0x64
 800949c:	e00a      	b.n	80094b4 <ascii_to_uint8+0x88>
  }
  if (value == clearDefsCmd) {
 800949e:	220f      	movs	r2, #15
 80094a0:	18bb      	adds	r3, r7, r2
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b1f      	cmp	r3, #31
 80094a6:	d102      	bne.n	80094ae <ascii_to_uint8+0x82>
    value = ClearConfigCmd;
 80094a8:	18bb      	adds	r3, r7, r2
 80094aa:	22fd      	movs	r2, #253	@ 0xfd
 80094ac:	701a      	strb	r2, [r3, #0]
  }
  return (uint8_t)value;
 80094ae:	230f      	movs	r3, #15
 80094b0:	18fb      	adds	r3, r7, r3
 80094b2:	781b      	ldrb	r3, [r3, #0]
}
 80094b4:	0018      	movs	r0, r3
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b004      	add	sp, #16
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	0802ebb8 	.word	0x0802ebb8
 80094c0:	0802bb54 	.word	0x0802bb54
 80094c4:	0802bb7c 	.word	0x0802bb7c

080094c8 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 80094c8:	b590      	push	{r4, r7, lr}
 80094ca:	b0d9      	sub	sp, #356	@ 0x164
 80094cc:	af3e      	add	r7, sp, #248	@ 0xf8
 80094ce:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 80094d0:	f019 fdea 	bl	80230a8 <GetUsbRxDataSize>
 80094d4:	0003      	movs	r3, r0
 80094d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint8_t r = 0;
 80094d8:	2367      	movs	r3, #103	@ 0x67
 80094da:	18fb      	adds	r3, r7, r3
 80094dc:	2200      	movs	r2, #0
 80094de:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 80094e0:	2366      	movs	r3, #102	@ 0x66
 80094e2:	18fb      	adds	r3, r7, r3
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
  char Buffer[pwdMaxLength];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2124      	movs	r1, #36	@ 0x24
 80094ec:	0018      	movs	r0, r3
 80094ee:	f01c ffe9 	bl	80264c4 <strchr>
 80094f2:	0003      	movs	r3, r0
 80094f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != 28)){
 80094f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d109      	bne.n	8009510 <Process_USB_input+0x48>
 80094fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d006      	beq.n	8009510 <Process_USB_input+0x48>
 8009502:	4bc6      	ldr	r3, [pc, #792]	@ (800981c <Process_USB_input+0x354>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b1c      	cmp	r3, #28
 8009508:	d002      	beq.n	8009510 <Process_USB_input+0x48>
      len = 28;
 800950a:	4bc4      	ldr	r3, [pc, #784]	@ (800981c <Process_USB_input+0x354>)
 800950c:	221c      	movs	r2, #28
 800950e:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_S);  // zoek op S
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2153      	movs	r1, #83	@ 0x53
 8009514:	0018      	movs	r0, r3
 8009516:	f01c ffd5 	bl	80264c4 <strchr>
 800951a:	0003      	movs	r3, r0
 800951c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != pwdMaxLength)){
 800951e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009520:	2b01      	cmp	r3, #1
 8009522:	d109      	bne.n	8009538 <Process_USB_input+0x70>
 8009524:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009526:	2b00      	cmp	r3, #0
 8009528:	d006      	beq.n	8009538 <Process_USB_input+0x70>
 800952a:	4bbc      	ldr	r3, [pc, #752]	@ (800981c <Process_USB_input+0x354>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b40      	cmp	r3, #64	@ 0x40
 8009530:	d002      	beq.n	8009538 <Process_USB_input+0x70>
      len = pwdMaxLength;
 8009532:	4bba      	ldr	r3, [pc, #744]	@ (800981c <Process_USB_input+0x354>)
 8009534:	2240      	movs	r2, #64	@ 0x40
 8009536:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_L);  // Search for 'L'to toggle USB logging
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	214c      	movs	r1, #76	@ 0x4c
 800953c:	0018      	movs	r0, r3
 800953e:	f01c ffc1 	bl	80264c4 <strchr>
 8009542:	0003      	movs	r3, r0
 8009544:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 8009546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009548:	2b01      	cmp	r3, #1
 800954a:	d131      	bne.n	80095b0 <Process_USB_input+0xe8>
 800954c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800954e:	2b00      	cmp	r3, #0
 8009550:	d02e      	beq.n	80095b0 <Process_USB_input+0xe8>
    usblog = !usblog; // log info to usb too
 8009552:	4bb3      	ldr	r3, [pc, #716]	@ (8009820 <Process_USB_input+0x358>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	1e5a      	subs	r2, r3, #1
 8009558:	4193      	sbcs	r3, r2
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2201      	movs	r2, #1
 800955e:	4053      	eors	r3, r2
 8009560:	b2db      	uxtb	r3, r3
 8009562:	1c1a      	adds	r2, r3, #0
 8009564:	2301      	movs	r3, #1
 8009566:	4013      	ands	r3, r2
 8009568:	b2da      	uxtb	r2, r3
 800956a:	4bad      	ldr	r3, [pc, #692]	@ (8009820 <Process_USB_input+0x358>)
 800956c:	701a      	strb	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800956e:	f00c f9bf 	bl	80158f0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, USBlogstatusConfigAddr, usblog);
 8009572:	4bab      	ldr	r3, [pc, #684]	@ (8009820 <Process_USB_input+0x358>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	001a      	movs	r2, r3
 8009578:	4baa      	ldr	r3, [pc, #680]	@ (8009824 <Process_USB_input+0x35c>)
 800957a:	0019      	movs	r1, r3
 800957c:	2000      	movs	r0, #0
 800957e:	f00c fa1f 	bl	80159c0 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Lock();
 8009582:	f00c f9e3 	bl	801594c <HAL_FLASHEx_DATAEEPROM_Lock>
    printf_USB("\r\nSwitching USB logging to %s\r\n", usblog?"on":"off");
 8009586:	4ba6      	ldr	r3, [pc, #664]	@ (8009820 <Process_USB_input+0x358>)
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <Process_USB_input+0xca>
 800958e:	4ba6      	ldr	r3, [pc, #664]	@ (8009828 <Process_USB_input+0x360>)
 8009590:	e000      	b.n	8009594 <Process_USB_input+0xcc>
 8009592:	4ba6      	ldr	r3, [pc, #664]	@ (800982c <Process_USB_input+0x364>)
 8009594:	4aa6      	ldr	r2, [pc, #664]	@ (8009830 <Process_USB_input+0x368>)
 8009596:	0019      	movs	r1, r3
 8009598:	0010      	movs	r0, r2
 800959a:	f7ff fa25 	bl	80089e8 <printf_USB>
    length = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 80095a8:	f019 fd66 	bl	8023078 <ResetUsbRxDataSize>
    return true;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e20b      	b.n	80099c8 <Process_USB_input+0x500>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_B);  // Search for 'B'to show the build
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2142      	movs	r1, #66	@ 0x42
 80095b4:	0018      	movs	r0, r3
 80095b6:	f01c ff85 	bl	80264c4 <strchr>
 80095ba:	0003      	movs	r3, r0
 80095bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 80095be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d10f      	bne.n	80095e4 <Process_USB_input+0x11c>
 80095c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00c      	beq.n	80095e4 <Process_USB_input+0x11c>
    BinaryReleaseInfo();
 80095ca:	f00a fc95 	bl	8013ef8 <BinaryReleaseInfo>
    showUpTime();
 80095ce:	f000 fb8d 	bl	8009cec <showUpTime>
    length = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 80095dc:	f019 fd4c 	bl	8023078 <ResetUsbRxDataSize>
    return true;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e1f1      	b.n	80099c8 <Process_USB_input+0x500>
  }
  if ((length >= len) || (data[length-1] == 13)) {
 80095e4:	4b8d      	ldr	r3, [pc, #564]	@ (800981c <Process_USB_input+0x354>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d207      	bcs.n	80095fe <Process_USB_input+0x136>
 80095ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095f0:	3b01      	subs	r3, #1
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	18d3      	adds	r3, r2, r3
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	2b0d      	cmp	r3, #13
 80095fa:	d000      	beq.n	80095fe <Process_USB_input+0x136>
 80095fc:	e1d1      	b.n	80099a2 <Process_USB_input+0x4da>
    // 'S' is for entering a ASCII string
    if (data[length-1] == 13) {
 80095fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009600:	3b01      	subs	r3, #1
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	18d3      	adds	r3, r2, r3
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b0d      	cmp	r3, #13
 800960a:	d109      	bne.n	8009620 <Process_USB_input+0x158>
      printf_USB("Inputstring detected, string terminated\r\n");
 800960c:	4b89      	ldr	r3, [pc, #548]	@ (8009834 <Process_USB_input+0x36c>)
 800960e:	0018      	movs	r0, r3
 8009610:	f7ff f9ea 	bl	80089e8 <printf_USB>
      data[length-1] = 0;
 8009614:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009616:	3b01      	subs	r3, #1
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	18d3      	adds	r3, r2, r3
 800961c:	2200      	movs	r2, #0
 800961e:	701a      	strb	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$') || (data[0] == 'S') || (data[0] == 'E')) {
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b23      	cmp	r3, #35	@ 0x23
 8009626:	d00c      	beq.n	8009642 <Process_USB_input+0x17a>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b24      	cmp	r3, #36	@ 0x24
 800962e:	d008      	beq.n	8009642 <Process_USB_input+0x17a>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	2b53      	cmp	r3, #83	@ 0x53
 8009636:	d004      	beq.n	8009642 <Process_USB_input+0x17a>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2b45      	cmp	r3, #69	@ 0x45
 800963e:	d000      	beq.n	8009642 <Process_USB_input+0x17a>
 8009640:	e191      	b.n	8009966 <Process_USB_input+0x49e>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3301      	adds	r3, #1
 8009646:	0018      	movs	r0, r3
 8009648:	f7ff fef0 	bl	800942c <ascii_to_uint8>
 800964c:	0003      	movs	r3, r0
 800964e:	001a      	movs	r2, r3
 8009650:	4b79      	ldr	r3, [pc, #484]	@ (8009838 <Process_USB_input+0x370>)
 8009652:	701a      	strb	r2, [r3, #0]
      printf_USB("Command nr determined: %d", received.Command);
 8009654:	4b78      	ldr	r3, [pc, #480]	@ (8009838 <Process_USB_input+0x370>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	001a      	movs	r2, r3
 800965a:	4b78      	ldr	r3, [pc, #480]	@ (800983c <Process_USB_input+0x374>)
 800965c:	0011      	movs	r1, r2
 800965e:	0018      	movs	r0, r3
 8009660:	f7ff f9c2 	bl	80089e8 <printf_USB>
      if (received.Command == 100) {
 8009664:	4b74      	ldr	r3, [pc, #464]	@ (8009838 <Process_USB_input+0x370>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b64      	cmp	r3, #100	@ 0x64
 800966a:	d11f      	bne.n	80096ac <Process_USB_input+0x1e4>
        printf_USB("\r\nCommandvalue out of range.\r\n");
 800966c:	4b74      	ldr	r3, [pc, #464]	@ (8009840 <Process_USB_input+0x378>)
 800966e:	0018      	movs	r0, r3
 8009670:	f7ff f9ba 	bl	80089e8 <printf_USB>
        ResetUsbRxDataSize();
 8009674:	f019 fd00 	bl	8023078 <ResetUsbRxDataSize>
        PC_show_Keys();
 8009678:	f7ff f9f6 	bl	8008a68 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 800967c:	2365      	movs	r3, #101	@ 0x65
 800967e:	18fb      	adds	r3, r7, r3
 8009680:	2200      	movs	r2, #0
 8009682:	701a      	strb	r2, [r3, #0]
 8009684:	e00b      	b.n	800969e <Process_USB_input+0x1d6>
          data[i] = '\0';
 8009686:	2165      	movs	r1, #101	@ 0x65
 8009688:	187b      	adds	r3, r7, r1
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	18d3      	adds	r3, r2, r3
 8009690:	2200      	movs	r2, #0
 8009692:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009694:	187b      	adds	r3, r7, r1
 8009696:	781a      	ldrb	r2, [r3, #0]
 8009698:	187b      	adds	r3, r7, r1
 800969a:	3201      	adds	r2, #1
 800969c:	701a      	strb	r2, [r3, #0]
 800969e:	2365      	movs	r3, #101	@ 0x65
 80096a0:	18fb      	adds	r3, r7, r3
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b1f      	cmp	r3, #31
 80096a6:	d9ee      	bls.n	8009686 <Process_USB_input+0x1be>
        }
        return false; // value out of range
 80096a8:	2300      	movs	r3, #0
 80096aa:	e18d      	b.n	80099c8 <Process_USB_input+0x500>
      }
      if (data[3] == ',') {
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3303      	adds	r3, #3
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80096b4:	d000      	beq.n	80096b8 <Process_USB_input+0x1f0>
 80096b6:	e152      	b.n	800995e <Process_USB_input+0x496>
        if ((data[0] == 'S') || (data[0] == 'E')) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2b53      	cmp	r3, #83	@ 0x53
 80096be:	d003      	beq.n	80096c8 <Process_USB_input+0x200>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b45      	cmp	r3, #69	@ 0x45
 80096c6:	d10a      	bne.n	80096de <Process_USB_input+0x216>
          if ((data[0] == 'E') && (received.Command == clearDefsCmd)) {
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b45      	cmp	r3, #69	@ 0x45
 80096ce:	d106      	bne.n	80096de <Process_USB_input+0x216>
 80096d0:	4b59      	ldr	r3, [pc, #356]	@ (8009838 <Process_USB_input+0x370>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b1f      	cmp	r3, #31
 80096d6:	d102      	bne.n	80096de <Process_USB_input+0x216>
//            printf_USB("\r\nClear EEPROM request\r\n");
            received.Command = ClearConfigCmd;
 80096d8:	4b57      	ldr	r3, [pc, #348]	@ (8009838 <Process_USB_input+0x370>)
 80096da:	22fd      	movs	r2, #253	@ 0xfd
 80096dc:	701a      	strb	r2, [r3, #0]
          }
        }
        if ((data[0] == '$') || (data[0] == '#')) {
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b24      	cmp	r3, #36	@ 0x24
 80096e4:	d004      	beq.n	80096f0 <Process_USB_input+0x228>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	2b23      	cmp	r3, #35	@ 0x23
 80096ec:	d000      	beq.n	80096f0 <Process_USB_input+0x228>
 80096ee:	e0bd      	b.n	800986c <Process_USB_input+0x3a4>
          for (i=4; i < len; i++) {
 80096f0:	2366      	movs	r3, #102	@ 0x66
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	2204      	movs	r2, #4
 80096f6:	701a      	strb	r2, [r3, #0]
 80096f8:	e0b0      	b.n	800985c <Process_USB_input+0x394>
            HAL_Delay(10);
 80096fa:	200a      	movs	r0, #10
 80096fc:	f00b f8ea 	bl	80148d4 <HAL_Delay>
            if (isxdigit(data[i])) {
 8009700:	2166      	movs	r1, #102	@ 0x66
 8009702:	187b      	adds	r3, r7, r1
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	18d3      	adds	r3, r2, r3
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	4b4d      	ldr	r3, [pc, #308]	@ (8009844 <Process_USB_input+0x37c>)
 8009710:	18d3      	adds	r3, r2, r3
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	001a      	movs	r2, r3
 8009716:	2344      	movs	r3, #68	@ 0x44
 8009718:	4013      	ands	r3, r2
 800971a:	d05c      	beq.n	80097d6 <Process_USB_input+0x30e>
              result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 800971c:	4b4a      	ldr	r3, [pc, #296]	@ (8009848 <Process_USB_input+0x380>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b25b      	sxtb	r3, r3
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	b25a      	sxtb	r2, r3
 8009726:	0008      	movs	r0, r1
 8009728:	187b      	adds	r3, r7, r1
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	18cb      	adds	r3, r1, r3
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	1c59      	adds	r1, r3, #1
 8009734:	4b43      	ldr	r3, [pc, #268]	@ (8009844 <Process_USB_input+0x37c>)
 8009736:	18cb      	adds	r3, r1, r3
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	0019      	movs	r1, r3
 800973c:	2304      	movs	r3, #4
 800973e:	400b      	ands	r3, r1
 8009740:	d008      	beq.n	8009754 <Process_USB_input+0x28c>
 8009742:	183b      	adds	r3, r7, r0
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	18cb      	adds	r3, r1, r3
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	3b30      	subs	r3, #48	@ 0x30
 800974e:	b2db      	uxtb	r3, r3
 8009750:	b25b      	sxtb	r3, r3
 8009752:	e01e      	b.n	8009792 <Process_USB_input+0x2ca>
 8009754:	2366      	movs	r3, #102	@ 0x66
 8009756:	18fb      	adds	r3, r7, r3
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	18c9      	adds	r1, r1, r3
 800975e:	2056      	movs	r0, #86	@ 0x56
 8009760:	183b      	adds	r3, r7, r0
 8009762:	7809      	ldrb	r1, [r1, #0]
 8009764:	7019      	strb	r1, [r3, #0]
 8009766:	183b      	adds	r3, r7, r0
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	1c59      	adds	r1, r3, #1
 800976c:	4b35      	ldr	r3, [pc, #212]	@ (8009844 <Process_USB_input+0x37c>)
 800976e:	18cb      	adds	r3, r1, r3
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	0019      	movs	r1, r3
 8009774:	2303      	movs	r3, #3
 8009776:	400b      	ands	r3, r1
 8009778:	2b02      	cmp	r3, #2
 800977a:	d103      	bne.n	8009784 <Process_USB_input+0x2bc>
 800977c:	183b      	adds	r3, r7, r0
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	3b20      	subs	r3, #32
 8009782:	e002      	b.n	800978a <Process_USB_input+0x2c2>
 8009784:	2356      	movs	r3, #86	@ 0x56
 8009786:	18fb      	adds	r3, r7, r3
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	b2db      	uxtb	r3, r3
 800978c:	3b37      	subs	r3, #55	@ 0x37
 800978e:	b2db      	uxtb	r3, r3
 8009790:	b25b      	sxtb	r3, r3
 8009792:	4313      	orrs	r3, r2
 8009794:	b25b      	sxtb	r3, r3
 8009796:	b2da      	uxtb	r2, r3
 8009798:	4b2b      	ldr	r3, [pc, #172]	@ (8009848 <Process_USB_input+0x380>)
 800979a:	701a      	strb	r2, [r3, #0]
//              printf_USB("Result is 0x%02X\r\n", result);
              HAL_Delay(10);
 800979c:	200a      	movs	r0, #10
 800979e:	f00b f899 	bl	80148d4 <HAL_Delay>
              if (len == 28) {
 80097a2:	4b1e      	ldr	r3, [pc, #120]	@ (800981c <Process_USB_input+0x354>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b1c      	cmp	r3, #28
 80097a8:	d152      	bne.n	8009850 <Process_USB_input+0x388>
                if ((i % 2) == 1) {
 80097aa:	2366      	movs	r3, #102	@ 0x66
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	2201      	movs	r2, #1
 80097b2:	4013      	ands	r3, r2
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d04a      	beq.n	8009850 <Process_USB_input+0x388>
                  data[r] = result;
 80097ba:	2167      	movs	r1, #103	@ 0x67
 80097bc:	187b      	adds	r3, r7, r1
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	18d3      	adds	r3, r2, r3
 80097c4:	4a20      	ldr	r2, [pc, #128]	@ (8009848 <Process_USB_input+0x380>)
 80097c6:	7812      	ldrb	r2, [r2, #0]
 80097c8:	701a      	strb	r2, [r3, #0]
//                  printf_USB("data[%d] = 0x%02X",r, data[r]);
                  r++;
 80097ca:	187b      	adds	r3, r7, r1
 80097cc:	781a      	ldrb	r2, [r3, #0]
 80097ce:	187b      	adds	r3, r7, r1
 80097d0:	3201      	adds	r2, #1
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	e03c      	b.n	8009850 <Process_USB_input+0x388>
                }
              }
            }
            else {
              printf_USB("\r\nInvalid hexadecimal character: '%c at position %d\r\n", data[i], i);
 80097d6:	2066      	movs	r0, #102	@ 0x66
 80097d8:	183b      	adds	r3, r7, r0
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	18d3      	adds	r3, r2, r3
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	0019      	movs	r1, r3
 80097e4:	183b      	adds	r3, r7, r0
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	4b18      	ldr	r3, [pc, #96]	@ (800984c <Process_USB_input+0x384>)
 80097ea:	0018      	movs	r0, r3
 80097ec:	f7ff f8fc 	bl	80089e8 <printf_USB>
              ResetUsbRxDataSize();
 80097f0:	f019 fc42 	bl	8023078 <ResetUsbRxDataSize>
              PC_show_Keys();
 80097f4:	f7ff f938 	bl	8008a68 <PC_show_Keys>
              for (uint8_t i=0; i < length; i++) {
 80097f8:	2157      	movs	r1, #87	@ 0x57
 80097fa:	187b      	adds	r3, r7, r1
 80097fc:	2200      	movs	r2, #0
 80097fe:	701a      	strb	r2, [r3, #0]
 8009800:	46c0      	nop			@ (mov r8, r8)
 8009802:	187b      	adds	r3, r7, r1
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009808:	429a      	cmp	r2, r3
 800980a:	d921      	bls.n	8009850 <Process_USB_input+0x388>
                data[i] = '\0';
 800980c:	187b      	adds	r3, r7, r1
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	18d3      	adds	r3, r2, r3
 8009814:	2200      	movs	r2, #0
 8009816:	701a      	strb	r2, [r3, #0]
                return false; // Of een andere foutwaarde
 8009818:	2300      	movs	r3, #0
 800981a:	e0d5      	b.n	80099c8 <Process_USB_input+0x500>
 800981c:	20000038 	.word	0x20000038
 8009820:	200010f7 	.word	0x200010f7
 8009824:	08080194 	.word	0x08080194
 8009828:	0802baac 	.word	0x0802baac
 800982c:	0802bab0 	.word	0x0802bab0
 8009830:	0802bb98 	.word	0x0802bb98
 8009834:	0802bbb8 	.word	0x0802bbb8
 8009838:	20000940 	.word	0x20000940
 800983c:	0802bbe4 	.word	0x0802bbe4
 8009840:	0802bc00 	.word	0x0802bc00
 8009844:	0802ebb8 	.word	0x0802ebb8
 8009848:	20000a44 	.word	0x20000a44
 800984c:	0802bc20 	.word	0x0802bc20
          for (i=4; i < len; i++) {
 8009850:	2166      	movs	r1, #102	@ 0x66
 8009852:	187b      	adds	r3, r7, r1
 8009854:	781a      	ldrb	r2, [r3, #0]
 8009856:	187b      	adds	r3, r7, r1
 8009858:	3201      	adds	r2, #1
 800985a:	701a      	strb	r2, [r3, #0]
 800985c:	2366      	movs	r3, #102	@ 0x66
 800985e:	18fb      	adds	r3, r7, r3
 8009860:	781a      	ldrb	r2, [r3, #0]
 8009862:	4b5b      	ldr	r3, [pc, #364]	@ (80099d0 <Process_USB_input+0x508>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d200      	bcs.n	800986c <Process_USB_input+0x3a4>
 800986a:	e746      	b.n	80096fa <Process_USB_input+0x232>
              }
            }
          }  // end for
//          printf_USB("\r\n");
        }
        if (len < pwdMaxLength) {
 800986c:	4b58      	ldr	r3, [pc, #352]	@ (80099d0 <Process_USB_input+0x508>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b3f      	cmp	r3, #63	@ 0x3f
 8009872:	d825      	bhi.n	80098c0 <Process_USB_input+0x3f8>
          if (len == 6) {
 8009874:	4b56      	ldr	r3, [pc, #344]	@ (80099d0 <Process_USB_input+0x508>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b06      	cmp	r3, #6
 800987a:	d114      	bne.n	80098a6 <Process_USB_input+0x3de>
            ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 800987c:	2448      	movs	r4, #72	@ 0x48
 800987e:	193b      	adds	r3, r7, r4
 8009880:	4854      	ldr	r0, [pc, #336]	@ (80099d4 <Process_USB_input+0x50c>)
 8009882:	220c      	movs	r2, #12
 8009884:	0019      	movs	r1, r3
 8009886:	f002 fbf5 	bl	800c074 <ReadUint8ArrayEEprom>
            boxConfig[11] = result; //overwrite the last byte of the key
 800988a:	4b53      	ldr	r3, [pc, #332]	@ (80099d8 <Process_USB_input+0x510>)
 800988c:	781a      	ldrb	r2, [r3, #0]
 800988e:	0021      	movs	r1, r4
 8009890:	187b      	adds	r3, r7, r1
 8009892:	72da      	strb	r2, [r3, #11]
            memcpy(received.Payload, boxConfig, IdSize);
 8009894:	4b51      	ldr	r3, [pc, #324]	@ (80099dc <Process_USB_input+0x514>)
 8009896:	2202      	movs	r2, #2
 8009898:	1879      	adds	r1, r7, r1
 800989a:	189b      	adds	r3, r3, r2
 800989c:	220c      	movs	r2, #12
 800989e:	0018      	movs	r0, r3
 80098a0:	f01c fee4 	bl	802666c <memcpy>
 80098a4:	e005      	b.n	80098b2 <Process_USB_input+0x3ea>
          }
          else {
            memcpy(received.Payload, data, IdSize);
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	4b4d      	ldr	r3, [pc, #308]	@ (80099e0 <Process_USB_input+0x518>)
 80098aa:	220c      	movs	r2, #12
 80098ac:	0018      	movs	r0, r3
 80098ae:	f01c fedd 	bl	802666c <memcpy>
          }
          received.Payload[12] = '\0';
 80098b2:	4b4a      	ldr	r3, [pc, #296]	@ (80099dc <Process_USB_input+0x514>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	739a      	strb	r2, [r3, #14]
          received.PayloadLength = IdSize;
 80098b8:	4b48      	ldr	r3, [pc, #288]	@ (80099dc <Process_USB_input+0x514>)
 80098ba:	220c      	movs	r2, #12
 80098bc:	705a      	strb	r2, [r3, #1]
 80098be:	e005      	b.n	80098cc <Process_USB_input+0x404>
        }
        else {
          received.PayloadLength = length-4;  // The string terminator counts
 80098c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	3b04      	subs	r3, #4
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	4b44      	ldr	r3, [pc, #272]	@ (80099dc <Process_USB_input+0x514>)
 80098ca:	705a      	strb	r2, [r3, #1]
        }
        if ((len < pwdMaxLength) && (len != 6))  {
 80098cc:	4b40      	ldr	r3, [pc, #256]	@ (80099d0 <Process_USB_input+0x508>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80098d2:	d80b      	bhi.n	80098ec <Process_USB_input+0x424>
 80098d4:	4b3e      	ldr	r3, [pc, #248]	@ (80099d0 <Process_USB_input+0x508>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b06      	cmp	r3, #6
 80098da:	d007      	beq.n	80098ec <Process_USB_input+0x424>
          uint8ArrayToString(Buffer, received.Payload);
 80098dc:	4a40      	ldr	r2, [pc, #256]	@ (80099e0 <Process_USB_input+0x518>)
 80098de:	2308      	movs	r3, #8
 80098e0:	18fb      	adds	r3, r7, r3
 80098e2:	0011      	movs	r1, r2
 80098e4:	0018      	movs	r0, r3
 80098e6:	f7fb fd87 	bl	80053f8 <uint8ArrayToString>
 80098ea:	e00c      	b.n	8009906 <Process_USB_input+0x43e>
        }
        else if (len == pwdMaxLength) {
 80098ec:	4b38      	ldr	r3, [pc, #224]	@ (80099d0 <Process_USB_input+0x508>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b40      	cmp	r3, #64	@ 0x40
 80098f2:	d108      	bne.n	8009906 <Process_USB_input+0x43e>
          memcpy(received.Payload, &data[4], received.PayloadLength);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	1d19      	adds	r1, r3, #4
 80098f8:	4b38      	ldr	r3, [pc, #224]	@ (80099dc <Process_USB_input+0x514>)
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	001a      	movs	r2, r3
 80098fe:	4b38      	ldr	r3, [pc, #224]	@ (80099e0 <Process_USB_input+0x518>)
 8009900:	0018      	movs	r0, r3
 8009902:	f01c feb3 	bl	802666c <memcpy>
        }
        ProcessCmd(received);
 8009906:	4c35      	ldr	r4, [pc, #212]	@ (80099dc <Process_USB_input+0x514>)
 8009908:	466b      	mov	r3, sp
 800990a:	0018      	movs	r0, r3
 800990c:	0023      	movs	r3, r4
 800990e:	3310      	adds	r3, #16
 8009910:	22f4      	movs	r2, #244	@ 0xf4
 8009912:	0019      	movs	r1, r3
 8009914:	f01c feaa 	bl	802666c <memcpy>
 8009918:	6820      	ldr	r0, [r4, #0]
 800991a:	6861      	ldr	r1, [r4, #4]
 800991c:	68a2      	ldr	r2, [r4, #8]
 800991e:	68e3      	ldr	r3, [r4, #12]
 8009920:	f7fe fda8 	bl	8008474 <ProcessCmd>
        ResetUsbRxDataSize();
 8009924:	f019 fba8 	bl	8023078 <ResetUsbRxDataSize>
        PC_show_Keys();
 8009928:	f7ff f89e 	bl	8008a68 <PC_show_Keys>
        for (uint8_t i=0; i < length; i++) {
 800992c:	2364      	movs	r3, #100	@ 0x64
 800992e:	18fb      	adds	r3, r7, r3
 8009930:	2200      	movs	r2, #0
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e00b      	b.n	800994e <Process_USB_input+0x486>
          data[i] = '\0';
 8009936:	2164      	movs	r1, #100	@ 0x64
 8009938:	187b      	adds	r3, r7, r1
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	18d3      	adds	r3, r2, r3
 8009940:	2200      	movs	r2, #0
 8009942:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < length; i++) {
 8009944:	187b      	adds	r3, r7, r1
 8009946:	781a      	ldrb	r2, [r3, #0]
 8009948:	187b      	adds	r3, r7, r1
 800994a:	3201      	adds	r2, #1
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	2364      	movs	r3, #100	@ 0x64
 8009950:	18fb      	adds	r3, r7, r3
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009956:	429a      	cmp	r2, r3
 8009958:	d8ed      	bhi.n	8009936 <Process_USB_input+0x46e>
        }
        return true;
 800995a:	2301      	movs	r3, #1
 800995c:	e034      	b.n	80099c8 <Process_USB_input+0x500>
      }
      else {
        printf_USB("\r\nInvalid input; comma not found\r\n");
 800995e:	4b21      	ldr	r3, [pc, #132]	@ (80099e4 <Process_USB_input+0x51c>)
 8009960:	0018      	movs	r0, r3
 8009962:	f7ff f841 	bl	80089e8 <printf_USB>
//        for (uint8_t i=0; i < length; i++) {
//          data[i] = '\0';
//        }
      }
    }
    PC_show_Keys();
 8009966:	f7ff f87f 	bl	8008a68 <PC_show_Keys>
    ResetUsbRxDataSize();
 800996a:	f019 fb85 	bl	8023078 <ResetUsbRxDataSize>
    for (uint8_t i=0; i < length; i++) {
 800996e:	2363      	movs	r3, #99	@ 0x63
 8009970:	18fb      	adds	r3, r7, r3
 8009972:	2200      	movs	r2, #0
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	e00b      	b.n	8009990 <Process_USB_input+0x4c8>
      data[i] = '\0';
 8009978:	2163      	movs	r1, #99	@ 0x63
 800997a:	187b      	adds	r3, r7, r1
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	18d3      	adds	r3, r2, r3
 8009982:	2200      	movs	r2, #0
 8009984:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < length; i++) {
 8009986:	187b      	adds	r3, r7, r1
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	187b      	adds	r3, r7, r1
 800998c:	3201      	adds	r2, #1
 800998e:	701a      	strb	r2, [r3, #0]
 8009990:	2363      	movs	r3, #99	@ 0x63
 8009992:	18fb      	adds	r3, r7, r3
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009998:	429a      	cmp	r2, r3
 800999a:	d8ed      	bhi.n	8009978 <Process_USB_input+0x4b0>
    }
    len = 6;
 800999c:	4b0c      	ldr	r3, [pc, #48]	@ (80099d0 <Process_USB_input+0x508>)
 800999e:	2206      	movs	r2, #6
 80099a0:	601a      	str	r2, [r3, #0]
  }
  if (formerlength != length) {
 80099a2:	4b11      	ldr	r3, [pc, #68]	@ (80099e8 <Process_USB_input+0x520>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d008      	beq.n	80099be <Process_USB_input+0x4f6>
    printf_USB("USB input: %s\r", (const char*)data);
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	4b0f      	ldr	r3, [pc, #60]	@ (80099ec <Process_USB_input+0x524>)
 80099b0:	0011      	movs	r1, r2
 80099b2:	0018      	movs	r0, r3
 80099b4:	f7ff f818 	bl	80089e8 <printf_USB>
    formerlength = length;
 80099b8:	4b0b      	ldr	r3, [pc, #44]	@ (80099e8 <Process_USB_input+0x520>)
 80099ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80099bc:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 80099be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099c0:	0018      	movs	r0, r3
 80099c2:	f019 fb7b 	bl	80230bc <GetUsbRxNextChunk>
  return false;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	0018      	movs	r0, r3
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b01b      	add	sp, #108	@ 0x6c
 80099ce:	bd90      	pop	{r4, r7, pc}
 80099d0:	20000038 	.word	0x20000038
 80099d4:	08080000 	.word	0x08080000
 80099d8:	20000a44 	.word	0x20000a44
 80099dc:	20000940 	.word	0x20000940
 80099e0:	20000942 	.word	0x20000942
 80099e4:	0802bc58 	.word	0x0802bc58
 80099e8:	20000a48 	.word	0x20000a48
 80099ec:	0802bc7c 	.word	0x0802bc7c

080099f0 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 80099f4:	4b26      	ldr	r3, [pc, #152]	@ (8009a90 <ReadBatteryVoltage+0xa0>)
 80099f6:	4a27      	ldr	r2, [pc, #156]	@ (8009a94 <ReadBatteryVoltage+0xa4>)
 80099f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80099fa:	4b25      	ldr	r3, [pc, #148]	@ (8009a90 <ReadBatteryVoltage+0xa0>)
 80099fc:	2280      	movs	r2, #128	@ 0x80
 80099fe:	0152      	lsls	r2, r2, #5
 8009a00:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009a02:	4a23      	ldr	r2, [pc, #140]	@ (8009a90 <ReadBatteryVoltage+0xa0>)
 8009a04:	4b24      	ldr	r3, [pc, #144]	@ (8009a98 <ReadBatteryVoltage+0xa8>)
 8009a06:	0011      	movs	r1, r2
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f00b fa13 	bl	8014e34 <HAL_ADC_ConfigChannel>
 8009a0e:	1e03      	subs	r3, r0, #0
 8009a10:	d001      	beq.n	8009a16 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8009a12:	f003 fc89 	bl	800d328 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009a16:	4b20      	ldr	r3, [pc, #128]	@ (8009a98 <ReadBatteryVoltage+0xa8>)
 8009a18:	0018      	movs	r0, r3
 8009a1a:	f00b f90f 	bl	8014c3c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8009a98 <ReadBatteryVoltage+0xa8>)
 8009a20:	2101      	movs	r1, #1
 8009a22:	0018      	movs	r0, r3
 8009a24:	f00b f95e 	bl	8014ce4 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009a28:	4b1b      	ldr	r3, [pc, #108]	@ (8009a98 <ReadBatteryVoltage+0xa8>)
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f00b f9f6 	bl	8014e1c <HAL_ADC_GetValue>
 8009a30:	0002      	movs	r2, r0
 8009a32:	4b1a      	ldr	r3, [pc, #104]	@ (8009a9c <ReadBatteryVoltage+0xac>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4353      	muls	r3, r2
 8009a38:	005b      	lsls	r3, r3, #1
 8009a3a:	4919      	ldr	r1, [pc, #100]	@ (8009aa0 <ReadBatteryVoltage+0xb0>)
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	f7f6 fbb1 	bl	80001a4 <__udivsi3>
 8009a42:	0003      	movs	r3, r0
 8009a44:	001a      	movs	r2, r3
 8009a46:	4b17      	ldr	r3, [pc, #92]	@ (8009aa4 <ReadBatteryVoltage+0xb4>)
 8009a48:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009a4a:	4b16      	ldr	r3, [pc, #88]	@ (8009aa4 <ReadBatteryVoltage+0xb4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	0018      	movs	r0, r3
 8009a50:	f7f7 ff3a 	bl	80018c8 <__aeabi_ui2f>
 8009a54:	1c03      	adds	r3, r0, #0
 8009a56:	4914      	ldr	r1, [pc, #80]	@ (8009aa8 <ReadBatteryVoltage+0xb8>)
 8009a58:	1c18      	adds	r0, r3, #0
 8009a5a:	f7f7 f923 	bl	8000ca4 <__aeabi_fdiv>
 8009a5e:	1c03      	adds	r3, r0, #0
 8009a60:	1c1a      	adds	r2, r3, #0
 8009a62:	4b12      	ldr	r3, [pc, #72]	@ (8009aac <ReadBatteryVoltage+0xbc>)
 8009a64:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009a66:	4b0a      	ldr	r3, [pc, #40]	@ (8009a90 <ReadBatteryVoltage+0xa0>)
 8009a68:	4a0a      	ldr	r2, [pc, #40]	@ (8009a94 <ReadBatteryVoltage+0xa4>)
 8009a6a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009a6c:	4b08      	ldr	r3, [pc, #32]	@ (8009a90 <ReadBatteryVoltage+0xa0>)
 8009a6e:	4a10      	ldr	r2, [pc, #64]	@ (8009ab0 <ReadBatteryVoltage+0xc0>)
 8009a70:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009a72:	4a07      	ldr	r2, [pc, #28]	@ (8009a90 <ReadBatteryVoltage+0xa0>)
 8009a74:	4b08      	ldr	r3, [pc, #32]	@ (8009a98 <ReadBatteryVoltage+0xa8>)
 8009a76:	0011      	movs	r1, r2
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f00b f9db 	bl	8014e34 <HAL_ADC_ConfigChannel>
 8009a7e:	1e03      	subs	r3, r0, #0
 8009a80:	d001      	beq.n	8009a86 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009a82:	f003 fc51 	bl	800d328 <Error_Handler>
  }
  return trueValue;
 8009a86:	4b09      	ldr	r3, [pc, #36]	@ (8009aac <ReadBatteryVoltage+0xbc>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 }
 8009a8a:	1c18      	adds	r0, r3, #0
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	20000e18 	.word	0x20000e18
 8009a94:	38004000 	.word	0x38004000
 8009a98:	20000e84 	.word	0x20000e84
 8009a9c:	2000003c 	.word	0x2000003c
 8009aa0:	00000fff 	.word	0x00000fff
 8009aa4:	20000e34 	.word	0x20000e34
 8009aa8:	447a0000 	.word	0x447a0000
 8009aac:	20000e38 	.word	0x20000e38
 8009ab0:	00001001 	.word	0x00001001

08009ab4 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009ab8:	4b21      	ldr	r3, [pc, #132]	@ (8009b40 <ReadSolarVoltage+0x8c>)
 8009aba:	4a22      	ldr	r2, [pc, #136]	@ (8009b44 <ReadSolarVoltage+0x90>)
 8009abc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009abe:	4b20      	ldr	r3, [pc, #128]	@ (8009b40 <ReadSolarVoltage+0x8c>)
 8009ac0:	2280      	movs	r2, #128	@ 0x80
 8009ac2:	0152      	lsls	r2, r2, #5
 8009ac4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8009b40 <ReadSolarVoltage+0x8c>)
 8009ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8009b48 <ReadSolarVoltage+0x94>)
 8009aca:	0011      	movs	r1, r2
 8009acc:	0018      	movs	r0, r3
 8009ace:	f00b f9b1 	bl	8014e34 <HAL_ADC_ConfigChannel>
 8009ad2:	1e03      	subs	r3, r0, #0
 8009ad4:	d001      	beq.n	8009ada <ReadSolarVoltage+0x26>
    Error_Handler();
 8009ad6:	f003 fc27 	bl	800d328 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009ada:	4b1b      	ldr	r3, [pc, #108]	@ (8009b48 <ReadSolarVoltage+0x94>)
 8009adc:	0018      	movs	r0, r3
 8009ade:	f00b f8ad 	bl	8014c3c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009ae2:	4b19      	ldr	r3, [pc, #100]	@ (8009b48 <ReadSolarVoltage+0x94>)
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	f00b f8fc 	bl	8014ce4 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8009aec:	4b16      	ldr	r3, [pc, #88]	@ (8009b48 <ReadSolarVoltage+0x94>)
 8009aee:	0018      	movs	r0, r3
 8009af0:	f00b f994 	bl	8014e1c <HAL_ADC_GetValue>
 8009af4:	0002      	movs	r2, r0
 8009af6:	4b15      	ldr	r3, [pc, #84]	@ (8009b4c <ReadSolarVoltage+0x98>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	435a      	muls	r2, r3
 8009afc:	0013      	movs	r3, r2
 8009afe:	005b      	lsls	r3, r3, #1
 8009b00:	189b      	adds	r3, r3, r2
 8009b02:	4913      	ldr	r1, [pc, #76]	@ (8009b50 <ReadSolarVoltage+0x9c>)
 8009b04:	0018      	movs	r0, r3
 8009b06:	f7f6 fb4d 	bl	80001a4 <__udivsi3>
 8009b0a:	0003      	movs	r3, r0
 8009b0c:	001a      	movs	r2, r3
 8009b0e:	4b11      	ldr	r3, [pc, #68]	@ (8009b54 <ReadSolarVoltage+0xa0>)
 8009b10:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8009b12:	4b0b      	ldr	r3, [pc, #44]	@ (8009b40 <ReadSolarVoltage+0x8c>)
 8009b14:	4a0b      	ldr	r2, [pc, #44]	@ (8009b44 <ReadSolarVoltage+0x90>)
 8009b16:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009b18:	4b09      	ldr	r3, [pc, #36]	@ (8009b40 <ReadSolarVoltage+0x8c>)
 8009b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8009b58 <ReadSolarVoltage+0xa4>)
 8009b1c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b1e:	4a08      	ldr	r2, [pc, #32]	@ (8009b40 <ReadSolarVoltage+0x8c>)
 8009b20:	4b09      	ldr	r3, [pc, #36]	@ (8009b48 <ReadSolarVoltage+0x94>)
 8009b22:	0011      	movs	r1, r2
 8009b24:	0018      	movs	r0, r3
 8009b26:	f00b f985 	bl	8014e34 <HAL_ADC_ConfigChannel>
 8009b2a:	1e03      	subs	r3, r0, #0
 8009b2c:	d001      	beq.n	8009b32 <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009b2e:	f003 fbfb 	bl	800d328 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8009b32:	4b08      	ldr	r3, [pc, #32]	@ (8009b54 <ReadSolarVoltage+0xa0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	b29b      	uxth	r3, r3
 }
 8009b38:	0018      	movs	r0, r3
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	46c0      	nop			@ (mov r8, r8)
 8009b40:	20000e18 	.word	0x20000e18
 8009b44:	3c008000 	.word	0x3c008000
 8009b48:	20000e84 	.word	0x20000e84
 8009b4c:	2000003c 	.word	0x2000003c
 8009b50:	00000fff 	.word	0x00000fff
 8009b54:	20000e3c 	.word	0x20000e3c
 8009b58:	00001001 	.word	0x00001001

08009b5c <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin)) {
 8009b60:	23a0      	movs	r3, #160	@ 0xa0
 8009b62:	05db      	lsls	r3, r3, #23
 8009b64:	2180      	movs	r1, #128	@ 0x80
 8009b66:	0018      	movs	r0, r3
 8009b68:	f00c f900 	bl	8015d6c <HAL_GPIO_ReadPin>
 8009b6c:	1e03      	subs	r3, r0, #0
 8009b6e:	d00b      	beq.n	8009b88 <Check_USB_PowerOn+0x2c>
     if (sendpwremail == DONE) {
 8009b70:	4b07      	ldr	r3, [pc, #28]	@ (8009b90 <Check_USB_PowerOn+0x34>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d105      	bne.n	8009b84 <Check_USB_PowerOn+0x28>
       sendpwremail = CLEAR;
 8009b78:	4b05      	ldr	r3, [pc, #20]	@ (8009b90 <Check_USB_PowerOn+0x34>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	701a      	strb	r2, [r3, #0]
       sendpwrmaildate = 0;
 8009b7e:	4b05      	ldr	r3, [pc, #20]	@ (8009b94 <Check_USB_PowerOn+0x38>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	701a      	strb	r2, [r3, #0]
     }
     return true;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <Check_USB_PowerOn+0x2e>
   }
   return false;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	0018      	movs	r0, r3
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	200010f9 	.word	0x200010f9
 8009b94:	20001110 	.word	0x20001110

08009b98 <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 8009b9e:	1dfb      	adds	r3, r7, #7
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009ba4:	1dbb      	adds	r3, r7, #6
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009baa:	4b27      	ldr	r3, [pc, #156]	@ (8009c48 <Read_Charge_Status+0xb0>)
 8009bac:	2280      	movs	r2, #128	@ 0x80
 8009bae:	0092      	lsls	r2, r2, #2
 8009bb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bb2:	4b25      	ldr	r3, [pc, #148]	@ (8009c48 <Read_Charge_Status+0xb0>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009bb8:	4b23      	ldr	r3, [pc, #140]	@ (8009c48 <Read_Charge_Status+0xb0>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009bbe:	4b22      	ldr	r3, [pc, #136]	@ (8009c48 <Read_Charge_Status+0xb0>)
 8009bc0:	4a22      	ldr	r2, [pc, #136]	@ (8009c4c <Read_Charge_Status+0xb4>)
 8009bc2:	0019      	movs	r1, r3
 8009bc4:	0010      	movs	r0, r2
 8009bc6:	f00b ff53 	bl	8015a70 <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009bca:	2380      	movs	r3, #128	@ 0x80
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4a1f      	ldr	r2, [pc, #124]	@ (8009c4c <Read_Charge_Status+0xb4>)
 8009bd0:	0019      	movs	r1, r3
 8009bd2:	0010      	movs	r0, r2
 8009bd4:	f00c f8ca 	bl	8015d6c <HAL_GPIO_ReadPin>
 8009bd8:	0003      	movs	r3, r0
 8009bda:	001a      	movs	r2, r3
 8009bdc:	1dfb      	adds	r3, r7, #7
 8009bde:	1e51      	subs	r1, r2, #1
 8009be0:	418a      	sbcs	r2, r1
 8009be2:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009be4:	4b18      	ldr	r3, [pc, #96]	@ (8009c48 <Read_Charge_Status+0xb0>)
 8009be6:	2280      	movs	r2, #128	@ 0x80
 8009be8:	0092      	lsls	r2, r2, #2
 8009bea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bec:	4b16      	ldr	r3, [pc, #88]	@ (8009c48 <Read_Charge_Status+0xb0>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009bf2:	4b15      	ldr	r3, [pc, #84]	@ (8009c48 <Read_Charge_Status+0xb0>)
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009bf8:	4b13      	ldr	r3, [pc, #76]	@ (8009c48 <Read_Charge_Status+0xb0>)
 8009bfa:	4a14      	ldr	r2, [pc, #80]	@ (8009c4c <Read_Charge_Status+0xb4>)
 8009bfc:	0019      	movs	r1, r3
 8009bfe:	0010      	movs	r0, r2
 8009c00:	f00b ff36 	bl	8015a70 <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009c04:	2380      	movs	r3, #128	@ 0x80
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4a10      	ldr	r2, [pc, #64]	@ (8009c4c <Read_Charge_Status+0xb4>)
 8009c0a:	0019      	movs	r1, r3
 8009c0c:	0010      	movs	r0, r2
 8009c0e:	f00c f8ad 	bl	8015d6c <HAL_GPIO_ReadPin>
 8009c12:	0003      	movs	r3, r0
 8009c14:	001a      	movs	r2, r3
 8009c16:	1dbb      	adds	r3, r7, #6
 8009c18:	1e51      	subs	r1, r2, #1
 8009c1a:	418a      	sbcs	r2, r1
 8009c1c:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 8009c1e:	1dfb      	adds	r3, r7, #7
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2201      	movs	r2, #1
 8009c24:	4053      	eors	r3, r2
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e006      	b.n	8009c3e <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 8009c30:	1dbb      	adds	r3, r7, #6
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e000      	b.n	8009c3e <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	0018      	movs	r0, r3
 8009c40:	46bd      	mov	sp, r7
 8009c42:	b002      	add	sp, #8
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	46c0      	nop			@ (mov r8, r8)
 8009c48:	20000e20 	.word	0x20000e20
 8009c4c:	50000800 	.word	0x50000800

08009c50 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8009c50:	b580      	push	{r7, lr}
 8009c52:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009c54:	2380      	movs	r3, #128	@ 0x80
 8009c56:	021a      	lsls	r2, r3, #8
 8009c58:	23a0      	movs	r3, #160	@ 0xa0
 8009c5a:	05db      	lsls	r3, r3, #23
 8009c5c:	0011      	movs	r1, r2
 8009c5e:	0018      	movs	r0, r3
 8009c60:	f00c f884 	bl	8015d6c <HAL_GPIO_ReadPin>
 8009c64:	0003      	movs	r3, r0
 8009c66:	1e5a      	subs	r2, r3, #1
 8009c68:	4193      	sbcs	r3, r2
 8009c6a:	b2db      	uxtb	r3, r3
}
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
	...

08009c74 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009c78:	4b05      	ldr	r3, [pc, #20]	@ (8009c90 <UserButton_Pressed+0x1c>)
 8009c7a:	2104      	movs	r1, #4
 8009c7c:	0018      	movs	r0, r3
 8009c7e:	f00c f875 	bl	8015d6c <HAL_GPIO_ReadPin>
 8009c82:	0003      	movs	r3, r0
 8009c84:	425a      	negs	r2, r3
 8009c86:	4153      	adcs	r3, r2
 8009c88:	b2db      	uxtb	r3, r3
}
 8009c8a:	0018      	movs	r0, r3
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	50000c00 	.word	0x50000c00

08009c94 <getUptime>:

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

#ifndef PUBLIC
void getUptime(char* uptbuffer) {
 8009c94:	b590      	push	{r4, r7, lr}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af02      	add	r7, sp, #8
 8009c9a:	6078      	str	r0, [r7, #4]
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
 8009c9c:	4b08      	ldr	r3, [pc, #32]	@ (8009cc0 <getUptime+0x2c>)
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	001a      	movs	r2, r3
 8009ca2:	4b07      	ldr	r3, [pc, #28]	@ (8009cc0 <getUptime+0x2c>)
 8009ca4:	789b      	ldrb	r3, [r3, #2]
 8009ca6:	001c      	movs	r4, r3
 8009ca8:	4b05      	ldr	r3, [pc, #20]	@ (8009cc0 <getUptime+0x2c>)
 8009caa:	78db      	ldrb	r3, [r3, #3]
 8009cac:	4905      	ldr	r1, [pc, #20]	@ (8009cc4 <getUptime+0x30>)
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	0023      	movs	r3, r4
 8009cb4:	f01c fab6 	bl	8026224 <siprintf>
}
 8009cb8:	46c0      	nop			@ (mov r8, r8)
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	b003      	add	sp, #12
 8009cbe:	bd90      	pop	{r4, r7, pc}
 8009cc0:	20000e48 	.word	0x20000e48
 8009cc4:	0802bcd8 	.word	0x0802bcd8

08009cc8 <getDate>:
#endif

uint8_t getDate() {
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009ccc:	4a05      	ldr	r2, [pc, #20]	@ (8009ce4 <getDate+0x1c>)
 8009cce:	4b06      	ldr	r3, [pc, #24]	@ (8009ce8 <getDate+0x20>)
 8009cd0:	0011      	movs	r1, r2
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	f000 fb66 	bl	800a3a4 <RTC_GetTime>
  return currentDate.Date;
 8009cd8:	4b02      	ldr	r3, [pc, #8]	@ (8009ce4 <getDate+0x1c>)
 8009cda:	789b      	ldrb	r3, [r3, #2]
}
 8009cdc:	0018      	movs	r0, r3
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	46c0      	nop			@ (mov r8, r8)
 8009ce4:	20000e68 	.word	0x20000e68
 8009ce8:	20000e54 	.word	0x20000e54

08009cec <showUpTime>:

void showUpTime() {
 8009cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cee:	46ce      	mov	lr, r9
 8009cf0:	4647      	mov	r7, r8
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b087      	sub	sp, #28
 8009cf6:	af06      	add	r7, sp, #24
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009cf8:	4b17      	ldr	r3, [pc, #92]	@ (8009d58 <showUpTime+0x6c>)
 8009cfa:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009cfc:	4698      	mov	r8, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009cfe:	4b16      	ldr	r3, [pc, #88]	@ (8009d58 <showUpTime+0x6c>)
 8009d00:	785b      	ldrb	r3, [r3, #1]
 8009d02:	1e5a      	subs	r2, r3, #1
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d04:	4b15      	ldr	r3, [pc, #84]	@ (8009d5c <showUpTime+0x70>)
 8009d06:	0092      	lsls	r2, r2, #2
 8009d08:	58d2      	ldr	r2, [r2, r3]
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d0a:	4b13      	ldr	r3, [pc, #76]	@ (8009d58 <showUpTime+0x6c>)
 8009d0c:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d0e:	4699      	mov	r9, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d10:	4b13      	ldr	r3, [pc, #76]	@ (8009d60 <showUpTime+0x74>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d14:	0019      	movs	r1, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009d16:	4b12      	ldr	r3, [pc, #72]	@ (8009d60 <showUpTime+0x74>)
 8009d18:	785b      	ldrb	r3, [r3, #1]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d1a:	001c      	movs	r4, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009d1c:	4b10      	ldr	r3, [pc, #64]	@ (8009d60 <showUpTime+0x74>)
 8009d1e:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d20:	001d      	movs	r5, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009d22:	4b10      	ldr	r3, [pc, #64]	@ (8009d64 <showUpTime+0x78>)
 8009d24:	881b      	ldrh	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d26:	001e      	movs	r6, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009d28:	4b0e      	ldr	r3, [pc, #56]	@ (8009d64 <showUpTime+0x78>)
 8009d2a:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d2c:	469c      	mov	ip, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d64 <showUpTime+0x78>)
 8009d30:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009d32:	480d      	ldr	r0, [pc, #52]	@ (8009d68 <showUpTime+0x7c>)
 8009d34:	9305      	str	r3, [sp, #20]
 8009d36:	4663      	mov	r3, ip
 8009d38:	9304      	str	r3, [sp, #16]
 8009d3a:	9603      	str	r6, [sp, #12]
 8009d3c:	9502      	str	r5, [sp, #8]
 8009d3e:	9401      	str	r4, [sp, #4]
 8009d40:	9100      	str	r1, [sp, #0]
 8009d42:	464b      	mov	r3, r9
 8009d44:	4641      	mov	r1, r8
 8009d46:	f7fe fe4f 	bl	80089e8 <printf_USB>
}
 8009d4a:	46c0      	nop			@ (mov r8, r8)
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	b001      	add	sp, #4
 8009d50:	bcc0      	pop	{r6, r7}
 8009d52:	46b9      	mov	r9, r7
 8009d54:	46b0      	mov	r8, r6
 8009d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d58:	20000e68 	.word	0x20000e68
 8009d5c:	2000005c 	.word	0x2000005c
 8009d60:	20000e54 	.word	0x20000e54
 8009d64:	20000e48 	.word	0x20000e48
 8009d68:	0802bce4 	.word	0x0802bce4

08009d6c <showTime>:

void showTime() {
 8009d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d6e:	46de      	mov	lr, fp
 8009d70:	4657      	mov	r7, sl
 8009d72:	464e      	mov	r6, r9
 8009d74:	4645      	mov	r5, r8
 8009d76:	b5e0      	push	{r5, r6, r7, lr}
 8009d78:	b08d      	sub	sp, #52	@ 0x34
 8009d7a:	af0a      	add	r7, sp, #40	@ 0x28
  if (posixBootTime == 0) {
 8009d7c:	4b41      	ldr	r3, [pc, #260]	@ (8009e84 <showTime+0x118>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d100      	bne.n	8009d86 <showTime+0x1a>
 8009d84:	e075      	b.n	8009e72 <showTime+0x106>
    return;
  }
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009d86:	4a40      	ldr	r2, [pc, #256]	@ (8009e88 <showTime+0x11c>)
 8009d88:	4b40      	ldr	r3, [pc, #256]	@ (8009e8c <showTime+0x120>)
 8009d8a:	0011      	movs	r1, r2
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f000 fb09 	bl	800a3a4 <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009d92:	4b3e      	ldr	r3, [pc, #248]	@ (8009e8c <showTime+0x120>)
 8009d94:	781a      	ldrb	r2, [r3, #0]
 8009d96:	4b3e      	ldr	r3, [pc, #248]	@ (8009e90 <showTime+0x124>)
 8009d98:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 8009d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8009e88 <showTime+0x11c>)
 8009d9c:	781a      	ldrb	r2, [r3, #0]
 8009d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8009e94 <showTime+0x128>)
 8009da0:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 8009da2:	f000 f89b 	bl	8009edc <UpdateSystemUptime>
  if (lastminute != currentTime.Minutes) {
 8009da6:	4b39      	ldr	r3, [pc, #228]	@ (8009e8c <showTime+0x120>)
 8009da8:	785a      	ldrb	r2, [r3, #1]
 8009daa:	4b3b      	ldr	r3, [pc, #236]	@ (8009e98 <showTime+0x12c>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d039      	beq.n	8009e26 <showTime+0xba>
    lastminute = currentTime.Minutes;
 8009db2:	4b36      	ldr	r3, [pc, #216]	@ (8009e8c <showTime+0x120>)
 8009db4:	785a      	ldrb	r2, [r3, #1]
 8009db6:	4b38      	ldr	r3, [pc, #224]	@ (8009e98 <showTime+0x12c>)
 8009db8:	701a      	strb	r2, [r3, #0]
    Info("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds",
 8009dba:	4b33      	ldr	r3, [pc, #204]	@ (8009e88 <showTime+0x11c>)
 8009dbc:	789b      	ldrb	r3, [r3, #2]
 8009dbe:	469b      	mov	fp, r3
 8009dc0:	4b31      	ldr	r3, [pc, #196]	@ (8009e88 <showTime+0x11c>)
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	1e5a      	subs	r2, r3, #1
 8009dc6:	4b35      	ldr	r3, [pc, #212]	@ (8009e9c <showTime+0x130>)
 8009dc8:	0092      	lsls	r2, r2, #2
 8009dca:	58d3      	ldr	r3, [r2, r3]
 8009dcc:	607b      	str	r3, [r7, #4]
 8009dce:	4a2e      	ldr	r2, [pc, #184]	@ (8009e88 <showTime+0x11c>)
 8009dd0:	78d2      	ldrb	r2, [r2, #3]
 8009dd2:	0010      	movs	r0, r2
 8009dd4:	4a2d      	ldr	r2, [pc, #180]	@ (8009e8c <showTime+0x120>)
 8009dd6:	7812      	ldrb	r2, [r2, #0]
 8009dd8:	0014      	movs	r4, r2
 8009dda:	4a2c      	ldr	r2, [pc, #176]	@ (8009e8c <showTime+0x120>)
 8009ddc:	7852      	ldrb	r2, [r2, #1]
 8009dde:	0015      	movs	r5, r2
 8009de0:	4a2a      	ldr	r2, [pc, #168]	@ (8009e8c <showTime+0x120>)
 8009de2:	7892      	ldrb	r2, [r2, #2]
 8009de4:	0016      	movs	r6, r2
 8009de6:	4a2e      	ldr	r2, [pc, #184]	@ (8009ea0 <showTime+0x134>)
 8009de8:	8812      	ldrh	r2, [r2, #0]
 8009dea:	4694      	mov	ip, r2
 8009dec:	4a2c      	ldr	r2, [pc, #176]	@ (8009ea0 <showTime+0x134>)
 8009dee:	7892      	ldrb	r2, [r2, #2]
 8009df0:	4690      	mov	r8, r2
 8009df2:	4a2b      	ldr	r2, [pc, #172]	@ (8009ea0 <showTime+0x134>)
 8009df4:	78d2      	ldrb	r2, [r2, #3]
 8009df6:	4691      	mov	r9, r2
 8009df8:	4a29      	ldr	r2, [pc, #164]	@ (8009ea0 <showTime+0x134>)
 8009dfa:	7912      	ldrb	r2, [r2, #4]
 8009dfc:	4692      	mov	sl, r2
 8009dfe:	4a29      	ldr	r2, [pc, #164]	@ (8009ea4 <showTime+0x138>)
 8009e00:	4929      	ldr	r1, [pc, #164]	@ (8009ea8 <showTime+0x13c>)
 8009e02:	4653      	mov	r3, sl
 8009e04:	9308      	str	r3, [sp, #32]
 8009e06:	464b      	mov	r3, r9
 8009e08:	9307      	str	r3, [sp, #28]
 8009e0a:	4643      	mov	r3, r8
 8009e0c:	9306      	str	r3, [sp, #24]
 8009e0e:	4663      	mov	r3, ip
 8009e10:	9305      	str	r3, [sp, #20]
 8009e12:	9604      	str	r6, [sp, #16]
 8009e14:	9503      	str	r5, [sp, #12]
 8009e16:	9402      	str	r4, [sp, #8]
 8009e18:	9001      	str	r0, [sp, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	465b      	mov	r3, fp
 8009e20:	2002      	movs	r0, #2
 8009e22:	f009 ffd5 	bl	8013dd0 <CreateLine>
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
  }
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009e26:	4b1b      	ldr	r3, [pc, #108]	@ (8009e94 <showTime+0x128>)
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b07      	cmp	r3, #7
 8009e2c:	d122      	bne.n	8009e74 <showTime+0x108>
 8009e2e:	4b18      	ldr	r3, [pc, #96]	@ (8009e90 <showTime+0x124>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d11e      	bne.n	8009e74 <showTime+0x108>
 8009e36:	4b15      	ldr	r3, [pc, #84]	@ (8009e8c <showTime+0x120>)
 8009e38:	785b      	ldrb	r3, [r3, #1]
 8009e3a:	2b10      	cmp	r3, #16
 8009e3c:	d81a      	bhi.n	8009e74 <showTime+0x108>
 8009e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8009eac <showTime+0x140>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	2201      	movs	r2, #1
 8009e44:	4053      	eors	r3, r2
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d013      	beq.n	8009e74 <showTime+0x108>
 8009e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009e88 <showTime+0x11c>)
 8009e4e:	789b      	ldrb	r3, [r3, #2]
 8009e50:	2b18      	cmp	r3, #24
 8009e52:	d90f      	bls.n	8009e74 <showTime+0x108>
 8009e54:	4b0c      	ldr	r3, [pc, #48]	@ (8009e88 <showTime+0x11c>)
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d003      	beq.n	8009e64 <showTime+0xf8>
 8009e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e88 <showTime+0x11c>)
 8009e5e:	785b      	ldrb	r3, [r3, #1]
 8009e60:	2b0a      	cmp	r3, #10
 8009e62:	d107      	bne.n	8009e74 <showTime+0x108>
    dstchkd = true;
 8009e64:	4b11      	ldr	r3, [pc, #68]	@ (8009eac <showTime+0x140>)
 8009e66:	2201      	movs	r2, #1
 8009e68:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	f7fa fd1a 	bl	80048a4 <setESPTimeStamp>
 8009e70:	e000      	b.n	8009e74 <showTime+0x108>
    return;
 8009e72:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009e74:	46bd      	mov	sp, r7
 8009e76:	b003      	add	sp, #12
 8009e78:	bcf0      	pop	{r4, r5, r6, r7}
 8009e7a:	46bb      	mov	fp, r7
 8009e7c:	46b2      	mov	sl, r6
 8009e7e:	46a9      	mov	r9, r5
 8009e80:	46a0      	mov	r8, r4
 8009e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e84:	20000e44 	.word	0x20000e44
 8009e88:	20000e68 	.word	0x20000e68
 8009e8c:	20000e54 	.word	0x20000e54
 8009e90:	20000e42 	.word	0x20000e42
 8009e94:	20000e43 	.word	0x20000e43
 8009e98:	20000e41 	.word	0x20000e41
 8009e9c:	2000005c 	.word	0x2000005c
 8009ea0:	20000e48 	.word	0x20000e48
 8009ea4:	0802bd38 	.word	0x0802bd38
 8009ea8:	0802bd90 	.word	0x0802bd90
 8009eac:	20000e40 	.word	0x20000e40

08009eb0 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009eb4:	4a07      	ldr	r2, [pc, #28]	@ (8009ed4 <calculateNextNTPTime+0x24>)
 8009eb6:	4b08      	ldr	r3, [pc, #32]	@ (8009ed8 <calculateNextNTPTime+0x28>)
 8009eb8:	0011      	movs	r1, r2
 8009eba:	0018      	movs	r0, r3
 8009ebc:	f000 fa72 	bl	800a3a4 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009ec0:	4a05      	ldr	r2, [pc, #20]	@ (8009ed8 <calculateNextNTPTime+0x28>)
 8009ec2:	4b04      	ldr	r3, [pc, #16]	@ (8009ed4 <calculateNextNTPTime+0x24>)
 8009ec4:	0011      	movs	r1, r2
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	f000 fc7e 	bl	800a7c8 <makeTime>
 8009ecc:	0003      	movs	r3, r0
}
 8009ece:	0018      	movs	r0, r3
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	20000e68 	.word	0x20000e68
 8009ed8:	20000e54 	.word	0x20000e54

08009edc <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8009ee2:	4a25      	ldr	r2, [pc, #148]	@ (8009f78 <UpdateSystemUptime+0x9c>)
 8009ee4:	4b25      	ldr	r3, [pc, #148]	@ (8009f7c <UpdateSystemUptime+0xa0>)
 8009ee6:	0011      	movs	r1, r2
 8009ee8:	0018      	movs	r0, r3
 8009eea:	f000 fa5b 	bl	800a3a4 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8009eee:	4a23      	ldr	r2, [pc, #140]	@ (8009f7c <UpdateSystemUptime+0xa0>)
 8009ef0:	4b21      	ldr	r3, [pc, #132]	@ (8009f78 <UpdateSystemUptime+0x9c>)
 8009ef2:	0011      	movs	r1, r2
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f000 fc67 	bl	800a7c8 <makeTime>
 8009efa:	0002      	movs	r2, r0
 8009efc:	4b20      	ldr	r3, [pc, #128]	@ (8009f80 <UpdateSystemUptime+0xa4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	607b      	str	r3, [r7, #4]
  time = uxUptime;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	603b      	str	r3, [r7, #0]
  myUpTime.Seconds = time % 60;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	213c      	movs	r1, #60	@ 0x3c
 8009f0c:	0018      	movs	r0, r3
 8009f0e:	f7f6 f9cf 	bl	80002b0 <__aeabi_uidivmod>
 8009f12:	000b      	movs	r3, r1
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	4b1b      	ldr	r3, [pc, #108]	@ (8009f84 <UpdateSystemUptime+0xa8>)
 8009f18:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	213c      	movs	r1, #60	@ 0x3c
 8009f1e:	0018      	movs	r0, r3
 8009f20:	f7f6 f940 	bl	80001a4 <__udivsi3>
 8009f24:	0003      	movs	r3, r0
 8009f26:	603b      	str	r3, [r7, #0]
  myUpTime.Minutes = time % 60;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	213c      	movs	r1, #60	@ 0x3c
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7f6 f9bf 	bl	80002b0 <__aeabi_uidivmod>
 8009f32:	000b      	movs	r3, r1
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	4b13      	ldr	r3, [pc, #76]	@ (8009f84 <UpdateSystemUptime+0xa8>)
 8009f38:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	213c      	movs	r1, #60	@ 0x3c
 8009f3e:	0018      	movs	r0, r3
 8009f40:	f7f6 f930 	bl	80001a4 <__udivsi3>
 8009f44:	0003      	movs	r3, r0
 8009f46:	603b      	str	r3, [r7, #0]
  myUpTime.Hour = time % 24;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2118      	movs	r1, #24
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	f7f6 f9af 	bl	80002b0 <__aeabi_uidivmod>
 8009f52:	000b      	movs	r3, r1
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	4b0b      	ldr	r3, [pc, #44]	@ (8009f84 <UpdateSystemUptime+0xa8>)
 8009f58:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2118      	movs	r1, #24
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f7f6 f920 	bl	80001a4 <__udivsi3>
 8009f64:	0003      	movs	r3, r0
 8009f66:	603b      	str	r3, [r7, #0]
  myUpTime.Day = time; // now it is days
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	4b05      	ldr	r3, [pc, #20]	@ (8009f84 <UpdateSystemUptime+0xa8>)
 8009f6e:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8009f70:	46c0      	nop			@ (mov r8, r8)
 8009f72:	46bd      	mov	sp, r7
 8009f74:	b002      	add	sp, #8
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	20000e68 	.word	0x20000e68
 8009f7c:	20000e54 	.word	0x20000e54
 8009f80:	20000e44 	.word	0x20000e44
 8009f84:	20000e48 	.word	0x20000e48

08009f88 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8009f88:	b590      	push	{r4, r7, lr}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	0008      	movs	r0, r1
 8009f92:	0011      	movs	r1, r2
 8009f94:	1cfb      	adds	r3, r7, #3
 8009f96:	1c02      	adds	r2, r0, #0
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	1cbb      	adds	r3, r7, #2
 8009f9c:	1c0a      	adds	r2, r1, #0
 8009f9e:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8009fa0:	230e      	movs	r3, #14
 8009fa2:	18fb      	adds	r3, r7, r3
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009fa8:	230f      	movs	r3, #15
 8009faa:	18fb      	adds	r3, r7, r3
 8009fac:	1cfa      	adds	r2, r7, #3
 8009fae:	7812      	ldrb	r2, [r2, #0]
 8009fb0:	701a      	strb	r2, [r3, #0]
 8009fb2:	e015      	b.n	8009fe0 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8009fb4:	200f      	movs	r0, #15
 8009fb6:	183b      	adds	r3, r7, r0
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	18d2      	adds	r2, r2, r3
 8009fbe:	240e      	movs	r4, #14
 8009fc0:	193b      	adds	r3, r7, r4
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	7811      	ldrb	r1, [r2, #0]
 8009fc6:	2208      	movs	r2, #8
 8009fc8:	18ba      	adds	r2, r7, r2
 8009fca:	54d1      	strb	r1, [r2, r3]
    pos++;
 8009fcc:	193b      	adds	r3, r7, r4
 8009fce:	781a      	ldrb	r2, [r3, #0]
 8009fd0:	193b      	adds	r3, r7, r4
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009fd6:	183b      	adds	r3, r7, r0
 8009fd8:	781a      	ldrb	r2, [r3, #0]
 8009fda:	183b      	adds	r3, r7, r0
 8009fdc:	3201      	adds	r2, #1
 8009fde:	701a      	strb	r2, [r3, #0]
 8009fe0:	200f      	movs	r0, #15
 8009fe2:	183a      	adds	r2, r7, r0
 8009fe4:	1cbb      	adds	r3, r7, #2
 8009fe6:	7812      	ldrb	r2, [r2, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d9e2      	bls.n	8009fb4 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8009fee:	230e      	movs	r3, #14
 8009ff0:	18fb      	adds	r3, r7, r3
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2208      	movs	r2, #8
 8009ff6:	18ba      	adds	r2, r7, r2
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8009ffc:	1cfb      	adds	r3, r7, #3
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b13      	cmp	r3, #19
 800a002:	d849      	bhi.n	800a098 <aBuff2int+0x110>
    if (start == 17) { //month
 800a004:	1cfb      	adds	r3, r7, #3
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b11      	cmp	r3, #17
 800a00a:	d122      	bne.n	800a052 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800a00c:	183b      	adds	r3, r7, r0
 800a00e:	2200      	movs	r2, #0
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	e018      	b.n	800a046 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800a014:	240f      	movs	r4, #15
 800a016:	193b      	adds	r3, r7, r4
 800a018:	781a      	ldrb	r2, [r3, #0]
 800a01a:	4b25      	ldr	r3, [pc, #148]	@ (800a0b0 <aBuff2int+0x128>)
 800a01c:	0092      	lsls	r2, r2, #2
 800a01e:	58d2      	ldr	r2, [r2, r3]
 800a020:	2308      	movs	r3, #8
 800a022:	18fb      	adds	r3, r7, r3
 800a024:	0011      	movs	r1, r2
 800a026:	0018      	movs	r0, r3
 800a028:	f7f6 f896 	bl	8000158 <strcmp>
 800a02c:	1e03      	subs	r3, r0, #0
 800a02e:	d104      	bne.n	800a03a <aBuff2int+0xb2>
          return i+1;
 800a030:	193b      	adds	r3, r7, r4
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	b2db      	uxtb	r3, r3
 800a038:	e035      	b.n	800a0a6 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800a03a:	210f      	movs	r1, #15
 800a03c:	187b      	adds	r3, r7, r1
 800a03e:	781a      	ldrb	r2, [r3, #0]
 800a040:	187b      	adds	r3, r7, r1
 800a042:	3201      	adds	r2, #1
 800a044:	701a      	strb	r2, [r3, #0]
 800a046:	230f      	movs	r3, #15
 800a048:	18fb      	adds	r3, r7, r3
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b0b      	cmp	r3, #11
 800a04e:	d9e1      	bls.n	800a014 <aBuff2int+0x8c>
 800a050:	e022      	b.n	800a098 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800a052:	230f      	movs	r3, #15
 800a054:	18fb      	adds	r3, r7, r3
 800a056:	2200      	movs	r2, #0
 800a058:	701a      	strb	r2, [r3, #0]
 800a05a:	e018      	b.n	800a08e <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 800a05c:	240f      	movs	r4, #15
 800a05e:	193b      	adds	r3, r7, r4
 800a060:	781a      	ldrb	r2, [r3, #0]
 800a062:	4b14      	ldr	r3, [pc, #80]	@ (800a0b4 <aBuff2int+0x12c>)
 800a064:	0092      	lsls	r2, r2, #2
 800a066:	58d2      	ldr	r2, [r2, r3]
 800a068:	2308      	movs	r3, #8
 800a06a:	18fb      	adds	r3, r7, r3
 800a06c:	0011      	movs	r1, r2
 800a06e:	0018      	movs	r0, r3
 800a070:	f7f6 f872 	bl	8000158 <strcmp>
 800a074:	1e03      	subs	r3, r0, #0
 800a076:	d104      	bne.n	800a082 <aBuff2int+0xfa>
          return i+1;
 800a078:	193b      	adds	r3, r7, r4
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	3301      	adds	r3, #1
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	e011      	b.n	800a0a6 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800a082:	210f      	movs	r1, #15
 800a084:	187b      	adds	r3, r7, r1
 800a086:	781a      	ldrb	r2, [r3, #0]
 800a088:	187b      	adds	r3, r7, r1
 800a08a:	3201      	adds	r2, #1
 800a08c:	701a      	strb	r2, [r3, #0]
 800a08e:	230f      	movs	r3, #15
 800a090:	18fb      	adds	r3, r7, r3
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b06      	cmp	r3, #6
 800a096:	d9e1      	bls.n	800a05c <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800a098:	2308      	movs	r3, #8
 800a09a:	18fb      	adds	r3, r7, r3
 800a09c:	0018      	movs	r0, r3
 800a09e:	f01a fc6c 	bl	802497a <atoi>
 800a0a2:	0003      	movs	r3, r0
 800a0a4:	b2db      	uxtb	r3, r3
}
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	b005      	add	sp, #20
 800a0ac:	bd90      	pop	{r4, r7, pc}
 800a0ae:	46c0      	nop			@ (mov r8, r8)
 800a0b0:	2000005c 	.word	0x2000005c
 800a0b4:	20000040 	.word	0x20000040

0800a0b8 <ParseTime>:

void ParseTime(char* buffer) {
 800a0b8:	b590      	push	{r4, r7, lr}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	6078      	str	r0, [r7, #4]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a0c0:	4a7b      	ldr	r2, [pc, #492]	@ (800a2b0 <ParseTime+0x1f8>)
 800a0c2:	4b7c      	ldr	r3, [pc, #496]	@ (800a2b4 <ParseTime+0x1fc>)
 800a0c4:	0011      	movs	r1, r2
 800a0c6:	0018      	movs	r0, r3
 800a0c8:	f000 f96c 	bl	800a3a4 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2219      	movs	r2, #25
 800a0d0:	2118      	movs	r1, #24
 800a0d2:	0018      	movs	r0, r3
 800a0d4:	f7ff ff58 	bl	8009f88 <aBuff2int>
 800a0d8:	0003      	movs	r3, r0
 800a0da:	001a      	movs	r2, r3
 800a0dc:	4b75      	ldr	r3, [pc, #468]	@ (800a2b4 <ParseTime+0x1fc>)
 800a0de:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	221c      	movs	r2, #28
 800a0e4:	211b      	movs	r1, #27
 800a0e6:	0018      	movs	r0, r3
 800a0e8:	f7ff ff4e 	bl	8009f88 <aBuff2int>
 800a0ec:	0003      	movs	r3, r0
 800a0ee:	001a      	movs	r2, r3
 800a0f0:	4b70      	ldr	r3, [pc, #448]	@ (800a2b4 <ParseTime+0x1fc>)
 800a0f2:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	221f      	movs	r2, #31
 800a0f8:	211e      	movs	r1, #30
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f7ff ff44 	bl	8009f88 <aBuff2int>
 800a100:	0003      	movs	r3, r0
 800a102:	001a      	movs	r2, r3
 800a104:	4b6b      	ldr	r3, [pc, #428]	@ (800a2b4 <ParseTime+0x1fc>)
 800a106:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2224      	movs	r2, #36	@ 0x24
 800a10c:	2123      	movs	r1, #35	@ 0x23
 800a10e:	0018      	movs	r0, r3
 800a110:	f7ff ff3a 	bl	8009f88 <aBuff2int>
 800a114:	0003      	movs	r3, r0
 800a116:	001a      	movs	r2, r3
 800a118:	4b65      	ldr	r3, [pc, #404]	@ (800a2b0 <ParseTime+0x1f8>)
 800a11a:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2213      	movs	r2, #19
 800a120:	2111      	movs	r1, #17
 800a122:	0018      	movs	r0, r3
 800a124:	f7ff ff30 	bl	8009f88 <aBuff2int>
 800a128:	0003      	movs	r3, r0
 800a12a:	001a      	movs	r2, r3
 800a12c:	4b60      	ldr	r3, [pc, #384]	@ (800a2b0 <ParseTime+0x1f8>)
 800a12e:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2216      	movs	r2, #22
 800a134:	2115      	movs	r1, #21
 800a136:	0018      	movs	r0, r3
 800a138:	f7ff ff26 	bl	8009f88 <aBuff2int>
 800a13c:	0003      	movs	r3, r0
 800a13e:	001a      	movs	r2, r3
 800a140:	4b5b      	ldr	r3, [pc, #364]	@ (800a2b0 <ParseTime+0x1f8>)
 800a142:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	220f      	movs	r2, #15
 800a148:	210d      	movs	r1, #13
 800a14a:	0018      	movs	r0, r3
 800a14c:	f7ff ff1c 	bl	8009f88 <aBuff2int>
 800a150:	0003      	movs	r3, r0
 800a152:	001a      	movs	r2, r3
 800a154:	4b56      	ldr	r3, [pc, #344]	@ (800a2b0 <ParseTime+0x1f8>)
 800a156:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a158:	4b56      	ldr	r3, [pc, #344]	@ (800a2b4 <ParseTime+0x1fc>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	001c      	movs	r4, r3
 800a15e:	4b55      	ldr	r3, [pc, #340]	@ (800a2b4 <ParseTime+0x1fc>)
 800a160:	785b      	ldrb	r3, [r3, #1]
 800a162:	0018      	movs	r0, r3
 800a164:	4b53      	ldr	r3, [pc, #332]	@ (800a2b4 <ParseTime+0x1fc>)
 800a166:	789b      	ldrb	r3, [r3, #2]
 800a168:	4a53      	ldr	r2, [pc, #332]	@ (800a2b8 <ParseTime+0x200>)
 800a16a:	4954      	ldr	r1, [pc, #336]	@ (800a2bc <ParseTime+0x204>)
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	9000      	str	r0, [sp, #0]
 800a170:	0023      	movs	r3, r4
 800a172:	2003      	movs	r0, #3
 800a174:	f009 fe2c 	bl	8013dd0 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800a178:	4b4d      	ldr	r3, [pc, #308]	@ (800a2b0 <ParseTime+0x1f8>)
 800a17a:	789b      	ldrb	r3, [r3, #2]
 800a17c:	001c      	movs	r4, r3
 800a17e:	4b4c      	ldr	r3, [pc, #304]	@ (800a2b0 <ParseTime+0x1f8>)
 800a180:	785b      	ldrb	r3, [r3, #1]
 800a182:	0018      	movs	r0, r3
 800a184:	4b4a      	ldr	r3, [pc, #296]	@ (800a2b0 <ParseTime+0x1f8>)
 800a186:	78db      	ldrb	r3, [r3, #3]
 800a188:	4a4d      	ldr	r2, [pc, #308]	@ (800a2c0 <ParseTime+0x208>)
 800a18a:	494c      	ldr	r1, [pc, #304]	@ (800a2bc <ParseTime+0x204>)
 800a18c:	9301      	str	r3, [sp, #4]
 800a18e:	9000      	str	r0, [sp, #0]
 800a190:	0023      	movs	r3, r4
 800a192:	2003      	movs	r0, #3
 800a194:	f009 fe1c 	bl	8013dd0 <CreateLine>
  RTC_SetTime(&currentTime);
 800a198:	4b46      	ldr	r3, [pc, #280]	@ (800a2b4 <ParseTime+0x1fc>)
 800a19a:	0018      	movs	r0, r3
 800a19c:	f000 f89e 	bl	800a2dc <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800a1a0:	4b43      	ldr	r3, [pc, #268]	@ (800a2b0 <ParseTime+0x1f8>)
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	f000 f8c0 	bl	800a328 <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800a1a8:	230f      	movs	r3, #15
 800a1aa:	18fb      	adds	r3, r7, r3
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 800a1b0:	4b3f      	ldr	r3, [pc, #252]	@ (800a2b0 <ParseTime+0x1f8>)
 800a1b2:	785b      	ldrb	r3, [r3, #1]
 800a1b4:	60bb      	str	r3, [r7, #8]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	dd04      	ble.n	800a1c6 <ParseTime+0x10e>
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	2b0a      	cmp	r3, #10
 800a1c0:	dc01      	bgt.n	800a1c6 <ParseTime+0x10e>
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	e000      	b.n	800a1c8 <ParseTime+0x110>
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	200f      	movs	r0, #15
 800a1ca:	183b      	adds	r3, r7, r0
 800a1cc:	701a      	strb	r2, [r3, #0]
 800a1ce:	781a      	ldrb	r2, [r3, #0]
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	400a      	ands	r2, r1
 800a1d4:	701a      	strb	r2, [r3, #0]
  if (dst)
 800a1d6:	0002      	movs	r2, r0
 800a1d8:	18bb      	adds	r3, r7, r2
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d01d      	beq.n	800a21c <ParseTime+0x164>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d10b      	bne.n	800a1fe <ParseTime+0x146>
 800a1e6:	4b32      	ldr	r3, [pc, #200]	@ (800a2b0 <ParseTime+0x1f8>)
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	2b07      	cmp	r3, #7
 800a1ec:	d107      	bne.n	800a1fe <ParseTime+0x146>
 800a1ee:	4b30      	ldr	r3, [pc, #192]	@ (800a2b0 <ParseTime+0x1f8>)
 800a1f0:	789b      	ldrb	r3, [r3, #2]
 800a1f2:	2b18      	cmp	r3, #24
 800a1f4:	d803      	bhi.n	800a1fe <ParseTime+0x146>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 800a1f6:	18bb      	adds	r3, r7, r2
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	701a      	strb	r2, [r3, #0]
 800a1fc:	e00e      	b.n	800a21c <ParseTime+0x164>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b0a      	cmp	r3, #10
 800a202:	d10b      	bne.n	800a21c <ParseTime+0x164>
 800a204:	4b2a      	ldr	r3, [pc, #168]	@ (800a2b0 <ParseTime+0x1f8>)
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	2b07      	cmp	r3, #7
 800a20a:	d107      	bne.n	800a21c <ParseTime+0x164>
 800a20c:	4b28      	ldr	r3, [pc, #160]	@ (800a2b0 <ParseTime+0x1f8>)
 800a20e:	789b      	ldrb	r3, [r3, #2]
 800a210:	2b18      	cmp	r3, #24
 800a212:	d803      	bhi.n	800a21c <ParseTime+0x164>
    {
        dst = false;
 800a214:	230f      	movs	r3, #15
 800a216:	18fb      	adds	r3, r7, r3
 800a218:	2200      	movs	r2, #0
 800a21a:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 800a21c:	230f      	movs	r3, #15
 800a21e:	18fb      	adds	r3, r7, r3
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d02a      	beq.n	800a27c <ParseTime+0x1c4>
    Info("Daylight Saving Time active");
 800a226:	4a27      	ldr	r2, [pc, #156]	@ (800a2c4 <ParseTime+0x20c>)
 800a228:	4b27      	ldr	r3, [pc, #156]	@ (800a2c8 <ParseTime+0x210>)
 800a22a:	0019      	movs	r1, r3
 800a22c:	2002      	movs	r0, #2
 800a22e:	f009 fdcf 	bl	8013dd0 <CreateLine>
    HAL_Delay(1000);
 800a232:	23fa      	movs	r3, #250	@ 0xfa
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	0018      	movs	r0, r3
 800a238:	f00a fb4c 	bl	80148d4 <HAL_Delay>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 800a23c:	4b23      	ldr	r3, [pc, #140]	@ (800a2cc <ParseTime+0x214>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	0018      	movs	r0, r3
 800a242:	f012 f9d9 	bl	801c5f8 <HAL_RTC_DST_Add1Hour>
    HAL_Delay(1000);
 800a246:	23fa      	movs	r3, #250	@ 0xfa
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	0018      	movs	r0, r3
 800a24c:	f00a fb42 	bl	80148d4 <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 800a250:	4a17      	ldr	r2, [pc, #92]	@ (800a2b0 <ParseTime+0x1f8>)
 800a252:	4b18      	ldr	r3, [pc, #96]	@ (800a2b4 <ParseTime+0x1fc>)
 800a254:	0011      	movs	r1, r2
 800a256:	0018      	movs	r0, r3
 800a258:	f000 f8a4 	bl	800a3a4 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a25c:	4b15      	ldr	r3, [pc, #84]	@ (800a2b4 <ParseTime+0x1fc>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	001c      	movs	r4, r3
 800a262:	4b14      	ldr	r3, [pc, #80]	@ (800a2b4 <ParseTime+0x1fc>)
 800a264:	785b      	ldrb	r3, [r3, #1]
 800a266:	0018      	movs	r0, r3
 800a268:	4b12      	ldr	r3, [pc, #72]	@ (800a2b4 <ParseTime+0x1fc>)
 800a26a:	789b      	ldrb	r3, [r3, #2]
 800a26c:	4a18      	ldr	r2, [pc, #96]	@ (800a2d0 <ParseTime+0x218>)
 800a26e:	4913      	ldr	r1, [pc, #76]	@ (800a2bc <ParseTime+0x204>)
 800a270:	9301      	str	r3, [sp, #4]
 800a272:	9000      	str	r0, [sp, #0]
 800a274:	0023      	movs	r3, r4
 800a276:	2003      	movs	r0, #3
 800a278:	f009 fdaa 	bl	8013dd0 <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 800a27c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b0 <ParseTime+0x1f8>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b02      	cmp	r3, #2
 800a282:	d104      	bne.n	800a28e <ParseTime+0x1d6>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800a284:	f004 fa3e 	bl	800e704 <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 800a288:	4b12      	ldr	r3, [pc, #72]	@ (800a2d4 <ParseTime+0x21c>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 800a28e:	4b12      	ldr	r3, [pc, #72]	@ (800a2d8 <ParseTime+0x220>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d108      	bne.n	800a2a8 <ParseTime+0x1f0>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800a296:	4a07      	ldr	r2, [pc, #28]	@ (800a2b4 <ParseTime+0x1fc>)
 800a298:	4b05      	ldr	r3, [pc, #20]	@ (800a2b0 <ParseTime+0x1f8>)
 800a29a:	0011      	movs	r1, r2
 800a29c:	0018      	movs	r0, r3
 800a29e:	f000 fa93 	bl	800a7c8 <makeTime>
 800a2a2:	0002      	movs	r2, r0
 800a2a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d8 <ParseTime+0x220>)
 800a2a6:	601a      	str	r2, [r3, #0]
  }
}
 800a2a8:	46c0      	nop			@ (mov r8, r8)
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	b005      	add	sp, #20
 800a2ae:	bd90      	pop	{r4, r7, pc}
 800a2b0:	20000e68 	.word	0x20000e68
 800a2b4:	20000e54 	.word	0x20000e54
 800a2b8:	0802bd94 	.word	0x0802bd94
 800a2bc:	0802bdcc 	.word	0x0802bdcc
 800a2c0:	0802bdd0 	.word	0x0802bdd0
 800a2c4:	0802be04 	.word	0x0802be04
 800a2c8:	0802bd90 	.word	0x0802bd90
 800a2cc:	20000e50 	.word	0x20000e50
 800a2d0:	0802be20 	.word	0x0802be20
 800a2d4:	20000e40 	.word	0x20000e40
 800a2d8:	20000e44 	.word	0x20000e44

0800a2dc <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a2f6:	4b09      	ldr	r3, [pc, #36]	@ (800a31c <RTC_SetTime+0x40>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6879      	ldr	r1, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	0018      	movs	r0, r3
 800a300:	f011 ff66 	bl	801c1d0 <HAL_RTC_SetTime>
 800a304:	1e03      	subs	r3, r0, #0
 800a306:	d005      	beq.n	800a314 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 800a308:	4a05      	ldr	r2, [pc, #20]	@ (800a320 <RTC_SetTime+0x44>)
 800a30a:	4b06      	ldr	r3, [pc, #24]	@ (800a324 <RTC_SetTime+0x48>)
 800a30c:	0019      	movs	r1, r3
 800a30e:	2001      	movs	r0, #1
 800a310:	f009 fd5e 	bl	8013dd0 <CreateLine>
    }
}
 800a314:	46c0      	nop			@ (mov r8, r8)
 800a316:	46bd      	mov	sp, r7
 800a318:	b002      	add	sp, #8
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	20000e50 	.word	0x20000e50
 800a320:	0802be54 	.word	0x0802be54
 800a324:	0802be70 	.word	0x0802be70

0800a328 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a330:	4b16      	ldr	r3, [pc, #88]	@ (800a38c <RTC_SetDate+0x64>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6879      	ldr	r1, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	0018      	movs	r0, r3
 800a33a:	f012 f851 	bl	801c3e0 <HAL_RTC_SetDate>
 800a33e:	1e03      	subs	r3, r0, #0
 800a340:	d005      	beq.n	800a34e <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800a342:	4a13      	ldr	r2, [pc, #76]	@ (800a390 <RTC_SetDate+0x68>)
 800a344:	4b13      	ldr	r3, [pc, #76]	@ (800a394 <RTC_SetDate+0x6c>)
 800a346:	0019      	movs	r1, r3
 800a348:	2001      	movs	r0, #1
 800a34a:	f009 fd41 	bl	8013dd0 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800a34e:	4b0f      	ldr	r3, [pc, #60]	@ (800a38c <RTC_SetDate+0x64>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2101      	movs	r1, #1
 800a354:	0018      	movs	r0, r3
 800a356:	f012 fba7 	bl	801caa8 <HAL_RTCEx_BKUPRead>
 800a35a:	0003      	movs	r3, r0
 800a35c:	4a0e      	ldr	r2, [pc, #56]	@ (800a398 <RTC_SetDate+0x70>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d010      	beq.n	800a384 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800a362:	4a0e      	ldr	r2, [pc, #56]	@ (800a39c <RTC_SetDate+0x74>)
 800a364:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a0 <RTC_SetDate+0x78>)
 800a366:	0019      	movs	r1, r3
 800a368:	2003      	movs	r0, #3
 800a36a:	f009 fd31 	bl	8013dd0 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800a36e:	f010 fec5 	bl	801b0fc <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800a372:	4b06      	ldr	r3, [pc, #24]	@ (800a38c <RTC_SetDate+0x64>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a08      	ldr	r2, [pc, #32]	@ (800a398 <RTC_SetDate+0x70>)
 800a378:	2101      	movs	r1, #1
 800a37a:	0018      	movs	r0, r3
 800a37c:	f012 fb7c 	bl	801ca78 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800a380:	f010 feca 	bl	801b118 <HAL_PWR_DisableBkUpAccess>
    }
}
 800a384:	46c0      	nop			@ (mov r8, r8)
 800a386:	46bd      	mov	sp, r7
 800a388:	b002      	add	sp, #8
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20000e50 	.word	0x20000e50
 800a390:	0802be74 	.word	0x0802be74
 800a394:	0802be70 	.word	0x0802be70
 800a398:	0000bebe 	.word	0x0000bebe
 800a39c:	0802be90 	.word	0x0802be90
 800a3a0:	0802bdcc 	.word	0x0802bdcc

0800a3a4 <RTC_GetTime>:

void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800a3a4:	b590      	push	{r4, r7, lr}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800a3ae:	240f      	movs	r4, #15
 800a3b0:	193b      	adds	r3, r7, r4
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800a3b6:	230e      	movs	r3, #14
 800a3b8:	18fb      	adds	r3, r7, r3
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	701a      	strb	r2, [r3, #0]
// Battery_Status status;
//  status = powerCheck();
//  if ( status == BATTERY_CRITICAL) {
  if (batteryCharge  < 3.77) {
 800a3be:	4b31      	ldr	r3, [pc, #196]	@ (800a484 <RTC_GetTime+0xe0>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	1c18      	adds	r0, r3, #0
 800a3c4:	f7f9 fa66 	bl	8003894 <__aeabi_f2d>
 800a3c8:	4a2f      	ldr	r2, [pc, #188]	@ (800a488 <RTC_GetTime+0xe4>)
 800a3ca:	4b30      	ldr	r3, [pc, #192]	@ (800a48c <RTC_GetTime+0xe8>)
 800a3cc:	f7f6 f876 	bl	80004bc <__aeabi_dcmplt>
 800a3d0:	1e03      	subs	r3, r0, #0
 800a3d2:	d004      	beq.n	800a3de <RTC_GetTime+0x3a>
    //    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800a3d4:	193b      	adds	r3, r7, r4
 800a3d6:	781a      	ldrb	r2, [r3, #0]
 800a3d8:	193b      	adds	r3, r7, r4
 800a3da:	3201      	adds	r2, #1
 800a3dc:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800a3de:	230d      	movs	r3, #13
 800a3e0:	18fb      	adds	r3, r7, r3
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	e03f      	b.n	800a468 <RTC_GetTime+0xc4>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a3e8:	4b29      	ldr	r3, [pc, #164]	@ (800a490 <RTC_GetTime+0xec>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6879      	ldr	r1, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	f011 ff97 	bl	801c324 <HAL_RTC_GetTime>
 800a3f6:	1e03      	subs	r3, r0, #0
 800a3f8:	d005      	beq.n	800a406 <RTC_GetTime+0x62>
      Error("Error getting time from RTC");
 800a3fa:	4a26      	ldr	r2, [pc, #152]	@ (800a494 <RTC_GetTime+0xf0>)
 800a3fc:	4b26      	ldr	r3, [pc, #152]	@ (800a498 <RTC_GetTime+0xf4>)
 800a3fe:	0019      	movs	r1, r3
 800a400:	2001      	movs	r0, #1
 800a402:	f009 fce5 	bl	8013dd0 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a406:	4b22      	ldr	r3, [pc, #136]	@ (800a490 <RTC_GetTime+0xec>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	2200      	movs	r2, #0
 800a40e:	0018      	movs	r0, r3
 800a410:	f012 f87a 	bl	801c508 <HAL_RTC_GetDate>
 800a414:	1e03      	subs	r3, r0, #0
 800a416:	d005      	beq.n	800a424 <RTC_GetTime+0x80>
      Error("Error getting date from RTC");
 800a418:	4a20      	ldr	r2, [pc, #128]	@ (800a49c <RTC_GetTime+0xf8>)
 800a41a:	4b1f      	ldr	r3, [pc, #124]	@ (800a498 <RTC_GetTime+0xf4>)
 800a41c:	0019      	movs	r1, r3
 800a41e:	2001      	movs	r0, #1
 800a420:	f009 fcd6 	bl	8013dd0 <CreateLine>
    }
//    if ( status == BATTERY_CRITICAL) {
    if (batteryCharge  < 3.77) {
 800a424:	4b17      	ldr	r3, [pc, #92]	@ (800a484 <RTC_GetTime+0xe0>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	1c18      	adds	r0, r3, #0
 800a42a:	f7f9 fa33 	bl	8003894 <__aeabi_f2d>
 800a42e:	4a16      	ldr	r2, [pc, #88]	@ (800a488 <RTC_GetTime+0xe4>)
 800a430:	4b16      	ldr	r3, [pc, #88]	@ (800a48c <RTC_GetTime+0xe8>)
 800a432:	f7f6 f843 	bl	80004bc <__aeabi_dcmplt>
 800a436:	1e03      	subs	r3, r0, #0
 800a438:	d010      	beq.n	800a45c <RTC_GetTime+0xb8>
      if (prevValue != gTime->Hours) {
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	210e      	movs	r1, #14
 800a440:	187a      	adds	r2, r7, r1
 800a442:	7812      	ldrb	r2, [r2, #0]
 800a444:	429a      	cmp	r2, r3
 800a446:	d018      	beq.n	800a47a <RTC_GetTime+0xd6>
        prevValue = gTime->Hours;
 800a448:	187b      	adds	r3, r7, r1
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	701a      	strb	r2, [r3, #0]
        t++;
 800a450:	210f      	movs	r1, #15
 800a452:	187b      	adds	r3, r7, r1
 800a454:	781a      	ldrb	r2, [r3, #0]
 800a456:	187b      	adds	r3, r7, r1
 800a458:	3201      	adds	r2, #1
 800a45a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800a45c:	210d      	movs	r1, #13
 800a45e:	187b      	adds	r3, r7, r1
 800a460:	781a      	ldrb	r2, [r3, #0]
 800a462:	187b      	adds	r3, r7, r1
 800a464:	3201      	adds	r2, #1
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	230d      	movs	r3, #13
 800a46a:	18fa      	adds	r2, r7, r3
 800a46c:	230f      	movs	r3, #15
 800a46e:	18fb      	adds	r3, r7, r3
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	429a      	cmp	r2, r3
 800a476:	d3b7      	bcc.n	800a3e8 <RTC_GetTime+0x44>
 800a478:	e000      	b.n	800a47c <RTC_GetTime+0xd8>
      }
      else {
        return;
 800a47a:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800a47c:	46bd      	mov	sp, r7
 800a47e:	b005      	add	sp, #20
 800a480:	bd90      	pop	{r4, r7, pc}
 800a482:	46c0      	nop			@ (mov r8, r8)
 800a484:	20002160 	.word	0x20002160
 800a488:	c28f5c29 	.word	0xc28f5c29
 800a48c:	400e28f5 	.word	0x400e28f5
 800a490:	20000e50 	.word	0x20000e50
 800a494:	0802bea8 	.word	0x0802bea8
 800a498:	0802be70 	.word	0x0802be70
 800a49c:	0802bec4 	.word	0x0802bec4

0800a4a0 <getPosixTime>:

// Functie om de tijd uit te lezen
uint32_t getPosixTime(void) {
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a4a4:	4a07      	ldr	r2, [pc, #28]	@ (800a4c4 <getPosixTime+0x24>)
 800a4a6:	4b08      	ldr	r3, [pc, #32]	@ (800a4c8 <getPosixTime+0x28>)
 800a4a8:	0011      	movs	r1, r2
 800a4aa:	0018      	movs	r0, r3
 800a4ac:	f7ff ff7a 	bl	800a3a4 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a4b0:	4a05      	ldr	r2, [pc, #20]	@ (800a4c8 <getPosixTime+0x28>)
 800a4b2:	4b04      	ldr	r3, [pc, #16]	@ (800a4c4 <getPosixTime+0x24>)
 800a4b4:	0011      	movs	r1, r2
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f000 f986 	bl	800a7c8 <makeTime>
 800a4bc:	0003      	movs	r3, r0
}
 800a4be:	0018      	movs	r0, r3
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20000e68 	.word	0x20000e68
 800a4c8:	20000e54 	.word	0x20000e54

0800a4cc <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800a4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	af04      	add	r7, sp, #16
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800a4d6:	4a12      	ldr	r2, [pc, #72]	@ (800a520 <getUTCfromPosixTime+0x54>)
 800a4d8:	4912      	ldr	r1, [pc, #72]	@ (800a524 <getUTCfromPosixTime+0x58>)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f000 fa3d 	bl	800a95c <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a4e2:	4b10      	ldr	r3, [pc, #64]	@ (800a524 <getUTCfromPosixTime+0x58>)
 800a4e4:	789b      	ldrb	r3, [r3, #2]
 800a4e6:	001e      	movs	r6, r3
 800a4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a524 <getUTCfromPosixTime+0x58>)
 800a4ea:	785b      	ldrb	r3, [r3, #1]
 800a4ec:	469c      	mov	ip, r3
 800a4ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a524 <getUTCfromPosixTime+0x58>)
 800a4f0:	78db      	ldrb	r3, [r3, #3]
 800a4f2:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a520 <getUTCfromPosixTime+0x54>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a4f8:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a4fa:	4b09      	ldr	r3, [pc, #36]	@ (800a520 <getUTCfromPosixTime+0x54>)
 800a4fc:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a4fe:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a500:	4b07      	ldr	r3, [pc, #28]	@ (800a520 <getUTCfromPosixTime+0x54>)
 800a502:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a504:	4908      	ldr	r1, [pc, #32]	@ (800a528 <getUTCfromPosixTime+0x5c>)
 800a506:	6838      	ldr	r0, [r7, #0]
 800a508:	9303      	str	r3, [sp, #12]
 800a50a:	9502      	str	r5, [sp, #8]
 800a50c:	9401      	str	r4, [sp, #4]
 800a50e:	9200      	str	r2, [sp, #0]
 800a510:	4663      	mov	r3, ip
 800a512:	0032      	movs	r2, r6
 800a514:	f01b fe86 	bl	8026224 <siprintf>
}
 800a518:	46c0      	nop			@ (mov r8, r8)
 800a51a:	46bd      	mov	sp, r7
 800a51c:	b003      	add	sp, #12
 800a51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a520:	20000e54 	.word	0x20000e54
 800a524:	20000e68 	.word	0x20000e68
 800a528:	0802bee0 	.word	0x0802bee0

0800a52c <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a534:	4b10      	ldr	r3, [pc, #64]	@ (800a578 <RTC_SetWakeUpTimer+0x4c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	0018      	movs	r0, r3
 800a53a:	f012 fa01 	bl	801c940 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800a53e:	4b0e      	ldr	r3, [pc, #56]	@ (800a578 <RTC_SetWakeUpTimer+0x4c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	22ff      	movs	r2, #255	@ 0xff
 800a548:	401a      	ands	r2, r3
 800a54a:	4b0b      	ldr	r3, [pc, #44]	@ (800a578 <RTC_SetWakeUpTimer+0x4c>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	490a      	ldr	r1, [pc, #40]	@ (800a57c <RTC_SetWakeUpTimer+0x50>)
 800a552:	430a      	orrs	r2, r1
 800a554:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a556:	4b0a      	ldr	r3, [pc, #40]	@ (800a580 <RTC_SetWakeUpTimer+0x54>)
 800a558:	2280      	movs	r2, #128	@ 0x80
 800a55a:	0352      	lsls	r2, r2, #13
 800a55c:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800a55e:	4b06      	ldr	r3, [pc, #24]	@ (800a578 <RTC_SetWakeUpTimer+0x4c>)
 800a560:	6818      	ldr	r0, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	3b01      	subs	r3, #1
 800a566:	2204      	movs	r2, #4
 800a568:	0019      	movs	r1, r3
 800a56a:	f012 f911 	bl	801c790 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a56e:	46c0      	nop			@ (mov r8, r8)
 800a570:	46bd      	mov	sp, r7
 800a572:	b002      	add	sp, #8
 800a574:	bd80      	pop	{r7, pc}
 800a576:	46c0      	nop			@ (mov r8, r8)
 800a578:	20000e50 	.word	0x20000e50
 800a57c:	fffffb7f 	.word	0xfffffb7f
 800a580:	40010400 	.word	0x40010400

0800a584 <Enter_Stop_Mode_for_empty_battery>:
  HAL_PWR_EnterSTANDBYMode(); // Not such a good idea, the esp is powered when gpio is high impedance
}
*/

void Enter_Stop_Mode_for_empty_battery(uint16_t sleepTime)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af02      	add	r7, sp, #8
 800a58a:	0002      	movs	r2, r0
 800a58c:	1dbb      	adds	r3, r7, #6
 800a58e:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a590:	4b22      	ldr	r3, [pc, #136]	@ (800a61c <Enter_Stop_Mode_for_empty_battery+0x98>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <Enter_Stop_Mode_for_empty_battery+0x18>
    sen5x_Power_Off();
 800a598:	f004 f888 	bl	800e6ac <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", batteryCharge);
 800a59c:	4b20      	ldr	r3, [pc, #128]	@ (800a620 <Enter_Stop_Mode_for_empty_battery+0x9c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	1c18      	adds	r0, r3, #0
 800a5a2:	f7f9 f977 	bl	8003894 <__aeabi_f2d>
 800a5a6:	0002      	movs	r2, r0
 800a5a8:	000b      	movs	r3, r1
 800a5aa:	481e      	ldr	r0, [pc, #120]	@ (800a624 <Enter_Stop_Mode_for_empty_battery+0xa0>)
 800a5ac:	491e      	ldr	r1, [pc, #120]	@ (800a628 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a5ae:	9200      	str	r2, [sp, #0]
 800a5b0:	9301      	str	r3, [sp, #4]
 800a5b2:	0002      	movs	r2, r0
 800a5b4:	2002      	movs	r0, #2
 800a5b6:	f009 fc0b 	bl	8013dd0 <CreateLine>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a5ba:	1dbb      	adds	r3, r7, #6
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	4a1b      	ldr	r2, [pc, #108]	@ (800a62c <Enter_Stop_Mode_for_empty_battery+0xa8>)
 800a5c0:	491b      	ldr	r1, [pc, #108]	@ (800a630 <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a5c2:	2003      	movs	r0, #3
 800a5c4:	f009 fc04 	bl	8013dd0 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a5c8:	f7ff ff6a 	bl	800a4a0 <getPosixTime>
 800a5cc:	0002      	movs	r2, r0
 800a5ce:	1dbb      	adds	r3, r7, #6
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	18d3      	adds	r3, r2, r3
 800a5d4:	4a17      	ldr	r2, [pc, #92]	@ (800a634 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a5d6:	0011      	movs	r1, r2
 800a5d8:	0018      	movs	r0, r3
 800a5da:	f7ff ff77 	bl	800a4cc <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a5de:	4b15      	ldr	r3, [pc, #84]	@ (800a634 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a5e0:	4a15      	ldr	r2, [pc, #84]	@ (800a638 <Enter_Stop_Mode_for_empty_battery+0xb4>)
 800a5e2:	4911      	ldr	r1, [pc, #68]	@ (800a628 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a5e4:	2002      	movs	r0, #2
 800a5e6:	f009 fbf3 	bl	8013dd0 <CreateLine>
  HAL_Delay(100);
 800a5ea:	2064      	movs	r0, #100	@ 0x64
 800a5ec:	f00a f972 	bl	80148d4 <HAL_Delay>
  HAL_SuspendTick();
 800a5f0:	f00a f994 	bl	801491c <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a5f4:	1dbb      	adds	r3, r7, #6
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f7ff ff97 	bl	800a52c <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a5fe:	2101      	movs	r1, #1
 800a600:	2001      	movs	r0, #1
 800a602:	f010 fd99 	bl	801b138 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a606:	f002 fd23 	bl	800d050 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a60a:	f00a f995 	bl	8014938 <HAL_ResumeTick>
  showTime();
 800a60e:	f7ff fbad 	bl	8009d6c <showTime>
}
 800a612:	46c0      	nop			@ (mov r8, r8)
 800a614:	46bd      	mov	sp, r7
 800a616:	b002      	add	sp, #8
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	46c0      	nop			@ (mov r8, r8)
 800a61c:	200011c1 	.word	0x200011c1
 800a620:	20002160 	.word	0x20002160
 800a624:	0802bf34 	.word	0x0802bf34
 800a628:	0802bd90 	.word	0x0802bd90
 800a62c:	0802bf4c 	.word	0x0802bf4c
 800a630:	0802bdcc 	.word	0x0802bdcc
 800a634:	20000e6c 	.word	0x20000e6c
 800a638:	0802bf70 	.word	0x0802bf70

0800a63c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af02      	add	r7, sp, #8
 800a642:	0002      	movs	r2, r0
 800a644:	1dbb      	adds	r3, r7, #6
 800a646:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a648:	4b4c      	ldr	r3, [pc, #304]	@ (800a77c <Enter_Stop_Mode+0x140>)
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800a650:	f004 f82c 	bl	800e6ac <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", batteryCharge);
 800a654:	4b4a      	ldr	r3, [pc, #296]	@ (800a780 <Enter_Stop_Mode+0x144>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	1c18      	adds	r0, r3, #0
 800a65a:	f7f9 f91b 	bl	8003894 <__aeabi_f2d>
 800a65e:	0002      	movs	r2, r0
 800a660:	000b      	movs	r3, r1
 800a662:	4848      	ldr	r0, [pc, #288]	@ (800a784 <Enter_Stop_Mode+0x148>)
 800a664:	4948      	ldr	r1, [pc, #288]	@ (800a788 <Enter_Stop_Mode+0x14c>)
 800a666:	9200      	str	r2, [sp, #0]
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	0002      	movs	r2, r0
 800a66c:	2002      	movs	r0, #2
 800a66e:	f009 fbaf 	bl	8013dd0 <CreateLine>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a672:	1dbb      	adds	r3, r7, #6
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	4a45      	ldr	r2, [pc, #276]	@ (800a78c <Enter_Stop_Mode+0x150>)
 800a678:	4945      	ldr	r1, [pc, #276]	@ (800a790 <Enter_Stop_Mode+0x154>)
 800a67a:	2003      	movs	r0, #3
 800a67c:	f009 fba8 	bl	8013dd0 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a680:	f7ff ff0e 	bl	800a4a0 <getPosixTime>
 800a684:	0002      	movs	r2, r0
 800a686:	1dbb      	adds	r3, r7, #6
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	18d3      	adds	r3, r2, r3
 800a68c:	4a41      	ldr	r2, [pc, #260]	@ (800a794 <Enter_Stop_Mode+0x158>)
 800a68e:	0011      	movs	r1, r2
 800a690:	0018      	movs	r0, r3
 800a692:	f7ff ff1b 	bl	800a4cc <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a696:	4b3f      	ldr	r3, [pc, #252]	@ (800a794 <Enter_Stop_Mode+0x158>)
 800a698:	4a3f      	ldr	r2, [pc, #252]	@ (800a798 <Enter_Stop_Mode+0x15c>)
 800a69a:	493b      	ldr	r1, [pc, #236]	@ (800a788 <Enter_Stop_Mode+0x14c>)
 800a69c:	2002      	movs	r0, #2
 800a69e:	f009 fb97 	bl	8013dd0 <CreateLine>
  HAL_Delay(100);
 800a6a2:	2064      	movs	r0, #100	@ 0x64
 800a6a4:	f00a f916 	bl	80148d4 <HAL_Delay>
  HAL_SuspendTick();
 800a6a8:	f00a f938 	bl	801491c <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a6ac:	1dbb      	adds	r3, r7, #6
 800a6ae:	881b      	ldrh	r3, [r3, #0]
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	f7ff ff3b 	bl	800a52c <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	f010 fd3d 	bl	801b138 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a6be:	f002 fcc7 	bl	800d050 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a6c2:	f00a f939 	bl	8014938 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800a6c6:	1dbb      	adds	r3, r7, #6
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	0018      	movs	r0, r3
 800a6cc:	f003 ff62 	bl	800e594 <sen5x_enable>
 800a6d0:	1e03      	subs	r3, r0, #0
 800a6d2:	d01e      	beq.n	800a712 <Enter_Stop_Mode+0xd6>
    showTime();
 800a6d4:	f7ff fb4a 	bl	8009d6c <showTime>
    set_light_on_state();
 800a6d8:	f004 fcb8 	bl	800f04c <set_light_on_state>
    if (!userToggle) {
 800a6dc:	4b2f      	ldr	r3, [pc, #188]	@ (800a79c <Enter_Stop_Mode+0x160>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	4053      	eors	r3, r2
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d013      	beq.n	800a712 <Enter_Stop_Mode+0xd6>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800a6ea:	201c      	movs	r0, #28
 800a6ec:	f7ff ff1e 	bl	800a52c <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800a6f0:	4a26      	ldr	r2, [pc, #152]	@ (800a78c <Enter_Stop_Mode+0x150>)
 800a6f2:	4927      	ldr	r1, [pc, #156]	@ (800a790 <Enter_Stop_Mode+0x154>)
 800a6f4:	231c      	movs	r3, #28
 800a6f6:	2003      	movs	r0, #3
 800a6f8:	f009 fb6a 	bl	8013dd0 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a6fc:	2101      	movs	r1, #1
 800a6fe:	2001      	movs	r0, #1
 800a700:	f010 fd1a 	bl	801b138 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800a704:	f002 fca4 	bl	800d050 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800a708:	f00a f916 	bl	8014938 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800a70c:	2000      	movs	r0, #0
 800a70e:	f003 ff1f 	bl	800e550 <setsen5xReadTimer>
    }
  }
  showTime();
 800a712:	f7ff fb2b 	bl	8009d6c <showTime>
  EnabledConnectedDevices();
 800a716:	f003 fa9b 	bl	800dc50 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 800a71a:	f003 fbad 	bl	800de78 <ResetDBACalculator>
  ResetSGP40samplecounter();
 800a71e:	f006 fb0d 	bl	8010d3c <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 800a722:	f7f9 fa0b 	bl	8003b3c <ResetENS160samplecounter>
  SetBatteryReadTimer(0);
 800a726:	2000      	movs	r0, #0
 800a728:	f002 f974 	bl	800ca14 <SetBatteryReadTimer>
  setsen5xSamplecounter(0);
 800a72c:	2000      	movs	r0, #0
 800a72e:	f003 ff21 	bl	800e574 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 800a732:	4b1b      	ldr	r3, [pc, #108]	@ (800a7a0 <Enter_Stop_Mode+0x164>)
 800a734:	0018      	movs	r0, r3
 800a736:	f7fa f8b5 	bl	80048a4 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800a73a:	201e      	movs	r0, #30
 800a73c:	f006 faec 	bl	8010d18 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 800a740:	205a      	movs	r0, #90	@ 0x5a
 800a742:	f009 fddb 	bl	80142fc <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800a746:	203c      	movs	r0, #60	@ 0x3c
 800a748:	f000 fb9a 	bl	800ae80 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800a74c:	205a      	movs	r0, #90	@ 0x5a
 800a74e:	f000 ff73 	bl	800b638 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800a752:	2000      	movs	r0, #0
 800a754:	f7f9 f9fc 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800a758:	2000      	movs	r0, #0
 800a75a:	f003 fb7b 	bl	800de54 <setMICTimeStamp>
  ESPTransmitDone = false;
 800a75e:	4b11      	ldr	r3, [pc, #68]	@ (800a7a4 <Enter_Stop_Mode+0x168>)
 800a760:	2200      	movs	r2, #0
 800a762:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800a764:	f00a f8ac 	bl	80148c0 <HAL_GetTick>
 800a768:	0003      	movs	r3, r0
 800a76a:	4a0d      	ldr	r2, [pc, #52]	@ (800a7a0 <Enter_Stop_Mode+0x164>)
 800a76c:	189a      	adds	r2, r3, r2
 800a76e:	4b0e      	ldr	r3, [pc, #56]	@ (800a7a8 <Enter_Stop_Mode+0x16c>)
 800a770:	601a      	str	r2, [r3, #0]
}
 800a772:	46c0      	nop			@ (mov r8, r8)
 800a774:	46bd      	mov	sp, r7
 800a776:	b002      	add	sp, #8
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	46c0      	nop			@ (mov r8, r8)
 800a77c:	200011c1 	.word	0x200011c1
 800a780:	20002160 	.word	0x20002160
 800a784:	0802bf34 	.word	0x0802bf34
 800a788:	0802bd90 	.word	0x0802bd90
 800a78c:	0802bf4c 	.word	0x0802bf4c
 800a790:	0802bdcc 	.word	0x0802bdcc
 800a794:	20000e6c 	.word	0x20000e6c
 800a798:	0802bf70 	.word	0x0802bf70
 800a79c:	20002152 	.word	0x20002152
 800a7a0:	00001194 	.word	0x00001194
 800a7a4:	200005b3 	.word	0x200005b3
 800a7a8:	20001114 	.word	0x20001114

0800a7ac <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800a7b4:	4b03      	ldr	r3, [pc, #12]	@ (800a7c4 <InitClock+0x18>)
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
}
 800a7ba:	46c0      	nop			@ (mov r8, r8)
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	b002      	add	sp, #8
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	46c0      	nop			@ (mov r8, r8)
 800a7c4:	20000e50 	.word	0x20000e50

0800a7c8 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	78db      	ldrb	r3, [r3, #3]
 800a7d6:	001a      	movs	r2, r3
 800a7d8:	0013      	movs	r3, r2
 800a7da:	025b      	lsls	r3, r3, #9
 800a7dc:	189b      	adds	r3, r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	189b      	adds	r3, r3, r2
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	189b      	adds	r3, r3, r2
 800a7e6:	011a      	lsls	r2, r3, #4
 800a7e8:	1ad2      	subs	r2, r2, r3
 800a7ea:	01d3      	lsls	r3, r2, #7
 800a7ec:	001a      	movs	r2, r3
 800a7ee:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	e028      	b.n	800a848 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	4a53      	ldr	r2, [pc, #332]	@ (800a948 <makeTime+0x180>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	db21      	blt.n	800a842 <makeTime+0x7a>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	4a52      	ldr	r2, [pc, #328]	@ (800a94c <makeTime+0x184>)
 800a802:	4694      	mov	ip, r2
 800a804:	4463      	add	r3, ip
 800a806:	001a      	movs	r2, r3
 800a808:	2303      	movs	r3, #3
 800a80a:	4013      	ands	r3, r2
 800a80c:	d119      	bne.n	800a842 <makeTime+0x7a>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	4a4e      	ldr	r2, [pc, #312]	@ (800a94c <makeTime+0x184>)
 800a812:	4694      	mov	ip, r2
 800a814:	4463      	add	r3, ip
 800a816:	2164      	movs	r1, #100	@ 0x64
 800a818:	0018      	movs	r0, r3
 800a81a:	f7f5 fe33 	bl	8000484 <__aeabi_idivmod>
 800a81e:	1e0b      	subs	r3, r1, #0
 800a820:	d10a      	bne.n	800a838 <makeTime+0x70>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	4a49      	ldr	r2, [pc, #292]	@ (800a94c <makeTime+0x184>)
 800a826:	4694      	mov	ip, r2
 800a828:	4463      	add	r3, ip
 800a82a:	22c8      	movs	r2, #200	@ 0xc8
 800a82c:	0051      	lsls	r1, r2, #1
 800a82e:	0018      	movs	r0, r3
 800a830:	f7f5 fe28 	bl	8000484 <__aeabi_idivmod>
 800a834:	1e0b      	subs	r3, r1, #0
 800a836:	d104      	bne.n	800a842 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	4a45      	ldr	r2, [pc, #276]	@ (800a950 <makeTime+0x188>)
 800a83c:	4694      	mov	ip, r2
 800a83e:	4463      	add	r3, ip
 800a840:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	3301      	adds	r3, #1
 800a846:	60fb      	str	r3, [r7, #12]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	78db      	ldrb	r3, [r3, #3]
 800a84c:	001a      	movs	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	4293      	cmp	r3, r2
 800a852:	dbd0      	blt.n	800a7f6 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800a854:	2301      	movs	r3, #1
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	e03c      	b.n	800a8d4 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d125      	bne.n	800a8ac <makeTime+0xe4>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	78db      	ldrb	r3, [r3, #3]
 800a864:	4a39      	ldr	r2, [pc, #228]	@ (800a94c <makeTime+0x184>)
 800a866:	4694      	mov	ip, r2
 800a868:	4463      	add	r3, ip
 800a86a:	001a      	movs	r2, r3
 800a86c:	2303      	movs	r3, #3
 800a86e:	4013      	ands	r3, r2
 800a870:	d11c      	bne.n	800a8ac <makeTime+0xe4>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	78db      	ldrb	r3, [r3, #3]
 800a876:	4a35      	ldr	r2, [pc, #212]	@ (800a94c <makeTime+0x184>)
 800a878:	4694      	mov	ip, r2
 800a87a:	4463      	add	r3, ip
 800a87c:	2164      	movs	r1, #100	@ 0x64
 800a87e:	0018      	movs	r0, r3
 800a880:	f7f5 fe00 	bl	8000484 <__aeabi_idivmod>
 800a884:	1e0b      	subs	r3, r1, #0
 800a886:	d10b      	bne.n	800a8a0 <makeTime+0xd8>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	78db      	ldrb	r3, [r3, #3]
 800a88c:	4a2f      	ldr	r2, [pc, #188]	@ (800a94c <makeTime+0x184>)
 800a88e:	4694      	mov	ip, r2
 800a890:	4463      	add	r3, ip
 800a892:	22c8      	movs	r2, #200	@ 0xc8
 800a894:	0051      	lsls	r1, r2, #1
 800a896:	0018      	movs	r0, r3
 800a898:	f7f5 fdf4 	bl	8000484 <__aeabi_idivmod>
 800a89c:	1e0b      	subs	r3, r1, #0
 800a89e:	d105      	bne.n	800a8ac <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	4a2c      	ldr	r2, [pc, #176]	@ (800a954 <makeTime+0x18c>)
 800a8a4:	4694      	mov	ip, r2
 800a8a6:	4463      	add	r3, ip
 800a8a8:	60bb      	str	r3, [r7, #8]
 800a8aa:	e010      	b.n	800a8ce <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	4a29      	ldr	r2, [pc, #164]	@ (800a958 <makeTime+0x190>)
 800a8b2:	5cd3      	ldrb	r3, [r2, r3]
 800a8b4:	001a      	movs	r2, r3
 800a8b6:	0013      	movs	r3, r2
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	189b      	adds	r3, r3, r2
 800a8bc:	011a      	lsls	r2, r3, #4
 800a8be:	1ad2      	subs	r2, r2, r3
 800a8c0:	0113      	lsls	r3, r2, #4
 800a8c2:	1a9b      	subs	r3, r3, r2
 800a8c4:	01db      	lsls	r3, r3, #7
 800a8c6:	001a      	movs	r2, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	189b      	adds	r3, r3, r2
 800a8cc:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	785b      	ldrb	r3, [r3, #1]
 800a8d8:	001a      	movs	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	dbbc      	blt.n	800a85a <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	789b      	ldrb	r3, [r3, #2]
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	001a      	movs	r2, r3
 800a8e8:	0013      	movs	r3, r2
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	189b      	adds	r3, r3, r2
 800a8ee:	011a      	lsls	r2, r3, #4
 800a8f0:	1ad2      	subs	r2, r2, r3
 800a8f2:	0113      	lsls	r3, r2, #4
 800a8f4:	1a9b      	subs	r3, r3, r2
 800a8f6:	01db      	lsls	r3, r3, #7
 800a8f8:	001a      	movs	r2, r3
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	189b      	adds	r3, r3, r2
 800a8fe:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	001a      	movs	r2, r3
 800a906:	0013      	movs	r3, r2
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	1a9b      	subs	r3, r3, r2
 800a90c:	011a      	lsls	r2, r3, #4
 800a90e:	1ad2      	subs	r2, r2, r3
 800a910:	0113      	lsls	r3, r2, #4
 800a912:	001a      	movs	r2, r3
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	189b      	adds	r3, r3, r2
 800a918:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	785b      	ldrb	r3, [r3, #1]
 800a91e:	001a      	movs	r2, r3
 800a920:	0013      	movs	r3, r2
 800a922:	011b      	lsls	r3, r3, #4
 800a924:	1a9b      	subs	r3, r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	001a      	movs	r2, r3
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	189b      	adds	r3, r3, r2
 800a92e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	789b      	ldrb	r3, [r3, #2]
 800a934:	001a      	movs	r2, r3
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	189b      	adds	r3, r3, r2
 800a93a:	60bb      	str	r3, [r7, #8]
  return seconds;
 800a93c:	68bb      	ldr	r3, [r7, #8]
}
 800a93e:	0018      	movs	r0, r3
 800a940:	46bd      	mov	sp, r7
 800a942:	b004      	add	sp, #16
 800a944:	bd80      	pop	{r7, pc}
 800a946:	46c0      	nop			@ (mov r8, r8)
 800a948:	fffff84f 	.word	0xfffff84f
 800a94c:	000007b2 	.word	0x000007b2
 800a950:	00015180 	.word	0x00015180
 800a954:	00263b80 	.word	0x00263b80
 800a958:	0802e1f0 	.word	0x0802e1f0

0800a95c <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a95c:	b590      	push	{r4, r7, lr}
 800a95e:	b089      	sub	sp, #36	@ 0x24
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	213c      	movs	r1, #60	@ 0x3c
 800a970:	0018      	movs	r0, r3
 800a972:	f7f5 fc9d 	bl	80002b0 <__aeabi_uidivmod>
 800a976:	000b      	movs	r3, r1
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	213c      	movs	r1, #60	@ 0x3c
 800a982:	0018      	movs	r0, r3
 800a984:	f7f5 fc0e 	bl	80001a4 <__udivsi3>
 800a988:	0003      	movs	r3, r0
 800a98a:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	213c      	movs	r1, #60	@ 0x3c
 800a990:	0018      	movs	r0, r3
 800a992:	f7f5 fc8d 	bl	80002b0 <__aeabi_uidivmod>
 800a996:	000b      	movs	r3, r1
 800a998:	b2da      	uxtb	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	213c      	movs	r1, #60	@ 0x3c
 800a9a2:	0018      	movs	r0, r3
 800a9a4:	f7f5 fbfe 	bl	80001a4 <__udivsi3>
 800a9a8:	0003      	movs	r3, r0
 800a9aa:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	2118      	movs	r1, #24
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	f7f5 fc7d 	bl	80002b0 <__aeabi_uidivmod>
 800a9b6:	000b      	movs	r3, r1
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	2118      	movs	r1, #24
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	f7f5 fbee 	bl	80001a4 <__udivsi3>
 800a9c8:	0003      	movs	r3, r0
 800a9ca:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	2107      	movs	r1, #7
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	f7f5 fc6c 	bl	80002b0 <__aeabi_uidivmod>
 800a9d8:	000b      	movs	r3, r1
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	3301      	adds	r3, #1
 800a9de:	b2da      	uxtb	r2, r3
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	701a      	strb	r2, [r3, #0]
  year = 0;
 800a9e4:	231f      	movs	r3, #31
 800a9e6:	18fb      	adds	r3, r7, r3
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	701a      	strb	r2, [r3, #0]
  days = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800a9f0:	e005      	b.n	800a9fe <breakPosixTime+0xa2>
    year++;
 800a9f2:	211f      	movs	r1, #31
 800a9f4:	187b      	adds	r3, r7, r1
 800a9f6:	781a      	ldrb	r2, [r3, #0]
 800a9f8:	187b      	adds	r3, r7, r1
 800a9fa:	3201      	adds	r2, #1
 800a9fc:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800a9fe:	241f      	movs	r4, #31
 800aa00:	193b      	adds	r3, r7, r4
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	4a64      	ldr	r2, [pc, #400]	@ (800ab98 <breakPosixTime+0x23c>)
 800aa06:	4694      	mov	ip, r2
 800aa08:	4463      	add	r3, ip
 800aa0a:	001a      	movs	r2, r3
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	4013      	ands	r3, r2
 800aa10:	d119      	bne.n	800aa46 <breakPosixTime+0xea>
 800aa12:	193b      	adds	r3, r7, r4
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	4a60      	ldr	r2, [pc, #384]	@ (800ab98 <breakPosixTime+0x23c>)
 800aa18:	4694      	mov	ip, r2
 800aa1a:	4463      	add	r3, ip
 800aa1c:	2164      	movs	r1, #100	@ 0x64
 800aa1e:	0018      	movs	r0, r3
 800aa20:	f7f5 fd30 	bl	8000484 <__aeabi_idivmod>
 800aa24:	1e0b      	subs	r3, r1, #0
 800aa26:	d10b      	bne.n	800aa40 <breakPosixTime+0xe4>
 800aa28:	193b      	adds	r3, r7, r4
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	4a5a      	ldr	r2, [pc, #360]	@ (800ab98 <breakPosixTime+0x23c>)
 800aa2e:	4694      	mov	ip, r2
 800aa30:	4463      	add	r3, ip
 800aa32:	22c8      	movs	r2, #200	@ 0xc8
 800aa34:	0051      	lsls	r1, r2, #1
 800aa36:	0018      	movs	r0, r3
 800aa38:	f7f5 fd24 	bl	8000484 <__aeabi_idivmod>
 800aa3c:	1e0b      	subs	r3, r1, #0
 800aa3e:	d102      	bne.n	800aa46 <breakPosixTime+0xea>
 800aa40:	23b7      	movs	r3, #183	@ 0xb7
 800aa42:	005b      	lsls	r3, r3, #1
 800aa44:	e001      	b.n	800aa4a <breakPosixTime+0xee>
 800aa46:	236e      	movs	r3, #110	@ 0x6e
 800aa48:	33ff      	adds	r3, #255	@ 0xff
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	18d3      	adds	r3, r2, r3
 800aa4e:	617b      	str	r3, [r7, #20]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d9cc      	bls.n	800a9f2 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	241f      	movs	r4, #31
 800aa5c:	193a      	adds	r2, r7, r4
 800aa5e:	7812      	ldrb	r2, [r2, #0]
 800aa60:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800aa62:	193b      	adds	r3, r7, r4
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	4a4c      	ldr	r2, [pc, #304]	@ (800ab98 <breakPosixTime+0x23c>)
 800aa68:	4694      	mov	ip, r2
 800aa6a:	4463      	add	r3, ip
 800aa6c:	001a      	movs	r2, r3
 800aa6e:	2303      	movs	r3, #3
 800aa70:	4013      	ands	r3, r2
 800aa72:	d119      	bne.n	800aaa8 <breakPosixTime+0x14c>
 800aa74:	193b      	adds	r3, r7, r4
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	4a47      	ldr	r2, [pc, #284]	@ (800ab98 <breakPosixTime+0x23c>)
 800aa7a:	4694      	mov	ip, r2
 800aa7c:	4463      	add	r3, ip
 800aa7e:	2164      	movs	r1, #100	@ 0x64
 800aa80:	0018      	movs	r0, r3
 800aa82:	f7f5 fcff 	bl	8000484 <__aeabi_idivmod>
 800aa86:	1e0b      	subs	r3, r1, #0
 800aa88:	d10b      	bne.n	800aaa2 <breakPosixTime+0x146>
 800aa8a:	193b      	adds	r3, r7, r4
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	4a42      	ldr	r2, [pc, #264]	@ (800ab98 <breakPosixTime+0x23c>)
 800aa90:	4694      	mov	ip, r2
 800aa92:	4463      	add	r3, ip
 800aa94:	22c8      	movs	r2, #200	@ 0xc8
 800aa96:	0051      	lsls	r1, r2, #1
 800aa98:	0018      	movs	r0, r3
 800aa9a:	f7f5 fcf3 	bl	8000484 <__aeabi_idivmod>
 800aa9e:	1e0b      	subs	r3, r1, #0
 800aaa0:	d102      	bne.n	800aaa8 <breakPosixTime+0x14c>
 800aaa2:	23b7      	movs	r3, #183	@ 0xb7
 800aaa4:	005b      	lsls	r3, r3, #1
 800aaa6:	e001      	b.n	800aaac <breakPosixTime+0x150>
 800aaa8:	236e      	movs	r3, #110	@ 0x6e
 800aaaa:	33ff      	adds	r3, #255	@ 0xff
 800aaac:	697a      	ldr	r2, [r7, #20]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800aab2:	69ba      	ldr	r2, [r7, #24]
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	61bb      	str	r3, [r7, #24]

  days=0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	617b      	str	r3, [r7, #20]
  month=0;
 800aabe:	211e      	movs	r1, #30
 800aac0:	187b      	adds	r3, r7, r1
 800aac2:	2200      	movs	r2, #0
 800aac4:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800aac6:	231d      	movs	r3, #29
 800aac8:	18fb      	adds	r3, r7, r3
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800aace:	187b      	adds	r3, r7, r1
 800aad0:	2200      	movs	r2, #0
 800aad2:	701a      	strb	r2, [r3, #0]
 800aad4:	e048      	b.n	800ab68 <breakPosixTime+0x20c>
    if (month==1) { // february
 800aad6:	231e      	movs	r3, #30
 800aad8:	18fb      	adds	r3, r7, r3
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d12a      	bne.n	800ab36 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800aae0:	241f      	movs	r4, #31
 800aae2:	193b      	adds	r3, r7, r4
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	4a2c      	ldr	r2, [pc, #176]	@ (800ab98 <breakPosixTime+0x23c>)
 800aae8:	4694      	mov	ip, r2
 800aaea:	4463      	add	r3, ip
 800aaec:	001a      	movs	r2, r3
 800aaee:	2303      	movs	r3, #3
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	d11b      	bne.n	800ab2c <breakPosixTime+0x1d0>
 800aaf4:	193b      	adds	r3, r7, r4
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	4a27      	ldr	r2, [pc, #156]	@ (800ab98 <breakPosixTime+0x23c>)
 800aafa:	4694      	mov	ip, r2
 800aafc:	4463      	add	r3, ip
 800aafe:	2164      	movs	r1, #100	@ 0x64
 800ab00:	0018      	movs	r0, r3
 800ab02:	f7f5 fcbf 	bl	8000484 <__aeabi_idivmod>
 800ab06:	1e0b      	subs	r3, r1, #0
 800ab08:	d10b      	bne.n	800ab22 <breakPosixTime+0x1c6>
 800ab0a:	193b      	adds	r3, r7, r4
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	4a22      	ldr	r2, [pc, #136]	@ (800ab98 <breakPosixTime+0x23c>)
 800ab10:	4694      	mov	ip, r2
 800ab12:	4463      	add	r3, ip
 800ab14:	22c8      	movs	r2, #200	@ 0xc8
 800ab16:	0051      	lsls	r1, r2, #1
 800ab18:	0018      	movs	r0, r3
 800ab1a:	f7f5 fcb3 	bl	8000484 <__aeabi_idivmod>
 800ab1e:	1e0b      	subs	r3, r1, #0
 800ab20:	d104      	bne.n	800ab2c <breakPosixTime+0x1d0>
        monthLength=29;
 800ab22:	231d      	movs	r3, #29
 800ab24:	18fb      	adds	r3, r7, r3
 800ab26:	221d      	movs	r2, #29
 800ab28:	701a      	strb	r2, [r3, #0]
 800ab2a:	e00c      	b.n	800ab46 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800ab2c:	231d      	movs	r3, #29
 800ab2e:	18fb      	adds	r3, r7, r3
 800ab30:	221c      	movs	r2, #28
 800ab32:	701a      	strb	r2, [r3, #0]
 800ab34:	e007      	b.n	800ab46 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800ab36:	231e      	movs	r3, #30
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	781a      	ldrb	r2, [r3, #0]
 800ab3c:	231d      	movs	r3, #29
 800ab3e:	18fb      	adds	r3, r7, r3
 800ab40:	4916      	ldr	r1, [pc, #88]	@ (800ab9c <breakPosixTime+0x240>)
 800ab42:	5c8a      	ldrb	r2, [r1, r2]
 800ab44:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800ab46:	211d      	movs	r1, #29
 800ab48:	187b      	adds	r3, r7, r1
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d310      	bcc.n	800ab74 <breakPosixTime+0x218>
      time -= monthLength;
 800ab52:	187b      	adds	r3, r7, r1
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800ab5c:	211e      	movs	r1, #30
 800ab5e:	187b      	adds	r3, r7, r1
 800ab60:	781a      	ldrb	r2, [r3, #0]
 800ab62:	187b      	adds	r3, r7, r1
 800ab64:	3201      	adds	r2, #1
 800ab66:	701a      	strb	r2, [r3, #0]
 800ab68:	231e      	movs	r3, #30
 800ab6a:	18fb      	adds	r3, r7, r3
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	2b0b      	cmp	r3, #11
 800ab70:	d9b1      	bls.n	800aad6 <breakPosixTime+0x17a>
 800ab72:	e000      	b.n	800ab76 <breakPosixTime+0x21a>
    } else {
        break;
 800ab74:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800ab76:	231e      	movs	r3, #30
 800ab78:	18fb      	adds	r3, r7, r3
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	3301      	adds	r3, #1
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	709a      	strb	r2, [r3, #2]
}
 800ab90:	46c0      	nop			@ (mov r8, r8)
 800ab92:	46bd      	mov	sp, r7
 800ab94:	b009      	add	sp, #36	@ 0x24
 800ab96:	bd90      	pop	{r4, r7, pc}
 800ab98:	000007b2 	.word	0x000007b2
 800ab9c:	0802e1f0 	.word	0x0802e1f0

0800aba0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800aba6:	003b      	movs	r3, r7
 800aba8:	0018      	movs	r0, r3
 800abaa:	2308      	movs	r3, #8
 800abac:	001a      	movs	r2, r3
 800abae:	2100      	movs	r1, #0
 800abb0:	f01b fc80 	bl	80264b4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800abb4:	4b30      	ldr	r3, [pc, #192]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abb6:	4a31      	ldr	r2, [pc, #196]	@ (800ac7c <MX_ADC_Init+0xdc>)
 800abb8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800abba:	4b2f      	ldr	r3, [pc, #188]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800abc0:	4b2d      	ldr	r3, [pc, #180]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abc2:	22c0      	movs	r2, #192	@ 0xc0
 800abc4:	0612      	lsls	r2, r2, #24
 800abc6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800abc8:	4b2b      	ldr	r3, [pc, #172]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abca:	2200      	movs	r2, #0
 800abcc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800abce:	4b2a      	ldr	r3, [pc, #168]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800abd4:	4b28      	ldr	r3, [pc, #160]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800abda:	4b27      	ldr	r3, [pc, #156]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abdc:	2200      	movs	r2, #0
 800abde:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800abe0:	4b25      	ldr	r3, [pc, #148]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abe2:	2220      	movs	r2, #32
 800abe4:	2100      	movs	r1, #0
 800abe6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800abe8:	4b23      	ldr	r3, [pc, #140]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abea:	2221      	movs	r2, #33	@ 0x21
 800abec:	2101      	movs	r1, #1
 800abee:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800abf0:	4b21      	ldr	r3, [pc, #132]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800abf6:	4b20      	ldr	r3, [pc, #128]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800abf8:	22c2      	movs	r2, #194	@ 0xc2
 800abfa:	32ff      	adds	r2, #255	@ 0xff
 800abfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800abfe:	4b1e      	ldr	r3, [pc, #120]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800ac00:	222c      	movs	r2, #44	@ 0x2c
 800ac02:	2100      	movs	r1, #0
 800ac04:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ac06:	4b1c      	ldr	r3, [pc, #112]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800ac08:	2204      	movs	r2, #4
 800ac0a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ac0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800ac12:	4b19      	ldr	r3, [pc, #100]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800ac18:	4b17      	ldr	r3, [pc, #92]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800ac1e:	4b16      	ldr	r3, [pc, #88]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800ac24:	4b14      	ldr	r3, [pc, #80]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800ac26:	0018      	movs	r0, r3
 800ac28:	f009 fe94 	bl	8014954 <HAL_ADC_Init>
 800ac2c:	1e03      	subs	r3, r0, #0
 800ac2e:	d001      	beq.n	800ac34 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800ac30:	f002 fb7a 	bl	800d328 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ac34:	003b      	movs	r3, r7
 800ac36:	4a12      	ldr	r2, [pc, #72]	@ (800ac80 <MX_ADC_Init+0xe0>)
 800ac38:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ac3a:	003b      	movs	r3, r7
 800ac3c:	2280      	movs	r2, #128	@ 0x80
 800ac3e:	0152      	lsls	r2, r2, #5
 800ac40:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800ac42:	003a      	movs	r2, r7
 800ac44:	4b0c      	ldr	r3, [pc, #48]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800ac46:	0011      	movs	r1, r2
 800ac48:	0018      	movs	r0, r3
 800ac4a:	f00a f8f3 	bl	8014e34 <HAL_ADC_ConfigChannel>
 800ac4e:	1e03      	subs	r3, r0, #0
 800ac50:	d001      	beq.n	800ac56 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800ac52:	f002 fb69 	bl	800d328 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800ac56:	003b      	movs	r3, r7
 800ac58:	4a0a      	ldr	r2, [pc, #40]	@ (800ac84 <MX_ADC_Init+0xe4>)
 800ac5a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800ac5c:	003a      	movs	r2, r7
 800ac5e:	4b06      	ldr	r3, [pc, #24]	@ (800ac78 <MX_ADC_Init+0xd8>)
 800ac60:	0011      	movs	r1, r2
 800ac62:	0018      	movs	r0, r3
 800ac64:	f00a f8e6 	bl	8014e34 <HAL_ADC_ConfigChannel>
 800ac68:	1e03      	subs	r3, r0, #0
 800ac6a:	d001      	beq.n	800ac70 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800ac6c:	f002 fb5c 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800ac70:	46c0      	nop			@ (mov r8, r8)
 800ac72:	46bd      	mov	sp, r7
 800ac74:	b002      	add	sp, #8
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20000e84 	.word	0x20000e84
 800ac7c:	40012400 	.word	0x40012400
 800ac80:	38004000 	.word	0x38004000
 800ac84:	3c008000 	.word	0x3c008000

0800ac88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ac88:	b590      	push	{r4, r7, lr}
 800ac8a:	b089      	sub	sp, #36	@ 0x24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac90:	240c      	movs	r4, #12
 800ac92:	193b      	adds	r3, r7, r4
 800ac94:	0018      	movs	r0, r3
 800ac96:	2314      	movs	r3, #20
 800ac98:	001a      	movs	r2, r3
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	f01b fc0a 	bl	80264b4 <memset>
  if(adcHandle->Instance==ADC1)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a14      	ldr	r2, [pc, #80]	@ (800acf8 <HAL_ADC_MspInit+0x70>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d121      	bne.n	800acee <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800acaa:	4b14      	ldr	r3, [pc, #80]	@ (800acfc <HAL_ADC_MspInit+0x74>)
 800acac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acae:	4b13      	ldr	r3, [pc, #76]	@ (800acfc <HAL_ADC_MspInit+0x74>)
 800acb0:	2180      	movs	r1, #128	@ 0x80
 800acb2:	0089      	lsls	r1, r1, #2
 800acb4:	430a      	orrs	r2, r1
 800acb6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800acb8:	4b10      	ldr	r3, [pc, #64]	@ (800acfc <HAL_ADC_MspInit+0x74>)
 800acba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acbc:	4b0f      	ldr	r3, [pc, #60]	@ (800acfc <HAL_ADC_MspInit+0x74>)
 800acbe:	2104      	movs	r1, #4
 800acc0:	430a      	orrs	r2, r1
 800acc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800acc4:	4b0d      	ldr	r3, [pc, #52]	@ (800acfc <HAL_ADC_MspInit+0x74>)
 800acc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc8:	2204      	movs	r2, #4
 800acca:	4013      	ands	r3, r2
 800accc:	60bb      	str	r3, [r7, #8]
 800acce:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800acd0:	193b      	adds	r3, r7, r4
 800acd2:	2230      	movs	r2, #48	@ 0x30
 800acd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800acd6:	193b      	adds	r3, r7, r4
 800acd8:	2203      	movs	r2, #3
 800acda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acdc:	193b      	adds	r3, r7, r4
 800acde:	2200      	movs	r2, #0
 800ace0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ace2:	193b      	adds	r3, r7, r4
 800ace4:	4a06      	ldr	r2, [pc, #24]	@ (800ad00 <HAL_ADC_MspInit+0x78>)
 800ace6:	0019      	movs	r1, r3
 800ace8:	0010      	movs	r0, r2
 800acea:	f00a fec1 	bl	8015a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800acee:	46c0      	nop			@ (mov r8, r8)
 800acf0:	46bd      	mov	sp, r7
 800acf2:	b009      	add	sp, #36	@ 0x24
 800acf4:	bd90      	pop	{r4, r7, pc}
 800acf6:	46c0      	nop			@ (mov r8, r8)
 800acf8:	40012400 	.word	0x40012400
 800acfc:	40021000 	.word	0x40021000
 800ad00:	50000800 	.word	0x50000800

0800ad04 <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ad04:	b590      	push	{r4, r7, lr}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6039      	str	r1, [r7, #0]
 800ad0c:	0011      	movs	r1, r2
 800ad0e:	1dfb      	adds	r3, r7, #7
 800ad10:	1c02      	adds	r2, r0, #0
 800ad12:	701a      	strb	r2, [r3, #0]
 800ad14:	1dbb      	adds	r3, r7, #6
 800ad16:	1c0a      	adds	r2, r1, #0
 800ad18:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800ad1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad44 <ReadDirRegister+0x40>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00a      	beq.n	800ad38 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800ad22:	4b08      	ldr	r3, [pc, #32]	@ (800ad44 <ReadDirRegister+0x40>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	1dba      	adds	r2, r7, #6
 800ad28:	7814      	ldrb	r4, [r2, #0]
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	1dfa      	adds	r2, r7, #7
 800ad2e:	7810      	ldrb	r0, [r2, #0]
 800ad30:	0022      	movs	r2, r4
 800ad32:	4798      	blx	r3
 800ad34:	0003      	movs	r3, r0
 800ad36:	e000      	b.n	800ad3a <ReadDirRegister+0x36>
  }
  return false;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	0018      	movs	r0, r3
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	b003      	add	sp, #12
 800ad40:	bd90      	pop	{r4, r7, pc}
 800ad42:	46c0      	nop			@ (mov r8, r8)
 800ad44:	20000ef0 	.word	0x20000ef0

0800ad48 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ad48:	b590      	push	{r4, r7, lr}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6039      	str	r1, [r7, #0]
 800ad50:	0011      	movs	r1, r2
 800ad52:	1dfb      	adds	r3, r7, #7
 800ad54:	1c02      	adds	r2, r0, #0
 800ad56:	701a      	strb	r2, [r3, #0]
 800ad58:	1dbb      	adds	r3, r7, #6
 800ad5a:	1c0a      	adds	r2, r1, #0
 800ad5c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800ad5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad88 <ReadRegister+0x40>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800ad66:	4b08      	ldr	r3, [pc, #32]	@ (800ad88 <ReadRegister+0x40>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	1dba      	adds	r2, r7, #6
 800ad6c:	7814      	ldrb	r4, [r2, #0]
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	1dfa      	adds	r2, r7, #7
 800ad72:	7810      	ldrb	r0, [r2, #0]
 800ad74:	0022      	movs	r2, r4
 800ad76:	4798      	blx	r3
 800ad78:	0003      	movs	r3, r0
 800ad7a:	e000      	b.n	800ad7e <ReadRegister+0x36>
  }
  return false;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	0018      	movs	r0, r3
 800ad80:	46bd      	mov	sp, r7
 800ad82:	b003      	add	sp, #12
 800ad84:	bd90      	pop	{r4, r7, pc}
 800ad86:	46c0      	nop			@ (mov r8, r8)
 800ad88:	20000ee8 	.word	0x20000ee8

0800ad8c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ad8c:	b590      	push	{r4, r7, lr}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6039      	str	r1, [r7, #0]
 800ad94:	0011      	movs	r1, r2
 800ad96:	1dfb      	adds	r3, r7, #7
 800ad98:	1c02      	adds	r2, r0, #0
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	1dbb      	adds	r3, r7, #6
 800ad9e:	1c0a      	adds	r2, r1, #0
 800ada0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ada2:	4b0a      	ldr	r3, [pc, #40]	@ (800adcc <WriteRegister+0x40>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00a      	beq.n	800adc0 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800adaa:	4b08      	ldr	r3, [pc, #32]	@ (800adcc <WriteRegister+0x40>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	1dba      	adds	r2, r7, #6
 800adb0:	7814      	ldrb	r4, [r2, #0]
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	1dfa      	adds	r2, r7, #7
 800adb6:	7810      	ldrb	r0, [r2, #0]
 800adb8:	0022      	movs	r2, r4
 800adba:	4798      	blx	r3
 800adbc:	0003      	movs	r3, r0
 800adbe:	e000      	b.n	800adc2 <WriteRegister+0x36>
  }
  return false;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	0018      	movs	r0, r3
 800adc4:	46bd      	mov	sp, r7
 800adc6:	b003      	add	sp, #12
 800adc8:	bd90      	pop	{r4, r7, pc}
 800adca:	46c0      	nop			@ (mov r8, r8)
 800adcc:	20000eec 	.word	0x20000eec

0800add0 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	000a      	movs	r2, r1
 800adda:	1cfb      	adds	r3, r7, #3
 800addc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800adde:	230f      	movs	r3, #15
 800ade0:	18fb      	adds	r3, r7, r3
 800ade2:	22ff      	movs	r2, #255	@ 0xff
 800ade4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800ade6:	230e      	movs	r3, #14
 800ade8:	18fb      	adds	r3, r7, r3
 800adea:	2200      	movs	r2, #0
 800adec:	701a      	strb	r2, [r3, #0]
 800adee:	e038      	b.n	800ae62 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800adf0:	230e      	movs	r3, #14
 800adf2:	18fb      	adds	r3, r7, r3
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	18d3      	adds	r3, r2, r3
 800adfa:	7819      	ldrb	r1, [r3, #0]
 800adfc:	220f      	movs	r2, #15
 800adfe:	18bb      	adds	r3, r7, r2
 800ae00:	18ba      	adds	r2, r7, r2
 800ae02:	7812      	ldrb	r2, [r2, #0]
 800ae04:	404a      	eors	r2, r1
 800ae06:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800ae08:	230d      	movs	r3, #13
 800ae0a:	18fb      	adds	r3, r7, r3
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	701a      	strb	r2, [r3, #0]
 800ae10:	e01c      	b.n	800ae4c <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800ae12:	210f      	movs	r1, #15
 800ae14:	187b      	adds	r3, r7, r1
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	b25b      	sxtb	r3, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	da0a      	bge.n	800ae34 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800ae1e:	187b      	adds	r3, r7, r1
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	b25b      	sxtb	r3, r3
 800ae24:	18db      	adds	r3, r3, r3
 800ae26:	b25b      	sxtb	r3, r3
 800ae28:	2231      	movs	r2, #49	@ 0x31
 800ae2a:	4053      	eors	r3, r2
 800ae2c:	b25a      	sxtb	r2, r3
 800ae2e:	187b      	adds	r3, r7, r1
 800ae30:	701a      	strb	r2, [r3, #0]
 800ae32:	e005      	b.n	800ae40 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800ae34:	230f      	movs	r3, #15
 800ae36:	18fa      	adds	r2, r7, r3
 800ae38:	18fb      	adds	r3, r7, r3
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	18db      	adds	r3, r3, r3
 800ae3e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800ae40:	210d      	movs	r1, #13
 800ae42:	187b      	adds	r3, r7, r1
 800ae44:	781a      	ldrb	r2, [r3, #0]
 800ae46:	187b      	adds	r3, r7, r1
 800ae48:	3201      	adds	r2, #1
 800ae4a:	701a      	strb	r2, [r3, #0]
 800ae4c:	230d      	movs	r3, #13
 800ae4e:	18fb      	adds	r3, r7, r3
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b07      	cmp	r3, #7
 800ae54:	d9dd      	bls.n	800ae12 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800ae56:	210e      	movs	r1, #14
 800ae58:	187b      	adds	r3, r7, r1
 800ae5a:	781a      	ldrb	r2, [r3, #0]
 800ae5c:	187b      	adds	r3, r7, r1
 800ae5e:	3201      	adds	r2, #1
 800ae60:	701a      	strb	r2, [r3, #0]
 800ae62:	230e      	movs	r3, #14
 800ae64:	18fa      	adds	r2, r7, r3
 800ae66:	1cfb      	adds	r3, r7, #3
 800ae68:	7812      	ldrb	r2, [r2, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d3bf      	bcc.n	800adf0 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800ae70:	230f      	movs	r3, #15
 800ae72:	18fb      	adds	r3, r7, r3
 800ae74:	781b      	ldrb	r3, [r3, #0]
}
 800ae76:	0018      	movs	r0, r3
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	b004      	add	sp, #16
 800ae7c:	bd80      	pop	{r7, pc}
	...

0800ae80 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800ae88:	f009 fd1a 	bl	80148c0 <HAL_GetTick>
 800ae8c:	0002      	movs	r2, r0
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	18d2      	adds	r2, r2, r3
 800ae92:	4b03      	ldr	r3, [pc, #12]	@ (800aea0 <setAHT20TimeStamp+0x20>)
 800ae94:	601a      	str	r2, [r3, #0]
}
 800ae96:	46c0      	nop			@ (mov r8, r8)
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	b002      	add	sp, #8
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	46c0      	nop			@ (mov r8, r8)
 800aea0:	20000ee0 	.word	0x20000ee0

0800aea4 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800aeb0:	4b06      	ldr	r3, [pc, #24]	@ (800aecc <AHT_Init+0x28>)
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800aeb6:	4b06      	ldr	r3, [pc, #24]	@ (800aed0 <AHT_Init+0x2c>)
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800aebc:	4b05      	ldr	r3, [pc, #20]	@ (800aed4 <AHT_Init+0x30>)
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	601a      	str	r2, [r3, #0]
}
 800aec2:	46c0      	nop			@ (mov r8, r8)
 800aec4:	46bd      	mov	sp, r7
 800aec6:	b004      	add	sp, #16
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	46c0      	nop			@ (mov r8, r8)
 800aecc:	20000ef0 	.word	0x20000ef0
 800aed0:	20000ee8 	.word	0x20000ee8
 800aed4:	20000eec 	.word	0x20000eec

0800aed8 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af02      	add	r7, sp, #8
 800aede:	0002      	movs	r2, r0
 800aee0:	1dfb      	adds	r3, r7, #7
 800aee2:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800aee4:	4b18      	ldr	r3, [pc, #96]	@ (800af48 <AHT20_register_reset+0x70>)
 800aee6:	1dfa      	adds	r2, r7, #7
 800aee8:	7812      	ldrb	r2, [r2, #0]
 800aeea:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800aeec:	4b16      	ldr	r3, [pc, #88]	@ (800af48 <AHT20_register_reset+0x70>)
 800aeee:	2203      	movs	r2, #3
 800aef0:	0019      	movs	r1, r3
 800aef2:	2038      	movs	r0, #56	@ 0x38
 800aef4:	f7ff ff4a 	bl	800ad8c <WriteRegister>
  HAL_Delay(15);
 800aef8:	200f      	movs	r0, #15
 800aefa:	f009 fceb 	bl	80148d4 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800aefe:	4b13      	ldr	r3, [pc, #76]	@ (800af4c <AHT20_register_reset+0x74>)
 800af00:	2203      	movs	r2, #3
 800af02:	0019      	movs	r1, r3
 800af04:	2038      	movs	r0, #56	@ 0x38
 800af06:	f7ff ff1f 	bl	800ad48 <ReadRegister>
  HAL_Delay(15);
 800af0a:	200f      	movs	r0, #15
 800af0c:	f009 fce2 	bl	80148d4 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800af10:	4b0e      	ldr	r3, [pc, #56]	@ (800af4c <AHT20_register_reset+0x74>)
 800af12:	22b0      	movs	r2, #176	@ 0xb0
 800af14:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800af16:	4b0d      	ldr	r3, [pc, #52]	@ (800af4c <AHT20_register_reset+0x74>)
 800af18:	789b      	ldrb	r3, [r3, #2]
 800af1a:	0018      	movs	r0, r3
 800af1c:	4b0b      	ldr	r3, [pc, #44]	@ (800af4c <AHT20_register_reset+0x74>)
 800af1e:	78db      	ldrb	r3, [r3, #3]
 800af20:	4a0b      	ldr	r2, [pc, #44]	@ (800af50 <AHT20_register_reset+0x78>)
 800af22:	490c      	ldr	r1, [pc, #48]	@ (800af54 <AHT20_register_reset+0x7c>)
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	0003      	movs	r3, r0
 800af28:	2003      	movs	r0, #3
 800af2a:	f008 ff51 	bl	8013dd0 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800af2e:	4b07      	ldr	r3, [pc, #28]	@ (800af4c <AHT20_register_reset+0x74>)
 800af30:	2203      	movs	r2, #3
 800af32:	0019      	movs	r1, r3
 800af34:	2038      	movs	r0, #56	@ 0x38
 800af36:	f7ff ff29 	bl	800ad8c <WriteRegister>
  HAL_Delay(15);
 800af3a:	200f      	movs	r0, #15
 800af3c:	f009 fcca 	bl	80148d4 <HAL_Delay>
}
 800af40:	46c0      	nop			@ (mov r8, r8)
 800af42:	46bd      	mov	sp, r7
 800af44:	b002      	add	sp, #8
 800af46:	bd80      	pop	{r7, pc}
 800af48:	2000009c 	.word	0x2000009c
 800af4c:	20000ef4 	.word	0x20000ef4
 800af50:	0802bf90 	.word	0x0802bf90
 800af54:	0802bfd0 	.word	0x0802bfd0

0800af58 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800af5c:	201b      	movs	r0, #27
 800af5e:	f7ff ffbb 	bl	800aed8 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800af62:	201c      	movs	r0, #28
 800af64:	f7ff ffb8 	bl	800aed8 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800af68:	201e      	movs	r0, #30
 800af6a:	f7ff ffb5 	bl	800aed8 <AHT20_register_reset>
}
 800af6e:	46c0      	nop			@ (mov r8, r8)
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800af78:	4b0c      	ldr	r3, [pc, #48]	@ (800afac <AHT20_read_status+0x38>)
 800af7a:	2201      	movs	r2, #1
 800af7c:	0019      	movs	r1, r3
 800af7e:	2038      	movs	r0, #56	@ 0x38
 800af80:	f7ff ff04 	bl	800ad8c <WriteRegister>
  HAL_Delay(10);
 800af84:	200a      	movs	r0, #10
 800af86:	f009 fca5 	bl	80148d4 <HAL_Delay>
  airtemphumraw[0] = 0;
 800af8a:	4b09      	ldr	r3, [pc, #36]	@ (800afb0 <AHT20_read_status+0x3c>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800af90:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <AHT20_read_status+0x3c>)
 800af92:	2201      	movs	r2, #1
 800af94:	0019      	movs	r1, r3
 800af96:	2038      	movs	r0, #56	@ 0x38
 800af98:	f7ff fed6 	bl	800ad48 <ReadRegister>
  HAL_Delay(10);
 800af9c:	200a      	movs	r0, #10
 800af9e:	f009 fc99 	bl	80148d4 <HAL_Delay>
  return airtemphumraw[0];
 800afa2:	4b03      	ldr	r3, [pc, #12]	@ (800afb0 <AHT20_read_status+0x3c>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
}
 800afa6:	0018      	movs	r0, r3
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	20000098 	.word	0x20000098
 800afb0:	20000ef4 	.word	0x20000ef4

0800afb4 <AHT20_init>:

bool AHT20_init(void) {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800afba:	f009 fc81 	bl	80148c0 <HAL_GetTick>
 800afbe:	0003      	movs	r3, r0
 800afc0:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b77      	cmp	r3, #119	@ 0x77
 800afc6:	d805      	bhi.n	800afd4 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2278      	movs	r2, #120	@ 0x78
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	0018      	movs	r0, r3
 800afd0:	f009 fc80 	bl	80148d4 <HAL_Delay>
  }
  AHT20_read_status();
 800afd4:	f7ff ffce 	bl	800af74 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800afd8:	4b0e      	ldr	r3, [pc, #56]	@ (800b014 <AHT20_init+0x60>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	4a0e      	ldr	r2, [pc, #56]	@ (800b018 <AHT20_init+0x64>)
 800afde:	490f      	ldr	r1, [pc, #60]	@ (800b01c <AHT20_init+0x68>)
 800afe0:	2003      	movs	r0, #3
 800afe2:	f008 fef5 	bl	8013dd0 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800afe6:	4b0b      	ldr	r3, [pc, #44]	@ (800b014 <AHT20_init+0x60>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	001a      	movs	r2, r3
 800afec:	2318      	movs	r3, #24
 800afee:	4013      	ands	r3, r2
 800aff0:	2b18      	cmp	r3, #24
 800aff2:	d00a      	beq.n	800b00a <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800aff4:	4b0a      	ldr	r3, [pc, #40]	@ (800b020 <AHT20_init+0x6c>)
 800aff6:	2203      	movs	r2, #3
 800aff8:	0019      	movs	r1, r3
 800affa:	2038      	movs	r0, #56	@ 0x38
 800affc:	f7ff fec6 	bl	800ad8c <WriteRegister>
    HAL_Delay(10);
 800b000:	200a      	movs	r0, #10
 800b002:	f009 fc67 	bl	80148d4 <HAL_Delay>
    AHT20_Start_Init();
 800b006:	f7ff ffa7 	bl	800af58 <AHT20_Start_Init>
  }
  return true;
 800b00a:	2301      	movs	r3, #1
}
 800b00c:	0018      	movs	r0, r3
 800b00e:	46bd      	mov	sp, r7
 800b010:	b002      	add	sp, #8
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20000ef4 	.word	0x20000ef4
 800b018:	0802bfd4 	.word	0x0802bfd4
 800b01c:	0802bfd0 	.word	0x0802bfd0
 800b020:	2000008c 	.word	0x2000008c

0800b024 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800b024:	b590      	push	{r4, r7, lr}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b02a:	1dfc      	adds	r4, r7, #7
 800b02c:	4b10      	ldr	r3, [pc, #64]	@ (800b070 <AHT20_calibrate+0x4c>)
 800b02e:	2201      	movs	r2, #1
 800b030:	0019      	movs	r1, r3
 800b032:	2038      	movs	r0, #56	@ 0x38
 800b034:	f7ff feaa 	bl	800ad8c <WriteRegister>
 800b038:	0003      	movs	r3, r0
 800b03a:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800b03c:	1dfb      	adds	r3, r7, #7
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	2201      	movs	r2, #1
 800b042:	4053      	eors	r3, r2
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	d005      	beq.n	800b056 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800b04a:	4a0a      	ldr	r2, [pc, #40]	@ (800b074 <AHT20_calibrate+0x50>)
 800b04c:	4b0a      	ldr	r3, [pc, #40]	@ (800b078 <AHT20_calibrate+0x54>)
 800b04e:	0019      	movs	r1, r3
 800b050:	2001      	movs	r0, #1
 800b052:	f008 febd 	bl	8013dd0 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b056:	f009 fc33 	bl	80148c0 <HAL_GetTick>
 800b05a:	0003      	movs	r3, r0
 800b05c:	3332      	adds	r3, #50	@ 0x32
 800b05e:	001a      	movs	r2, r3
 800b060:	4b06      	ldr	r3, [pc, #24]	@ (800b07c <AHT20_calibrate+0x58>)
 800b062:	601a      	str	r2, [r3, #0]
  return response;
 800b064:	1dfb      	adds	r3, r7, #7
 800b066:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800b068:	0018      	movs	r0, r3
 800b06a:	46bd      	mov	sp, r7
 800b06c:	b003      	add	sp, #12
 800b06e:	bd90      	pop	{r4, r7, pc}
 800b070:	20000098 	.word	0x20000098
 800b074:	0802bffc 	.word	0x0802bffc
 800b078:	0802c034 	.word	0x0802c034
 800b07c:	20000ee0 	.word	0x20000ee0

0800b080 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800b084:	4a0a      	ldr	r2, [pc, #40]	@ (800b0b0 <AHT20_DeviceConnected+0x30>)
 800b086:	4b0b      	ldr	r3, [pc, #44]	@ (800b0b4 <AHT20_DeviceConnected+0x34>)
 800b088:	0019      	movs	r1, r3
 800b08a:	2003      	movs	r0, #3
 800b08c:	f008 fea0 	bl	8013dd0 <CreateLine>
   AHT20_init();
 800b090:	f7ff ff90 	bl	800afb4 <AHT20_init>
   HAL_Delay(10);
 800b094:	200a      	movs	r0, #10
 800b096:	f009 fc1d 	bl	80148d4 <HAL_Delay>
   AHT20_calibrate();
 800b09a:	f7ff ffc3 	bl	800b024 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800b09e:	f7ff ff69 	bl	800af74 <AHT20_read_status>
 800b0a2:	0003      	movs	r3, r0
 800b0a4:	1e5a      	subs	r2, r3, #1
 800b0a6:	4193      	sbcs	r3, r2
 800b0a8:	b2db      	uxtb	r3, r3
 }
 800b0aa:	0018      	movs	r0, r3
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	0802c038 	.word	0x0802c038
 800b0b4:	0802bfd0 	.word	0x0802bfd0

0800b0b8 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800b0b8:	b590      	push	{r4, r7, lr}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800b0be:	1dfc      	adds	r4, r7, #7
 800b0c0:	4b10      	ldr	r3, [pc, #64]	@ (800b104 <AHT20_StartMeasurement+0x4c>)
 800b0c2:	2203      	movs	r2, #3
 800b0c4:	0019      	movs	r1, r3
 800b0c6:	2038      	movs	r0, #56	@ 0x38
 800b0c8:	f7ff fe60 	bl	800ad8c <WriteRegister>
 800b0cc:	0003      	movs	r3, r0
 800b0ce:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800b0d0:	1dfb      	adds	r3, r7, #7
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	4053      	eors	r3, r2
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d005      	beq.n	800b0ea <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800b0de:	4a0a      	ldr	r2, [pc, #40]	@ (800b108 <AHT20_StartMeasurement+0x50>)
 800b0e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b10c <AHT20_StartMeasurement+0x54>)
 800b0e2:	0019      	movs	r1, r3
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	f008 fe73 	bl	8013dd0 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800b0ea:	f009 fbe9 	bl	80148c0 <HAL_GetTick>
 800b0ee:	0003      	movs	r3, r0
 800b0f0:	33fa      	adds	r3, #250	@ 0xfa
 800b0f2:	001a      	movs	r2, r3
 800b0f4:	4b06      	ldr	r3, [pc, #24]	@ (800b110 <AHT20_StartMeasurement+0x58>)
 800b0f6:	601a      	str	r2, [r3, #0]
  return response;
 800b0f8:	1dfb      	adds	r3, r7, #7
 800b0fa:	781b      	ldrb	r3, [r3, #0]
}
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	46bd      	mov	sp, r7
 800b100:	b003      	add	sp, #12
 800b102:	bd90      	pop	{r4, r7, pc}
 800b104:	20000094 	.word	0x20000094
 800b108:	0802c050 	.word	0x0802c050
 800b10c:	0802c034 	.word	0x0802c034
 800b110:	20000ee0 	.word	0x20000ee0

0800b114 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800b114:	b590      	push	{r4, r7, lr}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800b11a:	f009 fbd1 	bl	80148c0 <HAL_GetTick>
 800b11e:	0003      	movs	r3, r0
 800b120:	22fa      	movs	r2, #250	@ 0xfa
 800b122:	0092      	lsls	r2, r2, #2
 800b124:	189a      	adds	r2, r3, r2
 800b126:	4b29      	ldr	r3, [pc, #164]	@ (800b1cc <AHT20_GetMeasurementValues+0xb8>)
 800b128:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b12a:	e019      	b.n	800b160 <AHT20_GetMeasurementValues+0x4c>
//    Info("AHT20 Device busy, waiting for results");
    if (TimestampIsReached(AHT20TimeStamp)) {
 800b12c:	4b27      	ldr	r3, [pc, #156]	@ (800b1cc <AHT20_GetMeasurementValues+0xb8>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	0018      	movs	r0, r3
 800b132:	f008 fdf7 	bl	8013d24 <TimestampIsReached>
 800b136:	1e03      	subs	r3, r0, #0
 800b138:	d00f      	beq.n	800b15a <AHT20_GetMeasurementValues+0x46>
      Error("AHT2x timeout for getting values");
 800b13a:	4a25      	ldr	r2, [pc, #148]	@ (800b1d0 <AHT20_GetMeasurementValues+0xbc>)
 800b13c:	4b25      	ldr	r3, [pc, #148]	@ (800b1d4 <AHT20_GetMeasurementValues+0xc0>)
 800b13e:	0019      	movs	r1, r3
 800b140:	2001      	movs	r0, #1
 800b142:	f008 fe45 	bl	8013dd0 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800b146:	f009 fbbb 	bl	80148c0 <HAL_GetTick>
 800b14a:	0003      	movs	r3, r0
 800b14c:	22fa      	movs	r2, #250	@ 0xfa
 800b14e:	00d2      	lsls	r2, r2, #3
 800b150:	189a      	adds	r2, r3, r2
 800b152:	4b1e      	ldr	r3, [pc, #120]	@ (800b1cc <AHT20_GetMeasurementValues+0xb8>)
 800b154:	601a      	str	r2, [r3, #0]
      return false;
 800b156:	2300      	movs	r3, #0
 800b158:	e034      	b.n	800b1c4 <AHT20_GetMeasurementValues+0xb0>
    }
    HAL_Delay(10);
 800b15a:	200a      	movs	r0, #10
 800b15c:	f009 fbba 	bl	80148d4 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b160:	f7ff ff08 	bl	800af74 <AHT20_read_status>
 800b164:	0003      	movs	r3, r0
 800b166:	001a      	movs	r2, r3
 800b168:	2380      	movs	r3, #128	@ 0x80
 800b16a:	4013      	ands	r3, r2
 800b16c:	2b80      	cmp	r3, #128	@ 0x80
 800b16e:	d0dd      	beq.n	800b12c <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800b170:	200a      	movs	r0, #10
 800b172:	f009 fbaf 	bl	80148d4 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800b176:	1dfb      	adds	r3, r7, #7
 800b178:	2200      	movs	r2, #0
 800b17a:	701a      	strb	r2, [r3, #0]
 800b17c:	e009      	b.n	800b192 <AHT20_GetMeasurementValues+0x7e>
    airtemphumraw[g] = 0;
 800b17e:	1dfb      	adds	r3, r7, #7
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	4a15      	ldr	r2, [pc, #84]	@ (800b1d8 <AHT20_GetMeasurementValues+0xc4>)
 800b184:	2100      	movs	r1, #0
 800b186:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800b188:	1dfb      	adds	r3, r7, #7
 800b18a:	781a      	ldrb	r2, [r3, #0]
 800b18c:	1dfb      	adds	r3, r7, #7
 800b18e:	3201      	adds	r2, #1
 800b190:	701a      	strb	r2, [r3, #0]
 800b192:	1dfb      	adds	r3, r7, #7
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	2b06      	cmp	r3, #6
 800b198:	d9f1      	bls.n	800b17e <AHT20_GetMeasurementValues+0x6a>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800b19a:	1dbc      	adds	r4, r7, #6
 800b19c:	4b0e      	ldr	r3, [pc, #56]	@ (800b1d8 <AHT20_GetMeasurementValues+0xc4>)
 800b19e:	2207      	movs	r2, #7
 800b1a0:	0019      	movs	r1, r3
 800b1a2:	2038      	movs	r0, #56	@ 0x38
 800b1a4:	f7ff fdae 	bl	800ad04 <ReadDirRegister>
 800b1a8:	0003      	movs	r3, r0
 800b1aa:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800b1ac:	200a      	movs	r0, #10
 800b1ae:	f009 fb91 	bl	80148d4 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800b1b2:	f009 fb85 	bl	80148c0 <HAL_GetTick>
 800b1b6:	0003      	movs	r3, r0
 800b1b8:	3364      	adds	r3, #100	@ 0x64
 800b1ba:	001a      	movs	r2, r3
 800b1bc:	4b03      	ldr	r3, [pc, #12]	@ (800b1cc <AHT20_GetMeasurementValues+0xb8>)
 800b1be:	601a      	str	r2, [r3, #0]
  return response;
 800b1c0:	1dbb      	adds	r3, r7, #6
 800b1c2:	781b      	ldrb	r3, [r3, #0]
}
 800b1c4:	0018      	movs	r0, r3
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	b003      	add	sp, #12
 800b1ca:	bd90      	pop	{r4, r7, pc}
 800b1cc:	20000ee0 	.word	0x20000ee0
 800b1d0:	0802c07c 	.word	0x0802c07c
 800b1d4:	0802c034 	.word	0x0802c034
 800b1d8:	20000ef4 	.word	0x20000ef4

0800b1dc <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800b1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1de:	46c6      	mov	lr, r8
 800b1e0:	b500      	push	{lr}
 800b1e2:	b08a      	sub	sp, #40	@ 0x28
 800b1e4:	af06      	add	r7, sp, #24
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800b1ea:	4b5a      	ldr	r3, [pc, #360]	@ (800b354 <AHT20_Calculate+0x178>)
 800b1ec:	799c      	ldrb	r4, [r3, #6]
 800b1ee:	4b59      	ldr	r3, [pc, #356]	@ (800b354 <AHT20_Calculate+0x178>)
 800b1f0:	2106      	movs	r1, #6
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	f7ff fdec 	bl	800add0 <CalculateCRC>
 800b1f8:	0003      	movs	r3, r0
 800b1fa:	429c      	cmp	r4, r3
 800b1fc:	d044      	beq.n	800b288 <AHT20_Calculate+0xac>
 800b1fe:	4b55      	ldr	r3, [pc, #340]	@ (800b354 <AHT20_Calculate+0x178>)
 800b200:	799b      	ldrb	r3, [r3, #6]
 800b202:	2bff      	cmp	r3, #255	@ 0xff
 800b204:	d040      	beq.n	800b288 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800b206:	4b53      	ldr	r3, [pc, #332]	@ (800b354 <AHT20_Calculate+0x178>)
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	4698      	mov	r8, r3
 800b20c:	4b51      	ldr	r3, [pc, #324]	@ (800b354 <AHT20_Calculate+0x178>)
 800b20e:	785b      	ldrb	r3, [r3, #1]
 800b210:	0018      	movs	r0, r3
 800b212:	4b50      	ldr	r3, [pc, #320]	@ (800b354 <AHT20_Calculate+0x178>)
 800b214:	789b      	ldrb	r3, [r3, #2]
 800b216:	001c      	movs	r4, r3
 800b218:	4b4e      	ldr	r3, [pc, #312]	@ (800b354 <AHT20_Calculate+0x178>)
 800b21a:	78db      	ldrb	r3, [r3, #3]
 800b21c:	001d      	movs	r5, r3
 800b21e:	4b4d      	ldr	r3, [pc, #308]	@ (800b354 <AHT20_Calculate+0x178>)
 800b220:	791b      	ldrb	r3, [r3, #4]
 800b222:	001e      	movs	r6, r3
 800b224:	4b4b      	ldr	r3, [pc, #300]	@ (800b354 <AHT20_Calculate+0x178>)
 800b226:	795b      	ldrb	r3, [r3, #5]
 800b228:	469c      	mov	ip, r3
 800b22a:	4b4a      	ldr	r3, [pc, #296]	@ (800b354 <AHT20_Calculate+0x178>)
 800b22c:	799b      	ldrb	r3, [r3, #6]
 800b22e:	4a4a      	ldr	r2, [pc, #296]	@ (800b358 <AHT20_Calculate+0x17c>)
 800b230:	494a      	ldr	r1, [pc, #296]	@ (800b35c <AHT20_Calculate+0x180>)
 800b232:	9305      	str	r3, [sp, #20]
 800b234:	4663      	mov	r3, ip
 800b236:	9304      	str	r3, [sp, #16]
 800b238:	9603      	str	r6, [sp, #12]
 800b23a:	9502      	str	r5, [sp, #8]
 800b23c:	9401      	str	r4, [sp, #4]
 800b23e:	9000      	str	r0, [sp, #0]
 800b240:	4643      	mov	r3, r8
 800b242:	2003      	movs	r0, #3
 800b244:	f008 fdc4 	bl	8013dd0 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800b248:	4b42      	ldr	r3, [pc, #264]	@ (800b354 <AHT20_Calculate+0x178>)
 800b24a:	799b      	ldrb	r3, [r3, #6]
 800b24c:	001c      	movs	r4, r3
 800b24e:	4b41      	ldr	r3, [pc, #260]	@ (800b354 <AHT20_Calculate+0x178>)
 800b250:	2106      	movs	r1, #6
 800b252:	0018      	movs	r0, r3
 800b254:	f7ff fdbc 	bl	800add0 <CalculateCRC>
 800b258:	0003      	movs	r3, r0
 800b25a:	4a41      	ldr	r2, [pc, #260]	@ (800b360 <AHT20_Calculate+0x184>)
 800b25c:	4941      	ldr	r1, [pc, #260]	@ (800b364 <AHT20_Calculate+0x188>)
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	0023      	movs	r3, r4
 800b262:	2001      	movs	r0, #1
 800b264:	f008 fdb4 	bl	8013dd0 <CreateLine>
    *airtemp = 0.0;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2200      	movs	r2, #0
 800b272:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800b274:	f009 fb24 	bl	80148c0 <HAL_GetTick>
 800b278:	0003      	movs	r3, r0
 800b27a:	22fa      	movs	r2, #250	@ 0xfa
 800b27c:	00d2      	lsls	r2, r2, #3
 800b27e:	189a      	adds	r2, r3, r2
 800b280:	4b39      	ldr	r3, [pc, #228]	@ (800b368 <AHT20_Calculate+0x18c>)
 800b282:	601a      	str	r2, [r3, #0]
    return false;
 800b284:	2300      	movs	r3, #0
 800b286:	e05f      	b.n	800b348 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800b288:	4b38      	ldr	r3, [pc, #224]	@ (800b36c <AHT20_Calculate+0x190>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800b28e:	4b31      	ldr	r3, [pc, #196]	@ (800b354 <AHT20_Calculate+0x178>)
 800b290:	78db      	ldrb	r3, [r3, #3]
 800b292:	041a      	lsls	r2, r3, #16
 800b294:	23f0      	movs	r3, #240	@ 0xf0
 800b296:	031b      	lsls	r3, r3, #12
 800b298:	401a      	ands	r2, r3
 800b29a:	4b2e      	ldr	r3, [pc, #184]	@ (800b354 <AHT20_Calculate+0x178>)
 800b29c:	791b      	ldrb	r3, [r3, #4]
 800b29e:	021b      	lsls	r3, r3, #8
 800b2a0:	18d3      	adds	r3, r2, r3
 800b2a2:	4a2c      	ldr	r2, [pc, #176]	@ (800b354 <AHT20_Calculate+0x178>)
 800b2a4:	7952      	ldrb	r2, [r2, #5]
 800b2a6:	189b      	adds	r3, r3, r2
 800b2a8:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f7f6 fb0c 	bl	80018c8 <__aeabi_ui2f>
 800b2b0:	1c03      	adds	r3, r0, #0
 800b2b2:	2193      	movs	r1, #147	@ 0x93
 800b2b4:	05c9      	lsls	r1, r1, #23
 800b2b6:	1c18      	adds	r0, r3, #0
 800b2b8:	f7f5 fcf4 	bl	8000ca4 <__aeabi_fdiv>
 800b2bc:	1c03      	adds	r3, r0, #0
 800b2be:	492c      	ldr	r1, [pc, #176]	@ (800b370 <AHT20_Calculate+0x194>)
 800b2c0:	1c18      	adds	r0, r3, #0
 800b2c2:	f7f5 febd 	bl	8001040 <__aeabi_fmul>
 800b2c6:	1c03      	adds	r3, r0, #0
 800b2c8:	492a      	ldr	r1, [pc, #168]	@ (800b374 <AHT20_Calculate+0x198>)
 800b2ca:	1c18      	adds	r0, r3, #0
 800b2cc:	f7f6 f812 	bl	80012f4 <__aeabi_fsub>
 800b2d0:	1c03      	adds	r3, r0, #0
 800b2d2:	1c1a      	adds	r2, r3, #0
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800b2d8:	4b1e      	ldr	r3, [pc, #120]	@ (800b354 <AHT20_Calculate+0x178>)
 800b2da:	785b      	ldrb	r3, [r3, #1]
 800b2dc:	031a      	lsls	r2, r3, #12
 800b2de:	4b1d      	ldr	r3, [pc, #116]	@ (800b354 <AHT20_Calculate+0x178>)
 800b2e0:	789b      	ldrb	r3, [r3, #2]
 800b2e2:	011b      	lsls	r3, r3, #4
 800b2e4:	18d3      	adds	r3, r2, r3
 800b2e6:	4a1b      	ldr	r2, [pc, #108]	@ (800b354 <AHT20_Calculate+0x178>)
 800b2e8:	78d2      	ldrb	r2, [r2, #3]
 800b2ea:	0912      	lsrs	r2, r2, #4
 800b2ec:	b2d2      	uxtb	r2, r2
 800b2ee:	189b      	adds	r3, r3, r2
 800b2f0:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800b2f2:	68b8      	ldr	r0, [r7, #8]
 800b2f4:	f7f6 fae8 	bl	80018c8 <__aeabi_ui2f>
 800b2f8:	1c03      	adds	r3, r0, #0
 800b2fa:	2193      	movs	r1, #147	@ 0x93
 800b2fc:	05c9      	lsls	r1, r1, #23
 800b2fe:	1c18      	adds	r0, r3, #0
 800b300:	f7f5 fcd0 	bl	8000ca4 <__aeabi_fdiv>
 800b304:	1c03      	adds	r3, r0, #0
 800b306:	491c      	ldr	r1, [pc, #112]	@ (800b378 <AHT20_Calculate+0x19c>)
 800b308:	1c18      	adds	r0, r3, #0
 800b30a:	f7f5 fe99 	bl	8001040 <__aeabi_fmul>
 800b30e:	1c03      	adds	r3, r0, #0
 800b310:	1c1a      	adds	r2, r3, #0
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	601a      	str	r2, [r3, #0]
  Info("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	1c18      	adds	r0, r3, #0
 800b31c:	f7f8 faba 	bl	8003894 <__aeabi_f2d>
 800b320:	0004      	movs	r4, r0
 800b322:	000d      	movs	r5, r1
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	1c18      	adds	r0, r3, #0
 800b32a:	f7f8 fab3 	bl	8003894 <__aeabi_f2d>
 800b32e:	0002      	movs	r2, r0
 800b330:	000b      	movs	r3, r1
 800b332:	4812      	ldr	r0, [pc, #72]	@ (800b37c <AHT20_Calculate+0x1a0>)
 800b334:	4912      	ldr	r1, [pc, #72]	@ (800b380 <AHT20_Calculate+0x1a4>)
 800b336:	9202      	str	r2, [sp, #8]
 800b338:	9303      	str	r3, [sp, #12]
 800b33a:	9400      	str	r4, [sp, #0]
 800b33c:	9501      	str	r5, [sp, #4]
 800b33e:	0002      	movs	r2, r0
 800b340:	2002      	movs	r0, #2
 800b342:	f008 fd45 	bl	8013dd0 <CreateLine>
  return true;
 800b346:	2301      	movs	r3, #1
}
 800b348:	0018      	movs	r0, r3
 800b34a:	46bd      	mov	sp, r7
 800b34c:	b004      	add	sp, #16
 800b34e:	bc80      	pop	{r7}
 800b350:	46b8      	mov	r8, r7
 800b352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b354:	20000ef4 	.word	0x20000ef4
 800b358:	0802c0a0 	.word	0x0802c0a0
 800b35c:	0802bfd0 	.word	0x0802bfd0
 800b360:	0802c120 	.word	0x0802c120
 800b364:	0802c034 	.word	0x0802c034
 800b368:	20000ee0 	.word	0x20000ee0
 800b36c:	20000efb 	.word	0x20000efb
 800b370:	43480000 	.word	0x43480000
 800b374:	42480000 	.word	0x42480000
 800b378:	42c80000 	.word	0x42c80000
 800b37c:	0802c148 	.word	0x0802c148
 800b380:	0802c17c 	.word	0x0802c17c

0800b384 <AHT20_reset>:

bool AHT20_reset(void) {
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b388:	f009 fa9a 	bl	80148c0 <HAL_GetTick>
 800b38c:	0003      	movs	r3, r0
 800b38e:	3332      	adds	r3, #50	@ 0x32
 800b390:	001a      	movs	r2, r3
 800b392:	4b07      	ldr	r3, [pc, #28]	@ (800b3b0 <AHT20_reset+0x2c>)
 800b394:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800b396:	4b07      	ldr	r3, [pc, #28]	@ (800b3b4 <AHT20_reset+0x30>)
 800b398:	2200      	movs	r2, #0
 800b39a:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800b39c:	4b06      	ldr	r3, [pc, #24]	@ (800b3b8 <AHT20_reset+0x34>)
 800b39e:	2201      	movs	r2, #1
 800b3a0:	0019      	movs	r1, r3
 800b3a2:	2038      	movs	r0, #56	@ 0x38
 800b3a4:	f7ff fcf2 	bl	800ad8c <WriteRegister>
 800b3a8:	0003      	movs	r3, r0
}
 800b3aa:	0018      	movs	r0, r3
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	20000ee0 	.word	0x20000ee0
 800b3b4:	20000ee4 	.word	0x20000ee4
 800b3b8:	20000090 	.word	0x20000090

0800b3bc <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800b3c2:	4b61      	ldr	r3, [pc, #388]	@ (800b548 <AHT_Upkeep+0x18c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	0018      	movs	r0, r3
 800b3c8:	f008 fcac 	bl	8013d24 <TimestampIsReached>
 800b3cc:	0003      	movs	r3, r0
 800b3ce:	001a      	movs	r2, r3
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	4053      	eors	r3, r2
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <AHT_Upkeep+0x24>
    return AHTState;
 800b3da:	4b5c      	ldr	r3, [pc, #368]	@ (800b54c <AHT_Upkeep+0x190>)
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	e0ae      	b.n	800b53e <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800b3e0:	4b5a      	ldr	r3, [pc, #360]	@ (800b54c <AHT_Upkeep+0x190>)
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b05      	cmp	r3, #5
 800b3e6:	d900      	bls.n	800b3ea <AHT_Upkeep+0x2e>
 800b3e8:	e07d      	b.n	800b4e6 <AHT_Upkeep+0x12a>
 800b3ea:	009a      	lsls	r2, r3, #2
 800b3ec:	4b58      	ldr	r3, [pc, #352]	@ (800b550 <AHT_Upkeep+0x194>)
 800b3ee:	18d3      	adds	r3, r2, r3
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800b3f4:	4a57      	ldr	r2, [pc, #348]	@ (800b554 <AHT_Upkeep+0x198>)
 800b3f6:	4b58      	ldr	r3, [pc, #352]	@ (800b558 <AHT_Upkeep+0x19c>)
 800b3f8:	0019      	movs	r1, r3
 800b3fa:	2003      	movs	r0, #3
 800b3fc:	f008 fce8 	bl	8013dd0 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800b400:	f009 fa5e 	bl	80148c0 <HAL_GetTick>
 800b404:	0003      	movs	r3, r0
 800b406:	4a55      	ldr	r2, [pc, #340]	@ (800b55c <AHT_Upkeep+0x1a0>)
 800b408:	189a      	adds	r2, r3, r2
 800b40a:	4b4f      	ldr	r3, [pc, #316]	@ (800b548 <AHT_Upkeep+0x18c>)
 800b40c:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800b40e:	4b54      	ldr	r3, [pc, #336]	@ (800b560 <AHT_Upkeep+0x1a4>)
 800b410:	781a      	ldrb	r2, [r3, #0]
 800b412:	4b54      	ldr	r3, [pc, #336]	@ (800b564 <AHT_Upkeep+0x1a8>)
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	d100      	bne.n	800b41c <AHT_Upkeep+0x60>
 800b41a:	e087      	b.n	800b52c <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800b41c:	4b4b      	ldr	r3, [pc, #300]	@ (800b54c <AHT_Upkeep+0x190>)
 800b41e:	2205      	movs	r2, #5
 800b420:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b422:	e083      	b.n	800b52c <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b424:	f002 fcbe 	bl	800dda4 <getSensorLock>
 800b428:	1e03      	subs	r3, r0, #0
 800b42a:	d000      	beq.n	800b42e <AHT_Upkeep+0x72>
 800b42c:	e080      	b.n	800b530 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800b42e:	2002      	movs	r0, #2
 800b430:	f002 fca4 	bl	800dd7c <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800b434:	f7ff fe40 	bl	800b0b8 <AHT20_StartMeasurement>
 800b438:	0003      	movs	r3, r0
 800b43a:	001a      	movs	r2, r3
 800b43c:	2301      	movs	r3, #1
 800b43e:	4053      	eors	r3, r2
 800b440:	b2db      	uxtb	r3, r3
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00c      	beq.n	800b460 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800b446:	f7ff ff9d 	bl	800b384 <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800b44a:	f009 fa39 	bl	80148c0 <HAL_GetTick>
 800b44e:	0003      	movs	r3, r0
 800b450:	33c8      	adds	r3, #200	@ 0xc8
 800b452:	001a      	movs	r2, r3
 800b454:	4b3c      	ldr	r3, [pc, #240]	@ (800b548 <AHT_Upkeep+0x18c>)
 800b456:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800b458:	4b3c      	ldr	r3, [pc, #240]	@ (800b54c <AHT_Upkeep+0x190>)
 800b45a:	22ff      	movs	r2, #255	@ 0xff
 800b45c:	701a      	strb	r2, [r3, #0]
 800b45e:	e002      	b.n	800b466 <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800b460:	4b3a      	ldr	r3, [pc, #232]	@ (800b54c <AHT_Upkeep+0x190>)
 800b462:	2202      	movs	r2, #2
 800b464:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b466:	200a      	movs	r0, #10
 800b468:	f009 fa34 	bl	80148d4 <HAL_Delay>
    break;
 800b46c:	e065      	b.n	800b53a <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800b46e:	f7ff fe51 	bl	800b114 <AHT20_GetMeasurementValues>
 800b472:	1e03      	subs	r3, r0, #0
 800b474:	d05e      	beq.n	800b534 <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800b476:	200a      	movs	r0, #10
 800b478:	f009 fa2c 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 800b47c:	2000      	movs	r0, #0
 800b47e:	f002 fc7d 	bl	800dd7c <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800b482:	4b32      	ldr	r3, [pc, #200]	@ (800b54c <AHT_Upkeep+0x190>)
 800b484:	2203      	movs	r2, #3
 800b486:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800b488:	e054      	b.n	800b534 <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800b48a:	003a      	movs	r2, r7
 800b48c:	1d3b      	adds	r3, r7, #4
 800b48e:	0011      	movs	r1, r2
 800b490:	0018      	movs	r0, r3
 800b492:	f7ff fea3 	bl	800b1dc <AHT20_Calculate>
 800b496:	0003      	movs	r3, r0
 800b498:	001a      	movs	r2, r3
 800b49a:	2301      	movs	r3, #1
 800b49c:	4053      	eors	r3, r2
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d005      	beq.n	800b4b0 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800b4a4:	4b29      	ldr	r3, [pc, #164]	@ (800b54c <AHT_Upkeep+0x190>)
 800b4a6:	22ff      	movs	r2, #255	@ 0xff
 800b4a8:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800b4aa:	4b28      	ldr	r3, [pc, #160]	@ (800b54c <AHT_Upkeep+0x190>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	e046      	b.n	800b53e <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	1c11      	adds	r1, r2, #0
 800b4b6:	1c18      	adds	r0, r3, #0
 800b4b8:	f7f9 fb16 	bl	8004ae8 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	1c11      	adds	r1, r2, #0
 800b4c2:	1c18      	adds	r0, r3, #0
 800b4c4:	f7f8 ff94 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800b4c8:	4b20      	ldr	r3, [pc, #128]	@ (800b54c <AHT_Upkeep+0x190>)
 800b4ca:	2205      	movs	r2, #5
 800b4cc:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800b4ce:	f009 f9f7 	bl	80148c0 <HAL_GetTick>
 800b4d2:	0003      	movs	r3, r0
 800b4d4:	4a24      	ldr	r2, [pc, #144]	@ (800b568 <AHT_Upkeep+0x1ac>)
 800b4d6:	189a      	adds	r2, r3, r2
 800b4d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b548 <AHT_Upkeep+0x18c>)
 800b4da:	601a      	str	r2, [r3, #0]
    break;
 800b4dc:	e02d      	b.n	800b53a <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b4de:	4b1b      	ldr	r3, [pc, #108]	@ (800b54c <AHT_Upkeep+0x190>)
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	701a      	strb	r2, [r3, #0]
  break;
 800b4e4:	e029      	b.n	800b53a <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b4e6:	4b19      	ldr	r3, [pc, #100]	@ (800b54c <AHT_Upkeep+0x190>)
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800b4ec:	f002 fc5a 	bl	800dda4 <getSensorLock>
 800b4f0:	0003      	movs	r3, r0
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d102      	bne.n	800b4fc <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f002 fc40 	bl	800dd7c <setSensorLock>
    }
    AHTerrors++;
 800b4fc:	4b1b      	ldr	r3, [pc, #108]	@ (800b56c <AHT_Upkeep+0x1b0>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	3301      	adds	r3, #1
 800b502:	b2da      	uxtb	r2, r3
 800b504:	4b19      	ldr	r3, [pc, #100]	@ (800b56c <AHT_Upkeep+0x1b0>)
 800b506:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800b508:	4b18      	ldr	r3, [pc, #96]	@ (800b56c <AHT_Upkeep+0x1b0>)
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b19      	cmp	r3, #25
 800b50e:	d913      	bls.n	800b538 <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800b510:	4a17      	ldr	r2, [pc, #92]	@ (800b570 <AHT_Upkeep+0x1b4>)
 800b512:	4b18      	ldr	r3, [pc, #96]	@ (800b574 <AHT_Upkeep+0x1b8>)
 800b514:	0019      	movs	r1, r3
 800b516:	2001      	movs	r0, #1
 800b518:	f008 fc5a 	bl	8013dd0 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800b51c:	4b0b      	ldr	r3, [pc, #44]	@ (800b54c <AHT_Upkeep+0x190>)
 800b51e:	2200      	movs	r2, #0
 800b520:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800b522:	4b0f      	ldr	r3, [pc, #60]	@ (800b560 <AHT_Upkeep+0x1a4>)
 800b524:	781a      	ldrb	r2, [r3, #0]
 800b526:	4b0f      	ldr	r3, [pc, #60]	@ (800b564 <AHT_Upkeep+0x1a8>)
 800b528:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b52a:	e005      	b.n	800b538 <AHT_Upkeep+0x17c>
    break;
 800b52c:	46c0      	nop			@ (mov r8, r8)
 800b52e:	e004      	b.n	800b53a <AHT_Upkeep+0x17e>
      break;
 800b530:	46c0      	nop			@ (mov r8, r8)
 800b532:	e002      	b.n	800b53a <AHT_Upkeep+0x17e>
    break;
 800b534:	46c0      	nop			@ (mov r8, r8)
 800b536:	e000      	b.n	800b53a <AHT_Upkeep+0x17e>
    break;
 800b538:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800b53a:	4b04      	ldr	r3, [pc, #16]	@ (800b54c <AHT_Upkeep+0x190>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
}
 800b53e:	0018      	movs	r0, r3
 800b540:	46bd      	mov	sp, r7
 800b542:	b002      	add	sp, #8
 800b544:	bd80      	pop	{r7, pc}
 800b546:	46c0      	nop			@ (mov r8, r8)
 800b548:	20000ee0 	.word	0x20000ee0
 800b54c:	2000009f 	.word	0x2000009f
 800b550:	0802e1fc 	.word	0x0802e1fc
 800b554:	0802c180 	.word	0x0802c180
 800b558:	0802bfd0 	.word	0x0802bfd0
 800b55c:	000dbba0 	.word	0x000dbba0
 800b560:	20000e43 	.word	0x20000e43
 800b564:	20000efc 	.word	0x20000efc
 800b568:	0000ea60 	.word	0x0000ea60
 800b56c:	20000efb 	.word	0x20000efb
 800b570:	0802c1a8 	.word	0x0802c1a8
 800b574:	0802c034 	.word	0x0802c034

0800b578 <WriteMemRegister>:
static bool bmperror = false;
static uint8_t mode = BMP280_FORCED_MODE;
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b57a:	b087      	sub	sp, #28
 800b57c:	af02      	add	r7, sp, #8
 800b57e:	0004      	movs	r4, r0
 800b580:	0008      	movs	r0, r1
 800b582:	60ba      	str	r2, [r7, #8]
 800b584:	0019      	movs	r1, r3
 800b586:	260e      	movs	r6, #14
 800b588:	19bb      	adds	r3, r7, r6
 800b58a:	1c22      	adds	r2, r4, #0
 800b58c:	801a      	strh	r2, [r3, #0]
 800b58e:	230c      	movs	r3, #12
 800b590:	18fb      	adds	r3, r7, r3
 800b592:	1c02      	adds	r2, r0, #0
 800b594:	801a      	strh	r2, [r3, #0]
 800b596:	1dbb      	adds	r3, r7, #6
 800b598:	1c0a      	adds	r2, r1, #0
 800b59a:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800b59c:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d0 <WriteMemRegister+0x58>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d010      	beq.n	800b5c6 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b5a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b5d0 <WriteMemRegister+0x58>)
 800b5a6:	681c      	ldr	r4, [r3, #0]
 800b5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b5d4 <WriteMemRegister+0x5c>)
 800b5aa:	7818      	ldrb	r0, [r3, #0]
 800b5ac:	68bd      	ldr	r5, [r7, #8]
 800b5ae:	230c      	movs	r3, #12
 800b5b0:	18fb      	adds	r3, r7, r3
 800b5b2:	881a      	ldrh	r2, [r3, #0]
 800b5b4:	19bb      	adds	r3, r7, r6
 800b5b6:	8819      	ldrh	r1, [r3, #0]
 800b5b8:	1dbb      	adds	r3, r7, #6
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	002b      	movs	r3, r5
 800b5c0:	47a0      	blx	r4
 800b5c2:	0003      	movs	r3, r0
 800b5c4:	e000      	b.n	800b5c8 <WriteMemRegister+0x50>
  }
  return false;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	b005      	add	sp, #20
 800b5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d0:	20000f00 	.word	0x20000f00
 800b5d4:	200000a0 	.word	0x200000a0

0800b5d8 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5da:	b087      	sub	sp, #28
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	0004      	movs	r4, r0
 800b5e0:	0008      	movs	r0, r1
 800b5e2:	60ba      	str	r2, [r7, #8]
 800b5e4:	0019      	movs	r1, r3
 800b5e6:	260e      	movs	r6, #14
 800b5e8:	19bb      	adds	r3, r7, r6
 800b5ea:	1c22      	adds	r2, r4, #0
 800b5ec:	801a      	strh	r2, [r3, #0]
 800b5ee:	230c      	movs	r3, #12
 800b5f0:	18fb      	adds	r3, r7, r3
 800b5f2:	1c02      	adds	r2, r0, #0
 800b5f4:	801a      	strh	r2, [r3, #0]
 800b5f6:	1dbb      	adds	r3, r7, #6
 800b5f8:	1c0a      	adds	r2, r1, #0
 800b5fa:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800b5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b630 <ReadMemRegister+0x58>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d010      	beq.n	800b626 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b604:	4b0a      	ldr	r3, [pc, #40]	@ (800b630 <ReadMemRegister+0x58>)
 800b606:	681c      	ldr	r4, [r3, #0]
 800b608:	4b0a      	ldr	r3, [pc, #40]	@ (800b634 <ReadMemRegister+0x5c>)
 800b60a:	7818      	ldrb	r0, [r3, #0]
 800b60c:	68bd      	ldr	r5, [r7, #8]
 800b60e:	230c      	movs	r3, #12
 800b610:	18fb      	adds	r3, r7, r3
 800b612:	881a      	ldrh	r2, [r3, #0]
 800b614:	19bb      	adds	r3, r7, r6
 800b616:	8819      	ldrh	r1, [r3, #0]
 800b618:	1dbb      	adds	r3, r7, #6
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	002b      	movs	r3, r5
 800b620:	47a0      	blx	r4
 800b622:	0003      	movs	r3, r0
 800b624:	e000      	b.n	800b628 <ReadMemRegister+0x50>
  }
  return false;
 800b626:	2300      	movs	r3, #0
}
 800b628:	0018      	movs	r0, r3
 800b62a:	46bd      	mov	sp, r7
 800b62c:	b005      	add	sp, #20
 800b62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b630:	20000f04 	.word	0x20000f04
 800b634:	200000a0 	.word	0x200000a0

0800b638 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800b640:	f009 f93e 	bl	80148c0 <HAL_GetTick>
 800b644:	0002      	movs	r2, r0
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	18d2      	adds	r2, r2, r3
 800b64a:	4b03      	ldr	r3, [pc, #12]	@ (800b658 <setBMP280TimeStamp+0x20>)
 800b64c:	601a      	str	r2, [r3, #0]
}
 800b64e:	46c0      	nop			@ (mov r8, r8)
 800b650:	46bd      	mov	sp, r7
 800b652:	b002      	add	sp, #8
 800b654:	bd80      	pop	{r7, pc}
 800b656:	46c0      	nop			@ (mov r8, r8)
 800b658:	20000f24 	.word	0x20000f24

0800b65c <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800b666:	4b05      	ldr	r3, [pc, #20]	@ (800b67c <BMP_Init+0x20>)
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800b66c:	4b04      	ldr	r3, [pc, #16]	@ (800b680 <BMP_Init+0x24>)
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	601a      	str	r2, [r3, #0]
}
 800b672:	46c0      	nop			@ (mov r8, r8)
 800b674:	46bd      	mov	sp, r7
 800b676:	b002      	add	sp, #8
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	46c0      	nop			@ (mov r8, r8)
 800b67c:	20000f04 	.word	0x20000f04
 800b680:	20000f00 	.word	0x20000f00

0800b684 <BMP280_reset>:

static void BMP280_reset() {
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800b68a:	1dfb      	adds	r3, r7, #7
 800b68c:	22b6      	movs	r2, #182	@ 0xb6
 800b68e:	701a      	strb	r2, [r3, #0]
  bmperror = false;
 800b690:	4b0a      	ldr	r3, [pc, #40]	@ (800b6bc <BMP280_reset+0x38>)
 800b692:	2200      	movs	r2, #0
 800b694:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800b696:	1dfa      	adds	r2, r7, #7
 800b698:	2301      	movs	r3, #1
 800b69a:	2101      	movs	r1, #1
 800b69c:	20e0      	movs	r0, #224	@ 0xe0
 800b69e:	f7ff ff6b 	bl	800b578 <WriteMemRegister>
  Info("BMP280 has been reset");
 800b6a2:	4a07      	ldr	r2, [pc, #28]	@ (800b6c0 <BMP280_reset+0x3c>)
 800b6a4:	4b07      	ldr	r3, [pc, #28]	@ (800b6c4 <BMP280_reset+0x40>)
 800b6a6:	0019      	movs	r1, r3
 800b6a8:	2002      	movs	r0, #2
 800b6aa:	f008 fb91 	bl	8013dd0 <CreateLine>
  HAL_Delay(100);
 800b6ae:	2064      	movs	r0, #100	@ 0x64
 800b6b0:	f009 f910 	bl	80148d4 <HAL_Delay>
}
 800b6b4:	46c0      	nop			@ (mov r8, r8)
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	b002      	add	sp, #8
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	20000f29 	.word	0x20000f29
 800b6c0:	0802c1ec 	.word	0x0802c1ec
 800b6c4:	0802c204 	.word	0x0802c204

0800b6c8 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800b6c8:	b590      	push	{r4, r7, lr}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af02      	add	r7, sp, #8
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, (uint8_t *)&dig, sizeof(dig));
 800b6ce:	4a30      	ldr	r2, [pc, #192]	@ (800b790 <BMP280_get_calibration+0xc8>)
 800b6d0:	2318      	movs	r3, #24
 800b6d2:	2101      	movs	r1, #1
 800b6d4:	2088      	movs	r0, #136	@ 0x88
 800b6d6:	f7ff ff7f 	bl	800b5d8 <ReadMemRegister>
  Debug("BMP280 calibration data:");
 800b6da:	4a2e      	ldr	r2, [pc, #184]	@ (800b794 <BMP280_get_calibration+0xcc>)
 800b6dc:	4b2e      	ldr	r3, [pc, #184]	@ (800b798 <BMP280_get_calibration+0xd0>)
 800b6de:	0019      	movs	r1, r3
 800b6e0:	2003      	movs	r0, #3
 800b6e2:	f008 fb75 	bl	8013dd0 <CreateLine>
  char stc = 'T';
 800b6e6:	1dfb      	adds	r3, r7, #7
 800b6e8:	2254      	movs	r2, #84	@ 0x54
 800b6ea:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 1;
 800b6ec:	1dbb      	adds	r3, r7, #6
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b6f2:	1d7b      	adds	r3, r7, #5
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	e041      	b.n	800b77e <BMP280_get_calibration+0xb6>
    if ((x == 0) || (x == 3)) {
 800b6fa:	1d7b      	adds	r3, r7, #5
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <BMP280_get_calibration+0x42>
 800b702:	1d7b      	adds	r3, r7, #5
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	2b03      	cmp	r3, #3
 800b708:	d11d      	bne.n	800b746 <BMP280_get_calibration+0x7e>
      if (x==3) {
 800b70a:	1d7b      	adds	r3, r7, #5
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b03      	cmp	r3, #3
 800b710:	d105      	bne.n	800b71e <BMP280_get_calibration+0x56>
        idx = 1;
 800b712:	1dbb      	adds	r3, r7, #6
 800b714:	2201      	movs	r2, #1
 800b716:	701a      	strb	r2, [r3, #0]
        stc = 'P';
 800b718:	1dfb      	adds	r3, r7, #7
 800b71a:	2250      	movs	r2, #80	@ 0x50
 800b71c:	701a      	strb	r2, [r3, #0]
      }
      Debug("dig.%c%d: %d", stc, idx, (uint16_t)dig.calarray[x]);
 800b71e:	1dfb      	adds	r3, r7, #7
 800b720:	7818      	ldrb	r0, [r3, #0]
 800b722:	1dbb      	adds	r3, r7, #6
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	1d7a      	adds	r2, r7, #5
 800b728:	7811      	ldrb	r1, [r2, #0]
 800b72a:	4a19      	ldr	r2, [pc, #100]	@ (800b790 <BMP280_get_calibration+0xc8>)
 800b72c:	0049      	lsls	r1, r1, #1
 800b72e:	5e8a      	ldrsh	r2, [r1, r2]
 800b730:	b292      	uxth	r2, r2
 800b732:	0014      	movs	r4, r2
 800b734:	4a19      	ldr	r2, [pc, #100]	@ (800b79c <BMP280_get_calibration+0xd4>)
 800b736:	4918      	ldr	r1, [pc, #96]	@ (800b798 <BMP280_get_calibration+0xd0>)
 800b738:	9401      	str	r4, [sp, #4]
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	0003      	movs	r3, r0
 800b73e:	2003      	movs	r0, #3
 800b740:	f008 fb46 	bl	8013dd0 <CreateLine>
 800b744:	e011      	b.n	800b76a <BMP280_get_calibration+0xa2>
    }
    else {
    Debug("dig.%c%d: %d", stc, idx, dig.calarray[x]);
 800b746:	1dfb      	adds	r3, r7, #7
 800b748:	7818      	ldrb	r0, [r3, #0]
 800b74a:	1dbb      	adds	r3, r7, #6
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	1d7a      	adds	r2, r7, #5
 800b750:	7811      	ldrb	r1, [r2, #0]
 800b752:	4a0f      	ldr	r2, [pc, #60]	@ (800b790 <BMP280_get_calibration+0xc8>)
 800b754:	0049      	lsls	r1, r1, #1
 800b756:	5e8a      	ldrsh	r2, [r1, r2]
 800b758:	0014      	movs	r4, r2
 800b75a:	4a10      	ldr	r2, [pc, #64]	@ (800b79c <BMP280_get_calibration+0xd4>)
 800b75c:	490e      	ldr	r1, [pc, #56]	@ (800b798 <BMP280_get_calibration+0xd0>)
 800b75e:	9401      	str	r4, [sp, #4]
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	0003      	movs	r3, r0
 800b764:	2003      	movs	r0, #3
 800b766:	f008 fb33 	bl	8013dd0 <CreateLine>
    }
    idx++;
 800b76a:	1dbb      	adds	r3, r7, #6
 800b76c:	781a      	ldrb	r2, [r3, #0]
 800b76e:	1dbb      	adds	r3, r7, #6
 800b770:	3201      	adds	r2, #1
 800b772:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b774:	1d7b      	adds	r3, r7, #5
 800b776:	781a      	ldrb	r2, [r3, #0]
 800b778:	1d7b      	adds	r3, r7, #5
 800b77a:	3201      	adds	r2, #1
 800b77c:	701a      	strb	r2, [r3, #0]
 800b77e:	1d7b      	adds	r3, r7, #5
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b0b      	cmp	r3, #11
 800b784:	d9b9      	bls.n	800b6fa <BMP280_get_calibration+0x32>
  }
}
 800b786:	46c0      	nop			@ (mov r8, r8)
 800b788:	46c0      	nop			@ (mov r8, r8)
 800b78a:	46bd      	mov	sp, r7
 800b78c:	b003      	add	sp, #12
 800b78e:	bd90      	pop	{r4, r7, pc}
 800b790:	20000f08 	.word	0x20000f08
 800b794:	0802c208 	.word	0x0802c208
 800b798:	0802c224 	.word	0x0802c224
 800b79c:	0802c228 	.word	0x0802c228

0800b7a0 <BMP280_set_config>:

void BMP280_set_config() {
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_16 | BMP280_SPI_OFF);
 800b7a6:	1dfb      	adds	r3, r7, #7
 800b7a8:	2290      	movs	r2, #144	@ 0x90
 800b7aa:	701a      	strb	r2, [r3, #0]
  if (!WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1)) {
 800b7ac:	1dfa      	adds	r2, r7, #7
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	20f5      	movs	r0, #245	@ 0xf5
 800b7b4:	f7ff fee0 	bl	800b578 <WriteMemRegister>
 800b7b8:	0003      	movs	r3, r0
 800b7ba:	001a      	movs	r2, r3
 800b7bc:	2301      	movs	r3, #1
 800b7be:	4053      	eors	r3, r2
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d005      	beq.n	800b7d2 <BMP280_set_config+0x32>
    Error("BMP280 writing to BMP280_REG_CONFIG");
 800b7c6:	4a0b      	ldr	r2, [pc, #44]	@ (800b7f4 <BMP280_set_config+0x54>)
 800b7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f8 <BMP280_set_config+0x58>)
 800b7ca:	0019      	movs	r1, r3
 800b7cc:	2001      	movs	r0, #1
 800b7ce:	f008 faff 	bl	8013dd0 <CreateLine>
  }
  ReadMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800b7d2:	1dfa      	adds	r2, r7, #7
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	20f5      	movs	r0, #245	@ 0xf5
 800b7da:	f7ff fefd 	bl	800b5d8 <ReadMemRegister>
  Debug("BMP280_REG_CONFIG: 0x%02X", data);
 800b7de:	1dfb      	adds	r3, r7, #7
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	4a06      	ldr	r2, [pc, #24]	@ (800b7fc <BMP280_set_config+0x5c>)
 800b7e4:	4906      	ldr	r1, [pc, #24]	@ (800b800 <BMP280_set_config+0x60>)
 800b7e6:	2003      	movs	r0, #3
 800b7e8:	f008 faf2 	bl	8013dd0 <CreateLine>
}
 800b7ec:	46c0      	nop			@ (mov r8, r8)
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	b002      	add	sp, #8
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	0802c238 	.word	0x0802c238
 800b7f8:	0802c25c 	.word	0x0802c25c
 800b7fc:	0802c260 	.word	0x0802c260
 800b800:	0802c224 	.word	0x0802c224

0800b804 <BMP280_DeviceConnected>:

 bool BMP280_DeviceConnected() {
 800b804:	b590      	push	{r4, r7, lr}
 800b806:	b085      	sub	sp, #20
 800b808:	af02      	add	r7, sp, #8
   bool rslt = false;
 800b80a:	1dfb      	adds	r3, r7, #7
 800b80c:	2200      	movs	r2, #0
 800b80e:	701a      	strb	r2, [r3, #0]
    uint8_t bmpData;
    // Read the chip-id of bmp280 sensor
    bmp280I2Caddr = BMP280_ADDRESS;
 800b810:	4b28      	ldr	r3, [pc, #160]	@ (800b8b4 <BMP280_DeviceConnected+0xb0>)
 800b812:	2276      	movs	r2, #118	@ 0x76
 800b814:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b816:	1dfc      	adds	r4, r7, #7
 800b818:	1dba      	adds	r2, r7, #6
 800b81a:	2301      	movs	r3, #1
 800b81c:	2101      	movs	r1, #1
 800b81e:	20d0      	movs	r0, #208	@ 0xd0
 800b820:	f7ff feda 	bl	800b5d8 <ReadMemRegister>
 800b824:	0003      	movs	r3, r0
 800b826:	7023      	strb	r3, [r4, #0]
    if (bmpData != BMP280_CHIP_ID) {
 800b828:	1dbb      	adds	r3, r7, #6
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b58      	cmp	r3, #88	@ 0x58
 800b82e:	d00e      	beq.n	800b84e <BMP280_DeviceConnected+0x4a>
      bmp280I2Caddr++;
 800b830:	4b20      	ldr	r3, [pc, #128]	@ (800b8b4 <BMP280_DeviceConnected+0xb0>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	3301      	adds	r3, #1
 800b836:	b2da      	uxtb	r2, r3
 800b838:	4b1e      	ldr	r3, [pc, #120]	@ (800b8b4 <BMP280_DeviceConnected+0xb0>)
 800b83a:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b83c:	1dfc      	adds	r4, r7, #7
 800b83e:	1dba      	adds	r2, r7, #6
 800b840:	2301      	movs	r3, #1
 800b842:	2101      	movs	r1, #1
 800b844:	20d0      	movs	r0, #208	@ 0xd0
 800b846:	f7ff fec7 	bl	800b5d8 <ReadMemRegister>
 800b84a:	0003      	movs	r3, r0
 800b84c:	7023      	strb	r3, [r4, #0]
    }
    if (rslt && (bmpData == BMP280_CHIP_ID)) {
 800b84e:	1dfb      	adds	r3, r7, #7
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d01b      	beq.n	800b88e <BMP280_DeviceConnected+0x8a>
 800b856:	1dbb      	adds	r3, r7, #6
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b58      	cmp	r3, #88	@ 0x58
 800b85c:	d117      	bne.n	800b88e <BMP280_DeviceConnected+0x8a>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800b85e:	1dbb      	adds	r3, r7, #6
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	0018      	movs	r0, r3
 800b864:	4b13      	ldr	r3, [pc, #76]	@ (800b8b4 <BMP280_DeviceConnected+0xb0>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	4a13      	ldr	r2, [pc, #76]	@ (800b8b8 <BMP280_DeviceConnected+0xb4>)
 800b86a:	4914      	ldr	r1, [pc, #80]	@ (800b8bc <BMP280_DeviceConnected+0xb8>)
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	0003      	movs	r3, r0
 800b870:	2002      	movs	r0, #2
 800b872:	f008 faad 	bl	8013dd0 <CreateLine>
      BMP280_reset(); // get an initial state
 800b876:	f7ff ff05 	bl	800b684 <BMP280_reset>
      HAL_Delay(3);
 800b87a:	2003      	movs	r0, #3
 800b87c:	f009 f82a 	bl	80148d4 <HAL_Delay>
      BMP280_get_calibration();
 800b880:	f7ff ff22 	bl	800b6c8 <BMP280_get_calibration>
      BMP280_set_config();
 800b884:	f7ff ff8c 	bl	800b7a0 <BMP280_set_config>
      BMP280_set_mode();
 800b888:	f000 f900 	bl	800ba8c <BMP280_set_mode>
 800b88c:	e008      	b.n	800b8a0 <BMP280_DeviceConnected+0x9c>
    }
    else {
      bmp280I2Caddr = 0;
 800b88e:	4b09      	ldr	r3, [pc, #36]	@ (800b8b4 <BMP280_DeviceConnected+0xb0>)
 800b890:	2200      	movs	r2, #0
 800b892:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800b894:	4a0a      	ldr	r2, [pc, #40]	@ (800b8c0 <BMP280_DeviceConnected+0xbc>)
 800b896:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c4 <BMP280_DeviceConnected+0xc0>)
 800b898:	0019      	movs	r1, r3
 800b89a:	2001      	movs	r0, #1
 800b89c:	f008 fa98 	bl	8013dd0 <CreateLine>
    }
    return bmp280I2Caddr;
 800b8a0:	4b04      	ldr	r3, [pc, #16]	@ (800b8b4 <BMP280_DeviceConnected+0xb0>)
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	1e5a      	subs	r2, r3, #1
 800b8a6:	4193      	sbcs	r3, r2
 800b8a8:	b2db      	uxtb	r3, r3
}
 800b8aa:	0018      	movs	r0, r3
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	b003      	add	sp, #12
 800b8b0:	bd90      	pop	{r4, r7, pc}
 800b8b2:	46c0      	nop			@ (mov r8, r8)
 800b8b4:	200000a0 	.word	0x200000a0
 800b8b8:	0802c27c 	.word	0x0802c27c
 800b8bc:	0802c204 	.word	0x0802c204
 800b8c0:	0802c2b4 	.word	0x0802c2b4
 800b8c4:	0802c25c 	.word	0x0802c25c

0800b8c8 <BMP280_get_measurement_values>:

static bool BMP280_get_measurement_values() {
 800b8c8:	b5b0      	push	{r4, r5, r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af04      	add	r7, sp, #16
  int8_t rslt = 1;
 800b8ce:	1dfb      	adds	r3, r7, #7
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	701a      	strb	r2, [r3, #0]
  uint8_t bmpData[6];
  HAL_Delay(9);
 800b8d4:	2009      	movs	r0, #9
 800b8d6:	f008 fffd 	bl	80148d4 <HAL_Delay>
  BMP280TimeStamp = HAL_GetTick() + 1500;
 800b8da:	f008 fff1 	bl	80148c0 <HAL_GetTick>
 800b8de:	0003      	movs	r3, r0
 800b8e0:	4a4e      	ldr	r2, [pc, #312]	@ (800ba1c <BMP280_get_measurement_values+0x154>)
 800b8e2:	189a      	adds	r2, r3, r2
 800b8e4:	4b4e      	ldr	r3, [pc, #312]	@ (800ba20 <BMP280_get_measurement_values+0x158>)
 800b8e6:	601a      	str	r2, [r3, #0]
  do {
    HAL_Delay(10);
 800b8e8:	200a      	movs	r0, #10
 800b8ea:	f008 fff3 	bl	80148d4 <HAL_Delay>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData[0], 1);
 800b8ee:	003a      	movs	r2, r7
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	2101      	movs	r1, #1
 800b8f4:	20f3      	movs	r0, #243	@ 0xf3
 800b8f6:	f7ff fe6f 	bl	800b5d8 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)) {
 800b8fa:	4b49      	ldr	r3, [pc, #292]	@ (800ba20 <BMP280_get_measurement_values+0x158>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	0018      	movs	r0, r3
 800b900:	f008 fa10 	bl	8013d24 <TimestampIsReached>
 800b904:	1e03      	subs	r3, r0, #0
 800b906:	d007      	beq.n	800b918 <BMP280_get_measurement_values+0x50>
      Error("BMP280 timeout while waiting for ready.");
 800b908:	4a46      	ldr	r2, [pc, #280]	@ (800ba24 <BMP280_get_measurement_values+0x15c>)
 800b90a:	4b47      	ldr	r3, [pc, #284]	@ (800ba28 <BMP280_get_measurement_values+0x160>)
 800b90c:	0019      	movs	r1, r3
 800b90e:	2001      	movs	r0, #1
 800b910:	f008 fa5e 	bl	8013dd0 <CreateLine>
      return false;
 800b914:	2300      	movs	r3, #0
 800b916:	e07c      	b.n	800ba12 <BMP280_get_measurement_values+0x14a>
    }
    HAL_Delay(10);
 800b918:	200a      	movs	r0, #10
 800b91a:	f008 ffdb 	bl	80148d4 <HAL_Delay>
  } while (((bmpData[0] & BMP280_NVM_RDY) == BMP280_NVM_RDY) || ((bmpData[0] & BMP280_MEAS_RDY) == BMP280_MEAS_RDY));
 800b91e:	003b      	movs	r3, r7
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	001a      	movs	r2, r3
 800b924:	2301      	movs	r3, #1
 800b926:	4013      	ands	r3, r2
 800b928:	d1de      	bne.n	800b8e8 <BMP280_get_measurement_values+0x20>
 800b92a:	003b      	movs	r3, r7
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	001a      	movs	r2, r3
 800b930:	2308      	movs	r3, #8
 800b932:	4013      	ands	r3, r2
 800b934:	d1d8      	bne.n	800b8e8 <BMP280_get_measurement_values+0x20>
  rslt = ReadMemRegister(BMP280_REG_PRESS_MSB, 1, &bmpData[0], 6);
 800b936:	003a      	movs	r2, r7
 800b938:	2306      	movs	r3, #6
 800b93a:	2101      	movs	r1, #1
 800b93c:	20f7      	movs	r0, #247	@ 0xf7
 800b93e:	f7ff fe4b 	bl	800b5d8 <ReadMemRegister>
 800b942:	0003      	movs	r3, r0
 800b944:	001a      	movs	r2, r3
 800b946:	1dfb      	adds	r3, r7, #7
 800b948:	701a      	strb	r2, [r3, #0]
  raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800b94a:	003b      	movs	r3, r7
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	031a      	lsls	r2, r3, #12
 800b950:	003b      	movs	r3, r7
 800b952:	785b      	ldrb	r3, [r3, #1]
 800b954:	011b      	lsls	r3, r3, #4
 800b956:	18d3      	adds	r3, r2, r3
 800b958:	003a      	movs	r2, r7
 800b95a:	7892      	ldrb	r2, [r2, #2]
 800b95c:	0912      	lsrs	r2, r2, #4
 800b95e:	b2d2      	uxtb	r2, r2
 800b960:	189b      	adds	r3, r3, r2
 800b962:	001a      	movs	r2, r3
 800b964:	4b31      	ldr	r3, [pc, #196]	@ (800ba2c <BMP280_get_measurement_values+0x164>)
 800b966:	601a      	str	r2, [r3, #0]
  if (bmpData[0] == 0x80) {
 800b968:	003b      	movs	r3, r7
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	2b80      	cmp	r3, #128	@ 0x80
 800b96e:	d11b      	bne.n	800b9a8 <BMP280_get_measurement_values+0xe0>
    Error("BMP280 Invalid read of barometric pressure.");
 800b970:	4a2f      	ldr	r2, [pc, #188]	@ (800ba30 <BMP280_get_measurement_values+0x168>)
 800b972:	4b2d      	ldr	r3, [pc, #180]	@ (800ba28 <BMP280_get_measurement_values+0x160>)
 800b974:	0019      	movs	r1, r3
 800b976:	2001      	movs	r0, #1
 800b978:	f008 fa2a 	bl	8013dd0 <CreateLine>
    Debug("Data[0]: 0x%02X, Data[1]: 0x%02X, Data[2]: 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800b97c:	003b      	movs	r3, r7
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	001d      	movs	r5, r3
 800b982:	003b      	movs	r3, r7
 800b984:	785b      	ldrb	r3, [r3, #1]
 800b986:	0018      	movs	r0, r3
 800b988:	003b      	movs	r3, r7
 800b98a:	789b      	ldrb	r3, [r3, #2]
 800b98c:	001c      	movs	r4, r3
 800b98e:	4b27      	ldr	r3, [pc, #156]	@ (800ba2c <BMP280_get_measurement_values+0x164>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a28      	ldr	r2, [pc, #160]	@ (800ba34 <BMP280_get_measurement_values+0x16c>)
 800b994:	4928      	ldr	r1, [pc, #160]	@ (800ba38 <BMP280_get_measurement_values+0x170>)
 800b996:	9302      	str	r3, [sp, #8]
 800b998:	9401      	str	r4, [sp, #4]
 800b99a:	9000      	str	r0, [sp, #0]
 800b99c:	002b      	movs	r3, r5
 800b99e:	2003      	movs	r0, #3
 800b9a0:	f008 fa16 	bl	8013dd0 <CreateLine>
    SetAllBlueLED();
 800b9a4:	f007 f92e 	bl	8012c04 <SetAllBlueLED>
  }
  raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800b9a8:	003b      	movs	r3, r7
 800b9aa:	78db      	ldrb	r3, [r3, #3]
 800b9ac:	031a      	lsls	r2, r3, #12
 800b9ae:	003b      	movs	r3, r7
 800b9b0:	791b      	ldrb	r3, [r3, #4]
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	18d3      	adds	r3, r2, r3
 800b9b6:	003a      	movs	r2, r7
 800b9b8:	7952      	ldrb	r2, [r2, #5]
 800b9ba:	0912      	lsrs	r2, r2, #4
 800b9bc:	b2d2      	uxtb	r2, r2
 800b9be:	189b      	adds	r3, r3, r2
 800b9c0:	001a      	movs	r2, r3
 800b9c2:	4b1e      	ldr	r3, [pc, #120]	@ (800ba3c <BMP280_get_measurement_values+0x174>)
 800b9c4:	601a      	str	r2, [r3, #0]
  if (bmpData[3] == 0x80) {
 800b9c6:	003b      	movs	r3, r7
 800b9c8:	78db      	ldrb	r3, [r3, #3]
 800b9ca:	2b80      	cmp	r3, #128	@ 0x80
 800b9cc:	d11b      	bne.n	800ba06 <BMP280_get_measurement_values+0x13e>
    Error("BMP280 Invalid read of temperature.");
 800b9ce:	4a1c      	ldr	r2, [pc, #112]	@ (800ba40 <BMP280_get_measurement_values+0x178>)
 800b9d0:	4b15      	ldr	r3, [pc, #84]	@ (800ba28 <BMP280_get_measurement_values+0x160>)
 800b9d2:	0019      	movs	r1, r3
 800b9d4:	2001      	movs	r0, #1
 800b9d6:	f008 f9fb 	bl	8013dd0 <CreateLine>
    Debug("Data[3]: 0x%02X, Data[4]: 0x%02X, Data[5]: 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800b9da:	003b      	movs	r3, r7
 800b9dc:	78db      	ldrb	r3, [r3, #3]
 800b9de:	001d      	movs	r5, r3
 800b9e0:	003b      	movs	r3, r7
 800b9e2:	791b      	ldrb	r3, [r3, #4]
 800b9e4:	0018      	movs	r0, r3
 800b9e6:	003b      	movs	r3, r7
 800b9e8:	795b      	ldrb	r3, [r3, #5]
 800b9ea:	001c      	movs	r4, r3
 800b9ec:	4b13      	ldr	r3, [pc, #76]	@ (800ba3c <BMP280_get_measurement_values+0x174>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a14      	ldr	r2, [pc, #80]	@ (800ba44 <BMP280_get_measurement_values+0x17c>)
 800b9f2:	4911      	ldr	r1, [pc, #68]	@ (800ba38 <BMP280_get_measurement_values+0x170>)
 800b9f4:	9302      	str	r3, [sp, #8]
 800b9f6:	9401      	str	r4, [sp, #4]
 800b9f8:	9000      	str	r0, [sp, #0]
 800b9fa:	002b      	movs	r3, r5
 800b9fc:	2003      	movs	r0, #3
 800b9fe:	f008 f9e7 	bl	8013dd0 <CreateLine>
    SetAllBlueLED();
 800ba02:	f007 f8ff 	bl	8012c04 <SetAllBlueLED>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800ba06:	1dfb      	adds	r3, r7, #7
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	b25b      	sxtb	r3, r3
 800ba0c:	1e5a      	subs	r2, r3, #1
 800ba0e:	4193      	sbcs	r3, r2
 800ba10:	b2db      	uxtb	r3, r3
}
 800ba12:	0018      	movs	r0, r3
 800ba14:	46bd      	mov	sp, r7
 800ba16:	b002      	add	sp, #8
 800ba18:	bdb0      	pop	{r4, r5, r7, pc}
 800ba1a:	46c0      	nop			@ (mov r8, r8)
 800ba1c:	000005dc 	.word	0x000005dc
 800ba20:	20000f24 	.word	0x20000f24
 800ba24:	0802c2c8 	.word	0x0802c2c8
 800ba28:	0802c25c 	.word	0x0802c25c
 800ba2c:	20000f30 	.word	0x20000f30
 800ba30:	0802c2f0 	.word	0x0802c2f0
 800ba34:	0802c31c 	.word	0x0802c31c
 800ba38:	0802c224 	.word	0x0802c224
 800ba3c:	20000f2c 	.word	0x20000f2c
 800ba40:	0802c35c 	.word	0x0802c35c
 800ba44:	0802c380 	.word	0x0802c380

0800ba48 <BMP280_get_mode>:

static uint8_t BMP280_get_mode() {
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800ba4e:	1dba      	adds	r2, r7, #6
 800ba50:	2301      	movs	r3, #1
 800ba52:	2101      	movs	r1, #1
 800ba54:	20f4      	movs	r0, #244	@ 0xf4
 800ba56:	f7ff fdbf 	bl	800b5d8 <ReadMemRegister>
 800ba5a:	0003      	movs	r3, r0
 800ba5c:	001a      	movs	r2, r3
 800ba5e:	1dfb      	adds	r3, r7, #7
 800ba60:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800ba62:	1dbb      	adds	r3, r7, #6
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	2203      	movs	r2, #3
 800ba68:	4013      	ands	r3, r2
 800ba6a:	b2da      	uxtb	r2, r3
 800ba6c:	1dbb      	adds	r3, r7, #6
 800ba6e:	701a      	strb	r2, [r3, #0]
  if (rslt == 0) {
 800ba70:	1dfb      	adds	r3, r7, #7
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	b25b      	sxtb	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d102      	bne.n	800ba80 <BMP280_get_mode+0x38>
    bmpData = 255;
 800ba7a:	1dbb      	adds	r3, r7, #6
 800ba7c:	22ff      	movs	r2, #255	@ 0xff
 800ba7e:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800ba80:	1dbb      	adds	r3, r7, #6
 800ba82:	781b      	ldrb	r3, [r3, #0]
}
 800ba84:	0018      	movs	r0, r3
 800ba86:	46bd      	mov	sp, r7
 800ba88:	b002      	add	sp, #8
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <BMP280_set_mode>:

static bool BMP280_set_mode() {
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_16 | mode);
 800ba92:	4b1a      	ldr	r3, [pc, #104]	@ (800bafc <BMP280_set_mode+0x70>)
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2254      	movs	r2, #84	@ 0x54
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	1dfb      	adds	r3, r7, #7
 800ba9e:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800baa0:	1dfa      	adds	r2, r7, #7
 800baa2:	2301      	movs	r3, #1
 800baa4:	2101      	movs	r1, #1
 800baa6:	20f4      	movs	r0, #244	@ 0xf4
 800baa8:	f7ff fd66 	bl	800b578 <WriteMemRegister>
  HAL_Delay(10);
 800baac:	200a      	movs	r0, #10
 800baae:	f008 ff11 	bl	80148d4 <HAL_Delay>
  data = BMP280_get_mode();
 800bab2:	f7ff ffc9 	bl	800ba48 <BMP280_get_mode>
 800bab6:	0003      	movs	r3, r0
 800bab8:	001a      	movs	r2, r3
 800baba:	1dfb      	adds	r3, r7, #7
 800babc:	701a      	strb	r2, [r3, #0]
  data &= BMP280_NORMAL_MODE;
 800babe:	1dfb      	adds	r3, r7, #7
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2203      	movs	r2, #3
 800bac4:	4013      	ands	r3, r2
 800bac6:	b2da      	uxtb	r2, r3
 800bac8:	1dfb      	adds	r3, r7, #7
 800baca:	701a      	strb	r2, [r3, #0]
  Debug("BMP280 Operation mode: %s", data==0?"sleep":data==3?"normal":"forced");
 800bacc:	1dfb      	adds	r3, r7, #7
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d007      	beq.n	800bae4 <BMP280_set_mode+0x58>
 800bad4:	1dfb      	adds	r3, r7, #7
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d101      	bne.n	800bae0 <BMP280_set_mode+0x54>
 800badc:	4b08      	ldr	r3, [pc, #32]	@ (800bb00 <BMP280_set_mode+0x74>)
 800bade:	e002      	b.n	800bae6 <BMP280_set_mode+0x5a>
 800bae0:	4b08      	ldr	r3, [pc, #32]	@ (800bb04 <BMP280_set_mode+0x78>)
 800bae2:	e000      	b.n	800bae6 <BMP280_set_mode+0x5a>
 800bae4:	4b08      	ldr	r3, [pc, #32]	@ (800bb08 <BMP280_set_mode+0x7c>)
 800bae6:	4a09      	ldr	r2, [pc, #36]	@ (800bb0c <BMP280_set_mode+0x80>)
 800bae8:	4909      	ldr	r1, [pc, #36]	@ (800bb10 <BMP280_set_mode+0x84>)
 800baea:	2003      	movs	r0, #3
 800baec:	f008 f970 	bl	8013dd0 <CreateLine>
  return true;
 800baf0:	2301      	movs	r3, #1
}
 800baf2:	0018      	movs	r0, r3
 800baf4:	46bd      	mov	sp, r7
 800baf6:	b002      	add	sp, #8
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	46c0      	nop			@ (mov r8, r8)
 800bafc:	200000a2 	.word	0x200000a2
 800bb00:	0802c3c0 	.word	0x0802c3c0
 800bb04:	0802c3c8 	.word	0x0802c3c8
 800bb08:	0802c3d0 	.word	0x0802c3d0
 800bb0c:	0802c3d8 	.word	0x0802c3d8
 800bb10:	0802c224 	.word	0x0802c224

0800bb14 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade
// copied from datasheet
static float BMP280_calc_temperature() {
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800bb1a:	4b1e      	ldr	r3, [pc, #120]	@ (800bb94 <BMP280_calc_temperature+0x80>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	10da      	asrs	r2, r3, #3
 800bb24:	4b1c      	ldr	r3, [pc, #112]	@ (800bb98 <BMP280_calc_temperature+0x84>)
 800bb26:	881b      	ldrh	r3, [r3, #0]
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	4a1a      	ldr	r2, [pc, #104]	@ (800bb98 <BMP280_calc_temperature+0x84>)
 800bb2e:	2102      	movs	r1, #2
 800bb30:	5e52      	ldrsh	r2, [r2, r1]
 800bb32:	4353      	muls	r3, r2
 800bb34:	12db      	asrs	r3, r3, #11
 800bb36:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	111b      	asrs	r3, r3, #4
 800bb3c:	4a16      	ldr	r2, [pc, #88]	@ (800bb98 <BMP280_calc_temperature+0x84>)
 800bb3e:	8812      	ldrh	r2, [r2, #0]
 800bb40:	1a9b      	subs	r3, r3, r2
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	1112      	asrs	r2, r2, #4
 800bb46:	4914      	ldr	r1, [pc, #80]	@ (800bb98 <BMP280_calc_temperature+0x84>)
 800bb48:	8809      	ldrh	r1, [r1, #0]
 800bb4a:	1a52      	subs	r2, r2, r1
 800bb4c:	4353      	muls	r3, r2
 800bb4e:	131b      	asrs	r3, r3, #12
 800bb50:	4a11      	ldr	r2, [pc, #68]	@ (800bb98 <BMP280_calc_temperature+0x84>)
 800bb52:	2104      	movs	r1, #4
 800bb54:	5e52      	ldrsh	r2, [r2, r1]
 800bb56:	4353      	muls	r3, r2
 800bb58:	139b      	asrs	r3, r3, #14
 800bb5a:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800bb5c:	693a      	ldr	r2, [r7, #16]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	18d2      	adds	r2, r2, r3
 800bb62:	4b0e      	ldr	r3, [pc, #56]	@ (800bb9c <BMP280_calc_temperature+0x88>)
 800bb64:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800bb66:	4b0d      	ldr	r3, [pc, #52]	@ (800bb9c <BMP280_calc_temperature+0x88>)
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	0013      	movs	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	189b      	adds	r3, r3, r2
 800bb70:	3380      	adds	r3, #128	@ 0x80
 800bb72:	121b      	asrs	r3, r3, #8
 800bb74:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800bb76:	68b8      	ldr	r0, [r7, #8]
 800bb78:	f7f5 fe56 	bl	8001828 <__aeabi_i2f>
 800bb7c:	1c03      	adds	r3, r0, #0
 800bb7e:	4908      	ldr	r1, [pc, #32]	@ (800bba0 <BMP280_calc_temperature+0x8c>)
 800bb80:	1c18      	adds	r0, r3, #0
 800bb82:	f7f5 f88f 	bl	8000ca4 <__aeabi_fdiv>
 800bb86:	1c03      	adds	r3, r0, #0
 800bb88:	607b      	str	r3, [r7, #4]
  return airTemp;
 800bb8a:	687b      	ldr	r3, [r7, #4]
}
 800bb8c:	1c18      	adds	r0, r3, #0
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	b006      	add	sp, #24
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	20000f2c 	.word	0x20000f2c
 800bb98:	20000f08 	.word	0x20000f08
 800bb9c:	20000f20 	.word	0x20000f20
 800bba0:	42c80000 	.word	0x42c80000

0800bba4 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800bbaa:	4b4e      	ldr	r3, [pc, #312]	@ (800bce4 <BMP280_calc_pressure+0x140>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800bbb0:	4b4d      	ldr	r3, [pc, #308]	@ (800bce8 <BMP280_calc_pressure+0x144>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	105b      	asrs	r3, r3, #1
 800bbb6:	4a4d      	ldr	r2, [pc, #308]	@ (800bcec <BMP280_calc_pressure+0x148>)
 800bbb8:	4694      	mov	ip, r2
 800bbba:	4463      	add	r3, ip
 800bbbc:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	109b      	asrs	r3, r3, #2
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	1092      	asrs	r2, r2, #2
 800bbc6:	4353      	muls	r3, r2
 800bbc8:	12db      	asrs	r3, r3, #11
 800bbca:	4a49      	ldr	r2, [pc, #292]	@ (800bcf0 <BMP280_calc_pressure+0x14c>)
 800bbcc:	2110      	movs	r1, #16
 800bbce:	5e52      	ldrsh	r2, [r2, r1]
 800bbd0:	4353      	muls	r3, r2
 800bbd2:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800bbd4:	4b46      	ldr	r3, [pc, #280]	@ (800bcf0 <BMP280_calc_pressure+0x14c>)
 800bbd6:	220e      	movs	r2, #14
 800bbd8:	5e9b      	ldrsh	r3, [r3, r2]
 800bbda:	001a      	movs	r2, r3
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	4353      	muls	r3, r2
 800bbe0:	005b      	lsls	r3, r3, #1
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	18d3      	adds	r3, r2, r3
 800bbe6:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	109a      	asrs	r2, r3, #2
 800bbec:	4b40      	ldr	r3, [pc, #256]	@ (800bcf0 <BMP280_calc_pressure+0x14c>)
 800bbee:	210c      	movs	r1, #12
 800bbf0:	5e5b      	ldrsh	r3, [r3, r1]
 800bbf2:	041b      	lsls	r3, r3, #16
 800bbf4:	18d3      	adds	r3, r2, r3
 800bbf6:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800bbf8:	4b3d      	ldr	r3, [pc, #244]	@ (800bcf0 <BMP280_calc_pressure+0x14c>)
 800bbfa:	220a      	movs	r2, #10
 800bbfc:	5e9b      	ldrsh	r3, [r3, r2]
 800bbfe:	0019      	movs	r1, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	109b      	asrs	r3, r3, #2
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	1092      	asrs	r2, r2, #2
 800bc08:	4353      	muls	r3, r2
 800bc0a:	135b      	asrs	r3, r3, #13
 800bc0c:	434b      	muls	r3, r1
 800bc0e:	10da      	asrs	r2, r3, #3
 800bc10:	4b37      	ldr	r3, [pc, #220]	@ (800bcf0 <BMP280_calc_pressure+0x14c>)
 800bc12:	2108      	movs	r1, #8
 800bc14:	5e5b      	ldrsh	r3, [r3, r1]
 800bc16:	0019      	movs	r1, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	434b      	muls	r3, r1
 800bc1c:	105b      	asrs	r3, r3, #1
 800bc1e:	18d3      	adds	r3, r2, r3
 800bc20:	149b      	asrs	r3, r3, #18
 800bc22:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2280      	movs	r2, #128	@ 0x80
 800bc28:	0212      	lsls	r2, r2, #8
 800bc2a:	4694      	mov	ip, r2
 800bc2c:	4463      	add	r3, ip
 800bc2e:	4a30      	ldr	r2, [pc, #192]	@ (800bcf0 <BMP280_calc_pressure+0x14c>)
 800bc30:	88d2      	ldrh	r2, [r2, #6]
 800bc32:	4353      	muls	r3, r2
 800bc34:	13db      	asrs	r3, r3, #15
 800bc36:	60fb      	str	r3, [r7, #12]

  // Avoid exception caused by division with zero
  if (var1 == 0) {
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <BMP280_calc_pressure+0x9e>
    return 0;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e04b      	b.n	800bcda <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	2280      	movs	r2, #128	@ 0x80
 800bc46:	0352      	lsls	r2, r2, #13
 800bc48:	1ad2      	subs	r2, r2, r3
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	131b      	asrs	r3, r3, #12
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	001a      	movs	r2, r3
 800bc52:	4b28      	ldr	r3, [pc, #160]	@ (800bcf4 <BMP280_calc_pressure+0x150>)
 800bc54:	4353      	muls	r3, r2
 800bc56:	617b      	str	r3, [r7, #20]

    // Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1
  if (p < 0x80000000)
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	db09      	blt.n	800bc72 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	0011      	movs	r1, r2
 800bc66:	0018      	movs	r0, r3
 800bc68:	f7f4 fa9c 	bl	80001a4 <__udivsi3>
 800bc6c:	0003      	movs	r3, r0
 800bc6e:	617b      	str	r3, [r7, #20]
 800bc70:	e007      	b.n	800bc82 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	0019      	movs	r1, r3
 800bc76:	6978      	ldr	r0, [r7, #20]
 800bc78:	f7f4 fa94 	bl	80001a4 <__udivsi3>
 800bc7c:	0003      	movs	r3, r0
 800bc7e:	005b      	lsls	r3, r3, #1
 800bc80:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800bc82:	4b1b      	ldr	r3, [pc, #108]	@ (800bcf0 <BMP280_calc_pressure+0x14c>)
 800bc84:	2216      	movs	r2, #22
 800bc86:	5e9b      	ldrsh	r3, [r3, r2]
 800bc88:	0019      	movs	r1, r3
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	08db      	lsrs	r3, r3, #3
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	08d2      	lsrs	r2, r2, #3
 800bc92:	4353      	muls	r3, r2
 800bc94:	0b5b      	lsrs	r3, r3, #13
 800bc96:	434b      	muls	r3, r1
 800bc98:	131b      	asrs	r3, r3, #12
 800bc9a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	089b      	lsrs	r3, r3, #2
 800bca0:	001a      	movs	r2, r3
 800bca2:	4b13      	ldr	r3, [pc, #76]	@ (800bcf0 <BMP280_calc_pressure+0x14c>)
 800bca4:	2114      	movs	r1, #20
 800bca6:	5e5b      	ldrsh	r3, [r3, r1]
 800bca8:	4353      	muls	r3, r2
 800bcaa:	135b      	asrs	r3, r3, #13
 800bcac:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	18d3      	adds	r3, r2, r3
 800bcb4:	4a0e      	ldr	r2, [pc, #56]	@ (800bcf0 <BMP280_calc_pressure+0x14c>)
 800bcb6:	2112      	movs	r1, #18
 800bcb8:	5e52      	ldrsh	r2, [r2, r1]
 800bcba:	189b      	adds	r3, r3, r2
 800bcbc:	111a      	asrs	r2, r3, #4
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	18d3      	adds	r3, r2, r3
 800bcc2:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800bcc4:	6978      	ldr	r0, [r7, #20]
 800bcc6:	f7f5 fdff 	bl	80018c8 <__aeabi_ui2f>
 800bcca:	1c03      	adds	r3, r0, #0
 800bccc:	490a      	ldr	r1, [pc, #40]	@ (800bcf8 <BMP280_calc_pressure+0x154>)
 800bcce:	1c18      	adds	r0, r3, #0
 800bcd0:	f7f4 ffe8 	bl	8000ca4 <__aeabi_fdiv>
 800bcd4:	1c03      	adds	r3, r0, #0
 800bcd6:	607b      	str	r3, [r7, #4]
  return airhPa;
 800bcd8:	687b      	ldr	r3, [r7, #4]
}
 800bcda:	1c18      	adds	r0, r3, #0
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	b006      	add	sp, #24
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	46c0      	nop			@ (mov r8, r8)
 800bce4:	20000f30 	.word	0x20000f30
 800bce8:	20000f20 	.word	0x20000f20
 800bcec:	ffff0600 	.word	0xffff0600
 800bcf0:	20000f08 	.word	0x20000f08
 800bcf4:	00000c35 	.word	0x00000c35
 800bcf8:	42c80000 	.word	0x42c80000

0800bcfc <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800bcfc:	b5b0      	push	{r4, r5, r7, lr}
 800bcfe:	b088      	sub	sp, #32
 800bd00:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800bd02:	4b8e      	ldr	r3, [pc, #568]	@ (800bf3c <BMP_Upkeep+0x240>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	0018      	movs	r0, r3
 800bd08:	f008 f80c 	bl	8013d24 <TimestampIsReached>
 800bd0c:	0003      	movs	r3, r0
 800bd0e:	001a      	movs	r2, r3
 800bd10:	2301      	movs	r3, #1
 800bd12:	4053      	eors	r3, r2
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <BMP_Upkeep+0x24>
    return BMPState;
 800bd1a:	4b89      	ldr	r3, [pc, #548]	@ (800bf40 <BMP_Upkeep+0x244>)
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	e109      	b.n	800bf34 <BMP_Upkeep+0x238>
  }
  switch(BMPState) {
 800bd20:	4b87      	ldr	r3, [pc, #540]	@ (800bf40 <BMP_Upkeep+0x244>)
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	2b03      	cmp	r3, #3
 800bd26:	d008      	beq.n	800bd3a <BMP_Upkeep+0x3e>
 800bd28:	dd00      	ble.n	800bd2c <BMP_Upkeep+0x30>
 800bd2a:	e0f5      	b.n	800bf18 <BMP_Upkeep+0x21c>
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d100      	bne.n	800bd32 <BMP_Upkeep+0x36>
 800bd30:	e095      	b.n	800be5e <BMP_Upkeep+0x162>
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d100      	bne.n	800bd38 <BMP_Upkeep+0x3c>
 800bd36:	e0eb      	b.n	800bf10 <BMP_Upkeep+0x214>
 800bd38:	e0ee      	b.n	800bf18 <BMP_Upkeep+0x21c>
  case BMP_MODE_SELECT:
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800bd3a:	f002 f833 	bl	800dda4 <getSensorLock>
 800bd3e:	1e03      	subs	r3, r0, #0
 800bd40:	d005      	beq.n	800bd4e <BMP_Upkeep+0x52>
 800bd42:	f002 f82f 	bl	800dda4 <getSensorLock>
 800bd46:	0003      	movs	r3, r0
 800bd48:	2b03      	cmp	r3, #3
 800bd4a:	d000      	beq.n	800bd4e <BMP_Upkeep+0x52>
 800bd4c:	e07f      	b.n	800be4e <BMP_Upkeep+0x152>
      if (getSensorLock() == FREE) {
 800bd4e:	f002 f829 	bl	800dda4 <getSensorLock>
 800bd52:	1e03      	subs	r3, r0, #0
 800bd54:	d102      	bne.n	800bd5c <BMP_Upkeep+0x60>
        setSensorLock(BMP280);
 800bd56:	2003      	movs	r0, #3
 800bd58:	f002 f810 	bl	800dd7c <setSensorLock>
      }
      bmperror = false;
 800bd5c:	4b79      	ldr	r3, [pc, #484]	@ (800bf44 <BMP_Upkeep+0x248>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	701a      	strb	r2, [r3, #0]
      bool changed = false;
 800bd62:	240f      	movs	r4, #15
 800bd64:	193b      	adds	r3, r7, r4
 800bd66:	2200      	movs	r2, #0
 800bd68:	701a      	strb	r2, [r3, #0]
      mode = BMP280_get_mode();
 800bd6a:	f7ff fe6d 	bl	800ba48 <BMP280_get_mode>
 800bd6e:	0003      	movs	r3, r0
 800bd70:	001a      	movs	r2, r3
 800bd72:	4b75      	ldr	r3, [pc, #468]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bd74:	701a      	strb	r2, [r3, #0]
      mode &= BMP280_NORMAL_MODE;
 800bd76:	4b74      	ldr	r3, [pc, #464]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	2203      	movs	r2, #3
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	4b71      	ldr	r3, [pc, #452]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bd82:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bd84:	f7fd feea 	bl	8009b5c <Check_USB_PowerOn>
 800bd88:	1e03      	subs	r3, r0, #0
 800bd8a:	d010      	beq.n	800bdae <BMP_Upkeep+0xb2>
        if (mode != BMP280_NORMAL_MODE) {
 800bd8c:	4b6e      	ldr	r3, [pc, #440]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d02d      	beq.n	800bdf0 <BMP_Upkeep+0xf4>
          mode =BMP280_NORMAL_MODE;
 800bd94:	4b6c      	ldr	r3, [pc, #432]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bd96:	2203      	movs	r2, #3
 800bd98:	701a      	strb	r2, [r3, #0]
          changed = true;
 800bd9a:	193b      	adds	r3, r7, r4
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	701a      	strb	r2, [r3, #0]
          Info("BMP280 modus changed to normal");
 800bda0:	4a6a      	ldr	r2, [pc, #424]	@ (800bf4c <BMP_Upkeep+0x250>)
 800bda2:	4b6b      	ldr	r3, [pc, #428]	@ (800bf50 <BMP_Upkeep+0x254>)
 800bda4:	0019      	movs	r1, r3
 800bda6:	2002      	movs	r0, #2
 800bda8:	f008 f812 	bl	8013dd0 <CreateLine>
 800bdac:	e020      	b.n	800bdf0 <BMP_Upkeep+0xf4>
        }
      }
      else {
        if ((mode == BMP280_NORMAL_MODE) || (mode == BMP280_SLEEP_MODE) || (mode == 255)) {
 800bdae:	4b66      	ldr	r3, [pc, #408]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d007      	beq.n	800bdc6 <BMP_Upkeep+0xca>
 800bdb6:	4b64      	ldr	r3, [pc, #400]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <BMP_Upkeep+0xca>
 800bdbe:	4b62      	ldr	r3, [pc, #392]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	2bff      	cmp	r3, #255	@ 0xff
 800bdc4:	d114      	bne.n	800bdf0 <BMP_Upkeep+0xf4>
          changed = true;
 800bdc6:	230f      	movs	r3, #15
 800bdc8:	18fb      	adds	r3, r7, r3
 800bdca:	2201      	movs	r2, #1
 800bdcc:	701a      	strb	r2, [r3, #0]
          mode = BMP280_FORCED_MODE;
 800bdce:	4b5e      	ldr	r3, [pc, #376]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	701a      	strb	r2, [r3, #0]
          if ((mode == BMP280_NORMAL_MODE)|| (mode == 255)) {
 800bdd4:	4b5c      	ldr	r3, [pc, #368]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d003      	beq.n	800bde4 <BMP_Upkeep+0xe8>
 800bddc:	4b5a      	ldr	r3, [pc, #360]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2bff      	cmp	r3, #255	@ 0xff
 800bde2:	d105      	bne.n	800bdf0 <BMP_Upkeep+0xf4>
           Info("BMP280 modus changed to forced");
 800bde4:	4a5b      	ldr	r2, [pc, #364]	@ (800bf54 <BMP_Upkeep+0x258>)
 800bde6:	4b5a      	ldr	r3, [pc, #360]	@ (800bf50 <BMP_Upkeep+0x254>)
 800bde8:	0019      	movs	r1, r3
 800bdea:	2002      	movs	r0, #2
 800bdec:	f007 fff0 	bl	8013dd0 <CreateLine>
          }
        }
      }
      if (changed || (mode == BMP280_FORCED_MODE)) {
 800bdf0:	230f      	movs	r3, #15
 800bdf2:	18fb      	adds	r3, r7, r3
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d103      	bne.n	800be02 <BMP_Upkeep+0x106>
 800bdfa:	4b53      	ldr	r3, [pc, #332]	@ (800bf48 <BMP_Upkeep+0x24c>)
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d105      	bne.n	800be0e <BMP_Upkeep+0x112>
        BMP280_set_mode();
 800be02:	f7ff fe43 	bl	800ba8c <BMP280_set_mode>
        changed = false;
 800be06:	230f      	movs	r3, #15
 800be08:	18fb      	adds	r3, r7, r3
 800be0a:	2200      	movs	r2, #0
 800be0c:	701a      	strb	r2, [r3, #0]
      }
      if (BMP280_get_measurement_values()) {
 800be0e:	f7ff fd5b 	bl	800b8c8 <BMP280_get_measurement_values>
 800be12:	1e03      	subs	r3, r0, #0
 800be14:	d003      	beq.n	800be1e <BMP_Upkeep+0x122>
        BMPState = BMP_STATE_PROCESS_RESULTS;
 800be16:	4b4a      	ldr	r3, [pc, #296]	@ (800bf40 <BMP_Upkeep+0x244>)
 800be18:	2201      	movs	r2, #1
 800be1a:	701a      	strb	r2, [r3, #0]
 800be1c:	e012      	b.n	800be44 <BMP_Upkeep+0x148>
      }
      else {
        Error("BMP280 Error during reading measurement results array");
 800be1e:	4a4e      	ldr	r2, [pc, #312]	@ (800bf58 <BMP_Upkeep+0x25c>)
 800be20:	4b4e      	ldr	r3, [pc, #312]	@ (800bf5c <BMP_Upkeep+0x260>)
 800be22:	0019      	movs	r1, r3
 800be24:	2001      	movs	r0, #1
 800be26:	f007 ffd3 	bl	8013dd0 <CreateLine>
        bmperror = true;
 800be2a:	4b46      	ldr	r3, [pc, #280]	@ (800bf44 <BMP_Upkeep+0x248>)
 800be2c:	2201      	movs	r2, #1
 800be2e:	701a      	strb	r2, [r3, #0]
        BMP280TimeStamp = HAL_GetTick() + 5000;
 800be30:	f008 fd46 	bl	80148c0 <HAL_GetTick>
 800be34:	0003      	movs	r3, r0
 800be36:	4a4a      	ldr	r2, [pc, #296]	@ (800bf60 <BMP_Upkeep+0x264>)
 800be38:	189a      	adds	r2, r3, r2
 800be3a:	4b40      	ldr	r3, [pc, #256]	@ (800bf3c <BMP_Upkeep+0x240>)
 800be3c:	601a      	str	r2, [r3, #0]
        BMPState = BMP_STATE_WAIT ;
 800be3e:	4b40      	ldr	r3, [pc, #256]	@ (800bf40 <BMP_Upkeep+0x244>)
 800be40:	2202      	movs	r2, #2
 800be42:	701a      	strb	r2, [r3, #0]
      }
      setSensorLock(FREE);
 800be44:	2000      	movs	r0, #0
 800be46:	f001 ff99 	bl	800dd7c <setSensorLock>
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800be4a:	46c0      	nop			@ (mov r8, r8)
//      uint8_t locktype = getSensorLock();
//      Debug("Lock is not from BMP280, but from %s",
//        locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
    }
    break;
 800be4c:	e070      	b.n	800bf30 <BMP_Upkeep+0x234>
      BMP280TimeStamp = HAL_GetTick() + 97;
 800be4e:	f008 fd37 	bl	80148c0 <HAL_GetTick>
 800be52:	0003      	movs	r3, r0
 800be54:	3361      	adds	r3, #97	@ 0x61
 800be56:	001a      	movs	r2, r3
 800be58:	4b38      	ldr	r3, [pc, #224]	@ (800bf3c <BMP_Upkeep+0x240>)
 800be5a:	601a      	str	r2, [r3, #0]
    break;
 800be5c:	e068      	b.n	800bf30 <BMP_Upkeep+0x234>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800be5e:	f7ff fe59 	bl	800bb14 <BMP280_calc_temperature>
 800be62:	1c03      	adds	r3, r0, #0
 800be64:	60bb      	str	r3, [r7, #8]
    airhpa = BMP280_calc_pressure();
 800be66:	f7ff fe9d 	bl	800bba4 <BMP280_calc_pressure>
 800be6a:	1c03      	adds	r3, r0, #0
 800be6c:	607b      	str	r3, [r7, #4]
    Info("BMP280 barometric value: %.2fhPa, airtemperature: %2.2fC", airhpa, airtemp);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7f7 fd10 	bl	8003894 <__aeabi_f2d>
 800be74:	0004      	movs	r4, r0
 800be76:	000d      	movs	r5, r1
 800be78:	68b8      	ldr	r0, [r7, #8]
 800be7a:	f7f7 fd0b 	bl	8003894 <__aeabi_f2d>
 800be7e:	0002      	movs	r2, r0
 800be80:	000b      	movs	r3, r1
 800be82:	4838      	ldr	r0, [pc, #224]	@ (800bf64 <BMP_Upkeep+0x268>)
 800be84:	4932      	ldr	r1, [pc, #200]	@ (800bf50 <BMP_Upkeep+0x254>)
 800be86:	9202      	str	r2, [sp, #8]
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	9400      	str	r4, [sp, #0]
 800be8c:	9501      	str	r5, [sp, #4]
 800be8e:	0002      	movs	r2, r0
 800be90:	2002      	movs	r0, #2
 800be92:	f007 ff9d 	bl	8013dd0 <CreateLine>

    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800be96:	4934      	ldr	r1, [pc, #208]	@ (800bf68 <BMP_Upkeep+0x26c>)
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f7f4 fb5d 	bl	8000558 <__aeabi_fcmpgt>
 800be9e:	1e03      	subs	r3, r0, #0
 800bea0:	d022      	beq.n	800bee8 <BMP_Upkeep+0x1ec>
 800bea2:	4932      	ldr	r1, [pc, #200]	@ (800bf6c <BMP_Upkeep+0x270>)
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f7f4 fb43 	bl	8000530 <__aeabi_fcmplt>
 800beaa:	1e03      	subs	r3, r0, #0
 800beac:	d01c      	beq.n	800bee8 <BMP_Upkeep+0x1ec>
      setBMP280(airtemp, airhpa);
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	1c11      	adds	r1, r2, #0
 800beb4:	1c18      	adds	r0, r3, #0
 800beb6:	f7f8 fe29 	bl	8004b0c <setBMP280>
      if (Check_USB_PowerOn()) {
 800beba:	f7fd fe4f 	bl	8009b5c <Check_USB_PowerOn>
 800bebe:	1e03      	subs	r3, r0, #0
 800bec0:	d00a      	beq.n	800bed8 <BMP_Upkeep+0x1dc>
        BMP280TimeStamp = HAL_GetTick() + 28000;
 800bec2:	f008 fcfd 	bl	80148c0 <HAL_GetTick>
 800bec6:	0003      	movs	r3, r0
 800bec8:	4a29      	ldr	r2, [pc, #164]	@ (800bf70 <BMP_Upkeep+0x274>)
 800beca:	189a      	adds	r2, r3, r2
 800becc:	4b1b      	ldr	r3, [pc, #108]	@ (800bf3c <BMP_Upkeep+0x240>)
 800bece:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800bed0:	4b28      	ldr	r3, [pc, #160]	@ (800bf74 <BMP_Upkeep+0x278>)
 800bed2:	2201      	movs	r2, #1
 800bed4:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bed6:	e017      	b.n	800bf08 <BMP_Upkeep+0x20c>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 10000;
 800bed8:	f008 fcf2 	bl	80148c0 <HAL_GetTick>
 800bedc:	0003      	movs	r3, r0
 800bede:	4a26      	ldr	r2, [pc, #152]	@ (800bf78 <BMP_Upkeep+0x27c>)
 800bee0:	189a      	adds	r2, r3, r2
 800bee2:	4b16      	ldr	r3, [pc, #88]	@ (800bf3c <BMP_Upkeep+0x240>)
 800bee4:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bee6:	e00f      	b.n	800bf08 <BMP_Upkeep+0x20c>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800bee8:	4a24      	ldr	r2, [pc, #144]	@ (800bf7c <BMP_Upkeep+0x280>)
 800beea:	4b1c      	ldr	r3, [pc, #112]	@ (800bf5c <BMP_Upkeep+0x260>)
 800beec:	0019      	movs	r1, r3
 800beee:	2001      	movs	r0, #1
 800bef0:	f007 ff6e 	bl	8013dd0 <CreateLine>
      bmperror = true;
 800bef4:	4b13      	ldr	r3, [pc, #76]	@ (800bf44 <BMP_Upkeep+0x248>)
 800bef6:	2201      	movs	r2, #1
 800bef8:	701a      	strb	r2, [r3, #0]
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800befa:	f008 fce1 	bl	80148c0 <HAL_GetTick>
 800befe:	0003      	movs	r3, r0
 800bf00:	4a1d      	ldr	r2, [pc, #116]	@ (800bf78 <BMP_Upkeep+0x27c>)
 800bf02:	189a      	adds	r2, r3, r2
 800bf04:	4b0d      	ldr	r3, [pc, #52]	@ (800bf3c <BMP_Upkeep+0x240>)
 800bf06:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800bf08:	4b0d      	ldr	r3, [pc, #52]	@ (800bf40 <BMP_Upkeep+0x244>)
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	701a      	strb	r2, [r3, #0]
    break;
 800bf0e:	e00f      	b.n	800bf30 <BMP_Upkeep+0x234>

  case BMP_STATE_WAIT:
      BMPState = BMP_MODE_SELECT;
 800bf10:	4b0b      	ldr	r3, [pc, #44]	@ (800bf40 <BMP_Upkeep+0x244>)
 800bf12:	2203      	movs	r2, #3
 800bf14:	701a      	strb	r2, [r3, #0]
    break;
 800bf16:	e00b      	b.n	800bf30 <BMP_Upkeep+0x234>


  default:
    // Handle unexpected state
    BMPState = BMP_MODE_SELECT;
 800bf18:	4b09      	ldr	r3, [pc, #36]	@ (800bf40 <BMP_Upkeep+0x244>)
 800bf1a:	2203      	movs	r2, #3
 800bf1c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800bf1e:	f001 ff41 	bl	800dda4 <getSensorLock>
 800bf22:	0003      	movs	r3, r0
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d102      	bne.n	800bf2e <BMP_Upkeep+0x232>
      setSensorLock(FREE);
 800bf28:	2000      	movs	r0, #0
 800bf2a:	f001 ff27 	bl	800dd7c <setSensorLock>
    }
    break;
 800bf2e:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800bf30:	4b03      	ldr	r3, [pc, #12]	@ (800bf40 <BMP_Upkeep+0x244>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
}
 800bf34:	0018      	movs	r0, r3
 800bf36:	46bd      	mov	sp, r7
 800bf38:	b004      	add	sp, #16
 800bf3a:	bdb0      	pop	{r4, r5, r7, pc}
 800bf3c:	20000f24 	.word	0x20000f24
 800bf40:	200000a1 	.word	0x200000a1
 800bf44:	20000f29 	.word	0x20000f29
 800bf48:	200000a2 	.word	0x200000a2
 800bf4c:	0802c3f4 	.word	0x0802c3f4
 800bf50:	0802c204 	.word	0x0802c204
 800bf54:	0802c414 	.word	0x0802c414
 800bf58:	0802c434 	.word	0x0802c434
 800bf5c:	0802c25c 	.word	0x0802c25c
 800bf60:	00001388 	.word	0x00001388
 800bf64:	0802c46c 	.word	0x0802c46c
 800bf68:	44548000 	.word	0x44548000
 800bf6c:	44898000 	.word	0x44898000
 800bf70:	00006d60 	.word	0x00006d60
 800bf74:	20000f28 	.word	0x20000f28
 800bf78:	00002710 	.word	0x00002710
 800bf7c:	0802c4a8 	.word	0x0802c4a8

0800bf80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800bf86:	4b10      	ldr	r3, [pc, #64]	@ (800bfc8 <MX_DMA_Init+0x48>)
 800bf88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf8a:	4b0f      	ldr	r3, [pc, #60]	@ (800bfc8 <MX_DMA_Init+0x48>)
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf92:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc8 <MX_DMA_Init+0x48>)
 800bf94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf96:	2201      	movs	r2, #1
 800bf98:	4013      	ands	r3, r2
 800bf9a:	607b      	str	r3, [r7, #4]
 800bf9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	200a      	movs	r0, #10
 800bfa4:	f009 f912 	bl	80151cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800bfa8:	200a      	movs	r0, #10
 800bfaa:	f009 f924 	bl	80151f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800bfae:	2200      	movs	r2, #0
 800bfb0:	2103      	movs	r1, #3
 800bfb2:	200b      	movs	r0, #11
 800bfb4:	f009 f90a 	bl	80151cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800bfb8:	200b      	movs	r0, #11
 800bfba:	f009 f91c 	bl	80151f6 <HAL_NVIC_EnableIRQ>

}
 800bfbe:	46c0      	nop			@ (mov r8, r8)
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	b002      	add	sp, #8
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	46c0      	nop			@ (mov r8, r8)
 800bfc8:	40021000 	.word	0x40021000

0800bfcc <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800bfcc:	b590      	push	{r4, r7, lr}
 800bfce:	b087      	sub	sp, #28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	1dbb      	adds	r3, r7, #6
 800bfd8:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800bfda:	4b17      	ldr	r3, [pc, #92]	@ (800c038 <WriteUint8ArrayEeprom+0x6c>)
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800bfe0:	f009 fc86 	bl	80158f0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800bfe4:	2316      	movs	r3, #22
 800bfe6:	18fb      	adds	r3, r7, r3
 800bfe8:	2200      	movs	r2, #0
 800bfea:	801a      	strh	r2, [r3, #0]
 800bfec:	e015      	b.n	800c01a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800bfee:	4b12      	ldr	r3, [pc, #72]	@ (800c038 <WriteUint8ArrayEeprom+0x6c>)
 800bff0:	6819      	ldr	r1, [r3, #0]
 800bff2:	2416      	movs	r4, #22
 800bff4:	193b      	adds	r3, r7, r4
 800bff6:	881b      	ldrh	r3, [r3, #0]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	18d3      	adds	r3, r2, r3
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	001a      	movs	r2, r3
 800c000:	2000      	movs	r0, #0
 800c002:	f009 fcdd 	bl	80159c0 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800c006:	4b0c      	ldr	r3, [pc, #48]	@ (800c038 <WriteUint8ArrayEeprom+0x6c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	4b0a      	ldr	r3, [pc, #40]	@ (800c038 <WriteUint8ArrayEeprom+0x6c>)
 800c00e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c010:	193b      	adds	r3, r7, r4
 800c012:	881a      	ldrh	r2, [r3, #0]
 800c014:	193b      	adds	r3, r7, r4
 800c016:	3201      	adds	r2, #1
 800c018:	801a      	strh	r2, [r3, #0]
 800c01a:	2316      	movs	r3, #22
 800c01c:	18fa      	adds	r2, r7, r3
 800c01e:	1dbb      	adds	r3, r7, #6
 800c020:	8812      	ldrh	r2, [r2, #0]
 800c022:	881b      	ldrh	r3, [r3, #0]
 800c024:	429a      	cmp	r2, r3
 800c026:	d3e2      	bcc.n	800bfee <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c028:	f009 fc90 	bl	801594c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800c02c:	4b02      	ldr	r3, [pc, #8]	@ (800c038 <WriteUint8ArrayEeprom+0x6c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
}
 800c030:	0018      	movs	r0, r3
 800c032:	46bd      	mov	sp, r7
 800c034:	b007      	add	sp, #28
 800c036:	bd90      	pop	{r4, r7, pc}
 800c038:	20000f34 	.word	0x20000f34

0800c03c <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	0019      	movs	r1, r3
 800c048:	1dbb      	adds	r3, r7, #6
 800c04a:	801a      	strh	r2, [r3, #0]
 800c04c:	1d3b      	adds	r3, r7, #4
 800c04e:	1c0a      	adds	r2, r1, #0
 800c050:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800c052:	1dba      	adds	r2, r7, #6
 800c054:	1d3b      	adds	r3, r7, #4
 800c056:	8812      	ldrh	r2, [r2, #0]
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d806      	bhi.n	800c06c <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800c05e:	1dbb      	adds	r3, r7, #6
 800c060:	881a      	ldrh	r2, [r3, #0]
 800c062:	68b9      	ldr	r1, [r7, #8]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	0018      	movs	r0, r3
 800c068:	f7ff ffb0 	bl	800bfcc <WriteUint8ArrayEeprom>
    }
}
 800c06c:	46c0      	nop			@ (mov r8, r8)
 800c06e:	46bd      	mov	sp, r7
 800c070:	b004      	add	sp, #16
 800c072:	bd80      	pop	{r7, pc}

0800c074 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	1dbb      	adds	r3, r7, #6
 800c080:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c082:	2316      	movs	r3, #22
 800c084:	18fb      	adds	r3, r7, r3
 800c086:	2200      	movs	r2, #0
 800c088:	801a      	strh	r2, [r3, #0]
 800c08a:	e010      	b.n	800c0ae <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800c08c:	2016      	movs	r0, #22
 800c08e:	183b      	adds	r3, r7, r0
 800c090:	881a      	ldrh	r2, [r3, #0]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	18d3      	adds	r3, r2, r3
 800c096:	0019      	movs	r1, r3
 800c098:	183b      	adds	r3, r7, r0
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	18d3      	adds	r3, r2, r3
 800c0a0:	780a      	ldrb	r2, [r1, #0]
 800c0a2:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c0a4:	183b      	adds	r3, r7, r0
 800c0a6:	881a      	ldrh	r2, [r3, #0]
 800c0a8:	183b      	adds	r3, r7, r0
 800c0aa:	3201      	adds	r2, #1
 800c0ac:	801a      	strh	r2, [r3, #0]
 800c0ae:	2316      	movs	r3, #22
 800c0b0:	18fa      	adds	r2, r7, r3
 800c0b2:	1dbb      	adds	r3, r7, #6
 800c0b4:	8812      	ldrh	r2, [r2, #0]
 800c0b6:	881b      	ldrh	r3, [r3, #0]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d3e7      	bcc.n	800c08c <ReadUint8ArrayEEprom+0x18>
    }
}
 800c0bc:	46c0      	nop			@ (mov r8, r8)
 800c0be:	46c0      	nop			@ (mov r8, r8)
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	b006      	add	sp, #24
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800c0c6:	b590      	push	{r4, r7, lr}
 800c0c8:	b085      	sub	sp, #20
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	000a      	movs	r2, r1
 800c0d0:	1cbb      	adds	r3, r7, #2
 800c0d2:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c0d4:	f009 fc0c 	bl	80158f0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800c0d8:	230e      	movs	r3, #14
 800c0da:	18fb      	adds	r3, r7, r3
 800c0dc:	2200      	movs	r2, #0
 800c0de:	801a      	strh	r2, [r3, #0]
 800c0e0:	e00c      	b.n	800c0fc <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800c0e2:	240e      	movs	r4, #14
 800c0e4:	193b      	adds	r3, r7, r4
 800c0e6:	881a      	ldrh	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	18d3      	adds	r3, r2, r3
 800c0ec:	0018      	movs	r0, r3
 800c0ee:	f009 fc3b 	bl	8015968 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800c0f2:	193b      	adds	r3, r7, r4
 800c0f4:	193a      	adds	r2, r7, r4
 800c0f6:	8812      	ldrh	r2, [r2, #0]
 800c0f8:	3204      	adds	r2, #4
 800c0fa:	801a      	strh	r2, [r3, #0]
 800c0fc:	230e      	movs	r3, #14
 800c0fe:	18fa      	adds	r2, r7, r3
 800c100:	1cbb      	adds	r3, r7, #2
 800c102:	8812      	ldrh	r2, [r2, #0]
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	d3eb      	bcc.n	800c0e2 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c10a:	f009 fc1f 	bl	801594c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800c10e:	46c0      	nop			@ (mov r8, r8)
 800c110:	46bd      	mov	sp, r7
 800c112:	b005      	add	sp, #20
 800c114:	bd90      	pop	{r4, r7, pc}
	...

0800c118 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2b7f      	cmp	r3, #127	@ 0x7f
 800c128:	d901      	bls.n	800c12e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800c12a:	237f      	movs	r3, #127	@ 0x7f
 800c12c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800c12e:	2017      	movs	r0, #23
 800c130:	183b      	adds	r3, r7, r0
 800c132:	490d      	ldr	r1, [pc, #52]	@ (800c168 <accessLUT10log10+0x50>)
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	188a      	adds	r2, r1, r2
 800c138:	7812      	ldrb	r2, [r2, #0]
 800c13a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800c13c:	0001      	movs	r1, r0
 800c13e:	187b      	adds	r3, r7, r1
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	2206      	movs	r2, #6
 800c144:	4113      	asrs	r3, r2
 800c146:	001a      	movs	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800c14c:	187b      	adds	r3, r7, r1
 800c14e:	781a      	ldrb	r2, [r3, #0]
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2106      	movs	r1, #6
 800c156:	408b      	lsls	r3, r1
 800c158:	1ad2      	subs	r2, r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	601a      	str	r2, [r3, #0]
}
 800c15e:	46c0      	nop			@ (mov r8, r8)
 800c160:	46bd      	mov	sp, r7
 800c162:	b006      	add	sp, #24
 800c164:	bd80      	pop	{r7, pc}
 800c166:	46c0      	nop			@ (mov r8, r8)
 800c168:	0802e214 	.word	0x0802e214

0800c16c <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800c16c:	b5b0      	push	{r4, r5, r7, lr}
 800c16e:	b090      	sub	sp, #64	@ 0x40
 800c170:	af00      	add	r7, sp, #0
 800c172:	6138      	str	r0, [r7, #16]
 800c174:	6179      	str	r1, [r7, #20]
 800c176:	60fa      	str	r2, [r7, #12]
 800c178:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800c17a:	2308      	movs	r3, #8
 800c17c:	001a      	movs	r2, r3
 800c17e:	3a20      	subs	r2, #32
 800c180:	2a00      	cmp	r2, #0
 800c182:	db03      	blt.n	800c18c <efficient10log10+0x20>
 800c184:	2101      	movs	r1, #1
 800c186:	4091      	lsls	r1, r2
 800c188:	000d      	movs	r5, r1
 800c18a:	e008      	b.n	800c19e <efficient10log10+0x32>
 800c18c:	2220      	movs	r2, #32
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	2101      	movs	r1, #1
 800c192:	40d1      	lsrs	r1, r2
 800c194:	000a      	movs	r2, r1
 800c196:	2100      	movs	r1, #0
 800c198:	4099      	lsls	r1, r3
 800c19a:	000d      	movs	r5, r1
 800c19c:	4315      	orrs	r5, r2
 800c19e:	2201      	movs	r2, #1
 800c1a0:	409a      	lsls	r2, r3
 800c1a2:	0014      	movs	r4, r2
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	4252      	negs	r2, r2
 800c1a8:	17d3      	asrs	r3, r2, #31
 800c1aa:	1912      	adds	r2, r2, r4
 800c1ac:	416b      	adcs	r3, r5
 800c1ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800c1b0:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800c1b2:	2336      	movs	r3, #54	@ 0x36
 800c1b4:	2208      	movs	r2, #8
 800c1b6:	189b      	adds	r3, r3, r2
 800c1b8:	19db      	adds	r3, r3, r7
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c1be:	e017      	b.n	800c1f0 <efficient10log10+0x84>
    {
        P = P >> 1;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	07db      	lsls	r3, r3, #31
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	0852      	lsrs	r2, r2, #1
 800c1c8:	603a      	str	r2, [r7, #0]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	431a      	orrs	r2, r3
 800c1ce:	603a      	str	r2, [r7, #0]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	085b      	lsrs	r3, r3, #1
 800c1d4:	607b      	str	r3, [r7, #4]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	687c      	ldr	r4, [r7, #4]
 800c1da:	613b      	str	r3, [r7, #16]
 800c1dc:	617c      	str	r4, [r7, #20]
        bShift++;
 800c1de:	2136      	movs	r1, #54	@ 0x36
 800c1e0:	2008      	movs	r0, #8
 800c1e2:	180b      	adds	r3, r1, r0
 800c1e4:	19db      	adds	r3, r3, r7
 800c1e6:	881a      	ldrh	r2, [r3, #0]
 800c1e8:	180b      	adds	r3, r1, r0
 800c1ea:	19db      	adds	r3, r3, r7
 800c1ec:	3201      	adds	r2, #1
 800c1ee:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c1f0:	697a      	ldr	r2, [r7, #20]
 800c1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d8e3      	bhi.n	800c1c0 <efficient10log10+0x54>
 800c1f8:	697a      	ldr	r2, [r7, #20]
 800c1fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d103      	bne.n	800c208 <efficient10log10+0x9c>
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c204:	429a      	cmp	r2, r3
 800c206:	d8db      	bhi.n	800c1c0 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	2308      	movs	r3, #8
 800c20c:	3b01      	subs	r3, #1
 800c20e:	2101      	movs	r1, #1
 800c210:	4099      	lsls	r1, r3
 800c212:	000b      	movs	r3, r1
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800c218:	2300      	movs	r3, #0
 800c21a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800c220:	231c      	movs	r3, #28
 800c222:	2408      	movs	r4, #8
 800c224:	191b      	adds	r3, r3, r4
 800c226:	19da      	adds	r2, r3, r7
 800c228:	2320      	movs	r3, #32
 800c22a:	191b      	adds	r3, r3, r4
 800c22c:	19d9      	adds	r1, r3, r7
 800c22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c230:	0018      	movs	r0, r3
 800c232:	f7ff ff71 	bl	800c118 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c236:	2215      	movs	r2, #21
 800c238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800c23c:	2036      	movs	r0, #54	@ 0x36
 800c23e:	1902      	adds	r2, r0, r4
 800c240:	19d2      	adds	r2, r2, r7
 800c242:	8812      	ldrh	r2, [r2, #0]
 800c244:	2103      	movs	r1, #3
 800c246:	434a      	muls	r2, r1
 800c248:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c24a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800c24c:	0021      	movs	r1, r4
 800c24e:	1843      	adds	r3, r0, r1
 800c250:	19db      	adds	r3, r3, r7
 800c252:	881b      	ldrh	r3, [r3, #0]
 800c254:	2201      	movs	r2, #1
 800c256:	4353      	muls	r3, r2
 800c258:	2203      	movs	r2, #3
 800c25a:	4113      	asrs	r3, r2
 800c25c:	001a      	movs	r2, r3
 800c25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c260:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800c262:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800c264:	2314      	movs	r3, #20
 800c266:	185b      	adds	r3, r3, r1
 800c268:	19da      	adds	r2, r3, r7
 800c26a:	2318      	movs	r3, #24
 800c26c:	185b      	adds	r3, r3, r1
 800c26e:	19db      	adds	r3, r3, r7
 800c270:	0011      	movs	r1, r2
 800c272:	0018      	movs	r0, r3
 800c274:	f000 f80a 	bl	800c28c <correctIntFracNumber>
    integerPart[0] = intPart;
 800c278:	6a3a      	ldr	r2, [r7, #32]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800c27e:	69fa      	ldr	r2, [r7, #28]
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	601a      	str	r2, [r3, #0]
}
 800c284:	46c0      	nop			@ (mov r8, r8)
 800c286:	46bd      	mov	sp, r7
 800c288:	b010      	add	sp, #64	@ 0x40
 800c28a:	bdb0      	pop	{r4, r5, r7, pc}

0800c28c <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800c296:	e00a      	b.n	800c2ae <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	1c5a      	adds	r2, r3, #1
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3b0a      	subs	r3, #10
 800c2a8:	001a      	movs	r2, r3
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b09      	cmp	r3, #9
 800c2b4:	dcf0      	bgt.n	800c298 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800c2b6:	e00a      	b.n	800c2ce <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	1e5a      	subs	r2, r3, #1
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	330a      	adds	r3, #10
 800c2c8:	001a      	movs	r2, r3
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	3309      	adds	r3, #9
 800c2d4:	dbf0      	blt.n	800c2b8 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	da0f      	bge.n	800c2fe <correctIntFracNumber+0x72>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	dd0b      	ble.n	800c2fe <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	1c5a      	adds	r2, r3, #1
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3b0a      	subs	r3, #10
 800c2f6:	001a      	movs	r2, r3
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800c2fc:	e012      	b.n	800c324 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	dd0e      	ble.n	800c324 <correctIntFracNumber+0x98>
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	da0a      	bge.n	800c324 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	1e5a      	subs	r2, r3, #1
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	330a      	adds	r3, #10
 800c31e:	001a      	movs	r2, r3
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	601a      	str	r2, [r3, #0]
}
 800c324:	46c0      	nop			@ (mov r8, r8)
 800c326:	46bd      	mov	sp, r7
 800c328:	b002      	add	sp, #8
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800c32c:	b590      	push	{r4, r7, lr}
 800c32e:	b08b      	sub	sp, #44	@ 0x2c
 800c330:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c332:	2414      	movs	r4, #20
 800c334:	193b      	adds	r3, r7, r4
 800c336:	0018      	movs	r0, r3
 800c338:	2314      	movs	r3, #20
 800c33a:	001a      	movs	r2, r3
 800c33c:	2100      	movs	r1, #0
 800c33e:	f01a f8b9 	bl	80264b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c342:	4b8a      	ldr	r3, [pc, #552]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c346:	4b89      	ldr	r3, [pc, #548]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c348:	2104      	movs	r1, #4
 800c34a:	430a      	orrs	r2, r1
 800c34c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c34e:	4b87      	ldr	r3, [pc, #540]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c352:	2204      	movs	r2, #4
 800c354:	4013      	ands	r3, r2
 800c356:	613b      	str	r3, [r7, #16]
 800c358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c35a:	4b84      	ldr	r3, [pc, #528]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c35c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c35e:	4b83      	ldr	r3, [pc, #524]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c360:	2180      	movs	r1, #128	@ 0x80
 800c362:	430a      	orrs	r2, r1
 800c364:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c366:	4b81      	ldr	r3, [pc, #516]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36a:	2280      	movs	r2, #128	@ 0x80
 800c36c:	4013      	ands	r3, r2
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c372:	4b7e      	ldr	r3, [pc, #504]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c376:	4b7d      	ldr	r3, [pc, #500]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c378:	2101      	movs	r1, #1
 800c37a:	430a      	orrs	r2, r1
 800c37c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c37e:	4b7b      	ldr	r3, [pc, #492]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c382:	2201      	movs	r2, #1
 800c384:	4013      	ands	r3, r2
 800c386:	60bb      	str	r3, [r7, #8]
 800c388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c38a:	4b78      	ldr	r3, [pc, #480]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c38e:	4b77      	ldr	r3, [pc, #476]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c390:	2102      	movs	r1, #2
 800c392:	430a      	orrs	r2, r1
 800c394:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c396:	4b75      	ldr	r3, [pc, #468]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39a:	2202      	movs	r2, #2
 800c39c:	4013      	ands	r3, r2
 800c39e:	607b      	str	r3, [r7, #4]
 800c3a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c3a2:	4b72      	ldr	r3, [pc, #456]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3a6:	4b71      	ldr	r3, [pc, #452]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c3a8:	2108      	movs	r1, #8
 800c3aa:	430a      	orrs	r2, r1
 800c3ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c3ae:	4b6f      	ldr	r3, [pc, #444]	@ (800c56c <MX_GPIO_Init+0x240>)
 800c3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b2:	2208      	movs	r2, #8
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	603b      	str	r3, [r7, #0]
 800c3b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800c3ba:	4b6d      	ldr	r3, [pc, #436]	@ (800c570 <MX_GPIO_Init+0x244>)
 800c3bc:	2201      	movs	r2, #1
 800c3be:	2101      	movs	r1, #1
 800c3c0:	0018      	movs	r0, r3
 800c3c2:	f009 fcf0 	bl	8015da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800c3c6:	4b6a      	ldr	r3, [pc, #424]	@ (800c570 <MX_GPIO_Init+0x244>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	2102      	movs	r1, #2
 800c3cc:	0018      	movs	r0, r3
 800c3ce:	f009 fcea 	bl	8015da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800c3d2:	4968      	ldr	r1, [pc, #416]	@ (800c574 <MX_GPIO_Init+0x248>)
 800c3d4:	4b68      	ldr	r3, [pc, #416]	@ (800c578 <MX_GPIO_Init+0x24c>)
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	0018      	movs	r0, r3
 800c3da:	f009 fce4 	bl	8015da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800c3de:	2380      	movs	r3, #128	@ 0x80
 800c3e0:	011b      	lsls	r3, r3, #4
 800c3e2:	4866      	ldr	r0, [pc, #408]	@ (800c57c <MX_GPIO_Init+0x250>)
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	0019      	movs	r1, r3
 800c3e8:	f009 fcdd 	bl	8015da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c3ec:	2380      	movs	r3, #128	@ 0x80
 800c3ee:	015b      	lsls	r3, r3, #5
 800c3f0:	4862      	ldr	r0, [pc, #392]	@ (800c57c <MX_GPIO_Init+0x250>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	0019      	movs	r1, r3
 800c3f6:	f009 fcd6 	bl	8015da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800c3fa:	193b      	adds	r3, r7, r4
 800c3fc:	4a60      	ldr	r2, [pc, #384]	@ (800c580 <MX_GPIO_Init+0x254>)
 800c3fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c400:	193b      	adds	r3, r7, r4
 800c402:	2203      	movs	r2, #3
 800c404:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c406:	193b      	adds	r3, r7, r4
 800c408:	2200      	movs	r2, #0
 800c40a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c40c:	193b      	adds	r3, r7, r4
 800c40e:	4a5b      	ldr	r2, [pc, #364]	@ (800c57c <MX_GPIO_Init+0x250>)
 800c410:	0019      	movs	r1, r3
 800c412:	0010      	movs	r0, r2
 800c414:	f009 fb2c 	bl	8015a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800c418:	193b      	adds	r3, r7, r4
 800c41a:	2203      	movs	r2, #3
 800c41c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c41e:	193b      	adds	r3, r7, r4
 800c420:	2201      	movs	r2, #1
 800c422:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c424:	193b      	adds	r3, r7, r4
 800c426:	2200      	movs	r2, #0
 800c428:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c42a:	193b      	adds	r3, r7, r4
 800c42c:	2200      	movs	r2, #0
 800c42e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c430:	193b      	adds	r3, r7, r4
 800c432:	4a4f      	ldr	r2, [pc, #316]	@ (800c570 <MX_GPIO_Init+0x244>)
 800c434:	0019      	movs	r1, r3
 800c436:	0010      	movs	r0, r2
 800c438:	f009 fb1a 	bl	8015a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c43c:	193b      	adds	r3, r7, r4
 800c43e:	2270      	movs	r2, #112	@ 0x70
 800c440:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c442:	193b      	adds	r3, r7, r4
 800c444:	2203      	movs	r2, #3
 800c446:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c448:	193b      	adds	r3, r7, r4
 800c44a:	2200      	movs	r2, #0
 800c44c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c44e:	193a      	adds	r2, r7, r4
 800c450:	23a0      	movs	r3, #160	@ 0xa0
 800c452:	05db      	lsls	r3, r3, #23
 800c454:	0011      	movs	r1, r2
 800c456:	0018      	movs	r0, r3
 800c458:	f009 fb0a 	bl	8015a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800c45c:	193b      	adds	r3, r7, r4
 800c45e:	22c0      	movs	r2, #192	@ 0xc0
 800c460:	0052      	lsls	r2, r2, #1
 800c462:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c464:	193b      	adds	r3, r7, r4
 800c466:	2200      	movs	r2, #0
 800c468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c46a:	193b      	adds	r3, r7, r4
 800c46c:	2200      	movs	r2, #0
 800c46e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c470:	193a      	adds	r2, r7, r4
 800c472:	23a0      	movs	r3, #160	@ 0xa0
 800c474:	05db      	lsls	r3, r3, #23
 800c476:	0011      	movs	r1, r2
 800c478:	0018      	movs	r0, r3
 800c47a:	f009 faf9 	bl	8015a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800c47e:	193b      	adds	r3, r7, r4
 800c480:	4a3c      	ldr	r2, [pc, #240]	@ (800c574 <MX_GPIO_Init+0x248>)
 800c482:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c484:	193b      	adds	r3, r7, r4
 800c486:	2201      	movs	r2, #1
 800c488:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c48a:	193b      	adds	r3, r7, r4
 800c48c:	2200      	movs	r2, #0
 800c48e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c490:	193b      	adds	r3, r7, r4
 800c492:	2200      	movs	r2, #0
 800c494:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c496:	193b      	adds	r3, r7, r4
 800c498:	4a37      	ldr	r2, [pc, #220]	@ (800c578 <MX_GPIO_Init+0x24c>)
 800c49a:	0019      	movs	r1, r3
 800c49c:	0010      	movs	r0, r2
 800c49e:	f009 fae7 	bl	8015a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800c4a2:	193b      	adds	r3, r7, r4
 800c4a4:	4a37      	ldr	r2, [pc, #220]	@ (800c584 <MX_GPIO_Init+0x258>)
 800c4a6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c4a8:	193b      	adds	r3, r7, r4
 800c4aa:	2203      	movs	r2, #3
 800c4ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ae:	193b      	adds	r3, r7, r4
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c4b4:	193b      	adds	r3, r7, r4
 800c4b6:	4a30      	ldr	r2, [pc, #192]	@ (800c578 <MX_GPIO_Init+0x24c>)
 800c4b8:	0019      	movs	r1, r3
 800c4ba:	0010      	movs	r0, r2
 800c4bc:	f009 fad8 	bl	8015a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800c4c0:	0021      	movs	r1, r4
 800c4c2:	187b      	adds	r3, r7, r1
 800c4c4:	2280      	movs	r2, #128	@ 0x80
 800c4c6:	0092      	lsls	r2, r2, #2
 800c4c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4ca:	000c      	movs	r4, r1
 800c4cc:	193b      	adds	r3, r7, r4
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4d2:	193b      	adds	r3, r7, r4
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800c4d8:	193b      	adds	r3, r7, r4
 800c4da:	4a28      	ldr	r2, [pc, #160]	@ (800c57c <MX_GPIO_Init+0x250>)
 800c4dc:	0019      	movs	r1, r3
 800c4de:	0010      	movs	r0, r2
 800c4e0:	f009 fac6 	bl	8015a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800c4e4:	193b      	adds	r3, r7, r4
 800c4e6:	2280      	movs	r2, #128	@ 0x80
 800c4e8:	0212      	lsls	r2, r2, #8
 800c4ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c4ec:	193b      	adds	r3, r7, r4
 800c4ee:	2288      	movs	r2, #136	@ 0x88
 800c4f0:	0352      	lsls	r2, r2, #13
 800c4f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4f4:	193b      	adds	r3, r7, r4
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800c4fa:	193a      	adds	r2, r7, r4
 800c4fc:	23a0      	movs	r3, #160	@ 0xa0
 800c4fe:	05db      	lsls	r3, r3, #23
 800c500:	0011      	movs	r1, r2
 800c502:	0018      	movs	r0, r3
 800c504:	f009 fab4 	bl	8015a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800c508:	0021      	movs	r1, r4
 800c50a:	187b      	adds	r3, r7, r1
 800c50c:	22c0      	movs	r2, #192	@ 0xc0
 800c50e:	0152      	lsls	r2, r2, #5
 800c510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c512:	000c      	movs	r4, r1
 800c514:	193b      	adds	r3, r7, r4
 800c516:	2201      	movs	r2, #1
 800c518:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c51a:	193b      	adds	r3, r7, r4
 800c51c:	2200      	movs	r2, #0
 800c51e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c520:	193b      	adds	r3, r7, r4
 800c522:	2200      	movs	r2, #0
 800c524:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c526:	193b      	adds	r3, r7, r4
 800c528:	4a14      	ldr	r2, [pc, #80]	@ (800c57c <MX_GPIO_Init+0x250>)
 800c52a:	0019      	movs	r1, r3
 800c52c:	0010      	movs	r0, r2
 800c52e:	f009 fa9f 	bl	8015a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800c532:	0021      	movs	r1, r4
 800c534:	187b      	adds	r3, r7, r1
 800c536:	2204      	movs	r2, #4
 800c538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c53a:	187b      	adds	r3, r7, r1
 800c53c:	2200      	movs	r2, #0
 800c53e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c540:	187b      	adds	r3, r7, r1
 800c542:	2201      	movs	r2, #1
 800c544:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800c546:	187b      	adds	r3, r7, r1
 800c548:	4a0f      	ldr	r2, [pc, #60]	@ (800c588 <MX_GPIO_Init+0x25c>)
 800c54a:	0019      	movs	r1, r3
 800c54c:	0010      	movs	r0, r2
 800c54e:	f009 fa8f 	bl	8015a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800c552:	2200      	movs	r2, #0
 800c554:	2100      	movs	r1, #0
 800c556:	2007      	movs	r0, #7
 800c558:	f008 fe38 	bl	80151cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800c55c:	2007      	movs	r0, #7
 800c55e:	f008 fe4a 	bl	80151f6 <HAL_NVIC_EnableIRQ>

}
 800c562:	46c0      	nop			@ (mov r8, r8)
 800c564:	46bd      	mov	sp, r7
 800c566:	b00b      	add	sp, #44	@ 0x2c
 800c568:	bd90      	pop	{r4, r7, pc}
 800c56a:	46c0      	nop			@ (mov r8, r8)
 800c56c:	40021000 	.word	0x40021000
 800c570:	50001c00 	.word	0x50001c00
 800c574:	00000301 	.word	0x00000301
 800c578:	50000400 	.word	0x50000400
 800c57c:	50000800 	.word	0x50000800
 800c580:	0000200c 	.word	0x0000200c
 800c584:	0000403e 	.word	0x0000403e
 800c588:	50000c00 	.word	0x50000c00

0800c58c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2100      	movs	r1, #0
 800c59a:	0018      	movs	r0, r3
 800c59c:	f010 fb82 	bl	801cca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2108      	movs	r1, #8
 800c5a4:	0018      	movs	r0, r3
 800c5a6:	f010 fb7d 	bl	801cca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	210c      	movs	r1, #12
 800c5ae:	0018      	movs	r0, r3
 800c5b0:	f010 fb78 	bl	801cca4 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800c5b4:	2380      	movs	r3, #128	@ 0x80
 800c5b6:	05db      	lsls	r3, r3, #23
 800c5b8:	22fa      	movs	r2, #250	@ 0xfa
 800c5ba:	0112      	lsls	r2, r2, #4
 800c5bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800c5be:	2380      	movs	r3, #128	@ 0x80
 800c5c0:	05db      	lsls	r3, r3, #23
 800c5c2:	22fa      	movs	r2, #250	@ 0xfa
 800c5c4:	0112      	lsls	r2, r2, #4
 800c5c6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800c5c8:	2380      	movs	r3, #128	@ 0x80
 800c5ca:	05db      	lsls	r3, r3, #23
 800c5cc:	22fa      	movs	r2, #250	@ 0xfa
 800c5ce:	0112      	lsls	r2, r2, #4
 800c5d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800c5d2:	2380      	movs	r3, #128	@ 0x80
 800c5d4:	05db      	lsls	r3, r3, #23
 800c5d6:	22fa      	movs	r2, #250	@ 0xfa
 800c5d8:	0112      	lsls	r2, r2, #4
 800c5da:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2100      	movs	r1, #0
 800c5e0:	0018      	movs	r0, r3
 800c5e2:	f010 fb5f 	bl	801cca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2104      	movs	r1, #4
 800c5ea:	0018      	movs	r0, r3
 800c5ec:	f010 fb5a 	bl	801cca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	2108      	movs	r1, #8
 800c5f4:	0018      	movs	r0, r3
 800c5f6:	f010 fb55 	bl	801cca4 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800c5fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c624 <GPIO_InitPWMLEDs+0x98>)
 800c5fc:	22fa      	movs	r2, #250	@ 0xfa
 800c5fe:	0112      	lsls	r2, r2, #4
 800c600:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800c602:	4b08      	ldr	r3, [pc, #32]	@ (800c624 <GPIO_InitPWMLEDs+0x98>)
 800c604:	22fa      	movs	r2, #250	@ 0xfa
 800c606:	0112      	lsls	r2, r2, #4
 800c608:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800c60a:	4b06      	ldr	r3, [pc, #24]	@ (800c624 <GPIO_InitPWMLEDs+0x98>)
 800c60c:	22fa      	movs	r2, #250	@ 0xfa
 800c60e:	0112      	lsls	r2, r2, #4
 800c610:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800c612:	4b04      	ldr	r3, [pc, #16]	@ (800c624 <GPIO_InitPWMLEDs+0x98>)
 800c614:	22fa      	movs	r2, #250	@ 0xfa
 800c616:	0112      	lsls	r2, r2, #4
 800c618:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c61a:	46c0      	nop			@ (mov r8, r8)
 800c61c:	46bd      	mov	sp, r7
 800c61e:	b002      	add	sp, #8
 800c620:	bd80      	pop	{r7, pc}
 800c622:	46c0      	nop			@ (mov r8, r8)
 800c624:	40000400 	.word	0x40000400

0800c628 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c62c:	4b1b      	ldr	r3, [pc, #108]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c62e:	4a1c      	ldr	r2, [pc, #112]	@ (800c6a0 <MX_I2C1_Init+0x78>)
 800c630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800c632:	4b1a      	ldr	r3, [pc, #104]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c634:	4a1b      	ldr	r2, [pc, #108]	@ (800c6a4 <MX_I2C1_Init+0x7c>)
 800c636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c638:	4b18      	ldr	r3, [pc, #96]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c63e:	4b17      	ldr	r3, [pc, #92]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c640:	2201      	movs	r2, #1
 800c642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c644:	4b15      	ldr	r3, [pc, #84]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c646:	2200      	movs	r2, #0
 800c648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c64a:	4b14      	ldr	r3, [pc, #80]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c64c:	2200      	movs	r2, #0
 800c64e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c650:	4b12      	ldr	r3, [pc, #72]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c652:	2200      	movs	r2, #0
 800c654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c656:	4b11      	ldr	r3, [pc, #68]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c658:	2200      	movs	r2, #0
 800c65a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c65c:	4b0f      	ldr	r3, [pc, #60]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c65e:	2200      	movs	r2, #0
 800c660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c662:	4b0e      	ldr	r3, [pc, #56]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c664:	0018      	movs	r0, r3
 800c666:	f009 fbd7 	bl	8015e18 <HAL_I2C_Init>
 800c66a:	1e03      	subs	r3, r0, #0
 800c66c:	d001      	beq.n	800c672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c66e:	f000 fe5b 	bl	800d328 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c672:	4b0a      	ldr	r3, [pc, #40]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c674:	2100      	movs	r1, #0
 800c676:	0018      	movs	r0, r3
 800c678:	f00c fb44 	bl	8018d04 <HAL_I2CEx_ConfigAnalogFilter>
 800c67c:	1e03      	subs	r3, r0, #0
 800c67e:	d001      	beq.n	800c684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c680:	f000 fe52 	bl	800d328 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c684:	4b05      	ldr	r3, [pc, #20]	@ (800c69c <MX_I2C1_Init+0x74>)
 800c686:	2100      	movs	r1, #0
 800c688:	0018      	movs	r0, r3
 800c68a:	f00c fb87 	bl	8018d9c <HAL_I2CEx_ConfigDigitalFilter>
 800c68e:	1e03      	subs	r3, r0, #0
 800c690:	d001      	beq.n	800c696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c692:	f000 fe49 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c696:	46c0      	nop			@ (mov r8, r8)
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	20000f38 	.word	0x20000f38
 800c6a0:	40005400 	.word	0x40005400
 800c6a4:	00503d58 	.word	0x00503d58

0800c6a8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c6ac:	4b1b      	ldr	r3, [pc, #108]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6ae:	4a1c      	ldr	r2, [pc, #112]	@ (800c720 <MX_I2C2_Init+0x78>)
 800c6b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800c6b2:	4b1a      	ldr	r3, [pc, #104]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6b4:	4a1b      	ldr	r2, [pc, #108]	@ (800c724 <MX_I2C2_Init+0x7c>)
 800c6b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c6b8:	4b18      	ldr	r3, [pc, #96]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c6be:	4b17      	ldr	r3, [pc, #92]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c6c4:	4b15      	ldr	r3, [pc, #84]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c6ca:	4b14      	ldr	r3, [pc, #80]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c6d0:	4b12      	ldr	r3, [pc, #72]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c6d6:	4b11      	ldr	r3, [pc, #68]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c6e2:	4b0e      	ldr	r3, [pc, #56]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6e4:	0018      	movs	r0, r3
 800c6e6:	f009 fb97 	bl	8015e18 <HAL_I2C_Init>
 800c6ea:	1e03      	subs	r3, r0, #0
 800c6ec:	d001      	beq.n	800c6f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c6ee:	f000 fe1b 	bl	800d328 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	f00c fb04 	bl	8018d04 <HAL_I2CEx_ConfigAnalogFilter>
 800c6fc:	1e03      	subs	r3, r0, #0
 800c6fe:	d001      	beq.n	800c704 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c700:	f000 fe12 	bl	800d328 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c704:	4b05      	ldr	r3, [pc, #20]	@ (800c71c <MX_I2C2_Init+0x74>)
 800c706:	2100      	movs	r1, #0
 800c708:	0018      	movs	r0, r3
 800c70a:	f00c fb47 	bl	8018d9c <HAL_I2CEx_ConfigDigitalFilter>
 800c70e:	1e03      	subs	r3, r0, #0
 800c710:	d001      	beq.n	800c716 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c712:	f000 fe09 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c716:	46c0      	nop			@ (mov r8, r8)
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	20000f8c 	.word	0x20000f8c
 800c720:	40005800 	.word	0x40005800
 800c724:	00503d58 	.word	0x00503d58

0800c728 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c728:	b590      	push	{r4, r7, lr}
 800c72a:	b08b      	sub	sp, #44	@ 0x2c
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c730:	2414      	movs	r4, #20
 800c732:	193b      	adds	r3, r7, r4
 800c734:	0018      	movs	r0, r3
 800c736:	2314      	movs	r3, #20
 800c738:	001a      	movs	r2, r3
 800c73a:	2100      	movs	r1, #0
 800c73c:	f019 feba 	bl	80264b4 <memset>
  if(i2cHandle->Instance==I2C1)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a5d      	ldr	r2, [pc, #372]	@ (800c8bc <HAL_I2C_MspInit+0x194>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d000      	beq.n	800c74c <HAL_I2C_MspInit+0x24>
 800c74a:	e083      	b.n	800c854 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c74c:	4b5c      	ldr	r3, [pc, #368]	@ (800c8c0 <HAL_I2C_MspInit+0x198>)
 800c74e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c750:	4b5b      	ldr	r3, [pc, #364]	@ (800c8c0 <HAL_I2C_MspInit+0x198>)
 800c752:	2102      	movs	r1, #2
 800c754:	430a      	orrs	r2, r1
 800c756:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c758:	4b59      	ldr	r3, [pc, #356]	@ (800c8c0 <HAL_I2C_MspInit+0x198>)
 800c75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c75c:	2202      	movs	r2, #2
 800c75e:	4013      	ands	r3, r2
 800c760:	613b      	str	r3, [r7, #16]
 800c762:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c764:	0021      	movs	r1, r4
 800c766:	187b      	adds	r3, r7, r1
 800c768:	22c0      	movs	r2, #192	@ 0xc0
 800c76a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c76c:	187b      	adds	r3, r7, r1
 800c76e:	2212      	movs	r2, #18
 800c770:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c772:	187b      	adds	r3, r7, r1
 800c774:	2200      	movs	r2, #0
 800c776:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c778:	187b      	adds	r3, r7, r1
 800c77a:	2203      	movs	r2, #3
 800c77c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800c77e:	187b      	adds	r3, r7, r1
 800c780:	2201      	movs	r2, #1
 800c782:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c784:	187b      	adds	r3, r7, r1
 800c786:	4a4f      	ldr	r2, [pc, #316]	@ (800c8c4 <HAL_I2C_MspInit+0x19c>)
 800c788:	0019      	movs	r1, r3
 800c78a:	0010      	movs	r0, r2
 800c78c:	f009 f970 	bl	8015a70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c790:	4b4b      	ldr	r3, [pc, #300]	@ (800c8c0 <HAL_I2C_MspInit+0x198>)
 800c792:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c794:	4b4a      	ldr	r3, [pc, #296]	@ (800c8c0 <HAL_I2C_MspInit+0x198>)
 800c796:	2180      	movs	r1, #128	@ 0x80
 800c798:	0389      	lsls	r1, r1, #14
 800c79a:	430a      	orrs	r2, r1
 800c79c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800c79e:	4b4a      	ldr	r3, [pc, #296]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7a0:	4a4a      	ldr	r2, [pc, #296]	@ (800c8cc <HAL_I2C_MspInit+0x1a4>)
 800c7a2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800c7a4:	4b48      	ldr	r3, [pc, #288]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7a6:	2206      	movs	r2, #6
 800c7a8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c7aa:	4b47      	ldr	r3, [pc, #284]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c7b0:	4b45      	ldr	r3, [pc, #276]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c7b6:	4b44      	ldr	r3, [pc, #272]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7b8:	2280      	movs	r2, #128	@ 0x80
 800c7ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c7bc:	4b42      	ldr	r3, [pc, #264]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7be:	2200      	movs	r2, #0
 800c7c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c7c2:	4b41      	ldr	r3, [pc, #260]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c7c8:	4b3f      	ldr	r3, [pc, #252]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c7ce:	4b3e      	ldr	r3, [pc, #248]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c7d4:	4b3c      	ldr	r3, [pc, #240]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7d6:	0018      	movs	r0, r3
 800c7d8:	f008 fd2e 	bl	8015238 <HAL_DMA_Init>
 800c7dc:	1e03      	subs	r3, r0, #0
 800c7de:	d001      	beq.n	800c7e4 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800c7e0:	f000 fda2 	bl	800d328 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4a38      	ldr	r2, [pc, #224]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c7ea:	4b37      	ldr	r3, [pc, #220]	@ (800c8c8 <HAL_I2C_MspInit+0x1a0>)
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800c7f0:	4b37      	ldr	r3, [pc, #220]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c7f2:	4a38      	ldr	r2, [pc, #224]	@ (800c8d4 <HAL_I2C_MspInit+0x1ac>)
 800c7f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800c7f6:	4b36      	ldr	r3, [pc, #216]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c7f8:	2206      	movs	r2, #6
 800c7fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c7fc:	4b34      	ldr	r3, [pc, #208]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c7fe:	2210      	movs	r2, #16
 800c800:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c802:	4b33      	ldr	r3, [pc, #204]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c804:	2200      	movs	r2, #0
 800c806:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c808:	4b31      	ldr	r3, [pc, #196]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c80a:	2280      	movs	r2, #128	@ 0x80
 800c80c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c80e:	4b30      	ldr	r3, [pc, #192]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c810:	2200      	movs	r2, #0
 800c812:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c814:	4b2e      	ldr	r3, [pc, #184]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c816:	2200      	movs	r2, #0
 800c818:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c81a:	4b2d      	ldr	r3, [pc, #180]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c81c:	2200      	movs	r2, #0
 800c81e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c820:	4b2b      	ldr	r3, [pc, #172]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c822:	2200      	movs	r2, #0
 800c824:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c826:	4b2a      	ldr	r3, [pc, #168]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c828:	0018      	movs	r0, r3
 800c82a:	f008 fd05 	bl	8015238 <HAL_DMA_Init>
 800c82e:	1e03      	subs	r3, r0, #0
 800c830:	d001      	beq.n	800c836 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800c832:	f000 fd79 	bl	800d328 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4a25      	ldr	r2, [pc, #148]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c83a:	639a      	str	r2, [r3, #56]	@ 0x38
 800c83c:	4b24      	ldr	r3, [pc, #144]	@ (800c8d0 <HAL_I2C_MspInit+0x1a8>)
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c842:	2200      	movs	r2, #0
 800c844:	2100      	movs	r1, #0
 800c846:	2017      	movs	r0, #23
 800c848:	f008 fcc0 	bl	80151cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c84c:	2017      	movs	r0, #23
 800c84e:	f008 fcd2 	bl	80151f6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800c852:	e02e      	b.n	800c8b2 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a1f      	ldr	r2, [pc, #124]	@ (800c8d8 <HAL_I2C_MspInit+0x1b0>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d129      	bne.n	800c8b2 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c85e:	4b18      	ldr	r3, [pc, #96]	@ (800c8c0 <HAL_I2C_MspInit+0x198>)
 800c860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c862:	4b17      	ldr	r3, [pc, #92]	@ (800c8c0 <HAL_I2C_MspInit+0x198>)
 800c864:	2102      	movs	r1, #2
 800c866:	430a      	orrs	r2, r1
 800c868:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c86a:	4b15      	ldr	r3, [pc, #84]	@ (800c8c0 <HAL_I2C_MspInit+0x198>)
 800c86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86e:	2202      	movs	r2, #2
 800c870:	4013      	ands	r3, r2
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c876:	2114      	movs	r1, #20
 800c878:	187b      	adds	r3, r7, r1
 800c87a:	22c0      	movs	r2, #192	@ 0xc0
 800c87c:	0112      	lsls	r2, r2, #4
 800c87e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c880:	187b      	adds	r3, r7, r1
 800c882:	2212      	movs	r2, #18
 800c884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c886:	187b      	adds	r3, r7, r1
 800c888:	2200      	movs	r2, #0
 800c88a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c88c:	187b      	adds	r3, r7, r1
 800c88e:	2203      	movs	r2, #3
 800c890:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800c892:	187b      	adds	r3, r7, r1
 800c894:	2206      	movs	r2, #6
 800c896:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c898:	187b      	adds	r3, r7, r1
 800c89a:	4a0a      	ldr	r2, [pc, #40]	@ (800c8c4 <HAL_I2C_MspInit+0x19c>)
 800c89c:	0019      	movs	r1, r3
 800c89e:	0010      	movs	r0, r2
 800c8a0:	f009 f8e6 	bl	8015a70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c8a4:	4b06      	ldr	r3, [pc, #24]	@ (800c8c0 <HAL_I2C_MspInit+0x198>)
 800c8a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8a8:	4b05      	ldr	r3, [pc, #20]	@ (800c8c0 <HAL_I2C_MspInit+0x198>)
 800c8aa:	2180      	movs	r1, #128	@ 0x80
 800c8ac:	03c9      	lsls	r1, r1, #15
 800c8ae:	430a      	orrs	r2, r1
 800c8b0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c8b2:	46c0      	nop			@ (mov r8, r8)
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	b00b      	add	sp, #44	@ 0x2c
 800c8b8:	bd90      	pop	{r4, r7, pc}
 800c8ba:	46c0      	nop			@ (mov r8, r8)
 800c8bc:	40005400 	.word	0x40005400
 800c8c0:	40021000 	.word	0x40021000
 800c8c4:	50000400 	.word	0x50000400
 800c8c8:	20000fe0 	.word	0x20000fe0
 800c8cc:	40020030 	.word	0x40020030
 800c8d0:	20001028 	.word	0x20001028
 800c8d4:	4002001c 	.word	0x4002001c
 800c8d8:	40005800 	.word	0x40005800

0800c8dc <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800c8e0:	4b10      	ldr	r3, [pc, #64]	@ (800c924 <MX_I2S2_Init+0x48>)
 800c8e2:	4a11      	ldr	r2, [pc, #68]	@ (800c928 <MX_I2S2_Init+0x4c>)
 800c8e4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800c8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c924 <MX_I2S2_Init+0x48>)
 800c8e8:	22c0      	movs	r2, #192	@ 0xc0
 800c8ea:	0092      	lsls	r2, r2, #2
 800c8ec:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800c8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c924 <MX_I2S2_Init+0x48>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800c8f4:	4b0b      	ldr	r3, [pc, #44]	@ (800c924 <MX_I2S2_Init+0x48>)
 800c8f6:	2203      	movs	r2, #3
 800c8f8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800c8fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c924 <MX_I2S2_Init+0x48>)
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800c900:	4b08      	ldr	r3, [pc, #32]	@ (800c924 <MX_I2S2_Init+0x48>)
 800c902:	22fa      	movs	r2, #250	@ 0xfa
 800c904:	0192      	lsls	r2, r2, #6
 800c906:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800c908:	4b06      	ldr	r3, [pc, #24]	@ (800c924 <MX_I2S2_Init+0x48>)
 800c90a:	2200      	movs	r2, #0
 800c90c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800c90e:	4b05      	ldr	r3, [pc, #20]	@ (800c924 <MX_I2S2_Init+0x48>)
 800c910:	0018      	movs	r0, r3
 800c912:	f00c fa8f 	bl	8018e34 <HAL_I2S_Init>
 800c916:	1e03      	subs	r3, r0, #0
 800c918:	d001      	beq.n	800c91e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800c91a:	f000 fd05 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800c91e:	46c0      	nop			@ (mov r8, r8)
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	20001070 	.word	0x20001070
 800c928:	40003800 	.word	0x40003800

0800c92c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800c92c:	b590      	push	{r4, r7, lr}
 800c92e:	b089      	sub	sp, #36	@ 0x24
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c934:	240c      	movs	r4, #12
 800c936:	193b      	adds	r3, r7, r4
 800c938:	0018      	movs	r0, r3
 800c93a:	2314      	movs	r3, #20
 800c93c:	001a      	movs	r2, r3
 800c93e:	2100      	movs	r1, #0
 800c940:	f019 fdb8 	bl	80264b4 <memset>
  if(i2sHandle->Instance==SPI2)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a2d      	ldr	r2, [pc, #180]	@ (800ca00 <HAL_I2S_MspInit+0xd4>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d154      	bne.n	800c9f8 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c94e:	4b2d      	ldr	r3, [pc, #180]	@ (800ca04 <HAL_I2S_MspInit+0xd8>)
 800c950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c952:	4b2c      	ldr	r3, [pc, #176]	@ (800ca04 <HAL_I2S_MspInit+0xd8>)
 800c954:	2180      	movs	r1, #128	@ 0x80
 800c956:	01c9      	lsls	r1, r1, #7
 800c958:	430a      	orrs	r2, r1
 800c95a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c95c:	4b29      	ldr	r3, [pc, #164]	@ (800ca04 <HAL_I2S_MspInit+0xd8>)
 800c95e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c960:	4b28      	ldr	r3, [pc, #160]	@ (800ca04 <HAL_I2S_MspInit+0xd8>)
 800c962:	2102      	movs	r1, #2
 800c964:	430a      	orrs	r2, r1
 800c966:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c968:	4b26      	ldr	r3, [pc, #152]	@ (800ca04 <HAL_I2S_MspInit+0xd8>)
 800c96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c96c:	2202      	movs	r2, #2
 800c96e:	4013      	ands	r3, r2
 800c970:	60bb      	str	r3, [r7, #8]
 800c972:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c974:	193b      	adds	r3, r7, r4
 800c976:	22b0      	movs	r2, #176	@ 0xb0
 800c978:	0212      	lsls	r2, r2, #8
 800c97a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c97c:	0021      	movs	r1, r4
 800c97e:	187b      	adds	r3, r7, r1
 800c980:	2202      	movs	r2, #2
 800c982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c984:	187b      	adds	r3, r7, r1
 800c986:	2200      	movs	r2, #0
 800c988:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c98a:	187b      	adds	r3, r7, r1
 800c98c:	2200      	movs	r2, #0
 800c98e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800c990:	187b      	adds	r3, r7, r1
 800c992:	2200      	movs	r2, #0
 800c994:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c996:	187b      	adds	r3, r7, r1
 800c998:	4a1b      	ldr	r2, [pc, #108]	@ (800ca08 <HAL_I2S_MspInit+0xdc>)
 800c99a:	0019      	movs	r1, r3
 800c99c:	0010      	movs	r0, r2
 800c99e:	f009 f867 	bl	8015a70 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800c9a2:	4b1a      	ldr	r3, [pc, #104]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9a4:	4a1a      	ldr	r2, [pc, #104]	@ (800ca10 <HAL_I2S_MspInit+0xe4>)
 800c9a6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800c9a8:	4b18      	ldr	r3, [pc, #96]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9aa:	2202      	movs	r2, #2
 800c9ac:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c9ae:	4b17      	ldr	r3, [pc, #92]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c9b4:	4b15      	ldr	r3, [pc, #84]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c9ba:	4b14      	ldr	r3, [pc, #80]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9bc:	2280      	movs	r2, #128	@ 0x80
 800c9be:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c9c0:	4b12      	ldr	r3, [pc, #72]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9c2:	2280      	movs	r2, #128	@ 0x80
 800c9c4:	0052      	lsls	r2, r2, #1
 800c9c6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c9c8:	4b10      	ldr	r3, [pc, #64]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9ca:	2280      	movs	r2, #128	@ 0x80
 800c9cc:	00d2      	lsls	r2, r2, #3
 800c9ce:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800c9d0:	4b0e      	ldr	r3, [pc, #56]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9d2:	2220      	movs	r2, #32
 800c9d4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800c9dc:	4b0b      	ldr	r3, [pc, #44]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9de:	0018      	movs	r0, r3
 800c9e0:	f008 fc2a 	bl	8015238 <HAL_DMA_Init>
 800c9e4:	1e03      	subs	r3, r0, #0
 800c9e6:	d001      	beq.n	800c9ec <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800c9e8:	f000 fc9e 	bl	800d328 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a07      	ldr	r2, [pc, #28]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800c9f2:	4b06      	ldr	r3, [pc, #24]	@ (800ca0c <HAL_I2S_MspInit+0xe0>)
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800c9f8:	46c0      	nop			@ (mov r8, r8)
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	b009      	add	sp, #36	@ 0x24
 800c9fe:	bd90      	pop	{r4, r7, pc}
 800ca00:	40003800 	.word	0x40003800
 800ca04:	40021000 	.word	0x40021000
 800ca08:	50000400 	.word	0x50000400
 800ca0c:	200010ac 	.word	0x200010ac
 800ca10:	40020044 	.word	0x40020044

0800ca14 <SetBatteryReadTimer>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetBatteryReadTimer(uint32_t ticks) {
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  batteryReadTimer  = HAL_GetTick() + ticks;
 800ca1c:	f007 ff50 	bl	80148c0 <HAL_GetTick>
 800ca20:	0002      	movs	r2, r0
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	18d2      	adds	r2, r2, r3
 800ca26:	4b03      	ldr	r3, [pc, #12]	@ (800ca34 <SetBatteryReadTimer+0x20>)
 800ca28:	601a      	str	r2, [r3, #0]
}
 800ca2a:	46c0      	nop			@ (mov r8, r8)
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	b002      	add	sp, #8
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	46c0      	nop			@ (mov r8, r8)
 800ca34:	200000a4 	.word	0x200000a4

0800ca38 <SetTestDone>:

void SetTestDone(){
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	af00      	add	r7, sp, #0
  testDone = true;
 800ca3c:	4b12      	ldr	r3, [pc, #72]	@ (800ca88 <SetTestDone+0x50>)
 800ca3e:	2201      	movs	r2, #1
 800ca40:	701a      	strb	r2, [r3, #0]
  HAL_Delay(250);
 800ca42:	20fa      	movs	r0, #250	@ 0xfa
 800ca44:	f007 ff46 	bl	80148d4 <HAL_Delay>
  SetDBLED(false, false, true);
 800ca48:	2201      	movs	r2, #1
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	f005 fe8f 	bl	8012770 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800ca52:	4a0e      	ldr	r2, [pc, #56]	@ (800ca8c <SetTestDone+0x54>)
 800ca54:	23fa      	movs	r3, #250	@ 0xfa
 800ca56:	0119      	lsls	r1, r3, #4
 800ca58:	23fa      	movs	r3, #250	@ 0xfa
 800ca5a:	011b      	lsls	r3, r3, #4
 800ca5c:	0018      	movs	r0, r3
 800ca5e:	f005 fe53 	bl	8012708 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800ca62:	4a0a      	ldr	r2, [pc, #40]	@ (800ca8c <SetTestDone+0x54>)
 800ca64:	23fa      	movs	r3, #250	@ 0xfa
 800ca66:	0119      	lsls	r1, r3, #4
 800ca68:	23fa      	movs	r3, #250	@ 0xfa
 800ca6a:	011b      	lsls	r3, r3, #4
 800ca6c:	0018      	movs	r0, r3
 800ca6e:	f005 fec9 	bl	8012804 <SetVocLED>
  HAL_Delay(250);
 800ca72:	20fa      	movs	r0, #250	@ 0xfa
 800ca74:	f007 ff2e 	bl	80148d4 <HAL_Delay>
  SetLEDsOff();
 800ca78:	f006 f804 	bl	8012a84 <SetLEDsOff>
  InitDone();
 800ca7c:	f005 fd98 	bl	80125b0 <InitDone>
}
 800ca80:	46c0      	nop			@ (mov r8, r8)
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	46c0      	nop			@ (mov r8, r8)
 800ca88:	200010f4 	.word	0x200010f4
 800ca8c:	00000bb8 	.word	0x00000bb8

0800ca90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ca90:	b5b0      	push	{r4, r5, r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ca96:	f007 fead 	bl	80147f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ca9a:	f000 fad9 	bl	800d050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ca9e:	f7ff fc45 	bl	800c32c <MX_GPIO_Init>
  MX_DMA_Init();
 800caa2:	f7ff fa6d 	bl	800bf80 <MX_DMA_Init>
  MX_I2C1_Init();
 800caa6:	f7ff fdbf 	bl	800c628 <MX_I2C1_Init>
  MX_I2S2_Init();
 800caaa:	f7ff ff17 	bl	800c8dc <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800caae:	f006 ffa1 	bl	80139f4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800cab2:	f7ff fdf9 	bl	800c6a8 <MX_I2C2_Init>
  MX_TIM2_Init();
 800cab6:	f006 fd95 	bl	80135e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800caba:	f006 fe07 	bl	80136cc <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800cabe:	f006 ffc9 	bl	8013a54 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800cac2:	f7fe f86d 	bl	800aba0 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800cac6:	f016 f9e9 	bl	8022e9c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800caca:	f001 fc99 	bl	800e400 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800cace:	f006 ff5b 	bl	8013988 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800cad2:	f006 fe79 	bl	80137c8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if (Check_USB_PowerOn())
 800cad6:	f7fd f841 	bl	8009b5c <Check_USB_PowerOn>
 800cada:	1e03      	subs	r3, r0, #0
 800cadc:	d006      	beq.n	800caec <main+0x5c>
    while (HAL_GetTick() < 650);  // Wait for the USB to become ready
 800cade:	46c0      	nop			@ (mov r8, r8)
 800cae0:	f007 feee 	bl	80148c0 <HAL_GetTick>
 800cae4:	0003      	movs	r3, r0
 800cae6:	4ac5      	ldr	r2, [pc, #788]	@ (800cdfc <main+0x36c>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d9f9      	bls.n	800cae0 <main+0x50>
	 * : Put SSID in EEPROM
	 * : Turn on heater if humidity is too high
	 * : LEDs indicator for air quality
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800caec:	4ac4      	ldr	r2, [pc, #784]	@ (800ce00 <main+0x370>)
 800caee:	4bc5      	ldr	r3, [pc, #788]	@ (800ce04 <main+0x374>)
 800caf0:	0011      	movs	r1, r2
 800caf2:	0018      	movs	r0, r3
 800caf4:	f7ff fd4a 	bl	800c58c <GPIO_InitPWMLEDs>
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800caf8:	4ac3      	ldr	r2, [pc, #780]	@ (800ce08 <main+0x378>)
 800cafa:	4bc4      	ldr	r3, [pc, #784]	@ (800ce0c <main+0x37c>)
 800cafc:	0019      	movs	r1, r3
 800cafe:	2002      	movs	r0, #2
 800cb00:	f007 f966 	bl	8013dd0 <CreateLine>
  BinaryReleaseInfo();
 800cb04:	f007 f9f8 	bl	8013ef8 <BinaryReleaseInfo>
  usblog = *(bool*)(USBlogstatusConfigAddr);
 800cb08:	4bc1      	ldr	r3, [pc, #772]	@ (800ce10 <main+0x380>)
 800cb0a:	781a      	ldrb	r2, [r3, #0]
 800cb0c:	4bc1      	ldr	r3, [pc, #772]	@ (800ce14 <main+0x384>)
 800cb0e:	701a      	strb	r2, [r3, #0]
  if(UserButton_Pressed()){
 800cb10:	f7fd f8b0 	bl	8009c74 <UserButton_Pressed>
 800cb14:	1e03      	subs	r3, r0, #0
 800cb16:	d005      	beq.n	800cb24 <main+0x94>
    EnableESPProg();
 800cb18:	f016 fa9c 	bl	8023054 <EnableESPProg>
    ESP_Programming = true;
 800cb1c:	4bbe      	ldr	r3, [pc, #760]	@ (800ce18 <main+0x388>)
 800cb1e:	2201      	movs	r2, #1
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	e03b      	b.n	800cb9c <main+0x10c>
  }
  else {
    charge = batteryChargeCheck();
 800cb24:	f005 fd4e 	bl	80125c4 <batteryChargeCheck>
 800cb28:	0003      	movs	r3, r0
 800cb2a:	001a      	movs	r2, r3
 800cb2c:	4bbb      	ldr	r3, [pc, #748]	@ (800ce1c <main+0x38c>)
 800cb2e:	701a      	strb	r2, [r3, #0]
//    batteryCharge = ReadBatteryVoltage();
    Error("Battery voltage is: %.02fV", batteryCharge);
 800cb30:	4bbb      	ldr	r3, [pc, #748]	@ (800ce20 <main+0x390>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	1c18      	adds	r0, r3, #0
 800cb36:	f7f6 fead 	bl	8003894 <__aeabi_f2d>
 800cb3a:	0002      	movs	r2, r0
 800cb3c:	000b      	movs	r3, r1
 800cb3e:	48b9      	ldr	r0, [pc, #740]	@ (800ce24 <main+0x394>)
 800cb40:	49b9      	ldr	r1, [pc, #740]	@ (800ce28 <main+0x398>)
 800cb42:	9200      	str	r2, [sp, #0]
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	0002      	movs	r2, r0
 800cb48:	2001      	movs	r0, #1
 800cb4a:	f007 f941 	bl	8013dd0 <CreateLine>
    if(batteryCharge <= 3.68) {
 800cb4e:	4bb4      	ldr	r3, [pc, #720]	@ (800ce20 <main+0x390>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	1c18      	adds	r0, r3, #0
 800cb54:	f7f6 fe9e 	bl	8003894 <__aeabi_f2d>
 800cb58:	4ab4      	ldr	r2, [pc, #720]	@ (800ce2c <main+0x39c>)
 800cb5a:	4bb5      	ldr	r3, [pc, #724]	@ (800ce30 <main+0x3a0>)
 800cb5c:	f7f3 fcb8 	bl	80004d0 <__aeabi_dcmple>
 800cb60:	1e03      	subs	r3, r0, #0
 800cb62:	d01b      	beq.n	800cb9c <main+0x10c>
      SetAllREDLED();
 800cb64:	f005 ffaa 	bl	8012abc <SetAllREDLED>
      Error("Battery voltage is critical: %.02fV, going in deep sleep. Waking for LED indication %s seconds", batteryCharge, DEEP_SLEEP);
 800cb68:	4bad      	ldr	r3, [pc, #692]	@ (800ce20 <main+0x390>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	1c18      	adds	r0, r3, #0
 800cb6e:	f7f6 fe91 	bl	8003894 <__aeabi_f2d>
 800cb72:	0002      	movs	r2, r0
 800cb74:	000b      	movs	r3, r1
 800cb76:	4caf      	ldr	r4, [pc, #700]	@ (800ce34 <main+0x3a4>)
 800cb78:	48ab      	ldr	r0, [pc, #684]	@ (800ce28 <main+0x398>)
 800cb7a:	21e1      	movs	r1, #225	@ 0xe1
 800cb7c:	0109      	lsls	r1, r1, #4
 800cb7e:	9102      	str	r1, [sp, #8]
 800cb80:	9200      	str	r2, [sp, #0]
 800cb82:	9301      	str	r3, [sp, #4]
 800cb84:	0022      	movs	r2, r4
 800cb86:	0001      	movs	r1, r0
 800cb88:	2001      	movs	r0, #1
 800cb8a:	f007 f921 	bl	8013dd0 <CreateLine>
      WalkAllRedLED();
 800cb8e:	f005 ffe3 	bl	8012b58 <WalkAllRedLED>
#ifndef STLINK_V3PWR
      Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP);
 800cb92:	23e1      	movs	r3, #225	@ 0xe1
 800cb94:	011b      	lsls	r3, r3, #4
 800cb96:	0018      	movs	r0, r3
 800cb98:	f7fd fcf4 	bl	800a584 <Enter_Stop_Mode_for_empty_battery>
#endif
      }

  }
  SetVerboseLevel(VERBOSE_ALL);
 800cb9c:	2003      	movs	r0, #3
 800cb9e:	f007 f991 	bl	8013ec4 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800cba2:	49a5      	ldr	r1, [pc, #660]	@ (800ce38 <main+0x3a8>)
 800cba4:	4ba5      	ldr	r3, [pc, #660]	@ (800ce3c <main+0x3ac>)
 800cba6:	2201      	movs	r2, #1
 800cba8:	0018      	movs	r0, r3
 800cbaa:	f010 fcdb 	bl	801d564 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800cbae:	4ba4      	ldr	r3, [pc, #656]	@ (800ce40 <main+0x3b0>)
 800cbb0:	0018      	movs	r0, r3
 800cbb2:	f7fd fdfb 	bl	800a7ac <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800cbb6:	4aa3      	ldr	r2, [pc, #652]	@ (800ce44 <main+0x3b4>)
 800cbb8:	49a3      	ldr	r1, [pc, #652]	@ (800ce48 <main+0x3b8>)
 800cbba:	48a4      	ldr	r0, [pc, #656]	@ (800ce4c <main+0x3bc>)
 800cbbc:	230b      	movs	r3, #11
 800cbbe:	f004 fe6d 	bl	801189c <soundInit>
 800cbc2:	0003      	movs	r3, r0
 800cbc4:	001a      	movs	r2, r3
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	4053      	eors	r3, r2
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d006      	beq.n	800cbde <main+0x14e>
    errorHandler(__func__, __LINE__, __FILE__);
 800cbd0:	4a9f      	ldr	r2, [pc, #636]	@ (800ce50 <main+0x3c0>)
 800cbd2:	2380      	movs	r3, #128	@ 0x80
 800cbd4:	0059      	lsls	r1, r3, #1
 800cbd6:	4b9f      	ldr	r3, [pc, #636]	@ (800ce54 <main+0x3c4>)
 800cbd8:	0018      	movs	r0, r3
 800cbda:	f007 f9e1 	bl	8013fa0 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800cbde:	4b9e      	ldr	r3, [pc, #632]	@ (800ce58 <main+0x3c8>)
 800cbe0:	4a9e      	ldr	r2, [pc, #632]	@ (800ce5c <main+0x3cc>)
 800cbe2:	4999      	ldr	r1, [pc, #612]	@ (800ce48 <main+0x3b8>)
 800cbe4:	489e      	ldr	r0, [pc, #632]	@ (800ce60 <main+0x3d0>)
 800cbe6:	f000 fc91 	bl	800d50c <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800cbea:	f007 fe69 	bl	80148c0 <HAL_GetTick>
 800cbee:	0003      	movs	r3, r0
 800cbf0:	4a9c      	ldr	r2, [pc, #624]	@ (800ce64 <main+0x3d4>)
 800cbf2:	189a      	adds	r2, r3, r2
 800cbf4:	4b9c      	ldr	r3, [pc, #624]	@ (800ce68 <main+0x3d8>)
 800cbf6:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800cbf8:	f7fc ffb0 	bl	8009b5c <Check_USB_PowerOn>
 800cbfc:	0003      	movs	r3, r0
 800cbfe:	1e5a      	subs	r2, r3, #1
 800cc00:	4193      	sbcs	r3, r2
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2201      	movs	r2, #1
 800cc06:	4053      	eors	r3, r2
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	1c1a      	adds	r2, r3, #0
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	4013      	ands	r3, r2
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	4b96      	ldr	r3, [pc, #600]	@ (800ce6c <main+0x3dc>)
 800cc14:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800cc16:	f7fc ffa1 	bl	8009b5c <Check_USB_PowerOn>
 800cc1a:	1e03      	subs	r3, r0, #0
 800cc1c:	d003      	beq.n	800cc26 <main+0x196>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800cc1e:	4b94      	ldr	r3, [pc, #592]	@ (800ce70 <main+0x3e0>)
 800cc20:	0018      	movs	r0, r3
 800cc22:	f7fb fee1 	bl	80089e8 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800cc26:	4b93      	ldr	r3, [pc, #588]	@ (800ce74 <main+0x3e4>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	0018      	movs	r0, r3
 800cc2c:	f007 f87a 	bl	8013d24 <TimestampIsReached>
 800cc30:	1e03      	subs	r3, r0, #0
 800cc32:	d00e      	beq.n	800cc52 <main+0x1c2>
      charge = Battery_Upkeep();
 800cc34:	f006 fb5a 	bl	80132ec <Battery_Upkeep>
 800cc38:	0003      	movs	r3, r0
 800cc3a:	001a      	movs	r2, r3
 800cc3c:	4b77      	ldr	r3, [pc, #476]	@ (800ce1c <main+0x38c>)
 800cc3e:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800cc40:	f007 fe3e 	bl	80148c0 <HAL_GetTick>
 800cc44:	0003      	movs	r3, r0
 800cc46:	4a8c      	ldr	r2, [pc, #560]	@ (800ce78 <main+0x3e8>)
 800cc48:	189a      	adds	r2, r3, r2
 800cc4a:	4b8a      	ldr	r3, [pc, #552]	@ (800ce74 <main+0x3e4>)
 800cc4c:	601a      	str	r2, [r3, #0]
      showTime();
 800cc4e:	f7fd f88d 	bl	8009d6c <showTime>
    }
    configCheck();
 800cc52:	f006 f9ab 	bl	8012fac <configCheck>
    if ((charge == BATTERY_LOW || charge == BATTERY_CRITICAL)  && !EspTurnedOn){
 800cc56:	4b71      	ldr	r3, [pc, #452]	@ (800ce1c <main+0x38c>)
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d003      	beq.n	800cc66 <main+0x1d6>
 800cc5e:	4b6f      	ldr	r3, [pc, #444]	@ (800ce1c <main+0x38c>)
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d137      	bne.n	800ccd6 <main+0x246>
 800cc66:	4b85      	ldr	r3, [pc, #532]	@ (800ce7c <main+0x3ec>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	4053      	eors	r3, r2
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d030      	beq.n	800ccd6 <main+0x246>
      WalkAllRedLED();
 800cc74:	f005 ff70 	bl	8012b58 <WalkAllRedLED>
      Sensor.PM_measurementEnabled = false;
 800cc78:	4b81      	ldr	r3, [pc, #516]	@ (800ce80 <main+0x3f0>)
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	709a      	strb	r2, [r3, #2]
#ifdef USE_MAIL
      pwrmailTodaySend();
 800cc7e:	f7f7 fefb 	bl	8004a78 <pwrmailTodaySend>
      if (((charge == BATTERY_LOW)  || (charge == BATTERY_CRITICAL)) && (sendpwremail == CLEAR) && !Check_USB_PowerOn()) {
 800cc82:	4b66      	ldr	r3, [pc, #408]	@ (800ce1c <main+0x38c>)
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d003      	beq.n	800cc92 <main+0x202>
 800cc8a:	4b64      	ldr	r3, [pc, #400]	@ (800ce1c <main+0x38c>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d121      	bne.n	800ccd6 <main+0x246>
 800cc92:	4b7c      	ldr	r3, [pc, #496]	@ (800ce84 <main+0x3f4>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d11d      	bne.n	800ccd6 <main+0x246>
 800cc9a:	f7fc ff5f 	bl	8009b5c <Check_USB_PowerOn>
 800cc9e:	0003      	movs	r3, r0
 800cca0:	001a      	movs	r2, r3
 800cca2:	2301      	movs	r3, #1
 800cca4:	4053      	eors	r3, r2
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d014      	beq.n	800ccd6 <main+0x246>
        Debug("charge: %d, sendpwrmail: %d Check_USB_PowerOn(): %d", charge, sendpwremail, Check_USB_PowerOn());
 800ccac:	4b5b      	ldr	r3, [pc, #364]	@ (800ce1c <main+0x38c>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	001d      	movs	r5, r3
 800ccb2:	4b74      	ldr	r3, [pc, #464]	@ (800ce84 <main+0x3f4>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	001c      	movs	r4, r3
 800ccb8:	f7fc ff50 	bl	8009b5c <Check_USB_PowerOn>
 800ccbc:	0003      	movs	r3, r0
 800ccbe:	4a72      	ldr	r2, [pc, #456]	@ (800ce88 <main+0x3f8>)
 800ccc0:	4972      	ldr	r1, [pc, #456]	@ (800ce8c <main+0x3fc>)
 800ccc2:	9301      	str	r3, [sp, #4]
 800ccc4:	9400      	str	r4, [sp, #0]
 800ccc6:	002b      	movs	r3, r5
 800ccc8:	2003      	movs	r0, #3
 800ccca:	f007 f881 	bl	8013dd0 <CreateLine>
        setModePowerMail();
 800ccce:	f7f7 fe93 	bl	80049f8 <setModePowerMail>
        ESP_Upkeep();
 800ccd2:	f7fa fca3 	bl	800761c <ESP_Upkeep>
    // ==== end of test mail
*/
#endif
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800ccd6:	4b6e      	ldr	r3, [pc, #440]	@ (800ce90 <main+0x400>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800ccdc:	4b4f      	ldr	r3, [pc, #316]	@ (800ce1c <main+0x38c>)
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d10c      	bne.n	800ccfe <main+0x26e>
 800cce4:	4b6b      	ldr	r3, [pc, #428]	@ (800ce94 <main+0x404>)
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b09      	cmp	r3, #9
 800ccea:	d108      	bne.n	800ccfe <main+0x26e>
       batteryEmpty = true;
 800ccec:	4b6a      	ldr	r3, [pc, #424]	@ (800ce98 <main+0x408>)
 800ccee:	2201      	movs	r2, #1
 800ccf0:	701a      	strb	r2, [r3, #0]
       // we are going in deep sleep, nearly off and no wakeup from RTC Do not use standby mode,
       // because without a modification on the PCB the ESP32 is activated
       // instead use the stop mode with or without RTC
       //Enter_Standby_Mode();
       Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP); // light up the leds every hour
 800ccf2:	23e1      	movs	r3, #225	@ 0xe1
 800ccf4:	011b      	lsls	r3, r3, #4
 800ccf6:	0018      	movs	r0, r3
 800ccf8:	f7fd fc44 	bl	800a584 <Enter_Stop_Mode_for_empty_battery>
 800ccfc:	e002      	b.n	800cd04 <main+0x274>
    }
    else{
      batteryEmpty = false;
 800ccfe:	4b66      	ldr	r3, [pc, #408]	@ (800ce98 <main+0x408>)
 800cd00:	2200      	movs	r2, #0
 800cd02:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800cd04:	4b65      	ldr	r3, [pc, #404]	@ (800ce9c <main+0x40c>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d100      	bne.n	800cd0e <main+0x27e>
 800cd0c:	e10c      	b.n	800cf28 <main+0x498>
 800cd0e:	4b42      	ldr	r3, [pc, #264]	@ (800ce18 <main+0x388>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	2201      	movs	r2, #1
 800cd14:	4053      	eors	r3, r2
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d100      	bne.n	800cd1e <main+0x28e>
 800cd1c:	e104      	b.n	800cf28 <main+0x498>
 800cd1e:	4b5e      	ldr	r3, [pc, #376]	@ (800ce98 <main+0x408>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	2201      	movs	r2, #1
 800cd24:	4053      	eors	r3, r2
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d100      	bne.n	800cd2e <main+0x29e>
 800cd2c:	e0fc      	b.n	800cf28 <main+0x498>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800cd2e:	4b4f      	ldr	r3, [pc, #316]	@ (800ce6c <main+0x3dc>)
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	4b5b      	ldr	r3, [pc, #364]	@ (800cea0 <main+0x410>)
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d034      	beq.n	800cda4 <main+0x314>
        if (IsSGPPresent() && !usbPluggedIn) {
 800cd3a:	f000 fb79 	bl	800d430 <IsSGPPresent>
 800cd3e:	1e03      	subs	r3, r0, #0
 800cd40:	d009      	beq.n	800cd56 <main+0x2c6>
 800cd42:	4b57      	ldr	r3, [pc, #348]	@ (800cea0 <main+0x410>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2201      	movs	r2, #1
 800cd48:	4053      	eors	r3, r2
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <main+0x2c6>
          SetVOCSensorDIS_ENA(true);
 800cd50:	2001      	movs	r0, #1
 800cd52:	f000 fb77 	bl	800d444 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800cd56:	4b53      	ldr	r3, [pc, #332]	@ (800cea4 <main+0x414>)
 800cd58:	791b      	ldrb	r3, [r3, #4]
 800cd5a:	2b34      	cmp	r3, #52	@ 0x34
 800cd5c:	d003      	beq.n	800cd66 <main+0x2d6>
 800cd5e:	4b51      	ldr	r3, [pc, #324]	@ (800cea4 <main+0x414>)
 800cd60:	791b      	ldrb	r3, [r3, #4]
 800cd62:	2b35      	cmp	r3, #53	@ 0x35
 800cd64:	d106      	bne.n	800cd74 <main+0x2e4>
 800cd66:	4b4e      	ldr	r3, [pc, #312]	@ (800cea0 <main+0x410>)
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d002      	beq.n	800cd74 <main+0x2e4>
          SetVOCSensorDIS_ENA(false);
 800cd6e:	2000      	movs	r0, #0
 800cd70:	f000 fb68 	bl	800d444 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800cd74:	4b4a      	ldr	r3, [pc, #296]	@ (800cea0 <main+0x410>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	4053      	eors	r3, r2
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00c      	beq.n	800cd9c <main+0x30c>
 800cd82:	f007 fd9d 	bl	80148c0 <HAL_GetTick>
 800cd86:	0003      	movs	r3, r0
 800cd88:	4a36      	ldr	r2, [pc, #216]	@ (800ce64 <main+0x3d4>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d906      	bls.n	800cd9c <main+0x30c>
//          Debug("Device time out set in main due to powerstatus shift");
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800cd8e:	f007 fd97 	bl	80148c0 <HAL_GetTick>
 800cd92:	0003      	movs	r3, r0
 800cd94:	4a44      	ldr	r2, [pc, #272]	@ (800cea8 <main+0x418>)
 800cd96:	189a      	adds	r2, r3, r2
 800cd98:	4b33      	ldr	r3, [pc, #204]	@ (800ce68 <main+0x3d8>)
 800cd9a:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800cd9c:	4b40      	ldr	r3, [pc, #256]	@ (800cea0 <main+0x410>)
 800cd9e:	781a      	ldrb	r2, [r3, #0]
 800cda0:	4b32      	ldr	r3, [pc, #200]	@ (800ce6c <main+0x3dc>)
 800cda2:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800cda4:	f001 f808 	bl	800ddb8 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800cda8:	4b35      	ldr	r3, [pc, #212]	@ (800ce80 <main+0x3f0>)
 800cdaa:	78db      	ldrb	r3, [r3, #3]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d005      	beq.n	800cdbc <main+0x32c>
        MICstate = Mic_Upkeep();
 800cdb0:	f001 fa12 	bl	800e1d8 <Mic_Upkeep>
 800cdb4:	0003      	movs	r3, r0
 800cdb6:	001a      	movs	r2, r3
 800cdb8:	4b3c      	ldr	r3, [pc, #240]	@ (800ceac <main+0x41c>)
 800cdba:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800cdbc:	4b17      	ldr	r3, [pc, #92]	@ (800ce1c <main+0x38c>)
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d803      	bhi.n	800cdcc <main+0x33c>
 800cdc4:	4b32      	ldr	r3, [pc, #200]	@ (800ce90 <main+0x400>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d071      	beq.n	800ceb0 <main+0x420>
 800cdcc:	4b2c      	ldr	r3, [pc, #176]	@ (800ce80 <main+0x3f0>)
 800cdce:	789b      	ldrb	r3, [r3, #2]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d06d      	beq.n	800ceb0 <main+0x420>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800cdd4:	f001 fba2 	bl	800e51c <sen5x_Get_sen5x_enable_state>
 800cdd8:	0003      	movs	r3, r0
 800cdda:	001a      	movs	r2, r3
 800cddc:	2301      	movs	r3, #1
 800cdde:	4053      	eors	r3, r2
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d006      	beq.n	800cdf4 <main+0x364>
 800cde6:	4b2e      	ldr	r3, [pc, #184]	@ (800cea0 <main+0x410>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d002      	beq.n	800cdf4 <main+0x364>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800cdee:	2000      	movs	r0, #0
 800cdf0:	f001 fbd0 	bl	800e594 <sen5x_enable>
        }
        sen5x_statemachine();
 800cdf4:	f002 f968 	bl	800f0c8 <sen5x_statemachine>
 800cdf8:	e07b      	b.n	800cef2 <main+0x462>
 800cdfa:	46c0      	nop			@ (mov r8, r8)
 800cdfc:	00000289 	.word	0x00000289
 800ce00:	200021b0 	.word	0x200021b0
 800ce04:	20002170 	.word	0x20002170
 800ce08:	0802c4dc 	.word	0x0802c4dc
 800ce0c:	0802c508 	.word	0x0802c508
 800ce10:	08080194 	.word	0x08080194
 800ce14:	200010f7 	.word	0x200010f7
 800ce18:	200010f5 	.word	0x200010f5
 800ce1c:	20001118 	.word	0x20001118
 800ce20:	20002160 	.word	0x20002160
 800ce24:	0802c50c 	.word	0x0802c50c
 800ce28:	0802c528 	.word	0x0802c528
 800ce2c:	d70a3d71 	.word	0xd70a3d71
 800ce30:	400d70a3 	.word	0x400d70a3
 800ce34:	0802c52c 	.word	0x0802c52c
 800ce38:	20001100 	.word	0x20001100
 800ce3c:	200022e8 	.word	0x200022e8
 800ce40:	2000119c 	.word	0x2000119c
 800ce44:	200021f0 	.word	0x200021f0
 800ce48:	20001070 	.word	0x20001070
 800ce4c:	200010ac 	.word	0x200010ac
 800ce50:	0802c58c 	.word	0x0802c58c
 800ce54:	0802e2ec 	.word	0x0802e2ec
 800ce58:	200023a0 	.word	0x200023a0
 800ce5c:	20000e84 	.word	0x20000e84
 800ce60:	20000f38 	.word	0x20000f38
 800ce64:	000061a8 	.word	0x000061a8
 800ce68:	20001114 	.word	0x20001114
 800ce6c:	200010fa 	.word	0x200010fa
 800ce70:	0802c5a0 	.word	0x0802c5a0
 800ce74:	200000a4 	.word	0x200000a4
 800ce78:	0000c350 	.word	0x0000c350
 800ce7c:	200005ac 	.word	0x200005ac
 800ce80:	2000111c 	.word	0x2000111c
 800ce84:	200010f9 	.word	0x200010f9
 800ce88:	0802c5d4 	.word	0x0802c5d4
 800ce8c:	0802c608 	.word	0x0802c608
 800ce90:	200000a3 	.word	0x200000a3
 800ce94:	200010fc 	.word	0x200010fc
 800ce98:	200010f6 	.word	0x200010f6
 800ce9c:	200010f4 	.word	0x200010f4
 800cea0:	20002151 	.word	0x20002151
 800cea4:	200011c4 	.word	0x200011c4
 800cea8:	00001194 	.word	0x00001194
 800ceac:	200010fb 	.word	0x200010fb
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800ceb0:	4b52      	ldr	r3, [pc, #328]	@ (800cffc <main+0x56c>)
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d81c      	bhi.n	800cef2 <main+0x462>
 800ceb8:	4b51      	ldr	r3, [pc, #324]	@ (800d000 <main+0x570>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	2201      	movs	r2, #1
 800cebe:	4053      	eors	r3, r2
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d015      	beq.n	800cef2 <main+0x462>
 800cec6:	4b4f      	ldr	r3, [pc, #316]	@ (800d004 <main+0x574>)
 800cec8:	789b      	ldrb	r3, [r3, #2]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d011      	beq.n	800cef2 <main+0x462>
        Info("Battery level insufficient for sen5x operation");
 800cece:	4a4e      	ldr	r2, [pc, #312]	@ (800d008 <main+0x578>)
 800ced0:	4b4e      	ldr	r3, [pc, #312]	@ (800d00c <main+0x57c>)
 800ced2:	0019      	movs	r1, r3
 800ced4:	2002      	movs	r0, #2
 800ced6:	f006 ff7b 	bl	8013dd0 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800ceda:	4b4a      	ldr	r3, [pc, #296]	@ (800d004 <main+0x574>)
 800cedc:	2200      	movs	r2, #0
 800cede:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800cee0:	4b4b      	ldr	r3, [pc, #300]	@ (800d010 <main+0x580>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800cee6:	4b4b      	ldr	r3, [pc, #300]	@ (800d014 <main+0x584>)
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <main+0x462>
          sen5x_Power_Off();
 800ceee:	f001 fbdd 	bl	800e6ac <sen5x_Power_Off>
        }
      }
      if (SensorProbe.ESP_Present && !espfailshown) {
 800cef2:	4b49      	ldr	r3, [pc, #292]	@ (800d018 <main+0x588>)
 800cef4:	79db      	ldrb	r3, [r3, #7]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00d      	beq.n	800cf16 <main+0x486>
 800cefa:	4b48      	ldr	r3, [pc, #288]	@ (800d01c <main+0x58c>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	2201      	movs	r2, #1
 800cf00:	4053      	eors	r3, r2
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d006      	beq.n	800cf16 <main+0x486>
        ESPstate = ESP_Upkeep();
 800cf08:	f7fa fb88 	bl	800761c <ESP_Upkeep>
 800cf0c:	0003      	movs	r3, r0
 800cf0e:	001a      	movs	r2, r3
 800cf10:	4b43      	ldr	r3, [pc, #268]	@ (800d020 <main+0x590>)
 800cf12:	701a      	strb	r2, [r3, #0]
 800cf14:	e008      	b.n	800cf28 <main+0x498>
      }
      else {
        Error("ESP failed during init");
 800cf16:	4a43      	ldr	r2, [pc, #268]	@ (800d024 <main+0x594>)
 800cf18:	4b43      	ldr	r3, [pc, #268]	@ (800d028 <main+0x598>)
 800cf1a:	0019      	movs	r1, r3
 800cf1c:	2001      	movs	r0, #1
 800cf1e:	f006 ff57 	bl	8013dd0 <CreateLine>
        espfailshown = true;
 800cf22:	4b3e      	ldr	r3, [pc, #248]	@ (800d01c <main+0x58c>)
 800cf24:	2201      	movs	r2, #1
 800cf26:	701a      	strb	r2, [r3, #0]
      }
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800cf28:	4b40      	ldr	r3, [pc, #256]	@ (800d02c <main+0x59c>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	4053      	eors	r3, r2
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00f      	beq.n	800cf56 <main+0x4c6>
 800cf36:	4b3e      	ldr	r3, [pc, #248]	@ (800d030 <main+0x5a0>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	4053      	eors	r3, r2
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d008      	beq.n	800cf56 <main+0x4c6>
 800cf44:	4b3b      	ldr	r3, [pc, #236]	@ (800d034 <main+0x5a4>)
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	4053      	eors	r3, r2
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <main+0x4c6>
      Device_Test();  // for device with startup time
 800cf52:	f000 fcb3 	bl	800d8bc <Device_Test>
    }
    if (!usbPluggedIn) {
 800cf56:	4b38      	ldr	r3, [pc, #224]	@ (800d038 <main+0x5a8>)
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	4053      	eors	r3, r2
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d030      	beq.n	800cfc6 <main+0x536>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800cf64:	4b35      	ldr	r3, [pc, #212]	@ (800d03c <main+0x5ac>)
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	4053      	eors	r3, r2
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d029      	beq.n	800cfc6 <main+0x536>
 800cf72:	f000 fd21 	bl	800d9b8 <AllDevicesReady>
 800cf76:	1e03      	subs	r3, r0, #0
 800cf78:	d025      	beq.n	800cfc6 <main+0x536>
 800cf7a:	4b31      	ldr	r3, [pc, #196]	@ (800d040 <main+0x5b0>)
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d021      	beq.n	800cfc6 <main+0x536>
        EnabledConnectedDevices();
 800cf82:	f000 fe65 	bl	800dc50 <EnabledConnectedDevices>
        if (ReadSolarVoltage() > 4900) {  // if battery is fully charged and sun is shining wake-up about every 5 minutes
 800cf86:	f7fc fd95 	bl	8009ab4 <ReadSolarVoltage>
 800cf8a:	0003      	movs	r3, r0
 800cf8c:	001a      	movs	r2, r3
 800cf8e:	4b2d      	ldr	r3, [pc, #180]	@ (800d044 <main+0x5b4>)
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d90c      	bls.n	800cfae <main+0x51e>
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM_SUN:WAIT_WITHOUT_PM_SUN);
 800cf94:	4b20      	ldr	r3, [pc, #128]	@ (800d018 <main+0x588>)
 800cf96:	795b      	ldrb	r3, [r3, #5]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <main+0x512>
 800cf9c:	2382      	movs	r3, #130	@ 0x82
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	e001      	b.n	800cfa6 <main+0x516>
 800cfa2:	238c      	movs	r3, #140	@ 0x8c
 800cfa4:	005b      	lsls	r3, r3, #1
 800cfa6:	0018      	movs	r0, r3
 800cfa8:	f7fd fb48 	bl	800a63c <Enter_Stop_Mode>
 800cfac:	e00b      	b.n	800cfc6 <main+0x536>
        }
        else {
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800cfae:	4b1a      	ldr	r3, [pc, #104]	@ (800d018 <main+0x588>)
 800cfb0:	795b      	ldrb	r3, [r3, #5]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d002      	beq.n	800cfbc <main+0x52c>
 800cfb6:	23d7      	movs	r3, #215	@ 0xd7
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	e001      	b.n	800cfc0 <main+0x530>
 800cfbc:	23dc      	movs	r3, #220	@ 0xdc
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	0018      	movs	r0, r3
 800cfc2:	f7fd fb3b 	bl	800a63c <Enter_Stop_Mode>
        }
      }
    }
    if (u1_rx_buff[0] != '\0') {
 800cfc6:	4b20      	ldr	r3, [pc, #128]	@ (800d048 <main+0x5b8>)
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <main+0x542>
      check_cli_command();
 800cfce:	f000 f8c9 	bl	800d164 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800cfd2:	f7fc fdc3 	bl	8009b5c <Check_USB_PowerOn>
 800cfd6:	1e03      	subs	r3, r0, #0
 800cfd8:	d100      	bne.n	800cfdc <main+0x54c>
 800cfda:	e624      	b.n	800cc26 <main+0x196>
 800cfdc:	4b1b      	ldr	r3, [pc, #108]	@ (800d04c <main+0x5bc>)
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	4053      	eors	r3, r2
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d100      	bne.n	800cfec <main+0x55c>
 800cfea:	e61c      	b.n	800cc26 <main+0x196>
      Process_USB_input(GetUsbRxPointer());
 800cfec:	f016 f83c 	bl	8023068 <GetUsbRxPointer>
 800cff0:	0003      	movs	r3, r0
 800cff2:	0018      	movs	r0, r3
 800cff4:	f7fc fa68 	bl	80094c8 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800cff8:	e615      	b.n	800cc26 <main+0x196>
 800cffa:	46c0      	nop			@ (mov r8, r8)
 800cffc:	20001118 	.word	0x20001118
 800d000:	200000a3 	.word	0x200000a3
 800d004:	2000111c 	.word	0x2000111c
 800d008:	0802c60c 	.word	0x0802c60c
 800d00c:	0802c508 	.word	0x0802c508
 800d010:	200011c2 	.word	0x200011c2
 800d014:	200011c1 	.word	0x200011c1
 800d018:	20001124 	.word	0x20001124
 800d01c:	200010f8 	.word	0x200010f8
 800d020:	200010fc 	.word	0x200010fc
 800d024:	0802c63c 	.word	0x0802c63c
 800d028:	0802c528 	.word	0x0802c528
 800d02c:	200010f4 	.word	0x200010f4
 800d030:	200010f5 	.word	0x200010f5
 800d034:	200010f6 	.word	0x200010f6
 800d038:	20002151 	.word	0x20002151
 800d03c:	20002152 	.word	0x20002152
 800d040:	200005b3 	.word	0x200005b3
 800d044:	00001324 	.word	0x00001324
 800d048:	20001100 	.word	0x20001100
 800d04c:	200005af 	.word	0x200005af

0800d050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d050:	b590      	push	{r4, r7, lr}
 800d052:	b09d      	sub	sp, #116	@ 0x74
 800d054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d056:	2438      	movs	r4, #56	@ 0x38
 800d058:	193b      	adds	r3, r7, r4
 800d05a:	0018      	movs	r0, r3
 800d05c:	2338      	movs	r3, #56	@ 0x38
 800d05e:	001a      	movs	r2, r3
 800d060:	2100      	movs	r1, #0
 800d062:	f019 fa27 	bl	80264b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d066:	2324      	movs	r3, #36	@ 0x24
 800d068:	18fb      	adds	r3, r7, r3
 800d06a:	0018      	movs	r0, r3
 800d06c:	2314      	movs	r3, #20
 800d06e:	001a      	movs	r2, r3
 800d070:	2100      	movs	r1, #0
 800d072:	f019 fa1f 	bl	80264b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d076:	003b      	movs	r3, r7
 800d078:	0018      	movs	r0, r3
 800d07a:	2324      	movs	r3, #36	@ 0x24
 800d07c:	001a      	movs	r2, r3
 800d07e:	2100      	movs	r1, #0
 800d080:	f019 fa18 	bl	80264b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d084:	4b34      	ldr	r3, [pc, #208]	@ (800d158 <SystemClock_Config+0x108>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a34      	ldr	r2, [pc, #208]	@ (800d15c <SystemClock_Config+0x10c>)
 800d08a:	401a      	ands	r2, r3
 800d08c:	4b32      	ldr	r3, [pc, #200]	@ (800d158 <SystemClock_Config+0x108>)
 800d08e:	2180      	movs	r1, #128	@ 0x80
 800d090:	0109      	lsls	r1, r1, #4
 800d092:	430a      	orrs	r2, r1
 800d094:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d096:	f00e f831 	bl	801b0fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800d09a:	4b31      	ldr	r3, [pc, #196]	@ (800d160 <SystemClock_Config+0x110>)
 800d09c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d09e:	4a2f      	ldr	r2, [pc, #188]	@ (800d15c <SystemClock_Config+0x10c>)
 800d0a0:	401a      	ands	r2, r3
 800d0a2:	4b2f      	ldr	r3, [pc, #188]	@ (800d160 <SystemClock_Config+0x110>)
 800d0a4:	2180      	movs	r1, #128	@ 0x80
 800d0a6:	0149      	lsls	r1, r1, #5
 800d0a8:	430a      	orrs	r2, r1
 800d0aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800d0ac:	193b      	adds	r3, r7, r4
 800d0ae:	2226      	movs	r2, #38	@ 0x26
 800d0b0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d0b2:	193b      	adds	r3, r7, r4
 800d0b4:	2280      	movs	r2, #128	@ 0x80
 800d0b6:	0052      	lsls	r2, r2, #1
 800d0b8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d0ba:	0021      	movs	r1, r4
 800d0bc:	187b      	adds	r3, r7, r1
 800d0be:	2201      	movs	r2, #1
 800d0c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d0c2:	187b      	adds	r3, r7, r1
 800d0c4:	2210      	movs	r2, #16
 800d0c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800d0c8:	187b      	adds	r3, r7, r1
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800d0ce:	187b      	adds	r3, r7, r1
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d0d4:	187b      	adds	r3, r7, r1
 800d0d6:	0018      	movs	r0, r3
 800d0d8:	f00e f88a 	bl	801b1f0 <HAL_RCC_OscConfig>
 800d0dc:	1e03      	subs	r3, r0, #0
 800d0de:	d001      	beq.n	800d0e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d0e0:	f000 f922 	bl	800d328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d0e4:	2124      	movs	r1, #36	@ 0x24
 800d0e6:	187b      	adds	r3, r7, r1
 800d0e8:	220f      	movs	r2, #15
 800d0ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800d0ec:	187b      	adds	r3, r7, r1
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d0f2:	187b      	adds	r3, r7, r1
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d0f8:	187b      	adds	r3, r7, r1
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d0fe:	187b      	adds	r3, r7, r1
 800d100:	2200      	movs	r2, #0
 800d102:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d104:	187b      	adds	r3, r7, r1
 800d106:	2100      	movs	r1, #0
 800d108:	0018      	movs	r0, r3
 800d10a:	f00e fc45 	bl	801b998 <HAL_RCC_ClockConfig>
 800d10e:	1e03      	subs	r3, r0, #0
 800d110:	d001      	beq.n	800d116 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800d112:	f000 f909 	bl	800d328 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800d116:	003b      	movs	r3, r7
 800d118:	226d      	movs	r2, #109	@ 0x6d
 800d11a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d11c:	003b      	movs	r3, r7
 800d11e:	2200      	movs	r2, #0
 800d120:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800d122:	003b      	movs	r3, r7
 800d124:	2200      	movs	r2, #0
 800d126:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d128:	003b      	movs	r3, r7
 800d12a:	2200      	movs	r2, #0
 800d12c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d12e:	003b      	movs	r3, r7
 800d130:	2280      	movs	r2, #128	@ 0x80
 800d132:	0252      	lsls	r2, r2, #9
 800d134:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d136:	003b      	movs	r3, r7
 800d138:	2280      	movs	r2, #128	@ 0x80
 800d13a:	04d2      	lsls	r2, r2, #19
 800d13c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d13e:	003b      	movs	r3, r7
 800d140:	0018      	movs	r0, r3
 800d142:	f00e fe4d 	bl	801bde0 <HAL_RCCEx_PeriphCLKConfig>
 800d146:	1e03      	subs	r3, r0, #0
 800d148:	d001      	beq.n	800d14e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800d14a:	f000 f8ed 	bl	800d328 <Error_Handler>
  }
}
 800d14e:	46c0      	nop			@ (mov r8, r8)
 800d150:	46bd      	mov	sp, r7
 800d152:	b01d      	add	sp, #116	@ 0x74
 800d154:	bd90      	pop	{r4, r7, pc}
 800d156:	46c0      	nop			@ (mov r8, r8)
 800d158:	40007000 	.word	0x40007000
 800d15c:	ffffe7ff 	.word	0xffffe7ff
 800d160:	40021000 	.word	0x40021000

0800d164 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800d164:	b580      	push	{r7, lr}
 800d166:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800d168:	4b40      	ldr	r3, [pc, #256]	@ (800d26c <check_cli_command+0x108>)
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	3b61      	subs	r3, #97	@ 0x61
 800d16e:	2b15      	cmp	r3, #21
 800d170:	d845      	bhi.n	800d1fe <check_cli_command+0x9a>
 800d172:	009a      	lsls	r2, r3, #2
 800d174:	4b3e      	ldr	r3, [pc, #248]	@ (800d270 <check_cli_command+0x10c>)
 800d176:	18d3      	adds	r3, r2, r3
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800d17c:	4b3d      	ldr	r3, [pc, #244]	@ (800d274 <check_cli_command+0x110>)
 800d17e:	0018      	movs	r0, r3
 800d180:	f019 f846 	bl	8026210 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800d184:	2003      	movs	r0, #3
 800d186:	f006 fe9d 	bl	8013ec4 <SetVerboseLevel>
      break;
 800d18a:	e069      	b.n	800d260 <check_cli_command+0xfc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800d18c:	f7fb fc6c 	bl	8008a68 <PC_show_Keys>
    break;
 800d190:	e066      	b.n	800d260 <check_cli_command+0xfc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800d192:	f7f7 fb7d 	bl	8004890 <forceNTPupdate>
    break;
 800d196:	e063      	b.n	800d260 <check_cli_command+0xfc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800d198:	4b37      	ldr	r3, [pc, #220]	@ (800d278 <check_cli_command+0x114>)
 800d19a:	0018      	movs	r0, r3
 800d19c:	f019 f838 	bl	8026210 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800d1a0:	2002      	movs	r0, #2
 800d1a2:	f006 fe8f 	bl	8013ec4 <SetVerboseLevel>
      break;
 800d1a6:	e05b      	b.n	800d260 <check_cli_command+0xfc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800d1a8:	4b34      	ldr	r3, [pc, #208]	@ (800d27c <check_cli_command+0x118>)
 800d1aa:	0018      	movs	r0, r3
 800d1ac:	f019 f830 	bl	8026210 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800d1b0:	2001      	movs	r0, #1
 800d1b2:	f006 fe87 	bl	8013ec4 <SetVerboseLevel>
      break;
 800d1b6:	e053      	b.n	800d260 <check_cli_command+0xfc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800d1b8:	4b31      	ldr	r3, [pc, #196]	@ (800d280 <check_cli_command+0x11c>)
 800d1ba:	0018      	movs	r0, r3
 800d1bc:	f019 f828 	bl	8026210 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	f006 fe7f 	bl	8013ec4 <SetVerboseLevel>
      break;
 800d1c6:	e04b      	b.n	800d260 <check_cli_command+0xfc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800d1c8:	f007 fb7a 	bl	80148c0 <HAL_GetTick>
 800d1cc:	0002      	movs	r2, r0
 800d1ce:	4b2d      	ldr	r3, [pc, #180]	@ (800d284 <check_cli_command+0x120>)
 800d1d0:	601a      	str	r2, [r3, #0]
      break;
 800d1d2:	e045      	b.n	800d260 <check_cli_command+0xfc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800d1d4:	f7fc fdca 	bl	8009d6c <showTime>
      break;
 800d1d8:	e042      	b.n	800d260 <check_cli_command+0xfc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
 800d1da:	4b2b      	ldr	r3, [pc, #172]	@ (800d288 <check_cli_command+0x124>)
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	1e5a      	subs	r2, r3, #1
 800d1e0:	4193      	sbcs	r3, r2
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	4053      	eors	r3, r2
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	1c1a      	adds	r2, r3, #0
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	4013      	ands	r3, r2
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	4b25      	ldr	r3, [pc, #148]	@ (800d288 <check_cli_command+0x124>)
 800d1f4:	701a      	strb	r2, [r3, #0]
      break;
 800d1f6:	e033      	b.n	800d260 <check_cli_command+0xfc>
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800d1f8:	f006 fe7e 	bl	8013ef8 <BinaryReleaseInfo>
      break;
 800d1fc:	e030      	b.n	800d260 <check_cli_command+0xfc>
    default:
      printf("Error unknown request from Serial UART1 (TTY)\r\n");
 800d1fe:	4b23      	ldr	r3, [pc, #140]	@ (800d28c <check_cli_command+0x128>)
 800d200:	0018      	movs	r0, r3
 800d202:	f019 f805 	bl	8026210 <puts>
      printf("\r\n\r\nPossible commands:\r\n\r\n");
 800d206:	4b22      	ldr	r3, [pc, #136]	@ (800d290 <check_cli_command+0x12c>)
 800d208:	0018      	movs	r0, r3
 800d20a:	f019 f801 	bl	8026210 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800d20e:	4b21      	ldr	r3, [pc, #132]	@ (800d294 <check_cli_command+0x130>)
 800d210:	0018      	movs	r0, r3
 800d212:	f018 fffd 	bl	8026210 <puts>
      printf("e - show EEPROM\r\n");
 800d216:	4b20      	ldr	r3, [pc, #128]	@ (800d298 <check_cli_command+0x134>)
 800d218:	0018      	movs	r0, r3
 800d21a:	f018 fff9 	bl	8026210 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800d21e:	4b1f      	ldr	r3, [pc, #124]	@ (800d29c <check_cli_command+0x138>)
 800d220:	0018      	movs	r0, r3
 800d222:	f018 fff5 	bl	8026210 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800d226:	4b1e      	ldr	r3, [pc, #120]	@ (800d2a0 <check_cli_command+0x13c>)
 800d228:	0018      	movs	r0, r3
 800d22a:	f018 fff1 	bl	8026210 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800d22e:	4b1d      	ldr	r3, [pc, #116]	@ (800d2a4 <check_cli_command+0x140>)
 800d230:	0018      	movs	r0, r3
 800d232:	f018 ffed 	bl	8026210 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800d236:	4b1c      	ldr	r3, [pc, #112]	@ (800d2a8 <check_cli_command+0x144>)
 800d238:	0018      	movs	r0, r3
 800d23a:	f018 ffe9 	bl	8026210 <puts>
      printf("s - Start particle measurement\r\n");
 800d23e:	4b1b      	ldr	r3, [pc, #108]	@ (800d2ac <check_cli_command+0x148>)
 800d240:	0018      	movs	r0, r3
 800d242:	f018 ffe5 	bl	8026210 <puts>
      printf("t - Show actual system time\r\n");
 800d246:	4b1a      	ldr	r3, [pc, #104]	@ (800d2b0 <check_cli_command+0x14c>)
 800d248:	0018      	movs	r0, r3
 800d24a:	f018 ffe1 	bl	8026210 <puts>
      printf("u - USB logging toggle\r\n");
 800d24e:	4b19      	ldr	r3, [pc, #100]	@ (800d2b4 <check_cli_command+0x150>)
 800d250:	0018      	movs	r0, r3
 800d252:	f018 ffdd 	bl	8026210 <puts>
      printf("v - Show system version\r\n");
 800d256:	4b18      	ldr	r3, [pc, #96]	@ (800d2b8 <check_cli_command+0x154>)
 800d258:	0018      	movs	r0, r3
 800d25a:	f018 ffd9 	bl	8026210 <puts>
  break;
 800d25e:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800d260:	4b02      	ldr	r3, [pc, #8]	@ (800d26c <check_cli_command+0x108>)
 800d262:	2200      	movs	r2, #0
 800d264:	701a      	strb	r2, [r3, #0]
}
 800d266:	46c0      	nop			@ (mov r8, r8)
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	20001100 	.word	0x20001100
 800d270:	0802e294 	.word	0x0802e294
 800d274:	0802c654 	.word	0x0802c654
 800d278:	0802c670 	.word	0x0802c670
 800d27c:	0802c68c 	.word	0x0802c68c
 800d280:	0802c6ac 	.word	0x0802c6ac
 800d284:	200011d0 	.word	0x200011d0
 800d288:	200010f7 	.word	0x200010f7
 800d28c:	0802c6c8 	.word	0x0802c6c8
 800d290:	0802c6f8 	.word	0x0802c6f8
 800d294:	0802c714 	.word	0x0802c714
 800d298:	0802c734 	.word	0x0802c734
 800d29c:	0802c748 	.word	0x0802c748
 800d2a0:	0802c76c 	.word	0x0802c76c
 800d2a4:	0802c78c 	.word	0x0802c78c
 800d2a8:	0802c7b0 	.word	0x0802c7b0
 800d2ac:	0802c7d0 	.word	0x0802c7d0
 800d2b0:	0802c7f0 	.word	0x0802c7f0
 800d2b4:	0802c810 	.word	0x0802c810
 800d2b8:	0802c828 	.word	0x0802c828

0800d2bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d2c4:	4907      	ldr	r1, [pc, #28]	@ (800d2e4 <HAL_UART_RxCpltCallback+0x28>)
 800d2c6:	4b08      	ldr	r3, [pc, #32]	@ (800d2e8 <HAL_UART_RxCpltCallback+0x2c>)
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	0018      	movs	r0, r3
 800d2cc:	f010 f94a 	bl	801d564 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800d2d0:	4904      	ldr	r1, [pc, #16]	@ (800d2e4 <HAL_UART_RxCpltCallback+0x28>)
 800d2d2:	4b05      	ldr	r3, [pc, #20]	@ (800d2e8 <HAL_UART_RxCpltCallback+0x2c>)
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	0018      	movs	r0, r3
 800d2d8:	f010 f944 	bl	801d564 <HAL_UART_Receive_IT>
}
 800d2dc:	46c0      	nop			@ (mov r8, r8)
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	b002      	add	sp, #8
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	20001100 	.word	0x20001100
 800d2e8:	200022e8 	.word	0x200022e8

0800d2ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	0002      	movs	r2, r0
 800d2f4:	1dbb      	adds	r3, r7, #6
 800d2f6:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800d2f8:	1dbb      	adds	r3, r7, #6
 800d2fa:	881a      	ldrh	r2, [r3, #0]
 800d2fc:	2380      	movs	r3, #128	@ 0x80
 800d2fe:	021b      	lsls	r3, r3, #8
 800d300:	429a      	cmp	r2, r3
 800d302:	d10b      	bne.n	800d31c <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800d304:	f006 f806 	bl	8013314 <setuserToggle>
    if (GetPMSensorPresence()) {
 800d308:	f000 f860 	bl	800d3cc <GetPMSensorPresence>
 800d30c:	1e03      	subs	r3, r0, #0
 800d30e:	d005      	beq.n	800d31c <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800d310:	4b04      	ldr	r3, [pc, #16]	@ (800d324 <HAL_GPIO_EXTI_Callback+0x38>)
 800d312:	2201      	movs	r2, #1
 800d314:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800d316:	2000      	movs	r0, #0
 800d318:	f001 f90a 	bl	800e530 <sen5x_Set_sen5x_state>
    }
  }
}
 800d31c:	46c0      	nop			@ (mov r8, r8)
 800d31e:	46bd      	mov	sp, r7
 800d320:	b002      	add	sp, #8
 800d322:	bd80      	pop	{r7, pc}
 800d324:	2000111c 	.word	0x2000111c

0800d328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800d32c:	f005 fbc6 	bl	8012abc <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d330:	b672      	cpsid	i
}
 800d332:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800d334:	4a05      	ldr	r2, [pc, #20]	@ (800d34c <Error_Handler+0x24>)
 800d336:	4b06      	ldr	r3, [pc, #24]	@ (800d350 <Error_Handler+0x28>)
 800d338:	0019      	movs	r1, r3
 800d33a:	2001      	movs	r0, #1
 800d33c:	f006 fd48 	bl	8013dd0 <CreateLine>

    HAL_Delay(2500);
 800d340:	4b04      	ldr	r3, [pc, #16]	@ (800d354 <Error_Handler+0x2c>)
 800d342:	0018      	movs	r0, r3
 800d344:	f007 fac6 	bl	80148d4 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800d348:	46c0      	nop			@ (mov r8, r8)
 800d34a:	e7f3      	b.n	800d334 <Error_Handler+0xc>
 800d34c:	0802c844 	.word	0x0802c844
 800d350:	0802c528 	.word	0x0802c528
 800d354:	000009c4 	.word	0x000009c4

0800d358 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800d358:	b580      	push	{r7, lr}
 800d35a:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800d35c:	4b19      	ldr	r3, [pc, #100]	@ (800d3c4 <testInit+0x6c>)
 800d35e:	2200      	movs	r2, #0
 800d360:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800d362:	4b18      	ldr	r3, [pc, #96]	@ (800d3c4 <testInit+0x6c>)
 800d364:	2200      	movs	r2, #0
 800d366:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800d368:	4b16      	ldr	r3, [pc, #88]	@ (800d3c4 <testInit+0x6c>)
 800d36a:	2200      	movs	r2, #0
 800d36c:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800d36e:	4b15      	ldr	r3, [pc, #84]	@ (800d3c4 <testInit+0x6c>)
 800d370:	2200      	movs	r2, #0
 800d372:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800d374:	4b13      	ldr	r3, [pc, #76]	@ (800d3c4 <testInit+0x6c>)
 800d376:	2200      	movs	r2, #0
 800d378:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800d37a:	4b12      	ldr	r3, [pc, #72]	@ (800d3c4 <testInit+0x6c>)
 800d37c:	2200      	movs	r2, #0
 800d37e:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800d380:	4b10      	ldr	r3, [pc, #64]	@ (800d3c4 <testInit+0x6c>)
 800d382:	2200      	movs	r2, #0
 800d384:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800d386:	4b0f      	ldr	r3, [pc, #60]	@ (800d3c4 <testInit+0x6c>)
 800d388:	2200      	movs	r2, #0
 800d38a:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800d38c:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c4 <testInit+0x6c>)
 800d38e:	2200      	movs	r2, #0
 800d390:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800d392:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c8 <testInit+0x70>)
 800d394:	2201      	movs	r2, #1
 800d396:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800d398:	4b0b      	ldr	r3, [pc, #44]	@ (800d3c8 <testInit+0x70>)
 800d39a:	2201      	movs	r2, #1
 800d39c:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800d39e:	4b0a      	ldr	r3, [pc, #40]	@ (800d3c8 <testInit+0x70>)
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800d3a4:	4b08      	ldr	r3, [pc, #32]	@ (800d3c8 <testInit+0x70>)
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800d3aa:	4b07      	ldr	r3, [pc, #28]	@ (800d3c8 <testInit+0x70>)
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800d3b0:	4b05      	ldr	r3, [pc, #20]	@ (800d3c8 <testInit+0x70>)
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800d3b6:	4b04      	ldr	r3, [pc, #16]	@ (800d3c8 <testInit+0x70>)
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	719a      	strb	r2, [r3, #6]
}
 800d3bc:	46c0      	nop			@ (mov r8, r8)
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	46c0      	nop			@ (mov r8, r8)
 800d3c4:	20001124 	.word	0x20001124
 800d3c8:	2000111c 	.word	0x2000111c

0800d3cc <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800d3d0:	4b02      	ldr	r3, [pc, #8]	@ (800d3dc <GetPMSensorPresence+0x10>)
 800d3d2:	795b      	ldrb	r3, [r3, #5]
}
 800d3d4:	0018      	movs	r0, r3
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	46c0      	nop			@ (mov r8, r8)
 800d3dc:	20001124 	.word	0x20001124

0800d3e0 <DisablePMSensor>:

void DisablePMSensor() {
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800d3e4:	4b02      	ldr	r3, [pc, #8]	@ (800d3f0 <DisablePMSensor+0x10>)
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	715a      	strb	r2, [r3, #5]
}
 800d3ea:	46c0      	nop			@ (mov r8, r8)
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	20001124 	.word	0x20001124

0800d3f4 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800d3f8:	4b02      	ldr	r3, [pc, #8]	@ (800d404 <IsAHT20SensorPresent+0x10>)
 800d3fa:	789b      	ldrb	r3, [r3, #2]
}
 800d3fc:	0018      	movs	r0, r3
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	46c0      	nop			@ (mov r8, r8)
 800d404:	20001124 	.word	0x20001124

0800d408 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800d408:	b580      	push	{r7, lr}
 800d40a:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800d40c:	4b02      	ldr	r3, [pc, #8]	@ (800d418 <IsBMP280SensorPresent+0x10>)
 800d40e:	791b      	ldrb	r3, [r3, #4]
}
 800d410:	0018      	movs	r0, r3
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	46c0      	nop			@ (mov r8, r8)
 800d418:	20001124 	.word	0x20001124

0800d41c <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800d41c:	b580      	push	{r7, lr}
 800d41e:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800d420:	4b02      	ldr	r3, [pc, #8]	@ (800d42c <IsENS160SensorPresent+0x10>)
 800d422:	78db      	ldrb	r3, [r3, #3]
}
 800d424:	0018      	movs	r0, r3
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	46c0      	nop			@ (mov r8, r8)
 800d42c:	20001124 	.word	0x20001124

0800d430 <IsSGPPresent>:

bool IsSGPPresent() {
 800d430:	b580      	push	{r7, lr}
 800d432:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800d434:	4b02      	ldr	r3, [pc, #8]	@ (800d440 <IsSGPPresent+0x10>)
 800d436:	785b      	ldrb	r3, [r3, #1]
}
 800d438:	0018      	movs	r0, r3
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	46c0      	nop			@ (mov r8, r8)
 800d440:	20001124 	.word	0x20001124

0800d444 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	0002      	movs	r2, r0
 800d44c:	1dfb      	adds	r3, r7, #7
 800d44e:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800d450:	4b0b      	ldr	r3, [pc, #44]	@ (800d480 <SetVOCSensorDIS_ENA+0x3c>)
 800d452:	1dfa      	adds	r2, r7, #7
 800d454:	7812      	ldrb	r2, [r2, #0]
 800d456:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800d458:	4b0a      	ldr	r3, [pc, #40]	@ (800d484 <SetVOCSensorDIS_ENA+0x40>)
 800d45a:	1dfa      	adds	r2, r7, #7
 800d45c:	7812      	ldrb	r2, [r2, #0]
 800d45e:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800d460:	1dfb      	adds	r3, r7, #7
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d001      	beq.n	800d46c <SetVOCSensorDIS_ENA+0x28>
 800d468:	4b07      	ldr	r3, [pc, #28]	@ (800d488 <SetVOCSensorDIS_ENA+0x44>)
 800d46a:	e000      	b.n	800d46e <SetVOCSensorDIS_ENA+0x2a>
 800d46c:	4b07      	ldr	r3, [pc, #28]	@ (800d48c <SetVOCSensorDIS_ENA+0x48>)
 800d46e:	4a08      	ldr	r2, [pc, #32]	@ (800d490 <SetVOCSensorDIS_ENA+0x4c>)
 800d470:	4908      	ldr	r1, [pc, #32]	@ (800d494 <SetVOCSensorDIS_ENA+0x50>)
 800d472:	2003      	movs	r0, #3
 800d474:	f006 fcac 	bl	8013dd0 <CreateLine>
}
 800d478:	46c0      	nop			@ (mov r8, r8)
 800d47a:	46bd      	mov	sp, r7
 800d47c:	b002      	add	sp, #8
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	20001124 	.word	0x20001124
 800d484:	2000111c 	.word	0x2000111c
 800d488:	0802c870 	.word	0x0802c870
 800d48c:	0802c878 	.word	0x0802c878
 800d490:	0802c884 	.word	0x0802c884
 800d494:	0802c898 	.word	0x0802c898

0800d498 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800d498:	b580      	push	{r7, lr}
 800d49a:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800d49c:	4b02      	ldr	r3, [pc, #8]	@ (800d4a8 <IsPMSensorEnabled+0x10>)
 800d49e:	789b      	ldrb	r3, [r3, #2]
}
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	46c0      	nop			@ (mov r8, r8)
 800d4a8:	2000111c 	.word	0x2000111c

0800d4ac <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	0002      	movs	r2, r0
 800d4b4:	1dfb      	adds	r3, r7, #7
 800d4b6:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800d4b8:	4b05      	ldr	r3, [pc, #20]	@ (800d4d0 <SetVOCSensorStatus+0x24>)
 800d4ba:	7a1b      	ldrb	r3, [r3, #8]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d003      	beq.n	800d4c8 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800d4c0:	4b04      	ldr	r3, [pc, #16]	@ (800d4d4 <SetVOCSensorStatus+0x28>)
 800d4c2:	1dfa      	adds	r2, r7, #7
 800d4c4:	7812      	ldrb	r2, [r2, #0]
 800d4c6:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800d4c8:	46c0      	nop			@ (mov r8, r8)
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	b002      	add	sp, #8
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	20001124 	.word	0x20001124
 800d4d4:	2000111c 	.word	0x2000111c

0800d4d8 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	0002      	movs	r2, r0
 800d4e0:	1dfb      	adds	r3, r7, #7
 800d4e2:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800d4e4:	4b03      	ldr	r3, [pc, #12]	@ (800d4f4 <SetPMSensorStatus+0x1c>)
 800d4e6:	1dfa      	adds	r2, r7, #7
 800d4e8:	7812      	ldrb	r2, [r2, #0]
 800d4ea:	709a      	strb	r2, [r3, #2]
}
 800d4ec:	46c0      	nop			@ (mov r8, r8)
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	b002      	add	sp, #8
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	2000111c 	.word	0x2000111c

0800d4f8 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800d4fc:	4b02      	ldr	r3, [pc, #8]	@ (800d508 <SetESPMeasurementDone+0x10>)
 800d4fe:	2201      	movs	r2, #1
 800d500:	71da      	strb	r2, [r3, #7]
}
 800d502:	46c0      	nop			@ (mov r8, r8)
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	20001124 	.word	0x20001124

0800d50c <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
 800d518:	603b      	str	r3, [r7, #0]
  testInit();
 800d51a:	f7ff ff1d 	bl	800d358 <testInit>
  I2CSensors_Init(sensorI2C);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	0018      	movs	r0, r3
 800d522:	f7fa fde3 	bl	80080ec <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800d526:	f006 ff57 	bl	80143d8 <HIDS_DeviceConnected>
 800d52a:	0003      	movs	r3, r0
 800d52c:	001a      	movs	r2, r3
 800d52e:	2301      	movs	r3, #1
 800d530:	4053      	eors	r3, r2
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00c      	beq.n	800d552 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800d538:	4abf      	ldr	r2, [pc, #764]	@ (800d838 <Device_Init+0x32c>)
 800d53a:	4bc0      	ldr	r3, [pc, #768]	@ (800d83c <Device_Init+0x330>)
 800d53c:	0019      	movs	r1, r3
 800d53e:	2001      	movs	r0, #1
 800d540:	f006 fc46 	bl	8013dd0 <CreateLine>
     SensorProbe.HT_Present = false;
 800d544:	4bbe      	ldr	r3, [pc, #760]	@ (800d840 <Device_Init+0x334>)
 800d546:	2200      	movs	r2, #0
 800d548:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800d54a:	4bbe      	ldr	r3, [pc, #760]	@ (800d844 <Device_Init+0x338>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	e008      	b.n	800d564 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800d552:	4bbb      	ldr	r3, [pc, #748]	@ (800d840 <Device_Init+0x334>)
 800d554:	2201      	movs	r2, #1
 800d556:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800d558:	4abb      	ldr	r2, [pc, #748]	@ (800d848 <Device_Init+0x33c>)
 800d55a:	4bbc      	ldr	r3, [pc, #752]	@ (800d84c <Device_Init+0x340>)
 800d55c:	0019      	movs	r1, r3
 800d55e:	2003      	movs	r0, #3
 800d560:	f006 fc36 	bl	8013dd0 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800d564:	f7fe f94e 	bl	800b804 <BMP280_DeviceConnected>
 800d568:	0003      	movs	r3, r0
 800d56a:	001a      	movs	r2, r3
 800d56c:	2301      	movs	r3, #1
 800d56e:	4053      	eors	r3, r2
 800d570:	b2db      	uxtb	r3, r3
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00c      	beq.n	800d590 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800d576:	4ab6      	ldr	r2, [pc, #728]	@ (800d850 <Device_Init+0x344>)
 800d578:	4bb0      	ldr	r3, [pc, #704]	@ (800d83c <Device_Init+0x330>)
 800d57a:	0019      	movs	r1, r3
 800d57c:	2001      	movs	r0, #1
 800d57e:	f006 fc27 	bl	8013dd0 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800d582:	4baf      	ldr	r3, [pc, #700]	@ (800d840 <Device_Init+0x334>)
 800d584:	2200      	movs	r2, #0
 800d586:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800d588:	4bae      	ldr	r3, [pc, #696]	@ (800d844 <Device_Init+0x338>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	715a      	strb	r2, [r3, #5]
 800d58e:	e008      	b.n	800d5a2 <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800d590:	4bab      	ldr	r3, [pc, #684]	@ (800d840 <Device_Init+0x334>)
 800d592:	2201      	movs	r2, #1
 800d594:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800d596:	4aaf      	ldr	r2, [pc, #700]	@ (800d854 <Device_Init+0x348>)
 800d598:	4bac      	ldr	r3, [pc, #688]	@ (800d84c <Device_Init+0x340>)
 800d59a:	0019      	movs	r1, r3
 800d59c:	2003      	movs	r0, #3
 800d59e:	f006 fc17 	bl	8013dd0 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800d5a2:	f003 fdad 	bl	8011100 <SGP_DeviceConnected>
 800d5a6:	0003      	movs	r3, r0
 800d5a8:	001a      	movs	r2, r3
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	4053      	eors	r3, r2
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00c      	beq.n	800d5ce <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800d5b4:	4ba2      	ldr	r3, [pc, #648]	@ (800d840 <Device_Init+0x334>)
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800d5ba:	4aa7      	ldr	r2, [pc, #668]	@ (800d858 <Device_Init+0x34c>)
 800d5bc:	4b9f      	ldr	r3, [pc, #636]	@ (800d83c <Device_Init+0x330>)
 800d5be:	0019      	movs	r1, r3
 800d5c0:	2001      	movs	r0, #1
 800d5c2:	f006 fc05 	bl	8013dd0 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800d5c6:	4b9f      	ldr	r3, [pc, #636]	@ (800d844 <Device_Init+0x338>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	705a      	strb	r2, [r3, #1]
 800d5cc:	e00b      	b.n	800d5e6 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800d5ce:	4b9c      	ldr	r3, [pc, #624]	@ (800d840 <Device_Init+0x334>)
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800d5d4:	4b9a      	ldr	r3, [pc, #616]	@ (800d840 <Device_Init+0x334>)
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800d5da:	4aa0      	ldr	r2, [pc, #640]	@ (800d85c <Device_Init+0x350>)
 800d5dc:	4b9b      	ldr	r3, [pc, #620]	@ (800d84c <Device_Init+0x340>)
 800d5de:	0019      	movs	r1, r3
 800d5e0:	2003      	movs	r0, #3
 800d5e2:	f006 fbf5 	bl	8013dd0 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800d5e6:	f7f6 fc3f 	bl	8003e68 <ENS_DeviceConnected>
 800d5ea:	0003      	movs	r3, r0
 800d5ec:	001a      	movs	r2, r3
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	4053      	eors	r3, r2
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00c      	beq.n	800d612 <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800d5f8:	4b91      	ldr	r3, [pc, #580]	@ (800d840 <Device_Init+0x334>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800d5fe:	4a98      	ldr	r2, [pc, #608]	@ (800d860 <Device_Init+0x354>)
 800d600:	4b8e      	ldr	r3, [pc, #568]	@ (800d83c <Device_Init+0x330>)
 800d602:	0019      	movs	r1, r3
 800d604:	2001      	movs	r0, #1
 800d606:	f006 fbe3 	bl	8013dd0 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800d60a:	4b8e      	ldr	r3, [pc, #568]	@ (800d844 <Device_Init+0x338>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	719a      	strb	r2, [r3, #6]
 800d610:	e008      	b.n	800d624 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800d612:	4b8b      	ldr	r3, [pc, #556]	@ (800d840 <Device_Init+0x334>)
 800d614:	2201      	movs	r2, #1
 800d616:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800d618:	4a92      	ldr	r2, [pc, #584]	@ (800d864 <Device_Init+0x358>)
 800d61a:	4b8c      	ldr	r3, [pc, #560]	@ (800d84c <Device_Init+0x340>)
 800d61c:	0019      	movs	r1, r3
 800d61e:	2003      	movs	r0, #3
 800d620:	f006 fbd6 	bl	8013dd0 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800d624:	f7fd fd2c 	bl	800b080 <AHT20_DeviceConnected>
 800d628:	0003      	movs	r3, r0
 800d62a:	001a      	movs	r2, r3
 800d62c:	2301      	movs	r3, #1
 800d62e:	4053      	eors	r3, r2
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00c      	beq.n	800d650 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800d636:	4a8c      	ldr	r2, [pc, #560]	@ (800d868 <Device_Init+0x35c>)
 800d638:	4b80      	ldr	r3, [pc, #512]	@ (800d83c <Device_Init+0x330>)
 800d63a:	0019      	movs	r1, r3
 800d63c:	2001      	movs	r0, #1
 800d63e:	f006 fbc7 	bl	8013dd0 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800d642:	4b7f      	ldr	r3, [pc, #508]	@ (800d840 <Device_Init+0x334>)
 800d644:	2200      	movs	r2, #0
 800d646:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800d648:	4b7e      	ldr	r3, [pc, #504]	@ (800d844 <Device_Init+0x338>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	711a      	strb	r2, [r3, #4]
 800d64e:	e008      	b.n	800d662 <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800d650:	4b7b      	ldr	r3, [pc, #492]	@ (800d840 <Device_Init+0x334>)
 800d652:	2201      	movs	r2, #1
 800d654:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800d656:	4a85      	ldr	r2, [pc, #532]	@ (800d86c <Device_Init+0x360>)
 800d658:	4b7c      	ldr	r3, [pc, #496]	@ (800d84c <Device_Init+0x340>)
 800d65a:	0019      	movs	r1, r3
 800d65c:	2003      	movs	r0, #3
 800d65e:	f006 fbb7 	bl	8013dd0 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800d662:	4b77      	ldr	r3, [pc, #476]	@ (800d840 <Device_Init+0x334>)
 800d664:	785b      	ldrb	r3, [r3, #1]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d009      	beq.n	800d67e <Device_Init+0x172>
 800d66a:	4b75      	ldr	r3, [pc, #468]	@ (800d840 <Device_Init+0x334>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d005      	beq.n	800d67e <Device_Init+0x172>
    SetDBLED(false, true, false);
 800d672:	2200      	movs	r2, #0
 800d674:	2101      	movs	r1, #1
 800d676:	2000      	movs	r0, #0
 800d678:	f005 f87a 	bl	8012770 <SetDBLED>
 800d67c:	e018      	b.n	800d6b0 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800d67e:	2200      	movs	r2, #0
 800d680:	2100      	movs	r1, #0
 800d682:	2001      	movs	r0, #1
 800d684:	f005 f874 	bl	8012770 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800d688:	4b79      	ldr	r3, [pc, #484]	@ (800d870 <Device_Init+0x364>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	2101      	movs	r1, #1
 800d68e:	0018      	movs	r0, r3
 800d690:	f008 fb89 	bl	8015da6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800d694:	2380      	movs	r3, #128	@ 0x80
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	4875      	ldr	r0, [pc, #468]	@ (800d870 <Device_Init+0x364>)
 800d69a:	2201      	movs	r2, #1
 800d69c:	0019      	movs	r1, r3
 800d69e:	f008 fb82 	bl	8015da6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800d6a2:	2380      	movs	r3, #128	@ 0x80
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4872      	ldr	r0, [pc, #456]	@ (800d870 <Device_Init+0x364>)
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	0019      	movs	r1, r3
 800d6ac:	f008 fb7b 	bl	8015da6 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800d6b0:	4b64      	ldr	r3, [pc, #400]	@ (800d844 <Device_Init+0x338>)
 800d6b2:	78db      	ldrb	r3, [r3, #3]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d028      	beq.n	800d70a <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800d6b8:	4a6e      	ldr	r2, [pc, #440]	@ (800d874 <Device_Init+0x368>)
 800d6ba:	4b6f      	ldr	r3, [pc, #444]	@ (800d878 <Device_Init+0x36c>)
 800d6bc:	0019      	movs	r1, r3
 800d6be:	2002      	movs	r0, #2
 800d6c0:	f006 fb86 	bl	8013dd0 <CreateLine>
    if (!enableMicrophone(true)) {
 800d6c4:	2001      	movs	r0, #1
 800d6c6:	f004 f951 	bl	801196c <enableMicrophone>
 800d6ca:	0003      	movs	r3, r0
 800d6cc:	001a      	movs	r2, r3
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	4053      	eors	r3, r2
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d00c      	beq.n	800d6f2 <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800d6d8:	4a68      	ldr	r2, [pc, #416]	@ (800d87c <Device_Init+0x370>)
 800d6da:	4b58      	ldr	r3, [pc, #352]	@ (800d83c <Device_Init+0x330>)
 800d6dc:	0019      	movs	r1, r3
 800d6de:	2001      	movs	r0, #1
 800d6e0:	f006 fb76 	bl	8013dd0 <CreateLine>
      SensorProbe.MIC_Present = false;
 800d6e4:	4b56      	ldr	r3, [pc, #344]	@ (800d840 <Device_Init+0x334>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800d6ea:	4b56      	ldr	r3, [pc, #344]	@ (800d844 <Device_Init+0x338>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	70da      	strb	r2, [r3, #3]
 800d6f0:	e00b      	b.n	800d70a <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800d6f2:	4b53      	ldr	r3, [pc, #332]	@ (800d840 <Device_Init+0x334>)
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d6f8:	4b52      	ldr	r3, [pc, #328]	@ (800d844 <Device_Init+0x338>)
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800d6fe:	4a60      	ldr	r2, [pc, #384]	@ (800d880 <Device_Init+0x374>)
 800d700:	4b52      	ldr	r3, [pc, #328]	@ (800d84c <Device_Init+0x340>)
 800d702:	0019      	movs	r1, r3
 800d704:	2003      	movs	r0, #3
 800d706:	f006 fb63 	bl	8013dd0 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800d70a:	f001 f805 	bl	800e718 <probe_sen5x>
 800d70e:	1e03      	subs	r3, r0, #0
 800d710:	d122      	bne.n	800d758 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800d712:	4a5c      	ldr	r2, [pc, #368]	@ (800d884 <Device_Init+0x378>)
 800d714:	4b4d      	ldr	r3, [pc, #308]	@ (800d84c <Device_Init+0x340>)
 800d716:	0019      	movs	r1, r3
 800d718:	2003      	movs	r0, #3
 800d71a:	f006 fb59 	bl	8013dd0 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800d71e:	4b48      	ldr	r3, [pc, #288]	@ (800d840 <Device_Init+0x334>)
 800d720:	2201      	movs	r2, #1
 800d722:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800d724:	4b47      	ldr	r3, [pc, #284]	@ (800d844 <Device_Init+0x338>)
 800d726:	2201      	movs	r2, #1
 800d728:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d72a:	4b57      	ldr	r3, [pc, #348]	@ (800d888 <Device_Init+0x37c>)
 800d72c:	791b      	ldrb	r3, [r3, #4]
 800d72e:	2b34      	cmp	r3, #52	@ 0x34
 800d730:	d003      	beq.n	800d73a <Device_Init+0x22e>
 800d732:	4b55      	ldr	r3, [pc, #340]	@ (800d888 <Device_Init+0x37c>)
 800d734:	791b      	ldrb	r3, [r3, #4]
 800d736:	2b35      	cmp	r3, #53	@ 0x35
 800d738:	d11c      	bne.n	800d774 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800d73a:	4a54      	ldr	r2, [pc, #336]	@ (800d88c <Device_Init+0x380>)
 800d73c:	4b4e      	ldr	r3, [pc, #312]	@ (800d878 <Device_Init+0x36c>)
 800d73e:	0019      	movs	r1, r3
 800d740:	2002      	movs	r0, #2
 800d742:	f006 fb45 	bl	8013dd0 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800d746:	4b3f      	ldr	r3, [pc, #252]	@ (800d844 <Device_Init+0x338>)
 800d748:	2200      	movs	r2, #0
 800d74a:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800d74c:	4b3c      	ldr	r3, [pc, #240]	@ (800d840 <Device_Init+0x334>)
 800d74e:	2200      	movs	r2, #0
 800d750:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800d752:	f003 febb 	bl	80114cc <SGP_SoftReset>
 800d756:	e00d      	b.n	800d774 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800d758:	f000 ffa8 	bl	800e6ac <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800d75c:	4a4c      	ldr	r2, [pc, #304]	@ (800d890 <Device_Init+0x384>)
 800d75e:	4b3b      	ldr	r3, [pc, #236]	@ (800d84c <Device_Init+0x340>)
 800d760:	0019      	movs	r1, r3
 800d762:	2003      	movs	r0, #3
 800d764:	f006 fb34 	bl	8013dd0 <CreateLine>
    SensorProbe.PM_Present = false;
 800d768:	4b35      	ldr	r3, [pc, #212]	@ (800d840 <Device_Init+0x334>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800d76e:	4b35      	ldr	r3, [pc, #212]	@ (800d844 <Device_Init+0x338>)
 800d770:	2200      	movs	r2, #0
 800d772:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800d774:	4b32      	ldr	r3, [pc, #200]	@ (800d840 <Device_Init+0x334>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d001      	beq.n	800d780 <Device_Init+0x274>
 800d77c:	4b45      	ldr	r3, [pc, #276]	@ (800d894 <Device_Init+0x388>)
 800d77e:	e000      	b.n	800d782 <Device_Init+0x276>
 800d780:	4b45      	ldr	r3, [pc, #276]	@ (800d898 <Device_Init+0x38c>)
 800d782:	4a46      	ldr	r2, [pc, #280]	@ (800d89c <Device_Init+0x390>)
 800d784:	493c      	ldr	r1, [pc, #240]	@ (800d878 <Device_Init+0x36c>)
 800d786:	2002      	movs	r0, #2
 800d788:	f006 fb22 	bl	8013dd0 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800d78c:	4b2c      	ldr	r3, [pc, #176]	@ (800d840 <Device_Init+0x334>)
 800d78e:	785b      	ldrb	r3, [r3, #1]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d001      	beq.n	800d798 <Device_Init+0x28c>
 800d794:	4b3f      	ldr	r3, [pc, #252]	@ (800d894 <Device_Init+0x388>)
 800d796:	e000      	b.n	800d79a <Device_Init+0x28e>
 800d798:	4b3f      	ldr	r3, [pc, #252]	@ (800d898 <Device_Init+0x38c>)
 800d79a:	4a41      	ldr	r2, [pc, #260]	@ (800d8a0 <Device_Init+0x394>)
 800d79c:	4936      	ldr	r1, [pc, #216]	@ (800d878 <Device_Init+0x36c>)
 800d79e:	2002      	movs	r0, #2
 800d7a0:	f006 fb16 	bl	8013dd0 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800d7a4:	4b26      	ldr	r3, [pc, #152]	@ (800d840 <Device_Init+0x334>)
 800d7a6:	789b      	ldrb	r3, [r3, #2]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d001      	beq.n	800d7b0 <Device_Init+0x2a4>
 800d7ac:	4b39      	ldr	r3, [pc, #228]	@ (800d894 <Device_Init+0x388>)
 800d7ae:	e000      	b.n	800d7b2 <Device_Init+0x2a6>
 800d7b0:	4b39      	ldr	r3, [pc, #228]	@ (800d898 <Device_Init+0x38c>)
 800d7b2:	4a3c      	ldr	r2, [pc, #240]	@ (800d8a4 <Device_Init+0x398>)
 800d7b4:	4930      	ldr	r1, [pc, #192]	@ (800d878 <Device_Init+0x36c>)
 800d7b6:	2002      	movs	r0, #2
 800d7b8:	f006 fb0a 	bl	8013dd0 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800d7bc:	4b20      	ldr	r3, [pc, #128]	@ (800d840 <Device_Init+0x334>)
 800d7be:	791b      	ldrb	r3, [r3, #4]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <Device_Init+0x2bc>
 800d7c4:	4b33      	ldr	r3, [pc, #204]	@ (800d894 <Device_Init+0x388>)
 800d7c6:	e000      	b.n	800d7ca <Device_Init+0x2be>
 800d7c8:	4b33      	ldr	r3, [pc, #204]	@ (800d898 <Device_Init+0x38c>)
 800d7ca:	4a37      	ldr	r2, [pc, #220]	@ (800d8a8 <Device_Init+0x39c>)
 800d7cc:	492a      	ldr	r1, [pc, #168]	@ (800d878 <Device_Init+0x36c>)
 800d7ce:	2002      	movs	r0, #2
 800d7d0:	f006 fafe 	bl	8013dd0 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800d7d4:	4b1a      	ldr	r3, [pc, #104]	@ (800d840 <Device_Init+0x334>)
 800d7d6:	78db      	ldrb	r3, [r3, #3]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d001      	beq.n	800d7e0 <Device_Init+0x2d4>
 800d7dc:	4b2d      	ldr	r3, [pc, #180]	@ (800d894 <Device_Init+0x388>)
 800d7de:	e000      	b.n	800d7e2 <Device_Init+0x2d6>
 800d7e0:	4b2d      	ldr	r3, [pc, #180]	@ (800d898 <Device_Init+0x38c>)
 800d7e2:	4a32      	ldr	r2, [pc, #200]	@ (800d8ac <Device_Init+0x3a0>)
 800d7e4:	4924      	ldr	r1, [pc, #144]	@ (800d878 <Device_Init+0x36c>)
 800d7e6:	2002      	movs	r0, #2
 800d7e8:	f006 faf2 	bl	8013dd0 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800d7ec:	4b14      	ldr	r3, [pc, #80]	@ (800d840 <Device_Init+0x334>)
 800d7ee:	795b      	ldrb	r3, [r3, #5]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d001      	beq.n	800d7f8 <Device_Init+0x2ec>
 800d7f4:	4b27      	ldr	r3, [pc, #156]	@ (800d894 <Device_Init+0x388>)
 800d7f6:	e000      	b.n	800d7fa <Device_Init+0x2ee>
 800d7f8:	4b27      	ldr	r3, [pc, #156]	@ (800d898 <Device_Init+0x38c>)
 800d7fa:	4a2d      	ldr	r2, [pc, #180]	@ (800d8b0 <Device_Init+0x3a4>)
 800d7fc:	491e      	ldr	r1, [pc, #120]	@ (800d878 <Device_Init+0x36c>)
 800d7fe:	2002      	movs	r0, #2
 800d800:	f006 fae6 	bl	8013dd0 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800d804:	4b0e      	ldr	r3, [pc, #56]	@ (800d840 <Device_Init+0x334>)
 800d806:	799b      	ldrb	r3, [r3, #6]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <Device_Init+0x304>
 800d80c:	4b21      	ldr	r3, [pc, #132]	@ (800d894 <Device_Init+0x388>)
 800d80e:	e000      	b.n	800d812 <Device_Init+0x306>
 800d810:	4b21      	ldr	r3, [pc, #132]	@ (800d898 <Device_Init+0x38c>)
 800d812:	4a28      	ldr	r2, [pc, #160]	@ (800d8b4 <Device_Init+0x3a8>)
 800d814:	4918      	ldr	r1, [pc, #96]	@ (800d878 <Device_Init+0x36c>)
 800d816:	2002      	movs	r0, #2
 800d818:	f006 fada 	bl	8013dd0 <CreateLine>
  ESP_Init(espUart);
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	0018      	movs	r0, r3
 800d820:	f7f7 fb14 	bl	8004e4c <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800d824:	4a24      	ldr	r2, [pc, #144]	@ (800d8b8 <Device_Init+0x3ac>)
 800d826:	4b09      	ldr	r3, [pc, #36]	@ (800d84c <Device_Init+0x340>)
 800d828:	0019      	movs	r1, r3
 800d82a:	2003      	movs	r0, #3
 800d82c:	f006 fad0 	bl	8013dd0 <CreateLine>
}
 800d830:	46c0      	nop			@ (mov r8, r8)
 800d832:	46bd      	mov	sp, r7
 800d834:	b004      	add	sp, #16
 800d836:	bd80      	pop	{r7, pc}
 800d838:	0802c89c 	.word	0x0802c89c
 800d83c:	0802c8cc 	.word	0x0802c8cc
 800d840:	20001124 	.word	0x20001124
 800d844:	2000111c 	.word	0x2000111c
 800d848:	0802c8d0 	.word	0x0802c8d0
 800d84c:	0802c898 	.word	0x0802c898
 800d850:	0802c8fc 	.word	0x0802c8fc
 800d854:	0802c930 	.word	0x0802c930
 800d858:	0802c960 	.word	0x0802c960
 800d85c:	0802c97c 	.word	0x0802c97c
 800d860:	0802c994 	.word	0x0802c994
 800d864:	0802c9b0 	.word	0x0802c9b0
 800d868:	0802c9c8 	.word	0x0802c9c8
 800d86c:	0802c9fc 	.word	0x0802c9fc
 800d870:	50000400 	.word	0x50000400
 800d874:	0802ca30 	.word	0x0802ca30
 800d878:	0802ca54 	.word	0x0802ca54
 800d87c:	0802ca58 	.word	0x0802ca58
 800d880:	0802ca84 	.word	0x0802ca84
 800d884:	0802cab0 	.word	0x0802cab0
 800d888:	200011c4 	.word	0x200011c4
 800d88c:	0802cac8 	.word	0x0802cac8
 800d890:	0802cb18 	.word	0x0802cb18
 800d894:	0802cb3c 	.word	0x0802cb3c
 800d898:	0802cb40 	.word	0x0802cb40
 800d89c:	0802cb44 	.word	0x0802cb44
 800d8a0:	0802cb60 	.word	0x0802cb60
 800d8a4:	0802cb7c 	.word	0x0802cb7c
 800d8a8:	0802cb9c 	.word	0x0802cb9c
 800d8ac:	0802cbbc 	.word	0x0802cbbc
 800d8b0:	0802cbdc 	.word	0x0802cbdc
 800d8b4:	0802cbf8 	.word	0x0802cbf8
 800d8b8:	0802cc14 	.word	0x0802cc14

0800d8bc <Device_Test>:

void Device_Test(){
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800d8c0:	4b34      	ldr	r3, [pc, #208]	@ (800d994 <Device_Test+0xd8>)
 800d8c2:	799b      	ldrb	r3, [r3, #6]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	4053      	eors	r3, r2
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d027      	beq.n	800d91e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800d8ce:	f000 fc53 	bl	800e178 <MIC_TestMeasurementDone>
 800d8d2:	1e03      	subs	r3, r0, #0
 800d8d4:	d011      	beq.n	800d8fa <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800d8d6:	4b2f      	ldr	r3, [pc, #188]	@ (800d994 <Device_Test+0xd8>)
 800d8d8:	2201      	movs	r2, #1
 800d8da:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d8dc:	4b2e      	ldr	r3, [pc, #184]	@ (800d998 <Device_Test+0xdc>)
 800d8de:	2201      	movs	r2, #1
 800d8e0:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800d8e2:	f004 fec9 	bl	8012678 <Calculate_LED_ON>
 800d8e6:	0003      	movs	r3, r0
 800d8e8:	0019      	movs	r1, r3
 800d8ea:	23fa      	movs	r3, #250	@ 0xfa
 800d8ec:	011a      	lsls	r2, r3, #4
 800d8ee:	23fa      	movs	r3, #250	@ 0xfa
 800d8f0:	011b      	lsls	r3, r3, #4
 800d8f2:	0018      	movs	r0, r3
 800d8f4:	f004 ff08 	bl	8012708 <SetStatusLED>
 800d8f8:	e011      	b.n	800d91e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800d8fa:	f004 f813 	bl	8011924 <micSettlingComplete>
 800d8fe:	1e03      	subs	r3, r0, #0
 800d900:	d00d      	beq.n	800d91e <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800d902:	4b25      	ldr	r3, [pc, #148]	@ (800d998 <Device_Test+0xdc>)
 800d904:	2201      	movs	r2, #1
 800d906:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800d908:	f004 feb6 	bl	8012678 <Calculate_LED_ON>
 800d90c:	0003      	movs	r3, r0
 800d90e:	0018      	movs	r0, r3
 800d910:	23fa      	movs	r3, #250	@ 0xfa
 800d912:	011a      	lsls	r2, r3, #4
 800d914:	23fa      	movs	r3, #250	@ 0xfa
 800d916:	011b      	lsls	r3, r3, #4
 800d918:	0019      	movs	r1, r3
 800d91a:	f004 fef5 	bl	8012708 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800d91e:	4b1d      	ldr	r3, [pc, #116]	@ (800d994 <Device_Test+0xd8>)
 800d920:	79db      	ldrb	r3, [r3, #7]
 800d922:	2201      	movs	r2, #1
 800d924:	4053      	eors	r3, r2
 800d926:	b2db      	uxtb	r3, r3
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800d92c:	f7f9 fd50 	bl	80073d0 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800d930:	4b18      	ldr	r3, [pc, #96]	@ (800d994 <Device_Test+0xd8>)
 800d932:	79db      	ldrb	r3, [r3, #7]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d003      	beq.n	800d940 <Device_Test+0x84>
 800d938:	4b16      	ldr	r3, [pc, #88]	@ (800d994 <Device_Test+0xd8>)
 800d93a:	799b      	ldrb	r3, [r3, #6]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d106      	bne.n	800d94e <Device_Test+0x92>
 800d940:	4b16      	ldr	r3, [pc, #88]	@ (800d99c <Device_Test+0xe0>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	0018      	movs	r0, r3
 800d946:	f006 f9ed 	bl	8013d24 <TimestampIsReached>
 800d94a:	1e03      	subs	r3, r0, #0
 800d94c:	d01f      	beq.n	800d98e <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800d94e:	4b11      	ldr	r3, [pc, #68]	@ (800d994 <Device_Test+0xd8>)
 800d950:	79db      	ldrb	r3, [r3, #7]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d001      	beq.n	800d95a <Device_Test+0x9e>
 800d956:	4b12      	ldr	r3, [pc, #72]	@ (800d9a0 <Device_Test+0xe4>)
 800d958:	e000      	b.n	800d95c <Device_Test+0xa0>
 800d95a:	4b12      	ldr	r3, [pc, #72]	@ (800d9a4 <Device_Test+0xe8>)
 800d95c:	4a12      	ldr	r2, [pc, #72]	@ (800d9a8 <Device_Test+0xec>)
 800d95e:	4913      	ldr	r1, [pc, #76]	@ (800d9ac <Device_Test+0xf0>)
 800d960:	2002      	movs	r0, #2
 800d962:	f006 fa35 	bl	8013dd0 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800d966:	4b0b      	ldr	r3, [pc, #44]	@ (800d994 <Device_Test+0xd8>)
 800d968:	799b      	ldrb	r3, [r3, #6]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d001      	beq.n	800d972 <Device_Test+0xb6>
 800d96e:	4b0c      	ldr	r3, [pc, #48]	@ (800d9a0 <Device_Test+0xe4>)
 800d970:	e000      	b.n	800d974 <Device_Test+0xb8>
 800d972:	4b0c      	ldr	r3, [pc, #48]	@ (800d9a4 <Device_Test+0xe8>)
 800d974:	4a0e      	ldr	r2, [pc, #56]	@ (800d9b0 <Device_Test+0xf4>)
 800d976:	490d      	ldr	r1, [pc, #52]	@ (800d9ac <Device_Test+0xf0>)
 800d978:	2002      	movs	r0, #2
 800d97a:	f006 fa29 	bl	8013dd0 <CreateLine>
    Info("Test completed");
 800d97e:	4a0d      	ldr	r2, [pc, #52]	@ (800d9b4 <Device_Test+0xf8>)
 800d980:	4b0a      	ldr	r3, [pc, #40]	@ (800d9ac <Device_Test+0xf0>)
 800d982:	0019      	movs	r1, r3
 800d984:	2002      	movs	r0, #2
 800d986:	f006 fa23 	bl	8013dd0 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800d98a:	f7ff f855 	bl	800ca38 <SetTestDone>
  }
}
 800d98e:	46c0      	nop			@ (mov r8, r8)
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	20001124 	.word	0x20001124
 800d998:	2000111c 	.word	0x2000111c
 800d99c:	20001114 	.word	0x20001114
 800d9a0:	0802cc38 	.word	0x0802cc38
 800d9a4:	0802cc40 	.word	0x0802cc40
 800d9a8:	0802cc48 	.word	0x0802cc48
 800d9ac:	0802ca54 	.word	0x0802ca54
 800d9b0:	0802cc5c 	.word	0x0802cc5c
 800d9b4:	0802cc70 	.word	0x0802cc70

0800d9b8 <AllDevicesReady>:

bool AllDevicesReady() {
 800d9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ba:	46de      	mov	lr, fp
 800d9bc:	4657      	mov	r7, sl
 800d9be:	464e      	mov	r6, r9
 800d9c0:	4645      	mov	r5, r8
 800d9c2:	b5e0      	push	{r5, r6, r7, lr}
 800d9c4:	b08b      	sub	sp, #44	@ 0x2c
 800d9c6:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  static bool allinwait = false;
  static uint8_t iminute = 0;
  if (TimestampIsReached(deviceTimeOut)) {
 800d9c8:	4b8a      	ldr	r3, [pc, #552]	@ (800dbf4 <AllDevicesReady+0x23c>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	0018      	movs	r0, r3
 800d9ce:	f006 f9a9 	bl	8013d24 <TimestampIsReached>
 800d9d2:	1e03      	subs	r3, r0, #0
 800d9d4:	d100      	bne.n	800d9d8 <AllDevicesReady+0x20>
 800d9d6:	e103      	b.n	800dbe0 <AllDevicesReady+0x228>
    if (!sensorsdisablereq) {
 800d9d8:	4b87      	ldr	r3, [pc, #540]	@ (800dbf8 <AllDevicesReady+0x240>)
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	4053      	eors	r3, r2
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d008      	beq.n	800d9f8 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800d9e6:	4a85      	ldr	r2, [pc, #532]	@ (800dbfc <AllDevicesReady+0x244>)
 800d9e8:	4b85      	ldr	r3, [pc, #532]	@ (800dc00 <AllDevicesReady+0x248>)
 800d9ea:	0019      	movs	r1, r3
 800d9ec:	2003      	movs	r0, #3
 800d9ee:	f006 f9ef 	bl	8013dd0 <CreateLine>
      sensorsdisablereq = true;
 800d9f2:	4b81      	ldr	r3, [pc, #516]	@ (800dbf8 <AllDevicesReady+0x240>)
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800d9f8:	4b82      	ldr	r3, [pc, #520]	@ (800dc04 <AllDevicesReady+0x24c>)
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	2b06      	cmp	r3, #6
 800d9fe:	d102      	bne.n	800da06 <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800da00:	4b81      	ldr	r3, [pc, #516]	@ (800dc08 <AllDevicesReady+0x250>)
 800da02:	2200      	movs	r2, #0
 800da04:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800da06:	4b81      	ldr	r3, [pc, #516]	@ (800dc0c <AllDevicesReady+0x254>)
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	2b05      	cmp	r3, #5
 800da0c:	d006      	beq.n	800da1c <AllDevicesReady+0x64>
 800da0e:	4b80      	ldr	r3, [pc, #512]	@ (800dc10 <AllDevicesReady+0x258>)
 800da10:	789b      	ldrb	r3, [r3, #2]
 800da12:	2201      	movs	r2, #1
 800da14:	4053      	eors	r3, r2
 800da16:	b2db      	uxtb	r3, r3
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800da1c:	4b7a      	ldr	r3, [pc, #488]	@ (800dc08 <AllDevicesReady+0x250>)
 800da1e:	2200      	movs	r2, #0
 800da20:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800da22:	4b7c      	ldr	r3, [pc, #496]	@ (800dc14 <AllDevicesReady+0x25c>)
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	2b02      	cmp	r3, #2
 800da28:	d006      	beq.n	800da38 <AllDevicesReady+0x80>
 800da2a:	4b79      	ldr	r3, [pc, #484]	@ (800dc10 <AllDevicesReady+0x258>)
 800da2c:	791b      	ldrb	r3, [r3, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	4053      	eors	r3, r2
 800da32:	b2db      	uxtb	r3, r3
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800da38:	4b73      	ldr	r3, [pc, #460]	@ (800dc08 <AllDevicesReady+0x250>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800da3e:	4b76      	ldr	r3, [pc, #472]	@ (800dc18 <AllDevicesReady+0x260>)
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	2b08      	cmp	r3, #8
 800da44:	d006      	beq.n	800da54 <AllDevicesReady+0x9c>
 800da46:	4b72      	ldr	r3, [pc, #456]	@ (800dc10 <AllDevicesReady+0x258>)
 800da48:	78db      	ldrb	r3, [r3, #3]
 800da4a:	2201      	movs	r2, #1
 800da4c:	4053      	eors	r3, r2
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	2b00      	cmp	r3, #0
 800da52:	d002      	beq.n	800da5a <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800da54:	4b6c      	ldr	r3, [pc, #432]	@ (800dc08 <AllDevicesReady+0x250>)
 800da56:	2200      	movs	r2, #0
 800da58:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800da5a:	4b70      	ldr	r3, [pc, #448]	@ (800dc1c <AllDevicesReady+0x264>)
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	2b07      	cmp	r3, #7
 800da60:	d006      	beq.n	800da70 <AllDevicesReady+0xb8>
 800da62:	4b6b      	ldr	r3, [pc, #428]	@ (800dc10 <AllDevicesReady+0x258>)
 800da64:	7a1b      	ldrb	r3, [r3, #8]
 800da66:	2201      	movs	r2, #1
 800da68:	4053      	eors	r3, r2
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d002      	beq.n	800da76 <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800da70:	4b65      	ldr	r3, [pc, #404]	@ (800dc08 <AllDevicesReady+0x250>)
 800da72:	2200      	movs	r2, #0
 800da74:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X) || (PMsamplesState == S5X_DISABLED)) {
 800da76:	4b6a      	ldr	r3, [pc, #424]	@ (800dc20 <AllDevicesReady+0x268>)
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d007      	beq.n	800da8e <AllDevicesReady+0xd6>
 800da7e:	4b68      	ldr	r3, [pc, #416]	@ (800dc20 <AllDevicesReady+0x268>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	2b03      	cmp	r3, #3
 800da84:	d003      	beq.n	800da8e <AllDevicesReady+0xd6>
 800da86:	4b66      	ldr	r3, [pc, #408]	@ (800dc20 <AllDevicesReady+0x268>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d102      	bne.n	800da94 <AllDevicesReady+0xdc>
      Sensor.PM_measurementEnabled = false;
 800da8e:	4b5e      	ldr	r3, [pc, #376]	@ (800dc08 <AllDevicesReady+0x250>)
 800da90:	2200      	movs	r2, #0
 800da92:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800da94:	4b63      	ldr	r3, [pc, #396]	@ (800dc24 <AllDevicesReady+0x26c>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	2b03      	cmp	r3, #3
 800da9a:	d102      	bne.n	800daa2 <AllDevicesReady+0xea>
      Sensor.MIC_measurementEnabled = false;
 800da9c:	4b5a      	ldr	r3, [pc, #360]	@ (800dc08 <AllDevicesReady+0x250>)
 800da9e:	2200      	movs	r2, #0
 800daa0:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800daa2:	4b61      	ldr	r3, [pc, #388]	@ (800dc28 <AllDevicesReady+0x270>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	2b09      	cmp	r3, #9
 800daa8:	d004      	beq.n	800dab4 <AllDevicesReady+0xfc>
 800daaa:	4b5f      	ldr	r3, [pc, #380]	@ (800dc28 <AllDevicesReady+0x270>)
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d000      	beq.n	800dab4 <AllDevicesReady+0xfc>
 800dab2:	e095      	b.n	800dbe0 <AllDevicesReady+0x228>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dab4:	4b54      	ldr	r3, [pc, #336]	@ (800dc08 <AllDevicesReady+0x250>)
 800dab6:	781a      	ldrb	r2, [r3, #0]
 800dab8:	4b53      	ldr	r3, [pc, #332]	@ (800dc08 <AllDevicesReady+0x250>)
 800daba:	785b      	ldrb	r3, [r3, #1]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	4b51      	ldr	r3, [pc, #324]	@ (800dc08 <AllDevicesReady+0x250>)
 800dac2:	791b      	ldrb	r3, [r3, #4]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	b2da      	uxtb	r2, r3
 800dac8:	4b4f      	ldr	r3, [pc, #316]	@ (800dc08 <AllDevicesReady+0x250>)
 800daca:	795b      	ldrb	r3, [r3, #5]
 800dacc:	4313      	orrs	r3, r2
 800dace:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800dad0:	4b4d      	ldr	r3, [pc, #308]	@ (800dc08 <AllDevicesReady+0x250>)
 800dad2:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dad4:	4313      	orrs	r3, r2
 800dad6:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800dad8:	4b4b      	ldr	r3, [pc, #300]	@ (800dc08 <AllDevicesReady+0x250>)
 800dada:	789b      	ldrb	r3, [r3, #2]
 800dadc:	4313      	orrs	r3, r2
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	4b49      	ldr	r3, [pc, #292]	@ (800dc08 <AllDevicesReady+0x250>)
 800dae2:	78db      	ldrb	r3, [r3, #3]
 800dae4:	4313      	orrs	r3, r2
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	1e5a      	subs	r2, r3, #1
 800daea:	4193      	sbcs	r3, r2
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2201      	movs	r2, #1
 800daf0:	4053      	eors	r3, r2
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800daf6:	1dfb      	adds	r3, r7, #7
 800daf8:	701a      	strb	r2, [r3, #0]
 800dafa:	781a      	ldrb	r2, [r3, #0]
 800dafc:	2101      	movs	r1, #1
 800dafe:	400a      	ands	r2, r1
 800db00:	701a      	strb	r2, [r3, #0]
      if (!status && (prevstatus != status) && (iminute != lastminute)) {
 800db02:	1dfb      	adds	r3, r7, #7
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	2201      	movs	r2, #1
 800db08:	4053      	eors	r3, r2
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d03e      	beq.n	800db8e <AllDevicesReady+0x1d6>
 800db10:	4b46      	ldr	r3, [pc, #280]	@ (800dc2c <AllDevicesReady+0x274>)
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	1dfa      	adds	r2, r7, #7
 800db16:	7812      	ldrb	r2, [r2, #0]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d038      	beq.n	800db8e <AllDevicesReady+0x1d6>
 800db1c:	4b44      	ldr	r3, [pc, #272]	@ (800dc30 <AllDevicesReady+0x278>)
 800db1e:	781a      	ldrb	r2, [r3, #0]
 800db20:	4b44      	ldr	r3, [pc, #272]	@ (800dc34 <AllDevicesReady+0x27c>)
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	429a      	cmp	r2, r3
 800db26:	d032      	beq.n	800db8e <AllDevicesReady+0x1d6>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800db28:	4b37      	ldr	r3, [pc, #220]	@ (800dc08 <AllDevicesReady+0x250>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	469b      	mov	fp, r3
 800db2e:	4b36      	ldr	r3, [pc, #216]	@ (800dc08 <AllDevicesReady+0x250>)
 800db30:	791b      	ldrb	r3, [r3, #4]
 800db32:	001c      	movs	r4, r3
 800db34:	4b34      	ldr	r3, [pc, #208]	@ (800dc08 <AllDevicesReady+0x250>)
 800db36:	795b      	ldrb	r3, [r3, #5]
 800db38:	001d      	movs	r5, r3
 800db3a:	4b33      	ldr	r3, [pc, #204]	@ (800dc08 <AllDevicesReady+0x250>)
 800db3c:	799b      	ldrb	r3, [r3, #6]
 800db3e:	001e      	movs	r6, r3
 800db40:	4b31      	ldr	r3, [pc, #196]	@ (800dc08 <AllDevicesReady+0x250>)
 800db42:	785b      	ldrb	r3, [r3, #1]
 800db44:	4698      	mov	r8, r3
 800db46:	4b30      	ldr	r3, [pc, #192]	@ (800dc08 <AllDevicesReady+0x250>)
 800db48:	789b      	ldrb	r3, [r3, #2]
 800db4a:	4699      	mov	r9, r3
 800db4c:	4b2e      	ldr	r3, [pc, #184]	@ (800dc08 <AllDevicesReady+0x250>)
 800db4e:	78db      	ldrb	r3, [r3, #3]
 800db50:	469a      	mov	sl, r3
 800db52:	f000 f927 	bl	800dda4 <getSensorLock>
 800db56:	0003      	movs	r3, r0
 800db58:	4a37      	ldr	r2, [pc, #220]	@ (800dc38 <AllDevicesReady+0x280>)
 800db5a:	4929      	ldr	r1, [pc, #164]	@ (800dc00 <AllDevicesReady+0x248>)
 800db5c:	9306      	str	r3, [sp, #24]
 800db5e:	4653      	mov	r3, sl
 800db60:	9305      	str	r3, [sp, #20]
 800db62:	464b      	mov	r3, r9
 800db64:	9304      	str	r3, [sp, #16]
 800db66:	4643      	mov	r3, r8
 800db68:	9303      	str	r3, [sp, #12]
 800db6a:	9602      	str	r6, [sp, #8]
 800db6c:	9501      	str	r5, [sp, #4]
 800db6e:	9400      	str	r4, [sp, #0]
 800db70:	465b      	mov	r3, fp
 800db72:	2003      	movs	r0, #3
 800db74:	f006 f92c 	bl	8013dd0 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800db78:	4b2c      	ldr	r3, [pc, #176]	@ (800dc2c <AllDevicesReady+0x274>)
 800db7a:	1dfa      	adds	r2, r7, #7
 800db7c:	7812      	ldrb	r2, [r2, #0]
 800db7e:	701a      	strb	r2, [r3, #0]
        allinwait = false;
 800db80:	4b2e      	ldr	r3, [pc, #184]	@ (800dc3c <AllDevicesReady+0x284>)
 800db82:	2200      	movs	r2, #0
 800db84:	701a      	strb	r2, [r3, #0]
        iminute = lastminute;
 800db86:	4b2b      	ldr	r3, [pc, #172]	@ (800dc34 <AllDevicesReady+0x27c>)
 800db88:	781a      	ldrb	r2, [r3, #0]
 800db8a:	4b29      	ldr	r3, [pc, #164]	@ (800dc30 <AllDevicesReady+0x278>)
 800db8c:	701a      	strb	r2, [r3, #0]
      }
      if (status && !allinwait) {
 800db8e:	1dfb      	adds	r3, r7, #7
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d021      	beq.n	800dbda <AllDevicesReady+0x222>
 800db96:	4b29      	ldr	r3, [pc, #164]	@ (800dc3c <AllDevicesReady+0x284>)
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	2201      	movs	r2, #1
 800db9c:	4053      	eors	r3, r2
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d01a      	beq.n	800dbda <AllDevicesReady+0x222>
        Debug("All sensors in wait");
 800dba4:	4a26      	ldr	r2, [pc, #152]	@ (800dc40 <AllDevicesReady+0x288>)
 800dba6:	4b16      	ldr	r3, [pc, #88]	@ (800dc00 <AllDevicesReady+0x248>)
 800dba8:	0019      	movs	r1, r3
 800dbaa:	2003      	movs	r0, #3
 800dbac:	f006 f910 	bl	8013dd0 <CreateLine>
        prevstatus = status;
 800dbb0:	4b1e      	ldr	r3, [pc, #120]	@ (800dc2c <AllDevicesReady+0x274>)
 800dbb2:	1dfa      	adds	r2, r7, #7
 800dbb4:	7812      	ldrb	r2, [r2, #0]
 800dbb6:	701a      	strb	r2, [r3, #0]
        allinwait = true;
 800dbb8:	4b20      	ldr	r3, [pc, #128]	@ (800dc3c <AllDevicesReady+0x284>)
 800dbba:	2201      	movs	r2, #1
 800dbbc:	701a      	strb	r2, [r3, #0]
        if (sendpwrmaildate == getDate()) {
 800dbbe:	f7fc f883 	bl	8009cc8 <getDate>
 800dbc2:	0003      	movs	r3, r0
 800dbc4:	001a      	movs	r2, r3
 800dbc6:	4b1f      	ldr	r3, [pc, #124]	@ (800dc44 <AllDevicesReady+0x28c>)
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d105      	bne.n	800dbda <AllDevicesReady+0x222>
          Info("Battery empty mail already send today");
 800dbce:	4a1e      	ldr	r2, [pc, #120]	@ (800dc48 <AllDevicesReady+0x290>)
 800dbd0:	4b1e      	ldr	r3, [pc, #120]	@ (800dc4c <AllDevicesReady+0x294>)
 800dbd2:	0019      	movs	r1, r3
 800dbd4:	2002      	movs	r0, #2
 800dbd6:	f006 f8fb 	bl	8013dd0 <CreateLine>
        }

      }
      return status;
 800dbda:	1dfb      	adds	r3, r7, #7
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	e000      	b.n	800dbe2 <AllDevicesReady+0x22a>
    }
  }
  return false;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	0018      	movs	r0, r3
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	b003      	add	sp, #12
 800dbe8:	bcf0      	pop	{r4, r5, r6, r7}
 800dbea:	46bb      	mov	fp, r7
 800dbec:	46b2      	mov	sl, r6
 800dbee:	46a9      	mov	r9, r5
 800dbf0:	46a0      	mov	r8, r4
 800dbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbf4:	20001114 	.word	0x20001114
 800dbf8:	20001133 	.word	0x20001133
 800dbfc:	0802cc80 	.word	0x0802cc80
 800dc00:	0802c898 	.word	0x0802c898
 800dc04:	2000112f 	.word	0x2000112f
 800dc08:	2000111c 	.word	0x2000111c
 800dc0c:	20001130 	.word	0x20001130
 800dc10:	20001124 	.word	0x20001124
 800dc14:	20001131 	.word	0x20001131
 800dc18:	20001132 	.word	0x20001132
 800dc1c:	2000112e 	.word	0x2000112e
 800dc20:	200000aa 	.word	0x200000aa
 800dc24:	200010fb 	.word	0x200010fb
 800dc28:	200010fc 	.word	0x200010fc
 800dc2c:	200000a8 	.word	0x200000a8
 800dc30:	20001134 	.word	0x20001134
 800dc34:	20000e41 	.word	0x20000e41
 800dc38:	0802cca0 	.word	0x0802cca0
 800dc3c:	20001135 	.word	0x20001135
 800dc40:	0802cd04 	.word	0x0802cd04
 800dc44:	20001110 	.word	0x20001110
 800dc48:	0802cd18 	.word	0x0802cd18
 800dc4c:	0802ca54 	.word	0x0802ca54

0800dc50 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800dc50:	b580      	push	{r7, lr}
 800dc52:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800dc54:	4b2c      	ldr	r3, [pc, #176]	@ (800dd08 <EnabledConnectedDevices+0xb8>)
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800dc5c:	4b2b      	ldr	r3, [pc, #172]	@ (800dd0c <EnabledConnectedDevices+0xbc>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState != AHT_STATE_OFF)) {
 800dc62:	4b29      	ldr	r3, [pc, #164]	@ (800dd08 <EnabledConnectedDevices+0xb8>)
 800dc64:	789b      	ldrb	r3, [r3, #2]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d006      	beq.n	800dc78 <EnabledConnectedDevices+0x28>
 800dc6a:	4b29      	ldr	r3, [pc, #164]	@ (800dd10 <EnabledConnectedDevices+0xc0>)
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d002      	beq.n	800dc78 <EnabledConnectedDevices+0x28>
    Sensor.AHT_measurementEnabled = true;
 800dc72:	4b26      	ldr	r3, [pc, #152]	@ (800dd0c <EnabledConnectedDevices+0xbc>)
 800dc74:	2201      	movs	r2, #1
 800dc76:	711a      	strb	r2, [r3, #4]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState == AHT_STATE_OFF)) {
 800dc78:	4b23      	ldr	r3, [pc, #140]	@ (800dd08 <EnabledConnectedDevices+0xb8>)
 800dc7a:	789b      	ldrb	r3, [r3, #2]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d009      	beq.n	800dc94 <EnabledConnectedDevices+0x44>
 800dc80:	4b23      	ldr	r3, [pc, #140]	@ (800dd10 <EnabledConnectedDevices+0xc0>)
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d105      	bne.n	800dc94 <EnabledConnectedDevices+0x44>
    Info("AHT2x sensor is disabled");
 800dc88:	4a22      	ldr	r2, [pc, #136]	@ (800dd14 <EnabledConnectedDevices+0xc4>)
 800dc8a:	4b23      	ldr	r3, [pc, #140]	@ (800dd18 <EnabledConnectedDevices+0xc8>)
 800dc8c:	0019      	movs	r1, r3
 800dc8e:	2002      	movs	r0, #2
 800dc90:	f006 f89e 	bl	8013dd0 <CreateLine>
  }
  if (SensorProbe.BMP280_Present) {
 800dc94:	4b1c      	ldr	r3, [pc, #112]	@ (800dd08 <EnabledConnectedDevices+0xb8>)
 800dc96:	791b      	ldrb	r3, [r3, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <EnabledConnectedDevices+0x52>
    Sensor.BMP_measurementEnabled = true;
 800dc9c:	4b1b      	ldr	r3, [pc, #108]	@ (800dd0c <EnabledConnectedDevices+0xbc>)
 800dc9e:	2201      	movs	r2, #1
 800dca0:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800dca2:	4b19      	ldr	r3, [pc, #100]	@ (800dd08 <EnabledConnectedDevices+0xb8>)
 800dca4:	78db      	ldrb	r3, [r3, #3]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d002      	beq.n	800dcb0 <EnabledConnectedDevices+0x60>
    Sensor.ENS_measurementEnabled = true;
 800dcaa:	4b18      	ldr	r3, [pc, #96]	@ (800dd0c <EnabledConnectedDevices+0xbc>)
 800dcac:	2201      	movs	r2, #1
 800dcae:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800dcb0:	4b15      	ldr	r3, [pc, #84]	@ (800dd08 <EnabledConnectedDevices+0xb8>)
 800dcb2:	785b      	ldrb	r3, [r3, #1]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d006      	beq.n	800dcc6 <EnabledConnectedDevices+0x76>
 800dcb8:	4b13      	ldr	r3, [pc, #76]	@ (800dd08 <EnabledConnectedDevices+0xb8>)
 800dcba:	7a1b      	ldrb	r3, [r3, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <EnabledConnectedDevices+0x76>
    Sensor.VOC_measurementEnabled = true;
 800dcc0:	4b12      	ldr	r3, [pc, #72]	@ (800dd0c <EnabledConnectedDevices+0xbc>)
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800dcc6:	4b10      	ldr	r3, [pc, #64]	@ (800dd08 <EnabledConnectedDevices+0xb8>)
 800dcc8:	795b      	ldrb	r3, [r3, #5]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d002      	beq.n	800dcd4 <EnabledConnectedDevices+0x84>
    Sensor.PM_measurementEnabled = true;
 800dcce:	4b0f      	ldr	r3, [pc, #60]	@ (800dd0c <EnabledConnectedDevices+0xbc>)
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800dcd4:	4b0c      	ldr	r3, [pc, #48]	@ (800dd08 <EnabledConnectedDevices+0xb8>)
 800dcd6:	799b      	ldrb	r3, [r3, #6]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <EnabledConnectedDevices+0x92>
    Sensor.MIC_measurementEnabled = true;
 800dcdc:	4b0b      	ldr	r3, [pc, #44]	@ (800dd0c <EnabledConnectedDevices+0xbc>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800dce2:	f006 fded 	bl	80148c0 <HAL_GetTick>
 800dce6:	0003      	movs	r3, r0
 800dce8:	4a0c      	ldr	r2, [pc, #48]	@ (800dd1c <EnabledConnectedDevices+0xcc>)
 800dcea:	189a      	adds	r2, r3, r2
 800dcec:	4b0c      	ldr	r3, [pc, #48]	@ (800dd20 <EnabledConnectedDevices+0xd0>)
 800dcee:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800dcf0:	4b0c      	ldr	r3, [pc, #48]	@ (800dd24 <EnabledConnectedDevices+0xd4>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800dcf6:	4a0c      	ldr	r2, [pc, #48]	@ (800dd28 <EnabledConnectedDevices+0xd8>)
 800dcf8:	4b0c      	ldr	r3, [pc, #48]	@ (800dd2c <EnabledConnectedDevices+0xdc>)
 800dcfa:	0019      	movs	r1, r3
 800dcfc:	2003      	movs	r0, #3
 800dcfe:	f006 f867 	bl	8013dd0 <CreateLine>
}
 800dd02:	46c0      	nop			@ (mov r8, r8)
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	20001124 	.word	0x20001124
 800dd0c:	2000111c 	.word	0x2000111c
 800dd10:	2000009f 	.word	0x2000009f
 800dd14:	0802cd40 	.word	0x0802cd40
 800dd18:	0802ca54 	.word	0x0802ca54
 800dd1c:	00124f80 	.word	0x00124f80
 800dd20:	20001114 	.word	0x20001114
 800dd24:	20001133 	.word	0x20001133
 800dd28:	0802cd5c 	.word	0x0802cd5c
 800dd2c:	0802c898 	.word	0x0802c898

0800dd30 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800dd30:	b580      	push	{r7, lr}
 800dd32:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800dd34:	4b0e      	ldr	r3, [pc, #56]	@ (800dd70 <DisableConnectedDevices+0x40>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800dd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd70 <DisableConnectedDevices+0x40>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800dd40:	4b0b      	ldr	r3, [pc, #44]	@ (800dd70 <DisableConnectedDevices+0x40>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800dd46:	4b0a      	ldr	r3, [pc, #40]	@ (800dd70 <DisableConnectedDevices+0x40>)
 800dd48:	2200      	movs	r2, #0
 800dd4a:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800dd4c:	4b08      	ldr	r3, [pc, #32]	@ (800dd70 <DisableConnectedDevices+0x40>)
 800dd4e:	2200      	movs	r2, #0
 800dd50:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800dd52:	4b07      	ldr	r3, [pc, #28]	@ (800dd70 <DisableConnectedDevices+0x40>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800dd58:	4b05      	ldr	r3, [pc, #20]	@ (800dd70 <DisableConnectedDevices+0x40>)
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800dd5e:	4a05      	ldr	r2, [pc, #20]	@ (800dd74 <DisableConnectedDevices+0x44>)
 800dd60:	4b05      	ldr	r3, [pc, #20]	@ (800dd78 <DisableConnectedDevices+0x48>)
 800dd62:	0019      	movs	r1, r3
 800dd64:	2003      	movs	r0, #3
 800dd66:	f006 f833 	bl	8013dd0 <CreateLine>
}
 800dd6a:	46c0      	nop			@ (mov r8, r8)
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	2000111c 	.word	0x2000111c
 800dd74:	0802cd6c 	.word	0x0802cd6c
 800dd78:	0802c898 	.word	0x0802c898

0800dd7c <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	0002      	movs	r2, r0
 800dd84:	1dfb      	adds	r3, r7, #7
 800dd86:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800dd88:	4b05      	ldr	r3, [pc, #20]	@ (800dda0 <setSensorLock+0x24>)
 800dd8a:	1dfa      	adds	r2, r7, #7
 800dd8c:	7812      	ldrb	r2, [r2, #0]
 800dd8e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800dd90:	200a      	movs	r0, #10
 800dd92:	f006 fd9f 	bl	80148d4 <HAL_Delay>
}
 800dd96:	46c0      	nop			@ (mov r8, r8)
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	b002      	add	sp, #8
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	46c0      	nop			@ (mov r8, r8)
 800dda0:	2000112d 	.word	0x2000112d

0800dda4 <getSensorLock>:

uint8_t getSensorLock() {
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800dda8:	4b02      	ldr	r3, [pc, #8]	@ (800ddb4 <getSensorLock+0x10>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
}
 800ddac:	0018      	movs	r0, r3
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	46c0      	nop			@ (mov r8, r8)
 800ddb4:	2000112d 	.word	0x2000112d

0800ddb8 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800ddbc:	4b1a      	ldr	r3, [pc, #104]	@ (800de28 <UpkeepI2Csensors+0x70>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d005      	beq.n	800ddd0 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800ddc4:	f006 fbfa 	bl	80145bc <HIDS_Upkeep>
 800ddc8:	0003      	movs	r3, r0
 800ddca:	001a      	movs	r2, r3
 800ddcc:	4b17      	ldr	r3, [pc, #92]	@ (800de2c <UpkeepI2Csensors+0x74>)
 800ddce:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800ddd0:	4b15      	ldr	r3, [pc, #84]	@ (800de28 <UpkeepI2Csensors+0x70>)
 800ddd2:	785b      	ldrb	r3, [r3, #1]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d005      	beq.n	800dde4 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800ddd8:	f003 fb9e 	bl	8011518 <SGP_Upkeep>
 800dddc:	0003      	movs	r3, r0
 800ddde:	001a      	movs	r2, r3
 800dde0:	4b13      	ldr	r3, [pc, #76]	@ (800de30 <UpkeepI2Csensors+0x78>)
 800dde2:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800dde4:	4b10      	ldr	r3, [pc, #64]	@ (800de28 <UpkeepI2Csensors+0x70>)
 800dde6:	791b      	ldrb	r3, [r3, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d005      	beq.n	800ddf8 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800ddec:	f7fd fae6 	bl	800b3bc <AHT_Upkeep>
 800ddf0:	0003      	movs	r3, r0
 800ddf2:	001a      	movs	r2, r3
 800ddf4:	4b0f      	ldr	r3, [pc, #60]	@ (800de34 <UpkeepI2Csensors+0x7c>)
 800ddf6:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800ddf8:	4b0b      	ldr	r3, [pc, #44]	@ (800de28 <UpkeepI2Csensors+0x70>)
 800ddfa:	795b      	ldrb	r3, [r3, #5]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d005      	beq.n	800de0c <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800de00:	f7fd ff7c 	bl	800bcfc <BMP_Upkeep>
 800de04:	0003      	movs	r3, r0
 800de06:	001a      	movs	r2, r3
 800de08:	4b0b      	ldr	r3, [pc, #44]	@ (800de38 <UpkeepI2Csensors+0x80>)
 800de0a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800de0c:	4b06      	ldr	r3, [pc, #24]	@ (800de28 <UpkeepI2Csensors+0x70>)
 800de0e:	799b      	ldrb	r3, [r3, #6]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d005      	beq.n	800de20 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800de14:	f7f6 fb20 	bl	8004458 <ENS_Upkeep>
 800de18:	0003      	movs	r3, r0
 800de1a:	001a      	movs	r2, r3
 800de1c:	4b07      	ldr	r3, [pc, #28]	@ (800de3c <UpkeepI2Csensors+0x84>)
 800de1e:	701a      	strb	r2, [r3, #0]
  }
}
 800de20:	46c0      	nop			@ (mov r8, r8)
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	46c0      	nop			@ (mov r8, r8)
 800de28:	2000111c 	.word	0x2000111c
 800de2c:	2000112f 	.word	0x2000112f
 800de30:	2000112e 	.word	0x2000112e
 800de34:	20001130 	.word	0x20001130
 800de38:	20001131 	.word	0x20001131
 800de3c:	20001132 	.word	0x20001132

0800de40 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800de40:	b580      	push	{r7, lr}
 800de42:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800de44:	4b02      	ldr	r3, [pc, #8]	@ (800de50 <ResetdBAmax+0x10>)
 800de46:	2200      	movs	r2, #0
 800de48:	601a      	str	r2, [r3, #0]
}
 800de4a:	46c0      	nop			@ (mov r8, r8)
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	2000117c 	.word	0x2000117c

0800de54 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800de5c:	f006 fd30 	bl	80148c0 <HAL_GetTick>
 800de60:	0002      	movs	r2, r0
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	18d2      	adds	r2, r2, r3
 800de66:	4b03      	ldr	r3, [pc, #12]	@ (800de74 <setMICTimeStamp+0x20>)
 800de68:	601a      	str	r2, [r3, #0]
}
 800de6a:	46c0      	nop			@ (mov r8, r8)
 800de6c:	46bd      	mov	sp, r7
 800de6e:	b002      	add	sp, #8
 800de70:	bd80      	pop	{r7, pc}
 800de72:	46c0      	nop			@ (mov r8, r8)
 800de74:	20001184 	.word	0x20001184

0800de78 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800de78:	b580      	push	{r7, lr}
 800de7a:	af00      	add	r7, sp, #0
  counter = 0;
 800de7c:	4b05      	ldr	r3, [pc, #20]	@ (800de94 <ResetDBACalculator+0x1c>)
 800de7e:	2200      	movs	r2, #0
 800de80:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800de82:	4b05      	ldr	r3, [pc, #20]	@ (800de98 <ResetDBACalculator+0x20>)
 800de84:	2201      	movs	r2, #1
 800de86:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800de88:	4b04      	ldr	r3, [pc, #16]	@ (800de9c <ResetDBACalculator+0x24>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	701a      	strb	r2, [r3, #0]
}
 800de8e:	46c0      	nop			@ (mov r8, r8)
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	20001180 	.word	0x20001180
 800de98:	200000a9 	.word	0x200000a9
 800de9c:	20001181 	.word	0x20001181

0800dea0 <MIC_Print>:

void MIC_Print(void) {
 800dea0:	b5b0      	push	{r4, r5, r7, lr}
 800dea2:	b08c      	sub	sp, #48	@ 0x30
 800dea4:	af08      	add	r7, sp, #32
  dBA = dBValue; // dBValue is the actual sample
 800dea6:	4ba1      	ldr	r3, [pc, #644]	@ (800e12c <MIC_Print+0x28c>)
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	4ba1      	ldr	r3, [pc, #644]	@ (800e130 <MIC_Print+0x290>)
 800deac:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800deae:	4ba1      	ldr	r3, [pc, #644]	@ (800e134 <MIC_Print+0x294>)
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	001a      	movs	r2, r3
 800deb4:	4b9e      	ldr	r3, [pc, #632]	@ (800e130 <MIC_Print+0x290>)
 800deb6:	6819      	ldr	r1, [r3, #0]
 800deb8:	4b9f      	ldr	r3, [pc, #636]	@ (800e138 <MIC_Print+0x298>)
 800deba:	0092      	lsls	r2, r2, #2
 800debc:	50d1      	str	r1, [r2, r3]
  counter++;
 800debe:	4b9d      	ldr	r3, [pc, #628]	@ (800e134 <MIC_Print+0x294>)
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	3301      	adds	r3, #1
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	4b9b      	ldr	r3, [pc, #620]	@ (800e134 <MIC_Print+0x294>)
 800dec8:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800deca:	4b9a      	ldr	r3, [pc, #616]	@ (800e134 <MIC_Print+0x294>)
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	2b09      	cmp	r3, #9
 800ded0:	d80b      	bhi.n	800deea <MIC_Print+0x4a>
 800ded2:	4b9a      	ldr	r3, [pc, #616]	@ (800e13c <MIC_Print+0x29c>)
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	2201      	movs	r2, #1
 800ded8:	4053      	eors	r3, r2
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d004      	beq.n	800deea <MIC_Print+0x4a>
    denominator = counter;
 800dee0:	4b94      	ldr	r3, [pc, #592]	@ (800e134 <MIC_Print+0x294>)
 800dee2:	781a      	ldrb	r2, [r3, #0]
 800dee4:	4b96      	ldr	r3, [pc, #600]	@ (800e140 <MIC_Print+0x2a0>)
 800dee6:	701a      	strb	r2, [r3, #0]
 800dee8:	e005      	b.n	800def6 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800deea:	4b95      	ldr	r3, [pc, #596]	@ (800e140 <MIC_Print+0x2a0>)
 800deec:	220a      	movs	r2, #10
 800deee:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800def0:	4b92      	ldr	r3, [pc, #584]	@ (800e13c <MIC_Print+0x29c>)
 800def2:	2201      	movs	r2, #1
 800def4:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800def6:	4b93      	ldr	r3, [pc, #588]	@ (800e144 <MIC_Print+0x2a4>)
 800def8:	2200      	movs	r2, #0
 800defa:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800defc:	230f      	movs	r3, #15
 800defe:	18fb      	adds	r3, r7, r3
 800df00:	2200      	movs	r2, #0
 800df02:	701a      	strb	r2, [r3, #0]
 800df04:	e042      	b.n	800df8c <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800df06:	240f      	movs	r4, #15
 800df08:	193b      	adds	r3, r7, r4
 800df0a:	781a      	ldrb	r2, [r3, #0]
 800df0c:	4b8a      	ldr	r3, [pc, #552]	@ (800e138 <MIC_Print+0x298>)
 800df0e:	0092      	lsls	r2, r2, #2
 800df10:	58d2      	ldr	r2, [r2, r3]
 800df12:	4b8c      	ldr	r3, [pc, #560]	@ (800e144 <MIC_Print+0x2a4>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	1c19      	adds	r1, r3, #0
 800df18:	1c10      	adds	r0, r2, #0
 800df1a:	f7f2 fcd1 	bl	80008c0 <__aeabi_fadd>
 800df1e:	1c03      	adds	r3, r0, #0
 800df20:	1c1a      	adds	r2, r3, #0
 800df22:	4b88      	ldr	r3, [pc, #544]	@ (800e144 <MIC_Print+0x2a4>)
 800df24:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800df26:	193b      	adds	r3, r7, r4
 800df28:	781a      	ldrb	r2, [r3, #0]
 800df2a:	4b83      	ldr	r3, [pc, #524]	@ (800e138 <MIC_Print+0x298>)
 800df2c:	0092      	lsls	r2, r2, #2
 800df2e:	58d2      	ldr	r2, [r2, r3]
 800df30:	4b85      	ldr	r3, [pc, #532]	@ (800e148 <MIC_Print+0x2a8>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	1c19      	adds	r1, r3, #0
 800df36:	1c10      	adds	r0, r2, #0
 800df38:	f7f2 fb0e 	bl	8000558 <__aeabi_fcmpgt>
 800df3c:	1e03      	subs	r3, r0, #0
 800df3e:	d006      	beq.n	800df4e <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800df40:	193b      	adds	r3, r7, r4
 800df42:	781a      	ldrb	r2, [r3, #0]
 800df44:	4b7c      	ldr	r3, [pc, #496]	@ (800e138 <MIC_Print+0x298>)
 800df46:	0092      	lsls	r2, r2, #2
 800df48:	58d2      	ldr	r2, [r2, r3]
 800df4a:	4b7f      	ldr	r3, [pc, #508]	@ (800e148 <MIC_Print+0x2a8>)
 800df4c:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800df4e:	4b7d      	ldr	r3, [pc, #500]	@ (800e144 <MIC_Print+0x2a4>)
 800df50:	681c      	ldr	r4, [r3, #0]
 800df52:	4b7b      	ldr	r3, [pc, #492]	@ (800e140 <MIC_Print+0x2a0>)
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	0018      	movs	r0, r3
 800df58:	f7f3 fcb6 	bl	80018c8 <__aeabi_ui2f>
 800df5c:	1c03      	adds	r3, r0, #0
 800df5e:	1c19      	adds	r1, r3, #0
 800df60:	1c20      	adds	r0, r4, #0
 800df62:	f7f2 fe9f 	bl	8000ca4 <__aeabi_fdiv>
 800df66:	1c03      	adds	r3, r0, #0
 800df68:	1c1a      	adds	r2, r3, #0
 800df6a:	4b78      	ldr	r3, [pc, #480]	@ (800e14c <MIC_Print+0x2ac>)
 800df6c:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800df6e:	4b70      	ldr	r3, [pc, #448]	@ (800e130 <MIC_Print+0x290>)
 800df70:	6818      	ldr	r0, [r3, #0]
 800df72:	4b75      	ldr	r3, [pc, #468]	@ (800e148 <MIC_Print+0x2a8>)
 800df74:	6819      	ldr	r1, [r3, #0]
 800df76:	4b75      	ldr	r3, [pc, #468]	@ (800e14c <MIC_Print+0x2ac>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	1c1a      	adds	r2, r3, #0
 800df7c:	f7f6 fe14 	bl	8004ba8 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800df80:	210f      	movs	r1, #15
 800df82:	187b      	adds	r3, r7, r1
 800df84:	781a      	ldrb	r2, [r3, #0]
 800df86:	187b      	adds	r3, r7, r1
 800df88:	3201      	adds	r2, #1
 800df8a:	701a      	strb	r2, [r3, #0]
 800df8c:	4b6c      	ldr	r3, [pc, #432]	@ (800e140 <MIC_Print+0x2a0>)
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	220f      	movs	r2, #15
 800df92:	18ba      	adds	r2, r7, r2
 800df94:	7812      	ldrb	r2, [r2, #0]
 800df96:	429a      	cmp	r2, r3
 800df98:	d3b5      	bcc.n	800df06 <MIC_Print+0x66>
  }
  Info("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f", dBA,mPabuffer, dBAmax, dBAAverage);
 800df9a:	4b65      	ldr	r3, [pc, #404]	@ (800e130 <MIC_Print+0x290>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	1c18      	adds	r0, r3, #0
 800dfa0:	f7f5 fc78 	bl	8003894 <__aeabi_f2d>
 800dfa4:	0004      	movs	r4, r0
 800dfa6:	000d      	movs	r5, r1
 800dfa8:	4b67      	ldr	r3, [pc, #412]	@ (800e148 <MIC_Print+0x2a8>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	1c18      	adds	r0, r3, #0
 800dfae:	f7f5 fc71 	bl	8003894 <__aeabi_f2d>
 800dfb2:	6038      	str	r0, [r7, #0]
 800dfb4:	6079      	str	r1, [r7, #4]
 800dfb6:	4b65      	ldr	r3, [pc, #404]	@ (800e14c <MIC_Print+0x2ac>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	1c18      	adds	r0, r3, #0
 800dfbc:	f7f5 fc6a 	bl	8003894 <__aeabi_f2d>
 800dfc0:	0002      	movs	r2, r0
 800dfc2:	000b      	movs	r3, r1
 800dfc4:	4862      	ldr	r0, [pc, #392]	@ (800e150 <MIC_Print+0x2b0>)
 800dfc6:	4963      	ldr	r1, [pc, #396]	@ (800e154 <MIC_Print+0x2b4>)
 800dfc8:	9206      	str	r2, [sp, #24]
 800dfca:	9307      	str	r3, [sp, #28]
 800dfcc:	683a      	ldr	r2, [r7, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	9204      	str	r2, [sp, #16]
 800dfd2:	9305      	str	r3, [sp, #20]
 800dfd4:	4b60      	ldr	r3, [pc, #384]	@ (800e158 <MIC_Print+0x2b8>)
 800dfd6:	9302      	str	r3, [sp, #8]
 800dfd8:	9400      	str	r4, [sp, #0]
 800dfda:	9501      	str	r5, [sp, #4]
 800dfdc:	0002      	movs	r2, r0
 800dfde:	2002      	movs	r0, #2
 800dfe0:	f005 fef6 	bl	8013dd0 <CreateLine>

  if(counter > NUMBER_OF_SAMPLES){
 800dfe4:	4b53      	ldr	r3, [pc, #332]	@ (800e134 <MIC_Print+0x294>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	2b0a      	cmp	r3, #10
 800dfea:	d902      	bls.n	800dff2 <MIC_Print+0x152>
    counter = 0;
 800dfec:	4b51      	ldr	r3, [pc, #324]	@ (800e134 <MIC_Print+0x294>)
 800dfee:	2200      	movs	r2, #0
 800dff0:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800dff2:	4b4f      	ldr	r3, [pc, #316]	@ (800e130 <MIC_Print+0x290>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4959      	ldr	r1, [pc, #356]	@ (800e15c <MIC_Print+0x2bc>)
 800dff8:	1c18      	adds	r0, r3, #0
 800dffa:	f7f2 fab7 	bl	800056c <__aeabi_fcmpge>
 800dffe:	1e03      	subs	r3, r0, #0
 800e000:	d004      	beq.n	800e00c <MIC_Print+0x16c>
    SetDBLED(true, true, true);
 800e002:	2201      	movs	r2, #1
 800e004:	2101      	movs	r1, #1
 800e006:	2001      	movs	r0, #1
 800e008:	f004 fbb2 	bl	8012770 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800e00c:	4b48      	ldr	r3, [pc, #288]	@ (800e130 <MIC_Print+0x290>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4953      	ldr	r1, [pc, #332]	@ (800e160 <MIC_Print+0x2c0>)
 800e012:	1c18      	adds	r0, r3, #0
 800e014:	f7f2 faaa 	bl	800056c <__aeabi_fcmpge>
 800e018:	1e03      	subs	r3, r0, #0
 800e01a:	d00c      	beq.n	800e036 <MIC_Print+0x196>
 800e01c:	4b44      	ldr	r3, [pc, #272]	@ (800e130 <MIC_Print+0x290>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	494e      	ldr	r1, [pc, #312]	@ (800e15c <MIC_Print+0x2bc>)
 800e022:	1c18      	adds	r0, r3, #0
 800e024:	f7f2 fa84 	bl	8000530 <__aeabi_fcmplt>
 800e028:	1e03      	subs	r3, r0, #0
 800e02a:	d004      	beq.n	800e036 <MIC_Print+0x196>
    SetDBLED(true, false, false);
 800e02c:	2200      	movs	r2, #0
 800e02e:	2100      	movs	r1, #0
 800e030:	2001      	movs	r0, #1
 800e032:	f004 fb9d 	bl	8012770 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800e036:	4b3e      	ldr	r3, [pc, #248]	@ (800e130 <MIC_Print+0x290>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	494a      	ldr	r1, [pc, #296]	@ (800e164 <MIC_Print+0x2c4>)
 800e03c:	1c18      	adds	r0, r3, #0
 800e03e:	f7f2 fa95 	bl	800056c <__aeabi_fcmpge>
 800e042:	1e03      	subs	r3, r0, #0
 800e044:	d00c      	beq.n	800e060 <MIC_Print+0x1c0>
 800e046:	4b3a      	ldr	r3, [pc, #232]	@ (800e130 <MIC_Print+0x290>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4945      	ldr	r1, [pc, #276]	@ (800e160 <MIC_Print+0x2c0>)
 800e04c:	1c18      	adds	r0, r3, #0
 800e04e:	f7f2 fa6f 	bl	8000530 <__aeabi_fcmplt>
 800e052:	1e03      	subs	r3, r0, #0
 800e054:	d004      	beq.n	800e060 <MIC_Print+0x1c0>
    SetDBLED(true, true, false);
 800e056:	2200      	movs	r2, #0
 800e058:	2101      	movs	r1, #1
 800e05a:	2001      	movs	r0, #1
 800e05c:	f004 fb88 	bl	8012770 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800e060:	4b33      	ldr	r3, [pc, #204]	@ (800e130 <MIC_Print+0x290>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4940      	ldr	r1, [pc, #256]	@ (800e168 <MIC_Print+0x2c8>)
 800e066:	1c18      	adds	r0, r3, #0
 800e068:	f7f2 fa80 	bl	800056c <__aeabi_fcmpge>
 800e06c:	1e03      	subs	r3, r0, #0
 800e06e:	d00c      	beq.n	800e08a <MIC_Print+0x1ea>
 800e070:	4b2f      	ldr	r3, [pc, #188]	@ (800e130 <MIC_Print+0x290>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	493b      	ldr	r1, [pc, #236]	@ (800e164 <MIC_Print+0x2c4>)
 800e076:	1c18      	adds	r0, r3, #0
 800e078:	f7f2 fa5a 	bl	8000530 <__aeabi_fcmplt>
 800e07c:	1e03      	subs	r3, r0, #0
 800e07e:	d004      	beq.n	800e08a <MIC_Print+0x1ea>
    SetDBLED(false, true, false);
 800e080:	2200      	movs	r2, #0
 800e082:	2101      	movs	r1, #1
 800e084:	2000      	movs	r0, #0
 800e086:	f004 fb73 	bl	8012770 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800e08a:	4b29      	ldr	r3, [pc, #164]	@ (800e130 <MIC_Print+0x290>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4937      	ldr	r1, [pc, #220]	@ (800e16c <MIC_Print+0x2cc>)
 800e090:	1c18      	adds	r0, r3, #0
 800e092:	f7f2 fa6b 	bl	800056c <__aeabi_fcmpge>
 800e096:	1e03      	subs	r3, r0, #0
 800e098:	d00c      	beq.n	800e0b4 <MIC_Print+0x214>
 800e09a:	4b25      	ldr	r3, [pc, #148]	@ (800e130 <MIC_Print+0x290>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4932      	ldr	r1, [pc, #200]	@ (800e168 <MIC_Print+0x2c8>)
 800e0a0:	1c18      	adds	r0, r3, #0
 800e0a2:	f7f2 fa45 	bl	8000530 <__aeabi_fcmplt>
 800e0a6:	1e03      	subs	r3, r0, #0
 800e0a8:	d004      	beq.n	800e0b4 <MIC_Print+0x214>
    SetDBLED(false, true, true);
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	2000      	movs	r0, #0
 800e0b0:	f004 fb5e 	bl	8012770 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800e0b4:	4b1e      	ldr	r3, [pc, #120]	@ (800e130 <MIC_Print+0x290>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	492d      	ldr	r1, [pc, #180]	@ (800e170 <MIC_Print+0x2d0>)
 800e0ba:	1c18      	adds	r0, r3, #0
 800e0bc:	f7f2 fa56 	bl	800056c <__aeabi_fcmpge>
 800e0c0:	1e03      	subs	r3, r0, #0
 800e0c2:	d00c      	beq.n	800e0de <MIC_Print+0x23e>
 800e0c4:	4b1a      	ldr	r3, [pc, #104]	@ (800e130 <MIC_Print+0x290>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4928      	ldr	r1, [pc, #160]	@ (800e16c <MIC_Print+0x2cc>)
 800e0ca:	1c18      	adds	r0, r3, #0
 800e0cc:	f7f2 fa30 	bl	8000530 <__aeabi_fcmplt>
 800e0d0:	1e03      	subs	r3, r0, #0
 800e0d2:	d004      	beq.n	800e0de <MIC_Print+0x23e>
    SetDBLED(false, false, true);
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	2000      	movs	r0, #0
 800e0da:	f004 fb49 	bl	8012770 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800e0de:	4b14      	ldr	r3, [pc, #80]	@ (800e130 <MIC_Print+0x290>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4924      	ldr	r1, [pc, #144]	@ (800e174 <MIC_Print+0x2d4>)
 800e0e4:	1c18      	adds	r0, r3, #0
 800e0e6:	f7f2 fa41 	bl	800056c <__aeabi_fcmpge>
 800e0ea:	1e03      	subs	r3, r0, #0
 800e0ec:	d00c      	beq.n	800e108 <MIC_Print+0x268>
 800e0ee:	4b10      	ldr	r3, [pc, #64]	@ (800e130 <MIC_Print+0x290>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	491f      	ldr	r1, [pc, #124]	@ (800e170 <MIC_Print+0x2d0>)
 800e0f4:	1c18      	adds	r0, r3, #0
 800e0f6:	f7f2 fa1b 	bl	8000530 <__aeabi_fcmplt>
 800e0fa:	1e03      	subs	r3, r0, #0
 800e0fc:	d004      	beq.n	800e108 <MIC_Print+0x268>
    SetDBLED(true, false, true);
 800e0fe:	2201      	movs	r2, #1
 800e100:	2100      	movs	r1, #0
 800e102:	2001      	movs	r0, #1
 800e104:	f004 fb34 	bl	8012770 <SetDBLED>
  }
  if(dBA < 35){//off
 800e108:	4b09      	ldr	r3, [pc, #36]	@ (800e130 <MIC_Print+0x290>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4919      	ldr	r1, [pc, #100]	@ (800e174 <MIC_Print+0x2d4>)
 800e10e:	1c18      	adds	r0, r3, #0
 800e110:	f7f2 fa0e 	bl	8000530 <__aeabi_fcmplt>
 800e114:	1e03      	subs	r3, r0, #0
 800e116:	d100      	bne.n	800e11a <MIC_Print+0x27a>
    SetDBLED(false, false, false);
  }
}
 800e118:	e004      	b.n	800e124 <MIC_Print+0x284>
    SetDBLED(false, false, false);
 800e11a:	2200      	movs	r2, #0
 800e11c:	2100      	movs	r1, #0
 800e11e:	2000      	movs	r0, #0
 800e120:	f004 fb26 	bl	8012770 <SetDBLED>
}
 800e124:	46c0      	nop			@ (mov r8, r8)
 800e126:	46bd      	mov	sp, r7
 800e128:	b004      	add	sp, #16
 800e12a:	bdb0      	pop	{r4, r5, r7, pc}
 800e12c:	20001178 	.word	0x20001178
 800e130:	20001144 	.word	0x20001144
 800e134:	20001180 	.word	0x20001180
 800e138:	20001148 	.word	0x20001148
 800e13c:	20001181 	.word	0x20001181
 800e140:	200000a9 	.word	0x200000a9
 800e144:	20001174 	.word	0x20001174
 800e148:	2000117c 	.word	0x2000117c
 800e14c:	20001170 	.word	0x20001170
 800e150:	0802cd80 	.word	0x0802cd80
 800e154:	0802cdc4 	.word	0x0802cdc4
 800e158:	20001138 	.word	0x20001138
 800e15c:	42b40000 	.word	0x42b40000
 800e160:	42a00000 	.word	0x42a00000
 800e164:	428c0000 	.word	0x428c0000
 800e168:	42700000 	.word	0x42700000
 800e16c:	42480000 	.word	0x42480000
 800e170:	42200000 	.word	0x42200000
 800e174:	420c0000 	.word	0x420c0000

0800e178 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800e17e:	4b11      	ldr	r3, [pc, #68]	@ (800e1c4 <MIC_TestMeasurementDone+0x4c>)
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	b2db      	uxtb	r3, r3
 800e184:	4a10      	ldr	r2, [pc, #64]	@ (800e1c8 <MIC_TestMeasurementDone+0x50>)
 800e186:	4911      	ldr	r1, [pc, #68]	@ (800e1cc <MIC_TestMeasurementDone+0x54>)
 800e188:	2002      	movs	r0, #2
 800e18a:	f005 fe21 	bl	8013dd0 <CreateLine>
  if(DataReady) {
 800e18e:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c4 <MIC_TestMeasurementDone+0x4c>)
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	b2db      	uxtb	r3, r3
 800e194:	2b00      	cmp	r3, #0
 800e196:	d010      	beq.n	800e1ba <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800e198:	1dfb      	adds	r3, r7, #7
 800e19a:	4a0d      	ldr	r2, [pc, #52]	@ (800e1d0 <MIC_TestMeasurementDone+0x58>)
 800e19c:	7812      	ldrb	r2, [r2, #0]
 800e19e:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800e1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e1d0 <MIC_TestMeasurementDone+0x58>)
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	4a0b      	ldr	r2, [pc, #44]	@ (800e1d4 <MIC_TestMeasurementDone+0x5c>)
 800e1a8:	4908      	ldr	r1, [pc, #32]	@ (800e1cc <MIC_TestMeasurementDone+0x54>)
 800e1aa:	2002      	movs	r0, #2
 800e1ac:	f005 fe10 	bl	8013dd0 <CreateLine>
    ResetMICIndicator();
 800e1b0:	f004 fbcc 	bl	801294c <ResetMICIndicator>
    return Check;
 800e1b4:	1dfb      	adds	r3, r7, #7
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	e000      	b.n	800e1bc <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	0018      	movs	r0, r3
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	b002      	add	sp, #8
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	200012b5 	.word	0x200012b5
 800e1c8:	0802cdc8 	.word	0x0802cdc8
 800e1cc:	0802cdc4 	.word	0x0802cdc4
 800e1d0:	200012b6 	.word	0x200012b6
 800e1d4:	0802cdf4 	.word	0x0802cdf4

0800e1d8 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800e1de:	4b78      	ldr	r3, [pc, #480]	@ (800e3c0 <Mic_Upkeep+0x1e8>)
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b03      	cmp	r3, #3
 800e1e4:	d100      	bne.n	800e1e8 <Mic_Upkeep+0x10>
 800e1e6:	e0b8      	b.n	800e35a <Mic_Upkeep+0x182>
 800e1e8:	dd00      	ble.n	800e1ec <Mic_Upkeep+0x14>
 800e1ea:	e0d3      	b.n	800e394 <Mic_Upkeep+0x1bc>
 800e1ec:	2b02      	cmp	r3, #2
 800e1ee:	d037      	beq.n	800e260 <Mic_Upkeep+0x88>
 800e1f0:	dd00      	ble.n	800e1f4 <Mic_Upkeep+0x1c>
 800e1f2:	e0cf      	b.n	800e394 <Mic_Upkeep+0x1bc>
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d002      	beq.n	800e1fe <Mic_Upkeep+0x26>
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d014      	beq.n	800e226 <Mic_Upkeep+0x4e>
 800e1fc:	e0ca      	b.n	800e394 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800e1fe:	2001      	movs	r0, #1
 800e200:	f003 fbb4 	bl	801196c <enableMicrophone>
 800e204:	0003      	movs	r3, r0
 800e206:	001a      	movs	r2, r3
 800e208:	2301      	movs	r3, #1
 800e20a:	4053      	eors	r3, r2
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d005      	beq.n	800e21e <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800e212:	4a6c      	ldr	r2, [pc, #432]	@ (800e3c4 <Mic_Upkeep+0x1ec>)
 800e214:	4b6c      	ldr	r3, [pc, #432]	@ (800e3c8 <Mic_Upkeep+0x1f0>)
 800e216:	217f      	movs	r1, #127	@ 0x7f
 800e218:	0018      	movs	r0, r3
 800e21a:	f005 fec1 	bl	8013fa0 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800e21e:	4b68      	ldr	r3, [pc, #416]	@ (800e3c0 <Mic_Upkeep+0x1e8>)
 800e220:	2201      	movs	r2, #1
 800e222:	701a      	strb	r2, [r3, #0]
    break;
 800e224:	e0c5      	b.n	800e3b2 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800e226:	f003 fb7d 	bl	8011924 <micSettlingComplete>
 800e22a:	1e03      	subs	r3, r0, #0
 800e22c:	d105      	bne.n	800e23a <Mic_Upkeep+0x62>
 800e22e:	4b67      	ldr	r3, [pc, #412]	@ (800e3cc <Mic_Upkeep+0x1f4>)
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b00      	cmp	r3, #0
 800e236:	d100      	bne.n	800e23a <Mic_Upkeep+0x62>
 800e238:	e0b6      	b.n	800e3a8 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800e23a:	f003 fc01 	bl	8011a40 <startSPLcalculation>
 800e23e:	0003      	movs	r3, r0
 800e240:	001a      	movs	r2, r3
 800e242:	2301      	movs	r3, #1
 800e244:	4053      	eors	r3, r2
 800e246:	b2db      	uxtb	r3, r3
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d005      	beq.n	800e258 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800e24c:	4a5d      	ldr	r2, [pc, #372]	@ (800e3c4 <Mic_Upkeep+0x1ec>)
 800e24e:	4b5e      	ldr	r3, [pc, #376]	@ (800e3c8 <Mic_Upkeep+0x1f0>)
 800e250:	2188      	movs	r1, #136	@ 0x88
 800e252:	0018      	movs	r0, r3
 800e254:	f005 fea4 	bl	8013fa0 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800e258:	4b59      	ldr	r3, [pc, #356]	@ (800e3c0 <Mic_Upkeep+0x1e8>)
 800e25a:	2202      	movs	r2, #2
 800e25c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e25e:	e0a3      	b.n	800e3a8 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800e260:	4b5b      	ldr	r3, [pc, #364]	@ (800e3d0 <Mic_Upkeep+0x1f8>)
 800e262:	2201      	movs	r2, #1
 800e264:	2101      	movs	r1, #1
 800e266:	0018      	movs	r0, r3
 800e268:	f003 fa3e 	bl	80116e8 <getSoundData>
 800e26c:	1e03      	subs	r3, r0, #0
 800e26e:	d100      	bne.n	800e272 <Mic_Upkeep+0x9a>
 800e270:	e09c      	b.n	800e3ac <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800e272:	f003 fb37 	bl	80118e4 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800e276:	4b56      	ldr	r3, [pc, #344]	@ (800e3d0 <Mic_Upkeep+0x1f8>)
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	001a      	movs	r2, r3
 800e27c:	4b54      	ldr	r3, [pc, #336]	@ (800e3d0 <Mic_Upkeep+0x1f8>)
 800e27e:	785b      	ldrb	r3, [r3, #1]
 800e280:	4954      	ldr	r1, [pc, #336]	@ (800e3d4 <Mic_Upkeep+0x1fc>)
 800e282:	0038      	movs	r0, r7
 800e284:	f017 ffce 	bl	8026224 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800e288:	4b51      	ldr	r3, [pc, #324]	@ (800e3d0 <Mic_Upkeep+0x1f8>)
 800e28a:	89db      	ldrh	r3, [r3, #14]
 800e28c:	001a      	movs	r2, r3
 800e28e:	4b50      	ldr	r3, [pc, #320]	@ (800e3d0 <Mic_Upkeep+0x1f8>)
 800e290:	7c1b      	ldrb	r3, [r3, #16]
 800e292:	4951      	ldr	r1, [pc, #324]	@ (800e3d8 <Mic_Upkeep+0x200>)
 800e294:	4851      	ldr	r0, [pc, #324]	@ (800e3dc <Mic_Upkeep+0x204>)
 800e296:	f017 ffc5 	bl	8026224 <siprintf>
      dBValue = atof(dBbuffer);
 800e29a:	003b      	movs	r3, r7
 800e29c:	0018      	movs	r0, r3
 800e29e:	f016 fb67 	bl	8024970 <atof>
 800e2a2:	0002      	movs	r2, r0
 800e2a4:	000b      	movs	r3, r1
 800e2a6:	0010      	movs	r0, r2
 800e2a8:	0019      	movs	r1, r3
 800e2aa:	f7f5 fb3b 	bl	8003924 <__aeabi_d2f>
 800e2ae:	1c02      	adds	r2, r0, #0
 800e2b0:	4b4b      	ldr	r3, [pc, #300]	@ (800e3e0 <Mic_Upkeep+0x208>)
 800e2b2:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800e2b4:	4b4a      	ldr	r3, [pc, #296]	@ (800e3e0 <Mic_Upkeep+0x208>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	494a      	ldr	r1, [pc, #296]	@ (800e3e4 <Mic_Upkeep+0x20c>)
 800e2ba:	1c18      	adds	r0, r3, #0
 800e2bc:	f7f2 fec0 	bl	8001040 <__aeabi_fmul>
 800e2c0:	1c03      	adds	r3, r0, #0
 800e2c2:	1c18      	adds	r0, r3, #0
 800e2c4:	f7f5 fae6 	bl	8003894 <__aeabi_f2d>
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	4b47      	ldr	r3, [pc, #284]	@ (800e3e8 <Mic_Upkeep+0x210>)
 800e2cc:	f7f3 fb42 	bl	8001954 <__aeabi_dadd>
 800e2d0:	0002      	movs	r2, r0
 800e2d2:	000b      	movs	r3, r1
 800e2d4:	0010      	movs	r0, r2
 800e2d6:	0019      	movs	r1, r3
 800e2d8:	f7f5 fa4e 	bl	8003778 <__aeabi_d2iz>
 800e2dc:	0003      	movs	r3, r0
 800e2de:	0018      	movs	r0, r3
 800e2e0:	f7f5 fa86 	bl	80037f0 <__aeabi_i2d>
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	4b41      	ldr	r3, [pc, #260]	@ (800e3ec <Mic_Upkeep+0x214>)
 800e2e8:	f7f3 fefa 	bl	80020e0 <__aeabi_ddiv>
 800e2ec:	0002      	movs	r2, r0
 800e2ee:	000b      	movs	r3, r1
 800e2f0:	0010      	movs	r0, r2
 800e2f2:	0019      	movs	r1, r3
 800e2f4:	f7f5 fb16 	bl	8003924 <__aeabi_d2f>
 800e2f8:	1c02      	adds	r2, r0, #0
 800e2fa:	4b39      	ldr	r3, [pc, #228]	@ (800e3e0 <Mic_Upkeep+0x208>)
 800e2fc:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800e2fe:	f7ff fdcf 	bl	800dea0 <MIC_Print>
      if (!startSPLcalculation()) {
 800e302:	f003 fb9d 	bl	8011a40 <startSPLcalculation>
 800e306:	0003      	movs	r3, r0
 800e308:	001a      	movs	r2, r3
 800e30a:	2301      	movs	r3, #1
 800e30c:	4053      	eors	r3, r2
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b00      	cmp	r3, #0
 800e312:	d005      	beq.n	800e320 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800e314:	4a2b      	ldr	r2, [pc, #172]	@ (800e3c4 <Mic_Upkeep+0x1ec>)
 800e316:	4b2c      	ldr	r3, [pc, #176]	@ (800e3c8 <Mic_Upkeep+0x1f0>)
 800e318:	2198      	movs	r1, #152	@ 0x98
 800e31a:	0018      	movs	r0, r3
 800e31c:	f005 fe40 	bl	8013fa0 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800e320:	2000      	movs	r0, #0
 800e322:	f003 fb23 	bl	801196c <enableMicrophone>
 800e326:	0003      	movs	r3, r0
 800e328:	001a      	movs	r2, r3
 800e32a:	2301      	movs	r3, #1
 800e32c:	4053      	eors	r3, r2
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800e334:	4a23      	ldr	r2, [pc, #140]	@ (800e3c4 <Mic_Upkeep+0x1ec>)
 800e336:	4b24      	ldr	r3, [pc, #144]	@ (800e3c8 <Mic_Upkeep+0x1f0>)
 800e338:	219b      	movs	r1, #155	@ 0x9b
 800e33a:	0018      	movs	r0, r3
 800e33c:	f005 fe30 	bl	8013fa0 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800e340:	f006 fabe 	bl	80148c0 <HAL_GetTick>
 800e344:	0003      	movs	r3, r0
 800e346:	4a2a      	ldr	r2, [pc, #168]	@ (800e3f0 <Mic_Upkeep+0x218>)
 800e348:	189a      	adds	r2, r3, r2
 800e34a:	4b2a      	ldr	r3, [pc, #168]	@ (800e3f4 <Mic_Upkeep+0x21c>)
 800e34c:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800e34e:	4b1c      	ldr	r3, [pc, #112]	@ (800e3c0 <Mic_Upkeep+0x1e8>)
 800e350:	2203      	movs	r2, #3
 800e352:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800e354:	f004 fafa 	bl	801294c <ResetMICIndicator>
    }
    break;
 800e358:	e028      	b.n	800e3ac <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800e35a:	4b26      	ldr	r3, [pc, #152]	@ (800e3f4 <Mic_Upkeep+0x21c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	0018      	movs	r0, r3
 800e360:	f005 fce0 	bl	8013d24 <TimestampIsReached>
 800e364:	1e03      	subs	r3, r0, #0
 800e366:	d023      	beq.n	800e3b0 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800e368:	2001      	movs	r0, #1
 800e36a:	f003 faff 	bl	801196c <enableMicrophone>
 800e36e:	0003      	movs	r3, r0
 800e370:	001a      	movs	r2, r3
 800e372:	2301      	movs	r3, #1
 800e374:	4053      	eors	r3, r2
 800e376:	b2db      	uxtb	r3, r3
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d005      	beq.n	800e388 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800e37c:	4a11      	ldr	r2, [pc, #68]	@ (800e3c4 <Mic_Upkeep+0x1ec>)
 800e37e:	4b12      	ldr	r3, [pc, #72]	@ (800e3c8 <Mic_Upkeep+0x1f0>)
 800e380:	21a6      	movs	r1, #166	@ 0xa6
 800e382:	0018      	movs	r0, r3
 800e384:	f005 fe0c 	bl	8013fa0 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800e388:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c0 <Mic_Upkeep+0x1e8>)
 800e38a:	2201      	movs	r2, #1
 800e38c:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800e38e:	f004 fa9b 	bl	80128c8 <SetMICIndicator>
    }
    break;
 800e392:	e00d      	b.n	800e3b0 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800e394:	4a18      	ldr	r2, [pc, #96]	@ (800e3f8 <Mic_Upkeep+0x220>)
 800e396:	4b19      	ldr	r3, [pc, #100]	@ (800e3fc <Mic_Upkeep+0x224>)
 800e398:	0019      	movs	r1, r3
 800e39a:	2003      	movs	r0, #3
 800e39c:	f005 fd18 	bl	8013dd0 <CreateLine>
    MicState = MIC_STATE_INIT;
 800e3a0:	4b07      	ldr	r3, [pc, #28]	@ (800e3c0 <Mic_Upkeep+0x1e8>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	701a      	strb	r2, [r3, #0]
    break;
 800e3a6:	e004      	b.n	800e3b2 <Mic_Upkeep+0x1da>
    break;
 800e3a8:	46c0      	nop			@ (mov r8, r8)
 800e3aa:	e002      	b.n	800e3b2 <Mic_Upkeep+0x1da>
    break;
 800e3ac:	46c0      	nop			@ (mov r8, r8)
 800e3ae:	e000      	b.n	800e3b2 <Mic_Upkeep+0x1da>
    break;
 800e3b0:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800e3b2:	4b03      	ldr	r3, [pc, #12]	@ (800e3c0 <Mic_Upkeep+0x1e8>)
 800e3b4:	781b      	ldrb	r3, [r3, #0]
}
 800e3b6:	0018      	movs	r0, r3
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	b002      	add	sp, #8
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	46c0      	nop			@ (mov r8, r8)
 800e3c0:	2000119a 	.word	0x2000119a
 800e3c4:	0802ce0c 	.word	0x0802ce0c
 800e3c8:	0802e2f4 	.word	0x0802e2f4
 800e3cc:	200012b5 	.word	0x200012b5
 800e3d0:	20001188 	.word	0x20001188
 800e3d4:	0802ce28 	.word	0x0802ce28
 800e3d8:	0802ce30 	.word	0x0802ce30
 800e3dc:	20001138 	.word	0x20001138
 800e3e0:	20001178 	.word	0x20001178
 800e3e4:	42c80000 	.word	0x42c80000
 800e3e8:	3fe00000 	.word	0x3fe00000
 800e3ec:	40590000 	.word	0x40590000
 800e3f0:	000002f3 	.word	0x000002f3
 800e3f4:	20001184 	.word	0x20001184
 800e3f8:	0802ce38 	.word	0x0802ce38
 800e3fc:	0802ce58 	.word	0x0802ce58

0800e400 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800e406:	1d3b      	adds	r3, r7, #4
 800e408:	0018      	movs	r0, r3
 800e40a:	2314      	movs	r3, #20
 800e40c:	001a      	movs	r2, r3
 800e40e:	2100      	movs	r1, #0
 800e410:	f018 f850 	bl	80264b4 <memset>
  RTC_DateTypeDef sDate = {0};
 800e414:	003b      	movs	r3, r7
 800e416:	2200      	movs	r2, #0
 800e418:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800e41a:	4b2e      	ldr	r3, [pc, #184]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e41c:	4a2e      	ldr	r2, [pc, #184]	@ (800e4d8 <MX_RTC_Init+0xd8>)
 800e41e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e420:	4b2c      	ldr	r3, [pc, #176]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e422:	2200      	movs	r2, #0
 800e424:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e426:	4b2b      	ldr	r3, [pc, #172]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e428:	227f      	movs	r2, #127	@ 0x7f
 800e42a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e42c:	4b29      	ldr	r3, [pc, #164]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e42e:	22ff      	movs	r2, #255	@ 0xff
 800e430:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e432:	4b28      	ldr	r3, [pc, #160]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e434:	2200      	movs	r2, #0
 800e436:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800e438:	4b26      	ldr	r3, [pc, #152]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e43e:	4b25      	ldr	r3, [pc, #148]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e440:	2200      	movs	r2, #0
 800e442:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e444:	4b23      	ldr	r3, [pc, #140]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e446:	2200      	movs	r2, #0
 800e448:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e44a:	4b22      	ldr	r3, [pc, #136]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e44c:	0018      	movs	r0, r3
 800e44e:	f00d fe23 	bl	801c098 <HAL_RTC_Init>
 800e452:	1e03      	subs	r3, r0, #0
 800e454:	d001      	beq.n	800e45a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800e456:	f7fe ff67 	bl	800d328 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800e45a:	1d3b      	adds	r3, r7, #4
 800e45c:	220d      	movs	r2, #13
 800e45e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800e460:	1d3b      	adds	r3, r7, #4
 800e462:	2200      	movs	r2, #0
 800e464:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800e466:	1d3b      	adds	r3, r7, #4
 800e468:	2200      	movs	r2, #0
 800e46a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e46c:	1d3b      	adds	r3, r7, #4
 800e46e:	2200      	movs	r2, #0
 800e470:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e472:	1d3b      	adds	r3, r7, #4
 800e474:	2200      	movs	r2, #0
 800e476:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e478:	1d39      	adds	r1, r7, #4
 800e47a:	4b16      	ldr	r3, [pc, #88]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e47c:	2200      	movs	r2, #0
 800e47e:	0018      	movs	r0, r3
 800e480:	f00d fea6 	bl	801c1d0 <HAL_RTC_SetTime>
 800e484:	1e03      	subs	r3, r0, #0
 800e486:	d001      	beq.n	800e48c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800e488:	f7fe ff4e 	bl	800d328 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800e48c:	003b      	movs	r3, r7
 800e48e:	2206      	movs	r2, #6
 800e490:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800e492:	003b      	movs	r3, r7
 800e494:	2211      	movs	r2, #17
 800e496:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800e498:	003b      	movs	r3, r7
 800e49a:	2217      	movs	r2, #23
 800e49c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800e49e:	003b      	movs	r3, r7
 800e4a0:	2218      	movs	r2, #24
 800e4a2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e4a4:	0039      	movs	r1, r7
 800e4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	0018      	movs	r0, r3
 800e4ac:	f00d ff98 	bl	801c3e0 <HAL_RTC_SetDate>
 800e4b0:	1e03      	subs	r3, r0, #0
 800e4b2:	d001      	beq.n	800e4b8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800e4b4:	f7fe ff38 	bl	800d328 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e4b8:	4b06      	ldr	r3, [pc, #24]	@ (800e4d4 <MX_RTC_Init+0xd4>)
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	2100      	movs	r1, #0
 800e4be:	0018      	movs	r0, r3
 800e4c0:	f00e f966 	bl	801c790 <HAL_RTCEx_SetWakeUpTimer_IT>
 800e4c4:	1e03      	subs	r3, r0, #0
 800e4c6:	d001      	beq.n	800e4cc <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800e4c8:	f7fe ff2e 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800e4cc:	46c0      	nop			@ (mov r8, r8)
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	b006      	add	sp, #24
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	2000119c 	.word	0x2000119c
 800e4d8:	40002800 	.word	0x40002800

0800e4dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a0a      	ldr	r2, [pc, #40]	@ (800e514 <HAL_RTC_MspInit+0x38>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d10e      	bne.n	800e50c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e4ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e518 <HAL_RTC_MspInit+0x3c>)
 800e4f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e4f2:	4b09      	ldr	r3, [pc, #36]	@ (800e518 <HAL_RTC_MspInit+0x3c>)
 800e4f4:	2180      	movs	r1, #128	@ 0x80
 800e4f6:	02c9      	lsls	r1, r1, #11
 800e4f8:	430a      	orrs	r2, r1
 800e4fa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	2100      	movs	r1, #0
 800e500:	2002      	movs	r0, #2
 800e502:	f006 fe63 	bl	80151cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e506:	2002      	movs	r0, #2
 800e508:	f006 fe75 	bl	80151f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e50c:	46c0      	nop			@ (mov r8, r8)
 800e50e:	46bd      	mov	sp, r7
 800e510:	b002      	add	sp, #8
 800e512:	bd80      	pop	{r7, pc}
 800e514:	40002800 	.word	0x40002800
 800e518:	40021000 	.word	0x40021000

0800e51c <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800e51c:	b580      	push	{r7, lr}
 800e51e:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800e520:	4b02      	ldr	r3, [pc, #8]	@ (800e52c <sen5x_Get_sen5x_enable_state+0x10>)
 800e522:	781b      	ldrb	r3, [r3, #0]
}
 800e524:	0018      	movs	r0, r3
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	46c0      	nop			@ (mov r8, r8)
 800e52c:	200011c3 	.word	0x200011c3

0800e530 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	0002      	movs	r2, r0
 800e538:	1dfb      	adds	r3, r7, #7
 800e53a:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800e53c:	4b03      	ldr	r3, [pc, #12]	@ (800e54c <sen5x_Set_sen5x_state+0x1c>)
 800e53e:	1dfa      	adds	r2, r7, #7
 800e540:	7812      	ldrb	r2, [r2, #0]
 800e542:	701a      	strb	r2, [r3, #0]
}
 800e544:	46c0      	nop			@ (mov r8, r8)
 800e546:	46bd      	mov	sp, r7
 800e548:	b002      	add	sp, #8
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	200011c3 	.word	0x200011c3

0800e550 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800e558:	f006 f9b2 	bl	80148c0 <HAL_GetTick>
 800e55c:	0002      	movs	r2, r0
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	18d2      	adds	r2, r2, r3
 800e562:	4b03      	ldr	r3, [pc, #12]	@ (800e570 <setsen5xReadTimer+0x20>)
 800e564:	601a      	str	r2, [r3, #0]
}
 800e566:	46c0      	nop			@ (mov r8, r8)
 800e568:	46bd      	mov	sp, r7
 800e56a:	b002      	add	sp, #8
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	46c0      	nop			@ (mov r8, r8)
 800e570:	200011d0 	.word	0x200011d0

0800e574 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	0002      	movs	r2, r0
 800e57c:	1dfb      	adds	r3, r7, #7
 800e57e:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800e580:	4b03      	ldr	r3, [pc, #12]	@ (800e590 <setsen5xSamplecounter+0x1c>)
 800e582:	2200      	movs	r2, #0
 800e584:	701a      	strb	r2, [r3, #0]
}
 800e586:	46c0      	nop			@ (mov r8, r8)
 800e588:	46bd      	mov	sp, r7
 800e58a:	b002      	add	sp, #8
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	46c0      	nop			@ (mov r8, r8)
 800e590:	200011cc 	.word	0x200011cc

0800e594 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800e59c:	f7fe ff7c 	bl	800d498 <IsPMSensorEnabled>
 800e5a0:	1e03      	subs	r3, r0, #0
 800e5a2:	d035      	beq.n	800e610 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800e5a4:	f004 f80e 	bl	80125c4 <batteryChargeCheck>
 800e5a8:	0003      	movs	r3, r0
 800e5aa:	2b03      	cmp	r3, #3
 800e5ac:	d103      	bne.n	800e5b6 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800e5ae:	4b20      	ldr	r3, [pc, #128]	@ (800e630 <sen5x_enable+0x9c>)
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	701a      	strb	r2, [r3, #0]
 800e5b4:	e00d      	b.n	800e5d2 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800e5b6:	4b1e      	ldr	r3, [pc, #120]	@ (800e630 <sen5x_enable+0x9c>)
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	1e5a      	subs	r2, r3, #1
 800e5bc:	4193      	sbcs	r3, r2
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	4053      	eors	r3, r2
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	1c1a      	adds	r2, r3, #0
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	b2da      	uxtb	r2, r3
 800e5ce:	4b18      	ldr	r3, [pc, #96]	@ (800e630 <sen5x_enable+0x9c>)
 800e5d0:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800e5d2:	4b17      	ldr	r3, [pc, #92]	@ (800e630 <sen5x_enable+0x9c>)
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800e5da:	2000      	movs	r0, #0
 800e5dc:	f7ff ffb8 	bl	800e550 <setsen5xReadTimer>
 800e5e0:	e009      	b.n	800e5f6 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800e5e2:	f006 f96d 	bl	80148c0 <HAL_GetTick>
 800e5e6:	0002      	movs	r2, r0
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2164      	movs	r1, #100	@ 0x64
 800e5ec:	434b      	muls	r3, r1
 800e5ee:	18d3      	adds	r3, r2, r3
 800e5f0:	0018      	movs	r0, r3
 800e5f2:	f7ff ffad 	bl	800e550 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800e5f6:	4b0e      	ldr	r3, [pc, #56]	@ (800e630 <sen5x_enable+0x9c>)
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d001      	beq.n	800e602 <sen5x_enable+0x6e>
 800e5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e634 <sen5x_enable+0xa0>)
 800e600:	e000      	b.n	800e604 <sen5x_enable+0x70>
 800e602:	4b0d      	ldr	r3, [pc, #52]	@ (800e638 <sen5x_enable+0xa4>)
 800e604:	4a0d      	ldr	r2, [pc, #52]	@ (800e63c <sen5x_enable+0xa8>)
 800e606:	490e      	ldr	r1, [pc, #56]	@ (800e640 <sen5x_enable+0xac>)
 800e608:	2002      	movs	r0, #2
 800e60a:	f005 fbe1 	bl	8013dd0 <CreateLine>
 800e60e:	e005      	b.n	800e61c <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800e610:	4a0c      	ldr	r2, [pc, #48]	@ (800e644 <sen5x_enable+0xb0>)
 800e612:	4b0b      	ldr	r3, [pc, #44]	@ (800e640 <sen5x_enable+0xac>)
 800e614:	0019      	movs	r1, r3
 800e616:	2002      	movs	r0, #2
 800e618:	f005 fbda 	bl	8013dd0 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800e61c:	4b0a      	ldr	r3, [pc, #40]	@ (800e648 <sen5x_enable+0xb4>)
 800e61e:	2201      	movs	r2, #1
 800e620:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800e622:	4b03      	ldr	r3, [pc, #12]	@ (800e630 <sen5x_enable+0x9c>)
 800e624:	781b      	ldrb	r3, [r3, #0]
}
 800e626:	0018      	movs	r0, r3
 800e628:	46bd      	mov	sp, r7
 800e62a:	b002      	add	sp, #8
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	46c0      	nop			@ (mov r8, r8)
 800e630:	200011c3 	.word	0x200011c3
 800e634:	0802ce5c 	.word	0x0802ce5c
 800e638:	0802ce64 	.word	0x0802ce64
 800e63c:	0802ce70 	.word	0x0802ce70
 800e640:	0802ce8c 	.word	0x0802ce8c
 800e644:	0802ce90 	.word	0x0802ce90
 800e648:	200000aa 	.word	0x200000aa

0800e64c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800e650:	2380      	movs	r3, #128	@ 0x80
 800e652:	015b      	lsls	r3, r3, #5
 800e654:	480f      	ldr	r0, [pc, #60]	@ (800e694 <sen5x_Power_On+0x48>)
 800e656:	2201      	movs	r2, #1
 800e658:	0019      	movs	r1, r3
 800e65a:	f007 fba4 	bl	8015da6 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800e65e:	4a0e      	ldr	r2, [pc, #56]	@ (800e698 <sen5x_Power_On+0x4c>)
 800e660:	4b0e      	ldr	r3, [pc, #56]	@ (800e69c <sen5x_Power_On+0x50>)
 800e662:	0019      	movs	r1, r3
 800e664:	2003      	movs	r0, #3
 800e666:	f005 fbb3 	bl	8013dd0 <CreateLine>
  HAL_Delay(150);
 800e66a:	2096      	movs	r0, #150	@ 0x96
 800e66c:	f006 f932 	bl	80148d4 <HAL_Delay>
  if (sen5x_device_reset()) {
 800e670:	f001 f9f6 	bl	800fa60 <sen5x_device_reset>
 800e674:	1e03      	subs	r3, r0, #0
 800e676:	d006      	beq.n	800e686 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800e678:	4a09      	ldr	r2, [pc, #36]	@ (800e6a0 <sen5x_Power_On+0x54>)
 800e67a:	4b0a      	ldr	r3, [pc, #40]	@ (800e6a4 <sen5x_Power_On+0x58>)
 800e67c:	0019      	movs	r1, r3
 800e67e:	2001      	movs	r0, #1
 800e680:	f005 fba6 	bl	8013dd0 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800e684:	e002      	b.n	800e68c <sen5x_Power_On+0x40>
    sen5x_On = true;
 800e686:	4b08      	ldr	r3, [pc, #32]	@ (800e6a8 <sen5x_Power_On+0x5c>)
 800e688:	2201      	movs	r2, #1
 800e68a:	701a      	strb	r2, [r3, #0]
}
 800e68c:	46c0      	nop			@ (mov r8, r8)
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	46c0      	nop			@ (mov r8, r8)
 800e694:	50000800 	.word	0x50000800
 800e698:	0802ceb0 	.word	0x0802ceb0
 800e69c:	0802cecc 	.word	0x0802cecc
 800e6a0:	0802ced0 	.word	0x0802ced0
 800e6a4:	0802cef8 	.word	0x0802cef8
 800e6a8:	200011c1 	.word	0x200011c1

0800e6ac <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800e6b0:	4b0e      	ldr	r3, [pc, #56]	@ (800e6ec <sen5x_Power_Off+0x40>)
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d006      	beq.n	800e6c6 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800e6b8:	4a0d      	ldr	r2, [pc, #52]	@ (800e6f0 <sen5x_Power_Off+0x44>)
 800e6ba:	4b0e      	ldr	r3, [pc, #56]	@ (800e6f4 <sen5x_Power_Off+0x48>)
 800e6bc:	0019      	movs	r1, r3
 800e6be:	2003      	movs	r0, #3
 800e6c0:	f005 fb86 	bl	8013dd0 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800e6c4:	e00f      	b.n	800e6e6 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800e6c6:	4a0c      	ldr	r2, [pc, #48]	@ (800e6f8 <sen5x_Power_Off+0x4c>)
 800e6c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e6f4 <sen5x_Power_Off+0x48>)
 800e6ca:	0019      	movs	r1, r3
 800e6cc:	2003      	movs	r0, #3
 800e6ce:	f005 fb7f 	bl	8013dd0 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800e6d2:	2380      	movs	r3, #128	@ 0x80
 800e6d4:	015b      	lsls	r3, r3, #5
 800e6d6:	4809      	ldr	r0, [pc, #36]	@ (800e6fc <sen5x_Power_Off+0x50>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	0019      	movs	r1, r3
 800e6dc:	f007 fb63 	bl	8015da6 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800e6e0:	4b07      	ldr	r3, [pc, #28]	@ (800e700 <sen5x_Power_Off+0x54>)
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	701a      	strb	r2, [r3, #0]
}
 800e6e6:	46c0      	nop			@ (mov r8, r8)
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	200011c2 	.word	0x200011c2
 800e6f0:	0802cefc 	.word	0x0802cefc
 800e6f4:	0802cecc 	.word	0x0802cecc
 800e6f8:	0802cf2c 	.word	0x0802cf2c
 800e6fc:	50000800 	.word	0x50000800
 800e700:	200011c1 	.word	0x200011c1

0800e704 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800e704:	b580      	push	{r7, lr}
 800e706:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800e708:	4b02      	ldr	r3, [pc, #8]	@ (800e714 <reset_fanCleaningDone+0x10>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	701a      	strb	r2, [r3, #0]
}
 800e70e:	46c0      	nop			@ (mov r8, r8)
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	200011c0 	.word	0x200011c0

0800e718 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800e718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e71a:	b093      	sub	sp, #76	@ 0x4c
 800e71c:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800e71e:	2436      	movs	r4, #54	@ 0x36
 800e720:	193b      	adds	r3, r7, r4
 800e722:	2200      	movs	r2, #0
 800e724:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800e726:	2335      	movs	r3, #53	@ 0x35
 800e728:	18fb      	adds	r3, r7, r3
 800e72a:	2220      	movs	r2, #32
 800e72c:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800e72e:	2334      	movs	r3, #52	@ 0x34
 800e730:	18fb      	adds	r3, r7, r3
 800e732:	2220      	movs	r2, #32
 800e734:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800e736:	f7ff ff89 	bl	800e64c <sen5x_Power_On>
  error = sen5x_device_reset();
 800e73a:	0025      	movs	r5, r4
 800e73c:	193c      	adds	r4, r7, r4
 800e73e:	f001 f98f 	bl	800fa60 <sen5x_device_reset>
 800e742:	0003      	movs	r3, r0
 800e744:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e746:	002c      	movs	r4, r5
 800e748:	193b      	adds	r3, r7, r4
 800e74a:	2200      	movs	r2, #0
 800e74c:	5e9b      	ldrsh	r3, [r3, r2]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00b      	beq.n	800e76a <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800e752:	193b      	adds	r3, r7, r4
 800e754:	2200      	movs	r2, #0
 800e756:	5e9b      	ldrsh	r3, [r3, r2]
 800e758:	4a77      	ldr	r2, [pc, #476]	@ (800e938 <probe_sen5x+0x220>)
 800e75a:	4978      	ldr	r1, [pc, #480]	@ (800e93c <probe_sen5x+0x224>)
 800e75c:	2001      	movs	r0, #1
 800e75e:	f005 fb37 	bl	8013dd0 <CreateLine>
      return error;
 800e762:	193b      	adds	r3, r7, r4
 800e764:	2200      	movs	r2, #0
 800e766:	5e9b      	ldrsh	r3, [r3, r2]
 800e768:	e0e2      	b.n	800e930 <probe_sen5x+0x218>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800e76a:	2536      	movs	r5, #54	@ 0x36
 800e76c:	197c      	adds	r4, r7, r5
 800e76e:	2335      	movs	r3, #53	@ 0x35
 800e770:	18fb      	adds	r3, r7, r3
 800e772:	781a      	ldrb	r2, [r3, #0]
 800e774:	230c      	movs	r3, #12
 800e776:	18fb      	adds	r3, r7, r3
 800e778:	0011      	movs	r1, r2
 800e77a:	0018      	movs	r0, r3
 800e77c:	f001 f85c 	bl	800f838 <sen5x_get_serial_number>
 800e780:	0003      	movs	r3, r0
 800e782:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e784:	197b      	adds	r3, r7, r5
 800e786:	2200      	movs	r2, #0
 800e788:	5e9b      	ldrsh	r3, [r3, r2]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00b      	beq.n	800e7a6 <probe_sen5x+0x8e>
      Error("Error executing sen5x_get_serial_number(): %i", error);
 800e78e:	197b      	adds	r3, r7, r5
 800e790:	2200      	movs	r2, #0
 800e792:	5e9b      	ldrsh	r3, [r3, r2]
 800e794:	4a6a      	ldr	r2, [pc, #424]	@ (800e940 <probe_sen5x+0x228>)
 800e796:	4969      	ldr	r1, [pc, #420]	@ (800e93c <probe_sen5x+0x224>)
 800e798:	2001      	movs	r0, #1
 800e79a:	f005 fb19 	bl	8013dd0 <CreateLine>
      return error;
 800e79e:	197b      	adds	r3, r7, r5
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	5e9b      	ldrsh	r3, [r3, r2]
 800e7a4:	e0c4      	b.n	800e930 <probe_sen5x+0x218>
  } else {
      Info("Serial number: %s", serial_number);
 800e7a6:	230c      	movs	r3, #12
 800e7a8:	18fb      	adds	r3, r7, r3
 800e7aa:	4a66      	ldr	r2, [pc, #408]	@ (800e944 <probe_sen5x+0x22c>)
 800e7ac:	4966      	ldr	r1, [pc, #408]	@ (800e948 <probe_sen5x+0x230>)
 800e7ae:	2002      	movs	r0, #2
 800e7b0:	f005 fb0e 	bl	8013dd0 <CreateLine>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800e7b4:	2536      	movs	r5, #54	@ 0x36
 800e7b6:	197c      	adds	r4, r7, r5
 800e7b8:	2334      	movs	r3, #52	@ 0x34
 800e7ba:	18fb      	adds	r3, r7, r3
 800e7bc:	781a      	ldrb	r2, [r3, #0]
 800e7be:	4b63      	ldr	r3, [pc, #396]	@ (800e94c <probe_sen5x+0x234>)
 800e7c0:	0011      	movs	r1, r2
 800e7c2:	0018      	movs	r0, r3
 800e7c4:	f000 ffe2 	bl	800f78c <sen5x_get_product_name>
 800e7c8:	0003      	movs	r3, r0
 800e7ca:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e7cc:	197b      	adds	r3, r7, r5
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	5e9b      	ldrsh	r3, [r3, r2]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00b      	beq.n	800e7ee <probe_sen5x+0xd6>
      Error("Error executing sen5x_get_product_name(): %i", error);
 800e7d6:	197b      	adds	r3, r7, r5
 800e7d8:	2200      	movs	r2, #0
 800e7da:	5e9b      	ldrsh	r3, [r3, r2]
 800e7dc:	4a5c      	ldr	r2, [pc, #368]	@ (800e950 <probe_sen5x+0x238>)
 800e7de:	4957      	ldr	r1, [pc, #348]	@ (800e93c <probe_sen5x+0x224>)
 800e7e0:	2001      	movs	r0, #1
 800e7e2:	f005 faf5 	bl	8013dd0 <CreateLine>
      return error;
 800e7e6:	197b      	adds	r3, r7, r5
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	5e9b      	ldrsh	r3, [r3, r2]
 800e7ec:	e0a0      	b.n	800e930 <probe_sen5x+0x218>
  } else {
      Info("Product name: %s", product_name);
 800e7ee:	4b57      	ldr	r3, [pc, #348]	@ (800e94c <probe_sen5x+0x234>)
 800e7f0:	4a58      	ldr	r2, [pc, #352]	@ (800e954 <probe_sen5x+0x23c>)
 800e7f2:	4955      	ldr	r1, [pc, #340]	@ (800e948 <probe_sen5x+0x230>)
 800e7f4:	2002      	movs	r0, #2
 800e7f6:	f005 faeb 	bl	8013dd0 <CreateLine>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800e7fa:	2636      	movs	r6, #54	@ 0x36
 800e7fc:	19bc      	adds	r4, r7, r6
 800e7fe:	2308      	movs	r3, #8
 800e800:	18fd      	adds	r5, r7, r3
 800e802:	2309      	movs	r3, #9
 800e804:	18fa      	adds	r2, r7, r3
 800e806:	230a      	movs	r3, #10
 800e808:	18f9      	adds	r1, r7, r3
 800e80a:	230b      	movs	r3, #11
 800e80c:	18f8      	adds	r0, r7, r3
 800e80e:	1d7b      	adds	r3, r7, #5
 800e810:	9302      	str	r3, [sp, #8]
 800e812:	1dbb      	adds	r3, r7, #6
 800e814:	9301      	str	r3, [sp, #4]
 800e816:	1dfb      	adds	r3, r7, #7
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	002b      	movs	r3, r5
 800e81c:	f001 f862 	bl	800f8e4 <sen5x_get_version>
 800e820:	0003      	movs	r3, r0
 800e822:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800e824:	19bb      	adds	r3, r7, r6
 800e826:	2200      	movs	r2, #0
 800e828:	5e9b      	ldrsh	r3, [r3, r2]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00b      	beq.n	800e846 <probe_sen5x+0x12e>
      Error("Error executing sen5x_get_version(): %i", error);
 800e82e:	19bb      	adds	r3, r7, r6
 800e830:	2200      	movs	r2, #0
 800e832:	5e9b      	ldrsh	r3, [r3, r2]
 800e834:	4a48      	ldr	r2, [pc, #288]	@ (800e958 <probe_sen5x+0x240>)
 800e836:	4941      	ldr	r1, [pc, #260]	@ (800e93c <probe_sen5x+0x224>)
 800e838:	2001      	movs	r0, #1
 800e83a:	f005 fac9 	bl	8013dd0 <CreateLine>
      return error;
 800e83e:	19bb      	adds	r3, r7, r6
 800e840:	2200      	movs	r2, #0
 800e842:	5e9b      	ldrsh	r3, [r3, r2]
 800e844:	e074      	b.n	800e930 <probe_sen5x+0x218>
  } else {
      Info("Firmware: %u.%u, Hardware: %u.%u", firmware_major,
 800e846:	230b      	movs	r3, #11
 800e848:	18fb      	adds	r3, r7, r3
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	001d      	movs	r5, r3
 800e84e:	230a      	movs	r3, #10
 800e850:	18fb      	adds	r3, r7, r3
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	0018      	movs	r0, r3
 800e856:	2308      	movs	r3, #8
 800e858:	18fb      	adds	r3, r7, r3
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	001c      	movs	r4, r3
 800e85e:	1dfb      	adds	r3, r7, #7
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	4a3e      	ldr	r2, [pc, #248]	@ (800e95c <probe_sen5x+0x244>)
 800e864:	4938      	ldr	r1, [pc, #224]	@ (800e948 <probe_sen5x+0x230>)
 800e866:	9302      	str	r3, [sp, #8]
 800e868:	9401      	str	r4, [sp, #4]
 800e86a:	9000      	str	r0, [sp, #0]
 800e86c:	002b      	movs	r3, r5
 800e86e:	2002      	movs	r0, #2
 800e870:	f005 faae 	bl	8013dd0 <CreateLine>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800e874:	2300      	movs	r3, #0
 800e876:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800e878:	262e      	movs	r6, #46	@ 0x2e
 800e87a:	19bb      	adds	r3, r7, r6
 800e87c:	2200      	movs	r2, #0
 800e87e:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800e880:	232c      	movs	r3, #44	@ 0x2c
 800e882:	18fb      	adds	r3, r7, r3
 800e884:	2200      	movs	r2, #0
 800e886:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800e888:	4935      	ldr	r1, [pc, #212]	@ (800e960 <probe_sen5x+0x248>)
 800e88a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e88c:	f7f2 fbd8 	bl	8001040 <__aeabi_fmul>
 800e890:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800e892:	1c18      	adds	r0, r3, #0
 800e894:	f7f2 ffa8 	bl	80017e8 <__aeabi_f2iz>
 800e898:	0003      	movs	r3, r0
 800e89a:	b218      	sxth	r0, r3
 800e89c:	2536      	movs	r5, #54	@ 0x36
 800e89e:	197c      	adds	r4, r7, r5
 800e8a0:	232c      	movs	r3, #44	@ 0x2c
 800e8a2:	18fb      	adds	r3, r7, r3
 800e8a4:	881a      	ldrh	r2, [r3, #0]
 800e8a6:	19bb      	adds	r3, r7, r6
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	5e5b      	ldrsh	r3, [r3, r1]
 800e8ac:	0019      	movs	r1, r3
 800e8ae:	f000 ff09 	bl	800f6c4 <sen5x_set_temperature_offset_parameters>
 800e8b2:	0003      	movs	r3, r0
 800e8b4:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e8b6:	197b      	adds	r3, r7, r5
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	5e9b      	ldrsh	r3, [r3, r2]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d00b      	beq.n	800e8d8 <probe_sen5x+0x1c0>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800e8c0:	197b      	adds	r3, r7, r5
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	5e9b      	ldrsh	r3, [r3, r2]
 800e8c6:	4a27      	ldr	r2, [pc, #156]	@ (800e964 <probe_sen5x+0x24c>)
 800e8c8:	491c      	ldr	r1, [pc, #112]	@ (800e93c <probe_sen5x+0x224>)
 800e8ca:	2001      	movs	r0, #1
 800e8cc:	f005 fa80 	bl	8013dd0 <CreateLine>
      return error;
 800e8d0:	197b      	adds	r3, r7, r5
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	5e9b      	ldrsh	r3, [r3, r2]
 800e8d6:	e02b      	b.n	800e930 <probe_sen5x+0x218>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800e8d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8da:	f7f4 ffdb 	bl	8003894 <__aeabi_f2d>
 800e8de:	0002      	movs	r2, r0
 800e8e0:	000b      	movs	r3, r1
 800e8e2:	4821      	ldr	r0, [pc, #132]	@ (800e968 <probe_sen5x+0x250>)
 800e8e4:	4918      	ldr	r1, [pc, #96]	@ (800e948 <probe_sen5x+0x230>)
 800e8e6:	9200      	str	r2, [sp, #0]
 800e8e8:	9301      	str	r3, [sp, #4]
 800e8ea:	0002      	movs	r2, r0
 800e8ec:	2002      	movs	r0, #2
 800e8ee:	f005 fa6f 	bl	8013dd0 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800e8f2:	f7fb f933 	bl	8009b5c <Check_USB_PowerOn>
 800e8f6:	0003      	movs	r3, r0
 800e8f8:	001a      	movs	r2, r3
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	4053      	eors	r3, r2
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00a      	beq.n	800e91a <probe_sen5x+0x202>
    sen5x_Power_Off();
 800e904:	f7ff fed2 	bl	800e6ac <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800e908:	f005 ffda 	bl	80148c0 <HAL_GetTick>
 800e90c:	0003      	movs	r3, r0
 800e90e:	22fa      	movs	r2, #250	@ 0xfa
 800e910:	00d2      	lsls	r2, r2, #3
 800e912:	189a      	adds	r2, r3, r2
 800e914:	4b15      	ldr	r3, [pc, #84]	@ (800e96c <probe_sen5x+0x254>)
 800e916:	601a      	str	r2, [r3, #0]
 800e918:	e006      	b.n	800e928 <probe_sen5x+0x210>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800e91a:	f005 ffd1 	bl	80148c0 <HAL_GetTick>
 800e91e:	0003      	movs	r3, r0
 800e920:	4a13      	ldr	r2, [pc, #76]	@ (800e970 <probe_sen5x+0x258>)
 800e922:	189a      	adds	r2, r3, r2
 800e924:	4b11      	ldr	r3, [pc, #68]	@ (800e96c <probe_sen5x+0x254>)
 800e926:	601a      	str	r2, [r3, #0]
  }
  return error;
 800e928:	2336      	movs	r3, #54	@ 0x36
 800e92a:	18fb      	adds	r3, r7, r3
 800e92c:	2200      	movs	r2, #0
 800e92e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e930:	0018      	movs	r0, r3
 800e932:	46bd      	mov	sp, r7
 800e934:	b00f      	add	sp, #60	@ 0x3c
 800e936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e938:	0802cf48 	.word	0x0802cf48
 800e93c:	0802cef8 	.word	0x0802cef8
 800e940:	0802cf74 	.word	0x0802cf74
 800e944:	0802cfa4 	.word	0x0802cfa4
 800e948:	0802ce8c 	.word	0x0802ce8c
 800e94c:	200011c4 	.word	0x200011c4
 800e950:	0802cfb8 	.word	0x0802cfb8
 800e954:	0802cfe8 	.word	0x0802cfe8
 800e958:	0802cffc 	.word	0x0802cffc
 800e95c:	0802d024 	.word	0x0802d024
 800e960:	43480000 	.word	0x43480000
 800e964:	0802d048 	.word	0x0802d048
 800e968:	0802d088 	.word	0x0802d088
 800e96c:	200011d0 	.word	0x200011d0
 800e970:	00006d60 	.word	0x00006d60

0800e974 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800e974:	b590      	push	{r4, r7, lr}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800e97a:	1dbb      	adds	r3, r7, #6
 800e97c:	2200      	movs	r2, #0
 800e97e:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800e980:	4b1b      	ldr	r3, [pc, #108]	@ (800e9f0 <sen5x_lightup_measurement+0x7c>)
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00b      	beq.n	800e9a0 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800e988:	4a1a      	ldr	r2, [pc, #104]	@ (800e9f4 <sen5x_lightup_measurement+0x80>)
 800e98a:	4b1b      	ldr	r3, [pc, #108]	@ (800e9f8 <sen5x_lightup_measurement+0x84>)
 800e98c:	0019      	movs	r1, r3
 800e98e:	2002      	movs	r0, #2
 800e990:	f005 fa1e 	bl	8013dd0 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800e994:	1dbc      	adds	r4, r7, #6
 800e996:	f000 fd21 	bl	800f3dc <sen5x_start_measurement_without_pm>
 800e99a:	0003      	movs	r3, r0
 800e99c:	8023      	strh	r3, [r4, #0]
 800e99e:	e00a      	b.n	800e9b6 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800e9a0:	4a16      	ldr	r2, [pc, #88]	@ (800e9fc <sen5x_lightup_measurement+0x88>)
 800e9a2:	4b15      	ldr	r3, [pc, #84]	@ (800e9f8 <sen5x_lightup_measurement+0x84>)
 800e9a4:	0019      	movs	r1, r3
 800e9a6:	2002      	movs	r0, #2
 800e9a8:	f005 fa12 	bl	8013dd0 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800e9ac:	1dbc      	adds	r4, r7, #6
 800e9ae:	f000 fce7 	bl	800f380 <sen5x_start_measurement>
 800e9b2:	0003      	movs	r3, r0
 800e9b4:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800e9b6:	1dbb      	adds	r3, r7, #6
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	5e9b      	ldrsh	r3, [r3, r2]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d008      	beq.n	800e9d2 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800e9c0:	1dbb      	adds	r3, r7, #6
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	5e9b      	ldrsh	r3, [r3, r2]
 800e9c6:	4a0e      	ldr	r2, [pc, #56]	@ (800ea00 <sen5x_lightup_measurement+0x8c>)
 800e9c8:	490e      	ldr	r1, [pc, #56]	@ (800ea04 <sen5x_lightup_measurement+0x90>)
 800e9ca:	2001      	movs	r0, #1
 800e9cc:	f005 fa00 	bl	8013dd0 <CreateLine>
 800e9d0:	e007      	b.n	800e9e2 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800e9d2:	f7fb f9cb 	bl	8009d6c <showTime>
    Info("sen5x_start_measurement executed");
 800e9d6:	4a0c      	ldr	r2, [pc, #48]	@ (800ea08 <sen5x_lightup_measurement+0x94>)
 800e9d8:	4b07      	ldr	r3, [pc, #28]	@ (800e9f8 <sen5x_lightup_measurement+0x84>)
 800e9da:	0019      	movs	r1, r3
 800e9dc:	2002      	movs	r0, #2
 800e9de:	f005 f9f7 	bl	8013dd0 <CreateLine>
  }
  return error;
 800e9e2:	1dbb      	adds	r3, r7, #6
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e9e8:	0018      	movs	r0, r3
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	b003      	add	sp, #12
 800e9ee:	bd90      	pop	{r4, r7, pc}
 800e9f0:	200011c2 	.word	0x200011c2
 800e9f4:	0802d0c0 	.word	0x0802d0c0
 800e9f8:	0802ce8c 	.word	0x0802ce8c
 800e9fc:	0802d0ec 	.word	0x0802d0ec
 800ea00:	0802d10c 	.word	0x0802d10c
 800ea04:	0802cef8 	.word	0x0802cef8
 800ea08:	0802d13c 	.word	0x0802d13c

0800ea0c <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800ea0c:	b590      	push	{r4, r7, lr}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800ea12:	1dbb      	adds	r3, r7, #6
 800ea14:	2200      	movs	r2, #0
 800ea16:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800ea18:	4b21      	ldr	r3, [pc, #132]	@ (800eaa0 <sen5x_extinguish_measurement+0x94>)
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d01e      	beq.n	800ea5e <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800ea20:	4a20      	ldr	r2, [pc, #128]	@ (800eaa4 <sen5x_extinguish_measurement+0x98>)
 800ea22:	4b21      	ldr	r3, [pc, #132]	@ (800eaa8 <sen5x_extinguish_measurement+0x9c>)
 800ea24:	0019      	movs	r1, r3
 800ea26:	2002      	movs	r0, #2
 800ea28:	f005 f9d2 	bl	8013dd0 <CreateLine>
    Info("PM measurement is disabled");
 800ea2c:	4a1f      	ldr	r2, [pc, #124]	@ (800eaac <sen5x_extinguish_measurement+0xa0>)
 800ea2e:	4b1e      	ldr	r3, [pc, #120]	@ (800eaa8 <sen5x_extinguish_measurement+0x9c>)
 800ea30:	0019      	movs	r1, r3
 800ea32:	2002      	movs	r0, #2
 800ea34:	f005 f9cc 	bl	8013dd0 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800ea38:	1dbc      	adds	r4, r7, #6
 800ea3a:	f000 fccf 	bl	800f3dc <sen5x_start_measurement_without_pm>
 800ea3e:	0003      	movs	r3, r0
 800ea40:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ea42:	1dbb      	adds	r3, r7, #6
 800ea44:	2200      	movs	r2, #0
 800ea46:	5e9b      	ldrsh	r3, [r3, r2]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d022      	beq.n	800ea92 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800ea4c:	1dbb      	adds	r3, r7, #6
 800ea4e:	2200      	movs	r2, #0
 800ea50:	5e9b      	ldrsh	r3, [r3, r2]
 800ea52:	4a17      	ldr	r2, [pc, #92]	@ (800eab0 <sen5x_extinguish_measurement+0xa4>)
 800ea54:	4917      	ldr	r1, [pc, #92]	@ (800eab4 <sen5x_extinguish_measurement+0xa8>)
 800ea56:	2001      	movs	r0, #1
 800ea58:	f005 f9ba 	bl	8013dd0 <CreateLine>
 800ea5c:	e019      	b.n	800ea92 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800ea5e:	1dbc      	adds	r4, r7, #6
 800ea60:	f000 fcea 	bl	800f438 <sen5x_stop_measurement>
 800ea64:	0003      	movs	r3, r0
 800ea66:	8023      	strh	r3, [r4, #0]
    showTime();
 800ea68:	f7fb f980 	bl	8009d6c <showTime>
    Info("sen5x_stop_measurement executed");
 800ea6c:	4a12      	ldr	r2, [pc, #72]	@ (800eab8 <sen5x_extinguish_measurement+0xac>)
 800ea6e:	4b0e      	ldr	r3, [pc, #56]	@ (800eaa8 <sen5x_extinguish_measurement+0x9c>)
 800ea70:	0019      	movs	r1, r3
 800ea72:	2002      	movs	r0, #2
 800ea74:	f005 f9ac 	bl	8013dd0 <CreateLine>
    if (error) {
 800ea78:	1dbb      	adds	r3, r7, #6
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	5e9b      	ldrsh	r3, [r3, r2]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d007      	beq.n	800ea92 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800ea82:	1dbb      	adds	r3, r7, #6
 800ea84:	2200      	movs	r2, #0
 800ea86:	5e9b      	ldrsh	r3, [r3, r2]
 800ea88:	4a0c      	ldr	r2, [pc, #48]	@ (800eabc <sen5x_extinguish_measurement+0xb0>)
 800ea8a:	490a      	ldr	r1, [pc, #40]	@ (800eab4 <sen5x_extinguish_measurement+0xa8>)
 800ea8c:	2001      	movs	r0, #1
 800ea8e:	f005 f99f 	bl	8013dd0 <CreateLine>
    }
  }
  return error;
 800ea92:	1dbb      	adds	r3, r7, #6
 800ea94:	2200      	movs	r2, #0
 800ea96:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ea98:	0018      	movs	r0, r3
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	b003      	add	sp, #12
 800ea9e:	bd90      	pop	{r4, r7, pc}
 800eaa0:	200011c2 	.word	0x200011c2
 800eaa4:	0802d160 	.word	0x0802d160
 800eaa8:	0802ce8c 	.word	0x0802ce8c
 800eaac:	0802d198 	.word	0x0802d198
 800eab0:	0802d1b4 	.word	0x0802d1b4
 800eab4:	0802cef8 	.word	0x0802cef8
 800eab8:	0802d1f4 	.word	0x0802d1f4
 800eabc:	0802d214 	.word	0x0802d214

0800eac0 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800eac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eac2:	b08d      	sub	sp, #52	@ 0x34
 800eac4:	af04      	add	r7, sp, #16
 800eac6:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800eac8:	261e      	movs	r6, #30
 800eaca:	19bb      	adds	r3, r7, r6
 800eacc:	2200      	movs	r2, #0
 800eace:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800ead0:	19bc      	adds	r4, r7, r6
 800ead2:	2316      	movs	r3, #22
 800ead4:	18fd      	adds	r5, r7, r3
 800ead6:	2318      	movs	r3, #24
 800ead8:	18fa      	adds	r2, r7, r3
 800eada:	231a      	movs	r3, #26
 800eadc:	18f9      	adds	r1, r7, r3
 800eade:	231c      	movs	r3, #28
 800eae0:	18f8      	adds	r0, r7, r3
 800eae2:	230e      	movs	r3, #14
 800eae4:	18fb      	adds	r3, r7, r3
 800eae6:	9303      	str	r3, [sp, #12]
 800eae8:	2310      	movs	r3, #16
 800eaea:	18fb      	adds	r3, r7, r3
 800eaec:	9302      	str	r3, [sp, #8]
 800eaee:	2312      	movs	r3, #18
 800eaf0:	18fb      	adds	r3, r7, r3
 800eaf2:	9301      	str	r3, [sp, #4]
 800eaf4:	2314      	movs	r3, #20
 800eaf6:	18fb      	adds	r3, r7, r3
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	002b      	movs	r3, r5
 800eafc:	f000 fd1e 	bl	800f53c <sen5x_read_measured_values>
 800eb00:	0003      	movs	r3, r0
 800eb02:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800eb04:	19bb      	adds	r3, r7, r6
 800eb06:	2200      	movs	r2, #0
 800eb08:	5e9b      	ldrsh	r3, [r3, r2]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <sen5x_read_measurement+0x56>
    return error;
 800eb0e:	19bb      	adds	r3, r7, r6
 800eb10:	2200      	movs	r2, #0
 800eb12:	5e9b      	ldrsh	r3, [r3, r2]
 800eb14:	e02c      	b.n	800eb70 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800eb16:	231c      	movs	r3, #28
 800eb18:	18fb      	adds	r3, r7, r3
 800eb1a:	881a      	ldrh	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800eb20:	231a      	movs	r3, #26
 800eb22:	18fb      	adds	r3, r7, r3
 800eb24:	881a      	ldrh	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800eb2a:	2318      	movs	r3, #24
 800eb2c:	18fb      	adds	r3, r7, r3
 800eb2e:	881a      	ldrh	r2, [r3, #0]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800eb34:	2316      	movs	r3, #22
 800eb36:	18fb      	adds	r3, r7, r3
 800eb38:	881a      	ldrh	r2, [r3, #0]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800eb3e:	2314      	movs	r3, #20
 800eb40:	18fb      	adds	r3, r7, r3
 800eb42:	2200      	movs	r2, #0
 800eb44:	5e9a      	ldrsh	r2, [r3, r2]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800eb4a:	2312      	movs	r3, #18
 800eb4c:	18fb      	adds	r3, r7, r3
 800eb4e:	2200      	movs	r2, #0
 800eb50:	5e9a      	ldrsh	r2, [r3, r2]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800eb56:	2310      	movs	r3, #16
 800eb58:	18fb      	adds	r3, r7, r3
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	5e9a      	ldrsh	r2, [r3, r2]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800eb62:	230e      	movs	r3, #14
 800eb64:	18fb      	adds	r3, r7, r3
 800eb66:	2200      	movs	r2, #0
 800eb68:	5e9a      	ldrsh	r2, [r3, r2]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	81da      	strh	r2, [r3, #14]
  return 0;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	0018      	movs	r0, r3
 800eb72:	46bd      	mov	sp, r7
 800eb74:	b009      	add	sp, #36	@ 0x24
 800eb76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb78 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af02      	add	r7, sp, #8
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800eb7e:	4b6e      	ldr	r3, [pc, #440]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800eb80:	881b      	ldrh	r3, [r3, #0]
 800eb82:	4a6e      	ldr	r2, [pc, #440]	@ (800ed3c <sen5x_printvalues+0x1c4>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d017      	beq.n	800ebb8 <sen5x_printvalues+0x40>
      Info("Mass concentration pm1p0: %.1f µg/m³", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800eb88:	4b6b      	ldr	r3, [pc, #428]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800eb8a:	881b      	ldrh	r3, [r3, #0]
 800eb8c:	0018      	movs	r0, r3
 800eb8e:	f7f2 fe4b 	bl	8001828 <__aeabi_i2f>
 800eb92:	1c03      	adds	r3, r0, #0
 800eb94:	496a      	ldr	r1, [pc, #424]	@ (800ed40 <sen5x_printvalues+0x1c8>)
 800eb96:	1c18      	adds	r0, r3, #0
 800eb98:	f7f2 f884 	bl	8000ca4 <__aeabi_fdiv>
 800eb9c:	1c03      	adds	r3, r0, #0
 800eb9e:	1c18      	adds	r0, r3, #0
 800eba0:	f7f4 fe78 	bl	8003894 <__aeabi_f2d>
 800eba4:	0002      	movs	r2, r0
 800eba6:	000b      	movs	r3, r1
 800eba8:	4866      	ldr	r0, [pc, #408]	@ (800ed44 <sen5x_printvalues+0x1cc>)
 800ebaa:	4967      	ldr	r1, [pc, #412]	@ (800ed48 <sen5x_printvalues+0x1d0>)
 800ebac:	9200      	str	r2, [sp, #0]
 800ebae:	9301      	str	r3, [sp, #4]
 800ebb0:	0002      	movs	r2, r0
 800ebb2:	2002      	movs	r0, #2
 800ebb4:	f005 f90c 	bl	8013dd0 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ebb8:	4b5f      	ldr	r3, [pc, #380]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ebba:	885b      	ldrh	r3, [r3, #2]
 800ebbc:	4a5f      	ldr	r2, [pc, #380]	@ (800ed3c <sen5x_printvalues+0x1c4>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d017      	beq.n	800ebf2 <sen5x_printvalues+0x7a>
        Info("Mass concentration pm2p5: %.1f µg/m³", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800ebc2:	4b5d      	ldr	r3, [pc, #372]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ebc4:	885b      	ldrh	r3, [r3, #2]
 800ebc6:	0018      	movs	r0, r3
 800ebc8:	f7f2 fe2e 	bl	8001828 <__aeabi_i2f>
 800ebcc:	1c03      	adds	r3, r0, #0
 800ebce:	495c      	ldr	r1, [pc, #368]	@ (800ed40 <sen5x_printvalues+0x1c8>)
 800ebd0:	1c18      	adds	r0, r3, #0
 800ebd2:	f7f2 f867 	bl	8000ca4 <__aeabi_fdiv>
 800ebd6:	1c03      	adds	r3, r0, #0
 800ebd8:	1c18      	adds	r0, r3, #0
 800ebda:	f7f4 fe5b 	bl	8003894 <__aeabi_f2d>
 800ebde:	0002      	movs	r2, r0
 800ebe0:	000b      	movs	r3, r1
 800ebe2:	485a      	ldr	r0, [pc, #360]	@ (800ed4c <sen5x_printvalues+0x1d4>)
 800ebe4:	4958      	ldr	r1, [pc, #352]	@ (800ed48 <sen5x_printvalues+0x1d0>)
 800ebe6:	9200      	str	r2, [sp, #0]
 800ebe8:	9301      	str	r3, [sp, #4]
 800ebea:	0002      	movs	r2, r0
 800ebec:	2002      	movs	r0, #2
 800ebee:	f005 f8ef 	bl	8013dd0 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800ebf2:	4b51      	ldr	r3, [pc, #324]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ebf4:	889b      	ldrh	r3, [r3, #4]
 800ebf6:	4a51      	ldr	r2, [pc, #324]	@ (800ed3c <sen5x_printvalues+0x1c4>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d017      	beq.n	800ec2c <sen5x_printvalues+0xb4>
        Info("Mass concentration pm4p0: %.1f µg/m³", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800ebfc:	4b4e      	ldr	r3, [pc, #312]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ebfe:	889b      	ldrh	r3, [r3, #4]
 800ec00:	0018      	movs	r0, r3
 800ec02:	f7f2 fe11 	bl	8001828 <__aeabi_i2f>
 800ec06:	1c03      	adds	r3, r0, #0
 800ec08:	494d      	ldr	r1, [pc, #308]	@ (800ed40 <sen5x_printvalues+0x1c8>)
 800ec0a:	1c18      	adds	r0, r3, #0
 800ec0c:	f7f2 f84a 	bl	8000ca4 <__aeabi_fdiv>
 800ec10:	1c03      	adds	r3, r0, #0
 800ec12:	1c18      	adds	r0, r3, #0
 800ec14:	f7f4 fe3e 	bl	8003894 <__aeabi_f2d>
 800ec18:	0002      	movs	r2, r0
 800ec1a:	000b      	movs	r3, r1
 800ec1c:	484c      	ldr	r0, [pc, #304]	@ (800ed50 <sen5x_printvalues+0x1d8>)
 800ec1e:	494a      	ldr	r1, [pc, #296]	@ (800ed48 <sen5x_printvalues+0x1d0>)
 800ec20:	9200      	str	r2, [sp, #0]
 800ec22:	9301      	str	r3, [sp, #4]
 800ec24:	0002      	movs	r2, r0
 800ec26:	2002      	movs	r0, #2
 800ec28:	f005 f8d2 	bl	8013dd0 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ec2c:	4b42      	ldr	r3, [pc, #264]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ec2e:	88db      	ldrh	r3, [r3, #6]
 800ec30:	4a42      	ldr	r2, [pc, #264]	@ (800ed3c <sen5x_printvalues+0x1c4>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d017      	beq.n	800ec66 <sen5x_printvalues+0xee>
        Info("Mass concentration pm10p0: %.1f µg/m³", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800ec36:	4b40      	ldr	r3, [pc, #256]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ec38:	88db      	ldrh	r3, [r3, #6]
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	f7f2 fdf4 	bl	8001828 <__aeabi_i2f>
 800ec40:	1c03      	adds	r3, r0, #0
 800ec42:	493f      	ldr	r1, [pc, #252]	@ (800ed40 <sen5x_printvalues+0x1c8>)
 800ec44:	1c18      	adds	r0, r3, #0
 800ec46:	f7f2 f82d 	bl	8000ca4 <__aeabi_fdiv>
 800ec4a:	1c03      	adds	r3, r0, #0
 800ec4c:	1c18      	adds	r0, r3, #0
 800ec4e:	f7f4 fe21 	bl	8003894 <__aeabi_f2d>
 800ec52:	0002      	movs	r2, r0
 800ec54:	000b      	movs	r3, r1
 800ec56:	483f      	ldr	r0, [pc, #252]	@ (800ed54 <sen5x_printvalues+0x1dc>)
 800ec58:	493b      	ldr	r1, [pc, #236]	@ (800ed48 <sen5x_printvalues+0x1d0>)
 800ec5a:	9200      	str	r2, [sp, #0]
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	0002      	movs	r2, r0
 800ec60:	2002      	movs	r0, #2
 800ec62:	f005 f8b5 	bl	8013dd0 <CreateLine>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800ec66:	4b34      	ldr	r3, [pc, #208]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ec68:	2208      	movs	r2, #8
 800ec6a:	5e9b      	ldrsh	r3, [r3, r2]
 800ec6c:	4a3a      	ldr	r2, [pc, #232]	@ (800ed58 <sen5x_printvalues+0x1e0>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d018      	beq.n	800eca4 <sen5x_printvalues+0x12c>
        Info("sen5x Ambient humidity: %.1f %%RH", sen5x_data.ambient_humidity / 100.0f);
 800ec72:	4b31      	ldr	r3, [pc, #196]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ec74:	2208      	movs	r2, #8
 800ec76:	5e9b      	ldrsh	r3, [r3, r2]
 800ec78:	0018      	movs	r0, r3
 800ec7a:	f7f2 fdd5 	bl	8001828 <__aeabi_i2f>
 800ec7e:	1c03      	adds	r3, r0, #0
 800ec80:	4936      	ldr	r1, [pc, #216]	@ (800ed5c <sen5x_printvalues+0x1e4>)
 800ec82:	1c18      	adds	r0, r3, #0
 800ec84:	f7f2 f80e 	bl	8000ca4 <__aeabi_fdiv>
 800ec88:	1c03      	adds	r3, r0, #0
 800ec8a:	1c18      	adds	r0, r3, #0
 800ec8c:	f7f4 fe02 	bl	8003894 <__aeabi_f2d>
 800ec90:	0002      	movs	r2, r0
 800ec92:	000b      	movs	r3, r1
 800ec94:	4832      	ldr	r0, [pc, #200]	@ (800ed60 <sen5x_printvalues+0x1e8>)
 800ec96:	492c      	ldr	r1, [pc, #176]	@ (800ed48 <sen5x_printvalues+0x1d0>)
 800ec98:	9200      	str	r2, [sp, #0]
 800ec9a:	9301      	str	r3, [sp, #4]
 800ec9c:	0002      	movs	r2, r0
 800ec9e:	2002      	movs	r0, #2
 800eca0:	f005 f896 	bl	8013dd0 <CreateLine>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800eca4:	4b24      	ldr	r3, [pc, #144]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800eca6:	220a      	movs	r2, #10
 800eca8:	5e9b      	ldrsh	r3, [r3, r2]
 800ecaa:	4a2b      	ldr	r2, [pc, #172]	@ (800ed58 <sen5x_printvalues+0x1e0>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d018      	beq.n	800ece2 <sen5x_printvalues+0x16a>
        Info("sen5x Ambient temperature: %.1f °C", sen5x_data.ambient_temperature / 200.0f);
 800ecb0:	4b21      	ldr	r3, [pc, #132]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ecb2:	220a      	movs	r2, #10
 800ecb4:	5e9b      	ldrsh	r3, [r3, r2]
 800ecb6:	0018      	movs	r0, r3
 800ecb8:	f7f2 fdb6 	bl	8001828 <__aeabi_i2f>
 800ecbc:	1c03      	adds	r3, r0, #0
 800ecbe:	4929      	ldr	r1, [pc, #164]	@ (800ed64 <sen5x_printvalues+0x1ec>)
 800ecc0:	1c18      	adds	r0, r3, #0
 800ecc2:	f7f1 ffef 	bl	8000ca4 <__aeabi_fdiv>
 800ecc6:	1c03      	adds	r3, r0, #0
 800ecc8:	1c18      	adds	r0, r3, #0
 800ecca:	f7f4 fde3 	bl	8003894 <__aeabi_f2d>
 800ecce:	0002      	movs	r2, r0
 800ecd0:	000b      	movs	r3, r1
 800ecd2:	4825      	ldr	r0, [pc, #148]	@ (800ed68 <sen5x_printvalues+0x1f0>)
 800ecd4:	491c      	ldr	r1, [pc, #112]	@ (800ed48 <sen5x_printvalues+0x1d0>)
 800ecd6:	9200      	str	r2, [sp, #0]
 800ecd8:	9301      	str	r3, [sp, #4]
 800ecda:	0002      	movs	r2, r0
 800ecdc:	2002      	movs	r0, #2
 800ecde:	f005 f877 	bl	8013dd0 <CreateLine>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800ece2:	4b15      	ldr	r3, [pc, #84]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ece4:	220c      	movs	r2, #12
 800ece6:	5e9b      	ldrsh	r3, [r3, r2]
 800ece8:	4a1b      	ldr	r2, [pc, #108]	@ (800ed58 <sen5x_printvalues+0x1e0>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d00d      	beq.n	800ed0a <sen5x_printvalues+0x192>
        Info("sen55 VOC index: %d", sen5x_data.voc_index / 10);
 800ecee:	4b12      	ldr	r3, [pc, #72]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ecf0:	220c      	movs	r2, #12
 800ecf2:	5e9b      	ldrsh	r3, [r3, r2]
 800ecf4:	210a      	movs	r1, #10
 800ecf6:	0018      	movs	r0, r3
 800ecf8:	f7f1 fade 	bl	80002b8 <__divsi3>
 800ecfc:	0003      	movs	r3, r0
 800ecfe:	b21b      	sxth	r3, r3
 800ed00:	4a1a      	ldr	r2, [pc, #104]	@ (800ed6c <sen5x_printvalues+0x1f4>)
 800ed02:	4911      	ldr	r1, [pc, #68]	@ (800ed48 <sen5x_printvalues+0x1d0>)
 800ed04:	2002      	movs	r0, #2
 800ed06:	f005 f863 	bl	8013dd0 <CreateLine>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ed0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ed0c:	220e      	movs	r2, #14
 800ed0e:	5e9b      	ldrsh	r3, [r3, r2]
 800ed10:	4a11      	ldr	r2, [pc, #68]	@ (800ed58 <sen5x_printvalues+0x1e0>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d00d      	beq.n	800ed32 <sen5x_printvalues+0x1ba>
        Info("sen55 NOx index: %d", sen5x_data.nox_index / 10);
 800ed16:	4b08      	ldr	r3, [pc, #32]	@ (800ed38 <sen5x_printvalues+0x1c0>)
 800ed18:	220e      	movs	r2, #14
 800ed1a:	5e9b      	ldrsh	r3, [r3, r2]
 800ed1c:	210a      	movs	r1, #10
 800ed1e:	0018      	movs	r0, r3
 800ed20:	f7f1 faca 	bl	80002b8 <__divsi3>
 800ed24:	0003      	movs	r3, r0
 800ed26:	b21b      	sxth	r3, r3
 800ed28:	4a11      	ldr	r2, [pc, #68]	@ (800ed70 <sen5x_printvalues+0x1f8>)
 800ed2a:	4907      	ldr	r1, [pc, #28]	@ (800ed48 <sen5x_printvalues+0x1d0>)
 800ed2c:	2002      	movs	r0, #2
 800ed2e:	f005 f84f 	bl	8013dd0 <CreateLine>
  }
}
 800ed32:	46c0      	nop			@ (mov r8, r8)
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	200011d4 	.word	0x200011d4
 800ed3c:	0000ffff 	.word	0x0000ffff
 800ed40:	41200000 	.word	0x41200000
 800ed44:	0802d244 	.word	0x0802d244
 800ed48:	0802ce8c 	.word	0x0802ce8c
 800ed4c:	0802d26c 	.word	0x0802d26c
 800ed50:	0802d294 	.word	0x0802d294
 800ed54:	0802d2bc 	.word	0x0802d2bc
 800ed58:	00007fff 	.word	0x00007fff
 800ed5c:	42c80000 	.word	0x42c80000
 800ed60:	0802d2e4 	.word	0x0802d2e4
 800ed64:	43480000 	.word	0x43480000
 800ed68:	0802d308 	.word	0x0802d308
 800ed6c:	0802d32c 	.word	0x0802d32c
 800ed70:	0802d340 	.word	0x0802d340

0800ed74 <sen5xStore>:

void sen5xStore() {
 800ed74:	b5b0      	push	{r4, r5, r7, lr}
 800ed76:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ed78:	4b41      	ldr	r3, [pc, #260]	@ (800ee80 <sen5xStore+0x10c>)
 800ed7a:	881b      	ldrh	r3, [r3, #0]
 800ed7c:	4a41      	ldr	r2, [pc, #260]	@ (800ee84 <sen5xStore+0x110>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d004      	beq.n	800ed8c <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800ed82:	4b3f      	ldr	r3, [pc, #252]	@ (800ee80 <sen5xStore+0x10c>)
 800ed84:	881b      	ldrh	r3, [r3, #0]
 800ed86:	0018      	movs	r0, r3
 800ed88:	f7f5 ff24 	bl	8004bd4 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ed8c:	4b3c      	ldr	r3, [pc, #240]	@ (800ee80 <sen5xStore+0x10c>)
 800ed8e:	885b      	ldrh	r3, [r3, #2]
 800ed90:	4a3c      	ldr	r2, [pc, #240]	@ (800ee84 <sen5xStore+0x110>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d004      	beq.n	800eda0 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800ed96:	4b3a      	ldr	r3, [pc, #232]	@ (800ee80 <sen5xStore+0x10c>)
 800ed98:	885b      	ldrh	r3, [r3, #2]
 800ed9a:	0018      	movs	r0, r3
 800ed9c:	f7f5 ff46 	bl	8004c2c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800eda0:	4b37      	ldr	r3, [pc, #220]	@ (800ee80 <sen5xStore+0x10c>)
 800eda2:	889b      	ldrh	r3, [r3, #4]
 800eda4:	4a37      	ldr	r2, [pc, #220]	@ (800ee84 <sen5xStore+0x110>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d004      	beq.n	800edb4 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800edaa:	4b35      	ldr	r3, [pc, #212]	@ (800ee80 <sen5xStore+0x10c>)
 800edac:	889b      	ldrh	r3, [r3, #4]
 800edae:	0018      	movs	r0, r3
 800edb0:	f7f5 ff68 	bl	8004c84 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800edb4:	4b32      	ldr	r3, [pc, #200]	@ (800ee80 <sen5xStore+0x10c>)
 800edb6:	88db      	ldrh	r3, [r3, #6]
 800edb8:	4a32      	ldr	r2, [pc, #200]	@ (800ee84 <sen5xStore+0x110>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d004      	beq.n	800edc8 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800edbe:	4b30      	ldr	r3, [pc, #192]	@ (800ee80 <sen5xStore+0x10c>)
 800edc0:	88db      	ldrh	r3, [r3, #6]
 800edc2:	0018      	movs	r0, r3
 800edc4:	f7f5 ff8a 	bl	8004cdc <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800edc8:	4b2f      	ldr	r3, [pc, #188]	@ (800ee88 <sen5xStore+0x114>)
 800edca:	791b      	ldrb	r3, [r3, #4]
 800edcc:	2b34      	cmp	r3, #52	@ 0x34
 800edce:	d003      	beq.n	800edd8 <sen5xStore+0x64>
 800edd0:	4b2d      	ldr	r3, [pc, #180]	@ (800ee88 <sen5xStore+0x114>)
 800edd2:	791b      	ldrb	r3, [r3, #4]
 800edd4:	2b35      	cmp	r3, #53	@ 0x35
 800edd6:	d14f      	bne.n	800ee78 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800edd8:	4b29      	ldr	r3, [pc, #164]	@ (800ee80 <sen5xStore+0x10c>)
 800edda:	220a      	movs	r2, #10
 800eddc:	5e9b      	ldrsh	r3, [r3, r2]
 800edde:	0018      	movs	r0, r3
 800ede0:	f7f2 fd22 	bl	8001828 <__aeabi_i2f>
 800ede4:	1c04      	adds	r4, r0, #0
 800ede6:	4b26      	ldr	r3, [pc, #152]	@ (800ee80 <sen5xStore+0x10c>)
 800ede8:	2208      	movs	r2, #8
 800edea:	5e9b      	ldrsh	r3, [r3, r2]
 800edec:	0018      	movs	r0, r3
 800edee:	f7f2 fd1b 	bl	8001828 <__aeabi_i2f>
 800edf2:	1c03      	adds	r3, r0, #0
 800edf4:	1c19      	adds	r1, r3, #0
 800edf6:	1c20      	adds	r0, r4, #0
 800edf8:	f7f5 ffba 	bl	8004d70 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800edfc:	4b23      	ldr	r3, [pc, #140]	@ (800ee8c <sen5xStore+0x118>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	2201      	movs	r2, #1
 800ee02:	4053      	eors	r3, r2
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d103      	bne.n	800ee12 <sen5xStore+0x9e>
 800ee0a:	4b21      	ldr	r3, [pc, #132]	@ (800ee90 <sen5xStore+0x11c>)
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d032      	beq.n	800ee78 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800ee12:	4b1b      	ldr	r3, [pc, #108]	@ (800ee80 <sen5xStore+0x10c>)
 800ee14:	220c      	movs	r2, #12
 800ee16:	5e9b      	ldrsh	r3, [r3, r2]
 800ee18:	4a1e      	ldr	r2, [pc, #120]	@ (800ee94 <sen5xStore+0x120>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d019      	beq.n	800ee52 <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800ee1e:	4b18      	ldr	r3, [pc, #96]	@ (800ee80 <sen5xStore+0x10c>)
 800ee20:	220c      	movs	r2, #12
 800ee22:	5e9b      	ldrsh	r3, [r3, r2]
 800ee24:	210a      	movs	r1, #10
 800ee26:	0018      	movs	r0, r3
 800ee28:	f7f1 fa46 	bl	80002b8 <__divsi3>
 800ee2c:	0003      	movs	r3, r0
 800ee2e:	b21b      	sxth	r3, r3
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	0018      	movs	r0, r3
 800ee34:	f003 ff3e 	bl	8012cb4 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800ee38:	4b11      	ldr	r3, [pc, #68]	@ (800ee80 <sen5xStore+0x10c>)
 800ee3a:	220c      	movs	r2, #12
 800ee3c:	5e9b      	ldrsh	r3, [r3, r2]
 800ee3e:	210a      	movs	r1, #10
 800ee40:	0018      	movs	r0, r3
 800ee42:	f7f1 fa39 	bl	80002b8 <__divsi3>
 800ee46:	0003      	movs	r3, r0
 800ee48:	b21b      	sxth	r3, r3
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	0018      	movs	r0, r3
 800ee4e:	f7f5 fe39 	bl	8004ac4 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800ee52:	4b0b      	ldr	r3, [pc, #44]	@ (800ee80 <sen5xStore+0x10c>)
 800ee54:	220e      	movs	r2, #14
 800ee56:	5e9b      	ldrsh	r3, [r3, r2]
 800ee58:	4a0e      	ldr	r2, [pc, #56]	@ (800ee94 <sen5xStore+0x120>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d00c      	beq.n	800ee78 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800ee5e:	4b08      	ldr	r3, [pc, #32]	@ (800ee80 <sen5xStore+0x10c>)
 800ee60:	220e      	movs	r2, #14
 800ee62:	5e9b      	ldrsh	r3, [r3, r2]
 800ee64:	210a      	movs	r1, #10
 800ee66:	0018      	movs	r0, r3
 800ee68:	f7f1 fa26 	bl	80002b8 <__divsi3>
 800ee6c:	0003      	movs	r3, r0
 800ee6e:	b21b      	sxth	r3, r3
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	0018      	movs	r0, r3
 800ee74:	f7f5 ff5e 	bl	8004d34 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800ee78:	46c0      	nop			@ (mov r8, r8)
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ee7e:	46c0      	nop			@ (mov r8, r8)
 800ee80:	200011d4 	.word	0x200011d4
 800ee84:	0000ffff 	.word	0x0000ffff
 800ee88:	200011c4 	.word	0x200011c4
 800ee8c:	200011c2 	.word	0x200011c2
 800ee90:	20002151 	.word	0x20002151
 800ee94:	00007fff 	.word	0x00007fff

0800ee98 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800ee98:	b590      	push	{r4, r7, lr}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af02      	add	r7, sp, #8
 800ee9e:	6039      	str	r1, [r7, #0]
 800eea0:	0011      	movs	r1, r2
 800eea2:	1dfb      	adds	r3, r7, #7
 800eea4:	1c02      	adds	r2, r0, #0
 800eea6:	701a      	strb	r2, [r3, #0]
 800eea8:	1d3b      	adds	r3, r7, #4
 800eeaa:	1c0a      	adds	r2, r1, #0
 800eeac:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800eeae:	1dfb      	adds	r3, r7, #7
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	18db      	adds	r3, r3, r3
 800eeb6:	b299      	uxth	r1, r3
 800eeb8:	1d3b      	adds	r3, r7, #4
 800eeba:	881b      	ldrh	r3, [r3, #0]
 800eebc:	683a      	ldr	r2, [r7, #0]
 800eebe:	4805      	ldr	r0, [pc, #20]	@ (800eed4 <sensirion_i2c_hal_read+0x3c>)
 800eec0:	2464      	movs	r4, #100	@ 0x64
 800eec2:	9400      	str	r4, [sp, #0]
 800eec4:	f007 f946 	bl	8016154 <HAL_I2C_Master_Receive>
 800eec8:	0003      	movs	r3, r0
 800eeca:	b25b      	sxtb	r3, r3
}
 800eecc:	0018      	movs	r0, r3
 800eece:	46bd      	mov	sp, r7
 800eed0:	b003      	add	sp, #12
 800eed2:	bd90      	pop	{r4, r7, pc}
 800eed4:	20000f8c 	.word	0x20000f8c

0800eed8 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800eed8:	b590      	push	{r4, r7, lr}
 800eeda:	b085      	sub	sp, #20
 800eedc:	af02      	add	r7, sp, #8
 800eede:	6039      	str	r1, [r7, #0]
 800eee0:	0011      	movs	r1, r2
 800eee2:	1dfb      	adds	r3, r7, #7
 800eee4:	1c02      	adds	r2, r0, #0
 800eee6:	701a      	strb	r2, [r3, #0]
 800eee8:	1d3b      	adds	r3, r7, #4
 800eeea:	1c0a      	adds	r2, r1, #0
 800eeec:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800eeee:	1dfb      	adds	r3, r7, #7
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	18db      	adds	r3, r3, r3
 800eef6:	b299      	uxth	r1, r3
 800eef8:	1d3b      	adds	r3, r7, #4
 800eefa:	881b      	ldrh	r3, [r3, #0]
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	4805      	ldr	r0, [pc, #20]	@ (800ef14 <sensirion_i2c_hal_write+0x3c>)
 800ef00:	2464      	movs	r4, #100	@ 0x64
 800ef02:	9400      	str	r4, [sp, #0]
 800ef04:	f007 f81e 	bl	8015f44 <HAL_I2C_Master_Transmit>
 800ef08:	0003      	movs	r3, r0
 800ef0a:	b25b      	sxtb	r3, r3
}
 800ef0c:	0018      	movs	r0, r3
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	b003      	add	sp, #12
 800ef12:	bd90      	pop	{r4, r7, pc}
 800ef14:	20000f8c 	.word	0x20000f8c

0800ef18 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	22fa      	movs	r2, #250	@ 0xfa
 800ef24:	0091      	lsls	r1, r2, #2
 800ef26:	0018      	movs	r0, r3
 800ef28:	f7f1 f93c 	bl	80001a4 <__udivsi3>
 800ef2c:	0003      	movs	r3, r0
 800ef2e:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	22fa      	movs	r2, #250	@ 0xfa
 800ef34:	0091      	lsls	r1, r2, #2
 800ef36:	0018      	movs	r0, r3
 800ef38:	f7f1 f9ba 	bl	80002b0 <__aeabi_uidivmod>
 800ef3c:	1e0b      	subs	r3, r1, #0
 800ef3e:	d002      	beq.n	800ef46 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	3301      	adds	r3, #1
 800ef44:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	0018      	movs	r0, r3
 800ef4a:	f005 fcc3 	bl	80148d4 <HAL_Delay>
}
 800ef4e:	46c0      	nop			@ (mov r8, r8)
 800ef50:	46bd      	mov	sp, r7
 800ef52:	b004      	add	sp, #16
 800ef54:	bd80      	pop	{r7, pc}
	...

0800ef58 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800ef5e:	1d3b      	adds	r3, r7, #4
 800ef60:	0018      	movs	r0, r3
 800ef62:	f000 fd2b 	bl	800f9bc <sen5x_read_device_status>
 800ef66:	0003      	movs	r3, r0
 800ef68:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	4a2c      	ldr	r2, [pc, #176]	@ (800f020 <sen5x_check_for_errors+0xc8>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d107      	bne.n	800ef82 <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800ef72:	4a2c      	ldr	r2, [pc, #176]	@ (800f024 <sen5x_check_for_errors+0xcc>)
 800ef74:	4b2c      	ldr	r3, [pc, #176]	@ (800f028 <sen5x_check_for_errors+0xd0>)
 800ef76:	0019      	movs	r1, r3
 800ef78:	2001      	movs	r0, #1
 800ef7a:	f004 ff29 	bl	8013dd0 <CreateLine>
    return true;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e049      	b.n	800f016 <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d101      	bne.n	800ef8c <sen5x_check_for_errors+0x34>
    return false;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	e044      	b.n	800f016 <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	2380      	movs	r3, #128	@ 0x80
 800ef90:	039b      	lsls	r3, r3, #14
 800ef92:	4013      	ands	r3, r2
 800ef94:	d005      	beq.n	800efa2 <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800ef96:	4a25      	ldr	r2, [pc, #148]	@ (800f02c <sen5x_check_for_errors+0xd4>)
 800ef98:	4b25      	ldr	r3, [pc, #148]	@ (800f030 <sen5x_check_for_errors+0xd8>)
 800ef9a:	0019      	movs	r1, r3
 800ef9c:	2003      	movs	r0, #3
 800ef9e:	f004 ff17 	bl	8013dd0 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	2380      	movs	r3, #128	@ 0x80
 800efa6:	031b      	lsls	r3, r3, #12
 800efa8:	4013      	ands	r3, r2
 800efaa:	d005      	beq.n	800efb8 <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800efac:	4a21      	ldr	r2, [pc, #132]	@ (800f034 <sen5x_check_for_errors+0xdc>)
 800efae:	4b20      	ldr	r3, [pc, #128]	@ (800f030 <sen5x_check_for_errors+0xd8>)
 800efb0:	0019      	movs	r1, r3
 800efb2:	2003      	movs	r0, #3
 800efb4:	f004 ff0c 	bl	8013dd0 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2280      	movs	r2, #128	@ 0x80
 800efbc:	4013      	ands	r3, r2
 800efbe:	d005      	beq.n	800efcc <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800efc0:	4a1d      	ldr	r2, [pc, #116]	@ (800f038 <sen5x_check_for_errors+0xe0>)
 800efc2:	4b1b      	ldr	r3, [pc, #108]	@ (800f030 <sen5x_check_for_errors+0xd8>)
 800efc4:	0019      	movs	r1, r3
 800efc6:	2003      	movs	r0, #3
 800efc8:	f004 ff02 	bl	8013dd0 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2240      	movs	r2, #64	@ 0x40
 800efd0:	4013      	ands	r3, r2
 800efd2:	d005      	beq.n	800efe0 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800efd4:	4a19      	ldr	r2, [pc, #100]	@ (800f03c <sen5x_check_for_errors+0xe4>)
 800efd6:	4b16      	ldr	r3, [pc, #88]	@ (800f030 <sen5x_check_for_errors+0xd8>)
 800efd8:	0019      	movs	r1, r3
 800efda:	2003      	movs	r0, #3
 800efdc:	f004 fef8 	bl	8013dd0 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2220      	movs	r2, #32
 800efe4:	4013      	ands	r3, r2
 800efe6:	d005      	beq.n	800eff4 <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800efe8:	4a15      	ldr	r2, [pc, #84]	@ (800f040 <sen5x_check_for_errors+0xe8>)
 800efea:	4b11      	ldr	r3, [pc, #68]	@ (800f030 <sen5x_check_for_errors+0xd8>)
 800efec:	0019      	movs	r1, r3
 800efee:	2003      	movs	r0, #3
 800eff0:	f004 feee 	bl	8013dd0 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2210      	movs	r2, #16
 800eff8:	4013      	ands	r3, r2
 800effa:	d005      	beq.n	800f008 <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800effc:	4a11      	ldr	r2, [pc, #68]	@ (800f044 <sen5x_check_for_errors+0xec>)
 800effe:	4b0c      	ldr	r3, [pc, #48]	@ (800f030 <sen5x_check_for_errors+0xd8>)
 800f000:	0019      	movs	r1, r3
 800f002:	2003      	movs	r0, #3
 800f004:	f004 fee4 	bl	8013dd0 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4a0f      	ldr	r2, [pc, #60]	@ (800f048 <sen5x_check_for_errors+0xf0>)
 800f00c:	4908      	ldr	r1, [pc, #32]	@ (800f030 <sen5x_check_for_errors+0xd8>)
 800f00e:	2003      	movs	r0, #3
 800f010:	f004 fede 	bl	8013dd0 <CreateLine>
  return true;
 800f014:	2301      	movs	r3, #1
}
 800f016:	0018      	movs	r0, r3
 800f018:	46bd      	mov	sp, r7
 800f01a:	b002      	add	sp, #8
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	46c0      	nop			@ (mov r8, r8)
 800f020:	0000d206 	.word	0x0000d206
 800f024:	0802d354 	.word	0x0802d354
 800f028:	0802cef8 	.word	0x0802cef8
 800f02c:	0802d394 	.word	0x0802d394
 800f030:	0802cecc 	.word	0x0802cecc
 800f034:	0802d3b4 	.word	0x0802d3b4
 800f038:	0802d3d0 	.word	0x0802d3d0
 800f03c:	0802d3f4 	.word	0x0802d3f4
 800f040:	0802d414 	.word	0x0802d414
 800f044:	0802d428 	.word	0x0802d428
 800f048:	0802d464 	.word	0x0802d464

0800f04c <set_light_on_state>:

void set_light_on_state(void) {
 800f04c:	b580      	push	{r7, lr}
 800f04e:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800f050:	4b15      	ldr	r3, [pc, #84]	@ (800f0a8 <set_light_on_state+0x5c>)
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	2201      	movs	r2, #1
 800f056:	4053      	eors	r3, r2
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d008      	beq.n	800f070 <set_light_on_state+0x24>
    sen5x_Power_On();
 800f05e:	f7ff faf5 	bl	800e64c <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800f062:	4a12      	ldr	r2, [pc, #72]	@ (800f0ac <set_light_on_state+0x60>)
 800f064:	4b12      	ldr	r3, [pc, #72]	@ (800f0b0 <set_light_on_state+0x64>)
 800f066:	0019      	movs	r1, r3
 800f068:	2003      	movs	r0, #3
 800f06a:	f004 feb1 	bl	8013dd0 <CreateLine>
 800f06e:	e00a      	b.n	800f086 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800f070:	f005 fc26 	bl	80148c0 <HAL_GetTick>
 800f074:	0002      	movs	r2, r0
 800f076:	4b0f      	ldr	r3, [pc, #60]	@ (800f0b4 <set_light_on_state+0x68>)
 800f078:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800f07a:	4a0f      	ldr	r2, [pc, #60]	@ (800f0b8 <set_light_on_state+0x6c>)
 800f07c:	4b0c      	ldr	r3, [pc, #48]	@ (800f0b0 <set_light_on_state+0x64>)
 800f07e:	0019      	movs	r1, r3
 800f080:	2003      	movs	r0, #3
 800f082:	f004 fea5 	bl	8013dd0 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800f086:	f7ff fc75 	bl	800e974 <sen5x_lightup_measurement>
 800f08a:	1e03      	subs	r3, r0, #0
 800f08c:	d005      	beq.n	800f09a <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800f08e:	4a0b      	ldr	r2, [pc, #44]	@ (800f0bc <set_light_on_state+0x70>)
 800f090:	4b0b      	ldr	r3, [pc, #44]	@ (800f0c0 <set_light_on_state+0x74>)
 800f092:	0019      	movs	r1, r3
 800f094:	2001      	movs	r0, #1
 800f096:	f004 fe9b 	bl	8013dd0 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800f09a:	4b0a      	ldr	r3, [pc, #40]	@ (800f0c4 <set_light_on_state+0x78>)
 800f09c:	2203      	movs	r2, #3
 800f09e:	701a      	strb	r2, [r3, #0]
}
 800f0a0:	46c0      	nop			@ (mov r8, r8)
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	46c0      	nop			@ (mov r8, r8)
 800f0a8:	200011c1 	.word	0x200011c1
 800f0ac:	0802d494 	.word	0x0802d494
 800f0b0:	0802cecc 	.word	0x0802cecc
 800f0b4:	200011d0 	.word	0x200011d0
 800f0b8:	0802d4b4 	.word	0x0802d4b4
 800f0bc:	0802d4cc 	.word	0x0802d4cc
 800f0c0:	0802cef8 	.word	0x0802cef8
 800f0c4:	200000aa 	.word	0x200000aa

0800f0c8 <sen5x_statemachine>:

void sen5x_statemachine() {
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800f0ce:	1dfb      	adds	r3, r7, #7
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800f0d4:	4b92      	ldr	r3, [pc, #584]	@ (800f320 <sen5x_statemachine+0x258>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	0018      	movs	r0, r3
 800f0da:	f004 fe23 	bl	8013d24 <TimestampIsReached>
 800f0de:	1e03      	subs	r3, r0, #0
 800f0e0:	d100      	bne.n	800f0e4 <sen5x_statemachine+0x1c>
 800f0e2:	e118      	b.n	800f316 <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800f0e4:	4b8f      	ldr	r3, [pc, #572]	@ (800f324 <sen5x_statemachine+0x25c>)
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	2b05      	cmp	r3, #5
 800f0ea:	d900      	bls.n	800f0ee <sen5x_statemachine+0x26>
 800f0ec:	e113      	b.n	800f316 <sen5x_statemachine+0x24e>
 800f0ee:	009a      	lsls	r2, r3, #2
 800f0f0:	4b8d      	ldr	r3, [pc, #564]	@ (800f328 <sen5x_statemachine+0x260>)
 800f0f2:	18d3      	adds	r3, r2, r3
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800f0f8:	4a8c      	ldr	r2, [pc, #560]	@ (800f32c <sen5x_statemachine+0x264>)
 800f0fa:	4b8d      	ldr	r3, [pc, #564]	@ (800f330 <sen5x_statemachine+0x268>)
 800f0fc:	0019      	movs	r1, r3
 800f0fe:	2001      	movs	r0, #1
 800f100:	f004 fe66 	bl	8013dd0 <CreateLine>
      SetPMSensorStatus(false);
 800f104:	2000      	movs	r0, #0
 800f106:	f7fe f9e7 	bl	800d4d8 <SetPMSensorStatus>
      DisablePMSensor();
 800f10a:	f7fe f969 	bl	800d3e0 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then ten minutes a message when continue operated.
 800f10e:	f005 fbd7 	bl	80148c0 <HAL_GetTick>
 800f112:	0003      	movs	r3, r0
 800f114:	4a87      	ldr	r2, [pc, #540]	@ (800f334 <sen5x_statemachine+0x26c>)
 800f116:	189a      	adds	r2, r3, r2
 800f118:	4b81      	ldr	r3, [pc, #516]	@ (800f320 <sen5x_statemachine+0x258>)
 800f11a:	601a      	str	r2, [r3, #0]
      break;
 800f11c:	e0fb      	b.n	800f316 <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f11e:	f005 fbcf 	bl	80148c0 <HAL_GetTick>
 800f122:	0003      	movs	r3, r0
 800f124:	4a84      	ldr	r2, [pc, #528]	@ (800f338 <sen5x_statemachine+0x270>)
 800f126:	189a      	adds	r2, r3, r2
 800f128:	4b7d      	ldr	r3, [pc, #500]	@ (800f320 <sen5x_statemachine+0x258>)
 800f12a:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800f12c:	f7ff ff8e 	bl	800f04c <set_light_on_state>
      break;
 800f130:	e0f1      	b.n	800f316 <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800f132:	4b7c      	ldr	r3, [pc, #496]	@ (800f324 <sen5x_statemachine+0x25c>)
 800f134:	2202      	movs	r2, #2
 800f136:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800f138:	4b80      	ldr	r3, [pc, #512]	@ (800f33c <sen5x_statemachine+0x274>)
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2b05      	cmp	r3, #5
 800f13e:	d905      	bls.n	800f14c <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800f140:	4b78      	ldr	r3, [pc, #480]	@ (800f324 <sen5x_statemachine+0x25c>)
 800f142:	2200      	movs	r2, #0
 800f144:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f146:	f7ff fab1 	bl	800e6ac <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800f14a:	e0e1      	b.n	800f310 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800f14c:	f7ff ff04 	bl	800ef58 <sen5x_check_for_errors>
 800f150:	1e03      	subs	r3, r0, #0
 800f152:	d028      	beq.n	800f1a6 <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800f154:	f000 fc84 	bl	800fa60 <sen5x_device_reset>
 800f158:	1e03      	subs	r3, r0, #0
 800f15a:	d018      	beq.n	800f18e <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800f15c:	4a78      	ldr	r2, [pc, #480]	@ (800f340 <sen5x_statemachine+0x278>)
 800f15e:	4b74      	ldr	r3, [pc, #464]	@ (800f330 <sen5x_statemachine+0x268>)
 800f160:	0019      	movs	r1, r3
 800f162:	2001      	movs	r0, #1
 800f164:	f004 fe34 	bl	8013dd0 <CreateLine>
            sen5xErrors++;
 800f168:	4b74      	ldr	r3, [pc, #464]	@ (800f33c <sen5x_statemachine+0x274>)
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	3301      	adds	r3, #1
 800f16e:	b2da      	uxtb	r2, r3
 800f170:	4b72      	ldr	r3, [pc, #456]	@ (800f33c <sen5x_statemachine+0x274>)
 800f172:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800f174:	f7ff fa9a 	bl	800e6ac <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f178:	f005 fba2 	bl	80148c0 <HAL_GetTick>
 800f17c:	0003      	movs	r3, r0
 800f17e:	4a6e      	ldr	r2, [pc, #440]	@ (800f338 <sen5x_statemachine+0x270>)
 800f180:	189a      	adds	r2, r3, r2
 800f182:	4b67      	ldr	r3, [pc, #412]	@ (800f320 <sen5x_statemachine+0x258>)
 800f184:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800f186:	4b67      	ldr	r3, [pc, #412]	@ (800f324 <sen5x_statemachine+0x25c>)
 800f188:	2205      	movs	r2, #5
 800f18a:	701a      	strb	r2, [r3, #0]
 800f18c:	e005      	b.n	800f19a <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800f18e:	4a6d      	ldr	r2, [pc, #436]	@ (800f344 <sen5x_statemachine+0x27c>)
 800f190:	4b6d      	ldr	r3, [pc, #436]	@ (800f348 <sen5x_statemachine+0x280>)
 800f192:	0019      	movs	r1, r3
 800f194:	2002      	movs	r0, #2
 800f196:	f004 fe1b 	bl	8013dd0 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800f19a:	f005 fb91 	bl	80148c0 <HAL_GetTick>
 800f19e:	0002      	movs	r2, r0
 800f1a0:	4b5f      	ldr	r3, [pc, #380]	@ (800f320 <sen5x_statemachine+0x258>)
 800f1a2:	601a      	str	r2, [r3, #0]
      break;
 800f1a4:	e0b4      	b.n	800f310 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800f1a6:	4b65      	ldr	r3, [pc, #404]	@ (800f33c <sen5x_statemachine+0x274>)
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d100      	bne.n	800f1b0 <sen5x_statemachine+0xe8>
 800f1ae:	e0af      	b.n	800f310 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800f1b0:	4b62      	ldr	r3, [pc, #392]	@ (800f33c <sen5x_statemachine+0x274>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800f1b6:	4a65      	ldr	r2, [pc, #404]	@ (800f34c <sen5x_statemachine+0x284>)
 800f1b8:	4b65      	ldr	r3, [pc, #404]	@ (800f350 <sen5x_statemachine+0x288>)
 800f1ba:	0019      	movs	r1, r3
 800f1bc:	2003      	movs	r0, #3
 800f1be:	f004 fe07 	bl	8013dd0 <CreateLine>
      break;
 800f1c2:	e0a5      	b.n	800f310 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800f1c4:	1dfb      	adds	r3, r7, #7
 800f1c6:	0018      	movs	r0, r3
 800f1c8:	f000 f966 	bl	800f498 <sen5x_read_data_ready>
      if (data_ready) {
 800f1cc:	1dfb      	adds	r3, r7, #7
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d038      	beq.n	800f246 <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800f1d4:	f003 fc10 	bl	80129f8 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800f1d8:	4b5e      	ldr	r3, [pc, #376]	@ (800f354 <sen5x_statemachine+0x28c>)
 800f1da:	0018      	movs	r0, r3
 800f1dc:	f7ff fc70 	bl	800eac0 <sen5x_read_measurement>
 800f1e0:	1e03      	subs	r3, r0, #0
 800f1e2:	d017      	beq.n	800f214 <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800f1e4:	4a5c      	ldr	r2, [pc, #368]	@ (800f358 <sen5x_statemachine+0x290>)
 800f1e6:	4b52      	ldr	r3, [pc, #328]	@ (800f330 <sen5x_statemachine+0x268>)
 800f1e8:	0019      	movs	r1, r3
 800f1ea:	2001      	movs	r0, #1
 800f1ec:	f004 fdf0 	bl	8013dd0 <CreateLine>
          sen5xErrors++;
 800f1f0:	4b52      	ldr	r3, [pc, #328]	@ (800f33c <sen5x_statemachine+0x274>)
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	b2da      	uxtb	r2, r3
 800f1f8:	4b50      	ldr	r3, [pc, #320]	@ (800f33c <sen5x_statemachine+0x274>)
 800f1fa:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800f1fc:	f7ff fa56 	bl	800e6ac <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f200:	f005 fb5e 	bl	80148c0 <HAL_GetTick>
 800f204:	0003      	movs	r3, r0
 800f206:	4a4c      	ldr	r2, [pc, #304]	@ (800f338 <sen5x_statemachine+0x270>)
 800f208:	189a      	adds	r2, r3, r2
 800f20a:	4b45      	ldr	r3, [pc, #276]	@ (800f320 <sen5x_statemachine+0x258>)
 800f20c:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800f20e:	4b45      	ldr	r3, [pc, #276]	@ (800f324 <sen5x_statemachine+0x25c>)
 800f210:	2205      	movs	r2, #5
 800f212:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800f214:	4b51      	ldr	r3, [pc, #324]	@ (800f35c <sen5x_statemachine+0x294>)
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	3301      	adds	r3, #1
 800f21a:	b2da      	uxtb	r2, r3
 800f21c:	4b4f      	ldr	r3, [pc, #316]	@ (800f35c <sen5x_statemachine+0x294>)
 800f21e:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800f220:	4b4e      	ldr	r3, [pc, #312]	@ (800f35c <sen5x_statemachine+0x294>)
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	2b1f      	cmp	r3, #31
 800f226:	d102      	bne.n	800f22e <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800f228:	4b4c      	ldr	r3, [pc, #304]	@ (800f35c <sen5x_statemachine+0x294>)
 800f22a:	2200      	movs	r2, #0
 800f22c:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800f22e:	4b4b      	ldr	r3, [pc, #300]	@ (800f35c <sen5x_statemachine+0x294>)
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	2b01      	cmp	r3, #1
 800f234:	d901      	bls.n	800f23a <sen5x_statemachine+0x172>
          sen5xStore();
 800f236:	f7ff fd9d 	bl	800ed74 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800f23a:	4b48      	ldr	r3, [pc, #288]	@ (800f35c <sen5x_statemachine+0x294>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	2b02      	cmp	r3, #2
 800f240:	d101      	bne.n	800f246 <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800f242:	f7ff fc99 	bl	800eb78 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800f246:	4b46      	ldr	r3, [pc, #280]	@ (800f360 <sen5x_statemachine+0x298>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d103      	bne.n	800f256 <sen5x_statemachine+0x18e>
 800f24e:	4b43      	ldr	r3, [pc, #268]	@ (800f35c <sen5x_statemachine+0x294>)
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	2b01      	cmp	r3, #1
 800f254:	d95e      	bls.n	800f314 <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800f256:	4b33      	ldr	r3, [pc, #204]	@ (800f324 <sen5x_statemachine+0x25c>)
 800f258:	2204      	movs	r2, #4
 800f25a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f25c:	e05a      	b.n	800f314 <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800f25e:	4b41      	ldr	r3, [pc, #260]	@ (800f364 <sen5x_statemachine+0x29c>)
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d11e      	bne.n	800f2a4 <sen5x_statemachine+0x1dc>
 800f266:	4b40      	ldr	r3, [pc, #256]	@ (800f368 <sen5x_statemachine+0x2a0>)
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d11a      	bne.n	800f2a4 <sen5x_statemachine+0x1dc>
 800f26e:	4b3f      	ldr	r3, [pc, #252]	@ (800f36c <sen5x_statemachine+0x2a4>)
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	2201      	movs	r2, #1
 800f274:	4053      	eors	r3, r2
 800f276:	b2db      	uxtb	r3, r3
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d013      	beq.n	800f2a4 <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800f27c:	f000 f9f2 	bl	800f664 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800f280:	4a3b      	ldr	r2, [pc, #236]	@ (800f370 <sen5x_statemachine+0x2a8>)
 800f282:	4b31      	ldr	r3, [pc, #196]	@ (800f348 <sen5x_statemachine+0x280>)
 800f284:	0019      	movs	r1, r3
 800f286:	2002      	movs	r0, #2
 800f288:	f004 fda2 	bl	8013dd0 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800f28c:	f005 fb18 	bl	80148c0 <HAL_GetTick>
 800f290:	0003      	movs	r3, r0
 800f292:	4a38      	ldr	r2, [pc, #224]	@ (800f374 <sen5x_statemachine+0x2ac>)
 800f294:	189a      	adds	r2, r3, r2
 800f296:	4b22      	ldr	r3, [pc, #136]	@ (800f320 <sen5x_statemachine+0x258>)
 800f298:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800f29a:	4b34      	ldr	r3, [pc, #208]	@ (800f36c <sen5x_statemachine+0x2a4>)
 800f29c:	2201      	movs	r2, #1
 800f29e:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800f2a0:	f7ff fb68 	bl	800e974 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800f2a4:	4b1f      	ldr	r3, [pc, #124]	@ (800f324 <sen5x_statemachine+0x25c>)
 800f2a6:	2205      	movs	r2, #5
 800f2a8:	701a      	strb	r2, [r3, #0]
      break;
 800f2aa:	e034      	b.n	800f316 <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800f2ac:	4b2c      	ldr	r3, [pc, #176]	@ (800f360 <sen5x_statemachine+0x298>)
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	4053      	eors	r3, r2
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d01c      	beq.n	800f2f4 <sen5x_statemachine+0x22c>
 800f2ba:	4b2f      	ldr	r3, [pc, #188]	@ (800f378 <sen5x_statemachine+0x2b0>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	4053      	eors	r3, r2
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d015      	beq.n	800f2f4 <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800f2c8:	f7ff fba0 	bl	800ea0c <sen5x_extinguish_measurement>
 800f2cc:	1e03      	subs	r3, r0, #0
 800f2ce:	d005      	beq.n	800f2dc <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800f2d0:	4a2a      	ldr	r2, [pc, #168]	@ (800f37c <sen5x_statemachine+0x2b4>)
 800f2d2:	4b17      	ldr	r3, [pc, #92]	@ (800f330 <sen5x_statemachine+0x268>)
 800f2d4:	0019      	movs	r1, r3
 800f2d6:	2001      	movs	r0, #1
 800f2d8:	f004 fd7a 	bl	8013dd0 <CreateLine>
        }
        sen5xSamples = 0;
 800f2dc:	4b1f      	ldr	r3, [pc, #124]	@ (800f35c <sen5x_statemachine+0x294>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f2e2:	f7ff f9e3 	bl	800e6ac <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800f2e6:	2000      	movs	r0, #0
 800f2e8:	f7fe f8f6 	bl	800d4d8 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800f2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f324 <sen5x_statemachine+0x25c>)
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	701a      	strb	r2, [r3, #0]
 800f2f2:	e002      	b.n	800f2fa <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800f2f4:	4b0b      	ldr	r3, [pc, #44]	@ (800f324 <sen5x_statemachine+0x25c>)
 800f2f6:	2203      	movs	r2, #3
 800f2f8:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800f2fa:	f003 fba3 	bl	8012a44 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800f2fe:	f005 fadf 	bl	80148c0 <HAL_GetTick>
 800f302:	0003      	movs	r3, r0
 800f304:	22fa      	movs	r2, #250	@ 0xfa
 800f306:	0092      	lsls	r2, r2, #2
 800f308:	189a      	adds	r2, r3, r2
 800f30a:	4b05      	ldr	r3, [pc, #20]	@ (800f320 <sen5x_statemachine+0x258>)
 800f30c:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f30e:	e002      	b.n	800f316 <sen5x_statemachine+0x24e>
      break;
 800f310:	46c0      	nop			@ (mov r8, r8)
 800f312:	e000      	b.n	800f316 <sen5x_statemachine+0x24e>
      break;
 800f314:	46c0      	nop			@ (mov r8, r8)
}
 800f316:	46c0      	nop			@ (mov r8, r8)
 800f318:	46bd      	mov	sp, r7
 800f31a:	b002      	add	sp, #8
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	46c0      	nop			@ (mov r8, r8)
 800f320:	200011d0 	.word	0x200011d0
 800f324:	200000aa 	.word	0x200000aa
 800f328:	0802e300 	.word	0x0802e300
 800f32c:	0802d4f8 	.word	0x0802d4f8
 800f330:	0802cef8 	.word	0x0802cef8
 800f334:	0004cb2f 	.word	0x0004cb2f
 800f338:	00005910 	.word	0x00005910
 800f33c:	200011cd 	.word	0x200011cd
 800f340:	0802d528 	.word	0x0802d528
 800f344:	0802d540 	.word	0x0802d540
 800f348:	0802ce8c 	.word	0x0802ce8c
 800f34c:	0802d558 	.word	0x0802d558
 800f350:	0802cecc 	.word	0x0802cecc
 800f354:	200011d4 	.word	0x200011d4
 800f358:	0802d56c 	.word	0x0802d56c
 800f35c:	200011cc 	.word	0x200011cc
 800f360:	20002151 	.word	0x20002151
 800f364:	20000e43 	.word	0x20000e43
 800f368:	20000e42 	.word	0x20000e42
 800f36c:	200011c0 	.word	0x200011c0
 800f370:	0802d59c 	.word	0x0802d59c
 800f374:	00002710 	.word	0x00002710
 800f378:	20002152 	.word	0x20002152
 800f37c:	0802d5b4 	.word	0x0802d5b4

0800f380 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800f380:	b590      	push	{r4, r7, lr}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f386:	1dbb      	adds	r3, r7, #6
 800f388:	2200      	movs	r2, #0
 800f38a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800f38c:	1dbc      	adds	r4, r7, #6
 800f38e:	1dbb      	adds	r3, r7, #6
 800f390:	8819      	ldrh	r1, [r3, #0]
 800f392:	003b      	movs	r3, r7
 800f394:	2221      	movs	r2, #33	@ 0x21
 800f396:	0018      	movs	r0, r3
 800f398:	f001 fb57 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f39c:	0003      	movs	r3, r0
 800f39e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f3a0:	1d3c      	adds	r4, r7, #4
 800f3a2:	1dbb      	adds	r3, r7, #6
 800f3a4:	881a      	ldrh	r2, [r3, #0]
 800f3a6:	003b      	movs	r3, r7
 800f3a8:	0019      	movs	r1, r3
 800f3aa:	2069      	movs	r0, #105	@ 0x69
 800f3ac:	f001 fbd1 	bl	8010b52 <sensirion_i2c_write_data>
 800f3b0:	0003      	movs	r3, r0
 800f3b2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f3b4:	1d3b      	adds	r3, r7, #4
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	5e9b      	ldrsh	r3, [r3, r2]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d003      	beq.n	800f3c6 <sen5x_start_measurement+0x46>
        return error;
 800f3be:	1d3b      	adds	r3, r7, #4
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	5e9b      	ldrsh	r3, [r3, r2]
 800f3c4:	e004      	b.n	800f3d0 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f3c6:	4b04      	ldr	r3, [pc, #16]	@ (800f3d8 <sen5x_start_measurement+0x58>)
 800f3c8:	0018      	movs	r0, r3
 800f3ca:	f7ff fda5 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f3ce:	2300      	movs	r3, #0
}
 800f3d0:	0018      	movs	r0, r3
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	b003      	add	sp, #12
 800f3d6:	bd90      	pop	{r4, r7, pc}
 800f3d8:	0000c350 	.word	0x0000c350

0800f3dc <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800f3dc:	b590      	push	{r4, r7, lr}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f3e2:	1dbb      	adds	r3, r7, #6
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800f3e8:	1dbc      	adds	r4, r7, #6
 800f3ea:	1dbb      	adds	r3, r7, #6
 800f3ec:	8819      	ldrh	r1, [r3, #0]
 800f3ee:	003b      	movs	r3, r7
 800f3f0:	2237      	movs	r2, #55	@ 0x37
 800f3f2:	0018      	movs	r0, r3
 800f3f4:	f001 fb29 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f3f8:	0003      	movs	r3, r0
 800f3fa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f3fc:	1d3c      	adds	r4, r7, #4
 800f3fe:	1dbb      	adds	r3, r7, #6
 800f400:	881a      	ldrh	r2, [r3, #0]
 800f402:	003b      	movs	r3, r7
 800f404:	0019      	movs	r1, r3
 800f406:	2069      	movs	r0, #105	@ 0x69
 800f408:	f001 fba3 	bl	8010b52 <sensirion_i2c_write_data>
 800f40c:	0003      	movs	r3, r0
 800f40e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f410:	1d3b      	adds	r3, r7, #4
 800f412:	2200      	movs	r2, #0
 800f414:	5e9b      	ldrsh	r3, [r3, r2]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d003      	beq.n	800f422 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800f41a:	1d3b      	adds	r3, r7, #4
 800f41c:	2200      	movs	r2, #0
 800f41e:	5e9b      	ldrsh	r3, [r3, r2]
 800f420:	e004      	b.n	800f42c <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f422:	4b04      	ldr	r3, [pc, #16]	@ (800f434 <sen5x_start_measurement_without_pm+0x58>)
 800f424:	0018      	movs	r0, r3
 800f426:	f7ff fd77 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	0018      	movs	r0, r3
 800f42e:	46bd      	mov	sp, r7
 800f430:	b003      	add	sp, #12
 800f432:	bd90      	pop	{r4, r7, pc}
 800f434:	0000c350 	.word	0x0000c350

0800f438 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800f438:	b590      	push	{r4, r7, lr}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f43e:	1dbb      	adds	r3, r7, #6
 800f440:	2200      	movs	r2, #0
 800f442:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800f444:	1dbc      	adds	r4, r7, #6
 800f446:	2382      	movs	r3, #130	@ 0x82
 800f448:	005a      	lsls	r2, r3, #1
 800f44a:	1dbb      	adds	r3, r7, #6
 800f44c:	8819      	ldrh	r1, [r3, #0]
 800f44e:	003b      	movs	r3, r7
 800f450:	0018      	movs	r0, r3
 800f452:	f001 fafa 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f456:	0003      	movs	r3, r0
 800f458:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f45a:	1d3c      	adds	r4, r7, #4
 800f45c:	1dbb      	adds	r3, r7, #6
 800f45e:	881a      	ldrh	r2, [r3, #0]
 800f460:	003b      	movs	r3, r7
 800f462:	0019      	movs	r1, r3
 800f464:	2069      	movs	r0, #105	@ 0x69
 800f466:	f001 fb74 	bl	8010b52 <sensirion_i2c_write_data>
 800f46a:	0003      	movs	r3, r0
 800f46c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f46e:	1d3b      	adds	r3, r7, #4
 800f470:	2200      	movs	r2, #0
 800f472:	5e9b      	ldrsh	r3, [r3, r2]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d003      	beq.n	800f480 <sen5x_stop_measurement+0x48>
        return error;
 800f478:	1d3b      	adds	r3, r7, #4
 800f47a:	2200      	movs	r2, #0
 800f47c:	5e9b      	ldrsh	r3, [r3, r2]
 800f47e:	e004      	b.n	800f48a <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f480:	4b04      	ldr	r3, [pc, #16]	@ (800f494 <sen5x_stop_measurement+0x5c>)
 800f482:	0018      	movs	r0, r3
 800f484:	f7ff fd48 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f488:	2300      	movs	r3, #0
}
 800f48a:	0018      	movs	r0, r3
 800f48c:	46bd      	mov	sp, r7
 800f48e:	b003      	add	sp, #12
 800f490:	bd90      	pop	{r4, r7, pc}
 800f492:	46c0      	nop			@ (mov r8, r8)
 800f494:	00030d40 	.word	0x00030d40

0800f498 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800f498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800f4a0:	250e      	movs	r5, #14
 800f4a2:	197b      	adds	r3, r7, r5
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800f4a8:	197c      	adds	r4, r7, r5
 800f4aa:	4a22      	ldr	r2, [pc, #136]	@ (800f534 <sen5x_read_data_ready+0x9c>)
 800f4ac:	197b      	adds	r3, r7, r5
 800f4ae:	8819      	ldrh	r1, [r3, #0]
 800f4b0:	2308      	movs	r3, #8
 800f4b2:	18fb      	adds	r3, r7, r3
 800f4b4:	0018      	movs	r0, r3
 800f4b6:	f001 fac8 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f4ba:	0003      	movs	r3, r0
 800f4bc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f4be:	260c      	movs	r6, #12
 800f4c0:	19bc      	adds	r4, r7, r6
 800f4c2:	197b      	adds	r3, r7, r5
 800f4c4:	881a      	ldrh	r2, [r3, #0]
 800f4c6:	2308      	movs	r3, #8
 800f4c8:	18fb      	adds	r3, r7, r3
 800f4ca:	0019      	movs	r1, r3
 800f4cc:	2069      	movs	r0, #105	@ 0x69
 800f4ce:	f001 fb40 	bl	8010b52 <sensirion_i2c_write_data>
 800f4d2:	0003      	movs	r3, r0
 800f4d4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f4d6:	19bb      	adds	r3, r7, r6
 800f4d8:	2200      	movs	r2, #0
 800f4da:	5e9b      	ldrsh	r3, [r3, r2]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d003      	beq.n	800f4e8 <sen5x_read_data_ready+0x50>
        return error;
 800f4e0:	19bb      	adds	r3, r7, r6
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	5e9b      	ldrsh	r3, [r3, r2]
 800f4e6:	e020      	b.n	800f52a <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f4e8:	4b13      	ldr	r3, [pc, #76]	@ (800f538 <sen5x_read_data_ready+0xa0>)
 800f4ea:	0018      	movs	r0, r3
 800f4ec:	f7ff fd14 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800f4f0:	250c      	movs	r5, #12
 800f4f2:	197c      	adds	r4, r7, r5
 800f4f4:	2308      	movs	r3, #8
 800f4f6:	18fb      	adds	r3, r7, r3
 800f4f8:	2202      	movs	r2, #2
 800f4fa:	0019      	movs	r1, r3
 800f4fc:	2069      	movs	r0, #105	@ 0x69
 800f4fe:	f001 fb40 	bl	8010b82 <sensirion_i2c_read_data_inplace>
 800f502:	0003      	movs	r3, r0
 800f504:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f506:	197b      	adds	r3, r7, r5
 800f508:	2200      	movs	r2, #0
 800f50a:	5e9b      	ldrsh	r3, [r3, r2]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d003      	beq.n	800f518 <sen5x_read_data_ready+0x80>
        return error;
 800f510:	197b      	adds	r3, r7, r5
 800f512:	2200      	movs	r2, #0
 800f514:	5e9b      	ldrsh	r3, [r3, r2]
 800f516:	e008      	b.n	800f52a <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800f518:	2308      	movs	r3, #8
 800f51a:	18fb      	adds	r3, r7, r3
 800f51c:	785b      	ldrb	r3, [r3, #1]
 800f51e:	1e5a      	subs	r2, r3, #1
 800f520:	4193      	sbcs	r3, r2
 800f522:	b2da      	uxtb	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f528:	2300      	movs	r3, #0
}
 800f52a:	0018      	movs	r0, r3
 800f52c:	46bd      	mov	sp, r7
 800f52e:	b005      	add	sp, #20
 800f530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f532:	46c0      	nop			@ (mov r8, r8)
 800f534:	00000202 	.word	0x00000202
 800f538:	00004e20 	.word	0x00004e20

0800f53c <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800f53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f53e:	b08d      	sub	sp, #52	@ 0x34
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
 800f548:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800f54a:	252e      	movs	r5, #46	@ 0x2e
 800f54c:	197b      	adds	r3, r7, r5
 800f54e:	2200      	movs	r2, #0
 800f550:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800f552:	197c      	adds	r4, r7, r5
 800f554:	23f1      	movs	r3, #241	@ 0xf1
 800f556:	009a      	lsls	r2, r3, #2
 800f558:	197b      	adds	r3, r7, r5
 800f55a:	8819      	ldrh	r1, [r3, #0]
 800f55c:	2314      	movs	r3, #20
 800f55e:	18fb      	adds	r3, r7, r3
 800f560:	0018      	movs	r0, r3
 800f562:	f001 fa72 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f566:	0003      	movs	r3, r0
 800f568:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f56a:	262c      	movs	r6, #44	@ 0x2c
 800f56c:	19bc      	adds	r4, r7, r6
 800f56e:	197b      	adds	r3, r7, r5
 800f570:	881a      	ldrh	r2, [r3, #0]
 800f572:	2314      	movs	r3, #20
 800f574:	18fb      	adds	r3, r7, r3
 800f576:	0019      	movs	r1, r3
 800f578:	2069      	movs	r0, #105	@ 0x69
 800f57a:	f001 faea 	bl	8010b52 <sensirion_i2c_write_data>
 800f57e:	0003      	movs	r3, r0
 800f580:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f582:	19bb      	adds	r3, r7, r6
 800f584:	2200      	movs	r2, #0
 800f586:	5e9b      	ldrsh	r3, [r3, r2]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d003      	beq.n	800f594 <sen5x_read_measured_values+0x58>
        return error;
 800f58c:	19bb      	adds	r3, r7, r6
 800f58e:	2200      	movs	r2, #0
 800f590:	5e9b      	ldrsh	r3, [r3, r2]
 800f592:	e060      	b.n	800f656 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f594:	4b32      	ldr	r3, [pc, #200]	@ (800f660 <sen5x_read_measured_values+0x124>)
 800f596:	0018      	movs	r0, r3
 800f598:	f7ff fcbe 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800f59c:	252c      	movs	r5, #44	@ 0x2c
 800f59e:	197c      	adds	r4, r7, r5
 800f5a0:	2314      	movs	r3, #20
 800f5a2:	18fb      	adds	r3, r7, r3
 800f5a4:	2210      	movs	r2, #16
 800f5a6:	0019      	movs	r1, r3
 800f5a8:	2069      	movs	r0, #105	@ 0x69
 800f5aa:	f001 faea 	bl	8010b82 <sensirion_i2c_read_data_inplace>
 800f5ae:	0003      	movs	r3, r0
 800f5b0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f5b2:	197b      	adds	r3, r7, r5
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	5e9b      	ldrsh	r3, [r3, r2]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d003      	beq.n	800f5c4 <sen5x_read_measured_values+0x88>
        return error;
 800f5bc:	197b      	adds	r3, r7, r5
 800f5be:	2200      	movs	r2, #0
 800f5c0:	5e9b      	ldrsh	r3, [r3, r2]
 800f5c2:	e048      	b.n	800f656 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800f5c4:	2414      	movs	r4, #20
 800f5c6:	193b      	adds	r3, r7, r4
 800f5c8:	0018      	movs	r0, r3
 800f5ca:	f000 fa79 	bl	800fac0 <sensirion_common_bytes_to_uint16_t>
 800f5ce:	0003      	movs	r3, r0
 800f5d0:	001a      	movs	r2, r3
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800f5d6:	193b      	adds	r3, r7, r4
 800f5d8:	3302      	adds	r3, #2
 800f5da:	0018      	movs	r0, r3
 800f5dc:	f000 fa70 	bl	800fac0 <sensirion_common_bytes_to_uint16_t>
 800f5e0:	0003      	movs	r3, r0
 800f5e2:	001a      	movs	r2, r3
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800f5e8:	193b      	adds	r3, r7, r4
 800f5ea:	3304      	adds	r3, #4
 800f5ec:	0018      	movs	r0, r3
 800f5ee:	f000 fa67 	bl	800fac0 <sensirion_common_bytes_to_uint16_t>
 800f5f2:	0003      	movs	r3, r0
 800f5f4:	001a      	movs	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800f5fa:	193b      	adds	r3, r7, r4
 800f5fc:	3306      	adds	r3, #6
 800f5fe:	0018      	movs	r0, r3
 800f600:	f000 fa5e 	bl	800fac0 <sensirion_common_bytes_to_uint16_t>
 800f604:	0003      	movs	r3, r0
 800f606:	001a      	movs	r2, r3
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800f60c:	193b      	adds	r3, r7, r4
 800f60e:	3308      	adds	r3, #8
 800f610:	0018      	movs	r0, r3
 800f612:	f000 fa82 	bl	800fb1a <sensirion_common_bytes_to_int16_t>
 800f616:	0003      	movs	r3, r0
 800f618:	001a      	movs	r2, r3
 800f61a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f61c:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800f61e:	193b      	adds	r3, r7, r4
 800f620:	330a      	adds	r3, #10
 800f622:	0018      	movs	r0, r3
 800f624:	f000 fa79 	bl	800fb1a <sensirion_common_bytes_to_int16_t>
 800f628:	0003      	movs	r3, r0
 800f62a:	001a      	movs	r2, r3
 800f62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f62e:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800f630:	193b      	adds	r3, r7, r4
 800f632:	330c      	adds	r3, #12
 800f634:	0018      	movs	r0, r3
 800f636:	f000 fa70 	bl	800fb1a <sensirion_common_bytes_to_int16_t>
 800f63a:	0003      	movs	r3, r0
 800f63c:	001a      	movs	r2, r3
 800f63e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f640:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800f642:	193b      	adds	r3, r7, r4
 800f644:	330e      	adds	r3, #14
 800f646:	0018      	movs	r0, r3
 800f648:	f000 fa67 	bl	800fb1a <sensirion_common_bytes_to_int16_t>
 800f64c:	0003      	movs	r3, r0
 800f64e:	001a      	movs	r2, r3
 800f650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f652:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800f654:	2300      	movs	r3, #0
}
 800f656:	0018      	movs	r0, r3
 800f658:	46bd      	mov	sp, r7
 800f65a:	b00d      	add	sp, #52	@ 0x34
 800f65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f65e:	46c0      	nop			@ (mov r8, r8)
 800f660:	00004e20 	.word	0x00004e20

0800f664 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800f664:	b590      	push	{r4, r7, lr}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f66a:	1dbb      	adds	r3, r7, #6
 800f66c:	2200      	movs	r2, #0
 800f66e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800f670:	1dbc      	adds	r4, r7, #6
 800f672:	4a12      	ldr	r2, [pc, #72]	@ (800f6bc <sen5x_start_fan_cleaning+0x58>)
 800f674:	1dbb      	adds	r3, r7, #6
 800f676:	8819      	ldrh	r1, [r3, #0]
 800f678:	003b      	movs	r3, r7
 800f67a:	0018      	movs	r0, r3
 800f67c:	f001 f9e5 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f680:	0003      	movs	r3, r0
 800f682:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f684:	1d3c      	adds	r4, r7, #4
 800f686:	1dbb      	adds	r3, r7, #6
 800f688:	881a      	ldrh	r2, [r3, #0]
 800f68a:	003b      	movs	r3, r7
 800f68c:	0019      	movs	r1, r3
 800f68e:	2069      	movs	r0, #105	@ 0x69
 800f690:	f001 fa5f 	bl	8010b52 <sensirion_i2c_write_data>
 800f694:	0003      	movs	r3, r0
 800f696:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f698:	1d3b      	adds	r3, r7, #4
 800f69a:	2200      	movs	r2, #0
 800f69c:	5e9b      	ldrsh	r3, [r3, r2]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d003      	beq.n	800f6aa <sen5x_start_fan_cleaning+0x46>
        return error;
 800f6a2:	1d3b      	adds	r3, r7, #4
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	5e9b      	ldrsh	r3, [r3, r2]
 800f6a8:	e004      	b.n	800f6b4 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f6aa:	4b05      	ldr	r3, [pc, #20]	@ (800f6c0 <sen5x_start_fan_cleaning+0x5c>)
 800f6ac:	0018      	movs	r0, r3
 800f6ae:	f7ff fc33 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	0018      	movs	r0, r3
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	b003      	add	sp, #12
 800f6ba:	bd90      	pop	{r4, r7, pc}
 800f6bc:	00005607 	.word	0x00005607
 800f6c0:	00004e20 	.word	0x00004e20

0800f6c4 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800f6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6c6:	b087      	sub	sp, #28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	0004      	movs	r4, r0
 800f6cc:	0008      	movs	r0, r1
 800f6ce:	0011      	movs	r1, r2
 800f6d0:	1dbb      	adds	r3, r7, #6
 800f6d2:	1c22      	adds	r2, r4, #0
 800f6d4:	801a      	strh	r2, [r3, #0]
 800f6d6:	1d3b      	adds	r3, r7, #4
 800f6d8:	1c02      	adds	r2, r0, #0
 800f6da:	801a      	strh	r2, [r3, #0]
 800f6dc:	1cbb      	adds	r3, r7, #2
 800f6de:	1c0a      	adds	r2, r1, #0
 800f6e0:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800f6e2:	2516      	movs	r5, #22
 800f6e4:	197b      	adds	r3, r7, r5
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800f6ea:	197c      	adds	r4, r7, r5
 800f6ec:	4a25      	ldr	r2, [pc, #148]	@ (800f784 <sen5x_set_temperature_offset_parameters+0xc0>)
 800f6ee:	197b      	adds	r3, r7, r5
 800f6f0:	8819      	ldrh	r1, [r3, #0]
 800f6f2:	2608      	movs	r6, #8
 800f6f4:	19bb      	adds	r3, r7, r6
 800f6f6:	0018      	movs	r0, r3
 800f6f8:	f001 f9a7 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f6fc:	0003      	movs	r3, r0
 800f6fe:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800f700:	197c      	adds	r4, r7, r5
 800f702:	1dbb      	adds	r3, r7, #6
 800f704:	2200      	movs	r2, #0
 800f706:	5e9a      	ldrsh	r2, [r3, r2]
 800f708:	197b      	adds	r3, r7, r5
 800f70a:	8819      	ldrh	r1, [r3, #0]
 800f70c:	19bb      	adds	r3, r7, r6
 800f70e:	0018      	movs	r0, r3
 800f710:	f001 fa06 	bl	8010b20 <sensirion_i2c_add_int16_t_to_buffer>
 800f714:	0003      	movs	r3, r0
 800f716:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800f718:	197c      	adds	r4, r7, r5
 800f71a:	1d3b      	adds	r3, r7, #4
 800f71c:	2200      	movs	r2, #0
 800f71e:	5e9a      	ldrsh	r2, [r3, r2]
 800f720:	197b      	adds	r3, r7, r5
 800f722:	8819      	ldrh	r1, [r3, #0]
 800f724:	19bb      	adds	r3, r7, r6
 800f726:	0018      	movs	r0, r3
 800f728:	f001 f9fa 	bl	8010b20 <sensirion_i2c_add_int16_t_to_buffer>
 800f72c:	0003      	movs	r3, r0
 800f72e:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800f730:	197c      	adds	r4, r7, r5
 800f732:	1cbb      	adds	r3, r7, #2
 800f734:	881a      	ldrh	r2, [r3, #0]
 800f736:	197b      	adds	r3, r7, r5
 800f738:	8819      	ldrh	r1, [r3, #0]
 800f73a:	19bb      	adds	r3, r7, r6
 800f73c:	0018      	movs	r0, r3
 800f73e:	f001 f9b0 	bl	8010aa2 <sensirion_i2c_add_uint16_t_to_buffer>
 800f742:	0003      	movs	r3, r0
 800f744:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f746:	2214      	movs	r2, #20
 800f748:	18bc      	adds	r4, r7, r2
 800f74a:	197b      	adds	r3, r7, r5
 800f74c:	881a      	ldrh	r2, [r3, #0]
 800f74e:	19bb      	adds	r3, r7, r6
 800f750:	0019      	movs	r1, r3
 800f752:	2069      	movs	r0, #105	@ 0x69
 800f754:	f001 f9fd 	bl	8010b52 <sensirion_i2c_write_data>
 800f758:	0003      	movs	r3, r0
 800f75a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f75c:	2214      	movs	r2, #20
 800f75e:	18bb      	adds	r3, r7, r2
 800f760:	2100      	movs	r1, #0
 800f762:	5e5b      	ldrsh	r3, [r3, r1]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d003      	beq.n	800f770 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800f768:	18bb      	adds	r3, r7, r2
 800f76a:	2200      	movs	r2, #0
 800f76c:	5e9b      	ldrsh	r3, [r3, r2]
 800f76e:	e004      	b.n	800f77a <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f770:	4b05      	ldr	r3, [pc, #20]	@ (800f788 <sen5x_set_temperature_offset_parameters+0xc4>)
 800f772:	0018      	movs	r0, r3
 800f774:	f7ff fbd0 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f778:	2300      	movs	r3, #0
}
 800f77a:	0018      	movs	r0, r3
 800f77c:	46bd      	mov	sp, r7
 800f77e:	b007      	add	sp, #28
 800f780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f782:	46c0      	nop			@ (mov r8, r8)
 800f784:	000060b2 	.word	0x000060b2
 800f788:	00004e20 	.word	0x00004e20

0800f78c <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800f78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f78e:	b091      	sub	sp, #68	@ 0x44
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	000a      	movs	r2, r1
 800f796:	1cfb      	adds	r3, r7, #3
 800f798:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f79a:	253e      	movs	r5, #62	@ 0x3e
 800f79c:	197b      	adds	r3, r7, r5
 800f79e:	2200      	movs	r2, #0
 800f7a0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800f7a2:	197c      	adds	r4, r7, r5
 800f7a4:	4a22      	ldr	r2, [pc, #136]	@ (800f830 <sen5x_get_product_name+0xa4>)
 800f7a6:	197b      	adds	r3, r7, r5
 800f7a8:	8819      	ldrh	r1, [r3, #0]
 800f7aa:	230c      	movs	r3, #12
 800f7ac:	18fb      	adds	r3, r7, r3
 800f7ae:	0018      	movs	r0, r3
 800f7b0:	f001 f94b 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f7b4:	0003      	movs	r3, r0
 800f7b6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f7b8:	263c      	movs	r6, #60	@ 0x3c
 800f7ba:	19bc      	adds	r4, r7, r6
 800f7bc:	197b      	adds	r3, r7, r5
 800f7be:	881a      	ldrh	r2, [r3, #0]
 800f7c0:	230c      	movs	r3, #12
 800f7c2:	18fb      	adds	r3, r7, r3
 800f7c4:	0019      	movs	r1, r3
 800f7c6:	2069      	movs	r0, #105	@ 0x69
 800f7c8:	f001 f9c3 	bl	8010b52 <sensirion_i2c_write_data>
 800f7cc:	0003      	movs	r3, r0
 800f7ce:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f7d0:	19bb      	adds	r3, r7, r6
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	5e9b      	ldrsh	r3, [r3, r2]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d003      	beq.n	800f7e2 <sen5x_get_product_name+0x56>
        return error;
 800f7da:	19bb      	adds	r3, r7, r6
 800f7dc:	2200      	movs	r2, #0
 800f7de:	5e9b      	ldrsh	r3, [r3, r2]
 800f7e0:	e021      	b.n	800f826 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f7e2:	4b14      	ldr	r3, [pc, #80]	@ (800f834 <sen5x_get_product_name+0xa8>)
 800f7e4:	0018      	movs	r0, r3
 800f7e6:	f7ff fb97 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f7ea:	253c      	movs	r5, #60	@ 0x3c
 800f7ec:	197c      	adds	r4, r7, r5
 800f7ee:	230c      	movs	r3, #12
 800f7f0:	18fb      	adds	r3, r7, r3
 800f7f2:	2220      	movs	r2, #32
 800f7f4:	0019      	movs	r1, r3
 800f7f6:	2069      	movs	r0, #105	@ 0x69
 800f7f8:	f001 f9c3 	bl	8010b82 <sensirion_i2c_read_data_inplace>
 800f7fc:	0003      	movs	r3, r0
 800f7fe:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f800:	197b      	adds	r3, r7, r5
 800f802:	2200      	movs	r2, #0
 800f804:	5e9b      	ldrsh	r3, [r3, r2]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d003      	beq.n	800f812 <sen5x_get_product_name+0x86>
        return error;
 800f80a:	197b      	adds	r3, r7, r5
 800f80c:	2200      	movs	r2, #0
 800f80e:	5e9b      	ldrsh	r3, [r3, r2]
 800f810:	e009      	b.n	800f826 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800f812:	1cfb      	adds	r3, r7, #3
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	b29a      	uxth	r2, r3
 800f818:	6879      	ldr	r1, [r7, #4]
 800f81a:	230c      	movs	r3, #12
 800f81c:	18fb      	adds	r3, r7, r3
 800f81e:	0018      	movs	r0, r3
 800f820:	f000 f989 	bl	800fb36 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f824:	2300      	movs	r3, #0
}
 800f826:	0018      	movs	r0, r3
 800f828:	46bd      	mov	sp, r7
 800f82a:	b011      	add	sp, #68	@ 0x44
 800f82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f82e:	46c0      	nop			@ (mov r8, r8)
 800f830:	0000d014 	.word	0x0000d014
 800f834:	0000c350 	.word	0x0000c350

0800f838 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800f838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f83a:	b091      	sub	sp, #68	@ 0x44
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	000a      	movs	r2, r1
 800f842:	1cfb      	adds	r3, r7, #3
 800f844:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f846:	253e      	movs	r5, #62	@ 0x3e
 800f848:	197b      	adds	r3, r7, r5
 800f84a:	2200      	movs	r2, #0
 800f84c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800f84e:	197c      	adds	r4, r7, r5
 800f850:	4a22      	ldr	r2, [pc, #136]	@ (800f8dc <sen5x_get_serial_number+0xa4>)
 800f852:	197b      	adds	r3, r7, r5
 800f854:	8819      	ldrh	r1, [r3, #0]
 800f856:	230c      	movs	r3, #12
 800f858:	18fb      	adds	r3, r7, r3
 800f85a:	0018      	movs	r0, r3
 800f85c:	f001 f8f5 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f860:	0003      	movs	r3, r0
 800f862:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f864:	263c      	movs	r6, #60	@ 0x3c
 800f866:	19bc      	adds	r4, r7, r6
 800f868:	197b      	adds	r3, r7, r5
 800f86a:	881a      	ldrh	r2, [r3, #0]
 800f86c:	230c      	movs	r3, #12
 800f86e:	18fb      	adds	r3, r7, r3
 800f870:	0019      	movs	r1, r3
 800f872:	2069      	movs	r0, #105	@ 0x69
 800f874:	f001 f96d 	bl	8010b52 <sensirion_i2c_write_data>
 800f878:	0003      	movs	r3, r0
 800f87a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f87c:	19bb      	adds	r3, r7, r6
 800f87e:	2200      	movs	r2, #0
 800f880:	5e9b      	ldrsh	r3, [r3, r2]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d003      	beq.n	800f88e <sen5x_get_serial_number+0x56>
        return error;
 800f886:	19bb      	adds	r3, r7, r6
 800f888:	2200      	movs	r2, #0
 800f88a:	5e9b      	ldrsh	r3, [r3, r2]
 800f88c:	e021      	b.n	800f8d2 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f88e:	4b14      	ldr	r3, [pc, #80]	@ (800f8e0 <sen5x_get_serial_number+0xa8>)
 800f890:	0018      	movs	r0, r3
 800f892:	f7ff fb41 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f896:	253c      	movs	r5, #60	@ 0x3c
 800f898:	197c      	adds	r4, r7, r5
 800f89a:	230c      	movs	r3, #12
 800f89c:	18fb      	adds	r3, r7, r3
 800f89e:	2220      	movs	r2, #32
 800f8a0:	0019      	movs	r1, r3
 800f8a2:	2069      	movs	r0, #105	@ 0x69
 800f8a4:	f001 f96d 	bl	8010b82 <sensirion_i2c_read_data_inplace>
 800f8a8:	0003      	movs	r3, r0
 800f8aa:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f8ac:	197b      	adds	r3, r7, r5
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	5e9b      	ldrsh	r3, [r3, r2]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d003      	beq.n	800f8be <sen5x_get_serial_number+0x86>
        return error;
 800f8b6:	197b      	adds	r3, r7, r5
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	5e9b      	ldrsh	r3, [r3, r2]
 800f8bc:	e009      	b.n	800f8d2 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800f8be:	1cfb      	adds	r3, r7, #3
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	b29a      	uxth	r2, r3
 800f8c4:	6879      	ldr	r1, [r7, #4]
 800f8c6:	230c      	movs	r3, #12
 800f8c8:	18fb      	adds	r3, r7, r3
 800f8ca:	0018      	movs	r0, r3
 800f8cc:	f000 f933 	bl	800fb36 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f8d0:	2300      	movs	r3, #0
}
 800f8d2:	0018      	movs	r0, r3
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	b011      	add	sp, #68	@ 0x44
 800f8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8da:	46c0      	nop			@ (mov r8, r8)
 800f8dc:	0000d033 	.word	0x0000d033
 800f8e0:	0000c350 	.word	0x0000c350

0800f8e4 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800f8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8e6:	b089      	sub	sp, #36	@ 0x24
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
 800f8f0:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800f8f2:	251e      	movs	r5, #30
 800f8f4:	197b      	adds	r3, r7, r5
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800f8fa:	197c      	adds	r4, r7, r5
 800f8fc:	23d1      	movs	r3, #209	@ 0xd1
 800f8fe:	021a      	lsls	r2, r3, #8
 800f900:	197b      	adds	r3, r7, r5
 800f902:	8819      	ldrh	r1, [r3, #0]
 800f904:	2310      	movs	r3, #16
 800f906:	18fb      	adds	r3, r7, r3
 800f908:	0018      	movs	r0, r3
 800f90a:	f001 f89e 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f90e:	0003      	movs	r3, r0
 800f910:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f912:	261c      	movs	r6, #28
 800f914:	19bc      	adds	r4, r7, r6
 800f916:	197b      	adds	r3, r7, r5
 800f918:	881a      	ldrh	r2, [r3, #0]
 800f91a:	2310      	movs	r3, #16
 800f91c:	18fb      	adds	r3, r7, r3
 800f91e:	0019      	movs	r1, r3
 800f920:	2069      	movs	r0, #105	@ 0x69
 800f922:	f001 f916 	bl	8010b52 <sensirion_i2c_write_data>
 800f926:	0003      	movs	r3, r0
 800f928:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f92a:	19bb      	adds	r3, r7, r6
 800f92c:	2200      	movs	r2, #0
 800f92e:	5e9b      	ldrsh	r3, [r3, r2]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d003      	beq.n	800f93c <sen5x_get_version+0x58>
        return error;
 800f934:	19bb      	adds	r3, r7, r6
 800f936:	2200      	movs	r2, #0
 800f938:	5e9b      	ldrsh	r3, [r3, r2]
 800f93a:	e038      	b.n	800f9ae <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f93c:	4b1e      	ldr	r3, [pc, #120]	@ (800f9b8 <sen5x_get_version+0xd4>)
 800f93e:	0018      	movs	r0, r3
 800f940:	f7ff faea 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800f944:	251c      	movs	r5, #28
 800f946:	197c      	adds	r4, r7, r5
 800f948:	2310      	movs	r3, #16
 800f94a:	18fb      	adds	r3, r7, r3
 800f94c:	2208      	movs	r2, #8
 800f94e:	0019      	movs	r1, r3
 800f950:	2069      	movs	r0, #105	@ 0x69
 800f952:	f001 f916 	bl	8010b82 <sensirion_i2c_read_data_inplace>
 800f956:	0003      	movs	r3, r0
 800f958:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f95a:	197b      	adds	r3, r7, r5
 800f95c:	2200      	movs	r2, #0
 800f95e:	5e9b      	ldrsh	r3, [r3, r2]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d003      	beq.n	800f96c <sen5x_get_version+0x88>
        return error;
 800f964:	197b      	adds	r3, r7, r5
 800f966:	2200      	movs	r2, #0
 800f968:	5e9b      	ldrsh	r3, [r3, r2]
 800f96a:	e020      	b.n	800f9ae <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800f96c:	2110      	movs	r1, #16
 800f96e:	187b      	adds	r3, r7, r1
 800f970:	781a      	ldrb	r2, [r3, #0]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800f976:	187b      	adds	r3, r7, r1
 800f978:	785a      	ldrb	r2, [r3, #1]
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800f97e:	187b      	adds	r3, r7, r1
 800f980:	789b      	ldrb	r3, [r3, #2]
 800f982:	1e5a      	subs	r2, r3, #1
 800f984:	4193      	sbcs	r3, r2
 800f986:	b2da      	uxtb	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800f98c:	187b      	adds	r3, r7, r1
 800f98e:	78da      	ldrb	r2, [r3, #3]
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800f994:	187b      	adds	r3, r7, r1
 800f996:	791a      	ldrb	r2, [r3, #4]
 800f998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99a:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800f99c:	187b      	adds	r3, r7, r1
 800f99e:	795a      	ldrb	r2, [r3, #5]
 800f9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9a2:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800f9a4:	187b      	adds	r3, r7, r1
 800f9a6:	799a      	ldrb	r2, [r3, #6]
 800f9a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9aa:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f9ac:	2300      	movs	r3, #0
}
 800f9ae:	0018      	movs	r0, r3
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	b009      	add	sp, #36	@ 0x24
 800f9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9b6:	46c0      	nop			@ (mov r8, r8)
 800f9b8:	00004e20 	.word	0x00004e20

0800f9bc <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800f9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9be:	b087      	sub	sp, #28
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800f9c4:	2516      	movs	r5, #22
 800f9c6:	197b      	adds	r3, r7, r5
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800f9cc:	197c      	adds	r4, r7, r5
 800f9ce:	4a21      	ldr	r2, [pc, #132]	@ (800fa54 <sen5x_read_device_status+0x98>)
 800f9d0:	197b      	adds	r3, r7, r5
 800f9d2:	8819      	ldrh	r1, [r3, #0]
 800f9d4:	260c      	movs	r6, #12
 800f9d6:	19bb      	adds	r3, r7, r6
 800f9d8:	0018      	movs	r0, r3
 800f9da:	f001 f836 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800f9de:	0003      	movs	r3, r0
 800f9e0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f9e2:	2314      	movs	r3, #20
 800f9e4:	18fc      	adds	r4, r7, r3
 800f9e6:	197b      	adds	r3, r7, r5
 800f9e8:	881a      	ldrh	r2, [r3, #0]
 800f9ea:	19bb      	adds	r3, r7, r6
 800f9ec:	0019      	movs	r1, r3
 800f9ee:	2069      	movs	r0, #105	@ 0x69
 800f9f0:	f001 f8af 	bl	8010b52 <sensirion_i2c_write_data>
 800f9f4:	0003      	movs	r3, r0
 800f9f6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f9f8:	2314      	movs	r3, #20
 800f9fa:	18fb      	adds	r3, r7, r3
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	5e9b      	ldrsh	r3, [r3, r2]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d001      	beq.n	800fa08 <sen5x_read_device_status+0x4c>
        return 0xD206;
 800fa04:	4b14      	ldr	r3, [pc, #80]	@ (800fa58 <sen5x_read_device_status+0x9c>)
 800fa06:	e020      	b.n	800fa4a <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fa08:	4b14      	ldr	r3, [pc, #80]	@ (800fa5c <sen5x_read_device_status+0xa0>)
 800fa0a:	0018      	movs	r0, r3
 800fa0c:	f7ff fa84 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800fa10:	2514      	movs	r5, #20
 800fa12:	197c      	adds	r4, r7, r5
 800fa14:	230c      	movs	r3, #12
 800fa16:	18fb      	adds	r3, r7, r3
 800fa18:	2204      	movs	r2, #4
 800fa1a:	0019      	movs	r1, r3
 800fa1c:	2069      	movs	r0, #105	@ 0x69
 800fa1e:	f001 f8b0 	bl	8010b82 <sensirion_i2c_read_data_inplace>
 800fa22:	0003      	movs	r3, r0
 800fa24:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa26:	197b      	adds	r3, r7, r5
 800fa28:	2200      	movs	r2, #0
 800fa2a:	5e9b      	ldrsh	r3, [r3, r2]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d003      	beq.n	800fa38 <sen5x_read_device_status+0x7c>
        return error;
 800fa30:	197b      	adds	r3, r7, r5
 800fa32:	2200      	movs	r2, #0
 800fa34:	5e9b      	ldrsh	r3, [r3, r2]
 800fa36:	e008      	b.n	800fa4a <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800fa38:	230c      	movs	r3, #12
 800fa3a:	18fb      	adds	r3, r7, r3
 800fa3c:	0018      	movs	r0, r3
 800fa3e:	f000 f853 	bl	800fae8 <sensirion_common_bytes_to_uint32_t>
 800fa42:	0002      	movs	r2, r0
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800fa48:	2300      	movs	r3, #0
}
 800fa4a:	0018      	movs	r0, r3
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	b007      	add	sp, #28
 800fa50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa52:	46c0      	nop			@ (mov r8, r8)
 800fa54:	0000d206 	.word	0x0000d206
 800fa58:	ffffd206 	.word	0xffffd206
 800fa5c:	00004e20 	.word	0x00004e20

0800fa60 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800fa60:	b590      	push	{r4, r7, lr}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800fa66:	1dbb      	adds	r3, r7, #6
 800fa68:	2200      	movs	r2, #0
 800fa6a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800fa6c:	1dbc      	adds	r4, r7, #6
 800fa6e:	4a12      	ldr	r2, [pc, #72]	@ (800fab8 <sen5x_device_reset+0x58>)
 800fa70:	1dbb      	adds	r3, r7, #6
 800fa72:	8819      	ldrh	r1, [r3, #0]
 800fa74:	003b      	movs	r3, r7
 800fa76:	0018      	movs	r0, r3
 800fa78:	f000 ffe7 	bl	8010a4a <sensirion_i2c_add_command_to_buffer>
 800fa7c:	0003      	movs	r3, r0
 800fa7e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fa80:	1d3c      	adds	r4, r7, #4
 800fa82:	1dbb      	adds	r3, r7, #6
 800fa84:	881a      	ldrh	r2, [r3, #0]
 800fa86:	003b      	movs	r3, r7
 800fa88:	0019      	movs	r1, r3
 800fa8a:	2069      	movs	r0, #105	@ 0x69
 800fa8c:	f001 f861 	bl	8010b52 <sensirion_i2c_write_data>
 800fa90:	0003      	movs	r3, r0
 800fa92:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa94:	1d3b      	adds	r3, r7, #4
 800fa96:	2200      	movs	r2, #0
 800fa98:	5e9b      	ldrsh	r3, [r3, r2]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d003      	beq.n	800faa6 <sen5x_device_reset+0x46>
        return error;
 800fa9e:	1d3b      	adds	r3, r7, #4
 800faa0:	2200      	movs	r2, #0
 800faa2:	5e9b      	ldrsh	r3, [r3, r2]
 800faa4:	e004      	b.n	800fab0 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800faa6:	4b05      	ldr	r3, [pc, #20]	@ (800fabc <sen5x_device_reset+0x5c>)
 800faa8:	0018      	movs	r0, r3
 800faaa:	f7ff fa35 	bl	800ef18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	0018      	movs	r0, r3
 800fab2:	46bd      	mov	sp, r7
 800fab4:	b003      	add	sp, #12
 800fab6:	bd90      	pop	{r4, r7, pc}
 800fab8:	0000d304 	.word	0x0000d304
 800fabc:	00030d40 	.word	0x00030d40

0800fac0 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	b21b      	sxth	r3, r3
 800face:	021b      	lsls	r3, r3, #8
 800fad0:	b21a      	sxth	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	3301      	adds	r3, #1
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	b21b      	sxth	r3, r3
 800fada:	4313      	orrs	r3, r2
 800fadc:	b21b      	sxth	r3, r3
 800fade:	b29b      	uxth	r3, r3
}
 800fae0:	0018      	movs	r0, r3
 800fae2:	46bd      	mov	sp, r7
 800fae4:	b002      	add	sp, #8
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	061a      	lsls	r2, r3, #24
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	3301      	adds	r3, #1
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	041b      	lsls	r3, r3, #16
 800fafe:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3302      	adds	r3, #2
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fb08:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	3203      	adds	r2, #3
 800fb0e:	7812      	ldrb	r2, [r2, #0]
 800fb10:	4313      	orrs	r3, r2
}
 800fb12:	0018      	movs	r0, r3
 800fb14:	46bd      	mov	sp, r7
 800fb16:	b002      	add	sp, #8
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b082      	sub	sp, #8
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	0018      	movs	r0, r3
 800fb26:	f7ff ffcb 	bl	800fac0 <sensirion_common_bytes_to_uint16_t>
 800fb2a:	0003      	movs	r3, r0
 800fb2c:	b21b      	sxth	r3, r3
}
 800fb2e:	0018      	movs	r0, r3
 800fb30:	46bd      	mov	sp, r7
 800fb32:	b002      	add	sp, #8
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b086      	sub	sp, #24
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	60f8      	str	r0, [r7, #12]
 800fb3e:	60b9      	str	r1, [r7, #8]
 800fb40:	1dbb      	adds	r3, r7, #6
 800fb42:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800fb44:	2316      	movs	r3, #22
 800fb46:	18fb      	adds	r3, r7, r3
 800fb48:	2200      	movs	r2, #0
 800fb4a:	801a      	strh	r2, [r3, #0]
 800fb4c:	e00f      	b.n	800fb6e <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800fb4e:	2016      	movs	r0, #22
 800fb50:	183b      	adds	r3, r7, r0
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	68fa      	ldr	r2, [r7, #12]
 800fb56:	18d2      	adds	r2, r2, r3
 800fb58:	183b      	adds	r3, r7, r0
 800fb5a:	881b      	ldrh	r3, [r3, #0]
 800fb5c:	68b9      	ldr	r1, [r7, #8]
 800fb5e:	18cb      	adds	r3, r1, r3
 800fb60:	7812      	ldrb	r2, [r2, #0]
 800fb62:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800fb64:	183b      	adds	r3, r7, r0
 800fb66:	881a      	ldrh	r2, [r3, #0]
 800fb68:	183b      	adds	r3, r7, r0
 800fb6a:	3201      	adds	r2, #1
 800fb6c:	801a      	strh	r2, [r3, #0]
 800fb6e:	2316      	movs	r3, #22
 800fb70:	18fa      	adds	r2, r7, r3
 800fb72:	1dbb      	adds	r3, r7, #6
 800fb74:	8812      	ldrh	r2, [r2, #0]
 800fb76:	881b      	ldrh	r3, [r3, #0]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d3e8      	bcc.n	800fb4e <sensirion_common_copy_bytes+0x18>
    }
}
 800fb7c:	46c0      	nop			@ (mov r8, r8)
 800fb7e:	46c0      	nop			@ (mov r8, r8)
 800fb80:	46bd      	mov	sp, r7
 800fb82:	b006      	add	sp, #24
 800fb84:	bd80      	pop	{r7, pc}
	...

0800fb88 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	68ba      	ldr	r2, [r7, #8]
 800fb98:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d113      	bne.n	800fbce <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	22fe      	movs	r2, #254	@ 0xfe
 800fbaa:	0592      	lsls	r2, r2, #22
 800fbac:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	4a1a      	ldr	r2, [pc, #104]	@ (800fc1c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800fbb2:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	4a1a      	ldr	r2, [pc, #104]	@ (800fc20 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800fbb8:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	4a19      	ldr	r2, [pc, #100]	@ (800fc24 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800fbbe:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	4a19      	ldr	r2, [pc, #100]	@ (800fc28 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800fbc4:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	4a18      	ldr	r2, [pc, #96]	@ (800fc2c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800fbca:	61da      	str	r2, [r3, #28]
 800fbcc:	e011      	b.n	800fbf2 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	4a17      	ldr	r2, [pc, #92]	@ (800fc30 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800fbd2:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	4a17      	ldr	r2, [pc, #92]	@ (800fc34 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800fbd8:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	4a16      	ldr	r2, [pc, #88]	@ (800fc38 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800fbde:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	4a16      	ldr	r2, [pc, #88]	@ (800fc3c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800fbe4:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	4a15      	ldr	r2, [pc, #84]	@ (800fc40 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800fbea:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	4a15      	ldr	r2, [pc, #84]	@ (800fc44 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800fbf0:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	4a14      	ldr	r2, [pc, #80]	@ (800fc48 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800fbf6:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	4a14      	ldr	r2, [pc, #80]	@ (800fc4c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fbfc:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	4a12      	ldr	r2, [pc, #72]	@ (800fc4c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fc02:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	4a12      	ldr	r2, [pc, #72]	@ (800fc50 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800fc08:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	0018      	movs	r0, r3
 800fc0e:	f000 f831 	bl	800fc74 <GasIndexAlgorithm_reset>
}
 800fc12:	46c0      	nop			@ (mov r8, r8)
 800fc14:	46bd      	mov	sp, r7
 800fc16:	b004      	add	sp, #16
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	46c0      	nop			@ (mov r8, r8)
 800fc1c:	00002710 	.word	0x00002710
 800fc20:	44340000 	.word	0x44340000
 800fc24:	46859800 	.word	0x46859800
 800fc28:	46a05000 	.word	0x46a05000
 800fc2c:	41f00000 	.word	0x41f00000
 800fc30:	42c80000 	.word	0x42c80000
 800fc34:	00004e20 	.word	0x00004e20
 800fc38:	43340000 	.word	0x43340000
 800fc3c:	4528c000 	.word	0x4528c000
 800fc40:	45a32000 	.word	0x45a32000
 800fc44:	43aa0000 	.word	0x43aa0000
 800fc48:	43660000 	.word	0x43660000
 800fc4c:	41400000 	.word	0x41400000
 800fc50:	42480000 	.word	0x42480000

0800fc54 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800fc5e:	22fe      	movs	r2, #254	@ 0xfe
 800fc60:	0592      	lsls	r2, r2, #22
 800fc62:	6839      	ldr	r1, [r7, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	0018      	movs	r0, r3
 800fc68:	f7ff ff8e 	bl	800fb88 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800fc6c:	46c0      	nop			@ (mov r8, r8)
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	b002      	add	sp, #8
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	0018      	movs	r0, r3
 800fc92:	f000 f805 	bl	800fca0 <GasIndexAlgorithm__init_instances>
}
 800fc96:	46c0      	nop			@ (mov r8, r8)
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	b002      	add	sp, #8
 800fc9c:	bd80      	pop	{r7, pc}
	...

0800fca0 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800fca0:	b590      	push	{r4, r7, lr}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	0018      	movs	r0, r3
 800fcac:	f000 f8e8 	bl	800fe80 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	0018      	movs	r0, r3
 800fcb4:	f000 f9a6 	bl	8010004 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fcb8:	1c04      	adds	r4, r0, #0
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	0018      	movs	r0, r3
 800fcbe:	f000 f9ab 	bl	8010018 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fcc2:	1c02      	adds	r2, r0, #0
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	1c21      	adds	r1, r4, #0
 800fcc8:	0018      	movs	r0, r3
 800fcca:	f000 fc3b 	bl	8010544 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d107      	bne.n	800fce6 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fcd6:	23fe      	movs	r3, #254	@ 0xfe
 800fcd8:	059b      	lsls	r3, r3, #22
 800fcda:	4a0a      	ldr	r2, [pc, #40]	@ (800fd04 <GasIndexAlgorithm__init_instances+0x64>)
 800fcdc:	490a      	ldr	r1, [pc, #40]	@ (800fd08 <GasIndexAlgorithm__init_instances+0x68>)
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fc86 	bl	80105f0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800fce4:	e005      	b.n	800fcf2 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fce6:	4b09      	ldr	r3, [pc, #36]	@ (800fd0c <GasIndexAlgorithm__init_instances+0x6c>)
 800fce8:	4a09      	ldr	r2, [pc, #36]	@ (800fd10 <GasIndexAlgorithm__init_instances+0x70>)
 800fcea:	490a      	ldr	r1, [pc, #40]	@ (800fd14 <GasIndexAlgorithm__init_instances+0x74>)
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f000 fc7f 	bl	80105f0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	0018      	movs	r0, r3
 800fcf6:	f000 fd35 	bl	8010764 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800fcfa:	46c0      	nop			@ (mov r8, r8)
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	b003      	add	sp, #12
 800fd00:	bd90      	pop	{r4, r7, pc}
 800fd02:	46c0      	nop			@ (mov r8, r8)
 800fd04:	bc257a78 	.word	0xbc257a78
 800fd08:	44198000 	.word	0x44198000
 800fd0c:	42c80000 	.word	0x42c80000
 800fd10:	bbd4fdf4 	.word	0xbbd4fdf4
 800fd14:	43550000 	.word	0x43550000

0800fd18 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800fd18:	b590      	push	{r4, r7, lr}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	60f8      	str	r0, [r7, #12]
 800fd20:	60b9      	str	r1, [r7, #8]
 800fd22:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd28:	4952      	ldr	r1, [pc, #328]	@ (800fe74 <GasIndexAlgorithm_process+0x15c>)
 800fd2a:	1c18      	adds	r0, r3, #0
 800fd2c:	f7f0 fc0a 	bl	8000544 <__aeabi_fcmple>
 800fd30:	1e03      	subs	r3, r0, #0
 800fd32:	d00c      	beq.n	800fd4e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	1c19      	adds	r1, r3, #0
 800fd3e:	1c10      	adds	r0, r2, #0
 800fd40:	f7f0 fdbe 	bl	80008c0 <__aeabi_fadd>
 800fd44:	1c03      	adds	r3, r0, #0
 800fd46:	1c1a      	adds	r2, r3, #0
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	631a      	str	r2, [r3, #48]	@ 0x30
 800fd4c:	e080      	b.n	800fe50 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	dd25      	ble.n	800fda0 <GasIndexAlgorithm_process+0x88>
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	4a48      	ldr	r2, [pc, #288]	@ (800fe78 <GasIndexAlgorithm_process+0x160>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	dc21      	bgt.n	800fda0 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	68ba      	ldr	r2, [r7, #8]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	dc04      	bgt.n	800fd70 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	60bb      	str	r3, [r7, #8]
 800fd6e:	e00d      	b.n	800fd8c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	4a41      	ldr	r2, [pc, #260]	@ (800fe7c <GasIndexAlgorithm_process+0x164>)
 800fd76:	4694      	mov	ip, r2
 800fd78:	4463      	add	r3, ip
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	dd05      	ble.n	800fd8c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	4a3d      	ldr	r2, [pc, #244]	@ (800fe7c <GasIndexAlgorithm_process+0x164>)
 800fd86:	4694      	mov	ip, r2
 800fd88:	4463      	add	r3, ip
 800fd8a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	68ba      	ldr	r2, [r7, #8]
 800fd92:	1ad3      	subs	r3, r2, r3
 800fd94:	0018      	movs	r0, r3
 800fd96:	f7f1 fd47 	bl	8001828 <__aeabi_i2f>
 800fd9a:	1c02      	adds	r2, r0, #0
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d005      	beq.n	800fdb4 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	0018      	movs	r0, r3
 800fdac:	f000 f945 	bl	801003a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800fdb0:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800fdb2:	d014      	beq.n	800fdde <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	1c11      	adds	r1, r2, #0
 800fdbc:	0018      	movs	r0, r3
 800fdbe:	f000 fbd1 	bl	8010564 <GasIndexAlgorithm__mox_model__process>
 800fdc2:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	1c11      	adds	r1, r2, #0
 800fdd0:	0018      	movs	r0, r3
 800fdd2:	f000 fc25 	bl	8010620 <GasIndexAlgorithm__sigmoid_scaled__process>
 800fdd6:	1c02      	adds	r2, r0, #0
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	639a      	str	r2, [r3, #56]	@ 0x38
 800fddc:	e003      	b.n	800fde6 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	689a      	ldr	r2, [r3, #8]
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	1c11      	adds	r1, r2, #0
 800fdee:	0018      	movs	r0, r3
 800fdf0:	f000 fcec 	bl	80107cc <GasIndexAlgorithm__adaptive_lowpass__process>
 800fdf4:	1c02      	adds	r2, r0, #0
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdfe:	21fc      	movs	r1, #252	@ 0xfc
 800fe00:	0589      	lsls	r1, r1, #22
 800fe02:	1c18      	adds	r0, r3, #0
 800fe04:	f7f0 fb94 	bl	8000530 <__aeabi_fcmplt>
 800fe08:	1e03      	subs	r3, r0, #0
 800fe0a:	d003      	beq.n	800fe14 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	22fc      	movs	r2, #252	@ 0xfc
 800fe10:	0592      	lsls	r2, r2, #22
 800fe12:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe18:	2100      	movs	r1, #0
 800fe1a:	1c18      	adds	r0, r3, #0
 800fe1c:	f7f0 fb9c 	bl	8000558 <__aeabi_fcmpgt>
 800fe20:	1e03      	subs	r3, r0, #0
 800fe22:	d015      	beq.n	800fe50 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	1c11      	adds	r1, r2, #0
 800fe2c:	0018      	movs	r0, r3
 800fe2e:	f000 fa4f 	bl	80102d0 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	0018      	movs	r0, r3
 800fe36:	f000 f8e5 	bl	8010004 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fe3a:	1c04      	adds	r4, r0, #0
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	0018      	movs	r0, r3
 800fe40:	f000 f8ea 	bl	8010018 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fe44:	1c02      	adds	r2, r0, #0
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	1c21      	adds	r1, r4, #0
 800fe4a:	0018      	movs	r0, r3
 800fe4c:	f000 fb7a 	bl	8010544 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe54:	21fc      	movs	r1, #252	@ 0xfc
 800fe56:	0589      	lsls	r1, r1, #22
 800fe58:	1c18      	adds	r0, r3, #0
 800fe5a:	f7f0 fd31 	bl	80008c0 <__aeabi_fadd>
 800fe5e:	1c03      	adds	r3, r0, #0
 800fe60:	1c18      	adds	r0, r3, #0
 800fe62:	f7f1 fcc1 	bl	80017e8 <__aeabi_f2iz>
 800fe66:	0002      	movs	r2, r0
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	601a      	str	r2, [r3, #0]
    return;
 800fe6c:	46c0      	nop			@ (mov r8, r8)
}
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	b005      	add	sp, #20
 800fe72:	bd90      	pop	{r4, r7, pc}
 800fe74:	42340000 	.word	0x42340000
 800fe78:	0000fde7 	.word	0x0000fde7
 800fe7c:	00007fff 	.word	0x00007fff

0800fe80 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800fe80:	b5b0      	push	{r4, r5, r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	223c      	movs	r2, #60	@ 0x3c
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	4952      	ldr	r1, [pc, #328]	@ (800fff4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800feaa:	1c18      	adds	r0, r3, #0
 800feac:	f7f0 fefa 	bl	8000ca4 <__aeabi_fdiv>
 800feb0:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800feb2:	2188      	movs	r1, #136	@ 0x88
 800feb4:	05c9      	lsls	r1, r1, #23
 800feb6:	1c18      	adds	r0, r3, #0
 800feb8:	f7f1 f8c2 	bl	8001040 <__aeabi_fmul>
 800febc:	1c03      	adds	r3, r0, #0
 800febe:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	494a      	ldr	r1, [pc, #296]	@ (800fff4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800feca:	1c18      	adds	r0, r3, #0
 800fecc:	f7f0 feea 	bl	8000ca4 <__aeabi_fdiv>
 800fed0:	1c03      	adds	r3, r0, #0
 800fed2:	1c19      	adds	r1, r3, #0
 800fed4:	1c20      	adds	r0, r4, #0
 800fed6:	f7f0 fcf3 	bl	80008c0 <__aeabi_fadd>
 800feda:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800fedc:	1c19      	adds	r1, r3, #0
 800fede:	1c28      	adds	r0, r5, #0
 800fee0:	f7f0 fee0 	bl	8000ca4 <__aeabi_fdiv>
 800fee4:	1c03      	adds	r3, r0, #0
 800fee6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	4940      	ldr	r1, [pc, #256]	@ (800fff4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800fef2:	1c18      	adds	r0, r3, #0
 800fef4:	f7f0 fed6 	bl	8000ca4 <__aeabi_fdiv>
 800fef8:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800fefa:	2185      	movs	r1, #133	@ 0x85
 800fefc:	05c9      	lsls	r1, r1, #23
 800fefe:	1c18      	adds	r0, r3, #0
 800ff00:	f7f1 f89e 	bl	8001040 <__aeabi_fmul>
 800ff04:	1c03      	adds	r3, r0, #0
 800ff06:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	4938      	ldr	r1, [pc, #224]	@ (800fff4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ff12:	1c18      	adds	r0, r3, #0
 800ff14:	f7f0 fec6 	bl	8000ca4 <__aeabi_fdiv>
 800ff18:	1c03      	adds	r3, r0, #0
 800ff1a:	1c19      	adds	r1, r3, #0
 800ff1c:	1c20      	adds	r0, r4, #0
 800ff1e:	f7f0 fccf 	bl	80008c0 <__aeabi_fadd>
 800ff22:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ff24:	1c19      	adds	r1, r3, #0
 800ff26:	1c28      	adds	r0, r5, #0
 800ff28:	f7f0 febc 	bl	8000ca4 <__aeabi_fdiv>
 800ff2c:	1c03      	adds	r3, r0, #0
 800ff2e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d118      	bne.n	800ff6e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ff40:	2188      	movs	r1, #136	@ 0x88
 800ff42:	05c9      	lsls	r1, r1, #23
 800ff44:	1c18      	adds	r0, r3, #0
 800ff46:	f7f1 f87b 	bl	8001040 <__aeabi_fmul>
 800ff4a:	1c03      	adds	r3, r0, #0
 800ff4c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800ff52:	4929      	ldr	r1, [pc, #164]	@ (800fff8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800ff54:	1c18      	adds	r0, r3, #0
 800ff56:	f7f0 fcb3 	bl	80008c0 <__aeabi_fadd>
 800ff5a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ff5c:	1c19      	adds	r1, r3, #0
 800ff5e:	1c20      	adds	r0, r4, #0
 800ff60:	f7f0 fea0 	bl	8000ca4 <__aeabi_fdiv>
 800ff64:	1c03      	adds	r3, r0, #0
 800ff66:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	655a      	str	r2, [r3, #84]	@ 0x54
 800ff6c:	e017      	b.n	800ff9e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ff72:	2188      	movs	r1, #136	@ 0x88
 800ff74:	05c9      	lsls	r1, r1, #23
 800ff76:	1c18      	adds	r0, r3, #0
 800ff78:	f7f1 f862 	bl	8001040 <__aeabi_fmul>
 800ff7c:	1c03      	adds	r3, r0, #0
 800ff7e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800ff84:	491d      	ldr	r1, [pc, #116]	@ (800fffc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800ff86:	1c18      	adds	r0, r3, #0
 800ff88:	f7f0 fc9a 	bl	80008c0 <__aeabi_fadd>
 800ff8c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ff8e:	1c19      	adds	r1, r3, #0
 800ff90:	1c20      	adds	r0, r4, #0
 800ff92:	f7f0 fe87 	bl	8000ca4 <__aeabi_fdiv>
 800ff96:	1c03      	adds	r3, r0, #0
 800ff98:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ffa2:	2185      	movs	r1, #133	@ 0x85
 800ffa4:	05c9      	lsls	r1, r1, #23
 800ffa6:	1c18      	adds	r0, r3, #0
 800ffa8:	f7f1 f84a 	bl	8001040 <__aeabi_fmul>
 800ffac:	1c03      	adds	r3, r0, #0
 800ffae:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	4912      	ldr	r1, [pc, #72]	@ (8010000 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800ffb6:	1c18      	adds	r0, r3, #0
 800ffb8:	f7f0 fc82 	bl	80008c0 <__aeabi_fadd>
 800ffbc:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800ffbe:	1c19      	adds	r1, r3, #0
 800ffc0:	1c20      	adds	r0, r4, #0
 800ffc2:	f7f0 fe6f 	bl	8000ca4 <__aeabi_fdiv>
 800ffc6:	1c03      	adds	r3, r0, #0
 800ffc8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800ffec:	46c0      	nop			@ (mov r8, r8)
 800ffee:	46bd      	mov	sp, r7
 800fff0:	b002      	add	sp, #8
 800fff2:	bdb0      	pop	{r4, r5, r7, pc}
 800fff4:	45610000 	.word	0x45610000
 800fff8:	44960000 	.word	0x44960000
 800fffc:	41a00000 	.word	0x41a00000
 8010000:	451c4000 	.word	0x451c4000

08010004 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8010010:	1c18      	adds	r0, r3, #0
 8010012:	46bd      	mov	sp, r7
 8010014:	b002      	add	sp, #8
 8010016:	bd80      	pop	{r7, pc}

08010018 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8010028:	1c19      	adds	r1, r3, #0
 801002a:	1c10      	adds	r0, r2, #0
 801002c:	f7f0 fc48 	bl	80008c0 <__aeabi_fadd>
 8010030:	1c03      	adds	r3, r0, #0
}
 8010032:	1c18      	adds	r0, r3, #0
 8010034:	46bd      	mov	sp, r7
 8010036:	b002      	add	sp, #8
 8010038:	bd80      	pop	{r7, pc}

0801003a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 801003a:	b580      	push	{r7, lr}
 801003c:	b082      	sub	sp, #8
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	223c      	movs	r2, #60	@ 0x3c
 8010046:	5c9b      	ldrb	r3, [r3, r2]
}
 8010048:	0018      	movs	r0, r3
 801004a:	46bd      	mov	sp, r7
 801004c:	b002      	add	sp, #8
 801004e:	bd80      	pop	{r7, pc}

08010050 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8010050:	b5b0      	push	{r4, r5, r7, lr}
 8010052:	b08c      	sub	sp, #48	@ 0x30
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 801005c:	1c19      	adds	r1, r3, #0
 801005e:	4895      	ldr	r0, [pc, #596]	@ (80102b4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8010060:	f7f1 f948 	bl	80012f4 <__aeabi_fsub>
 8010064:	1c03      	adds	r3, r0, #0
 8010066:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801006c:	1c19      	adds	r1, r3, #0
 801006e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010070:	f7f0 fa72 	bl	8000558 <__aeabi_fcmpgt>
 8010074:	1e03      	subs	r3, r0, #0
 8010076:	d00b      	beq.n	8010090 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8010080:	1c19      	adds	r1, r3, #0
 8010082:	1c10      	adds	r0, r2, #0
 8010084:	f7f0 fc1c 	bl	80008c0 <__aeabi_fadd>
 8010088:	1c03      	adds	r3, r0, #0
 801008a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010094:	1c19      	adds	r1, r3, #0
 8010096:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010098:	f7f0 fa5e 	bl	8000558 <__aeabi_fcmpgt>
 801009c:	1e03      	subs	r3, r0, #0
 801009e:	d00b      	beq.n	80100b8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80100a8:	1c19      	adds	r1, r3, #0
 80100aa:	1c10      	adds	r0, r2, #0
 80100ac:	f7f0 fc08 	bl	80008c0 <__aeabi_fadd>
 80100b0:	1c03      	adds	r3, r0, #0
 80100b2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6959      	ldr	r1, [r3, #20]
 80100bc:	4a7e      	ldr	r2, [pc, #504]	@ (80102b8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	0018      	movs	r0, r3
 80100c2:	f000 f9f1 	bl	80104a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	1c11      	adds	r1, r2, #0
 80100ce:	0018      	movs	r0, r3
 80100d0:	f000 f9fa 	bl	80104c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80100d4:	1c03      	adds	r3, r0, #0
 80100d6:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80100e4:	1c19      	adds	r1, r3, #0
 80100e6:	1c10      	adds	r0, r2, #0
 80100e8:	f7f1 f904 	bl	80012f4 <__aeabi_fsub>
 80100ec:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80100ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80100f0:	1c18      	adds	r0, r3, #0
 80100f2:	f7f0 ffa5 	bl	8001040 <__aeabi_fmul>
 80100f6:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80100f8:	1c19      	adds	r1, r3, #0
 80100fa:	1c20      	adds	r0, r4, #0
 80100fc:	f7f0 fbe0 	bl	80008c0 <__aeabi_fadd>
 8010100:	1c03      	adds	r3, r0, #0
 8010102:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 801010c:	1c19      	adds	r1, r3, #0
 801010e:	486b      	ldr	r0, [pc, #428]	@ (80102bc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8010110:	f7f1 f8f0 	bl	80012f4 <__aeabi_fsub>
 8010114:	1c03      	adds	r3, r0, #0
 8010116:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	1c11      	adds	r1, r2, #0
 8010120:	0018      	movs	r0, r3
 8010122:	f000 f9d1 	bl	80104c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010126:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010128:	1c19      	adds	r1, r3, #0
 801012a:	1c28      	adds	r0, r5, #0
 801012c:	f7f0 ff88 	bl	8001040 <__aeabi_fmul>
 8010130:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8010132:	1c19      	adds	r1, r3, #0
 8010134:	1c20      	adds	r0, r4, #0
 8010136:	f7f0 fbc3 	bl	80008c0 <__aeabi_fadd>
 801013a:	1c03      	adds	r3, r0, #0
 801013c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 801013e:	4a60      	ldr	r2, [pc, #384]	@ (80102c0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010140:	6a39      	ldr	r1, [r7, #32]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	0018      	movs	r0, r3
 8010146:	f000 f9af 	bl	80104a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	1c11      	adds	r1, r2, #0
 8010152:	0018      	movs	r0, r3
 8010154:	f000 f9b8 	bl	80104c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010158:	1c03      	adds	r3, r0, #0
 801015a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 801015c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801015e:	69f8      	ldr	r0, [r7, #28]
 8010160:	f7f0 ff6e 	bl	8001040 <__aeabi_fmul>
 8010164:	1c03      	adds	r3, r0, #0
 8010166:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6999      	ldr	r1, [r3, #24]
 8010170:	4a51      	ldr	r2, [pc, #324]	@ (80102b8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	0018      	movs	r0, r3
 8010176:	f000 f997 	bl	80104a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	1c11      	adds	r1, r2, #0
 8010182:	0018      	movs	r0, r3
 8010184:	f000 f9a0 	bl	80104c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010188:	1c03      	adds	r3, r0, #0
 801018a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8010198:	1c19      	adds	r1, r3, #0
 801019a:	1c10      	adds	r0, r2, #0
 801019c:	f7f1 f8aa 	bl	80012f4 <__aeabi_fsub>
 80101a0:	1c03      	adds	r3, r0, #0
 80101a2:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80101a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80101a6:	69b8      	ldr	r0, [r7, #24]
 80101a8:	f7f1 f8a4 	bl	80012f4 <__aeabi_fsub>
 80101ac:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80101ae:	1c19      	adds	r1, r3, #0
 80101b0:	1c28      	adds	r0, r5, #0
 80101b2:	f7f0 ff45 	bl	8001040 <__aeabi_fmul>
 80101b6:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80101b8:	1c19      	adds	r1, r3, #0
 80101ba:	1c20      	adds	r0, r4, #0
 80101bc:	f7f0 fb80 	bl	80008c0 <__aeabi_fadd>
 80101c0:	1c03      	adds	r3, r0, #0
 80101c2:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80101cc:	1c19      	adds	r1, r3, #0
 80101ce:	483b      	ldr	r0, [pc, #236]	@ (80102bc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80101d0:	f7f1 f890 	bl	80012f4 <__aeabi_fsub>
 80101d4:	1c03      	adds	r3, r0, #0
 80101d6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	1c11      	adds	r1, r2, #0
 80101e0:	0018      	movs	r0, r3
 80101e2:	f000 f971 	bl	80104c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80101e6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80101e8:	1c19      	adds	r1, r3, #0
 80101ea:	1c28      	adds	r0, r5, #0
 80101ec:	f7f0 ff28 	bl	8001040 <__aeabi_fmul>
 80101f0:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 80101f2:	1c19      	adds	r1, r3, #0
 80101f4:	1c20      	adds	r0, r4, #0
 80101f6:	f7f0 fb63 	bl	80008c0 <__aeabi_fadd>
 80101fa:	1c03      	adds	r3, r0, #0
 80101fc:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80101fe:	4a30      	ldr	r2, [pc, #192]	@ (80102c0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010200:	6939      	ldr	r1, [r7, #16]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	0018      	movs	r0, r3
 8010206:	f000 f94f 	bl	80104a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	1c11      	adds	r1, r2, #0
 8010212:	0018      	movs	r0, r3
 8010214:	f000 f958 	bl	80104c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010218:	1c03      	adds	r3, r0, #0
 801021a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 801021c:	6979      	ldr	r1, [r7, #20]
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f7f0 ff0e 	bl	8001040 <__aeabi_fmul>
 8010224:	1c03      	adds	r3, r0, #0
 8010226:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	4923      	ldr	r1, [pc, #140]	@ (80102c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8010236:	1c18      	adds	r0, r3, #0
 8010238:	f7f0 fd34 	bl	8000ca4 <__aeabi_fdiv>
 801023c:	1c03      	adds	r3, r0, #0
 801023e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8010240:	69f9      	ldr	r1, [r7, #28]
 8010242:	20fe      	movs	r0, #254	@ 0xfe
 8010244:	0580      	lsls	r0, r0, #22
 8010246:	f7f1 f855 	bl	80012f4 <__aeabi_fsub>
 801024a:	1c03      	adds	r3, r0, #0
 801024c:	491e      	ldr	r1, [pc, #120]	@ (80102c8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 801024e:	1c18      	adds	r0, r3, #0
 8010250:	f7f0 fef6 	bl	8001040 <__aeabi_fmul>
 8010254:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8010256:	491d      	ldr	r1, [pc, #116]	@ (80102cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8010258:	1c18      	adds	r0, r3, #0
 801025a:	f7f1 f84b 	bl	80012f4 <__aeabi_fsub>
 801025e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8010260:	1c19      	adds	r1, r3, #0
 8010262:	1c28      	adds	r0, r5, #0
 8010264:	f7f0 feec 	bl	8001040 <__aeabi_fmul>
 8010268:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 801026a:	1c19      	adds	r1, r3, #0
 801026c:	1c20      	adds	r0, r4, #0
 801026e:	f7f0 fb27 	bl	80008c0 <__aeabi_fadd>
 8010272:	1c03      	adds	r3, r0, #0
 8010274:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801027e:	2100      	movs	r1, #0
 8010280:	1c18      	adds	r0, r3, #0
 8010282:	f7f0 f955 	bl	8000530 <__aeabi_fcmplt>
 8010286:	1e03      	subs	r3, r0, #0
 8010288:	d002      	beq.n	8010290 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2200      	movs	r2, #0
 801028e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8010298:	1c19      	adds	r1, r3, #0
 801029a:	1c10      	adds	r0, r2, #0
 801029c:	f7f0 f95c 	bl	8000558 <__aeabi_fcmpgt>
 80102a0:	1e03      	subs	r3, r0, #0
 80102a2:	d100      	bne.n	80102a6 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80102a4:	e002      	b.n	80102ac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2200      	movs	r2, #0
 80102aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80102ac:	46c0      	nop			@ (mov r8, r8)
 80102ae:	46bd      	mov	sp, r7
 80102b0:	b00c      	add	sp, #48	@ 0x30
 80102b2:	bdb0      	pop	{r4, r5, r7, pc}
 80102b4:	46fffe00 	.word	0x46fffe00
 80102b8:	3c23d70a 	.word	0x3c23d70a
 80102bc:	43ff0000 	.word	0x43ff0000
 80102c0:	3db851ec 	.word	0x3db851ec
 80102c4:	42700000 	.word	0x42700000
 80102c8:	3fa66666 	.word	0x3fa66666
 80102cc:	3e99999a 	.word	0x3e99999a

080102d0 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80102d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102d2:	b087      	sub	sp, #28
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	223c      	movs	r2, #60	@ 0x3c
 80102de:	5c9b      	ldrb	r3, [r3, r2]
 80102e0:	2201      	movs	r2, #1
 80102e2:	4053      	eors	r3, r2
 80102e4:	b2db      	uxtb	r3, r3
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d00a      	beq.n	8010300 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	223c      	movs	r2, #60	@ 0x3c
 80102ee:	2101      	movs	r1, #1
 80102f0:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	683a      	ldr	r2, [r7, #0]
 80102f6:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 80102fe:	e0c8      	b.n	8010492 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010304:	4965      	ldr	r1, [pc, #404]	@ (801049c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8010306:	1c18      	adds	r0, r3, #0
 8010308:	f7f0 f930 	bl	800056c <__aeabi_fcmpge>
 801030c:	1e03      	subs	r3, r0, #0
 801030e:	d107      	bne.n	8010320 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010314:	4962      	ldr	r1, [pc, #392]	@ (80104a0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8010316:	1c18      	adds	r0, r3, #0
 8010318:	f7f0 f914 	bl	8000544 <__aeabi_fcmple>
 801031c:	1e03      	subs	r3, r0, #0
 801031e:	d00e      	beq.n	801033e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010328:	1c19      	adds	r1, r3, #0
 801032a:	1c10      	adds	r0, r2, #0
 801032c:	f7f0 fac8 	bl	80008c0 <__aeabi_fadd>
 8010330:	1c03      	adds	r3, r0, #0
 8010332:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2200      	movs	r2, #0
 801033c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010342:	1c19      	adds	r1, r3, #0
 8010344:	6838      	ldr	r0, [r7, #0]
 8010346:	f7f0 ffd5 	bl	80012f4 <__aeabi_fsub>
 801034a:	1c03      	adds	r3, r0, #0
 801034c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	0018      	movs	r0, r3
 8010352:	f7ff fe7d 	bl	8010050 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801035a:	1c19      	adds	r1, r3, #0
 801035c:	6838      	ldr	r0, [r7, #0]
 801035e:	f7f0 ffc9 	bl	80012f4 <__aeabi_fsub>
 8010362:	1c03      	adds	r3, r0, #0
 8010364:	2185      	movs	r1, #133	@ 0x85
 8010366:	05c9      	lsls	r1, r1, #23
 8010368:	1c18      	adds	r0, r3, #0
 801036a:	f7f0 fc9b 	bl	8000ca4 <__aeabi_fdiv>
 801036e:	1c03      	adds	r3, r0, #0
 8010370:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8010372:	2100      	movs	r1, #0
 8010374:	68f8      	ldr	r0, [r7, #12]
 8010376:	f7f0 f8db 	bl	8000530 <__aeabi_fcmplt>
 801037a:	1e03      	subs	r3, r0, #0
 801037c:	d008      	beq.n	8010390 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010382:	68f9      	ldr	r1, [r7, #12]
 8010384:	1c18      	adds	r0, r3, #0
 8010386:	f7f0 ffb5 	bl	80012f4 <__aeabi_fsub>
 801038a:	1c03      	adds	r3, r0, #0
 801038c:	617b      	str	r3, [r7, #20]
 801038e:	e007      	b.n	80103a0 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010394:	1c19      	adds	r1, r3, #0
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f7f0 fa92 	bl	80008c0 <__aeabi_fadd>
 801039c:	1c03      	adds	r3, r0, #0
 801039e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80103a0:	23fe      	movs	r3, #254	@ 0xfe
 80103a2:	059b      	lsls	r3, r3, #22
 80103a4:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80103a6:	493f      	ldr	r1, [pc, #252]	@ (80104a4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80103a8:	6978      	ldr	r0, [r7, #20]
 80103aa:	f7f0 f8d5 	bl	8000558 <__aeabi_fcmpgt>
 80103ae:	1e03      	subs	r3, r0, #0
 80103b0:	d010      	beq.n	80103d4 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80103b2:	493c      	ldr	r1, [pc, #240]	@ (80104a4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80103b4:	6978      	ldr	r0, [r7, #20]
 80103b6:	f7f0 fc75 	bl	8000ca4 <__aeabi_fdiv>
 80103ba:	1c03      	adds	r3, r0, #0
 80103bc:	1c1c      	adds	r4, r3, #0
 80103be:	4939      	ldr	r1, [pc, #228]	@ (80104a4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80103c0:	6978      	ldr	r0, [r7, #20]
 80103c2:	f7f0 fc6f 	bl	8000ca4 <__aeabi_fdiv>
 80103c6:	1c03      	adds	r3, r0, #0
 80103c8:	1c19      	adds	r1, r3, #0
 80103ca:	1c20      	adds	r0, r4, #0
 80103cc:	f7f0 fe38 	bl	8001040 <__aeabi_fmul>
 80103d0:	1c03      	adds	r3, r0, #0
 80103d2:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 80103d8:	1c19      	adds	r1, r3, #0
 80103da:	2085      	movs	r0, #133	@ 0x85
 80103dc:	05c0      	lsls	r0, r0, #23
 80103de:	f7f0 ff89 	bl	80012f4 <__aeabi_fsub>
 80103e2:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 80103e4:	6939      	ldr	r1, [r7, #16]
 80103e6:	1c18      	adds	r0, r3, #0
 80103e8:	f7f0 fe2a 	bl	8001040 <__aeabi_fmul>
 80103ec:	1c03      	adds	r3, r0, #0
 80103ee:	1c18      	adds	r0, r3, #0
 80103f0:	f018 febc 	bl	802916c <sqrtf>
 80103f4:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80103fe:	2185      	movs	r1, #133	@ 0x85
 8010400:	05c9      	lsls	r1, r1, #23
 8010402:	6938      	ldr	r0, [r7, #16]
 8010404:	f7f0 fe1c 	bl	8001040 <__aeabi_fmul>
 8010408:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 801040a:	1c19      	adds	r1, r3, #0
 801040c:	1c28      	adds	r0, r5, #0
 801040e:	f7f0 fc49 	bl	8000ca4 <__aeabi_fdiv>
 8010412:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010414:	1c19      	adds	r1, r3, #0
 8010416:	1c20      	adds	r0, r4, #0
 8010418:	f7f0 fe12 	bl	8001040 <__aeabi_fmul>
 801041c:	1c03      	adds	r3, r0, #0
 801041e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010424:	68f9      	ldr	r1, [r7, #12]
 8010426:	1c18      	adds	r0, r3, #0
 8010428:	f7f0 fe0a 	bl	8001040 <__aeabi_fmul>
 801042c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 801042e:	6939      	ldr	r1, [r7, #16]
 8010430:	1c18      	adds	r0, r3, #0
 8010432:	f7f0 fc37 	bl	8000ca4 <__aeabi_fdiv>
 8010436:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8010438:	68f9      	ldr	r1, [r7, #12]
 801043a:	1c18      	adds	r0, r3, #0
 801043c:	f7f0 fe00 	bl	8001040 <__aeabi_fmul>
 8010440:	1c03      	adds	r3, r0, #0
             sqrtf(
 8010442:	1c19      	adds	r1, r3, #0
 8010444:	1c20      	adds	r0, r4, #0
 8010446:	f7f0 fa3b 	bl	80008c0 <__aeabi_fadd>
 801044a:	1c03      	adds	r3, r0, #0
 801044c:	1c18      	adds	r0, r3, #0
 801044e:	f018 fe8d 	bl	802916c <sqrtf>
 8010452:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8010454:	1c19      	adds	r1, r3, #0
 8010456:	1c30      	adds	r0, r6, #0
 8010458:	f7f0 fdf2 	bl	8001040 <__aeabi_fmul>
 801045c:	1c03      	adds	r3, r0, #0
 801045e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801046c:	68f9      	ldr	r1, [r7, #12]
 801046e:	1c18      	adds	r0, r3, #0
 8010470:	f7f0 fde6 	bl	8001040 <__aeabi_fmul>
 8010474:	1c03      	adds	r3, r0, #0
 8010476:	2182      	movs	r1, #130	@ 0x82
 8010478:	05c9      	lsls	r1, r1, #23
 801047a:	1c18      	adds	r0, r3, #0
 801047c:	f7f0 fc12 	bl	8000ca4 <__aeabi_fdiv>
 8010480:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8010482:	1c19      	adds	r1, r3, #0
 8010484:	1c20      	adds	r0, r4, #0
 8010486:	f7f0 fa1b 	bl	80008c0 <__aeabi_fadd>
 801048a:	1c03      	adds	r3, r0, #0
 801048c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8010492:	46c0      	nop			@ (mov r8, r8)
 8010494:	46bd      	mov	sp, r7
 8010496:	b007      	add	sp, #28
 8010498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801049a:	46c0      	nop			@ (mov r8, r8)
 801049c:	42c80000 	.word	0x42c80000
 80104a0:	c2c80000 	.word	0xc2c80000
 80104a4:	44b40000 	.word	0x44b40000

080104a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	68ba      	ldr	r2, [r7, #8]
 80104be:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80104c0:	46c0      	nop			@ (mov r8, r8)
 80104c2:	46bd      	mov	sp, r7
 80104c4:	b004      	add	sp, #16
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80104c8:	b590      	push	{r4, r7, lr}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80104da:	1c19      	adds	r1, r3, #0
 80104dc:	6838      	ldr	r0, [r7, #0]
 80104de:	f7f0 ff09 	bl	80012f4 <__aeabi_fsub>
 80104e2:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80104e4:	1c19      	adds	r1, r3, #0
 80104e6:	1c20      	adds	r0, r4, #0
 80104e8:	f7f0 fdaa 	bl	8001040 <__aeabi_fmul>
 80104ec:	1c03      	adds	r3, r0, #0
 80104ee:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 80104f0:	4912      	ldr	r1, [pc, #72]	@ (801053c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f7f0 f81c 	bl	8000530 <__aeabi_fcmplt>
 80104f8:	1e03      	subs	r3, r0, #0
 80104fa:	d002      	beq.n	8010502 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 80104fc:	23fe      	movs	r3, #254	@ 0xfe
 80104fe:	059b      	lsls	r3, r3, #22
 8010500:	e018      	b.n	8010534 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8010502:	490f      	ldr	r1, [pc, #60]	@ (8010540 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8010504:	68f8      	ldr	r0, [r7, #12]
 8010506:	f7f0 f827 	bl	8000558 <__aeabi_fcmpgt>
 801050a:	1e03      	subs	r3, r0, #0
 801050c:	d001      	beq.n	8010512 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 801050e:	2300      	movs	r3, #0
 8010510:	e010      	b.n	8010534 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	1c18      	adds	r0, r3, #0
 8010516:	f018 fe01 	bl	802911c <expf>
 801051a:	1c03      	adds	r3, r0, #0
 801051c:	21fe      	movs	r1, #254	@ 0xfe
 801051e:	0589      	lsls	r1, r1, #22
 8010520:	1c18      	adds	r0, r3, #0
 8010522:	f7f0 f9cd 	bl	80008c0 <__aeabi_fadd>
 8010526:	1c03      	adds	r3, r0, #0
 8010528:	1c19      	adds	r1, r3, #0
 801052a:	20fe      	movs	r0, #254	@ 0xfe
 801052c:	0580      	lsls	r0, r0, #22
 801052e:	f7f0 fbb9 	bl	8000ca4 <__aeabi_fdiv>
 8010532:	1c03      	adds	r3, r0, #0
    }
}
 8010534:	1c18      	adds	r0, r3, #0
 8010536:	46bd      	mov	sp, r7
 8010538:	b005      	add	sp, #20
 801053a:	bd90      	pop	{r4, r7, pc}
 801053c:	c2480000 	.word	0xc2480000
 8010540:	42480000 	.word	0x42480000

08010544 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8010544:	b580      	push	{r7, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	68ba      	ldr	r2, [r7, #8]
 8010554:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	687a      	ldr	r2, [r7, #4]
 801055a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801055c:	46c0      	nop			@ (mov r8, r8)
 801055e:	46bd      	mov	sp, r7
 8010560:	b004      	add	sp, #16
 8010562:	bd80      	pop	{r7, pc}

08010564 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8010564:	b590      	push	{r4, r7, lr}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2b01      	cmp	r3, #1
 8010574:	d114      	bne.n	80105a0 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801057a:	1c19      	adds	r1, r3, #0
 801057c:	6838      	ldr	r0, [r7, #0]
 801057e:	f7f0 feb9 	bl	80012f4 <__aeabi_fsub>
 8010582:	1c03      	adds	r3, r0, #0
 8010584:	4918      	ldr	r1, [pc, #96]	@ (80105e8 <GasIndexAlgorithm__mox_model__process+0x84>)
 8010586:	1c18      	adds	r0, r3, #0
 8010588:	f7f0 fb8c 	bl	8000ca4 <__aeabi_fdiv>
 801058c:	1c03      	adds	r3, r0, #0
 801058e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8010594:	1c19      	adds	r1, r3, #0
 8010596:	1c10      	adds	r0, r2, #0
 8010598:	f7f0 fd52 	bl	8001040 <__aeabi_fmul>
 801059c:	1c03      	adds	r3, r0, #0
 801059e:	e01f      	b.n	80105e0 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105a4:	1c19      	adds	r1, r3, #0
 80105a6:	6838      	ldr	r0, [r7, #0]
 80105a8:	f7f0 fea4 	bl	80012f4 <__aeabi_fsub>
 80105ac:	1c03      	adds	r3, r0, #0
 80105ae:	1c1a      	adds	r2, r3, #0
 80105b0:	2380      	movs	r3, #128	@ 0x80
 80105b2:	061b      	lsls	r3, r3, #24
 80105b4:	4053      	eors	r3, r2
 80105b6:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80105bc:	490b      	ldr	r1, [pc, #44]	@ (80105ec <GasIndexAlgorithm__mox_model__process+0x88>)
 80105be:	1c18      	adds	r0, r3, #0
 80105c0:	f7f0 f97e 	bl	80008c0 <__aeabi_fadd>
 80105c4:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80105c6:	1c19      	adds	r1, r3, #0
 80105c8:	1c20      	adds	r0, r4, #0
 80105ca:	f7f0 fb6b 	bl	8000ca4 <__aeabi_fdiv>
 80105ce:	1c03      	adds	r3, r0, #0
 80105d0:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 80105d6:	1c19      	adds	r1, r3, #0
 80105d8:	1c10      	adds	r0, r2, #0
 80105da:	f7f0 fd31 	bl	8001040 <__aeabi_fmul>
 80105de:	1c03      	adds	r3, r0, #0
    }
}
 80105e0:	1c18      	adds	r0, r3, #0
 80105e2:	46bd      	mov	sp, r7
 80105e4:	b003      	add	sp, #12
 80105e6:	bd90      	pop	{r4, r7, pc}
 80105e8:	44fa0000 	.word	0x44fa0000
 80105ec:	435c0000 	.word	0x435c0000

080105f0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	60b9      	str	r1, [r7, #8]
 80105fa:	607a      	str	r2, [r7, #4]
 80105fc:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2180      	movs	r1, #128	@ 0x80
 8010602:	687a      	ldr	r2, [r7, #4]
 8010604:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2184      	movs	r1, #132	@ 0x84
 801060a:	68ba      	ldr	r2, [r7, #8]
 801060c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2188      	movs	r1, #136	@ 0x88
 8010612:	683a      	ldr	r2, [r7, #0]
 8010614:	505a      	str	r2, [r3, r1]
}
 8010616:	46c0      	nop			@ (mov r8, r8)
 8010618:	46bd      	mov	sp, r7
 801061a:	b004      	add	sp, #16
 801061c:	bd80      	pop	{r7, pc}
	...

08010620 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8010620:	b590      	push	{r4, r7, lr}
 8010622:	b085      	sub	sp, #20
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2280      	movs	r2, #128	@ 0x80
 801062e:	589c      	ldr	r4, [r3, r2]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2284      	movs	r2, #132	@ 0x84
 8010634:	589b      	ldr	r3, [r3, r2]
 8010636:	1c19      	adds	r1, r3, #0
 8010638:	6838      	ldr	r0, [r7, #0]
 801063a:	f7f0 fe5b 	bl	80012f4 <__aeabi_fsub>
 801063e:	1c03      	adds	r3, r0, #0
 8010640:	1c19      	adds	r1, r3, #0
 8010642:	1c20      	adds	r0, r4, #0
 8010644:	f7f0 fcfc 	bl	8001040 <__aeabi_fmul>
 8010648:	1c03      	adds	r3, r0, #0
 801064a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 801064c:	4940      	ldr	r1, [pc, #256]	@ (8010750 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 801064e:	68b8      	ldr	r0, [r7, #8]
 8010650:	f7ef ff6e 	bl	8000530 <__aeabi_fcmplt>
 8010654:	1e03      	subs	r3, r0, #0
 8010656:	d001      	beq.n	801065c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8010658:	4b3e      	ldr	r3, [pc, #248]	@ (8010754 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801065a:	e075      	b.n	8010748 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 801065c:	493e      	ldr	r1, [pc, #248]	@ (8010758 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 801065e:	68b8      	ldr	r0, [r7, #8]
 8010660:	f7ef ff7a 	bl	8000558 <__aeabi_fcmpgt>
 8010664:	1e03      	subs	r3, r0, #0
 8010666:	d001      	beq.n	801066c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8010668:	2300      	movs	r3, #0
 801066a:	e06d      	b.n	8010748 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 801066c:	2100      	movs	r1, #0
 801066e:	6838      	ldr	r0, [r7, #0]
 8010670:	f7ef ff7c 	bl	800056c <__aeabi_fcmpge>
 8010674:	1e03      	subs	r3, r0, #0
 8010676:	d047      	beq.n	8010708 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2288      	movs	r2, #136	@ 0x88
 801067c:	589b      	ldr	r3, [r3, r2]
 801067e:	21fe      	movs	r1, #254	@ 0xfe
 8010680:	0589      	lsls	r1, r1, #22
 8010682:	1c18      	adds	r0, r3, #0
 8010684:	f7ef ff4e 	bl	8000524 <__aeabi_fcmpeq>
 8010688:	1e03      	subs	r3, r0, #0
 801068a:	d00e      	beq.n	80106aa <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	689b      	ldr	r3, [r3, #8]
 8010690:	1c19      	adds	r1, r3, #0
 8010692:	20fe      	movs	r0, #254	@ 0xfe
 8010694:	0580      	lsls	r0, r0, #22
 8010696:	f7f0 fe2d 	bl	80012f4 <__aeabi_fsub>
 801069a:	1c03      	adds	r3, r0, #0
 801069c:	492f      	ldr	r1, [pc, #188]	@ (801075c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 801069e:	1c18      	adds	r0, r3, #0
 80106a0:	f7f0 fcce 	bl	8001040 <__aeabi_fmul>
 80106a4:	1c03      	adds	r3, r0, #0
 80106a6:	60fb      	str	r3, [r7, #12]
 80106a8:	e012      	b.n	80106d0 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	689b      	ldr	r3, [r3, #8]
 80106ae:	492c      	ldr	r1, [pc, #176]	@ (8010760 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80106b0:	1c18      	adds	r0, r3, #0
 80106b2:	f7f0 fcc5 	bl	8001040 <__aeabi_fmul>
 80106b6:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80106b8:	1c19      	adds	r1, r3, #0
 80106ba:	4826      	ldr	r0, [pc, #152]	@ (8010754 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80106bc:	f7f0 fe1a 	bl	80012f4 <__aeabi_fsub>
 80106c0:	1c03      	adds	r3, r0, #0
 80106c2:	2181      	movs	r1, #129	@ 0x81
 80106c4:	05c9      	lsls	r1, r1, #23
 80106c6:	1c18      	adds	r0, r3, #0
 80106c8:	f7f0 faec 	bl	8000ca4 <__aeabi_fdiv>
 80106cc:	1c03      	adds	r3, r0, #0
 80106ce:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 80106d0:	4920      	ldr	r1, [pc, #128]	@ (8010754 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f7f0 f8f4 	bl	80008c0 <__aeabi_fadd>
 80106d8:	1c03      	adds	r3, r0, #0
 80106da:	1c1c      	adds	r4, r3, #0
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	1c18      	adds	r0, r3, #0
 80106e0:	f018 fd1c 	bl	802911c <expf>
 80106e4:	1c03      	adds	r3, r0, #0
 80106e6:	21fe      	movs	r1, #254	@ 0xfe
 80106e8:	0589      	lsls	r1, r1, #22
 80106ea:	1c18      	adds	r0, r3, #0
 80106ec:	f7f0 f8e8 	bl	80008c0 <__aeabi_fadd>
 80106f0:	1c03      	adds	r3, r0, #0
 80106f2:	1c19      	adds	r1, r3, #0
 80106f4:	1c20      	adds	r0, r4, #0
 80106f6:	f7f0 fad5 	bl	8000ca4 <__aeabi_fdiv>
 80106fa:	1c03      	adds	r3, r0, #0
 80106fc:	68f9      	ldr	r1, [r7, #12]
 80106fe:	1c18      	adds	r0, r3, #0
 8010700:	f7f0 fdf8 	bl	80012f4 <__aeabi_fsub>
 8010704:	1c03      	adds	r3, r0, #0
 8010706:	e01f      	b.n	8010748 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2188      	movs	r1, #136	@ 0x88
 8010710:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8010712:	1c19      	adds	r1, r3, #0
 8010714:	1c10      	adds	r0, r2, #0
 8010716:	f7f0 fac5 	bl	8000ca4 <__aeabi_fdiv>
 801071a:	1c03      	adds	r3, r0, #0
 801071c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	1c18      	adds	r0, r3, #0
 8010722:	f018 fcfb 	bl	802911c <expf>
 8010726:	1c03      	adds	r3, r0, #0
 8010728:	21fe      	movs	r1, #254	@ 0xfe
 801072a:	0589      	lsls	r1, r1, #22
 801072c:	1c18      	adds	r0, r3, #0
 801072e:	f7f0 f8c7 	bl	80008c0 <__aeabi_fadd>
 8010732:	1c03      	adds	r3, r0, #0
 8010734:	1c19      	adds	r1, r3, #0
 8010736:	4807      	ldr	r0, [pc, #28]	@ (8010754 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010738:	f7f0 fab4 	bl	8000ca4 <__aeabi_fdiv>
 801073c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 801073e:	1c19      	adds	r1, r3, #0
 8010740:	1c20      	adds	r0, r4, #0
 8010742:	f7f0 fc7d 	bl	8001040 <__aeabi_fmul>
 8010746:	1c03      	adds	r3, r0, #0
        }
    }
}
 8010748:	1c18      	adds	r0, r3, #0
 801074a:	46bd      	mov	sp, r7
 801074c:	b005      	add	sp, #20
 801074e:	bd90      	pop	{r4, r7, pc}
 8010750:	c2480000 	.word	0xc2480000
 8010754:	43fa0000 	.word	0x43fa0000
 8010758:	42480000 	.word	0x42480000
 801075c:	3f8041ab 	.word	0x3f8041ab
 8010760:	40a00000 	.word	0x40a00000

08010764 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8010764:	b590      	push	{r4, r7, lr}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	4913      	ldr	r1, [pc, #76]	@ (80107c4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8010776:	1c18      	adds	r0, r3, #0
 8010778:	f7f0 f8a2 	bl	80008c0 <__aeabi_fadd>
 801077c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 801077e:	1c19      	adds	r1, r3, #0
 8010780:	1c20      	adds	r0, r4, #0
 8010782:	f7f0 fa8f 	bl	8000ca4 <__aeabi_fdiv>
 8010786:	1c03      	adds	r3, r0, #0
 8010788:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	228c      	movs	r2, #140	@ 0x8c
 801078e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	490b      	ldr	r1, [pc, #44]	@ (80107c8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 801079a:	1c18      	adds	r0, r3, #0
 801079c:	f7f0 f890 	bl	80008c0 <__aeabi_fadd>
 80107a0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80107a2:	1c19      	adds	r1, r3, #0
 80107a4:	1c20      	adds	r0, r4, #0
 80107a6:	f7f0 fa7d 	bl	8000ca4 <__aeabi_fdiv>
 80107aa:	1c03      	adds	r3, r0, #0
 80107ac:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2290      	movs	r2, #144	@ 0x90
 80107b2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2294      	movs	r2, #148	@ 0x94
 80107b8:	2100      	movs	r1, #0
 80107ba:	5499      	strb	r1, [r3, r2]
}
 80107bc:	46c0      	nop			@ (mov r8, r8)
 80107be:	46bd      	mov	sp, r7
 80107c0:	b003      	add	sp, #12
 80107c2:	bd90      	pop	{r4, r7, pc}
 80107c4:	41a00000 	.word	0x41a00000
 80107c8:	43fa0000 	.word	0x43fa0000

080107cc <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 80107cc:	b590      	push	{r4, r7, lr}
 80107ce:	b087      	sub	sp, #28
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2294      	movs	r2, #148	@ 0x94
 80107da:	5c9b      	ldrb	r3, [r3, r2]
 80107dc:	2201      	movs	r2, #1
 80107de:	4053      	eors	r3, r2
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d00f      	beq.n	8010806 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2198      	movs	r1, #152	@ 0x98
 80107ea:	683a      	ldr	r2, [r7, #0]
 80107ec:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	219c      	movs	r1, #156	@ 0x9c
 80107f2:	683a      	ldr	r2, [r7, #0]
 80107f4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	21a0      	movs	r1, #160	@ 0xa0
 80107fa:	683a      	ldr	r2, [r7, #0]
 80107fc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2294      	movs	r2, #148	@ 0x94
 8010802:	2101      	movs	r1, #1
 8010804:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	228c      	movs	r2, #140	@ 0x8c
 801080a:	589b      	ldr	r3, [r3, r2]
 801080c:	1c19      	adds	r1, r3, #0
 801080e:	20fe      	movs	r0, #254	@ 0xfe
 8010810:	0580      	lsls	r0, r0, #22
 8010812:	f7f0 fd6f 	bl	80012f4 <__aeabi_fsub>
 8010816:	1c03      	adds	r3, r0, #0
 8010818:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2298      	movs	r2, #152	@ 0x98
 801081e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010820:	1c19      	adds	r1, r3, #0
 8010822:	f7f0 fc0d 	bl	8001040 <__aeabi_fmul>
 8010826:	1c03      	adds	r3, r0, #0
 8010828:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	228c      	movs	r2, #140	@ 0x8c
 801082e:	589b      	ldr	r3, [r3, r2]
 8010830:	6839      	ldr	r1, [r7, #0]
 8010832:	1c18      	adds	r0, r3, #0
 8010834:	f7f0 fc04 	bl	8001040 <__aeabi_fmul>
 8010838:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 801083a:	1c19      	adds	r1, r3, #0
 801083c:	1c20      	adds	r0, r4, #0
 801083e:	f7f0 f83f 	bl	80008c0 <__aeabi_fadd>
 8010842:	1c03      	adds	r3, r0, #0
 8010844:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2298      	movs	r2, #152	@ 0x98
 801084a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2290      	movs	r2, #144	@ 0x90
 8010850:	589b      	ldr	r3, [r3, r2]
 8010852:	1c19      	adds	r1, r3, #0
 8010854:	20fe      	movs	r0, #254	@ 0xfe
 8010856:	0580      	lsls	r0, r0, #22
 8010858:	f7f0 fd4c 	bl	80012f4 <__aeabi_fsub>
 801085c:	1c03      	adds	r3, r0, #0
 801085e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	229c      	movs	r2, #156	@ 0x9c
 8010864:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8010866:	1c19      	adds	r1, r3, #0
 8010868:	f7f0 fbea 	bl	8001040 <__aeabi_fmul>
 801086c:	1c03      	adds	r3, r0, #0
 801086e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2290      	movs	r2, #144	@ 0x90
 8010874:	589b      	ldr	r3, [r3, r2]
 8010876:	6839      	ldr	r1, [r7, #0]
 8010878:	1c18      	adds	r0, r3, #0
 801087a:	f7f0 fbe1 	bl	8001040 <__aeabi_fmul>
 801087e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8010880:	1c19      	adds	r1, r3, #0
 8010882:	1c20      	adds	r0, r4, #0
 8010884:	f7f0 f81c 	bl	80008c0 <__aeabi_fadd>
 8010888:	1c03      	adds	r3, r0, #0
 801088a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	229c      	movs	r2, #156	@ 0x9c
 8010890:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2298      	movs	r2, #152	@ 0x98
 8010896:	589a      	ldr	r2, [r3, r2]
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	219c      	movs	r1, #156	@ 0x9c
 801089c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 801089e:	1c19      	adds	r1, r3, #0
 80108a0:	1c10      	adds	r0, r2, #0
 80108a2:	f7f0 fd27 	bl	80012f4 <__aeabi_fsub>
 80108a6:	1c03      	adds	r3, r0, #0
 80108a8:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80108aa:	2100      	movs	r1, #0
 80108ac:	6978      	ldr	r0, [r7, #20]
 80108ae:	f7ef fe3f 	bl	8000530 <__aeabi_fcmplt>
 80108b2:	1e03      	subs	r3, r0, #0
 80108b4:	d004      	beq.n	80108c0 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	2280      	movs	r2, #128	@ 0x80
 80108ba:	0612      	lsls	r2, r2, #24
 80108bc:	4053      	eors	r3, r2
 80108be:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80108c0:	4923      	ldr	r1, [pc, #140]	@ (8010950 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80108c2:	6978      	ldr	r0, [r7, #20]
 80108c4:	f7f0 fbbc 	bl	8001040 <__aeabi_fmul>
 80108c8:	1c03      	adds	r3, r0, #0
 80108ca:	1c18      	adds	r0, r3, #0
 80108cc:	f018 fc26 	bl	802911c <expf>
 80108d0:	1c03      	adds	r3, r0, #0
 80108d2:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 80108d4:	491f      	ldr	r1, [pc, #124]	@ (8010954 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 80108d6:	6938      	ldr	r0, [r7, #16]
 80108d8:	f7f0 fbb2 	bl	8001040 <__aeabi_fmul>
 80108dc:	1c03      	adds	r3, r0, #0
 80108de:	491e      	ldr	r1, [pc, #120]	@ (8010958 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 80108e0:	1c18      	adds	r0, r3, #0
 80108e2:	f7ef ffed 	bl	80008c0 <__aeabi_fadd>
 80108e6:	1c03      	adds	r3, r0, #0
 80108e8:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	685c      	ldr	r4, [r3, #4]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	68f9      	ldr	r1, [r7, #12]
 80108f4:	1c18      	adds	r0, r3, #0
 80108f6:	f7ef ffe3 	bl	80008c0 <__aeabi_fadd>
 80108fa:	1c03      	adds	r3, r0, #0
 80108fc:	1c19      	adds	r1, r3, #0
 80108fe:	1c20      	adds	r0, r4, #0
 8010900:	f7f0 f9d0 	bl	8000ca4 <__aeabi_fdiv>
 8010904:	1c03      	adds	r3, r0, #0
 8010906:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8010908:	68b9      	ldr	r1, [r7, #8]
 801090a:	20fe      	movs	r0, #254	@ 0xfe
 801090c:	0580      	lsls	r0, r0, #22
 801090e:	f7f0 fcf1 	bl	80012f4 <__aeabi_fsub>
 8010912:	1c03      	adds	r3, r0, #0
 8010914:	1c18      	adds	r0, r3, #0
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	22a0      	movs	r2, #160	@ 0xa0
 801091a:	589b      	ldr	r3, [r3, r2]
 801091c:	1c19      	adds	r1, r3, #0
 801091e:	f7f0 fb8f 	bl	8001040 <__aeabi_fmul>
 8010922:	1c03      	adds	r3, r0, #0
 8010924:	1c1c      	adds	r4, r3, #0
 8010926:	6839      	ldr	r1, [r7, #0]
 8010928:	68b8      	ldr	r0, [r7, #8]
 801092a:	f7f0 fb89 	bl	8001040 <__aeabi_fmul>
 801092e:	1c03      	adds	r3, r0, #0
 8010930:	1c19      	adds	r1, r3, #0
 8010932:	1c20      	adds	r0, r4, #0
 8010934:	f7ef ffc4 	bl	80008c0 <__aeabi_fadd>
 8010938:	1c03      	adds	r3, r0, #0
 801093a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	22a0      	movs	r2, #160	@ 0xa0
 8010940:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	22a0      	movs	r2, #160	@ 0xa0
 8010946:	589b      	ldr	r3, [r3, r2]
}
 8010948:	1c18      	adds	r0, r3, #0
 801094a:	46bd      	mov	sp, r7
 801094c:	b007      	add	sp, #28
 801094e:	bd90      	pop	{r4, r7, pc}
 8010950:	be4ccccd 	.word	0xbe4ccccd
 8010954:	43f00000 	.word	0x43f00000
 8010958:	41a00000 	.word	0x41a00000

0801095c <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	000a      	movs	r2, r1
 8010966:	1cbb      	adds	r3, r7, #2
 8010968:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 801096a:	230d      	movs	r3, #13
 801096c:	18fb      	adds	r3, r7, r3
 801096e:	22ff      	movs	r2, #255	@ 0xff
 8010970:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010972:	230e      	movs	r3, #14
 8010974:	18fb      	adds	r3, r7, r3
 8010976:	2200      	movs	r2, #0
 8010978:	801a      	strh	r2, [r3, #0]
 801097a:	e038      	b.n	80109ee <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 801097c:	230e      	movs	r3, #14
 801097e:	18fb      	adds	r3, r7, r3
 8010980:	881b      	ldrh	r3, [r3, #0]
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	18d3      	adds	r3, r2, r3
 8010986:	7819      	ldrb	r1, [r3, #0]
 8010988:	220d      	movs	r2, #13
 801098a:	18bb      	adds	r3, r7, r2
 801098c:	18ba      	adds	r2, r7, r2
 801098e:	7812      	ldrb	r2, [r2, #0]
 8010990:	404a      	eors	r2, r1
 8010992:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010994:	230c      	movs	r3, #12
 8010996:	18fb      	adds	r3, r7, r3
 8010998:	2208      	movs	r2, #8
 801099a:	701a      	strb	r2, [r3, #0]
 801099c:	e01c      	b.n	80109d8 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 801099e:	210d      	movs	r1, #13
 80109a0:	187b      	adds	r3, r7, r1
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	b25b      	sxtb	r3, r3
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	da0a      	bge.n	80109c0 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80109aa:	187b      	adds	r3, r7, r1
 80109ac:	781b      	ldrb	r3, [r3, #0]
 80109ae:	b25b      	sxtb	r3, r3
 80109b0:	18db      	adds	r3, r3, r3
 80109b2:	b25b      	sxtb	r3, r3
 80109b4:	2231      	movs	r2, #49	@ 0x31
 80109b6:	4053      	eors	r3, r2
 80109b8:	b25a      	sxtb	r2, r3
 80109ba:	187b      	adds	r3, r7, r1
 80109bc:	701a      	strb	r2, [r3, #0]
 80109be:	e005      	b.n	80109cc <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 80109c0:	230d      	movs	r3, #13
 80109c2:	18fa      	adds	r2, r7, r3
 80109c4:	18fb      	adds	r3, r7, r3
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	18db      	adds	r3, r3, r3
 80109ca:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80109cc:	220c      	movs	r2, #12
 80109ce:	18bb      	adds	r3, r7, r2
 80109d0:	18ba      	adds	r2, r7, r2
 80109d2:	7812      	ldrb	r2, [r2, #0]
 80109d4:	3a01      	subs	r2, #1
 80109d6:	701a      	strb	r2, [r3, #0]
 80109d8:	230c      	movs	r3, #12
 80109da:	18fb      	adds	r3, r7, r3
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d1dd      	bne.n	801099e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80109e2:	220e      	movs	r2, #14
 80109e4:	18bb      	adds	r3, r7, r2
 80109e6:	18ba      	adds	r2, r7, r2
 80109e8:	8812      	ldrh	r2, [r2, #0]
 80109ea:	3201      	adds	r2, #1
 80109ec:	801a      	strh	r2, [r3, #0]
 80109ee:	230e      	movs	r3, #14
 80109f0:	18fa      	adds	r2, r7, r3
 80109f2:	1cbb      	adds	r3, r7, #2
 80109f4:	8812      	ldrh	r2, [r2, #0]
 80109f6:	881b      	ldrh	r3, [r3, #0]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d3bf      	bcc.n	801097c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 80109fc:	230d      	movs	r3, #13
 80109fe:	18fb      	adds	r3, r7, r3
 8010a00:	781b      	ldrb	r3, [r3, #0]
}
 8010a02:	0018      	movs	r0, r3
 8010a04:	46bd      	mov	sp, r7
 8010a06:	b004      	add	sp, #16
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8010a0a:	b580      	push	{r7, lr}
 8010a0c:	b082      	sub	sp, #8
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
 8010a12:	0008      	movs	r0, r1
 8010a14:	0011      	movs	r1, r2
 8010a16:	1cbb      	adds	r3, r7, #2
 8010a18:	1c02      	adds	r2, r0, #0
 8010a1a:	801a      	strh	r2, [r3, #0]
 8010a1c:	1c7b      	adds	r3, r7, #1
 8010a1e:	1c0a      	adds	r2, r1, #0
 8010a20:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010a22:	1cbb      	adds	r3, r7, #2
 8010a24:	881a      	ldrh	r2, [r3, #0]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	0011      	movs	r1, r2
 8010a2a:	0018      	movs	r0, r3
 8010a2c:	f7ff ff96 	bl	801095c <sensirion_i2c_generate_crc>
 8010a30:	0003      	movs	r3, r0
 8010a32:	001a      	movs	r2, r3
 8010a34:	1c7b      	adds	r3, r7, #1
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d001      	beq.n	8010a40 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	e000      	b.n	8010a42 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010a40:	2300      	movs	r3, #0
}
 8010a42:	0018      	movs	r0, r3
 8010a44:	46bd      	mov	sp, r7
 8010a46:	b002      	add	sp, #8
 8010a48:	bd80      	pop	{r7, pc}

08010a4a <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b082      	sub	sp, #8
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]
 8010a52:	0008      	movs	r0, r1
 8010a54:	0011      	movs	r1, r2
 8010a56:	1cbb      	adds	r3, r7, #2
 8010a58:	1c02      	adds	r2, r0, #0
 8010a5a:	801a      	strh	r2, [r3, #0]
 8010a5c:	003b      	movs	r3, r7
 8010a5e:	1c0a      	adds	r2, r1, #0
 8010a60:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010a62:	003b      	movs	r3, r7
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	0a1b      	lsrs	r3, r3, #8
 8010a68:	b299      	uxth	r1, r3
 8010a6a:	1cbb      	adds	r3, r7, #2
 8010a6c:	881b      	ldrh	r3, [r3, #0]
 8010a6e:	1cba      	adds	r2, r7, #2
 8010a70:	1c58      	adds	r0, r3, #1
 8010a72:	8010      	strh	r0, [r2, #0]
 8010a74:	001a      	movs	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	189b      	adds	r3, r3, r2
 8010a7a:	b2ca      	uxtb	r2, r1
 8010a7c:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010a7e:	1cbb      	adds	r3, r7, #2
 8010a80:	881b      	ldrh	r3, [r3, #0]
 8010a82:	1cba      	adds	r2, r7, #2
 8010a84:	1c59      	adds	r1, r3, #1
 8010a86:	8011      	strh	r1, [r2, #0]
 8010a88:	001a      	movs	r2, r3
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	189b      	adds	r3, r3, r2
 8010a8e:	003a      	movs	r2, r7
 8010a90:	8812      	ldrh	r2, [r2, #0]
 8010a92:	b2d2      	uxtb	r2, r2
 8010a94:	701a      	strb	r2, [r3, #0]
    return offset;
 8010a96:	1cbb      	adds	r3, r7, #2
 8010a98:	881b      	ldrh	r3, [r3, #0]
}
 8010a9a:	0018      	movs	r0, r3
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	b002      	add	sp, #8
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010aa2:	b590      	push	{r4, r7, lr}
 8010aa4:	b083      	sub	sp, #12
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	0008      	movs	r0, r1
 8010aac:	0011      	movs	r1, r2
 8010aae:	1cbb      	adds	r3, r7, #2
 8010ab0:	1c02      	adds	r2, r0, #0
 8010ab2:	801a      	strh	r2, [r3, #0]
 8010ab4:	003b      	movs	r3, r7
 8010ab6:	1c0a      	adds	r2, r1, #0
 8010ab8:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8010aba:	003b      	movs	r3, r7
 8010abc:	881b      	ldrh	r3, [r3, #0]
 8010abe:	0a1b      	lsrs	r3, r3, #8
 8010ac0:	b299      	uxth	r1, r3
 8010ac2:	1cbb      	adds	r3, r7, #2
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	1cba      	adds	r2, r7, #2
 8010ac8:	1c58      	adds	r0, r3, #1
 8010aca:	8010      	strh	r0, [r2, #0]
 8010acc:	001a      	movs	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	189b      	adds	r3, r3, r2
 8010ad2:	b2ca      	uxtb	r2, r1
 8010ad4:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010ad6:	1cbb      	adds	r3, r7, #2
 8010ad8:	881b      	ldrh	r3, [r3, #0]
 8010ada:	1cba      	adds	r2, r7, #2
 8010adc:	1c59      	adds	r1, r3, #1
 8010ade:	8011      	strh	r1, [r2, #0]
 8010ae0:	001a      	movs	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	189b      	adds	r3, r3, r2
 8010ae6:	003a      	movs	r2, r7
 8010ae8:	8812      	ldrh	r2, [r2, #0]
 8010aea:	b2d2      	uxtb	r2, r2
 8010aec:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010aee:	1cbb      	adds	r3, r7, #2
 8010af0:	881b      	ldrh	r3, [r3, #0]
 8010af2:	3b02      	subs	r3, #2
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010af8:	1cbb      	adds	r3, r7, #2
 8010afa:	881b      	ldrh	r3, [r3, #0]
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	18d4      	adds	r4, r2, r3
 8010b00:	2102      	movs	r1, #2
 8010b02:	f7ff ff2b 	bl	801095c <sensirion_i2c_generate_crc>
 8010b06:	0003      	movs	r3, r0
 8010b08:	7023      	strb	r3, [r4, #0]
    offset++;
 8010b0a:	1cbb      	adds	r3, r7, #2
 8010b0c:	881a      	ldrh	r2, [r3, #0]
 8010b0e:	1cbb      	adds	r3, r7, #2
 8010b10:	3201      	adds	r2, #1
 8010b12:	801a      	strh	r2, [r3, #0]

    return offset;
 8010b14:	1cbb      	adds	r3, r7, #2
 8010b16:	881b      	ldrh	r3, [r3, #0]
}
 8010b18:	0018      	movs	r0, r3
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	b003      	add	sp, #12
 8010b1e:	bd90      	pop	{r4, r7, pc}

08010b20 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	0008      	movs	r0, r1
 8010b2a:	0011      	movs	r1, r2
 8010b2c:	1cbb      	adds	r3, r7, #2
 8010b2e:	1c02      	adds	r2, r0, #0
 8010b30:	801a      	strh	r2, [r3, #0]
 8010b32:	003b      	movs	r3, r7
 8010b34:	1c0a      	adds	r2, r1, #0
 8010b36:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010b38:	003b      	movs	r3, r7
 8010b3a:	881a      	ldrh	r2, [r3, #0]
 8010b3c:	1cbb      	adds	r3, r7, #2
 8010b3e:	8819      	ldrh	r1, [r3, #0]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	0018      	movs	r0, r3
 8010b44:	f7ff ffad 	bl	8010aa2 <sensirion_i2c_add_uint16_t_to_buffer>
 8010b48:	0003      	movs	r3, r0
}
 8010b4a:	0018      	movs	r0, r3
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	b002      	add	sp, #8
 8010b50:	bd80      	pop	{r7, pc}

08010b52 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010b52:	b580      	push	{r7, lr}
 8010b54:	b082      	sub	sp, #8
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6039      	str	r1, [r7, #0]
 8010b5a:	0011      	movs	r1, r2
 8010b5c:	1dfb      	adds	r3, r7, #7
 8010b5e:	1c02      	adds	r2, r0, #0
 8010b60:	701a      	strb	r2, [r3, #0]
 8010b62:	1d3b      	adds	r3, r7, #4
 8010b64:	1c0a      	adds	r2, r1, #0
 8010b66:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010b68:	1d3b      	adds	r3, r7, #4
 8010b6a:	881a      	ldrh	r2, [r3, #0]
 8010b6c:	6839      	ldr	r1, [r7, #0]
 8010b6e:	1dfb      	adds	r3, r7, #7
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	0018      	movs	r0, r3
 8010b74:	f7fe f9b0 	bl	800eed8 <sensirion_i2c_hal_write>
 8010b78:	0003      	movs	r3, r0
}
 8010b7a:	0018      	movs	r0, r3
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	b002      	add	sp, #8
 8010b80:	bd80      	pop	{r7, pc}

08010b82 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010b82:	b5b0      	push	{r4, r5, r7, lr}
 8010b84:	b084      	sub	sp, #16
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6039      	str	r1, [r7, #0]
 8010b8a:	0011      	movs	r1, r2
 8010b8c:	1dfb      	adds	r3, r7, #7
 8010b8e:	1c02      	adds	r2, r0, #0
 8010b90:	701a      	strb	r2, [r3, #0]
 8010b92:	1d3b      	adds	r3, r7, #4
 8010b94:	1c0a      	adds	r2, r1, #0
 8010b96:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010b98:	1d3b      	adds	r3, r7, #4
 8010b9a:	881b      	ldrh	r3, [r3, #0]
 8010b9c:	085b      	lsrs	r3, r3, #1
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	220a      	movs	r2, #10
 8010ba2:	18ba      	adds	r2, r7, r2
 8010ba4:	1c19      	adds	r1, r3, #0
 8010ba6:	1c0b      	adds	r3, r1, #0
 8010ba8:	18db      	adds	r3, r3, r3
 8010baa:	185b      	adds	r3, r3, r1
 8010bac:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010bae:	1d3b      	adds	r3, r7, #4
 8010bb0:	881b      	ldrh	r3, [r3, #0]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	4013      	ands	r3, r2
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d001      	beq.n	8010bc0 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010bbc:	2304      	movs	r3, #4
 8010bbe:	e06b      	b.n	8010c98 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010bc0:	230a      	movs	r3, #10
 8010bc2:	18fb      	adds	r3, r7, r3
 8010bc4:	881a      	ldrh	r2, [r3, #0]
 8010bc6:	6839      	ldr	r1, [r7, #0]
 8010bc8:	1dfb      	adds	r3, r7, #7
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	0018      	movs	r0, r3
 8010bce:	f7fe f963 	bl	800ee98 <sensirion_i2c_hal_read>
 8010bd2:	0003      	movs	r3, r0
 8010bd4:	001a      	movs	r2, r3
 8010bd6:	2108      	movs	r1, #8
 8010bd8:	187b      	adds	r3, r7, r1
 8010bda:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010bdc:	000a      	movs	r2, r1
 8010bde:	18bb      	adds	r3, r7, r2
 8010be0:	2100      	movs	r1, #0
 8010be2:	5e5b      	ldrsh	r3, [r3, r1]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d003      	beq.n	8010bf0 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010be8:	18bb      	adds	r3, r7, r2
 8010bea:	2200      	movs	r2, #0
 8010bec:	5e9b      	ldrsh	r3, [r3, r2]
 8010bee:	e053      	b.n	8010c98 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010bf0:	230e      	movs	r3, #14
 8010bf2:	18fb      	adds	r3, r7, r3
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	801a      	strh	r2, [r3, #0]
 8010bf8:	230c      	movs	r3, #12
 8010bfa:	18fb      	adds	r3, r7, r3
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	801a      	strh	r2, [r3, #0]
 8010c00:	e041      	b.n	8010c86 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010c02:	210e      	movs	r1, #14
 8010c04:	187b      	adds	r3, r7, r1
 8010c06:	881b      	ldrh	r3, [r3, #0]
 8010c08:	683a      	ldr	r2, [r7, #0]
 8010c0a:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010c0c:	187b      	adds	r3, r7, r1
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	3302      	adds	r3, #2
 8010c12:	683a      	ldr	r2, [r7, #0]
 8010c14:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010c16:	781b      	ldrb	r3, [r3, #0]
 8010c18:	001a      	movs	r2, r3
 8010c1a:	2102      	movs	r1, #2
 8010c1c:	f7ff fef5 	bl	8010a0a <sensirion_i2c_check_crc>
 8010c20:	0003      	movs	r3, r0
 8010c22:	001a      	movs	r2, r3
 8010c24:	2108      	movs	r1, #8
 8010c26:	187b      	adds	r3, r7, r1
 8010c28:	801a      	strh	r2, [r3, #0]
        if (error) {
 8010c2a:	000a      	movs	r2, r1
 8010c2c:	18bb      	adds	r3, r7, r2
 8010c2e:	2100      	movs	r1, #0
 8010c30:	5e5b      	ldrsh	r3, [r3, r1]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d003      	beq.n	8010c3e <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8010c36:	18bb      	adds	r3, r7, r2
 8010c38:	2200      	movs	r2, #0
 8010c3a:	5e9b      	ldrsh	r3, [r3, r2]
 8010c3c:	e02c      	b.n	8010c98 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010c3e:	240e      	movs	r4, #14
 8010c40:	193b      	adds	r3, r7, r4
 8010c42:	881b      	ldrh	r3, [r3, #0]
 8010c44:	683a      	ldr	r2, [r7, #0]
 8010c46:	18d2      	adds	r2, r2, r3
 8010c48:	250c      	movs	r5, #12
 8010c4a:	197b      	adds	r3, r7, r5
 8010c4c:	881b      	ldrh	r3, [r3, #0]
 8010c4e:	1979      	adds	r1, r7, r5
 8010c50:	1c58      	adds	r0, r3, #1
 8010c52:	8008      	strh	r0, [r1, #0]
 8010c54:	0019      	movs	r1, r3
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	185b      	adds	r3, r3, r1
 8010c5a:	7812      	ldrb	r2, [r2, #0]
 8010c5c:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010c5e:	193b      	adds	r3, r7, r4
 8010c60:	881b      	ldrh	r3, [r3, #0]
 8010c62:	3301      	adds	r3, #1
 8010c64:	683a      	ldr	r2, [r7, #0]
 8010c66:	18d2      	adds	r2, r2, r3
 8010c68:	197b      	adds	r3, r7, r5
 8010c6a:	881b      	ldrh	r3, [r3, #0]
 8010c6c:	1979      	adds	r1, r7, r5
 8010c6e:	1c58      	adds	r0, r3, #1
 8010c70:	8008      	strh	r0, [r1, #0]
 8010c72:	0019      	movs	r1, r3
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	185b      	adds	r3, r3, r1
 8010c78:	7812      	ldrb	r2, [r2, #0]
 8010c7a:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010c7c:	193b      	adds	r3, r7, r4
 8010c7e:	193a      	adds	r2, r7, r4
 8010c80:	8812      	ldrh	r2, [r2, #0]
 8010c82:	3203      	adds	r2, #3
 8010c84:	801a      	strh	r2, [r3, #0]
 8010c86:	230e      	movs	r3, #14
 8010c88:	18fa      	adds	r2, r7, r3
 8010c8a:	230a      	movs	r3, #10
 8010c8c:	18fb      	adds	r3, r7, r3
 8010c8e:	8812      	ldrh	r2, [r2, #0]
 8010c90:	881b      	ldrh	r3, [r3, #0]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d3b5      	bcc.n	8010c02 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	0018      	movs	r0, r3
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	b004      	add	sp, #16
 8010c9e:	bdb0      	pop	{r4, r5, r7, pc}

08010ca0 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010ca0:	b590      	push	{r4, r7, lr}
 8010ca2:	b083      	sub	sp, #12
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6039      	str	r1, [r7, #0]
 8010ca8:	0011      	movs	r1, r2
 8010caa:	1dfb      	adds	r3, r7, #7
 8010cac:	1c02      	adds	r2, r0, #0
 8010cae:	701a      	strb	r2, [r3, #0]
 8010cb0:	1dbb      	adds	r3, r7, #6
 8010cb2:	1c0a      	adds	r2, r1, #0
 8010cb4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8010cb6:	4b08      	ldr	r3, [pc, #32]	@ (8010cd8 <ReadRegister+0x38>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d008      	beq.n	8010cd0 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8010cbe:	4b06      	ldr	r3, [pc, #24]	@ (8010cd8 <ReadRegister+0x38>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	1dba      	adds	r2, r7, #6
 8010cc4:	7814      	ldrb	r4, [r2, #0]
 8010cc6:	6839      	ldr	r1, [r7, #0]
 8010cc8:	1dfa      	adds	r2, r7, #7
 8010cca:	7810      	ldrb	r0, [r2, #0]
 8010ccc:	0022      	movs	r2, r4
 8010cce:	4798      	blx	r3
  }
}
 8010cd0:	46c0      	nop			@ (mov r8, r8)
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	b003      	add	sp, #12
 8010cd6:	bd90      	pop	{r4, r7, pc}
 8010cd8:	200011e8 	.word	0x200011e8

08010cdc <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010cdc:	b590      	push	{r4, r7, lr}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6039      	str	r1, [r7, #0]
 8010ce4:	0011      	movs	r1, r2
 8010ce6:	1dfb      	adds	r3, r7, #7
 8010ce8:	1c02      	adds	r2, r0, #0
 8010cea:	701a      	strb	r2, [r3, #0]
 8010cec:	1dbb      	adds	r3, r7, #6
 8010cee:	1c0a      	adds	r2, r1, #0
 8010cf0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010cf2:	4b08      	ldr	r3, [pc, #32]	@ (8010d14 <WriteRegister+0x38>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d008      	beq.n	8010d0c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8010cfa:	4b06      	ldr	r3, [pc, #24]	@ (8010d14 <WriteRegister+0x38>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	1dba      	adds	r2, r7, #6
 8010d00:	7814      	ldrb	r4, [r2, #0]
 8010d02:	6839      	ldr	r1, [r7, #0]
 8010d04:	1dfa      	adds	r2, r7, #7
 8010d06:	7810      	ldrb	r0, [r2, #0]
 8010d08:	0022      	movs	r2, r4
 8010d0a:	4798      	blx	r3
  }
}
 8010d0c:	46c0      	nop			@ (mov r8, r8)
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	b003      	add	sp, #12
 8010d12:	bd90      	pop	{r4, r7, pc}
 8010d14:	200011ec 	.word	0x200011ec

08010d18 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010d20:	f003 fdce 	bl	80148c0 <HAL_GetTick>
 8010d24:	0002      	movs	r2, r0
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	18d2      	adds	r2, r2, r3
 8010d2a:	4b03      	ldr	r3, [pc, #12]	@ (8010d38 <setSGP40TimeStamp+0x20>)
 8010d2c:	601a      	str	r2, [r3, #0]
}
 8010d2e:	46c0      	nop			@ (mov r8, r8)
 8010d30:	46bd      	mov	sp, r7
 8010d32:	b002      	add	sp, #8
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	46c0      	nop			@ (mov r8, r8)
 8010d38:	200011fc 	.word	0x200011fc

08010d3c <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010d40:	4b02      	ldr	r3, [pc, #8]	@ (8010d4c <ResetSGP40samplecounter+0x10>)
 8010d42:	2200      	movs	r2, #0
 8010d44:	701a      	strb	r2, [r3, #0]
}
 8010d46:	46c0      	nop			@ (mov r8, r8)
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	200011fa 	.word	0x200011fa

08010d50 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010d5a:	4b07      	ldr	r3, [pc, #28]	@ (8010d78 <SGP_Init+0x28>)
 8010d5c:	687a      	ldr	r2, [r7, #4]
 8010d5e:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010d60:	4b06      	ldr	r3, [pc, #24]	@ (8010d7c <SGP_Init+0x2c>)
 8010d62:	683a      	ldr	r2, [r7, #0]
 8010d64:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8010d66:	4b06      	ldr	r3, [pc, #24]	@ (8010d80 <SGP_Init+0x30>)
 8010d68:	2100      	movs	r1, #0
 8010d6a:	0018      	movs	r0, r3
 8010d6c:	f7fe ff72 	bl	800fc54 <GasIndexAlgorithm_init>
}
 8010d70:	46c0      	nop			@ (mov r8, r8)
 8010d72:	46bd      	mov	sp, r7
 8010d74:	b002      	add	sp, #8
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	200011e8 	.word	0x200011e8
 8010d7c:	200011ec 	.word	0x200011ec
 8010d80:	20001204 	.word	0x20001204

08010d84 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8010d84:	b580      	push	{r7, lr}
 8010d86:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8010d88:	4b07      	ldr	r3, [pc, #28]	@ (8010da8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d004      	beq.n	8010d9a <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 8010d90:	4b06      	ldr	r3, [pc, #24]	@ (8010dac <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010d92:	22fe      	movs	r2, #254	@ 0xfe
 8010d94:	0592      	lsls	r2, r2, #22
 8010d96:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8010d98:	e002      	b.n	8010da0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8010d9a:	4b04      	ldr	r3, [pc, #16]	@ (8010dac <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010d9c:	4a04      	ldr	r2, [pc, #16]	@ (8010db0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 8010d9e:	605a      	str	r2, [r3, #4]
}
 8010da0:	46c0      	nop			@ (mov r8, r8)
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	46c0      	nop			@ (mov r8, r8)
 8010da8:	20002151 	.word	0x20002151
 8010dac:	20001204 	.word	0x20001204
 8010db0:	44610000 	.word	0x44610000

08010db4 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8010db4:	b580      	push	{r7, lr}
 8010db6:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010db8:	4b13      	ldr	r3, [pc, #76]	@ (8010e08 <SGP_StartMeasurement+0x54>)
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d00d      	beq.n	8010ddc <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010dc0:	4b12      	ldr	r3, [pc, #72]	@ (8010e0c <SGP_StartMeasurement+0x58>)
 8010dc2:	2208      	movs	r2, #8
 8010dc4:	0019      	movs	r1, r3
 8010dc6:	2059      	movs	r0, #89	@ 0x59
 8010dc8:	f7ff ff88 	bl	8010cdc <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010dcc:	f003 fd78 	bl	80148c0 <HAL_GetTick>
 8010dd0:	0003      	movs	r3, r0
 8010dd2:	331e      	adds	r3, #30
 8010dd4:	001a      	movs	r2, r3
 8010dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8010e10 <SGP_StartMeasurement+0x5c>)
 8010dd8:	601a      	str	r2, [r3, #0]
 8010dda:	e00c      	b.n	8010df6 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8010e14 <SGP_StartMeasurement+0x60>)
 8010dde:	2208      	movs	r2, #8
 8010de0:	0019      	movs	r1, r3
 8010de2:	2059      	movs	r0, #89	@ 0x59
 8010de4:	f7ff ff7a 	bl	8010cdc <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8010de8:	f003 fd6a 	bl	80148c0 <HAL_GetTick>
 8010dec:	0003      	movs	r3, r0
 8010dee:	33aa      	adds	r3, #170	@ 0xaa
 8010df0:	001a      	movs	r2, r3
 8010df2:	4b09      	ldr	r3, [pc, #36]	@ (8010e18 <SGP_StartMeasurement+0x64>)
 8010df4:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8010df6:	4b09      	ldr	r3, [pc, #36]	@ (8010e1c <SGP_StartMeasurement+0x68>)
 8010df8:	2200      	movs	r2, #0
 8010dfa:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8010dfc:	4b08      	ldr	r3, [pc, #32]	@ (8010e20 <SGP_StartMeasurement+0x6c>)
 8010dfe:	2200      	movs	r2, #0
 8010e00:	701a      	strb	r2, [r3, #0]
}
 8010e02:	46c0      	nop			@ (mov r8, r8)
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	200012ac 	.word	0x200012ac
 8010e0c:	200000bc 	.word	0x200000bc
 8010e10:	200000d0 	.word	0x200000d0
 8010e14:	200000b4 	.word	0x200000b4
 8010e18:	200000c8 	.word	0x200000c8
 8010e1c:	20001200 	.word	0x20001200
 8010e20:	20001201 	.word	0x20001201

08010e24 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010e24:	b580      	push	{r7, lr}
 8010e26:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010e28:	4b04      	ldr	r3, [pc, #16]	@ (8010e3c <SGP_HeatedUp+0x18>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	0018      	movs	r0, r3
 8010e2e:	f002 ff79 	bl	8013d24 <TimestampIsReached>
 8010e32:	0003      	movs	r3, r0
}
 8010e34:	0018      	movs	r0, r3
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	46c0      	nop			@ (mov r8, r8)
 8010e3c:	200000c8 	.word	0x200000c8

08010e40 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010e40:	b580      	push	{r7, lr}
 8010e42:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010e44:	4b04      	ldr	r3, [pc, #16]	@ (8010e58 <SGP_MeasurementReady+0x18>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	0018      	movs	r0, r3
 8010e4a:	f002 ff6b 	bl	8013d24 <TimestampIsReached>
 8010e4e:	0003      	movs	r3, r0
}
 8010e50:	0018      	movs	r0, r3
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	46c0      	nop			@ (mov r8, r8)
 8010e58:	200000d0 	.word	0x200000d0

08010e5c <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8010e60:	4b04      	ldr	r3, [pc, #16]	@ (8010e74 <SGP_MeasurementDone+0x18>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	0018      	movs	r0, r3
 8010e66:	f002 ff5d 	bl	8013d24 <TimestampIsReached>
 8010e6a:	0003      	movs	r3, r0
}
 8010e6c:	0018      	movs	r0, r3
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	46c0      	nop			@ (mov r8, r8)
 8010e74:	200000cc 	.word	0x200000cc

08010e78 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010e7c:	4b04      	ldr	r3, [pc, #16]	@ (8010e90 <SGP_TurnHeaterOff+0x18>)
 8010e7e:	2202      	movs	r2, #2
 8010e80:	0019      	movs	r1, r3
 8010e82:	2059      	movs	r0, #89	@ 0x59
 8010e84:	f7ff ff2a 	bl	8010cdc <WriteRegister>
}
 8010e88:	46c0      	nop			@ (mov r8, r8)
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
 8010e8e:	46c0      	nop			@ (mov r8, r8)
 8010e90:	200000ac 	.word	0x200000ac

08010e94 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8010e94:	b590      	push	{r4, r7, lr}
 8010e96:	b087      	sub	sp, #28
 8010e98:	af02      	add	r7, sp, #8
 8010e9a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8010e9c:	f7ff ffc2 	bl	8010e24 <SGP_HeatedUp>
 8010ea0:	1e03      	subs	r3, r0, #0
 8010ea2:	d032      	beq.n	8010f0a <SGP_GetMeasurementValues+0x76>
 8010ea4:	4b80      	ldr	r3, [pc, #512]	@ (80110a8 <SGP_GetMeasurementValues+0x214>)
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	4053      	eors	r3, r2
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d02b      	beq.n	8010f0a <SGP_GetMeasurementValues+0x76>
 8010eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80110ac <SGP_GetMeasurementValues+0x218>)
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	4053      	eors	r3, r2
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d024      	beq.n	8010f0a <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8010ec0:	4b79      	ldr	r3, [pc, #484]	@ (80110a8 <SGP_GetMeasurementValues+0x214>)
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8010ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80110b0 <SGP_GetMeasurementValues+0x21c>)
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d00d      	beq.n	8010eea <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010ece:	4b79      	ldr	r3, [pc, #484]	@ (80110b4 <SGP_GetMeasurementValues+0x220>)
 8010ed0:	2208      	movs	r2, #8
 8010ed2:	0019      	movs	r1, r3
 8010ed4:	2059      	movs	r0, #89	@ 0x59
 8010ed6:	f7ff ff01 	bl	8010cdc <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010eda:	f003 fcf1 	bl	80148c0 <HAL_GetTick>
 8010ede:	0003      	movs	r3, r0
 8010ee0:	331e      	adds	r3, #30
 8010ee2:	001a      	movs	r2, r3
 8010ee4:	4b74      	ldr	r3, [pc, #464]	@ (80110b8 <SGP_GetMeasurementValues+0x224>)
 8010ee6:	601a      	str	r2, [r3, #0]
 8010ee8:	e00c      	b.n	8010f04 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010eea:	4b74      	ldr	r3, [pc, #464]	@ (80110bc <SGP_GetMeasurementValues+0x228>)
 8010eec:	2208      	movs	r2, #8
 8010eee:	0019      	movs	r1, r3
 8010ef0:	2059      	movs	r0, #89	@ 0x59
 8010ef2:	f7ff fef3 	bl	8010cdc <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010ef6:	f003 fce3 	bl	80148c0 <HAL_GetTick>
 8010efa:	0003      	movs	r3, r0
 8010efc:	331e      	adds	r3, #30
 8010efe:	001a      	movs	r2, r3
 8010f00:	4b6d      	ldr	r3, [pc, #436]	@ (80110b8 <SGP_GetMeasurementValues+0x224>)
 8010f02:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8010f04:	4b69      	ldr	r3, [pc, #420]	@ (80110ac <SGP_GetMeasurementValues+0x218>)
 8010f06:	2201      	movs	r2, #1
 8010f08:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8010f0a:	4b67      	ldr	r3, [pc, #412]	@ (80110a8 <SGP_GetMeasurementValues+0x214>)
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d100      	bne.n	8010f14 <SGP_GetMeasurementValues+0x80>
 8010f12:	e0ac      	b.n	801106e <SGP_GetMeasurementValues+0x1da>
 8010f14:	f7ff ff94 	bl	8010e40 <SGP_MeasurementReady>
 8010f18:	1e03      	subs	r3, r0, #0
 8010f1a:	d100      	bne.n	8010f1e <SGP_GetMeasurementValues+0x8a>
 8010f1c:	e0a7      	b.n	801106e <SGP_GetMeasurementValues+0x1da>
 8010f1e:	4b68      	ldr	r3, [pc, #416]	@ (80110c0 <SGP_GetMeasurementValues+0x22c>)
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	2201      	movs	r2, #1
 8010f24:	4053      	eors	r3, r2
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d100      	bne.n	8010f2e <SGP_GetMeasurementValues+0x9a>
 8010f2c:	e09f      	b.n	801106e <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 8010f2e:	4b64      	ldr	r3, [pc, #400]	@ (80110c0 <SGP_GetMeasurementValues+0x22c>)
 8010f30:	2201      	movs	r2, #1
 8010f32:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8010f34:	4b63      	ldr	r3, [pc, #396]	@ (80110c4 <SGP_GetMeasurementValues+0x230>)
 8010f36:	2203      	movs	r2, #3
 8010f38:	0019      	movs	r1, r3
 8010f3a:	2059      	movs	r0, #89	@ 0x59
 8010f3c:	f7ff feb0 	bl	8010ca0 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8010f40:	4b60      	ldr	r3, [pc, #384]	@ (80110c4 <SGP_GetMeasurementValues+0x230>)
 8010f42:	2203      	movs	r2, #3
 8010f44:	2103      	movs	r1, #3
 8010f46:	0018      	movs	r0, r3
 8010f48:	f000 f91a 	bl	8011180 <CheckCRC>
 8010f4c:	0003      	movs	r3, r0
 8010f4e:	001a      	movs	r2, r3
 8010f50:	2301      	movs	r3, #1
 8010f52:	4053      	eors	r3, r2
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d02a      	beq.n	8010fb0 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 8010f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80110c8 <SGP_GetMeasurementValues+0x234>)
 8010f5c:	4b5b      	ldr	r3, [pc, #364]	@ (80110cc <SGP_GetMeasurementValues+0x238>)
 8010f5e:	0019      	movs	r1, r3
 8010f60:	2001      	movs	r0, #1
 8010f62:	f002 ff35 	bl	8013dd0 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8010f66:	4a5a      	ldr	r2, [pc, #360]	@ (80110d0 <SGP_GetMeasurementValues+0x23c>)
 8010f68:	4b5a      	ldr	r3, [pc, #360]	@ (80110d4 <SGP_GetMeasurementValues+0x240>)
 8010f6a:	0019      	movs	r1, r3
 8010f6c:	2002      	movs	r0, #2
 8010f6e:	f002 ff2f 	bl	8013dd0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010f72:	230f      	movs	r3, #15
 8010f74:	18fb      	adds	r3, r7, r3
 8010f76:	2200      	movs	r2, #0
 8010f78:	701a      	strb	r2, [r3, #0]
 8010f7a:	e012      	b.n	8010fa2 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8010f7c:	240f      	movs	r4, #15
 8010f7e:	193b      	adds	r3, r7, r4
 8010f80:	7818      	ldrb	r0, [r3, #0]
 8010f82:	193b      	adds	r3, r7, r4
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	4a4f      	ldr	r2, [pc, #316]	@ (80110c4 <SGP_GetMeasurementValues+0x230>)
 8010f88:	5cd3      	ldrb	r3, [r2, r3]
 8010f8a:	4a53      	ldr	r2, [pc, #332]	@ (80110d8 <SGP_GetMeasurementValues+0x244>)
 8010f8c:	4953      	ldr	r1, [pc, #332]	@ (80110dc <SGP_GetMeasurementValues+0x248>)
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	0003      	movs	r3, r0
 8010f92:	2003      	movs	r0, #3
 8010f94:	f002 ff1c 	bl	8013dd0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010f98:	193b      	adds	r3, r7, r4
 8010f9a:	781a      	ldrb	r2, [r3, #0]
 8010f9c:	193b      	adds	r3, r7, r4
 8010f9e:	3201      	adds	r2, #1
 8010fa0:	701a      	strb	r2, [r3, #0]
 8010fa2:	230f      	movs	r3, #15
 8010fa4:	18fb      	adds	r3, r7, r3
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	2b02      	cmp	r3, #2
 8010faa:	d9e7      	bls.n	8010f7c <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 8010fac:	2300      	movs	r3, #0
 8010fae:	e076      	b.n	801109e <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 8010fb0:	f003 fc86 	bl	80148c0 <HAL_GetTick>
 8010fb4:	0003      	movs	r3, r0
 8010fb6:	22fa      	movs	r2, #250	@ 0xfa
 8010fb8:	0092      	lsls	r2, r2, #2
 8010fba:	189a      	adds	r2, r3, r2
 8010fbc:	4b48      	ldr	r3, [pc, #288]	@ (80110e0 <SGP_GetMeasurementValues+0x24c>)
 8010fbe:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8010fc0:	f7ff ff5a 	bl	8010e78 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 8010fc4:	4b47      	ldr	r3, [pc, #284]	@ (80110e4 <SGP_GetMeasurementValues+0x250>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	b2da      	uxtb	r2, r3
 8010fcc:	4b45      	ldr	r3, [pc, #276]	@ (80110e4 <SGP_GetMeasurementValues+0x250>)
 8010fce:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8010fd0:	4b44      	ldr	r3, [pc, #272]	@ (80110e4 <SGP_GetMeasurementValues+0x250>)
 8010fd2:	781a      	ldrb	r2, [r3, #0]
 8010fd4:	4b44      	ldr	r3, [pc, #272]	@ (80110e8 <SGP_GetMeasurementValues+0x254>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d348      	bcc.n	801106e <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8010fdc:	4b39      	ldr	r3, [pc, #228]	@ (80110c4 <SGP_GetMeasurementValues+0x230>)
 8010fde:	785b      	ldrb	r3, [r3, #1]
 8010fe0:	b21b      	sxth	r3, r3
 8010fe2:	021b      	lsls	r3, r3, #8
 8010fe4:	b21a      	sxth	r2, r3
 8010fe6:	4b37      	ldr	r3, [pc, #220]	@ (80110c4 <SGP_GetMeasurementValues+0x230>)
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	b21b      	sxth	r3, r3
 8010fec:	4313      	orrs	r3, r2
 8010fee:	b21a      	sxth	r2, r3
 8010ff0:	240c      	movs	r4, #12
 8010ff2:	193b      	adds	r3, r7, r4
 8010ff4:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8010ffa:	193b      	adds	r3, r7, r4
 8010ffc:	8819      	ldrh	r1, [r3, #0]
 8010ffe:	2308      	movs	r3, #8
 8011000:	18fa      	adds	r2, r7, r3
 8011002:	4b3a      	ldr	r3, [pc, #232]	@ (80110ec <SGP_GetMeasurementValues+0x258>)
 8011004:	0018      	movs	r0, r3
 8011006:	f7fe fe87 	bl	800fd18 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 801100a:	68ba      	ldr	r2, [r7, #8]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 8011010:	4b37      	ldr	r3, [pc, #220]	@ (80110f0 <SGP_GetMeasurementValues+0x25c>)
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	3301      	adds	r3, #1
 8011016:	b2da      	uxtb	r2, r3
 8011018:	4b35      	ldr	r3, [pc, #212]	@ (80110f0 <SGP_GetMeasurementValues+0x25c>)
 801101a:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 801101c:	4b34      	ldr	r3, [pc, #208]	@ (80110f0 <SGP_GetMeasurementValues+0x25c>)
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	2b01      	cmp	r3, #1
 8011022:	d10d      	bne.n	8011040 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 8011024:	193b      	adds	r3, r7, r4
 8011026:	881b      	ldrh	r3, [r3, #0]
 8011028:	4a32      	ldr	r2, [pc, #200]	@ (80110f4 <SGP_GetMeasurementValues+0x260>)
 801102a:	492c      	ldr	r1, [pc, #176]	@ (80110dc <SGP_GetMeasurementValues+0x248>)
 801102c:	2003      	movs	r0, #3
 801102e:	f002 fecf 	bl	8013dd0 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	4a30      	ldr	r2, [pc, #192]	@ (80110f8 <SGP_GetMeasurementValues+0x264>)
 8011036:	4929      	ldr	r1, [pc, #164]	@ (80110dc <SGP_GetMeasurementValues+0x248>)
 8011038:	2003      	movs	r0, #3
 801103a:	f002 fec9 	bl	8013dd0 <CreateLine>
 801103e:	e006      	b.n	801104e <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8011040:	4b2b      	ldr	r3, [pc, #172]	@ (80110f0 <SGP_GetMeasurementValues+0x25c>)
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	2b0b      	cmp	r3, #11
 8011046:	d102      	bne.n	801104e <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 8011048:	4b29      	ldr	r3, [pc, #164]	@ (80110f0 <SGP_GetMeasurementValues+0x25c>)
 801104a:	2200      	movs	r2, #0
 801104c:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	b29b      	uxth	r3, r3
 8011052:	0018      	movs	r0, r3
 8011054:	f001 fe2e 	bl	8012cb4 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 8011058:	4b22      	ldr	r3, [pc, #136]	@ (80110e4 <SGP_GetMeasurementValues+0x250>)
 801105a:	2200      	movs	r2, #0
 801105c:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 801105e:	4b14      	ldr	r3, [pc, #80]	@ (80110b0 <SGP_GetMeasurementValues+0x21c>)
 8011060:	2200      	movs	r2, #0
 8011062:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8011064:	4b11      	ldr	r3, [pc, #68]	@ (80110ac <SGP_GetMeasurementValues+0x218>)
 8011066:	2200      	movs	r2, #0
 8011068:	701a      	strb	r2, [r3, #0]
      return true;
 801106a:	2301      	movs	r3, #1
 801106c:	e017      	b.n	801109e <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 801106e:	f7ff fef5 	bl	8010e5c <SGP_MeasurementDone>
 8011072:	1e03      	subs	r3, r0, #0
 8011074:	d012      	beq.n	801109c <SGP_GetMeasurementValues+0x208>
 8011076:	4b0c      	ldr	r3, [pc, #48]	@ (80110a8 <SGP_GetMeasurementValues+0x214>)
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00e      	beq.n	801109c <SGP_GetMeasurementValues+0x208>
 801107e:	4b10      	ldr	r3, [pc, #64]	@ (80110c0 <SGP_GetMeasurementValues+0x22c>)
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d00a      	beq.n	801109c <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8011086:	4a1d      	ldr	r2, [pc, #116]	@ (80110fc <SGP_GetMeasurementValues+0x268>)
 8011088:	4b14      	ldr	r3, [pc, #80]	@ (80110dc <SGP_GetMeasurementValues+0x248>)
 801108a:	0019      	movs	r1, r3
 801108c:	2003      	movs	r0, #3
 801108e:	f002 fe9f 	bl	8013dd0 <CreateLine>
    SGP_StartMeasurement();
 8011092:	f7ff fe8f 	bl	8010db4 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8011096:	4b05      	ldr	r3, [pc, #20]	@ (80110ac <SGP_GetMeasurementValues+0x218>)
 8011098:	2200      	movs	r2, #0
 801109a:	701a      	strb	r2, [r3, #0]
  }
  return false;
 801109c:	2300      	movs	r3, #0
}
 801109e:	0018      	movs	r0, r3
 80110a0:	46bd      	mov	sp, r7
 80110a2:	b005      	add	sp, #20
 80110a4:	bd90      	pop	{r4, r7, pc}
 80110a6:	46c0      	nop			@ (mov r8, r8)
 80110a8:	20001200 	.word	0x20001200
 80110ac:	200012ad 	.word	0x200012ad
 80110b0:	200012ac 	.word	0x200012ac
 80110b4:	200000bc 	.word	0x200000bc
 80110b8:	200000d0 	.word	0x200000d0
 80110bc:	200000b4 	.word	0x200000b4
 80110c0:	20001201 	.word	0x20001201
 80110c4:	200011f0 	.word	0x200011f0
 80110c8:	0802d5e4 	.word	0x0802d5e4
 80110cc:	0802d60c 	.word	0x0802d60c
 80110d0:	0802d610 	.word	0x0802d610
 80110d4:	0802d630 	.word	0x0802d630
 80110d8:	0802d634 	.word	0x0802d634
 80110dc:	0802d654 	.word	0x0802d654
 80110e0:	200000cc 	.word	0x200000cc
 80110e4:	200011f9 	.word	0x200011f9
 80110e8:	200000c6 	.word	0x200000c6
 80110ec:	20001204 	.word	0x20001204
 80110f0:	200011fa 	.word	0x200011fa
 80110f4:	0802d658 	.word	0x0802d658
 80110f8:	0802d674 	.word	0x0802d674
 80110fc:	0802d690 	.word	0x0802d690

08011100 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8011106:	4b1a      	ldr	r3, [pc, #104]	@ (8011170 <SGP_DeviceConnected+0x70>)
 8011108:	2202      	movs	r2, #2
 801110a:	0019      	movs	r1, r3
 801110c:	2059      	movs	r0, #89	@ 0x59
 801110e:	f7ff fde5 	bl	8010cdc <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8011112:	2001      	movs	r0, #1
 8011114:	f003 fbde 	bl	80148d4 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8011118:	4b16      	ldr	r3, [pc, #88]	@ (8011174 <SGP_DeviceConnected+0x74>)
 801111a:	2209      	movs	r2, #9
 801111c:	0019      	movs	r1, r3
 801111e:	2059      	movs	r0, #89	@ 0x59
 8011120:	f7ff fdbe 	bl	8010ca0 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8011124:	1dfb      	adds	r3, r7, #7
 8011126:	2200      	movs	r2, #0
 8011128:	701a      	strb	r2, [r3, #0]
 801112a:	e011      	b.n	8011150 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 801112c:	1dfb      	adds	r3, r7, #7
 801112e:	7818      	ldrb	r0, [r3, #0]
 8011130:	1dfb      	adds	r3, r7, #7
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	4a0f      	ldr	r2, [pc, #60]	@ (8011174 <SGP_DeviceConnected+0x74>)
 8011136:	5cd3      	ldrb	r3, [r2, r3]
 8011138:	4a0f      	ldr	r2, [pc, #60]	@ (8011178 <SGP_DeviceConnected+0x78>)
 801113a:	4910      	ldr	r1, [pc, #64]	@ (801117c <SGP_DeviceConnected+0x7c>)
 801113c:	9300      	str	r3, [sp, #0]
 801113e:	0003      	movs	r3, r0
 8011140:	2002      	movs	r0, #2
 8011142:	f002 fe45 	bl	8013dd0 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8011146:	1dfb      	adds	r3, r7, #7
 8011148:	781a      	ldrb	r2, [r3, #0]
 801114a:	1dfb      	adds	r3, r7, #7
 801114c:	3201      	adds	r2, #1
 801114e:	701a      	strb	r2, [r3, #0]
 8011150:	1dfb      	adds	r3, r7, #7
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	2b08      	cmp	r3, #8
 8011156:	d9e9      	bls.n	801112c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8011158:	4b06      	ldr	r3, [pc, #24]	@ (8011174 <SGP_DeviceConnected+0x74>)
 801115a:	2203      	movs	r2, #3
 801115c:	2109      	movs	r1, #9
 801115e:	0018      	movs	r0, r3
 8011160:	f000 f80e 	bl	8011180 <CheckCRC>
 8011164:	0003      	movs	r3, r0
}
 8011166:	0018      	movs	r0, r3
 8011168:	46bd      	mov	sp, r7
 801116a:	b002      	add	sp, #8
 801116c:	bd80      	pop	{r7, pc}
 801116e:	46c0      	nop			@ (mov r8, r8)
 8011170:	200000b0 	.word	0x200000b0
 8011174:	200011f0 	.word	0x200011f0
 8011178:	0802d6b0 	.word	0x0802d6b0
 801117c:	0802d630 	.word	0x0802d630

08011180 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8011180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011182:	b08f      	sub	sp, #60	@ 0x3c
 8011184:	af00      	add	r7, sp, #0
 8011186:	6278      	str	r0, [r7, #36]	@ 0x24
 8011188:	0008      	movs	r0, r1
 801118a:	0011      	movs	r1, r2
 801118c:	2323      	movs	r3, #35	@ 0x23
 801118e:	18fb      	adds	r3, r7, r3
 8011190:	1c02      	adds	r2, r0, #0
 8011192:	701a      	strb	r2, [r3, #0]
 8011194:	2322      	movs	r3, #34	@ 0x22
 8011196:	18fb      	adds	r3, r7, r3
 8011198:	1c0a      	adds	r2, r1, #0
 801119a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 801119c:	2317      	movs	r3, #23
 801119e:	2220      	movs	r2, #32
 80111a0:	189b      	adds	r3, r3, r2
 80111a2:	19db      	adds	r3, r3, r7
 80111a4:	2200      	movs	r2, #0
 80111a6:	701a      	strb	r2, [r3, #0]
 80111a8:	e09f      	b.n	80112ea <CheckCRC+0x16a>
 80111aa:	466b      	mov	r3, sp
 80111ac:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80111ae:	2322      	movs	r3, #34	@ 0x22
 80111b0:	18fb      	adds	r3, r7, r3
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	001a      	movs	r2, r3
 80111b6:	3a01      	subs	r2, #1
 80111b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80111ba:	60bb      	str	r3, [r7, #8]
 80111bc:	2200      	movs	r2, #0
 80111be:	60fa      	str	r2, [r7, #12]
 80111c0:	68b8      	ldr	r0, [r7, #8]
 80111c2:	68f9      	ldr	r1, [r7, #12]
 80111c4:	0002      	movs	r2, r0
 80111c6:	0f52      	lsrs	r2, r2, #29
 80111c8:	000c      	movs	r4, r1
 80111ca:	00e4      	lsls	r4, r4, #3
 80111cc:	61fc      	str	r4, [r7, #28]
 80111ce:	69fc      	ldr	r4, [r7, #28]
 80111d0:	4314      	orrs	r4, r2
 80111d2:	61fc      	str	r4, [r7, #28]
 80111d4:	0002      	movs	r2, r0
 80111d6:	00d2      	lsls	r2, r2, #3
 80111d8:	61ba      	str	r2, [r7, #24]
 80111da:	603b      	str	r3, [r7, #0]
 80111dc:	2200      	movs	r2, #0
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	6838      	ldr	r0, [r7, #0]
 80111e2:	6879      	ldr	r1, [r7, #4]
 80111e4:	0002      	movs	r2, r0
 80111e6:	0f52      	lsrs	r2, r2, #29
 80111e8:	000c      	movs	r4, r1
 80111ea:	00e4      	lsls	r4, r4, #3
 80111ec:	617c      	str	r4, [r7, #20]
 80111ee:	697c      	ldr	r4, [r7, #20]
 80111f0:	4314      	orrs	r4, r2
 80111f2:	617c      	str	r4, [r7, #20]
 80111f4:	0002      	movs	r2, r0
 80111f6:	00d2      	lsls	r2, r2, #3
 80111f8:	613a      	str	r2, [r7, #16]
 80111fa:	3307      	adds	r3, #7
 80111fc:	08db      	lsrs	r3, r3, #3
 80111fe:	00db      	lsls	r3, r3, #3
 8011200:	466a      	mov	r2, sp
 8011202:	1ad3      	subs	r3, r2, r3
 8011204:	469d      	mov	sp, r3
 8011206:	466b      	mov	r3, sp
 8011208:	3300      	adds	r3, #0
 801120a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 801120c:	2316      	movs	r3, #22
 801120e:	2220      	movs	r2, #32
 8011210:	189b      	adds	r3, r3, r2
 8011212:	19db      	adds	r3, r3, r7
 8011214:	2200      	movs	r2, #0
 8011216:	701a      	strb	r2, [r3, #0]
 8011218:	e01e      	b.n	8011258 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 801121a:	2317      	movs	r3, #23
 801121c:	2220      	movs	r2, #32
 801121e:	189b      	adds	r3, r3, r2
 8011220:	19db      	adds	r3, r3, r7
 8011222:	781a      	ldrb	r2, [r3, #0]
 8011224:	2116      	movs	r1, #22
 8011226:	2320      	movs	r3, #32
 8011228:	18cb      	adds	r3, r1, r3
 801122a:	19db      	adds	r3, r3, r7
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	18d3      	adds	r3, r2, r3
 8011230:	001a      	movs	r2, r3
 8011232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011234:	189a      	adds	r2, r3, r2
 8011236:	0008      	movs	r0, r1
 8011238:	2320      	movs	r3, #32
 801123a:	18cb      	adds	r3, r1, r3
 801123c:	19db      	adds	r3, r3, r7
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	7811      	ldrb	r1, [r2, #0]
 8011242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011244:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8011246:	2320      	movs	r3, #32
 8011248:	18c3      	adds	r3, r0, r3
 801124a:	19db      	adds	r3, r3, r7
 801124c:	781a      	ldrb	r2, [r3, #0]
 801124e:	2320      	movs	r3, #32
 8011250:	18c3      	adds	r3, r0, r3
 8011252:	19db      	adds	r3, r3, r7
 8011254:	3201      	adds	r2, #1
 8011256:	701a      	strb	r2, [r3, #0]
 8011258:	2316      	movs	r3, #22
 801125a:	2220      	movs	r2, #32
 801125c:	189b      	adds	r3, r3, r2
 801125e:	19da      	adds	r2, r3, r7
 8011260:	2322      	movs	r3, #34	@ 0x22
 8011262:	18fb      	adds	r3, r7, r3
 8011264:	7812      	ldrb	r2, [r2, #0]
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	429a      	cmp	r2, r3
 801126a:	d3d6      	bcc.n	801121a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 801126c:	2417      	movs	r4, #23
 801126e:	2320      	movs	r3, #32
 8011270:	18e3      	adds	r3, r4, r3
 8011272:	19db      	adds	r3, r3, r7
 8011274:	781a      	ldrb	r2, [r3, #0]
 8011276:	2322      	movs	r3, #34	@ 0x22
 8011278:	18fb      	adds	r3, r7, r3
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	18d3      	adds	r3, r2, r3
 801127e:	3b01      	subs	r3, #1
 8011280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011282:	18d2      	adds	r2, r2, r3
 8011284:	250b      	movs	r5, #11
 8011286:	2320      	movs	r3, #32
 8011288:	18eb      	adds	r3, r5, r3
 801128a:	19db      	adds	r3, r3, r7
 801128c:	7812      	ldrb	r2, [r2, #0]
 801128e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8011290:	2322      	movs	r3, #34	@ 0x22
 8011292:	18fb      	adds	r3, r7, r3
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	3b01      	subs	r3, #1
 8011298:	b2da      	uxtb	r2, r3
 801129a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801129c:	0011      	movs	r1, r2
 801129e:	0018      	movs	r0, r3
 80112a0:	f000 f838 	bl	8011314 <CalculateCRC>
 80112a4:	0003      	movs	r3, r0
 80112a6:	001a      	movs	r2, r3
 80112a8:	2320      	movs	r3, #32
 80112aa:	18eb      	adds	r3, r5, r3
 80112ac:	19db      	adds	r3, r3, r7
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d00c      	beq.n	80112ce <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80112b4:	2320      	movs	r3, #32
 80112b6:	18e3      	adds	r3, r4, r3
 80112b8:	19db      	adds	r3, r3, r7
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	3301      	adds	r3, #1
 80112be:	4a13      	ldr	r2, [pc, #76]	@ (801130c <CheckCRC+0x18c>)
 80112c0:	4913      	ldr	r1, [pc, #76]	@ (8011310 <CheckCRC+0x190>)
 80112c2:	2001      	movs	r0, #1
 80112c4:	f002 fd84 	bl	8013dd0 <CreateLine>
      return false;
 80112c8:	2300      	movs	r3, #0
 80112ca:	46b5      	mov	sp, r6
 80112cc:	e019      	b.n	8011302 <CheckCRC+0x182>
 80112ce:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80112d0:	2217      	movs	r2, #23
 80112d2:	2320      	movs	r3, #32
 80112d4:	18d3      	adds	r3, r2, r3
 80112d6:	19db      	adds	r3, r3, r7
 80112d8:	2120      	movs	r1, #32
 80112da:	1852      	adds	r2, r2, r1
 80112dc:	19d1      	adds	r1, r2, r7
 80112de:	2222      	movs	r2, #34	@ 0x22
 80112e0:	18ba      	adds	r2, r7, r2
 80112e2:	7809      	ldrb	r1, [r1, #0]
 80112e4:	7812      	ldrb	r2, [r2, #0]
 80112e6:	188a      	adds	r2, r1, r2
 80112e8:	701a      	strb	r2, [r3, #0]
 80112ea:	2317      	movs	r3, #23
 80112ec:	2220      	movs	r2, #32
 80112ee:	189b      	adds	r3, r3, r2
 80112f0:	19da      	adds	r2, r3, r7
 80112f2:	2323      	movs	r3, #35	@ 0x23
 80112f4:	18fb      	adds	r3, r7, r3
 80112f6:	7812      	ldrb	r2, [r2, #0]
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d200      	bcs.n	8011300 <CheckCRC+0x180>
 80112fe:	e754      	b.n	80111aa <CheckCRC+0x2a>
    }
  }
  return true;
 8011300:	2301      	movs	r3, #1
}
 8011302:	0018      	movs	r0, r3
 8011304:	46bd      	mov	sp, r7
 8011306:	b00f      	add	sp, #60	@ 0x3c
 8011308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801130a:	46c0      	nop			@ (mov r8, r8)
 801130c:	0802d6d0 	.word	0x0802d6d0
 8011310:	0802d60c 	.word	0x0802d60c

08011314 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	000a      	movs	r2, r1
 801131e:	1cfb      	adds	r3, r7, #3
 8011320:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8011322:	230f      	movs	r3, #15
 8011324:	18fb      	adds	r3, r7, r3
 8011326:	22ff      	movs	r2, #255	@ 0xff
 8011328:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801132a:	230e      	movs	r3, #14
 801132c:	18fb      	adds	r3, r7, r3
 801132e:	2200      	movs	r2, #0
 8011330:	701a      	strb	r2, [r3, #0]
 8011332:	e038      	b.n	80113a6 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8011334:	230e      	movs	r3, #14
 8011336:	18fb      	adds	r3, r7, r3
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	687a      	ldr	r2, [r7, #4]
 801133c:	18d3      	adds	r3, r2, r3
 801133e:	7819      	ldrb	r1, [r3, #0]
 8011340:	220f      	movs	r2, #15
 8011342:	18bb      	adds	r3, r7, r2
 8011344:	18ba      	adds	r2, r7, r2
 8011346:	7812      	ldrb	r2, [r2, #0]
 8011348:	404a      	eors	r2, r1
 801134a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 801134c:	230d      	movs	r3, #13
 801134e:	18fb      	adds	r3, r7, r3
 8011350:	2200      	movs	r2, #0
 8011352:	701a      	strb	r2, [r3, #0]
 8011354:	e01c      	b.n	8011390 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8011356:	210f      	movs	r1, #15
 8011358:	187b      	adds	r3, r7, r1
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	b25b      	sxtb	r3, r3
 801135e:	2b00      	cmp	r3, #0
 8011360:	da0a      	bge.n	8011378 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8011362:	187b      	adds	r3, r7, r1
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	b25b      	sxtb	r3, r3
 8011368:	18db      	adds	r3, r3, r3
 801136a:	b25b      	sxtb	r3, r3
 801136c:	2231      	movs	r2, #49	@ 0x31
 801136e:	4053      	eors	r3, r2
 8011370:	b25a      	sxtb	r2, r3
 8011372:	187b      	adds	r3, r7, r1
 8011374:	701a      	strb	r2, [r3, #0]
 8011376:	e005      	b.n	8011384 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 8011378:	230f      	movs	r3, #15
 801137a:	18fa      	adds	r2, r7, r3
 801137c:	18fb      	adds	r3, r7, r3
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	18db      	adds	r3, r3, r3
 8011382:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8011384:	210d      	movs	r1, #13
 8011386:	187b      	adds	r3, r7, r1
 8011388:	781a      	ldrb	r2, [r3, #0]
 801138a:	187b      	adds	r3, r7, r1
 801138c:	3201      	adds	r2, #1
 801138e:	701a      	strb	r2, [r3, #0]
 8011390:	230d      	movs	r3, #13
 8011392:	18fb      	adds	r3, r7, r3
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	2b07      	cmp	r3, #7
 8011398:	d9dd      	bls.n	8011356 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 801139a:	210e      	movs	r1, #14
 801139c:	187b      	adds	r3, r7, r1
 801139e:	781a      	ldrb	r2, [r3, #0]
 80113a0:	187b      	adds	r3, r7, r1
 80113a2:	3201      	adds	r2, #1
 80113a4:	701a      	strb	r2, [r3, #0]
 80113a6:	230e      	movs	r3, #14
 80113a8:	18fa      	adds	r2, r7, r3
 80113aa:	1cfb      	adds	r3, r7, #3
 80113ac:	7812      	ldrb	r2, [r2, #0]
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d3bf      	bcc.n	8011334 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80113b4:	230f      	movs	r3, #15
 80113b6:	18fb      	adds	r3, r7, r3
 80113b8:	781b      	ldrb	r3, [r3, #0]
}
 80113ba:	0018      	movs	r0, r3
 80113bc:	46bd      	mov	sp, r7
 80113be:	b004      	add	sp, #16
 80113c0:	bd80      	pop	{r7, pc}
	...

080113c4 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b084      	sub	sp, #16
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	4936      	ldr	r1, [pc, #216]	@ (80114ac <SGP_SetHT+0xe8>)
 80113d4:	1c18      	adds	r0, r3, #0
 80113d6:	f7ef fa73 	bl	80008c0 <__aeabi_fadd>
 80113da:	1c03      	adds	r3, r0, #0
 80113dc:	4934      	ldr	r1, [pc, #208]	@ (80114b0 <SGP_SetHT+0xec>)
 80113de:	1c18      	adds	r0, r3, #0
 80113e0:	f7ef fc60 	bl	8000ca4 <__aeabi_fdiv>
 80113e4:	1c03      	adds	r3, r0, #0
 80113e6:	4933      	ldr	r1, [pc, #204]	@ (80114b4 <SGP_SetHT+0xf0>)
 80113e8:	1c18      	adds	r0, r3, #0
 80113ea:	f7ef fe29 	bl	8001040 <__aeabi_fmul>
 80113ee:	1c03      	adds	r3, r0, #0
 80113f0:	1c18      	adds	r0, r3, #0
 80113f2:	f7ef f913 	bl	800061c <__aeabi_f2uiz>
 80113f6:	0003      	movs	r3, r0
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	4b2f      	ldr	r3, [pc, #188]	@ (80114b8 <SGP_SetHT+0xf4>)
 80113fc:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	492e      	ldr	r1, [pc, #184]	@ (80114bc <SGP_SetHT+0xf8>)
 8011404:	1c18      	adds	r0, r3, #0
 8011406:	f7ef fc4d 	bl	8000ca4 <__aeabi_fdiv>
 801140a:	1c03      	adds	r3, r0, #0
 801140c:	4929      	ldr	r1, [pc, #164]	@ (80114b4 <SGP_SetHT+0xf0>)
 801140e:	1c18      	adds	r0, r3, #0
 8011410:	f7ef fe16 	bl	8001040 <__aeabi_fmul>
 8011414:	1c03      	adds	r3, r0, #0
 8011416:	1c18      	adds	r0, r3, #0
 8011418:	f7ef f900 	bl	800061c <__aeabi_f2uiz>
 801141c:	0003      	movs	r3, r0
 801141e:	b29a      	uxth	r2, r3
 8011420:	4b27      	ldr	r3, [pc, #156]	@ (80114c0 <SGP_SetHT+0xfc>)
 8011422:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8011424:	4b26      	ldr	r3, [pc, #152]	@ (80114c0 <SGP_SetHT+0xfc>)
 8011426:	881b      	ldrh	r3, [r3, #0]
 8011428:	0a1b      	lsrs	r3, r3, #8
 801142a:	b29b      	uxth	r3, r3
 801142c:	b2da      	uxtb	r2, r3
 801142e:	4b25      	ldr	r3, [pc, #148]	@ (80114c4 <SGP_SetHT+0x100>)
 8011430:	709a      	strb	r2, [r3, #2]
 8011432:	4b24      	ldr	r3, [pc, #144]	@ (80114c4 <SGP_SetHT+0x100>)
 8011434:	789a      	ldrb	r2, [r3, #2]
 8011436:	210c      	movs	r1, #12
 8011438:	187b      	adds	r3, r7, r1
 801143a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 801143c:	4b20      	ldr	r3, [pc, #128]	@ (80114c0 <SGP_SetHT+0xfc>)
 801143e:	881b      	ldrh	r3, [r3, #0]
 8011440:	b2da      	uxtb	r2, r3
 8011442:	4b20      	ldr	r3, [pc, #128]	@ (80114c4 <SGP_SetHT+0x100>)
 8011444:	70da      	strb	r2, [r3, #3]
 8011446:	4b1f      	ldr	r3, [pc, #124]	@ (80114c4 <SGP_SetHT+0x100>)
 8011448:	78da      	ldrb	r2, [r3, #3]
 801144a:	187b      	adds	r3, r7, r1
 801144c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 801144e:	187b      	adds	r3, r7, r1
 8011450:	2102      	movs	r1, #2
 8011452:	0018      	movs	r0, r3
 8011454:	f7ff ff5e 	bl	8011314 <CalculateCRC>
 8011458:	0003      	movs	r3, r0
 801145a:	001a      	movs	r2, r3
 801145c:	4b19      	ldr	r3, [pc, #100]	@ (80114c4 <SGP_SetHT+0x100>)
 801145e:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8011460:	4b15      	ldr	r3, [pc, #84]	@ (80114b8 <SGP_SetHT+0xf4>)
 8011462:	881b      	ldrh	r3, [r3, #0]
 8011464:	0a1b      	lsrs	r3, r3, #8
 8011466:	b29b      	uxth	r3, r3
 8011468:	b2da      	uxtb	r2, r3
 801146a:	4b16      	ldr	r3, [pc, #88]	@ (80114c4 <SGP_SetHT+0x100>)
 801146c:	715a      	strb	r2, [r3, #5]
 801146e:	4b15      	ldr	r3, [pc, #84]	@ (80114c4 <SGP_SetHT+0x100>)
 8011470:	795a      	ldrb	r2, [r3, #5]
 8011472:	2108      	movs	r1, #8
 8011474:	187b      	adds	r3, r7, r1
 8011476:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8011478:	4b0f      	ldr	r3, [pc, #60]	@ (80114b8 <SGP_SetHT+0xf4>)
 801147a:	881b      	ldrh	r3, [r3, #0]
 801147c:	b2da      	uxtb	r2, r3
 801147e:	4b11      	ldr	r3, [pc, #68]	@ (80114c4 <SGP_SetHT+0x100>)
 8011480:	719a      	strb	r2, [r3, #6]
 8011482:	4b10      	ldr	r3, [pc, #64]	@ (80114c4 <SGP_SetHT+0x100>)
 8011484:	799a      	ldrb	r2, [r3, #6]
 8011486:	187b      	adds	r3, r7, r1
 8011488:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 801148a:	187b      	adds	r3, r7, r1
 801148c:	2102      	movs	r1, #2
 801148e:	0018      	movs	r0, r3
 8011490:	f7ff ff40 	bl	8011314 <CalculateCRC>
 8011494:	0003      	movs	r3, r0
 8011496:	001a      	movs	r2, r3
 8011498:	4b0a      	ldr	r3, [pc, #40]	@ (80114c4 <SGP_SetHT+0x100>)
 801149a:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 801149c:	4b0a      	ldr	r3, [pc, #40]	@ (80114c8 <SGP_SetHT+0x104>)
 801149e:	2201      	movs	r2, #1
 80114a0:	701a      	strb	r2, [r3, #0]
}
 80114a2:	46c0      	nop			@ (mov r8, r8)
 80114a4:	46bd      	mov	sp, r7
 80114a6:	b004      	add	sp, #16
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	46c0      	nop			@ (mov r8, r8)
 80114ac:	42340000 	.word	0x42340000
 80114b0:	432f0000 	.word	0x432f0000
 80114b4:	477fff00 	.word	0x477fff00
 80114b8:	200012aa 	.word	0x200012aa
 80114bc:	42c80000 	.word	0x42c80000
 80114c0:	200012a8 	.word	0x200012a8
 80114c4:	200000bc 	.word	0x200000bc
 80114c8:	200012ac 	.word	0x200012ac

080114cc <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 80114cc:	b580      	push	{r7, lr}
 80114ce:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 80114d0:	4a09      	ldr	r2, [pc, #36]	@ (80114f8 <SGP_SoftReset+0x2c>)
 80114d2:	4b0a      	ldr	r3, [pc, #40]	@ (80114fc <SGP_SoftReset+0x30>)
 80114d4:	0019      	movs	r1, r3
 80114d6:	2003      	movs	r0, #3
 80114d8:	f002 fc7a 	bl	8013dd0 <CreateLine>
  SGP_TurnHeaterOff();
 80114dc:	f7ff fccc 	bl	8010e78 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 80114e0:	200a      	movs	r0, #10
 80114e2:	f003 f9f7 	bl	80148d4 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80114e6:	4b06      	ldr	r3, [pc, #24]	@ (8011500 <SGP_SoftReset+0x34>)
 80114e8:	2202      	movs	r2, #2
 80114ea:	0019      	movs	r1, r3
 80114ec:	2059      	movs	r0, #89	@ 0x59
 80114ee:	f7ff fbf5 	bl	8010cdc <WriteRegister>
}
 80114f2:	46c0      	nop			@ (mov r8, r8)
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	0802d778 	.word	0x0802d778
 80114fc:	0802d654 	.word	0x0802d654
 8011500:	200000c4 	.word	0x200000c4

08011504 <ResetVOCresult>:

void ResetVOCresult(void) {
 8011504:	b580      	push	{r7, lr}
 8011506:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8011508:	4b02      	ldr	r3, [pc, #8]	@ (8011514 <ResetVOCresult+0x10>)
 801150a:	2200      	movs	r2, #0
 801150c:	601a      	str	r2, [r3, #0]
}
 801150e:	46c0      	nop			@ (mov r8, r8)
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	200012b0 	.word	0x200012b0

08011518 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8011518:	b580      	push	{r7, lr}
 801151a:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 801151c:	4b4b      	ldr	r3, [pc, #300]	@ (801164c <SGP_Upkeep+0x134>)
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	2b07      	cmp	r3, #7
 8011522:	d900      	bls.n	8011526 <SGP_Upkeep+0xe>
 8011524:	e07a      	b.n	801161c <SGP_Upkeep+0x104>
 8011526:	009a      	lsls	r2, r3, #2
 8011528:	4b49      	ldr	r3, [pc, #292]	@ (8011650 <SGP_Upkeep+0x138>)
 801152a:	18d3      	adds	r3, r2, r3
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 8011530:	4a48      	ldr	r2, [pc, #288]	@ (8011654 <SGP_Upkeep+0x13c>)
 8011532:	4b49      	ldr	r3, [pc, #292]	@ (8011658 <SGP_Upkeep+0x140>)
 8011534:	0019      	movs	r1, r3
 8011536:	2003      	movs	r0, #3
 8011538:	f002 fc4a 	bl	8013dd0 <CreateLine>
    break;
 801153c:	e081      	b.n	8011642 <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 801153e:	f7ff ffe1 	bl	8011504 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 8011542:	4b42      	ldr	r3, [pc, #264]	@ (801164c <SGP_Upkeep+0x134>)
 8011544:	2201      	movs	r2, #1
 8011546:	701a      	strb	r2, [r3, #0]
    break;
 8011548:	e07b      	b.n	8011642 <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 801154a:	f7fc fc2b 	bl	800dda4 <getSensorLock>
 801154e:	1e03      	subs	r3, r0, #0
 8011550:	d000      	beq.n	8011554 <SGP_Upkeep+0x3c>
 8011552:	e06f      	b.n	8011634 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 8011554:	2005      	movs	r0, #5
 8011556:	f7fc fc11 	bl	800dd7c <setSensorLock>
    SetMeasurementIndicator();
 801155a:	f001 f987 	bl	801286c <SetMeasurementIndicator>
    SGP_StartMeasurement();
 801155e:	f7ff fc29 	bl	8010db4 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 8011562:	200a      	movs	r0, #10
 8011564:	f003 f9b6 	bl	80148d4 <HAL_Delay>
    setSensorLock(FREE);
 8011568:	2000      	movs	r0, #0
 801156a:	f7fc fc07 	bl	800dd7c <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 801156e:	4b37      	ldr	r3, [pc, #220]	@ (801164c <SGP_Upkeep+0x134>)
 8011570:	2202      	movs	r2, #2
 8011572:	701a      	strb	r2, [r3, #0]
    break;
 8011574:	e065      	b.n	8011642 <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 8011576:	f7fc fc15 	bl	800dda4 <getSensorLock>
 801157a:	1e03      	subs	r3, r0, #0
 801157c:	d15c      	bne.n	8011638 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 801157e:	2005      	movs	r0, #5
 8011580:	f7fc fbfc 	bl	800dd7c <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 8011584:	4b35      	ldr	r3, [pc, #212]	@ (801165c <SGP_Upkeep+0x144>)
 8011586:	0018      	movs	r0, r3
 8011588:	f7ff fc84 	bl	8010e94 <SGP_GetMeasurementValues>
 801158c:	1e03      	subs	r3, r0, #0
 801158e:	d002      	beq.n	8011596 <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 8011590:	4b2e      	ldr	r3, [pc, #184]	@ (801164c <SGP_Upkeep+0x134>)
 8011592:	2203      	movs	r2, #3
 8011594:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 8011596:	200a      	movs	r0, #10
 8011598:	f003 f99c 	bl	80148d4 <HAL_Delay>
    setSensorLock(FREE);
 801159c:	2000      	movs	r0, #0
 801159e:	f7fc fbed 	bl	800dd7c <setSensorLock>
    break;
 80115a2:	e04e      	b.n	8011642 <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 80115a4:	4b2d      	ldr	r3, [pc, #180]	@ (801165c <SGP_Upkeep+0x144>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	0018      	movs	r0, r3
 80115ac:	f7f3 fa8a 	bl	8004ac4 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 80115b0:	4b26      	ldr	r3, [pc, #152]	@ (801164c <SGP_Upkeep+0x134>)
 80115b2:	2206      	movs	r2, #6
 80115b4:	701a      	strb	r2, [r3, #0]
    break;
 80115b6:	e044      	b.n	8011642 <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 80115b8:	4b24      	ldr	r3, [pc, #144]	@ (801164c <SGP_Upkeep+0x134>)
 80115ba:	2207      	movs	r2, #7
 80115bc:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 80115be:	4b28      	ldr	r3, [pc, #160]	@ (8011660 <SGP_Upkeep+0x148>)
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	2b03      	cmp	r3, #3
 80115c4:	d912      	bls.n	80115ec <SGP_Upkeep+0xd4>
 80115c6:	4b27      	ldr	r3, [pc, #156]	@ (8011664 <SGP_Upkeep+0x14c>)
 80115c8:	781b      	ldrb	r3, [r3, #0]
 80115ca:	2201      	movs	r2, #1
 80115cc:	4053      	eors	r3, r2
 80115ce:	b2db      	uxtb	r3, r3
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d00b      	beq.n	80115ec <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 80115d4:	4b24      	ldr	r3, [pc, #144]	@ (8011668 <SGP_Upkeep+0x150>)
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d004      	beq.n	80115e6 <SGP_Upkeep+0xce>
        SGP_SoftReset();
 80115dc:	f7ff ff76 	bl	80114cc <SGP_SoftReset>
        SetVOCSensorStatus(false);
 80115e0:	2000      	movs	r0, #0
 80115e2:	f7fb ff63 	bl	800d4ac <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 80115e6:	4b20      	ldr	r3, [pc, #128]	@ (8011668 <SGP_Upkeep+0x150>)
 80115e8:	2201      	movs	r2, #1
 80115ea:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 80115ec:	f003 f968 	bl	80148c0 <HAL_GetTick>
 80115f0:	0003      	movs	r3, r0
 80115f2:	22c8      	movs	r2, #200	@ 0xc8
 80115f4:	0092      	lsls	r2, r2, #2
 80115f6:	189a      	adds	r2, r3, r2
 80115f8:	4b1c      	ldr	r3, [pc, #112]	@ (801166c <SGP_Upkeep+0x154>)
 80115fa:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 80115fc:	f001 f94e 	bl	801289c <ResetMeasurementIndicator>
  break;
 8011600:	e01f      	b.n	8011642 <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8011602:	4b1a      	ldr	r3, [pc, #104]	@ (801166c <SGP_Upkeep+0x154>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	0018      	movs	r0, r3
 8011608:	f002 fb8c 	bl	8013d24 <TimestampIsReached>
 801160c:	1e03      	subs	r3, r0, #0
 801160e:	d015      	beq.n	801163c <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8011610:	f7ff fbb8 	bl	8010d84 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8011614:	4b0d      	ldr	r3, [pc, #52]	@ (801164c <SGP_Upkeep+0x134>)
 8011616:	2200      	movs	r2, #0
 8011618:	701a      	strb	r2, [r3, #0]
    }
    break;
 801161a:	e00f      	b.n	801163c <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 801161c:	4b0b      	ldr	r3, [pc, #44]	@ (801164c <SGP_Upkeep+0x134>)
 801161e:	2200      	movs	r2, #0
 8011620:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8011622:	f7fc fbbf 	bl	800dda4 <getSensorLock>
 8011626:	0003      	movs	r3, r0
 8011628:	2b05      	cmp	r3, #5
 801162a:	d109      	bne.n	8011640 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 801162c:	2000      	movs	r0, #0
 801162e:	f7fc fba5 	bl	800dd7c <setSensorLock>
    }
    break;
 8011632:	e005      	b.n	8011640 <SGP_Upkeep+0x128>
      break;
 8011634:	46c0      	nop			@ (mov r8, r8)
 8011636:	e004      	b.n	8011642 <SGP_Upkeep+0x12a>
      break;
 8011638:	46c0      	nop			@ (mov r8, r8)
 801163a:	e002      	b.n	8011642 <SGP_Upkeep+0x12a>
    break;
 801163c:	46c0      	nop			@ (mov r8, r8)
 801163e:	e000      	b.n	8011642 <SGP_Upkeep+0x12a>
    break;
 8011640:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8011642:	4b02      	ldr	r3, [pc, #8]	@ (801164c <SGP_Upkeep+0x134>)
 8011644:	781b      	ldrb	r3, [r3, #0]
}
 8011646:	0018      	movs	r0, r3
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	200012b4 	.word	0x200012b4
 8011650:	0802e318 	.word	0x0802e318
 8011654:	0802d790 	.word	0x0802d790
 8011658:	0802d654 	.word	0x0802d654
 801165c:	200012b0 	.word	0x200012b0
 8011660:	200011fa 	.word	0x200011fa
 8011664:	20002151 	.word	0x20002151
 8011668:	200011e4 	.word	0x200011e4
 801166c:	200011fc 	.word	0x200011fc

08011670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	0002      	movs	r2, r0
 8011678:	1dfb      	adds	r3, r7, #7
 801167a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801167c:	1dfb      	adds	r3, r7, #7
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	2b7f      	cmp	r3, #127	@ 0x7f
 8011682:	d809      	bhi.n	8011698 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011684:	1dfb      	adds	r3, r7, #7
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	001a      	movs	r2, r3
 801168a:	231f      	movs	r3, #31
 801168c:	401a      	ands	r2, r3
 801168e:	4b04      	ldr	r3, [pc, #16]	@ (80116a0 <__NVIC_EnableIRQ+0x30>)
 8011690:	2101      	movs	r1, #1
 8011692:	4091      	lsls	r1, r2
 8011694:	000a      	movs	r2, r1
 8011696:	601a      	str	r2, [r3, #0]
  }
}
 8011698:	46c0      	nop			@ (mov r8, r8)
 801169a:	46bd      	mov	sp, r7
 801169c:	b002      	add	sp, #8
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	e000e100 	.word	0xe000e100

080116a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	0002      	movs	r2, r0
 80116ac:	1dfb      	adds	r3, r7, #7
 80116ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80116b0:	1dfb      	adds	r3, r7, #7
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80116b6:	d810      	bhi.n	80116da <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80116b8:	1dfb      	adds	r3, r7, #7
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	001a      	movs	r2, r3
 80116be:	231f      	movs	r3, #31
 80116c0:	4013      	ands	r3, r2
 80116c2:	4908      	ldr	r1, [pc, #32]	@ (80116e4 <__NVIC_DisableIRQ+0x40>)
 80116c4:	2201      	movs	r2, #1
 80116c6:	409a      	lsls	r2, r3
 80116c8:	0013      	movs	r3, r2
 80116ca:	2280      	movs	r2, #128	@ 0x80
 80116cc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80116ce:	f3bf 8f4f 	dsb	sy
}
 80116d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80116d4:	f3bf 8f6f 	isb	sy
}
 80116d8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80116da:	46c0      	nop			@ (mov r8, r8)
 80116dc:	46bd      	mov	sp, r7
 80116de:	b002      	add	sp, #8
 80116e0:	bd80      	pop	{r7, pc}
 80116e2:	46c0      	nop			@ (mov r8, r8)
 80116e4:	e000e100 	.word	0xe000e100

080116e8 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 80116e8:	b5b0      	push	{r4, r5, r7, lr}
 80116ea:	b088      	sub	sp, #32
 80116ec:	af02      	add	r7, sp, #8
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	0008      	movs	r0, r1
 80116f2:	0011      	movs	r1, r2
 80116f4:	1cfb      	adds	r3, r7, #3
 80116f6:	1c02      	adds	r2, r0, #0
 80116f8:	701a      	strb	r2, [r3, #0]
 80116fa:	1cbb      	adds	r3, r7, #2
 80116fc:	1c0a      	adds	r2, r1, #0
 80116fe:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8011700:	4b5b      	ldr	r3, [pc, #364]	@ (8011870 <getSoundData+0x188>)
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	b2db      	uxtb	r3, r3
 8011706:	2201      	movs	r2, #1
 8011708:	4053      	eors	r3, r2
 801170a:	b2db      	uxtb	r3, r3
 801170c:	2b00      	cmp	r3, #0
 801170e:	d107      	bne.n	8011720 <getSoundData+0x38>
 8011710:	4b58      	ldr	r3, [pc, #352]	@ (8011874 <getSoundData+0x18c>)
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	b2db      	uxtb	r3, r3
 8011716:	2201      	movs	r2, #1
 8011718:	4053      	eors	r3, r2
 801171a:	b2db      	uxtb	r3, r3
 801171c:	2b00      	cmp	r3, #0
 801171e:	d001      	beq.n	8011724 <getSoundData+0x3c>
    {
        return false;
 8011720:	2300      	movs	r3, #0
 8011722:	e0a0      	b.n	8011866 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8011724:	4b54      	ldr	r3, [pc, #336]	@ (8011878 <getSoundData+0x190>)
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	b2db      	uxtb	r3, r3
 801172a:	2b00      	cmp	r3, #0
 801172c:	d005      	beq.n	801173a <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 801172e:	4b53      	ldr	r3, [pc, #332]	@ (801187c <getSoundData+0x194>)
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	b25b      	sxtb	r3, r3
 8011734:	0018      	movs	r0, r3
 8011736:	f7ff ffb5 	bl	80116a4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801173a:	f3bf 8f4f 	dsb	sy
}
 801173e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011740:	f3bf 8f6f 	isb	sy
}
 8011744:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8011746:	1cfb      	adds	r3, r7, #3
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d04c      	beq.n	80117e8 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 801174e:	4b4c      	ldr	r3, [pc, #304]	@ (8011880 <getSoundData+0x198>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d11b      	bne.n	801178e <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2200      	movs	r2, #0
 801175a:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2200      	movs	r2, #0
 8011760:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011762:	2300      	movs	r3, #0
 8011764:	617b      	str	r3, [r7, #20]
 8011766:	e00e      	b.n	8011786 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8011768:	687a      	ldr	r2, [r7, #4]
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	18d3      	adds	r3, r2, r3
 801176e:	3302      	adds	r3, #2
 8011770:	2200      	movs	r2, #0
 8011772:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	18d3      	adds	r3, r2, r3
 801177a:	3308      	adds	r3, #8
 801177c:	2200      	movs	r2, #0
 801177e:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	3301      	adds	r3, #1
 8011784:	617b      	str	r3, [r7, #20]
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	2b05      	cmp	r3, #5
 801178a:	d9ed      	bls.n	8011768 <getSoundData+0x80>
 801178c:	e02c      	b.n	80117e8 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	1c59      	adds	r1, r3, #1
 8011794:	4b3b      	ldr	r3, [pc, #236]	@ (8011884 <getSoundData+0x19c>)
 8011796:	681a      	ldr	r2, [r3, #0]
 8011798:	4b3b      	ldr	r3, [pc, #236]	@ (8011888 <getSoundData+0x1a0>)
 801179a:	681c      	ldr	r4, [r3, #0]
 801179c:	4b38      	ldr	r3, [pc, #224]	@ (8011880 <getSoundData+0x198>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	9300      	str	r3, [sp, #0]
 80117a2:	0023      	movs	r3, r4
 80117a4:	f000 fde8 	bl	8012378 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117a8:	2300      	movs	r3, #0
 80117aa:	613b      	str	r3, [r7, #16]
 80117ac:	e019      	b.n	80117e2 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	18d3      	adds	r3, r2, r3
 80117b4:	1c98      	adds	r0, r3, #2
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	3308      	adds	r3, #8
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 80117be:	4b33      	ldr	r3, [pc, #204]	@ (801188c <getSoundData+0x1a4>)
 80117c0:	693a      	ldr	r2, [r7, #16]
 80117c2:	0092      	lsls	r2, r2, #2
 80117c4:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 80117c6:	4b32      	ldr	r3, [pc, #200]	@ (8011890 <getSoundData+0x1a8>)
 80117c8:	693a      	ldr	r2, [r7, #16]
 80117ca:	0092      	lsls	r2, r2, #2
 80117cc:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80117ce:	4b2c      	ldr	r3, [pc, #176]	@ (8011880 <getSoundData+0x198>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	9300      	str	r3, [sp, #0]
 80117d4:	0013      	movs	r3, r2
 80117d6:	0022      	movs	r2, r4
 80117d8:	f000 fdce 	bl	8012378 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	3301      	adds	r3, #1
 80117e0:	613b      	str	r3, [r7, #16]
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	2b05      	cmp	r3, #5
 80117e6:	d9e2      	bls.n	80117ae <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 80117e8:	1cbb      	adds	r3, r7, #2
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d028      	beq.n	8011842 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 80117f0:	240e      	movs	r4, #14
 80117f2:	193b      	adds	r3, r7, r4
 80117f4:	2200      	movs	r2, #0
 80117f6:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 80117f8:	250d      	movs	r5, #13
 80117fa:	197b      	adds	r3, r7, r5
 80117fc:	2200      	movs	r2, #0
 80117fe:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8011800:	4b24      	ldr	r3, [pc, #144]	@ (8011894 <getSoundData+0x1ac>)
 8011802:	6818      	ldr	r0, [r3, #0]
 8011804:	4924      	ldr	r1, [pc, #144]	@ (8011898 <getSoundData+0x1b0>)
 8011806:	197b      	adds	r3, r7, r5
 8011808:	193a      	adds	r2, r7, r4
 801180a:	f000 fe59 	bl	80124c0 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 801180e:	193b      	adds	r3, r7, r4
 8011810:	881a      	ldrh	r2, [r3, #0]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	21ff      	movs	r1, #255	@ 0xff
 8011816:	4011      	ands	r1, r2
 8011818:	000c      	movs	r4, r1
 801181a:	7b99      	ldrb	r1, [r3, #14]
 801181c:	2000      	movs	r0, #0
 801181e:	4001      	ands	r1, r0
 8011820:	1c08      	adds	r0, r1, #0
 8011822:	1c21      	adds	r1, r4, #0
 8011824:	4301      	orrs	r1, r0
 8011826:	7399      	strb	r1, [r3, #14]
 8011828:	0a12      	lsrs	r2, r2, #8
 801182a:	b290      	uxth	r0, r2
 801182c:	7bda      	ldrb	r2, [r3, #15]
 801182e:	2100      	movs	r1, #0
 8011830:	400a      	ands	r2, r1
 8011832:	1c11      	adds	r1, r2, #0
 8011834:	1c02      	adds	r2, r0, #0
 8011836:	430a      	orrs	r2, r1
 8011838:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 801183a:	197b      	adds	r3, r7, r5
 801183c:	781a      	ldrb	r2, [r3, #0]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8011842:	f000 f86f 	bl	8011924 <micSettlingComplete>
 8011846:	0003      	movs	r3, r0
 8011848:	001a      	movs	r2, r3
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 801184e:	4b0a      	ldr	r3, [pc, #40]	@ (8011878 <getSoundData+0x190>)
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b00      	cmp	r3, #0
 8011856:	d005      	beq.n	8011864 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011858:	4b08      	ldr	r3, [pc, #32]	@ (801187c <getSoundData+0x194>)
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	b25b      	sxtb	r3, r3
 801185e:	0018      	movs	r0, r3
 8011860:	f7ff ff06 	bl	8011670 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8011864:	2301      	movs	r3, #1
}
 8011866:	0018      	movs	r0, r3
 8011868:	46bd      	mov	sp, r7
 801186a:	b006      	add	sp, #24
 801186c:	bdb0      	pop	{r4, r5, r7, pc}
 801186e:	46c0      	nop			@ (mov r8, r8)
 8011870:	200012b6 	.word	0x200012b6
 8011874:	200012b9 	.word	0x200012b9
 8011878:	200012b8 	.word	0x200012b8
 801187c:	20001d08 	.word	0x20001d08
 8011880:	20001d44 	.word	0x20001d44
 8011884:	20001d0c 	.word	0x20001d0c
 8011888:	20001d10 	.word	0x20001d10
 801188c:	20001d14 	.word	0x20001d14
 8011890:	20001d2c 	.word	0x20001d2c
 8011894:	200012c0 	.word	0x200012c0
 8011898:	3b5c7333 	.word	0x3b5c7333

0801189c <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b084      	sub	sp, #16
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	607a      	str	r2, [r7, #4]
 80118a8:	001a      	movs	r2, r3
 80118aa:	1cfb      	adds	r3, r7, #3
 80118ac:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 80118ae:	4b09      	ldr	r3, [pc, #36]	@ (80118d4 <soundInit+0x38>)
 80118b0:	68ba      	ldr	r2, [r7, #8]
 80118b2:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 80118b4:	4b08      	ldr	r3, [pc, #32]	@ (80118d8 <soundInit+0x3c>)
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 80118ba:	4b08      	ldr	r3, [pc, #32]	@ (80118dc <soundInit+0x40>)
 80118bc:	68fa      	ldr	r2, [r7, #12]
 80118be:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 80118c0:	4b07      	ldr	r3, [pc, #28]	@ (80118e0 <soundInit+0x44>)
 80118c2:	2200      	movs	r2, #0
 80118c4:	569a      	ldrsb	r2, [r3, r2]
 80118c6:	4b06      	ldr	r3, [pc, #24]	@ (80118e0 <soundInit+0x44>)
 80118c8:	701a      	strb	r2, [r3, #0]

    return true;
 80118ca:	2301      	movs	r3, #1
}
 80118cc:	0018      	movs	r0, r3
 80118ce:	46bd      	mov	sp, r7
 80118d0:	b004      	add	sp, #16
 80118d2:	bd80      	pop	{r7, pc}
 80118d4:	20001d00 	.word	0x20001d00
 80118d8:	20001cfc 	.word	0x20001cfc
 80118dc:	20001d04 	.word	0x20001d04
 80118e0:	20001d08 	.word	0x20001d08

080118e4 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 80118e8:	4b02      	ldr	r3, [pc, #8]	@ (80118f4 <clearMaximumAmplitude+0x10>)
 80118ea:	2200      	movs	r2, #0
 80118ec:	601a      	str	r2, [r3, #0]
}
 80118ee:	46c0      	nop			@ (mov r8, r8)
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	200012c0 	.word	0x200012c0

080118f8 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 80118fc:	4b08      	ldr	r3, [pc, #32]	@ (8011920 <startMicSettlingPeriod+0x28>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2200      	movs	r2, #0
 8011904:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8011906:	4b06      	ldr	r3, [pc, #24]	@ (8011920 <startMicSettlingPeriod+0x28>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	0018      	movs	r0, r3
 801190c:	f00b f922 	bl	801cb54 <HAL_TIM_Base_Start>
 8011910:	1e03      	subs	r3, r0, #0
 8011912:	d001      	beq.n	8011918 <startMicSettlingPeriod+0x20>
    {
        return false;
 8011914:	2300      	movs	r3, #0
 8011916:	e000      	b.n	801191a <startMicSettlingPeriod+0x22>
    }
    return true;
 8011918:	2301      	movs	r3, #1
}
 801191a:	0018      	movs	r0, r3
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	20001cfc 	.word	0x20001cfc

08011924 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 801192a:	4b0e      	ldr	r3, [pc, #56]	@ (8011964 <micSettlingComplete+0x40>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	691b      	ldr	r3, [r3, #16]
 8011932:	2201      	movs	r2, #1
 8011934:	401a      	ands	r2, r3
 8011936:	1dfb      	adds	r3, r7, #7
 8011938:	3a01      	subs	r2, #1
 801193a:	4251      	negs	r1, r2
 801193c:	414a      	adcs	r2, r1
 801193e:	701a      	strb	r2, [r3, #0]
    if (complete)
 8011940:	1dfb      	adds	r3, r7, #7
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d007      	beq.n	8011958 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8011948:	4b06      	ldr	r3, [pc, #24]	@ (8011964 <micSettlingComplete+0x40>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	0018      	movs	r0, r3
 801194e:	f00b f94b 	bl	801cbe8 <HAL_TIM_Base_Stop>
      DataReady = true;
 8011952:	4b05      	ldr	r3, [pc, #20]	@ (8011968 <micSettlingComplete+0x44>)
 8011954:	2201      	movs	r2, #1
 8011956:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8011958:	1dfb      	adds	r3, r7, #7
 801195a:	781b      	ldrb	r3, [r3, #0]
}
 801195c:	0018      	movs	r0, r3
 801195e:	46bd      	mov	sp, r7
 8011960:	b002      	add	sp, #8
 8011962:	bd80      	pop	{r7, pc}
 8011964:	20001cfc 	.word	0x20001cfc
 8011968:	200012b5 	.word	0x200012b5

0801196c <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	0002      	movs	r2, r0
 8011974:	1dfb      	adds	r3, r7, #7
 8011976:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8011978:	4b29      	ldr	r3, [pc, #164]	@ (8011a20 <enableMicrophone+0xb4>)
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	b2db      	uxtb	r3, r3
 801197e:	1dfa      	adds	r2, r7, #7
 8011980:	7812      	ldrb	r2, [r2, #0]
 8011982:	429a      	cmp	r2, r3
 8011984:	d101      	bne.n	801198a <enableMicrophone+0x1e>
    {
        return true;
 8011986:	2301      	movs	r3, #1
 8011988:	e045      	b.n	8011a16 <enableMicrophone+0xaa>
    }
    if (bEnable)
 801198a:	1dfb      	adds	r3, r7, #7
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d025      	beq.n	80119de <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8011992:	f7ff ffb1 	bl	80118f8 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8011996:	4b23      	ldr	r3, [pc, #140]	@ (8011a24 <enableMicrophone+0xb8>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	2280      	movs	r2, #128	@ 0x80
 801199c:	0092      	lsls	r2, r2, #2
 801199e:	4922      	ldr	r1, [pc, #136]	@ (8011a28 <enableMicrophone+0xbc>)
 80119a0:	0018      	movs	r0, r3
 80119a2:	f007 fb39 	bl	8019018 <HAL_I2S_Receive_DMA>
 80119a6:	1e03      	subs	r3, r0, #0
 80119a8:	d001      	beq.n	80119ae <enableMicrophone+0x42>
        {
            return false;
 80119aa:	2300      	movs	r3, #0
 80119ac:	e033      	b.n	8011a16 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 80119ae:	f7ff ff99 	bl	80118e4 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 80119b2:	4b1e      	ldr	r3, [pc, #120]	@ (8011a2c <enableMicrophone+0xc0>)
 80119b4:	2200      	movs	r2, #0
 80119b6:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80119b8:	4b1d      	ldr	r3, [pc, #116]	@ (8011a30 <enableMicrophone+0xc4>)
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	b25b      	sxtb	r3, r3
 80119be:	0018      	movs	r0, r3
 80119c0:	f7ff fe56 	bl	8011670 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 80119c4:	4b1b      	ldr	r3, [pc, #108]	@ (8011a34 <enableMicrophone+0xc8>)
 80119c6:	2201      	movs	r2, #1
 80119c8:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 80119ca:	4b15      	ldr	r3, [pc, #84]	@ (8011a20 <enableMicrophone+0xb4>)
 80119cc:	2201      	movs	r2, #1
 80119ce:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80119d0:	4b19      	ldr	r3, [pc, #100]	@ (8011a38 <enableMicrophone+0xcc>)
 80119d2:	2200      	movs	r2, #0
 80119d4:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 80119d6:	4b19      	ldr	r3, [pc, #100]	@ (8011a3c <enableMicrophone+0xd0>)
 80119d8:	2200      	movs	r2, #0
 80119da:	701a      	strb	r2, [r3, #0]
 80119dc:	e01a      	b.n	8011a14 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 80119de:	4b14      	ldr	r3, [pc, #80]	@ (8011a30 <enableMicrophone+0xc4>)
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	b25b      	sxtb	r3, r3
 80119e4:	0018      	movs	r0, r3
 80119e6:	f7ff fe5d 	bl	80116a4 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 80119ea:	4b12      	ldr	r3, [pc, #72]	@ (8011a34 <enableMicrophone+0xc8>)
 80119ec:	2200      	movs	r2, #0
 80119ee:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80119f0:	4b11      	ldr	r3, [pc, #68]	@ (8011a38 <enableMicrophone+0xcc>)
 80119f2:	2200      	movs	r2, #0
 80119f4:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 80119f6:	4b11      	ldr	r3, [pc, #68]	@ (8011a3c <enableMicrophone+0xd0>)
 80119f8:	2200      	movs	r2, #0
 80119fa:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 80119fc:	4b09      	ldr	r3, [pc, #36]	@ (8011a24 <enableMicrophone+0xb8>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	0018      	movs	r0, r3
 8011a02:	f007 fbcb 	bl	801919c <HAL_I2S_DMAStop>
 8011a06:	1e03      	subs	r3, r0, #0
 8011a08:	d001      	beq.n	8011a0e <enableMicrophone+0xa2>
        {
            return false;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e003      	b.n	8011a16 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011a0e:	4b04      	ldr	r3, [pc, #16]	@ (8011a20 <enableMicrophone+0xb4>)
 8011a10:	2200      	movs	r2, #0
 8011a12:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011a14:	2301      	movs	r3, #1
}
 8011a16:	0018      	movs	r0, r3
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	b002      	add	sp, #8
 8011a1c:	bd80      	pop	{r7, pc}
 8011a1e:	46c0      	nop			@ (mov r8, r8)
 8011a20:	200012b6 	.word	0x200012b6
 8011a24:	20001d00 	.word	0x20001d00
 8011a28:	200012fc 	.word	0x200012fc
 8011a2c:	200012bc 	.word	0x200012bc
 8011a30:	20001d08 	.word	0x20001d08
 8011a34:	200012b8 	.word	0x200012b8
 8011a38:	200012b7 	.word	0x200012b7
 8011a3c:	200012b9 	.word	0x200012b9

08011a40 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011a44:	4b0c      	ldr	r3, [pc, #48]	@ (8011a78 <startSPLcalculation+0x38>)
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	b2db      	uxtb	r3, r3
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	4053      	eors	r3, r2
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d001      	beq.n	8011a58 <startSPLcalculation+0x18>
    {
        return false;
 8011a54:	2300      	movs	r3, #0
 8011a56:	e00c      	b.n	8011a72 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8011a58:	4b08      	ldr	r3, [pc, #32]	@ (8011a7c <startSPLcalculation+0x3c>)
 8011a5a:	781b      	ldrb	r3, [r3, #0]
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d001      	beq.n	8011a66 <startSPLcalculation+0x26>
    {
        return true;
 8011a62:	2301      	movs	r3, #1
 8011a64:	e005      	b.n	8011a72 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8011a66:	f000 fb63 	bl	8012130 <resetSPLstate>
    SPLcalcEnabled = true;
 8011a6a:	4b04      	ldr	r3, [pc, #16]	@ (8011a7c <startSPLcalculation+0x3c>)
 8011a6c:	2201      	movs	r2, #1
 8011a6e:	701a      	strb	r2, [r3, #0]
    return true;
 8011a70:	2301      	movs	r3, #1
}
 8011a72:	0018      	movs	r0, r3
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	200012b6 	.word	0x200012b6
 8011a7c:	200012b7 	.word	0x200012b7

08011a80 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011a88:	4b05      	ldr	r3, [pc, #20]	@ (8011aa0 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	687a      	ldr	r2, [r7, #4]
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d102      	bne.n	8011a98 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8011a92:	2000      	movs	r0, #0
 8011a94:	f000 f81a 	bl	8011acc <processHalfDMAbuffer>
  }
}
 8011a98:	46c0      	nop			@ (mov r8, r8)
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	b002      	add	sp, #8
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	20001d00 	.word	0x20001d00

08011aa4 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011aac:	4b06      	ldr	r3, [pc, #24]	@ (8011ac8 <HAL_I2S_RxCpltCallback+0x24>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	687a      	ldr	r2, [r7, #4]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d104      	bne.n	8011ac0 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8011ab6:	2380      	movs	r3, #128	@ 0x80
 8011ab8:	009b      	lsls	r3, r3, #2
 8011aba:	0018      	movs	r0, r3
 8011abc:	f000 f806 	bl	8011acc <processHalfDMAbuffer>
  }
}
 8011ac0:	46c0      	nop			@ (mov r8, r8)
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	b002      	add	sp, #8
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	20001d00 	.word	0x20001d00

08011acc <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	005a      	lsls	r2, r3, #1
 8011ad8:	4b15      	ldr	r3, [pc, #84]	@ (8011b30 <processHalfDMAbuffer+0x64>)
 8011ada:	18d3      	adds	r3, r2, r3
 8011adc:	4a15      	ldr	r2, [pc, #84]	@ (8011b34 <processHalfDMAbuffer+0x68>)
 8011ade:	2180      	movs	r1, #128	@ 0x80
 8011ae0:	0089      	lsls	r1, r1, #2
 8011ae2:	0018      	movs	r0, r3
 8011ae4:	f000 fd35 	bl	8012552 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8011ae8:	4b13      	ldr	r3, [pc, #76]	@ (8011b38 <processHalfDMAbuffer+0x6c>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	425a      	negs	r2, r3
 8011aee:	4153      	adcs	r3, r2
 8011af0:	b2da      	uxtb	r2, r3
 8011af2:	4b11      	ldr	r3, [pc, #68]	@ (8011b38 <processHalfDMAbuffer+0x6c>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	2109      	movs	r1, #9
 8011af8:	4299      	cmp	r1, r3
 8011afa:	419b      	sbcs	r3, r3
 8011afc:	425b      	negs	r3, r3
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	480c      	ldr	r0, [pc, #48]	@ (8011b34 <processHalfDMAbuffer+0x68>)
 8011b02:	2180      	movs	r1, #128	@ 0x80
 8011b04:	f000 fb46 	bl	8012194 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8011b08:	4b0b      	ldr	r3, [pc, #44]	@ (8011b38 <processHalfDMAbuffer+0x6c>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	2b09      	cmp	r3, #9
 8011b0e:	d804      	bhi.n	8011b1a <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011b10:	4b09      	ldr	r3, [pc, #36]	@ (8011b38 <processHalfDMAbuffer+0x6c>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	1c5a      	adds	r2, r3, #1
 8011b16:	4b08      	ldr	r3, [pc, #32]	@ (8011b38 <processHalfDMAbuffer+0x6c>)
 8011b18:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8011b1a:	4b08      	ldr	r3, [pc, #32]	@ (8011b3c <processHalfDMAbuffer+0x70>)
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d001      	beq.n	8011b28 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011b24:	f000 f826 	bl	8011b74 <calculateSPLQ31>
    }
}
 8011b28:	46c0      	nop			@ (mov r8, r8)
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	b002      	add	sp, #8
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	200012fc 	.word	0x200012fc
 8011b34:	20001afc 	.word	0x20001afc
 8011b38:	200012bc 	.word	0x200012bc
 8011b3c:	200012b7 	.word	0x200012b7

08011b40 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011b48:	4b07      	ldr	r3, [pc, #28]	@ (8011b68 <HAL_I2S_ErrorCallback+0x28>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d106      	bne.n	8011b60 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011b52:	4a06      	ldr	r2, [pc, #24]	@ (8011b6c <HAL_I2S_ErrorCallback+0x2c>)
 8011b54:	239e      	movs	r3, #158	@ 0x9e
 8011b56:	0059      	lsls	r1, r3, #1
 8011b58:	4b05      	ldr	r3, [pc, #20]	@ (8011b70 <HAL_I2S_ErrorCallback+0x30>)
 8011b5a:	0018      	movs	r0, r3
 8011b5c:	f002 fa20 	bl	8013fa0 <errorHandler>
  }
}
 8011b60:	46c0      	nop			@ (mov r8, r8)
 8011b62:	46bd      	mov	sp, r7
 8011b64:	b002      	add	sp, #8
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	20001d00 	.word	0x20001d00
 8011b6c:	0802d7b8 	.word	0x0802d7b8
 8011b70:	0802e408 	.word	0x0802e408

08011b74 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8011b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b76:	b0b3      	sub	sp, #204	@ 0xcc
 8011b78:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8011b7a:	4ae2      	ldr	r2, [pc, #904]	@ (8011f04 <calculateSPLQ31+0x390>)
 8011b7c:	2338      	movs	r3, #56	@ 0x38
 8011b7e:	2030      	movs	r0, #48	@ 0x30
 8011b80:	181b      	adds	r3, r3, r0
 8011b82:	19d9      	adds	r1, r3, r7
 8011b84:	2334      	movs	r3, #52	@ 0x34
 8011b86:	181b      	adds	r3, r3, r0
 8011b88:	19d8      	adds	r0, r3, r7
 8011b8a:	2380      	movs	r3, #128	@ 0x80
 8011b8c:	f000 fc36 	bl	80123fc <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011b90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	da00      	bge.n	8011b98 <calculateSPLQ31+0x24>
 8011b96:	3301      	adds	r3, #1
 8011b98:	105b      	asrs	r3, r3, #1
 8011b9a:	001a      	movs	r2, r3
 8011b9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	da00      	bge.n	8011ba4 <calculateSPLQ31+0x30>
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	105b      	asrs	r3, r3, #1
 8011ba6:	18d3      	adds	r3, r2, r3
 8011ba8:	2188      	movs	r1, #136	@ 0x88
 8011baa:	187a      	adds	r2, r7, r1
 8011bac:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8011bae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011bb0:	187b      	adds	r3, r7, r1
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	1ad3      	subs	r3, r2, r3
 8011bb6:	3304      	adds	r3, #4
 8011bb8:	2284      	movs	r2, #132	@ 0x84
 8011bba:	18b9      	adds	r1, r7, r2
 8011bbc:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011bbe:	18bb      	adds	r3, r7, r2
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4ad1      	ldr	r2, [pc, #836]	@ (8011f08 <calculateSPLQ31+0x394>)
 8011bc4:	0019      	movs	r1, r3
 8011bc6:	0010      	movs	r0, r2
 8011bc8:	f000 fc58 	bl	801247c <getPo2factor>
 8011bcc:	0003      	movs	r3, r0
 8011bce:	2280      	movs	r2, #128	@ 0x80
 8011bd0:	18ba      	adds	r2, r7, r2
 8011bd2:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	2284      	movs	r2, #132	@ 0x84
 8011bd8:	2130      	movs	r1, #48	@ 0x30
 8011bda:	1852      	adds	r2, r2, r1
 8011bdc:	19d2      	adds	r2, r2, r7
 8011bde:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011be0:	2300      	movs	r3, #0
 8011be2:	2280      	movs	r2, #128	@ 0x80
 8011be4:	1852      	adds	r2, r2, r1
 8011be6:	19d2      	adds	r2, r2, r7
 8011be8:	6013      	str	r3, [r2, #0]
 8011bea:	e032      	b.n	8011c52 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011bec:	4ac5      	ldr	r2, [pc, #788]	@ (8011f04 <calculateSPLQ31+0x390>)
 8011bee:	2680      	movs	r6, #128	@ 0x80
 8011bf0:	2330      	movs	r3, #48	@ 0x30
 8011bf2:	18f1      	adds	r1, r6, r3
 8011bf4:	19cb      	adds	r3, r1, r7
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	589a      	ldr	r2, [r3, r2]
 8011bfc:	2188      	movs	r1, #136	@ 0x88
 8011bfe:	1879      	adds	r1, r7, r1
 8011c00:	680b      	ldr	r3, [r1, #0]
 8011c02:	1ad2      	subs	r2, r2, r3
 8011c04:	2180      	movs	r1, #128	@ 0x80
 8011c06:	1879      	adds	r1, r7, r1
 8011c08:	680b      	ldr	r3, [r1, #0]
 8011c0a:	409a      	lsls	r2, r3
 8011c0c:	0011      	movs	r1, r2
 8011c0e:	4abf      	ldr	r2, [pc, #764]	@ (8011f0c <calculateSPLQ31+0x398>)
 8011c10:	2084      	movs	r0, #132	@ 0x84
 8011c12:	2330      	movs	r3, #48	@ 0x30
 8011c14:	18c3      	adds	r3, r0, r3
 8011c16:	19db      	adds	r3, r3, r7
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	009b      	lsls	r3, r3, #2
 8011c1c:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011c1e:	2230      	movs	r2, #48	@ 0x30
 8011c20:	1883      	adds	r3, r0, r2
 8011c22:	19db      	adds	r3, r3, r7
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	3301      	adds	r3, #1
 8011c28:	49b8      	ldr	r1, [pc, #736]	@ (8011f0c <calculateSPLQ31+0x398>)
 8011c2a:	009a      	lsls	r2, r3, #2
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	5053      	str	r3, [r2, r1]
        count += 2;
 8011c30:	2230      	movs	r2, #48	@ 0x30
 8011c32:	1883      	adds	r3, r0, r2
 8011c34:	19db      	adds	r3, r3, r7
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	3302      	adds	r3, #2
 8011c3a:	0011      	movs	r1, r2
 8011c3c:	1882      	adds	r2, r0, r2
 8011c3e:	19d2      	adds	r2, r2, r7
 8011c40:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011c42:	000a      	movs	r2, r1
 8011c44:	18b3      	adds	r3, r6, r2
 8011c46:	19db      	adds	r3, r3, r7
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	3301      	adds	r3, #1
 8011c4c:	18b2      	adds	r2, r6, r2
 8011c4e:	19d2      	adds	r2, r2, r7
 8011c50:	6013      	str	r3, [r2, #0]
 8011c52:	2380      	movs	r3, #128	@ 0x80
 8011c54:	2630      	movs	r6, #48	@ 0x30
 8011c56:	199b      	adds	r3, r3, r6
 8011c58:	19db      	adds	r3, r3, r7
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8011c5e:	d9c5      	bls.n	8011bec <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011c60:	4bab      	ldr	r3, [pc, #684]	@ (8011f10 <calculateSPLQ31+0x39c>)
 8011c62:	6818      	ldr	r0, [r3, #0]
 8011c64:	49a9      	ldr	r1, [pc, #676]	@ (8011f0c <calculateSPLQ31+0x398>)
 8011c66:	2301      	movs	r3, #1
 8011c68:	2200      	movs	r2, #0
 8011c6a:	f012 f847 	bl	8023cfc <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8011c6e:	4aa9      	ldr	r2, [pc, #676]	@ (8011f14 <calculateSPLQ31+0x3a0>)
 8011c70:	2338      	movs	r3, #56	@ 0x38
 8011c72:	199b      	adds	r3, r3, r6
 8011c74:	19d9      	adds	r1, r3, r7
 8011c76:	2334      	movs	r3, #52	@ 0x34
 8011c78:	199b      	adds	r3, r3, r6
 8011c7a:	19d8      	adds	r0, r3, r7
 8011c7c:	237e      	movs	r3, #126	@ 0x7e
 8011c7e:	f000 fbbd 	bl	80123fc <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8011c82:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011c84:	2380      	movs	r3, #128	@ 0x80
 8011c86:	061b      	lsls	r3, r3, #24
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d101      	bne.n	8011c90 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011c8c:	4b9e      	ldr	r3, [pc, #632]	@ (8011f08 <calculateSPLQ31+0x394>)
 8011c8e:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8011c90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011c92:	2380      	movs	r3, #128	@ 0x80
 8011c94:	061b      	lsls	r3, r3, #24
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d101      	bne.n	8011c9e <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8011c9a:	4b9b      	ldr	r3, [pc, #620]	@ (8011f08 <calculateSPLQ31+0x394>)
 8011c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8011c9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ca0:	17da      	asrs	r2, r3, #31
 8011ca2:	189b      	adds	r3, r3, r2
 8011ca4:	4053      	eors	r3, r2
 8011ca6:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8011ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011caa:	17da      	asrs	r2, r3, #31
 8011cac:	189b      	adds	r3, r3, r2
 8011cae:	4053      	eors	r3, r2
 8011cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8011cb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	dd01      	ble.n	8011cbe <calculateSPLQ31+0x14a>
    {
        max = min;
 8011cba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8011cbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011cc0:	3304      	adds	r3, #4
 8011cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8011cc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011cc6:	4a90      	ldr	r2, [pc, #576]	@ (8011f08 <calculateSPLQ31+0x394>)
 8011cc8:	0019      	movs	r1, r3
 8011cca:	0010      	movs	r0, r2
 8011ccc:	f000 fbd6 	bl	801247c <getPo2factor>
 8011cd0:	0003      	movs	r3, r0
 8011cd2:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8011cd4:	2302      	movs	r3, #2
 8011cd6:	22ac      	movs	r2, #172	@ 0xac
 8011cd8:	18ba      	adds	r2, r7, r2
 8011cda:	6013      	str	r3, [r2, #0]
 8011cdc:	e012      	b.n	8011d04 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8011cde:	4a8b      	ldr	r2, [pc, #556]	@ (8011f0c <calculateSPLQ31+0x398>)
 8011ce0:	20ac      	movs	r0, #172	@ 0xac
 8011ce2:	183b      	adds	r3, r7, r0
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	589a      	ldr	r2, [r3, r2]
 8011cea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011cec:	409a      	lsls	r2, r3
 8011cee:	0011      	movs	r1, r2
 8011cf0:	4a86      	ldr	r2, [pc, #536]	@ (8011f0c <calculateSPLQ31+0x398>)
 8011cf2:	183b      	adds	r3, r7, r0
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8011cfa:	183b      	adds	r3, r7, r0
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	183a      	adds	r2, r7, r0
 8011d02:	6013      	str	r3, [r2, #0]
 8011d04:	23ac      	movs	r3, #172	@ 0xac
 8011d06:	18fb      	adds	r3, r7, r3
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d0c:	d9e7      	bls.n	8011cde <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8011f04 <calculateSPLQ31+0x390>)
 8011d10:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011d12:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011d14:	4b7d      	ldr	r3, [pc, #500]	@ (8011f0c <calculateSPLQ31+0x398>)
 8011d16:	2240      	movs	r2, #64	@ 0x40
 8011d18:	0018      	movs	r0, r3
 8011d1a:	f012 fd99 	bl	8024850 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011d1e:	2330      	movs	r3, #48	@ 0x30
 8011d20:	18fb      	adds	r3, r7, r3
 8011d22:	0018      	movs	r0, r3
 8011d24:	2330      	movs	r3, #48	@ 0x30
 8011d26:	001a      	movs	r2, r3
 8011d28:	2100      	movs	r1, #0
 8011d2a:	f014 fbc3 	bl	80264b4 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011d2e:	2200      	movs	r2, #0
 8011d30:	2300      	movs	r3, #0
 8011d32:	21a0      	movs	r1, #160	@ 0xa0
 8011d34:	1879      	adds	r1, r7, r1
 8011d36:	600a      	str	r2, [r1, #0]
 8011d38:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	229c      	movs	r2, #156	@ 0x9c
 8011d3e:	18ba      	adds	r2, r7, r2
 8011d40:	6013      	str	r3, [r2, #0]
 8011d42:	e05b      	b.n	8011dfc <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011d44:	269c      	movs	r6, #156	@ 0x9c
 8011d46:	19bb      	adds	r3, r7, r6
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	009a      	lsls	r2, r3, #2
 8011d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011d4e:	189b      	adds	r3, r3, r2
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	613b      	str	r3, [r7, #16]
 8011d54:	17db      	asrs	r3, r3, #31
 8011d56:	617b      	str	r3, [r7, #20]
 8011d58:	4b6f      	ldr	r3, [pc, #444]	@ (8011f18 <calculateSPLQ31+0x3a4>)
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	19bb      	adds	r3, r7, r6
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	005b      	lsls	r3, r3, #1
 8011d62:	18d3      	adds	r3, r2, r3
 8011d64:	881b      	ldrh	r3, [r3, #0]
 8011d66:	60bb      	str	r3, [r7, #8]
 8011d68:	2300      	movs	r3, #0
 8011d6a:	60fb      	str	r3, [r7, #12]
 8011d6c:	68ba      	ldr	r2, [r7, #8]
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	6938      	ldr	r0, [r7, #16]
 8011d72:	6979      	ldr	r1, [r7, #20]
 8011d74:	f7ee fc24 	bl	80005c0 <__aeabi_lmul>
 8011d78:	0002      	movs	r2, r0
 8011d7a:	000b      	movs	r3, r1
 8011d7c:	0010      	movs	r0, r2
 8011d7e:	0019      	movs	r1, r3
 8011d80:	23a0      	movs	r3, #160	@ 0xa0
 8011d82:	18fa      	adds	r2, r7, r3
 8011d84:	6853      	ldr	r3, [r2, #4]
 8011d86:	6812      	ldr	r2, [r2, #0]
 8011d88:	1812      	adds	r2, r2, r0
 8011d8a:	414b      	adcs	r3, r1
 8011d8c:	21a0      	movs	r1, #160	@ 0xa0
 8011d8e:	1879      	adds	r1, r7, r1
 8011d90:	600a      	str	r2, [r1, #0]
 8011d92:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8011d94:	4b61      	ldr	r3, [pc, #388]	@ (8011f1c <calculateSPLQ31+0x3a8>)
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	19bb      	adds	r3, r7, r6
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	18d3      	adds	r3, r2, r3
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	2b06      	cmp	r3, #6
 8011da2:	d025      	beq.n	8011df0 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8011da4:	4b5d      	ldr	r3, [pc, #372]	@ (8011f1c <calculateSPLQ31+0x3a8>)
 8011da6:	681a      	ldr	r2, [r3, #0]
 8011da8:	19bb      	adds	r3, r7, r6
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	18d3      	adds	r3, r2, r3
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	2230      	movs	r2, #48	@ 0x30
 8011db2:	18ba      	adds	r2, r7, r2
 8011db4:	00db      	lsls	r3, r3, #3
 8011db6:	18d3      	adds	r3, r2, r3
 8011db8:	6818      	ldr	r0, [r3, #0]
 8011dba:	6859      	ldr	r1, [r3, #4]
 8011dbc:	19bb      	adds	r3, r7, r6
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	009a      	lsls	r2, r3, #2
 8011dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011dc4:	189b      	adds	r3, r3, r2
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	603b      	str	r3, [r7, #0]
 8011dca:	17db      	asrs	r3, r3, #31
 8011dcc:	607b      	str	r3, [r7, #4]
 8011dce:	4b53      	ldr	r3, [pc, #332]	@ (8011f1c <calculateSPLQ31+0x3a8>)
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	19be      	adds	r6, r7, r6
 8011dd4:	6833      	ldr	r3, [r6, #0]
 8011dd6:	18d3      	adds	r3, r2, r3
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	001e      	movs	r6, r3
 8011ddc:	683a      	ldr	r2, [r7, #0]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	1880      	adds	r0, r0, r2
 8011de2:	4159      	adcs	r1, r3
 8011de4:	2330      	movs	r3, #48	@ 0x30
 8011de6:	18fa      	adds	r2, r7, r3
 8011de8:	00f3      	lsls	r3, r6, #3
 8011dea:	18d3      	adds	r3, r2, r3
 8011dec:	6018      	str	r0, [r3, #0]
 8011dee:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011df0:	229c      	movs	r2, #156	@ 0x9c
 8011df2:	18bb      	adds	r3, r7, r2
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	3301      	adds	r3, #1
 8011df8:	18ba      	adds	r2, r7, r2
 8011dfa:	6013      	str	r3, [r2, #0]
 8011dfc:	239c      	movs	r3, #156	@ 0x9c
 8011dfe:	18fb      	adds	r3, r7, r3
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2b3f      	cmp	r3, #63	@ 0x3f
 8011e04:	d99e      	bls.n	8011d44 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8011e06:	2380      	movs	r3, #128	@ 0x80
 8011e08:	18fb      	adds	r3, r7, r3
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	005b      	lsls	r3, r3, #1
 8011e0e:	001a      	movs	r2, r3
 8011e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011e12:	005b      	lsls	r3, r3, #1
 8011e14:	18d3      	adds	r3, r2, r3
 8011e16:	3b22      	subs	r3, #34	@ 0x22
 8011e18:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8011e1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e1c:	17da      	asrs	r2, r3, #31
 8011e1e:	189b      	adds	r3, r3, r2
 8011e20:	4053      	eors	r3, r2
 8011e22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011e24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	da62      	bge.n	8011ef0 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8011e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e2c:	3b20      	subs	r3, #32
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	db05      	blt.n	8011e3e <calculateSPLQ31+0x2ca>
 8011e32:	22a0      	movs	r2, #160	@ 0xa0
 8011e34:	18ba      	adds	r2, r7, r2
 8011e36:	6812      	ldr	r2, [r2, #0]
 8011e38:	409a      	lsls	r2, r3
 8011e3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e3c:	e010      	b.n	8011e60 <calculateSPLQ31+0x2ec>
 8011e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e40:	2220      	movs	r2, #32
 8011e42:	1ad3      	subs	r3, r2, r3
 8011e44:	22a0      	movs	r2, #160	@ 0xa0
 8011e46:	18ba      	adds	r2, r7, r2
 8011e48:	6812      	ldr	r2, [r2, #0]
 8011e4a:	40da      	lsrs	r2, r3
 8011e4c:	0013      	movs	r3, r2
 8011e4e:	22a4      	movs	r2, #164	@ 0xa4
 8011e50:	18ba      	adds	r2, r7, r2
 8011e52:	6811      	ldr	r1, [r2, #0]
 8011e54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011e56:	4091      	lsls	r1, r2
 8011e58:	6279      	str	r1, [r7, #36]	@ 0x24
 8011e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e5c:	431a      	orrs	r2, r3
 8011e5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e60:	21a0      	movs	r1, #160	@ 0xa0
 8011e62:	187b      	adds	r3, r7, r1
 8011e64:	681a      	ldr	r2, [r3, #0]
 8011e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e68:	409a      	lsls	r2, r3
 8011e6a:	623a      	str	r2, [r7, #32]
 8011e6c:	6a3b      	ldr	r3, [r7, #32]
 8011e6e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8011e70:	187a      	adds	r2, r7, r1
 8011e72:	6013      	str	r3, [r2, #0]
 8011e74:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011e76:	2300      	movs	r3, #0
 8011e78:	2298      	movs	r2, #152	@ 0x98
 8011e7a:	18ba      	adds	r2, r7, r2
 8011e7c:	6013      	str	r3, [r2, #0]
 8011e7e:	e031      	b.n	8011ee4 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8011e80:	2330      	movs	r3, #48	@ 0x30
 8011e82:	18fa      	adds	r2, r7, r3
 8011e84:	2398      	movs	r3, #152	@ 0x98
 8011e86:	18fb      	adds	r3, r7, r3
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	00db      	lsls	r3, r3, #3
 8011e8c:	18d3      	adds	r3, r2, r3
 8011e8e:	681a      	ldr	r2, [r3, #0]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011e94:	3920      	subs	r1, #32
 8011e96:	2900      	cmp	r1, #0
 8011e98:	db03      	blt.n	8011ea2 <calculateSPLQ31+0x32e>
 8011e9a:	0010      	movs	r0, r2
 8011e9c:	4088      	lsls	r0, r1
 8011e9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011ea0:	e00c      	b.n	8011ebc <calculateSPLQ31+0x348>
 8011ea2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011ea4:	2020      	movs	r0, #32
 8011ea6:	1a41      	subs	r1, r0, r1
 8011ea8:	0010      	movs	r0, r2
 8011eaa:	40c8      	lsrs	r0, r1
 8011eac:	0001      	movs	r1, r0
 8011eae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011eb0:	001c      	movs	r4, r3
 8011eb2:	4084      	lsls	r4, r0
 8011eb4:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8011eb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011eb8:	4308      	orrs	r0, r1
 8011eba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011ebc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011ebe:	0013      	movs	r3, r2
 8011ec0:	408b      	lsls	r3, r1
 8011ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ec4:	2330      	movs	r3, #48	@ 0x30
 8011ec6:	18fa      	adds	r2, r7, r3
 8011ec8:	2098      	movs	r0, #152	@ 0x98
 8011eca:	183b      	adds	r3, r7, r0
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	00db      	lsls	r3, r3, #3
 8011ed0:	18d3      	adds	r3, r2, r3
 8011ed2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ed6:	6019      	str	r1, [r3, #0]
 8011ed8:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011eda:	183b      	adds	r3, r7, r0
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	3301      	adds	r3, #1
 8011ee0:	183a      	adds	r2, r7, r0
 8011ee2:	6013      	str	r3, [r2, #0]
 8011ee4:	2398      	movs	r3, #152	@ 0x98
 8011ee6:	18fb      	adds	r3, r7, r3
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	2b05      	cmp	r3, #5
 8011eec:	d9c8      	bls.n	8011e80 <calculateSPLQ31+0x30c>
 8011eee:	e06b      	b.n	8011fc8 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8011ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ef2:	3b20      	subs	r3, #32
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	db13      	blt.n	8011f20 <calculateSPLQ31+0x3ac>
 8011ef8:	22a4      	movs	r2, #164	@ 0xa4
 8011efa:	18ba      	adds	r2, r7, r2
 8011efc:	6812      	ldr	r2, [r2, #0]
 8011efe:	40da      	lsrs	r2, r3
 8011f00:	61ba      	str	r2, [r7, #24]
 8011f02:	e01e      	b.n	8011f42 <calculateSPLQ31+0x3ce>
 8011f04:	20001afc 	.word	0x20001afc
 8011f08:	7fffffff 	.word	0x7fffffff
 8011f0c:	20001d48 	.word	0x20001d48
 8011f10:	200000d4 	.word	0x200000d4
 8011f14:	20001d50 	.word	0x20001d50
 8011f18:	200000d8 	.word	0x200000d8
 8011f1c:	200000e4 	.word	0x200000e4
 8011f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f22:	2220      	movs	r2, #32
 8011f24:	1ad3      	subs	r3, r2, r3
 8011f26:	22a4      	movs	r2, #164	@ 0xa4
 8011f28:	18ba      	adds	r2, r7, r2
 8011f2a:	6812      	ldr	r2, [r2, #0]
 8011f2c:	409a      	lsls	r2, r3
 8011f2e:	0013      	movs	r3, r2
 8011f30:	22a0      	movs	r2, #160	@ 0xa0
 8011f32:	18ba      	adds	r2, r7, r2
 8011f34:	6811      	ldr	r1, [r2, #0]
 8011f36:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f38:	40d1      	lsrs	r1, r2
 8011f3a:	61b9      	str	r1, [r7, #24]
 8011f3c:	69ba      	ldr	r2, [r7, #24]
 8011f3e:	431a      	orrs	r2, r3
 8011f40:	61ba      	str	r2, [r7, #24]
 8011f42:	23a4      	movs	r3, #164	@ 0xa4
 8011f44:	18fb      	adds	r3, r7, r3
 8011f46:	681a      	ldr	r2, [r3, #0]
 8011f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f4a:	40da      	lsrs	r2, r3
 8011f4c:	61fa      	str	r2, [r7, #28]
 8011f4e:	69ba      	ldr	r2, [r7, #24]
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	21a0      	movs	r1, #160	@ 0xa0
 8011f54:	1879      	adds	r1, r7, r1
 8011f56:	600a      	str	r2, [r1, #0]
 8011f58:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	2294      	movs	r2, #148	@ 0x94
 8011f5e:	18ba      	adds	r2, r7, r2
 8011f60:	6013      	str	r3, [r2, #0]
 8011f62:	e02c      	b.n	8011fbe <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8011f64:	2330      	movs	r3, #48	@ 0x30
 8011f66:	18fa      	adds	r2, r7, r3
 8011f68:	2394      	movs	r3, #148	@ 0x94
 8011f6a:	18fb      	adds	r3, r7, r3
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	00db      	lsls	r3, r3, #3
 8011f70:	18d3      	adds	r3, r2, r3
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011f78:	3920      	subs	r1, #32
 8011f7a:	2900      	cmp	r1, #0
 8011f7c:	db03      	blt.n	8011f86 <calculateSPLQ31+0x412>
 8011f7e:	0018      	movs	r0, r3
 8011f80:	40c8      	lsrs	r0, r1
 8011f82:	0004      	movs	r4, r0
 8011f84:	e00a      	b.n	8011f9c <calculateSPLQ31+0x428>
 8011f86:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011f88:	2020      	movs	r0, #32
 8011f8a:	1a41      	subs	r1, r0, r1
 8011f8c:	0018      	movs	r0, r3
 8011f8e:	4088      	lsls	r0, r1
 8011f90:	0001      	movs	r1, r0
 8011f92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011f94:	0016      	movs	r6, r2
 8011f96:	40c6      	lsrs	r6, r0
 8011f98:	0034      	movs	r4, r6
 8011f9a:	430c      	orrs	r4, r1
 8011f9c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011f9e:	40cb      	lsrs	r3, r1
 8011fa0:	001d      	movs	r5, r3
 8011fa2:	2330      	movs	r3, #48	@ 0x30
 8011fa4:	18fa      	adds	r2, r7, r3
 8011fa6:	2194      	movs	r1, #148	@ 0x94
 8011fa8:	187b      	adds	r3, r7, r1
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	00db      	lsls	r3, r3, #3
 8011fae:	18d3      	adds	r3, r2, r3
 8011fb0:	601c      	str	r4, [r3, #0]
 8011fb2:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011fb4:	187b      	adds	r3, r7, r1
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	3301      	adds	r3, #1
 8011fba:	187a      	adds	r2, r7, r1
 8011fbc:	6013      	str	r3, [r2, #0]
 8011fbe:	2394      	movs	r3, #148	@ 0x94
 8011fc0:	18fb      	adds	r3, r7, r3
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b05      	cmp	r3, #5
 8011fc6:	d9cd      	bls.n	8011f64 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8011fc8:	230f      	movs	r3, #15
 8011fca:	425d      	negs	r5, r3
 8011fcc:	2305      	movs	r3, #5
 8011fce:	425e      	negs	r6, r3
 8011fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80120fc <calculateSPLQ31+0x588>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	681a      	ldr	r2, [r3, #0]
 8011fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8012100 <calculateSPLQ31+0x58c>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	21a0      	movs	r1, #160	@ 0xa0
 8011fde:	1879      	adds	r1, r7, r1
 8011fe0:	6808      	ldr	r0, [r1, #0]
 8011fe2:	6849      	ldr	r1, [r1, #4]
 8011fe4:	4c47      	ldr	r4, [pc, #284]	@ (8012104 <calculateSPLQ31+0x590>)
 8011fe6:	9403      	str	r4, [sp, #12]
 8011fe8:	4c47      	ldr	r4, [pc, #284]	@ (8012108 <calculateSPLQ31+0x594>)
 8011fea:	9402      	str	r4, [sp, #8]
 8011fec:	9301      	str	r3, [sp, #4]
 8011fee:	9200      	str	r2, [sp, #0]
 8011ff0:	0033      	movs	r3, r6
 8011ff2:	002a      	movs	r2, r5
 8011ff4:	f000 fa86 	bl	8012504 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	2290      	movs	r2, #144	@ 0x90
 8011ffc:	18ba      	adds	r2, r7, r2
 8011ffe:	6013      	str	r3, [r2, #0]
 8012000:	e026      	b.n	8012050 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8012002:	2330      	movs	r3, #48	@ 0x30
 8012004:	18fa      	adds	r2, r7, r3
 8012006:	2490      	movs	r4, #144	@ 0x90
 8012008:	193b      	adds	r3, r7, r4
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	00db      	lsls	r3, r3, #3
 801200e:	18d3      	adds	r3, r2, r3
 8012010:	6818      	ldr	r0, [r3, #0]
 8012012:	6859      	ldr	r1, [r3, #4]
 8012014:	230f      	movs	r3, #15
 8012016:	425d      	negs	r5, r3
 8012018:	2305      	movs	r3, #5
 801201a:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 801201c:	193b      	adds	r3, r7, r4
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	009a      	lsls	r2, r3, #2
 8012022:	4b3a      	ldr	r3, [pc, #232]	@ (801210c <calculateSPLQ31+0x598>)
 8012024:	18d3      	adds	r3, r2, r3
 8012026:	193a      	adds	r2, r7, r4
 8012028:	6812      	ldr	r2, [r2, #0]
 801202a:	0094      	lsls	r4, r2, #2
 801202c:	4a38      	ldr	r2, [pc, #224]	@ (8012110 <calculateSPLQ31+0x59c>)
 801202e:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8012030:	9203      	str	r2, [sp, #12]
 8012032:	9302      	str	r3, [sp, #8]
 8012034:	2300      	movs	r3, #0
 8012036:	9301      	str	r3, [sp, #4]
 8012038:	2300      	movs	r3, #0
 801203a:	9300      	str	r3, [sp, #0]
 801203c:	0033      	movs	r3, r6
 801203e:	002a      	movs	r2, r5
 8012040:	f000 fa60 	bl	8012504 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012044:	2490      	movs	r4, #144	@ 0x90
 8012046:	193b      	adds	r3, r7, r4
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	3301      	adds	r3, #1
 801204c:	193a      	adds	r2, r7, r4
 801204e:	6013      	str	r3, [r2, #0]
 8012050:	2390      	movs	r3, #144	@ 0x90
 8012052:	18fb      	adds	r3, r7, r3
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	2b05      	cmp	r3, #5
 8012058:	d9d3      	bls.n	8012002 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 801205a:	4b2b      	ldr	r3, [pc, #172]	@ (8012108 <calculateSPLQ31+0x594>)
 801205c:	681a      	ldr	r2, [r3, #0]
 801205e:	4b2d      	ldr	r3, [pc, #180]	@ (8012114 <calculateSPLQ31+0x5a0>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	18d2      	adds	r2, r2, r3
 8012064:	4b2b      	ldr	r3, [pc, #172]	@ (8012114 <calculateSPLQ31+0x5a0>)
 8012066:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8012068:	4b26      	ldr	r3, [pc, #152]	@ (8012104 <calculateSPLQ31+0x590>)
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	4b2a      	ldr	r3, [pc, #168]	@ (8012118 <calculateSPLQ31+0x5a4>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	18d2      	adds	r2, r2, r3
 8012072:	4b29      	ldr	r3, [pc, #164]	@ (8012118 <calculateSPLQ31+0x5a4>)
 8012074:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012076:	2300      	movs	r3, #0
 8012078:	228c      	movs	r2, #140	@ 0x8c
 801207a:	18ba      	adds	r2, r7, r2
 801207c:	6013      	str	r3, [r2, #0]
 801207e:	e025      	b.n	80120cc <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 8012080:	4b22      	ldr	r3, [pc, #136]	@ (801210c <calculateSPLQ31+0x598>)
 8012082:	208c      	movs	r0, #140	@ 0x8c
 8012084:	183a      	adds	r2, r7, r0
 8012086:	6812      	ldr	r2, [r2, #0]
 8012088:	0092      	lsls	r2, r2, #2
 801208a:	58d2      	ldr	r2, [r2, r3]
 801208c:	4b23      	ldr	r3, [pc, #140]	@ (801211c <calculateSPLQ31+0x5a8>)
 801208e:	1839      	adds	r1, r7, r0
 8012090:	6809      	ldr	r1, [r1, #0]
 8012092:	0089      	lsls	r1, r1, #2
 8012094:	58cb      	ldr	r3, [r1, r3]
 8012096:	18d1      	adds	r1, r2, r3
 8012098:	4b20      	ldr	r3, [pc, #128]	@ (801211c <calculateSPLQ31+0x5a8>)
 801209a:	183a      	adds	r2, r7, r0
 801209c:	6812      	ldr	r2, [r2, #0]
 801209e:	0092      	lsls	r2, r2, #2
 80120a0:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80120a2:	4b1b      	ldr	r3, [pc, #108]	@ (8012110 <calculateSPLQ31+0x59c>)
 80120a4:	183a      	adds	r2, r7, r0
 80120a6:	6812      	ldr	r2, [r2, #0]
 80120a8:	0092      	lsls	r2, r2, #2
 80120aa:	58d2      	ldr	r2, [r2, r3]
 80120ac:	4b1c      	ldr	r3, [pc, #112]	@ (8012120 <calculateSPLQ31+0x5ac>)
 80120ae:	1839      	adds	r1, r7, r0
 80120b0:	6809      	ldr	r1, [r1, #0]
 80120b2:	0089      	lsls	r1, r1, #2
 80120b4:	58cb      	ldr	r3, [r1, r3]
 80120b6:	18d1      	adds	r1, r2, r3
 80120b8:	4b19      	ldr	r3, [pc, #100]	@ (8012120 <calculateSPLQ31+0x5ac>)
 80120ba:	183a      	adds	r2, r7, r0
 80120bc:	6812      	ldr	r2, [r2, #0]
 80120be:	0092      	lsls	r2, r2, #2
 80120c0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80120c2:	183b      	adds	r3, r7, r0
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	3301      	adds	r3, #1
 80120c8:	183a      	adds	r2, r7, r0
 80120ca:	6013      	str	r3, [r2, #0]
 80120cc:	238c      	movs	r3, #140	@ 0x8c
 80120ce:	18fb      	adds	r3, r7, r3
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	2b05      	cmp	r3, #5
 80120d4:	d9d4      	bls.n	8012080 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 80120d6:	4b13      	ldr	r3, [pc, #76]	@ (8012124 <calculateSPLQ31+0x5b0>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	1c5a      	adds	r2, r3, #1
 80120dc:	4b11      	ldr	r3, [pc, #68]	@ (8012124 <calculateSPLQ31+0x5b0>)
 80120de:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 80120e0:	4b10      	ldr	r3, [pc, #64]	@ (8012124 <calculateSPLQ31+0x5b0>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2b0f      	cmp	r3, #15
 80120e6:	d905      	bls.n	80120f4 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 80120e8:	4b0f      	ldr	r3, [pc, #60]	@ (8012128 <calculateSPLQ31+0x5b4>)
 80120ea:	2201      	movs	r2, #1
 80120ec:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80120ee:	4b0f      	ldr	r3, [pc, #60]	@ (801212c <calculateSPLQ31+0x5b8>)
 80120f0:	2200      	movs	r2, #0
 80120f2:	701a      	strb	r2, [r3, #0]
    }
}
 80120f4:	46c0      	nop			@ (mov r8, r8)
 80120f6:	46bd      	mov	sp, r7
 80120f8:	b02f      	add	sp, #188	@ 0xbc
 80120fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120fc:	200000dc 	.word	0x200000dc
 8012100:	200000e0 	.word	0x200000e0
 8012104:	200012c8 	.word	0x200012c8
 8012108:	200012c4 	.word	0x200012c4
 801210c:	200012cc 	.word	0x200012cc
 8012110:	200012e4 	.word	0x200012e4
 8012114:	20001d0c 	.word	0x20001d0c
 8012118:	20001d10 	.word	0x20001d10
 801211c:	20001d14 	.word	0x20001d14
 8012120:	20001d2c 	.word	0x20001d2c
 8012124:	20001d44 	.word	0x20001d44
 8012128:	200012b9 	.word	0x200012b9
 801212c:	200012b7 	.word	0x200012b7

08012130 <resetSPLstate>:

static void resetSPLstate(void)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8012136:	4b11      	ldr	r3, [pc, #68]	@ (801217c <resetSPLstate+0x4c>)
 8012138:	2200      	movs	r2, #0
 801213a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 801213c:	4b10      	ldr	r3, [pc, #64]	@ (8012180 <resetSPLstate+0x50>)
 801213e:	2200      	movs	r2, #0
 8012140:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 8012142:	4b10      	ldr	r3, [pc, #64]	@ (8012184 <resetSPLstate+0x54>)
 8012144:	2200      	movs	r2, #0
 8012146:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012148:	2300      	movs	r3, #0
 801214a:	607b      	str	r3, [r7, #4]
 801214c:	e00c      	b.n	8012168 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 801214e:	4b0e      	ldr	r3, [pc, #56]	@ (8012188 <resetSPLstate+0x58>)
 8012150:	687a      	ldr	r2, [r7, #4]
 8012152:	0092      	lsls	r2, r2, #2
 8012154:	2100      	movs	r1, #0
 8012156:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8012158:	4b0c      	ldr	r3, [pc, #48]	@ (801218c <resetSPLstate+0x5c>)
 801215a:	687a      	ldr	r2, [r7, #4]
 801215c:	0092      	lsls	r2, r2, #2
 801215e:	2100      	movs	r1, #0
 8012160:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	3301      	adds	r3, #1
 8012166:	607b      	str	r3, [r7, #4]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2b05      	cmp	r3, #5
 801216c:	d9ef      	bls.n	801214e <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 801216e:	4b08      	ldr	r3, [pc, #32]	@ (8012190 <resetSPLstate+0x60>)
 8012170:	2200      	movs	r2, #0
 8012172:	701a      	strb	r2, [r3, #0]
}
 8012174:	46c0      	nop			@ (mov r8, r8)
 8012176:	46bd      	mov	sp, r7
 8012178:	b002      	add	sp, #8
 801217a:	bd80      	pop	{r7, pc}
 801217c:	20001d0c 	.word	0x20001d0c
 8012180:	20001d10 	.word	0x20001d10
 8012184:	20001d44 	.word	0x20001d44
 8012188:	20001d14 	.word	0x20001d14
 801218c:	20001d2c 	.word	0x20001d2c
 8012190:	200012b9 	.word	0x200012b9

08012194 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 8012194:	b5b0      	push	{r4, r5, r7, lr}
 8012196:	b090      	sub	sp, #64	@ 0x40
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	0019      	movs	r1, r3
 80121a0:	1dfb      	adds	r3, r7, #7
 80121a2:	701a      	strb	r2, [r3, #0]
 80121a4:	1dbb      	adds	r3, r7, #6
 80121a6:	1c0a      	adds	r2, r1, #0
 80121a8:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 80121aa:	1dfb      	adds	r3, r7, #7
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d005      	beq.n	80121be <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 80121b2:	4b3b      	ldr	r3, [pc, #236]	@ (80122a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 80121b4:	2200      	movs	r2, #0
 80121b6:	601a      	str	r2, [r3, #0]
        lastData = 0;
 80121b8:	4b3a      	ldr	r3, [pc, #232]	@ (80122a4 <getFilteredMaxAmplitudeQ31+0x110>)
 80121ba:	2200      	movs	r2, #0
 80121bc:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 80121be:	2300      	movs	r3, #0
 80121c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 80121c2:	2300      	movs	r3, #0
 80121c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 80121c6:	2305      	movs	r3, #5
 80121c8:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 80121ca:	2300      	movs	r3, #0
 80121cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80121ce:	e040      	b.n	8012252 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 80121d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	68fa      	ldr	r2, [r7, #12]
 80121d6:	18d3      	adds	r3, r2, r3
 80121d8:	681a      	ldr	r2, [r3, #0]
 80121da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121dc:	409a      	lsls	r2, r3
 80121de:	0013      	movs	r3, r2
 80121e0:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 80121e2:	4b30      	ldr	r3, [pc, #192]	@ (80122a4 <getFilteredMaxAmplitudeQ31+0x110>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	425a      	negs	r2, r3
 80121e8:	4b2e      	ldr	r3, [pc, #184]	@ (80122a4 <getFilteredMaxAmplitudeQ31+0x110>)
 80121ea:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 80121ec:	2418      	movs	r4, #24
 80121ee:	193a      	adds	r2, r7, r4
 80121f0:	492c      	ldr	r1, [pc, #176]	@ (80122a4 <getFilteredMaxAmplitudeQ31+0x110>)
 80121f2:	231c      	movs	r3, #28
 80121f4:	18f8      	adds	r0, r7, r3
 80121f6:	2301      	movs	r3, #1
 80121f8:	f012 fb82 	bl	8024900 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 80121fc:	2514      	movs	r5, #20
 80121fe:	197a      	adds	r2, r7, r5
 8012200:	1939      	adds	r1, r7, r4
 8012202:	4829      	ldr	r0, [pc, #164]	@ (80122a8 <getFilteredMaxAmplitudeQ31+0x114>)
 8012204:	2301      	movs	r3, #1
 8012206:	f012 fb49 	bl	802489c <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 801220a:	2410      	movs	r4, #16
 801220c:	193a      	adds	r2, r7, r4
 801220e:	4924      	ldr	r1, [pc, #144]	@ (80122a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012210:	4826      	ldr	r0, [pc, #152]	@ (80122ac <getFilteredMaxAmplitudeQ31+0x118>)
 8012212:	2301      	movs	r3, #1
 8012214:	f012 fb42 	bl	802489c <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8012218:	4a21      	ldr	r2, [pc, #132]	@ (80122a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801221a:	1939      	adds	r1, r7, r4
 801221c:	1978      	adds	r0, r7, r5
 801221e:	2301      	movs	r3, #1
 8012220:	f012 fb6e 	bl	8024900 <arm_add_q31>

        lastData = fx;
 8012224:	69fa      	ldr	r2, [r7, #28]
 8012226:	4b1f      	ldr	r3, [pc, #124]	@ (80122a4 <getFilteredMaxAmplitudeQ31+0x110>)
 8012228:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 801222a:	4b1d      	ldr	r3, [pc, #116]	@ (80122a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012230:	429a      	cmp	r2, r3
 8012232:	da03      	bge.n	801223c <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8012234:	4b1a      	ldr	r3, [pc, #104]	@ (80122a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801223a:	e007      	b.n	801224c <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 801223c:	4b18      	ldr	r3, [pc, #96]	@ (80122a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012242:	429a      	cmp	r2, r3
 8012244:	dd02      	ble.n	801224c <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8012246:	4b16      	ldr	r3, [pc, #88]	@ (80122a0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 801224c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801224e:	3301      	adds	r3, #1
 8012250:	637b      	str	r3, [r7, #52]	@ 0x34
 8012252:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	429a      	cmp	r2, r3
 8012258:	d3ba      	bcc.n	80121d0 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 801225a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801225c:	17da      	asrs	r2, r3, #31
 801225e:	189b      	adds	r3, r3, r2
 8012260:	4053      	eors	r3, r2
 8012262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 8012264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012266:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8012268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801226a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801226c:	4293      	cmp	r3, r2
 801226e:	d200      	bcs.n	8012272 <getFilteredMaxAmplitudeQ31+0xde>
 8012270:	0013      	movs	r3, r2
 8012272:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 8012274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012278:	40da      	lsrs	r2, r3
 801227a:	0013      	movs	r3, r2
 801227c:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 801227e:	1dbb      	adds	r3, r7, #6
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d007      	beq.n	8012296 <getFilteredMaxAmplitudeQ31+0x102>
 8012286:	4b0a      	ldr	r3, [pc, #40]	@ (80122b0 <getFilteredMaxAmplitudeQ31+0x11c>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	6a3a      	ldr	r2, [r7, #32]
 801228c:	429a      	cmp	r2, r3
 801228e:	d902      	bls.n	8012296 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 8012290:	4b07      	ldr	r3, [pc, #28]	@ (80122b0 <getFilteredMaxAmplitudeQ31+0x11c>)
 8012292:	6a3a      	ldr	r2, [r7, #32]
 8012294:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 8012296:	6a3b      	ldr	r3, [r7, #32]
}
 8012298:	0018      	movs	r0, r3
 801229a:	46bd      	mov	sp, r7
 801229c:	b010      	add	sp, #64	@ 0x40
 801229e:	bdb0      	pop	{r4, r5, r7, pc}
 80122a0:	20002148 	.word	0x20002148
 80122a4:	2000214c 	.word	0x2000214c
 80122a8:	0802e400 	.word	0x0802e400
 80122ac:	0802e404 	.word	0x0802e404
 80122b0:	200012c0 	.word	0x200012c0

080122b4 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 80122c0:	4913      	ldr	r1, [pc, #76]	@ (8012310 <floatToIntAndFrac2dp+0x5c>)
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	f7ee febc 	bl	8001040 <__aeabi_fmul>
 80122c8:	1c03      	adds	r3, r0, #0
 80122ca:	1c18      	adds	r0, r3, #0
 80122cc:	f016 fff0 	bl	80292b0 <roundf>
 80122d0:	1c03      	adds	r3, r0, #0
 80122d2:	1c18      	adds	r0, r3, #0
 80122d4:	f7ee f9a2 	bl	800061c <__aeabi_f2uiz>
 80122d8:	0003      	movs	r3, r0
 80122da:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	2164      	movs	r1, #100	@ 0x64
 80122e0:	0018      	movs	r0, r3
 80122e2:	f7ed ff5f 	bl	80001a4 <__udivsi3>
 80122e6:	0003      	movs	r3, r0
 80122e8:	001a      	movs	r2, r3
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	b2da      	uxtb	r2, r3
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	b2db      	uxtb	r3, r3
 80122f8:	2164      	movs	r1, #100	@ 0x64
 80122fa:	434b      	muls	r3, r1
 80122fc:	b2db      	uxtb	r3, r3
 80122fe:	1ad3      	subs	r3, r2, r3
 8012300:	b2da      	uxtb	r2, r3
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	701a      	strb	r2, [r3, #0]
}
 8012306:	46c0      	nop			@ (mov r8, r8)
 8012308:	46bd      	mov	sp, r7
 801230a:	b006      	add	sp, #24
 801230c:	bd80      	pop	{r7, pc}
 801230e:	46c0      	nop			@ (mov r8, r8)
 8012310:	42c80000 	.word	0x42c80000

08012314 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b086      	sub	sp, #24
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8012320:	4914      	ldr	r1, [pc, #80]	@ (8012374 <floatToIntAndFrac1dp+0x60>)
 8012322:	68f8      	ldr	r0, [r7, #12]
 8012324:	f7ee fe8c 	bl	8001040 <__aeabi_fmul>
 8012328:	1c03      	adds	r3, r0, #0
 801232a:	1c18      	adds	r0, r3, #0
 801232c:	f016 ffc0 	bl	80292b0 <roundf>
 8012330:	1c03      	adds	r3, r0, #0
 8012332:	1c18      	adds	r0, r3, #0
 8012334:	f7ee f972 	bl	800061c <__aeabi_f2uiz>
 8012338:	0003      	movs	r3, r0
 801233a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	210a      	movs	r1, #10
 8012340:	0018      	movs	r0, r3
 8012342:	f7ed ff2f 	bl	80001a4 <__udivsi3>
 8012346:	0003      	movs	r3, r0
 8012348:	001a      	movs	r2, r3
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	b2da      	uxtb	r2, r3
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	b2db      	uxtb	r3, r3
 8012358:	1c19      	adds	r1, r3, #0
 801235a:	0089      	lsls	r1, r1, #2
 801235c:	18cb      	adds	r3, r1, r3
 801235e:	18db      	adds	r3, r3, r3
 8012360:	b2db      	uxtb	r3, r3
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	b2da      	uxtb	r2, r3
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	701a      	strb	r2, [r3, #0]
}
 801236a:	46c0      	nop			@ (mov r8, r8)
 801236c:	46bd      	mov	sp, r7
 801236e:	b006      	add	sp, #24
 8012370:	bd80      	pop	{r7, pc}
 8012372:	46c0      	nop			@ (mov r8, r8)
 8012374:	41200000 	.word	0x41200000

08012378 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8012378:	b590      	push	{r4, r7, lr}
 801237a:	b087      	sub	sp, #28
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	607a      	str	r2, [r7, #4]
 8012384:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f7ef fa4e 	bl	8001828 <__aeabi_i2f>
 801238c:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 801238e:	6838      	ldr	r0, [r7, #0]
 8012390:	f7ef fa4a 	bl	8001828 <__aeabi_i2f>
 8012394:	1c03      	adds	r3, r0, #0
 8012396:	4918      	ldr	r1, [pc, #96]	@ (80123f8 <sumToIntAverage+0x80>)
 8012398:	1c18      	adds	r0, r3, #0
 801239a:	f7ee fc83 	bl	8000ca4 <__aeabi_fdiv>
 801239e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80123a0:	1c19      	adds	r1, r3, #0
 80123a2:	1c20      	adds	r0, r4, #0
 80123a4:	f7ee fa8c 	bl	80008c0 <__aeabi_fadd>
 80123a8:	1c03      	adds	r3, r0, #0
 80123aa:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80123ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80123ae:	f7ef fa8b 	bl	80018c8 <__aeabi_ui2f>
 80123b2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80123b4:	1c19      	adds	r1, r3, #0
 80123b6:	1c20      	adds	r0, r4, #0
 80123b8:	f7ee fc74 	bl	8000ca4 <__aeabi_fdiv>
 80123bc:	1c03      	adds	r3, r0, #0
 80123be:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 80123c0:	2300      	movs	r3, #0
 80123c2:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 80123c4:	68ba      	ldr	r2, [r7, #8]
 80123c6:	2310      	movs	r3, #16
 80123c8:	18f9      	adds	r1, r7, r3
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	1c18      	adds	r0, r3, #0
 80123ce:	f7ff ffa1 	bl	8012314 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	2bff      	cmp	r3, #255	@ 0xff
 80123d6:	d906      	bls.n	80123e6 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	22ff      	movs	r2, #255	@ 0xff
 80123dc:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	2209      	movs	r2, #9
 80123e2:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 80123e4:	e003      	b.n	80123ee <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	b2da      	uxtb	r2, r3
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	701a      	strb	r2, [r3, #0]
}
 80123ee:	46c0      	nop			@ (mov r8, r8)
 80123f0:	46bd      	mov	sp, r7
 80123f2:	b007      	add	sp, #28
 80123f4:	bd90      	pop	{r4, r7, pc}
 80123f6:	46c0      	nop			@ (mov r8, r8)
 80123f8:	41200000 	.word	0x41200000

080123fc <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b086      	sub	sp, #24
 8012400:	af00      	add	r7, sp, #0
 8012402:	60f8      	str	r0, [r7, #12]
 8012404:	60b9      	str	r1, [r7, #8]
 8012406:	607a      	str	r2, [r7, #4]
 8012408:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	2280      	movs	r2, #128	@ 0x80
 801240e:	0612      	lsls	r2, r2, #24
 8012410:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	4a18      	ldr	r2, [pc, #96]	@ (8012478 <findMinMax+0x7c>)
 8012416:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012418:	2300      	movs	r3, #0
 801241a:	617b      	str	r3, [r7, #20]
 801241c:	e022      	b.n	8012464 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	18d3      	adds	r3, r2, r3
 8012426:	681a      	ldr	r2, [r3, #0]
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	429a      	cmp	r2, r3
 801242e:	da06      	bge.n	801243e <findMinMax+0x42>
        {
            min[0] = array[i];
 8012430:	697b      	ldr	r3, [r7, #20]
 8012432:	009b      	lsls	r3, r3, #2
 8012434:	687a      	ldr	r2, [r7, #4]
 8012436:	18d3      	adds	r3, r2, r3
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	18d3      	adds	r3, r2, r3
 8012446:	681a      	ldr	r2, [r3, #0]
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	429a      	cmp	r2, r3
 801244e:	dd06      	ble.n	801245e <findMinMax+0x62>
        {
            max[0] = array[i];
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	009b      	lsls	r3, r3, #2
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	18d3      	adds	r3, r2, r3
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	3301      	adds	r3, #1
 8012462:	617b      	str	r3, [r7, #20]
 8012464:	697a      	ldr	r2, [r7, #20]
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	429a      	cmp	r2, r3
 801246a:	d3d8      	bcc.n	801241e <findMinMax+0x22>
        }
    }
}
 801246c:	46c0      	nop			@ (mov r8, r8)
 801246e:	46c0      	nop			@ (mov r8, r8)
 8012470:	46bd      	mov	sp, r7
 8012472:	b006      	add	sp, #24
 8012474:	bd80      	pop	{r7, pc}
 8012476:	46c0      	nop			@ (mov r8, r8)
 8012478:	7fffffff 	.word	0x7fffffff

0801247c <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8012486:	2300      	movs	r3, #0
 8012488:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 801248a:	687a      	ldr	r2, [r7, #4]
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	429a      	cmp	r2, r3
 8012490:	d302      	bcc.n	8012498 <getPo2factor+0x1c>
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d107      	bne.n	80124a8 <getPo2factor+0x2c>
    {
        return 0;
 8012498:	2300      	movs	r3, #0
 801249a:	e00d      	b.n	80124b8 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	085b      	lsrs	r3, r3, #1
 80124a0:	607b      	str	r3, [r7, #4]
        bitShift++;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	3301      	adds	r3, #1
 80124a6:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 80124a8:	687a      	ldr	r2, [r7, #4]
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d2f5      	bcs.n	801249c <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	3b01      	subs	r3, #1
 80124b4:	60fb      	str	r3, [r7, #12]
    return bitShift;
 80124b6:	68fb      	ldr	r3, [r7, #12]
}
 80124b8:	0018      	movs	r0, r3
 80124ba:	46bd      	mov	sp, r7
 80124bc:	b004      	add	sp, #16
 80124be:	bd80      	pop	{r7, pc}

080124c0 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b086      	sub	sp, #24
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	607a      	str	r2, [r7, #4]
 80124cc:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f7ef f9fa 	bl	80018c8 <__aeabi_ui2f>
 80124d4:	1c03      	adds	r3, r0, #0
 80124d6:	1c19      	adds	r1, r3, #0
 80124d8:	68b8      	ldr	r0, [r7, #8]
 80124da:	f7ee fdb1 	bl	8001040 <__aeabi_fmul>
 80124de:	1c03      	adds	r3, r0, #0
 80124e0:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 80124e2:	2300      	movs	r3, #0
 80124e4:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 80124e6:	683a      	ldr	r2, [r7, #0]
 80124e8:	2310      	movs	r3, #16
 80124ea:	18f9      	adds	r1, r7, r3
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	1c18      	adds	r0, r3, #0
 80124f0:	f7ff fee0 	bl	80122b4 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	801a      	strh	r2, [r3, #0]
}
 80124fc:	46c0      	nop			@ (mov r8, r8)
 80124fe:	46bd      	mov	sp, r7
 8012500:	b006      	add	sp, #24
 8012502:	bd80      	pop	{r7, pc}

08012504 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b084      	sub	sp, #16
 8012508:	af00      	add	r7, sp, #0
 801250a:	60b8      	str	r0, [r7, #8]
 801250c:	60f9      	str	r1, [r7, #12]
 801250e:	607a      	str	r2, [r7, #4]
 8012510:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8012512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012514:	6a3a      	ldr	r2, [r7, #32]
 8012516:	68b8      	ldr	r0, [r7, #8]
 8012518:	68f9      	ldr	r1, [r7, #12]
 801251a:	f7f9 fe27 	bl	800c16c <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 801251e:	6a3b      	ldr	r3, [r7, #32]
 8012520:	681a      	ldr	r2, [r3, #0]
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	18d2      	adds	r2, r2, r3
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	18d2      	adds	r2, r2, r3
 801252a:	6a3b      	ldr	r3, [r7, #32]
 801252c:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 801252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	18d2      	adds	r2, r2, r3
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	18d2      	adds	r2, r2, r3
 801253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801253c:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 801253e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012540:	6a3b      	ldr	r3, [r7, #32]
 8012542:	0011      	movs	r1, r2
 8012544:	0018      	movs	r0, r3
 8012546:	f7f9 fea1 	bl	800c28c <correctIntFracNumber>
}
 801254a:	46c0      	nop			@ (mov r8, r8)
 801254c:	46bd      	mov	sp, r7
 801254e:	b004      	add	sp, #16
 8012550:	bd80      	pop	{r7, pc}

08012552 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 8012552:	b580      	push	{r7, lr}
 8012554:	b086      	sub	sp, #24
 8012556:	af00      	add	r7, sp, #0
 8012558:	60f8      	str	r0, [r7, #12]
 801255a:	60b9      	str	r1, [r7, #8]
 801255c:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 801255e:	2300      	movs	r3, #0
 8012560:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8012562:	2300      	movs	r3, #0
 8012564:	613b      	str	r3, [r7, #16]
 8012566:	e019      	b.n	801259c <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	005b      	lsls	r3, r3, #1
 801256c:	68fa      	ldr	r2, [r7, #12]
 801256e:	18d3      	adds	r3, r2, r3
 8012570:	881b      	ldrh	r3, [r3, #0]
 8012572:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8012574:	693a      	ldr	r2, [r7, #16]
 8012576:	3201      	adds	r2, #1
 8012578:	0052      	lsls	r2, r2, #1
 801257a:	68f9      	ldr	r1, [r7, #12]
 801257c:	188a      	adds	r2, r1, r2
 801257e:	8812      	ldrh	r2, [r2, #0]
 8012580:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8012582:	0019      	movs	r1, r3
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 801258c:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801258e:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	3301      	adds	r3, #1
 8012594:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8012596:	693b      	ldr	r3, [r7, #16]
 8012598:	3304      	adds	r3, #4
 801259a:	613b      	str	r3, [r7, #16]
 801259c:	693a      	ldr	r2, [r7, #16]
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d3e1      	bcc.n	8012568 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 80125a4:	46c0      	nop			@ (mov r8, r8)
 80125a6:	46c0      	nop			@ (mov r8, r8)
 80125a8:	46bd      	mov	sp, r7
 80125aa:	b006      	add	sp, #24
 80125ac:	bd80      	pop	{r7, pc}
	...

080125b0 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
float batteryCharge = 0.0;

void InitDone(){
 80125b0:	b580      	push	{r7, lr}
 80125b2:	af00      	add	r7, sp, #0
  init = false;
 80125b4:	4b02      	ldr	r3, [pc, #8]	@ (80125c0 <InitDone+0x10>)
 80125b6:	2200      	movs	r2, #0
 80125b8:	701a      	strb	r2, [r3, #0]
}
 80125ba:	46c0      	nop			@ (mov r8, r8)
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	200000e8 	.word	0x200000e8

080125c4 <batteryChargeCheck>:
  "De Omgevingsmonitor" will refuse to upload data to openSenseMap.org if the voltage under load drops below 3.77V with SEN5x attached.
  Without a SEN5x attached the Omgevingsmonitor stops sending to OpenSenseMap at 3.75V

 */

Battery_Status batteryChargeCheck(){
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 80125ca:	f7f7 fa11 	bl	80099f0 <ReadBatteryVoltage>
 80125ce:	1c02      	adds	r2, r0, #0
 80125d0:	4b25      	ldr	r3, [pc, #148]	@ (8012668 <batteryChargeCheck+0xa4>)
 80125d2:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.75){
 80125d4:	4b24      	ldr	r3, [pc, #144]	@ (8012668 <batteryChargeCheck+0xa4>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	4924      	ldr	r1, [pc, #144]	@ (801266c <batteryChargeCheck+0xa8>)
 80125da:	1c18      	adds	r0, r3, #0
 80125dc:	f7ed ffa8 	bl	8000530 <__aeabi_fcmplt>
 80125e0:	1e03      	subs	r3, r0, #0
 80125e2:	d002      	beq.n	80125ea <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 80125e4:	1dfb      	adds	r3, r7, #7
 80125e6:	2200      	movs	r2, #0
 80125e8:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.75 && batteryCharge < 3.85){
 80125ea:	4b1f      	ldr	r3, [pc, #124]	@ (8012668 <batteryChargeCheck+0xa4>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	491f      	ldr	r1, [pc, #124]	@ (801266c <batteryChargeCheck+0xa8>)
 80125f0:	1c18      	adds	r0, r3, #0
 80125f2:	f7ed ffbb 	bl	800056c <__aeabi_fcmpge>
 80125f6:	1e03      	subs	r3, r0, #0
 80125f8:	d00d      	beq.n	8012616 <batteryChargeCheck+0x52>
 80125fa:	4b1b      	ldr	r3, [pc, #108]	@ (8012668 <batteryChargeCheck+0xa4>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	1c18      	adds	r0, r3, #0
 8012600:	f7f1 f948 	bl	8003894 <__aeabi_f2d>
 8012604:	4a1a      	ldr	r2, [pc, #104]	@ (8012670 <batteryChargeCheck+0xac>)
 8012606:	4b1b      	ldr	r3, [pc, #108]	@ (8012674 <batteryChargeCheck+0xb0>)
 8012608:	f7ed ff58 	bl	80004bc <__aeabi_dcmplt>
 801260c:	1e03      	subs	r3, r0, #0
 801260e:	d002      	beq.n	8012616 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 8012610:	1dfb      	adds	r3, r7, #7
 8012612:	2201      	movs	r2, #1
 8012614:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.85 && batteryCharge < 4.00){
 8012616:	4b14      	ldr	r3, [pc, #80]	@ (8012668 <batteryChargeCheck+0xa4>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	1c18      	adds	r0, r3, #0
 801261c:	f7f1 f93a 	bl	8003894 <__aeabi_f2d>
 8012620:	4a13      	ldr	r2, [pc, #76]	@ (8012670 <batteryChargeCheck+0xac>)
 8012622:	4b14      	ldr	r3, [pc, #80]	@ (8012674 <batteryChargeCheck+0xb0>)
 8012624:	f7ed ff68 	bl	80004f8 <__aeabi_dcmpge>
 8012628:	1e03      	subs	r3, r0, #0
 801262a:	d00b      	beq.n	8012644 <batteryChargeCheck+0x80>
 801262c:	4b0e      	ldr	r3, [pc, #56]	@ (8012668 <batteryChargeCheck+0xa4>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	2181      	movs	r1, #129	@ 0x81
 8012632:	05c9      	lsls	r1, r1, #23
 8012634:	1c18      	adds	r0, r3, #0
 8012636:	f7ed ff7b 	bl	8000530 <__aeabi_fcmplt>
 801263a:	1e03      	subs	r3, r0, #0
 801263c:	d002      	beq.n	8012644 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 801263e:	1dfb      	adds	r3, r7, #7
 8012640:	2202      	movs	r2, #2
 8012642:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8012644:	4b08      	ldr	r3, [pc, #32]	@ (8012668 <batteryChargeCheck+0xa4>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	2181      	movs	r1, #129	@ 0x81
 801264a:	05c9      	lsls	r1, r1, #23
 801264c:	1c18      	adds	r0, r3, #0
 801264e:	f7ed ff8d 	bl	800056c <__aeabi_fcmpge>
 8012652:	1e03      	subs	r3, r0, #0
 8012654:	d002      	beq.n	801265c <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 8012656:	1dfb      	adds	r3, r7, #7
 8012658:	2203      	movs	r2, #3
 801265a:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 801265c:	1dfb      	adds	r3, r7, #7
 801265e:	781b      	ldrb	r3, [r3, #0]
}
 8012660:	0018      	movs	r0, r3
 8012662:	46bd      	mov	sp, r7
 8012664:	b002      	add	sp, #8
 8012666:	bd80      	pop	{r7, pc}
 8012668:	20002160 	.word	0x20002160
 801266c:	40700000 	.word	0x40700000
 8012670:	cccccccd 	.word	0xcccccccd
 8012674:	400ecccc 	.word	0x400ecccc

08012678 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8012678:	b5b0      	push	{r4, r5, r7, lr}
 801267a:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 801267c:	f7f7 fa1a 	bl	8009ab4 <ReadSolarVoltage>
 8012680:	0003      	movs	r3, r0
 8012682:	001a      	movs	r2, r3
 8012684:	4b1a      	ldr	r3, [pc, #104]	@ (80126f0 <Calculate_LED_ON+0x78>)
 8012686:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8012688:	4b19      	ldr	r3, [pc, #100]	@ (80126f0 <Calculate_LED_ON+0x78>)
 801268a:	881b      	ldrh	r3, [r3, #0]
 801268c:	4a19      	ldr	r2, [pc, #100]	@ (80126f4 <Calculate_LED_ON+0x7c>)
 801268e:	4293      	cmp	r3, r2
 8012690:	d802      	bhi.n	8012698 <Calculate_LED_ON+0x20>
    solmV = 2900;
 8012692:	4b17      	ldr	r3, [pc, #92]	@ (80126f0 <Calculate_LED_ON+0x78>)
 8012694:	4a18      	ldr	r2, [pc, #96]	@ (80126f8 <Calculate_LED_ON+0x80>)
 8012696:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8012698:	4b15      	ldr	r3, [pc, #84]	@ (80126f0 <Calculate_LED_ON+0x78>)
 801269a:	881b      	ldrh	r3, [r3, #0]
 801269c:	4a17      	ldr	r2, [pc, #92]	@ (80126fc <Calculate_LED_ON+0x84>)
 801269e:	4293      	cmp	r3, r2
 80126a0:	d902      	bls.n	80126a8 <Calculate_LED_ON+0x30>
    solmV = 4700;
 80126a2:	4b13      	ldr	r3, [pc, #76]	@ (80126f0 <Calculate_LED_ON+0x78>)
 80126a4:	4a15      	ldr	r2, [pc, #84]	@ (80126fc <Calculate_LED_ON+0x84>)
 80126a6:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 80126a8:	4b11      	ldr	r3, [pc, #68]	@ (80126f0 <Calculate_LED_ON+0x78>)
 80126aa:	881b      	ldrh	r3, [r3, #0]
 80126ac:	0018      	movs	r0, r3
 80126ae:	f7f1 f89f 	bl	80037f0 <__aeabi_i2d>
 80126b2:	0004      	movs	r4, r0
 80126b4:	000d      	movs	r5, r1
 80126b6:	4b0e      	ldr	r3, [pc, #56]	@ (80126f0 <Calculate_LED_ON+0x78>)
 80126b8:	881b      	ldrh	r3, [r3, #0]
 80126ba:	001a      	movs	r2, r3
 80126bc:	4b10      	ldr	r3, [pc, #64]	@ (8012700 <Calculate_LED_ON+0x88>)
 80126be:	1a9b      	subs	r3, r3, r2
 80126c0:	0018      	movs	r0, r3
 80126c2:	f7f1 f895 	bl	80037f0 <__aeabi_i2d>
 80126c6:	2200      	movs	r2, #0
 80126c8:	4b0e      	ldr	r3, [pc, #56]	@ (8012704 <Calculate_LED_ON+0x8c>)
 80126ca:	f7f0 f943 	bl	8002954 <__aeabi_dmul>
 80126ce:	0002      	movs	r2, r0
 80126d0:	000b      	movs	r3, r1
 80126d2:	0020      	movs	r0, r4
 80126d4:	0029      	movs	r1, r5
 80126d6:	f7ef f93d 	bl	8001954 <__aeabi_dadd>
 80126da:	0002      	movs	r2, r0
 80126dc:	000b      	movs	r3, r1
 80126de:	0010      	movs	r0, r2
 80126e0:	0019      	movs	r1, r3
 80126e2:	f7ed ffb3 	bl	800064c <__aeabi_d2uiz>
 80126e6:	0003      	movs	r3, r0
 80126e8:	b29b      	uxth	r3, r3
}
 80126ea:	0018      	movs	r0, r3
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bdb0      	pop	{r4, r5, r7, pc}
 80126f0:	20002164 	.word	0x20002164
 80126f4:	00000b53 	.word	0x00000b53
 80126f8:	00000b54 	.word	0x00000b54
 80126fc:	0000125c 	.word	0x0000125c
 8012700:	00000dee 	.word	0x00000dee
 8012704:	3ff80000 	.word	0x3ff80000

08012708 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8012708:	b590      	push	{r4, r7, lr}
 801270a:	b083      	sub	sp, #12
 801270c:	af00      	add	r7, sp, #0
 801270e:	0004      	movs	r4, r0
 8012710:	0008      	movs	r0, r1
 8012712:	0011      	movs	r1, r2
 8012714:	1dbb      	adds	r3, r7, #6
 8012716:	1c22      	adds	r2, r4, #0
 8012718:	801a      	strh	r2, [r3, #0]
 801271a:	1d3b      	adds	r3, r7, #4
 801271c:	1c02      	adds	r2, r0, #0
 801271e:	801a      	strh	r2, [r3, #0]
 8012720:	1cbb      	adds	r3, r7, #2
 8012722:	1c0a      	adds	r2, r1, #0
 8012724:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8012726:	4b0f      	ldr	r3, [pc, #60]	@ (8012764 <SetStatusLED+0x5c>)
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d107      	bne.n	801273e <SetStatusLED+0x36>
 801272e:	4b0e      	ldr	r3, [pc, #56]	@ (8012768 <SetStatusLED+0x60>)
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d103      	bne.n	801273e <SetStatusLED+0x36>
 8012736:	4b0d      	ldr	r3, [pc, #52]	@ (801276c <SetStatusLED+0x64>)
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d00e      	beq.n	801275c <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 801273e:	2380      	movs	r3, #128	@ 0x80
 8012740:	05db      	lsls	r3, r3, #23
 8012742:	1dba      	adds	r2, r7, #6
 8012744:	8812      	ldrh	r2, [r2, #0]
 8012746:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8012748:	2380      	movs	r3, #128	@ 0x80
 801274a:	05db      	lsls	r3, r3, #23
 801274c:	1d3a      	adds	r2, r7, #4
 801274e:	8812      	ldrh	r2, [r2, #0]
 8012750:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8012752:	2380      	movs	r3, #128	@ 0x80
 8012754:	05db      	lsls	r3, r3, #23
 8012756:	1cba      	adds	r2, r7, #2
 8012758:	8812      	ldrh	r2, [r2, #0]
 801275a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801275c:	46c0      	nop			@ (mov r8, r8)
 801275e:	46bd      	mov	sp, r7
 8012760:	b003      	add	sp, #12
 8012762:	bd90      	pop	{r4, r7, pc}
 8012764:	20002151 	.word	0x20002151
 8012768:	200000e8 	.word	0x200000e8
 801276c:	20002152 	.word	0x20002152

08012770 <SetDBLED>:

// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8012770:	b590      	push	{r4, r7, lr}
 8012772:	b083      	sub	sp, #12
 8012774:	af00      	add	r7, sp, #0
 8012776:	0004      	movs	r4, r0
 8012778:	0008      	movs	r0, r1
 801277a:	0011      	movs	r1, r2
 801277c:	1dfb      	adds	r3, r7, #7
 801277e:	1c22      	adds	r2, r4, #0
 8012780:	701a      	strb	r2, [r3, #0]
 8012782:	1dbb      	adds	r3, r7, #6
 8012784:	1c02      	adds	r2, r0, #0
 8012786:	701a      	strb	r2, [r3, #0]
 8012788:	1d7b      	adds	r3, r7, #5
 801278a:	1c0a      	adds	r2, r1, #0
 801278c:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 801278e:	4b19      	ldr	r3, [pc, #100]	@ (80127f4 <SetDBLED+0x84>)
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d107      	bne.n	80127a6 <SetDBLED+0x36>
 8012796:	4b18      	ldr	r3, [pc, #96]	@ (80127f8 <SetDBLED+0x88>)
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d103      	bne.n	80127a6 <SetDBLED+0x36>
 801279e:	4b17      	ldr	r3, [pc, #92]	@ (80127fc <SetDBLED+0x8c>)
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d022      	beq.n	80127ec <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 80127a6:	1dfb      	adds	r3, r7, #7
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	2201      	movs	r2, #1
 80127ac:	4053      	eors	r3, r2
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	001a      	movs	r2, r3
 80127b2:	4b13      	ldr	r3, [pc, #76]	@ (8012800 <SetDBLED+0x90>)
 80127b4:	2101      	movs	r1, #1
 80127b6:	0018      	movs	r0, r3
 80127b8:	f003 faf5 	bl	8015da6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 80127bc:	1dbb      	adds	r3, r7, #6
 80127be:	781b      	ldrb	r3, [r3, #0]
 80127c0:	2201      	movs	r2, #1
 80127c2:	4053      	eors	r3, r2
 80127c4:	b2db      	uxtb	r3, r3
 80127c6:	001a      	movs	r2, r3
 80127c8:	2380      	movs	r3, #128	@ 0x80
 80127ca:	005b      	lsls	r3, r3, #1
 80127cc:	480c      	ldr	r0, [pc, #48]	@ (8012800 <SetDBLED+0x90>)
 80127ce:	0019      	movs	r1, r3
 80127d0:	f003 fae9 	bl	8015da6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 80127d4:	1d7b      	adds	r3, r7, #5
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	2201      	movs	r2, #1
 80127da:	4053      	eors	r3, r2
 80127dc:	b2db      	uxtb	r3, r3
 80127de:	001a      	movs	r2, r3
 80127e0:	2380      	movs	r3, #128	@ 0x80
 80127e2:	009b      	lsls	r3, r3, #2
 80127e4:	4806      	ldr	r0, [pc, #24]	@ (8012800 <SetDBLED+0x90>)
 80127e6:	0019      	movs	r1, r3
 80127e8:	f003 fadd 	bl	8015da6 <HAL_GPIO_WritePin>
  }
}
 80127ec:	46c0      	nop			@ (mov r8, r8)
 80127ee:	46bd      	mov	sp, r7
 80127f0:	b003      	add	sp, #12
 80127f2:	bd90      	pop	{r4, r7, pc}
 80127f4:	20002151 	.word	0x20002151
 80127f8:	200000e8 	.word	0x200000e8
 80127fc:	20002152 	.word	0x20002152
 8012800:	50000400 	.word	0x50000400

08012804 <SetVocLED>:

// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8012804:	b590      	push	{r4, r7, lr}
 8012806:	b083      	sub	sp, #12
 8012808:	af00      	add	r7, sp, #0
 801280a:	0004      	movs	r4, r0
 801280c:	0008      	movs	r0, r1
 801280e:	0011      	movs	r1, r2
 8012810:	1dbb      	adds	r3, r7, #6
 8012812:	1c22      	adds	r2, r4, #0
 8012814:	801a      	strh	r2, [r3, #0]
 8012816:	1d3b      	adds	r3, r7, #4
 8012818:	1c02      	adds	r2, r0, #0
 801281a:	801a      	strh	r2, [r3, #0]
 801281c:	1cbb      	adds	r3, r7, #2
 801281e:	1c0a      	adds	r2, r1, #0
 8012820:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8012822:	4b0e      	ldr	r3, [pc, #56]	@ (801285c <SetVocLED+0x58>)
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d107      	bne.n	801283a <SetVocLED+0x36>
 801282a:	4b0d      	ldr	r3, [pc, #52]	@ (8012860 <SetVocLED+0x5c>)
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d103      	bne.n	801283a <SetVocLED+0x36>
 8012832:	4b0c      	ldr	r3, [pc, #48]	@ (8012864 <SetVocLED+0x60>)
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d00b      	beq.n	8012852 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 801283a:	4b0b      	ldr	r3, [pc, #44]	@ (8012868 <SetVocLED+0x64>)
 801283c:	1dba      	adds	r2, r7, #6
 801283e:	8812      	ldrh	r2, [r2, #0]
 8012840:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8012842:	4b09      	ldr	r3, [pc, #36]	@ (8012868 <SetVocLED+0x64>)
 8012844:	1d3a      	adds	r2, r7, #4
 8012846:	8812      	ldrh	r2, [r2, #0]
 8012848:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 801284a:	4b07      	ldr	r3, [pc, #28]	@ (8012868 <SetVocLED+0x64>)
 801284c:	1cba      	adds	r2, r7, #2
 801284e:	8812      	ldrh	r2, [r2, #0]
 8012850:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012852:	46c0      	nop			@ (mov r8, r8)
 8012854:	46bd      	mov	sp, r7
 8012856:	b003      	add	sp, #12
 8012858:	bd90      	pop	{r4, r7, pc}
 801285a:	46c0      	nop			@ (mov r8, r8)
 801285c:	20002151 	.word	0x20002151
 8012860:	200000e8 	.word	0x200000e8
 8012864:	20002152 	.word	0x20002152
 8012868:	40000400 	.word	0x40000400

0801286c <SetMeasurementIndicator>:

void SetMeasurementIndicator(){
 801286c:	b580      	push	{r7, lr}
 801286e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012870:	4b08      	ldr	r3, [pc, #32]	@ (8012894 <SetMeasurementIndicator+0x28>)
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d103      	bne.n	8012880 <SetMeasurementIndicator+0x14>
 8012878:	4b07      	ldr	r3, [pc, #28]	@ (8012898 <SetMeasurementIndicator+0x2c>)
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d006      	beq.n	801288e <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012880:	f7ff fefa 	bl	8012678 <Calculate_LED_ON>
 8012884:	0003      	movs	r3, r0
 8012886:	001a      	movs	r2, r3
 8012888:	2380      	movs	r3, #128	@ 0x80
 801288a:	05db      	lsls	r3, r3, #23
 801288c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801288e:	46c0      	nop			@ (mov r8, r8)
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	20002151 	.word	0x20002151
 8012898:	20002152 	.word	0x20002152

0801289c <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 801289c:	b580      	push	{r7, lr}
 801289e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80128a0:	4b07      	ldr	r3, [pc, #28]	@ (80128c0 <ResetMeasurementIndicator+0x24>)
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d103      	bne.n	80128b0 <ResetMeasurementIndicator+0x14>
 80128a8:	4b06      	ldr	r3, [pc, #24]	@ (80128c4 <ResetMeasurementIndicator+0x28>)
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d004      	beq.n	80128ba <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 80128b0:	2380      	movs	r3, #128	@ 0x80
 80128b2:	05db      	lsls	r3, r3, #23
 80128b4:	22fa      	movs	r2, #250	@ 0xfa
 80128b6:	0112      	lsls	r2, r2, #4
 80128b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80128ba:	46c0      	nop			@ (mov r8, r8)
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	20002151 	.word	0x20002151
 80128c4:	20002152 	.word	0x20002152

080128c8 <SetMICIndicator>:
void SetMICIndicator(){
 80128c8:	b580      	push	{r7, lr}
 80128ca:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80128cc:	4b19      	ldr	r3, [pc, #100]	@ (8012934 <SetMICIndicator+0x6c>)
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d103      	bne.n	80128dc <SetMICIndicator+0x14>
 80128d4:	4b18      	ldr	r3, [pc, #96]	@ (8012938 <SetMICIndicator+0x70>)
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d007      	beq.n	80128ec <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 80128dc:	f7ff fecc 	bl	8012678 <Calculate_LED_ON>
 80128e0:	0003      	movs	r3, r0
 80128e2:	001a      	movs	r2, r3
 80128e4:	2380      	movs	r3, #128	@ 0x80
 80128e6:	05db      	lsls	r3, r3, #23
 80128e8:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 80128ea:	e01f      	b.n	801292c <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 80128ec:	4b13      	ldr	r3, [pc, #76]	@ (801293c <SetMICIndicator+0x74>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	1c18      	adds	r0, r3, #0
 80128f2:	f7f0 ffcf 	bl	8003894 <__aeabi_f2d>
 80128f6:	4a12      	ldr	r2, [pc, #72]	@ (8012940 <SetMICIndicator+0x78>)
 80128f8:	4b12      	ldr	r3, [pc, #72]	@ (8012944 <SetMICIndicator+0x7c>)
 80128fa:	f7ed fdf3 	bl	80004e4 <__aeabi_dcmpgt>
 80128fe:	1e03      	subs	r3, r0, #0
 8012900:	d00a      	beq.n	8012918 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8012902:	f7ff feb9 	bl	8012678 <Calculate_LED_ON>
 8012906:	0003      	movs	r3, r0
 8012908:	001a      	movs	r2, r3
 801290a:	2380      	movs	r3, #128	@ 0x80
 801290c:	05db      	lsls	r3, r3, #23
 801290e:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8012910:	4b0d      	ldr	r3, [pc, #52]	@ (8012948 <SetMICIndicator+0x80>)
 8012912:	2202      	movs	r2, #2
 8012914:	701a      	strb	r2, [r3, #0]
}
 8012916:	e009      	b.n	801292c <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8012918:	f7ff feae 	bl	8012678 <Calculate_LED_ON>
 801291c:	0003      	movs	r3, r0
 801291e:	001a      	movs	r2, r3
 8012920:	2380      	movs	r3, #128	@ 0x80
 8012922:	05db      	lsls	r3, r3, #23
 8012924:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8012926:	4b08      	ldr	r3, [pc, #32]	@ (8012948 <SetMICIndicator+0x80>)
 8012928:	2201      	movs	r2, #1
 801292a:	701a      	strb	r2, [r3, #0]
}
 801292c:	46c0      	nop			@ (mov r8, r8)
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	46c0      	nop			@ (mov r8, r8)
 8012934:	20002151 	.word	0x20002151
 8012938:	20002152 	.word	0x20002152
 801293c:	20002160 	.word	0x20002160
 8012940:	9999999a 	.word	0x9999999a
 8012944:	400d9999 	.word	0x400d9999
 8012948:	20002154 	.word	0x20002154

0801294c <ResetMICIndicator>:
void ResetMICIndicator(){
 801294c:	b580      	push	{r7, lr}
 801294e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012950:	4b0f      	ldr	r3, [pc, #60]	@ (8012990 <ResetMICIndicator+0x44>)
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d103      	bne.n	8012960 <ResetMICIndicator+0x14>
 8012958:	4b0e      	ldr	r3, [pc, #56]	@ (8012994 <ResetMICIndicator+0x48>)
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d005      	beq.n	801296c <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 8012960:	2380      	movs	r3, #128	@ 0x80
 8012962:	05db      	lsls	r3, r3, #23
 8012964:	22fa      	movs	r2, #250	@ 0xfa
 8012966:	0112      	lsls	r2, r2, #4
 8012968:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 801296a:	e00e      	b.n	801298a <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 801296c:	4b0a      	ldr	r3, [pc, #40]	@ (8012998 <ResetMICIndicator+0x4c>)
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	2b02      	cmp	r3, #2
 8012972:	d105      	bne.n	8012980 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 8012974:	2380      	movs	r3, #128	@ 0x80
 8012976:	05db      	lsls	r3, r3, #23
 8012978:	22fa      	movs	r2, #250	@ 0xfa
 801297a:	0112      	lsls	r2, r2, #4
 801297c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 801297e:	e004      	b.n	801298a <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8012980:	2380      	movs	r3, #128	@ 0x80
 8012982:	05db      	lsls	r3, r3, #23
 8012984:	22fa      	movs	r2, #250	@ 0xfa
 8012986:	0112      	lsls	r2, r2, #4
 8012988:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801298a:	46c0      	nop			@ (mov r8, r8)
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}
 8012990:	20002151 	.word	0x20002151
 8012994:	20002152 	.word	0x20002152
 8012998:	20002154 	.word	0x20002154

0801299c <SetESPIndicator>:
void SetESPIndicator(){
 801299c:	b580      	push	{r7, lr}
 801299e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80129a0:	4b08      	ldr	r3, [pc, #32]	@ (80129c4 <SetESPIndicator+0x28>)
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d103      	bne.n	80129b0 <SetESPIndicator+0x14>
 80129a8:	4b07      	ldr	r3, [pc, #28]	@ (80129c8 <SetESPIndicator+0x2c>)
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d006      	beq.n	80129be <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 80129b0:	f7ff fe62 	bl	8012678 <Calculate_LED_ON>
 80129b4:	0003      	movs	r3, r0
 80129b6:	001a      	movs	r2, r3
 80129b8:	2380      	movs	r3, #128	@ 0x80
 80129ba:	05db      	lsls	r3, r3, #23
 80129bc:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80129be:	46c0      	nop			@ (mov r8, r8)
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	20002151 	.word	0x20002151
 80129c8:	20002152 	.word	0x20002152

080129cc <ResetESPIndicator>:
void ResetESPIndicator(){
 80129cc:	b580      	push	{r7, lr}
 80129ce:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80129d0:	4b07      	ldr	r3, [pc, #28]	@ (80129f0 <ResetESPIndicator+0x24>)
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d103      	bne.n	80129e0 <ResetESPIndicator+0x14>
 80129d8:	4b06      	ldr	r3, [pc, #24]	@ (80129f4 <ResetESPIndicator+0x28>)
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d004      	beq.n	80129ea <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 80129e0:	2380      	movs	r3, #128	@ 0x80
 80129e2:	05db      	lsls	r3, r3, #23
 80129e4:	22fa      	movs	r2, #250	@ 0xfa
 80129e6:	0112      	lsls	r2, r2, #4
 80129e8:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80129ea:	46c0      	nop			@ (mov r8, r8)
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	20002151 	.word	0x20002151
 80129f4:	20002152 	.word	0x20002152

080129f8 <SetPMIndicator>:

void SetPMIndicator() {
 80129f8:	b580      	push	{r7, lr}
 80129fa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80129fc:	4b0f      	ldr	r3, [pc, #60]	@ (8012a3c <SetPMIndicator+0x44>)
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d103      	bne.n	8012a0c <SetPMIndicator+0x14>
 8012a04:	4b0e      	ldr	r3, [pc, #56]	@ (8012a40 <SetPMIndicator+0x48>)
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d014      	beq.n	8012a36 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012a0c:	f7ff fe34 	bl	8012678 <Calculate_LED_ON>
 8012a10:	0003      	movs	r3, r0
 8012a12:	001a      	movs	r2, r3
 8012a14:	2380      	movs	r3, #128	@ 0x80
 8012a16:	05db      	lsls	r3, r3, #23
 8012a18:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012a1a:	f7ff fe2d 	bl	8012678 <Calculate_LED_ON>
 8012a1e:	0003      	movs	r3, r0
 8012a20:	001a      	movs	r2, r3
 8012a22:	2380      	movs	r3, #128	@ 0x80
 8012a24:	05db      	lsls	r3, r3, #23
 8012a26:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012a28:	f7ff fe26 	bl	8012678 <Calculate_LED_ON>
 8012a2c:	0003      	movs	r3, r0
 8012a2e:	001a      	movs	r2, r3
 8012a30:	2380      	movs	r3, #128	@ 0x80
 8012a32:	05db      	lsls	r3, r3, #23
 8012a34:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012a36:	46c0      	nop			@ (mov r8, r8)
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	20002151 	.word	0x20002151
 8012a40:	20002152 	.word	0x20002152

08012a44 <ResetPMIndicator>:

void ResetPMIndicator() {
 8012a44:	b580      	push	{r7, lr}
 8012a46:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012a48:	4b0c      	ldr	r3, [pc, #48]	@ (8012a7c <ResetPMIndicator+0x38>)
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d103      	bne.n	8012a58 <ResetPMIndicator+0x14>
 8012a50:	4b0b      	ldr	r3, [pc, #44]	@ (8012a80 <ResetPMIndicator+0x3c>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d00e      	beq.n	8012a76 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8012a58:	2380      	movs	r3, #128	@ 0x80
 8012a5a:	05db      	lsls	r3, r3, #23
 8012a5c:	22fa      	movs	r2, #250	@ 0xfa
 8012a5e:	0112      	lsls	r2, r2, #4
 8012a60:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012a62:	2380      	movs	r3, #128	@ 0x80
 8012a64:	05db      	lsls	r3, r3, #23
 8012a66:	22fa      	movs	r2, #250	@ 0xfa
 8012a68:	0112      	lsls	r2, r2, #4
 8012a6a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012a6c:	2380      	movs	r3, #128	@ 0x80
 8012a6e:	05db      	lsls	r3, r3, #23
 8012a70:	22fa      	movs	r2, #250	@ 0xfa
 8012a72:	0112      	lsls	r2, r2, #4
 8012a74:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012a76:	46c0      	nop			@ (mov r8, r8)
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	20002151 	.word	0x20002151
 8012a80:	20002152 	.word	0x20002152

08012a84 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff() {
 8012a84:	b580      	push	{r7, lr}
 8012a86:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8012a88:	23fa      	movs	r3, #250	@ 0xfa
 8012a8a:	011a      	lsls	r2, r3, #4
 8012a8c:	23fa      	movs	r3, #250	@ 0xfa
 8012a8e:	0119      	lsls	r1, r3, #4
 8012a90:	23fa      	movs	r3, #250	@ 0xfa
 8012a92:	011b      	lsls	r3, r3, #4
 8012a94:	0018      	movs	r0, r3
 8012a96:	f7ff fe37 	bl	8012708 <SetStatusLED>
  SetDBLED(false,false,false);
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	2100      	movs	r1, #0
 8012a9e:	2000      	movs	r0, #0
 8012aa0:	f7ff fe66 	bl	8012770 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8012aa4:	23fa      	movs	r3, #250	@ 0xfa
 8012aa6:	011a      	lsls	r2, r3, #4
 8012aa8:	23fa      	movs	r3, #250	@ 0xfa
 8012aaa:	0119      	lsls	r1, r3, #4
 8012aac:	23fa      	movs	r3, #250	@ 0xfa
 8012aae:	011b      	lsls	r3, r3, #4
 8012ab0:	0018      	movs	r0, r3
 8012ab2:	f7ff fea7 	bl	8012804 <SetVocLED>
return;
 8012ab6:	46c0      	nop			@ (mov r8, r8)
}
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}

08012abc <SetAllREDLED>:

void SetAllREDLED() {
 8012abc:	b580      	push	{r7, lr}
 8012abe:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012ac0:	f7ff ffe0 	bl	8012a84 <SetLEDsOff>
  TIM2 -> CCR1 = LED_ON;
 8012ac4:	2380      	movs	r3, #128	@ 0x80
 8012ac6:	05db      	lsls	r3, r3, #23
 8012ac8:	4a20      	ldr	r2, [pc, #128]	@ (8012b4c <SetAllREDLED+0x90>)
 8012aca:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012acc:	2380      	movs	r3, #128	@ 0x80
 8012ace:	05db      	lsls	r3, r3, #23
 8012ad0:	22fa      	movs	r2, #250	@ 0xfa
 8012ad2:	0112      	lsls	r2, r2, #4
 8012ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012ad6:	2380      	movs	r3, #128	@ 0x80
 8012ad8:	05db      	lsls	r3, r3, #23
 8012ada:	22fa      	movs	r2, #250	@ 0xfa
 8012adc:	0112      	lsls	r2, r2, #4
 8012ade:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8012ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8012b50 <SetAllREDLED+0x94>)
 8012ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8012b4c <SetAllREDLED+0x90>)
 8012ae4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8012b50 <SetAllREDLED+0x94>)
 8012ae8:	22fa      	movs	r2, #250	@ 0xfa
 8012aea:	0112      	lsls	r2, r2, #4
 8012aec:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012aee:	4b18      	ldr	r3, [pc, #96]	@ (8012b50 <SetAllREDLED+0x94>)
 8012af0:	22fa      	movs	r2, #250	@ 0xfa
 8012af2:	0112      	lsls	r2, r2, #4
 8012af4:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012af6:	4b17      	ldr	r3, [pc, #92]	@ (8012b54 <SetAllREDLED+0x98>)
 8012af8:	2200      	movs	r2, #0
 8012afa:	2101      	movs	r1, #1
 8012afc:	0018      	movs	r0, r3
 8012afe:	f003 f952 	bl	8015da6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012b02:	2380      	movs	r3, #128	@ 0x80
 8012b04:	005b      	lsls	r3, r3, #1
 8012b06:	4813      	ldr	r0, [pc, #76]	@ (8012b54 <SetAllREDLED+0x98>)
 8012b08:	2201      	movs	r2, #1
 8012b0a:	0019      	movs	r1, r3
 8012b0c:	f003 f94b 	bl	8015da6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012b10:	2380      	movs	r3, #128	@ 0x80
 8012b12:	009b      	lsls	r3, r3, #2
 8012b14:	480f      	ldr	r0, [pc, #60]	@ (8012b54 <SetAllREDLED+0x98>)
 8012b16:	2201      	movs	r2, #1
 8012b18:	0019      	movs	r1, r3
 8012b1a:	f003 f944 	bl	8015da6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8012b1e:	23fa      	movs	r3, #250	@ 0xfa
 8012b20:	005b      	lsls	r3, r3, #1
 8012b22:	0018      	movs	r0, r3
 8012b24:	f001 fed6 	bl	80148d4 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012b28:	2380      	movs	r3, #128	@ 0x80
 8012b2a:	05db      	lsls	r3, r3, #23
 8012b2c:	22fa      	movs	r2, #250	@ 0xfa
 8012b2e:	0112      	lsls	r2, r2, #4
 8012b30:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR1 = LED_OFF;
 8012b32:	4b07      	ldr	r3, [pc, #28]	@ (8012b50 <SetAllREDLED+0x94>)
 8012b34:	22fa      	movs	r2, #250	@ 0xfa
 8012b36:	0112      	lsls	r2, r2, #4
 8012b38:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012b3a:	4b06      	ldr	r3, [pc, #24]	@ (8012b54 <SetAllREDLED+0x98>)
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	2101      	movs	r1, #1
 8012b40:	0018      	movs	r0, r3
 8012b42:	f003 f930 	bl	8015da6 <HAL_GPIO_WritePin>
}
 8012b46:	46c0      	nop			@ (mov r8, r8)
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	00000bb8 	.word	0x00000bb8
 8012b50:	40000400 	.word	0x40000400
 8012b54:	50000400 	.word	0x50000400

08012b58 <WalkAllRedLED>:

void WalkAllRedLED() {
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	af00      	add	r7, sp, #0
// Fire all LEDs sequential to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012b5c:	f7ff ff92 	bl	8012a84 <SetLEDsOff>
  HAL_Delay(100);
 8012b60:	2064      	movs	r0, #100	@ 0x64
 8012b62:	f001 feb7 	bl	80148d4 <HAL_Delay>

  TIM3 -> CCR1 = LED_ON;
 8012b66:	4b24      	ldr	r3, [pc, #144]	@ (8012bf8 <WalkAllRedLED+0xa0>)
 8012b68:	4a24      	ldr	r2, [pc, #144]	@ (8012bfc <WalkAllRedLED+0xa4>)
 8012b6a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012b6c:	4b22      	ldr	r3, [pc, #136]	@ (8012bf8 <WalkAllRedLED+0xa0>)
 8012b6e:	22fa      	movs	r2, #250	@ 0xfa
 8012b70:	0112      	lsls	r2, r2, #4
 8012b72:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012b74:	4b20      	ldr	r3, [pc, #128]	@ (8012bf8 <WalkAllRedLED+0xa0>)
 8012b76:	22fa      	movs	r2, #250	@ 0xfa
 8012b78:	0112      	lsls	r2, r2, #4
 8012b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(100);
 8012b7c:	2064      	movs	r0, #100	@ 0x64
 8012b7e:	f001 fea9 	bl	80148d4 <HAL_Delay>
  TIM3 -> CCR1 = LED_OFF;
 8012b82:	4b1d      	ldr	r3, [pc, #116]	@ (8012bf8 <WalkAllRedLED+0xa0>)
 8012b84:	22fa      	movs	r2, #250	@ 0xfa
 8012b86:	0112      	lsls	r2, r2, #4
 8012b88:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8012c00 <WalkAllRedLED+0xa8>)
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	2101      	movs	r1, #1
 8012b90:	0018      	movs	r0, r3
 8012b92:	f003 f908 	bl	8015da6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012b96:	2380      	movs	r3, #128	@ 0x80
 8012b98:	005b      	lsls	r3, r3, #1
 8012b9a:	4819      	ldr	r0, [pc, #100]	@ (8012c00 <WalkAllRedLED+0xa8>)
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	0019      	movs	r1, r3
 8012ba0:	f003 f901 	bl	8015da6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012ba4:	2380      	movs	r3, #128	@ 0x80
 8012ba6:	009b      	lsls	r3, r3, #2
 8012ba8:	4815      	ldr	r0, [pc, #84]	@ (8012c00 <WalkAllRedLED+0xa8>)
 8012baa:	2201      	movs	r2, #1
 8012bac:	0019      	movs	r1, r3
 8012bae:	f003 f8fa 	bl	8015da6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8012bb2:	2064      	movs	r0, #100	@ 0x64
 8012bb4:	f001 fe8e 	bl	80148d4 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012bb8:	4b11      	ldr	r3, [pc, #68]	@ (8012c00 <WalkAllRedLED+0xa8>)
 8012bba:	2201      	movs	r2, #1
 8012bbc:	2101      	movs	r1, #1
 8012bbe:	0018      	movs	r0, r3
 8012bc0:	f003 f8f1 	bl	8015da6 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = LED_ON;
 8012bc4:	2380      	movs	r3, #128	@ 0x80
 8012bc6:	05db      	lsls	r3, r3, #23
 8012bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8012bfc <WalkAllRedLED+0xa4>)
 8012bca:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012bcc:	2380      	movs	r3, #128	@ 0x80
 8012bce:	05db      	lsls	r3, r3, #23
 8012bd0:	22fa      	movs	r2, #250	@ 0xfa
 8012bd2:	0112      	lsls	r2, r2, #4
 8012bd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012bd6:	2380      	movs	r3, #128	@ 0x80
 8012bd8:	05db      	lsls	r3, r3, #23
 8012bda:	22fa      	movs	r2, #250	@ 0xfa
 8012bdc:	0112      	lsls	r2, r2, #4
 8012bde:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(100);
 8012be0:	2064      	movs	r0, #100	@ 0x64
 8012be2:	f001 fe77 	bl	80148d4 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012be6:	2380      	movs	r3, #128	@ 0x80
 8012be8:	05db      	lsls	r3, r3, #23
 8012bea:	22fa      	movs	r2, #250	@ 0xfa
 8012bec:	0112      	lsls	r2, r2, #4
 8012bee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012bf0:	46c0      	nop			@ (mov r8, r8)
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	46c0      	nop			@ (mov r8, r8)
 8012bf8:	40000400 	.word	0x40000400
 8012bfc:	00000bb8 	.word	0x00000bb8
 8012c00:	50000400 	.word	0x50000400

08012c04 <SetAllBlueLED>:

void SetAllBlueLED() {
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012c0a:	1dfb      	adds	r3, r7, #7
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	701a      	strb	r2, [r3, #0]
 8012c10:	e040      	b.n	8012c94 <SetAllBlueLED+0x90>
    TIM2 -> CCR1 = LED_OFF;
 8012c12:	2380      	movs	r3, #128	@ 0x80
 8012c14:	05db      	lsls	r3, r3, #23
 8012c16:	22fa      	movs	r2, #250	@ 0xfa
 8012c18:	0112      	lsls	r2, r2, #4
 8012c1a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012c1c:	2380      	movs	r3, #128	@ 0x80
 8012c1e:	05db      	lsls	r3, r3, #23
 8012c20:	22fa      	movs	r2, #250	@ 0xfa
 8012c22:	0112      	lsls	r2, r2, #4
 8012c24:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8012c26:	2380      	movs	r3, #128	@ 0x80
 8012c28:	05db      	lsls	r3, r3, #23
 8012c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8012ca8 <SetAllBlueLED+0xa4>)
 8012c2c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8012c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8012cac <SetAllBlueLED+0xa8>)
 8012c30:	22fa      	movs	r2, #250	@ 0xfa
 8012c32:	0112      	lsls	r2, r2, #4
 8012c34:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8012c36:	4b1d      	ldr	r3, [pc, #116]	@ (8012cac <SetAllBlueLED+0xa8>)
 8012c38:	22fa      	movs	r2, #250	@ 0xfa
 8012c3a:	0112      	lsls	r2, r2, #4
 8012c3c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8012c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8012cac <SetAllBlueLED+0xa8>)
 8012c40:	4a19      	ldr	r2, [pc, #100]	@ (8012ca8 <SetAllBlueLED+0xa4>)
 8012c42:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8012c44:	4b1a      	ldr	r3, [pc, #104]	@ (8012cb0 <SetAllBlueLED+0xac>)
 8012c46:	2201      	movs	r2, #1
 8012c48:	2101      	movs	r1, #1
 8012c4a:	0018      	movs	r0, r3
 8012c4c:	f003 f8ab 	bl	8015da6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012c50:	2380      	movs	r3, #128	@ 0x80
 8012c52:	005b      	lsls	r3, r3, #1
 8012c54:	4816      	ldr	r0, [pc, #88]	@ (8012cb0 <SetAllBlueLED+0xac>)
 8012c56:	2201      	movs	r2, #1
 8012c58:	0019      	movs	r1, r3
 8012c5a:	f003 f8a4 	bl	8015da6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8012c5e:	2380      	movs	r3, #128	@ 0x80
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	4813      	ldr	r0, [pc, #76]	@ (8012cb0 <SetAllBlueLED+0xac>)
 8012c64:	2200      	movs	r2, #0
 8012c66:	0019      	movs	r1, r3
 8012c68:	f003 f89d 	bl	8015da6 <HAL_GPIO_WritePin>
    HAL_Delay(250);
 8012c6c:	20fa      	movs	r0, #250	@ 0xfa
 8012c6e:	f001 fe31 	bl	80148d4 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8012c72:	2380      	movs	r3, #128	@ 0x80
 8012c74:	05db      	lsls	r3, r3, #23
 8012c76:	22fa      	movs	r2, #250	@ 0xfa
 8012c78:	0112      	lsls	r2, r2, #4
 8012c7a:	641a      	str	r2, [r3, #64]	@ 0x40
//    TIM3 -> CCR3 = LED_OFF;  // do not switch off blue VOC led
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012c7c:	2380      	movs	r3, #128	@ 0x80
 8012c7e:	009b      	lsls	r3, r3, #2
 8012c80:	480b      	ldr	r0, [pc, #44]	@ (8012cb0 <SetAllBlueLED+0xac>)
 8012c82:	2201      	movs	r2, #1
 8012c84:	0019      	movs	r1, r3
 8012c86:	f003 f88e 	bl	8015da6 <HAL_GPIO_WritePin>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012c8a:	1dfb      	adds	r3, r7, #7
 8012c8c:	781a      	ldrb	r2, [r3, #0]
 8012c8e:	1dfb      	adds	r3, r7, #7
 8012c90:	3201      	adds	r2, #1
 8012c92:	701a      	strb	r2, [r3, #0]
 8012c94:	1dfb      	adds	r3, r7, #7
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	2b02      	cmp	r3, #2
 8012c9a:	d9ba      	bls.n	8012c12 <SetAllBlueLED+0xe>
  }
}
 8012c9c:	46c0      	nop			@ (mov r8, r8)
 8012c9e:	46c0      	nop			@ (mov r8, r8)
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	b002      	add	sp, #8
 8012ca4:	bd80      	pop	{r7, pc}
 8012ca6:	46c0      	nop			@ (mov r8, r8)
 8012ca8:	00000bb8 	.word	0x00000bb8
 8012cac:	40000400 	.word	0x40000400
 8012cb0:	50000400 	.word	0x50000400

08012cb4 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012cb4:	b5b0      	push	{r4, r5, r7, lr}
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	0002      	movs	r2, r0
 8012cbc:	1dbb      	adds	r3, r7, #6
 8012cbe:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8012cc0:	1dbb      	adds	r3, r7, #6
 8012cc2:	881b      	ldrh	r3, [r3, #0]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d05a      	beq.n	8012d7e <SetVOCindicator+0xca>
 8012cc8:	1dbb      	adds	r3, r7, #6
 8012cca:	881b      	ldrh	r3, [r3, #0]
 8012ccc:	2b64      	cmp	r3, #100	@ 0x64
 8012cce:	d856      	bhi.n	8012d7e <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8012cd0:	1dbb      	adds	r3, r7, #6
 8012cd2:	881b      	ldrh	r3, [r3, #0]
 8012cd4:	0018      	movs	r0, r3
 8012cd6:	f7f0 fd8b 	bl	80037f0 <__aeabi_i2d>
 8012cda:	2200      	movs	r2, #0
 8012cdc:	4b5f      	ldr	r3, [pc, #380]	@ (8012e5c <SetVOCindicator+0x1a8>)
 8012cde:	f7ef f9ff 	bl	80020e0 <__aeabi_ddiv>
 8012ce2:	0002      	movs	r2, r0
 8012ce4:	000b      	movs	r3, r1
 8012ce6:	2000      	movs	r0, #0
 8012ce8:	495d      	ldr	r1, [pc, #372]	@ (8012e60 <SetVOCindicator+0x1ac>)
 8012cea:	f7f0 f919 	bl	8002f20 <__aeabi_dsub>
 8012cee:	0002      	movs	r2, r0
 8012cf0:	000b      	movs	r3, r1
 8012cf2:	0014      	movs	r4, r2
 8012cf4:	001d      	movs	r5, r3
 8012cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8012e64 <SetVOCindicator+0x1b0>)
 8012cf8:	881b      	ldrh	r3, [r3, #0]
 8012cfa:	0018      	movs	r0, r3
 8012cfc:	f7f0 fd78 	bl	80037f0 <__aeabi_i2d>
 8012d00:	0002      	movs	r2, r0
 8012d02:	000b      	movs	r3, r1
 8012d04:	0020      	movs	r0, r4
 8012d06:	0029      	movs	r1, r5
 8012d08:	f7ef fe24 	bl	8002954 <__aeabi_dmul>
 8012d0c:	0002      	movs	r2, r0
 8012d0e:	000b      	movs	r3, r1
 8012d10:	0010      	movs	r0, r2
 8012d12:	0019      	movs	r1, r3
 8012d14:	f7ed fc9a 	bl	800064c <__aeabi_d2uiz>
 8012d18:	0003      	movs	r3, r0
 8012d1a:	b29a      	uxth	r2, r3
 8012d1c:	4b52      	ldr	r3, [pc, #328]	@ (8012e68 <SetVOCindicator+0x1b4>)
 8012d1e:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012d20:	1dbb      	adds	r3, r7, #6
 8012d22:	881b      	ldrh	r3, [r3, #0]
 8012d24:	0018      	movs	r0, r3
 8012d26:	f7f0 fd63 	bl	80037f0 <__aeabi_i2d>
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8012e5c <SetVOCindicator+0x1a8>)
 8012d2e:	f7ef f9d7 	bl	80020e0 <__aeabi_ddiv>
 8012d32:	0002      	movs	r2, r0
 8012d34:	000b      	movs	r3, r1
 8012d36:	0014      	movs	r4, r2
 8012d38:	001d      	movs	r5, r3
 8012d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8012e64 <SetVOCindicator+0x1b0>)
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	0018      	movs	r0, r3
 8012d40:	f7f0 fd56 	bl	80037f0 <__aeabi_i2d>
 8012d44:	0002      	movs	r2, r0
 8012d46:	000b      	movs	r3, r1
 8012d48:	0020      	movs	r0, r4
 8012d4a:	0029      	movs	r1, r5
 8012d4c:	f7ef fe02 	bl	8002954 <__aeabi_dmul>
 8012d50:	0002      	movs	r2, r0
 8012d52:	000b      	movs	r3, r1
 8012d54:	0010      	movs	r0, r2
 8012d56:	0019      	movs	r1, r3
 8012d58:	f7ed fc78 	bl	800064c <__aeabi_d2uiz>
 8012d5c:	0003      	movs	r3, r0
 8012d5e:	b29a      	uxth	r2, r3
 8012d60:	4b42      	ldr	r3, [pc, #264]	@ (8012e6c <SetVOCindicator+0x1b8>)
 8012d62:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012d64:	4b3f      	ldr	r3, [pc, #252]	@ (8012e64 <SetVOCindicator+0x1b0>)
 8012d66:	881a      	ldrh	r2, [r3, #0]
 8012d68:	4b41      	ldr	r3, [pc, #260]	@ (8012e70 <SetVOCindicator+0x1bc>)
 8012d6a:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012d6c:	4b40      	ldr	r3, [pc, #256]	@ (8012e70 <SetVOCindicator+0x1bc>)
 8012d6e:	8818      	ldrh	r0, [r3, #0]
 8012d70:	4b3d      	ldr	r3, [pc, #244]	@ (8012e68 <SetVOCindicator+0x1b4>)
 8012d72:	8819      	ldrh	r1, [r3, #0]
 8012d74:	4b3d      	ldr	r3, [pc, #244]	@ (8012e6c <SetVOCindicator+0x1b8>)
 8012d76:	881b      	ldrh	r3, [r3, #0]
 8012d78:	001a      	movs	r2, r3
 8012d7a:	f7ff fd43 	bl	8012804 <SetVocLED>
  }
  if(VOCi > 100){
 8012d7e:	1dbb      	adds	r3, r7, #6
 8012d80:	881b      	ldrh	r3, [r3, #0]
 8012d82:	2b64      	cmp	r3, #100	@ 0x64
 8012d84:	d966      	bls.n	8012e54 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012d86:	1dbb      	adds	r3, r7, #6
 8012d88:	881b      	ldrh	r3, [r3, #0]
 8012d8a:	0018      	movs	r0, r3
 8012d8c:	f7f0 fd30 	bl	80037f0 <__aeabi_i2d>
 8012d90:	2200      	movs	r2, #0
 8012d92:	4b32      	ldr	r3, [pc, #200]	@ (8012e5c <SetVOCindicator+0x1a8>)
 8012d94:	f7f0 f8c4 	bl	8002f20 <__aeabi_dsub>
 8012d98:	0002      	movs	r2, r0
 8012d9a:	000b      	movs	r3, r1
 8012d9c:	0010      	movs	r0, r2
 8012d9e:	0019      	movs	r1, r3
 8012da0:	2200      	movs	r2, #0
 8012da2:	4b34      	ldr	r3, [pc, #208]	@ (8012e74 <SetVOCindicator+0x1c0>)
 8012da4:	f7ef f99c 	bl	80020e0 <__aeabi_ddiv>
 8012da8:	0002      	movs	r2, r0
 8012daa:	000b      	movs	r3, r1
 8012dac:	0014      	movs	r4, r2
 8012dae:	001d      	movs	r5, r3
 8012db0:	4b2c      	ldr	r3, [pc, #176]	@ (8012e64 <SetVOCindicator+0x1b0>)
 8012db2:	881b      	ldrh	r3, [r3, #0]
 8012db4:	0018      	movs	r0, r3
 8012db6:	f7f0 fd1b 	bl	80037f0 <__aeabi_i2d>
 8012dba:	0002      	movs	r2, r0
 8012dbc:	000b      	movs	r3, r1
 8012dbe:	0020      	movs	r0, r4
 8012dc0:	0029      	movs	r1, r5
 8012dc2:	f7ef fdc7 	bl	8002954 <__aeabi_dmul>
 8012dc6:	0002      	movs	r2, r0
 8012dc8:	000b      	movs	r3, r1
 8012dca:	0010      	movs	r0, r2
 8012dcc:	0019      	movs	r1, r3
 8012dce:	f7ed fc3d 	bl	800064c <__aeabi_d2uiz>
 8012dd2:	0003      	movs	r3, r0
 8012dd4:	b29a      	uxth	r2, r3
 8012dd6:	4b24      	ldr	r3, [pc, #144]	@ (8012e68 <SetVOCindicator+0x1b4>)
 8012dd8:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8012dda:	1dbb      	adds	r3, r7, #6
 8012ddc:	881b      	ldrh	r3, [r3, #0]
 8012dde:	0018      	movs	r0, r3
 8012de0:	f7f0 fd06 	bl	80037f0 <__aeabi_i2d>
 8012de4:	2200      	movs	r2, #0
 8012de6:	4b1d      	ldr	r3, [pc, #116]	@ (8012e5c <SetVOCindicator+0x1a8>)
 8012de8:	f7f0 f89a 	bl	8002f20 <__aeabi_dsub>
 8012dec:	0002      	movs	r2, r0
 8012dee:	000b      	movs	r3, r1
 8012df0:	0010      	movs	r0, r2
 8012df2:	0019      	movs	r1, r3
 8012df4:	2200      	movs	r2, #0
 8012df6:	4b1f      	ldr	r3, [pc, #124]	@ (8012e74 <SetVOCindicator+0x1c0>)
 8012df8:	f7ef f972 	bl	80020e0 <__aeabi_ddiv>
 8012dfc:	0002      	movs	r2, r0
 8012dfe:	000b      	movs	r3, r1
 8012e00:	2000      	movs	r0, #0
 8012e02:	4917      	ldr	r1, [pc, #92]	@ (8012e60 <SetVOCindicator+0x1ac>)
 8012e04:	f7f0 f88c 	bl	8002f20 <__aeabi_dsub>
 8012e08:	0002      	movs	r2, r0
 8012e0a:	000b      	movs	r3, r1
 8012e0c:	0014      	movs	r4, r2
 8012e0e:	001d      	movs	r5, r3
 8012e10:	4b14      	ldr	r3, [pc, #80]	@ (8012e64 <SetVOCindicator+0x1b0>)
 8012e12:	881b      	ldrh	r3, [r3, #0]
 8012e14:	0018      	movs	r0, r3
 8012e16:	f7f0 fceb 	bl	80037f0 <__aeabi_i2d>
 8012e1a:	0002      	movs	r2, r0
 8012e1c:	000b      	movs	r3, r1
 8012e1e:	0020      	movs	r0, r4
 8012e20:	0029      	movs	r1, r5
 8012e22:	f7ef fd97 	bl	8002954 <__aeabi_dmul>
 8012e26:	0002      	movs	r2, r0
 8012e28:	000b      	movs	r3, r1
 8012e2a:	0010      	movs	r0, r2
 8012e2c:	0019      	movs	r1, r3
 8012e2e:	f7ed fc0d 	bl	800064c <__aeabi_d2uiz>
 8012e32:	0003      	movs	r3, r0
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	4b0e      	ldr	r3, [pc, #56]	@ (8012e70 <SetVOCindicator+0x1bc>)
 8012e38:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8012e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8012e64 <SetVOCindicator+0x1b0>)
 8012e3c:	881a      	ldrh	r2, [r3, #0]
 8012e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8012e6c <SetVOCindicator+0x1b8>)
 8012e40:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012e42:	4b0b      	ldr	r3, [pc, #44]	@ (8012e70 <SetVOCindicator+0x1bc>)
 8012e44:	8818      	ldrh	r0, [r3, #0]
 8012e46:	4b08      	ldr	r3, [pc, #32]	@ (8012e68 <SetVOCindicator+0x1b4>)
 8012e48:	8819      	ldrh	r1, [r3, #0]
 8012e4a:	4b08      	ldr	r3, [pc, #32]	@ (8012e6c <SetVOCindicator+0x1b8>)
 8012e4c:	881b      	ldrh	r3, [r3, #0]
 8012e4e:	001a      	movs	r2, r3
 8012e50:	f7ff fcd8 	bl	8012804 <SetVocLED>
  }

}
 8012e54:	46c0      	nop			@ (mov r8, r8)
 8012e56:	46bd      	mov	sp, r7
 8012e58:	b002      	add	sp, #8
 8012e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8012e5c:	40590000 	.word	0x40590000
 8012e60:	3ff00000 	.word	0x3ff00000
 8012e64:	200000ea 	.word	0x200000ea
 8012e68:	20002166 	.word	0x20002166
 8012e6c:	20002168 	.word	0x20002168
 8012e70:	2000216a 	.word	0x2000216a
 8012e74:	40790000 	.word	0x40790000

08012e78 <powerCheck>:

Battery_Status powerCheck(){
 8012e78:	b590      	push	{r4, r7, lr}
 8012e7a:	b083      	sub	sp, #12
 8012e7c:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 8012e7e:	f7f6 fe6d 	bl	8009b5c <Check_USB_PowerOn>
 8012e82:	0003      	movs	r3, r0
 8012e84:	001a      	movs	r2, r3
 8012e86:	2301      	movs	r3, #1
 8012e88:	4053      	eors	r3, r2
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d005      	beq.n	8012e9c <powerCheck+0x24>
    status = batteryChargeCheck();
 8012e90:	1dfc      	adds	r4, r7, #7
 8012e92:	f7ff fb97 	bl	80125c4 <batteryChargeCheck>
 8012e96:	0003      	movs	r3, r0
 8012e98:	7023      	strb	r3, [r4, #0]
 8012e9a:	e002      	b.n	8012ea2 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 8012e9c:	1dfb      	adds	r3, r7, #7
 8012e9e:	2204      	movs	r2, #4
 8012ea0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8012ea2:	1dfb      	adds	r3, r7, #7
 8012ea4:	781b      	ldrb	r3, [r3, #0]
}
 8012ea6:	0018      	movs	r0, r3
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	b003      	add	sp, #12
 8012eac:	bd90      	pop	{r4, r7, pc}
	...

08012eb0 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8012eb0:	b5b0      	push	{r4, r5, r7, lr}
 8012eb2:	b086      	sub	sp, #24
 8012eb4:	af04      	add	r7, sp, #16
 8012eb6:	0002      	movs	r2, r0
 8012eb8:	1dfb      	adds	r3, r7, #7
 8012eba:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8012ebc:	1dfb      	adds	r3, r7, #7
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	2b04      	cmp	r3, #4
 8012ec2:	d114      	bne.n	8012eee <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar %dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 8012ec4:	f7f6 fd94 	bl	80099f0 <ReadBatteryVoltage>
 8012ec8:	1c03      	adds	r3, r0, #0
 8012eca:	1c18      	adds	r0, r3, #0
 8012ecc:	f7f0 fce2 	bl	8003894 <__aeabi_f2d>
 8012ed0:	0004      	movs	r4, r0
 8012ed2:	000d      	movs	r5, r1
 8012ed4:	f7f6 fdee 	bl	8009ab4 <ReadSolarVoltage>
 8012ed8:	0003      	movs	r3, r0
 8012eda:	0019      	movs	r1, r3
 8012edc:	4a2a      	ldr	r2, [pc, #168]	@ (8012f88 <powerDisplay+0xd8>)
 8012ede:	4b2b      	ldr	r3, [pc, #172]	@ (8012f8c <powerDisplay+0xdc>)
 8012ee0:	9102      	str	r1, [sp, #8]
 8012ee2:	9400      	str	r4, [sp, #0]
 8012ee4:	9501      	str	r5, [sp, #4]
 8012ee6:	0019      	movs	r1, r3
 8012ee8:	2003      	movs	r0, #3
 8012eea:	f000 ff71 	bl	8013dd0 <CreateLine>
  }
  if(status == BATTERY_FULL){
 8012eee:	1dfb      	adds	r3, r7, #7
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	2b03      	cmp	r3, #3
 8012ef4:	d105      	bne.n	8012f02 <powerDisplay+0x52>
    Debug("Battery fully charged");
 8012ef6:	4a26      	ldr	r2, [pc, #152]	@ (8012f90 <powerDisplay+0xe0>)
 8012ef8:	4b24      	ldr	r3, [pc, #144]	@ (8012f8c <powerDisplay+0xdc>)
 8012efa:	0019      	movs	r1, r3
 8012efc:	2003      	movs	r0, #3
 8012efe:	f000 ff67 	bl	8013dd0 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8012f02:	1dfb      	adds	r3, r7, #7
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	2b02      	cmp	r3, #2
 8012f08:	d105      	bne.n	8012f16 <powerDisplay+0x66>
    Debug("Battery status good");
 8012f0a:	4a22      	ldr	r2, [pc, #136]	@ (8012f94 <powerDisplay+0xe4>)
 8012f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8012f8c <powerDisplay+0xdc>)
 8012f0e:	0019      	movs	r1, r3
 8012f10:	2003      	movs	r0, #3
 8012f12:	f000 ff5d 	bl	8013dd0 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8012f16:	1dfb      	adds	r3, r7, #7
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d105      	bne.n	8012f2a <powerDisplay+0x7a>
    Debug("Battery status low");
 8012f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8012f98 <powerDisplay+0xe8>)
 8012f20:	4b1a      	ldr	r3, [pc, #104]	@ (8012f8c <powerDisplay+0xdc>)
 8012f22:	0019      	movs	r1, r3
 8012f24:	2003      	movs	r0, #3
 8012f26:	f000 ff53 	bl	8013dd0 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8012f2a:	1dfb      	adds	r3, r7, #7
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d105      	bne.n	8012f3e <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 8012f32:	4a1a      	ldr	r2, [pc, #104]	@ (8012f9c <powerDisplay+0xec>)
 8012f34:	4b15      	ldr	r3, [pc, #84]	@ (8012f8c <powerDisplay+0xdc>)
 8012f36:	0019      	movs	r1, r3
 8012f38:	2003      	movs	r0, #3
 8012f3a:	f000 ff49 	bl	8013dd0 <CreateLine>
  }
  switch (Read_Charge_Status()) {
 8012f3e:	f7f6 fe2b 	bl	8009b98 <Read_Charge_Status>
 8012f42:	0003      	movs	r3, r0
 8012f44:	2b02      	cmp	r3, #2
 8012f46:	d013      	beq.n	8012f70 <powerDisplay+0xc0>
 8012f48:	dc19      	bgt.n	8012f7e <powerDisplay+0xce>
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d002      	beq.n	8012f54 <powerDisplay+0xa4>
 8012f4e:	2b01      	cmp	r3, #1
 8012f50:	d007      	beq.n	8012f62 <powerDisplay+0xb2>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 8012f52:	e014      	b.n	8012f7e <powerDisplay+0xce>
    Debug("Battery charging off");
 8012f54:	4a12      	ldr	r2, [pc, #72]	@ (8012fa0 <powerDisplay+0xf0>)
 8012f56:	4b0d      	ldr	r3, [pc, #52]	@ (8012f8c <powerDisplay+0xdc>)
 8012f58:	0019      	movs	r1, r3
 8012f5a:	2003      	movs	r0, #3
 8012f5c:	f000 ff38 	bl	8013dd0 <CreateLine>
    break;
 8012f60:	e00d      	b.n	8012f7e <powerDisplay+0xce>
    Debug("Battery is charging");
 8012f62:	4a10      	ldr	r2, [pc, #64]	@ (8012fa4 <powerDisplay+0xf4>)
 8012f64:	4b09      	ldr	r3, [pc, #36]	@ (8012f8c <powerDisplay+0xdc>)
 8012f66:	0019      	movs	r1, r3
 8012f68:	2003      	movs	r0, #3
 8012f6a:	f000 ff31 	bl	8013dd0 <CreateLine>
    break;
 8012f6e:	e006      	b.n	8012f7e <powerDisplay+0xce>
    Debug("Battery full, charging off");
 8012f70:	4a0d      	ldr	r2, [pc, #52]	@ (8012fa8 <powerDisplay+0xf8>)
 8012f72:	4b06      	ldr	r3, [pc, #24]	@ (8012f8c <powerDisplay+0xdc>)
 8012f74:	0019      	movs	r1, r3
 8012f76:	2003      	movs	r0, #3
 8012f78:	f000 ff2a 	bl	8013dd0 <CreateLine>
    break;
 8012f7c:	46c0      	nop			@ (mov r8, r8)
}
 8012f7e:	46c0      	nop			@ (mov r8, r8)
 8012f80:	46bd      	mov	sp, r7
 8012f82:	b002      	add	sp, #8
 8012f84:	bdb0      	pop	{r4, r5, r7, pc}
 8012f86:	46c0      	nop			@ (mov r8, r8)
 8012f88:	0802d7d8 	.word	0x0802d7d8
 8012f8c:	0802d818 	.word	0x0802d818
 8012f90:	0802d81c 	.word	0x0802d81c
 8012f94:	0802d834 	.word	0x0802d834
 8012f98:	0802d848 	.word	0x0802d848
 8012f9c:	0802d85c 	.word	0x0802d85c
 8012fa0:	0802d880 	.word	0x0802d880
 8012fa4:	0802d898 	.word	0x0802d898
 8012fa8:	0802d8ac 	.word	0x0802d8ac

08012fac <configCheck>:

void configCheck(){
 8012fac:	b590      	push	{r4, r7, lr}
 8012fae:	b083      	sub	sp, #12
 8012fb0:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8012fb2:	f7f6 fe4d 	bl	8009c50 <BootButton_Pressed>
 8012fb6:	1e03      	subs	r3, r0, #0
 8012fb8:	d007      	beq.n	8012fca <configCheck+0x1e>
 8012fba:	f7f6 fe5b 	bl	8009c74 <UserButton_Pressed>
 8012fbe:	1e03      	subs	r3, r0, #0
 8012fc0:	d003      	beq.n	8012fca <configCheck+0x1e>
    configSet = true;
 8012fc2:	4bb5      	ldr	r3, [pc, #724]	@ (8013298 <configCheck+0x2ec>)
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	701a      	strb	r2, [r3, #0]
 8012fc8:	e00a      	b.n	8012fe0 <configCheck+0x34>
  }
  else{
    configSet = false;
 8012fca:	4bb3      	ldr	r3, [pc, #716]	@ (8013298 <configCheck+0x2ec>)
 8012fcc:	2200      	movs	r2, #0
 8012fce:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8012fd0:	f001 fc76 	bl	80148c0 <HAL_GetTick>
 8012fd4:	0003      	movs	r3, r0
 8012fd6:	22fa      	movs	r2, #250	@ 0xfa
 8012fd8:	00d2      	lsls	r2, r2, #3
 8012fda:	189a      	adds	r2, r3, r2
 8012fdc:	4baf      	ldr	r3, [pc, #700]	@ (801329c <configCheck+0x2f0>)
 8012fde:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8012fe0:	4bad      	ldr	r3, [pc, #692]	@ (8013298 <configCheck+0x2ec>)
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d00d      	beq.n	8013004 <configCheck+0x58>
 8012fe8:	4bac      	ldr	r3, [pc, #688]	@ (801329c <configCheck+0x2f0>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	0018      	movs	r0, r3
 8012fee:	f000 fe99 	bl	8013d24 <TimestampIsReached>
 8012ff2:	1e03      	subs	r3, r0, #0
 8012ff4:	d006      	beq.n	8013004 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8012ff6:	f7f1 feff 	bl	8004df8 <SetConfigMode>
    SetDBLED(true, true, true);
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	2101      	movs	r1, #1
 8012ffe:	2001      	movs	r0, #1
 8013000:	f7ff fbb6 	bl	8012770 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8013004:	f7f6 fe24 	bl	8009c50 <BootButton_Pressed>
 8013008:	0003      	movs	r3, r0
 801300a:	001a      	movs	r2, r3
 801300c:	2301      	movs	r3, #1
 801300e:	4053      	eors	r3, r2
 8013010:	b2db      	uxtb	r3, r3
 8013012:	2b00      	cmp	r3, #0
 8013014:	d05a      	beq.n	80130cc <configCheck+0x120>
 8013016:	f7f6 fe2d 	bl	8009c74 <UserButton_Pressed>
 801301a:	1e03      	subs	r3, r0, #0
 801301c:	d056      	beq.n	80130cc <configCheck+0x120>
 801301e:	4ba0      	ldr	r3, [pc, #640]	@ (80132a0 <configCheck+0x2f4>)
 8013020:	781b      	ldrb	r3, [r3, #0]
 8013022:	2201      	movs	r2, #1
 8013024:	4053      	eors	r3, r2
 8013026:	b2db      	uxtb	r3, r3
 8013028:	2b00      	cmp	r3, #0
 801302a:	d04f      	beq.n	80130cc <configCheck+0x120>
 801302c:	f7f1 ff04 	bl	8004e38 <GetReconfigMode>
 8013030:	0003      	movs	r3, r0
 8013032:	001a      	movs	r2, r3
 8013034:	2301      	movs	r3, #1
 8013036:	4053      	eors	r3, r2
 8013038:	b2db      	uxtb	r3, r3
 801303a:	2b00      	cmp	r3, #0
 801303c:	d046      	beq.n	80130cc <configCheck+0x120>
    SetLEDsOff();
 801303e:	f7ff fd21 	bl	8012a84 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8013042:	4a98      	ldr	r2, [pc, #608]	@ (80132a4 <configCheck+0x2f8>)
 8013044:	4997      	ldr	r1, [pc, #604]	@ (80132a4 <configCheck+0x2f8>)
 8013046:	4b97      	ldr	r3, [pc, #604]	@ (80132a4 <configCheck+0x2f8>)
 8013048:	0018      	movs	r0, r3
 801304a:	f7ff fbdb 	bl	8012804 <SetVocLED>
    HAL_Delay(1500);
 801304e:	4b96      	ldr	r3, [pc, #600]	@ (80132a8 <configCheck+0x2fc>)
 8013050:	0018      	movs	r0, r3
 8013052:	f001 fc3f 	bl	80148d4 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 8013056:	23fa      	movs	r3, #250	@ 0xfa
 8013058:	011a      	lsls	r2, r3, #4
 801305a:	23fa      	movs	r3, #250	@ 0xfa
 801305c:	0119      	lsls	r1, r3, #4
 801305e:	23fa      	movs	r3, #250	@ 0xfa
 8013060:	011b      	lsls	r3, r3, #4
 8013062:	0018      	movs	r0, r3
 8013064:	f7ff fbce 	bl	8012804 <SetVocLED>
    userToggle = !userToggle;
 8013068:	4b90      	ldr	r3, [pc, #576]	@ (80132ac <configCheck+0x300>)
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	1e5a      	subs	r2, r3, #1
 801306e:	4193      	sbcs	r3, r2
 8013070:	b2db      	uxtb	r3, r3
 8013072:	2201      	movs	r2, #1
 8013074:	4053      	eors	r3, r2
 8013076:	b2db      	uxtb	r3, r3
 8013078:	1c1a      	adds	r2, r3, #0
 801307a:	2301      	movs	r3, #1
 801307c:	4013      	ands	r3, r2
 801307e:	b2da      	uxtb	r2, r3
 8013080:	4b8a      	ldr	r3, [pc, #552]	@ (80132ac <configCheck+0x300>)
 8013082:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8013084:	4b89      	ldr	r3, [pc, #548]	@ (80132ac <configCheck+0x300>)
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d002      	beq.n	8013092 <configCheck+0xe6>
      EnabledConnectedDevices();
 801308c:	f7fa fde0 	bl	800dc50 <EnabledConnectedDevices>
 8013090:	e004      	b.n	801309c <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8013092:	f001 fc15 	bl	80148c0 <HAL_GetTick>
 8013096:	0002      	movs	r2, r0
 8013098:	4b85      	ldr	r3, [pc, #532]	@ (80132b0 <configCheck+0x304>)
 801309a:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 801309c:	4b83      	ldr	r3, [pc, #524]	@ (80132ac <configCheck+0x300>)
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d001      	beq.n	80130a8 <configCheck+0xfc>
 80130a4:	4b83      	ldr	r3, [pc, #524]	@ (80132b4 <configCheck+0x308>)
 80130a6:	e000      	b.n	80130aa <configCheck+0xfe>
 80130a8:	4b83      	ldr	r3, [pc, #524]	@ (80132b8 <configCheck+0x30c>)
 80130aa:	4a84      	ldr	r2, [pc, #528]	@ (80132bc <configCheck+0x310>)
 80130ac:	4984      	ldr	r1, [pc, #528]	@ (80132c0 <configCheck+0x314>)
 80130ae:	2003      	movs	r0, #3
 80130b0:	f000 fe8e 	bl	8013dd0 <CreateLine>
    userbuttonHeld = true;
 80130b4:	4b7a      	ldr	r3, [pc, #488]	@ (80132a0 <configCheck+0x2f4>)
 80130b6:	2201      	movs	r2, #1
 80130b8:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 80130ba:	f001 fc01 	bl	80148c0 <HAL_GetTick>
 80130be:	0003      	movs	r3, r0
 80130c0:	22fa      	movs	r2, #250	@ 0xfa
 80130c2:	00d2      	lsls	r2, r2, #3
 80130c4:	189a      	adds	r2, r3, r2
 80130c6:	4b7f      	ldr	r3, [pc, #508]	@ (80132c4 <configCheck+0x318>)
 80130c8:	601a      	str	r2, [r3, #0]
 80130ca:	e002      	b.n	80130d2 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 80130cc:	4b74      	ldr	r3, [pc, #464]	@ (80132a0 <configCheck+0x2f4>)
 80130ce:	2200      	movs	r2, #0
 80130d0:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 80130d2:	f7f6 fdbd 	bl	8009c50 <BootButton_Pressed>
 80130d6:	0003      	movs	r3, r0
 80130d8:	001a      	movs	r2, r3
 80130da:	2301      	movs	r3, #1
 80130dc:	4053      	eors	r3, r2
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d100      	bne.n	80130e6 <configCheck+0x13a>
 80130e4:	e0a4      	b.n	8013230 <configCheck+0x284>
 80130e6:	4b6e      	ldr	r3, [pc, #440]	@ (80132a0 <configCheck+0x2f4>)
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d100      	bne.n	80130f0 <configCheck+0x144>
 80130ee:	e09f      	b.n	8013230 <configCheck+0x284>
 80130f0:	4b74      	ldr	r3, [pc, #464]	@ (80132c4 <configCheck+0x318>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	0018      	movs	r0, r3
 80130f6:	f000 fe15 	bl	8013d24 <TimestampIsReached>
 80130fa:	1e03      	subs	r3, r0, #0
 80130fc:	d100      	bne.n	8013100 <configCheck+0x154>
 80130fe:	e097      	b.n	8013230 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013100:	f7fa f964 	bl	800d3cc <GetPMSensorPresence>
 8013104:	1e03      	subs	r3, r0, #0
 8013106:	d100      	bne.n	801310a <configCheck+0x15e>
 8013108:	e082      	b.n	8013210 <configCheck+0x264>
 801310a:	4b6f      	ldr	r3, [pc, #444]	@ (80132c8 <configCheck+0x31c>)
 801310c:	791b      	ldrb	r3, [r3, #4]
 801310e:	2b34      	cmp	r3, #52	@ 0x34
 8013110:	d004      	beq.n	801311c <configCheck+0x170>
 8013112:	4b6d      	ldr	r3, [pc, #436]	@ (80132c8 <configCheck+0x31c>)
 8013114:	791b      	ldrb	r3, [r3, #4]
 8013116:	2b35      	cmp	r3, #53	@ 0x35
 8013118:	d000      	beq.n	801311c <configCheck+0x170>
 801311a:	e079      	b.n	8013210 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 801311c:	4b6b      	ldr	r3, [pc, #428]	@ (80132cc <configCheck+0x320>)
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	1e5a      	subs	r2, r3, #1
 8013122:	4193      	sbcs	r3, r2
 8013124:	b2db      	uxtb	r3, r3
 8013126:	2201      	movs	r2, #1
 8013128:	4053      	eors	r3, r2
 801312a:	b2db      	uxtb	r3, r3
 801312c:	1c1a      	adds	r2, r3, #0
 801312e:	2301      	movs	r3, #1
 8013130:	4013      	ands	r3, r2
 8013132:	b2da      	uxtb	r2, r3
 8013134:	4b65      	ldr	r3, [pc, #404]	@ (80132cc <configCheck+0x320>)
 8013136:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8013138:	4b64      	ldr	r3, [pc, #400]	@ (80132cc <configCheck+0x320>)
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d005      	beq.n	801314c <configCheck+0x1a0>
 8013140:	1dbc      	adds	r4, r7, #6
 8013142:	f7ff fa99 	bl	8012678 <Calculate_LED_ON>
 8013146:	0003      	movs	r3, r0
 8013148:	8023      	strh	r3, [r4, #0]
 801314a:	e003      	b.n	8013154 <configCheck+0x1a8>
        else color = 4000;
 801314c:	1dbb      	adds	r3, r7, #6
 801314e:	22fa      	movs	r2, #250	@ 0xfa
 8013150:	0112      	lsls	r2, r2, #4
 8013152:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %sabled", VOCNOx?"en":"dis");
 8013154:	4b5d      	ldr	r3, [pc, #372]	@ (80132cc <configCheck+0x320>)
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d001      	beq.n	8013160 <configCheck+0x1b4>
 801315c:	4b55      	ldr	r3, [pc, #340]	@ (80132b4 <configCheck+0x308>)
 801315e:	e000      	b.n	8013162 <configCheck+0x1b6>
 8013160:	4b55      	ldr	r3, [pc, #340]	@ (80132b8 <configCheck+0x30c>)
 8013162:	4a5b      	ldr	r2, [pc, #364]	@ (80132d0 <configCheck+0x324>)
 8013164:	495b      	ldr	r1, [pc, #364]	@ (80132d4 <configCheck+0x328>)
 8013166:	2002      	movs	r0, #2
 8013168:	f000 fe32 	bl	8013dd0 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 801316c:	1d7b      	adds	r3, r7, #5
 801316e:	2200      	movs	r2, #0
 8013170:	701a      	strb	r2, [r3, #0]
 8013172:	e028      	b.n	80131c6 <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8013174:	f7ff fa80 	bl	8012678 <Calculate_LED_ON>
 8013178:	0003      	movs	r3, r0
 801317a:	001a      	movs	r2, r3
 801317c:	4b56      	ldr	r3, [pc, #344]	@ (80132d8 <configCheck+0x32c>)
 801317e:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8013180:	4b55      	ldr	r3, [pc, #340]	@ (80132d8 <configCheck+0x32c>)
 8013182:	1dba      	adds	r2, r7, #6
 8013184:	8812      	ldrh	r2, [r2, #0]
 8013186:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8013188:	4b53      	ldr	r3, [pc, #332]	@ (80132d8 <configCheck+0x32c>)
 801318a:	1dba      	adds	r2, r7, #6
 801318c:	8812      	ldrh	r2, [r2, #0]
 801318e:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013190:	23c8      	movs	r3, #200	@ 0xc8
 8013192:	005b      	lsls	r3, r3, #1
 8013194:	0018      	movs	r0, r3
 8013196:	f001 fb9d 	bl	80148d4 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 801319a:	4b4f      	ldr	r3, [pc, #316]	@ (80132d8 <configCheck+0x32c>)
 801319c:	22fa      	movs	r2, #250	@ 0xfa
 801319e:	0112      	lsls	r2, r2, #4
 80131a0:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 80131a2:	4b4d      	ldr	r3, [pc, #308]	@ (80132d8 <configCheck+0x32c>)
 80131a4:	22fa      	movs	r2, #250	@ 0xfa
 80131a6:	0112      	lsls	r2, r2, #4
 80131a8:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 80131aa:	4b4b      	ldr	r3, [pc, #300]	@ (80132d8 <configCheck+0x32c>)
 80131ac:	22fa      	movs	r2, #250	@ 0xfa
 80131ae:	0112      	lsls	r2, r2, #4
 80131b0:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 80131b2:	23c8      	movs	r3, #200	@ 0xc8
 80131b4:	005b      	lsls	r3, r3, #1
 80131b6:	0018      	movs	r0, r3
 80131b8:	f001 fb8c 	bl	80148d4 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 80131bc:	1d7b      	adds	r3, r7, #5
 80131be:	781a      	ldrb	r2, [r3, #0]
 80131c0:	1d7b      	adds	r3, r7, #5
 80131c2:	3201      	adds	r2, #1
 80131c4:	701a      	strb	r2, [r3, #0]
 80131c6:	1d7b      	adds	r3, r7, #5
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	2b01      	cmp	r3, #1
 80131cc:	d9d2      	bls.n	8013174 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 80131ce:	4b37      	ldr	r3, [pc, #220]	@ (80132ac <configCheck+0x300>)
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	1e5a      	subs	r2, r3, #1
 80131d4:	4193      	sbcs	r3, r2
 80131d6:	b2db      	uxtb	r3, r3
 80131d8:	2201      	movs	r2, #1
 80131da:	4053      	eors	r3, r2
 80131dc:	b2db      	uxtb	r3, r3
 80131de:	1c1a      	adds	r2, r3, #0
 80131e0:	2301      	movs	r3, #1
 80131e2:	4013      	ands	r3, r2
 80131e4:	b2da      	uxtb	r2, r3
 80131e6:	4b31      	ldr	r3, [pc, #196]	@ (80132ac <configCheck+0x300>)
 80131e8:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %sabled", userToggle?"en":"dis");
 80131ea:	4b30      	ldr	r3, [pc, #192]	@ (80132ac <configCheck+0x300>)
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <configCheck+0x24a>
 80131f2:	4b30      	ldr	r3, [pc, #192]	@ (80132b4 <configCheck+0x308>)
 80131f4:	e000      	b.n	80131f8 <configCheck+0x24c>
 80131f6:	4b30      	ldr	r3, [pc, #192]	@ (80132b8 <configCheck+0x30c>)
 80131f8:	4a38      	ldr	r2, [pc, #224]	@ (80132dc <configCheck+0x330>)
 80131fa:	4936      	ldr	r1, [pc, #216]	@ (80132d4 <configCheck+0x328>)
 80131fc:	2002      	movs	r0, #2
 80131fe:	f000 fde7 	bl	8013dd0 <CreateLine>
      if (usbPluggedIn) {
 8013202:	4b37      	ldr	r3, [pc, #220]	@ (80132e0 <configCheck+0x334>)
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d009      	beq.n	801321e <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 801320a:	f7fb ff1f 	bl	800f04c <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 801320e:	e006      	b.n	801321e <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8013210:	4a34      	ldr	r2, [pc, #208]	@ (80132e4 <configCheck+0x338>)
 8013212:	4b30      	ldr	r3, [pc, #192]	@ (80132d4 <configCheck+0x328>)
 8013214:	0019      	movs	r1, r3
 8013216:	2002      	movs	r0, #2
 8013218:	f000 fdda 	bl	8013dd0 <CreateLine>
 801321c:	e000      	b.n	8013220 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 801321e:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8013220:	46c0      	nop			@ (mov r8, r8)
 8013222:	f7f6 fd27 	bl	8009c74 <UserButton_Pressed>
 8013226:	1e03      	subs	r3, r0, #0
 8013228:	d1fb      	bne.n	8013222 <configCheck+0x276>
    }
    userbuttonHeld = false;
 801322a:	4b1d      	ldr	r3, [pc, #116]	@ (80132a0 <configCheck+0x2f4>)
 801322c:	2200      	movs	r2, #0
 801322e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8013230:	f7f6 fd0e 	bl	8009c50 <BootButton_Pressed>
 8013234:	0003      	movs	r3, r0
 8013236:	001a      	movs	r2, r3
 8013238:	2301      	movs	r3, #1
 801323a:	4053      	eors	r3, r2
 801323c:	b2db      	uxtb	r3, r3
 801323e:	2b00      	cmp	r3, #0
 8013240:	d00b      	beq.n	801325a <configCheck+0x2ae>
 8013242:	f7f6 fd17 	bl	8009c74 <UserButton_Pressed>
 8013246:	0003      	movs	r3, r0
 8013248:	001a      	movs	r2, r3
 801324a:	2301      	movs	r3, #1
 801324c:	4053      	eors	r3, r2
 801324e:	b2db      	uxtb	r3, r3
 8013250:	2b00      	cmp	r3, #0
 8013252:	d002      	beq.n	801325a <configCheck+0x2ae>
    userbuttonHeld = false;
 8013254:	4b12      	ldr	r3, [pc, #72]	@ (80132a0 <configCheck+0x2f4>)
 8013256:	2200      	movs	r2, #0
 8013258:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 801325a:	f7f6 fc7f 	bl	8009b5c <Check_USB_PowerOn>
 801325e:	1e03      	subs	r3, r0, #0
 8013260:	d003      	beq.n	801326a <configCheck+0x2be>
    usbPluggedIn = true;
 8013262:	4b1f      	ldr	r3, [pc, #124]	@ (80132e0 <configCheck+0x334>)
 8013264:	2201      	movs	r2, #1
 8013266:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 8013268:	e012      	b.n	8013290 <configCheck+0x2e4>
    if(!userToggle && !init){
 801326a:	4b10      	ldr	r3, [pc, #64]	@ (80132ac <configCheck+0x300>)
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	2201      	movs	r2, #1
 8013270:	4053      	eors	r3, r2
 8013272:	b2db      	uxtb	r3, r3
 8013274:	2b00      	cmp	r3, #0
 8013276:	d008      	beq.n	801328a <configCheck+0x2de>
 8013278:	4b1b      	ldr	r3, [pc, #108]	@ (80132e8 <configCheck+0x33c>)
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	2201      	movs	r2, #1
 801327e:	4053      	eors	r3, r2
 8013280:	b2db      	uxtb	r3, r3
 8013282:	2b00      	cmp	r3, #0
 8013284:	d001      	beq.n	801328a <configCheck+0x2de>
      SetLEDsOff();
 8013286:	f7ff fbfd 	bl	8012a84 <SetLEDsOff>
    usbPluggedIn = false;
 801328a:	4b15      	ldr	r3, [pc, #84]	@ (80132e0 <configCheck+0x334>)
 801328c:	2200      	movs	r2, #0
 801328e:	701a      	strb	r2, [r3, #0]
}
 8013290:	46c0      	nop			@ (mov r8, r8)
 8013292:	46bd      	mov	sp, r7
 8013294:	b003      	add	sp, #12
 8013296:	bd90      	pop	{r4, r7, pc}
 8013298:	20002150 	.word	0x20002150
 801329c:	20002158 	.word	0x20002158
 80132a0:	20002153 	.word	0x20002153
 80132a4:	00000bb8 	.word	0x00000bb8
 80132a8:	000005dc 	.word	0x000005dc
 80132ac:	20002152 	.word	0x20002152
 80132b0:	20001114 	.word	0x20001114
 80132b4:	0802d8c8 	.word	0x0802d8c8
 80132b8:	0802d8cc 	.word	0x0802d8cc
 80132bc:	0802d8d0 	.word	0x0802d8d0
 80132c0:	0802d818 	.word	0x0802d818
 80132c4:	2000215c 	.word	0x2000215c
 80132c8:	200011c4 	.word	0x200011c4
 80132cc:	200011c2 	.word	0x200011c2
 80132d0:	0802d8f0 	.word	0x0802d8f0
 80132d4:	0802d918 	.word	0x0802d918
 80132d8:	40000400 	.word	0x40000400
 80132dc:	0802d91c 	.word	0x0802d91c
 80132e0:	20002151 	.word	0x20002151
 80132e4:	0802d93c 	.word	0x0802d93c
 80132e8:	200000e8 	.word	0x200000e8

080132ec <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 80132ec:	b590      	push	{r4, r7, lr}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 80132f2:	1dfc      	adds	r4, r7, #7
 80132f4:	f7ff fdc0 	bl	8012e78 <powerCheck>
 80132f8:	0003      	movs	r3, r0
 80132fa:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 80132fc:	1dfb      	adds	r3, r7, #7
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	0018      	movs	r0, r3
 8013302:	f7ff fdd5 	bl	8012eb0 <powerDisplay>
  return status;
 8013306:	1dfb      	adds	r3, r7, #7
 8013308:	781b      	ldrb	r3, [r3, #0]
}
 801330a:	0018      	movs	r0, r3
 801330c:	46bd      	mov	sp, r7
 801330e:	b003      	add	sp, #12
 8013310:	bd90      	pop	{r4, r7, pc}
	...

08013314 <setuserToggle>:

void setuserToggle(void) {
 8013314:	b580      	push	{r7, lr}
 8013316:	af00      	add	r7, sp, #0
  if (!Check_USB_PowerOn()) { //operate only in battery operation mode
 8013318:	f7f6 fc20 	bl	8009b5c <Check_USB_PowerOn>
 801331c:	0003      	movs	r3, r0
 801331e:	001a      	movs	r2, r3
 8013320:	2301      	movs	r3, #1
 8013322:	4053      	eors	r3, r2
 8013324:	b2db      	uxtb	r3, r3
 8013326:	2b00      	cmp	r3, #0
 8013328:	d004      	beq.n	8013334 <setuserToggle+0x20>
    userToggle = true;
 801332a:	4b04      	ldr	r3, [pc, #16]	@ (801333c <setuserToggle+0x28>)
 801332c:	2201      	movs	r2, #1
 801332e:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 8013330:	f7fa fc8e 	bl	800dc50 <EnabledConnectedDevices>
  }
}
 8013334:	46c0      	nop			@ (mov r8, r8)
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
 801333a:	46c0      	nop			@ (mov r8, r8)
 801333c:	20002152 	.word	0x20002152

08013340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013344:	4b07      	ldr	r3, [pc, #28]	@ (8013364 <HAL_MspInit+0x24>)
 8013346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013348:	4b06      	ldr	r3, [pc, #24]	@ (8013364 <HAL_MspInit+0x24>)
 801334a:	2101      	movs	r1, #1
 801334c:	430a      	orrs	r2, r1
 801334e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8013350:	4b04      	ldr	r3, [pc, #16]	@ (8013364 <HAL_MspInit+0x24>)
 8013352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013354:	4b03      	ldr	r3, [pc, #12]	@ (8013364 <HAL_MspInit+0x24>)
 8013356:	2180      	movs	r1, #128	@ 0x80
 8013358:	0549      	lsls	r1, r1, #21
 801335a:	430a      	orrs	r2, r1
 801335c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801335e:	46c0      	nop			@ (mov r8, r8)
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	40021000 	.word	0x40021000

08013368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 801336c:	46c0      	nop			@ (mov r8, r8)
 801336e:	e7fd      	b.n	801336c <NMI_Handler+0x4>

08013370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013374:	46c0      	nop			@ (mov r8, r8)
 8013376:	e7fd      	b.n	8013374 <HardFault_Handler+0x4>

08013378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 801337c:	46c0      	nop			@ (mov r8, r8)
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}

08013382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8013382:	b580      	push	{r7, lr}
 8013384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8013386:	46c0      	nop			@ (mov r8, r8)
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8013390:	f001 fa84 	bl	801489c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8013394:	46c0      	nop			@ (mov r8, r8)
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
	...

0801339c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80133a0:	4b03      	ldr	r3, [pc, #12]	@ (80133b0 <RTC_IRQHandler+0x14>)
 80133a2:	0018      	movs	r0, r3
 80133a4:	f009 fb30 	bl	801ca08 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80133a8:	46c0      	nop			@ (mov r8, r8)
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	46c0      	nop			@ (mov r8, r8)
 80133b0:	2000119c 	.word	0x2000119c

080133b4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 80133b8:	2380      	movs	r3, #128	@ 0x80
 80133ba:	021b      	lsls	r3, r3, #8
 80133bc:	0018      	movs	r0, r3
 80133be:	f002 fd0f 	bl	8015de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80133c2:	46c0      	nop			@ (mov r8, r8)
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80133cc:	4b05      	ldr	r3, [pc, #20]	@ (80133e4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80133ce:	0018      	movs	r0, r3
 80133d0:	f002 f897 	bl	8015502 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80133d4:	4b04      	ldr	r3, [pc, #16]	@ (80133e8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80133d6:	0018      	movs	r0, r3
 80133d8:	f002 f893 	bl	8015502 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80133dc:	46c0      	nop			@ (mov r8, r8)
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
 80133e2:	46c0      	nop			@ (mov r8, r8)
 80133e4:	20001028 	.word	0x20001028
 80133e8:	20000fe0 	.word	0x20000fe0

080133ec <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80133f0:	4b07      	ldr	r3, [pc, #28]	@ (8013410 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80133f2:	0018      	movs	r0, r3
 80133f4:	f002 f885 	bl	8015502 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80133f8:	4b06      	ldr	r3, [pc, #24]	@ (8013414 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80133fa:	0018      	movs	r0, r3
 80133fc:	f002 f881 	bl	8015502 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8013400:	4b05      	ldr	r3, [pc, #20]	@ (8013418 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8013402:	0018      	movs	r0, r3
 8013404:	f002 f87d 	bl	8015502 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8013408:	46c0      	nop			@ (mov r8, r8)
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	46c0      	nop			@ (mov r8, r8)
 8013410:	200010ac 	.word	0x200010ac
 8013414:	20002458 	.word	0x20002458
 8013418:	200024a0 	.word	0x200024a0

0801341c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8013420:	4b03      	ldr	r3, [pc, #12]	@ (8013430 <USART4_5_IRQHandler+0x14>)
 8013422:	0018      	movs	r0, r3
 8013424:	f00a f9ea 	bl	801d7fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8013428:	46c0      	nop			@ (mov r8, r8)
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
 801342e:	46c0      	nop			@ (mov r8, r8)
 8013430:	200023a0 	.word	0x200023a0

08013434 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8013438:	4b09      	ldr	r3, [pc, #36]	@ (8013460 <I2C1_IRQHandler+0x2c>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	699a      	ldr	r2, [r3, #24]
 801343e:	23e0      	movs	r3, #224	@ 0xe0
 8013440:	00db      	lsls	r3, r3, #3
 8013442:	4013      	ands	r3, r2
 8013444:	d004      	beq.n	8013450 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8013446:	4b06      	ldr	r3, [pc, #24]	@ (8013460 <I2C1_IRQHandler+0x2c>)
 8013448:	0018      	movs	r0, r3
 801344a:	f003 fc13 	bl	8016c74 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 801344e:	e003      	b.n	8013458 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8013450:	4b03      	ldr	r3, [pc, #12]	@ (8013460 <I2C1_IRQHandler+0x2c>)
 8013452:	0018      	movs	r0, r3
 8013454:	f003 fbf4 	bl	8016c40 <HAL_I2C_EV_IRQHandler>
}
 8013458:	46c0      	nop			@ (mov r8, r8)
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	46c0      	nop			@ (mov r8, r8)
 8013460:	20000f38 	.word	0x20000f38

08013464 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8013468:	4b03      	ldr	r3, [pc, #12]	@ (8013478 <USART1_IRQHandler+0x14>)
 801346a:	0018      	movs	r0, r3
 801346c:	f00a f9c6 	bl	801d7fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8013470:	46c0      	nop			@ (mov r8, r8)
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
 8013476:	46c0      	nop			@ (mov r8, r8)
 8013478:	200022e8 	.word	0x200022e8

0801347c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8013480:	4b03      	ldr	r3, [pc, #12]	@ (8013490 <USB_IRQHandler+0x14>)
 8013482:	0018      	movs	r0, r3
 8013484:	f006 f90e 	bl	80196a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8013488:	46c0      	nop			@ (mov r8, r8)
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	46c0      	nop			@ (mov r8, r8)
 8013490:	200032bc 	.word	0x200032bc

08013494 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	af00      	add	r7, sp, #0
  return 1;
 8013498:	2301      	movs	r3, #1
}
 801349a:	0018      	movs	r0, r3
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <_kill>:

int _kill(int pid, int sig)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80134aa:	f013 f8a7 	bl	80265fc <__errno>
 80134ae:	0003      	movs	r3, r0
 80134b0:	2216      	movs	r2, #22
 80134b2:	601a      	str	r2, [r3, #0]
  return -1;
 80134b4:	2301      	movs	r3, #1
 80134b6:	425b      	negs	r3, r3
}
 80134b8:	0018      	movs	r0, r3
 80134ba:	46bd      	mov	sp, r7
 80134bc:	b002      	add	sp, #8
 80134be:	bd80      	pop	{r7, pc}

080134c0 <_exit>:

void _exit (int status)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80134c8:	2301      	movs	r3, #1
 80134ca:	425a      	negs	r2, r3
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	0011      	movs	r1, r2
 80134d0:	0018      	movs	r0, r3
 80134d2:	f7ff ffe5 	bl	80134a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80134d6:	46c0      	nop			@ (mov r8, r8)
 80134d8:	e7fd      	b.n	80134d6 <_exit+0x16>

080134da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80134da:	b580      	push	{r7, lr}
 80134dc:	b086      	sub	sp, #24
 80134de:	af00      	add	r7, sp, #0
 80134e0:	60f8      	str	r0, [r7, #12]
 80134e2:	60b9      	str	r1, [r7, #8]
 80134e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80134e6:	2300      	movs	r3, #0
 80134e8:	617b      	str	r3, [r7, #20]
 80134ea:	e00a      	b.n	8013502 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80134ec:	e000      	b.n	80134f0 <_read+0x16>
 80134ee:	bf00      	nop
 80134f0:	0001      	movs	r1, r0
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	1c5a      	adds	r2, r3, #1
 80134f6:	60ba      	str	r2, [r7, #8]
 80134f8:	b2ca      	uxtb	r2, r1
 80134fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	3301      	adds	r3, #1
 8013500:	617b      	str	r3, [r7, #20]
 8013502:	697a      	ldr	r2, [r7, #20]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	429a      	cmp	r2, r3
 8013508:	dbf0      	blt.n	80134ec <_read+0x12>
  }

  return len;
 801350a:	687b      	ldr	r3, [r7, #4]
}
 801350c:	0018      	movs	r0, r3
 801350e:	46bd      	mov	sp, r7
 8013510:	b006      	add	sp, #24
 8013512:	bd80      	pop	{r7, pc}

08013514 <_close>:
  }
  return len;
}

int _close(int file)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801351c:	2301      	movs	r3, #1
 801351e:	425b      	negs	r3, r3
}
 8013520:	0018      	movs	r0, r3
 8013522:	46bd      	mov	sp, r7
 8013524:	b002      	add	sp, #8
 8013526:	bd80      	pop	{r7, pc}

08013528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	2280      	movs	r2, #128	@ 0x80
 8013536:	0192      	lsls	r2, r2, #6
 8013538:	605a      	str	r2, [r3, #4]
  return 0;
 801353a:	2300      	movs	r3, #0
}
 801353c:	0018      	movs	r0, r3
 801353e:	46bd      	mov	sp, r7
 8013540:	b002      	add	sp, #8
 8013542:	bd80      	pop	{r7, pc}

08013544 <_isatty>:

int _isatty(int file)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801354c:	2301      	movs	r3, #1
}
 801354e:	0018      	movs	r0, r3
 8013550:	46bd      	mov	sp, r7
 8013552:	b002      	add	sp, #8
 8013554:	bd80      	pop	{r7, pc}

08013556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013556:	b580      	push	{r7, lr}
 8013558:	b084      	sub	sp, #16
 801355a:	af00      	add	r7, sp, #0
 801355c:	60f8      	str	r0, [r7, #12]
 801355e:	60b9      	str	r1, [r7, #8]
 8013560:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8013562:	2300      	movs	r3, #0
}
 8013564:	0018      	movs	r0, r3
 8013566:	46bd      	mov	sp, r7
 8013568:	b004      	add	sp, #16
 801356a:	bd80      	pop	{r7, pc}

0801356c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b086      	sub	sp, #24
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013574:	4a14      	ldr	r2, [pc, #80]	@ (80135c8 <_sbrk+0x5c>)
 8013576:	4b15      	ldr	r3, [pc, #84]	@ (80135cc <_sbrk+0x60>)
 8013578:	1ad3      	subs	r3, r2, r3
 801357a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013580:	4b13      	ldr	r3, [pc, #76]	@ (80135d0 <_sbrk+0x64>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d102      	bne.n	801358e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013588:	4b11      	ldr	r3, [pc, #68]	@ (80135d0 <_sbrk+0x64>)
 801358a:	4a12      	ldr	r2, [pc, #72]	@ (80135d4 <_sbrk+0x68>)
 801358c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801358e:	4b10      	ldr	r3, [pc, #64]	@ (80135d0 <_sbrk+0x64>)
 8013590:	681a      	ldr	r2, [r3, #0]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	18d3      	adds	r3, r2, r3
 8013596:	693a      	ldr	r2, [r7, #16]
 8013598:	429a      	cmp	r2, r3
 801359a:	d207      	bcs.n	80135ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 801359c:	f013 f82e 	bl	80265fc <__errno>
 80135a0:	0003      	movs	r3, r0
 80135a2:	220c      	movs	r2, #12
 80135a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80135a6:	2301      	movs	r3, #1
 80135a8:	425b      	negs	r3, r3
 80135aa:	e009      	b.n	80135c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80135ac:	4b08      	ldr	r3, [pc, #32]	@ (80135d0 <_sbrk+0x64>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80135b2:	4b07      	ldr	r3, [pc, #28]	@ (80135d0 <_sbrk+0x64>)
 80135b4:	681a      	ldr	r2, [r3, #0]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	18d2      	adds	r2, r2, r3
 80135ba:	4b05      	ldr	r3, [pc, #20]	@ (80135d0 <_sbrk+0x64>)
 80135bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80135be:	68fb      	ldr	r3, [r7, #12]
}
 80135c0:	0018      	movs	r0, r3
 80135c2:	46bd      	mov	sp, r7
 80135c4:	b006      	add	sp, #24
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	20005000 	.word	0x20005000
 80135cc:	00000400 	.word	0x00000400
 80135d0:	2000216c 	.word	0x2000216c
 80135d4:	20003920 	.word	0x20003920

080135d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80135dc:	46c0      	nop			@ (mov r8, r8)
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
	...

080135e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b086      	sub	sp, #24
 80135e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80135ea:	2310      	movs	r3, #16
 80135ec:	18fb      	adds	r3, r7, r3
 80135ee:	0018      	movs	r0, r3
 80135f0:	2308      	movs	r3, #8
 80135f2:	001a      	movs	r2, r3
 80135f4:	2100      	movs	r1, #0
 80135f6:	f012 ff5d 	bl	80264b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80135fa:	003b      	movs	r3, r7
 80135fc:	0018      	movs	r0, r3
 80135fe:	2310      	movs	r3, #16
 8013600:	001a      	movs	r2, r3
 8013602:	2100      	movs	r1, #0
 8013604:	f012 ff56 	bl	80264b4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013608:	4b2e      	ldr	r3, [pc, #184]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 801360a:	2280      	movs	r2, #128	@ 0x80
 801360c:	05d2      	lsls	r2, r2, #23
 801360e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8013610:	4b2c      	ldr	r3, [pc, #176]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 8013612:	2200      	movs	r2, #0
 8013614:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013616:	4b2b      	ldr	r3, [pc, #172]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 8013618:	2200      	movs	r2, #0
 801361a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 801361c:	4b29      	ldr	r3, [pc, #164]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 801361e:	4a2a      	ldr	r2, [pc, #168]	@ (80136c8 <MX_TIM2_Init+0xe4>)
 8013620:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013622:	4b28      	ldr	r3, [pc, #160]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 8013624:	2200      	movs	r2, #0
 8013626:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013628:	4b26      	ldr	r3, [pc, #152]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 801362a:	2200      	movs	r2, #0
 801362c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801362e:	4b25      	ldr	r3, [pc, #148]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 8013630:	0018      	movs	r0, r3
 8013632:	f009 faf7 	bl	801cc24 <HAL_TIM_PWM_Init>
 8013636:	1e03      	subs	r3, r0, #0
 8013638:	d001      	beq.n	801363e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 801363a:	f7f9 fe75 	bl	800d328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801363e:	2110      	movs	r1, #16
 8013640:	187b      	adds	r3, r7, r1
 8013642:	2200      	movs	r2, #0
 8013644:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013646:	187b      	adds	r3, r7, r1
 8013648:	2200      	movs	r2, #0
 801364a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801364c:	187a      	adds	r2, r7, r1
 801364e:	4b1d      	ldr	r3, [pc, #116]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 8013650:	0011      	movs	r1, r2
 8013652:	0018      	movs	r0, r3
 8013654:	f009 fe04 	bl	801d260 <HAL_TIMEx_MasterConfigSynchronization>
 8013658:	1e03      	subs	r3, r0, #0
 801365a:	d001      	beq.n	8013660 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 801365c:	f7f9 fe64 	bl	800d328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013660:	003b      	movs	r3, r7
 8013662:	2260      	movs	r2, #96	@ 0x60
 8013664:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8013666:	003b      	movs	r3, r7
 8013668:	2200      	movs	r2, #0
 801366a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801366c:	003b      	movs	r3, r7
 801366e:	2200      	movs	r2, #0
 8013670:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013672:	003b      	movs	r3, r7
 8013674:	2200      	movs	r2, #0
 8013676:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013678:	0039      	movs	r1, r7
 801367a:	4b12      	ldr	r3, [pc, #72]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 801367c:	2200      	movs	r2, #0
 801367e:	0018      	movs	r0, r3
 8013680:	f009 fba2 	bl	801cdc8 <HAL_TIM_PWM_ConfigChannel>
 8013684:	1e03      	subs	r3, r0, #0
 8013686:	d001      	beq.n	801368c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8013688:	f7f9 fe4e 	bl	800d328 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801368c:	0039      	movs	r1, r7
 801368e:	4b0d      	ldr	r3, [pc, #52]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 8013690:	2208      	movs	r2, #8
 8013692:	0018      	movs	r0, r3
 8013694:	f009 fb98 	bl	801cdc8 <HAL_TIM_PWM_ConfigChannel>
 8013698:	1e03      	subs	r3, r0, #0
 801369a:	d001      	beq.n	80136a0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 801369c:	f7f9 fe44 	bl	800d328 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80136a0:	0039      	movs	r1, r7
 80136a2:	4b08      	ldr	r3, [pc, #32]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 80136a4:	220c      	movs	r2, #12
 80136a6:	0018      	movs	r0, r3
 80136a8:	f009 fb8e 	bl	801cdc8 <HAL_TIM_PWM_ConfigChannel>
 80136ac:	1e03      	subs	r3, r0, #0
 80136ae:	d001      	beq.n	80136b4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80136b0:	f7f9 fe3a 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80136b4:	4b03      	ldr	r3, [pc, #12]	@ (80136c4 <MX_TIM2_Init+0xe0>)
 80136b6:	0018      	movs	r0, r3
 80136b8:	f000 f8fe 	bl	80138b8 <HAL_TIM_MspPostInit>

}
 80136bc:	46c0      	nop			@ (mov r8, r8)
 80136be:	46bd      	mov	sp, r7
 80136c0:	b006      	add	sp, #24
 80136c2:	bd80      	pop	{r7, pc}
 80136c4:	20002170 	.word	0x20002170
 80136c8:	0000ffff 	.word	0x0000ffff

080136cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b086      	sub	sp, #24
 80136d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80136d2:	2310      	movs	r3, #16
 80136d4:	18fb      	adds	r3, r7, r3
 80136d6:	0018      	movs	r0, r3
 80136d8:	2308      	movs	r3, #8
 80136da:	001a      	movs	r2, r3
 80136dc:	2100      	movs	r1, #0
 80136de:	f012 fee9 	bl	80264b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80136e2:	003b      	movs	r3, r7
 80136e4:	0018      	movs	r0, r3
 80136e6:	2310      	movs	r3, #16
 80136e8:	001a      	movs	r2, r3
 80136ea:	2100      	movs	r1, #0
 80136ec:	f012 fee2 	bl	80264b4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80136f0:	4b32      	ldr	r3, [pc, #200]	@ (80137bc <MX_TIM3_Init+0xf0>)
 80136f2:	4a33      	ldr	r2, [pc, #204]	@ (80137c0 <MX_TIM3_Init+0xf4>)
 80136f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80136f6:	4b31      	ldr	r3, [pc, #196]	@ (80137bc <MX_TIM3_Init+0xf0>)
 80136f8:	2200      	movs	r2, #0
 80136fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80136fc:	4b2f      	ldr	r3, [pc, #188]	@ (80137bc <MX_TIM3_Init+0xf0>)
 80136fe:	2200      	movs	r2, #0
 8013700:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8013702:	4b2e      	ldr	r3, [pc, #184]	@ (80137bc <MX_TIM3_Init+0xf0>)
 8013704:	4a2f      	ldr	r2, [pc, #188]	@ (80137c4 <MX_TIM3_Init+0xf8>)
 8013706:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013708:	4b2c      	ldr	r3, [pc, #176]	@ (80137bc <MX_TIM3_Init+0xf0>)
 801370a:	2200      	movs	r2, #0
 801370c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801370e:	4b2b      	ldr	r3, [pc, #172]	@ (80137bc <MX_TIM3_Init+0xf0>)
 8013710:	2200      	movs	r2, #0
 8013712:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013714:	4b29      	ldr	r3, [pc, #164]	@ (80137bc <MX_TIM3_Init+0xf0>)
 8013716:	0018      	movs	r0, r3
 8013718:	f009 fa84 	bl	801cc24 <HAL_TIM_PWM_Init>
 801371c:	1e03      	subs	r3, r0, #0
 801371e:	d001      	beq.n	8013724 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8013720:	f7f9 fe02 	bl	800d328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013724:	2110      	movs	r1, #16
 8013726:	187b      	adds	r3, r7, r1
 8013728:	2200      	movs	r2, #0
 801372a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801372c:	187b      	adds	r3, r7, r1
 801372e:	2200      	movs	r2, #0
 8013730:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8013732:	187a      	adds	r2, r7, r1
 8013734:	4b21      	ldr	r3, [pc, #132]	@ (80137bc <MX_TIM3_Init+0xf0>)
 8013736:	0011      	movs	r1, r2
 8013738:	0018      	movs	r0, r3
 801373a:	f009 fd91 	bl	801d260 <HAL_TIMEx_MasterConfigSynchronization>
 801373e:	1e03      	subs	r3, r0, #0
 8013740:	d001      	beq.n	8013746 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8013742:	f7f9 fdf1 	bl	800d328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013746:	003b      	movs	r3, r7
 8013748:	2260      	movs	r2, #96	@ 0x60
 801374a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 801374c:	003b      	movs	r3, r7
 801374e:	2200      	movs	r2, #0
 8013750:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013752:	003b      	movs	r3, r7
 8013754:	2200      	movs	r2, #0
 8013756:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013758:	003b      	movs	r3, r7
 801375a:	2200      	movs	r2, #0
 801375c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801375e:	0039      	movs	r1, r7
 8013760:	4b16      	ldr	r3, [pc, #88]	@ (80137bc <MX_TIM3_Init+0xf0>)
 8013762:	2200      	movs	r2, #0
 8013764:	0018      	movs	r0, r3
 8013766:	f009 fb2f 	bl	801cdc8 <HAL_TIM_PWM_ConfigChannel>
 801376a:	1e03      	subs	r3, r0, #0
 801376c:	d001      	beq.n	8013772 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 801376e:	f7f9 fddb 	bl	800d328 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8013772:	4b12      	ldr	r3, [pc, #72]	@ (80137bc <MX_TIM3_Init+0xf0>)
 8013774:	2104      	movs	r1, #4
 8013776:	0018      	movs	r0, r3
 8013778:	f009 fdd0 	bl	801d31c <HAL_TIMEx_RemapConfig>
 801377c:	1e03      	subs	r3, r0, #0
 801377e:	d001      	beq.n	8013784 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8013780:	f7f9 fdd2 	bl	800d328 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013784:	0039      	movs	r1, r7
 8013786:	4b0d      	ldr	r3, [pc, #52]	@ (80137bc <MX_TIM3_Init+0xf0>)
 8013788:	2204      	movs	r2, #4
 801378a:	0018      	movs	r0, r3
 801378c:	f009 fb1c 	bl	801cdc8 <HAL_TIM_PWM_ConfigChannel>
 8013790:	1e03      	subs	r3, r0, #0
 8013792:	d001      	beq.n	8013798 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8013794:	f7f9 fdc8 	bl	800d328 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013798:	0039      	movs	r1, r7
 801379a:	4b08      	ldr	r3, [pc, #32]	@ (80137bc <MX_TIM3_Init+0xf0>)
 801379c:	2208      	movs	r2, #8
 801379e:	0018      	movs	r0, r3
 80137a0:	f009 fb12 	bl	801cdc8 <HAL_TIM_PWM_ConfigChannel>
 80137a4:	1e03      	subs	r3, r0, #0
 80137a6:	d001      	beq.n	80137ac <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80137a8:	f7f9 fdbe 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80137ac:	4b03      	ldr	r3, [pc, #12]	@ (80137bc <MX_TIM3_Init+0xf0>)
 80137ae:	0018      	movs	r0, r3
 80137b0:	f000 f882 	bl	80138b8 <HAL_TIM_MspPostInit>

}
 80137b4:	46c0      	nop			@ (mov r8, r8)
 80137b6:	46bd      	mov	sp, r7
 80137b8:	b006      	add	sp, #24
 80137ba:	bd80      	pop	{r7, pc}
 80137bc:	200021b0 	.word	0x200021b0
 80137c0:	40000400 	.word	0x40000400
 80137c4:	0000ffff 	.word	0x0000ffff

080137c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b082      	sub	sp, #8
 80137cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80137ce:	003b      	movs	r3, r7
 80137d0:	0018      	movs	r0, r3
 80137d2:	2308      	movs	r3, #8
 80137d4:	001a      	movs	r2, r3
 80137d6:	2100      	movs	r1, #0
 80137d8:	f012 fe6c 	bl	80264b4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80137dc:	4b15      	ldr	r3, [pc, #84]	@ (8013834 <MX_TIM6_Init+0x6c>)
 80137de:	4a16      	ldr	r2, [pc, #88]	@ (8013838 <MX_TIM6_Init+0x70>)
 80137e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 80137e2:	4b14      	ldr	r3, [pc, #80]	@ (8013834 <MX_TIM6_Init+0x6c>)
 80137e4:	220a      	movs	r2, #10
 80137e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80137e8:	4b12      	ldr	r3, [pc, #72]	@ (8013834 <MX_TIM6_Init+0x6c>)
 80137ea:	2200      	movs	r2, #0
 80137ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80137ee:	4b11      	ldr	r3, [pc, #68]	@ (8013834 <MX_TIM6_Init+0x6c>)
 80137f0:	4a12      	ldr	r2, [pc, #72]	@ (801383c <MX_TIM6_Init+0x74>)
 80137f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80137f4:	4b0f      	ldr	r3, [pc, #60]	@ (8013834 <MX_TIM6_Init+0x6c>)
 80137f6:	2200      	movs	r2, #0
 80137f8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80137fa:	4b0e      	ldr	r3, [pc, #56]	@ (8013834 <MX_TIM6_Init+0x6c>)
 80137fc:	0018      	movs	r0, r3
 80137fe:	f009 f969 	bl	801cad4 <HAL_TIM_Base_Init>
 8013802:	1e03      	subs	r3, r0, #0
 8013804:	d001      	beq.n	801380a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8013806:	f7f9 fd8f 	bl	800d328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801380a:	003b      	movs	r3, r7
 801380c:	2200      	movs	r2, #0
 801380e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013810:	003b      	movs	r3, r7
 8013812:	2200      	movs	r2, #0
 8013814:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8013816:	003a      	movs	r2, r7
 8013818:	4b06      	ldr	r3, [pc, #24]	@ (8013834 <MX_TIM6_Init+0x6c>)
 801381a:	0011      	movs	r1, r2
 801381c:	0018      	movs	r0, r3
 801381e:	f009 fd1f 	bl	801d260 <HAL_TIMEx_MasterConfigSynchronization>
 8013822:	1e03      	subs	r3, r0, #0
 8013824:	d001      	beq.n	801382a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8013826:	f7f9 fd7f 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 801382a:	46c0      	nop			@ (mov r8, r8)
 801382c:	46bd      	mov	sp, r7
 801382e:	b002      	add	sp, #8
 8013830:	bd80      	pop	{r7, pc}
 8013832:	46c0      	nop			@ (mov r8, r8)
 8013834:	200021f0 	.word	0x200021f0
 8013838:	40001000 	.word	0x40001000
 801383c:	0000ffff 	.word	0x0000ffff

08013840 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681a      	ldr	r2, [r3, #0]
 801384c:	2380      	movs	r3, #128	@ 0x80
 801384e:	05db      	lsls	r3, r3, #23
 8013850:	429a      	cmp	r2, r3
 8013852:	d106      	bne.n	8013862 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8013854:	4b0a      	ldr	r3, [pc, #40]	@ (8013880 <HAL_TIM_PWM_MspInit+0x40>)
 8013856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013858:	4b09      	ldr	r3, [pc, #36]	@ (8013880 <HAL_TIM_PWM_MspInit+0x40>)
 801385a:	2101      	movs	r1, #1
 801385c:	430a      	orrs	r2, r1
 801385e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8013860:	e00a      	b.n	8013878 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	4a07      	ldr	r2, [pc, #28]	@ (8013884 <HAL_TIM_PWM_MspInit+0x44>)
 8013868:	4293      	cmp	r3, r2
 801386a:	d105      	bne.n	8013878 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801386c:	4b04      	ldr	r3, [pc, #16]	@ (8013880 <HAL_TIM_PWM_MspInit+0x40>)
 801386e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013870:	4b03      	ldr	r3, [pc, #12]	@ (8013880 <HAL_TIM_PWM_MspInit+0x40>)
 8013872:	2102      	movs	r1, #2
 8013874:	430a      	orrs	r2, r1
 8013876:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8013878:	46c0      	nop			@ (mov r8, r8)
 801387a:	46bd      	mov	sp, r7
 801387c:	b002      	add	sp, #8
 801387e:	bd80      	pop	{r7, pc}
 8013880:	40021000 	.word	0x40021000
 8013884:	40000400 	.word	0x40000400

08013888 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	4a06      	ldr	r2, [pc, #24]	@ (80138b0 <HAL_TIM_Base_MspInit+0x28>)
 8013896:	4293      	cmp	r3, r2
 8013898:	d105      	bne.n	80138a6 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801389a:	4b06      	ldr	r3, [pc, #24]	@ (80138b4 <HAL_TIM_Base_MspInit+0x2c>)
 801389c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801389e:	4b05      	ldr	r3, [pc, #20]	@ (80138b4 <HAL_TIM_Base_MspInit+0x2c>)
 80138a0:	2110      	movs	r1, #16
 80138a2:	430a      	orrs	r2, r1
 80138a4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80138a6:	46c0      	nop			@ (mov r8, r8)
 80138a8:	46bd      	mov	sp, r7
 80138aa:	b002      	add	sp, #8
 80138ac:	bd80      	pop	{r7, pc}
 80138ae:	46c0      	nop			@ (mov r8, r8)
 80138b0:	40001000 	.word	0x40001000
 80138b4:	40021000 	.word	0x40021000

080138b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80138b8:	b590      	push	{r4, r7, lr}
 80138ba:	b08b      	sub	sp, #44	@ 0x2c
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80138c0:	2414      	movs	r4, #20
 80138c2:	193b      	adds	r3, r7, r4
 80138c4:	0018      	movs	r0, r3
 80138c6:	2314      	movs	r3, #20
 80138c8:	001a      	movs	r2, r3
 80138ca:	2100      	movs	r1, #0
 80138cc:	f012 fdf2 	bl	80264b4 <memset>
  if(timHandle->Instance==TIM2)
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681a      	ldr	r2, [r3, #0]
 80138d4:	2380      	movs	r3, #128	@ 0x80
 80138d6:	05db      	lsls	r3, r3, #23
 80138d8:	429a      	cmp	r2, r3
 80138da:	d123      	bne.n	8013924 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80138dc:	4b27      	ldr	r3, [pc, #156]	@ (801397c <HAL_TIM_MspPostInit+0xc4>)
 80138de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138e0:	4b26      	ldr	r3, [pc, #152]	@ (801397c <HAL_TIM_MspPostInit+0xc4>)
 80138e2:	2101      	movs	r1, #1
 80138e4:	430a      	orrs	r2, r1
 80138e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80138e8:	4b24      	ldr	r3, [pc, #144]	@ (801397c <HAL_TIM_MspPostInit+0xc4>)
 80138ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138ec:	2201      	movs	r2, #1
 80138ee:	4013      	ands	r3, r2
 80138f0:	613b      	str	r3, [r7, #16]
 80138f2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80138f4:	0021      	movs	r1, r4
 80138f6:	187b      	adds	r3, r7, r1
 80138f8:	220d      	movs	r2, #13
 80138fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138fc:	187b      	adds	r3, r7, r1
 80138fe:	2202      	movs	r2, #2
 8013900:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013902:	187b      	adds	r3, r7, r1
 8013904:	2200      	movs	r2, #0
 8013906:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013908:	187b      	adds	r3, r7, r1
 801390a:	2200      	movs	r2, #0
 801390c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801390e:	187b      	adds	r3, r7, r1
 8013910:	2202      	movs	r2, #2
 8013912:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013914:	187a      	adds	r2, r7, r1
 8013916:	23a0      	movs	r3, #160	@ 0xa0
 8013918:	05db      	lsls	r3, r3, #23
 801391a:	0011      	movs	r1, r2
 801391c:	0018      	movs	r0, r3
 801391e:	f002 f8a7 	bl	8015a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8013922:	e027      	b.n	8013974 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	4a15      	ldr	r2, [pc, #84]	@ (8013980 <HAL_TIM_MspPostInit+0xc8>)
 801392a:	4293      	cmp	r3, r2
 801392c:	d122      	bne.n	8013974 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801392e:	4b13      	ldr	r3, [pc, #76]	@ (801397c <HAL_TIM_MspPostInit+0xc4>)
 8013930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013932:	4b12      	ldr	r3, [pc, #72]	@ (801397c <HAL_TIM_MspPostInit+0xc4>)
 8013934:	2104      	movs	r1, #4
 8013936:	430a      	orrs	r2, r1
 8013938:	62da      	str	r2, [r3, #44]	@ 0x2c
 801393a:	4b10      	ldr	r3, [pc, #64]	@ (801397c <HAL_TIM_MspPostInit+0xc4>)
 801393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801393e:	2204      	movs	r2, #4
 8013940:	4013      	ands	r3, r2
 8013942:	60fb      	str	r3, [r7, #12]
 8013944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8013946:	2114      	movs	r1, #20
 8013948:	187b      	adds	r3, r7, r1
 801394a:	22e0      	movs	r2, #224	@ 0xe0
 801394c:	0052      	lsls	r2, r2, #1
 801394e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013950:	187b      	adds	r3, r7, r1
 8013952:	2202      	movs	r2, #2
 8013954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013956:	187b      	adds	r3, r7, r1
 8013958:	2200      	movs	r2, #0
 801395a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801395c:	187b      	adds	r3, r7, r1
 801395e:	2200      	movs	r2, #0
 8013960:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013962:	187b      	adds	r3, r7, r1
 8013964:	2202      	movs	r2, #2
 8013966:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013968:	187b      	adds	r3, r7, r1
 801396a:	4a06      	ldr	r2, [pc, #24]	@ (8013984 <HAL_TIM_MspPostInit+0xcc>)
 801396c:	0019      	movs	r1, r3
 801396e:	0010      	movs	r0, r2
 8013970:	f002 f87e 	bl	8015a70 <HAL_GPIO_Init>
}
 8013974:	46c0      	nop			@ (mov r8, r8)
 8013976:	46bd      	mov	sp, r7
 8013978:	b00b      	add	sp, #44	@ 0x2c
 801397a:	bd90      	pop	{r4, r7, pc}
 801397c:	40021000 	.word	0x40021000
 8013980:	40000400 	.word	0x40000400
 8013984:	50000800 	.word	0x50000800

08013988 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 801398c:	4b17      	ldr	r3, [pc, #92]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 801398e:	4a18      	ldr	r2, [pc, #96]	@ (80139f0 <MX_LPUART1_UART_Init+0x68>)
 8013990:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8013992:	4b16      	ldr	r3, [pc, #88]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 8013994:	22e1      	movs	r2, #225	@ 0xe1
 8013996:	0252      	lsls	r2, r2, #9
 8013998:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801399a:	4b14      	ldr	r3, [pc, #80]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 801399c:	2200      	movs	r2, #0
 801399e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80139a0:	4b12      	ldr	r3, [pc, #72]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 80139a2:	2200      	movs	r2, #0
 80139a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80139a6:	4b11      	ldr	r3, [pc, #68]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 80139a8:	2200      	movs	r2, #0
 80139aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80139ac:	4b0f      	ldr	r3, [pc, #60]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 80139ae:	220c      	movs	r2, #12
 80139b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80139b2:	4b0e      	ldr	r3, [pc, #56]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 80139b4:	2200      	movs	r2, #0
 80139b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80139b8:	4b0c      	ldr	r3, [pc, #48]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 80139ba:	2200      	movs	r2, #0
 80139bc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80139be:	4b0b      	ldr	r3, [pc, #44]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 80139c0:	2218      	movs	r2, #24
 80139c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80139c4:	4b09      	ldr	r3, [pc, #36]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 80139c6:	2280      	movs	r2, #128	@ 0x80
 80139c8:	0212      	lsls	r2, r2, #8
 80139ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80139cc:	4b07      	ldr	r3, [pc, #28]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 80139ce:	2280      	movs	r2, #128	@ 0x80
 80139d0:	0152      	lsls	r2, r2, #5
 80139d2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80139d4:	4b05      	ldr	r3, [pc, #20]	@ (80139ec <MX_LPUART1_UART_Init+0x64>)
 80139d6:	0018      	movs	r0, r3
 80139d8:	f009 fcbe 	bl	801d358 <HAL_UART_Init>
 80139dc:	1e03      	subs	r3, r0, #0
 80139de:	d001      	beq.n	80139e4 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 80139e0:	f7f9 fca2 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80139e4:	46c0      	nop			@ (mov r8, r8)
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	46c0      	nop			@ (mov r8, r8)
 80139ec:	20002230 	.word	0x20002230
 80139f0:	40004800 	.word	0x40004800

080139f4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80139f8:	4b14      	ldr	r3, [pc, #80]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 80139fa:	4a15      	ldr	r2, [pc, #84]	@ (8013a50 <MX_USART1_UART_Init+0x5c>)
 80139fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80139fe:	4b13      	ldr	r3, [pc, #76]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 8013a00:	22e1      	movs	r2, #225	@ 0xe1
 8013a02:	0252      	lsls	r2, r2, #9
 8013a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013a06:	4b11      	ldr	r3, [pc, #68]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 8013a08:	2200      	movs	r2, #0
 8013a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 8013a0e:	2200      	movs	r2, #0
 8013a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013a12:	4b0e      	ldr	r3, [pc, #56]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 8013a14:	2200      	movs	r2, #0
 8013a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013a18:	4b0c      	ldr	r3, [pc, #48]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 8013a1a:	220c      	movs	r2, #12
 8013a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 8013a20:	2200      	movs	r2, #0
 8013a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013a24:	4b09      	ldr	r3, [pc, #36]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 8013a26:	2200      	movs	r2, #0
 8013a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013a2a:	4b08      	ldr	r3, [pc, #32]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013a30:	4b06      	ldr	r3, [pc, #24]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 8013a32:	2200      	movs	r2, #0
 8013a34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013a36:	4b05      	ldr	r3, [pc, #20]	@ (8013a4c <MX_USART1_UART_Init+0x58>)
 8013a38:	0018      	movs	r0, r3
 8013a3a:	f009 fc8d 	bl	801d358 <HAL_UART_Init>
 8013a3e:	1e03      	subs	r3, r0, #0
 8013a40:	d001      	beq.n	8013a46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8013a42:	f7f9 fc71 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013a46:	46c0      	nop			@ (mov r8, r8)
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}
 8013a4c:	200022e8 	.word	0x200022e8
 8013a50:	40013800 	.word	0x40013800

08013a54 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8013a58:	4b14      	ldr	r3, [pc, #80]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a5a:	4a15      	ldr	r2, [pc, #84]	@ (8013ab0 <MX_USART4_UART_Init+0x5c>)
 8013a5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8013a5e:	4b13      	ldr	r3, [pc, #76]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a60:	22e1      	movs	r2, #225	@ 0xe1
 8013a62:	0252      	lsls	r2, r2, #9
 8013a64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013a66:	4b11      	ldr	r3, [pc, #68]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a68:	2200      	movs	r2, #0
 8013a6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8013a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a6e:	2200      	movs	r2, #0
 8013a70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8013a72:	4b0e      	ldr	r3, [pc, #56]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a74:	2200      	movs	r2, #0
 8013a76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013a78:	4b0c      	ldr	r3, [pc, #48]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a7a:	220c      	movs	r2, #12
 8013a7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a80:	2200      	movs	r2, #0
 8013a82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013a84:	4b09      	ldr	r3, [pc, #36]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a86:	2200      	movs	r2, #0
 8013a88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013a8a:	4b08      	ldr	r3, [pc, #32]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013a90:	4b06      	ldr	r3, [pc, #24]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a92:	2200      	movs	r2, #0
 8013a94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013a96:	4b05      	ldr	r3, [pc, #20]	@ (8013aac <MX_USART4_UART_Init+0x58>)
 8013a98:	0018      	movs	r0, r3
 8013a9a:	f009 fc5d 	bl	801d358 <HAL_UART_Init>
 8013a9e:	1e03      	subs	r3, r0, #0
 8013aa0:	d001      	beq.n	8013aa6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8013aa2:	f7f9 fc41 	bl	800d328 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013aa6:	46c0      	nop			@ (mov r8, r8)
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}
 8013aac:	200023a0 	.word	0x200023a0
 8013ab0:	40004c00 	.word	0x40004c00

08013ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013ab4:	b590      	push	{r4, r7, lr}
 8013ab6:	b08d      	sub	sp, #52	@ 0x34
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013abc:	241c      	movs	r4, #28
 8013abe:	193b      	adds	r3, r7, r4
 8013ac0:	0018      	movs	r0, r3
 8013ac2:	2314      	movs	r3, #20
 8013ac4:	001a      	movs	r2, r3
 8013ac6:	2100      	movs	r1, #0
 8013ac8:	f012 fcf4 	bl	80264b4 <memset>
  if(uartHandle->Instance==LPUART1)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	4a8b      	ldr	r2, [pc, #556]	@ (8013d00 <HAL_UART_MspInit+0x24c>)
 8013ad2:	4293      	cmp	r3, r2
 8013ad4:	d129      	bne.n	8013b2a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013ad6:	4b8b      	ldr	r3, [pc, #556]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013ada:	4b8a      	ldr	r3, [pc, #552]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013adc:	2180      	movs	r1, #128	@ 0x80
 8013ade:	02c9      	lsls	r1, r1, #11
 8013ae0:	430a      	orrs	r2, r1
 8013ae2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013ae4:	4b87      	ldr	r3, [pc, #540]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ae8:	4b86      	ldr	r3, [pc, #536]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013aea:	2104      	movs	r1, #4
 8013aec:	430a      	orrs	r2, r1
 8013aee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013af0:	4b84      	ldr	r3, [pc, #528]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013af4:	2204      	movs	r2, #4
 8013af6:	4013      	ands	r3, r2
 8013af8:	61bb      	str	r3, [r7, #24]
 8013afa:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013afc:	0021      	movs	r1, r4
 8013afe:	187b      	adds	r3, r7, r1
 8013b00:	2203      	movs	r2, #3
 8013b02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b04:	187b      	adds	r3, r7, r1
 8013b06:	2202      	movs	r2, #2
 8013b08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b0a:	187b      	adds	r3, r7, r1
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b10:	187b      	adds	r3, r7, r1
 8013b12:	2203      	movs	r2, #3
 8013b14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013b16:	187b      	adds	r3, r7, r1
 8013b18:	2206      	movs	r2, #6
 8013b1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013b1c:	187b      	adds	r3, r7, r1
 8013b1e:	4a7a      	ldr	r2, [pc, #488]	@ (8013d08 <HAL_UART_MspInit+0x254>)
 8013b20:	0019      	movs	r1, r3
 8013b22:	0010      	movs	r0, r2
 8013b24:	f001 ffa4 	bl	8015a70 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8013b28:	e0e5      	b.n	8013cf6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	4a77      	ldr	r2, [pc, #476]	@ (8013d0c <HAL_UART_MspInit+0x258>)
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d133      	bne.n	8013b9c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8013b34:	4b73      	ldr	r3, [pc, #460]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013b38:	4b72      	ldr	r3, [pc, #456]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013b3a:	2180      	movs	r1, #128	@ 0x80
 8013b3c:	01c9      	lsls	r1, r1, #7
 8013b3e:	430a      	orrs	r2, r1
 8013b40:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013b42:	4b70      	ldr	r3, [pc, #448]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b46:	4b6f      	ldr	r3, [pc, #444]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013b48:	2101      	movs	r1, #1
 8013b4a:	430a      	orrs	r2, r1
 8013b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b52:	2201      	movs	r2, #1
 8013b54:	4013      	ands	r3, r2
 8013b56:	617b      	str	r3, [r7, #20]
 8013b58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013b5a:	211c      	movs	r1, #28
 8013b5c:	187b      	adds	r3, r7, r1
 8013b5e:	22c0      	movs	r2, #192	@ 0xc0
 8013b60:	00d2      	lsls	r2, r2, #3
 8013b62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b64:	187b      	adds	r3, r7, r1
 8013b66:	2202      	movs	r2, #2
 8013b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b6a:	187b      	adds	r3, r7, r1
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b70:	187b      	adds	r3, r7, r1
 8013b72:	2203      	movs	r2, #3
 8013b74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013b76:	187b      	adds	r3, r7, r1
 8013b78:	2204      	movs	r2, #4
 8013b7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013b7c:	187a      	adds	r2, r7, r1
 8013b7e:	23a0      	movs	r3, #160	@ 0xa0
 8013b80:	05db      	lsls	r3, r3, #23
 8013b82:	0011      	movs	r1, r2
 8013b84:	0018      	movs	r0, r3
 8013b86:	f001 ff73 	bl	8015a70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	2100      	movs	r1, #0
 8013b8e:	201b      	movs	r0, #27
 8013b90:	f001 fb1c 	bl	80151cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013b94:	201b      	movs	r0, #27
 8013b96:	f001 fb2e 	bl	80151f6 <HAL_NVIC_EnableIRQ>
}
 8013b9a:	e0ac      	b.n	8013cf6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	4a5b      	ldr	r2, [pc, #364]	@ (8013d10 <HAL_UART_MspInit+0x25c>)
 8013ba2:	4293      	cmp	r3, r2
 8013ba4:	d000      	beq.n	8013ba8 <HAL_UART_MspInit+0xf4>
 8013ba6:	e0a6      	b.n	8013cf6 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013ba8:	4b56      	ldr	r3, [pc, #344]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013baa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013bac:	4b55      	ldr	r3, [pc, #340]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013bae:	2180      	movs	r1, #128	@ 0x80
 8013bb0:	0309      	lsls	r1, r1, #12
 8013bb2:	430a      	orrs	r2, r1
 8013bb4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013bb6:	4b53      	ldr	r3, [pc, #332]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bba:	4b52      	ldr	r3, [pc, #328]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013bbc:	2101      	movs	r1, #1
 8013bbe:	430a      	orrs	r2, r1
 8013bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013bc2:	4b50      	ldr	r3, [pc, #320]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	4013      	ands	r3, r2
 8013bca:	613b      	str	r3, [r7, #16]
 8013bcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013bce:	4b4d      	ldr	r3, [pc, #308]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013bd4:	2104      	movs	r1, #4
 8013bd6:	430a      	orrs	r2, r1
 8013bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013bda:	4b4a      	ldr	r3, [pc, #296]	@ (8013d04 <HAL_UART_MspInit+0x250>)
 8013bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bde:	2204      	movs	r2, #4
 8013be0:	4013      	ands	r3, r2
 8013be2:	60fb      	str	r3, [r7, #12]
 8013be4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013be6:	241c      	movs	r4, #28
 8013be8:	193b      	adds	r3, r7, r4
 8013bea:	2202      	movs	r2, #2
 8013bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bee:	193b      	adds	r3, r7, r4
 8013bf0:	2202      	movs	r2, #2
 8013bf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bf4:	193b      	adds	r3, r7, r4
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bfa:	193b      	adds	r3, r7, r4
 8013bfc:	2203      	movs	r2, #3
 8013bfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013c00:	193b      	adds	r3, r7, r4
 8013c02:	2206      	movs	r2, #6
 8013c04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c06:	193a      	adds	r2, r7, r4
 8013c08:	23a0      	movs	r3, #160	@ 0xa0
 8013c0a:	05db      	lsls	r3, r3, #23
 8013c0c:	0011      	movs	r1, r2
 8013c0e:	0018      	movs	r0, r3
 8013c10:	f001 ff2e 	bl	8015a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013c14:	0021      	movs	r1, r4
 8013c16:	187b      	adds	r3, r7, r1
 8013c18:	2280      	movs	r2, #128	@ 0x80
 8013c1a:	00d2      	lsls	r2, r2, #3
 8013c1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c1e:	187b      	adds	r3, r7, r1
 8013c20:	2202      	movs	r2, #2
 8013c22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c24:	187b      	adds	r3, r7, r1
 8013c26:	2200      	movs	r2, #0
 8013c28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c2a:	187b      	adds	r3, r7, r1
 8013c2c:	2203      	movs	r2, #3
 8013c2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013c30:	187b      	adds	r3, r7, r1
 8013c32:	2206      	movs	r2, #6
 8013c34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013c36:	187b      	adds	r3, r7, r1
 8013c38:	4a33      	ldr	r2, [pc, #204]	@ (8013d08 <HAL_UART_MspInit+0x254>)
 8013c3a:	0019      	movs	r1, r3
 8013c3c:	0010      	movs	r0, r2
 8013c3e:	f001 ff17 	bl	8015a70 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8013c42:	4b34      	ldr	r3, [pc, #208]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c44:	4a34      	ldr	r2, [pc, #208]	@ (8013d18 <HAL_UART_MspInit+0x264>)
 8013c46:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8013c48:	4b32      	ldr	r3, [pc, #200]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c4a:	220c      	movs	r2, #12
 8013c4c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013c4e:	4b31      	ldr	r3, [pc, #196]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013c54:	4b2f      	ldr	r3, [pc, #188]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c56:	2200      	movs	r2, #0
 8013c58:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c5c:	2280      	movs	r2, #128	@ 0x80
 8013c5e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013c60:	4b2c      	ldr	r3, [pc, #176]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c62:	2200      	movs	r2, #0
 8013c64:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013c66:	4b2b      	ldr	r3, [pc, #172]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c68:	2200      	movs	r2, #0
 8013c6a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8013c6c:	4b29      	ldr	r3, [pc, #164]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c6e:	2220      	movs	r2, #32
 8013c70:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013c72:	4b28      	ldr	r3, [pc, #160]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c74:	2200      	movs	r2, #0
 8013c76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8013c78:	4b26      	ldr	r3, [pc, #152]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c7a:	0018      	movs	r0, r3
 8013c7c:	f001 fadc 	bl	8015238 <HAL_DMA_Init>
 8013c80:	1e03      	subs	r3, r0, #0
 8013c82:	d001      	beq.n	8013c88 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013c84:	f7f9 fb50 	bl	800d328 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	4a22      	ldr	r2, [pc, #136]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c8c:	675a      	str	r2, [r3, #116]	@ 0x74
 8013c8e:	4b21      	ldr	r3, [pc, #132]	@ (8013d14 <HAL_UART_MspInit+0x260>)
 8013c90:	687a      	ldr	r2, [r7, #4]
 8013c92:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013c94:	4b21      	ldr	r3, [pc, #132]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013c96:	4a22      	ldr	r2, [pc, #136]	@ (8013d20 <HAL_UART_MspInit+0x26c>)
 8013c98:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8013c9a:	4b20      	ldr	r3, [pc, #128]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013c9c:	220c      	movs	r2, #12
 8013c9e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013ca2:	2210      	movs	r2, #16
 8013ca4:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013ca8:	2200      	movs	r2, #0
 8013caa:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013cac:	4b1b      	ldr	r3, [pc, #108]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013cae:	2280      	movs	r2, #128	@ 0x80
 8013cb0:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013cb8:	4b18      	ldr	r3, [pc, #96]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013cba:	2200      	movs	r2, #0
 8013cbc:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8013cbe:	4b17      	ldr	r3, [pc, #92]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013cc4:	4b15      	ldr	r3, [pc, #84]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8013cca:	4b14      	ldr	r3, [pc, #80]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013ccc:	0018      	movs	r0, r3
 8013cce:	f001 fab3 	bl	8015238 <HAL_DMA_Init>
 8013cd2:	1e03      	subs	r3, r0, #0
 8013cd4:	d001      	beq.n	8013cda <HAL_UART_MspInit+0x226>
      Error_Handler();
 8013cd6:	f7f9 fb27 	bl	800d328 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	4a0f      	ldr	r2, [pc, #60]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013cde:	671a      	str	r2, [r3, #112]	@ 0x70
 8013ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8013d1c <HAL_UART_MspInit+0x268>)
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	2100      	movs	r1, #0
 8013cea:	200e      	movs	r0, #14
 8013cec:	f001 fa6e 	bl	80151cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8013cf0:	200e      	movs	r0, #14
 8013cf2:	f001 fa80 	bl	80151f6 <HAL_NVIC_EnableIRQ>
}
 8013cf6:	46c0      	nop			@ (mov r8, r8)
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	b00d      	add	sp, #52	@ 0x34
 8013cfc:	bd90      	pop	{r4, r7, pc}
 8013cfe:	46c0      	nop			@ (mov r8, r8)
 8013d00:	40004800 	.word	0x40004800
 8013d04:	40021000 	.word	0x40021000
 8013d08:	50000800 	.word	0x50000800
 8013d0c:	40013800 	.word	0x40013800
 8013d10:	40004c00 	.word	0x40004c00
 8013d14:	20002458 	.word	0x20002458
 8013d18:	4002006c 	.word	0x4002006c
 8013d1c:	200024a0 	.word	0x200024a0
 8013d20:	40020080 	.word	0x40020080

08013d24 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 192

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b086      	sub	sp, #24
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013d2c:	f000 fdc8 	bl	80148c0 <HAL_GetTick>
 8013d30:	0003      	movs	r3, r0
 8013d32:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8013d34:	4b1c      	ldr	r3, [pc, #112]	@ (8013da8 <TimestampIsReached+0x84>)
 8013d36:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8013d38:	697a      	ldr	r2, [r7, #20]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d307      	bcc.n	8013d50 <TimestampIsReached+0x2c>
 8013d40:	697a      	ldr	r2, [r7, #20]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	1ad3      	subs	r3, r2, r3
 8013d46:	693a      	ldr	r2, [r7, #16]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d901      	bls.n	8013d50 <TimestampIsReached+0x2c>
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	e000      	b.n	8013d52 <TimestampIsReached+0x2e>
 8013d50:	2200      	movs	r2, #0
 8013d52:	230f      	movs	r3, #15
 8013d54:	18fb      	adds	r3, r7, r3
 8013d56:	701a      	strb	r2, [r3, #0]
 8013d58:	781a      	ldrb	r2, [r3, #0]
 8013d5a:	2101      	movs	r1, #1
 8013d5c:	400a      	ands	r2, r1
 8013d5e:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013d60:	697a      	ldr	r2, [r7, #20]
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d207      	bcs.n	8013d78 <TimestampIsReached+0x54>
 8013d68:	687a      	ldr	r2, [r7, #4]
 8013d6a:	697b      	ldr	r3, [r7, #20]
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	693a      	ldr	r2, [r7, #16]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d201      	bcs.n	8013d78 <TimestampIsReached+0x54>
 8013d74:	2201      	movs	r2, #1
 8013d76:	e000      	b.n	8013d7a <TimestampIsReached+0x56>
 8013d78:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8013d7a:	200e      	movs	r0, #14
 8013d7c:	183b      	adds	r3, r7, r0
 8013d7e:	701a      	strb	r2, [r3, #0]
 8013d80:	781a      	ldrb	r2, [r3, #0]
 8013d82:	2101      	movs	r1, #1
 8013d84:	400a      	ands	r2, r1
 8013d86:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013d88:	230f      	movs	r3, #15
 8013d8a:	18fb      	adds	r3, r7, r3
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d103      	bne.n	8013d9a <TimestampIsReached+0x76>
 8013d92:	183b      	adds	r3, r7, r0
 8013d94:	781b      	ldrb	r3, [r3, #0]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d001      	beq.n	8013d9e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	e000      	b.n	8013da0 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8013d9e:	2300      	movs	r3, #0
}
 8013da0:	0018      	movs	r0, r3
 8013da2:	46bd      	mov	sp, r7
 8013da4:	b006      	add	sp, #24
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	7fffffff 	.word	0x7fffffff

08013dac <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013db4:	f000 fd84 	bl	80148c0 <HAL_GetTick>
 8013db8:	0002      	movs	r2, r0
 8013dba:	4904      	ldr	r1, [pc, #16]	@ (8013dcc <AddTimestamp+0x20>)
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	0018      	movs	r0, r3
 8013dc0:	f012 fa30 	bl	8026224 <siprintf>
}
 8013dc4:	46c0      	nop			@ (mov r8, r8)
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	b002      	add	sp, #8
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	0802d970 	.word	0x0802d970

08013dd0 <CreateLine>:


void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013dd0:	b40c      	push	{r2, r3}
 8013dd2:	b5b0      	push	{r4, r5, r7, lr}
 8013dd4:	b0b4      	sub	sp, #208	@ 0xd0
 8013dd6:	af00      	add	r7, sp, #0
 8013dd8:	0002      	movs	r2, r0
 8013dda:	6039      	str	r1, [r7, #0]
 8013ddc:	1dfb      	adds	r3, r7, #7
 8013dde:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8013de0:	4b2a      	ldr	r3, [pc, #168]	@ (8013e8c <CreateLine+0xbc>)
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	1dfa      	adds	r2, r7, #7
 8013de6:	7812      	ldrb	r2, [r2, #0]
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d848      	bhi.n	8013e7e <CreateLine+0xae>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8013dec:	683a      	ldr	r2, [r7, #0]
 8013dee:	4928      	ldr	r1, [pc, #160]	@ (8013e90 <CreateLine+0xc0>)
 8013df0:	240c      	movs	r4, #12
 8013df2:	193b      	adds	r3, r7, r4
 8013df4:	0018      	movs	r0, r3
 8013df6:	f012 fa15 	bl	8026224 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8013dfa:	4b24      	ldr	r3, [pc, #144]	@ (8013e8c <CreateLine+0xbc>)
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	2b01      	cmp	r3, #1
 8013e00:	d909      	bls.n	8013e16 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8013e02:	193b      	adds	r3, r7, r4
 8013e04:	0018      	movs	r0, r3
 8013e06:	f7ec f9b1 	bl	800016c <strlen>
 8013e0a:	0002      	movs	r2, r0
 8013e0c:	193b      	adds	r3, r7, r4
 8013e0e:	189b      	adds	r3, r3, r2
 8013e10:	0018      	movs	r0, r3
 8013e12:	f7ff ffcb 	bl	8013dac <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8013e16:	240c      	movs	r4, #12
 8013e18:	193b      	adds	r3, r7, r4
 8013e1a:	0018      	movs	r0, r3
 8013e1c:	f7ec f9a6 	bl	800016c <strlen>
 8013e20:	0003      	movs	r3, r0
 8013e22:	21cc      	movs	r1, #204	@ 0xcc
 8013e24:	187a      	adds	r2, r7, r1
 8013e26:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8013e28:	23dc      	movs	r3, #220	@ 0xdc
 8013e2a:	2508      	movs	r5, #8
 8013e2c:	195b      	adds	r3, r3, r5
 8013e2e:	19db      	adds	r3, r3, r7
 8013e30:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset - 2, format, args);
 8013e32:	193a      	adds	r2, r7, r4
 8013e34:	187b      	adds	r3, r7, r1
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	18d0      	adds	r0, r2, r3
 8013e3a:	187b      	adds	r3, r7, r1
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	22be      	movs	r2, #190	@ 0xbe
 8013e40:	1ad3      	subs	r3, r2, r3
 8013e42:	0019      	movs	r1, r3
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	22d8      	movs	r2, #216	@ 0xd8
 8013e48:	1952      	adds	r2, r2, r5
 8013e4a:	19d2      	adds	r2, r2, r7
 8013e4c:	6812      	ldr	r2, [r2, #0]
 8013e4e:	f012 fa85 	bl	802635c <vsniprintf>
  va_end(args);

  if (usblog && Check_USB_PowerOn()){
 8013e52:	4b10      	ldr	r3, [pc, #64]	@ (8013e94 <CreateLine+0xc4>)
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d009      	beq.n	8013e6e <CreateLine+0x9e>
 8013e5a:	f7f5 fe7f 	bl	8009b5c <Check_USB_PowerOn>
 8013e5e:	1e03      	subs	r3, r0, #0
 8013e60:	d005      	beq.n	8013e6e <CreateLine+0x9e>
    printf_USB("%s\r\n", textBuffer);
 8013e62:	193a      	adds	r2, r7, r4
 8013e64:	4b0c      	ldr	r3, [pc, #48]	@ (8013e98 <CreateLine+0xc8>)
 8013e66:	0011      	movs	r1, r2
 8013e68:	0018      	movs	r0, r3
 8013e6a:	f7f4 fdbd 	bl	80089e8 <printf_USB>
      printf_USB("%s\r\n", textBuffer);
    }
*/
  }
  // Print the final formatted message to serial
  printf("%s\r\n", textBuffer);
 8013e6e:	230c      	movs	r3, #12
 8013e70:	18fa      	adds	r2, r7, r3
 8013e72:	4b09      	ldr	r3, [pc, #36]	@ (8013e98 <CreateLine+0xc8>)
 8013e74:	0011      	movs	r1, r2
 8013e76:	0018      	movs	r0, r3
 8013e78:	f012 f964 	bl	8026144 <iprintf>
 8013e7c:	e000      	b.n	8013e80 <CreateLine+0xb0>
    return;
 8013e7e:	46c0      	nop			@ (mov r8, r8)
}
 8013e80:	46bd      	mov	sp, r7
 8013e82:	b034      	add	sp, #208	@ 0xd0
 8013e84:	bcb0      	pop	{r4, r5, r7}
 8013e86:	bc08      	pop	{r3}
 8013e88:	b002      	add	sp, #8
 8013e8a:	4718      	bx	r3
 8013e8c:	200000f0 	.word	0x200000f0
 8013e90:	0802d97c 	.word	0x0802d97c
 8013e94:	200010f7 	.word	0x200010f7
 8013e98:	0802d980 	.word	0x0802d980

08013e9c <_write>:

int _write(int fd, void *buf, size_t count) {
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	60f8      	str	r0, [r7, #12]
 8013ea4:	60b9      	str	r1, [r7, #8]
 8013ea6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	b29a      	uxth	r2, r3
 8013eac:	68b9      	ldr	r1, [r7, #8]
 8013eae:	4804      	ldr	r0, [pc, #16]	@ (8013ec0 <_write+0x24>)
 8013eb0:	2364      	movs	r3, #100	@ 0x64
 8013eb2:	f009 fab7 	bl	801d424 <HAL_UART_Transmit>
  return count;
 8013eb6:	687b      	ldr	r3, [r7, #4]
}
 8013eb8:	0018      	movs	r0, r3
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	b004      	add	sp, #16
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	200022e8 	.word	0x200022e8

08013ec4 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	0002      	movs	r2, r0
 8013ecc:	1dfb      	adds	r3, r7, #7
 8013ece:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8013ed0:	4b03      	ldr	r3, [pc, #12]	@ (8013ee0 <SetVerboseLevel+0x1c>)
 8013ed2:	1dfa      	adds	r2, r7, #7
 8013ed4:	7812      	ldrb	r2, [r2, #0]
 8013ed6:	701a      	strb	r2, [r3, #0]
}
 8013ed8:	46c0      	nop			@ (mov r8, r8)
 8013eda:	46bd      	mov	sp, r7
 8013edc:	b002      	add	sp, #8
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	200000f0 	.word	0x200000f0

08013ee4 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8013ee8:	4b02      	ldr	r3, [pc, #8]	@ (8013ef4 <GetVerboseLevel+0x10>)
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	0018      	movs	r0, r3
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}
 8013ef2:	46c0      	nop			@ (mov r8, r8)
 8013ef4:	200000f0 	.word	0x200000f0

08013ef8 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b08c      	sub	sp, #48	@ 0x30
 8013efc:	af00      	add	r7, sp, #0
  char msgout[42];
#ifdef DEBUG
  sprintf(msgout,"Software version: %s, Debug build", SRC_VERSION);
 8013efe:	4a1e      	ldr	r2, [pc, #120]	@ (8013f78 <BinaryReleaseInfo+0x80>)
 8013f00:	491e      	ldr	r1, [pc, #120]	@ (8013f7c <BinaryReleaseInfo+0x84>)
 8013f02:	1d3b      	adds	r3, r7, #4
 8013f04:	0018      	movs	r0, r3
 8013f06:	f012 f98d 	bl	8026224 <siprintf>
#else
  sprintf(msgout,"Software version: %s, Release build", SRC_VERSION);
#endif
  if (!usblog) {
 8013f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8013f80 <BinaryReleaseInfo+0x88>)
 8013f0c:	781b      	ldrb	r3, [r3, #0]
 8013f0e:	2201      	movs	r2, #1
 8013f10:	4053      	eors	r3, r2
 8013f12:	b2db      	uxtb	r3, r3
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d005      	beq.n	8013f24 <BinaryReleaseInfo+0x2c>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013f18:	1d3a      	adds	r2, r7, #4
 8013f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8013f84 <BinaryReleaseInfo+0x8c>)
 8013f1c:	0011      	movs	r1, r2
 8013f1e:	0018      	movs	r0, r3
 8013f20:	f7f4 fd62 	bl	80089e8 <printf_USB>
  }
  Info(msgout);
 8013f24:	1d3a      	adds	r2, r7, #4
 8013f26:	4b18      	ldr	r3, [pc, #96]	@ (8013f88 <BinaryReleaseInfo+0x90>)
 8013f28:	0019      	movs	r1, r3
 8013f2a:	2002      	movs	r0, #2
 8013f2c:	f7ff ff50 	bl	8013dd0 <CreateLine>
  sprintf(msgout,"Build on: %s at %s", __DATE__, __TIME__);
 8013f30:	4b16      	ldr	r3, [pc, #88]	@ (8013f8c <BinaryReleaseInfo+0x94>)
 8013f32:	4a17      	ldr	r2, [pc, #92]	@ (8013f90 <BinaryReleaseInfo+0x98>)
 8013f34:	4917      	ldr	r1, [pc, #92]	@ (8013f94 <BinaryReleaseInfo+0x9c>)
 8013f36:	1d38      	adds	r0, r7, #4
 8013f38:	f012 f974 	bl	8026224 <siprintf>
  if (!usblog) {
 8013f3c:	4b10      	ldr	r3, [pc, #64]	@ (8013f80 <BinaryReleaseInfo+0x88>)
 8013f3e:	781b      	ldrb	r3, [r3, #0]
 8013f40:	2201      	movs	r2, #1
 8013f42:	4053      	eors	r3, r2
 8013f44:	b2db      	uxtb	r3, r3
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d005      	beq.n	8013f56 <BinaryReleaseInfo+0x5e>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 8013f4a:	1d3a      	adds	r2, r7, #4
 8013f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8013f84 <BinaryReleaseInfo+0x8c>)
 8013f4e:	0011      	movs	r1, r2
 8013f50:	0018      	movs	r0, r3
 8013f52:	f7f4 fd49 	bl	80089e8 <printf_USB>
  }
  Info(msgout);
 8013f56:	1d3a      	adds	r2, r7, #4
 8013f58:	4b0b      	ldr	r3, [pc, #44]	@ (8013f88 <BinaryReleaseInfo+0x90>)
 8013f5a:	0019      	movs	r1, r3
 8013f5c:	2002      	movs	r0, #2
 8013f5e:	f7ff ff37 	bl	8013dd0 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8013f62:	4b0d      	ldr	r3, [pc, #52]	@ (8013f98 <BinaryReleaseInfo+0xa0>)
 8013f64:	4a0d      	ldr	r2, [pc, #52]	@ (8013f9c <BinaryReleaseInfo+0xa4>)
 8013f66:	4908      	ldr	r1, [pc, #32]	@ (8013f88 <BinaryReleaseInfo+0x90>)
 8013f68:	2002      	movs	r0, #2
 8013f6a:	f7ff ff31 	bl	8013dd0 <CreateLine>
}
 8013f6e:	46c0      	nop			@ (mov r8, r8)
 8013f70:	46bd      	mov	sp, r7
 8013f72:	b00c      	add	sp, #48	@ 0x30
 8013f74:	bd80      	pop	{r7, pc}
 8013f76:	46c0      	nop			@ (mov r8, r8)
 8013f78:	0802d988 	.word	0x0802d988
 8013f7c:	0802d990 	.word	0x0802d990
 8013f80:	200010f7 	.word	0x200010f7
 8013f84:	0802d980 	.word	0x0802d980
 8013f88:	0802d9b4 	.word	0x0802d9b4
 8013f8c:	0802d9b8 	.word	0x0802d9b8
 8013f90:	0802d9c4 	.word	0x0802d9c4
 8013f94:	0802d9d0 	.word	0x0802d9d0
 8013f98:	0802d9e4 	.word	0x0802d9e4
 8013f9c:	0802d9f0 	.word	0x0802d9f0

08013fa0 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b086      	sub	sp, #24
 8013fa4:	af02      	add	r7, sp, #8
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
    Error("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8013fac:	68f8      	ldr	r0, [r7, #12]
 8013fae:	4a07      	ldr	r2, [pc, #28]	@ (8013fcc <errorHandler+0x2c>)
 8013fb0:	4907      	ldr	r1, [pc, #28]	@ (8013fd0 <errorHandler+0x30>)
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	9301      	str	r3, [sp, #4]
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	9300      	str	r3, [sp, #0]
 8013fba:	0003      	movs	r3, r0
 8013fbc:	2001      	movs	r0, #1
 8013fbe:	f7ff ff07 	bl	8013dd0 <CreateLine>
//    while (true)
//    {
//    }
}
 8013fc2:	46c0      	nop			@ (mov r8, r8)
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	b004      	add	sp, #16
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	46c0      	nop			@ (mov r8, r8)
 8013fcc:	0802d9f8 	.word	0x0802d9f8
 8013fd0:	0802da20 	.word	0x0802da20

08013fd4 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8013fd4:	b590      	push	{r4, r7, lr}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6039      	str	r1, [r7, #0]
 8013fdc:	0011      	movs	r1, r2
 8013fde:	1dfb      	adds	r3, r7, #7
 8013fe0:	1c02      	adds	r2, r0, #0
 8013fe2:	701a      	strb	r2, [r3, #0]
 8013fe4:	1dbb      	adds	r3, r7, #6
 8013fe6:	1c0a      	adds	r2, r1, #0
 8013fe8:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8013fea:	4b0a      	ldr	r3, [pc, #40]	@ (8014014 <ReadRegister+0x40>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d00a      	beq.n	8014008 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8013ff2:	4b08      	ldr	r3, [pc, #32]	@ (8014014 <ReadRegister+0x40>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	1dba      	adds	r2, r7, #6
 8013ff8:	7814      	ldrb	r4, [r2, #0]
 8013ffa:	6839      	ldr	r1, [r7, #0]
 8013ffc:	1dfa      	adds	r2, r7, #7
 8013ffe:	7810      	ldrb	r0, [r2, #0]
 8014000:	0022      	movs	r2, r4
 8014002:	4798      	blx	r3
 8014004:	0003      	movs	r3, r0
 8014006:	e000      	b.n	801400a <ReadRegister+0x36>
	}
	return false;
 8014008:	2300      	movs	r3, #0
}
 801400a:	0018      	movs	r0, r3
 801400c:	46bd      	mov	sp, r7
 801400e:	b003      	add	sp, #12
 8014010:	bd90      	pop	{r4, r7, pc}
 8014012:	46c0      	nop			@ (mov r8, r8)
 8014014:	200024f0 	.word	0x200024f0

08014018 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8014018:	b590      	push	{r4, r7, lr}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	6039      	str	r1, [r7, #0]
 8014020:	0011      	movs	r1, r2
 8014022:	1dfb      	adds	r3, r7, #7
 8014024:	1c02      	adds	r2, r0, #0
 8014026:	701a      	strb	r2, [r3, #0]
 8014028:	1dbb      	adds	r3, r7, #6
 801402a:	1c0a      	adds	r2, r1, #0
 801402c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 801402e:	4b0a      	ldr	r3, [pc, #40]	@ (8014058 <WriteRegister+0x40>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d00a      	beq.n	801404c <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8014036:	4b08      	ldr	r3, [pc, #32]	@ (8014058 <WriteRegister+0x40>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	1dba      	adds	r2, r7, #6
 801403c:	7814      	ldrb	r4, [r2, #0]
 801403e:	6839      	ldr	r1, [r7, #0]
 8014040:	1dfa      	adds	r2, r7, #7
 8014042:	7810      	ldrb	r0, [r2, #0]
 8014044:	0022      	movs	r2, r4
 8014046:	4798      	blx	r3
 8014048:	0003      	movs	r3, r0
 801404a:	e000      	b.n	801404e <WriteRegister+0x36>
  }
  return false;
 801404c:	2300      	movs	r3, #0
}
 801404e:	0018      	movs	r0, r3
 8014050:	46bd      	mov	sp, r7
 8014052:	b003      	add	sp, #12
 8014054:	bd90      	pop	{r4, r7, pc}
 8014056:	46c0      	nop			@ (mov r8, r8)
 8014058:	200024f4 	.word	0x200024f4

0801405c <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 801405c:	b580      	push	{r7, lr}
 801405e:	b084      	sub	sp, #16
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	000a      	movs	r2, r1
 8014066:	1cfb      	adds	r3, r7, #3
 8014068:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 801406a:	230f      	movs	r3, #15
 801406c:	18fb      	adds	r3, r7, r3
 801406e:	22ff      	movs	r2, #255	@ 0xff
 8014070:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8014072:	230e      	movs	r3, #14
 8014074:	18fb      	adds	r3, r7, r3
 8014076:	2200      	movs	r2, #0
 8014078:	701a      	strb	r2, [r3, #0]
 801407a:	e038      	b.n	80140ee <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 801407c:	230e      	movs	r3, #14
 801407e:	18fb      	adds	r3, r7, r3
 8014080:	781b      	ldrb	r3, [r3, #0]
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	18d3      	adds	r3, r2, r3
 8014086:	7819      	ldrb	r1, [r3, #0]
 8014088:	220f      	movs	r2, #15
 801408a:	18bb      	adds	r3, r7, r2
 801408c:	18ba      	adds	r2, r7, r2
 801408e:	7812      	ldrb	r2, [r2, #0]
 8014090:	404a      	eors	r2, r1
 8014092:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8014094:	230d      	movs	r3, #13
 8014096:	18fb      	adds	r3, r7, r3
 8014098:	2200      	movs	r2, #0
 801409a:	701a      	strb	r2, [r3, #0]
 801409c:	e01c      	b.n	80140d8 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 801409e:	210f      	movs	r1, #15
 80140a0:	187b      	adds	r3, r7, r1
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	b25b      	sxtb	r3, r3
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	da0a      	bge.n	80140c0 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80140aa:	187b      	adds	r3, r7, r1
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	b25b      	sxtb	r3, r3
 80140b0:	18db      	adds	r3, r3, r3
 80140b2:	b25b      	sxtb	r3, r3
 80140b4:	2231      	movs	r2, #49	@ 0x31
 80140b6:	4053      	eors	r3, r2
 80140b8:	b25a      	sxtb	r2, r3
 80140ba:	187b      	adds	r3, r7, r1
 80140bc:	701a      	strb	r2, [r3, #0]
 80140be:	e005      	b.n	80140cc <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 80140c0:	230f      	movs	r3, #15
 80140c2:	18fa      	adds	r2, r7, r3
 80140c4:	18fb      	adds	r3, r7, r3
 80140c6:	781b      	ldrb	r3, [r3, #0]
 80140c8:	18db      	adds	r3, r3, r3
 80140ca:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80140cc:	210d      	movs	r1, #13
 80140ce:	187b      	adds	r3, r7, r1
 80140d0:	781a      	ldrb	r2, [r3, #0]
 80140d2:	187b      	adds	r3, r7, r1
 80140d4:	3201      	adds	r2, #1
 80140d6:	701a      	strb	r2, [r3, #0]
 80140d8:	230d      	movs	r3, #13
 80140da:	18fb      	adds	r3, r7, r3
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	2b07      	cmp	r3, #7
 80140e0:	d9dd      	bls.n	801409e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80140e2:	210e      	movs	r1, #14
 80140e4:	187b      	adds	r3, r7, r1
 80140e6:	781a      	ldrb	r2, [r3, #0]
 80140e8:	187b      	adds	r3, r7, r1
 80140ea:	3201      	adds	r2, #1
 80140ec:	701a      	strb	r2, [r3, #0]
 80140ee:	230e      	movs	r3, #14
 80140f0:	18fa      	adds	r2, r7, r3
 80140f2:	1cfb      	adds	r3, r7, #3
 80140f4:	7812      	ldrb	r2, [r2, #0]
 80140f6:	781b      	ldrb	r3, [r3, #0]
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d3bf      	bcc.n	801407c <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 80140fc:	230f      	movs	r3, #15
 80140fe:	18fb      	adds	r3, r7, r3
 8014100:	781b      	ldrb	r3, [r3, #0]
}
 8014102:	0018      	movs	r0, r3
 8014104:	46bd      	mov	sp, r7
 8014106:	b004      	add	sp, #16
 8014108:	bd80      	pop	{r7, pc}
	...

0801410c <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 801410c:	b5b0      	push	{r4, r5, r7, lr}
 801410e:	b084      	sub	sp, #16
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	1c18      	adds	r0, r3, #0
 801411c:	f7ef fbba 	bl	8003894 <__aeabi_f2d>
 8014120:	4a2e      	ldr	r2, [pc, #184]	@ (80141dc <HIDS_DewPointCalculation+0xd0>)
 8014122:	4b2f      	ldr	r3, [pc, #188]	@ (80141e0 <HIDS_DewPointCalculation+0xd4>)
 8014124:	f7ee fc16 	bl	8002954 <__aeabi_dmul>
 8014128:	0002      	movs	r2, r0
 801412a:	000b      	movs	r3, r1
 801412c:	0014      	movs	r4, r2
 801412e:	001d      	movs	r5, r3
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	1c18      	adds	r0, r3, #0
 8014136:	f7ef fbad 	bl	8003894 <__aeabi_f2d>
 801413a:	4a2a      	ldr	r2, [pc, #168]	@ (80141e4 <HIDS_DewPointCalculation+0xd8>)
 801413c:	4b2a      	ldr	r3, [pc, #168]	@ (80141e8 <HIDS_DewPointCalculation+0xdc>)
 801413e:	f7ed fc09 	bl	8001954 <__aeabi_dadd>
 8014142:	0002      	movs	r2, r0
 8014144:	000b      	movs	r3, r1
 8014146:	0020      	movs	r0, r4
 8014148:	0029      	movs	r1, r5
 801414a:	f7ed ffc9 	bl	80020e0 <__aeabi_ddiv>
 801414e:	0002      	movs	r2, r0
 8014150:	000b      	movs	r3, r1
 8014152:	0014      	movs	r4, r2
 8014154:	001d      	movs	r5, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	1c18      	adds	r0, r3, #0
 801415c:	f7ef fb9a 	bl	8003894 <__aeabi_f2d>
 8014160:	2200      	movs	r2, #0
 8014162:	4b22      	ldr	r3, [pc, #136]	@ (80141ec <HIDS_DewPointCalculation+0xe0>)
 8014164:	f7ed ffbc 	bl	80020e0 <__aeabi_ddiv>
 8014168:	0002      	movs	r2, r0
 801416a:	000b      	movs	r3, r1
 801416c:	0010      	movs	r0, r2
 801416e:	0019      	movs	r1, r3
 8014170:	f014 ff30 	bl	8028fd4 <log>
 8014174:	0002      	movs	r2, r0
 8014176:	000b      	movs	r3, r1
 8014178:	0020      	movs	r0, r4
 801417a:	0029      	movs	r1, r5
 801417c:	f7ed fbea 	bl	8001954 <__aeabi_dadd>
 8014180:	0002      	movs	r2, r0
 8014182:	000b      	movs	r3, r1
 8014184:	0010      	movs	r0, r2
 8014186:	0019      	movs	r1, r3
 8014188:	f7ef fbcc 	bl	8003924 <__aeabi_d2f>
 801418c:	1c03      	adds	r3, r0, #0
 801418e:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f7ef fb7f 	bl	8003894 <__aeabi_f2d>
 8014196:	4a13      	ldr	r2, [pc, #76]	@ (80141e4 <HIDS_DewPointCalculation+0xd8>)
 8014198:	4b13      	ldr	r3, [pc, #76]	@ (80141e8 <HIDS_DewPointCalculation+0xdc>)
 801419a:	f7ee fbdb 	bl	8002954 <__aeabi_dmul>
 801419e:	0002      	movs	r2, r0
 80141a0:	000b      	movs	r3, r1
 80141a2:	0014      	movs	r4, r2
 80141a4:	001d      	movs	r5, r3
 80141a6:	68f8      	ldr	r0, [r7, #12]
 80141a8:	f7ef fb74 	bl	8003894 <__aeabi_f2d>
 80141ac:	0002      	movs	r2, r0
 80141ae:	000b      	movs	r3, r1
 80141b0:	480a      	ldr	r0, [pc, #40]	@ (80141dc <HIDS_DewPointCalculation+0xd0>)
 80141b2:	490b      	ldr	r1, [pc, #44]	@ (80141e0 <HIDS_DewPointCalculation+0xd4>)
 80141b4:	f7ee feb4 	bl	8002f20 <__aeabi_dsub>
 80141b8:	0002      	movs	r2, r0
 80141ba:	000b      	movs	r3, r1
 80141bc:	0020      	movs	r0, r4
 80141be:	0029      	movs	r1, r5
 80141c0:	f7ed ff8e 	bl	80020e0 <__aeabi_ddiv>
 80141c4:	0002      	movs	r2, r0
 80141c6:	000b      	movs	r3, r1
 80141c8:	0010      	movs	r0, r2
 80141ca:	0019      	movs	r1, r3
 80141cc:	f7ef fbaa 	bl	8003924 <__aeabi_d2f>
 80141d0:	1c03      	adds	r3, r0, #0
}
 80141d2:	1c18      	adds	r0, r3, #0
 80141d4:	46bd      	mov	sp, r7
 80141d6:	b004      	add	sp, #16
 80141d8:	bdb0      	pop	{r4, r5, r7, pc}
 80141da:	46c0      	nop			@ (mov r8, r8)
 80141dc:	b851eb85 	.word	0xb851eb85
 80141e0:	4031451e 	.word	0x4031451e
 80141e4:	66666666 	.word	0x66666666
 80141e8:	406db666 	.word	0x406db666
 80141ec:	40590000 	.word	0x40590000

080141f0 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 80141f6:	4b0d      	ldr	r3, [pc, #52]	@ (801422c <HIDS_EnableHeater+0x3c>)
 80141f8:	781a      	ldrb	r2, [r3, #0]
 80141fa:	1dfb      	adds	r3, r7, #7
 80141fc:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 80141fe:	1dfb      	adds	r3, r7, #7
 8014200:	2201      	movs	r2, #1
 8014202:	0019      	movs	r1, r3
 8014204:	2044      	movs	r0, #68	@ 0x44
 8014206:	f7ff ff07 	bl	8014018 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 801420a:	1dfb      	adds	r3, r7, #7
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	4a08      	ldr	r2, [pc, #32]	@ (8014230 <HIDS_EnableHeater+0x40>)
 8014210:	4908      	ldr	r1, [pc, #32]	@ (8014234 <HIDS_EnableHeater+0x44>)
 8014212:	2002      	movs	r0, #2
 8014214:	f7ff fddc 	bl	8013dd0 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 8014218:	f7f6 f942 	bl	800a4a0 <getPosixTime>
 801421c:	0002      	movs	r2, r0
 801421e:	4b06      	ldr	r3, [pc, #24]	@ (8014238 <HIDS_EnableHeater+0x48>)
 8014220:	601a      	str	r2, [r3, #0]
}
 8014222:	46c0      	nop			@ (mov r8, r8)
 8014224:	46bd      	mov	sp, r7
 8014226:	b002      	add	sp, #8
 8014228:	bd80      	pop	{r7, pc}
 801422a:	46c0      	nop			@ (mov r8, r8)
 801422c:	200000f1 	.word	0x200000f1
 8014230:	0802da24 	.word	0x0802da24
 8014234:	0802da44 	.word	0x0802da44
 8014238:	20002508 	.word	0x20002508

0801423c <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8014246:	4b0a      	ldr	r3, [pc, #40]	@ (8014270 <HIDS_Init+0x34>)
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 801424c:	4b09      	ldr	r3, [pc, #36]	@ (8014274 <HIDS_Init+0x38>)
 801424e:	683a      	ldr	r2, [r7, #0]
 8014250:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8014252:	4b09      	ldr	r3, [pc, #36]	@ (8014278 <HIDS_Init+0x3c>)
 8014254:	781b      	ldrb	r3, [r3, #0]
 8014256:	0018      	movs	r0, r3
 8014258:	f000 f840 	bl	80142dc <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 801425c:	4b07      	ldr	r3, [pc, #28]	@ (801427c <HIDS_Init+0x40>)
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	0018      	movs	r0, r3
 8014262:	f000 f82b 	bl	80142bc <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8014266:	46c0      	nop			@ (mov r8, r8)
 8014268:	46bd      	mov	sp, r7
 801426a:	b002      	add	sp, #8
 801426c:	bd80      	pop	{r7, pc}
 801426e:	46c0      	nop			@ (mov r8, r8)
 8014270:	200024f0 	.word	0x200024f0
 8014274:	200024f4 	.word	0x200024f4
 8014278:	200000f2 	.word	0x200000f2
 801427c:	200000f1 	.word	0x200000f1

08014280 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8014280:	b580      	push	{r7, lr}
 8014282:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8014284:	f000 fb1c 	bl	80148c0 <HAL_GetTick>
 8014288:	0002      	movs	r2, r0
 801428a:	4b08      	ldr	r3, [pc, #32]	@ (80142ac <HIDS_StartMeasurement+0x2c>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	18d2      	adds	r2, r2, r3
 8014290:	4b07      	ldr	r3, [pc, #28]	@ (80142b0 <HIDS_StartMeasurement+0x30>)
 8014292:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8014294:	4b07      	ldr	r3, [pc, #28]	@ (80142b4 <HIDS_StartMeasurement+0x34>)
 8014296:	2201      	movs	r2, #1
 8014298:	0019      	movs	r1, r3
 801429a:	2044      	movs	r0, #68	@ 0x44
 801429c:	f7ff febc 	bl	8014018 <WriteRegister>
  MeasurementDone = false;
 80142a0:	4b05      	ldr	r3, [pc, #20]	@ (80142b8 <HIDS_StartMeasurement+0x38>)
 80142a2:	2200      	movs	r2, #0
 80142a4:	701a      	strb	r2, [r3, #0]
}
 80142a6:	46c0      	nop			@ (mov r8, r8)
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	200000f8 	.word	0x200000f8
 80142b0:	200000f4 	.word	0x200000f4
 80142b4:	200000f2 	.word	0x200000f2
 80142b8:	2000250c 	.word	0x2000250c

080142bc <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 80142bc:	b580      	push	{r7, lr}
 80142be:	b082      	sub	sp, #8
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	0002      	movs	r2, r0
 80142c4:	1dfb      	adds	r3, r7, #7
 80142c6:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80142c8:	4b03      	ldr	r3, [pc, #12]	@ (80142d8 <HIDS_SetHeaterMode+0x1c>)
 80142ca:	1dfa      	adds	r2, r7, #7
 80142cc:	7812      	ldrb	r2, [r2, #0]
 80142ce:	701a      	strb	r2, [r3, #0]
}
 80142d0:	46c0      	nop			@ (mov r8, r8)
 80142d2:	46bd      	mov	sp, r7
 80142d4:	b002      	add	sp, #8
 80142d6:	bd80      	pop	{r7, pc}
 80142d8:	200000f1 	.word	0x200000f1

080142dc <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	0002      	movs	r2, r0
 80142e4:	1dfb      	adds	r3, r7, #7
 80142e6:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 80142e8:	4b03      	ldr	r3, [pc, #12]	@ (80142f8 <HIDS_SetMeasurementMode+0x1c>)
 80142ea:	1dfa      	adds	r2, r7, #7
 80142ec:	7812      	ldrb	r2, [r2, #0]
 80142ee:	701a      	strb	r2, [r3, #0]
}
 80142f0:	46c0      	nop			@ (mov r8, r8)
 80142f2:	46bd      	mov	sp, r7
 80142f4:	b002      	add	sp, #8
 80142f6:	bd80      	pop	{r7, pc}
 80142f8:	200000f2 	.word	0x200000f2

080142fc <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b082      	sub	sp, #8
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8014304:	f000 fadc 	bl	80148c0 <HAL_GetTick>
 8014308:	0002      	movs	r2, r0
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	18d2      	adds	r2, r2, r3
 801430e:	4b03      	ldr	r3, [pc, #12]	@ (801431c <setHIDSTimeStamp+0x20>)
 8014310:	601a      	str	r2, [r3, #0]
}
 8014312:	46c0      	nop			@ (mov r8, r8)
 8014314:	46bd      	mov	sp, r7
 8014316:	b002      	add	sp, #8
 8014318:	bd80      	pop	{r7, pc}
 801431a:	46c0      	nop			@ (mov r8, r8)
 801431c:	20002510 	.word	0x20002510

08014320 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8014320:	b590      	push	{r4, r7, lr}
 8014322:	b085      	sub	sp, #20
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	781a      	ldrb	r2, [r3, #0]
 801432c:	210c      	movs	r1, #12
 801432e:	187b      	adds	r3, r7, r1
 8014330:	701a      	strb	r2, [r3, #0]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	785a      	ldrb	r2, [r3, #1]
 8014336:	187b      	adds	r3, r7, r1
 8014338:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 801433a:	240f      	movs	r4, #15
 801433c:	193b      	adds	r3, r7, r4
 801433e:	687a      	ldr	r2, [r7, #4]
 8014340:	7892      	ldrb	r2, [r2, #2]
 8014342:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8014344:	187b      	adds	r3, r7, r1
 8014346:	2102      	movs	r1, #2
 8014348:	0018      	movs	r0, r3
 801434a:	f7ff fe87 	bl	801405c <CalculateCRC>
 801434e:	0003      	movs	r3, r0
 8014350:	001a      	movs	r2, r3
 8014352:	193b      	adds	r3, r7, r4
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	4293      	cmp	r3, r2
 8014358:	d007      	beq.n	801436a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 801435a:	4a1a      	ldr	r2, [pc, #104]	@ (80143c4 <CheckCRC+0xa4>)
 801435c:	4b1a      	ldr	r3, [pc, #104]	@ (80143c8 <CheckCRC+0xa8>)
 801435e:	0019      	movs	r1, r3
 8014360:	2001      	movs	r0, #1
 8014362:	f7ff fd35 	bl	8013dd0 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8014366:	2300      	movs	r3, #0
 8014368:	e027      	b.n	80143ba <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	78da      	ldrb	r2, [r3, #3]
 801436e:	2108      	movs	r1, #8
 8014370:	187b      	adds	r3, r7, r1
 8014372:	701a      	strb	r2, [r3, #0]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	791a      	ldrb	r2, [r3, #4]
 8014378:	187b      	adds	r3, r7, r1
 801437a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 801437c:	240e      	movs	r4, #14
 801437e:	193b      	adds	r3, r7, r4
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	7952      	ldrb	r2, [r2, #5]
 8014384:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8014386:	187b      	adds	r3, r7, r1
 8014388:	2102      	movs	r1, #2
 801438a:	0018      	movs	r0, r3
 801438c:	f7ff fe66 	bl	801405c <CalculateCRC>
 8014390:	0003      	movs	r3, r0
 8014392:	001a      	movs	r2, r3
 8014394:	193b      	adds	r3, r7, r4
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	4293      	cmp	r3, r2
 801439a:	d00d      	beq.n	80143b8 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 801439c:	4a0b      	ldr	r2, [pc, #44]	@ (80143cc <CheckCRC+0xac>)
 801439e:	4b0a      	ldr	r3, [pc, #40]	@ (80143c8 <CheckCRC+0xa8>)
 80143a0:	0019      	movs	r1, r3
 80143a2:	2001      	movs	r0, #1
 80143a4:	f7ff fd14 	bl	8013dd0 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 80143a8:	4a09      	ldr	r2, [pc, #36]	@ (80143d0 <CheckCRC+0xb0>)
 80143aa:	4b0a      	ldr	r3, [pc, #40]	@ (80143d4 <CheckCRC+0xb4>)
 80143ac:	2185      	movs	r1, #133	@ 0x85
 80143ae:	0018      	movs	r0, r3
 80143b0:	f7ff fdf6 	bl	8013fa0 <errorHandler>
		return false;
 80143b4:	2300      	movs	r3, #0
 80143b6:	e000      	b.n	80143ba <CheckCRC+0x9a>
	}
	return true;
 80143b8:	2301      	movs	r3, #1
}
 80143ba:	0018      	movs	r0, r3
 80143bc:	46bd      	mov	sp, r7
 80143be:	b005      	add	sp, #20
 80143c0:	bd90      	pop	{r4, r7, pc}
 80143c2:	46c0      	nop			@ (mov r8, r8)
 80143c4:	0802da48 	.word	0x0802da48
 80143c8:	0802da70 	.word	0x0802da70
 80143cc:	0802da74 	.word	0x0802da74
 80143d0:	0802daa0 	.word	0x0802daa0
 80143d4:	0802e460 	.word	0x0802e460

080143d8 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80143d8:	b580      	push	{r7, lr}
 80143da:	b084      	sub	sp, #16
 80143dc:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80143de:	1dbb      	adds	r3, r7, #6
 80143e0:	2289      	movs	r2, #137	@ 0x89
 80143e2:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80143e4:	1dbb      	adds	r3, r7, #6
 80143e6:	2201      	movs	r2, #1
 80143e8:	0019      	movs	r1, r3
 80143ea:	2044      	movs	r0, #68	@ 0x44
 80143ec:	f7ff fe14 	bl	8014018 <WriteRegister>
	HAL_Delay(30);
 80143f0:	201e      	movs	r0, #30
 80143f2:	f000 fa6f 	bl	80148d4 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80143f6:	4b14      	ldr	r3, [pc, #80]	@ (8014448 <HIDS_DeviceConnected+0x70>)
 80143f8:	2206      	movs	r2, #6
 80143fa:	0019      	movs	r1, r3
 80143fc:	2044      	movs	r0, #68	@ 0x44
 80143fe:	f7ff fde9 	bl	8013fd4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8014402:	1dfb      	adds	r3, r7, #7
 8014404:	2200      	movs	r2, #0
 8014406:	701a      	strb	r2, [r3, #0]
 8014408:	e011      	b.n	801442e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 801440a:	1dfb      	adds	r3, r7, #7
 801440c:	7818      	ldrb	r0, [r3, #0]
 801440e:	1dfb      	adds	r3, r7, #7
 8014410:	781b      	ldrb	r3, [r3, #0]
 8014412:	4a0d      	ldr	r2, [pc, #52]	@ (8014448 <HIDS_DeviceConnected+0x70>)
 8014414:	5cd3      	ldrb	r3, [r2, r3]
 8014416:	4a0d      	ldr	r2, [pc, #52]	@ (801444c <HIDS_DeviceConnected+0x74>)
 8014418:	490d      	ldr	r1, [pc, #52]	@ (8014450 <HIDS_DeviceConnected+0x78>)
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	0003      	movs	r3, r0
 801441e:	2002      	movs	r0, #2
 8014420:	f7ff fcd6 	bl	8013dd0 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8014424:	1dfb      	adds	r3, r7, #7
 8014426:	781a      	ldrb	r2, [r3, #0]
 8014428:	1dfb      	adds	r3, r7, #7
 801442a:	3201      	adds	r2, #1
 801442c:	701a      	strb	r2, [r3, #0]
 801442e:	1dfb      	adds	r3, r7, #7
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	2b05      	cmp	r3, #5
 8014434:	d9e9      	bls.n	801440a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8014436:	4b04      	ldr	r3, [pc, #16]	@ (8014448 <HIDS_DeviceConnected+0x70>)
 8014438:	0018      	movs	r0, r3
 801443a:	f7ff ff71 	bl	8014320 <CheckCRC>
 801443e:	0003      	movs	r3, r0
}
 8014440:	0018      	movs	r0, r3
 8014442:	46bd      	mov	sp, r7
 8014444:	b002      	add	sp, #8
 8014446:	bd80      	pop	{r7, pc}
 8014448:	200024f8 	.word	0x200024f8
 801444c:	0802dab8 	.word	0x0802dab8
 8014450:	0802da44 	.word	0x0802da44

08014454 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8014454:	b580      	push	{r7, lr}
 8014456:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8014458:	4b04      	ldr	r3, [pc, #16]	@ (801446c <HIDS_MeasurementReady+0x18>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	0018      	movs	r0, r3
 801445e:	f7ff fc61 	bl	8013d24 <TimestampIsReached>
 8014462:	0003      	movs	r3, r0
}
 8014464:	0018      	movs	r0, r3
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	46c0      	nop			@ (mov r8, r8)
 801446c:	200000f4 	.word	0x200000f4

08014470 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 801447a:	4b41      	ldr	r3, [pc, #260]	@ (8014580 <HIDS_GetMeasurementValues+0x110>)
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d001      	beq.n	8014486 <HIDS_GetMeasurementValues+0x16>
 8014482:	2301      	movs	r3, #1
 8014484:	e077      	b.n	8014576 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8014486:	f7ff ffe5 	bl	8014454 <HIDS_MeasurementReady>
 801448a:	0003      	movs	r3, r0
 801448c:	001a      	movs	r2, r3
 801448e:	2301      	movs	r3, #1
 8014490:	4053      	eors	r3, r2
 8014492:	b2db      	uxtb	r3, r3
 8014494:	2b00      	cmp	r3, #0
 8014496:	d001      	beq.n	801449c <HIDS_GetMeasurementValues+0x2c>
 8014498:	2300      	movs	r3, #0
 801449a:	e06c      	b.n	8014576 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 801449c:	4b39      	ldr	r3, [pc, #228]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 801449e:	2206      	movs	r2, #6
 80144a0:	0019      	movs	r1, r3
 80144a2:	2044      	movs	r0, #68	@ 0x44
 80144a4:	f7ff fd96 	bl	8013fd4 <ReadRegister>
 80144a8:	0003      	movs	r3, r0
 80144aa:	001a      	movs	r2, r3
 80144ac:	2301      	movs	r3, #1
 80144ae:	4053      	eors	r3, r2
 80144b0:	b2db      	uxtb	r3, r3
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d005      	beq.n	80144c2 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 80144b6:	4a34      	ldr	r2, [pc, #208]	@ (8014588 <HIDS_GetMeasurementValues+0x118>)
 80144b8:	4b34      	ldr	r3, [pc, #208]	@ (801458c <HIDS_GetMeasurementValues+0x11c>)
 80144ba:	0019      	movs	r1, r3
 80144bc:	2001      	movs	r0, #1
 80144be:	f7ff fc87 	bl	8013dd0 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 80144c2:	4b30      	ldr	r3, [pc, #192]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 80144c4:	0018      	movs	r0, r3
 80144c6:	f7ff ff2b 	bl	8014320 <CheckCRC>
 80144ca:	0003      	movs	r3, r0
 80144cc:	001a      	movs	r2, r3
 80144ce:	2301      	movs	r3, #1
 80144d0:	4053      	eors	r3, r2
 80144d2:	b2db      	uxtb	r3, r3
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d001      	beq.n	80144dc <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 80144d8:	2300      	movs	r3, #0
 80144da:	e04c      	b.n	8014576 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 80144dc:	4b29      	ldr	r3, [pc, #164]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	021b      	lsls	r3, r3, #8
 80144e2:	4a28      	ldr	r2, [pc, #160]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 80144e4:	7852      	ldrb	r2, [r2, #1]
 80144e6:	4313      	orrs	r3, r2
 80144e8:	22af      	movs	r2, #175	@ 0xaf
 80144ea:	4353      	muls	r3, r2
 80144ec:	0018      	movs	r0, r3
 80144ee:	f7ef f97f 	bl	80037f0 <__aeabi_i2d>
 80144f2:	2200      	movs	r2, #0
 80144f4:	4b26      	ldr	r3, [pc, #152]	@ (8014590 <HIDS_GetMeasurementValues+0x120>)
 80144f6:	f7ed fdf3 	bl	80020e0 <__aeabi_ddiv>
 80144fa:	0002      	movs	r2, r0
 80144fc:	000b      	movs	r3, r1
 80144fe:	0010      	movs	r0, r2
 8014500:	0019      	movs	r1, r3
 8014502:	f7ef fa0f 	bl	8003924 <__aeabi_d2f>
 8014506:	1c03      	adds	r3, r0, #0
 8014508:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 801450a:	4922      	ldr	r1, [pc, #136]	@ (8014594 <HIDS_GetMeasurementValues+0x124>)
 801450c:	68f8      	ldr	r0, [r7, #12]
 801450e:	f7ec fef1 	bl	80012f4 <__aeabi_fsub>
 8014512:	1c03      	adds	r3, r0, #0
 8014514:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8014516:	4b1b      	ldr	r3, [pc, #108]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 8014518:	78db      	ldrb	r3, [r3, #3]
 801451a:	021b      	lsls	r3, r3, #8
 801451c:	4a19      	ldr	r2, [pc, #100]	@ (8014584 <HIDS_GetMeasurementValues+0x114>)
 801451e:	7912      	ldrb	r2, [r2, #4]
 8014520:	431a      	orrs	r2, r3
 8014522:	0013      	movs	r3, r2
 8014524:	015b      	lsls	r3, r3, #5
 8014526:	1a9b      	subs	r3, r3, r2
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	189b      	adds	r3, r3, r2
 801452c:	0018      	movs	r0, r3
 801452e:	f7ef f95f 	bl	80037f0 <__aeabi_i2d>
 8014532:	2200      	movs	r2, #0
 8014534:	4b16      	ldr	r3, [pc, #88]	@ (8014590 <HIDS_GetMeasurementValues+0x120>)
 8014536:	f7ed fdd3 	bl	80020e0 <__aeabi_ddiv>
 801453a:	0002      	movs	r2, r0
 801453c:	000b      	movs	r3, r1
 801453e:	0010      	movs	r0, r2
 8014540:	0019      	movs	r1, r3
 8014542:	f7ef f9ef 	bl	8003924 <__aeabi_d2f>
 8014546:	1c03      	adds	r3, r0, #0
 8014548:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 801454a:	4913      	ldr	r1, [pc, #76]	@ (8014598 <HIDS_GetMeasurementValues+0x128>)
 801454c:	68b8      	ldr	r0, [r7, #8]
 801454e:	f7ec fed1 	bl	80012f4 <__aeabi_fsub>
 8014552:	1c03      	adds	r3, r0, #0
 8014554:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	68fa      	ldr	r2, [r7, #12]
 801455a:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	68ba      	ldr	r2, [r7, #8]
 8014560:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8014562:	687a      	ldr	r2, [r7, #4]
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	0011      	movs	r1, r2
 8014568:	0018      	movs	r0, r3
 801456a:	f7fc ff2b 	bl	80113c4 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 801456e:	4b04      	ldr	r3, [pc, #16]	@ (8014580 <HIDS_GetMeasurementValues+0x110>)
 8014570:	2201      	movs	r2, #1
 8014572:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8014574:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8014576:	0018      	movs	r0, r3
 8014578:	46bd      	mov	sp, r7
 801457a:	b004      	add	sp, #16
 801457c:	bd80      	pop	{r7, pc}
 801457e:	46c0      	nop			@ (mov r8, r8)
 8014580:	2000250c 	.word	0x2000250c
 8014584:	20002500 	.word	0x20002500
 8014588:	0802dad8 	.word	0x0802dad8
 801458c:	0802da70 	.word	0x0802da70
 8014590:	40efffe0 	.word	0x40efffe0
 8014594:	42340000 	.word	0x42340000
 8014598:	40c00000 	.word	0x40c00000

0801459c <ResetHIDSresults>:

void ResetHIDSresults() {
 801459c:	b580      	push	{r7, lr}
 801459e:	af00      	add	r7, sp, #0
  humid = 0.0;
 80145a0:	4b04      	ldr	r3, [pc, #16]	@ (80145b4 <ResetHIDSresults+0x18>)
 80145a2:	2200      	movs	r2, #0
 80145a4:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 80145a6:	4b04      	ldr	r3, [pc, #16]	@ (80145b8 <ResetHIDSresults+0x1c>)
 80145a8:	2200      	movs	r2, #0
 80145aa:	601a      	str	r2, [r3, #0]
}
 80145ac:	46c0      	nop			@ (mov r8, r8)
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	46c0      	nop			@ (mov r8, r8)
 80145b4:	200024e8 	.word	0x200024e8
 80145b8:	200024ec 	.word	0x200024ec

080145bc <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 80145bc:	b5b0      	push	{r4, r5, r7, lr}
 80145be:	b084      	sub	sp, #16
 80145c0:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 80145c2:	4b69      	ldr	r3, [pc, #420]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	2b06      	cmp	r3, #6
 80145c8:	d900      	bls.n	80145cc <HIDS_Upkeep+0x10>
 80145ca:	e0bd      	b.n	8014748 <HIDS_Upkeep+0x18c>
 80145cc:	009a      	lsls	r2, r3, #2
 80145ce:	4b67      	ldr	r3, [pc, #412]	@ (801476c <HIDS_Upkeep+0x1b0>)
 80145d0:	18d3      	adds	r3, r2, r3
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 80145d6:	4a66      	ldr	r2, [pc, #408]	@ (8014770 <HIDS_Upkeep+0x1b4>)
 80145d8:	4b66      	ldr	r3, [pc, #408]	@ (8014774 <HIDS_Upkeep+0x1b8>)
 80145da:	0019      	movs	r1, r3
 80145dc:	2003      	movs	r0, #3
 80145de:	f7ff fbf7 	bl	8013dd0 <CreateLine>
      break;
 80145e2:	e0bc      	b.n	801475e <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 80145e4:	f7ff ffda 	bl	801459c <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 80145e8:	4b5f      	ldr	r3, [pc, #380]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 80145ea:	2201      	movs	r2, #1
 80145ec:	701a      	strb	r2, [r3, #0]
      break;
 80145ee:	e0b6      	b.n	801475e <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 80145f0:	f7f9 fbd8 	bl	800dda4 <getSensorLock>
 80145f4:	1e03      	subs	r3, r0, #0
 80145f6:	d000      	beq.n	80145fa <HIDS_Upkeep+0x3e>
 80145f8:	e0aa      	b.n	8014750 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 80145fa:	2001      	movs	r0, #1
 80145fc:	f7f9 fbbe 	bl	800dd7c <setSensorLock>
      SetMeasurementIndicator();
 8014600:	f7fe f934 	bl	801286c <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8014604:	f7ff fe3c 	bl	8014280 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 8014608:	200a      	movs	r0, #10
 801460a:	f000 f963 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 801460e:	2000      	movs	r0, #0
 8014610:	f7f9 fbb4 	bl	800dd7c <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8014614:	4b54      	ldr	r3, [pc, #336]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 8014616:	2202      	movs	r2, #2
 8014618:	701a      	strb	r2, [r3, #0]
      break;
 801461a:	e0a0      	b.n	801475e <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 801461c:	f7f9 fbc2 	bl	800dda4 <getSensorLock>
 8014620:	1e03      	subs	r3, r0, #0
 8014622:	d000      	beq.n	8014626 <HIDS_Upkeep+0x6a>
 8014624:	e096      	b.n	8014754 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 8014626:	2001      	movs	r0, #1
 8014628:	f7f9 fba8 	bl	800dd7c <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 801462c:	4a52      	ldr	r2, [pc, #328]	@ (8014778 <HIDS_Upkeep+0x1bc>)
 801462e:	4b53      	ldr	r3, [pc, #332]	@ (801477c <HIDS_Upkeep+0x1c0>)
 8014630:	0011      	movs	r1, r2
 8014632:	0018      	movs	r0, r3
 8014634:	f7ff ff1c 	bl	8014470 <HIDS_GetMeasurementValues>
 8014638:	1e03      	subs	r3, r0, #0
 801463a:	d002      	beq.n	8014642 <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 801463c:	4b4a      	ldr	r3, [pc, #296]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 801463e:	2203      	movs	r2, #3
 8014640:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8014642:	200a      	movs	r0, #10
 8014644:	f000 f946 	bl	80148d4 <HAL_Delay>
      setSensorLock(FREE);
 8014648:	2000      	movs	r0, #0
 801464a:	f7f9 fb97 	bl	800dd7c <setSensorLock>
      break;
 801464e:	e086      	b.n	801475e <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Info("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8014650:	4b4a      	ldr	r3, [pc, #296]	@ (801477c <HIDS_Upkeep+0x1c0>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	1c18      	adds	r0, r3, #0
 8014656:	f7ef f91d 	bl	8003894 <__aeabi_f2d>
 801465a:	0004      	movs	r4, r0
 801465c:	000d      	movs	r5, r1
 801465e:	4b46      	ldr	r3, [pc, #280]	@ (8014778 <HIDS_Upkeep+0x1bc>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	1c18      	adds	r0, r3, #0
 8014664:	f7ef f916 	bl	8003894 <__aeabi_f2d>
 8014668:	0002      	movs	r2, r0
 801466a:	000b      	movs	r3, r1
 801466c:	4844      	ldr	r0, [pc, #272]	@ (8014780 <HIDS_Upkeep+0x1c4>)
 801466e:	4945      	ldr	r1, [pc, #276]	@ (8014784 <HIDS_Upkeep+0x1c8>)
 8014670:	9202      	str	r2, [sp, #8]
 8014672:	9303      	str	r3, [sp, #12]
 8014674:	9400      	str	r4, [sp, #0]
 8014676:	9501      	str	r5, [sp, #4]
 8014678:	0002      	movs	r2, r0
 801467a:	2002      	movs	r0, #2
 801467c:	f7ff fba8 	bl	8013dd0 <CreateLine>
      setHIDS(temp, humid);
 8014680:	4b3d      	ldr	r3, [pc, #244]	@ (8014778 <HIDS_Upkeep+0x1bc>)
 8014682:	681a      	ldr	r2, [r3, #0]
 8014684:	4b3d      	ldr	r3, [pc, #244]	@ (801477c <HIDS_Upkeep+0x1c0>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	1c19      	adds	r1, r3, #0
 801468a:	1c10      	adds	r0, r2, #0
 801468c:	f7f0 fa08 	bl	8004aa0 <setHIDS>
      ResetMeasurementIndicator();
 8014690:	f7fe f904 	bl	801289c <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8014694:	4b38      	ldr	r3, [pc, #224]	@ (8014778 <HIDS_Upkeep+0x1bc>)
 8014696:	681c      	ldr	r4, [r3, #0]
 8014698:	4a37      	ldr	r2, [pc, #220]	@ (8014778 <HIDS_Upkeep+0x1bc>)
 801469a:	4b38      	ldr	r3, [pc, #224]	@ (801477c <HIDS_Upkeep+0x1c0>)
 801469c:	0011      	movs	r1, r2
 801469e:	0018      	movs	r0, r3
 80146a0:	f7ff fd34 	bl	801410c <HIDS_DewPointCalculation>
 80146a4:	1c03      	adds	r3, r0, #0
 80146a6:	1c19      	adds	r1, r3, #0
 80146a8:	1c20      	adds	r0, r4, #0
 80146aa:	f7ec fe23 	bl	80012f4 <__aeabi_fsub>
 80146ae:	1c03      	adds	r3, r0, #0
 80146b0:	21fe      	movs	r1, #254	@ 0xfe
 80146b2:	0589      	lsls	r1, r1, #22
 80146b4:	1c18      	adds	r0, r3, #0
 80146b6:	f7eb ff3b 	bl	8000530 <__aeabi_fcmplt>
 80146ba:	1e03      	subs	r3, r0, #0
 80146bc:	d023      	beq.n	8014706 <HIDS_Upkeep+0x14a>
 80146be:	f7f5 feef 	bl	800a4a0 <getPosixTime>
 80146c2:	0002      	movs	r2, r0
 80146c4:	4b30      	ldr	r3, [pc, #192]	@ (8014788 <HIDS_Upkeep+0x1cc>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	1ad2      	subs	r2, r2, r3
 80146ca:	23e1      	movs	r3, #225	@ 0xe1
 80146cc:	009b      	lsls	r3, r3, #2
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d919      	bls.n	8014706 <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 80146d2:	4a2e      	ldr	r2, [pc, #184]	@ (801478c <HIDS_Upkeep+0x1d0>)
 80146d4:	4b2b      	ldr	r3, [pc, #172]	@ (8014784 <HIDS_Upkeep+0x1c8>)
 80146d6:	0019      	movs	r1, r3
 80146d8:	2002      	movs	r0, #2
 80146da:	f7ff fb79 	bl	8013dd0 <CreateLine>
        if (getSensorLock() != FREE) {
 80146de:	f7f9 fb61 	bl	800dda4 <getSensorLock>
 80146e2:	1e03      	subs	r3, r0, #0
 80146e4:	d138      	bne.n	8014758 <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 80146e6:	f7ff fd83 	bl	80141f0 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 80146ea:	200a      	movs	r0, #10
 80146ec:	f000 f8f2 	bl	80148d4 <HAL_Delay>
        setSensorLock(FREE);
 80146f0:	2000      	movs	r0, #0
 80146f2:	f7f9 fb43 	bl	800dd7c <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 80146f6:	f000 f8e3 	bl	80148c0 <HAL_GetTick>
 80146fa:	0003      	movs	r3, r0
 80146fc:	4a24      	ldr	r2, [pc, #144]	@ (8014790 <HIDS_Upkeep+0x1d4>)
 80146fe:	189a      	adds	r2, r3, r2
 8014700:	4b24      	ldr	r3, [pc, #144]	@ (8014794 <HIDS_Upkeep+0x1d8>)
 8014702:	601a      	str	r2, [r3, #0]
 8014704:	e011      	b.n	801472a <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8014706:	f000 f8db 	bl	80148c0 <HAL_GetTick>
 801470a:	0004      	movs	r4, r0
 801470c:	f7f5 fa26 	bl	8009b5c <Check_USB_PowerOn>
 8014710:	1e03      	subs	r3, r0, #0
 8014712:	d103      	bne.n	801471c <HIDS_Upkeep+0x160>
 8014714:	4b20      	ldr	r3, [pc, #128]	@ (8014798 <HIDS_Upkeep+0x1dc>)
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d001      	beq.n	8014720 <HIDS_Upkeep+0x164>
 801471c:	4b1f      	ldr	r3, [pc, #124]	@ (801479c <HIDS_Upkeep+0x1e0>)
 801471e:	e001      	b.n	8014724 <HIDS_Upkeep+0x168>
 8014720:	23fa      	movs	r3, #250	@ 0xfa
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	191a      	adds	r2, r3, r4
 8014726:	4b1b      	ldr	r3, [pc, #108]	@ (8014794 <HIDS_Upkeep+0x1d8>)
 8014728:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 801472a:	4b0f      	ldr	r3, [pc, #60]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 801472c:	2206      	movs	r2, #6
 801472e:	701a      	strb	r2, [r3, #0]
      break;
 8014730:	e015      	b.n	801475e <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8014732:	4b18      	ldr	r3, [pc, #96]	@ (8014794 <HIDS_Upkeep+0x1d8>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	0018      	movs	r0, r3
 8014738:	f7ff faf4 	bl	8013d24 <TimestampIsReached>
 801473c:	1e03      	subs	r3, r0, #0
 801473e:	d00d      	beq.n	801475c <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8014740:	4b09      	ldr	r3, [pc, #36]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 8014742:	2200      	movs	r2, #0
 8014744:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014746:	e009      	b.n	801475c <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8014748:	4b07      	ldr	r3, [pc, #28]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 801474a:	2200      	movs	r2, #0
 801474c:	701a      	strb	r2, [r3, #0]
      break;
 801474e:	e006      	b.n	801475e <HIDS_Upkeep+0x1a2>
        break;
 8014750:	46c0      	nop			@ (mov r8, r8)
 8014752:	e004      	b.n	801475e <HIDS_Upkeep+0x1a2>
        break;
 8014754:	46c0      	nop			@ (mov r8, r8)
 8014756:	e002      	b.n	801475e <HIDS_Upkeep+0x1a2>
          break;
 8014758:	46c0      	nop			@ (mov r8, r8)
 801475a:	e000      	b.n	801475e <HIDS_Upkeep+0x1a2>
      break;
 801475c:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 801475e:	4b02      	ldr	r3, [pc, #8]	@ (8014768 <HIDS_Upkeep+0x1ac>)
 8014760:	781b      	ldrb	r3, [r3, #0]
}
 8014762:	0018      	movs	r0, r3
 8014764:	46bd      	mov	sp, r7
 8014766:	bdb0      	pop	{r4, r5, r7, pc}
 8014768:	20002514 	.word	0x20002514
 801476c:	0802e444 	.word	0x0802e444
 8014770:	0802db0c 	.word	0x0802db0c
 8014774:	0802db40 	.word	0x0802db40
 8014778:	200024ec 	.word	0x200024ec
 801477c:	200024e8 	.word	0x200024e8
 8014780:	0802db44 	.word	0x0802db44
 8014784:	0802da44 	.word	0x0802da44
 8014788:	20002508 	.word	0x20002508
 801478c:	0802db78 	.word	0x0802db78
 8014790:	00002ee0 	.word	0x00002ee0
 8014794:	20002510 	.word	0x20002510
 8014798:	20002152 	.word	0x20002152
 801479c:	00002710 	.word	0x00002710

080147a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80147a0:	480d      	ldr	r0, [pc, #52]	@ (80147d8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80147a2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80147a4:	f7fe ff18 	bl	80135d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80147a8:	480c      	ldr	r0, [pc, #48]	@ (80147dc <LoopForever+0x6>)
  ldr r1, =_edata
 80147aa:	490d      	ldr	r1, [pc, #52]	@ (80147e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80147ac:	4a0d      	ldr	r2, [pc, #52]	@ (80147e4 <LoopForever+0xe>)
  movs r3, #0
 80147ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80147b0:	e002      	b.n	80147b8 <LoopCopyDataInit>

080147b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80147b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80147b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80147b6:	3304      	adds	r3, #4

080147b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80147b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80147ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80147bc:	d3f9      	bcc.n	80147b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80147be:	4a0a      	ldr	r2, [pc, #40]	@ (80147e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80147c0:	4c0a      	ldr	r4, [pc, #40]	@ (80147ec <LoopForever+0x16>)
  movs r3, #0
 80147c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80147c4:	e001      	b.n	80147ca <LoopFillZerobss>

080147c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80147c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80147c8:	3204      	adds	r2, #4

080147ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80147ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80147cc:	d3fb      	bcc.n	80147c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80147ce:	f011 ff1b 	bl	8026608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80147d2:	f7f8 f95d 	bl	800ca90 <main>

080147d6 <LoopForever>:

LoopForever:
    b LoopForever
 80147d6:	e7fe      	b.n	80147d6 <LoopForever>
   ldr   r0, =_estack
 80147d8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80147dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80147e0:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 80147e4:	0802ee28 	.word	0x0802ee28
  ldr r2, =_sbss
 80147e8:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 80147ec:	2000391c 	.word	0x2000391c

080147f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80147f0:	e7fe      	b.n	80147f0 <ADC1_COMP_IRQHandler>
	...

080147f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80147fa:	1dfb      	adds	r3, r7, #7
 80147fc:	2200      	movs	r2, #0
 80147fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8014800:	4b0b      	ldr	r3, [pc, #44]	@ (8014830 <HAL_Init+0x3c>)
 8014802:	681a      	ldr	r2, [r3, #0]
 8014804:	4b0a      	ldr	r3, [pc, #40]	@ (8014830 <HAL_Init+0x3c>)
 8014806:	2140      	movs	r1, #64	@ 0x40
 8014808:	430a      	orrs	r2, r1
 801480a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801480c:	2003      	movs	r0, #3
 801480e:	f000 f811 	bl	8014834 <HAL_InitTick>
 8014812:	1e03      	subs	r3, r0, #0
 8014814:	d003      	beq.n	801481e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8014816:	1dfb      	adds	r3, r7, #7
 8014818:	2201      	movs	r2, #1
 801481a:	701a      	strb	r2, [r3, #0]
 801481c:	e001      	b.n	8014822 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801481e:	f7fe fd8f 	bl	8013340 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8014822:	1dfb      	adds	r3, r7, #7
 8014824:	781b      	ldrb	r3, [r3, #0]
}
 8014826:	0018      	movs	r0, r3
 8014828:	46bd      	mov	sp, r7
 801482a:	b002      	add	sp, #8
 801482c:	bd80      	pop	{r7, pc}
 801482e:	46c0      	nop			@ (mov r8, r8)
 8014830:	40022000 	.word	0x40022000

08014834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014834:	b590      	push	{r4, r7, lr}
 8014836:	b083      	sub	sp, #12
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801483c:	4b14      	ldr	r3, [pc, #80]	@ (8014890 <HAL_InitTick+0x5c>)
 801483e:	681c      	ldr	r4, [r3, #0]
 8014840:	4b14      	ldr	r3, [pc, #80]	@ (8014894 <HAL_InitTick+0x60>)
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	0019      	movs	r1, r3
 8014846:	23fa      	movs	r3, #250	@ 0xfa
 8014848:	0098      	lsls	r0, r3, #2
 801484a:	f7eb fcab 	bl	80001a4 <__udivsi3>
 801484e:	0003      	movs	r3, r0
 8014850:	0019      	movs	r1, r3
 8014852:	0020      	movs	r0, r4
 8014854:	f7eb fca6 	bl	80001a4 <__udivsi3>
 8014858:	0003      	movs	r3, r0
 801485a:	0018      	movs	r0, r3
 801485c:	f000 fcdf 	bl	801521e <HAL_SYSTICK_Config>
 8014860:	1e03      	subs	r3, r0, #0
 8014862:	d001      	beq.n	8014868 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8014864:	2301      	movs	r3, #1
 8014866:	e00f      	b.n	8014888 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b03      	cmp	r3, #3
 801486c:	d80b      	bhi.n	8014886 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801486e:	6879      	ldr	r1, [r7, #4]
 8014870:	2301      	movs	r3, #1
 8014872:	425b      	negs	r3, r3
 8014874:	2200      	movs	r2, #0
 8014876:	0018      	movs	r0, r3
 8014878:	f000 fca8 	bl	80151cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801487c:	4b06      	ldr	r3, [pc, #24]	@ (8014898 <HAL_InitTick+0x64>)
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8014882:	2300      	movs	r3, #0
 8014884:	e000      	b.n	8014888 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8014886:	2301      	movs	r3, #1
}
 8014888:	0018      	movs	r0, r3
 801488a:	46bd      	mov	sp, r7
 801488c:	b003      	add	sp, #12
 801488e:	bd90      	pop	{r4, r7, pc}
 8014890:	200000ec 	.word	0x200000ec
 8014894:	20000100 	.word	0x20000100
 8014898:	200000fc 	.word	0x200000fc

0801489c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80148a0:	4b05      	ldr	r3, [pc, #20]	@ (80148b8 <HAL_IncTick+0x1c>)
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	001a      	movs	r2, r3
 80148a6:	4b05      	ldr	r3, [pc, #20]	@ (80148bc <HAL_IncTick+0x20>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	18d2      	adds	r2, r2, r3
 80148ac:	4b03      	ldr	r3, [pc, #12]	@ (80148bc <HAL_IncTick+0x20>)
 80148ae:	601a      	str	r2, [r3, #0]
}
 80148b0:	46c0      	nop			@ (mov r8, r8)
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	46c0      	nop			@ (mov r8, r8)
 80148b8:	20000100 	.word	0x20000100
 80148bc:	20002518 	.word	0x20002518

080148c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	af00      	add	r7, sp, #0
  return uwTick;
 80148c4:	4b02      	ldr	r3, [pc, #8]	@ (80148d0 <HAL_GetTick+0x10>)
 80148c6:	681b      	ldr	r3, [r3, #0]
}
 80148c8:	0018      	movs	r0, r3
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	46c0      	nop			@ (mov r8, r8)
 80148d0:	20002518 	.word	0x20002518

080148d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b084      	sub	sp, #16
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80148dc:	f7ff fff0 	bl	80148c0 <HAL_GetTick>
 80148e0:	0003      	movs	r3, r0
 80148e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	3301      	adds	r3, #1
 80148ec:	d005      	beq.n	80148fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80148ee:	4b0a      	ldr	r3, [pc, #40]	@ (8014918 <HAL_Delay+0x44>)
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	001a      	movs	r2, r3
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	189b      	adds	r3, r3, r2
 80148f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80148fa:	46c0      	nop			@ (mov r8, r8)
 80148fc:	f7ff ffe0 	bl	80148c0 <HAL_GetTick>
 8014900:	0002      	movs	r2, r0
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	1ad3      	subs	r3, r2, r3
 8014906:	68fa      	ldr	r2, [r7, #12]
 8014908:	429a      	cmp	r2, r3
 801490a:	d8f7      	bhi.n	80148fc <HAL_Delay+0x28>
  {
  }
}
 801490c:	46c0      	nop			@ (mov r8, r8)
 801490e:	46c0      	nop			@ (mov r8, r8)
 8014910:	46bd      	mov	sp, r7
 8014912:	b004      	add	sp, #16
 8014914:	bd80      	pop	{r7, pc}
 8014916:	46c0      	nop			@ (mov r8, r8)
 8014918:	20000100 	.word	0x20000100

0801491c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8014920:	4b04      	ldr	r3, [pc, #16]	@ (8014934 <HAL_SuspendTick+0x18>)
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	4b03      	ldr	r3, [pc, #12]	@ (8014934 <HAL_SuspendTick+0x18>)
 8014926:	2102      	movs	r1, #2
 8014928:	438a      	bics	r2, r1
 801492a:	601a      	str	r2, [r3, #0]
}
 801492c:	46c0      	nop			@ (mov r8, r8)
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	46c0      	nop			@ (mov r8, r8)
 8014934:	e000e010 	.word	0xe000e010

08014938 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 801493c:	4b04      	ldr	r3, [pc, #16]	@ (8014950 <HAL_ResumeTick+0x18>)
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	4b03      	ldr	r3, [pc, #12]	@ (8014950 <HAL_ResumeTick+0x18>)
 8014942:	2102      	movs	r1, #2
 8014944:	430a      	orrs	r2, r1
 8014946:	601a      	str	r2, [r3, #0]
}
 8014948:	46c0      	nop			@ (mov r8, r8)
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
 801494e:	46c0      	nop			@ (mov r8, r8)
 8014950:	e000e010 	.word	0xe000e010

08014954 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d101      	bne.n	8014966 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8014962:	2301      	movs	r3, #1
 8014964:	e159      	b.n	8014c1a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801496a:	2b00      	cmp	r3, #0
 801496c:	d10a      	bne.n	8014984 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2200      	movs	r2, #0
 8014972:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2250      	movs	r2, #80	@ 0x50
 8014978:	2100      	movs	r1, #0
 801497a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	0018      	movs	r0, r3
 8014980:	f7f6 f982 	bl	800ac88 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014988:	2210      	movs	r2, #16
 801498a:	4013      	ands	r3, r2
 801498c:	2b10      	cmp	r3, #16
 801498e:	d005      	beq.n	801499c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	689b      	ldr	r3, [r3, #8]
 8014996:	2204      	movs	r2, #4
 8014998:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801499a:	d00b      	beq.n	80149b4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149a0:	2210      	movs	r2, #16
 80149a2:	431a      	orrs	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2250      	movs	r2, #80	@ 0x50
 80149ac:	2100      	movs	r1, #0
 80149ae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80149b0:	2301      	movs	r3, #1
 80149b2:	e132      	b.n	8014c1a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149b8:	4a9a      	ldr	r2, [pc, #616]	@ (8014c24 <HAL_ADC_Init+0x2d0>)
 80149ba:	4013      	ands	r3, r2
 80149bc:	2202      	movs	r2, #2
 80149be:	431a      	orrs	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	689b      	ldr	r3, [r3, #8]
 80149ca:	2203      	movs	r2, #3
 80149cc:	4013      	ands	r3, r2
 80149ce:	2b01      	cmp	r3, #1
 80149d0:	d108      	bne.n	80149e4 <HAL_ADC_Init+0x90>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	2201      	movs	r2, #1
 80149da:	4013      	ands	r3, r2
 80149dc:	2b01      	cmp	r3, #1
 80149de:	d101      	bne.n	80149e4 <HAL_ADC_Init+0x90>
 80149e0:	2301      	movs	r3, #1
 80149e2:	e000      	b.n	80149e6 <HAL_ADC_Init+0x92>
 80149e4:	2300      	movs	r3, #0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d149      	bne.n	8014a7e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	685a      	ldr	r2, [r3, #4]
 80149ee:	23c0      	movs	r3, #192	@ 0xc0
 80149f0:	061b      	lsls	r3, r3, #24
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d00b      	beq.n	8014a0e <HAL_ADC_Init+0xba>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	685a      	ldr	r2, [r3, #4]
 80149fa:	2380      	movs	r3, #128	@ 0x80
 80149fc:	05db      	lsls	r3, r3, #23
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d005      	beq.n	8014a0e <HAL_ADC_Init+0xba>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	685a      	ldr	r2, [r3, #4]
 8014a06:	2380      	movs	r3, #128	@ 0x80
 8014a08:	061b      	lsls	r3, r3, #24
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d111      	bne.n	8014a32 <HAL_ADC_Init+0xde>
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	691a      	ldr	r2, [r3, #16]
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	0092      	lsls	r2, r2, #2
 8014a1a:	0892      	lsrs	r2, r2, #2
 8014a1c:	611a      	str	r2, [r3, #16]
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	6919      	ldr	r1, [r3, #16]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	685a      	ldr	r2, [r3, #4]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	430a      	orrs	r2, r1
 8014a2e:	611a      	str	r2, [r3, #16]
 8014a30:	e014      	b.n	8014a5c <HAL_ADC_Init+0x108>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	691a      	ldr	r2, [r3, #16]
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	0092      	lsls	r2, r2, #2
 8014a3e:	0892      	lsrs	r2, r2, #2
 8014a40:	611a      	str	r2, [r3, #16]
 8014a42:	4b79      	ldr	r3, [pc, #484]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a44:	681a      	ldr	r2, [r3, #0]
 8014a46:	4b78      	ldr	r3, [pc, #480]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a48:	4978      	ldr	r1, [pc, #480]	@ (8014c2c <HAL_ADC_Init+0x2d8>)
 8014a4a:	400a      	ands	r2, r1
 8014a4c:	601a      	str	r2, [r3, #0]
 8014a4e:	4b76      	ldr	r3, [pc, #472]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a50:	6819      	ldr	r1, [r3, #0]
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	685a      	ldr	r2, [r3, #4]
 8014a56:	4b74      	ldr	r3, [pc, #464]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a58:	430a      	orrs	r2, r1
 8014a5a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	68da      	ldr	r2, [r3, #12]
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	2118      	movs	r1, #24
 8014a68:	438a      	bics	r2, r1
 8014a6a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	68d9      	ldr	r1, [r3, #12]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	689a      	ldr	r2, [r3, #8]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	430a      	orrs	r2, r1
 8014a7c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8014a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a80:	681a      	ldr	r2, [r3, #0]
 8014a82:	4b69      	ldr	r3, [pc, #420]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a84:	496a      	ldr	r1, [pc, #424]	@ (8014c30 <HAL_ADC_Init+0x2dc>)
 8014a86:	400a      	ands	r2, r1
 8014a88:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8014a8a:	4b67      	ldr	r3, [pc, #412]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a8c:	6819      	ldr	r1, [r3, #0]
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a92:	065a      	lsls	r2, r3, #25
 8014a94:	4b64      	ldr	r3, [pc, #400]	@ (8014c28 <HAL_ADC_Init+0x2d4>)
 8014a96:	430a      	orrs	r2, r1
 8014a98:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	689a      	ldr	r2, [r3, #8]
 8014aa0:	2380      	movs	r3, #128	@ 0x80
 8014aa2:	055b      	lsls	r3, r3, #21
 8014aa4:	4013      	ands	r3, r2
 8014aa6:	d108      	bne.n	8014aba <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	689a      	ldr	r2, [r3, #8]
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2180      	movs	r1, #128	@ 0x80
 8014ab4:	0549      	lsls	r1, r1, #21
 8014ab6:	430a      	orrs	r2, r1
 8014ab8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	68da      	ldr	r2, [r3, #12]
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	495b      	ldr	r1, [pc, #364]	@ (8014c34 <HAL_ADC_Init+0x2e0>)
 8014ac6:	400a      	ands	r2, r1
 8014ac8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	68d9      	ldr	r1, [r3, #12]
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	691b      	ldr	r3, [r3, #16]
 8014ad8:	2b02      	cmp	r3, #2
 8014ada:	d101      	bne.n	8014ae0 <HAL_ADC_Init+0x18c>
 8014adc:	2304      	movs	r3, #4
 8014ade:	e000      	b.n	8014ae2 <HAL_ADC_Init+0x18e>
 8014ae0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014ae2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2020      	movs	r0, #32
 8014ae8:	5c1b      	ldrb	r3, [r3, r0]
 8014aea:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014aec:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	202c      	movs	r0, #44	@ 0x2c
 8014af2:	5c1b      	ldrb	r3, [r3, r0]
 8014af4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014af6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014afc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	699b      	ldr	r3, [r3, #24]
 8014b02:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8014b04:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	69db      	ldr	r3, [r3, #28]
 8014b0a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014b0c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	430a      	orrs	r2, r1
 8014b14:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b1a:	23c2      	movs	r3, #194	@ 0xc2
 8014b1c:	33ff      	adds	r3, #255	@ 0xff
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d00b      	beq.n	8014b3a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	68d9      	ldr	r1, [r3, #12]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014b30:	431a      	orrs	r2, r3
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	430a      	orrs	r2, r1
 8014b38:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	2221      	movs	r2, #33	@ 0x21
 8014b3e:	5c9b      	ldrb	r3, [r3, r2]
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	d11a      	bne.n	8014b7a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2220      	movs	r2, #32
 8014b48:	5c9b      	ldrb	r3, [r3, r2]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d109      	bne.n	8014b62 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	68da      	ldr	r2, [r3, #12]
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	2180      	movs	r1, #128	@ 0x80
 8014b5a:	0249      	lsls	r1, r1, #9
 8014b5c:	430a      	orrs	r2, r1
 8014b5e:	60da      	str	r2, [r3, #12]
 8014b60:	e00b      	b.n	8014b7a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b66:	2220      	movs	r2, #32
 8014b68:	431a      	orrs	r2, r3
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014b72:	2201      	movs	r2, #1
 8014b74:	431a      	orrs	r2, r3
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b7e:	2b01      	cmp	r3, #1
 8014b80:	d11f      	bne.n	8014bc2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	691a      	ldr	r2, [r3, #16]
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	492a      	ldr	r1, [pc, #168]	@ (8014c38 <HAL_ADC_Init+0x2e4>)
 8014b8e:	400a      	ands	r2, r1
 8014b90:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	6919      	ldr	r1, [r3, #16]
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014ba0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8014ba6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	430a      	orrs	r2, r1
 8014bae:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	691a      	ldr	r2, [r3, #16]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2101      	movs	r1, #1
 8014bbc:	430a      	orrs	r2, r1
 8014bbe:	611a      	str	r2, [r3, #16]
 8014bc0:	e00e      	b.n	8014be0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	691b      	ldr	r3, [r3, #16]
 8014bc8:	2201      	movs	r2, #1
 8014bca:	4013      	ands	r3, r2
 8014bcc:	2b01      	cmp	r3, #1
 8014bce:	d107      	bne.n	8014be0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	691a      	ldr	r2, [r3, #16]
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	2101      	movs	r1, #1
 8014bdc:	438a      	bics	r2, r1
 8014bde:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	695a      	ldr	r2, [r3, #20]
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	2107      	movs	r1, #7
 8014bec:	438a      	bics	r2, r1
 8014bee:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	6959      	ldr	r1, [r3, #20]
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	430a      	orrs	r2, r1
 8014c00:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2200      	movs	r2, #0
 8014c06:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c0c:	2203      	movs	r2, #3
 8014c0e:	4393      	bics	r3, r2
 8014c10:	2201      	movs	r2, #1
 8014c12:	431a      	orrs	r2, r3
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8014c18:	2300      	movs	r3, #0
}
 8014c1a:	0018      	movs	r0, r3
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	b002      	add	sp, #8
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	46c0      	nop			@ (mov r8, r8)
 8014c24:	fffffefd 	.word	0xfffffefd
 8014c28:	40012708 	.word	0x40012708
 8014c2c:	ffc3ffff 	.word	0xffc3ffff
 8014c30:	fdffffff 	.word	0xfdffffff
 8014c34:	fffe0219 	.word	0xfffe0219
 8014c38:	fffffc03 	.word	0xfffffc03

08014c3c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8014c3c:	b590      	push	{r4, r7, lr}
 8014c3e:	b085      	sub	sp, #20
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014c44:	230f      	movs	r3, #15
 8014c46:	18fb      	adds	r3, r7, r3
 8014c48:	2200      	movs	r2, #0
 8014c4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	689b      	ldr	r3, [r3, #8]
 8014c52:	2204      	movs	r2, #4
 8014c54:	4013      	ands	r3, r2
 8014c56:	d138      	bne.n	8014cca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2250      	movs	r2, #80	@ 0x50
 8014c5c:	5c9b      	ldrb	r3, [r3, r2]
 8014c5e:	2b01      	cmp	r3, #1
 8014c60:	d101      	bne.n	8014c66 <HAL_ADC_Start+0x2a>
 8014c62:	2302      	movs	r3, #2
 8014c64:	e038      	b.n	8014cd8 <HAL_ADC_Start+0x9c>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2250      	movs	r2, #80	@ 0x50
 8014c6a:	2101      	movs	r1, #1
 8014c6c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	69db      	ldr	r3, [r3, #28]
 8014c72:	2b01      	cmp	r3, #1
 8014c74:	d007      	beq.n	8014c86 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8014c76:	230f      	movs	r3, #15
 8014c78:	18fc      	adds	r4, r7, r3
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	0018      	movs	r0, r3
 8014c7e:	f000 f95f 	bl	8014f40 <ADC_Enable>
 8014c82:	0003      	movs	r3, r0
 8014c84:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8014c86:	230f      	movs	r3, #15
 8014c88:	18fb      	adds	r3, r7, r3
 8014c8a:	781b      	ldrb	r3, [r3, #0]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d120      	bne.n	8014cd2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c94:	4a12      	ldr	r2, [pc, #72]	@ (8014ce0 <HAL_ADC_Start+0xa4>)
 8014c96:	4013      	ands	r3, r2
 8014c98:	2280      	movs	r2, #128	@ 0x80
 8014c9a:	0052      	lsls	r2, r2, #1
 8014c9c:	431a      	orrs	r2, r3
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2250      	movs	r2, #80	@ 0x50
 8014cac:	2100      	movs	r1, #0
 8014cae:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	221c      	movs	r2, #28
 8014cb6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	689a      	ldr	r2, [r3, #8]
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	2104      	movs	r1, #4
 8014cc4:	430a      	orrs	r2, r1
 8014cc6:	609a      	str	r2, [r3, #8]
 8014cc8:	e003      	b.n	8014cd2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014cca:	230f      	movs	r3, #15
 8014ccc:	18fb      	adds	r3, r7, r3
 8014cce:	2202      	movs	r2, #2
 8014cd0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8014cd2:	230f      	movs	r3, #15
 8014cd4:	18fb      	adds	r3, r7, r3
 8014cd6:	781b      	ldrb	r3, [r3, #0]
}
 8014cd8:	0018      	movs	r0, r3
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	b005      	add	sp, #20
 8014cde:	bd90      	pop	{r4, r7, pc}
 8014ce0:	fffff0fe 	.word	0xfffff0fe

08014ce4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	695b      	ldr	r3, [r3, #20]
 8014cfa:	2b08      	cmp	r3, #8
 8014cfc:	d102      	bne.n	8014d04 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8014cfe:	2308      	movs	r3, #8
 8014d00:	60fb      	str	r3, [r7, #12]
 8014d02:	e014      	b.n	8014d2e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	68db      	ldr	r3, [r3, #12]
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	4013      	ands	r3, r2
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d10b      	bne.n	8014d2a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d16:	2220      	movs	r2, #32
 8014d18:	431a      	orrs	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2250      	movs	r2, #80	@ 0x50
 8014d22:	2100      	movs	r1, #0
 8014d24:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8014d26:	2301      	movs	r3, #1
 8014d28:	e072      	b.n	8014e10 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8014d2a:	230c      	movs	r3, #12
 8014d2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8014d2e:	f7ff fdc7 	bl	80148c0 <HAL_GetTick>
 8014d32:	0003      	movs	r3, r0
 8014d34:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014d36:	e01f      	b.n	8014d78 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	d01c      	beq.n	8014d78 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d007      	beq.n	8014d54 <HAL_ADC_PollForConversion+0x70>
 8014d44:	f7ff fdbc 	bl	80148c0 <HAL_GetTick>
 8014d48:	0002      	movs	r2, r0
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	1ad3      	subs	r3, r2, r3
 8014d4e:	683a      	ldr	r2, [r7, #0]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d211      	bcs.n	8014d78 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	68fa      	ldr	r2, [r7, #12]
 8014d5c:	4013      	ands	r3, r2
 8014d5e:	d10b      	bne.n	8014d78 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d64:	2204      	movs	r2, #4
 8014d66:	431a      	orrs	r2, r3
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2250      	movs	r2, #80	@ 0x50
 8014d70:	2100      	movs	r1, #0
 8014d72:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014d74:	2303      	movs	r3, #3
 8014d76:	e04b      	b.n	8014e10 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	68fa      	ldr	r2, [r7, #12]
 8014d80:	4013      	ands	r3, r2
 8014d82:	d0d9      	beq.n	8014d38 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d88:	2280      	movs	r2, #128	@ 0x80
 8014d8a:	0092      	lsls	r2, r2, #2
 8014d8c:	431a      	orrs	r2, r3
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	68da      	ldr	r2, [r3, #12]
 8014d98:	23c0      	movs	r3, #192	@ 0xc0
 8014d9a:	011b      	lsls	r3, r3, #4
 8014d9c:	4013      	ands	r3, r2
 8014d9e:	d12e      	bne.n	8014dfe <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2220      	movs	r2, #32
 8014da4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d129      	bne.n	8014dfe <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2208      	movs	r2, #8
 8014db2:	4013      	ands	r3, r2
 8014db4:	2b08      	cmp	r3, #8
 8014db6:	d122      	bne.n	8014dfe <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	689b      	ldr	r3, [r3, #8]
 8014dbe:	2204      	movs	r2, #4
 8014dc0:	4013      	ands	r3, r2
 8014dc2:	d110      	bne.n	8014de6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	685a      	ldr	r2, [r3, #4]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	210c      	movs	r1, #12
 8014dd0:	438a      	bics	r2, r1
 8014dd2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8014e18 <HAL_ADC_PollForConversion+0x134>)
 8014dda:	4013      	ands	r3, r2
 8014ddc:	2201      	movs	r2, #1
 8014dde:	431a      	orrs	r2, r3
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	655a      	str	r2, [r3, #84]	@ 0x54
 8014de4:	e00b      	b.n	8014dfe <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014dea:	2220      	movs	r2, #32
 8014dec:	431a      	orrs	r2, r3
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014df6:	2201      	movs	r2, #1
 8014df8:	431a      	orrs	r2, r3
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	699b      	ldr	r3, [r3, #24]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d103      	bne.n	8014e0e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	220c      	movs	r2, #12
 8014e0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014e0e:	2300      	movs	r3, #0
}
 8014e10:	0018      	movs	r0, r3
 8014e12:	46bd      	mov	sp, r7
 8014e14:	b004      	add	sp, #16
 8014e16:	bd80      	pop	{r7, pc}
 8014e18:	fffffefe 	.word	0xfffffefe

08014e1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b082      	sub	sp, #8
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8014e2a:	0018      	movs	r0, r3
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	b002      	add	sp, #8
 8014e30:	bd80      	pop	{r7, pc}
	...

08014e34 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b082      	sub	sp, #8
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2250      	movs	r2, #80	@ 0x50
 8014e42:	5c9b      	ldrb	r3, [r3, r2]
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d101      	bne.n	8014e4c <HAL_ADC_ConfigChannel+0x18>
 8014e48:	2302      	movs	r3, #2
 8014e4a:	e06c      	b.n	8014f26 <HAL_ADC_ConfigChannel+0xf2>
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2250      	movs	r2, #80	@ 0x50
 8014e50:	2101      	movs	r1, #1
 8014e52:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	689b      	ldr	r3, [r3, #8]
 8014e5a:	2204      	movs	r2, #4
 8014e5c:	4013      	ands	r3, r2
 8014e5e:	d00b      	beq.n	8014e78 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e64:	2220      	movs	r2, #32
 8014e66:	431a      	orrs	r2, r3
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2250      	movs	r2, #80	@ 0x50
 8014e70:	2100      	movs	r1, #0
 8014e72:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014e74:	2301      	movs	r3, #1
 8014e76:	e056      	b.n	8014f26 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	685b      	ldr	r3, [r3, #4]
 8014e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8014f30 <HAL_ADC_ConfigChannel+0xfc>)
 8014e7e:	4293      	cmp	r3, r2
 8014e80:	d028      	beq.n	8014ed4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	035b      	lsls	r3, r3, #13
 8014e8e:	0b5a      	lsrs	r2, r3, #13
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	430a      	orrs	r2, r1
 8014e96:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	681a      	ldr	r2, [r3, #0]
 8014e9c:	2380      	movs	r3, #128	@ 0x80
 8014e9e:	02db      	lsls	r3, r3, #11
 8014ea0:	4013      	ands	r3, r2
 8014ea2:	d009      	beq.n	8014eb8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014ea4:	4b23      	ldr	r3, [pc, #140]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014ea6:	681a      	ldr	r2, [r3, #0]
 8014ea8:	4b22      	ldr	r3, [pc, #136]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014eaa:	2180      	movs	r1, #128	@ 0x80
 8014eac:	0409      	lsls	r1, r1, #16
 8014eae:	430a      	orrs	r2, r1
 8014eb0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8014eb2:	200a      	movs	r0, #10
 8014eb4:	f000 f8ac 	bl	8015010 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	2380      	movs	r3, #128	@ 0x80
 8014ebe:	029b      	lsls	r3, r3, #10
 8014ec0:	4013      	ands	r3, r2
 8014ec2:	d02b      	beq.n	8014f1c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8014ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014ec6:	681a      	ldr	r2, [r3, #0]
 8014ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014eca:	2180      	movs	r1, #128	@ 0x80
 8014ecc:	03c9      	lsls	r1, r1, #15
 8014ece:	430a      	orrs	r2, r1
 8014ed0:	601a      	str	r2, [r3, #0]
 8014ed2:	e023      	b.n	8014f1c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	035b      	lsls	r3, r3, #13
 8014ee0:	0b5b      	lsrs	r3, r3, #13
 8014ee2:	43d9      	mvns	r1, r3
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	400a      	ands	r2, r1
 8014eea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	681a      	ldr	r2, [r3, #0]
 8014ef0:	2380      	movs	r3, #128	@ 0x80
 8014ef2:	02db      	lsls	r3, r3, #11
 8014ef4:	4013      	ands	r3, r2
 8014ef6:	d005      	beq.n	8014f04 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014efa:	681a      	ldr	r2, [r3, #0]
 8014efc:	4b0d      	ldr	r3, [pc, #52]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014efe:	490e      	ldr	r1, [pc, #56]	@ (8014f38 <HAL_ADC_ConfigChannel+0x104>)
 8014f00:	400a      	ands	r2, r1
 8014f02:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	681a      	ldr	r2, [r3, #0]
 8014f08:	2380      	movs	r3, #128	@ 0x80
 8014f0a:	029b      	lsls	r3, r3, #10
 8014f0c:	4013      	ands	r3, r2
 8014f0e:	d005      	beq.n	8014f1c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8014f10:	4b08      	ldr	r3, [pc, #32]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014f12:	681a      	ldr	r2, [r3, #0]
 8014f14:	4b07      	ldr	r3, [pc, #28]	@ (8014f34 <HAL_ADC_ConfigChannel+0x100>)
 8014f16:	4909      	ldr	r1, [pc, #36]	@ (8014f3c <HAL_ADC_ConfigChannel+0x108>)
 8014f18:	400a      	ands	r2, r1
 8014f1a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2250      	movs	r2, #80	@ 0x50
 8014f20:	2100      	movs	r1, #0
 8014f22:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014f24:	2300      	movs	r3, #0
}
 8014f26:	0018      	movs	r0, r3
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	b002      	add	sp, #8
 8014f2c:	bd80      	pop	{r7, pc}
 8014f2e:	46c0      	nop			@ (mov r8, r8)
 8014f30:	00001001 	.word	0x00001001
 8014f34:	40012708 	.word	0x40012708
 8014f38:	ff7fffff 	.word	0xff7fffff
 8014f3c:	ffbfffff 	.word	0xffbfffff

08014f40 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014f48:	2300      	movs	r3, #0
 8014f4a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	689b      	ldr	r3, [r3, #8]
 8014f52:	2203      	movs	r2, #3
 8014f54:	4013      	ands	r3, r2
 8014f56:	2b01      	cmp	r3, #1
 8014f58:	d108      	bne.n	8014f6c <ADC_Enable+0x2c>
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	2201      	movs	r2, #1
 8014f62:	4013      	ands	r3, r2
 8014f64:	2b01      	cmp	r3, #1
 8014f66:	d101      	bne.n	8014f6c <ADC_Enable+0x2c>
 8014f68:	2301      	movs	r3, #1
 8014f6a:	e000      	b.n	8014f6e <ADC_Enable+0x2e>
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d146      	bne.n	8015000 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	689b      	ldr	r3, [r3, #8]
 8014f78:	4a24      	ldr	r2, [pc, #144]	@ (801500c <ADC_Enable+0xcc>)
 8014f7a:	4013      	ands	r3, r2
 8014f7c:	d00d      	beq.n	8014f9a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f82:	2210      	movs	r2, #16
 8014f84:	431a      	orrs	r2, r3
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014f8e:	2201      	movs	r2, #1
 8014f90:	431a      	orrs	r2, r3
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8014f96:	2301      	movs	r3, #1
 8014f98:	e033      	b.n	8015002 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	689a      	ldr	r2, [r3, #8]
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2101      	movs	r1, #1
 8014fa6:	430a      	orrs	r2, r1
 8014fa8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8014faa:	2001      	movs	r0, #1
 8014fac:	f000 f830 	bl	8015010 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8014fb0:	f7ff fc86 	bl	80148c0 <HAL_GetTick>
 8014fb4:	0003      	movs	r3, r0
 8014fb6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014fb8:	e01b      	b.n	8014ff2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8014fba:	f7ff fc81 	bl	80148c0 <HAL_GetTick>
 8014fbe:	0002      	movs	r2, r0
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	1ad3      	subs	r3, r2, r3
 8014fc4:	2b0a      	cmp	r3, #10
 8014fc6:	d914      	bls.n	8014ff2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	2201      	movs	r2, #1
 8014fd0:	4013      	ands	r3, r2
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d00d      	beq.n	8014ff2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fda:	2210      	movs	r2, #16
 8014fdc:	431a      	orrs	r2, r3
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	431a      	orrs	r2, r3
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8014fee:	2301      	movs	r3, #1
 8014ff0:	e007      	b.n	8015002 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2201      	movs	r2, #1
 8014ffa:	4013      	ands	r3, r2
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d1dc      	bne.n	8014fba <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8015000:	2300      	movs	r3, #0
}
 8015002:	0018      	movs	r0, r3
 8015004:	46bd      	mov	sp, r7
 8015006:	b004      	add	sp, #16
 8015008:	bd80      	pop	{r7, pc}
 801500a:	46c0      	nop			@ (mov r8, r8)
 801500c:	80000017 	.word	0x80000017

08015010 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b084      	sub	sp, #16
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8015018:	4b0b      	ldr	r3, [pc, #44]	@ (8015048 <ADC_DelayMicroSecond+0x38>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	490b      	ldr	r1, [pc, #44]	@ (801504c <ADC_DelayMicroSecond+0x3c>)
 801501e:	0018      	movs	r0, r3
 8015020:	f7eb f8c0 	bl	80001a4 <__udivsi3>
 8015024:	0003      	movs	r3, r0
 8015026:	001a      	movs	r2, r3
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	4353      	muls	r3, r2
 801502c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 801502e:	e002      	b.n	8015036 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	3b01      	subs	r3, #1
 8015034:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d1f9      	bne.n	8015030 <ADC_DelayMicroSecond+0x20>
  }
}
 801503c:	46c0      	nop			@ (mov r8, r8)
 801503e:	46c0      	nop			@ (mov r8, r8)
 8015040:	46bd      	mov	sp, r7
 8015042:	b004      	add	sp, #16
 8015044:	bd80      	pop	{r7, pc}
 8015046:	46c0      	nop			@ (mov r8, r8)
 8015048:	200000ec 	.word	0x200000ec
 801504c:	000f4240 	.word	0x000f4240

08015050 <__NVIC_EnableIRQ>:
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	0002      	movs	r2, r0
 8015058:	1dfb      	adds	r3, r7, #7
 801505a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801505c:	1dfb      	adds	r3, r7, #7
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	2b7f      	cmp	r3, #127	@ 0x7f
 8015062:	d809      	bhi.n	8015078 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015064:	1dfb      	adds	r3, r7, #7
 8015066:	781b      	ldrb	r3, [r3, #0]
 8015068:	001a      	movs	r2, r3
 801506a:	231f      	movs	r3, #31
 801506c:	401a      	ands	r2, r3
 801506e:	4b04      	ldr	r3, [pc, #16]	@ (8015080 <__NVIC_EnableIRQ+0x30>)
 8015070:	2101      	movs	r1, #1
 8015072:	4091      	lsls	r1, r2
 8015074:	000a      	movs	r2, r1
 8015076:	601a      	str	r2, [r3, #0]
}
 8015078:	46c0      	nop			@ (mov r8, r8)
 801507a:	46bd      	mov	sp, r7
 801507c:	b002      	add	sp, #8
 801507e:	bd80      	pop	{r7, pc}
 8015080:	e000e100 	.word	0xe000e100

08015084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015084:	b590      	push	{r4, r7, lr}
 8015086:	b083      	sub	sp, #12
 8015088:	af00      	add	r7, sp, #0
 801508a:	0002      	movs	r2, r0
 801508c:	6039      	str	r1, [r7, #0]
 801508e:	1dfb      	adds	r3, r7, #7
 8015090:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8015092:	1dfb      	adds	r3, r7, #7
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	2b7f      	cmp	r3, #127	@ 0x7f
 8015098:	d828      	bhi.n	80150ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801509a:	4a2f      	ldr	r2, [pc, #188]	@ (8015158 <__NVIC_SetPriority+0xd4>)
 801509c:	1dfb      	adds	r3, r7, #7
 801509e:	781b      	ldrb	r3, [r3, #0]
 80150a0:	b25b      	sxtb	r3, r3
 80150a2:	089b      	lsrs	r3, r3, #2
 80150a4:	33c0      	adds	r3, #192	@ 0xc0
 80150a6:	009b      	lsls	r3, r3, #2
 80150a8:	589b      	ldr	r3, [r3, r2]
 80150aa:	1dfa      	adds	r2, r7, #7
 80150ac:	7812      	ldrb	r2, [r2, #0]
 80150ae:	0011      	movs	r1, r2
 80150b0:	2203      	movs	r2, #3
 80150b2:	400a      	ands	r2, r1
 80150b4:	00d2      	lsls	r2, r2, #3
 80150b6:	21ff      	movs	r1, #255	@ 0xff
 80150b8:	4091      	lsls	r1, r2
 80150ba:	000a      	movs	r2, r1
 80150bc:	43d2      	mvns	r2, r2
 80150be:	401a      	ands	r2, r3
 80150c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	019b      	lsls	r3, r3, #6
 80150c6:	22ff      	movs	r2, #255	@ 0xff
 80150c8:	401a      	ands	r2, r3
 80150ca:	1dfb      	adds	r3, r7, #7
 80150cc:	781b      	ldrb	r3, [r3, #0]
 80150ce:	0018      	movs	r0, r3
 80150d0:	2303      	movs	r3, #3
 80150d2:	4003      	ands	r3, r0
 80150d4:	00db      	lsls	r3, r3, #3
 80150d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80150d8:	481f      	ldr	r0, [pc, #124]	@ (8015158 <__NVIC_SetPriority+0xd4>)
 80150da:	1dfb      	adds	r3, r7, #7
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	b25b      	sxtb	r3, r3
 80150e0:	089b      	lsrs	r3, r3, #2
 80150e2:	430a      	orrs	r2, r1
 80150e4:	33c0      	adds	r3, #192	@ 0xc0
 80150e6:	009b      	lsls	r3, r3, #2
 80150e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80150ea:	e031      	b.n	8015150 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80150ec:	4a1b      	ldr	r2, [pc, #108]	@ (801515c <__NVIC_SetPriority+0xd8>)
 80150ee:	1dfb      	adds	r3, r7, #7
 80150f0:	781b      	ldrb	r3, [r3, #0]
 80150f2:	0019      	movs	r1, r3
 80150f4:	230f      	movs	r3, #15
 80150f6:	400b      	ands	r3, r1
 80150f8:	3b08      	subs	r3, #8
 80150fa:	089b      	lsrs	r3, r3, #2
 80150fc:	3306      	adds	r3, #6
 80150fe:	009b      	lsls	r3, r3, #2
 8015100:	18d3      	adds	r3, r2, r3
 8015102:	3304      	adds	r3, #4
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	1dfa      	adds	r2, r7, #7
 8015108:	7812      	ldrb	r2, [r2, #0]
 801510a:	0011      	movs	r1, r2
 801510c:	2203      	movs	r2, #3
 801510e:	400a      	ands	r2, r1
 8015110:	00d2      	lsls	r2, r2, #3
 8015112:	21ff      	movs	r1, #255	@ 0xff
 8015114:	4091      	lsls	r1, r2
 8015116:	000a      	movs	r2, r1
 8015118:	43d2      	mvns	r2, r2
 801511a:	401a      	ands	r2, r3
 801511c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	019b      	lsls	r3, r3, #6
 8015122:	22ff      	movs	r2, #255	@ 0xff
 8015124:	401a      	ands	r2, r3
 8015126:	1dfb      	adds	r3, r7, #7
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	0018      	movs	r0, r3
 801512c:	2303      	movs	r3, #3
 801512e:	4003      	ands	r3, r0
 8015130:	00db      	lsls	r3, r3, #3
 8015132:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015134:	4809      	ldr	r0, [pc, #36]	@ (801515c <__NVIC_SetPriority+0xd8>)
 8015136:	1dfb      	adds	r3, r7, #7
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	001c      	movs	r4, r3
 801513c:	230f      	movs	r3, #15
 801513e:	4023      	ands	r3, r4
 8015140:	3b08      	subs	r3, #8
 8015142:	089b      	lsrs	r3, r3, #2
 8015144:	430a      	orrs	r2, r1
 8015146:	3306      	adds	r3, #6
 8015148:	009b      	lsls	r3, r3, #2
 801514a:	18c3      	adds	r3, r0, r3
 801514c:	3304      	adds	r3, #4
 801514e:	601a      	str	r2, [r3, #0]
}
 8015150:	46c0      	nop			@ (mov r8, r8)
 8015152:	46bd      	mov	sp, r7
 8015154:	b003      	add	sp, #12
 8015156:	bd90      	pop	{r4, r7, pc}
 8015158:	e000e100 	.word	0xe000e100
 801515c:	e000ed00 	.word	0xe000ed00

08015160 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8015164:	f3bf 8f4f 	dsb	sy
}
 8015168:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801516a:	4b04      	ldr	r3, [pc, #16]	@ (801517c <__NVIC_SystemReset+0x1c>)
 801516c:	4a04      	ldr	r2, [pc, #16]	@ (8015180 <__NVIC_SystemReset+0x20>)
 801516e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8015170:	f3bf 8f4f 	dsb	sy
}
 8015174:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8015176:	46c0      	nop			@ (mov r8, r8)
 8015178:	e7fd      	b.n	8015176 <__NVIC_SystemReset+0x16>
 801517a:	46c0      	nop			@ (mov r8, r8)
 801517c:	e000ed00 	.word	0xe000ed00
 8015180:	05fa0004 	.word	0x05fa0004

08015184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	1e5a      	subs	r2, r3, #1
 8015190:	2380      	movs	r3, #128	@ 0x80
 8015192:	045b      	lsls	r3, r3, #17
 8015194:	429a      	cmp	r2, r3
 8015196:	d301      	bcc.n	801519c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8015198:	2301      	movs	r3, #1
 801519a:	e010      	b.n	80151be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801519c:	4b0a      	ldr	r3, [pc, #40]	@ (80151c8 <SysTick_Config+0x44>)
 801519e:	687a      	ldr	r2, [r7, #4]
 80151a0:	3a01      	subs	r2, #1
 80151a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80151a4:	2301      	movs	r3, #1
 80151a6:	425b      	negs	r3, r3
 80151a8:	2103      	movs	r1, #3
 80151aa:	0018      	movs	r0, r3
 80151ac:	f7ff ff6a 	bl	8015084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80151b0:	4b05      	ldr	r3, [pc, #20]	@ (80151c8 <SysTick_Config+0x44>)
 80151b2:	2200      	movs	r2, #0
 80151b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80151b6:	4b04      	ldr	r3, [pc, #16]	@ (80151c8 <SysTick_Config+0x44>)
 80151b8:	2207      	movs	r2, #7
 80151ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80151bc:	2300      	movs	r3, #0
}
 80151be:	0018      	movs	r0, r3
 80151c0:	46bd      	mov	sp, r7
 80151c2:	b002      	add	sp, #8
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	46c0      	nop			@ (mov r8, r8)
 80151c8:	e000e010 	.word	0xe000e010

080151cc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b084      	sub	sp, #16
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60b9      	str	r1, [r7, #8]
 80151d4:	607a      	str	r2, [r7, #4]
 80151d6:	210f      	movs	r1, #15
 80151d8:	187b      	adds	r3, r7, r1
 80151da:	1c02      	adds	r2, r0, #0
 80151dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80151de:	68ba      	ldr	r2, [r7, #8]
 80151e0:	187b      	adds	r3, r7, r1
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	b25b      	sxtb	r3, r3
 80151e6:	0011      	movs	r1, r2
 80151e8:	0018      	movs	r0, r3
 80151ea:	f7ff ff4b 	bl	8015084 <__NVIC_SetPriority>
}
 80151ee:	46c0      	nop			@ (mov r8, r8)
 80151f0:	46bd      	mov	sp, r7
 80151f2:	b004      	add	sp, #16
 80151f4:	bd80      	pop	{r7, pc}

080151f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80151f6:	b580      	push	{r7, lr}
 80151f8:	b082      	sub	sp, #8
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	0002      	movs	r2, r0
 80151fe:	1dfb      	adds	r3, r7, #7
 8015200:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015202:	1dfb      	adds	r3, r7, #7
 8015204:	781b      	ldrb	r3, [r3, #0]
 8015206:	b25b      	sxtb	r3, r3
 8015208:	0018      	movs	r0, r3
 801520a:	f7ff ff21 	bl	8015050 <__NVIC_EnableIRQ>
}
 801520e:	46c0      	nop			@ (mov r8, r8)
 8015210:	46bd      	mov	sp, r7
 8015212:	b002      	add	sp, #8
 8015214:	bd80      	pop	{r7, pc}

08015216 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8015216:	b580      	push	{r7, lr}
 8015218:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801521a:	f7ff ffa1 	bl	8015160 <__NVIC_SystemReset>

0801521e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801521e:	b580      	push	{r7, lr}
 8015220:	b082      	sub	sp, #8
 8015222:	af00      	add	r7, sp, #0
 8015224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	0018      	movs	r0, r3
 801522a:	f7ff ffab 	bl	8015184 <SysTick_Config>
 801522e:	0003      	movs	r3, r0
}
 8015230:	0018      	movs	r0, r3
 8015232:	46bd      	mov	sp, r7
 8015234:	b002      	add	sp, #8
 8015236:	bd80      	pop	{r7, pc}

08015238 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b084      	sub	sp, #16
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d101      	bne.n	801524a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8015246:	2301      	movs	r3, #1
 8015248:	e061      	b.n	801530e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	4a32      	ldr	r2, [pc, #200]	@ (8015318 <HAL_DMA_Init+0xe0>)
 8015250:	4694      	mov	ip, r2
 8015252:	4463      	add	r3, ip
 8015254:	2114      	movs	r1, #20
 8015256:	0018      	movs	r0, r3
 8015258:	f7ea ffa4 	bl	80001a4 <__udivsi3>
 801525c:	0003      	movs	r3, r0
 801525e:	009a      	lsls	r2, r3, #2
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	4a2d      	ldr	r2, [pc, #180]	@ (801531c <HAL_DMA_Init+0xe4>)
 8015268:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2225      	movs	r2, #37	@ 0x25
 801526e:	2102      	movs	r1, #2
 8015270:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	4a28      	ldr	r2, [pc, #160]	@ (8015320 <HAL_DMA_Init+0xe8>)
 801527e:	4013      	ands	r3, r2
 8015280:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801528a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	691b      	ldr	r3, [r3, #16]
 8015290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	699b      	ldr	r3, [r3, #24]
 801529c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80152a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	6a1b      	ldr	r3, [r3, #32]
 80152a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80152aa:	68fa      	ldr	r2, [r7, #12]
 80152ac:	4313      	orrs	r3, r2
 80152ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	68fa      	ldr	r2, [r7, #12]
 80152b6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	689a      	ldr	r2, [r3, #8]
 80152bc:	2380      	movs	r3, #128	@ 0x80
 80152be:	01db      	lsls	r3, r3, #7
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d018      	beq.n	80152f6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80152c4:	4b17      	ldr	r3, [pc, #92]	@ (8015324 <HAL_DMA_Init+0xec>)
 80152c6:	681a      	ldr	r2, [r3, #0]
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152cc:	211c      	movs	r1, #28
 80152ce:	400b      	ands	r3, r1
 80152d0:	210f      	movs	r1, #15
 80152d2:	4099      	lsls	r1, r3
 80152d4:	000b      	movs	r3, r1
 80152d6:	43d9      	mvns	r1, r3
 80152d8:	4b12      	ldr	r3, [pc, #72]	@ (8015324 <HAL_DMA_Init+0xec>)
 80152da:	400a      	ands	r2, r1
 80152dc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80152de:	4b11      	ldr	r3, [pc, #68]	@ (8015324 <HAL_DMA_Init+0xec>)
 80152e0:	6819      	ldr	r1, [r3, #0]
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	685a      	ldr	r2, [r3, #4]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152ea:	201c      	movs	r0, #28
 80152ec:	4003      	ands	r3, r0
 80152ee:	409a      	lsls	r2, r3
 80152f0:	4b0c      	ldr	r3, [pc, #48]	@ (8015324 <HAL_DMA_Init+0xec>)
 80152f2:	430a      	orrs	r2, r1
 80152f4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	2200      	movs	r2, #0
 80152fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2225      	movs	r2, #37	@ 0x25
 8015300:	2101      	movs	r1, #1
 8015302:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2224      	movs	r2, #36	@ 0x24
 8015308:	2100      	movs	r1, #0
 801530a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801530c:	2300      	movs	r3, #0
}
 801530e:	0018      	movs	r0, r3
 8015310:	46bd      	mov	sp, r7
 8015312:	b004      	add	sp, #16
 8015314:	bd80      	pop	{r7, pc}
 8015316:	46c0      	nop			@ (mov r8, r8)
 8015318:	bffdfff8 	.word	0xbffdfff8
 801531c:	40020000 	.word	0x40020000
 8015320:	ffff800f 	.word	0xffff800f
 8015324:	400200a8 	.word	0x400200a8

08015328 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b086      	sub	sp, #24
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
 8015334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015336:	2317      	movs	r3, #23
 8015338:	18fb      	adds	r3, r7, r3
 801533a:	2200      	movs	r2, #0
 801533c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	2224      	movs	r2, #36	@ 0x24
 8015342:	5c9b      	ldrb	r3, [r3, r2]
 8015344:	2b01      	cmp	r3, #1
 8015346:	d101      	bne.n	801534c <HAL_DMA_Start_IT+0x24>
 8015348:	2302      	movs	r3, #2
 801534a:	e04f      	b.n	80153ec <HAL_DMA_Start_IT+0xc4>
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	2224      	movs	r2, #36	@ 0x24
 8015350:	2101      	movs	r1, #1
 8015352:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2225      	movs	r2, #37	@ 0x25
 8015358:	5c9b      	ldrb	r3, [r3, r2]
 801535a:	b2db      	uxtb	r3, r3
 801535c:	2b01      	cmp	r3, #1
 801535e:	d13a      	bne.n	80153d6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	2225      	movs	r2, #37	@ 0x25
 8015364:	2102      	movs	r1, #2
 8015366:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	2200      	movs	r2, #0
 801536c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	2101      	movs	r1, #1
 801537a:	438a      	bics	r2, r1
 801537c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	687a      	ldr	r2, [r7, #4]
 8015382:	68b9      	ldr	r1, [r7, #8]
 8015384:	68f8      	ldr	r0, [r7, #12]
 8015386:	f000 f976 	bl	8015676 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801538e:	2b00      	cmp	r3, #0
 8015390:	d008      	beq.n	80153a4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	681a      	ldr	r2, [r3, #0]
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	210e      	movs	r1, #14
 801539e:	430a      	orrs	r2, r1
 80153a0:	601a      	str	r2, [r3, #0]
 80153a2:	e00f      	b.n	80153c4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	681a      	ldr	r2, [r3, #0]
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	2104      	movs	r1, #4
 80153b0:	438a      	bics	r2, r1
 80153b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	210a      	movs	r1, #10
 80153c0:	430a      	orrs	r2, r1
 80153c2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	681a      	ldr	r2, [r3, #0]
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	2101      	movs	r1, #1
 80153d0:	430a      	orrs	r2, r1
 80153d2:	601a      	str	r2, [r3, #0]
 80153d4:	e007      	b.n	80153e6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	2224      	movs	r2, #36	@ 0x24
 80153da:	2100      	movs	r1, #0
 80153dc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80153de:	2317      	movs	r3, #23
 80153e0:	18fb      	adds	r3, r7, r3
 80153e2:	2202      	movs	r2, #2
 80153e4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80153e6:	2317      	movs	r3, #23
 80153e8:	18fb      	adds	r3, r7, r3
 80153ea:	781b      	ldrb	r3, [r3, #0]
}
 80153ec:	0018      	movs	r0, r3
 80153ee:	46bd      	mov	sp, r7
 80153f0:	b006      	add	sp, #24
 80153f2:	bd80      	pop	{r7, pc}

080153f4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b084      	sub	sp, #16
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80153fc:	230f      	movs	r3, #15
 80153fe:	18fb      	adds	r3, r7, r3
 8015400:	2200      	movs	r2, #0
 8015402:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2225      	movs	r2, #37	@ 0x25
 8015408:	5c9b      	ldrb	r3, [r3, r2]
 801540a:	b2db      	uxtb	r3, r3
 801540c:	2b02      	cmp	r3, #2
 801540e:	d008      	beq.n	8015422 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	2204      	movs	r2, #4
 8015414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2224      	movs	r2, #36	@ 0x24
 801541a:	2100      	movs	r1, #0
 801541c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 801541e:	2301      	movs	r3, #1
 8015420:	e024      	b.n	801546c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	681a      	ldr	r2, [r3, #0]
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	210e      	movs	r1, #14
 801542e:	438a      	bics	r2, r1
 8015430:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	2101      	movs	r1, #1
 801543e:	438a      	bics	r2, r1
 8015440:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015446:	221c      	movs	r2, #28
 8015448:	401a      	ands	r2, r3
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801544e:	2101      	movs	r1, #1
 8015450:	4091      	lsls	r1, r2
 8015452:	000a      	movs	r2, r1
 8015454:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	2225      	movs	r2, #37	@ 0x25
 801545a:	2101      	movs	r1, #1
 801545c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2224      	movs	r2, #36	@ 0x24
 8015462:	2100      	movs	r1, #0
 8015464:	5499      	strb	r1, [r3, r2]

    return status;
 8015466:	230f      	movs	r3, #15
 8015468:	18fb      	adds	r3, r7, r3
 801546a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801546c:	0018      	movs	r0, r3
 801546e:	46bd      	mov	sp, r7
 8015470:	b004      	add	sp, #16
 8015472:	bd80      	pop	{r7, pc}

08015474 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b084      	sub	sp, #16
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801547c:	210f      	movs	r1, #15
 801547e:	187b      	adds	r3, r7, r1
 8015480:	2200      	movs	r2, #0
 8015482:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2225      	movs	r2, #37	@ 0x25
 8015488:	5c9b      	ldrb	r3, [r3, r2]
 801548a:	b2db      	uxtb	r3, r3
 801548c:	2b02      	cmp	r3, #2
 801548e:	d006      	beq.n	801549e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2204      	movs	r2, #4
 8015494:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8015496:	187b      	adds	r3, r7, r1
 8015498:	2201      	movs	r2, #1
 801549a:	701a      	strb	r2, [r3, #0]
 801549c:	e02a      	b.n	80154f4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	210e      	movs	r1, #14
 80154aa:	438a      	bics	r2, r1
 80154ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	2101      	movs	r1, #1
 80154ba:	438a      	bics	r2, r1
 80154bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154c2:	221c      	movs	r2, #28
 80154c4:	401a      	ands	r2, r3
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154ca:	2101      	movs	r1, #1
 80154cc:	4091      	lsls	r1, r2
 80154ce:	000a      	movs	r2, r1
 80154d0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2225      	movs	r2, #37	@ 0x25
 80154d6:	2101      	movs	r1, #1
 80154d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	2224      	movs	r2, #36	@ 0x24
 80154de:	2100      	movs	r1, #0
 80154e0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d004      	beq.n	80154f4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154ee:	687a      	ldr	r2, [r7, #4]
 80154f0:	0010      	movs	r0, r2
 80154f2:	4798      	blx	r3
    }
  }
  return status;
 80154f4:	230f      	movs	r3, #15
 80154f6:	18fb      	adds	r3, r7, r3
 80154f8:	781b      	ldrb	r3, [r3, #0]
}
 80154fa:	0018      	movs	r0, r3
 80154fc:	46bd      	mov	sp, r7
 80154fe:	b004      	add	sp, #16
 8015500:	bd80      	pop	{r7, pc}

08015502 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8015502:	b580      	push	{r7, lr}
 8015504:	b084      	sub	sp, #16
 8015506:	af00      	add	r7, sp, #0
 8015508:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801551e:	221c      	movs	r2, #28
 8015520:	4013      	ands	r3, r2
 8015522:	2204      	movs	r2, #4
 8015524:	409a      	lsls	r2, r3
 8015526:	0013      	movs	r3, r2
 8015528:	68fa      	ldr	r2, [r7, #12]
 801552a:	4013      	ands	r3, r2
 801552c:	d026      	beq.n	801557c <HAL_DMA_IRQHandler+0x7a>
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	2204      	movs	r2, #4
 8015532:	4013      	ands	r3, r2
 8015534:	d022      	beq.n	801557c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2220      	movs	r2, #32
 801553e:	4013      	ands	r3, r2
 8015540:	d107      	bne.n	8015552 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	681a      	ldr	r2, [r3, #0]
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	2104      	movs	r1, #4
 801554e:	438a      	bics	r2, r1
 8015550:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015556:	221c      	movs	r2, #28
 8015558:	401a      	ands	r2, r3
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801555e:	2104      	movs	r1, #4
 8015560:	4091      	lsls	r1, r2
 8015562:	000a      	movs	r2, r1
 8015564:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801556a:	2b00      	cmp	r3, #0
 801556c:	d100      	bne.n	8015570 <HAL_DMA_IRQHandler+0x6e>
 801556e:	e071      	b.n	8015654 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015574:	687a      	ldr	r2, [r7, #4]
 8015576:	0010      	movs	r0, r2
 8015578:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 801557a:	e06b      	b.n	8015654 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015580:	221c      	movs	r2, #28
 8015582:	4013      	ands	r3, r2
 8015584:	2202      	movs	r2, #2
 8015586:	409a      	lsls	r2, r3
 8015588:	0013      	movs	r3, r2
 801558a:	68fa      	ldr	r2, [r7, #12]
 801558c:	4013      	ands	r3, r2
 801558e:	d02d      	beq.n	80155ec <HAL_DMA_IRQHandler+0xea>
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	2202      	movs	r2, #2
 8015594:	4013      	ands	r3, r2
 8015596:	d029      	beq.n	80155ec <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	2220      	movs	r2, #32
 80155a0:	4013      	ands	r3, r2
 80155a2:	d10b      	bne.n	80155bc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	681a      	ldr	r2, [r3, #0]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	210a      	movs	r1, #10
 80155b0:	438a      	bics	r2, r1
 80155b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2225      	movs	r2, #37	@ 0x25
 80155b8:	2101      	movs	r1, #1
 80155ba:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155c0:	221c      	movs	r2, #28
 80155c2:	401a      	ands	r2, r3
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155c8:	2102      	movs	r1, #2
 80155ca:	4091      	lsls	r1, r2
 80155cc:	000a      	movs	r2, r1
 80155ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2224      	movs	r2, #36	@ 0x24
 80155d4:	2100      	movs	r1, #0
 80155d6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d039      	beq.n	8015654 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155e4:	687a      	ldr	r2, [r7, #4]
 80155e6:	0010      	movs	r0, r2
 80155e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80155ea:	e033      	b.n	8015654 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155f0:	221c      	movs	r2, #28
 80155f2:	4013      	ands	r3, r2
 80155f4:	2208      	movs	r2, #8
 80155f6:	409a      	lsls	r2, r3
 80155f8:	0013      	movs	r3, r2
 80155fa:	68fa      	ldr	r2, [r7, #12]
 80155fc:	4013      	ands	r3, r2
 80155fe:	d02a      	beq.n	8015656 <HAL_DMA_IRQHandler+0x154>
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	2208      	movs	r2, #8
 8015604:	4013      	ands	r3, r2
 8015606:	d026      	beq.n	8015656 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	210e      	movs	r1, #14
 8015614:	438a      	bics	r2, r1
 8015616:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801561c:	221c      	movs	r2, #28
 801561e:	401a      	ands	r2, r3
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015624:	2101      	movs	r1, #1
 8015626:	4091      	lsls	r1, r2
 8015628:	000a      	movs	r2, r1
 801562a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2201      	movs	r2, #1
 8015630:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2225      	movs	r2, #37	@ 0x25
 8015636:	2101      	movs	r1, #1
 8015638:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2224      	movs	r2, #36	@ 0x24
 801563e:	2100      	movs	r1, #0
 8015640:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015646:	2b00      	cmp	r3, #0
 8015648:	d005      	beq.n	8015656 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801564e:	687a      	ldr	r2, [r7, #4]
 8015650:	0010      	movs	r0, r2
 8015652:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8015654:	46c0      	nop			@ (mov r8, r8)
 8015656:	46c0      	nop			@ (mov r8, r8)
}
 8015658:	46bd      	mov	sp, r7
 801565a:	b004      	add	sp, #16
 801565c:	bd80      	pop	{r7, pc}

0801565e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801565e:	b580      	push	{r7, lr}
 8015660:	b082      	sub	sp, #8
 8015662:	af00      	add	r7, sp, #0
 8015664:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	2225      	movs	r2, #37	@ 0x25
 801566a:	5c9b      	ldrb	r3, [r3, r2]
 801566c:	b2db      	uxtb	r3, r3
}
 801566e:	0018      	movs	r0, r3
 8015670:	46bd      	mov	sp, r7
 8015672:	b002      	add	sp, #8
 8015674:	bd80      	pop	{r7, pc}

08015676 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015676:	b580      	push	{r7, lr}
 8015678:	b084      	sub	sp, #16
 801567a:	af00      	add	r7, sp, #0
 801567c:	60f8      	str	r0, [r7, #12]
 801567e:	60b9      	str	r1, [r7, #8]
 8015680:	607a      	str	r2, [r7, #4]
 8015682:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015688:	221c      	movs	r2, #28
 801568a:	401a      	ands	r2, r3
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015690:	2101      	movs	r1, #1
 8015692:	4091      	lsls	r1, r2
 8015694:	000a      	movs	r2, r1
 8015696:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	683a      	ldr	r2, [r7, #0]
 801569e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	689b      	ldr	r3, [r3, #8]
 80156a4:	2b10      	cmp	r3, #16
 80156a6:	d108      	bne.n	80156ba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	687a      	ldr	r2, [r7, #4]
 80156ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	68ba      	ldr	r2, [r7, #8]
 80156b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80156b8:	e007      	b.n	80156ca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	68ba      	ldr	r2, [r7, #8]
 80156c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	687a      	ldr	r2, [r7, #4]
 80156c8:	60da      	str	r2, [r3, #12]
}
 80156ca:	46c0      	nop			@ (mov r8, r8)
 80156cc:	46bd      	mov	sp, r7
 80156ce:	b004      	add	sp, #16
 80156d0:	bd80      	pop	{r7, pc}
	...

080156d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b084      	sub	sp, #16
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80156dc:	f7ff f8f0 	bl	80148c0 <HAL_GetTick>
 80156e0:	0003      	movs	r3, r0
 80156e2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80156e4:	e00f      	b.n	8015706 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	3301      	adds	r3, #1
 80156ea:	d00c      	beq.n	8015706 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d007      	beq.n	8015702 <FLASH_WaitForLastOperation+0x2e>
 80156f2:	f7ff f8e5 	bl	80148c0 <HAL_GetTick>
 80156f6:	0002      	movs	r2, r0
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	1ad3      	subs	r3, r2, r3
 80156fc:	687a      	ldr	r2, [r7, #4]
 80156fe:	429a      	cmp	r2, r3
 8015700:	d201      	bcs.n	8015706 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8015702:	2303      	movs	r3, #3
 8015704:	e052      	b.n	80157ac <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8015706:	4b2b      	ldr	r3, [pc, #172]	@ (80157b4 <FLASH_WaitForLastOperation+0xe0>)
 8015708:	699b      	ldr	r3, [r3, #24]
 801570a:	2201      	movs	r2, #1
 801570c:	4013      	ands	r3, r2
 801570e:	2b01      	cmp	r3, #1
 8015710:	d0e9      	beq.n	80156e6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8015712:	4b28      	ldr	r3, [pc, #160]	@ (80157b4 <FLASH_WaitForLastOperation+0xe0>)
 8015714:	699b      	ldr	r3, [r3, #24]
 8015716:	2202      	movs	r2, #2
 8015718:	4013      	ands	r3, r2
 801571a:	2b02      	cmp	r3, #2
 801571c:	d102      	bne.n	8015724 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801571e:	4b25      	ldr	r3, [pc, #148]	@ (80157b4 <FLASH_WaitForLastOperation+0xe0>)
 8015720:	2202      	movs	r2, #2
 8015722:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015724:	4b23      	ldr	r3, [pc, #140]	@ (80157b4 <FLASH_WaitForLastOperation+0xe0>)
 8015726:	699a      	ldr	r2, [r3, #24]
 8015728:	2380      	movs	r3, #128	@ 0x80
 801572a:	005b      	lsls	r3, r3, #1
 801572c:	401a      	ands	r2, r3
 801572e:	2380      	movs	r3, #128	@ 0x80
 8015730:	005b      	lsls	r3, r3, #1
 8015732:	429a      	cmp	r2, r3
 8015734:	d035      	beq.n	80157a2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8015736:	4b1f      	ldr	r3, [pc, #124]	@ (80157b4 <FLASH_WaitForLastOperation+0xe0>)
 8015738:	699a      	ldr	r2, [r3, #24]
 801573a:	2380      	movs	r3, #128	@ 0x80
 801573c:	009b      	lsls	r3, r3, #2
 801573e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015740:	2380      	movs	r3, #128	@ 0x80
 8015742:	009b      	lsls	r3, r3, #2
 8015744:	429a      	cmp	r2, r3
 8015746:	d02c      	beq.n	80157a2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015748:	4b1a      	ldr	r3, [pc, #104]	@ (80157b4 <FLASH_WaitForLastOperation+0xe0>)
 801574a:	699a      	ldr	r2, [r3, #24]
 801574c:	2380      	movs	r3, #128	@ 0x80
 801574e:	00db      	lsls	r3, r3, #3
 8015750:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8015752:	2380      	movs	r3, #128	@ 0x80
 8015754:	00db      	lsls	r3, r3, #3
 8015756:	429a      	cmp	r2, r3
 8015758:	d023      	beq.n	80157a2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801575a:	4b16      	ldr	r3, [pc, #88]	@ (80157b4 <FLASH_WaitForLastOperation+0xe0>)
 801575c:	699a      	ldr	r2, [r3, #24]
 801575e:	2380      	movs	r3, #128	@ 0x80
 8015760:	011b      	lsls	r3, r3, #4
 8015762:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015764:	2380      	movs	r3, #128	@ 0x80
 8015766:	011b      	lsls	r3, r3, #4
 8015768:	429a      	cmp	r2, r3
 801576a:	d01a      	beq.n	80157a2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 801576c:	4b11      	ldr	r3, [pc, #68]	@ (80157b4 <FLASH_WaitForLastOperation+0xe0>)
 801576e:	699a      	ldr	r2, [r3, #24]
 8015770:	2380      	movs	r3, #128	@ 0x80
 8015772:	019b      	lsls	r3, r3, #6
 8015774:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8015776:	2380      	movs	r3, #128	@ 0x80
 8015778:	019b      	lsls	r3, r3, #6
 801577a:	429a      	cmp	r2, r3
 801577c:	d011      	beq.n	80157a2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801577e:	4b0d      	ldr	r3, [pc, #52]	@ (80157b4 <FLASH_WaitForLastOperation+0xe0>)
 8015780:	699a      	ldr	r2, [r3, #24]
 8015782:	2380      	movs	r3, #128	@ 0x80
 8015784:	029b      	lsls	r3, r3, #10
 8015786:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015788:	2380      	movs	r3, #128	@ 0x80
 801578a:	029b      	lsls	r3, r3, #10
 801578c:	429a      	cmp	r2, r3
 801578e:	d008      	beq.n	80157a2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8015790:	4b08      	ldr	r3, [pc, #32]	@ (80157b4 <FLASH_WaitForLastOperation+0xe0>)
 8015792:	699a      	ldr	r2, [r3, #24]
 8015794:	2380      	movs	r3, #128	@ 0x80
 8015796:	025b      	lsls	r3, r3, #9
 8015798:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801579a:	2380      	movs	r3, #128	@ 0x80
 801579c:	025b      	lsls	r3, r3, #9
 801579e:	429a      	cmp	r2, r3
 80157a0:	d103      	bne.n	80157aa <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80157a2:	f000 f809 	bl	80157b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80157a6:	2301      	movs	r3, #1
 80157a8:	e000      	b.n	80157ac <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80157aa:	2300      	movs	r3, #0
}
 80157ac:	0018      	movs	r0, r3
 80157ae:	46bd      	mov	sp, r7
 80157b0:	b004      	add	sp, #16
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	40022000 	.word	0x40022000

080157b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80157be:	2300      	movs	r3, #0
 80157c0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80157c2:	4b49      	ldr	r3, [pc, #292]	@ (80158e8 <FLASH_SetErrorCode+0x130>)
 80157c4:	699a      	ldr	r2, [r3, #24]
 80157c6:	2380      	movs	r3, #128	@ 0x80
 80157c8:	005b      	lsls	r3, r3, #1
 80157ca:	401a      	ands	r2, r3
 80157cc:	2380      	movs	r3, #128	@ 0x80
 80157ce:	005b      	lsls	r3, r3, #1
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d10a      	bne.n	80157ea <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80157d4:	4b45      	ldr	r3, [pc, #276]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 80157d6:	695b      	ldr	r3, [r3, #20]
 80157d8:	2202      	movs	r2, #2
 80157da:	431a      	orrs	r2, r3
 80157dc:	4b43      	ldr	r3, [pc, #268]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 80157de:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2280      	movs	r2, #128	@ 0x80
 80157e4:	0052      	lsls	r2, r2, #1
 80157e6:	4313      	orrs	r3, r2
 80157e8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80157ea:	4b3f      	ldr	r3, [pc, #252]	@ (80158e8 <FLASH_SetErrorCode+0x130>)
 80157ec:	699a      	ldr	r2, [r3, #24]
 80157ee:	2380      	movs	r3, #128	@ 0x80
 80157f0:	009b      	lsls	r3, r3, #2
 80157f2:	401a      	ands	r2, r3
 80157f4:	2380      	movs	r3, #128	@ 0x80
 80157f6:	009b      	lsls	r3, r3, #2
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d10a      	bne.n	8015812 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80157fc:	4b3b      	ldr	r3, [pc, #236]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 80157fe:	695b      	ldr	r3, [r3, #20]
 8015800:	2201      	movs	r2, #1
 8015802:	431a      	orrs	r2, r3
 8015804:	4b39      	ldr	r3, [pc, #228]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 8015806:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	2280      	movs	r2, #128	@ 0x80
 801580c:	0092      	lsls	r2, r2, #2
 801580e:	4313      	orrs	r3, r2
 8015810:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8015812:	4b35      	ldr	r3, [pc, #212]	@ (80158e8 <FLASH_SetErrorCode+0x130>)
 8015814:	699a      	ldr	r2, [r3, #24]
 8015816:	2380      	movs	r3, #128	@ 0x80
 8015818:	00db      	lsls	r3, r3, #3
 801581a:	401a      	ands	r2, r3
 801581c:	2380      	movs	r3, #128	@ 0x80
 801581e:	00db      	lsls	r3, r3, #3
 8015820:	429a      	cmp	r2, r3
 8015822:	d10a      	bne.n	801583a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8015824:	4b31      	ldr	r3, [pc, #196]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 8015826:	695b      	ldr	r3, [r3, #20]
 8015828:	2208      	movs	r2, #8
 801582a:	431a      	orrs	r2, r3
 801582c:	4b2f      	ldr	r3, [pc, #188]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 801582e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2280      	movs	r2, #128	@ 0x80
 8015834:	00d2      	lsls	r2, r2, #3
 8015836:	4313      	orrs	r3, r2
 8015838:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 801583a:	4b2b      	ldr	r3, [pc, #172]	@ (80158e8 <FLASH_SetErrorCode+0x130>)
 801583c:	699a      	ldr	r2, [r3, #24]
 801583e:	2380      	movs	r3, #128	@ 0x80
 8015840:	011b      	lsls	r3, r3, #4
 8015842:	401a      	ands	r2, r3
 8015844:	2380      	movs	r3, #128	@ 0x80
 8015846:	011b      	lsls	r3, r3, #4
 8015848:	429a      	cmp	r2, r3
 801584a:	d10a      	bne.n	8015862 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 801584c:	4b27      	ldr	r3, [pc, #156]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 801584e:	695b      	ldr	r3, [r3, #20]
 8015850:	2204      	movs	r2, #4
 8015852:	431a      	orrs	r2, r3
 8015854:	4b25      	ldr	r3, [pc, #148]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 8015856:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	2280      	movs	r2, #128	@ 0x80
 801585c:	0112      	lsls	r2, r2, #4
 801585e:	4313      	orrs	r3, r2
 8015860:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8015862:	4b21      	ldr	r3, [pc, #132]	@ (80158e8 <FLASH_SetErrorCode+0x130>)
 8015864:	699a      	ldr	r2, [r3, #24]
 8015866:	2380      	movs	r3, #128	@ 0x80
 8015868:	019b      	lsls	r3, r3, #6
 801586a:	401a      	ands	r2, r3
 801586c:	2380      	movs	r3, #128	@ 0x80
 801586e:	019b      	lsls	r3, r3, #6
 8015870:	429a      	cmp	r2, r3
 8015872:	d10a      	bne.n	801588a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8015874:	4b1d      	ldr	r3, [pc, #116]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 8015876:	695b      	ldr	r3, [r3, #20]
 8015878:	2210      	movs	r2, #16
 801587a:	431a      	orrs	r2, r3
 801587c:	4b1b      	ldr	r3, [pc, #108]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 801587e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2280      	movs	r2, #128	@ 0x80
 8015884:	0192      	lsls	r2, r2, #6
 8015886:	4313      	orrs	r3, r2
 8015888:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 801588a:	4b17      	ldr	r3, [pc, #92]	@ (80158e8 <FLASH_SetErrorCode+0x130>)
 801588c:	699a      	ldr	r2, [r3, #24]
 801588e:	2380      	movs	r3, #128	@ 0x80
 8015890:	029b      	lsls	r3, r3, #10
 8015892:	401a      	ands	r2, r3
 8015894:	2380      	movs	r3, #128	@ 0x80
 8015896:	029b      	lsls	r3, r3, #10
 8015898:	429a      	cmp	r2, r3
 801589a:	d109      	bne.n	80158b0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 801589c:	4b13      	ldr	r3, [pc, #76]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 801589e:	695b      	ldr	r3, [r3, #20]
 80158a0:	2220      	movs	r2, #32
 80158a2:	431a      	orrs	r2, r3
 80158a4:	4b11      	ldr	r3, [pc, #68]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 80158a6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	2220      	movs	r2, #32
 80158ac:	4313      	orrs	r3, r2
 80158ae:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80158b0:	4b0d      	ldr	r3, [pc, #52]	@ (80158e8 <FLASH_SetErrorCode+0x130>)
 80158b2:	699a      	ldr	r2, [r3, #24]
 80158b4:	2380      	movs	r3, #128	@ 0x80
 80158b6:	025b      	lsls	r3, r3, #9
 80158b8:	401a      	ands	r2, r3
 80158ba:	2380      	movs	r3, #128	@ 0x80
 80158bc:	025b      	lsls	r3, r3, #9
 80158be:	429a      	cmp	r2, r3
 80158c0:	d10a      	bne.n	80158d8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80158c2:	4b0a      	ldr	r3, [pc, #40]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 80158c4:	695b      	ldr	r3, [r3, #20]
 80158c6:	2240      	movs	r2, #64	@ 0x40
 80158c8:	431a      	orrs	r2, r3
 80158ca:	4b08      	ldr	r3, [pc, #32]	@ (80158ec <FLASH_SetErrorCode+0x134>)
 80158cc:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	2280      	movs	r2, #128	@ 0x80
 80158d2:	0252      	lsls	r2, r2, #9
 80158d4:	4313      	orrs	r3, r2
 80158d6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80158d8:	4b03      	ldr	r3, [pc, #12]	@ (80158e8 <FLASH_SetErrorCode+0x130>)
 80158da:	687a      	ldr	r2, [r7, #4]
 80158dc:	619a      	str	r2, [r3, #24]
}  
 80158de:	46c0      	nop			@ (mov r8, r8)
 80158e0:	46bd      	mov	sp, r7
 80158e2:	b002      	add	sp, #8
 80158e4:	bd80      	pop	{r7, pc}
 80158e6:	46c0      	nop			@ (mov r8, r8)
 80158e8:	40022000 	.word	0x40022000
 80158ec:	2000251c 	.word	0x2000251c

080158f0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b084      	sub	sp, #16
 80158f4:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80158f6:	4b12      	ldr	r3, [pc, #72]	@ (8015940 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	2201      	movs	r2, #1
 80158fc:	4013      	ands	r3, r2
 80158fe:	d019      	beq.n	8015934 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015900:	f3ef 8310 	mrs	r3, PRIMASK
 8015904:	607b      	str	r3, [r7, #4]
  return(result);
 8015906:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8015908:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801590a:	b672      	cpsid	i
}
 801590c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 801590e:	4b0c      	ldr	r3, [pc, #48]	@ (8015940 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015910:	4a0c      	ldr	r2, [pc, #48]	@ (8015944 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8015912:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8015914:	4b0a      	ldr	r3, [pc, #40]	@ (8015940 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015916:	4a0c      	ldr	r2, [pc, #48]	@ (8015948 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8015918:	60da      	str	r2, [r3, #12]
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801591e:	68bb      	ldr	r3, [r7, #8]
 8015920:	f383 8810 	msr	PRIMASK, r3
}
 8015924:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8015926:	4b06      	ldr	r3, [pc, #24]	@ (8015940 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015928:	685b      	ldr	r3, [r3, #4]
 801592a:	2201      	movs	r2, #1
 801592c:	4013      	ands	r3, r2
 801592e:	d001      	beq.n	8015934 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8015930:	2301      	movs	r3, #1
 8015932:	e000      	b.n	8015936 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8015934:	2300      	movs	r3, #0
}
 8015936:	0018      	movs	r0, r3
 8015938:	46bd      	mov	sp, r7
 801593a:	b004      	add	sp, #16
 801593c:	bd80      	pop	{r7, pc}
 801593e:	46c0      	nop			@ (mov r8, r8)
 8015940:	40022000 	.word	0x40022000
 8015944:	89abcdef 	.word	0x89abcdef
 8015948:	02030405 	.word	0x02030405

0801594c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8015950:	4b04      	ldr	r3, [pc, #16]	@ (8015964 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015952:	685a      	ldr	r2, [r3, #4]
 8015954:	4b03      	ldr	r3, [pc, #12]	@ (8015964 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015956:	2101      	movs	r1, #1
 8015958:	430a      	orrs	r2, r1
 801595a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 801595c:	2300      	movs	r3, #0
}
 801595e:	0018      	movs	r0, r3
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}
 8015964:	40022000 	.word	0x40022000

08015968 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8015968:	b5b0      	push	{r4, r5, r7, lr}
 801596a:	b084      	sub	sp, #16
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015970:	250f      	movs	r5, #15
 8015972:	197b      	adds	r3, r7, r5
 8015974:	2200      	movs	r2, #0
 8015976:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015978:	197c      	adds	r4, r7, r5
 801597a:	4b0f      	ldr	r3, [pc, #60]	@ (80159b8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 801597c:	0018      	movs	r0, r3
 801597e:	f7ff fea9 	bl	80156d4 <FLASH_WaitForLastOperation>
 8015982:	0003      	movs	r3, r0
 8015984:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015986:	0029      	movs	r1, r5
 8015988:	187b      	adds	r3, r7, r1
 801598a:	781b      	ldrb	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d10c      	bne.n	80159aa <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015990:	4b0a      	ldr	r3, [pc, #40]	@ (80159bc <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8015992:	2200      	movs	r2, #0
 8015994:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2200      	movs	r2, #0
 801599a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801599c:	187c      	adds	r4, r7, r1
 801599e:	4b06      	ldr	r3, [pc, #24]	@ (80159b8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80159a0:	0018      	movs	r0, r3
 80159a2:	f7ff fe97 	bl	80156d4 <FLASH_WaitForLastOperation>
 80159a6:	0003      	movs	r3, r0
 80159a8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 80159aa:	230f      	movs	r3, #15
 80159ac:	18fb      	adds	r3, r7, r3
 80159ae:	781b      	ldrb	r3, [r3, #0]
}  
 80159b0:	0018      	movs	r0, r3
 80159b2:	46bd      	mov	sp, r7
 80159b4:	b004      	add	sp, #16
 80159b6:	bdb0      	pop	{r4, r5, r7, pc}
 80159b8:	0000c350 	.word	0x0000c350
 80159bc:	2000251c 	.word	0x2000251c

080159c0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80159c0:	b5b0      	push	{r4, r5, r7, lr}
 80159c2:	b086      	sub	sp, #24
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	60f8      	str	r0, [r7, #12]
 80159c8:	60b9      	str	r1, [r7, #8]
 80159ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80159cc:	2317      	movs	r3, #23
 80159ce:	18fb      	adds	r3, r7, r3
 80159d0:	2201      	movs	r2, #1
 80159d2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80159d4:	4b24      	ldr	r3, [pc, #144]	@ (8015a68 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80159d6:	7c1b      	ldrb	r3, [r3, #16]
 80159d8:	2b01      	cmp	r3, #1
 80159da:	d101      	bne.n	80159e0 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80159dc:	2302      	movs	r3, #2
 80159de:	e03e      	b.n	8015a5e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80159e0:	4b21      	ldr	r3, [pc, #132]	@ (8015a68 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80159e2:	2201      	movs	r2, #1
 80159e4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80159e6:	2517      	movs	r5, #23
 80159e8:	197c      	adds	r4, r7, r5
 80159ea:	4b20      	ldr	r3, [pc, #128]	@ (8015a6c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80159ec:	0018      	movs	r0, r3
 80159ee:	f7ff fe71 	bl	80156d4 <FLASH_WaitForLastOperation>
 80159f2:	0003      	movs	r3, r0
 80159f4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80159f6:	197b      	adds	r3, r7, r5
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d129      	bne.n	8015a52 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80159fe:	4b1a      	ldr	r3, [pc, #104]	@ (8015a68 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a00:	2200      	movs	r2, #0
 8015a02:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	2b02      	cmp	r3, #2
 8015a08:	d103      	bne.n	8015a12 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8015a0a:	68bb      	ldr	r3, [r7, #8]
 8015a0c:	687a      	ldr	r2, [r7, #4]
 8015a0e:	601a      	str	r2, [r3, #0]
 8015a10:	e013      	b.n	8015a3a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	2b01      	cmp	r3, #1
 8015a16:	d104      	bne.n	8015a22 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	687a      	ldr	r2, [r7, #4]
 8015a1c:	b292      	uxth	r2, r2
 8015a1e:	801a      	strh	r2, [r3, #0]
 8015a20:	e00b      	b.n	8015a3a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d104      	bne.n	8015a32 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	b2d2      	uxtb	r2, r2
 8015a2e:	701a      	strb	r2, [r3, #0]
 8015a30:	e003      	b.n	8015a3a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8015a32:	2317      	movs	r3, #23
 8015a34:	18fb      	adds	r3, r7, r3
 8015a36:	2201      	movs	r2, #1
 8015a38:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8015a3a:	2217      	movs	r2, #23
 8015a3c:	18bb      	adds	r3, r7, r2
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d106      	bne.n	8015a52 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015a44:	18bc      	adds	r4, r7, r2
 8015a46:	4b09      	ldr	r3, [pc, #36]	@ (8015a6c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015a48:	0018      	movs	r0, r3
 8015a4a:	f7ff fe43 	bl	80156d4 <FLASH_WaitForLastOperation>
 8015a4e:	0003      	movs	r3, r0
 8015a50:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015a52:	4b05      	ldr	r3, [pc, #20]	@ (8015a68 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015a54:	2200      	movs	r2, #0
 8015a56:	741a      	strb	r2, [r3, #16]

  return status;
 8015a58:	2317      	movs	r3, #23
 8015a5a:	18fb      	adds	r3, r7, r3
 8015a5c:	781b      	ldrb	r3, [r3, #0]
}
 8015a5e:	0018      	movs	r0, r3
 8015a60:	46bd      	mov	sp, r7
 8015a62:	b006      	add	sp, #24
 8015a64:	bdb0      	pop	{r4, r5, r7, pc}
 8015a66:	46c0      	nop			@ (mov r8, r8)
 8015a68:	2000251c 	.word	0x2000251c
 8015a6c:	0000c350 	.word	0x0000c350

08015a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b086      	sub	sp, #24
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
 8015a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8015a82:	2300      	movs	r3, #0
 8015a84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8015a86:	e155      	b.n	8015d34 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015a88:	683b      	ldr	r3, [r7, #0]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	2101      	movs	r1, #1
 8015a8e:	697a      	ldr	r2, [r7, #20]
 8015a90:	4091      	lsls	r1, r2
 8015a92:	000a      	movs	r2, r1
 8015a94:	4013      	ands	r3, r2
 8015a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d100      	bne.n	8015aa0 <HAL_GPIO_Init+0x30>
 8015a9e:	e146      	b.n	8015d2e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	685b      	ldr	r3, [r3, #4]
 8015aa4:	2203      	movs	r2, #3
 8015aa6:	4013      	ands	r3, r2
 8015aa8:	2b01      	cmp	r3, #1
 8015aaa:	d005      	beq.n	8015ab8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	685b      	ldr	r3, [r3, #4]
 8015ab0:	2203      	movs	r2, #3
 8015ab2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015ab4:	2b02      	cmp	r3, #2
 8015ab6:	d130      	bne.n	8015b1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	689b      	ldr	r3, [r3, #8]
 8015abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	005b      	lsls	r3, r3, #1
 8015ac2:	2203      	movs	r2, #3
 8015ac4:	409a      	lsls	r2, r3
 8015ac6:	0013      	movs	r3, r2
 8015ac8:	43da      	mvns	r2, r3
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	4013      	ands	r3, r2
 8015ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	68da      	ldr	r2, [r3, #12]
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	005b      	lsls	r3, r3, #1
 8015ad8:	409a      	lsls	r2, r3
 8015ada:	0013      	movs	r3, r2
 8015adc:	693a      	ldr	r2, [r7, #16]
 8015ade:	4313      	orrs	r3, r2
 8015ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	693a      	ldr	r2, [r7, #16]
 8015ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	685b      	ldr	r3, [r3, #4]
 8015aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015aee:	2201      	movs	r2, #1
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	409a      	lsls	r2, r3
 8015af4:	0013      	movs	r3, r2
 8015af6:	43da      	mvns	r2, r3
 8015af8:	693b      	ldr	r3, [r7, #16]
 8015afa:	4013      	ands	r3, r2
 8015afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	091b      	lsrs	r3, r3, #4
 8015b04:	2201      	movs	r2, #1
 8015b06:	401a      	ands	r2, r3
 8015b08:	697b      	ldr	r3, [r7, #20]
 8015b0a:	409a      	lsls	r2, r3
 8015b0c:	0013      	movs	r3, r2
 8015b0e:	693a      	ldr	r2, [r7, #16]
 8015b10:	4313      	orrs	r3, r2
 8015b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	693a      	ldr	r2, [r7, #16]
 8015b18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015b1a:	683b      	ldr	r3, [r7, #0]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	2203      	movs	r2, #3
 8015b20:	4013      	ands	r3, r2
 8015b22:	2b03      	cmp	r3, #3
 8015b24:	d017      	beq.n	8015b56 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	68db      	ldr	r3, [r3, #12]
 8015b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	005b      	lsls	r3, r3, #1
 8015b30:	2203      	movs	r2, #3
 8015b32:	409a      	lsls	r2, r3
 8015b34:	0013      	movs	r3, r2
 8015b36:	43da      	mvns	r2, r3
 8015b38:	693b      	ldr	r3, [r7, #16]
 8015b3a:	4013      	ands	r3, r2
 8015b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	689a      	ldr	r2, [r3, #8]
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	005b      	lsls	r3, r3, #1
 8015b46:	409a      	lsls	r2, r3
 8015b48:	0013      	movs	r3, r2
 8015b4a:	693a      	ldr	r2, [r7, #16]
 8015b4c:	4313      	orrs	r3, r2
 8015b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	693a      	ldr	r2, [r7, #16]
 8015b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	685b      	ldr	r3, [r3, #4]
 8015b5a:	2203      	movs	r2, #3
 8015b5c:	4013      	ands	r3, r2
 8015b5e:	2b02      	cmp	r3, #2
 8015b60:	d123      	bne.n	8015baa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	08da      	lsrs	r2, r3, #3
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	3208      	adds	r2, #8
 8015b6a:	0092      	lsls	r2, r2, #2
 8015b6c:	58d3      	ldr	r3, [r2, r3]
 8015b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	2207      	movs	r2, #7
 8015b74:	4013      	ands	r3, r2
 8015b76:	009b      	lsls	r3, r3, #2
 8015b78:	220f      	movs	r2, #15
 8015b7a:	409a      	lsls	r2, r3
 8015b7c:	0013      	movs	r3, r2
 8015b7e:	43da      	mvns	r2, r3
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	4013      	ands	r3, r2
 8015b84:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	691a      	ldr	r2, [r3, #16]
 8015b8a:	697b      	ldr	r3, [r7, #20]
 8015b8c:	2107      	movs	r1, #7
 8015b8e:	400b      	ands	r3, r1
 8015b90:	009b      	lsls	r3, r3, #2
 8015b92:	409a      	lsls	r2, r3
 8015b94:	0013      	movs	r3, r2
 8015b96:	693a      	ldr	r2, [r7, #16]
 8015b98:	4313      	orrs	r3, r2
 8015b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	08da      	lsrs	r2, r3, #3
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	3208      	adds	r2, #8
 8015ba4:	0092      	lsls	r2, r2, #2
 8015ba6:	6939      	ldr	r1, [r7, #16]
 8015ba8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015bb0:	697b      	ldr	r3, [r7, #20]
 8015bb2:	005b      	lsls	r3, r3, #1
 8015bb4:	2203      	movs	r2, #3
 8015bb6:	409a      	lsls	r2, r3
 8015bb8:	0013      	movs	r3, r2
 8015bba:	43da      	mvns	r2, r3
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	4013      	ands	r3, r2
 8015bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015bc2:	683b      	ldr	r3, [r7, #0]
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	2203      	movs	r2, #3
 8015bc8:	401a      	ands	r2, r3
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	005b      	lsls	r3, r3, #1
 8015bce:	409a      	lsls	r2, r3
 8015bd0:	0013      	movs	r3, r2
 8015bd2:	693a      	ldr	r2, [r7, #16]
 8015bd4:	4313      	orrs	r3, r2
 8015bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	693a      	ldr	r2, [r7, #16]
 8015bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	685a      	ldr	r2, [r3, #4]
 8015be2:	23c0      	movs	r3, #192	@ 0xc0
 8015be4:	029b      	lsls	r3, r3, #10
 8015be6:	4013      	ands	r3, r2
 8015be8:	d100      	bne.n	8015bec <HAL_GPIO_Init+0x17c>
 8015bea:	e0a0      	b.n	8015d2e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015bec:	4b57      	ldr	r3, [pc, #348]	@ (8015d4c <HAL_GPIO_Init+0x2dc>)
 8015bee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015bf0:	4b56      	ldr	r3, [pc, #344]	@ (8015d4c <HAL_GPIO_Init+0x2dc>)
 8015bf2:	2101      	movs	r1, #1
 8015bf4:	430a      	orrs	r2, r1
 8015bf6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8015bf8:	4a55      	ldr	r2, [pc, #340]	@ (8015d50 <HAL_GPIO_Init+0x2e0>)
 8015bfa:	697b      	ldr	r3, [r7, #20]
 8015bfc:	089b      	lsrs	r3, r3, #2
 8015bfe:	3302      	adds	r3, #2
 8015c00:	009b      	lsls	r3, r3, #2
 8015c02:	589b      	ldr	r3, [r3, r2]
 8015c04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8015c06:	697b      	ldr	r3, [r7, #20]
 8015c08:	2203      	movs	r2, #3
 8015c0a:	4013      	ands	r3, r2
 8015c0c:	009b      	lsls	r3, r3, #2
 8015c0e:	220f      	movs	r2, #15
 8015c10:	409a      	lsls	r2, r3
 8015c12:	0013      	movs	r3, r2
 8015c14:	43da      	mvns	r2, r3
 8015c16:	693b      	ldr	r3, [r7, #16]
 8015c18:	4013      	ands	r3, r2
 8015c1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	23a0      	movs	r3, #160	@ 0xa0
 8015c20:	05db      	lsls	r3, r3, #23
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d01f      	beq.n	8015c66 <HAL_GPIO_Init+0x1f6>
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	4a4a      	ldr	r2, [pc, #296]	@ (8015d54 <HAL_GPIO_Init+0x2e4>)
 8015c2a:	4293      	cmp	r3, r2
 8015c2c:	d019      	beq.n	8015c62 <HAL_GPIO_Init+0x1f2>
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	4a49      	ldr	r2, [pc, #292]	@ (8015d58 <HAL_GPIO_Init+0x2e8>)
 8015c32:	4293      	cmp	r3, r2
 8015c34:	d013      	beq.n	8015c5e <HAL_GPIO_Init+0x1ee>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	4a48      	ldr	r2, [pc, #288]	@ (8015d5c <HAL_GPIO_Init+0x2ec>)
 8015c3a:	4293      	cmp	r3, r2
 8015c3c:	d00d      	beq.n	8015c5a <HAL_GPIO_Init+0x1ea>
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	4a47      	ldr	r2, [pc, #284]	@ (8015d60 <HAL_GPIO_Init+0x2f0>)
 8015c42:	4293      	cmp	r3, r2
 8015c44:	d007      	beq.n	8015c56 <HAL_GPIO_Init+0x1e6>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	4a46      	ldr	r2, [pc, #280]	@ (8015d64 <HAL_GPIO_Init+0x2f4>)
 8015c4a:	4293      	cmp	r3, r2
 8015c4c:	d101      	bne.n	8015c52 <HAL_GPIO_Init+0x1e2>
 8015c4e:	2305      	movs	r3, #5
 8015c50:	e00a      	b.n	8015c68 <HAL_GPIO_Init+0x1f8>
 8015c52:	2306      	movs	r3, #6
 8015c54:	e008      	b.n	8015c68 <HAL_GPIO_Init+0x1f8>
 8015c56:	2304      	movs	r3, #4
 8015c58:	e006      	b.n	8015c68 <HAL_GPIO_Init+0x1f8>
 8015c5a:	2303      	movs	r3, #3
 8015c5c:	e004      	b.n	8015c68 <HAL_GPIO_Init+0x1f8>
 8015c5e:	2302      	movs	r3, #2
 8015c60:	e002      	b.n	8015c68 <HAL_GPIO_Init+0x1f8>
 8015c62:	2301      	movs	r3, #1
 8015c64:	e000      	b.n	8015c68 <HAL_GPIO_Init+0x1f8>
 8015c66:	2300      	movs	r3, #0
 8015c68:	697a      	ldr	r2, [r7, #20]
 8015c6a:	2103      	movs	r1, #3
 8015c6c:	400a      	ands	r2, r1
 8015c6e:	0092      	lsls	r2, r2, #2
 8015c70:	4093      	lsls	r3, r2
 8015c72:	693a      	ldr	r2, [r7, #16]
 8015c74:	4313      	orrs	r3, r2
 8015c76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015c78:	4935      	ldr	r1, [pc, #212]	@ (8015d50 <HAL_GPIO_Init+0x2e0>)
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	089b      	lsrs	r3, r3, #2
 8015c7e:	3302      	adds	r3, #2
 8015c80:	009b      	lsls	r3, r3, #2
 8015c82:	693a      	ldr	r2, [r7, #16]
 8015c84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015c86:	4b38      	ldr	r3, [pc, #224]	@ (8015d68 <HAL_GPIO_Init+0x2f8>)
 8015c88:	689b      	ldr	r3, [r3, #8]
 8015c8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	43da      	mvns	r2, r3
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	4013      	ands	r3, r2
 8015c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015c96:	683b      	ldr	r3, [r7, #0]
 8015c98:	685a      	ldr	r2, [r3, #4]
 8015c9a:	2380      	movs	r3, #128	@ 0x80
 8015c9c:	035b      	lsls	r3, r3, #13
 8015c9e:	4013      	ands	r3, r2
 8015ca0:	d003      	beq.n	8015caa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8015ca2:	693a      	ldr	r2, [r7, #16]
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	4313      	orrs	r3, r2
 8015ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8015caa:	4b2f      	ldr	r3, [pc, #188]	@ (8015d68 <HAL_GPIO_Init+0x2f8>)
 8015cac:	693a      	ldr	r2, [r7, #16]
 8015cae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8015cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8015d68 <HAL_GPIO_Init+0x2f8>)
 8015cb2:	68db      	ldr	r3, [r3, #12]
 8015cb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	43da      	mvns	r2, r3
 8015cba:	693b      	ldr	r3, [r7, #16]
 8015cbc:	4013      	ands	r3, r2
 8015cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	685a      	ldr	r2, [r3, #4]
 8015cc4:	2380      	movs	r3, #128	@ 0x80
 8015cc6:	039b      	lsls	r3, r3, #14
 8015cc8:	4013      	ands	r3, r2
 8015cca:	d003      	beq.n	8015cd4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8015ccc:	693a      	ldr	r2, [r7, #16]
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	4313      	orrs	r3, r2
 8015cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8015cd4:	4b24      	ldr	r3, [pc, #144]	@ (8015d68 <HAL_GPIO_Init+0x2f8>)
 8015cd6:	693a      	ldr	r2, [r7, #16]
 8015cd8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8015cda:	4b23      	ldr	r3, [pc, #140]	@ (8015d68 <HAL_GPIO_Init+0x2f8>)
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	43da      	mvns	r2, r3
 8015ce4:	693b      	ldr	r3, [r7, #16]
 8015ce6:	4013      	ands	r3, r2
 8015ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	685a      	ldr	r2, [r3, #4]
 8015cee:	2380      	movs	r3, #128	@ 0x80
 8015cf0:	029b      	lsls	r3, r3, #10
 8015cf2:	4013      	ands	r3, r2
 8015cf4:	d003      	beq.n	8015cfe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8015cf6:	693a      	ldr	r2, [r7, #16]
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	4313      	orrs	r3, r2
 8015cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8015cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8015d68 <HAL_GPIO_Init+0x2f8>)
 8015d00:	693a      	ldr	r2, [r7, #16]
 8015d02:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015d04:	4b18      	ldr	r3, [pc, #96]	@ (8015d68 <HAL_GPIO_Init+0x2f8>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	43da      	mvns	r2, r3
 8015d0e:	693b      	ldr	r3, [r7, #16]
 8015d10:	4013      	ands	r3, r2
 8015d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	685a      	ldr	r2, [r3, #4]
 8015d18:	2380      	movs	r3, #128	@ 0x80
 8015d1a:	025b      	lsls	r3, r3, #9
 8015d1c:	4013      	ands	r3, r2
 8015d1e:	d003      	beq.n	8015d28 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015d20:	693a      	ldr	r2, [r7, #16]
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	4313      	orrs	r3, r2
 8015d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015d28:	4b0f      	ldr	r3, [pc, #60]	@ (8015d68 <HAL_GPIO_Init+0x2f8>)
 8015d2a:	693a      	ldr	r2, [r7, #16]
 8015d2c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	3301      	adds	r3, #1
 8015d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	681a      	ldr	r2, [r3, #0]
 8015d38:	697b      	ldr	r3, [r7, #20]
 8015d3a:	40da      	lsrs	r2, r3
 8015d3c:	1e13      	subs	r3, r2, #0
 8015d3e:	d000      	beq.n	8015d42 <HAL_GPIO_Init+0x2d2>
 8015d40:	e6a2      	b.n	8015a88 <HAL_GPIO_Init+0x18>
  }
}
 8015d42:	46c0      	nop			@ (mov r8, r8)
 8015d44:	46c0      	nop			@ (mov r8, r8)
 8015d46:	46bd      	mov	sp, r7
 8015d48:	b006      	add	sp, #24
 8015d4a:	bd80      	pop	{r7, pc}
 8015d4c:	40021000 	.word	0x40021000
 8015d50:	40010000 	.word	0x40010000
 8015d54:	50000400 	.word	0x50000400
 8015d58:	50000800 	.word	0x50000800
 8015d5c:	50000c00 	.word	0x50000c00
 8015d60:	50001000 	.word	0x50001000
 8015d64:	50001c00 	.word	0x50001c00
 8015d68:	40010400 	.word	0x40010400

08015d6c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b084      	sub	sp, #16
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	000a      	movs	r2, r1
 8015d76:	1cbb      	adds	r3, r7, #2
 8015d78:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	691b      	ldr	r3, [r3, #16]
 8015d7e:	1cba      	adds	r2, r7, #2
 8015d80:	8812      	ldrh	r2, [r2, #0]
 8015d82:	4013      	ands	r3, r2
 8015d84:	d004      	beq.n	8015d90 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015d86:	230f      	movs	r3, #15
 8015d88:	18fb      	adds	r3, r7, r3
 8015d8a:	2201      	movs	r2, #1
 8015d8c:	701a      	strb	r2, [r3, #0]
 8015d8e:	e003      	b.n	8015d98 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015d90:	230f      	movs	r3, #15
 8015d92:	18fb      	adds	r3, r7, r3
 8015d94:	2200      	movs	r2, #0
 8015d96:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8015d98:	230f      	movs	r3, #15
 8015d9a:	18fb      	adds	r3, r7, r3
 8015d9c:	781b      	ldrb	r3, [r3, #0]
}
 8015d9e:	0018      	movs	r0, r3
 8015da0:	46bd      	mov	sp, r7
 8015da2:	b004      	add	sp, #16
 8015da4:	bd80      	pop	{r7, pc}

08015da6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015da6:	b580      	push	{r7, lr}
 8015da8:	b082      	sub	sp, #8
 8015daa:	af00      	add	r7, sp, #0
 8015dac:	6078      	str	r0, [r7, #4]
 8015dae:	0008      	movs	r0, r1
 8015db0:	0011      	movs	r1, r2
 8015db2:	1cbb      	adds	r3, r7, #2
 8015db4:	1c02      	adds	r2, r0, #0
 8015db6:	801a      	strh	r2, [r3, #0]
 8015db8:	1c7b      	adds	r3, r7, #1
 8015dba:	1c0a      	adds	r2, r1, #0
 8015dbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015dbe:	1c7b      	adds	r3, r7, #1
 8015dc0:	781b      	ldrb	r3, [r3, #0]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d004      	beq.n	8015dd0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015dc6:	1cbb      	adds	r3, r7, #2
 8015dc8:	881a      	ldrh	r2, [r3, #0]
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8015dce:	e003      	b.n	8015dd8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015dd0:	1cbb      	adds	r3, r7, #2
 8015dd2:	881a      	ldrh	r2, [r3, #0]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015dd8:	46c0      	nop			@ (mov r8, r8)
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	b002      	add	sp, #8
 8015dde:	bd80      	pop	{r7, pc}

08015de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b082      	sub	sp, #8
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	0002      	movs	r2, r0
 8015de8:	1dbb      	adds	r3, r7, #6
 8015dea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015dec:	4b09      	ldr	r3, [pc, #36]	@ (8015e14 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015dee:	695b      	ldr	r3, [r3, #20]
 8015df0:	1dba      	adds	r2, r7, #6
 8015df2:	8812      	ldrh	r2, [r2, #0]
 8015df4:	4013      	ands	r3, r2
 8015df6:	d008      	beq.n	8015e0a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015df8:	4b06      	ldr	r3, [pc, #24]	@ (8015e14 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015dfa:	1dba      	adds	r2, r7, #6
 8015dfc:	8812      	ldrh	r2, [r2, #0]
 8015dfe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015e00:	1dbb      	adds	r3, r7, #6
 8015e02:	881b      	ldrh	r3, [r3, #0]
 8015e04:	0018      	movs	r0, r3
 8015e06:	f7f7 fa71 	bl	800d2ec <HAL_GPIO_EXTI_Callback>
  }
}
 8015e0a:	46c0      	nop			@ (mov r8, r8)
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	b002      	add	sp, #8
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	46c0      	nop			@ (mov r8, r8)
 8015e14:	40010400 	.word	0x40010400

08015e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b082      	sub	sp, #8
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d101      	bne.n	8015e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015e26:	2301      	movs	r3, #1
 8015e28:	e082      	b.n	8015f30 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2241      	movs	r2, #65	@ 0x41
 8015e2e:	5c9b      	ldrb	r3, [r3, r2]
 8015e30:	b2db      	uxtb	r3, r3
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d107      	bne.n	8015e46 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2240      	movs	r2, #64	@ 0x40
 8015e3a:	2100      	movs	r1, #0
 8015e3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	0018      	movs	r0, r3
 8015e42:	f7f6 fc71 	bl	800c728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2241      	movs	r2, #65	@ 0x41
 8015e4a:	2124      	movs	r1, #36	@ 0x24
 8015e4c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	681a      	ldr	r2, [r3, #0]
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	2101      	movs	r1, #1
 8015e5a:	438a      	bics	r2, r1
 8015e5c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	685a      	ldr	r2, [r3, #4]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	4934      	ldr	r1, [pc, #208]	@ (8015f38 <HAL_I2C_Init+0x120>)
 8015e68:	400a      	ands	r2, r1
 8015e6a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	689a      	ldr	r2, [r3, #8]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	4931      	ldr	r1, [pc, #196]	@ (8015f3c <HAL_I2C_Init+0x124>)
 8015e78:	400a      	ands	r2, r1
 8015e7a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	68db      	ldr	r3, [r3, #12]
 8015e80:	2b01      	cmp	r3, #1
 8015e82:	d108      	bne.n	8015e96 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	689a      	ldr	r2, [r3, #8]
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	2180      	movs	r1, #128	@ 0x80
 8015e8e:	0209      	lsls	r1, r1, #8
 8015e90:	430a      	orrs	r2, r1
 8015e92:	609a      	str	r2, [r3, #8]
 8015e94:	e007      	b.n	8015ea6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	689a      	ldr	r2, [r3, #8]
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	2184      	movs	r1, #132	@ 0x84
 8015ea0:	0209      	lsls	r1, r1, #8
 8015ea2:	430a      	orrs	r2, r1
 8015ea4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	68db      	ldr	r3, [r3, #12]
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	d104      	bne.n	8015eb8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2280      	movs	r2, #128	@ 0x80
 8015eb4:	0112      	lsls	r2, r2, #4
 8015eb6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	685a      	ldr	r2, [r3, #4]
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	491f      	ldr	r1, [pc, #124]	@ (8015f40 <HAL_I2C_Init+0x128>)
 8015ec4:	430a      	orrs	r2, r1
 8015ec6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	68da      	ldr	r2, [r3, #12]
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	491a      	ldr	r1, [pc, #104]	@ (8015f3c <HAL_I2C_Init+0x124>)
 8015ed4:	400a      	ands	r2, r1
 8015ed6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	691a      	ldr	r2, [r3, #16]
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	695b      	ldr	r3, [r3, #20]
 8015ee0:	431a      	orrs	r2, r3
 8015ee2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	699b      	ldr	r3, [r3, #24]
 8015ee8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	430a      	orrs	r2, r1
 8015ef0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	69d9      	ldr	r1, [r3, #28]
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	6a1a      	ldr	r2, [r3, #32]
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	430a      	orrs	r2, r1
 8015f00:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	681a      	ldr	r2, [r3, #0]
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	2101      	movs	r1, #1
 8015f0e:	430a      	orrs	r2, r1
 8015f10:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	2200      	movs	r2, #0
 8015f16:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	2241      	movs	r2, #65	@ 0x41
 8015f1c:	2120      	movs	r1, #32
 8015f1e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2200      	movs	r2, #0
 8015f24:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	2242      	movs	r2, #66	@ 0x42
 8015f2a:	2100      	movs	r1, #0
 8015f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015f2e:	2300      	movs	r3, #0
}
 8015f30:	0018      	movs	r0, r3
 8015f32:	46bd      	mov	sp, r7
 8015f34:	b002      	add	sp, #8
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	f0ffffff 	.word	0xf0ffffff
 8015f3c:	ffff7fff 	.word	0xffff7fff
 8015f40:	02008000 	.word	0x02008000

08015f44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015f44:	b590      	push	{r4, r7, lr}
 8015f46:	b089      	sub	sp, #36	@ 0x24
 8015f48:	af02      	add	r7, sp, #8
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	0008      	movs	r0, r1
 8015f4e:	607a      	str	r2, [r7, #4]
 8015f50:	0019      	movs	r1, r3
 8015f52:	230a      	movs	r3, #10
 8015f54:	18fb      	adds	r3, r7, r3
 8015f56:	1c02      	adds	r2, r0, #0
 8015f58:	801a      	strh	r2, [r3, #0]
 8015f5a:	2308      	movs	r3, #8
 8015f5c:	18fb      	adds	r3, r7, r3
 8015f5e:	1c0a      	adds	r2, r1, #0
 8015f60:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	2241      	movs	r2, #65	@ 0x41
 8015f66:	5c9b      	ldrb	r3, [r3, r2]
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	2b20      	cmp	r3, #32
 8015f6c:	d000      	beq.n	8015f70 <HAL_I2C_Master_Transmit+0x2c>
 8015f6e:	e0e7      	b.n	8016140 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	2240      	movs	r2, #64	@ 0x40
 8015f74:	5c9b      	ldrb	r3, [r3, r2]
 8015f76:	2b01      	cmp	r3, #1
 8015f78:	d101      	bne.n	8015f7e <HAL_I2C_Master_Transmit+0x3a>
 8015f7a:	2302      	movs	r3, #2
 8015f7c:	e0e1      	b.n	8016142 <HAL_I2C_Master_Transmit+0x1fe>
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	2240      	movs	r2, #64	@ 0x40
 8015f82:	2101      	movs	r1, #1
 8015f84:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015f86:	f7fe fc9b 	bl	80148c0 <HAL_GetTick>
 8015f8a:	0003      	movs	r3, r0
 8015f8c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015f8e:	2380      	movs	r3, #128	@ 0x80
 8015f90:	0219      	lsls	r1, r3, #8
 8015f92:	68f8      	ldr	r0, [r7, #12]
 8015f94:	697b      	ldr	r3, [r7, #20]
 8015f96:	9300      	str	r3, [sp, #0]
 8015f98:	2319      	movs	r3, #25
 8015f9a:	2201      	movs	r2, #1
 8015f9c:	f002 fb34 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 8015fa0:	1e03      	subs	r3, r0, #0
 8015fa2:	d001      	beq.n	8015fa8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	e0cc      	b.n	8016142 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	2241      	movs	r2, #65	@ 0x41
 8015fac:	2121      	movs	r1, #33	@ 0x21
 8015fae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	2242      	movs	r2, #66	@ 0x42
 8015fb4:	2110      	movs	r1, #16
 8015fb6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	2200      	movs	r2, #0
 8015fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	687a      	ldr	r2, [r7, #4]
 8015fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	2208      	movs	r2, #8
 8015fc8:	18ba      	adds	r2, r7, r2
 8015fca:	8812      	ldrh	r2, [r2, #0]
 8015fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fd8:	b29b      	uxth	r3, r3
 8015fda:	2bff      	cmp	r3, #255	@ 0xff
 8015fdc:	d911      	bls.n	8016002 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	22ff      	movs	r2, #255	@ 0xff
 8015fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015fe8:	b2da      	uxtb	r2, r3
 8015fea:	2380      	movs	r3, #128	@ 0x80
 8015fec:	045c      	lsls	r4, r3, #17
 8015fee:	230a      	movs	r3, #10
 8015ff0:	18fb      	adds	r3, r7, r3
 8015ff2:	8819      	ldrh	r1, [r3, #0]
 8015ff4:	68f8      	ldr	r0, [r7, #12]
 8015ff6:	4b55      	ldr	r3, [pc, #340]	@ (801614c <HAL_I2C_Master_Transmit+0x208>)
 8015ff8:	9300      	str	r3, [sp, #0]
 8015ffa:	0023      	movs	r3, r4
 8015ffc:	f002 fd56 	bl	8018aac <I2C_TransferConfig>
 8016000:	e075      	b.n	80160ee <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016006:	b29a      	uxth	r2, r3
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016010:	b2da      	uxtb	r2, r3
 8016012:	2380      	movs	r3, #128	@ 0x80
 8016014:	049c      	lsls	r4, r3, #18
 8016016:	230a      	movs	r3, #10
 8016018:	18fb      	adds	r3, r7, r3
 801601a:	8819      	ldrh	r1, [r3, #0]
 801601c:	68f8      	ldr	r0, [r7, #12]
 801601e:	4b4b      	ldr	r3, [pc, #300]	@ (801614c <HAL_I2C_Master_Transmit+0x208>)
 8016020:	9300      	str	r3, [sp, #0]
 8016022:	0023      	movs	r3, r4
 8016024:	f002 fd42 	bl	8018aac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016028:	e061      	b.n	80160ee <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801602a:	697a      	ldr	r2, [r7, #20]
 801602c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	0018      	movs	r0, r3
 8016032:	f002 fb37 	bl	80186a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8016036:	1e03      	subs	r3, r0, #0
 8016038:	d001      	beq.n	801603e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801603a:	2301      	movs	r3, #1
 801603c:	e081      	b.n	8016142 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016042:	781a      	ldrb	r2, [r3, #0]
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801604e:	1c5a      	adds	r2, r3, #1
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016058:	b29b      	uxth	r3, r3
 801605a:	3b01      	subs	r3, #1
 801605c:	b29a      	uxth	r2, r3
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016066:	3b01      	subs	r3, #1
 8016068:	b29a      	uxth	r2, r3
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016072:	b29b      	uxth	r3, r3
 8016074:	2b00      	cmp	r3, #0
 8016076:	d03a      	beq.n	80160ee <HAL_I2C_Master_Transmit+0x1aa>
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801607c:	2b00      	cmp	r3, #0
 801607e:	d136      	bne.n	80160ee <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016082:	68f8      	ldr	r0, [r7, #12]
 8016084:	697b      	ldr	r3, [r7, #20]
 8016086:	9300      	str	r3, [sp, #0]
 8016088:	0013      	movs	r3, r2
 801608a:	2200      	movs	r2, #0
 801608c:	2180      	movs	r1, #128	@ 0x80
 801608e:	f002 fabb 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 8016092:	1e03      	subs	r3, r0, #0
 8016094:	d001      	beq.n	801609a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8016096:	2301      	movs	r3, #1
 8016098:	e053      	b.n	8016142 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801609e:	b29b      	uxth	r3, r3
 80160a0:	2bff      	cmp	r3, #255	@ 0xff
 80160a2:	d911      	bls.n	80160c8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	22ff      	movs	r2, #255	@ 0xff
 80160a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160ae:	b2da      	uxtb	r2, r3
 80160b0:	2380      	movs	r3, #128	@ 0x80
 80160b2:	045c      	lsls	r4, r3, #17
 80160b4:	230a      	movs	r3, #10
 80160b6:	18fb      	adds	r3, r7, r3
 80160b8:	8819      	ldrh	r1, [r3, #0]
 80160ba:	68f8      	ldr	r0, [r7, #12]
 80160bc:	2300      	movs	r3, #0
 80160be:	9300      	str	r3, [sp, #0]
 80160c0:	0023      	movs	r3, r4
 80160c2:	f002 fcf3 	bl	8018aac <I2C_TransferConfig>
 80160c6:	e012      	b.n	80160ee <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160cc:	b29a      	uxth	r2, r3
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160d6:	b2da      	uxtb	r2, r3
 80160d8:	2380      	movs	r3, #128	@ 0x80
 80160da:	049c      	lsls	r4, r3, #18
 80160dc:	230a      	movs	r3, #10
 80160de:	18fb      	adds	r3, r7, r3
 80160e0:	8819      	ldrh	r1, [r3, #0]
 80160e2:	68f8      	ldr	r0, [r7, #12]
 80160e4:	2300      	movs	r3, #0
 80160e6:	9300      	str	r3, [sp, #0]
 80160e8:	0023      	movs	r3, r4
 80160ea:	f002 fcdf 	bl	8018aac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160f2:	b29b      	uxth	r3, r3
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d198      	bne.n	801602a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80160f8:	697a      	ldr	r2, [r7, #20]
 80160fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	0018      	movs	r0, r3
 8016100:	f002 fb16 	bl	8018730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016104:	1e03      	subs	r3, r0, #0
 8016106:	d001      	beq.n	801610c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8016108:	2301      	movs	r3, #1
 801610a:	e01a      	b.n	8016142 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	2220      	movs	r2, #32
 8016112:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	685a      	ldr	r2, [r3, #4]
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	490c      	ldr	r1, [pc, #48]	@ (8016150 <HAL_I2C_Master_Transmit+0x20c>)
 8016120:	400a      	ands	r2, r1
 8016122:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2241      	movs	r2, #65	@ 0x41
 8016128:	2120      	movs	r1, #32
 801612a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	2242      	movs	r2, #66	@ 0x42
 8016130:	2100      	movs	r1, #0
 8016132:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	2240      	movs	r2, #64	@ 0x40
 8016138:	2100      	movs	r1, #0
 801613a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801613c:	2300      	movs	r3, #0
 801613e:	e000      	b.n	8016142 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8016140:	2302      	movs	r3, #2
  }
}
 8016142:	0018      	movs	r0, r3
 8016144:	46bd      	mov	sp, r7
 8016146:	b007      	add	sp, #28
 8016148:	bd90      	pop	{r4, r7, pc}
 801614a:	46c0      	nop			@ (mov r8, r8)
 801614c:	80002000 	.word	0x80002000
 8016150:	fe00e800 	.word	0xfe00e800

08016154 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8016154:	b590      	push	{r4, r7, lr}
 8016156:	b089      	sub	sp, #36	@ 0x24
 8016158:	af02      	add	r7, sp, #8
 801615a:	60f8      	str	r0, [r7, #12]
 801615c:	0008      	movs	r0, r1
 801615e:	607a      	str	r2, [r7, #4]
 8016160:	0019      	movs	r1, r3
 8016162:	230a      	movs	r3, #10
 8016164:	18fb      	adds	r3, r7, r3
 8016166:	1c02      	adds	r2, r0, #0
 8016168:	801a      	strh	r2, [r3, #0]
 801616a:	2308      	movs	r3, #8
 801616c:	18fb      	adds	r3, r7, r3
 801616e:	1c0a      	adds	r2, r1, #0
 8016170:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	2241      	movs	r2, #65	@ 0x41
 8016176:	5c9b      	ldrb	r3, [r3, r2]
 8016178:	b2db      	uxtb	r3, r3
 801617a:	2b20      	cmp	r3, #32
 801617c:	d000      	beq.n	8016180 <HAL_I2C_Master_Receive+0x2c>
 801617e:	e0e8      	b.n	8016352 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	2240      	movs	r2, #64	@ 0x40
 8016184:	5c9b      	ldrb	r3, [r3, r2]
 8016186:	2b01      	cmp	r3, #1
 8016188:	d101      	bne.n	801618e <HAL_I2C_Master_Receive+0x3a>
 801618a:	2302      	movs	r3, #2
 801618c:	e0e2      	b.n	8016354 <HAL_I2C_Master_Receive+0x200>
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	2240      	movs	r2, #64	@ 0x40
 8016192:	2101      	movs	r1, #1
 8016194:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016196:	f7fe fb93 	bl	80148c0 <HAL_GetTick>
 801619a:	0003      	movs	r3, r0
 801619c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801619e:	2380      	movs	r3, #128	@ 0x80
 80161a0:	0219      	lsls	r1, r3, #8
 80161a2:	68f8      	ldr	r0, [r7, #12]
 80161a4:	697b      	ldr	r3, [r7, #20]
 80161a6:	9300      	str	r3, [sp, #0]
 80161a8:	2319      	movs	r3, #25
 80161aa:	2201      	movs	r2, #1
 80161ac:	f002 fa2c 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 80161b0:	1e03      	subs	r3, r0, #0
 80161b2:	d001      	beq.n	80161b8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80161b4:	2301      	movs	r3, #1
 80161b6:	e0cd      	b.n	8016354 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	2241      	movs	r2, #65	@ 0x41
 80161bc:	2122      	movs	r1, #34	@ 0x22
 80161be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	2242      	movs	r2, #66	@ 0x42
 80161c4:	2110      	movs	r1, #16
 80161c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	2200      	movs	r2, #0
 80161cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	687a      	ldr	r2, [r7, #4]
 80161d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	2208      	movs	r2, #8
 80161d8:	18ba      	adds	r2, r7, r2
 80161da:	8812      	ldrh	r2, [r2, #0]
 80161dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	2200      	movs	r2, #0
 80161e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161e8:	b29b      	uxth	r3, r3
 80161ea:	2bff      	cmp	r3, #255	@ 0xff
 80161ec:	d911      	bls.n	8016212 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	22ff      	movs	r2, #255	@ 0xff
 80161f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161f8:	b2da      	uxtb	r2, r3
 80161fa:	2380      	movs	r3, #128	@ 0x80
 80161fc:	045c      	lsls	r4, r3, #17
 80161fe:	230a      	movs	r3, #10
 8016200:	18fb      	adds	r3, r7, r3
 8016202:	8819      	ldrh	r1, [r3, #0]
 8016204:	68f8      	ldr	r0, [r7, #12]
 8016206:	4b55      	ldr	r3, [pc, #340]	@ (801635c <HAL_I2C_Master_Receive+0x208>)
 8016208:	9300      	str	r3, [sp, #0]
 801620a:	0023      	movs	r3, r4
 801620c:	f002 fc4e 	bl	8018aac <I2C_TransferConfig>
 8016210:	e076      	b.n	8016300 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016216:	b29a      	uxth	r2, r3
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016220:	b2da      	uxtb	r2, r3
 8016222:	2380      	movs	r3, #128	@ 0x80
 8016224:	049c      	lsls	r4, r3, #18
 8016226:	230a      	movs	r3, #10
 8016228:	18fb      	adds	r3, r7, r3
 801622a:	8819      	ldrh	r1, [r3, #0]
 801622c:	68f8      	ldr	r0, [r7, #12]
 801622e:	4b4b      	ldr	r3, [pc, #300]	@ (801635c <HAL_I2C_Master_Receive+0x208>)
 8016230:	9300      	str	r3, [sp, #0]
 8016232:	0023      	movs	r3, r4
 8016234:	f002 fc3a 	bl	8018aac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8016238:	e062      	b.n	8016300 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801623a:	697a      	ldr	r2, [r7, #20]
 801623c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	0018      	movs	r0, r3
 8016242:	f002 fab9 	bl	80187b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8016246:	1e03      	subs	r3, r0, #0
 8016248:	d001      	beq.n	801624e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801624a:	2301      	movs	r3, #1
 801624c:	e082      	b.n	8016354 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016258:	b2d2      	uxtb	r2, r2
 801625a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016260:	1c5a      	adds	r2, r3, #1
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801626a:	3b01      	subs	r3, #1
 801626c:	b29a      	uxth	r2, r3
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016276:	b29b      	uxth	r3, r3
 8016278:	3b01      	subs	r3, #1
 801627a:	b29a      	uxth	r2, r3
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016284:	b29b      	uxth	r3, r3
 8016286:	2b00      	cmp	r3, #0
 8016288:	d03a      	beq.n	8016300 <HAL_I2C_Master_Receive+0x1ac>
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801628e:	2b00      	cmp	r3, #0
 8016290:	d136      	bne.n	8016300 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016294:	68f8      	ldr	r0, [r7, #12]
 8016296:	697b      	ldr	r3, [r7, #20]
 8016298:	9300      	str	r3, [sp, #0]
 801629a:	0013      	movs	r3, r2
 801629c:	2200      	movs	r2, #0
 801629e:	2180      	movs	r1, #128	@ 0x80
 80162a0:	f002 f9b2 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 80162a4:	1e03      	subs	r3, r0, #0
 80162a6:	d001      	beq.n	80162ac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80162a8:	2301      	movs	r3, #1
 80162aa:	e053      	b.n	8016354 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162b0:	b29b      	uxth	r3, r3
 80162b2:	2bff      	cmp	r3, #255	@ 0xff
 80162b4:	d911      	bls.n	80162da <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	22ff      	movs	r2, #255	@ 0xff
 80162ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162c0:	b2da      	uxtb	r2, r3
 80162c2:	2380      	movs	r3, #128	@ 0x80
 80162c4:	045c      	lsls	r4, r3, #17
 80162c6:	230a      	movs	r3, #10
 80162c8:	18fb      	adds	r3, r7, r3
 80162ca:	8819      	ldrh	r1, [r3, #0]
 80162cc:	68f8      	ldr	r0, [r7, #12]
 80162ce:	2300      	movs	r3, #0
 80162d0:	9300      	str	r3, [sp, #0]
 80162d2:	0023      	movs	r3, r4
 80162d4:	f002 fbea 	bl	8018aac <I2C_TransferConfig>
 80162d8:	e012      	b.n	8016300 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162de:	b29a      	uxth	r2, r3
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162e8:	b2da      	uxtb	r2, r3
 80162ea:	2380      	movs	r3, #128	@ 0x80
 80162ec:	049c      	lsls	r4, r3, #18
 80162ee:	230a      	movs	r3, #10
 80162f0:	18fb      	adds	r3, r7, r3
 80162f2:	8819      	ldrh	r1, [r3, #0]
 80162f4:	68f8      	ldr	r0, [r7, #12]
 80162f6:	2300      	movs	r3, #0
 80162f8:	9300      	str	r3, [sp, #0]
 80162fa:	0023      	movs	r3, r4
 80162fc:	f002 fbd6 	bl	8018aac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016304:	b29b      	uxth	r3, r3
 8016306:	2b00      	cmp	r3, #0
 8016308:	d197      	bne.n	801623a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801630a:	697a      	ldr	r2, [r7, #20]
 801630c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	0018      	movs	r0, r3
 8016312:	f002 fa0d 	bl	8018730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016316:	1e03      	subs	r3, r0, #0
 8016318:	d001      	beq.n	801631e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 801631a:	2301      	movs	r3, #1
 801631c:	e01a      	b.n	8016354 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	2220      	movs	r2, #32
 8016324:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	685a      	ldr	r2, [r3, #4]
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	490b      	ldr	r1, [pc, #44]	@ (8016360 <HAL_I2C_Master_Receive+0x20c>)
 8016332:	400a      	ands	r2, r1
 8016334:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	2241      	movs	r2, #65	@ 0x41
 801633a:	2120      	movs	r1, #32
 801633c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	2242      	movs	r2, #66	@ 0x42
 8016342:	2100      	movs	r1, #0
 8016344:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	2240      	movs	r2, #64	@ 0x40
 801634a:	2100      	movs	r1, #0
 801634c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801634e:	2300      	movs	r3, #0
 8016350:	e000      	b.n	8016354 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8016352:	2302      	movs	r3, #2
  }
}
 8016354:	0018      	movs	r0, r3
 8016356:	46bd      	mov	sp, r7
 8016358:	b007      	add	sp, #28
 801635a:	bd90      	pop	{r4, r7, pc}
 801635c:	80002400 	.word	0x80002400
 8016360:	fe00e800 	.word	0xfe00e800

08016364 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8016364:	b5b0      	push	{r4, r5, r7, lr}
 8016366:	b088      	sub	sp, #32
 8016368:	af02      	add	r7, sp, #8
 801636a:	60f8      	str	r0, [r7, #12]
 801636c:	0008      	movs	r0, r1
 801636e:	607a      	str	r2, [r7, #4]
 8016370:	0019      	movs	r1, r3
 8016372:	230a      	movs	r3, #10
 8016374:	18fb      	adds	r3, r7, r3
 8016376:	1c02      	adds	r2, r0, #0
 8016378:	801a      	strh	r2, [r3, #0]
 801637a:	2308      	movs	r3, #8
 801637c:	18fb      	adds	r3, r7, r3
 801637e:	1c0a      	adds	r2, r1, #0
 8016380:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	2241      	movs	r2, #65	@ 0x41
 8016386:	5c9b      	ldrb	r3, [r3, r2]
 8016388:	b2db      	uxtb	r3, r3
 801638a:	2b20      	cmp	r3, #32
 801638c:	d000      	beq.n	8016390 <HAL_I2C_Master_Transmit_DMA+0x2c>
 801638e:	e0dd      	b.n	801654c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	699a      	ldr	r2, [r3, #24]
 8016396:	2380      	movs	r3, #128	@ 0x80
 8016398:	021b      	lsls	r3, r3, #8
 801639a:	401a      	ands	r2, r3
 801639c:	2380      	movs	r3, #128	@ 0x80
 801639e:	021b      	lsls	r3, r3, #8
 80163a0:	429a      	cmp	r2, r3
 80163a2:	d101      	bne.n	80163a8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80163a4:	2302      	movs	r3, #2
 80163a6:	e0d2      	b.n	801654e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	2240      	movs	r2, #64	@ 0x40
 80163ac:	5c9b      	ldrb	r3, [r3, r2]
 80163ae:	2b01      	cmp	r3, #1
 80163b0:	d101      	bne.n	80163b6 <HAL_I2C_Master_Transmit_DMA+0x52>
 80163b2:	2302      	movs	r3, #2
 80163b4:	e0cb      	b.n	801654e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	2240      	movs	r2, #64	@ 0x40
 80163ba:	2101      	movs	r1, #1
 80163bc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	2241      	movs	r2, #65	@ 0x41
 80163c2:	2121      	movs	r1, #33	@ 0x21
 80163c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	2242      	movs	r2, #66	@ 0x42
 80163ca:	2110      	movs	r1, #16
 80163cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	2200      	movs	r2, #0
 80163d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	687a      	ldr	r2, [r7, #4]
 80163d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2208      	movs	r2, #8
 80163de:	18ba      	adds	r2, r7, r2
 80163e0:	8812      	ldrh	r2, [r2, #0]
 80163e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	4a5c      	ldr	r2, [pc, #368]	@ (8016558 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80163e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	4a5b      	ldr	r2, [pc, #364]	@ (801655c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80163ee:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163f4:	b29b      	uxth	r3, r3
 80163f6:	2bff      	cmp	r3, #255	@ 0xff
 80163f8:	d906      	bls.n	8016408 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	22ff      	movs	r2, #255	@ 0xff
 80163fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8016400:	2380      	movs	r3, #128	@ 0x80
 8016402:	045b      	lsls	r3, r3, #17
 8016404:	617b      	str	r3, [r7, #20]
 8016406:	e007      	b.n	8016418 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801640c:	b29a      	uxth	r2, r3
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8016412:	2380      	movs	r3, #128	@ 0x80
 8016414:	049b      	lsls	r3, r3, #18
 8016416:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801641c:	2b00      	cmp	r3, #0
 801641e:	d100      	bne.n	8016422 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8016420:	e078      	b.n	8016514 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016426:	2b00      	cmp	r3, #0
 8016428:	d023      	beq.n	8016472 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801642e:	4a4c      	ldr	r2, [pc, #304]	@ (8016560 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8016430:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016436:	4a4b      	ldr	r2, [pc, #300]	@ (8016564 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8016438:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801643e:	2200      	movs	r2, #0
 8016440:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016446:	2200      	movs	r2, #0
 8016448:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801644e:	6879      	ldr	r1, [r7, #4]
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	3328      	adds	r3, #40	@ 0x28
 8016456:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801645c:	2513      	movs	r5, #19
 801645e:	197c      	adds	r4, r7, r5
 8016460:	f7fe ff62 	bl	8015328 <HAL_DMA_Start_IT>
 8016464:	0003      	movs	r3, r0
 8016466:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016468:	197b      	adds	r3, r7, r5
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d13d      	bne.n	80164ec <HAL_I2C_Master_Transmit_DMA+0x188>
 8016470:	e013      	b.n	801649a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	2241      	movs	r2, #65	@ 0x41
 8016476:	2120      	movs	r1, #32
 8016478:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	2242      	movs	r2, #66	@ 0x42
 801647e:	2100      	movs	r1, #0
 8016480:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016486:	2280      	movs	r2, #128	@ 0x80
 8016488:	431a      	orrs	r2, r3
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	2240      	movs	r2, #64	@ 0x40
 8016492:	2100      	movs	r1, #0
 8016494:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8016496:	2301      	movs	r3, #1
 8016498:	e059      	b.n	801654e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801649e:	b2da      	uxtb	r2, r3
 80164a0:	697c      	ldr	r4, [r7, #20]
 80164a2:	230a      	movs	r3, #10
 80164a4:	18fb      	adds	r3, r7, r3
 80164a6:	8819      	ldrh	r1, [r3, #0]
 80164a8:	68f8      	ldr	r0, [r7, #12]
 80164aa:	4b2f      	ldr	r3, [pc, #188]	@ (8016568 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80164ac:	9300      	str	r3, [sp, #0]
 80164ae:	0023      	movs	r3, r4
 80164b0:	f002 fafc 	bl	8018aac <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164b8:	b29a      	uxth	r2, r3
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164be:	1ad3      	subs	r3, r2, r3
 80164c0:	b29a      	uxth	r2, r3
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	2240      	movs	r2, #64	@ 0x40
 80164ca:	2100      	movs	r1, #0
 80164cc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	2110      	movs	r1, #16
 80164d2:	0018      	movs	r0, r3
 80164d4:	f002 fb24 	bl	8018b20 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	681a      	ldr	r2, [r3, #0]
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	2180      	movs	r1, #128	@ 0x80
 80164e4:	01c9      	lsls	r1, r1, #7
 80164e6:	430a      	orrs	r2, r1
 80164e8:	601a      	str	r2, [r3, #0]
 80164ea:	e02d      	b.n	8016548 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	2241      	movs	r2, #65	@ 0x41
 80164f0:	2120      	movs	r1, #32
 80164f2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	2242      	movs	r2, #66	@ 0x42
 80164f8:	2100      	movs	r1, #0
 80164fa:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016500:	2210      	movs	r2, #16
 8016502:	431a      	orrs	r2, r3
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	2240      	movs	r2, #64	@ 0x40
 801650c:	2100      	movs	r1, #0
 801650e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8016510:	2301      	movs	r3, #1
 8016512:	e01c      	b.n	801654e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	4a15      	ldr	r2, [pc, #84]	@ (801656c <HAL_I2C_Master_Transmit_DMA+0x208>)
 8016518:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801651e:	b2da      	uxtb	r2, r3
 8016520:	2380      	movs	r3, #128	@ 0x80
 8016522:	049c      	lsls	r4, r3, #18
 8016524:	230a      	movs	r3, #10
 8016526:	18fb      	adds	r3, r7, r3
 8016528:	8819      	ldrh	r1, [r3, #0]
 801652a:	68f8      	ldr	r0, [r7, #12]
 801652c:	4b0e      	ldr	r3, [pc, #56]	@ (8016568 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801652e:	9300      	str	r3, [sp, #0]
 8016530:	0023      	movs	r3, r4
 8016532:	f002 fabb 	bl	8018aac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2240      	movs	r2, #64	@ 0x40
 801653a:	2100      	movs	r1, #0
 801653c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	2101      	movs	r1, #1
 8016542:	0018      	movs	r0, r3
 8016544:	f002 faec 	bl	8018b20 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016548:	2300      	movs	r3, #0
 801654a:	e000      	b.n	801654e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801654c:	2302      	movs	r3, #2
  }
}
 801654e:	0018      	movs	r0, r3
 8016550:	46bd      	mov	sp, r7
 8016552:	b006      	add	sp, #24
 8016554:	bdb0      	pop	{r4, r5, r7, pc}
 8016556:	46c0      	nop			@ (mov r8, r8)
 8016558:	ffff0000 	.word	0xffff0000
 801655c:	08017295 	.word	0x08017295
 8016560:	08018459 	.word	0x08018459
 8016564:	08018599 	.word	0x08018599
 8016568:	80002000 	.word	0x80002000
 801656c:	08016de9 	.word	0x08016de9

08016570 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8016570:	b5b0      	push	{r4, r5, r7, lr}
 8016572:	b088      	sub	sp, #32
 8016574:	af02      	add	r7, sp, #8
 8016576:	60f8      	str	r0, [r7, #12]
 8016578:	0008      	movs	r0, r1
 801657a:	607a      	str	r2, [r7, #4]
 801657c:	0019      	movs	r1, r3
 801657e:	230a      	movs	r3, #10
 8016580:	18fb      	adds	r3, r7, r3
 8016582:	1c02      	adds	r2, r0, #0
 8016584:	801a      	strh	r2, [r3, #0]
 8016586:	2308      	movs	r3, #8
 8016588:	18fb      	adds	r3, r7, r3
 801658a:	1c0a      	adds	r2, r1, #0
 801658c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	2241      	movs	r2, #65	@ 0x41
 8016592:	5c9b      	ldrb	r3, [r3, r2]
 8016594:	b2db      	uxtb	r3, r3
 8016596:	2b20      	cmp	r3, #32
 8016598:	d000      	beq.n	801659c <HAL_I2C_Master_Receive_DMA+0x2c>
 801659a:	e0dd      	b.n	8016758 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	699a      	ldr	r2, [r3, #24]
 80165a2:	2380      	movs	r3, #128	@ 0x80
 80165a4:	021b      	lsls	r3, r3, #8
 80165a6:	401a      	ands	r2, r3
 80165a8:	2380      	movs	r3, #128	@ 0x80
 80165aa:	021b      	lsls	r3, r3, #8
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d101      	bne.n	80165b4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80165b0:	2302      	movs	r3, #2
 80165b2:	e0d2      	b.n	801675a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	2240      	movs	r2, #64	@ 0x40
 80165b8:	5c9b      	ldrb	r3, [r3, r2]
 80165ba:	2b01      	cmp	r3, #1
 80165bc:	d101      	bne.n	80165c2 <HAL_I2C_Master_Receive_DMA+0x52>
 80165be:	2302      	movs	r3, #2
 80165c0:	e0cb      	b.n	801675a <HAL_I2C_Master_Receive_DMA+0x1ea>
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	2240      	movs	r2, #64	@ 0x40
 80165c6:	2101      	movs	r1, #1
 80165c8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	2241      	movs	r2, #65	@ 0x41
 80165ce:	2122      	movs	r1, #34	@ 0x22
 80165d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	2242      	movs	r2, #66	@ 0x42
 80165d6:	2110      	movs	r1, #16
 80165d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	2200      	movs	r2, #0
 80165de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	687a      	ldr	r2, [r7, #4]
 80165e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	2208      	movs	r2, #8
 80165ea:	18ba      	adds	r2, r7, r2
 80165ec:	8812      	ldrh	r2, [r2, #0]
 80165ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	4a5c      	ldr	r2, [pc, #368]	@ (8016764 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80165f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	4a5b      	ldr	r2, [pc, #364]	@ (8016768 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80165fa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016600:	b29b      	uxth	r3, r3
 8016602:	2bff      	cmp	r3, #255	@ 0xff
 8016604:	d906      	bls.n	8016614 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	22ff      	movs	r2, #255	@ 0xff
 801660a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801660c:	2380      	movs	r3, #128	@ 0x80
 801660e:	045b      	lsls	r3, r3, #17
 8016610:	617b      	str	r3, [r7, #20]
 8016612:	e007      	b.n	8016624 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016618:	b29a      	uxth	r2, r3
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801661e:	2380      	movs	r3, #128	@ 0x80
 8016620:	049b      	lsls	r3, r3, #18
 8016622:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016628:	2b00      	cmp	r3, #0
 801662a:	d100      	bne.n	801662e <HAL_I2C_Master_Receive_DMA+0xbe>
 801662c:	e078      	b.n	8016720 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016632:	2b00      	cmp	r3, #0
 8016634:	d023      	beq.n	801667e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801663a:	4a4c      	ldr	r2, [pc, #304]	@ (801676c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 801663c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016642:	4a4b      	ldr	r2, [pc, #300]	@ (8016770 <HAL_I2C_Master_Receive_DMA+0x200>)
 8016644:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801664a:	2200      	movs	r2, #0
 801664c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016652:	2200      	movs	r2, #0
 8016654:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	3324      	adds	r3, #36	@ 0x24
 8016660:	0019      	movs	r1, r3
 8016662:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016668:	2513      	movs	r5, #19
 801666a:	197c      	adds	r4, r7, r5
 801666c:	f7fe fe5c 	bl	8015328 <HAL_DMA_Start_IT>
 8016670:	0003      	movs	r3, r0
 8016672:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016674:	197b      	adds	r3, r7, r5
 8016676:	781b      	ldrb	r3, [r3, #0]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d13d      	bne.n	80166f8 <HAL_I2C_Master_Receive_DMA+0x188>
 801667c:	e013      	b.n	80166a6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	2241      	movs	r2, #65	@ 0x41
 8016682:	2120      	movs	r1, #32
 8016684:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2242      	movs	r2, #66	@ 0x42
 801668a:	2100      	movs	r1, #0
 801668c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016692:	2280      	movs	r2, #128	@ 0x80
 8016694:	431a      	orrs	r2, r3
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	2240      	movs	r2, #64	@ 0x40
 801669e:	2100      	movs	r1, #0
 80166a0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80166a2:	2301      	movs	r3, #1
 80166a4:	e059      	b.n	801675a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166aa:	b2da      	uxtb	r2, r3
 80166ac:	697c      	ldr	r4, [r7, #20]
 80166ae:	230a      	movs	r3, #10
 80166b0:	18fb      	adds	r3, r7, r3
 80166b2:	8819      	ldrh	r1, [r3, #0]
 80166b4:	68f8      	ldr	r0, [r7, #12]
 80166b6:	4b2f      	ldr	r3, [pc, #188]	@ (8016774 <HAL_I2C_Master_Receive_DMA+0x204>)
 80166b8:	9300      	str	r3, [sp, #0]
 80166ba:	0023      	movs	r3, r4
 80166bc:	f002 f9f6 	bl	8018aac <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166c4:	b29a      	uxth	r2, r3
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166ca:	1ad3      	subs	r3, r2, r3
 80166cc:	b29a      	uxth	r2, r3
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	2240      	movs	r2, #64	@ 0x40
 80166d6:	2100      	movs	r1, #0
 80166d8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	2110      	movs	r1, #16
 80166de:	0018      	movs	r0, r3
 80166e0:	f002 fa1e 	bl	8018b20 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	681a      	ldr	r2, [r3, #0]
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	2180      	movs	r1, #128	@ 0x80
 80166f0:	0209      	lsls	r1, r1, #8
 80166f2:	430a      	orrs	r2, r1
 80166f4:	601a      	str	r2, [r3, #0]
 80166f6:	e02d      	b.n	8016754 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	2241      	movs	r2, #65	@ 0x41
 80166fc:	2120      	movs	r1, #32
 80166fe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	2242      	movs	r2, #66	@ 0x42
 8016704:	2100      	movs	r1, #0
 8016706:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801670c:	2210      	movs	r2, #16
 801670e:	431a      	orrs	r2, r3
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	2240      	movs	r2, #64	@ 0x40
 8016718:	2100      	movs	r1, #0
 801671a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801671c:	2301      	movs	r3, #1
 801671e:	e01c      	b.n	801675a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	4a15      	ldr	r2, [pc, #84]	@ (8016778 <HAL_I2C_Master_Receive_DMA+0x208>)
 8016724:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801672a:	b2da      	uxtb	r2, r3
 801672c:	2380      	movs	r3, #128	@ 0x80
 801672e:	049c      	lsls	r4, r3, #18
 8016730:	230a      	movs	r3, #10
 8016732:	18fb      	adds	r3, r7, r3
 8016734:	8819      	ldrh	r1, [r3, #0]
 8016736:	68f8      	ldr	r0, [r7, #12]
 8016738:	4b0e      	ldr	r3, [pc, #56]	@ (8016774 <HAL_I2C_Master_Receive_DMA+0x204>)
 801673a:	9300      	str	r3, [sp, #0]
 801673c:	0023      	movs	r3, r4
 801673e:	f002 f9b5 	bl	8018aac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	2240      	movs	r2, #64	@ 0x40
 8016746:	2100      	movs	r1, #0
 8016748:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	2101      	movs	r1, #1
 801674e:	0018      	movs	r0, r3
 8016750:	f002 f9e6 	bl	8018b20 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016754:	2300      	movs	r3, #0
 8016756:	e000      	b.n	801675a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016758:	2302      	movs	r3, #2
  }
}
 801675a:	0018      	movs	r0, r3
 801675c:	46bd      	mov	sp, r7
 801675e:	b006      	add	sp, #24
 8016760:	bdb0      	pop	{r4, r5, r7, pc}
 8016762:	46c0      	nop			@ (mov r8, r8)
 8016764:	ffff0000 	.word	0xffff0000
 8016768:	08017295 	.word	0x08017295
 801676c:	080184f9 	.word	0x080184f9
 8016770:	08018599 	.word	0x08018599
 8016774:	80002400 	.word	0x80002400
 8016778:	08016de9 	.word	0x08016de9

0801677c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801677c:	b590      	push	{r4, r7, lr}
 801677e:	b089      	sub	sp, #36	@ 0x24
 8016780:	af02      	add	r7, sp, #8
 8016782:	60f8      	str	r0, [r7, #12]
 8016784:	000c      	movs	r4, r1
 8016786:	0010      	movs	r0, r2
 8016788:	0019      	movs	r1, r3
 801678a:	230a      	movs	r3, #10
 801678c:	18fb      	adds	r3, r7, r3
 801678e:	1c22      	adds	r2, r4, #0
 8016790:	801a      	strh	r2, [r3, #0]
 8016792:	2308      	movs	r3, #8
 8016794:	18fb      	adds	r3, r7, r3
 8016796:	1c02      	adds	r2, r0, #0
 8016798:	801a      	strh	r2, [r3, #0]
 801679a:	1dbb      	adds	r3, r7, #6
 801679c:	1c0a      	adds	r2, r1, #0
 801679e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	2241      	movs	r2, #65	@ 0x41
 80167a4:	5c9b      	ldrb	r3, [r3, r2]
 80167a6:	b2db      	uxtb	r3, r3
 80167a8:	2b20      	cmp	r3, #32
 80167aa:	d000      	beq.n	80167ae <HAL_I2C_Mem_Write+0x32>
 80167ac:	e10c      	b.n	80169c8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80167ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d004      	beq.n	80167be <HAL_I2C_Mem_Write+0x42>
 80167b4:	232c      	movs	r3, #44	@ 0x2c
 80167b6:	18fb      	adds	r3, r7, r3
 80167b8:	881b      	ldrh	r3, [r3, #0]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d105      	bne.n	80167ca <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	2280      	movs	r2, #128	@ 0x80
 80167c2:	0092      	lsls	r2, r2, #2
 80167c4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80167c6:	2301      	movs	r3, #1
 80167c8:	e0ff      	b.n	80169ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	2240      	movs	r2, #64	@ 0x40
 80167ce:	5c9b      	ldrb	r3, [r3, r2]
 80167d0:	2b01      	cmp	r3, #1
 80167d2:	d101      	bne.n	80167d8 <HAL_I2C_Mem_Write+0x5c>
 80167d4:	2302      	movs	r3, #2
 80167d6:	e0f8      	b.n	80169ca <HAL_I2C_Mem_Write+0x24e>
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	2240      	movs	r2, #64	@ 0x40
 80167dc:	2101      	movs	r1, #1
 80167de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80167e0:	f7fe f86e 	bl	80148c0 <HAL_GetTick>
 80167e4:	0003      	movs	r3, r0
 80167e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80167e8:	2380      	movs	r3, #128	@ 0x80
 80167ea:	0219      	lsls	r1, r3, #8
 80167ec:	68f8      	ldr	r0, [r7, #12]
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	9300      	str	r3, [sp, #0]
 80167f2:	2319      	movs	r3, #25
 80167f4:	2201      	movs	r2, #1
 80167f6:	f001 ff07 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 80167fa:	1e03      	subs	r3, r0, #0
 80167fc:	d001      	beq.n	8016802 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80167fe:	2301      	movs	r3, #1
 8016800:	e0e3      	b.n	80169ca <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	2241      	movs	r2, #65	@ 0x41
 8016806:	2121      	movs	r1, #33	@ 0x21
 8016808:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	2242      	movs	r2, #66	@ 0x42
 801680e:	2140      	movs	r1, #64	@ 0x40
 8016810:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	2200      	movs	r2, #0
 8016816:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801681c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	222c      	movs	r2, #44	@ 0x2c
 8016822:	18ba      	adds	r2, r7, r2
 8016824:	8812      	ldrh	r2, [r2, #0]
 8016826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	2200      	movs	r2, #0
 801682c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801682e:	1dbb      	adds	r3, r7, #6
 8016830:	881c      	ldrh	r4, [r3, #0]
 8016832:	2308      	movs	r3, #8
 8016834:	18fb      	adds	r3, r7, r3
 8016836:	881a      	ldrh	r2, [r3, #0]
 8016838:	230a      	movs	r3, #10
 801683a:	18fb      	adds	r3, r7, r3
 801683c:	8819      	ldrh	r1, [r3, #0]
 801683e:	68f8      	ldr	r0, [r7, #12]
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	9301      	str	r3, [sp, #4]
 8016844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016846:	9300      	str	r3, [sp, #0]
 8016848:	0023      	movs	r3, r4
 801684a:	f001 f855 	bl	80178f8 <I2C_RequestMemoryWrite>
 801684e:	1e03      	subs	r3, r0, #0
 8016850:	d005      	beq.n	801685e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	2240      	movs	r2, #64	@ 0x40
 8016856:	2100      	movs	r1, #0
 8016858:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801685a:	2301      	movs	r3, #1
 801685c:	e0b5      	b.n	80169ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016862:	b29b      	uxth	r3, r3
 8016864:	2bff      	cmp	r3, #255	@ 0xff
 8016866:	d911      	bls.n	801688c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	22ff      	movs	r2, #255	@ 0xff
 801686c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016872:	b2da      	uxtb	r2, r3
 8016874:	2380      	movs	r3, #128	@ 0x80
 8016876:	045c      	lsls	r4, r3, #17
 8016878:	230a      	movs	r3, #10
 801687a:	18fb      	adds	r3, r7, r3
 801687c:	8819      	ldrh	r1, [r3, #0]
 801687e:	68f8      	ldr	r0, [r7, #12]
 8016880:	2300      	movs	r3, #0
 8016882:	9300      	str	r3, [sp, #0]
 8016884:	0023      	movs	r3, r4
 8016886:	f002 f911 	bl	8018aac <I2C_TransferConfig>
 801688a:	e012      	b.n	80168b2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016890:	b29a      	uxth	r2, r3
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801689a:	b2da      	uxtb	r2, r3
 801689c:	2380      	movs	r3, #128	@ 0x80
 801689e:	049c      	lsls	r4, r3, #18
 80168a0:	230a      	movs	r3, #10
 80168a2:	18fb      	adds	r3, r7, r3
 80168a4:	8819      	ldrh	r1, [r3, #0]
 80168a6:	68f8      	ldr	r0, [r7, #12]
 80168a8:	2300      	movs	r3, #0
 80168aa:	9300      	str	r3, [sp, #0]
 80168ac:	0023      	movs	r3, r4
 80168ae:	f002 f8fd 	bl	8018aac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80168b2:	697a      	ldr	r2, [r7, #20]
 80168b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	0018      	movs	r0, r3
 80168ba:	f001 fef3 	bl	80186a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80168be:	1e03      	subs	r3, r0, #0
 80168c0:	d001      	beq.n	80168c6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80168c2:	2301      	movs	r3, #1
 80168c4:	e081      	b.n	80169ca <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168ca:	781a      	ldrb	r2, [r3, #0]
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168d6:	1c5a      	adds	r2, r3, #1
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168e0:	b29b      	uxth	r3, r3
 80168e2:	3b01      	subs	r3, #1
 80168e4:	b29a      	uxth	r2, r3
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168ee:	3b01      	subs	r3, #1
 80168f0:	b29a      	uxth	r2, r3
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168fa:	b29b      	uxth	r3, r3
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d03a      	beq.n	8016976 <HAL_I2C_Mem_Write+0x1fa>
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016904:	2b00      	cmp	r3, #0
 8016906:	d136      	bne.n	8016976 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801690a:	68f8      	ldr	r0, [r7, #12]
 801690c:	697b      	ldr	r3, [r7, #20]
 801690e:	9300      	str	r3, [sp, #0]
 8016910:	0013      	movs	r3, r2
 8016912:	2200      	movs	r2, #0
 8016914:	2180      	movs	r1, #128	@ 0x80
 8016916:	f001 fe77 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 801691a:	1e03      	subs	r3, r0, #0
 801691c:	d001      	beq.n	8016922 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 801691e:	2301      	movs	r3, #1
 8016920:	e053      	b.n	80169ca <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016926:	b29b      	uxth	r3, r3
 8016928:	2bff      	cmp	r3, #255	@ 0xff
 801692a:	d911      	bls.n	8016950 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	22ff      	movs	r2, #255	@ 0xff
 8016930:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016936:	b2da      	uxtb	r2, r3
 8016938:	2380      	movs	r3, #128	@ 0x80
 801693a:	045c      	lsls	r4, r3, #17
 801693c:	230a      	movs	r3, #10
 801693e:	18fb      	adds	r3, r7, r3
 8016940:	8819      	ldrh	r1, [r3, #0]
 8016942:	68f8      	ldr	r0, [r7, #12]
 8016944:	2300      	movs	r3, #0
 8016946:	9300      	str	r3, [sp, #0]
 8016948:	0023      	movs	r3, r4
 801694a:	f002 f8af 	bl	8018aac <I2C_TransferConfig>
 801694e:	e012      	b.n	8016976 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016954:	b29a      	uxth	r2, r3
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801695e:	b2da      	uxtb	r2, r3
 8016960:	2380      	movs	r3, #128	@ 0x80
 8016962:	049c      	lsls	r4, r3, #18
 8016964:	230a      	movs	r3, #10
 8016966:	18fb      	adds	r3, r7, r3
 8016968:	8819      	ldrh	r1, [r3, #0]
 801696a:	68f8      	ldr	r0, [r7, #12]
 801696c:	2300      	movs	r3, #0
 801696e:	9300      	str	r3, [sp, #0]
 8016970:	0023      	movs	r3, r4
 8016972:	f002 f89b 	bl	8018aac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801697a:	b29b      	uxth	r3, r3
 801697c:	2b00      	cmp	r3, #0
 801697e:	d198      	bne.n	80168b2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016980:	697a      	ldr	r2, [r7, #20]
 8016982:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	0018      	movs	r0, r3
 8016988:	f001 fed2 	bl	8018730 <I2C_WaitOnSTOPFlagUntilTimeout>
 801698c:	1e03      	subs	r3, r0, #0
 801698e:	d001      	beq.n	8016994 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8016990:	2301      	movs	r3, #1
 8016992:	e01a      	b.n	80169ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	2220      	movs	r2, #32
 801699a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	685a      	ldr	r2, [r3, #4]
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	490b      	ldr	r1, [pc, #44]	@ (80169d4 <HAL_I2C_Mem_Write+0x258>)
 80169a8:	400a      	ands	r2, r1
 80169aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	2241      	movs	r2, #65	@ 0x41
 80169b0:	2120      	movs	r1, #32
 80169b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2242      	movs	r2, #66	@ 0x42
 80169b8:	2100      	movs	r1, #0
 80169ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2240      	movs	r2, #64	@ 0x40
 80169c0:	2100      	movs	r1, #0
 80169c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80169c4:	2300      	movs	r3, #0
 80169c6:	e000      	b.n	80169ca <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80169c8:	2302      	movs	r3, #2
  }
}
 80169ca:	0018      	movs	r0, r3
 80169cc:	46bd      	mov	sp, r7
 80169ce:	b007      	add	sp, #28
 80169d0:	bd90      	pop	{r4, r7, pc}
 80169d2:	46c0      	nop			@ (mov r8, r8)
 80169d4:	fe00e800 	.word	0xfe00e800

080169d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80169d8:	b590      	push	{r4, r7, lr}
 80169da:	b089      	sub	sp, #36	@ 0x24
 80169dc:	af02      	add	r7, sp, #8
 80169de:	60f8      	str	r0, [r7, #12]
 80169e0:	000c      	movs	r4, r1
 80169e2:	0010      	movs	r0, r2
 80169e4:	0019      	movs	r1, r3
 80169e6:	230a      	movs	r3, #10
 80169e8:	18fb      	adds	r3, r7, r3
 80169ea:	1c22      	adds	r2, r4, #0
 80169ec:	801a      	strh	r2, [r3, #0]
 80169ee:	2308      	movs	r3, #8
 80169f0:	18fb      	adds	r3, r7, r3
 80169f2:	1c02      	adds	r2, r0, #0
 80169f4:	801a      	strh	r2, [r3, #0]
 80169f6:	1dbb      	adds	r3, r7, #6
 80169f8:	1c0a      	adds	r2, r1, #0
 80169fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	2241      	movs	r2, #65	@ 0x41
 8016a00:	5c9b      	ldrb	r3, [r3, r2]
 8016a02:	b2db      	uxtb	r3, r3
 8016a04:	2b20      	cmp	r3, #32
 8016a06:	d000      	beq.n	8016a0a <HAL_I2C_Mem_Read+0x32>
 8016a08:	e110      	b.n	8016c2c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8016a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d004      	beq.n	8016a1a <HAL_I2C_Mem_Read+0x42>
 8016a10:	232c      	movs	r3, #44	@ 0x2c
 8016a12:	18fb      	adds	r3, r7, r3
 8016a14:	881b      	ldrh	r3, [r3, #0]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d105      	bne.n	8016a26 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	2280      	movs	r2, #128	@ 0x80
 8016a1e:	0092      	lsls	r2, r2, #2
 8016a20:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016a22:	2301      	movs	r3, #1
 8016a24:	e103      	b.n	8016c2e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	2240      	movs	r2, #64	@ 0x40
 8016a2a:	5c9b      	ldrb	r3, [r3, r2]
 8016a2c:	2b01      	cmp	r3, #1
 8016a2e:	d101      	bne.n	8016a34 <HAL_I2C_Mem_Read+0x5c>
 8016a30:	2302      	movs	r3, #2
 8016a32:	e0fc      	b.n	8016c2e <HAL_I2C_Mem_Read+0x256>
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	2240      	movs	r2, #64	@ 0x40
 8016a38:	2101      	movs	r1, #1
 8016a3a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016a3c:	f7fd ff40 	bl	80148c0 <HAL_GetTick>
 8016a40:	0003      	movs	r3, r0
 8016a42:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016a44:	2380      	movs	r3, #128	@ 0x80
 8016a46:	0219      	lsls	r1, r3, #8
 8016a48:	68f8      	ldr	r0, [r7, #12]
 8016a4a:	697b      	ldr	r3, [r7, #20]
 8016a4c:	9300      	str	r3, [sp, #0]
 8016a4e:	2319      	movs	r3, #25
 8016a50:	2201      	movs	r2, #1
 8016a52:	f001 fdd9 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 8016a56:	1e03      	subs	r3, r0, #0
 8016a58:	d001      	beq.n	8016a5e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	e0e7      	b.n	8016c2e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	2241      	movs	r2, #65	@ 0x41
 8016a62:	2122      	movs	r1, #34	@ 0x22
 8016a64:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	2242      	movs	r2, #66	@ 0x42
 8016a6a:	2140      	movs	r1, #64	@ 0x40
 8016a6c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	2200      	movs	r2, #0
 8016a72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016a78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	222c      	movs	r2, #44	@ 0x2c
 8016a7e:	18ba      	adds	r2, r7, r2
 8016a80:	8812      	ldrh	r2, [r2, #0]
 8016a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	2200      	movs	r2, #0
 8016a88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016a8a:	1dbb      	adds	r3, r7, #6
 8016a8c:	881c      	ldrh	r4, [r3, #0]
 8016a8e:	2308      	movs	r3, #8
 8016a90:	18fb      	adds	r3, r7, r3
 8016a92:	881a      	ldrh	r2, [r3, #0]
 8016a94:	230a      	movs	r3, #10
 8016a96:	18fb      	adds	r3, r7, r3
 8016a98:	8819      	ldrh	r1, [r3, #0]
 8016a9a:	68f8      	ldr	r0, [r7, #12]
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	9301      	str	r3, [sp, #4]
 8016aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016aa2:	9300      	str	r3, [sp, #0]
 8016aa4:	0023      	movs	r3, r4
 8016aa6:	f000 ff8b 	bl	80179c0 <I2C_RequestMemoryRead>
 8016aaa:	1e03      	subs	r3, r0, #0
 8016aac:	d005      	beq.n	8016aba <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	2240      	movs	r2, #64	@ 0x40
 8016ab2:	2100      	movs	r1, #0
 8016ab4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	e0b9      	b.n	8016c2e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016abe:	b29b      	uxth	r3, r3
 8016ac0:	2bff      	cmp	r3, #255	@ 0xff
 8016ac2:	d911      	bls.n	8016ae8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	22ff      	movs	r2, #255	@ 0xff
 8016ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ace:	b2da      	uxtb	r2, r3
 8016ad0:	2380      	movs	r3, #128	@ 0x80
 8016ad2:	045c      	lsls	r4, r3, #17
 8016ad4:	230a      	movs	r3, #10
 8016ad6:	18fb      	adds	r3, r7, r3
 8016ad8:	8819      	ldrh	r1, [r3, #0]
 8016ada:	68f8      	ldr	r0, [r7, #12]
 8016adc:	4b56      	ldr	r3, [pc, #344]	@ (8016c38 <HAL_I2C_Mem_Read+0x260>)
 8016ade:	9300      	str	r3, [sp, #0]
 8016ae0:	0023      	movs	r3, r4
 8016ae2:	f001 ffe3 	bl	8018aac <I2C_TransferConfig>
 8016ae6:	e012      	b.n	8016b0e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016aec:	b29a      	uxth	r2, r3
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016af6:	b2da      	uxtb	r2, r3
 8016af8:	2380      	movs	r3, #128	@ 0x80
 8016afa:	049c      	lsls	r4, r3, #18
 8016afc:	230a      	movs	r3, #10
 8016afe:	18fb      	adds	r3, r7, r3
 8016b00:	8819      	ldrh	r1, [r3, #0]
 8016b02:	68f8      	ldr	r0, [r7, #12]
 8016b04:	4b4c      	ldr	r3, [pc, #304]	@ (8016c38 <HAL_I2C_Mem_Read+0x260>)
 8016b06:	9300      	str	r3, [sp, #0]
 8016b08:	0023      	movs	r3, r4
 8016b0a:	f001 ffcf 	bl	8018aac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b10:	68f8      	ldr	r0, [r7, #12]
 8016b12:	697b      	ldr	r3, [r7, #20]
 8016b14:	9300      	str	r3, [sp, #0]
 8016b16:	0013      	movs	r3, r2
 8016b18:	2200      	movs	r2, #0
 8016b1a:	2104      	movs	r1, #4
 8016b1c:	f001 fd74 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 8016b20:	1e03      	subs	r3, r0, #0
 8016b22:	d001      	beq.n	8016b28 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8016b24:	2301      	movs	r3, #1
 8016b26:	e082      	b.n	8016c2e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b32:	b2d2      	uxtb	r2, r2
 8016b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b3a:	1c5a      	adds	r2, r3, #1
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b44:	3b01      	subs	r3, #1
 8016b46:	b29a      	uxth	r2, r3
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b50:	b29b      	uxth	r3, r3
 8016b52:	3b01      	subs	r3, #1
 8016b54:	b29a      	uxth	r2, r3
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d03a      	beq.n	8016bda <HAL_I2C_Mem_Read+0x202>
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d136      	bne.n	8016bda <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b6e:	68f8      	ldr	r0, [r7, #12]
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	9300      	str	r3, [sp, #0]
 8016b74:	0013      	movs	r3, r2
 8016b76:	2200      	movs	r2, #0
 8016b78:	2180      	movs	r1, #128	@ 0x80
 8016b7a:	f001 fd45 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 8016b7e:	1e03      	subs	r3, r0, #0
 8016b80:	d001      	beq.n	8016b86 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8016b82:	2301      	movs	r3, #1
 8016b84:	e053      	b.n	8016c2e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	2bff      	cmp	r3, #255	@ 0xff
 8016b8e:	d911      	bls.n	8016bb4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	22ff      	movs	r2, #255	@ 0xff
 8016b94:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b9a:	b2da      	uxtb	r2, r3
 8016b9c:	2380      	movs	r3, #128	@ 0x80
 8016b9e:	045c      	lsls	r4, r3, #17
 8016ba0:	230a      	movs	r3, #10
 8016ba2:	18fb      	adds	r3, r7, r3
 8016ba4:	8819      	ldrh	r1, [r3, #0]
 8016ba6:	68f8      	ldr	r0, [r7, #12]
 8016ba8:	2300      	movs	r3, #0
 8016baa:	9300      	str	r3, [sp, #0]
 8016bac:	0023      	movs	r3, r4
 8016bae:	f001 ff7d 	bl	8018aac <I2C_TransferConfig>
 8016bb2:	e012      	b.n	8016bda <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bb8:	b29a      	uxth	r2, r3
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bc2:	b2da      	uxtb	r2, r3
 8016bc4:	2380      	movs	r3, #128	@ 0x80
 8016bc6:	049c      	lsls	r4, r3, #18
 8016bc8:	230a      	movs	r3, #10
 8016bca:	18fb      	adds	r3, r7, r3
 8016bcc:	8819      	ldrh	r1, [r3, #0]
 8016bce:	68f8      	ldr	r0, [r7, #12]
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	9300      	str	r3, [sp, #0]
 8016bd4:	0023      	movs	r3, r4
 8016bd6:	f001 ff69 	bl	8018aac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bde:	b29b      	uxth	r3, r3
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d194      	bne.n	8016b0e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016be4:	697a      	ldr	r2, [r7, #20]
 8016be6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	0018      	movs	r0, r3
 8016bec:	f001 fda0 	bl	8018730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016bf0:	1e03      	subs	r3, r0, #0
 8016bf2:	d001      	beq.n	8016bf8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	e01a      	b.n	8016c2e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	2220      	movs	r2, #32
 8016bfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	685a      	ldr	r2, [r3, #4]
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	490c      	ldr	r1, [pc, #48]	@ (8016c3c <HAL_I2C_Mem_Read+0x264>)
 8016c0c:	400a      	ands	r2, r1
 8016c0e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	2241      	movs	r2, #65	@ 0x41
 8016c14:	2120      	movs	r1, #32
 8016c16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	2242      	movs	r2, #66	@ 0x42
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	2240      	movs	r2, #64	@ 0x40
 8016c24:	2100      	movs	r1, #0
 8016c26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	e000      	b.n	8016c2e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8016c2c:	2302      	movs	r3, #2
  }
}
 8016c2e:	0018      	movs	r0, r3
 8016c30:	46bd      	mov	sp, r7
 8016c32:	b007      	add	sp, #28
 8016c34:	bd90      	pop	{r4, r7, pc}
 8016c36:	46c0      	nop			@ (mov r8, r8)
 8016c38:	80002400 	.word	0x80002400
 8016c3c:	fe00e800 	.word	0xfe00e800

08016c40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b084      	sub	sp, #16
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	699b      	ldr	r3, [r3, #24]
 8016c4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d005      	beq.n	8016c6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c64:	68ba      	ldr	r2, [r7, #8]
 8016c66:	68f9      	ldr	r1, [r7, #12]
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	4798      	blx	r3
  }
}
 8016c6c:	46c0      	nop			@ (mov r8, r8)
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	b004      	add	sp, #16
 8016c72:	bd80      	pop	{r7, pc}

08016c74 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b086      	sub	sp, #24
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	699b      	ldr	r3, [r3, #24]
 8016c82:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016c8c:	697b      	ldr	r3, [r7, #20]
 8016c8e:	0a1b      	lsrs	r3, r3, #8
 8016c90:	001a      	movs	r2, r3
 8016c92:	2301      	movs	r3, #1
 8016c94:	4013      	ands	r3, r2
 8016c96:	d010      	beq.n	8016cba <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	09db      	lsrs	r3, r3, #7
 8016c9c:	001a      	movs	r2, r3
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016ca2:	d00a      	beq.n	8016cba <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016ca8:	2201      	movs	r2, #1
 8016caa:	431a      	orrs	r2, r3
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	2280      	movs	r2, #128	@ 0x80
 8016cb6:	0052      	lsls	r2, r2, #1
 8016cb8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016cba:	697b      	ldr	r3, [r7, #20]
 8016cbc:	0a9b      	lsrs	r3, r3, #10
 8016cbe:	001a      	movs	r2, r3
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	4013      	ands	r3, r2
 8016cc4:	d010      	beq.n	8016ce8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	09db      	lsrs	r3, r3, #7
 8016cca:	001a      	movs	r2, r3
 8016ccc:	2301      	movs	r3, #1
 8016cce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016cd0:	d00a      	beq.n	8016ce8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016cd6:	2208      	movs	r2, #8
 8016cd8:	431a      	orrs	r2, r3
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	2280      	movs	r2, #128	@ 0x80
 8016ce4:	00d2      	lsls	r2, r2, #3
 8016ce6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	0a5b      	lsrs	r3, r3, #9
 8016cec:	001a      	movs	r2, r3
 8016cee:	2301      	movs	r3, #1
 8016cf0:	4013      	ands	r3, r2
 8016cf2:	d010      	beq.n	8016d16 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	09db      	lsrs	r3, r3, #7
 8016cf8:	001a      	movs	r2, r3
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016cfe:	d00a      	beq.n	8016d16 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d04:	2202      	movs	r2, #2
 8016d06:	431a      	orrs	r2, r3
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	2280      	movs	r2, #128	@ 0x80
 8016d12:	0092      	lsls	r2, r2, #2
 8016d14:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d1a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	220b      	movs	r2, #11
 8016d20:	4013      	ands	r3, r2
 8016d22:	d005      	beq.n	8016d30 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8016d24:	68fa      	ldr	r2, [r7, #12]
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	0011      	movs	r1, r2
 8016d2a:	0018      	movs	r0, r3
 8016d2c:	f001 fa46 	bl	80181bc <I2C_ITError>
  }
}
 8016d30:	46c0      	nop			@ (mov r8, r8)
 8016d32:	46bd      	mov	sp, r7
 8016d34:	b006      	add	sp, #24
 8016d36:	bd80      	pop	{r7, pc}

08016d38 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b082      	sub	sp, #8
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016d40:	46c0      	nop			@ (mov r8, r8)
 8016d42:	46bd      	mov	sp, r7
 8016d44:	b002      	add	sp, #8
 8016d46:	bd80      	pop	{r7, pc}

08016d48 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b082      	sub	sp, #8
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016d50:	46c0      	nop			@ (mov r8, r8)
 8016d52:	46bd      	mov	sp, r7
 8016d54:	b002      	add	sp, #8
 8016d56:	bd80      	pop	{r7, pc}

08016d58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016d60:	46c0      	nop			@ (mov r8, r8)
 8016d62:	46bd      	mov	sp, r7
 8016d64:	b002      	add	sp, #8
 8016d66:	bd80      	pop	{r7, pc}

08016d68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b082      	sub	sp, #8
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016d70:	46c0      	nop			@ (mov r8, r8)
 8016d72:	46bd      	mov	sp, r7
 8016d74:	b002      	add	sp, #8
 8016d76:	bd80      	pop	{r7, pc}

08016d78 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b082      	sub	sp, #8
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
 8016d80:	0008      	movs	r0, r1
 8016d82:	0011      	movs	r1, r2
 8016d84:	1cfb      	adds	r3, r7, #3
 8016d86:	1c02      	adds	r2, r0, #0
 8016d88:	701a      	strb	r2, [r3, #0]
 8016d8a:	003b      	movs	r3, r7
 8016d8c:	1c0a      	adds	r2, r1, #0
 8016d8e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016d90:	46c0      	nop			@ (mov r8, r8)
 8016d92:	46bd      	mov	sp, r7
 8016d94:	b002      	add	sp, #8
 8016d96:	bd80      	pop	{r7, pc}

08016d98 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b082      	sub	sp, #8
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016da0:	46c0      	nop			@ (mov r8, r8)
 8016da2:	46bd      	mov	sp, r7
 8016da4:	b002      	add	sp, #8
 8016da6:	bd80      	pop	{r7, pc}

08016da8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b082      	sub	sp, #8
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016db0:	46c0      	nop			@ (mov r8, r8)
 8016db2:	46bd      	mov	sp, r7
 8016db4:	b002      	add	sp, #8
 8016db6:	bd80      	pop	{r7, pc}

08016db8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b082      	sub	sp, #8
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8016dc0:	46c0      	nop			@ (mov r8, r8)
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	b002      	add	sp, #8
 8016dc6:	bd80      	pop	{r7, pc}

08016dc8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016dd0:	46c0      	nop			@ (mov r8, r8)
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	b002      	add	sp, #8
 8016dd6:	bd80      	pop	{r7, pc}

08016dd8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b082      	sub	sp, #8
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016de0:	46c0      	nop			@ (mov r8, r8)
 8016de2:	46bd      	mov	sp, r7
 8016de4:	b002      	add	sp, #8
 8016de6:	bd80      	pop	{r7, pc}

08016de8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016de8:	b590      	push	{r4, r7, lr}
 8016dea:	b089      	sub	sp, #36	@ 0x24
 8016dec:	af02      	add	r7, sp, #8
 8016dee:	60f8      	str	r0, [r7, #12]
 8016df0:	60b9      	str	r1, [r7, #8]
 8016df2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	2240      	movs	r2, #64	@ 0x40
 8016dfc:	5c9b      	ldrb	r3, [r3, r2]
 8016dfe:	2b01      	cmp	r3, #1
 8016e00:	d101      	bne.n	8016e06 <I2C_Master_ISR_IT+0x1e>
 8016e02:	2302      	movs	r3, #2
 8016e04:	e12b      	b.n	801705e <I2C_Master_ISR_IT+0x276>
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	2240      	movs	r2, #64	@ 0x40
 8016e0a:	2101      	movs	r1, #1
 8016e0c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016e0e:	697b      	ldr	r3, [r7, #20]
 8016e10:	091b      	lsrs	r3, r3, #4
 8016e12:	001a      	movs	r2, r3
 8016e14:	2301      	movs	r3, #1
 8016e16:	4013      	ands	r3, r2
 8016e18:	d014      	beq.n	8016e44 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	091b      	lsrs	r3, r3, #4
 8016e1e:	001a      	movs	r2, r3
 8016e20:	2301      	movs	r3, #1
 8016e22:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016e24:	d00e      	beq.n	8016e44 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	2210      	movs	r2, #16
 8016e2c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e32:	2204      	movs	r2, #4
 8016e34:	431a      	orrs	r2, r3
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	0018      	movs	r0, r3
 8016e3e:	f001 fae8 	bl	8018412 <I2C_Flush_TXDR>
 8016e42:	e0f5      	b.n	8017030 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016e44:	697b      	ldr	r3, [r7, #20]
 8016e46:	089b      	lsrs	r3, r3, #2
 8016e48:	001a      	movs	r2, r3
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	4013      	ands	r3, r2
 8016e4e:	d023      	beq.n	8016e98 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	089b      	lsrs	r3, r3, #2
 8016e54:	001a      	movs	r2, r3
 8016e56:	2301      	movs	r3, #1
 8016e58:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016e5a:	d01d      	beq.n	8016e98 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	2204      	movs	r2, #4
 8016e60:	4393      	bics	r3, r2
 8016e62:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e6e:	b2d2      	uxtb	r2, r2
 8016e70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e76:	1c5a      	adds	r2, r3, #1
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016e80:	3b01      	subs	r3, #1
 8016e82:	b29a      	uxth	r2, r3
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016e8c:	b29b      	uxth	r3, r3
 8016e8e:	3b01      	subs	r3, #1
 8016e90:	b29a      	uxth	r2, r3
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016e96:	e0cb      	b.n	8017030 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016e98:	697b      	ldr	r3, [r7, #20]
 8016e9a:	085b      	lsrs	r3, r3, #1
 8016e9c:	001a      	movs	r2, r3
 8016e9e:	2301      	movs	r3, #1
 8016ea0:	4013      	ands	r3, r2
 8016ea2:	d01e      	beq.n	8016ee2 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	085b      	lsrs	r3, r3, #1
 8016ea8:	001a      	movs	r2, r3
 8016eaa:	2301      	movs	r3, #1
 8016eac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016eae:	d018      	beq.n	8016ee2 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016eb4:	781a      	ldrb	r2, [r3, #0]
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ec0:	1c5a      	adds	r2, r3, #1
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016eca:	3b01      	subs	r3, #1
 8016ecc:	b29a      	uxth	r2, r3
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ed6:	b29b      	uxth	r3, r3
 8016ed8:	3b01      	subs	r3, #1
 8016eda:	b29a      	uxth	r2, r3
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016ee0:	e0a6      	b.n	8017030 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016ee2:	697b      	ldr	r3, [r7, #20]
 8016ee4:	09db      	lsrs	r3, r3, #7
 8016ee6:	001a      	movs	r2, r3
 8016ee8:	2301      	movs	r3, #1
 8016eea:	4013      	ands	r3, r2
 8016eec:	d100      	bne.n	8016ef0 <I2C_Master_ISR_IT+0x108>
 8016eee:	e06b      	b.n	8016fc8 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	099b      	lsrs	r3, r3, #6
 8016ef4:	001a      	movs	r2, r3
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016efa:	d065      	beq.n	8016fc8 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f00:	b29b      	uxth	r3, r3
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d04a      	beq.n	8016f9c <I2C_Master_ISR_IT+0x1b4>
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d146      	bne.n	8016f9c <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	685b      	ldr	r3, [r3, #4]
 8016f14:	b29a      	uxth	r2, r3
 8016f16:	2112      	movs	r1, #18
 8016f18:	187b      	adds	r3, r7, r1
 8016f1a:	0592      	lsls	r2, r2, #22
 8016f1c:	0d92      	lsrs	r2, r2, #22
 8016f1e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f24:	b29b      	uxth	r3, r3
 8016f26:	2bff      	cmp	r3, #255	@ 0xff
 8016f28:	d910      	bls.n	8016f4c <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	22ff      	movs	r2, #255	@ 0xff
 8016f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f34:	b2da      	uxtb	r2, r3
 8016f36:	2380      	movs	r3, #128	@ 0x80
 8016f38:	045c      	lsls	r4, r3, #17
 8016f3a:	187b      	adds	r3, r7, r1
 8016f3c:	8819      	ldrh	r1, [r3, #0]
 8016f3e:	68f8      	ldr	r0, [r7, #12]
 8016f40:	2300      	movs	r3, #0
 8016f42:	9300      	str	r3, [sp, #0]
 8016f44:	0023      	movs	r3, r4
 8016f46:	f001 fdb1 	bl	8018aac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f4a:	e03c      	b.n	8016fc6 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f50:	b29a      	uxth	r2, r3
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016f5a:	4a43      	ldr	r2, [pc, #268]	@ (8017068 <I2C_Master_ISR_IT+0x280>)
 8016f5c:	4293      	cmp	r3, r2
 8016f5e:	d00e      	beq.n	8016f7e <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f64:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016f6a:	2312      	movs	r3, #18
 8016f6c:	18fb      	adds	r3, r7, r3
 8016f6e:	8819      	ldrh	r1, [r3, #0]
 8016f70:	68f8      	ldr	r0, [r7, #12]
 8016f72:	2300      	movs	r3, #0
 8016f74:	9300      	str	r3, [sp, #0]
 8016f76:	0023      	movs	r3, r4
 8016f78:	f001 fd98 	bl	8018aac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f7c:	e023      	b.n	8016fc6 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f82:	b2da      	uxtb	r2, r3
 8016f84:	2380      	movs	r3, #128	@ 0x80
 8016f86:	049c      	lsls	r4, r3, #18
 8016f88:	2312      	movs	r3, #18
 8016f8a:	18fb      	adds	r3, r7, r3
 8016f8c:	8819      	ldrh	r1, [r3, #0]
 8016f8e:	68f8      	ldr	r0, [r7, #12]
 8016f90:	2300      	movs	r3, #0
 8016f92:	9300      	str	r3, [sp, #0]
 8016f94:	0023      	movs	r3, r4
 8016f96:	f001 fd89 	bl	8018aac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f9a:	e014      	b.n	8016fc6 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	685a      	ldr	r2, [r3, #4]
 8016fa2:	2380      	movs	r3, #128	@ 0x80
 8016fa4:	049b      	lsls	r3, r3, #18
 8016fa6:	401a      	ands	r2, r3
 8016fa8:	2380      	movs	r3, #128	@ 0x80
 8016faa:	049b      	lsls	r3, r3, #18
 8016fac:	429a      	cmp	r2, r3
 8016fae:	d004      	beq.n	8016fba <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	0018      	movs	r0, r3
 8016fb4:	f000 fe0a 	bl	8017bcc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016fb8:	e03a      	b.n	8017030 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	2140      	movs	r1, #64	@ 0x40
 8016fbe:	0018      	movs	r0, r3
 8016fc0:	f001 f8fc 	bl	80181bc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016fc4:	e034      	b.n	8017030 <I2C_Master_ISR_IT+0x248>
 8016fc6:	e033      	b.n	8017030 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016fc8:	697b      	ldr	r3, [r7, #20]
 8016fca:	099b      	lsrs	r3, r3, #6
 8016fcc:	001a      	movs	r2, r3
 8016fce:	2301      	movs	r3, #1
 8016fd0:	4013      	ands	r3, r2
 8016fd2:	d02d      	beq.n	8017030 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	099b      	lsrs	r3, r3, #6
 8016fd8:	001a      	movs	r2, r3
 8016fda:	2301      	movs	r3, #1
 8016fdc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016fde:	d027      	beq.n	8017030 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d11d      	bne.n	8017026 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	685a      	ldr	r2, [r3, #4]
 8016ff0:	2380      	movs	r3, #128	@ 0x80
 8016ff2:	049b      	lsls	r3, r3, #18
 8016ff4:	401a      	ands	r2, r3
 8016ff6:	2380      	movs	r3, #128	@ 0x80
 8016ff8:	049b      	lsls	r3, r3, #18
 8016ffa:	429a      	cmp	r2, r3
 8016ffc:	d018      	beq.n	8017030 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017002:	4a19      	ldr	r2, [pc, #100]	@ (8017068 <I2C_Master_ISR_IT+0x280>)
 8017004:	4293      	cmp	r3, r2
 8017006:	d109      	bne.n	801701c <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	685a      	ldr	r2, [r3, #4]
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	2180      	movs	r1, #128	@ 0x80
 8017014:	01c9      	lsls	r1, r1, #7
 8017016:	430a      	orrs	r2, r1
 8017018:	605a      	str	r2, [r3, #4]
 801701a:	e009      	b.n	8017030 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	0018      	movs	r0, r3
 8017020:	f000 fdd4 	bl	8017bcc <I2C_ITMasterSeqCplt>
 8017024:	e004      	b.n	8017030 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	2140      	movs	r1, #64	@ 0x40
 801702a:	0018      	movs	r0, r3
 801702c:	f001 f8c6 	bl	80181bc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	095b      	lsrs	r3, r3, #5
 8017034:	001a      	movs	r2, r3
 8017036:	2301      	movs	r3, #1
 8017038:	4013      	ands	r3, r2
 801703a:	d00b      	beq.n	8017054 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	095b      	lsrs	r3, r3, #5
 8017040:	001a      	movs	r2, r3
 8017042:	2301      	movs	r3, #1
 8017044:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017046:	d005      	beq.n	8017054 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8017048:	697a      	ldr	r2, [r7, #20]
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	0011      	movs	r1, r2
 801704e:	0018      	movs	r0, r3
 8017050:	f000 fe64 	bl	8017d1c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	2240      	movs	r2, #64	@ 0x40
 8017058:	2100      	movs	r1, #0
 801705a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801705c:	2300      	movs	r3, #0
}
 801705e:	0018      	movs	r0, r3
 8017060:	46bd      	mov	sp, r7
 8017062:	b007      	add	sp, #28
 8017064:	bd90      	pop	{r4, r7, pc}
 8017066:	46c0      	nop			@ (mov r8, r8)
 8017068:	ffff0000 	.word	0xffff0000

0801706c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b086      	sub	sp, #24
 8017070:	af00      	add	r7, sp, #0
 8017072:	60f8      	str	r0, [r7, #12]
 8017074:	60b9      	str	r1, [r7, #8]
 8017076:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801707c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	2240      	movs	r2, #64	@ 0x40
 8017086:	5c9b      	ldrb	r3, [r3, r2]
 8017088:	2b01      	cmp	r3, #1
 801708a:	d101      	bne.n	8017090 <I2C_Slave_ISR_IT+0x24>
 801708c:	2302      	movs	r3, #2
 801708e:	e0fa      	b.n	8017286 <I2C_Slave_ISR_IT+0x21a>
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	2240      	movs	r2, #64	@ 0x40
 8017094:	2101      	movs	r1, #1
 8017096:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017098:	693b      	ldr	r3, [r7, #16]
 801709a:	095b      	lsrs	r3, r3, #5
 801709c:	001a      	movs	r2, r3
 801709e:	2301      	movs	r3, #1
 80170a0:	4013      	ands	r3, r2
 80170a2:	d00b      	beq.n	80170bc <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	095b      	lsrs	r3, r3, #5
 80170a8:	001a      	movs	r2, r3
 80170aa:	2301      	movs	r3, #1
 80170ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80170ae:	d005      	beq.n	80170bc <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80170b0:	693a      	ldr	r2, [r7, #16]
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	0011      	movs	r1, r2
 80170b6:	0018      	movs	r0, r3
 80170b8:	f000 ff02 	bl	8017ec0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80170bc:	693b      	ldr	r3, [r7, #16]
 80170be:	091b      	lsrs	r3, r3, #4
 80170c0:	001a      	movs	r2, r3
 80170c2:	2301      	movs	r3, #1
 80170c4:	4013      	ands	r3, r2
 80170c6:	d054      	beq.n	8017172 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	091b      	lsrs	r3, r3, #4
 80170cc:	001a      	movs	r2, r3
 80170ce:	2301      	movs	r3, #1
 80170d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80170d2:	d04e      	beq.n	8017172 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80170d8:	b29b      	uxth	r3, r3
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d12d      	bne.n	801713a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	2241      	movs	r2, #65	@ 0x41
 80170e2:	5c9b      	ldrb	r3, [r3, r2]
 80170e4:	b2db      	uxtb	r3, r3
 80170e6:	2b28      	cmp	r3, #40	@ 0x28
 80170e8:	d10b      	bne.n	8017102 <I2C_Slave_ISR_IT+0x96>
 80170ea:	697a      	ldr	r2, [r7, #20]
 80170ec:	2380      	movs	r3, #128	@ 0x80
 80170ee:	049b      	lsls	r3, r3, #18
 80170f0:	429a      	cmp	r2, r3
 80170f2:	d106      	bne.n	8017102 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80170f4:	693a      	ldr	r2, [r7, #16]
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	0011      	movs	r1, r2
 80170fa:	0018      	movs	r0, r3
 80170fc:	f001 f804 	bl	8018108 <I2C_ITListenCplt>
 8017100:	e036      	b.n	8017170 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	2241      	movs	r2, #65	@ 0x41
 8017106:	5c9b      	ldrb	r3, [r3, r2]
 8017108:	b2db      	uxtb	r3, r3
 801710a:	2b29      	cmp	r3, #41	@ 0x29
 801710c:	d110      	bne.n	8017130 <I2C_Slave_ISR_IT+0xc4>
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	4a5f      	ldr	r2, [pc, #380]	@ (8017290 <I2C_Slave_ISR_IT+0x224>)
 8017112:	4293      	cmp	r3, r2
 8017114:	d00c      	beq.n	8017130 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	2210      	movs	r2, #16
 801711c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	0018      	movs	r0, r3
 8017122:	f001 f976 	bl	8018412 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	0018      	movs	r0, r3
 801712a:	f000 fd91 	bl	8017c50 <I2C_ITSlaveSeqCplt>
 801712e:	e01f      	b.n	8017170 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	2210      	movs	r2, #16
 8017136:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8017138:	e09d      	b.n	8017276 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	2210      	movs	r2, #16
 8017140:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017146:	2204      	movs	r2, #4
 8017148:	431a      	orrs	r2, r3
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801714e:	697b      	ldr	r3, [r7, #20]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d005      	beq.n	8017160 <I2C_Slave_ISR_IT+0xf4>
 8017154:	697a      	ldr	r2, [r7, #20]
 8017156:	2380      	movs	r3, #128	@ 0x80
 8017158:	045b      	lsls	r3, r3, #17
 801715a:	429a      	cmp	r2, r3
 801715c:	d000      	beq.n	8017160 <I2C_Slave_ISR_IT+0xf4>
 801715e:	e08a      	b.n	8017276 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	0011      	movs	r1, r2
 8017168:	0018      	movs	r0, r3
 801716a:	f001 f827 	bl	80181bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801716e:	e082      	b.n	8017276 <I2C_Slave_ISR_IT+0x20a>
 8017170:	e081      	b.n	8017276 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	089b      	lsrs	r3, r3, #2
 8017176:	001a      	movs	r2, r3
 8017178:	2301      	movs	r3, #1
 801717a:	4013      	ands	r3, r2
 801717c:	d031      	beq.n	80171e2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	089b      	lsrs	r3, r3, #2
 8017182:	001a      	movs	r2, r3
 8017184:	2301      	movs	r3, #1
 8017186:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8017188:	d02b      	beq.n	80171e2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801718e:	b29b      	uxth	r3, r3
 8017190:	2b00      	cmp	r3, #0
 8017192:	d018      	beq.n	80171c6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801719e:	b2d2      	uxtb	r2, r2
 80171a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171a6:	1c5a      	adds	r2, r3, #1
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80171b0:	3b01      	subs	r3, #1
 80171b2:	b29a      	uxth	r2, r3
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171bc:	b29b      	uxth	r3, r3
 80171be:	3b01      	subs	r3, #1
 80171c0:	b29a      	uxth	r2, r3
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171ca:	b29b      	uxth	r3, r3
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d154      	bne.n	801727a <I2C_Slave_ISR_IT+0x20e>
 80171d0:	697b      	ldr	r3, [r7, #20]
 80171d2:	4a2f      	ldr	r2, [pc, #188]	@ (8017290 <I2C_Slave_ISR_IT+0x224>)
 80171d4:	4293      	cmp	r3, r2
 80171d6:	d050      	beq.n	801727a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	0018      	movs	r0, r3
 80171dc:	f000 fd38 	bl	8017c50 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80171e0:	e04b      	b.n	801727a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	08db      	lsrs	r3, r3, #3
 80171e6:	001a      	movs	r2, r3
 80171e8:	2301      	movs	r3, #1
 80171ea:	4013      	ands	r3, r2
 80171ec:	d00c      	beq.n	8017208 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	08db      	lsrs	r3, r3, #3
 80171f2:	001a      	movs	r2, r3
 80171f4:	2301      	movs	r3, #1
 80171f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80171f8:	d006      	beq.n	8017208 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80171fa:	693a      	ldr	r2, [r7, #16]
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	0011      	movs	r1, r2
 8017200:	0018      	movs	r0, r3
 8017202:	f000 fc3f 	bl	8017a84 <I2C_ITAddrCplt>
 8017206:	e039      	b.n	801727c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017208:	693b      	ldr	r3, [r7, #16]
 801720a:	085b      	lsrs	r3, r3, #1
 801720c:	001a      	movs	r2, r3
 801720e:	2301      	movs	r3, #1
 8017210:	4013      	ands	r3, r2
 8017212:	d033      	beq.n	801727c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	085b      	lsrs	r3, r3, #1
 8017218:	001a      	movs	r2, r3
 801721a:	2301      	movs	r3, #1
 801721c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801721e:	d02d      	beq.n	801727c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017224:	b29b      	uxth	r3, r3
 8017226:	2b00      	cmp	r3, #0
 8017228:	d018      	beq.n	801725c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801722e:	781a      	ldrb	r2, [r3, #0]
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801723a:	1c5a      	adds	r2, r3, #1
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017244:	b29b      	uxth	r3, r3
 8017246:	3b01      	subs	r3, #1
 8017248:	b29a      	uxth	r2, r3
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017252:	3b01      	subs	r3, #1
 8017254:	b29a      	uxth	r2, r3
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	851a      	strh	r2, [r3, #40]	@ 0x28
 801725a:	e00f      	b.n	801727c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801725c:	697a      	ldr	r2, [r7, #20]
 801725e:	2380      	movs	r3, #128	@ 0x80
 8017260:	045b      	lsls	r3, r3, #17
 8017262:	429a      	cmp	r2, r3
 8017264:	d002      	beq.n	801726c <I2C_Slave_ISR_IT+0x200>
 8017266:	697b      	ldr	r3, [r7, #20]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d107      	bne.n	801727c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	0018      	movs	r0, r3
 8017270:	f000 fcee 	bl	8017c50 <I2C_ITSlaveSeqCplt>
 8017274:	e002      	b.n	801727c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8017276:	46c0      	nop			@ (mov r8, r8)
 8017278:	e000      	b.n	801727c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 801727a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	2240      	movs	r2, #64	@ 0x40
 8017280:	2100      	movs	r1, #0
 8017282:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017284:	2300      	movs	r3, #0
}
 8017286:	0018      	movs	r0, r3
 8017288:	46bd      	mov	sp, r7
 801728a:	b006      	add	sp, #24
 801728c:	bd80      	pop	{r7, pc}
 801728e:	46c0      	nop			@ (mov r8, r8)
 8017290:	ffff0000 	.word	0xffff0000

08017294 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8017294:	b590      	push	{r4, r7, lr}
 8017296:	b089      	sub	sp, #36	@ 0x24
 8017298:	af02      	add	r7, sp, #8
 801729a:	60f8      	str	r0, [r7, #12]
 801729c:	60b9      	str	r1, [r7, #8]
 801729e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	2240      	movs	r2, #64	@ 0x40
 80172a4:	5c9b      	ldrb	r3, [r3, r2]
 80172a6:	2b01      	cmp	r3, #1
 80172a8:	d101      	bne.n	80172ae <I2C_Master_ISR_DMA+0x1a>
 80172aa:	2302      	movs	r3, #2
 80172ac:	e0f7      	b.n	801749e <I2C_Master_ISR_DMA+0x20a>
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	2240      	movs	r2, #64	@ 0x40
 80172b2:	2101      	movs	r1, #1
 80172b4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	091b      	lsrs	r3, r3, #4
 80172ba:	001a      	movs	r2, r3
 80172bc:	2301      	movs	r3, #1
 80172be:	4013      	ands	r3, r2
 80172c0:	d019      	beq.n	80172f6 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	091b      	lsrs	r3, r3, #4
 80172c6:	001a      	movs	r2, r3
 80172c8:	2301      	movs	r3, #1
 80172ca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80172cc:	d013      	beq.n	80172f6 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	2210      	movs	r2, #16
 80172d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80172da:	2204      	movs	r2, #4
 80172dc:	431a      	orrs	r2, r3
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	2120      	movs	r1, #32
 80172e6:	0018      	movs	r0, r3
 80172e8:	f001 fc1a 	bl	8018b20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	0018      	movs	r0, r3
 80172f0:	f001 f88f 	bl	8018412 <I2C_Flush_TXDR>
 80172f4:	e0ce      	b.n	8017494 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80172f6:	68bb      	ldr	r3, [r7, #8]
 80172f8:	09db      	lsrs	r3, r3, #7
 80172fa:	001a      	movs	r2, r3
 80172fc:	2301      	movs	r3, #1
 80172fe:	4013      	ands	r3, r2
 8017300:	d100      	bne.n	8017304 <I2C_Master_ISR_DMA+0x70>
 8017302:	e07e      	b.n	8017402 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	099b      	lsrs	r3, r3, #6
 8017308:	001a      	movs	r2, r3
 801730a:	2301      	movs	r3, #1
 801730c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801730e:	d100      	bne.n	8017312 <I2C_Master_ISR_DMA+0x7e>
 8017310:	e077      	b.n	8017402 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	681a      	ldr	r2, [r3, #0]
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	2140      	movs	r1, #64	@ 0x40
 801731e:	438a      	bics	r2, r1
 8017320:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017326:	b29b      	uxth	r3, r3
 8017328:	2b00      	cmp	r3, #0
 801732a:	d055      	beq.n	80173d8 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	685b      	ldr	r3, [r3, #4]
 8017332:	b29a      	uxth	r2, r3
 8017334:	2312      	movs	r3, #18
 8017336:	18fb      	adds	r3, r7, r3
 8017338:	0592      	lsls	r2, r2, #22
 801733a:	0d92      	lsrs	r2, r2, #22
 801733c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017342:	b29b      	uxth	r3, r3
 8017344:	2bff      	cmp	r3, #255	@ 0xff
 8017346:	d906      	bls.n	8017356 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	22ff      	movs	r2, #255	@ 0xff
 801734c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801734e:	2380      	movs	r3, #128	@ 0x80
 8017350:	045b      	lsls	r3, r3, #17
 8017352:	617b      	str	r3, [r7, #20]
 8017354:	e010      	b.n	8017378 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801735a:	b29a      	uxth	r2, r3
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017364:	4a50      	ldr	r2, [pc, #320]	@ (80174a8 <I2C_Master_ISR_DMA+0x214>)
 8017366:	4293      	cmp	r3, r2
 8017368:	d003      	beq.n	8017372 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801736e:	617b      	str	r3, [r7, #20]
 8017370:	e002      	b.n	8017378 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8017372:	2380      	movs	r3, #128	@ 0x80
 8017374:	049b      	lsls	r3, r3, #18
 8017376:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801737c:	b2da      	uxtb	r2, r3
 801737e:	697c      	ldr	r4, [r7, #20]
 8017380:	2312      	movs	r3, #18
 8017382:	18fb      	adds	r3, r7, r3
 8017384:	8819      	ldrh	r1, [r3, #0]
 8017386:	68f8      	ldr	r0, [r7, #12]
 8017388:	2300      	movs	r3, #0
 801738a:	9300      	str	r3, [sp, #0]
 801738c:	0023      	movs	r3, r4
 801738e:	f001 fb8d 	bl	8018aac <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017396:	b29a      	uxth	r2, r3
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801739c:	1ad3      	subs	r3, r2, r3
 801739e:	b29a      	uxth	r2, r3
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	2241      	movs	r2, #65	@ 0x41
 80173a8:	5c9b      	ldrb	r3, [r3, r2]
 80173aa:	b2db      	uxtb	r3, r3
 80173ac:	2b22      	cmp	r3, #34	@ 0x22
 80173ae:	d109      	bne.n	80173c4 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	681a      	ldr	r2, [r3, #0]
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	2180      	movs	r1, #128	@ 0x80
 80173bc:	0209      	lsls	r1, r1, #8
 80173be:	430a      	orrs	r2, r1
 80173c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80173c2:	e067      	b.n	8017494 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	681a      	ldr	r2, [r3, #0]
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	2180      	movs	r1, #128	@ 0x80
 80173d0:	01c9      	lsls	r1, r1, #7
 80173d2:	430a      	orrs	r2, r1
 80173d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80173d6:	e05d      	b.n	8017494 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	685a      	ldr	r2, [r3, #4]
 80173de:	2380      	movs	r3, #128	@ 0x80
 80173e0:	049b      	lsls	r3, r3, #18
 80173e2:	401a      	ands	r2, r3
 80173e4:	2380      	movs	r3, #128	@ 0x80
 80173e6:	049b      	lsls	r3, r3, #18
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d004      	beq.n	80173f6 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	0018      	movs	r0, r3
 80173f0:	f000 fbec 	bl	8017bcc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80173f4:	e04e      	b.n	8017494 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	2140      	movs	r1, #64	@ 0x40
 80173fa:	0018      	movs	r0, r3
 80173fc:	f000 fede 	bl	80181bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8017400:	e048      	b.n	8017494 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017402:	68bb      	ldr	r3, [r7, #8]
 8017404:	099b      	lsrs	r3, r3, #6
 8017406:	001a      	movs	r2, r3
 8017408:	2301      	movs	r3, #1
 801740a:	4013      	ands	r3, r2
 801740c:	d02e      	beq.n	801746c <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	099b      	lsrs	r3, r3, #6
 8017412:	001a      	movs	r2, r3
 8017414:	2301      	movs	r3, #1
 8017416:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017418:	d028      	beq.n	801746c <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801741e:	b29b      	uxth	r3, r3
 8017420:	2b00      	cmp	r3, #0
 8017422:	d11d      	bne.n	8017460 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	685a      	ldr	r2, [r3, #4]
 801742a:	2380      	movs	r3, #128	@ 0x80
 801742c:	049b      	lsls	r3, r3, #18
 801742e:	401a      	ands	r2, r3
 8017430:	2380      	movs	r3, #128	@ 0x80
 8017432:	049b      	lsls	r3, r3, #18
 8017434:	429a      	cmp	r2, r3
 8017436:	d02c      	beq.n	8017492 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801743c:	4a1a      	ldr	r2, [pc, #104]	@ (80174a8 <I2C_Master_ISR_DMA+0x214>)
 801743e:	4293      	cmp	r3, r2
 8017440:	d109      	bne.n	8017456 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	685a      	ldr	r2, [r3, #4]
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	2180      	movs	r1, #128	@ 0x80
 801744e:	01c9      	lsls	r1, r1, #7
 8017450:	430a      	orrs	r2, r1
 8017452:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8017454:	e01d      	b.n	8017492 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	0018      	movs	r0, r3
 801745a:	f000 fbb7 	bl	8017bcc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801745e:	e018      	b.n	8017492 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	2140      	movs	r1, #64	@ 0x40
 8017464:	0018      	movs	r0, r3
 8017466:	f000 fea9 	bl	80181bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801746a:	e012      	b.n	8017492 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801746c:	68bb      	ldr	r3, [r7, #8]
 801746e:	095b      	lsrs	r3, r3, #5
 8017470:	001a      	movs	r2, r3
 8017472:	2301      	movs	r3, #1
 8017474:	4013      	ands	r3, r2
 8017476:	d00d      	beq.n	8017494 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	095b      	lsrs	r3, r3, #5
 801747c:	001a      	movs	r2, r3
 801747e:	2301      	movs	r3, #1
 8017480:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017482:	d007      	beq.n	8017494 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8017484:	68ba      	ldr	r2, [r7, #8]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	0011      	movs	r1, r2
 801748a:	0018      	movs	r0, r3
 801748c:	f000 fc46 	bl	8017d1c <I2C_ITMasterCplt>
 8017490:	e000      	b.n	8017494 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8017492:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	2240      	movs	r2, #64	@ 0x40
 8017498:	2100      	movs	r1, #0
 801749a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801749c:	2300      	movs	r3, #0
}
 801749e:	0018      	movs	r0, r3
 80174a0:	46bd      	mov	sp, r7
 80174a2:	b007      	add	sp, #28
 80174a4:	bd90      	pop	{r4, r7, pc}
 80174a6:	46c0      	nop			@ (mov r8, r8)
 80174a8:	ffff0000 	.word	0xffff0000

080174ac <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80174ac:	b590      	push	{r4, r7, lr}
 80174ae:	b089      	sub	sp, #36	@ 0x24
 80174b0:	af02      	add	r7, sp, #8
 80174b2:	60f8      	str	r0, [r7, #12]
 80174b4:	60b9      	str	r1, [r7, #8]
 80174b6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80174b8:	4b92      	ldr	r3, [pc, #584]	@ (8017704 <I2C_Mem_ISR_DMA+0x258>)
 80174ba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	2240      	movs	r2, #64	@ 0x40
 80174c0:	5c9b      	ldrb	r3, [r3, r2]
 80174c2:	2b01      	cmp	r3, #1
 80174c4:	d101      	bne.n	80174ca <I2C_Mem_ISR_DMA+0x1e>
 80174c6:	2302      	movs	r3, #2
 80174c8:	e118      	b.n	80176fc <I2C_Mem_ISR_DMA+0x250>
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	2240      	movs	r2, #64	@ 0x40
 80174ce:	2101      	movs	r1, #1
 80174d0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80174d2:	68bb      	ldr	r3, [r7, #8]
 80174d4:	091b      	lsrs	r3, r3, #4
 80174d6:	001a      	movs	r2, r3
 80174d8:	2301      	movs	r3, #1
 80174da:	4013      	ands	r3, r2
 80174dc:	d019      	beq.n	8017512 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	091b      	lsrs	r3, r3, #4
 80174e2:	001a      	movs	r2, r3
 80174e4:	2301      	movs	r3, #1
 80174e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80174e8:	d013      	beq.n	8017512 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	2210      	movs	r2, #16
 80174f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80174f6:	2204      	movs	r2, #4
 80174f8:	431a      	orrs	r2, r3
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	2120      	movs	r1, #32
 8017502:	0018      	movs	r0, r3
 8017504:	f001 fb0c 	bl	8018b20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	0018      	movs	r0, r3
 801750c:	f000 ff81 	bl	8018412 <I2C_Flush_TXDR>
 8017510:	e0ef      	b.n	80176f2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017512:	68bb      	ldr	r3, [r7, #8]
 8017514:	085b      	lsrs	r3, r3, #1
 8017516:	001a      	movs	r2, r3
 8017518:	2301      	movs	r3, #1
 801751a:	4013      	ands	r3, r2
 801751c:	d00f      	beq.n	801753e <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	085b      	lsrs	r3, r3, #1
 8017522:	001a      	movs	r2, r3
 8017524:	2301      	movs	r3, #1
 8017526:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017528:	d009      	beq.n	801753e <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	68fa      	ldr	r2, [r7, #12]
 8017530:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8017532:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	2201      	movs	r2, #1
 8017538:	4252      	negs	r2, r2
 801753a:	651a      	str	r2, [r3, #80]	@ 0x50
 801753c:	e0d9      	b.n	80176f2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	09db      	lsrs	r3, r3, #7
 8017542:	001a      	movs	r2, r3
 8017544:	2301      	movs	r3, #1
 8017546:	4013      	ands	r3, r2
 8017548:	d060      	beq.n	801760c <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	099b      	lsrs	r3, r3, #6
 801754e:	001a      	movs	r2, r3
 8017550:	2301      	movs	r3, #1
 8017552:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017554:	d05a      	beq.n	801760c <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	2110      	movs	r1, #16
 801755a:	0018      	movs	r0, r3
 801755c:	f001 fae0 	bl	8018b20 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017564:	b29b      	uxth	r3, r3
 8017566:	2b00      	cmp	r3, #0
 8017568:	d04a      	beq.n	8017600 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801756e:	b29b      	uxth	r3, r3
 8017570:	2bff      	cmp	r3, #255	@ 0xff
 8017572:	d910      	bls.n	8017596 <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	22ff      	movs	r2, #255	@ 0xff
 8017578:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801757e:	b299      	uxth	r1, r3
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017584:	b2da      	uxtb	r2, r3
 8017586:	2380      	movs	r3, #128	@ 0x80
 8017588:	045b      	lsls	r3, r3, #17
 801758a:	68f8      	ldr	r0, [r7, #12]
 801758c:	2400      	movs	r4, #0
 801758e:	9400      	str	r4, [sp, #0]
 8017590:	f001 fa8c 	bl	8018aac <I2C_TransferConfig>
 8017594:	e011      	b.n	80175ba <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801759a:	b29a      	uxth	r2, r3
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80175a4:	b299      	uxth	r1, r3
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175aa:	b2da      	uxtb	r2, r3
 80175ac:	2380      	movs	r3, #128	@ 0x80
 80175ae:	049b      	lsls	r3, r3, #18
 80175b0:	68f8      	ldr	r0, [r7, #12]
 80175b2:	2400      	movs	r4, #0
 80175b4:	9400      	str	r4, [sp, #0]
 80175b6:	f001 fa79 	bl	8018aac <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175be:	b29a      	uxth	r2, r3
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175c4:	1ad3      	subs	r3, r2, r3
 80175c6:	b29a      	uxth	r2, r3
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	2241      	movs	r2, #65	@ 0x41
 80175d0:	5c9b      	ldrb	r3, [r3, r2]
 80175d2:	b2db      	uxtb	r3, r3
 80175d4:	2b22      	cmp	r3, #34	@ 0x22
 80175d6:	d109      	bne.n	80175ec <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	2180      	movs	r1, #128	@ 0x80
 80175e4:	0209      	lsls	r1, r1, #8
 80175e6:	430a      	orrs	r2, r1
 80175e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80175ea:	e082      	b.n	80176f2 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	681a      	ldr	r2, [r3, #0]
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	2180      	movs	r1, #128	@ 0x80
 80175f8:	01c9      	lsls	r1, r1, #7
 80175fa:	430a      	orrs	r2, r1
 80175fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80175fe:	e078      	b.n	80176f2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	2140      	movs	r1, #64	@ 0x40
 8017604:	0018      	movs	r0, r3
 8017606:	f000 fdd9 	bl	80181bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801760a:	e072      	b.n	80176f2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801760c:	68bb      	ldr	r3, [r7, #8]
 801760e:	099b      	lsrs	r3, r3, #6
 8017610:	001a      	movs	r2, r3
 8017612:	2301      	movs	r3, #1
 8017614:	4013      	ands	r3, r2
 8017616:	d05a      	beq.n	80176ce <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	099b      	lsrs	r3, r3, #6
 801761c:	001a      	movs	r2, r3
 801761e:	2301      	movs	r3, #1
 8017620:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017622:	d054      	beq.n	80176ce <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	2241      	movs	r2, #65	@ 0x41
 8017628:	5c9b      	ldrb	r3, [r3, r2]
 801762a:	b2db      	uxtb	r3, r3
 801762c:	2b22      	cmp	r3, #34	@ 0x22
 801762e:	d101      	bne.n	8017634 <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8017630:	4b35      	ldr	r3, [pc, #212]	@ (8017708 <I2C_Mem_ISR_DMA+0x25c>)
 8017632:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017638:	b29b      	uxth	r3, r3
 801763a:	2bff      	cmp	r3, #255	@ 0xff
 801763c:	d911      	bls.n	8017662 <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	22ff      	movs	r2, #255	@ 0xff
 8017642:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017648:	b299      	uxth	r1, r3
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801764e:	b2da      	uxtb	r2, r3
 8017650:	2380      	movs	r3, #128	@ 0x80
 8017652:	045c      	lsls	r4, r3, #17
 8017654:	68f8      	ldr	r0, [r7, #12]
 8017656:	697b      	ldr	r3, [r7, #20]
 8017658:	9300      	str	r3, [sp, #0]
 801765a:	0023      	movs	r3, r4
 801765c:	f001 fa26 	bl	8018aac <I2C_TransferConfig>
 8017660:	e012      	b.n	8017688 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017666:	b29a      	uxth	r2, r3
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017670:	b299      	uxth	r1, r3
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017676:	b2da      	uxtb	r2, r3
 8017678:	2380      	movs	r3, #128	@ 0x80
 801767a:	049c      	lsls	r4, r3, #18
 801767c:	68f8      	ldr	r0, [r7, #12]
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	9300      	str	r3, [sp, #0]
 8017682:	0023      	movs	r3, r4
 8017684:	f001 fa12 	bl	8018aac <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801768c:	b29a      	uxth	r2, r3
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017692:	1ad3      	subs	r3, r2, r3
 8017694:	b29a      	uxth	r2, r3
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	2241      	movs	r2, #65	@ 0x41
 801769e:	5c9b      	ldrb	r3, [r3, r2]
 80176a0:	b2db      	uxtb	r3, r3
 80176a2:	2b22      	cmp	r3, #34	@ 0x22
 80176a4:	d109      	bne.n	80176ba <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	681a      	ldr	r2, [r3, #0]
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	2180      	movs	r1, #128	@ 0x80
 80176b2:	0209      	lsls	r1, r1, #8
 80176b4:	430a      	orrs	r2, r1
 80176b6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80176b8:	e01b      	b.n	80176f2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	681a      	ldr	r2, [r3, #0]
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	2180      	movs	r1, #128	@ 0x80
 80176c6:	01c9      	lsls	r1, r1, #7
 80176c8:	430a      	orrs	r2, r1
 80176ca:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80176cc:	e011      	b.n	80176f2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	095b      	lsrs	r3, r3, #5
 80176d2:	001a      	movs	r2, r3
 80176d4:	2301      	movs	r3, #1
 80176d6:	4013      	ands	r3, r2
 80176d8:	d00b      	beq.n	80176f2 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	095b      	lsrs	r3, r3, #5
 80176de:	001a      	movs	r2, r3
 80176e0:	2301      	movs	r3, #1
 80176e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80176e4:	d005      	beq.n	80176f2 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80176e6:	68ba      	ldr	r2, [r7, #8]
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	0011      	movs	r1, r2
 80176ec:	0018      	movs	r0, r3
 80176ee:	f000 fb15 	bl	8017d1c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	2240      	movs	r2, #64	@ 0x40
 80176f6:	2100      	movs	r1, #0
 80176f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80176fa:	2300      	movs	r3, #0
}
 80176fc:	0018      	movs	r0, r3
 80176fe:	46bd      	mov	sp, r7
 8017700:	b007      	add	sp, #28
 8017702:	bd90      	pop	{r4, r7, pc}
 8017704:	80002000 	.word	0x80002000
 8017708:	80002400 	.word	0x80002400

0801770c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b088      	sub	sp, #32
 8017710:	af00      	add	r7, sp, #0
 8017712:	60f8      	str	r0, [r7, #12]
 8017714:	60b9      	str	r1, [r7, #8]
 8017716:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801771c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801771e:	2300      	movs	r3, #0
 8017720:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	2240      	movs	r2, #64	@ 0x40
 8017726:	5c9b      	ldrb	r3, [r3, r2]
 8017728:	2b01      	cmp	r3, #1
 801772a:	d101      	bne.n	8017730 <I2C_Slave_ISR_DMA+0x24>
 801772c:	2302      	movs	r3, #2
 801772e:	e0dd      	b.n	80178ec <I2C_Slave_ISR_DMA+0x1e0>
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	2240      	movs	r2, #64	@ 0x40
 8017734:	2101      	movs	r1, #1
 8017736:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	095b      	lsrs	r3, r3, #5
 801773c:	001a      	movs	r2, r3
 801773e:	2301      	movs	r3, #1
 8017740:	4013      	ands	r3, r2
 8017742:	d00b      	beq.n	801775c <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	095b      	lsrs	r3, r3, #5
 8017748:	001a      	movs	r2, r3
 801774a:	2301      	movs	r3, #1
 801774c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801774e:	d005      	beq.n	801775c <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8017750:	68ba      	ldr	r2, [r7, #8]
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	0011      	movs	r1, r2
 8017756:	0018      	movs	r0, r3
 8017758:	f000 fbb2 	bl	8017ec0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801775c:	68bb      	ldr	r3, [r7, #8]
 801775e:	091b      	lsrs	r3, r3, #4
 8017760:	001a      	movs	r2, r3
 8017762:	2301      	movs	r3, #1
 8017764:	4013      	ands	r3, r2
 8017766:	d100      	bne.n	801776a <I2C_Slave_ISR_DMA+0x5e>
 8017768:	e0a9      	b.n	80178be <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	091b      	lsrs	r3, r3, #4
 801776e:	001a      	movs	r2, r3
 8017770:	2301      	movs	r3, #1
 8017772:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017774:	d100      	bne.n	8017778 <I2C_Slave_ISR_DMA+0x6c>
 8017776:	e0a2      	b.n	80178be <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	0b9b      	lsrs	r3, r3, #14
 801777c:	001a      	movs	r2, r3
 801777e:	2301      	movs	r3, #1
 8017780:	4013      	ands	r3, r2
 8017782:	d106      	bne.n	8017792 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	0bdb      	lsrs	r3, r3, #15
 8017788:	001a      	movs	r2, r3
 801778a:	2301      	movs	r3, #1
 801778c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801778e:	d100      	bne.n	8017792 <I2C_Slave_ISR_DMA+0x86>
 8017790:	e08e      	b.n	80178b0 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017796:	2b00      	cmp	r3, #0
 8017798:	d00d      	beq.n	80177b6 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	0bdb      	lsrs	r3, r3, #15
 801779e:	001a      	movs	r2, r3
 80177a0:	2301      	movs	r3, #1
 80177a2:	4013      	ands	r3, r2
 80177a4:	d007      	beq.n	80177b6 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	685b      	ldr	r3, [r3, #4]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d101      	bne.n	80177b6 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 80177b2:	2301      	movs	r3, #1
 80177b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d00d      	beq.n	80177da <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	0b9b      	lsrs	r3, r3, #14
 80177c2:	001a      	movs	r2, r3
 80177c4:	2301      	movs	r3, #1
 80177c6:	4013      	ands	r3, r2
 80177c8:	d007      	beq.n	80177da <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	685b      	ldr	r3, [r3, #4]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d101      	bne.n	80177da <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 80177d6:	2301      	movs	r3, #1
 80177d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80177da:	69fb      	ldr	r3, [r7, #28]
 80177dc:	2b01      	cmp	r3, #1
 80177de:	d12d      	bne.n	801783c <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	2241      	movs	r2, #65	@ 0x41
 80177e4:	5c9b      	ldrb	r3, [r3, r2]
 80177e6:	b2db      	uxtb	r3, r3
 80177e8:	2b28      	cmp	r3, #40	@ 0x28
 80177ea:	d10b      	bne.n	8017804 <I2C_Slave_ISR_DMA+0xf8>
 80177ec:	69ba      	ldr	r2, [r7, #24]
 80177ee:	2380      	movs	r3, #128	@ 0x80
 80177f0:	049b      	lsls	r3, r3, #18
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d106      	bne.n	8017804 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80177f6:	68ba      	ldr	r2, [r7, #8]
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	0011      	movs	r1, r2
 80177fc:	0018      	movs	r0, r3
 80177fe:	f000 fc83 	bl	8018108 <I2C_ITListenCplt>
 8017802:	e054      	b.n	80178ae <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	2241      	movs	r2, #65	@ 0x41
 8017808:	5c9b      	ldrb	r3, [r3, r2]
 801780a:	b2db      	uxtb	r3, r3
 801780c:	2b29      	cmp	r3, #41	@ 0x29
 801780e:	d110      	bne.n	8017832 <I2C_Slave_ISR_DMA+0x126>
 8017810:	69bb      	ldr	r3, [r7, #24]
 8017812:	4a38      	ldr	r2, [pc, #224]	@ (80178f4 <I2C_Slave_ISR_DMA+0x1e8>)
 8017814:	4293      	cmp	r3, r2
 8017816:	d00c      	beq.n	8017832 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	2210      	movs	r2, #16
 801781e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	0018      	movs	r0, r3
 8017824:	f000 fdf5 	bl	8018412 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	0018      	movs	r0, r3
 801782c:	f000 fa10 	bl	8017c50 <I2C_ITSlaveSeqCplt>
 8017830:	e03d      	b.n	80178ae <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	2210      	movs	r2, #16
 8017838:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801783a:	e03e      	b.n	80178ba <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	2210      	movs	r2, #16
 8017842:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017848:	2204      	movs	r2, #4
 801784a:	431a      	orrs	r2, r3
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8017850:	2317      	movs	r3, #23
 8017852:	18fb      	adds	r3, r7, r3
 8017854:	68fa      	ldr	r2, [r7, #12]
 8017856:	2141      	movs	r1, #65	@ 0x41
 8017858:	5c52      	ldrb	r2, [r2, r1]
 801785a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801785c:	69bb      	ldr	r3, [r7, #24]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d004      	beq.n	801786c <I2C_Slave_ISR_DMA+0x160>
 8017862:	69ba      	ldr	r2, [r7, #24]
 8017864:	2380      	movs	r3, #128	@ 0x80
 8017866:	045b      	lsls	r3, r3, #17
 8017868:	429a      	cmp	r2, r3
 801786a:	d126      	bne.n	80178ba <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801786c:	2217      	movs	r2, #23
 801786e:	18bb      	adds	r3, r7, r2
 8017870:	781b      	ldrb	r3, [r3, #0]
 8017872:	2b21      	cmp	r3, #33	@ 0x21
 8017874:	d003      	beq.n	801787e <I2C_Slave_ISR_DMA+0x172>
 8017876:	18bb      	adds	r3, r7, r2
 8017878:	781b      	ldrb	r3, [r3, #0]
 801787a:	2b29      	cmp	r3, #41	@ 0x29
 801787c:	d103      	bne.n	8017886 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	2221      	movs	r2, #33	@ 0x21
 8017882:	631a      	str	r2, [r3, #48]	@ 0x30
 8017884:	e00b      	b.n	801789e <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017886:	2217      	movs	r2, #23
 8017888:	18bb      	adds	r3, r7, r2
 801788a:	781b      	ldrb	r3, [r3, #0]
 801788c:	2b22      	cmp	r3, #34	@ 0x22
 801788e:	d003      	beq.n	8017898 <I2C_Slave_ISR_DMA+0x18c>
 8017890:	18bb      	adds	r3, r7, r2
 8017892:	781b      	ldrb	r3, [r3, #0]
 8017894:	2b2a      	cmp	r3, #42	@ 0x2a
 8017896:	d102      	bne.n	801789e <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	2222      	movs	r2, #34	@ 0x22
 801789c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	0011      	movs	r1, r2
 80178a6:	0018      	movs	r0, r3
 80178a8:	f000 fc88 	bl	80181bc <I2C_ITError>
      if (treatdmanack == 1U)
 80178ac:	e005      	b.n	80178ba <I2C_Slave_ISR_DMA+0x1ae>
 80178ae:	e004      	b.n	80178ba <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	2210      	movs	r2, #16
 80178b6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80178b8:	e013      	b.n	80178e2 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 80178ba:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80178bc:	e011      	b.n	80178e2 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	08db      	lsrs	r3, r3, #3
 80178c2:	001a      	movs	r2, r3
 80178c4:	2301      	movs	r3, #1
 80178c6:	4013      	ands	r3, r2
 80178c8:	d00b      	beq.n	80178e2 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	08db      	lsrs	r3, r3, #3
 80178ce:	001a      	movs	r2, r3
 80178d0:	2301      	movs	r3, #1
 80178d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80178d4:	d005      	beq.n	80178e2 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80178d6:	68ba      	ldr	r2, [r7, #8]
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	0011      	movs	r1, r2
 80178dc:	0018      	movs	r0, r3
 80178de:	f000 f8d1 	bl	8017a84 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	2240      	movs	r2, #64	@ 0x40
 80178e6:	2100      	movs	r1, #0
 80178e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80178ea:	2300      	movs	r3, #0
}
 80178ec:	0018      	movs	r0, r3
 80178ee:	46bd      	mov	sp, r7
 80178f0:	b008      	add	sp, #32
 80178f2:	bd80      	pop	{r7, pc}
 80178f4:	ffff0000 	.word	0xffff0000

080178f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80178f8:	b5b0      	push	{r4, r5, r7, lr}
 80178fa:	b086      	sub	sp, #24
 80178fc:	af02      	add	r7, sp, #8
 80178fe:	60f8      	str	r0, [r7, #12]
 8017900:	000c      	movs	r4, r1
 8017902:	0010      	movs	r0, r2
 8017904:	0019      	movs	r1, r3
 8017906:	250a      	movs	r5, #10
 8017908:	197b      	adds	r3, r7, r5
 801790a:	1c22      	adds	r2, r4, #0
 801790c:	801a      	strh	r2, [r3, #0]
 801790e:	2308      	movs	r3, #8
 8017910:	18fb      	adds	r3, r7, r3
 8017912:	1c02      	adds	r2, r0, #0
 8017914:	801a      	strh	r2, [r3, #0]
 8017916:	1dbb      	adds	r3, r7, #6
 8017918:	1c0a      	adds	r2, r1, #0
 801791a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801791c:	1dbb      	adds	r3, r7, #6
 801791e:	881b      	ldrh	r3, [r3, #0]
 8017920:	b2da      	uxtb	r2, r3
 8017922:	2380      	movs	r3, #128	@ 0x80
 8017924:	045c      	lsls	r4, r3, #17
 8017926:	197b      	adds	r3, r7, r5
 8017928:	8819      	ldrh	r1, [r3, #0]
 801792a:	68f8      	ldr	r0, [r7, #12]
 801792c:	4b23      	ldr	r3, [pc, #140]	@ (80179bc <I2C_RequestMemoryWrite+0xc4>)
 801792e:	9300      	str	r3, [sp, #0]
 8017930:	0023      	movs	r3, r4
 8017932:	f001 f8bb 	bl	8018aac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017938:	6a39      	ldr	r1, [r7, #32]
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	0018      	movs	r0, r3
 801793e:	f000 feb1 	bl	80186a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8017942:	1e03      	subs	r3, r0, #0
 8017944:	d001      	beq.n	801794a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8017946:	2301      	movs	r3, #1
 8017948:	e033      	b.n	80179b2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801794a:	1dbb      	adds	r3, r7, #6
 801794c:	881b      	ldrh	r3, [r3, #0]
 801794e:	2b01      	cmp	r3, #1
 8017950:	d107      	bne.n	8017962 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017952:	2308      	movs	r3, #8
 8017954:	18fb      	adds	r3, r7, r3
 8017956:	881b      	ldrh	r3, [r3, #0]
 8017958:	b2da      	uxtb	r2, r3
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	629a      	str	r2, [r3, #40]	@ 0x28
 8017960:	e019      	b.n	8017996 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017962:	2308      	movs	r3, #8
 8017964:	18fb      	adds	r3, r7, r3
 8017966:	881b      	ldrh	r3, [r3, #0]
 8017968:	0a1b      	lsrs	r3, r3, #8
 801796a:	b29b      	uxth	r3, r3
 801796c:	b2da      	uxtb	r2, r3
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017976:	6a39      	ldr	r1, [r7, #32]
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	0018      	movs	r0, r3
 801797c:	f000 fe92 	bl	80186a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8017980:	1e03      	subs	r3, r0, #0
 8017982:	d001      	beq.n	8017988 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8017984:	2301      	movs	r3, #1
 8017986:	e014      	b.n	80179b2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017988:	2308      	movs	r3, #8
 801798a:	18fb      	adds	r3, r7, r3
 801798c:	881b      	ldrh	r3, [r3, #0]
 801798e:	b2da      	uxtb	r2, r3
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8017996:	6a3a      	ldr	r2, [r7, #32]
 8017998:	68f8      	ldr	r0, [r7, #12]
 801799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801799c:	9300      	str	r3, [sp, #0]
 801799e:	0013      	movs	r3, r2
 80179a0:	2200      	movs	r2, #0
 80179a2:	2180      	movs	r1, #128	@ 0x80
 80179a4:	f000 fe30 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 80179a8:	1e03      	subs	r3, r0, #0
 80179aa:	d001      	beq.n	80179b0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80179ac:	2301      	movs	r3, #1
 80179ae:	e000      	b.n	80179b2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80179b0:	2300      	movs	r3, #0
}
 80179b2:	0018      	movs	r0, r3
 80179b4:	46bd      	mov	sp, r7
 80179b6:	b004      	add	sp, #16
 80179b8:	bdb0      	pop	{r4, r5, r7, pc}
 80179ba:	46c0      	nop			@ (mov r8, r8)
 80179bc:	80002000 	.word	0x80002000

080179c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80179c0:	b5b0      	push	{r4, r5, r7, lr}
 80179c2:	b086      	sub	sp, #24
 80179c4:	af02      	add	r7, sp, #8
 80179c6:	60f8      	str	r0, [r7, #12]
 80179c8:	000c      	movs	r4, r1
 80179ca:	0010      	movs	r0, r2
 80179cc:	0019      	movs	r1, r3
 80179ce:	250a      	movs	r5, #10
 80179d0:	197b      	adds	r3, r7, r5
 80179d2:	1c22      	adds	r2, r4, #0
 80179d4:	801a      	strh	r2, [r3, #0]
 80179d6:	2308      	movs	r3, #8
 80179d8:	18fb      	adds	r3, r7, r3
 80179da:	1c02      	adds	r2, r0, #0
 80179dc:	801a      	strh	r2, [r3, #0]
 80179de:	1dbb      	adds	r3, r7, #6
 80179e0:	1c0a      	adds	r2, r1, #0
 80179e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80179e4:	1dbb      	adds	r3, r7, #6
 80179e6:	881b      	ldrh	r3, [r3, #0]
 80179e8:	b2da      	uxtb	r2, r3
 80179ea:	197b      	adds	r3, r7, r5
 80179ec:	8819      	ldrh	r1, [r3, #0]
 80179ee:	68f8      	ldr	r0, [r7, #12]
 80179f0:	4b23      	ldr	r3, [pc, #140]	@ (8017a80 <I2C_RequestMemoryRead+0xc0>)
 80179f2:	9300      	str	r3, [sp, #0]
 80179f4:	2300      	movs	r3, #0
 80179f6:	f001 f859 	bl	8018aac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80179fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179fc:	6a39      	ldr	r1, [r7, #32]
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	0018      	movs	r0, r3
 8017a02:	f000 fe4f 	bl	80186a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8017a06:	1e03      	subs	r3, r0, #0
 8017a08:	d001      	beq.n	8017a0e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	e033      	b.n	8017a76 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017a0e:	1dbb      	adds	r3, r7, #6
 8017a10:	881b      	ldrh	r3, [r3, #0]
 8017a12:	2b01      	cmp	r3, #1
 8017a14:	d107      	bne.n	8017a26 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017a16:	2308      	movs	r3, #8
 8017a18:	18fb      	adds	r3, r7, r3
 8017a1a:	881b      	ldrh	r3, [r3, #0]
 8017a1c:	b2da      	uxtb	r2, r3
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	629a      	str	r2, [r3, #40]	@ 0x28
 8017a24:	e019      	b.n	8017a5a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017a26:	2308      	movs	r3, #8
 8017a28:	18fb      	adds	r3, r7, r3
 8017a2a:	881b      	ldrh	r3, [r3, #0]
 8017a2c:	0a1b      	lsrs	r3, r3, #8
 8017a2e:	b29b      	uxth	r3, r3
 8017a30:	b2da      	uxtb	r2, r3
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a3a:	6a39      	ldr	r1, [r7, #32]
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	0018      	movs	r0, r3
 8017a40:	f000 fe30 	bl	80186a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8017a44:	1e03      	subs	r3, r0, #0
 8017a46:	d001      	beq.n	8017a4c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8017a48:	2301      	movs	r3, #1
 8017a4a:	e014      	b.n	8017a76 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017a4c:	2308      	movs	r3, #8
 8017a4e:	18fb      	adds	r3, r7, r3
 8017a50:	881b      	ldrh	r3, [r3, #0]
 8017a52:	b2da      	uxtb	r2, r3
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8017a5a:	6a3a      	ldr	r2, [r7, #32]
 8017a5c:	68f8      	ldr	r0, [r7, #12]
 8017a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a60:	9300      	str	r3, [sp, #0]
 8017a62:	0013      	movs	r3, r2
 8017a64:	2200      	movs	r2, #0
 8017a66:	2140      	movs	r1, #64	@ 0x40
 8017a68:	f000 fdce 	bl	8018608 <I2C_WaitOnFlagUntilTimeout>
 8017a6c:	1e03      	subs	r3, r0, #0
 8017a6e:	d001      	beq.n	8017a74 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017a70:	2301      	movs	r3, #1
 8017a72:	e000      	b.n	8017a76 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8017a74:	2300      	movs	r3, #0
}
 8017a76:	0018      	movs	r0, r3
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	b004      	add	sp, #16
 8017a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8017a7e:	46c0      	nop			@ (mov r8, r8)
 8017a80:	80002000 	.word	0x80002000

08017a84 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017a84:	b5b0      	push	{r4, r5, r7, lr}
 8017a86:	b084      	sub	sp, #16
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
 8017a8c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	2241      	movs	r2, #65	@ 0x41
 8017a92:	5c9b      	ldrb	r3, [r3, r2]
 8017a94:	b2db      	uxtb	r3, r3
 8017a96:	001a      	movs	r2, r3
 8017a98:	2328      	movs	r3, #40	@ 0x28
 8017a9a:	4013      	ands	r3, r2
 8017a9c:	2b28      	cmp	r3, #40	@ 0x28
 8017a9e:	d000      	beq.n	8017aa2 <I2C_ITAddrCplt+0x1e>
 8017aa0:	e088      	b.n	8017bb4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	699b      	ldr	r3, [r3, #24]
 8017aa8:	0c1b      	lsrs	r3, r3, #16
 8017aaa:	b2da      	uxtb	r2, r3
 8017aac:	250f      	movs	r5, #15
 8017aae:	197b      	adds	r3, r7, r5
 8017ab0:	2101      	movs	r1, #1
 8017ab2:	400a      	ands	r2, r1
 8017ab4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	699b      	ldr	r3, [r3, #24]
 8017abc:	0c1b      	lsrs	r3, r3, #16
 8017abe:	b29a      	uxth	r2, r3
 8017ac0:	200c      	movs	r0, #12
 8017ac2:	183b      	adds	r3, r7, r0
 8017ac4:	21fe      	movs	r1, #254	@ 0xfe
 8017ac6:	400a      	ands	r2, r1
 8017ac8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	689b      	ldr	r3, [r3, #8]
 8017ad0:	b29a      	uxth	r2, r3
 8017ad2:	240a      	movs	r4, #10
 8017ad4:	193b      	adds	r3, r7, r4
 8017ad6:	0592      	lsls	r2, r2, #22
 8017ad8:	0d92      	lsrs	r2, r2, #22
 8017ada:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	68db      	ldr	r3, [r3, #12]
 8017ae2:	b29a      	uxth	r2, r3
 8017ae4:	2308      	movs	r3, #8
 8017ae6:	18fb      	adds	r3, r7, r3
 8017ae8:	21fe      	movs	r1, #254	@ 0xfe
 8017aea:	400a      	ands	r2, r1
 8017aec:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	68db      	ldr	r3, [r3, #12]
 8017af2:	2b02      	cmp	r3, #2
 8017af4:	d148      	bne.n	8017b88 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8017af6:	0021      	movs	r1, r4
 8017af8:	187b      	adds	r3, r7, r1
 8017afa:	881b      	ldrh	r3, [r3, #0]
 8017afc:	09db      	lsrs	r3, r3, #7
 8017afe:	b29a      	uxth	r2, r3
 8017b00:	183b      	adds	r3, r7, r0
 8017b02:	881b      	ldrh	r3, [r3, #0]
 8017b04:	4053      	eors	r3, r2
 8017b06:	b29b      	uxth	r3, r3
 8017b08:	001a      	movs	r2, r3
 8017b0a:	2306      	movs	r3, #6
 8017b0c:	4013      	ands	r3, r2
 8017b0e:	d120      	bne.n	8017b52 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8017b10:	183b      	adds	r3, r7, r0
 8017b12:	187a      	adds	r2, r7, r1
 8017b14:	8812      	ldrh	r2, [r2, #0]
 8017b16:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017b1c:	1c5a      	adds	r2, r3, #1
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017b26:	2b02      	cmp	r3, #2
 8017b28:	d14c      	bne.n	8017bc4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	2208      	movs	r2, #8
 8017b36:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2240      	movs	r2, #64	@ 0x40
 8017b3c:	2100      	movs	r1, #0
 8017b3e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017b40:	183b      	adds	r3, r7, r0
 8017b42:	881a      	ldrh	r2, [r3, #0]
 8017b44:	197b      	adds	r3, r7, r5
 8017b46:	7819      	ldrb	r1, [r3, #0]
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	0018      	movs	r0, r3
 8017b4c:	f7ff f914 	bl	8016d78 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017b50:	e038      	b.n	8017bc4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8017b52:	240c      	movs	r4, #12
 8017b54:	193b      	adds	r3, r7, r4
 8017b56:	2208      	movs	r2, #8
 8017b58:	18ba      	adds	r2, r7, r2
 8017b5a:	8812      	ldrh	r2, [r2, #0]
 8017b5c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017b5e:	2380      	movs	r3, #128	@ 0x80
 8017b60:	021a      	lsls	r2, r3, #8
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	0011      	movs	r1, r2
 8017b66:	0018      	movs	r0, r3
 8017b68:	f001 f868 	bl	8018c3c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	2240      	movs	r2, #64	@ 0x40
 8017b70:	2100      	movs	r1, #0
 8017b72:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017b74:	193b      	adds	r3, r7, r4
 8017b76:	881a      	ldrh	r2, [r3, #0]
 8017b78:	230f      	movs	r3, #15
 8017b7a:	18fb      	adds	r3, r7, r3
 8017b7c:	7819      	ldrb	r1, [r3, #0]
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	0018      	movs	r0, r3
 8017b82:	f7ff f8f9 	bl	8016d78 <HAL_I2C_AddrCallback>
}
 8017b86:	e01d      	b.n	8017bc4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017b88:	2380      	movs	r3, #128	@ 0x80
 8017b8a:	021a      	lsls	r2, r3, #8
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	0011      	movs	r1, r2
 8017b90:	0018      	movs	r0, r3
 8017b92:	f001 f853 	bl	8018c3c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	2240      	movs	r2, #64	@ 0x40
 8017b9a:	2100      	movs	r1, #0
 8017b9c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017b9e:	230c      	movs	r3, #12
 8017ba0:	18fb      	adds	r3, r7, r3
 8017ba2:	881a      	ldrh	r2, [r3, #0]
 8017ba4:	230f      	movs	r3, #15
 8017ba6:	18fb      	adds	r3, r7, r3
 8017ba8:	7819      	ldrb	r1, [r3, #0]
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	0018      	movs	r0, r3
 8017bae:	f7ff f8e3 	bl	8016d78 <HAL_I2C_AddrCallback>
}
 8017bb2:	e007      	b.n	8017bc4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	2208      	movs	r2, #8
 8017bba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2240      	movs	r2, #64	@ 0x40
 8017bc0:	2100      	movs	r1, #0
 8017bc2:	5499      	strb	r1, [r3, r2]
}
 8017bc4:	46c0      	nop			@ (mov r8, r8)
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	b004      	add	sp, #16
 8017bca:	bdb0      	pop	{r4, r5, r7, pc}

08017bcc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b082      	sub	sp, #8
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	2242      	movs	r2, #66	@ 0x42
 8017bd8:	2100      	movs	r1, #0
 8017bda:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	2241      	movs	r2, #65	@ 0x41
 8017be0:	5c9b      	ldrb	r3, [r3, r2]
 8017be2:	b2db      	uxtb	r3, r3
 8017be4:	2b21      	cmp	r3, #33	@ 0x21
 8017be6:	d117      	bne.n	8017c18 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	2241      	movs	r2, #65	@ 0x41
 8017bec:	2120      	movs	r1, #32
 8017bee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2211      	movs	r2, #17
 8017bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	2101      	movs	r1, #1
 8017c00:	0018      	movs	r0, r3
 8017c02:	f001 f81b 	bl	8018c3c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	2240      	movs	r2, #64	@ 0x40
 8017c0a:	2100      	movs	r1, #0
 8017c0c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	0018      	movs	r0, r3
 8017c12:	f7ff f891 	bl	8016d38 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017c16:	e016      	b.n	8017c46 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	2241      	movs	r2, #65	@ 0x41
 8017c1c:	2120      	movs	r1, #32
 8017c1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	2212      	movs	r2, #18
 8017c24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	2200      	movs	r2, #0
 8017c2a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	2102      	movs	r1, #2
 8017c30:	0018      	movs	r0, r3
 8017c32:	f001 f803 	bl	8018c3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	2240      	movs	r2, #64	@ 0x40
 8017c3a:	2100      	movs	r1, #0
 8017c3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	0018      	movs	r0, r3
 8017c42:	f7ff f881 	bl	8016d48 <HAL_I2C_MasterRxCpltCallback>
}
 8017c46:	46c0      	nop			@ (mov r8, r8)
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	b002      	add	sp, #8
 8017c4c:	bd80      	pop	{r7, pc}
	...

08017c50 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b084      	sub	sp, #16
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	2242      	movs	r2, #66	@ 0x42
 8017c64:	2100      	movs	r1, #0
 8017c66:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	0b9b      	lsrs	r3, r3, #14
 8017c6c:	001a      	movs	r2, r3
 8017c6e:	2301      	movs	r3, #1
 8017c70:	4013      	ands	r3, r2
 8017c72:	d008      	beq.n	8017c86 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	681a      	ldr	r2, [r3, #0]
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	4925      	ldr	r1, [pc, #148]	@ (8017d14 <I2C_ITSlaveSeqCplt+0xc4>)
 8017c80:	400a      	ands	r2, r1
 8017c82:	601a      	str	r2, [r3, #0]
 8017c84:	e00d      	b.n	8017ca2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	0bdb      	lsrs	r3, r3, #15
 8017c8a:	001a      	movs	r2, r3
 8017c8c:	2301      	movs	r3, #1
 8017c8e:	4013      	ands	r3, r2
 8017c90:	d007      	beq.n	8017ca2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	681a      	ldr	r2, [r3, #0]
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	491e      	ldr	r1, [pc, #120]	@ (8017d18 <I2C_ITSlaveSeqCplt+0xc8>)
 8017c9e:	400a      	ands	r2, r1
 8017ca0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	2241      	movs	r2, #65	@ 0x41
 8017ca6:	5c9b      	ldrb	r3, [r3, r2]
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	2b29      	cmp	r3, #41	@ 0x29
 8017cac:	d114      	bne.n	8017cd8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	2241      	movs	r2, #65	@ 0x41
 8017cb2:	2128      	movs	r1, #40	@ 0x28
 8017cb4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	2221      	movs	r2, #33	@ 0x21
 8017cba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2101      	movs	r1, #1
 8017cc0:	0018      	movs	r0, r3
 8017cc2:	f000 ffbb 	bl	8018c3c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	2240      	movs	r2, #64	@ 0x40
 8017cca:	2100      	movs	r1, #0
 8017ccc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	0018      	movs	r0, r3
 8017cd2:	f7ff f841 	bl	8016d58 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017cd6:	e019      	b.n	8017d0c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	2241      	movs	r2, #65	@ 0x41
 8017cdc:	5c9b      	ldrb	r3, [r3, r2]
 8017cde:	b2db      	uxtb	r3, r3
 8017ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ce2:	d113      	bne.n	8017d0c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	2241      	movs	r2, #65	@ 0x41
 8017ce8:	2128      	movs	r1, #40	@ 0x28
 8017cea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	2222      	movs	r2, #34	@ 0x22
 8017cf0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	2102      	movs	r1, #2
 8017cf6:	0018      	movs	r0, r3
 8017cf8:	f000 ffa0 	bl	8018c3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	2240      	movs	r2, #64	@ 0x40
 8017d00:	2100      	movs	r1, #0
 8017d02:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	0018      	movs	r0, r3
 8017d08:	f7ff f82e 	bl	8016d68 <HAL_I2C_SlaveRxCpltCallback>
}
 8017d0c:	46c0      	nop			@ (mov r8, r8)
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	b004      	add	sp, #16
 8017d12:	bd80      	pop	{r7, pc}
 8017d14:	ffffbfff 	.word	0xffffbfff
 8017d18:	ffff7fff 	.word	0xffff7fff

08017d1c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b086      	sub	sp, #24
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8017d26:	683b      	ldr	r3, [r7, #0]
 8017d28:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	2220      	movs	r2, #32
 8017d30:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	2241      	movs	r2, #65	@ 0x41
 8017d36:	5c9b      	ldrb	r3, [r3, r2]
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	2b21      	cmp	r3, #33	@ 0x21
 8017d3c:	d108      	bne.n	8017d50 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	2101      	movs	r1, #1
 8017d42:	0018      	movs	r0, r3
 8017d44:	f000 ff7a 	bl	8018c3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	2211      	movs	r2, #17
 8017d4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8017d4e:	e00d      	b.n	8017d6c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2241      	movs	r2, #65	@ 0x41
 8017d54:	5c9b      	ldrb	r3, [r3, r2]
 8017d56:	b2db      	uxtb	r3, r3
 8017d58:	2b22      	cmp	r3, #34	@ 0x22
 8017d5a:	d107      	bne.n	8017d6c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	2102      	movs	r1, #2
 8017d60:	0018      	movs	r0, r3
 8017d62:	f000 ff6b 	bl	8018c3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	2212      	movs	r2, #18
 8017d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	685a      	ldr	r2, [r3, #4]
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	4950      	ldr	r1, [pc, #320]	@ (8017eb8 <I2C_ITMasterCplt+0x19c>)
 8017d78:	400a      	ands	r2, r1
 8017d7a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2200      	movs	r2, #0
 8017d80:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	4a4d      	ldr	r2, [pc, #308]	@ (8017ebc <I2C_ITMasterCplt+0x1a0>)
 8017d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8017d88:	697b      	ldr	r3, [r7, #20]
 8017d8a:	091b      	lsrs	r3, r3, #4
 8017d8c:	001a      	movs	r2, r3
 8017d8e:	2301      	movs	r3, #1
 8017d90:	4013      	ands	r3, r2
 8017d92:	d009      	beq.n	8017da8 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	2210      	movs	r2, #16
 8017d9a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017da0:	2204      	movs	r2, #4
 8017da2:	431a      	orrs	r2, r3
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	2241      	movs	r2, #65	@ 0x41
 8017dac:	5c9b      	ldrb	r3, [r3, r2]
 8017dae:	b2db      	uxtb	r3, r3
 8017db0:	2b60      	cmp	r3, #96	@ 0x60
 8017db2:	d10b      	bne.n	8017dcc <I2C_ITMasterCplt+0xb0>
 8017db4:	697b      	ldr	r3, [r7, #20]
 8017db6:	089b      	lsrs	r3, r3, #2
 8017db8:	001a      	movs	r2, r3
 8017dba:	2301      	movs	r3, #1
 8017dbc:	4013      	ands	r3, r2
 8017dbe:	d005      	beq.n	8017dcc <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017dc6:	b2db      	uxtb	r3, r3
 8017dc8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8017dca:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	0018      	movs	r0, r3
 8017dd0:	f000 fb1f 	bl	8018412 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017dd8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	2241      	movs	r2, #65	@ 0x41
 8017dde:	5c9b      	ldrb	r3, [r3, r2]
 8017de0:	b2db      	uxtb	r3, r3
 8017de2:	2b60      	cmp	r3, #96	@ 0x60
 8017de4:	d002      	beq.n	8017dec <I2C_ITMasterCplt+0xd0>
 8017de6:	693b      	ldr	r3, [r7, #16]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d007      	beq.n	8017dfc <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	0011      	movs	r1, r2
 8017df4:	0018      	movs	r0, r3
 8017df6:	f000 f9e1 	bl	80181bc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017dfa:	e058      	b.n	8017eae <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	2241      	movs	r2, #65	@ 0x41
 8017e00:	5c9b      	ldrb	r3, [r3, r2]
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	2b21      	cmp	r3, #33	@ 0x21
 8017e06:	d126      	bne.n	8017e56 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	2241      	movs	r2, #65	@ 0x41
 8017e0c:	2120      	movs	r1, #32
 8017e0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	2200      	movs	r2, #0
 8017e14:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	2242      	movs	r2, #66	@ 0x42
 8017e1a:	5c9b      	ldrb	r3, [r3, r2]
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	2b40      	cmp	r3, #64	@ 0x40
 8017e20:	d10c      	bne.n	8017e3c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2242      	movs	r2, #66	@ 0x42
 8017e26:	2100      	movs	r1, #0
 8017e28:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	2240      	movs	r2, #64	@ 0x40
 8017e2e:	2100      	movs	r1, #0
 8017e30:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	0018      	movs	r0, r3
 8017e36:	f7fe ffb7 	bl	8016da8 <HAL_I2C_MemTxCpltCallback>
}
 8017e3a:	e038      	b.n	8017eae <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	2242      	movs	r2, #66	@ 0x42
 8017e40:	2100      	movs	r1, #0
 8017e42:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	2240      	movs	r2, #64	@ 0x40
 8017e48:	2100      	movs	r1, #0
 8017e4a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	0018      	movs	r0, r3
 8017e50:	f7fe ff72 	bl	8016d38 <HAL_I2C_MasterTxCpltCallback>
}
 8017e54:	e02b      	b.n	8017eae <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	2241      	movs	r2, #65	@ 0x41
 8017e5a:	5c9b      	ldrb	r3, [r3, r2]
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	2b22      	cmp	r3, #34	@ 0x22
 8017e60:	d125      	bne.n	8017eae <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	2241      	movs	r2, #65	@ 0x41
 8017e66:	2120      	movs	r1, #32
 8017e68:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2242      	movs	r2, #66	@ 0x42
 8017e74:	5c9b      	ldrb	r3, [r3, r2]
 8017e76:	b2db      	uxtb	r3, r3
 8017e78:	2b40      	cmp	r3, #64	@ 0x40
 8017e7a:	d10c      	bne.n	8017e96 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	2242      	movs	r2, #66	@ 0x42
 8017e80:	2100      	movs	r1, #0
 8017e82:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2240      	movs	r2, #64	@ 0x40
 8017e88:	2100      	movs	r1, #0
 8017e8a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	0018      	movs	r0, r3
 8017e90:	f7fe ff92 	bl	8016db8 <HAL_I2C_MemRxCpltCallback>
}
 8017e94:	e00b      	b.n	8017eae <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	2242      	movs	r2, #66	@ 0x42
 8017e9a:	2100      	movs	r1, #0
 8017e9c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	2240      	movs	r2, #64	@ 0x40
 8017ea2:	2100      	movs	r1, #0
 8017ea4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	0018      	movs	r0, r3
 8017eaa:	f7fe ff4d 	bl	8016d48 <HAL_I2C_MasterRxCpltCallback>
}
 8017eae:	46c0      	nop			@ (mov r8, r8)
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	b006      	add	sp, #24
 8017eb4:	bd80      	pop	{r7, pc}
 8017eb6:	46c0      	nop			@ (mov r8, r8)
 8017eb8:	fe00e800 	.word	0xfe00e800
 8017ebc:	ffff0000 	.word	0xffff0000

08017ec0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b086      	sub	sp, #24
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8017ed2:	683b      	ldr	r3, [r7, #0]
 8017ed4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017ed6:	200f      	movs	r0, #15
 8017ed8:	183b      	adds	r3, r7, r0
 8017eda:	687a      	ldr	r2, [r7, #4]
 8017edc:	2141      	movs	r1, #65	@ 0x41
 8017ede:	5c52      	ldrb	r2, [r2, r1]
 8017ee0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	2220      	movs	r2, #32
 8017ee8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017eea:	183b      	adds	r3, r7, r0
 8017eec:	781b      	ldrb	r3, [r3, #0]
 8017eee:	2b21      	cmp	r3, #33	@ 0x21
 8017ef0:	d003      	beq.n	8017efa <I2C_ITSlaveCplt+0x3a>
 8017ef2:	183b      	adds	r3, r7, r0
 8017ef4:	781b      	ldrb	r3, [r3, #0]
 8017ef6:	2b29      	cmp	r3, #41	@ 0x29
 8017ef8:	d109      	bne.n	8017f0e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8017efa:	4a7d      	ldr	r2, [pc, #500]	@ (80180f0 <I2C_ITSlaveCplt+0x230>)
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	0011      	movs	r1, r2
 8017f00:	0018      	movs	r0, r3
 8017f02:	f000 fe9b 	bl	8018c3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	2221      	movs	r2, #33	@ 0x21
 8017f0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8017f0c:	e011      	b.n	8017f32 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017f0e:	220f      	movs	r2, #15
 8017f10:	18bb      	adds	r3, r7, r2
 8017f12:	781b      	ldrb	r3, [r3, #0]
 8017f14:	2b22      	cmp	r3, #34	@ 0x22
 8017f16:	d003      	beq.n	8017f20 <I2C_ITSlaveCplt+0x60>
 8017f18:	18bb      	adds	r3, r7, r2
 8017f1a:	781b      	ldrb	r3, [r3, #0]
 8017f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f1e:	d108      	bne.n	8017f32 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8017f20:	4a74      	ldr	r2, [pc, #464]	@ (80180f4 <I2C_ITSlaveCplt+0x234>)
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	0011      	movs	r1, r2
 8017f26:	0018      	movs	r0, r3
 8017f28:	f000 fe88 	bl	8018c3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	2222      	movs	r2, #34	@ 0x22
 8017f30:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	685a      	ldr	r2, [r3, #4]
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	2180      	movs	r1, #128	@ 0x80
 8017f3e:	0209      	lsls	r1, r1, #8
 8017f40:	430a      	orrs	r2, r1
 8017f42:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	685a      	ldr	r2, [r3, #4]
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	496a      	ldr	r1, [pc, #424]	@ (80180f8 <I2C_ITSlaveCplt+0x238>)
 8017f50:	400a      	ands	r2, r1
 8017f52:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	0018      	movs	r0, r3
 8017f58:	f000 fa5b 	bl	8018412 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	0b9b      	lsrs	r3, r3, #14
 8017f60:	001a      	movs	r2, r3
 8017f62:	2301      	movs	r3, #1
 8017f64:	4013      	ands	r3, r2
 8017f66:	d013      	beq.n	8017f90 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	681a      	ldr	r2, [r3, #0]
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	4962      	ldr	r1, [pc, #392]	@ (80180fc <I2C_ITSlaveCplt+0x23c>)
 8017f74:	400a      	ands	r2, r1
 8017f76:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d020      	beq.n	8017fc2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	685b      	ldr	r3, [r3, #4]
 8017f88:	b29a      	uxth	r2, r3
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017f8e:	e018      	b.n	8017fc2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017f90:	693b      	ldr	r3, [r7, #16]
 8017f92:	0bdb      	lsrs	r3, r3, #15
 8017f94:	001a      	movs	r2, r3
 8017f96:	2301      	movs	r3, #1
 8017f98:	4013      	ands	r3, r2
 8017f9a:	d012      	beq.n	8017fc2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	4956      	ldr	r1, [pc, #344]	@ (8018100 <I2C_ITSlaveCplt+0x240>)
 8017fa8:	400a      	ands	r2, r1
 8017faa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d006      	beq.n	8017fc2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	685b      	ldr	r3, [r3, #4]
 8017fbc:	b29a      	uxth	r2, r3
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8017fc2:	697b      	ldr	r3, [r7, #20]
 8017fc4:	089b      	lsrs	r3, r3, #2
 8017fc6:	001a      	movs	r2, r3
 8017fc8:	2301      	movs	r3, #1
 8017fca:	4013      	ands	r3, r2
 8017fcc:	d020      	beq.n	8018010 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8017fce:	697b      	ldr	r3, [r7, #20]
 8017fd0:	2204      	movs	r2, #4
 8017fd2:	4393      	bics	r3, r2
 8017fd4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fe0:	b2d2      	uxtb	r2, r2
 8017fe2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fe8:	1c5a      	adds	r2, r3, #1
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d00c      	beq.n	8018010 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017ffa:	3b01      	subs	r3, #1
 8017ffc:	b29a      	uxth	r2, r3
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018006:	b29b      	uxth	r3, r3
 8018008:	3b01      	subs	r3, #1
 801800a:	b29a      	uxth	r2, r3
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018014:	b29b      	uxth	r3, r3
 8018016:	2b00      	cmp	r3, #0
 8018018:	d005      	beq.n	8018026 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801801e:	2204      	movs	r2, #4
 8018020:	431a      	orrs	r2, r3
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	2242      	movs	r2, #66	@ 0x42
 801802a:	2100      	movs	r1, #0
 801802c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	2200      	movs	r2, #0
 8018032:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018038:	2b00      	cmp	r3, #0
 801803a:	d013      	beq.n	8018064 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	0011      	movs	r1, r2
 8018044:	0018      	movs	r0, r3
 8018046:	f000 f8b9 	bl	80181bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	2241      	movs	r2, #65	@ 0x41
 801804e:	5c9b      	ldrb	r3, [r3, r2]
 8018050:	b2db      	uxtb	r3, r3
 8018052:	2b28      	cmp	r3, #40	@ 0x28
 8018054:	d147      	bne.n	80180e6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8018056:	697a      	ldr	r2, [r7, #20]
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	0011      	movs	r1, r2
 801805c:	0018      	movs	r0, r3
 801805e:	f000 f853 	bl	8018108 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018062:	e040      	b.n	80180e6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018068:	4a26      	ldr	r2, [pc, #152]	@ (8018104 <I2C_ITSlaveCplt+0x244>)
 801806a:	4293      	cmp	r3, r2
 801806c:	d016      	beq.n	801809c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	0018      	movs	r0, r3
 8018072:	f7ff fded 	bl	8017c50 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	4a22      	ldr	r2, [pc, #136]	@ (8018104 <I2C_ITSlaveCplt+0x244>)
 801807a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2241      	movs	r2, #65	@ 0x41
 8018080:	2120      	movs	r1, #32
 8018082:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2200      	movs	r2, #0
 8018088:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2240      	movs	r2, #64	@ 0x40
 801808e:	2100      	movs	r1, #0
 8018090:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	0018      	movs	r0, r3
 8018096:	f7fe fe7f 	bl	8016d98 <HAL_I2C_ListenCpltCallback>
}
 801809a:	e024      	b.n	80180e6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	2241      	movs	r2, #65	@ 0x41
 80180a0:	5c9b      	ldrb	r3, [r3, r2]
 80180a2:	b2db      	uxtb	r3, r3
 80180a4:	2b22      	cmp	r3, #34	@ 0x22
 80180a6:	d10f      	bne.n	80180c8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	2241      	movs	r2, #65	@ 0x41
 80180ac:	2120      	movs	r1, #32
 80180ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2200      	movs	r2, #0
 80180b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	2240      	movs	r2, #64	@ 0x40
 80180ba:	2100      	movs	r1, #0
 80180bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	0018      	movs	r0, r3
 80180c2:	f7fe fe51 	bl	8016d68 <HAL_I2C_SlaveRxCpltCallback>
}
 80180c6:	e00e      	b.n	80180e6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2241      	movs	r2, #65	@ 0x41
 80180cc:	2120      	movs	r1, #32
 80180ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	2200      	movs	r2, #0
 80180d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	2240      	movs	r2, #64	@ 0x40
 80180da:	2100      	movs	r1, #0
 80180dc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	0018      	movs	r0, r3
 80180e2:	f7fe fe39 	bl	8016d58 <HAL_I2C_SlaveTxCpltCallback>
}
 80180e6:	46c0      	nop			@ (mov r8, r8)
 80180e8:	46bd      	mov	sp, r7
 80180ea:	b006      	add	sp, #24
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	46c0      	nop			@ (mov r8, r8)
 80180f0:	00008001 	.word	0x00008001
 80180f4:	00008002 	.word	0x00008002
 80180f8:	fe00e800 	.word	0xfe00e800
 80180fc:	ffffbfff 	.word	0xffffbfff
 8018100:	ffff7fff 	.word	0xffff7fff
 8018104:	ffff0000 	.word	0xffff0000

08018108 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b082      	sub	sp, #8
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
 8018110:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	4a27      	ldr	r2, [pc, #156]	@ (80181b4 <I2C_ITListenCplt+0xac>)
 8018116:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	2200      	movs	r2, #0
 801811c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	2241      	movs	r2, #65	@ 0x41
 8018122:	2120      	movs	r1, #32
 8018124:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	2242      	movs	r2, #66	@ 0x42
 801812a:	2100      	movs	r1, #0
 801812c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	2200      	movs	r2, #0
 8018132:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8018134:	683b      	ldr	r3, [r7, #0]
 8018136:	089b      	lsrs	r3, r3, #2
 8018138:	001a      	movs	r2, r3
 801813a:	2301      	movs	r3, #1
 801813c:	4013      	ands	r3, r2
 801813e:	d022      	beq.n	8018186 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801814a:	b2d2      	uxtb	r2, r2
 801814c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018152:	1c5a      	adds	r2, r3, #1
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801815c:	2b00      	cmp	r3, #0
 801815e:	d012      	beq.n	8018186 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018164:	3b01      	subs	r3, #1
 8018166:	b29a      	uxth	r2, r3
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018170:	b29b      	uxth	r3, r3
 8018172:	3b01      	subs	r3, #1
 8018174:	b29a      	uxth	r2, r3
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801817e:	2204      	movs	r2, #4
 8018180:	431a      	orrs	r2, r3
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018186:	4a0c      	ldr	r2, [pc, #48]	@ (80181b8 <I2C_ITListenCplt+0xb0>)
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	0011      	movs	r1, r2
 801818c:	0018      	movs	r0, r3
 801818e:	f000 fd55 	bl	8018c3c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	2210      	movs	r2, #16
 8018198:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	2240      	movs	r2, #64	@ 0x40
 801819e:	2100      	movs	r1, #0
 80181a0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	0018      	movs	r0, r3
 80181a6:	f7fe fdf7 	bl	8016d98 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80181aa:	46c0      	nop			@ (mov r8, r8)
 80181ac:	46bd      	mov	sp, r7
 80181ae:	b002      	add	sp, #8
 80181b0:	bd80      	pop	{r7, pc}
 80181b2:	46c0      	nop			@ (mov r8, r8)
 80181b4:	ffff0000 	.word	0xffff0000
 80181b8:	00008003 	.word	0x00008003

080181bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b084      	sub	sp, #16
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
 80181c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80181c6:	200f      	movs	r0, #15
 80181c8:	183b      	adds	r3, r7, r0
 80181ca:	687a      	ldr	r2, [r7, #4]
 80181cc:	2141      	movs	r1, #65	@ 0x41
 80181ce:	5c52      	ldrb	r2, [r2, r1]
 80181d0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	2242      	movs	r2, #66	@ 0x42
 80181d6:	2100      	movs	r1, #0
 80181d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	4a72      	ldr	r2, [pc, #456]	@ (80183a8 <I2C_ITError+0x1ec>)
 80181de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	2200      	movs	r2, #0
 80181e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80181ea:	683b      	ldr	r3, [r7, #0]
 80181ec:	431a      	orrs	r2, r3
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80181f2:	183b      	adds	r3, r7, r0
 80181f4:	781b      	ldrb	r3, [r3, #0]
 80181f6:	2b28      	cmp	r3, #40	@ 0x28
 80181f8:	d007      	beq.n	801820a <I2C_ITError+0x4e>
 80181fa:	183b      	adds	r3, r7, r0
 80181fc:	781b      	ldrb	r3, [r3, #0]
 80181fe:	2b29      	cmp	r3, #41	@ 0x29
 8018200:	d003      	beq.n	801820a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8018202:	183b      	adds	r3, r7, r0
 8018204:	781b      	ldrb	r3, [r3, #0]
 8018206:	2b2a      	cmp	r3, #42	@ 0x2a
 8018208:	d10c      	bne.n	8018224 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	2103      	movs	r1, #3
 801820e:	0018      	movs	r0, r3
 8018210:	f000 fd14 	bl	8018c3c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	2241      	movs	r2, #65	@ 0x41
 8018218:	2128      	movs	r1, #40	@ 0x28
 801821a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	4a63      	ldr	r2, [pc, #396]	@ (80183ac <I2C_ITError+0x1f0>)
 8018220:	635a      	str	r2, [r3, #52]	@ 0x34
 8018222:	e032      	b.n	801828a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018224:	4a62      	ldr	r2, [pc, #392]	@ (80183b0 <I2C_ITError+0x1f4>)
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	0011      	movs	r1, r2
 801822a:	0018      	movs	r0, r3
 801822c:	f000 fd06 	bl	8018c3c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	0018      	movs	r0, r3
 8018234:	f000 f8ed 	bl	8018412 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	2241      	movs	r2, #65	@ 0x41
 801823c:	5c9b      	ldrb	r3, [r3, r2]
 801823e:	b2db      	uxtb	r3, r3
 8018240:	2b60      	cmp	r3, #96	@ 0x60
 8018242:	d01f      	beq.n	8018284 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2241      	movs	r2, #65	@ 0x41
 8018248:	2120      	movs	r1, #32
 801824a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	699b      	ldr	r3, [r3, #24]
 8018252:	2220      	movs	r2, #32
 8018254:	4013      	ands	r3, r2
 8018256:	2b20      	cmp	r3, #32
 8018258:	d114      	bne.n	8018284 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	699b      	ldr	r3, [r3, #24]
 8018260:	2210      	movs	r2, #16
 8018262:	4013      	ands	r3, r2
 8018264:	2b10      	cmp	r3, #16
 8018266:	d109      	bne.n	801827c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	2210      	movs	r2, #16
 801826e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018274:	2204      	movs	r2, #4
 8018276:	431a      	orrs	r2, r3
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	2220      	movs	r2, #32
 8018282:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	2200      	movs	r2, #0
 8018288:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801828e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018294:	2b00      	cmp	r3, #0
 8018296:	d03b      	beq.n	8018310 <I2C_ITError+0x154>
 8018298:	68bb      	ldr	r3, [r7, #8]
 801829a:	2b11      	cmp	r3, #17
 801829c:	d002      	beq.n	80182a4 <I2C_ITError+0xe8>
 801829e:	68bb      	ldr	r3, [r7, #8]
 80182a0:	2b21      	cmp	r3, #33	@ 0x21
 80182a2:	d135      	bne.n	8018310 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	681a      	ldr	r2, [r3, #0]
 80182aa:	2380      	movs	r3, #128	@ 0x80
 80182ac:	01db      	lsls	r3, r3, #7
 80182ae:	401a      	ands	r2, r3
 80182b0:	2380      	movs	r3, #128	@ 0x80
 80182b2:	01db      	lsls	r3, r3, #7
 80182b4:	429a      	cmp	r2, r3
 80182b6:	d107      	bne.n	80182c8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	681a      	ldr	r2, [r3, #0]
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	493c      	ldr	r1, [pc, #240]	@ (80183b4 <I2C_ITError+0x1f8>)
 80182c4:	400a      	ands	r2, r1
 80182c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182cc:	0018      	movs	r0, r3
 80182ce:	f7fd f9c6 	bl	801565e <HAL_DMA_GetState>
 80182d2:	0003      	movs	r3, r0
 80182d4:	2b01      	cmp	r3, #1
 80182d6:	d016      	beq.n	8018306 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182dc:	4a36      	ldr	r2, [pc, #216]	@ (80183b8 <I2C_ITError+0x1fc>)
 80182de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	2240      	movs	r2, #64	@ 0x40
 80182e4:	2100      	movs	r1, #0
 80182e6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182ec:	0018      	movs	r0, r3
 80182ee:	f7fd f8c1 	bl	8015474 <HAL_DMA_Abort_IT>
 80182f2:	1e03      	subs	r3, r0, #0
 80182f4:	d051      	beq.n	801839a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018300:	0018      	movs	r0, r3
 8018302:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018304:	e049      	b.n	801839a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	0018      	movs	r0, r3
 801830a:	f000 f859 	bl	80183c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801830e:	e044      	b.n	801839a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018314:	2b00      	cmp	r3, #0
 8018316:	d03b      	beq.n	8018390 <I2C_ITError+0x1d4>
 8018318:	68bb      	ldr	r3, [r7, #8]
 801831a:	2b12      	cmp	r3, #18
 801831c:	d002      	beq.n	8018324 <I2C_ITError+0x168>
 801831e:	68bb      	ldr	r3, [r7, #8]
 8018320:	2b22      	cmp	r3, #34	@ 0x22
 8018322:	d135      	bne.n	8018390 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	681a      	ldr	r2, [r3, #0]
 801832a:	2380      	movs	r3, #128	@ 0x80
 801832c:	021b      	lsls	r3, r3, #8
 801832e:	401a      	ands	r2, r3
 8018330:	2380      	movs	r3, #128	@ 0x80
 8018332:	021b      	lsls	r3, r3, #8
 8018334:	429a      	cmp	r2, r3
 8018336:	d107      	bne.n	8018348 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	681a      	ldr	r2, [r3, #0]
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	491e      	ldr	r1, [pc, #120]	@ (80183bc <I2C_ITError+0x200>)
 8018344:	400a      	ands	r2, r1
 8018346:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801834c:	0018      	movs	r0, r3
 801834e:	f7fd f986 	bl	801565e <HAL_DMA_GetState>
 8018352:	0003      	movs	r3, r0
 8018354:	2b01      	cmp	r3, #1
 8018356:	d016      	beq.n	8018386 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801835c:	4a16      	ldr	r2, [pc, #88]	@ (80183b8 <I2C_ITError+0x1fc>)
 801835e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	2240      	movs	r2, #64	@ 0x40
 8018364:	2100      	movs	r1, #0
 8018366:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801836c:	0018      	movs	r0, r3
 801836e:	f7fd f881 	bl	8015474 <HAL_DMA_Abort_IT>
 8018372:	1e03      	subs	r3, r0, #0
 8018374:	d013      	beq.n	801839e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801837a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018380:	0018      	movs	r0, r3
 8018382:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018384:	e00b      	b.n	801839e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	0018      	movs	r0, r3
 801838a:	f000 f819 	bl	80183c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801838e:	e006      	b.n	801839e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	0018      	movs	r0, r3
 8018394:	f000 f814 	bl	80183c0 <I2C_TreatErrorCallback>
  }
}
 8018398:	e002      	b.n	80183a0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801839a:	46c0      	nop			@ (mov r8, r8)
 801839c:	e000      	b.n	80183a0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801839e:	46c0      	nop			@ (mov r8, r8)
}
 80183a0:	46c0      	nop			@ (mov r8, r8)
 80183a2:	46bd      	mov	sp, r7
 80183a4:	b004      	add	sp, #16
 80183a6:	bd80      	pop	{r7, pc}
 80183a8:	ffff0000 	.word	0xffff0000
 80183ac:	0801706d 	.word	0x0801706d
 80183b0:	00008003 	.word	0x00008003
 80183b4:	ffffbfff 	.word	0xffffbfff
 80183b8:	080185cb 	.word	0x080185cb
 80183bc:	ffff7fff 	.word	0xffff7fff

080183c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b082      	sub	sp, #8
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2241      	movs	r2, #65	@ 0x41
 80183cc:	5c9b      	ldrb	r3, [r3, r2]
 80183ce:	b2db      	uxtb	r3, r3
 80183d0:	2b60      	cmp	r3, #96	@ 0x60
 80183d2:	d10f      	bne.n	80183f4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	2241      	movs	r2, #65	@ 0x41
 80183d8:	2120      	movs	r1, #32
 80183da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	2200      	movs	r2, #0
 80183e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2240      	movs	r2, #64	@ 0x40
 80183e6:	2100      	movs	r1, #0
 80183e8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	0018      	movs	r0, r3
 80183ee:	f7fe fcf3 	bl	8016dd8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80183f2:	e00a      	b.n	801840a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	2200      	movs	r2, #0
 80183f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	2240      	movs	r2, #64	@ 0x40
 80183fe:	2100      	movs	r1, #0
 8018400:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	0018      	movs	r0, r3
 8018406:	f7fe fcdf 	bl	8016dc8 <HAL_I2C_ErrorCallback>
}
 801840a:	46c0      	nop			@ (mov r8, r8)
 801840c:	46bd      	mov	sp, r7
 801840e:	b002      	add	sp, #8
 8018410:	bd80      	pop	{r7, pc}

08018412 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8018412:	b580      	push	{r7, lr}
 8018414:	b082      	sub	sp, #8
 8018416:	af00      	add	r7, sp, #0
 8018418:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	699b      	ldr	r3, [r3, #24]
 8018420:	2202      	movs	r2, #2
 8018422:	4013      	ands	r3, r2
 8018424:	2b02      	cmp	r3, #2
 8018426:	d103      	bne.n	8018430 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	2200      	movs	r2, #0
 801842e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	699b      	ldr	r3, [r3, #24]
 8018436:	2201      	movs	r2, #1
 8018438:	4013      	ands	r3, r2
 801843a:	2b01      	cmp	r3, #1
 801843c:	d007      	beq.n	801844e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	699a      	ldr	r2, [r3, #24]
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	2101      	movs	r1, #1
 801844a:	430a      	orrs	r2, r1
 801844c:	619a      	str	r2, [r3, #24]
  }
}
 801844e:	46c0      	nop			@ (mov r8, r8)
 8018450:	46bd      	mov	sp, r7
 8018452:	b002      	add	sp, #8
 8018454:	bd80      	pop	{r7, pc}
	...

08018458 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b084      	sub	sp, #16
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018464:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	681a      	ldr	r2, [r3, #0]
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	4920      	ldr	r1, [pc, #128]	@ (80184f4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8018472:	400a      	ands	r2, r1
 8018474:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801847a:	b29b      	uxth	r3, r3
 801847c:	2b00      	cmp	r3, #0
 801847e:	d105      	bne.n	801848c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2120      	movs	r1, #32
 8018484:	0018      	movs	r0, r3
 8018486:	f000 fb4b 	bl	8018b20 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801848a:	e02e      	b.n	80184ea <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018490:	68fa      	ldr	r2, [r7, #12]
 8018492:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8018494:	189a      	adds	r2, r3, r2
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801849e:	b29b      	uxth	r3, r3
 80184a0:	2bff      	cmp	r3, #255	@ 0xff
 80184a2:	d903      	bls.n	80184ac <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	22ff      	movs	r2, #255	@ 0xff
 80184a8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80184aa:	e004      	b.n	80184b6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80184b0:	b29a      	uxth	r2, r3
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184be:	0019      	movs	r1, r3
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	3328      	adds	r3, #40	@ 0x28
 80184c6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80184cc:	f7fc ff2c 	bl	8015328 <HAL_DMA_Start_IT>
 80184d0:	1e03      	subs	r3, r0, #0
 80184d2:	d005      	beq.n	80184e0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	2110      	movs	r1, #16
 80184d8:	0018      	movs	r0, r3
 80184da:	f7ff fe6f 	bl	80181bc <I2C_ITError>
}
 80184de:	e004      	b.n	80184ea <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	2140      	movs	r1, #64	@ 0x40
 80184e4:	0018      	movs	r0, r3
 80184e6:	f000 fb1b 	bl	8018b20 <I2C_Enable_IRQ>
}
 80184ea:	46c0      	nop			@ (mov r8, r8)
 80184ec:	46bd      	mov	sp, r7
 80184ee:	b004      	add	sp, #16
 80184f0:	bd80      	pop	{r7, pc}
 80184f2:	46c0      	nop			@ (mov r8, r8)
 80184f4:	ffffbfff 	.word	0xffffbfff

080184f8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b084      	sub	sp, #16
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018504:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	681a      	ldr	r2, [r3, #0]
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	4920      	ldr	r1, [pc, #128]	@ (8018594 <I2C_DMAMasterReceiveCplt+0x9c>)
 8018512:	400a      	ands	r2, r1
 8018514:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801851a:	b29b      	uxth	r3, r3
 801851c:	2b00      	cmp	r3, #0
 801851e:	d105      	bne.n	801852c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	2120      	movs	r1, #32
 8018524:	0018      	movs	r0, r3
 8018526:	f000 fafb 	bl	8018b20 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801852a:	e02e      	b.n	801858a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018530:	68fa      	ldr	r2, [r7, #12]
 8018532:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8018534:	189a      	adds	r2, r3, r2
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801853e:	b29b      	uxth	r3, r3
 8018540:	2bff      	cmp	r3, #255	@ 0xff
 8018542:	d903      	bls.n	801854c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	22ff      	movs	r2, #255	@ 0xff
 8018548:	851a      	strh	r2, [r3, #40]	@ 0x28
 801854a:	e004      	b.n	8018556 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018550:	b29a      	uxth	r2, r3
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	3324      	adds	r3, #36	@ 0x24
 8018560:	0019      	movs	r1, r3
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018566:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801856c:	f7fc fedc 	bl	8015328 <HAL_DMA_Start_IT>
 8018570:	1e03      	subs	r3, r0, #0
 8018572:	d005      	beq.n	8018580 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	2110      	movs	r1, #16
 8018578:	0018      	movs	r0, r3
 801857a:	f7ff fe1f 	bl	80181bc <I2C_ITError>
}
 801857e:	e004      	b.n	801858a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	2140      	movs	r1, #64	@ 0x40
 8018584:	0018      	movs	r0, r3
 8018586:	f000 facb 	bl	8018b20 <I2C_Enable_IRQ>
}
 801858a:	46c0      	nop			@ (mov r8, r8)
 801858c:	46bd      	mov	sp, r7
 801858e:	b004      	add	sp, #16
 8018590:	bd80      	pop	{r7, pc}
 8018592:	46c0      	nop			@ (mov r8, r8)
 8018594:	ffff7fff 	.word	0xffff7fff

08018598 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b084      	sub	sp, #16
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185a4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	685a      	ldr	r2, [r3, #4]
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	2180      	movs	r1, #128	@ 0x80
 80185b2:	0209      	lsls	r1, r1, #8
 80185b4:	430a      	orrs	r2, r1
 80185b6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	2110      	movs	r1, #16
 80185bc:	0018      	movs	r0, r3
 80185be:	f7ff fdfd 	bl	80181bc <I2C_ITError>
}
 80185c2:	46c0      	nop			@ (mov r8, r8)
 80185c4:	46bd      	mov	sp, r7
 80185c6:	b004      	add	sp, #16
 80185c8:	bd80      	pop	{r7, pc}

080185ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80185ca:	b580      	push	{r7, lr}
 80185cc:	b084      	sub	sp, #16
 80185ce:	af00      	add	r7, sp, #0
 80185d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d003      	beq.n	80185e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80185e4:	2200      	movs	r2, #0
 80185e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d003      	beq.n	80185f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185f4:	2200      	movs	r2, #0
 80185f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	0018      	movs	r0, r3
 80185fc:	f7ff fee0 	bl	80183c0 <I2C_TreatErrorCallback>
}
 8018600:	46c0      	nop			@ (mov r8, r8)
 8018602:	46bd      	mov	sp, r7
 8018604:	b004      	add	sp, #16
 8018606:	bd80      	pop	{r7, pc}

08018608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b084      	sub	sp, #16
 801860c:	af00      	add	r7, sp, #0
 801860e:	60f8      	str	r0, [r7, #12]
 8018610:	60b9      	str	r1, [r7, #8]
 8018612:	603b      	str	r3, [r7, #0]
 8018614:	1dfb      	adds	r3, r7, #7
 8018616:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018618:	e030      	b.n	801867c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801861a:	683b      	ldr	r3, [r7, #0]
 801861c:	3301      	adds	r3, #1
 801861e:	d02d      	beq.n	801867c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018620:	f7fc f94e 	bl	80148c0 <HAL_GetTick>
 8018624:	0002      	movs	r2, r0
 8018626:	69bb      	ldr	r3, [r7, #24]
 8018628:	1ad3      	subs	r3, r2, r3
 801862a:	683a      	ldr	r2, [r7, #0]
 801862c:	429a      	cmp	r2, r3
 801862e:	d302      	bcc.n	8018636 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8018630:	683b      	ldr	r3, [r7, #0]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d122      	bne.n	801867c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	699b      	ldr	r3, [r3, #24]
 801863c:	68ba      	ldr	r2, [r7, #8]
 801863e:	4013      	ands	r3, r2
 8018640:	68ba      	ldr	r2, [r7, #8]
 8018642:	1ad3      	subs	r3, r2, r3
 8018644:	425a      	negs	r2, r3
 8018646:	4153      	adcs	r3, r2
 8018648:	b2db      	uxtb	r3, r3
 801864a:	001a      	movs	r2, r3
 801864c:	1dfb      	adds	r3, r7, #7
 801864e:	781b      	ldrb	r3, [r3, #0]
 8018650:	429a      	cmp	r2, r3
 8018652:	d113      	bne.n	801867c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018658:	2220      	movs	r2, #32
 801865a:	431a      	orrs	r2, r3
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	2241      	movs	r2, #65	@ 0x41
 8018664:	2120      	movs	r1, #32
 8018666:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	2242      	movs	r2, #66	@ 0x42
 801866c:	2100      	movs	r1, #0
 801866e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	2240      	movs	r2, #64	@ 0x40
 8018674:	2100      	movs	r1, #0
 8018676:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8018678:	2301      	movs	r3, #1
 801867a:	e00f      	b.n	801869c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	699b      	ldr	r3, [r3, #24]
 8018682:	68ba      	ldr	r2, [r7, #8]
 8018684:	4013      	ands	r3, r2
 8018686:	68ba      	ldr	r2, [r7, #8]
 8018688:	1ad3      	subs	r3, r2, r3
 801868a:	425a      	negs	r2, r3
 801868c:	4153      	adcs	r3, r2
 801868e:	b2db      	uxtb	r3, r3
 8018690:	001a      	movs	r2, r3
 8018692:	1dfb      	adds	r3, r7, #7
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	429a      	cmp	r2, r3
 8018698:	d0bf      	beq.n	801861a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801869a:	2300      	movs	r3, #0
}
 801869c:	0018      	movs	r0, r3
 801869e:	46bd      	mov	sp, r7
 80186a0:	b004      	add	sp, #16
 80186a2:	bd80      	pop	{r7, pc}

080186a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b084      	sub	sp, #16
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	60f8      	str	r0, [r7, #12]
 80186ac:	60b9      	str	r1, [r7, #8]
 80186ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80186b0:	e032      	b.n	8018718 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80186b2:	687a      	ldr	r2, [r7, #4]
 80186b4:	68b9      	ldr	r1, [r7, #8]
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	0018      	movs	r0, r3
 80186ba:	f000 f8ff 	bl	80188bc <I2C_IsErrorOccurred>
 80186be:	1e03      	subs	r3, r0, #0
 80186c0:	d001      	beq.n	80186c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80186c2:	2301      	movs	r3, #1
 80186c4:	e030      	b.n	8018728 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80186c6:	68bb      	ldr	r3, [r7, #8]
 80186c8:	3301      	adds	r3, #1
 80186ca:	d025      	beq.n	8018718 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80186cc:	f7fc f8f8 	bl	80148c0 <HAL_GetTick>
 80186d0:	0002      	movs	r2, r0
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	1ad3      	subs	r3, r2, r3
 80186d6:	68ba      	ldr	r2, [r7, #8]
 80186d8:	429a      	cmp	r2, r3
 80186da:	d302      	bcc.n	80186e2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80186dc:	68bb      	ldr	r3, [r7, #8]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d11a      	bne.n	8018718 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	699b      	ldr	r3, [r3, #24]
 80186e8:	2202      	movs	r2, #2
 80186ea:	4013      	ands	r3, r2
 80186ec:	2b02      	cmp	r3, #2
 80186ee:	d013      	beq.n	8018718 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80186f4:	2220      	movs	r2, #32
 80186f6:	431a      	orrs	r2, r3
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	2241      	movs	r2, #65	@ 0x41
 8018700:	2120      	movs	r1, #32
 8018702:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	2242      	movs	r2, #66	@ 0x42
 8018708:	2100      	movs	r1, #0
 801870a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	2240      	movs	r2, #64	@ 0x40
 8018710:	2100      	movs	r1, #0
 8018712:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8018714:	2301      	movs	r3, #1
 8018716:	e007      	b.n	8018728 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	699b      	ldr	r3, [r3, #24]
 801871e:	2202      	movs	r2, #2
 8018720:	4013      	ands	r3, r2
 8018722:	2b02      	cmp	r3, #2
 8018724:	d1c5      	bne.n	80186b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8018726:	2300      	movs	r3, #0
}
 8018728:	0018      	movs	r0, r3
 801872a:	46bd      	mov	sp, r7
 801872c:	b004      	add	sp, #16
 801872e:	bd80      	pop	{r7, pc}

08018730 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b084      	sub	sp, #16
 8018734:	af00      	add	r7, sp, #0
 8018736:	60f8      	str	r0, [r7, #12]
 8018738:	60b9      	str	r1, [r7, #8]
 801873a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801873c:	e02f      	b.n	801879e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801873e:	687a      	ldr	r2, [r7, #4]
 8018740:	68b9      	ldr	r1, [r7, #8]
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	0018      	movs	r0, r3
 8018746:	f000 f8b9 	bl	80188bc <I2C_IsErrorOccurred>
 801874a:	1e03      	subs	r3, r0, #0
 801874c:	d001      	beq.n	8018752 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801874e:	2301      	movs	r3, #1
 8018750:	e02d      	b.n	80187ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018752:	f7fc f8b5 	bl	80148c0 <HAL_GetTick>
 8018756:	0002      	movs	r2, r0
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	1ad3      	subs	r3, r2, r3
 801875c:	68ba      	ldr	r2, [r7, #8]
 801875e:	429a      	cmp	r2, r3
 8018760:	d302      	bcc.n	8018768 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8018762:	68bb      	ldr	r3, [r7, #8]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d11a      	bne.n	801879e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	699b      	ldr	r3, [r3, #24]
 801876e:	2220      	movs	r2, #32
 8018770:	4013      	ands	r3, r2
 8018772:	2b20      	cmp	r3, #32
 8018774:	d013      	beq.n	801879e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801877a:	2220      	movs	r2, #32
 801877c:	431a      	orrs	r2, r3
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	2241      	movs	r2, #65	@ 0x41
 8018786:	2120      	movs	r1, #32
 8018788:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	2242      	movs	r2, #66	@ 0x42
 801878e:	2100      	movs	r1, #0
 8018790:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	2240      	movs	r2, #64	@ 0x40
 8018796:	2100      	movs	r1, #0
 8018798:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801879a:	2301      	movs	r3, #1
 801879c:	e007      	b.n	80187ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	699b      	ldr	r3, [r3, #24]
 80187a4:	2220      	movs	r2, #32
 80187a6:	4013      	ands	r3, r2
 80187a8:	2b20      	cmp	r3, #32
 80187aa:	d1c8      	bne.n	801873e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80187ac:	2300      	movs	r3, #0
}
 80187ae:	0018      	movs	r0, r3
 80187b0:	46bd      	mov	sp, r7
 80187b2:	b004      	add	sp, #16
 80187b4:	bd80      	pop	{r7, pc}
	...

080187b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b084      	sub	sp, #16
 80187bc:	af00      	add	r7, sp, #0
 80187be:	60f8      	str	r0, [r7, #12]
 80187c0:	60b9      	str	r1, [r7, #8]
 80187c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80187c4:	e06b      	b.n	801889e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80187c6:	687a      	ldr	r2, [r7, #4]
 80187c8:	68b9      	ldr	r1, [r7, #8]
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	0018      	movs	r0, r3
 80187ce:	f000 f875 	bl	80188bc <I2C_IsErrorOccurred>
 80187d2:	1e03      	subs	r3, r0, #0
 80187d4:	d001      	beq.n	80187da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80187d6:	2301      	movs	r3, #1
 80187d8:	e069      	b.n	80188ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	699b      	ldr	r3, [r3, #24]
 80187e0:	2220      	movs	r2, #32
 80187e2:	4013      	ands	r3, r2
 80187e4:	2b20      	cmp	r3, #32
 80187e6:	d138      	bne.n	801885a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	699b      	ldr	r3, [r3, #24]
 80187ee:	2204      	movs	r2, #4
 80187f0:	4013      	ands	r3, r2
 80187f2:	2b04      	cmp	r3, #4
 80187f4:	d105      	bne.n	8018802 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d001      	beq.n	8018802 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80187fe:	2300      	movs	r3, #0
 8018800:	e055      	b.n	80188ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	699b      	ldr	r3, [r3, #24]
 8018808:	2210      	movs	r2, #16
 801880a:	4013      	ands	r3, r2
 801880c:	2b10      	cmp	r3, #16
 801880e:	d107      	bne.n	8018820 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	2210      	movs	r2, #16
 8018816:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	2204      	movs	r2, #4
 801881c:	645a      	str	r2, [r3, #68]	@ 0x44
 801881e:	e002      	b.n	8018826 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	2200      	movs	r2, #0
 8018824:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	2220      	movs	r2, #32
 801882c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	685a      	ldr	r2, [r3, #4]
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	491f      	ldr	r1, [pc, #124]	@ (80188b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801883a:	400a      	ands	r2, r1
 801883c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	2241      	movs	r2, #65	@ 0x41
 8018842:	2120      	movs	r1, #32
 8018844:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	2242      	movs	r2, #66	@ 0x42
 801884a:	2100      	movs	r1, #0
 801884c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	2240      	movs	r2, #64	@ 0x40
 8018852:	2100      	movs	r1, #0
 8018854:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018856:	2301      	movs	r3, #1
 8018858:	e029      	b.n	80188ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801885a:	f7fc f831 	bl	80148c0 <HAL_GetTick>
 801885e:	0002      	movs	r2, r0
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	1ad3      	subs	r3, r2, r3
 8018864:	68ba      	ldr	r2, [r7, #8]
 8018866:	429a      	cmp	r2, r3
 8018868:	d302      	bcc.n	8018870 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801886a:	68bb      	ldr	r3, [r7, #8]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d116      	bne.n	801889e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	699b      	ldr	r3, [r3, #24]
 8018876:	2204      	movs	r2, #4
 8018878:	4013      	ands	r3, r2
 801887a:	2b04      	cmp	r3, #4
 801887c:	d00f      	beq.n	801889e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018882:	2220      	movs	r2, #32
 8018884:	431a      	orrs	r2, r3
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	2241      	movs	r2, #65	@ 0x41
 801888e:	2120      	movs	r1, #32
 8018890:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	2240      	movs	r2, #64	@ 0x40
 8018896:	2100      	movs	r1, #0
 8018898:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801889a:	2301      	movs	r3, #1
 801889c:	e007      	b.n	80188ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	699b      	ldr	r3, [r3, #24]
 80188a4:	2204      	movs	r2, #4
 80188a6:	4013      	ands	r3, r2
 80188a8:	2b04      	cmp	r3, #4
 80188aa:	d18c      	bne.n	80187c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80188ac:	2300      	movs	r3, #0
}
 80188ae:	0018      	movs	r0, r3
 80188b0:	46bd      	mov	sp, r7
 80188b2:	b004      	add	sp, #16
 80188b4:	bd80      	pop	{r7, pc}
 80188b6:	46c0      	nop			@ (mov r8, r8)
 80188b8:	fe00e800 	.word	0xfe00e800

080188bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b08a      	sub	sp, #40	@ 0x28
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	60f8      	str	r0, [r7, #12]
 80188c4:	60b9      	str	r1, [r7, #8]
 80188c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80188c8:	2327      	movs	r3, #39	@ 0x27
 80188ca:	18fb      	adds	r3, r7, r3
 80188cc:	2200      	movs	r2, #0
 80188ce:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	699b      	ldr	r3, [r3, #24]
 80188d6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80188d8:	2300      	movs	r3, #0
 80188da:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80188e0:	69bb      	ldr	r3, [r7, #24]
 80188e2:	2210      	movs	r2, #16
 80188e4:	4013      	ands	r3, r2
 80188e6:	d100      	bne.n	80188ea <I2C_IsErrorOccurred+0x2e>
 80188e8:	e079      	b.n	80189de <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	2210      	movs	r2, #16
 80188f0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80188f2:	e057      	b.n	80189a4 <I2C_IsErrorOccurred+0xe8>
 80188f4:	2227      	movs	r2, #39	@ 0x27
 80188f6:	18bb      	adds	r3, r7, r2
 80188f8:	18ba      	adds	r2, r7, r2
 80188fa:	7812      	ldrb	r2, [r2, #0]
 80188fc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80188fe:	68bb      	ldr	r3, [r7, #8]
 8018900:	3301      	adds	r3, #1
 8018902:	d04f      	beq.n	80189a4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8018904:	f7fb ffdc 	bl	80148c0 <HAL_GetTick>
 8018908:	0002      	movs	r2, r0
 801890a:	69fb      	ldr	r3, [r7, #28]
 801890c:	1ad3      	subs	r3, r2, r3
 801890e:	68ba      	ldr	r2, [r7, #8]
 8018910:	429a      	cmp	r2, r3
 8018912:	d302      	bcc.n	801891a <I2C_IsErrorOccurred+0x5e>
 8018914:	68bb      	ldr	r3, [r7, #8]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d144      	bne.n	80189a4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	685a      	ldr	r2, [r3, #4]
 8018920:	2380      	movs	r3, #128	@ 0x80
 8018922:	01db      	lsls	r3, r3, #7
 8018924:	4013      	ands	r3, r2
 8018926:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018928:	2013      	movs	r0, #19
 801892a:	183b      	adds	r3, r7, r0
 801892c:	68fa      	ldr	r2, [r7, #12]
 801892e:	2142      	movs	r1, #66	@ 0x42
 8018930:	5c52      	ldrb	r2, [r2, r1]
 8018932:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	699a      	ldr	r2, [r3, #24]
 801893a:	2380      	movs	r3, #128	@ 0x80
 801893c:	021b      	lsls	r3, r3, #8
 801893e:	401a      	ands	r2, r3
 8018940:	2380      	movs	r3, #128	@ 0x80
 8018942:	021b      	lsls	r3, r3, #8
 8018944:	429a      	cmp	r2, r3
 8018946:	d126      	bne.n	8018996 <I2C_IsErrorOccurred+0xda>
 8018948:	697a      	ldr	r2, [r7, #20]
 801894a:	2380      	movs	r3, #128	@ 0x80
 801894c:	01db      	lsls	r3, r3, #7
 801894e:	429a      	cmp	r2, r3
 8018950:	d021      	beq.n	8018996 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8018952:	183b      	adds	r3, r7, r0
 8018954:	781b      	ldrb	r3, [r3, #0]
 8018956:	2b20      	cmp	r3, #32
 8018958:	d01d      	beq.n	8018996 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	685a      	ldr	r2, [r3, #4]
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	2180      	movs	r1, #128	@ 0x80
 8018966:	01c9      	lsls	r1, r1, #7
 8018968:	430a      	orrs	r2, r1
 801896a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801896c:	f7fb ffa8 	bl	80148c0 <HAL_GetTick>
 8018970:	0003      	movs	r3, r0
 8018972:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018974:	e00f      	b.n	8018996 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8018976:	f7fb ffa3 	bl	80148c0 <HAL_GetTick>
 801897a:	0002      	movs	r2, r0
 801897c:	69fb      	ldr	r3, [r7, #28]
 801897e:	1ad3      	subs	r3, r2, r3
 8018980:	2b19      	cmp	r3, #25
 8018982:	d908      	bls.n	8018996 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8018984:	6a3b      	ldr	r3, [r7, #32]
 8018986:	2220      	movs	r2, #32
 8018988:	4313      	orrs	r3, r2
 801898a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801898c:	2327      	movs	r3, #39	@ 0x27
 801898e:	18fb      	adds	r3, r7, r3
 8018990:	2201      	movs	r2, #1
 8018992:	701a      	strb	r2, [r3, #0]

              break;
 8018994:	e006      	b.n	80189a4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	699b      	ldr	r3, [r3, #24]
 801899c:	2220      	movs	r2, #32
 801899e:	4013      	ands	r3, r2
 80189a0:	2b20      	cmp	r3, #32
 80189a2:	d1e8      	bne.n	8018976 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	699b      	ldr	r3, [r3, #24]
 80189aa:	2220      	movs	r2, #32
 80189ac:	4013      	ands	r3, r2
 80189ae:	2b20      	cmp	r3, #32
 80189b0:	d004      	beq.n	80189bc <I2C_IsErrorOccurred+0x100>
 80189b2:	2327      	movs	r3, #39	@ 0x27
 80189b4:	18fb      	adds	r3, r7, r3
 80189b6:	781b      	ldrb	r3, [r3, #0]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d09b      	beq.n	80188f4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80189bc:	2327      	movs	r3, #39	@ 0x27
 80189be:	18fb      	adds	r3, r7, r3
 80189c0:	781b      	ldrb	r3, [r3, #0]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d103      	bne.n	80189ce <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	2220      	movs	r2, #32
 80189cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80189ce:	6a3b      	ldr	r3, [r7, #32]
 80189d0:	2204      	movs	r2, #4
 80189d2:	4313      	orrs	r3, r2
 80189d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80189d6:	2327      	movs	r3, #39	@ 0x27
 80189d8:	18fb      	adds	r3, r7, r3
 80189da:	2201      	movs	r2, #1
 80189dc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	699b      	ldr	r3, [r3, #24]
 80189e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80189e6:	69ba      	ldr	r2, [r7, #24]
 80189e8:	2380      	movs	r3, #128	@ 0x80
 80189ea:	005b      	lsls	r3, r3, #1
 80189ec:	4013      	ands	r3, r2
 80189ee:	d00c      	beq.n	8018a0a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80189f0:	6a3b      	ldr	r3, [r7, #32]
 80189f2:	2201      	movs	r2, #1
 80189f4:	4313      	orrs	r3, r2
 80189f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	2280      	movs	r2, #128	@ 0x80
 80189fe:	0052      	lsls	r2, r2, #1
 8018a00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a02:	2327      	movs	r3, #39	@ 0x27
 8018a04:	18fb      	adds	r3, r7, r3
 8018a06:	2201      	movs	r2, #1
 8018a08:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018a0a:	69ba      	ldr	r2, [r7, #24]
 8018a0c:	2380      	movs	r3, #128	@ 0x80
 8018a0e:	00db      	lsls	r3, r3, #3
 8018a10:	4013      	ands	r3, r2
 8018a12:	d00c      	beq.n	8018a2e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018a14:	6a3b      	ldr	r3, [r7, #32]
 8018a16:	2208      	movs	r2, #8
 8018a18:	4313      	orrs	r3, r2
 8018a1a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	2280      	movs	r2, #128	@ 0x80
 8018a22:	00d2      	lsls	r2, r2, #3
 8018a24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a26:	2327      	movs	r3, #39	@ 0x27
 8018a28:	18fb      	adds	r3, r7, r3
 8018a2a:	2201      	movs	r2, #1
 8018a2c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018a2e:	69ba      	ldr	r2, [r7, #24]
 8018a30:	2380      	movs	r3, #128	@ 0x80
 8018a32:	009b      	lsls	r3, r3, #2
 8018a34:	4013      	ands	r3, r2
 8018a36:	d00c      	beq.n	8018a52 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018a38:	6a3b      	ldr	r3, [r7, #32]
 8018a3a:	2202      	movs	r2, #2
 8018a3c:	4313      	orrs	r3, r2
 8018a3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	2280      	movs	r2, #128	@ 0x80
 8018a46:	0092      	lsls	r2, r2, #2
 8018a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a4a:	2327      	movs	r3, #39	@ 0x27
 8018a4c:	18fb      	adds	r3, r7, r3
 8018a4e:	2201      	movs	r2, #1
 8018a50:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8018a52:	2327      	movs	r3, #39	@ 0x27
 8018a54:	18fb      	adds	r3, r7, r3
 8018a56:	781b      	ldrb	r3, [r3, #0]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d01d      	beq.n	8018a98 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	0018      	movs	r0, r3
 8018a60:	f7ff fcd7 	bl	8018412 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	685a      	ldr	r2, [r3, #4]
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	490e      	ldr	r1, [pc, #56]	@ (8018aa8 <I2C_IsErrorOccurred+0x1ec>)
 8018a70:	400a      	ands	r2, r1
 8018a72:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018a78:	6a3b      	ldr	r3, [r7, #32]
 8018a7a:	431a      	orrs	r2, r3
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	2241      	movs	r2, #65	@ 0x41
 8018a84:	2120      	movs	r1, #32
 8018a86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	2242      	movs	r2, #66	@ 0x42
 8018a8c:	2100      	movs	r1, #0
 8018a8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	2240      	movs	r2, #64	@ 0x40
 8018a94:	2100      	movs	r1, #0
 8018a96:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018a98:	2327      	movs	r3, #39	@ 0x27
 8018a9a:	18fb      	adds	r3, r7, r3
 8018a9c:	781b      	ldrb	r3, [r3, #0]
}
 8018a9e:	0018      	movs	r0, r3
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	b00a      	add	sp, #40	@ 0x28
 8018aa4:	bd80      	pop	{r7, pc}
 8018aa6:	46c0      	nop			@ (mov r8, r8)
 8018aa8:	fe00e800 	.word	0xfe00e800

08018aac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018aac:	b590      	push	{r4, r7, lr}
 8018aae:	b087      	sub	sp, #28
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	60f8      	str	r0, [r7, #12]
 8018ab4:	0008      	movs	r0, r1
 8018ab6:	0011      	movs	r1, r2
 8018ab8:	607b      	str	r3, [r7, #4]
 8018aba:	240a      	movs	r4, #10
 8018abc:	193b      	adds	r3, r7, r4
 8018abe:	1c02      	adds	r2, r0, #0
 8018ac0:	801a      	strh	r2, [r3, #0]
 8018ac2:	2009      	movs	r0, #9
 8018ac4:	183b      	adds	r3, r7, r0
 8018ac6:	1c0a      	adds	r2, r1, #0
 8018ac8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018aca:	193b      	adds	r3, r7, r4
 8018acc:	881b      	ldrh	r3, [r3, #0]
 8018ace:	059b      	lsls	r3, r3, #22
 8018ad0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018ad2:	183b      	adds	r3, r7, r0
 8018ad4:	781b      	ldrb	r3, [r3, #0]
 8018ad6:	0419      	lsls	r1, r3, #16
 8018ad8:	23ff      	movs	r3, #255	@ 0xff
 8018ada:	041b      	lsls	r3, r3, #16
 8018adc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018ade:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ae6:	4313      	orrs	r3, r2
 8018ae8:	005b      	lsls	r3, r3, #1
 8018aea:	085b      	lsrs	r3, r3, #1
 8018aec:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	685b      	ldr	r3, [r3, #4]
 8018af4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018af6:	0d51      	lsrs	r1, r2, #21
 8018af8:	2280      	movs	r2, #128	@ 0x80
 8018afa:	00d2      	lsls	r2, r2, #3
 8018afc:	400a      	ands	r2, r1
 8018afe:	4907      	ldr	r1, [pc, #28]	@ (8018b1c <I2C_TransferConfig+0x70>)
 8018b00:	430a      	orrs	r2, r1
 8018b02:	43d2      	mvns	r2, r2
 8018b04:	401a      	ands	r2, r3
 8018b06:	0011      	movs	r1, r2
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	697a      	ldr	r2, [r7, #20]
 8018b0e:	430a      	orrs	r2, r1
 8018b10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018b12:	46c0      	nop			@ (mov r8, r8)
 8018b14:	46bd      	mov	sp, r7
 8018b16:	b007      	add	sp, #28
 8018b18:	bd90      	pop	{r4, r7, pc}
 8018b1a:	46c0      	nop			@ (mov r8, r8)
 8018b1c:	03ff63ff 	.word	0x03ff63ff

08018b20 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b084      	sub	sp, #16
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
 8018b28:	000a      	movs	r2, r1
 8018b2a:	1cbb      	adds	r3, r7, #2
 8018b2c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018b2e:	2300      	movs	r3, #0
 8018b30:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018b36:	4b3e      	ldr	r3, [pc, #248]	@ (8018c30 <I2C_Enable_IRQ+0x110>)
 8018b38:	429a      	cmp	r2, r3
 8018b3a:	d035      	beq.n	8018ba8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018b40:	4b3c      	ldr	r3, [pc, #240]	@ (8018c34 <I2C_Enable_IRQ+0x114>)
 8018b42:	429a      	cmp	r2, r3
 8018b44:	d030      	beq.n	8018ba8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8018c38 <I2C_Enable_IRQ+0x118>)
 8018b4c:	429a      	cmp	r2, r3
 8018b4e:	d02b      	beq.n	8018ba8 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018b50:	1cbb      	adds	r3, r7, #2
 8018b52:	2200      	movs	r2, #0
 8018b54:	5e9b      	ldrsh	r3, [r3, r2]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	da03      	bge.n	8018b62 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	22b8      	movs	r2, #184	@ 0xb8
 8018b5e:	4313      	orrs	r3, r2
 8018b60:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018b62:	1cbb      	adds	r3, r7, #2
 8018b64:	881b      	ldrh	r3, [r3, #0]
 8018b66:	2201      	movs	r2, #1
 8018b68:	4013      	ands	r3, r2
 8018b6a:	d003      	beq.n	8018b74 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	22f2      	movs	r2, #242	@ 0xf2
 8018b70:	4313      	orrs	r3, r2
 8018b72:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018b74:	1cbb      	adds	r3, r7, #2
 8018b76:	881b      	ldrh	r3, [r3, #0]
 8018b78:	2202      	movs	r2, #2
 8018b7a:	4013      	ands	r3, r2
 8018b7c:	d003      	beq.n	8018b86 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	22f4      	movs	r2, #244	@ 0xf4
 8018b82:	4313      	orrs	r3, r2
 8018b84:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018b86:	1cbb      	adds	r3, r7, #2
 8018b88:	881b      	ldrh	r3, [r3, #0]
 8018b8a:	2b10      	cmp	r3, #16
 8018b8c:	d103      	bne.n	8018b96 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	2290      	movs	r2, #144	@ 0x90
 8018b92:	4313      	orrs	r3, r2
 8018b94:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018b96:	1cbb      	adds	r3, r7, #2
 8018b98:	881b      	ldrh	r3, [r3, #0]
 8018b9a:	2b20      	cmp	r3, #32
 8018b9c:	d13c      	bne.n	8018c18 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	2220      	movs	r2, #32
 8018ba2:	4313      	orrs	r3, r2
 8018ba4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018ba6:	e037      	b.n	8018c18 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018ba8:	1cbb      	adds	r3, r7, #2
 8018baa:	2200      	movs	r2, #0
 8018bac:	5e9b      	ldrsh	r3, [r3, r2]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	da03      	bge.n	8018bba <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	22b8      	movs	r2, #184	@ 0xb8
 8018bb6:	4313      	orrs	r3, r2
 8018bb8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018bba:	1cbb      	adds	r3, r7, #2
 8018bbc:	881b      	ldrh	r3, [r3, #0]
 8018bbe:	2201      	movs	r2, #1
 8018bc0:	4013      	ands	r3, r2
 8018bc2:	d003      	beq.n	8018bcc <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	22f2      	movs	r2, #242	@ 0xf2
 8018bc8:	4313      	orrs	r3, r2
 8018bca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018bcc:	1cbb      	adds	r3, r7, #2
 8018bce:	881b      	ldrh	r3, [r3, #0]
 8018bd0:	2202      	movs	r2, #2
 8018bd2:	4013      	ands	r3, r2
 8018bd4:	d003      	beq.n	8018bde <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	22f4      	movs	r2, #244	@ 0xf4
 8018bda:	4313      	orrs	r3, r2
 8018bdc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018bde:	1cbb      	adds	r3, r7, #2
 8018be0:	881b      	ldrh	r3, [r3, #0]
 8018be2:	2b10      	cmp	r3, #16
 8018be4:	d103      	bne.n	8018bee <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	2290      	movs	r2, #144	@ 0x90
 8018bea:	4313      	orrs	r3, r2
 8018bec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018bee:	1cbb      	adds	r3, r7, #2
 8018bf0:	881b      	ldrh	r3, [r3, #0]
 8018bf2:	2b20      	cmp	r3, #32
 8018bf4:	d103      	bne.n	8018bfe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	2260      	movs	r2, #96	@ 0x60
 8018bfa:	4313      	orrs	r3, r2
 8018bfc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018c02:	4b0d      	ldr	r3, [pc, #52]	@ (8018c38 <I2C_Enable_IRQ+0x118>)
 8018c04:	429a      	cmp	r2, r3
 8018c06:	d007      	beq.n	8018c18 <I2C_Enable_IRQ+0xf8>
 8018c08:	1cbb      	adds	r3, r7, #2
 8018c0a:	881b      	ldrh	r3, [r3, #0]
 8018c0c:	2b40      	cmp	r3, #64	@ 0x40
 8018c0e:	d103      	bne.n	8018c18 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	2240      	movs	r2, #64	@ 0x40
 8018c14:	4313      	orrs	r3, r2
 8018c16:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	6819      	ldr	r1, [r3, #0]
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	68fa      	ldr	r2, [r7, #12]
 8018c24:	430a      	orrs	r2, r1
 8018c26:	601a      	str	r2, [r3, #0]
}
 8018c28:	46c0      	nop			@ (mov r8, r8)
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	b004      	add	sp, #16
 8018c2e:	bd80      	pop	{r7, pc}
 8018c30:	08017295 	.word	0x08017295
 8018c34:	0801770d 	.word	0x0801770d
 8018c38:	080174ad 	.word	0x080174ad

08018c3c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b084      	sub	sp, #16
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
 8018c44:	000a      	movs	r2, r1
 8018c46:	1cbb      	adds	r3, r7, #2
 8018c48:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018c4e:	1cbb      	adds	r3, r7, #2
 8018c50:	881b      	ldrh	r3, [r3, #0]
 8018c52:	2201      	movs	r2, #1
 8018c54:	4013      	ands	r3, r2
 8018c56:	d010      	beq.n	8018c7a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	2242      	movs	r2, #66	@ 0x42
 8018c5c:	4313      	orrs	r3, r2
 8018c5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	2241      	movs	r2, #65	@ 0x41
 8018c64:	5c9b      	ldrb	r3, [r3, r2]
 8018c66:	b2db      	uxtb	r3, r3
 8018c68:	001a      	movs	r2, r3
 8018c6a:	2328      	movs	r3, #40	@ 0x28
 8018c6c:	4013      	ands	r3, r2
 8018c6e:	2b28      	cmp	r3, #40	@ 0x28
 8018c70:	d003      	beq.n	8018c7a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	22b0      	movs	r2, #176	@ 0xb0
 8018c76:	4313      	orrs	r3, r2
 8018c78:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018c7a:	1cbb      	adds	r3, r7, #2
 8018c7c:	881b      	ldrh	r3, [r3, #0]
 8018c7e:	2202      	movs	r2, #2
 8018c80:	4013      	ands	r3, r2
 8018c82:	d010      	beq.n	8018ca6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	2244      	movs	r2, #68	@ 0x44
 8018c88:	4313      	orrs	r3, r2
 8018c8a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	2241      	movs	r2, #65	@ 0x41
 8018c90:	5c9b      	ldrb	r3, [r3, r2]
 8018c92:	b2db      	uxtb	r3, r3
 8018c94:	001a      	movs	r2, r3
 8018c96:	2328      	movs	r3, #40	@ 0x28
 8018c98:	4013      	ands	r3, r2
 8018c9a:	2b28      	cmp	r3, #40	@ 0x28
 8018c9c:	d003      	beq.n	8018ca6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	22b0      	movs	r2, #176	@ 0xb0
 8018ca2:	4313      	orrs	r3, r2
 8018ca4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018ca6:	1cbb      	adds	r3, r7, #2
 8018ca8:	2200      	movs	r2, #0
 8018caa:	5e9b      	ldrsh	r3, [r3, r2]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	da03      	bge.n	8018cb8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	22b8      	movs	r2, #184	@ 0xb8
 8018cb4:	4313      	orrs	r3, r2
 8018cb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018cb8:	1cbb      	adds	r3, r7, #2
 8018cba:	881b      	ldrh	r3, [r3, #0]
 8018cbc:	2b10      	cmp	r3, #16
 8018cbe:	d103      	bne.n	8018cc8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	2290      	movs	r2, #144	@ 0x90
 8018cc4:	4313      	orrs	r3, r2
 8018cc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018cc8:	1cbb      	adds	r3, r7, #2
 8018cca:	881b      	ldrh	r3, [r3, #0]
 8018ccc:	2b20      	cmp	r3, #32
 8018cce:	d103      	bne.n	8018cd8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	2220      	movs	r2, #32
 8018cd4:	4313      	orrs	r3, r2
 8018cd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8018cd8:	1cbb      	adds	r3, r7, #2
 8018cda:	881b      	ldrh	r3, [r3, #0]
 8018cdc:	2b40      	cmp	r3, #64	@ 0x40
 8018cde:	d103      	bne.n	8018ce8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	2240      	movs	r2, #64	@ 0x40
 8018ce4:	4313      	orrs	r3, r2
 8018ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	681a      	ldr	r2, [r3, #0]
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	43d9      	mvns	r1, r3
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	400a      	ands	r2, r1
 8018cf8:	601a      	str	r2, [r3, #0]
}
 8018cfa:	46c0      	nop			@ (mov r8, r8)
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	b004      	add	sp, #16
 8018d00:	bd80      	pop	{r7, pc}
	...

08018d04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b082      	sub	sp, #8
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
 8018d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	2241      	movs	r2, #65	@ 0x41
 8018d12:	5c9b      	ldrb	r3, [r3, r2]
 8018d14:	b2db      	uxtb	r3, r3
 8018d16:	2b20      	cmp	r3, #32
 8018d18:	d138      	bne.n	8018d8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	2240      	movs	r2, #64	@ 0x40
 8018d1e:	5c9b      	ldrb	r3, [r3, r2]
 8018d20:	2b01      	cmp	r3, #1
 8018d22:	d101      	bne.n	8018d28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018d24:	2302      	movs	r3, #2
 8018d26:	e032      	b.n	8018d8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	2240      	movs	r2, #64	@ 0x40
 8018d2c:	2101      	movs	r1, #1
 8018d2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	2241      	movs	r2, #65	@ 0x41
 8018d34:	2124      	movs	r1, #36	@ 0x24
 8018d36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	681a      	ldr	r2, [r3, #0]
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	2101      	movs	r1, #1
 8018d44:	438a      	bics	r2, r1
 8018d46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	681a      	ldr	r2, [r3, #0]
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	4911      	ldr	r1, [pc, #68]	@ (8018d98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8018d54:	400a      	ands	r2, r1
 8018d56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	6819      	ldr	r1, [r3, #0]
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	683a      	ldr	r2, [r7, #0]
 8018d64:	430a      	orrs	r2, r1
 8018d66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	681a      	ldr	r2, [r3, #0]
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	2101      	movs	r1, #1
 8018d74:	430a      	orrs	r2, r1
 8018d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	2241      	movs	r2, #65	@ 0x41
 8018d7c:	2120      	movs	r1, #32
 8018d7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2240      	movs	r2, #64	@ 0x40
 8018d84:	2100      	movs	r1, #0
 8018d86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018d88:	2300      	movs	r3, #0
 8018d8a:	e000      	b.n	8018d8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018d8c:	2302      	movs	r3, #2
  }
}
 8018d8e:	0018      	movs	r0, r3
 8018d90:	46bd      	mov	sp, r7
 8018d92:	b002      	add	sp, #8
 8018d94:	bd80      	pop	{r7, pc}
 8018d96:	46c0      	nop			@ (mov r8, r8)
 8018d98:	ffffefff 	.word	0xffffefff

08018d9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018d9c:	b580      	push	{r7, lr}
 8018d9e:	b084      	sub	sp, #16
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	6078      	str	r0, [r7, #4]
 8018da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	2241      	movs	r2, #65	@ 0x41
 8018daa:	5c9b      	ldrb	r3, [r3, r2]
 8018dac:	b2db      	uxtb	r3, r3
 8018dae:	2b20      	cmp	r3, #32
 8018db0:	d139      	bne.n	8018e26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	2240      	movs	r2, #64	@ 0x40
 8018db6:	5c9b      	ldrb	r3, [r3, r2]
 8018db8:	2b01      	cmp	r3, #1
 8018dba:	d101      	bne.n	8018dc0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018dbc:	2302      	movs	r3, #2
 8018dbe:	e033      	b.n	8018e28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	2240      	movs	r2, #64	@ 0x40
 8018dc4:	2101      	movs	r1, #1
 8018dc6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	2241      	movs	r2, #65	@ 0x41
 8018dcc:	2124      	movs	r1, #36	@ 0x24
 8018dce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	681a      	ldr	r2, [r3, #0]
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	2101      	movs	r1, #1
 8018ddc:	438a      	bics	r2, r1
 8018dde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	4a11      	ldr	r2, [pc, #68]	@ (8018e30 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8018dec:	4013      	ands	r3, r2
 8018dee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018df0:	683b      	ldr	r3, [r7, #0]
 8018df2:	021b      	lsls	r3, r3, #8
 8018df4:	68fa      	ldr	r2, [r7, #12]
 8018df6:	4313      	orrs	r3, r2
 8018df8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	68fa      	ldr	r2, [r7, #12]
 8018e00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	681a      	ldr	r2, [r3, #0]
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	2101      	movs	r1, #1
 8018e0e:	430a      	orrs	r2, r1
 8018e10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	2241      	movs	r2, #65	@ 0x41
 8018e16:	2120      	movs	r1, #32
 8018e18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	2240      	movs	r2, #64	@ 0x40
 8018e1e:	2100      	movs	r1, #0
 8018e20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018e22:	2300      	movs	r3, #0
 8018e24:	e000      	b.n	8018e28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018e26:	2302      	movs	r3, #2
  }
}
 8018e28:	0018      	movs	r0, r3
 8018e2a:	46bd      	mov	sp, r7
 8018e2c:	b004      	add	sp, #16
 8018e2e:	bd80      	pop	{r7, pc}
 8018e30:	fffff0ff 	.word	0xfffff0ff

08018e34 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8018e34:	b580      	push	{r7, lr}
 8018e36:	b088      	sub	sp, #32
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d101      	bne.n	8018e46 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8018e42:	2301      	movs	r3, #1
 8018e44:	e0e1      	b.n	801900a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	2235      	movs	r2, #53	@ 0x35
 8018e4a:	5c9b      	ldrb	r3, [r3, r2]
 8018e4c:	b2db      	uxtb	r3, r3
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d107      	bne.n	8018e62 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	2234      	movs	r2, #52	@ 0x34
 8018e56:	2100      	movs	r1, #0
 8018e58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	0018      	movs	r0, r3
 8018e5e:	f7f3 fd65 	bl	800c92c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	2235      	movs	r2, #53	@ 0x35
 8018e66:	2102      	movs	r1, #2
 8018e68:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	69da      	ldr	r2, [r3, #28]
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	4967      	ldr	r1, [pc, #412]	@ (8019014 <HAL_I2S_Init+0x1e0>)
 8018e76:	400a      	ands	r2, r1
 8018e78:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	2202      	movs	r2, #2
 8018e80:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	695b      	ldr	r3, [r3, #20]
 8018e86:	2b02      	cmp	r3, #2
 8018e88:	d073      	beq.n	8018f72 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	68db      	ldr	r3, [r3, #12]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d102      	bne.n	8018e98 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018e92:	2310      	movs	r3, #16
 8018e94:	617b      	str	r3, [r7, #20]
 8018e96:	e001      	b.n	8018e9c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018e98:	2320      	movs	r3, #32
 8018e9a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	689b      	ldr	r3, [r3, #8]
 8018ea0:	2b20      	cmp	r3, #32
 8018ea2:	d802      	bhi.n	8018eaa <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018ea4:	697b      	ldr	r3, [r7, #20]
 8018ea6:	005b      	lsls	r3, r3, #1
 8018ea8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8018eaa:	f002 febd 	bl	801bc28 <HAL_RCC_GetSysClockFreq>
 8018eae:	0003      	movs	r3, r0
 8018eb0:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	691a      	ldr	r2, [r3, #16]
 8018eb6:	2380      	movs	r3, #128	@ 0x80
 8018eb8:	009b      	lsls	r3, r3, #2
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	d131      	bne.n	8018f22 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	68db      	ldr	r3, [r3, #12]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d016      	beq.n	8018ef4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018ec6:	697b      	ldr	r3, [r7, #20]
 8018ec8:	009b      	lsls	r3, r3, #2
 8018eca:	0019      	movs	r1, r3
 8018ecc:	68f8      	ldr	r0, [r7, #12]
 8018ece:	f7e7 f969 	bl	80001a4 <__udivsi3>
 8018ed2:	0003      	movs	r3, r0
 8018ed4:	001a      	movs	r2, r3
 8018ed6:	0013      	movs	r3, r2
 8018ed8:	009b      	lsls	r3, r3, #2
 8018eda:	189b      	adds	r3, r3, r2
 8018edc:	005b      	lsls	r3, r3, #1
 8018ede:	001a      	movs	r2, r3
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	695b      	ldr	r3, [r3, #20]
 8018ee4:	0019      	movs	r1, r3
 8018ee6:	0010      	movs	r0, r2
 8018ee8:	f7e7 f95c 	bl	80001a4 <__udivsi3>
 8018eec:	0003      	movs	r3, r0
 8018eee:	3305      	adds	r3, #5
 8018ef0:	613b      	str	r3, [r7, #16]
 8018ef2:	e02a      	b.n	8018f4a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018ef4:	697b      	ldr	r3, [r7, #20]
 8018ef6:	00db      	lsls	r3, r3, #3
 8018ef8:	0019      	movs	r1, r3
 8018efa:	68f8      	ldr	r0, [r7, #12]
 8018efc:	f7e7 f952 	bl	80001a4 <__udivsi3>
 8018f00:	0003      	movs	r3, r0
 8018f02:	001a      	movs	r2, r3
 8018f04:	0013      	movs	r3, r2
 8018f06:	009b      	lsls	r3, r3, #2
 8018f08:	189b      	adds	r3, r3, r2
 8018f0a:	005b      	lsls	r3, r3, #1
 8018f0c:	001a      	movs	r2, r3
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	695b      	ldr	r3, [r3, #20]
 8018f12:	0019      	movs	r1, r3
 8018f14:	0010      	movs	r0, r2
 8018f16:	f7e7 f945 	bl	80001a4 <__udivsi3>
 8018f1a:	0003      	movs	r3, r0
 8018f1c:	3305      	adds	r3, #5
 8018f1e:	613b      	str	r3, [r7, #16]
 8018f20:	e013      	b.n	8018f4a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018f22:	6979      	ldr	r1, [r7, #20]
 8018f24:	68f8      	ldr	r0, [r7, #12]
 8018f26:	f7e7 f93d 	bl	80001a4 <__udivsi3>
 8018f2a:	0003      	movs	r3, r0
 8018f2c:	001a      	movs	r2, r3
 8018f2e:	0013      	movs	r3, r2
 8018f30:	009b      	lsls	r3, r3, #2
 8018f32:	189b      	adds	r3, r3, r2
 8018f34:	005b      	lsls	r3, r3, #1
 8018f36:	001a      	movs	r2, r3
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	695b      	ldr	r3, [r3, #20]
 8018f3c:	0019      	movs	r1, r3
 8018f3e:	0010      	movs	r0, r2
 8018f40:	f7e7 f930 	bl	80001a4 <__udivsi3>
 8018f44:	0003      	movs	r3, r0
 8018f46:	3305      	adds	r3, #5
 8018f48:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8018f4a:	693b      	ldr	r3, [r7, #16]
 8018f4c:	210a      	movs	r1, #10
 8018f4e:	0018      	movs	r0, r3
 8018f50:	f7e7 f928 	bl	80001a4 <__udivsi3>
 8018f54:	0003      	movs	r3, r0
 8018f56:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8018f58:	693b      	ldr	r3, [r7, #16]
 8018f5a:	2201      	movs	r2, #1
 8018f5c:	4013      	ands	r3, r2
 8018f5e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8018f60:	693a      	ldr	r2, [r7, #16]
 8018f62:	69bb      	ldr	r3, [r7, #24]
 8018f64:	1ad3      	subs	r3, r2, r3
 8018f66:	085b      	lsrs	r3, r3, #1
 8018f68:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8018f6a:	69bb      	ldr	r3, [r7, #24]
 8018f6c:	021b      	lsls	r3, r3, #8
 8018f6e:	61bb      	str	r3, [r7, #24]
 8018f70:	e003      	b.n	8018f7a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8018f72:	2302      	movs	r3, #2
 8018f74:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8018f76:	2300      	movs	r3, #0
 8018f78:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8018f7a:	69fb      	ldr	r3, [r7, #28]
 8018f7c:	2b01      	cmp	r3, #1
 8018f7e:	d902      	bls.n	8018f86 <HAL_I2S_Init+0x152>
 8018f80:	69fb      	ldr	r3, [r7, #28]
 8018f82:	2bff      	cmp	r3, #255	@ 0xff
 8018f84:	d907      	bls.n	8018f96 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f8a:	2210      	movs	r2, #16
 8018f8c:	431a      	orrs	r2, r3
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8018f92:	2301      	movs	r3, #1
 8018f94:	e039      	b.n	801900a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	691a      	ldr	r2, [r3, #16]
 8018f9a:	69bb      	ldr	r3, [r7, #24]
 8018f9c:	431a      	orrs	r2, r3
 8018f9e:	0011      	movs	r1, r2
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	69fa      	ldr	r2, [r7, #28]
 8018fa6:	430a      	orrs	r2, r1
 8018fa8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	69db      	ldr	r3, [r3, #28]
 8018fb0:	4a18      	ldr	r2, [pc, #96]	@ (8019014 <HAL_I2S_Init+0x1e0>)
 8018fb2:	401a      	ands	r2, r3
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	6859      	ldr	r1, [r3, #4]
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	689b      	ldr	r3, [r3, #8]
 8018fbc:	4319      	orrs	r1, r3
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	68db      	ldr	r3, [r3, #12]
 8018fc2:	4319      	orrs	r1, r3
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	699b      	ldr	r3, [r3, #24]
 8018fc8:	430b      	orrs	r3, r1
 8018fca:	431a      	orrs	r2, r3
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	2180      	movs	r1, #128	@ 0x80
 8018fd2:	0109      	lsls	r1, r1, #4
 8018fd4:	430a      	orrs	r2, r1
 8018fd6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	689b      	ldr	r3, [r3, #8]
 8018fdc:	2b30      	cmp	r3, #48	@ 0x30
 8018fde:	d003      	beq.n	8018fe8 <HAL_I2S_Init+0x1b4>
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	689b      	ldr	r3, [r3, #8]
 8018fe4:	2bb0      	cmp	r3, #176	@ 0xb0
 8018fe6:	d108      	bne.n	8018ffa <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	69da      	ldr	r2, [r3, #28]
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	2180      	movs	r1, #128	@ 0x80
 8018ff4:	0149      	lsls	r1, r1, #5
 8018ff6:	430a      	orrs	r2, r1
 8018ff8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	2235      	movs	r2, #53	@ 0x35
 8019004:	2101      	movs	r1, #1
 8019006:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019008:	2300      	movs	r3, #0
}
 801900a:	0018      	movs	r0, r3
 801900c:	46bd      	mov	sp, r7
 801900e:	b008      	add	sp, #32
 8019010:	bd80      	pop	{r7, pc}
 8019012:	46c0      	nop			@ (mov r8, r8)
 8019014:	fffff040 	.word	0xfffff040

08019018 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b086      	sub	sp, #24
 801901c:	af00      	add	r7, sp, #0
 801901e:	60f8      	str	r0, [r7, #12]
 8019020:	60b9      	str	r1, [r7, #8]
 8019022:	1dbb      	adds	r3, r7, #6
 8019024:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8019026:	68bb      	ldr	r3, [r7, #8]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d003      	beq.n	8019034 <HAL_I2S_Receive_DMA+0x1c>
 801902c:	1dbb      	adds	r3, r7, #6
 801902e:	881b      	ldrh	r3, [r3, #0]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d101      	bne.n	8019038 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8019034:	2301      	movs	r3, #1
 8019036:	e0a6      	b.n	8019186 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	2234      	movs	r2, #52	@ 0x34
 801903c:	5c9b      	ldrb	r3, [r3, r2]
 801903e:	b2db      	uxtb	r3, r3
 8019040:	2b01      	cmp	r3, #1
 8019042:	d101      	bne.n	8019048 <HAL_I2S_Receive_DMA+0x30>
 8019044:	2302      	movs	r3, #2
 8019046:	e09e      	b.n	8019186 <HAL_I2S_Receive_DMA+0x16e>
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	2234      	movs	r2, #52	@ 0x34
 801904c:	2101      	movs	r1, #1
 801904e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	2235      	movs	r2, #53	@ 0x35
 8019054:	5c9b      	ldrb	r3, [r3, r2]
 8019056:	b2db      	uxtb	r3, r3
 8019058:	2b01      	cmp	r3, #1
 801905a:	d005      	beq.n	8019068 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	2234      	movs	r2, #52	@ 0x34
 8019060:	2100      	movs	r1, #0
 8019062:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8019064:	2302      	movs	r3, #2
 8019066:	e08e      	b.n	8019186 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	2235      	movs	r2, #53	@ 0x35
 801906c:	2104      	movs	r1, #4
 801906e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	2200      	movs	r2, #0
 8019074:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	68ba      	ldr	r2, [r7, #8]
 801907a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	69db      	ldr	r3, [r3, #28]
 8019082:	2207      	movs	r2, #7
 8019084:	4013      	ands	r3, r2
 8019086:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8019088:	697b      	ldr	r3, [r7, #20]
 801908a:	2b03      	cmp	r3, #3
 801908c:	d002      	beq.n	8019094 <HAL_I2S_Receive_DMA+0x7c>
 801908e:	697b      	ldr	r3, [r7, #20]
 8019090:	2b05      	cmp	r3, #5
 8019092:	d10c      	bne.n	80190ae <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8019094:	1dbb      	adds	r3, r7, #6
 8019096:	881b      	ldrh	r3, [r3, #0]
 8019098:	18db      	adds	r3, r3, r3
 801909a:	b29a      	uxth	r2, r3
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80190a0:	1dbb      	adds	r3, r7, #6
 80190a2:	881b      	ldrh	r3, [r3, #0]
 80190a4:	18db      	adds	r3, r3, r3
 80190a6:	b29a      	uxth	r2, r3
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80190ac:	e007      	b.n	80190be <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	1dba      	adds	r2, r7, #6
 80190b2:	8812      	ldrh	r2, [r2, #0]
 80190b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	1dba      	adds	r2, r7, #6
 80190ba:	8812      	ldrh	r2, [r2, #0]
 80190bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190c2:	4a33      	ldr	r2, [pc, #204]	@ (8019190 <HAL_I2S_Receive_DMA+0x178>)
 80190c4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190ca:	4a32      	ldr	r2, [pc, #200]	@ (8019194 <HAL_I2S_Receive_DMA+0x17c>)
 80190cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190d2:	4a31      	ldr	r2, [pc, #196]	@ (8019198 <HAL_I2S_Receive_DMA+0x180>)
 80190d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	69da      	ldr	r2, [r3, #28]
 80190dc:	23c0      	movs	r3, #192	@ 0xc0
 80190de:	009b      	lsls	r3, r3, #2
 80190e0:	401a      	ands	r2, r3
 80190e2:	23c0      	movs	r3, #192	@ 0xc0
 80190e4:	009b      	lsls	r3, r3, #2
 80190e6:	429a      	cmp	r2, r3
 80190e8:	d10a      	bne.n	8019100 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80190ea:	2300      	movs	r3, #0
 80190ec:	613b      	str	r3, [r7, #16]
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	68db      	ldr	r3, [r3, #12]
 80190f4:	613b      	str	r3, [r7, #16]
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	689b      	ldr	r3, [r3, #8]
 80190fc:	613b      	str	r3, [r7, #16]
 80190fe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	330c      	adds	r3, #12
 801910a:	0019      	movs	r1, r3
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019110:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019116:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8019118:	f7fc f906 	bl	8015328 <HAL_DMA_Start_IT>
 801911c:	1e03      	subs	r3, r0, #0
 801911e:	d00f      	beq.n	8019140 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019124:	2208      	movs	r2, #8
 8019126:	431a      	orrs	r2, r3
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	2235      	movs	r2, #53	@ 0x35
 8019130:	2101      	movs	r1, #1
 8019132:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	2234      	movs	r2, #52	@ 0x34
 8019138:	2100      	movs	r1, #0
 801913a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801913c:	2301      	movs	r3, #1
 801913e:	e022      	b.n	8019186 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	69da      	ldr	r2, [r3, #28]
 8019146:	2380      	movs	r3, #128	@ 0x80
 8019148:	00db      	lsls	r3, r3, #3
 801914a:	4013      	ands	r3, r2
 801914c:	d108      	bne.n	8019160 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	69da      	ldr	r2, [r3, #28]
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	2180      	movs	r1, #128	@ 0x80
 801915a:	00c9      	lsls	r1, r1, #3
 801915c:	430a      	orrs	r2, r1
 801915e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	685b      	ldr	r3, [r3, #4]
 8019166:	2201      	movs	r2, #1
 8019168:	4013      	ands	r3, r2
 801916a:	d107      	bne.n	801917c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	685a      	ldr	r2, [r3, #4]
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	2101      	movs	r1, #1
 8019178:	430a      	orrs	r2, r1
 801917a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	2234      	movs	r2, #52	@ 0x34
 8019180:	2100      	movs	r1, #0
 8019182:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8019184:	2300      	movs	r3, #0
}
 8019186:	0018      	movs	r0, r3
 8019188:	46bd      	mov	sp, r7
 801918a:	b006      	add	sp, #24
 801918c:	bd80      	pop	{r7, pc}
 801918e:	46c0      	nop			@ (mov r8, r8)
 8019190:	08019379 	.word	0x08019379
 8019194:	08019335 	.word	0x08019335
 8019198:	08019397 	.word	0x08019397

0801919c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801919c:	b580      	push	{r7, lr}
 801919e:	b086      	sub	sp, #24
 80191a0:	af00      	add	r7, sp, #0
 80191a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80191a4:	2317      	movs	r3, #23
 80191a6:	18fb      	adds	r3, r7, r3
 80191a8:	2200      	movs	r2, #0
 80191aa:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	685a      	ldr	r2, [r3, #4]
 80191b0:	2380      	movs	r3, #128	@ 0x80
 80191b2:	009b      	lsls	r3, r3, #2
 80191b4:	429a      	cmp	r2, r3
 80191b6:	d003      	beq.n	80191c0 <HAL_I2S_DMAStop+0x24>
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	685b      	ldr	r3, [r3, #4]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d158      	bne.n	8019272 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d010      	beq.n	80191ea <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80191cc:	0018      	movs	r0, r3
 80191ce:	f7fc f911 	bl	80153f4 <HAL_DMA_Abort>
 80191d2:	1e03      	subs	r3, r0, #0
 80191d4:	d009      	beq.n	80191ea <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191da:	2208      	movs	r2, #8
 80191dc:	431a      	orrs	r2, r3
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80191e2:	2317      	movs	r3, #23
 80191e4:	18fb      	adds	r3, r7, r3
 80191e6:	2201      	movs	r2, #1
 80191e8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80191ea:	6878      	ldr	r0, [r7, #4]
 80191ec:	2364      	movs	r3, #100	@ 0x64
 80191ee:	2201      	movs	r2, #1
 80191f0:	2102      	movs	r1, #2
 80191f2:	f000 f8f7 	bl	80193e4 <I2S_WaitFlagStateUntilTimeout>
 80191f6:	1e03      	subs	r3, r0, #0
 80191f8:	d00d      	beq.n	8019216 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191fe:	2201      	movs	r2, #1
 8019200:	431a      	orrs	r2, r3
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	2235      	movs	r2, #53	@ 0x35
 801920a:	2101      	movs	r1, #1
 801920c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801920e:	2317      	movs	r3, #23
 8019210:	18fb      	adds	r3, r7, r3
 8019212:	2201      	movs	r2, #1
 8019214:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8019216:	6878      	ldr	r0, [r7, #4]
 8019218:	2364      	movs	r3, #100	@ 0x64
 801921a:	2200      	movs	r2, #0
 801921c:	2180      	movs	r1, #128	@ 0x80
 801921e:	f000 f8e1 	bl	80193e4 <I2S_WaitFlagStateUntilTimeout>
 8019222:	1e03      	subs	r3, r0, #0
 8019224:	d00d      	beq.n	8019242 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801922a:	2201      	movs	r2, #1
 801922c:	431a      	orrs	r2, r3
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	2235      	movs	r2, #53	@ 0x35
 8019236:	2101      	movs	r1, #1
 8019238:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801923a:	2317      	movs	r3, #23
 801923c:	18fb      	adds	r3, r7, r3
 801923e:	2201      	movs	r2, #1
 8019240:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	69da      	ldr	r2, [r3, #28]
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	4938      	ldr	r1, [pc, #224]	@ (8019330 <HAL_I2S_DMAStop+0x194>)
 801924e:	400a      	ands	r2, r1
 8019250:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8019252:	2300      	movs	r3, #0
 8019254:	613b      	str	r3, [r7, #16]
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	689b      	ldr	r3, [r3, #8]
 801925c:	613b      	str	r3, [r7, #16]
 801925e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	685a      	ldr	r2, [r3, #4]
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	2102      	movs	r1, #2
 801926c:	438a      	bics	r2, r1
 801926e:	605a      	str	r2, [r3, #4]
 8019270:	e053      	b.n	801931a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	685a      	ldr	r2, [r3, #4]
 8019276:	23c0      	movs	r3, #192	@ 0xc0
 8019278:	009b      	lsls	r3, r3, #2
 801927a:	429a      	cmp	r2, r3
 801927c:	d005      	beq.n	801928a <HAL_I2S_DMAStop+0xee>
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	685a      	ldr	r2, [r3, #4]
 8019282:	2380      	movs	r3, #128	@ 0x80
 8019284:	005b      	lsls	r3, r3, #1
 8019286:	429a      	cmp	r2, r3
 8019288:	d147      	bne.n	801931a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801928e:	2b00      	cmp	r3, #0
 8019290:	d010      	beq.n	80192b4 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019296:	0018      	movs	r0, r3
 8019298:	f7fc f8ac 	bl	80153f4 <HAL_DMA_Abort>
 801929c:	1e03      	subs	r3, r0, #0
 801929e:	d009      	beq.n	80192b4 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192a4:	2208      	movs	r2, #8
 80192a6:	431a      	orrs	r2, r3
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80192ac:	2317      	movs	r3, #23
 80192ae:	18fb      	adds	r3, r7, r3
 80192b0:	2201      	movs	r2, #1
 80192b2:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	69da      	ldr	r2, [r3, #28]
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	491c      	ldr	r1, [pc, #112]	@ (8019330 <HAL_I2S_DMAStop+0x194>)
 80192c0:	400a      	ands	r2, r1
 80192c2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80192c4:	2300      	movs	r3, #0
 80192c6:	60fb      	str	r3, [r7, #12]
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	68db      	ldr	r3, [r3, #12]
 80192ce:	60fb      	str	r3, [r7, #12]
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	689b      	ldr	r3, [r3, #8]
 80192d6:	60fb      	str	r3, [r7, #12]
 80192d8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	685a      	ldr	r2, [r3, #4]
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	2101      	movs	r1, #1
 80192e6:	438a      	bics	r2, r1
 80192e8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	685a      	ldr	r2, [r3, #4]
 80192ee:	2380      	movs	r3, #128	@ 0x80
 80192f0:	005b      	lsls	r3, r3, #1
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d10e      	bne.n	8019314 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192fa:	2240      	movs	r2, #64	@ 0x40
 80192fc:	431a      	orrs	r2, r3
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	2235      	movs	r2, #53	@ 0x35
 8019306:	2101      	movs	r1, #1
 8019308:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 801930a:	2317      	movs	r3, #23
 801930c:	18fb      	adds	r3, r7, r3
 801930e:	2201      	movs	r2, #1
 8019310:	701a      	strb	r2, [r3, #0]
 8019312:	e002      	b.n	801931a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	2235      	movs	r2, #53	@ 0x35
 801931e:	2101      	movs	r1, #1
 8019320:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8019322:	2317      	movs	r3, #23
 8019324:	18fb      	adds	r3, r7, r3
 8019326:	781b      	ldrb	r3, [r3, #0]
}
 8019328:	0018      	movs	r0, r3
 801932a:	46bd      	mov	sp, r7
 801932c:	b006      	add	sp, #24
 801932e:	bd80      	pop	{r7, pc}
 8019330:	fffffbff 	.word	0xfffffbff

08019334 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8019334:	b580      	push	{r7, lr}
 8019336:	b084      	sub	sp, #16
 8019338:	af00      	add	r7, sp, #0
 801933a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019340:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	69db      	ldr	r3, [r3, #28]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d10e      	bne.n	8019368 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	685a      	ldr	r2, [r3, #4]
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	2101      	movs	r1, #1
 8019356:	438a      	bics	r2, r1
 8019358:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	2200      	movs	r2, #0
 801935e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	2235      	movs	r2, #53	@ 0x35
 8019364:	2101      	movs	r1, #1
 8019366:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	0018      	movs	r0, r3
 801936c:	f7f8 fb9a 	bl	8011aa4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019370:	46c0      	nop			@ (mov r8, r8)
 8019372:	46bd      	mov	sp, r7
 8019374:	b004      	add	sp, #16
 8019376:	bd80      	pop	{r7, pc}

08019378 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b084      	sub	sp, #16
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019384:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	0018      	movs	r0, r3
 801938a:	f7f8 fb79 	bl	8011a80 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801938e:	46c0      	nop			@ (mov r8, r8)
 8019390:	46bd      	mov	sp, r7
 8019392:	b004      	add	sp, #16
 8019394:	bd80      	pop	{r7, pc}

08019396 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8019396:	b580      	push	{r7, lr}
 8019398:	b084      	sub	sp, #16
 801939a:	af00      	add	r7, sp, #0
 801939c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193a2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	685a      	ldr	r2, [r3, #4]
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	2103      	movs	r1, #3
 80193b0:	438a      	bics	r2, r1
 80193b2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	2200      	movs	r2, #0
 80193b8:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	2200      	movs	r2, #0
 80193be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	2235      	movs	r2, #53	@ 0x35
 80193c4:	2101      	movs	r1, #1
 80193c6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80193cc:	2208      	movs	r2, #8
 80193ce:	431a      	orrs	r2, r3
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	0018      	movs	r0, r3
 80193d8:	f7f8 fbb2 	bl	8011b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80193dc:	46c0      	nop			@ (mov r8, r8)
 80193de:	46bd      	mov	sp, r7
 80193e0:	b004      	add	sp, #16
 80193e2:	bd80      	pop	{r7, pc}

080193e4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b086      	sub	sp, #24
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	60f8      	str	r0, [r7, #12]
 80193ec:	60b9      	str	r1, [r7, #8]
 80193ee:	603b      	str	r3, [r7, #0]
 80193f0:	1dfb      	adds	r3, r7, #7
 80193f2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80193f4:	f7fb fa64 	bl	80148c0 <HAL_GetTick>
 80193f8:	0003      	movs	r3, r0
 80193fa:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80193fc:	e017      	b.n	801942e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80193fe:	683b      	ldr	r3, [r7, #0]
 8019400:	3301      	adds	r3, #1
 8019402:	d014      	beq.n	801942e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8019404:	f7fb fa5c 	bl	80148c0 <HAL_GetTick>
 8019408:	0002      	movs	r2, r0
 801940a:	697b      	ldr	r3, [r7, #20]
 801940c:	1ad3      	subs	r3, r2, r3
 801940e:	683a      	ldr	r2, [r7, #0]
 8019410:	429a      	cmp	r2, r3
 8019412:	d902      	bls.n	801941a <I2S_WaitFlagStateUntilTimeout+0x36>
 8019414:	683b      	ldr	r3, [r7, #0]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d109      	bne.n	801942e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	2235      	movs	r2, #53	@ 0x35
 801941e:	2101      	movs	r1, #1
 8019420:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	2234      	movs	r2, #52	@ 0x34
 8019426:	2100      	movs	r1, #0
 8019428:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801942a:	2303      	movs	r3, #3
 801942c:	e00f      	b.n	801944e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	689b      	ldr	r3, [r3, #8]
 8019434:	68ba      	ldr	r2, [r7, #8]
 8019436:	4013      	ands	r3, r2
 8019438:	68ba      	ldr	r2, [r7, #8]
 801943a:	1ad3      	subs	r3, r2, r3
 801943c:	425a      	negs	r2, r3
 801943e:	4153      	adcs	r3, r2
 8019440:	b2db      	uxtb	r3, r3
 8019442:	001a      	movs	r2, r3
 8019444:	1dfb      	adds	r3, r7, #7
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	429a      	cmp	r2, r3
 801944a:	d1d8      	bne.n	80193fe <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 801944c:	2300      	movs	r3, #0
}
 801944e:	0018      	movs	r0, r3
 8019450:	46bd      	mov	sp, r7
 8019452:	b006      	add	sp, #24
 8019454:	bd80      	pop	{r7, pc}
	...

08019458 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801945a:	b08b      	sub	sp, #44	@ 0x2c
 801945c:	af06      	add	r7, sp, #24
 801945e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d101      	bne.n	801946a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019466:	2301      	movs	r3, #1
 8019468:	e0f0      	b.n	801964c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	4a79      	ldr	r2, [pc, #484]	@ (8019654 <HAL_PCD_Init+0x1fc>)
 801946e:	5c9b      	ldrb	r3, [r3, r2]
 8019470:	b2db      	uxtb	r3, r3
 8019472:	2b00      	cmp	r3, #0
 8019474:	d108      	bne.n	8019488 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019476:	687a      	ldr	r2, [r7, #4]
 8019478:	23aa      	movs	r3, #170	@ 0xaa
 801947a:	009b      	lsls	r3, r3, #2
 801947c:	2100      	movs	r1, #0
 801947e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	0018      	movs	r0, r3
 8019484:	f009 ff60 	bl	8023348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	4a72      	ldr	r2, [pc, #456]	@ (8019654 <HAL_PCD_Init+0x1fc>)
 801948c:	2103      	movs	r1, #3
 801948e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	0018      	movs	r0, r3
 8019496:	f005 ff05 	bl	801f2a4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801949a:	230f      	movs	r3, #15
 801949c:	18fb      	adds	r3, r7, r3
 801949e:	2200      	movs	r2, #0
 80194a0:	701a      	strb	r2, [r3, #0]
 80194a2:	e049      	b.n	8019538 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80194a4:	200f      	movs	r0, #15
 80194a6:	183b      	adds	r3, r7, r0
 80194a8:	781b      	ldrb	r3, [r3, #0]
 80194aa:	6879      	ldr	r1, [r7, #4]
 80194ac:	1c5a      	adds	r2, r3, #1
 80194ae:	0013      	movs	r3, r2
 80194b0:	009b      	lsls	r3, r3, #2
 80194b2:	189b      	adds	r3, r3, r2
 80194b4:	00db      	lsls	r3, r3, #3
 80194b6:	18cb      	adds	r3, r1, r3
 80194b8:	3301      	adds	r3, #1
 80194ba:	2201      	movs	r2, #1
 80194bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80194be:	183b      	adds	r3, r7, r0
 80194c0:	781b      	ldrb	r3, [r3, #0]
 80194c2:	6879      	ldr	r1, [r7, #4]
 80194c4:	1c5a      	adds	r2, r3, #1
 80194c6:	0013      	movs	r3, r2
 80194c8:	009b      	lsls	r3, r3, #2
 80194ca:	189b      	adds	r3, r3, r2
 80194cc:	00db      	lsls	r3, r3, #3
 80194ce:	183a      	adds	r2, r7, r0
 80194d0:	7812      	ldrb	r2, [r2, #0]
 80194d2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80194d4:	183b      	adds	r3, r7, r0
 80194d6:	781b      	ldrb	r3, [r3, #0]
 80194d8:	6879      	ldr	r1, [r7, #4]
 80194da:	1c5a      	adds	r2, r3, #1
 80194dc:	0013      	movs	r3, r2
 80194de:	009b      	lsls	r3, r3, #2
 80194e0:	189b      	adds	r3, r3, r2
 80194e2:	00db      	lsls	r3, r3, #3
 80194e4:	18cb      	adds	r3, r1, r3
 80194e6:	3303      	adds	r3, #3
 80194e8:	2200      	movs	r2, #0
 80194ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80194ec:	183b      	adds	r3, r7, r0
 80194ee:	781a      	ldrb	r2, [r3, #0]
 80194f0:	6879      	ldr	r1, [r7, #4]
 80194f2:	0013      	movs	r3, r2
 80194f4:	009b      	lsls	r3, r3, #2
 80194f6:	189b      	adds	r3, r3, r2
 80194f8:	00db      	lsls	r3, r3, #3
 80194fa:	18cb      	adds	r3, r1, r3
 80194fc:	3338      	adds	r3, #56	@ 0x38
 80194fe:	2200      	movs	r2, #0
 8019500:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019502:	183b      	adds	r3, r7, r0
 8019504:	781a      	ldrb	r2, [r3, #0]
 8019506:	6879      	ldr	r1, [r7, #4]
 8019508:	0013      	movs	r3, r2
 801950a:	009b      	lsls	r3, r3, #2
 801950c:	189b      	adds	r3, r3, r2
 801950e:	00db      	lsls	r3, r3, #3
 8019510:	18cb      	adds	r3, r1, r3
 8019512:	333c      	adds	r3, #60	@ 0x3c
 8019514:	2200      	movs	r2, #0
 8019516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019518:	183b      	adds	r3, r7, r0
 801951a:	781a      	ldrb	r2, [r3, #0]
 801951c:	6879      	ldr	r1, [r7, #4]
 801951e:	0013      	movs	r3, r2
 8019520:	009b      	lsls	r3, r3, #2
 8019522:	189b      	adds	r3, r3, r2
 8019524:	00db      	lsls	r3, r3, #3
 8019526:	18cb      	adds	r3, r1, r3
 8019528:	3340      	adds	r3, #64	@ 0x40
 801952a:	2200      	movs	r2, #0
 801952c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801952e:	183b      	adds	r3, r7, r0
 8019530:	781a      	ldrb	r2, [r3, #0]
 8019532:	183b      	adds	r3, r7, r0
 8019534:	3201      	adds	r2, #1
 8019536:	701a      	strb	r2, [r3, #0]
 8019538:	210f      	movs	r1, #15
 801953a:	187b      	adds	r3, r7, r1
 801953c:	781a      	ldrb	r2, [r3, #0]
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	685b      	ldr	r3, [r3, #4]
 8019542:	429a      	cmp	r2, r3
 8019544:	d3ae      	bcc.n	80194a4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019546:	187b      	adds	r3, r7, r1
 8019548:	2200      	movs	r2, #0
 801954a:	701a      	strb	r2, [r3, #0]
 801954c:	e056      	b.n	80195fc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801954e:	240f      	movs	r4, #15
 8019550:	193b      	adds	r3, r7, r4
 8019552:	781a      	ldrb	r2, [r3, #0]
 8019554:	6878      	ldr	r0, [r7, #4]
 8019556:	236a      	movs	r3, #106	@ 0x6a
 8019558:	33ff      	adds	r3, #255	@ 0xff
 801955a:	0019      	movs	r1, r3
 801955c:	0013      	movs	r3, r2
 801955e:	009b      	lsls	r3, r3, #2
 8019560:	189b      	adds	r3, r3, r2
 8019562:	00db      	lsls	r3, r3, #3
 8019564:	18c3      	adds	r3, r0, r3
 8019566:	185b      	adds	r3, r3, r1
 8019568:	2200      	movs	r2, #0
 801956a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801956c:	193b      	adds	r3, r7, r4
 801956e:	781a      	ldrb	r2, [r3, #0]
 8019570:	6878      	ldr	r0, [r7, #4]
 8019572:	23b4      	movs	r3, #180	@ 0xb4
 8019574:	0059      	lsls	r1, r3, #1
 8019576:	0013      	movs	r3, r2
 8019578:	009b      	lsls	r3, r3, #2
 801957a:	189b      	adds	r3, r3, r2
 801957c:	00db      	lsls	r3, r3, #3
 801957e:	18c3      	adds	r3, r0, r3
 8019580:	185b      	adds	r3, r3, r1
 8019582:	193a      	adds	r2, r7, r4
 8019584:	7812      	ldrb	r2, [r2, #0]
 8019586:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019588:	193b      	adds	r3, r7, r4
 801958a:	781a      	ldrb	r2, [r3, #0]
 801958c:	6878      	ldr	r0, [r7, #4]
 801958e:	236c      	movs	r3, #108	@ 0x6c
 8019590:	33ff      	adds	r3, #255	@ 0xff
 8019592:	0019      	movs	r1, r3
 8019594:	0013      	movs	r3, r2
 8019596:	009b      	lsls	r3, r3, #2
 8019598:	189b      	adds	r3, r3, r2
 801959a:	00db      	lsls	r3, r3, #3
 801959c:	18c3      	adds	r3, r0, r3
 801959e:	185b      	adds	r3, r3, r1
 80195a0:	2200      	movs	r2, #0
 80195a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80195a4:	193b      	adds	r3, r7, r4
 80195a6:	781a      	ldrb	r2, [r3, #0]
 80195a8:	6878      	ldr	r0, [r7, #4]
 80195aa:	23bc      	movs	r3, #188	@ 0xbc
 80195ac:	0059      	lsls	r1, r3, #1
 80195ae:	0013      	movs	r3, r2
 80195b0:	009b      	lsls	r3, r3, #2
 80195b2:	189b      	adds	r3, r3, r2
 80195b4:	00db      	lsls	r3, r3, #3
 80195b6:	18c3      	adds	r3, r0, r3
 80195b8:	185b      	adds	r3, r3, r1
 80195ba:	2200      	movs	r2, #0
 80195bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80195be:	193b      	adds	r3, r7, r4
 80195c0:	781a      	ldrb	r2, [r3, #0]
 80195c2:	6878      	ldr	r0, [r7, #4]
 80195c4:	23be      	movs	r3, #190	@ 0xbe
 80195c6:	0059      	lsls	r1, r3, #1
 80195c8:	0013      	movs	r3, r2
 80195ca:	009b      	lsls	r3, r3, #2
 80195cc:	189b      	adds	r3, r3, r2
 80195ce:	00db      	lsls	r3, r3, #3
 80195d0:	18c3      	adds	r3, r0, r3
 80195d2:	185b      	adds	r3, r3, r1
 80195d4:	2200      	movs	r2, #0
 80195d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80195d8:	193b      	adds	r3, r7, r4
 80195da:	781a      	ldrb	r2, [r3, #0]
 80195dc:	6878      	ldr	r0, [r7, #4]
 80195de:	23c0      	movs	r3, #192	@ 0xc0
 80195e0:	0059      	lsls	r1, r3, #1
 80195e2:	0013      	movs	r3, r2
 80195e4:	009b      	lsls	r3, r3, #2
 80195e6:	189b      	adds	r3, r3, r2
 80195e8:	00db      	lsls	r3, r3, #3
 80195ea:	18c3      	adds	r3, r0, r3
 80195ec:	185b      	adds	r3, r3, r1
 80195ee:	2200      	movs	r2, #0
 80195f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80195f2:	193b      	adds	r3, r7, r4
 80195f4:	781a      	ldrb	r2, [r3, #0]
 80195f6:	193b      	adds	r3, r7, r4
 80195f8:	3201      	adds	r2, #1
 80195fa:	701a      	strb	r2, [r3, #0]
 80195fc:	230f      	movs	r3, #15
 80195fe:	18fb      	adds	r3, r7, r3
 8019600:	781a      	ldrb	r2, [r3, #0]
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	685b      	ldr	r3, [r3, #4]
 8019606:	429a      	cmp	r2, r3
 8019608:	d3a1      	bcc.n	801954e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	6818      	ldr	r0, [r3, #0]
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	466a      	mov	r2, sp
 8019612:	0011      	movs	r1, r2
 8019614:	001a      	movs	r2, r3
 8019616:	3210      	adds	r2, #16
 8019618:	ca70      	ldmia	r2!, {r4, r5, r6}
 801961a:	c170      	stmia	r1!, {r4, r5, r6}
 801961c:	ca30      	ldmia	r2!, {r4, r5}
 801961e:	c130      	stmia	r1!, {r4, r5}
 8019620:	6859      	ldr	r1, [r3, #4]
 8019622:	689a      	ldr	r2, [r3, #8]
 8019624:	68db      	ldr	r3, [r3, #12]
 8019626:	f005 fe57 	bl	801f2d8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	2224      	movs	r2, #36	@ 0x24
 801962e:	2100      	movs	r1, #0
 8019630:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	4a07      	ldr	r2, [pc, #28]	@ (8019654 <HAL_PCD_Init+0x1fc>)
 8019636:	2101      	movs	r1, #1
 8019638:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	69db      	ldr	r3, [r3, #28]
 801963e:	2b01      	cmp	r3, #1
 8019640:	d103      	bne.n	801964a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	0018      	movs	r0, r3
 8019646:	f001 fd23 	bl	801b090 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801964a:	2300      	movs	r3, #0
}
 801964c:	0018      	movs	r0, r3
 801964e:	46bd      	mov	sp, r7
 8019650:	b005      	add	sp, #20
 8019652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019654:	000002a9 	.word	0x000002a9

08019658 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b082      	sub	sp, #8
 801965c:	af00      	add	r7, sp, #0
 801965e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8019660:	687a      	ldr	r2, [r7, #4]
 8019662:	23aa      	movs	r3, #170	@ 0xaa
 8019664:	009b      	lsls	r3, r3, #2
 8019666:	5cd3      	ldrb	r3, [r2, r3]
 8019668:	2b01      	cmp	r3, #1
 801966a:	d101      	bne.n	8019670 <HAL_PCD_Start+0x18>
 801966c:	2302      	movs	r3, #2
 801966e:	e014      	b.n	801969a <HAL_PCD_Start+0x42>
 8019670:	687a      	ldr	r2, [r7, #4]
 8019672:	23aa      	movs	r3, #170	@ 0xaa
 8019674:	009b      	lsls	r3, r3, #2
 8019676:	2101      	movs	r1, #1
 8019678:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	0018      	movs	r0, r3
 8019680:	f005 fdfa 	bl	801f278 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	0018      	movs	r0, r3
 801968a:	f007 fdfd 	bl	8021288 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801968e:	687a      	ldr	r2, [r7, #4]
 8019690:	23aa      	movs	r3, #170	@ 0xaa
 8019692:	009b      	lsls	r3, r3, #2
 8019694:	2100      	movs	r1, #0
 8019696:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019698:	2300      	movs	r3, #0
}
 801969a:	0018      	movs	r0, r3
 801969c:	46bd      	mov	sp, r7
 801969e:	b002      	add	sp, #8
 80196a0:	bd80      	pop	{r7, pc}
	...

080196a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b084      	sub	sp, #16
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	0018      	movs	r0, r3
 80196b2:	f007 fdff 	bl	80212b4 <USB_ReadInterrupts>
 80196b6:	0003      	movs	r3, r0
 80196b8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80196ba:	68fa      	ldr	r2, [r7, #12]
 80196bc:	2380      	movs	r3, #128	@ 0x80
 80196be:	021b      	lsls	r3, r3, #8
 80196c0:	4013      	ands	r3, r2
 80196c2:	d004      	beq.n	80196ce <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	0018      	movs	r0, r3
 80196c8:	f000 fb62 	bl	8019d90 <PCD_EP_ISR_Handler>

    return;
 80196cc:	e11d      	b.n	801990a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80196ce:	68fa      	ldr	r2, [r7, #12]
 80196d0:	2380      	movs	r3, #128	@ 0x80
 80196d2:	00db      	lsls	r3, r3, #3
 80196d4:	4013      	ands	r3, r2
 80196d6:	d015      	beq.n	8019704 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	2244      	movs	r2, #68	@ 0x44
 80196de:	5a9b      	ldrh	r3, [r3, r2]
 80196e0:	b29a      	uxth	r2, r3
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	498a      	ldr	r1, [pc, #552]	@ (8019910 <HAL_PCD_IRQHandler+0x26c>)
 80196e8:	400a      	ands	r2, r1
 80196ea:	b291      	uxth	r1, r2
 80196ec:	2244      	movs	r2, #68	@ 0x44
 80196ee:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	0018      	movs	r0, r3
 80196f4:	f009 feab 	bl	802344e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2100      	movs	r1, #0
 80196fc:	0018      	movs	r0, r3
 80196fe:	f000 f915 	bl	801992c <HAL_PCD_SetAddress>

    return;
 8019702:	e102      	b.n	801990a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8019704:	68fa      	ldr	r2, [r7, #12]
 8019706:	2380      	movs	r3, #128	@ 0x80
 8019708:	01db      	lsls	r3, r3, #7
 801970a:	4013      	ands	r3, r2
 801970c:	d00c      	beq.n	8019728 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	2244      	movs	r2, #68	@ 0x44
 8019714:	5a9b      	ldrh	r3, [r3, r2]
 8019716:	b29a      	uxth	r2, r3
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	497d      	ldr	r1, [pc, #500]	@ (8019914 <HAL_PCD_IRQHandler+0x270>)
 801971e:	400a      	ands	r2, r1
 8019720:	b291      	uxth	r1, r2
 8019722:	2244      	movs	r2, #68	@ 0x44
 8019724:	5299      	strh	r1, [r3, r2]

    return;
 8019726:	e0f0      	b.n	801990a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8019728:	68fa      	ldr	r2, [r7, #12]
 801972a:	2380      	movs	r3, #128	@ 0x80
 801972c:	019b      	lsls	r3, r3, #6
 801972e:	4013      	ands	r3, r2
 8019730:	d00c      	beq.n	801974c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	2244      	movs	r2, #68	@ 0x44
 8019738:	5a9b      	ldrh	r3, [r3, r2]
 801973a:	b29a      	uxth	r2, r3
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	4975      	ldr	r1, [pc, #468]	@ (8019918 <HAL_PCD_IRQHandler+0x274>)
 8019742:	400a      	ands	r2, r1
 8019744:	b291      	uxth	r1, r2
 8019746:	2244      	movs	r2, #68	@ 0x44
 8019748:	5299      	strh	r1, [r3, r2]

    return;
 801974a:	e0de      	b.n	801990a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 801974c:	68fa      	ldr	r2, [r7, #12]
 801974e:	2380      	movs	r3, #128	@ 0x80
 8019750:	015b      	lsls	r3, r3, #5
 8019752:	4013      	ands	r3, r2
 8019754:	d038      	beq.n	80197c8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	2240      	movs	r2, #64	@ 0x40
 801975c:	5a9b      	ldrh	r3, [r3, r2]
 801975e:	b29a      	uxth	r2, r3
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	2104      	movs	r1, #4
 8019766:	438a      	bics	r2, r1
 8019768:	b291      	uxth	r1, r2
 801976a:	2240      	movs	r2, #64	@ 0x40
 801976c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	2240      	movs	r2, #64	@ 0x40
 8019774:	5a9b      	ldrh	r3, [r3, r2]
 8019776:	b29a      	uxth	r2, r3
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	2108      	movs	r1, #8
 801977e:	438a      	bics	r2, r1
 8019780:	b291      	uxth	r1, r2
 8019782:	2240      	movs	r2, #64	@ 0x40
 8019784:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8019786:	687a      	ldr	r2, [r7, #4]
 8019788:	23b8      	movs	r3, #184	@ 0xb8
 801978a:	009b      	lsls	r3, r3, #2
 801978c:	5cd3      	ldrb	r3, [r2, r3]
 801978e:	2b01      	cmp	r3, #1
 8019790:	d109      	bne.n	80197a6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8019792:	687a      	ldr	r2, [r7, #4]
 8019794:	23b8      	movs	r3, #184	@ 0xb8
 8019796:	009b      	lsls	r3, r3, #2
 8019798:	2100      	movs	r1, #0
 801979a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	2100      	movs	r1, #0
 80197a0:	0018      	movs	r0, r3
 80197a2:	f001 fc9f 	bl	801b0e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	0018      	movs	r0, r3
 80197aa:	f009 fe91 	bl	80234d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	2244      	movs	r2, #68	@ 0x44
 80197b4:	5a9b      	ldrh	r3, [r3, r2]
 80197b6:	b29a      	uxth	r2, r3
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	4957      	ldr	r1, [pc, #348]	@ (801991c <HAL_PCD_IRQHandler+0x278>)
 80197be:	400a      	ands	r2, r1
 80197c0:	b291      	uxth	r1, r2
 80197c2:	2244      	movs	r2, #68	@ 0x44
 80197c4:	5299      	strh	r1, [r3, r2]

    return;
 80197c6:	e0a0      	b.n	801990a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80197c8:	68fa      	ldr	r2, [r7, #12]
 80197ca:	2380      	movs	r3, #128	@ 0x80
 80197cc:	011b      	lsls	r3, r3, #4
 80197ce:	4013      	ands	r3, r2
 80197d0:	d028      	beq.n	8019824 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	2240      	movs	r2, #64	@ 0x40
 80197d8:	5a9b      	ldrh	r3, [r3, r2]
 80197da:	b29a      	uxth	r2, r3
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	2108      	movs	r1, #8
 80197e2:	430a      	orrs	r2, r1
 80197e4:	b291      	uxth	r1, r2
 80197e6:	2240      	movs	r2, #64	@ 0x40
 80197e8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	2244      	movs	r2, #68	@ 0x44
 80197f0:	5a9b      	ldrh	r3, [r3, r2]
 80197f2:	b29a      	uxth	r2, r3
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	4949      	ldr	r1, [pc, #292]	@ (8019920 <HAL_PCD_IRQHandler+0x27c>)
 80197fa:	400a      	ands	r2, r1
 80197fc:	b291      	uxth	r1, r2
 80197fe:	2244      	movs	r2, #68	@ 0x44
 8019800:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	2240      	movs	r2, #64	@ 0x40
 8019808:	5a9b      	ldrh	r3, [r3, r2]
 801980a:	b29a      	uxth	r2, r3
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	2104      	movs	r1, #4
 8019812:	430a      	orrs	r2, r1
 8019814:	b291      	uxth	r1, r2
 8019816:	2240      	movs	r2, #64	@ 0x40
 8019818:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	0018      	movs	r0, r3
 801981e:	f009 fe3b 	bl	8023498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8019822:	e072      	b.n	801990a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	2280      	movs	r2, #128	@ 0x80
 8019828:	4013      	ands	r3, r2
 801982a:	d046      	beq.n	80198ba <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	2244      	movs	r2, #68	@ 0x44
 8019832:	5a9b      	ldrh	r3, [r3, r2]
 8019834:	b29a      	uxth	r2, r3
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	2180      	movs	r1, #128	@ 0x80
 801983c:	438a      	bics	r2, r1
 801983e:	b291      	uxth	r1, r2
 8019840:	2244      	movs	r2, #68	@ 0x44
 8019842:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8019844:	687a      	ldr	r2, [r7, #4]
 8019846:	23b8      	movs	r3, #184	@ 0xb8
 8019848:	009b      	lsls	r3, r3, #2
 801984a:	5cd3      	ldrb	r3, [r2, r3]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d12f      	bne.n	80198b0 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	2240      	movs	r2, #64	@ 0x40
 8019856:	5a9b      	ldrh	r3, [r3, r2]
 8019858:	b29a      	uxth	r2, r3
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	2104      	movs	r1, #4
 8019860:	430a      	orrs	r2, r1
 8019862:	b291      	uxth	r1, r2
 8019864:	2240      	movs	r2, #64	@ 0x40
 8019866:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	2240      	movs	r2, #64	@ 0x40
 801986e:	5a9b      	ldrh	r3, [r3, r2]
 8019870:	b29a      	uxth	r2, r3
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	2108      	movs	r1, #8
 8019878:	430a      	orrs	r2, r1
 801987a:	b291      	uxth	r1, r2
 801987c:	2240      	movs	r2, #64	@ 0x40
 801987e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8019880:	687a      	ldr	r2, [r7, #4]
 8019882:	23b8      	movs	r3, #184	@ 0xb8
 8019884:	009b      	lsls	r3, r3, #2
 8019886:	2101      	movs	r1, #1
 8019888:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	2254      	movs	r2, #84	@ 0x54
 8019890:	5a9b      	ldrh	r3, [r3, r2]
 8019892:	b29b      	uxth	r3, r3
 8019894:	089b      	lsrs	r3, r3, #2
 8019896:	223c      	movs	r2, #60	@ 0x3c
 8019898:	4013      	ands	r3, r2
 801989a:	0019      	movs	r1, r3
 801989c:	687a      	ldr	r2, [r7, #4]
 801989e:	23b9      	movs	r3, #185	@ 0xb9
 80198a0:	009b      	lsls	r3, r3, #2
 80198a2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	2101      	movs	r1, #1
 80198a8:	0018      	movs	r0, r3
 80198aa:	f001 fc1b 	bl	801b0e4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80198ae:	e02c      	b.n	801990a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	0018      	movs	r0, r3
 80198b4:	f009 fdf0 	bl	8023498 <HAL_PCD_SuspendCallback>
    return;
 80198b8:	e027      	b.n	801990a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80198ba:	68fa      	ldr	r2, [r7, #12]
 80198bc:	2380      	movs	r3, #128	@ 0x80
 80198be:	009b      	lsls	r3, r3, #2
 80198c0:	4013      	ands	r3, r2
 80198c2:	d010      	beq.n	80198e6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	2244      	movs	r2, #68	@ 0x44
 80198ca:	5a9b      	ldrh	r3, [r3, r2]
 80198cc:	b29a      	uxth	r2, r3
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	4914      	ldr	r1, [pc, #80]	@ (8019924 <HAL_PCD_IRQHandler+0x280>)
 80198d4:	400a      	ands	r2, r1
 80198d6:	b291      	uxth	r1, r2
 80198d8:	2244      	movs	r2, #68	@ 0x44
 80198da:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	0018      	movs	r0, r3
 80198e0:	f009 fda6 	bl	8023430 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80198e4:	e011      	b.n	801990a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80198e6:	68fa      	ldr	r2, [r7, #12]
 80198e8:	2380      	movs	r3, #128	@ 0x80
 80198ea:	005b      	lsls	r3, r3, #1
 80198ec:	4013      	ands	r3, r2
 80198ee:	d00c      	beq.n	801990a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	2244      	movs	r2, #68	@ 0x44
 80198f6:	5a9b      	ldrh	r3, [r3, r2]
 80198f8:	b29a      	uxth	r2, r3
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	490a      	ldr	r1, [pc, #40]	@ (8019928 <HAL_PCD_IRQHandler+0x284>)
 8019900:	400a      	ands	r2, r1
 8019902:	b291      	uxth	r1, r2
 8019904:	2244      	movs	r2, #68	@ 0x44
 8019906:	5299      	strh	r1, [r3, r2]

    return;
 8019908:	46c0      	nop			@ (mov r8, r8)
  }
}
 801990a:	46bd      	mov	sp, r7
 801990c:	b004      	add	sp, #16
 801990e:	bd80      	pop	{r7, pc}
 8019910:	fffffbff 	.word	0xfffffbff
 8019914:	ffffbfff 	.word	0xffffbfff
 8019918:	ffffdfff 	.word	0xffffdfff
 801991c:	ffffefff 	.word	0xffffefff
 8019920:	fffff7ff 	.word	0xfffff7ff
 8019924:	fffffdff 	.word	0xfffffdff
 8019928:	fffffeff 	.word	0xfffffeff

0801992c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801992c:	b580      	push	{r7, lr}
 801992e:	b082      	sub	sp, #8
 8019930:	af00      	add	r7, sp, #0
 8019932:	6078      	str	r0, [r7, #4]
 8019934:	000a      	movs	r2, r1
 8019936:	1cfb      	adds	r3, r7, #3
 8019938:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 801993a:	687a      	ldr	r2, [r7, #4]
 801993c:	23aa      	movs	r3, #170	@ 0xaa
 801993e:	009b      	lsls	r3, r3, #2
 8019940:	5cd3      	ldrb	r3, [r2, r3]
 8019942:	2b01      	cmp	r3, #1
 8019944:	d101      	bne.n	801994a <HAL_PCD_SetAddress+0x1e>
 8019946:	2302      	movs	r3, #2
 8019948:	e017      	b.n	801997a <HAL_PCD_SetAddress+0x4e>
 801994a:	687a      	ldr	r2, [r7, #4]
 801994c:	23aa      	movs	r3, #170	@ 0xaa
 801994e:	009b      	lsls	r3, r3, #2
 8019950:	2101      	movs	r1, #1
 8019952:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	1cfa      	adds	r2, r7, #3
 8019958:	2124      	movs	r1, #36	@ 0x24
 801995a:	7812      	ldrb	r2, [r2, #0]
 801995c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	681a      	ldr	r2, [r3, #0]
 8019962:	1cfb      	adds	r3, r7, #3
 8019964:	781b      	ldrb	r3, [r3, #0]
 8019966:	0019      	movs	r1, r3
 8019968:	0010      	movs	r0, r2
 801996a:	f007 fc79 	bl	8021260 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801996e:	687a      	ldr	r2, [r7, #4]
 8019970:	23aa      	movs	r3, #170	@ 0xaa
 8019972:	009b      	lsls	r3, r3, #2
 8019974:	2100      	movs	r1, #0
 8019976:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019978:	2300      	movs	r3, #0
}
 801997a:	0018      	movs	r0, r3
 801997c:	46bd      	mov	sp, r7
 801997e:	b002      	add	sp, #8
 8019980:	bd80      	pop	{r7, pc}

08019982 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8019982:	b590      	push	{r4, r7, lr}
 8019984:	b085      	sub	sp, #20
 8019986:	af00      	add	r7, sp, #0
 8019988:	6078      	str	r0, [r7, #4]
 801998a:	000c      	movs	r4, r1
 801998c:	0010      	movs	r0, r2
 801998e:	0019      	movs	r1, r3
 8019990:	1cfb      	adds	r3, r7, #3
 8019992:	1c22      	adds	r2, r4, #0
 8019994:	701a      	strb	r2, [r3, #0]
 8019996:	003b      	movs	r3, r7
 8019998:	1c02      	adds	r2, r0, #0
 801999a:	801a      	strh	r2, [r3, #0]
 801999c:	1cbb      	adds	r3, r7, #2
 801999e:	1c0a      	adds	r2, r1, #0
 80199a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80199a2:	230b      	movs	r3, #11
 80199a4:	18fb      	adds	r3, r7, r3
 80199a6:	2200      	movs	r2, #0
 80199a8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80199aa:	1cfb      	adds	r3, r7, #3
 80199ac:	781b      	ldrb	r3, [r3, #0]
 80199ae:	b25b      	sxtb	r3, r3
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	da0f      	bge.n	80199d4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80199b4:	1cfb      	adds	r3, r7, #3
 80199b6:	781b      	ldrb	r3, [r3, #0]
 80199b8:	2207      	movs	r2, #7
 80199ba:	4013      	ands	r3, r2
 80199bc:	1c5a      	adds	r2, r3, #1
 80199be:	0013      	movs	r3, r2
 80199c0:	009b      	lsls	r3, r3, #2
 80199c2:	189b      	adds	r3, r3, r2
 80199c4:	00db      	lsls	r3, r3, #3
 80199c6:	687a      	ldr	r2, [r7, #4]
 80199c8:	18d3      	adds	r3, r2, r3
 80199ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	2201      	movs	r2, #1
 80199d0:	705a      	strb	r2, [r3, #1]
 80199d2:	e00f      	b.n	80199f4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80199d4:	1cfb      	adds	r3, r7, #3
 80199d6:	781b      	ldrb	r3, [r3, #0]
 80199d8:	2207      	movs	r2, #7
 80199da:	401a      	ands	r2, r3
 80199dc:	0013      	movs	r3, r2
 80199de:	009b      	lsls	r3, r3, #2
 80199e0:	189b      	adds	r3, r3, r2
 80199e2:	00db      	lsls	r3, r3, #3
 80199e4:	3369      	adds	r3, #105	@ 0x69
 80199e6:	33ff      	adds	r3, #255	@ 0xff
 80199e8:	687a      	ldr	r2, [r7, #4]
 80199ea:	18d3      	adds	r3, r2, r3
 80199ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	2200      	movs	r2, #0
 80199f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80199f4:	1cfb      	adds	r3, r7, #3
 80199f6:	781b      	ldrb	r3, [r3, #0]
 80199f8:	2207      	movs	r2, #7
 80199fa:	4013      	ands	r3, r2
 80199fc:	b2da      	uxtb	r2, r3
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8019a02:	003b      	movs	r3, r7
 8019a04:	881a      	ldrh	r2, [r3, #0]
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	1cba      	adds	r2, r7, #2
 8019a0e:	7812      	ldrb	r2, [r2, #0]
 8019a10:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8019a12:	1cbb      	adds	r3, r7, #2
 8019a14:	781b      	ldrb	r3, [r3, #0]
 8019a16:	2b02      	cmp	r3, #2
 8019a18:	d102      	bne.n	8019a20 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	2200      	movs	r2, #0
 8019a1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8019a20:	687a      	ldr	r2, [r7, #4]
 8019a22:	23aa      	movs	r3, #170	@ 0xaa
 8019a24:	009b      	lsls	r3, r3, #2
 8019a26:	5cd3      	ldrb	r3, [r2, r3]
 8019a28:	2b01      	cmp	r3, #1
 8019a2a:	d101      	bne.n	8019a30 <HAL_PCD_EP_Open+0xae>
 8019a2c:	2302      	movs	r3, #2
 8019a2e:	e013      	b.n	8019a58 <HAL_PCD_EP_Open+0xd6>
 8019a30:	687a      	ldr	r2, [r7, #4]
 8019a32:	23aa      	movs	r3, #170	@ 0xaa
 8019a34:	009b      	lsls	r3, r3, #2
 8019a36:	2101      	movs	r1, #1
 8019a38:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	68fa      	ldr	r2, [r7, #12]
 8019a40:	0011      	movs	r1, r2
 8019a42:	0018      	movs	r0, r3
 8019a44:	f005 fc70 	bl	801f328 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019a48:	687a      	ldr	r2, [r7, #4]
 8019a4a:	23aa      	movs	r3, #170	@ 0xaa
 8019a4c:	009b      	lsls	r3, r3, #2
 8019a4e:	2100      	movs	r1, #0
 8019a50:	54d1      	strb	r1, [r2, r3]

  return ret;
 8019a52:	230b      	movs	r3, #11
 8019a54:	18fb      	adds	r3, r7, r3
 8019a56:	781b      	ldrb	r3, [r3, #0]
}
 8019a58:	0018      	movs	r0, r3
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	b005      	add	sp, #20
 8019a5e:	bd90      	pop	{r4, r7, pc}

08019a60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b084      	sub	sp, #16
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
 8019a68:	000a      	movs	r2, r1
 8019a6a:	1cfb      	adds	r3, r7, #3
 8019a6c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019a6e:	1cfb      	adds	r3, r7, #3
 8019a70:	781b      	ldrb	r3, [r3, #0]
 8019a72:	b25b      	sxtb	r3, r3
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	da0f      	bge.n	8019a98 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019a78:	1cfb      	adds	r3, r7, #3
 8019a7a:	781b      	ldrb	r3, [r3, #0]
 8019a7c:	2207      	movs	r2, #7
 8019a7e:	4013      	ands	r3, r2
 8019a80:	1c5a      	adds	r2, r3, #1
 8019a82:	0013      	movs	r3, r2
 8019a84:	009b      	lsls	r3, r3, #2
 8019a86:	189b      	adds	r3, r3, r2
 8019a88:	00db      	lsls	r3, r3, #3
 8019a8a:	687a      	ldr	r2, [r7, #4]
 8019a8c:	18d3      	adds	r3, r2, r3
 8019a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	2201      	movs	r2, #1
 8019a94:	705a      	strb	r2, [r3, #1]
 8019a96:	e00f      	b.n	8019ab8 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019a98:	1cfb      	adds	r3, r7, #3
 8019a9a:	781b      	ldrb	r3, [r3, #0]
 8019a9c:	2207      	movs	r2, #7
 8019a9e:	401a      	ands	r2, r3
 8019aa0:	0013      	movs	r3, r2
 8019aa2:	009b      	lsls	r3, r3, #2
 8019aa4:	189b      	adds	r3, r3, r2
 8019aa6:	00db      	lsls	r3, r3, #3
 8019aa8:	3369      	adds	r3, #105	@ 0x69
 8019aaa:	33ff      	adds	r3, #255	@ 0xff
 8019aac:	687a      	ldr	r2, [r7, #4]
 8019aae:	18d3      	adds	r3, r2, r3
 8019ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	2200      	movs	r2, #0
 8019ab6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019ab8:	1cfb      	adds	r3, r7, #3
 8019aba:	781b      	ldrb	r3, [r3, #0]
 8019abc:	2207      	movs	r2, #7
 8019abe:	4013      	ands	r3, r2
 8019ac0:	b2da      	uxtb	r2, r3
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019ac6:	687a      	ldr	r2, [r7, #4]
 8019ac8:	23aa      	movs	r3, #170	@ 0xaa
 8019aca:	009b      	lsls	r3, r3, #2
 8019acc:	5cd3      	ldrb	r3, [r2, r3]
 8019ace:	2b01      	cmp	r3, #1
 8019ad0:	d101      	bne.n	8019ad6 <HAL_PCD_EP_Close+0x76>
 8019ad2:	2302      	movs	r3, #2
 8019ad4:	e011      	b.n	8019afa <HAL_PCD_EP_Close+0x9a>
 8019ad6:	687a      	ldr	r2, [r7, #4]
 8019ad8:	23aa      	movs	r3, #170	@ 0xaa
 8019ada:	009b      	lsls	r3, r3, #2
 8019adc:	2101      	movs	r1, #1
 8019ade:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	68fa      	ldr	r2, [r7, #12]
 8019ae6:	0011      	movs	r1, r2
 8019ae8:	0018      	movs	r0, r3
 8019aea:	f005 ffbf 	bl	801fa6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019aee:	687a      	ldr	r2, [r7, #4]
 8019af0:	23aa      	movs	r3, #170	@ 0xaa
 8019af2:	009b      	lsls	r3, r3, #2
 8019af4:	2100      	movs	r1, #0
 8019af6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8019af8:	2300      	movs	r3, #0
}
 8019afa:	0018      	movs	r0, r3
 8019afc:	46bd      	mov	sp, r7
 8019afe:	b004      	add	sp, #16
 8019b00:	bd80      	pop	{r7, pc}

08019b02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019b02:	b580      	push	{r7, lr}
 8019b04:	b086      	sub	sp, #24
 8019b06:	af00      	add	r7, sp, #0
 8019b08:	60f8      	str	r0, [r7, #12]
 8019b0a:	607a      	str	r2, [r7, #4]
 8019b0c:	603b      	str	r3, [r7, #0]
 8019b0e:	200b      	movs	r0, #11
 8019b10:	183b      	adds	r3, r7, r0
 8019b12:	1c0a      	adds	r2, r1, #0
 8019b14:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019b16:	0001      	movs	r1, r0
 8019b18:	187b      	adds	r3, r7, r1
 8019b1a:	781b      	ldrb	r3, [r3, #0]
 8019b1c:	2207      	movs	r2, #7
 8019b1e:	401a      	ands	r2, r3
 8019b20:	0013      	movs	r3, r2
 8019b22:	009b      	lsls	r3, r3, #2
 8019b24:	189b      	adds	r3, r3, r2
 8019b26:	00db      	lsls	r3, r3, #3
 8019b28:	3369      	adds	r3, #105	@ 0x69
 8019b2a:	33ff      	adds	r3, #255	@ 0xff
 8019b2c:	68fa      	ldr	r2, [r7, #12]
 8019b2e:	18d3      	adds	r3, r2, r3
 8019b30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019b32:	697b      	ldr	r3, [r7, #20]
 8019b34:	687a      	ldr	r2, [r7, #4]
 8019b36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019b38:	697b      	ldr	r3, [r7, #20]
 8019b3a:	683a      	ldr	r2, [r7, #0]
 8019b3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8019b3e:	697b      	ldr	r3, [r7, #20]
 8019b40:	2200      	movs	r2, #0
 8019b42:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8019b44:	697b      	ldr	r3, [r7, #20]
 8019b46:	2200      	movs	r2, #0
 8019b48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019b4a:	187b      	adds	r3, r7, r1
 8019b4c:	781b      	ldrb	r3, [r3, #0]
 8019b4e:	2207      	movs	r2, #7
 8019b50:	4013      	ands	r3, r2
 8019b52:	b2da      	uxtb	r2, r3
 8019b54:	697b      	ldr	r3, [r7, #20]
 8019b56:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	697a      	ldr	r2, [r7, #20]
 8019b5e:	0011      	movs	r1, r2
 8019b60:	0018      	movs	r0, r3
 8019b62:	f006 f943 	bl	801fdec <USB_EPStartXfer>

  return HAL_OK;
 8019b66:	2300      	movs	r3, #0
}
 8019b68:	0018      	movs	r0, r3
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	b006      	add	sp, #24
 8019b6e:	bd80      	pop	{r7, pc}

08019b70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b082      	sub	sp, #8
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
 8019b78:	000a      	movs	r2, r1
 8019b7a:	1cfb      	adds	r3, r7, #3
 8019b7c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8019b7e:	1cfb      	adds	r3, r7, #3
 8019b80:	781b      	ldrb	r3, [r3, #0]
 8019b82:	2207      	movs	r2, #7
 8019b84:	401a      	ands	r2, r3
 8019b86:	6878      	ldr	r0, [r7, #4]
 8019b88:	23c2      	movs	r3, #194	@ 0xc2
 8019b8a:	0059      	lsls	r1, r3, #1
 8019b8c:	0013      	movs	r3, r2
 8019b8e:	009b      	lsls	r3, r3, #2
 8019b90:	189b      	adds	r3, r3, r2
 8019b92:	00db      	lsls	r3, r3, #3
 8019b94:	18c3      	adds	r3, r0, r3
 8019b96:	185b      	adds	r3, r3, r1
 8019b98:	681b      	ldr	r3, [r3, #0]
}
 8019b9a:	0018      	movs	r0, r3
 8019b9c:	46bd      	mov	sp, r7
 8019b9e:	b002      	add	sp, #8
 8019ba0:	bd80      	pop	{r7, pc}

08019ba2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019ba2:	b580      	push	{r7, lr}
 8019ba4:	b086      	sub	sp, #24
 8019ba6:	af00      	add	r7, sp, #0
 8019ba8:	60f8      	str	r0, [r7, #12]
 8019baa:	607a      	str	r2, [r7, #4]
 8019bac:	603b      	str	r3, [r7, #0]
 8019bae:	200b      	movs	r0, #11
 8019bb0:	183b      	adds	r3, r7, r0
 8019bb2:	1c0a      	adds	r2, r1, #0
 8019bb4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019bb6:	183b      	adds	r3, r7, r0
 8019bb8:	781b      	ldrb	r3, [r3, #0]
 8019bba:	2207      	movs	r2, #7
 8019bbc:	4013      	ands	r3, r2
 8019bbe:	1c5a      	adds	r2, r3, #1
 8019bc0:	0013      	movs	r3, r2
 8019bc2:	009b      	lsls	r3, r3, #2
 8019bc4:	189b      	adds	r3, r3, r2
 8019bc6:	00db      	lsls	r3, r3, #3
 8019bc8:	68fa      	ldr	r2, [r7, #12]
 8019bca:	18d3      	adds	r3, r2, r3
 8019bcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019bce:	697b      	ldr	r3, [r7, #20]
 8019bd0:	687a      	ldr	r2, [r7, #4]
 8019bd2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019bd4:	697b      	ldr	r3, [r7, #20]
 8019bd6:	683a      	ldr	r2, [r7, #0]
 8019bd8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019bda:	697b      	ldr	r3, [r7, #20]
 8019bdc:	2224      	movs	r2, #36	@ 0x24
 8019bde:	2101      	movs	r1, #1
 8019be0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8019be2:	697b      	ldr	r3, [r7, #20]
 8019be4:	683a      	ldr	r2, [r7, #0]
 8019be6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019be8:	697b      	ldr	r3, [r7, #20]
 8019bea:	2200      	movs	r2, #0
 8019bec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	2201      	movs	r2, #1
 8019bf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019bf4:	183b      	adds	r3, r7, r0
 8019bf6:	781b      	ldrb	r3, [r3, #0]
 8019bf8:	2207      	movs	r2, #7
 8019bfa:	4013      	ands	r3, r2
 8019bfc:	b2da      	uxtb	r2, r3
 8019bfe:	697b      	ldr	r3, [r7, #20]
 8019c00:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	697a      	ldr	r2, [r7, #20]
 8019c08:	0011      	movs	r1, r2
 8019c0a:	0018      	movs	r0, r3
 8019c0c:	f006 f8ee 	bl	801fdec <USB_EPStartXfer>

  return HAL_OK;
 8019c10:	2300      	movs	r3, #0
}
 8019c12:	0018      	movs	r0, r3
 8019c14:	46bd      	mov	sp, r7
 8019c16:	b006      	add	sp, #24
 8019c18:	bd80      	pop	{r7, pc}

08019c1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019c1a:	b580      	push	{r7, lr}
 8019c1c:	b084      	sub	sp, #16
 8019c1e:	af00      	add	r7, sp, #0
 8019c20:	6078      	str	r0, [r7, #4]
 8019c22:	000a      	movs	r2, r1
 8019c24:	1cfb      	adds	r3, r7, #3
 8019c26:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8019c28:	1cfb      	adds	r3, r7, #3
 8019c2a:	781b      	ldrb	r3, [r3, #0]
 8019c2c:	2207      	movs	r2, #7
 8019c2e:	401a      	ands	r2, r3
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	685b      	ldr	r3, [r3, #4]
 8019c34:	429a      	cmp	r2, r3
 8019c36:	d901      	bls.n	8019c3c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019c38:	2301      	movs	r3, #1
 8019c3a:	e046      	b.n	8019cca <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019c3c:	1cfb      	adds	r3, r7, #3
 8019c3e:	781b      	ldrb	r3, [r3, #0]
 8019c40:	b25b      	sxtb	r3, r3
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	da0f      	bge.n	8019c66 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019c46:	1cfb      	adds	r3, r7, #3
 8019c48:	781b      	ldrb	r3, [r3, #0]
 8019c4a:	2207      	movs	r2, #7
 8019c4c:	4013      	ands	r3, r2
 8019c4e:	1c5a      	adds	r2, r3, #1
 8019c50:	0013      	movs	r3, r2
 8019c52:	009b      	lsls	r3, r3, #2
 8019c54:	189b      	adds	r3, r3, r2
 8019c56:	00db      	lsls	r3, r3, #3
 8019c58:	687a      	ldr	r2, [r7, #4]
 8019c5a:	18d3      	adds	r3, r2, r3
 8019c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	2201      	movs	r2, #1
 8019c62:	705a      	strb	r2, [r3, #1]
 8019c64:	e00d      	b.n	8019c82 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019c66:	1cfb      	adds	r3, r7, #3
 8019c68:	781a      	ldrb	r2, [r3, #0]
 8019c6a:	0013      	movs	r3, r2
 8019c6c:	009b      	lsls	r3, r3, #2
 8019c6e:	189b      	adds	r3, r3, r2
 8019c70:	00db      	lsls	r3, r3, #3
 8019c72:	3369      	adds	r3, #105	@ 0x69
 8019c74:	33ff      	adds	r3, #255	@ 0xff
 8019c76:	687a      	ldr	r2, [r7, #4]
 8019c78:	18d3      	adds	r3, r2, r3
 8019c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	2200      	movs	r2, #0
 8019c80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	2201      	movs	r2, #1
 8019c86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019c88:	1cfb      	adds	r3, r7, #3
 8019c8a:	781b      	ldrb	r3, [r3, #0]
 8019c8c:	2207      	movs	r2, #7
 8019c8e:	4013      	ands	r3, r2
 8019c90:	b2da      	uxtb	r2, r3
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019c96:	687a      	ldr	r2, [r7, #4]
 8019c98:	23aa      	movs	r3, #170	@ 0xaa
 8019c9a:	009b      	lsls	r3, r3, #2
 8019c9c:	5cd3      	ldrb	r3, [r2, r3]
 8019c9e:	2b01      	cmp	r3, #1
 8019ca0:	d101      	bne.n	8019ca6 <HAL_PCD_EP_SetStall+0x8c>
 8019ca2:	2302      	movs	r3, #2
 8019ca4:	e011      	b.n	8019cca <HAL_PCD_EP_SetStall+0xb0>
 8019ca6:	687a      	ldr	r2, [r7, #4]
 8019ca8:	23aa      	movs	r3, #170	@ 0xaa
 8019caa:	009b      	lsls	r3, r3, #2
 8019cac:	2101      	movs	r1, #1
 8019cae:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	68fa      	ldr	r2, [r7, #12]
 8019cb6:	0011      	movs	r1, r2
 8019cb8:	0018      	movs	r0, r3
 8019cba:	f007 f9cf 	bl	802105c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8019cbe:	687a      	ldr	r2, [r7, #4]
 8019cc0:	23aa      	movs	r3, #170	@ 0xaa
 8019cc2:	009b      	lsls	r3, r3, #2
 8019cc4:	2100      	movs	r1, #0
 8019cc6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019cc8:	2300      	movs	r3, #0
}
 8019cca:	0018      	movs	r0, r3
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	b004      	add	sp, #16
 8019cd0:	bd80      	pop	{r7, pc}

08019cd2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019cd2:	b580      	push	{r7, lr}
 8019cd4:	b084      	sub	sp, #16
 8019cd6:	af00      	add	r7, sp, #0
 8019cd8:	6078      	str	r0, [r7, #4]
 8019cda:	000a      	movs	r2, r1
 8019cdc:	1cfb      	adds	r3, r7, #3
 8019cde:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8019ce0:	1cfb      	adds	r3, r7, #3
 8019ce2:	781b      	ldrb	r3, [r3, #0]
 8019ce4:	220f      	movs	r2, #15
 8019ce6:	401a      	ands	r2, r3
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	685b      	ldr	r3, [r3, #4]
 8019cec:	429a      	cmp	r2, r3
 8019cee:	d901      	bls.n	8019cf4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8019cf0:	2301      	movs	r3, #1
 8019cf2:	e048      	b.n	8019d86 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019cf4:	1cfb      	adds	r3, r7, #3
 8019cf6:	781b      	ldrb	r3, [r3, #0]
 8019cf8:	b25b      	sxtb	r3, r3
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	da0f      	bge.n	8019d1e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019cfe:	1cfb      	adds	r3, r7, #3
 8019d00:	781b      	ldrb	r3, [r3, #0]
 8019d02:	2207      	movs	r2, #7
 8019d04:	4013      	ands	r3, r2
 8019d06:	1c5a      	adds	r2, r3, #1
 8019d08:	0013      	movs	r3, r2
 8019d0a:	009b      	lsls	r3, r3, #2
 8019d0c:	189b      	adds	r3, r3, r2
 8019d0e:	00db      	lsls	r3, r3, #3
 8019d10:	687a      	ldr	r2, [r7, #4]
 8019d12:	18d3      	adds	r3, r2, r3
 8019d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	2201      	movs	r2, #1
 8019d1a:	705a      	strb	r2, [r3, #1]
 8019d1c:	e00f      	b.n	8019d3e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019d1e:	1cfb      	adds	r3, r7, #3
 8019d20:	781b      	ldrb	r3, [r3, #0]
 8019d22:	2207      	movs	r2, #7
 8019d24:	401a      	ands	r2, r3
 8019d26:	0013      	movs	r3, r2
 8019d28:	009b      	lsls	r3, r3, #2
 8019d2a:	189b      	adds	r3, r3, r2
 8019d2c:	00db      	lsls	r3, r3, #3
 8019d2e:	3369      	adds	r3, #105	@ 0x69
 8019d30:	33ff      	adds	r3, #255	@ 0xff
 8019d32:	687a      	ldr	r2, [r7, #4]
 8019d34:	18d3      	adds	r3, r2, r3
 8019d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	2200      	movs	r2, #0
 8019d42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019d44:	1cfb      	adds	r3, r7, #3
 8019d46:	781b      	ldrb	r3, [r3, #0]
 8019d48:	2207      	movs	r2, #7
 8019d4a:	4013      	ands	r3, r2
 8019d4c:	b2da      	uxtb	r2, r3
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019d52:	687a      	ldr	r2, [r7, #4]
 8019d54:	23aa      	movs	r3, #170	@ 0xaa
 8019d56:	009b      	lsls	r3, r3, #2
 8019d58:	5cd3      	ldrb	r3, [r2, r3]
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	d101      	bne.n	8019d62 <HAL_PCD_EP_ClrStall+0x90>
 8019d5e:	2302      	movs	r3, #2
 8019d60:	e011      	b.n	8019d86 <HAL_PCD_EP_ClrStall+0xb4>
 8019d62:	687a      	ldr	r2, [r7, #4]
 8019d64:	23aa      	movs	r3, #170	@ 0xaa
 8019d66:	009b      	lsls	r3, r3, #2
 8019d68:	2101      	movs	r1, #1
 8019d6a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	68fa      	ldr	r2, [r7, #12]
 8019d72:	0011      	movs	r1, r2
 8019d74:	0018      	movs	r0, r3
 8019d76:	f007 f9c1 	bl	80210fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8019d7a:	687a      	ldr	r2, [r7, #4]
 8019d7c:	23aa      	movs	r3, #170	@ 0xaa
 8019d7e:	009b      	lsls	r3, r3, #2
 8019d80:	2100      	movs	r1, #0
 8019d82:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019d84:	2300      	movs	r3, #0
}
 8019d86:	0018      	movs	r0, r3
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	b004      	add	sp, #16
 8019d8c:	bd80      	pop	{r7, pc}
	...

08019d90 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019d90:	b5b0      	push	{r4, r5, r7, lr}
 8019d92:	b096      	sub	sp, #88	@ 0x58
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019d98:	f000 fbec 	bl	801a574 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	681a      	ldr	r2, [r3, #0]
 8019da0:	204e      	movs	r0, #78	@ 0x4e
 8019da2:	183b      	adds	r3, r7, r0
 8019da4:	2144      	movs	r1, #68	@ 0x44
 8019da6:	5a52      	ldrh	r2, [r2, r1]
 8019da8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8019daa:	183b      	adds	r3, r7, r0
 8019dac:	881b      	ldrh	r3, [r3, #0]
 8019dae:	b2da      	uxtb	r2, r3
 8019db0:	244d      	movs	r4, #77	@ 0x4d
 8019db2:	193b      	adds	r3, r7, r4
 8019db4:	210f      	movs	r1, #15
 8019db6:	400a      	ands	r2, r1
 8019db8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8019dba:	193b      	adds	r3, r7, r4
 8019dbc:	781b      	ldrb	r3, [r3, #0]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d000      	beq.n	8019dc4 <PCD_EP_ISR_Handler+0x34>
 8019dc2:	e18f      	b.n	801a0e4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8019dc4:	183b      	adds	r3, r7, r0
 8019dc6:	881b      	ldrh	r3, [r3, #0]
 8019dc8:	2210      	movs	r2, #16
 8019dca:	4013      	ands	r3, r2
 8019dcc:	d155      	bne.n	8019e7a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	881b      	ldrh	r3, [r3, #0]
 8019dd4:	b29a      	uxth	r2, r3
 8019dd6:	200e      	movs	r0, #14
 8019dd8:	183b      	adds	r3, r7, r0
 8019dda:	49bb      	ldr	r1, [pc, #748]	@ (801a0c8 <PCD_EP_ISR_Handler+0x338>)
 8019ddc:	400a      	ands	r2, r1
 8019dde:	801a      	strh	r2, [r3, #0]
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	183a      	adds	r2, r7, r0
 8019de6:	8812      	ldrh	r2, [r2, #0]
 8019de8:	49b8      	ldr	r1, [pc, #736]	@ (801a0cc <PCD_EP_ISR_Handler+0x33c>)
 8019dea:	430a      	orrs	r2, r1
 8019dec:	b292      	uxth	r2, r2
 8019dee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	3328      	adds	r3, #40	@ 0x28
 8019df4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	2250      	movs	r2, #80	@ 0x50
 8019dfc:	5a9b      	ldrh	r3, [r3, r2]
 8019dfe:	b29b      	uxth	r3, r3
 8019e00:	001a      	movs	r2, r3
 8019e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e04:	781b      	ldrb	r3, [r3, #0]
 8019e06:	00db      	lsls	r3, r3, #3
 8019e08:	18d2      	adds	r2, r2, r3
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	18d3      	adds	r3, r2, r3
 8019e10:	4aaf      	ldr	r2, [pc, #700]	@ (801a0d0 <PCD_EP_ISR_Handler+0x340>)
 8019e12:	4694      	mov	ip, r2
 8019e14:	4463      	add	r3, ip
 8019e16:	881b      	ldrh	r3, [r3, #0]
 8019e18:	059b      	lsls	r3, r3, #22
 8019e1a:	0d9a      	lsrs	r2, r3, #22
 8019e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e1e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e22:	695a      	ldr	r2, [r3, #20]
 8019e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e26:	69db      	ldr	r3, [r3, #28]
 8019e28:	18d2      	adds	r2, r2, r3
 8019e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e2c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	2100      	movs	r1, #0
 8019e32:	0018      	movs	r0, r3
 8019e34:	f009 fade 	bl	80233f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	2224      	movs	r2, #36	@ 0x24
 8019e3c:	5c9b      	ldrb	r3, [r3, r2]
 8019e3e:	b2db      	uxtb	r3, r3
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d101      	bne.n	8019e48 <PCD_EP_ISR_Handler+0xb8>
 8019e44:	f000 fb96 	bl	801a574 <PCD_EP_ISR_Handler+0x7e4>
 8019e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e4a:	699b      	ldr	r3, [r3, #24]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d001      	beq.n	8019e54 <PCD_EP_ISR_Handler+0xc4>
 8019e50:	f000 fb90 	bl	801a574 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	2224      	movs	r2, #36	@ 0x24
 8019e58:	5c9b      	ldrb	r3, [r3, r2]
 8019e5a:	b2db      	uxtb	r3, r3
 8019e5c:	2280      	movs	r2, #128	@ 0x80
 8019e5e:	4252      	negs	r2, r2
 8019e60:	4313      	orrs	r3, r2
 8019e62:	b2da      	uxtb	r2, r3
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	0011      	movs	r1, r2
 8019e6a:	224c      	movs	r2, #76	@ 0x4c
 8019e6c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	2224      	movs	r2, #36	@ 0x24
 8019e72:	2100      	movs	r1, #0
 8019e74:	5499      	strb	r1, [r3, r2]
 8019e76:	f000 fb7d 	bl	801a574 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	3369      	adds	r3, #105	@ 0x69
 8019e7e:	33ff      	adds	r3, #255	@ 0xff
 8019e80:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681a      	ldr	r2, [r3, #0]
 8019e86:	214a      	movs	r1, #74	@ 0x4a
 8019e88:	187b      	adds	r3, r7, r1
 8019e8a:	8812      	ldrh	r2, [r2, #0]
 8019e8c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8019e8e:	187b      	adds	r3, r7, r1
 8019e90:	881a      	ldrh	r2, [r3, #0]
 8019e92:	2380      	movs	r3, #128	@ 0x80
 8019e94:	011b      	lsls	r3, r3, #4
 8019e96:	4013      	ands	r3, r2
 8019e98:	d037      	beq.n	8019f0a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	2250      	movs	r2, #80	@ 0x50
 8019ea0:	5a9b      	ldrh	r3, [r3, r2]
 8019ea2:	b29b      	uxth	r3, r3
 8019ea4:	001a      	movs	r2, r3
 8019ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ea8:	781b      	ldrb	r3, [r3, #0]
 8019eaa:	00db      	lsls	r3, r3, #3
 8019eac:	18d2      	adds	r2, r2, r3
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	18d3      	adds	r3, r2, r3
 8019eb4:	4a87      	ldr	r2, [pc, #540]	@ (801a0d4 <PCD_EP_ISR_Handler+0x344>)
 8019eb6:	4694      	mov	ip, r2
 8019eb8:	4463      	add	r3, ip
 8019eba:	881b      	ldrh	r3, [r3, #0]
 8019ebc:	059b      	lsls	r3, r3, #22
 8019ebe:	0d9a      	lsrs	r2, r3, #22
 8019ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ec2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	6818      	ldr	r0, [r3, #0]
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	22ac      	movs	r2, #172	@ 0xac
 8019ecc:	0092      	lsls	r2, r2, #2
 8019ece:	1899      	adds	r1, r3, r2
 8019ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ed2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8019ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ed6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019ed8:	b29b      	uxth	r3, r3
 8019eda:	f007 fa43 	bl	8021364 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	881b      	ldrh	r3, [r3, #0]
 8019ee4:	b29a      	uxth	r2, r3
 8019ee6:	2010      	movs	r0, #16
 8019ee8:	183b      	adds	r3, r7, r0
 8019eea:	497b      	ldr	r1, [pc, #492]	@ (801a0d8 <PCD_EP_ISR_Handler+0x348>)
 8019eec:	400a      	ands	r2, r1
 8019eee:	801a      	strh	r2, [r3, #0]
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	183a      	adds	r2, r7, r0
 8019ef6:	8812      	ldrh	r2, [r2, #0]
 8019ef8:	2180      	movs	r1, #128	@ 0x80
 8019efa:	430a      	orrs	r2, r1
 8019efc:	b292      	uxth	r2, r2
 8019efe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	0018      	movs	r0, r3
 8019f04:	f009 fa40 	bl	8023388 <HAL_PCD_SetupStageCallback>
 8019f08:	e334      	b.n	801a574 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019f0a:	234a      	movs	r3, #74	@ 0x4a
 8019f0c:	18fb      	adds	r3, r7, r3
 8019f0e:	2200      	movs	r2, #0
 8019f10:	5e9b      	ldrsh	r3, [r3, r2]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	db00      	blt.n	8019f18 <PCD_EP_ISR_Handler+0x188>
 8019f16:	e32d      	b.n	801a574 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	881b      	ldrh	r3, [r3, #0]
 8019f1e:	b29a      	uxth	r2, r3
 8019f20:	201e      	movs	r0, #30
 8019f22:	183b      	adds	r3, r7, r0
 8019f24:	496c      	ldr	r1, [pc, #432]	@ (801a0d8 <PCD_EP_ISR_Handler+0x348>)
 8019f26:	400a      	ands	r2, r1
 8019f28:	801a      	strh	r2, [r3, #0]
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	183a      	adds	r2, r7, r0
 8019f30:	8812      	ldrh	r2, [r2, #0]
 8019f32:	2180      	movs	r1, #128	@ 0x80
 8019f34:	430a      	orrs	r2, r1
 8019f36:	b292      	uxth	r2, r2
 8019f38:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	2250      	movs	r2, #80	@ 0x50
 8019f40:	5a9b      	ldrh	r3, [r3, r2]
 8019f42:	b29b      	uxth	r3, r3
 8019f44:	001a      	movs	r2, r3
 8019f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f48:	781b      	ldrb	r3, [r3, #0]
 8019f4a:	00db      	lsls	r3, r3, #3
 8019f4c:	18d2      	adds	r2, r2, r3
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	18d3      	adds	r3, r2, r3
 8019f54:	4a5f      	ldr	r2, [pc, #380]	@ (801a0d4 <PCD_EP_ISR_Handler+0x344>)
 8019f56:	4694      	mov	ip, r2
 8019f58:	4463      	add	r3, ip
 8019f5a:	881b      	ldrh	r3, [r3, #0]
 8019f5c:	059b      	lsls	r3, r3, #22
 8019f5e:	0d9a      	lsrs	r2, r3, #22
 8019f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f62:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8019f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f66:	69db      	ldr	r3, [r3, #28]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d01a      	beq.n	8019fa2 <PCD_EP_ISR_Handler+0x212>
 8019f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f6e:	695b      	ldr	r3, [r3, #20]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d016      	beq.n	8019fa2 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	6818      	ldr	r0, [r3, #0]
 8019f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f7a:	6959      	ldr	r1, [r3, #20]
 8019f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f7e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8019f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f82:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019f84:	b29b      	uxth	r3, r3
 8019f86:	f007 f9ed 	bl	8021364 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8019f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f8c:	695a      	ldr	r2, [r3, #20]
 8019f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f90:	69db      	ldr	r3, [r3, #28]
 8019f92:	18d2      	adds	r2, r2, r3
 8019f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f96:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	2100      	movs	r1, #0
 8019f9c:	0018      	movs	r0, r3
 8019f9e:	f009 fa08 	bl	80233b2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	681a      	ldr	r2, [r3, #0]
 8019fa6:	214a      	movs	r1, #74	@ 0x4a
 8019fa8:	187b      	adds	r3, r7, r1
 8019faa:	8812      	ldrh	r2, [r2, #0]
 8019fac:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8019fae:	187b      	adds	r3, r7, r1
 8019fb0:	881a      	ldrh	r2, [r3, #0]
 8019fb2:	2380      	movs	r3, #128	@ 0x80
 8019fb4:	011b      	lsls	r3, r3, #4
 8019fb6:	4013      	ands	r3, r2
 8019fb8:	d000      	beq.n	8019fbc <PCD_EP_ISR_Handler+0x22c>
 8019fba:	e2db      	b.n	801a574 <PCD_EP_ISR_Handler+0x7e4>
 8019fbc:	187b      	adds	r3, r7, r1
 8019fbe:	881a      	ldrh	r2, [r3, #0]
 8019fc0:	23c0      	movs	r3, #192	@ 0xc0
 8019fc2:	019b      	lsls	r3, r3, #6
 8019fc4:	401a      	ands	r2, r3
 8019fc6:	23c0      	movs	r3, #192	@ 0xc0
 8019fc8:	019b      	lsls	r3, r3, #6
 8019fca:	429a      	cmp	r2, r3
 8019fcc:	d100      	bne.n	8019fd0 <PCD_EP_ISR_Handler+0x240>
 8019fce:	e2d1      	b.n	801a574 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	61bb      	str	r3, [r7, #24]
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	2250      	movs	r2, #80	@ 0x50
 8019fdc:	5a9b      	ldrh	r3, [r3, r2]
 8019fde:	b29b      	uxth	r3, r3
 8019fe0:	001a      	movs	r2, r3
 8019fe2:	69bb      	ldr	r3, [r7, #24]
 8019fe4:	189b      	adds	r3, r3, r2
 8019fe6:	61bb      	str	r3, [r7, #24]
 8019fe8:	69bb      	ldr	r3, [r7, #24]
 8019fea:	4a3a      	ldr	r2, [pc, #232]	@ (801a0d4 <PCD_EP_ISR_Handler+0x344>)
 8019fec:	4694      	mov	ip, r2
 8019fee:	4463      	add	r3, ip
 8019ff0:	617b      	str	r3, [r7, #20]
 8019ff2:	697b      	ldr	r3, [r7, #20]
 8019ff4:	881b      	ldrh	r3, [r3, #0]
 8019ff6:	b29b      	uxth	r3, r3
 8019ff8:	059b      	lsls	r3, r3, #22
 8019ffa:	0d9b      	lsrs	r3, r3, #22
 8019ffc:	b29a      	uxth	r2, r3
 8019ffe:	697b      	ldr	r3, [r7, #20]
 801a000:	801a      	strh	r2, [r3, #0]
 801a002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a004:	691b      	ldr	r3, [r3, #16]
 801a006:	2b3e      	cmp	r3, #62	@ 0x3e
 801a008:	d91a      	bls.n	801a040 <PCD_EP_ISR_Handler+0x2b0>
 801a00a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a00c:	691b      	ldr	r3, [r3, #16]
 801a00e:	095b      	lsrs	r3, r3, #5
 801a010:	647b      	str	r3, [r7, #68]	@ 0x44
 801a012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a014:	691b      	ldr	r3, [r3, #16]
 801a016:	221f      	movs	r2, #31
 801a018:	4013      	ands	r3, r2
 801a01a:	d102      	bne.n	801a022 <PCD_EP_ISR_Handler+0x292>
 801a01c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a01e:	3b01      	subs	r3, #1
 801a020:	647b      	str	r3, [r7, #68]	@ 0x44
 801a022:	697b      	ldr	r3, [r7, #20]
 801a024:	881b      	ldrh	r3, [r3, #0]
 801a026:	b29a      	uxth	r2, r3
 801a028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a02a:	b29b      	uxth	r3, r3
 801a02c:	029b      	lsls	r3, r3, #10
 801a02e:	b29b      	uxth	r3, r3
 801a030:	4313      	orrs	r3, r2
 801a032:	b29b      	uxth	r3, r3
 801a034:	4a25      	ldr	r2, [pc, #148]	@ (801a0cc <PCD_EP_ISR_Handler+0x33c>)
 801a036:	4313      	orrs	r3, r2
 801a038:	b29a      	uxth	r2, r3
 801a03a:	697b      	ldr	r3, [r7, #20]
 801a03c:	801a      	strh	r2, [r3, #0]
 801a03e:	e023      	b.n	801a088 <PCD_EP_ISR_Handler+0x2f8>
 801a040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a042:	691b      	ldr	r3, [r3, #16]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d108      	bne.n	801a05a <PCD_EP_ISR_Handler+0x2ca>
 801a048:	697b      	ldr	r3, [r7, #20]
 801a04a:	881b      	ldrh	r3, [r3, #0]
 801a04c:	b29b      	uxth	r3, r3
 801a04e:	4a1f      	ldr	r2, [pc, #124]	@ (801a0cc <PCD_EP_ISR_Handler+0x33c>)
 801a050:	4313      	orrs	r3, r2
 801a052:	b29a      	uxth	r2, r3
 801a054:	697b      	ldr	r3, [r7, #20]
 801a056:	801a      	strh	r2, [r3, #0]
 801a058:	e016      	b.n	801a088 <PCD_EP_ISR_Handler+0x2f8>
 801a05a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a05c:	691b      	ldr	r3, [r3, #16]
 801a05e:	085b      	lsrs	r3, r3, #1
 801a060:	647b      	str	r3, [r7, #68]	@ 0x44
 801a062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a064:	691b      	ldr	r3, [r3, #16]
 801a066:	2201      	movs	r2, #1
 801a068:	4013      	ands	r3, r2
 801a06a:	d002      	beq.n	801a072 <PCD_EP_ISR_Handler+0x2e2>
 801a06c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a06e:	3301      	adds	r3, #1
 801a070:	647b      	str	r3, [r7, #68]	@ 0x44
 801a072:	697b      	ldr	r3, [r7, #20]
 801a074:	881b      	ldrh	r3, [r3, #0]
 801a076:	b29a      	uxth	r2, r3
 801a078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a07a:	b29b      	uxth	r3, r3
 801a07c:	029b      	lsls	r3, r3, #10
 801a07e:	b29b      	uxth	r3, r3
 801a080:	4313      	orrs	r3, r2
 801a082:	b29a      	uxth	r2, r3
 801a084:	697b      	ldr	r3, [r7, #20]
 801a086:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	881b      	ldrh	r3, [r3, #0]
 801a08e:	b29a      	uxth	r2, r3
 801a090:	2012      	movs	r0, #18
 801a092:	183b      	adds	r3, r7, r0
 801a094:	4911      	ldr	r1, [pc, #68]	@ (801a0dc <PCD_EP_ISR_Handler+0x34c>)
 801a096:	400a      	ands	r2, r1
 801a098:	801a      	strh	r2, [r3, #0]
 801a09a:	183b      	adds	r3, r7, r0
 801a09c:	183a      	adds	r2, r7, r0
 801a09e:	8812      	ldrh	r2, [r2, #0]
 801a0a0:	2180      	movs	r1, #128	@ 0x80
 801a0a2:	0149      	lsls	r1, r1, #5
 801a0a4:	404a      	eors	r2, r1
 801a0a6:	801a      	strh	r2, [r3, #0]
 801a0a8:	183b      	adds	r3, r7, r0
 801a0aa:	183a      	adds	r2, r7, r0
 801a0ac:	8812      	ldrh	r2, [r2, #0]
 801a0ae:	2180      	movs	r1, #128	@ 0x80
 801a0b0:	0189      	lsls	r1, r1, #6
 801a0b2:	404a      	eors	r2, r1
 801a0b4:	801a      	strh	r2, [r3, #0]
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	183a      	adds	r2, r7, r0
 801a0bc:	8812      	ldrh	r2, [r2, #0]
 801a0be:	4908      	ldr	r1, [pc, #32]	@ (801a0e0 <PCD_EP_ISR_Handler+0x350>)
 801a0c0:	430a      	orrs	r2, r1
 801a0c2:	b292      	uxth	r2, r2
 801a0c4:	801a      	strh	r2, [r3, #0]
 801a0c6:	e255      	b.n	801a574 <PCD_EP_ISR_Handler+0x7e4>
 801a0c8:	ffff8f0f 	.word	0xffff8f0f
 801a0cc:	ffff8000 	.word	0xffff8000
 801a0d0:	00000402 	.word	0x00000402
 801a0d4:	00000406 	.word	0x00000406
 801a0d8:	00000f8f 	.word	0x00000f8f
 801a0dc:	ffffbf8f 	.word	0xffffbf8f
 801a0e0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	001a      	movs	r2, r3
 801a0ea:	204d      	movs	r0, #77	@ 0x4d
 801a0ec:	183b      	adds	r3, r7, r0
 801a0ee:	781b      	ldrb	r3, [r3, #0]
 801a0f0:	009b      	lsls	r3, r3, #2
 801a0f2:	18d2      	adds	r2, r2, r3
 801a0f4:	214a      	movs	r1, #74	@ 0x4a
 801a0f6:	187b      	adds	r3, r7, r1
 801a0f8:	8812      	ldrh	r2, [r2, #0]
 801a0fa:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a0fc:	187b      	adds	r3, r7, r1
 801a0fe:	2200      	movs	r2, #0
 801a100:	5e9b      	ldrsh	r3, [r3, r2]
 801a102:	2b00      	cmp	r3, #0
 801a104:	db00      	blt.n	801a108 <PCD_EP_ISR_Handler+0x378>
 801a106:	e0fa      	b.n	801a2fe <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	001a      	movs	r2, r3
 801a10e:	183b      	adds	r3, r7, r0
 801a110:	781b      	ldrb	r3, [r3, #0]
 801a112:	009b      	lsls	r3, r3, #2
 801a114:	18d3      	adds	r3, r2, r3
 801a116:	881b      	ldrh	r3, [r3, #0]
 801a118:	b29a      	uxth	r2, r3
 801a11a:	2448      	movs	r4, #72	@ 0x48
 801a11c:	193b      	adds	r3, r7, r4
 801a11e:	49d1      	ldr	r1, [pc, #836]	@ (801a464 <PCD_EP_ISR_Handler+0x6d4>)
 801a120:	400a      	ands	r2, r1
 801a122:	801a      	strh	r2, [r3, #0]
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	001a      	movs	r2, r3
 801a12a:	183b      	adds	r3, r7, r0
 801a12c:	781b      	ldrb	r3, [r3, #0]
 801a12e:	009b      	lsls	r3, r3, #2
 801a130:	18d3      	adds	r3, r2, r3
 801a132:	193a      	adds	r2, r7, r4
 801a134:	8812      	ldrh	r2, [r2, #0]
 801a136:	2180      	movs	r1, #128	@ 0x80
 801a138:	430a      	orrs	r2, r1
 801a13a:	b292      	uxth	r2, r2
 801a13c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801a13e:	183b      	adds	r3, r7, r0
 801a140:	781a      	ldrb	r2, [r3, #0]
 801a142:	0013      	movs	r3, r2
 801a144:	009b      	lsls	r3, r3, #2
 801a146:	189b      	adds	r3, r3, r2
 801a148:	00db      	lsls	r3, r3, #3
 801a14a:	3369      	adds	r3, #105	@ 0x69
 801a14c:	33ff      	adds	r3, #255	@ 0xff
 801a14e:	687a      	ldr	r2, [r7, #4]
 801a150:	18d3      	adds	r3, r2, r3
 801a152:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801a154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a156:	7b1b      	ldrb	r3, [r3, #12]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d125      	bne.n	801a1a8 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	2250      	movs	r2, #80	@ 0x50
 801a162:	5a9b      	ldrh	r3, [r3, r2]
 801a164:	b29b      	uxth	r3, r3
 801a166:	001a      	movs	r2, r3
 801a168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a16a:	781b      	ldrb	r3, [r3, #0]
 801a16c:	00db      	lsls	r3, r3, #3
 801a16e:	18d2      	adds	r2, r2, r3
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	18d3      	adds	r3, r2, r3
 801a176:	4abc      	ldr	r2, [pc, #752]	@ (801a468 <PCD_EP_ISR_Handler+0x6d8>)
 801a178:	4694      	mov	ip, r2
 801a17a:	4463      	add	r3, ip
 801a17c:	881a      	ldrh	r2, [r3, #0]
 801a17e:	2450      	movs	r4, #80	@ 0x50
 801a180:	193b      	adds	r3, r7, r4
 801a182:	0592      	lsls	r2, r2, #22
 801a184:	0d92      	lsrs	r2, r2, #22
 801a186:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801a188:	193b      	adds	r3, r7, r4
 801a18a:	881b      	ldrh	r3, [r3, #0]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d100      	bne.n	801a192 <PCD_EP_ISR_Handler+0x402>
 801a190:	e08d      	b.n	801a2ae <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	6818      	ldr	r0, [r3, #0]
 801a196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a198:	6959      	ldr	r1, [r3, #20]
 801a19a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a19c:	88da      	ldrh	r2, [r3, #6]
 801a19e:	193b      	adds	r3, r7, r4
 801a1a0:	881b      	ldrh	r3, [r3, #0]
 801a1a2:	f007 f8df 	bl	8021364 <USB_ReadPMA>
 801a1a6:	e082      	b.n	801a2ae <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801a1a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1aa:	78db      	ldrb	r3, [r3, #3]
 801a1ac:	2b02      	cmp	r3, #2
 801a1ae:	d10c      	bne.n	801a1ca <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801a1b0:	2350      	movs	r3, #80	@ 0x50
 801a1b2:	18fc      	adds	r4, r7, r3
 801a1b4:	234a      	movs	r3, #74	@ 0x4a
 801a1b6:	18fb      	adds	r3, r7, r3
 801a1b8:	881a      	ldrh	r2, [r3, #0]
 801a1ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	0018      	movs	r0, r3
 801a1c0:	f000 f9ec 	bl	801a59c <HAL_PCD_EP_DB_Receive>
 801a1c4:	0003      	movs	r3, r0
 801a1c6:	8023      	strh	r3, [r4, #0]
 801a1c8:	e071      	b.n	801a2ae <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	001a      	movs	r2, r3
 801a1d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1d2:	781b      	ldrb	r3, [r3, #0]
 801a1d4:	009b      	lsls	r3, r3, #2
 801a1d6:	18d3      	adds	r3, r2, r3
 801a1d8:	881b      	ldrh	r3, [r3, #0]
 801a1da:	b29a      	uxth	r2, r3
 801a1dc:	2052      	movs	r0, #82	@ 0x52
 801a1de:	183b      	adds	r3, r7, r0
 801a1e0:	49a2      	ldr	r1, [pc, #648]	@ (801a46c <PCD_EP_ISR_Handler+0x6dc>)
 801a1e2:	400a      	ands	r2, r1
 801a1e4:	801a      	strh	r2, [r3, #0]
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	001a      	movs	r2, r3
 801a1ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1ee:	781b      	ldrb	r3, [r3, #0]
 801a1f0:	009b      	lsls	r3, r3, #2
 801a1f2:	18d3      	adds	r3, r2, r3
 801a1f4:	183a      	adds	r2, r7, r0
 801a1f6:	8812      	ldrh	r2, [r2, #0]
 801a1f8:	499d      	ldr	r1, [pc, #628]	@ (801a470 <PCD_EP_ISR_Handler+0x6e0>)
 801a1fa:	430a      	orrs	r2, r1
 801a1fc:	b292      	uxth	r2, r2
 801a1fe:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	001a      	movs	r2, r3
 801a206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a208:	781b      	ldrb	r3, [r3, #0]
 801a20a:	009b      	lsls	r3, r3, #2
 801a20c:	18d3      	adds	r3, r2, r3
 801a20e:	881b      	ldrh	r3, [r3, #0]
 801a210:	b29b      	uxth	r3, r3
 801a212:	001a      	movs	r2, r3
 801a214:	2380      	movs	r3, #128	@ 0x80
 801a216:	01db      	lsls	r3, r3, #7
 801a218:	4013      	ands	r3, r2
 801a21a:	d024      	beq.n	801a266 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	2250      	movs	r2, #80	@ 0x50
 801a222:	5a9b      	ldrh	r3, [r3, r2]
 801a224:	b29b      	uxth	r3, r3
 801a226:	001a      	movs	r2, r3
 801a228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a22a:	781b      	ldrb	r3, [r3, #0]
 801a22c:	00db      	lsls	r3, r3, #3
 801a22e:	18d2      	adds	r2, r2, r3
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	18d3      	adds	r3, r2, r3
 801a236:	4a8f      	ldr	r2, [pc, #572]	@ (801a474 <PCD_EP_ISR_Handler+0x6e4>)
 801a238:	4694      	mov	ip, r2
 801a23a:	4463      	add	r3, ip
 801a23c:	881a      	ldrh	r2, [r3, #0]
 801a23e:	2450      	movs	r4, #80	@ 0x50
 801a240:	193b      	adds	r3, r7, r4
 801a242:	0592      	lsls	r2, r2, #22
 801a244:	0d92      	lsrs	r2, r2, #22
 801a246:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a248:	193b      	adds	r3, r7, r4
 801a24a:	881b      	ldrh	r3, [r3, #0]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d02e      	beq.n	801a2ae <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	6818      	ldr	r0, [r3, #0]
 801a254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a256:	6959      	ldr	r1, [r3, #20]
 801a258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a25a:	891a      	ldrh	r2, [r3, #8]
 801a25c:	193b      	adds	r3, r7, r4
 801a25e:	881b      	ldrh	r3, [r3, #0]
 801a260:	f007 f880 	bl	8021364 <USB_ReadPMA>
 801a264:	e023      	b.n	801a2ae <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	2250      	movs	r2, #80	@ 0x50
 801a26c:	5a9b      	ldrh	r3, [r3, r2]
 801a26e:	b29b      	uxth	r3, r3
 801a270:	001a      	movs	r2, r3
 801a272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a274:	781b      	ldrb	r3, [r3, #0]
 801a276:	00db      	lsls	r3, r3, #3
 801a278:	18d2      	adds	r2, r2, r3
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	18d3      	adds	r3, r2, r3
 801a280:	4a79      	ldr	r2, [pc, #484]	@ (801a468 <PCD_EP_ISR_Handler+0x6d8>)
 801a282:	4694      	mov	ip, r2
 801a284:	4463      	add	r3, ip
 801a286:	881a      	ldrh	r2, [r3, #0]
 801a288:	2450      	movs	r4, #80	@ 0x50
 801a28a:	193b      	adds	r3, r7, r4
 801a28c:	0592      	lsls	r2, r2, #22
 801a28e:	0d92      	lsrs	r2, r2, #22
 801a290:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a292:	193b      	adds	r3, r7, r4
 801a294:	881b      	ldrh	r3, [r3, #0]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d009      	beq.n	801a2ae <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	6818      	ldr	r0, [r3, #0]
 801a29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2a0:	6959      	ldr	r1, [r3, #20]
 801a2a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2a4:	895a      	ldrh	r2, [r3, #10]
 801a2a6:	193b      	adds	r3, r7, r4
 801a2a8:	881b      	ldrh	r3, [r3, #0]
 801a2aa:	f007 f85b 	bl	8021364 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801a2ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2b0:	69da      	ldr	r2, [r3, #28]
 801a2b2:	2150      	movs	r1, #80	@ 0x50
 801a2b4:	187b      	adds	r3, r7, r1
 801a2b6:	881b      	ldrh	r3, [r3, #0]
 801a2b8:	18d2      	adds	r2, r2, r3
 801a2ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801a2be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2c0:	695a      	ldr	r2, [r3, #20]
 801a2c2:	187b      	adds	r3, r7, r1
 801a2c4:	881b      	ldrh	r3, [r3, #0]
 801a2c6:	18d2      	adds	r2, r2, r3
 801a2c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801a2cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2ce:	699b      	ldr	r3, [r3, #24]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d005      	beq.n	801a2e0 <PCD_EP_ISR_Handler+0x550>
 801a2d4:	187b      	adds	r3, r7, r1
 801a2d6:	881a      	ldrh	r2, [r3, #0]
 801a2d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2da:	691b      	ldr	r3, [r3, #16]
 801a2dc:	429a      	cmp	r2, r3
 801a2de:	d207      	bcs.n	801a2f0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801a2e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2e2:	781a      	ldrb	r2, [r3, #0]
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	0011      	movs	r1, r2
 801a2e8:	0018      	movs	r0, r3
 801a2ea:	f009 f862 	bl	80233b2 <HAL_PCD_DataOutStageCallback>
 801a2ee:	e006      	b.n	801a2fe <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a2f6:	0011      	movs	r1, r2
 801a2f8:	0018      	movs	r0, r3
 801a2fa:	f005 fd77 	bl	801fdec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801a2fe:	244a      	movs	r4, #74	@ 0x4a
 801a300:	193b      	adds	r3, r7, r4
 801a302:	881b      	ldrh	r3, [r3, #0]
 801a304:	2280      	movs	r2, #128	@ 0x80
 801a306:	4013      	ands	r3, r2
 801a308:	d100      	bne.n	801a30c <PCD_EP_ISR_Handler+0x57c>
 801a30a:	e133      	b.n	801a574 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801a30c:	204d      	movs	r0, #77	@ 0x4d
 801a30e:	183b      	adds	r3, r7, r0
 801a310:	781b      	ldrb	r3, [r3, #0]
 801a312:	1c5a      	adds	r2, r3, #1
 801a314:	0013      	movs	r3, r2
 801a316:	009b      	lsls	r3, r3, #2
 801a318:	189b      	adds	r3, r3, r2
 801a31a:	00db      	lsls	r3, r3, #3
 801a31c:	687a      	ldr	r2, [r7, #4]
 801a31e:	18d3      	adds	r3, r2, r3
 801a320:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	001a      	movs	r2, r3
 801a328:	183b      	adds	r3, r7, r0
 801a32a:	781b      	ldrb	r3, [r3, #0]
 801a32c:	009b      	lsls	r3, r3, #2
 801a32e:	18d3      	adds	r3, r2, r3
 801a330:	881b      	ldrh	r3, [r3, #0]
 801a332:	b29a      	uxth	r2, r3
 801a334:	2542      	movs	r5, #66	@ 0x42
 801a336:	197b      	adds	r3, r7, r5
 801a338:	494f      	ldr	r1, [pc, #316]	@ (801a478 <PCD_EP_ISR_Handler+0x6e8>)
 801a33a:	400a      	ands	r2, r1
 801a33c:	801a      	strh	r2, [r3, #0]
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	001a      	movs	r2, r3
 801a344:	183b      	adds	r3, r7, r0
 801a346:	781b      	ldrb	r3, [r3, #0]
 801a348:	009b      	lsls	r3, r3, #2
 801a34a:	18d3      	adds	r3, r2, r3
 801a34c:	197a      	adds	r2, r7, r5
 801a34e:	8812      	ldrh	r2, [r2, #0]
 801a350:	494a      	ldr	r1, [pc, #296]	@ (801a47c <PCD_EP_ISR_Handler+0x6ec>)
 801a352:	430a      	orrs	r2, r1
 801a354:	b292      	uxth	r2, r2
 801a356:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801a358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a35a:	78db      	ldrb	r3, [r3, #3]
 801a35c:	2b01      	cmp	r3, #1
 801a35e:	d000      	beq.n	801a362 <PCD_EP_ISR_Handler+0x5d2>
 801a360:	e0af      	b.n	801a4c2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801a362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a364:	2200      	movs	r2, #0
 801a366:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801a368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a36a:	7b1b      	ldrb	r3, [r3, #12]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d100      	bne.n	801a372 <PCD_EP_ISR_Handler+0x5e2>
 801a370:	e09f      	b.n	801a4b2 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a372:	193b      	adds	r3, r7, r4
 801a374:	881b      	ldrh	r3, [r3, #0]
 801a376:	2240      	movs	r2, #64	@ 0x40
 801a378:	4013      	ands	r3, r2
 801a37a:	d046      	beq.n	801a40a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a37c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a37e:	785b      	ldrb	r3, [r3, #1]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d125      	bne.n	801a3d0 <PCD_EP_ISR_Handler+0x640>
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	627b      	str	r3, [r7, #36]	@ 0x24
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	2250      	movs	r2, #80	@ 0x50
 801a390:	5a9b      	ldrh	r3, [r3, r2]
 801a392:	b29b      	uxth	r3, r3
 801a394:	001a      	movs	r2, r3
 801a396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a398:	189b      	adds	r3, r3, r2
 801a39a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a39c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a39e:	781b      	ldrb	r3, [r3, #0]
 801a3a0:	00da      	lsls	r2, r3, #3
 801a3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3a4:	18d3      	adds	r3, r2, r3
 801a3a6:	4a33      	ldr	r2, [pc, #204]	@ (801a474 <PCD_EP_ISR_Handler+0x6e4>)
 801a3a8:	4694      	mov	ip, r2
 801a3aa:	4463      	add	r3, ip
 801a3ac:	623b      	str	r3, [r7, #32]
 801a3ae:	6a3b      	ldr	r3, [r7, #32]
 801a3b0:	881b      	ldrh	r3, [r3, #0]
 801a3b2:	b29b      	uxth	r3, r3
 801a3b4:	059b      	lsls	r3, r3, #22
 801a3b6:	0d9b      	lsrs	r3, r3, #22
 801a3b8:	b29a      	uxth	r2, r3
 801a3ba:	6a3b      	ldr	r3, [r7, #32]
 801a3bc:	801a      	strh	r2, [r3, #0]
 801a3be:	6a3b      	ldr	r3, [r7, #32]
 801a3c0:	881b      	ldrh	r3, [r3, #0]
 801a3c2:	b29b      	uxth	r3, r3
 801a3c4:	4a2d      	ldr	r2, [pc, #180]	@ (801a47c <PCD_EP_ISR_Handler+0x6ec>)
 801a3c6:	4313      	orrs	r3, r2
 801a3c8:	b29a      	uxth	r2, r3
 801a3ca:	6a3b      	ldr	r3, [r7, #32]
 801a3cc:	801a      	strh	r2, [r3, #0]
 801a3ce:	e070      	b.n	801a4b2 <PCD_EP_ISR_Handler+0x722>
 801a3d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3d2:	785b      	ldrb	r3, [r3, #1]
 801a3d4:	2b01      	cmp	r3, #1
 801a3d6:	d16c      	bne.n	801a4b2 <PCD_EP_ISR_Handler+0x722>
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	2250      	movs	r2, #80	@ 0x50
 801a3e4:	5a9b      	ldrh	r3, [r3, r2]
 801a3e6:	b29b      	uxth	r3, r3
 801a3e8:	001a      	movs	r2, r3
 801a3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3ec:	189b      	adds	r3, r3, r2
 801a3ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a3f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3f2:	781b      	ldrb	r3, [r3, #0]
 801a3f4:	00da      	lsls	r2, r3, #3
 801a3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3f8:	18d3      	adds	r3, r2, r3
 801a3fa:	4a1e      	ldr	r2, [pc, #120]	@ (801a474 <PCD_EP_ISR_Handler+0x6e4>)
 801a3fc:	4694      	mov	ip, r2
 801a3fe:	4463      	add	r3, ip
 801a400:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a404:	2200      	movs	r2, #0
 801a406:	801a      	strh	r2, [r3, #0]
 801a408:	e053      	b.n	801a4b2 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a412:	785b      	ldrb	r3, [r3, #1]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d133      	bne.n	801a480 <PCD_EP_ISR_Handler+0x6f0>
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	2250      	movs	r2, #80	@ 0x50
 801a424:	5a9b      	ldrh	r3, [r3, r2]
 801a426:	b29b      	uxth	r3, r3
 801a428:	001a      	movs	r2, r3
 801a42a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a42c:	189b      	adds	r3, r3, r2
 801a42e:	637b      	str	r3, [r7, #52]	@ 0x34
 801a430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a432:	781b      	ldrb	r3, [r3, #0]
 801a434:	00da      	lsls	r2, r3, #3
 801a436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a438:	18d3      	adds	r3, r2, r3
 801a43a:	4a0b      	ldr	r2, [pc, #44]	@ (801a468 <PCD_EP_ISR_Handler+0x6d8>)
 801a43c:	4694      	mov	ip, r2
 801a43e:	4463      	add	r3, ip
 801a440:	633b      	str	r3, [r7, #48]	@ 0x30
 801a442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a444:	881b      	ldrh	r3, [r3, #0]
 801a446:	b29b      	uxth	r3, r3
 801a448:	059b      	lsls	r3, r3, #22
 801a44a:	0d9b      	lsrs	r3, r3, #22
 801a44c:	b29a      	uxth	r2, r3
 801a44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a450:	801a      	strh	r2, [r3, #0]
 801a452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a454:	881b      	ldrh	r3, [r3, #0]
 801a456:	b29b      	uxth	r3, r3
 801a458:	4a08      	ldr	r2, [pc, #32]	@ (801a47c <PCD_EP_ISR_Handler+0x6ec>)
 801a45a:	4313      	orrs	r3, r2
 801a45c:	b29a      	uxth	r2, r3
 801a45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a460:	801a      	strh	r2, [r3, #0]
 801a462:	e026      	b.n	801a4b2 <PCD_EP_ISR_Handler+0x722>
 801a464:	00000f8f 	.word	0x00000f8f
 801a468:	00000406 	.word	0x00000406
 801a46c:	ffff8f8f 	.word	0xffff8f8f
 801a470:	ffff80c0 	.word	0xffff80c0
 801a474:	00000402 	.word	0x00000402
 801a478:	ffff8f0f 	.word	0xffff8f0f
 801a47c:	ffff8000 	.word	0xffff8000
 801a480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a482:	785b      	ldrb	r3, [r3, #1]
 801a484:	2b01      	cmp	r3, #1
 801a486:	d114      	bne.n	801a4b2 <PCD_EP_ISR_Handler+0x722>
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	2250      	movs	r2, #80	@ 0x50
 801a48e:	5a9b      	ldrh	r3, [r3, r2]
 801a490:	b29b      	uxth	r3, r3
 801a492:	001a      	movs	r2, r3
 801a494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a496:	189b      	adds	r3, r3, r2
 801a498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a49a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a49c:	781b      	ldrb	r3, [r3, #0]
 801a49e:	00da      	lsls	r2, r3, #3
 801a4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a4a2:	18d3      	adds	r3, r2, r3
 801a4a4:	4a3b      	ldr	r2, [pc, #236]	@ (801a594 <PCD_EP_ISR_Handler+0x804>)
 801a4a6:	4694      	mov	ip, r2
 801a4a8:	4463      	add	r3, ip
 801a4aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a4b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4b4:	781a      	ldrb	r2, [r3, #0]
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	0011      	movs	r1, r2
 801a4ba:	0018      	movs	r0, r3
 801a4bc:	f008 ff9a 	bl	80233f4 <HAL_PCD_DataInStageCallback>
 801a4c0:	e058      	b.n	801a574 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801a4c2:	234a      	movs	r3, #74	@ 0x4a
 801a4c4:	18fb      	adds	r3, r7, r3
 801a4c6:	881a      	ldrh	r2, [r3, #0]
 801a4c8:	2380      	movs	r3, #128	@ 0x80
 801a4ca:	005b      	lsls	r3, r3, #1
 801a4cc:	4013      	ands	r3, r2
 801a4ce:	d149      	bne.n	801a564 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	2250      	movs	r2, #80	@ 0x50
 801a4d6:	5a9b      	ldrh	r3, [r3, r2]
 801a4d8:	b29b      	uxth	r3, r3
 801a4da:	001a      	movs	r2, r3
 801a4dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4de:	781b      	ldrb	r3, [r3, #0]
 801a4e0:	00db      	lsls	r3, r3, #3
 801a4e2:	18d2      	adds	r2, r2, r3
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	18d3      	adds	r3, r2, r3
 801a4ea:	4a2b      	ldr	r2, [pc, #172]	@ (801a598 <PCD_EP_ISR_Handler+0x808>)
 801a4ec:	4694      	mov	ip, r2
 801a4ee:	4463      	add	r3, ip
 801a4f0:	881a      	ldrh	r2, [r3, #0]
 801a4f2:	2140      	movs	r1, #64	@ 0x40
 801a4f4:	187b      	adds	r3, r7, r1
 801a4f6:	0592      	lsls	r2, r2, #22
 801a4f8:	0d92      	lsrs	r2, r2, #22
 801a4fa:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801a4fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4fe:	699a      	ldr	r2, [r3, #24]
 801a500:	187b      	adds	r3, r7, r1
 801a502:	881b      	ldrh	r3, [r3, #0]
 801a504:	429a      	cmp	r2, r3
 801a506:	d907      	bls.n	801a518 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801a508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a50a:	699a      	ldr	r2, [r3, #24]
 801a50c:	187b      	adds	r3, r7, r1
 801a50e:	881b      	ldrh	r3, [r3, #0]
 801a510:	1ad2      	subs	r2, r2, r3
 801a512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a514:	619a      	str	r2, [r3, #24]
 801a516:	e002      	b.n	801a51e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801a518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a51a:	2200      	movs	r2, #0
 801a51c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801a51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a520:	699b      	ldr	r3, [r3, #24]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d107      	bne.n	801a536 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a528:	781a      	ldrb	r2, [r3, #0]
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	0011      	movs	r1, r2
 801a52e:	0018      	movs	r0, r3
 801a530:	f008 ff60 	bl	80233f4 <HAL_PCD_DataInStageCallback>
 801a534:	e01e      	b.n	801a574 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801a536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a538:	695a      	ldr	r2, [r3, #20]
 801a53a:	2140      	movs	r1, #64	@ 0x40
 801a53c:	187b      	adds	r3, r7, r1
 801a53e:	881b      	ldrh	r3, [r3, #0]
 801a540:	18d2      	adds	r2, r2, r3
 801a542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a544:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801a546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a548:	69da      	ldr	r2, [r3, #28]
 801a54a:	187b      	adds	r3, r7, r1
 801a54c:	881b      	ldrh	r3, [r3, #0]
 801a54e:	18d2      	adds	r2, r2, r3
 801a550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a552:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a55a:	0011      	movs	r1, r2
 801a55c:	0018      	movs	r0, r3
 801a55e:	f005 fc45 	bl	801fdec <USB_EPStartXfer>
 801a562:	e007      	b.n	801a574 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801a564:	234a      	movs	r3, #74	@ 0x4a
 801a566:	18fb      	adds	r3, r7, r3
 801a568:	881a      	ldrh	r2, [r3, #0]
 801a56a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	0018      	movs	r0, r3
 801a570:	f000 f930 	bl	801a7d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	2244      	movs	r2, #68	@ 0x44
 801a57a:	5a9b      	ldrh	r3, [r3, r2]
 801a57c:	b29b      	uxth	r3, r3
 801a57e:	b21b      	sxth	r3, r3
 801a580:	2b00      	cmp	r3, #0
 801a582:	da01      	bge.n	801a588 <PCD_EP_ISR_Handler+0x7f8>
 801a584:	f7ff fc0a 	bl	8019d9c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801a588:	2300      	movs	r3, #0
}
 801a58a:	0018      	movs	r0, r3
 801a58c:	46bd      	mov	sp, r7
 801a58e:	b016      	add	sp, #88	@ 0x58
 801a590:	bdb0      	pop	{r4, r5, r7, pc}
 801a592:	46c0      	nop			@ (mov r8, r8)
 801a594:	00000406 	.word	0x00000406
 801a598:	00000402 	.word	0x00000402

0801a59c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a59c:	b590      	push	{r4, r7, lr}
 801a59e:	b089      	sub	sp, #36	@ 0x24
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	60f8      	str	r0, [r7, #12]
 801a5a4:	60b9      	str	r1, [r7, #8]
 801a5a6:	1dbb      	adds	r3, r7, #6
 801a5a8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a5aa:	1dbb      	adds	r3, r7, #6
 801a5ac:	881a      	ldrh	r2, [r3, #0]
 801a5ae:	2380      	movs	r3, #128	@ 0x80
 801a5b0:	01db      	lsls	r3, r3, #7
 801a5b2:	4013      	ands	r3, r2
 801a5b4:	d100      	bne.n	801a5b8 <HAL_PCD_EP_DB_Receive+0x1c>
 801a5b6:	e07d      	b.n	801a6b4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	2250      	movs	r2, #80	@ 0x50
 801a5be:	5a9b      	ldrh	r3, [r3, r2]
 801a5c0:	b29b      	uxth	r3, r3
 801a5c2:	001a      	movs	r2, r3
 801a5c4:	68bb      	ldr	r3, [r7, #8]
 801a5c6:	781b      	ldrb	r3, [r3, #0]
 801a5c8:	00db      	lsls	r3, r3, #3
 801a5ca:	18d2      	adds	r2, r2, r3
 801a5cc:	68fb      	ldr	r3, [r7, #12]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	18d3      	adds	r3, r2, r3
 801a5d2:	4a7a      	ldr	r2, [pc, #488]	@ (801a7bc <HAL_PCD_EP_DB_Receive+0x220>)
 801a5d4:	4694      	mov	ip, r2
 801a5d6:	4463      	add	r3, ip
 801a5d8:	881a      	ldrh	r2, [r3, #0]
 801a5da:	211a      	movs	r1, #26
 801a5dc:	187b      	adds	r3, r7, r1
 801a5de:	0592      	lsls	r2, r2, #22
 801a5e0:	0d92      	lsrs	r2, r2, #22
 801a5e2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	699a      	ldr	r2, [r3, #24]
 801a5e8:	187b      	adds	r3, r7, r1
 801a5ea:	881b      	ldrh	r3, [r3, #0]
 801a5ec:	429a      	cmp	r2, r3
 801a5ee:	d307      	bcc.n	801a600 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801a5f0:	68bb      	ldr	r3, [r7, #8]
 801a5f2:	699a      	ldr	r2, [r3, #24]
 801a5f4:	187b      	adds	r3, r7, r1
 801a5f6:	881b      	ldrh	r3, [r3, #0]
 801a5f8:	1ad2      	subs	r2, r2, r3
 801a5fa:	68bb      	ldr	r3, [r7, #8]
 801a5fc:	619a      	str	r2, [r3, #24]
 801a5fe:	e002      	b.n	801a606 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801a600:	68bb      	ldr	r3, [r7, #8]
 801a602:	2200      	movs	r2, #0
 801a604:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a606:	68bb      	ldr	r3, [r7, #8]
 801a608:	699b      	ldr	r3, [r3, #24]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d121      	bne.n	801a652 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	001a      	movs	r2, r3
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	781b      	ldrb	r3, [r3, #0]
 801a618:	009b      	lsls	r3, r3, #2
 801a61a:	18d3      	adds	r3, r2, r3
 801a61c:	881b      	ldrh	r3, [r3, #0]
 801a61e:	b29a      	uxth	r2, r3
 801a620:	2018      	movs	r0, #24
 801a622:	183b      	adds	r3, r7, r0
 801a624:	4966      	ldr	r1, [pc, #408]	@ (801a7c0 <HAL_PCD_EP_DB_Receive+0x224>)
 801a626:	400a      	ands	r2, r1
 801a628:	801a      	strh	r2, [r3, #0]
 801a62a:	183b      	adds	r3, r7, r0
 801a62c:	183a      	adds	r2, r7, r0
 801a62e:	8812      	ldrh	r2, [r2, #0]
 801a630:	2180      	movs	r1, #128	@ 0x80
 801a632:	0189      	lsls	r1, r1, #6
 801a634:	404a      	eors	r2, r1
 801a636:	801a      	strh	r2, [r3, #0]
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	001a      	movs	r2, r3
 801a63e:	68bb      	ldr	r3, [r7, #8]
 801a640:	781b      	ldrb	r3, [r3, #0]
 801a642:	009b      	lsls	r3, r3, #2
 801a644:	18d3      	adds	r3, r2, r3
 801a646:	183a      	adds	r2, r7, r0
 801a648:	8812      	ldrh	r2, [r2, #0]
 801a64a:	495e      	ldr	r1, [pc, #376]	@ (801a7c4 <HAL_PCD_EP_DB_Receive+0x228>)
 801a64c:	430a      	orrs	r2, r1
 801a64e:	b292      	uxth	r2, r2
 801a650:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a652:	1dbb      	adds	r3, r7, #6
 801a654:	881b      	ldrh	r3, [r3, #0]
 801a656:	2240      	movs	r2, #64	@ 0x40
 801a658:	4013      	ands	r3, r2
 801a65a:	d01a      	beq.n	801a692 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	001a      	movs	r2, r3
 801a662:	68bb      	ldr	r3, [r7, #8]
 801a664:	781b      	ldrb	r3, [r3, #0]
 801a666:	009b      	lsls	r3, r3, #2
 801a668:	18d3      	adds	r3, r2, r3
 801a66a:	881b      	ldrh	r3, [r3, #0]
 801a66c:	b29a      	uxth	r2, r3
 801a66e:	2016      	movs	r0, #22
 801a670:	183b      	adds	r3, r7, r0
 801a672:	4955      	ldr	r1, [pc, #340]	@ (801a7c8 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a674:	400a      	ands	r2, r1
 801a676:	801a      	strh	r2, [r3, #0]
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	001a      	movs	r2, r3
 801a67e:	68bb      	ldr	r3, [r7, #8]
 801a680:	781b      	ldrb	r3, [r3, #0]
 801a682:	009b      	lsls	r3, r3, #2
 801a684:	18d3      	adds	r3, r2, r3
 801a686:	183a      	adds	r2, r7, r0
 801a688:	8812      	ldrh	r2, [r2, #0]
 801a68a:	4950      	ldr	r1, [pc, #320]	@ (801a7cc <HAL_PCD_EP_DB_Receive+0x230>)
 801a68c:	430a      	orrs	r2, r1
 801a68e:	b292      	uxth	r2, r2
 801a690:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a692:	241a      	movs	r4, #26
 801a694:	193b      	adds	r3, r7, r4
 801a696:	881b      	ldrh	r3, [r3, #0]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d100      	bne.n	801a69e <HAL_PCD_EP_DB_Receive+0x102>
 801a69c:	e086      	b.n	801a7ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	6818      	ldr	r0, [r3, #0]
 801a6a2:	68bb      	ldr	r3, [r7, #8]
 801a6a4:	6959      	ldr	r1, [r3, #20]
 801a6a6:	68bb      	ldr	r3, [r7, #8]
 801a6a8:	891a      	ldrh	r2, [r3, #8]
 801a6aa:	193b      	adds	r3, r7, r4
 801a6ac:	881b      	ldrh	r3, [r3, #0]
 801a6ae:	f006 fe59 	bl	8021364 <USB_ReadPMA>
 801a6b2:	e07b      	b.n	801a7ac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	2250      	movs	r2, #80	@ 0x50
 801a6ba:	5a9b      	ldrh	r3, [r3, r2]
 801a6bc:	b29b      	uxth	r3, r3
 801a6be:	001a      	movs	r2, r3
 801a6c0:	68bb      	ldr	r3, [r7, #8]
 801a6c2:	781b      	ldrb	r3, [r3, #0]
 801a6c4:	00db      	lsls	r3, r3, #3
 801a6c6:	18d2      	adds	r2, r2, r3
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	18d3      	adds	r3, r2, r3
 801a6ce:	4a40      	ldr	r2, [pc, #256]	@ (801a7d0 <HAL_PCD_EP_DB_Receive+0x234>)
 801a6d0:	4694      	mov	ip, r2
 801a6d2:	4463      	add	r3, ip
 801a6d4:	881a      	ldrh	r2, [r3, #0]
 801a6d6:	211a      	movs	r1, #26
 801a6d8:	187b      	adds	r3, r7, r1
 801a6da:	0592      	lsls	r2, r2, #22
 801a6dc:	0d92      	lsrs	r2, r2, #22
 801a6de:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a6e0:	68bb      	ldr	r3, [r7, #8]
 801a6e2:	699a      	ldr	r2, [r3, #24]
 801a6e4:	187b      	adds	r3, r7, r1
 801a6e6:	881b      	ldrh	r3, [r3, #0]
 801a6e8:	429a      	cmp	r2, r3
 801a6ea:	d307      	bcc.n	801a6fc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801a6ec:	68bb      	ldr	r3, [r7, #8]
 801a6ee:	699a      	ldr	r2, [r3, #24]
 801a6f0:	187b      	adds	r3, r7, r1
 801a6f2:	881b      	ldrh	r3, [r3, #0]
 801a6f4:	1ad2      	subs	r2, r2, r3
 801a6f6:	68bb      	ldr	r3, [r7, #8]
 801a6f8:	619a      	str	r2, [r3, #24]
 801a6fa:	e002      	b.n	801a702 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801a6fc:	68bb      	ldr	r3, [r7, #8]
 801a6fe:	2200      	movs	r2, #0
 801a700:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a702:	68bb      	ldr	r3, [r7, #8]
 801a704:	699b      	ldr	r3, [r3, #24]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d121      	bne.n	801a74e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	001a      	movs	r2, r3
 801a710:	68bb      	ldr	r3, [r7, #8]
 801a712:	781b      	ldrb	r3, [r3, #0]
 801a714:	009b      	lsls	r3, r3, #2
 801a716:	18d3      	adds	r3, r2, r3
 801a718:	881b      	ldrh	r3, [r3, #0]
 801a71a:	b29a      	uxth	r2, r3
 801a71c:	201e      	movs	r0, #30
 801a71e:	183b      	adds	r3, r7, r0
 801a720:	4927      	ldr	r1, [pc, #156]	@ (801a7c0 <HAL_PCD_EP_DB_Receive+0x224>)
 801a722:	400a      	ands	r2, r1
 801a724:	801a      	strh	r2, [r3, #0]
 801a726:	183b      	adds	r3, r7, r0
 801a728:	183a      	adds	r2, r7, r0
 801a72a:	8812      	ldrh	r2, [r2, #0]
 801a72c:	2180      	movs	r1, #128	@ 0x80
 801a72e:	0189      	lsls	r1, r1, #6
 801a730:	404a      	eors	r2, r1
 801a732:	801a      	strh	r2, [r3, #0]
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	001a      	movs	r2, r3
 801a73a:	68bb      	ldr	r3, [r7, #8]
 801a73c:	781b      	ldrb	r3, [r3, #0]
 801a73e:	009b      	lsls	r3, r3, #2
 801a740:	18d3      	adds	r3, r2, r3
 801a742:	183a      	adds	r2, r7, r0
 801a744:	8812      	ldrh	r2, [r2, #0]
 801a746:	491f      	ldr	r1, [pc, #124]	@ (801a7c4 <HAL_PCD_EP_DB_Receive+0x228>)
 801a748:	430a      	orrs	r2, r1
 801a74a:	b292      	uxth	r2, r2
 801a74c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801a74e:	1dbb      	adds	r3, r7, #6
 801a750:	881b      	ldrh	r3, [r3, #0]
 801a752:	2240      	movs	r2, #64	@ 0x40
 801a754:	4013      	ands	r3, r2
 801a756:	d11a      	bne.n	801a78e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	001a      	movs	r2, r3
 801a75e:	68bb      	ldr	r3, [r7, #8]
 801a760:	781b      	ldrb	r3, [r3, #0]
 801a762:	009b      	lsls	r3, r3, #2
 801a764:	18d3      	adds	r3, r2, r3
 801a766:	881b      	ldrh	r3, [r3, #0]
 801a768:	b29a      	uxth	r2, r3
 801a76a:	201c      	movs	r0, #28
 801a76c:	183b      	adds	r3, r7, r0
 801a76e:	4916      	ldr	r1, [pc, #88]	@ (801a7c8 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a770:	400a      	ands	r2, r1
 801a772:	801a      	strh	r2, [r3, #0]
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	001a      	movs	r2, r3
 801a77a:	68bb      	ldr	r3, [r7, #8]
 801a77c:	781b      	ldrb	r3, [r3, #0]
 801a77e:	009b      	lsls	r3, r3, #2
 801a780:	18d3      	adds	r3, r2, r3
 801a782:	183a      	adds	r2, r7, r0
 801a784:	8812      	ldrh	r2, [r2, #0]
 801a786:	4911      	ldr	r1, [pc, #68]	@ (801a7cc <HAL_PCD_EP_DB_Receive+0x230>)
 801a788:	430a      	orrs	r2, r1
 801a78a:	b292      	uxth	r2, r2
 801a78c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a78e:	241a      	movs	r4, #26
 801a790:	193b      	adds	r3, r7, r4
 801a792:	881b      	ldrh	r3, [r3, #0]
 801a794:	2b00      	cmp	r3, #0
 801a796:	d009      	beq.n	801a7ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	6818      	ldr	r0, [r3, #0]
 801a79c:	68bb      	ldr	r3, [r7, #8]
 801a79e:	6959      	ldr	r1, [r3, #20]
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	895a      	ldrh	r2, [r3, #10]
 801a7a4:	193b      	adds	r3, r7, r4
 801a7a6:	881b      	ldrh	r3, [r3, #0]
 801a7a8:	f006 fddc 	bl	8021364 <USB_ReadPMA>
    }
  }

  return count;
 801a7ac:	231a      	movs	r3, #26
 801a7ae:	18fb      	adds	r3, r7, r3
 801a7b0:	881b      	ldrh	r3, [r3, #0]
}
 801a7b2:	0018      	movs	r0, r3
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	b009      	add	sp, #36	@ 0x24
 801a7b8:	bd90      	pop	{r4, r7, pc}
 801a7ba:	46c0      	nop			@ (mov r8, r8)
 801a7bc:	00000402 	.word	0x00000402
 801a7c0:	ffffbf8f 	.word	0xffffbf8f
 801a7c4:	ffff8080 	.word	0xffff8080
 801a7c8:	ffff8f8f 	.word	0xffff8f8f
 801a7cc:	ffff80c0 	.word	0xffff80c0
 801a7d0:	00000406 	.word	0x00000406

0801a7d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b0a4      	sub	sp, #144	@ 0x90
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	60f8      	str	r0, [r7, #12]
 801a7dc:	60b9      	str	r1, [r7, #8]
 801a7de:	1dbb      	adds	r3, r7, #6
 801a7e0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a7e2:	1dbb      	adds	r3, r7, #6
 801a7e4:	881b      	ldrh	r3, [r3, #0]
 801a7e6:	2240      	movs	r2, #64	@ 0x40
 801a7e8:	4013      	ands	r3, r2
 801a7ea:	d100      	bne.n	801a7ee <HAL_PCD_EP_DB_Transmit+0x1a>
 801a7ec:	e1e4      	b.n	801abb8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	2250      	movs	r2, #80	@ 0x50
 801a7f4:	5a9b      	ldrh	r3, [r3, r2]
 801a7f6:	b29b      	uxth	r3, r3
 801a7f8:	001a      	movs	r2, r3
 801a7fa:	68bb      	ldr	r3, [r7, #8]
 801a7fc:	781b      	ldrb	r3, [r3, #0]
 801a7fe:	00db      	lsls	r3, r3, #3
 801a800:	18d2      	adds	r2, r2, r3
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	18d3      	adds	r3, r2, r3
 801a808:	4ad0      	ldr	r2, [pc, #832]	@ (801ab4c <HAL_PCD_EP_DB_Transmit+0x378>)
 801a80a:	4694      	mov	ip, r2
 801a80c:	4463      	add	r3, ip
 801a80e:	881a      	ldrh	r2, [r3, #0]
 801a810:	2186      	movs	r1, #134	@ 0x86
 801a812:	187b      	adds	r3, r7, r1
 801a814:	0592      	lsls	r2, r2, #22
 801a816:	0d92      	lsrs	r2, r2, #22
 801a818:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801a81a:	68bb      	ldr	r3, [r7, #8]
 801a81c:	699a      	ldr	r2, [r3, #24]
 801a81e:	187b      	adds	r3, r7, r1
 801a820:	881b      	ldrh	r3, [r3, #0]
 801a822:	429a      	cmp	r2, r3
 801a824:	d907      	bls.n	801a836 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801a826:	68bb      	ldr	r3, [r7, #8]
 801a828:	699a      	ldr	r2, [r3, #24]
 801a82a:	187b      	adds	r3, r7, r1
 801a82c:	881b      	ldrh	r3, [r3, #0]
 801a82e:	1ad2      	subs	r2, r2, r3
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	619a      	str	r2, [r3, #24]
 801a834:	e002      	b.n	801a83c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801a836:	68bb      	ldr	r3, [r7, #8]
 801a838:	2200      	movs	r2, #0
 801a83a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a83c:	68bb      	ldr	r3, [r7, #8]
 801a83e:	699b      	ldr	r3, [r3, #24]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d000      	beq.n	801a846 <HAL_PCD_EP_DB_Transmit+0x72>
 801a844:	e0b5      	b.n	801a9b2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a846:	68bb      	ldr	r3, [r7, #8]
 801a848:	785b      	ldrb	r3, [r3, #1]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d125      	bne.n	801a89a <HAL_PCD_EP_DB_Transmit+0xc6>
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	2250      	movs	r2, #80	@ 0x50
 801a85a:	5a9b      	ldrh	r3, [r3, r2]
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	001a      	movs	r2, r3
 801a860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a862:	189b      	adds	r3, r3, r2
 801a864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a866:	68bb      	ldr	r3, [r7, #8]
 801a868:	781b      	ldrb	r3, [r3, #0]
 801a86a:	00da      	lsls	r2, r3, #3
 801a86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a86e:	18d3      	adds	r3, r2, r3
 801a870:	4ab6      	ldr	r2, [pc, #728]	@ (801ab4c <HAL_PCD_EP_DB_Transmit+0x378>)
 801a872:	4694      	mov	ip, r2
 801a874:	4463      	add	r3, ip
 801a876:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a87a:	881b      	ldrh	r3, [r3, #0]
 801a87c:	b29b      	uxth	r3, r3
 801a87e:	059b      	lsls	r3, r3, #22
 801a880:	0d9b      	lsrs	r3, r3, #22
 801a882:	b29a      	uxth	r2, r3
 801a884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a886:	801a      	strh	r2, [r3, #0]
 801a888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a88a:	881b      	ldrh	r3, [r3, #0]
 801a88c:	b29b      	uxth	r3, r3
 801a88e:	4ab0      	ldr	r2, [pc, #704]	@ (801ab50 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a890:	4313      	orrs	r3, r2
 801a892:	b29a      	uxth	r2, r3
 801a894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a896:	801a      	strh	r2, [r3, #0]
 801a898:	e01b      	b.n	801a8d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 801a89a:	68bb      	ldr	r3, [r7, #8]
 801a89c:	785b      	ldrb	r3, [r3, #1]
 801a89e:	2b01      	cmp	r3, #1
 801a8a0:	d117      	bne.n	801a8d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	637b      	str	r3, [r7, #52]	@ 0x34
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	2250      	movs	r2, #80	@ 0x50
 801a8ae:	5a9b      	ldrh	r3, [r3, r2]
 801a8b0:	b29b      	uxth	r3, r3
 801a8b2:	001a      	movs	r2, r3
 801a8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8b6:	189b      	adds	r3, r3, r2
 801a8b8:	637b      	str	r3, [r7, #52]	@ 0x34
 801a8ba:	68bb      	ldr	r3, [r7, #8]
 801a8bc:	781b      	ldrb	r3, [r3, #0]
 801a8be:	00da      	lsls	r2, r3, #3
 801a8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8c2:	18d3      	adds	r3, r2, r3
 801a8c4:	4aa1      	ldr	r2, [pc, #644]	@ (801ab4c <HAL_PCD_EP_DB_Transmit+0x378>)
 801a8c6:	4694      	mov	ip, r2
 801a8c8:	4463      	add	r3, ip
 801a8ca:	633b      	str	r3, [r7, #48]	@ 0x30
 801a8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	627b      	str	r3, [r7, #36]	@ 0x24
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	785b      	ldrb	r3, [r3, #1]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d125      	bne.n	801a92c <HAL_PCD_EP_DB_Transmit+0x158>
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	61fb      	str	r3, [r7, #28]
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	2250      	movs	r2, #80	@ 0x50
 801a8ec:	5a9b      	ldrh	r3, [r3, r2]
 801a8ee:	b29b      	uxth	r3, r3
 801a8f0:	001a      	movs	r2, r3
 801a8f2:	69fb      	ldr	r3, [r7, #28]
 801a8f4:	189b      	adds	r3, r3, r2
 801a8f6:	61fb      	str	r3, [r7, #28]
 801a8f8:	68bb      	ldr	r3, [r7, #8]
 801a8fa:	781b      	ldrb	r3, [r3, #0]
 801a8fc:	00da      	lsls	r2, r3, #3
 801a8fe:	69fb      	ldr	r3, [r7, #28]
 801a900:	18d3      	adds	r3, r2, r3
 801a902:	4a94      	ldr	r2, [pc, #592]	@ (801ab54 <HAL_PCD_EP_DB_Transmit+0x380>)
 801a904:	4694      	mov	ip, r2
 801a906:	4463      	add	r3, ip
 801a908:	61bb      	str	r3, [r7, #24]
 801a90a:	69bb      	ldr	r3, [r7, #24]
 801a90c:	881b      	ldrh	r3, [r3, #0]
 801a90e:	b29b      	uxth	r3, r3
 801a910:	059b      	lsls	r3, r3, #22
 801a912:	0d9b      	lsrs	r3, r3, #22
 801a914:	b29a      	uxth	r2, r3
 801a916:	69bb      	ldr	r3, [r7, #24]
 801a918:	801a      	strh	r2, [r3, #0]
 801a91a:	69bb      	ldr	r3, [r7, #24]
 801a91c:	881b      	ldrh	r3, [r3, #0]
 801a91e:	b29b      	uxth	r3, r3
 801a920:	4a8b      	ldr	r2, [pc, #556]	@ (801ab50 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a922:	4313      	orrs	r3, r2
 801a924:	b29a      	uxth	r2, r3
 801a926:	69bb      	ldr	r3, [r7, #24]
 801a928:	801a      	strh	r2, [r3, #0]
 801a92a:	e018      	b.n	801a95e <HAL_PCD_EP_DB_Transmit+0x18a>
 801a92c:	68bb      	ldr	r3, [r7, #8]
 801a92e:	785b      	ldrb	r3, [r3, #1]
 801a930:	2b01      	cmp	r3, #1
 801a932:	d114      	bne.n	801a95e <HAL_PCD_EP_DB_Transmit+0x18a>
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	2250      	movs	r2, #80	@ 0x50
 801a93a:	5a9b      	ldrh	r3, [r3, r2]
 801a93c:	b29b      	uxth	r3, r3
 801a93e:	001a      	movs	r2, r3
 801a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a942:	189b      	adds	r3, r3, r2
 801a944:	627b      	str	r3, [r7, #36]	@ 0x24
 801a946:	68bb      	ldr	r3, [r7, #8]
 801a948:	781b      	ldrb	r3, [r3, #0]
 801a94a:	00da      	lsls	r2, r3, #3
 801a94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a94e:	18d3      	adds	r3, r2, r3
 801a950:	4a80      	ldr	r2, [pc, #512]	@ (801ab54 <HAL_PCD_EP_DB_Transmit+0x380>)
 801a952:	4694      	mov	ip, r2
 801a954:	4463      	add	r3, ip
 801a956:	623b      	str	r3, [r7, #32]
 801a958:	6a3b      	ldr	r3, [r7, #32]
 801a95a:	2200      	movs	r2, #0
 801a95c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	781a      	ldrb	r2, [r3, #0]
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	0011      	movs	r1, r2
 801a966:	0018      	movs	r0, r3
 801a968:	f008 fd44 	bl	80233f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a96c:	1dbb      	adds	r3, r7, #6
 801a96e:	881a      	ldrh	r2, [r3, #0]
 801a970:	2380      	movs	r3, #128	@ 0x80
 801a972:	01db      	lsls	r3, r3, #7
 801a974:	4013      	ands	r3, r2
 801a976:	d100      	bne.n	801a97a <HAL_PCD_EP_DB_Transmit+0x1a6>
 801a978:	e309      	b.n	801af8e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	001a      	movs	r2, r3
 801a980:	68bb      	ldr	r3, [r7, #8]
 801a982:	781b      	ldrb	r3, [r3, #0]
 801a984:	009b      	lsls	r3, r3, #2
 801a986:	18d3      	adds	r3, r2, r3
 801a988:	881b      	ldrh	r3, [r3, #0]
 801a98a:	b29a      	uxth	r2, r3
 801a98c:	2016      	movs	r0, #22
 801a98e:	183b      	adds	r3, r7, r0
 801a990:	4971      	ldr	r1, [pc, #452]	@ (801ab58 <HAL_PCD_EP_DB_Transmit+0x384>)
 801a992:	400a      	ands	r2, r1
 801a994:	801a      	strh	r2, [r3, #0]
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	001a      	movs	r2, r3
 801a99c:	68bb      	ldr	r3, [r7, #8]
 801a99e:	781b      	ldrb	r3, [r3, #0]
 801a9a0:	009b      	lsls	r3, r3, #2
 801a9a2:	18d3      	adds	r3, r2, r3
 801a9a4:	183a      	adds	r2, r7, r0
 801a9a6:	8812      	ldrh	r2, [r2, #0]
 801a9a8:	496c      	ldr	r1, [pc, #432]	@ (801ab5c <HAL_PCD_EP_DB_Transmit+0x388>)
 801a9aa:	430a      	orrs	r2, r1
 801a9ac:	b292      	uxth	r2, r2
 801a9ae:	801a      	strh	r2, [r3, #0]
 801a9b0:	e2ed      	b.n	801af8e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a9b2:	1dbb      	adds	r3, r7, #6
 801a9b4:	881a      	ldrh	r2, [r3, #0]
 801a9b6:	2380      	movs	r3, #128	@ 0x80
 801a9b8:	01db      	lsls	r3, r3, #7
 801a9ba:	4013      	ands	r3, r2
 801a9bc:	d01a      	beq.n	801a9f4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	001a      	movs	r2, r3
 801a9c4:	68bb      	ldr	r3, [r7, #8]
 801a9c6:	781b      	ldrb	r3, [r3, #0]
 801a9c8:	009b      	lsls	r3, r3, #2
 801a9ca:	18d3      	adds	r3, r2, r3
 801a9cc:	881b      	ldrh	r3, [r3, #0]
 801a9ce:	b29a      	uxth	r2, r3
 801a9d0:	208a      	movs	r0, #138	@ 0x8a
 801a9d2:	183b      	adds	r3, r7, r0
 801a9d4:	4960      	ldr	r1, [pc, #384]	@ (801ab58 <HAL_PCD_EP_DB_Transmit+0x384>)
 801a9d6:	400a      	ands	r2, r1
 801a9d8:	801a      	strh	r2, [r3, #0]
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	001a      	movs	r2, r3
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	781b      	ldrb	r3, [r3, #0]
 801a9e4:	009b      	lsls	r3, r3, #2
 801a9e6:	18d3      	adds	r3, r2, r3
 801a9e8:	183a      	adds	r2, r7, r0
 801a9ea:	8812      	ldrh	r2, [r2, #0]
 801a9ec:	495b      	ldr	r1, [pc, #364]	@ (801ab5c <HAL_PCD_EP_DB_Transmit+0x388>)
 801a9ee:	430a      	orrs	r2, r1
 801a9f0:	b292      	uxth	r2, r2
 801a9f2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801a9f4:	68bb      	ldr	r3, [r7, #8]
 801a9f6:	2224      	movs	r2, #36	@ 0x24
 801a9f8:	5c9b      	ldrb	r3, [r3, r2]
 801a9fa:	2b01      	cmp	r3, #1
 801a9fc:	d000      	beq.n	801aa00 <HAL_PCD_EP_DB_Transmit+0x22c>
 801a9fe:	e2c6      	b.n	801af8e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801aa00:	68bb      	ldr	r3, [r7, #8]
 801aa02:	695a      	ldr	r2, [r3, #20]
 801aa04:	2186      	movs	r1, #134	@ 0x86
 801aa06:	187b      	adds	r3, r7, r1
 801aa08:	881b      	ldrh	r3, [r3, #0]
 801aa0a:	18d2      	adds	r2, r2, r3
 801aa0c:	68bb      	ldr	r3, [r7, #8]
 801aa0e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801aa10:	68bb      	ldr	r3, [r7, #8]
 801aa12:	69da      	ldr	r2, [r3, #28]
 801aa14:	187b      	adds	r3, r7, r1
 801aa16:	881b      	ldrh	r3, [r3, #0]
 801aa18:	18d2      	adds	r2, r2, r3
 801aa1a:	68bb      	ldr	r3, [r7, #8]
 801aa1c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801aa1e:	68bb      	ldr	r3, [r7, #8]
 801aa20:	6a1a      	ldr	r2, [r3, #32]
 801aa22:	68bb      	ldr	r3, [r7, #8]
 801aa24:	691b      	ldr	r3, [r3, #16]
 801aa26:	429a      	cmp	r2, r3
 801aa28:	d30c      	bcc.n	801aa44 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801aa2a:	68bb      	ldr	r3, [r7, #8]
 801aa2c:	691b      	ldr	r3, [r3, #16]
 801aa2e:	218c      	movs	r1, #140	@ 0x8c
 801aa30:	187a      	adds	r2, r7, r1
 801aa32:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801aa34:	68bb      	ldr	r3, [r7, #8]
 801aa36:	6a1a      	ldr	r2, [r3, #32]
 801aa38:	187b      	adds	r3, r7, r1
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	1ad2      	subs	r2, r2, r3
 801aa3e:	68bb      	ldr	r3, [r7, #8]
 801aa40:	621a      	str	r2, [r3, #32]
 801aa42:	e01a      	b.n	801aa7a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801aa44:	68bb      	ldr	r3, [r7, #8]
 801aa46:	6a1b      	ldr	r3, [r3, #32]
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d10a      	bne.n	801aa62 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801aa4c:	2386      	movs	r3, #134	@ 0x86
 801aa4e:	18fb      	adds	r3, r7, r3
 801aa50:	881b      	ldrh	r3, [r3, #0]
 801aa52:	228c      	movs	r2, #140	@ 0x8c
 801aa54:	18ba      	adds	r2, r7, r2
 801aa56:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801aa58:	68bb      	ldr	r3, [r7, #8]
 801aa5a:	2224      	movs	r2, #36	@ 0x24
 801aa5c:	2100      	movs	r1, #0
 801aa5e:	5499      	strb	r1, [r3, r2]
 801aa60:	e00b      	b.n	801aa7a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801aa62:	68bb      	ldr	r3, [r7, #8]
 801aa64:	2224      	movs	r2, #36	@ 0x24
 801aa66:	2100      	movs	r1, #0
 801aa68:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801aa6a:	68bb      	ldr	r3, [r7, #8]
 801aa6c:	6a1b      	ldr	r3, [r3, #32]
 801aa6e:	228c      	movs	r2, #140	@ 0x8c
 801aa70:	18ba      	adds	r2, r7, r2
 801aa72:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801aa74:	68bb      	ldr	r3, [r7, #8]
 801aa76:	2200      	movs	r2, #0
 801aa78:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801aa7a:	68bb      	ldr	r3, [r7, #8]
 801aa7c:	785b      	ldrb	r3, [r3, #1]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d000      	beq.n	801aa84 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801aa82:	e06d      	b.n	801ab60 <HAL_PCD_EP_DB_Transmit+0x38c>
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	2250      	movs	r2, #80	@ 0x50
 801aa90:	5a9b      	ldrh	r3, [r3, r2]
 801aa92:	b29b      	uxth	r3, r3
 801aa94:	001a      	movs	r2, r3
 801aa96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa98:	189b      	adds	r3, r3, r2
 801aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aa9c:	68bb      	ldr	r3, [r7, #8]
 801aa9e:	781b      	ldrb	r3, [r3, #0]
 801aaa0:	00da      	lsls	r2, r3, #3
 801aaa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aaa4:	18d3      	adds	r3, r2, r3
 801aaa6:	4a29      	ldr	r2, [pc, #164]	@ (801ab4c <HAL_PCD_EP_DB_Transmit+0x378>)
 801aaa8:	4694      	mov	ip, r2
 801aaaa:	4463      	add	r3, ip
 801aaac:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aaae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aab0:	881b      	ldrh	r3, [r3, #0]
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	059b      	lsls	r3, r3, #22
 801aab6:	0d9b      	lsrs	r3, r3, #22
 801aab8:	b29a      	uxth	r2, r3
 801aaba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aabc:	801a      	strh	r2, [r3, #0]
 801aabe:	228c      	movs	r2, #140	@ 0x8c
 801aac0:	18bb      	adds	r3, r7, r2
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	2b3e      	cmp	r3, #62	@ 0x3e
 801aac6:	d91a      	bls.n	801aafe <HAL_PCD_EP_DB_Transmit+0x32a>
 801aac8:	18bb      	adds	r3, r7, r2
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	095b      	lsrs	r3, r3, #5
 801aace:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aad0:	18bb      	adds	r3, r7, r2
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	221f      	movs	r2, #31
 801aad6:	4013      	ands	r3, r2
 801aad8:	d102      	bne.n	801aae0 <HAL_PCD_EP_DB_Transmit+0x30c>
 801aada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aadc:	3b01      	subs	r3, #1
 801aade:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aae2:	881b      	ldrh	r3, [r3, #0]
 801aae4:	b29a      	uxth	r2, r3
 801aae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aae8:	b29b      	uxth	r3, r3
 801aaea:	029b      	lsls	r3, r3, #10
 801aaec:	b29b      	uxth	r3, r3
 801aaee:	4313      	orrs	r3, r2
 801aaf0:	b29b      	uxth	r3, r3
 801aaf2:	4a17      	ldr	r2, [pc, #92]	@ (801ab50 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801aaf4:	4313      	orrs	r3, r2
 801aaf6:	b29a      	uxth	r2, r3
 801aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aafa:	801a      	strh	r2, [r3, #0]
 801aafc:	e04f      	b.n	801ab9e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801aafe:	238c      	movs	r3, #140	@ 0x8c
 801ab00:	18fb      	adds	r3, r7, r3
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d108      	bne.n	801ab1a <HAL_PCD_EP_DB_Transmit+0x346>
 801ab08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab0a:	881b      	ldrh	r3, [r3, #0]
 801ab0c:	b29b      	uxth	r3, r3
 801ab0e:	4a10      	ldr	r2, [pc, #64]	@ (801ab50 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801ab10:	4313      	orrs	r3, r2
 801ab12:	b29a      	uxth	r2, r3
 801ab14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab16:	801a      	strh	r2, [r3, #0]
 801ab18:	e041      	b.n	801ab9e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab1a:	228c      	movs	r2, #140	@ 0x8c
 801ab1c:	18bb      	adds	r3, r7, r2
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	085b      	lsrs	r3, r3, #1
 801ab22:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab24:	18bb      	adds	r3, r7, r2
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	2201      	movs	r2, #1
 801ab2a:	4013      	ands	r3, r2
 801ab2c:	d002      	beq.n	801ab34 <HAL_PCD_EP_DB_Transmit+0x360>
 801ab2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab30:	3301      	adds	r3, #1
 801ab32:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab36:	881b      	ldrh	r3, [r3, #0]
 801ab38:	b29a      	uxth	r2, r3
 801ab3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab3c:	b29b      	uxth	r3, r3
 801ab3e:	029b      	lsls	r3, r3, #10
 801ab40:	b29b      	uxth	r3, r3
 801ab42:	4313      	orrs	r3, r2
 801ab44:	b29a      	uxth	r2, r3
 801ab46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab48:	801a      	strh	r2, [r3, #0]
 801ab4a:	e028      	b.n	801ab9e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab4c:	00000402 	.word	0x00000402
 801ab50:	ffff8000 	.word	0xffff8000
 801ab54:	00000406 	.word	0x00000406
 801ab58:	ffff8f8f 	.word	0xffff8f8f
 801ab5c:	ffffc080 	.word	0xffffc080
 801ab60:	68bb      	ldr	r3, [r7, #8]
 801ab62:	785b      	ldrb	r3, [r3, #1]
 801ab64:	2b01      	cmp	r3, #1
 801ab66:	d11a      	bne.n	801ab9e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	647b      	str	r3, [r7, #68]	@ 0x44
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	2250      	movs	r2, #80	@ 0x50
 801ab74:	5a9b      	ldrh	r3, [r3, r2]
 801ab76:	b29b      	uxth	r3, r3
 801ab78:	001a      	movs	r2, r3
 801ab7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab7c:	189b      	adds	r3, r3, r2
 801ab7e:	647b      	str	r3, [r7, #68]	@ 0x44
 801ab80:	68bb      	ldr	r3, [r7, #8]
 801ab82:	781b      	ldrb	r3, [r3, #0]
 801ab84:	00da      	lsls	r2, r3, #3
 801ab86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab88:	18d3      	adds	r3, r2, r3
 801ab8a:	4adb      	ldr	r2, [pc, #876]	@ (801aef8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ab8c:	4694      	mov	ip, r2
 801ab8e:	4463      	add	r3, ip
 801ab90:	643b      	str	r3, [r7, #64]	@ 0x40
 801ab92:	238c      	movs	r3, #140	@ 0x8c
 801ab94:	18fb      	adds	r3, r7, r3
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	b29a      	uxth	r2, r3
 801ab9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab9c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801ab9e:	68fb      	ldr	r3, [r7, #12]
 801aba0:	6818      	ldr	r0, [r3, #0]
 801aba2:	68bb      	ldr	r3, [r7, #8]
 801aba4:	6959      	ldr	r1, [r3, #20]
 801aba6:	68bb      	ldr	r3, [r7, #8]
 801aba8:	891a      	ldrh	r2, [r3, #8]
 801abaa:	238c      	movs	r3, #140	@ 0x8c
 801abac:	18fb      	adds	r3, r7, r3
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	b29b      	uxth	r3, r3
 801abb2:	f006 fb8d 	bl	80212d0 <USB_WritePMA>
 801abb6:	e1ea      	b.n	801af8e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	2250      	movs	r2, #80	@ 0x50
 801abbe:	5a9b      	ldrh	r3, [r3, r2]
 801abc0:	b29b      	uxth	r3, r3
 801abc2:	001a      	movs	r2, r3
 801abc4:	68bb      	ldr	r3, [r7, #8]
 801abc6:	781b      	ldrb	r3, [r3, #0]
 801abc8:	00db      	lsls	r3, r3, #3
 801abca:	18d2      	adds	r2, r2, r3
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	18d3      	adds	r3, r2, r3
 801abd2:	4aca      	ldr	r2, [pc, #808]	@ (801aefc <HAL_PCD_EP_DB_Transmit+0x728>)
 801abd4:	4694      	mov	ip, r2
 801abd6:	4463      	add	r3, ip
 801abd8:	881a      	ldrh	r2, [r3, #0]
 801abda:	2186      	movs	r1, #134	@ 0x86
 801abdc:	187b      	adds	r3, r7, r1
 801abde:	0592      	lsls	r2, r2, #22
 801abe0:	0d92      	lsrs	r2, r2, #22
 801abe2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801abe4:	68bb      	ldr	r3, [r7, #8]
 801abe6:	699a      	ldr	r2, [r3, #24]
 801abe8:	187b      	adds	r3, r7, r1
 801abea:	881b      	ldrh	r3, [r3, #0]
 801abec:	429a      	cmp	r2, r3
 801abee:	d307      	bcc.n	801ac00 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801abf0:	68bb      	ldr	r3, [r7, #8]
 801abf2:	699a      	ldr	r2, [r3, #24]
 801abf4:	187b      	adds	r3, r7, r1
 801abf6:	881b      	ldrh	r3, [r3, #0]
 801abf8:	1ad2      	subs	r2, r2, r3
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	619a      	str	r2, [r3, #24]
 801abfe:	e002      	b.n	801ac06 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801ac00:	68bb      	ldr	r3, [r7, #8]
 801ac02:	2200      	movs	r2, #0
 801ac04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801ac06:	68bb      	ldr	r3, [r7, #8]
 801ac08:	699b      	ldr	r3, [r3, #24]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d000      	beq.n	801ac10 <HAL_PCD_EP_DB_Transmit+0x43c>
 801ac0e:	e0bb      	b.n	801ad88 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ac10:	68bb      	ldr	r3, [r7, #8]
 801ac12:	785b      	ldrb	r3, [r3, #1]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d125      	bne.n	801ac64 <HAL_PCD_EP_DB_Transmit+0x490>
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	2250      	movs	r2, #80	@ 0x50
 801ac24:	5a9b      	ldrh	r3, [r3, r2]
 801ac26:	b29b      	uxth	r3, r3
 801ac28:	001a      	movs	r2, r3
 801ac2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ac2c:	189b      	adds	r3, r3, r2
 801ac2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ac30:	68bb      	ldr	r3, [r7, #8]
 801ac32:	781b      	ldrb	r3, [r3, #0]
 801ac34:	00da      	lsls	r2, r3, #3
 801ac36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ac38:	18d3      	adds	r3, r2, r3
 801ac3a:	4aaf      	ldr	r2, [pc, #700]	@ (801aef8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ac3c:	4694      	mov	ip, r2
 801ac3e:	4463      	add	r3, ip
 801ac40:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ac42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac44:	881b      	ldrh	r3, [r3, #0]
 801ac46:	b29b      	uxth	r3, r3
 801ac48:	059b      	lsls	r3, r3, #22
 801ac4a:	0d9b      	lsrs	r3, r3, #22
 801ac4c:	b29a      	uxth	r2, r3
 801ac4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac50:	801a      	strh	r2, [r3, #0]
 801ac52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac54:	881b      	ldrh	r3, [r3, #0]
 801ac56:	b29b      	uxth	r3, r3
 801ac58:	4aa9      	ldr	r2, [pc, #676]	@ (801af00 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801ac5a:	4313      	orrs	r3, r2
 801ac5c:	b29a      	uxth	r2, r3
 801ac5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ac60:	801a      	strh	r2, [r3, #0]
 801ac62:	e01b      	b.n	801ac9c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ac64:	68bb      	ldr	r3, [r7, #8]
 801ac66:	785b      	ldrb	r3, [r3, #1]
 801ac68:	2b01      	cmp	r3, #1
 801ac6a:	d117      	bne.n	801ac9c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	667b      	str	r3, [r7, #100]	@ 0x64
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	2250      	movs	r2, #80	@ 0x50
 801ac78:	5a9b      	ldrh	r3, [r3, r2]
 801ac7a:	b29b      	uxth	r3, r3
 801ac7c:	001a      	movs	r2, r3
 801ac7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ac80:	189b      	adds	r3, r3, r2
 801ac82:	667b      	str	r3, [r7, #100]	@ 0x64
 801ac84:	68bb      	ldr	r3, [r7, #8]
 801ac86:	781b      	ldrb	r3, [r3, #0]
 801ac88:	00da      	lsls	r2, r3, #3
 801ac8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ac8c:	18d3      	adds	r3, r2, r3
 801ac8e:	4a9a      	ldr	r2, [pc, #616]	@ (801aef8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ac90:	4694      	mov	ip, r2
 801ac92:	4463      	add	r3, ip
 801ac94:	663b      	str	r3, [r7, #96]	@ 0x60
 801ac96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ac98:	2200      	movs	r2, #0
 801ac9a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	677b      	str	r3, [r7, #116]	@ 0x74
 801aca2:	68bb      	ldr	r3, [r7, #8]
 801aca4:	785b      	ldrb	r3, [r3, #1]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d12b      	bne.n	801ad02 <HAL_PCD_EP_DB_Transmit+0x52e>
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	2250      	movs	r2, #80	@ 0x50
 801acb6:	5a9b      	ldrh	r3, [r3, r2]
 801acb8:	b29b      	uxth	r3, r3
 801acba:	001a      	movs	r2, r3
 801acbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801acbe:	189b      	adds	r3, r3, r2
 801acc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801acc2:	68bb      	ldr	r3, [r7, #8]
 801acc4:	781b      	ldrb	r3, [r3, #0]
 801acc6:	00da      	lsls	r2, r3, #3
 801acc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801acca:	18d3      	adds	r3, r2, r3
 801accc:	4a8b      	ldr	r2, [pc, #556]	@ (801aefc <HAL_PCD_EP_DB_Transmit+0x728>)
 801acce:	4694      	mov	ip, r2
 801acd0:	4463      	add	r3, ip
 801acd2:	2180      	movs	r1, #128	@ 0x80
 801acd4:	187a      	adds	r2, r7, r1
 801acd6:	6013      	str	r3, [r2, #0]
 801acd8:	187b      	adds	r3, r7, r1
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	881b      	ldrh	r3, [r3, #0]
 801acde:	b29b      	uxth	r3, r3
 801ace0:	059b      	lsls	r3, r3, #22
 801ace2:	0d9b      	lsrs	r3, r3, #22
 801ace4:	b29a      	uxth	r2, r3
 801ace6:	187b      	adds	r3, r7, r1
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	801a      	strh	r2, [r3, #0]
 801acec:	187b      	adds	r3, r7, r1
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	881b      	ldrh	r3, [r3, #0]
 801acf2:	b29b      	uxth	r3, r3
 801acf4:	4a82      	ldr	r2, [pc, #520]	@ (801af00 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801acf6:	4313      	orrs	r3, r2
 801acf8:	b29a      	uxth	r2, r3
 801acfa:	187b      	adds	r3, r7, r1
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	801a      	strh	r2, [r3, #0]
 801ad00:	e018      	b.n	801ad34 <HAL_PCD_EP_DB_Transmit+0x560>
 801ad02:	68bb      	ldr	r3, [r7, #8]
 801ad04:	785b      	ldrb	r3, [r3, #1]
 801ad06:	2b01      	cmp	r3, #1
 801ad08:	d114      	bne.n	801ad34 <HAL_PCD_EP_DB_Transmit+0x560>
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	2250      	movs	r2, #80	@ 0x50
 801ad10:	5a9b      	ldrh	r3, [r3, r2]
 801ad12:	b29b      	uxth	r3, r3
 801ad14:	001a      	movs	r2, r3
 801ad16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ad18:	189b      	adds	r3, r3, r2
 801ad1a:	677b      	str	r3, [r7, #116]	@ 0x74
 801ad1c:	68bb      	ldr	r3, [r7, #8]
 801ad1e:	781b      	ldrb	r3, [r3, #0]
 801ad20:	00da      	lsls	r2, r3, #3
 801ad22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ad24:	18d3      	adds	r3, r2, r3
 801ad26:	4a75      	ldr	r2, [pc, #468]	@ (801aefc <HAL_PCD_EP_DB_Transmit+0x728>)
 801ad28:	4694      	mov	ip, r2
 801ad2a:	4463      	add	r3, ip
 801ad2c:	673b      	str	r3, [r7, #112]	@ 0x70
 801ad2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ad30:	2200      	movs	r2, #0
 801ad32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801ad34:	68bb      	ldr	r3, [r7, #8]
 801ad36:	781a      	ldrb	r2, [r3, #0]
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	0011      	movs	r1, r2
 801ad3c:	0018      	movs	r0, r3
 801ad3e:	f008 fb59 	bl	80233f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801ad42:	1dbb      	adds	r3, r7, #6
 801ad44:	881a      	ldrh	r2, [r3, #0]
 801ad46:	2380      	movs	r3, #128	@ 0x80
 801ad48:	01db      	lsls	r3, r3, #7
 801ad4a:	4013      	ands	r3, r2
 801ad4c:	d000      	beq.n	801ad50 <HAL_PCD_EP_DB_Transmit+0x57c>
 801ad4e:	e11e      	b.n	801af8e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	001a      	movs	r2, r3
 801ad56:	68bb      	ldr	r3, [r7, #8]
 801ad58:	781b      	ldrb	r3, [r3, #0]
 801ad5a:	009b      	lsls	r3, r3, #2
 801ad5c:	18d3      	adds	r3, r2, r3
 801ad5e:	881b      	ldrh	r3, [r3, #0]
 801ad60:	b29a      	uxth	r2, r3
 801ad62:	2088      	movs	r0, #136	@ 0x88
 801ad64:	183b      	adds	r3, r7, r0
 801ad66:	4967      	ldr	r1, [pc, #412]	@ (801af04 <HAL_PCD_EP_DB_Transmit+0x730>)
 801ad68:	400a      	ands	r2, r1
 801ad6a:	801a      	strh	r2, [r3, #0]
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	001a      	movs	r2, r3
 801ad72:	68bb      	ldr	r3, [r7, #8]
 801ad74:	781b      	ldrb	r3, [r3, #0]
 801ad76:	009b      	lsls	r3, r3, #2
 801ad78:	18d3      	adds	r3, r2, r3
 801ad7a:	183a      	adds	r2, r7, r0
 801ad7c:	8812      	ldrh	r2, [r2, #0]
 801ad7e:	4962      	ldr	r1, [pc, #392]	@ (801af08 <HAL_PCD_EP_DB_Transmit+0x734>)
 801ad80:	430a      	orrs	r2, r1
 801ad82:	b292      	uxth	r2, r2
 801ad84:	801a      	strh	r2, [r3, #0]
 801ad86:	e102      	b.n	801af8e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801ad88:	1dbb      	adds	r3, r7, #6
 801ad8a:	881a      	ldrh	r2, [r3, #0]
 801ad8c:	2380      	movs	r3, #128	@ 0x80
 801ad8e:	01db      	lsls	r3, r3, #7
 801ad90:	4013      	ands	r3, r2
 801ad92:	d11a      	bne.n	801adca <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	001a      	movs	r2, r3
 801ad9a:	68bb      	ldr	r3, [r7, #8]
 801ad9c:	781b      	ldrb	r3, [r3, #0]
 801ad9e:	009b      	lsls	r3, r3, #2
 801ada0:	18d3      	adds	r3, r2, r3
 801ada2:	881b      	ldrh	r3, [r3, #0]
 801ada4:	b29a      	uxth	r2, r3
 801ada6:	204e      	movs	r0, #78	@ 0x4e
 801ada8:	183b      	adds	r3, r7, r0
 801adaa:	4956      	ldr	r1, [pc, #344]	@ (801af04 <HAL_PCD_EP_DB_Transmit+0x730>)
 801adac:	400a      	ands	r2, r1
 801adae:	801a      	strh	r2, [r3, #0]
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	001a      	movs	r2, r3
 801adb6:	68bb      	ldr	r3, [r7, #8]
 801adb8:	781b      	ldrb	r3, [r3, #0]
 801adba:	009b      	lsls	r3, r3, #2
 801adbc:	18d3      	adds	r3, r2, r3
 801adbe:	183a      	adds	r2, r7, r0
 801adc0:	8812      	ldrh	r2, [r2, #0]
 801adc2:	4951      	ldr	r1, [pc, #324]	@ (801af08 <HAL_PCD_EP_DB_Transmit+0x734>)
 801adc4:	430a      	orrs	r2, r1
 801adc6:	b292      	uxth	r2, r2
 801adc8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801adca:	68bb      	ldr	r3, [r7, #8]
 801adcc:	2224      	movs	r2, #36	@ 0x24
 801adce:	5c9b      	ldrb	r3, [r3, r2]
 801add0:	2b01      	cmp	r3, #1
 801add2:	d000      	beq.n	801add6 <HAL_PCD_EP_DB_Transmit+0x602>
 801add4:	e0db      	b.n	801af8e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801add6:	68bb      	ldr	r3, [r7, #8]
 801add8:	695a      	ldr	r2, [r3, #20]
 801adda:	2186      	movs	r1, #134	@ 0x86
 801addc:	187b      	adds	r3, r7, r1
 801adde:	881b      	ldrh	r3, [r3, #0]
 801ade0:	18d2      	adds	r2, r2, r3
 801ade2:	68bb      	ldr	r3, [r7, #8]
 801ade4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801ade6:	68bb      	ldr	r3, [r7, #8]
 801ade8:	69da      	ldr	r2, [r3, #28]
 801adea:	187b      	adds	r3, r7, r1
 801adec:	881b      	ldrh	r3, [r3, #0]
 801adee:	18d2      	adds	r2, r2, r3
 801adf0:	68bb      	ldr	r3, [r7, #8]
 801adf2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801adf4:	68bb      	ldr	r3, [r7, #8]
 801adf6:	6a1a      	ldr	r2, [r3, #32]
 801adf8:	68bb      	ldr	r3, [r7, #8]
 801adfa:	691b      	ldr	r3, [r3, #16]
 801adfc:	429a      	cmp	r2, r3
 801adfe:	d30c      	bcc.n	801ae1a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801ae00:	68bb      	ldr	r3, [r7, #8]
 801ae02:	691b      	ldr	r3, [r3, #16]
 801ae04:	218c      	movs	r1, #140	@ 0x8c
 801ae06:	187a      	adds	r2, r7, r1
 801ae08:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801ae0a:	68bb      	ldr	r3, [r7, #8]
 801ae0c:	6a1a      	ldr	r2, [r3, #32]
 801ae0e:	187b      	adds	r3, r7, r1
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	1ad2      	subs	r2, r2, r3
 801ae14:	68bb      	ldr	r3, [r7, #8]
 801ae16:	621a      	str	r2, [r3, #32]
 801ae18:	e01a      	b.n	801ae50 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801ae1a:	68bb      	ldr	r3, [r7, #8]
 801ae1c:	6a1b      	ldr	r3, [r3, #32]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d10a      	bne.n	801ae38 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801ae22:	2386      	movs	r3, #134	@ 0x86
 801ae24:	18fb      	adds	r3, r7, r3
 801ae26:	881b      	ldrh	r3, [r3, #0]
 801ae28:	228c      	movs	r2, #140	@ 0x8c
 801ae2a:	18ba      	adds	r2, r7, r2
 801ae2c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801ae2e:	68bb      	ldr	r3, [r7, #8]
 801ae30:	2224      	movs	r2, #36	@ 0x24
 801ae32:	2100      	movs	r1, #0
 801ae34:	5499      	strb	r1, [r3, r2]
 801ae36:	e00b      	b.n	801ae50 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801ae38:	68bb      	ldr	r3, [r7, #8]
 801ae3a:	6a1b      	ldr	r3, [r3, #32]
 801ae3c:	228c      	movs	r2, #140	@ 0x8c
 801ae3e:	18ba      	adds	r2, r7, r2
 801ae40:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801ae42:	68bb      	ldr	r3, [r7, #8]
 801ae44:	2200      	movs	r2, #0
 801ae46:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801ae48:	68bb      	ldr	r3, [r7, #8]
 801ae4a:	2224      	movs	r2, #36	@ 0x24
 801ae4c:	2100      	movs	r1, #0
 801ae4e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	657b      	str	r3, [r7, #84]	@ 0x54
 801ae56:	68bb      	ldr	r3, [r7, #8]
 801ae58:	785b      	ldrb	r3, [r3, #1]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d000      	beq.n	801ae60 <HAL_PCD_EP_DB_Transmit+0x68c>
 801ae5e:	e06e      	b.n	801af3e <HAL_PCD_EP_DB_Transmit+0x76a>
 801ae60:	68fb      	ldr	r3, [r7, #12]
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ae66:	68fb      	ldr	r3, [r7, #12]
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	2250      	movs	r2, #80	@ 0x50
 801ae6c:	5a9b      	ldrh	r3, [r3, r2]
 801ae6e:	b29b      	uxth	r3, r3
 801ae70:	001a      	movs	r2, r3
 801ae72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ae74:	189b      	adds	r3, r3, r2
 801ae76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ae78:	68bb      	ldr	r3, [r7, #8]
 801ae7a:	781b      	ldrb	r3, [r3, #0]
 801ae7c:	00da      	lsls	r2, r3, #3
 801ae7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ae80:	18d3      	adds	r3, r2, r3
 801ae82:	4a1e      	ldr	r2, [pc, #120]	@ (801aefc <HAL_PCD_EP_DB_Transmit+0x728>)
 801ae84:	4694      	mov	ip, r2
 801ae86:	4463      	add	r3, ip
 801ae88:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ae8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ae8c:	881b      	ldrh	r3, [r3, #0]
 801ae8e:	b29b      	uxth	r3, r3
 801ae90:	059b      	lsls	r3, r3, #22
 801ae92:	0d9b      	lsrs	r3, r3, #22
 801ae94:	b29a      	uxth	r2, r3
 801ae96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ae98:	801a      	strh	r2, [r3, #0]
 801ae9a:	228c      	movs	r2, #140	@ 0x8c
 801ae9c:	18bb      	adds	r3, r7, r2
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	2b3e      	cmp	r3, #62	@ 0x3e
 801aea2:	d91a      	bls.n	801aeda <HAL_PCD_EP_DB_Transmit+0x706>
 801aea4:	18bb      	adds	r3, r7, r2
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	095b      	lsrs	r3, r3, #5
 801aeaa:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aeac:	18bb      	adds	r3, r7, r2
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	221f      	movs	r2, #31
 801aeb2:	4013      	ands	r3, r2
 801aeb4:	d102      	bne.n	801aebc <HAL_PCD_EP_DB_Transmit+0x6e8>
 801aeb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aeb8:	3b01      	subs	r3, #1
 801aeba:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aebe:	881b      	ldrh	r3, [r3, #0]
 801aec0:	b29a      	uxth	r2, r3
 801aec2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aec4:	b29b      	uxth	r3, r3
 801aec6:	029b      	lsls	r3, r3, #10
 801aec8:	b29b      	uxth	r3, r3
 801aeca:	4313      	orrs	r3, r2
 801aecc:	b29b      	uxth	r3, r3
 801aece:	4a0c      	ldr	r2, [pc, #48]	@ (801af00 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801aed0:	4313      	orrs	r3, r2
 801aed2:	b29a      	uxth	r2, r3
 801aed4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aed6:	801a      	strh	r2, [r3, #0]
 801aed8:	e04d      	b.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aeda:	238c      	movs	r3, #140	@ 0x8c
 801aedc:	18fb      	adds	r3, r7, r3
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d113      	bne.n	801af0c <HAL_PCD_EP_DB_Transmit+0x738>
 801aee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aee6:	881b      	ldrh	r3, [r3, #0]
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	4a05      	ldr	r2, [pc, #20]	@ (801af00 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801aeec:	4313      	orrs	r3, r2
 801aeee:	b29a      	uxth	r2, r3
 801aef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aef2:	801a      	strh	r2, [r3, #0]
 801aef4:	e03f      	b.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aef6:	46c0      	nop			@ (mov r8, r8)
 801aef8:	00000402 	.word	0x00000402
 801aefc:	00000406 	.word	0x00000406
 801af00:	ffff8000 	.word	0xffff8000
 801af04:	ffff8f8f 	.word	0xffff8f8f
 801af08:	ffffc080 	.word	0xffffc080
 801af0c:	228c      	movs	r2, #140	@ 0x8c
 801af0e:	18bb      	adds	r3, r7, r2
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	085b      	lsrs	r3, r3, #1
 801af14:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af16:	18bb      	adds	r3, r7, r2
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	2201      	movs	r2, #1
 801af1c:	4013      	ands	r3, r2
 801af1e:	d002      	beq.n	801af26 <HAL_PCD_EP_DB_Transmit+0x752>
 801af20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af22:	3301      	adds	r3, #1
 801af24:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af28:	881b      	ldrh	r3, [r3, #0]
 801af2a:	b29a      	uxth	r2, r3
 801af2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af2e:	b29b      	uxth	r3, r3
 801af30:	029b      	lsls	r3, r3, #10
 801af32:	b29b      	uxth	r3, r3
 801af34:	4313      	orrs	r3, r2
 801af36:	b29a      	uxth	r2, r3
 801af38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af3a:	801a      	strh	r2, [r3, #0]
 801af3c:	e01b      	b.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af3e:	68bb      	ldr	r3, [r7, #8]
 801af40:	785b      	ldrb	r3, [r3, #1]
 801af42:	2b01      	cmp	r3, #1
 801af44:	d117      	bne.n	801af76 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	2250      	movs	r2, #80	@ 0x50
 801af4c:	5a9b      	ldrh	r3, [r3, r2]
 801af4e:	b29b      	uxth	r3, r3
 801af50:	001a      	movs	r2, r3
 801af52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801af54:	189b      	adds	r3, r3, r2
 801af56:	657b      	str	r3, [r7, #84]	@ 0x54
 801af58:	68bb      	ldr	r3, [r7, #8]
 801af5a:	781b      	ldrb	r3, [r3, #0]
 801af5c:	00da      	lsls	r2, r3, #3
 801af5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801af60:	18d3      	adds	r3, r2, r3
 801af62:	4a21      	ldr	r2, [pc, #132]	@ (801afe8 <HAL_PCD_EP_DB_Transmit+0x814>)
 801af64:	4694      	mov	ip, r2
 801af66:	4463      	add	r3, ip
 801af68:	653b      	str	r3, [r7, #80]	@ 0x50
 801af6a:	238c      	movs	r3, #140	@ 0x8c
 801af6c:	18fb      	adds	r3, r7, r3
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	b29a      	uxth	r2, r3
 801af72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801af74:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	6818      	ldr	r0, [r3, #0]
 801af7a:	68bb      	ldr	r3, [r7, #8]
 801af7c:	6959      	ldr	r1, [r3, #20]
 801af7e:	68bb      	ldr	r3, [r7, #8]
 801af80:	895a      	ldrh	r2, [r3, #10]
 801af82:	238c      	movs	r3, #140	@ 0x8c
 801af84:	18fb      	adds	r3, r7, r3
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	b29b      	uxth	r3, r3
 801af8a:	f006 f9a1 	bl	80212d0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	001a      	movs	r2, r3
 801af94:	68bb      	ldr	r3, [r7, #8]
 801af96:	781b      	ldrb	r3, [r3, #0]
 801af98:	009b      	lsls	r3, r3, #2
 801af9a:	18d3      	adds	r3, r2, r3
 801af9c:	881b      	ldrh	r3, [r3, #0]
 801af9e:	b29a      	uxth	r2, r3
 801afa0:	2014      	movs	r0, #20
 801afa2:	183b      	adds	r3, r7, r0
 801afa4:	4911      	ldr	r1, [pc, #68]	@ (801afec <HAL_PCD_EP_DB_Transmit+0x818>)
 801afa6:	400a      	ands	r2, r1
 801afa8:	801a      	strh	r2, [r3, #0]
 801afaa:	183b      	adds	r3, r7, r0
 801afac:	183a      	adds	r2, r7, r0
 801afae:	8812      	ldrh	r2, [r2, #0]
 801afb0:	2110      	movs	r1, #16
 801afb2:	404a      	eors	r2, r1
 801afb4:	801a      	strh	r2, [r3, #0]
 801afb6:	183b      	adds	r3, r7, r0
 801afb8:	183a      	adds	r2, r7, r0
 801afba:	8812      	ldrh	r2, [r2, #0]
 801afbc:	2120      	movs	r1, #32
 801afbe:	404a      	eors	r2, r1
 801afc0:	801a      	strh	r2, [r3, #0]
 801afc2:	68fb      	ldr	r3, [r7, #12]
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	001a      	movs	r2, r3
 801afc8:	68bb      	ldr	r3, [r7, #8]
 801afca:	781b      	ldrb	r3, [r3, #0]
 801afcc:	009b      	lsls	r3, r3, #2
 801afce:	18d3      	adds	r3, r2, r3
 801afd0:	183a      	adds	r2, r7, r0
 801afd2:	8812      	ldrh	r2, [r2, #0]
 801afd4:	4906      	ldr	r1, [pc, #24]	@ (801aff0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801afd6:	430a      	orrs	r2, r1
 801afd8:	b292      	uxth	r2, r2
 801afda:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801afdc:	2300      	movs	r3, #0
}
 801afde:	0018      	movs	r0, r3
 801afe0:	46bd      	mov	sp, r7
 801afe2:	b024      	add	sp, #144	@ 0x90
 801afe4:	bd80      	pop	{r7, pc}
 801afe6:	46c0      	nop			@ (mov r8, r8)
 801afe8:	00000406 	.word	0x00000406
 801afec:	ffff8fbf 	.word	0xffff8fbf
 801aff0:	ffff8080 	.word	0xffff8080

0801aff4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801aff4:	b590      	push	{r4, r7, lr}
 801aff6:	b087      	sub	sp, #28
 801aff8:	af00      	add	r7, sp, #0
 801affa:	60f8      	str	r0, [r7, #12]
 801affc:	0008      	movs	r0, r1
 801affe:	0011      	movs	r1, r2
 801b000:	607b      	str	r3, [r7, #4]
 801b002:	240a      	movs	r4, #10
 801b004:	193b      	adds	r3, r7, r4
 801b006:	1c02      	adds	r2, r0, #0
 801b008:	801a      	strh	r2, [r3, #0]
 801b00a:	2308      	movs	r3, #8
 801b00c:	18fb      	adds	r3, r7, r3
 801b00e:	1c0a      	adds	r2, r1, #0
 801b010:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801b012:	0021      	movs	r1, r4
 801b014:	187b      	adds	r3, r7, r1
 801b016:	881b      	ldrh	r3, [r3, #0]
 801b018:	2280      	movs	r2, #128	@ 0x80
 801b01a:	4013      	ands	r3, r2
 801b01c:	b29b      	uxth	r3, r3
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d00c      	beq.n	801b03c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b022:	187b      	adds	r3, r7, r1
 801b024:	881b      	ldrh	r3, [r3, #0]
 801b026:	2207      	movs	r2, #7
 801b028:	4013      	ands	r3, r2
 801b02a:	1c5a      	adds	r2, r3, #1
 801b02c:	0013      	movs	r3, r2
 801b02e:	009b      	lsls	r3, r3, #2
 801b030:	189b      	adds	r3, r3, r2
 801b032:	00db      	lsls	r3, r3, #3
 801b034:	68fa      	ldr	r2, [r7, #12]
 801b036:	18d3      	adds	r3, r2, r3
 801b038:	617b      	str	r3, [r7, #20]
 801b03a:	e00b      	b.n	801b054 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b03c:	230a      	movs	r3, #10
 801b03e:	18fb      	adds	r3, r7, r3
 801b040:	881a      	ldrh	r2, [r3, #0]
 801b042:	0013      	movs	r3, r2
 801b044:	009b      	lsls	r3, r3, #2
 801b046:	189b      	adds	r3, r3, r2
 801b048:	00db      	lsls	r3, r3, #3
 801b04a:	3369      	adds	r3, #105	@ 0x69
 801b04c:	33ff      	adds	r3, #255	@ 0xff
 801b04e:	68fa      	ldr	r2, [r7, #12]
 801b050:	18d3      	adds	r3, r2, r3
 801b052:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801b054:	2308      	movs	r3, #8
 801b056:	18fb      	adds	r3, r7, r3
 801b058:	881b      	ldrh	r3, [r3, #0]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d107      	bne.n	801b06e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801b05e:	697b      	ldr	r3, [r7, #20]
 801b060:	2200      	movs	r2, #0
 801b062:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	b29a      	uxth	r2, r3
 801b068:	697b      	ldr	r3, [r7, #20]
 801b06a:	80da      	strh	r2, [r3, #6]
 801b06c:	e00b      	b.n	801b086 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801b06e:	697b      	ldr	r3, [r7, #20]
 801b070:	2201      	movs	r2, #1
 801b072:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	b29a      	uxth	r2, r3
 801b078:	697b      	ldr	r3, [r7, #20]
 801b07a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	0c1b      	lsrs	r3, r3, #16
 801b080:	b29a      	uxth	r2, r3
 801b082:	697b      	ldr	r3, [r7, #20]
 801b084:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801b086:	2300      	movs	r3, #0
}
 801b088:	0018      	movs	r0, r3
 801b08a:	46bd      	mov	sp, r7
 801b08c:	b007      	add	sp, #28
 801b08e:	bd90      	pop	{r4, r7, pc}

0801b090 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b090:	b580      	push	{r7, lr}
 801b092:	b084      	sub	sp, #16
 801b094:	af00      	add	r7, sp, #0
 801b096:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801b09e:	687a      	ldr	r2, [r7, #4]
 801b0a0:	23ba      	movs	r3, #186	@ 0xba
 801b0a2:	009b      	lsls	r3, r3, #2
 801b0a4:	2101      	movs	r1, #1
 801b0a6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801b0a8:	687a      	ldr	r2, [r7, #4]
 801b0aa:	23b8      	movs	r3, #184	@ 0xb8
 801b0ac:	009b      	lsls	r3, r3, #2
 801b0ae:	2100      	movs	r1, #0
 801b0b0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	2254      	movs	r2, #84	@ 0x54
 801b0b6:	5a9b      	ldrh	r3, [r3, r2]
 801b0b8:	b29b      	uxth	r3, r3
 801b0ba:	2201      	movs	r2, #1
 801b0bc:	4313      	orrs	r3, r2
 801b0be:	b299      	uxth	r1, r3
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	2254      	movs	r2, #84	@ 0x54
 801b0c4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	2254      	movs	r2, #84	@ 0x54
 801b0ca:	5a9b      	ldrh	r3, [r3, r2]
 801b0cc:	b29b      	uxth	r3, r3
 801b0ce:	2202      	movs	r2, #2
 801b0d0:	4313      	orrs	r3, r2
 801b0d2:	b299      	uxth	r1, r3
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	2254      	movs	r2, #84	@ 0x54
 801b0d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b0da:	2300      	movs	r3, #0
}
 801b0dc:	0018      	movs	r0, r3
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	b004      	add	sp, #16
 801b0e2:	bd80      	pop	{r7, pc}

0801b0e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b082      	sub	sp, #8
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
 801b0ec:	000a      	movs	r2, r1
 801b0ee:	1cfb      	adds	r3, r7, #3
 801b0f0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801b0f2:	46c0      	nop			@ (mov r8, r8)
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	b002      	add	sp, #8
 801b0f8:	bd80      	pop	{r7, pc}
	...

0801b0fc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801b0fc:	b580      	push	{r7, lr}
 801b0fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801b100:	4b04      	ldr	r3, [pc, #16]	@ (801b114 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b102:	681a      	ldr	r2, [r3, #0]
 801b104:	4b03      	ldr	r3, [pc, #12]	@ (801b114 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b106:	2180      	movs	r1, #128	@ 0x80
 801b108:	0049      	lsls	r1, r1, #1
 801b10a:	430a      	orrs	r2, r1
 801b10c:	601a      	str	r2, [r3, #0]
}
 801b10e:	46c0      	nop			@ (mov r8, r8)
 801b110:	46bd      	mov	sp, r7
 801b112:	bd80      	pop	{r7, pc}
 801b114:	40007000 	.word	0x40007000

0801b118 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801b118:	b580      	push	{r7, lr}
 801b11a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801b11c:	4b04      	ldr	r3, [pc, #16]	@ (801b130 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b11e:	681a      	ldr	r2, [r3, #0]
 801b120:	4b03      	ldr	r3, [pc, #12]	@ (801b130 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b122:	4904      	ldr	r1, [pc, #16]	@ (801b134 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801b124:	400a      	ands	r2, r1
 801b126:	601a      	str	r2, [r3, #0]
}
 801b128:	46c0      	nop			@ (mov r8, r8)
 801b12a:	46bd      	mov	sp, r7
 801b12c:	bd80      	pop	{r7, pc}
 801b12e:	46c0      	nop			@ (mov r8, r8)
 801b130:	40007000 	.word	0x40007000
 801b134:	fffffeff 	.word	0xfffffeff

0801b138 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	b086      	sub	sp, #24
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
 801b140:	000a      	movs	r2, r1
 801b142:	1cfb      	adds	r3, r7, #3
 801b144:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801b146:	2300      	movs	r3, #0
 801b148:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801b14a:	4b25      	ldr	r3, [pc, #148]	@ (801b1e0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b14c:	681a      	ldr	r2, [r3, #0]
 801b14e:	2380      	movs	r3, #128	@ 0x80
 801b150:	009b      	lsls	r3, r3, #2
 801b152:	4013      	ands	r3, r2
 801b154:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801b156:	4b23      	ldr	r3, [pc, #140]	@ (801b1e4 <HAL_PWR_EnterSTOPMode+0xac>)
 801b158:	6a1b      	ldr	r3, [r3, #32]
 801b15a:	2201      	movs	r2, #1
 801b15c:	4013      	ands	r3, r2
 801b15e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801b160:	693b      	ldr	r3, [r7, #16]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d008      	beq.n	801b178 <HAL_PWR_EnterSTOPMode+0x40>
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d005      	beq.n	801b178 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801b16c:	4b1c      	ldr	r3, [pc, #112]	@ (801b1e0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b16e:	681a      	ldr	r2, [r3, #0]
 801b170:	4b1b      	ldr	r3, [pc, #108]	@ (801b1e0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b172:	491d      	ldr	r1, [pc, #116]	@ (801b1e8 <HAL_PWR_EnterSTOPMode+0xb0>)
 801b174:	400a      	ands	r2, r1
 801b176:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801b178:	4b19      	ldr	r3, [pc, #100]	@ (801b1e0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801b17e:	697b      	ldr	r3, [r7, #20]
 801b180:	2203      	movs	r2, #3
 801b182:	4393      	bics	r3, r2
 801b184:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801b186:	697a      	ldr	r2, [r7, #20]
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	4313      	orrs	r3, r2
 801b18c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801b18e:	4b14      	ldr	r3, [pc, #80]	@ (801b1e0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b190:	697a      	ldr	r2, [r7, #20]
 801b192:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b194:	4b15      	ldr	r3, [pc, #84]	@ (801b1ec <HAL_PWR_EnterSTOPMode+0xb4>)
 801b196:	691a      	ldr	r2, [r3, #16]
 801b198:	4b14      	ldr	r3, [pc, #80]	@ (801b1ec <HAL_PWR_EnterSTOPMode+0xb4>)
 801b19a:	2104      	movs	r1, #4
 801b19c:	430a      	orrs	r2, r1
 801b19e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801b1a0:	1cfb      	adds	r3, r7, #3
 801b1a2:	781b      	ldrb	r3, [r3, #0]
 801b1a4:	2b01      	cmp	r3, #1
 801b1a6:	d101      	bne.n	801b1ac <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801b1a8:	bf30      	wfi
 801b1aa:	e002      	b.n	801b1b2 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801b1ac:	bf40      	sev
    __WFE();
 801b1ae:	bf20      	wfe
    __WFE();
 801b1b0:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b1b2:	4b0e      	ldr	r3, [pc, #56]	@ (801b1ec <HAL_PWR_EnterSTOPMode+0xb4>)
 801b1b4:	691a      	ldr	r2, [r3, #16]
 801b1b6:	4b0d      	ldr	r3, [pc, #52]	@ (801b1ec <HAL_PWR_EnterSTOPMode+0xb4>)
 801b1b8:	2104      	movs	r1, #4
 801b1ba:	438a      	bics	r2, r1
 801b1bc:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801b1be:	693b      	ldr	r3, [r7, #16]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d009      	beq.n	801b1d8 <HAL_PWR_EnterSTOPMode+0xa0>
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d006      	beq.n	801b1d8 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801b1ca:	4b05      	ldr	r3, [pc, #20]	@ (801b1e0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1cc:	681a      	ldr	r2, [r3, #0]
 801b1ce:	4b04      	ldr	r3, [pc, #16]	@ (801b1e0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b1d0:	2180      	movs	r1, #128	@ 0x80
 801b1d2:	0089      	lsls	r1, r1, #2
 801b1d4:	430a      	orrs	r2, r1
 801b1d6:	601a      	str	r2, [r3, #0]
  }
}
 801b1d8:	46c0      	nop			@ (mov r8, r8)
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	b006      	add	sp, #24
 801b1de:	bd80      	pop	{r7, pc}
 801b1e0:	40007000 	.word	0x40007000
 801b1e4:	40010000 	.word	0x40010000
 801b1e8:	fffffdff 	.word	0xfffffdff
 801b1ec:	e000ed00 	.word	0xe000ed00

0801b1f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b1f0:	b5b0      	push	{r4, r5, r7, lr}
 801b1f2:	b08a      	sub	sp, #40	@ 0x28
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d102      	bne.n	801b204 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b1fe:	2301      	movs	r3, #1
 801b200:	f000 fbbf 	bl	801b982 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b204:	4bc9      	ldr	r3, [pc, #804]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b206:	68db      	ldr	r3, [r3, #12]
 801b208:	220c      	movs	r2, #12
 801b20a:	4013      	ands	r3, r2
 801b20c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b20e:	4bc7      	ldr	r3, [pc, #796]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b210:	68da      	ldr	r2, [r3, #12]
 801b212:	2380      	movs	r3, #128	@ 0x80
 801b214:	025b      	lsls	r3, r3, #9
 801b216:	4013      	ands	r3, r2
 801b218:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	2201      	movs	r2, #1
 801b220:	4013      	ands	r3, r2
 801b222:	d100      	bne.n	801b226 <HAL_RCC_OscConfig+0x36>
 801b224:	e07e      	b.n	801b324 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b226:	69fb      	ldr	r3, [r7, #28]
 801b228:	2b08      	cmp	r3, #8
 801b22a:	d007      	beq.n	801b23c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801b22c:	69fb      	ldr	r3, [r7, #28]
 801b22e:	2b0c      	cmp	r3, #12
 801b230:	d112      	bne.n	801b258 <HAL_RCC_OscConfig+0x68>
 801b232:	69ba      	ldr	r2, [r7, #24]
 801b234:	2380      	movs	r3, #128	@ 0x80
 801b236:	025b      	lsls	r3, r3, #9
 801b238:	429a      	cmp	r2, r3
 801b23a:	d10d      	bne.n	801b258 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b23c:	4bbb      	ldr	r3, [pc, #748]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b23e:	681a      	ldr	r2, [r3, #0]
 801b240:	2380      	movs	r3, #128	@ 0x80
 801b242:	029b      	lsls	r3, r3, #10
 801b244:	4013      	ands	r3, r2
 801b246:	d100      	bne.n	801b24a <HAL_RCC_OscConfig+0x5a>
 801b248:	e06b      	b.n	801b322 <HAL_RCC_OscConfig+0x132>
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	685b      	ldr	r3, [r3, #4]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d167      	bne.n	801b322 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801b252:	2301      	movs	r3, #1
 801b254:	f000 fb95 	bl	801b982 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	685a      	ldr	r2, [r3, #4]
 801b25c:	2380      	movs	r3, #128	@ 0x80
 801b25e:	025b      	lsls	r3, r3, #9
 801b260:	429a      	cmp	r2, r3
 801b262:	d107      	bne.n	801b274 <HAL_RCC_OscConfig+0x84>
 801b264:	4bb1      	ldr	r3, [pc, #708]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b266:	681a      	ldr	r2, [r3, #0]
 801b268:	4bb0      	ldr	r3, [pc, #704]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b26a:	2180      	movs	r1, #128	@ 0x80
 801b26c:	0249      	lsls	r1, r1, #9
 801b26e:	430a      	orrs	r2, r1
 801b270:	601a      	str	r2, [r3, #0]
 801b272:	e027      	b.n	801b2c4 <HAL_RCC_OscConfig+0xd4>
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	685a      	ldr	r2, [r3, #4]
 801b278:	23a0      	movs	r3, #160	@ 0xa0
 801b27a:	02db      	lsls	r3, r3, #11
 801b27c:	429a      	cmp	r2, r3
 801b27e:	d10e      	bne.n	801b29e <HAL_RCC_OscConfig+0xae>
 801b280:	4baa      	ldr	r3, [pc, #680]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b282:	681a      	ldr	r2, [r3, #0]
 801b284:	4ba9      	ldr	r3, [pc, #676]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b286:	2180      	movs	r1, #128	@ 0x80
 801b288:	02c9      	lsls	r1, r1, #11
 801b28a:	430a      	orrs	r2, r1
 801b28c:	601a      	str	r2, [r3, #0]
 801b28e:	4ba7      	ldr	r3, [pc, #668]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b290:	681a      	ldr	r2, [r3, #0]
 801b292:	4ba6      	ldr	r3, [pc, #664]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b294:	2180      	movs	r1, #128	@ 0x80
 801b296:	0249      	lsls	r1, r1, #9
 801b298:	430a      	orrs	r2, r1
 801b29a:	601a      	str	r2, [r3, #0]
 801b29c:	e012      	b.n	801b2c4 <HAL_RCC_OscConfig+0xd4>
 801b29e:	4ba3      	ldr	r3, [pc, #652]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b2a0:	681a      	ldr	r2, [r3, #0]
 801b2a2:	4ba2      	ldr	r3, [pc, #648]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b2a4:	49a2      	ldr	r1, [pc, #648]	@ (801b530 <HAL_RCC_OscConfig+0x340>)
 801b2a6:	400a      	ands	r2, r1
 801b2a8:	601a      	str	r2, [r3, #0]
 801b2aa:	4ba0      	ldr	r3, [pc, #640]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b2ac:	681a      	ldr	r2, [r3, #0]
 801b2ae:	2380      	movs	r3, #128	@ 0x80
 801b2b0:	025b      	lsls	r3, r3, #9
 801b2b2:	4013      	ands	r3, r2
 801b2b4:	60fb      	str	r3, [r7, #12]
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	4b9c      	ldr	r3, [pc, #624]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b2ba:	681a      	ldr	r2, [r3, #0]
 801b2bc:	4b9b      	ldr	r3, [pc, #620]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b2be:	499d      	ldr	r1, [pc, #628]	@ (801b534 <HAL_RCC_OscConfig+0x344>)
 801b2c0:	400a      	ands	r2, r1
 801b2c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	685b      	ldr	r3, [r3, #4]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d015      	beq.n	801b2f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b2cc:	f7f9 faf8 	bl	80148c0 <HAL_GetTick>
 801b2d0:	0003      	movs	r3, r0
 801b2d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b2d4:	e009      	b.n	801b2ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b2d6:	f7f9 faf3 	bl	80148c0 <HAL_GetTick>
 801b2da:	0002      	movs	r2, r0
 801b2dc:	697b      	ldr	r3, [r7, #20]
 801b2de:	1ad3      	subs	r3, r2, r3
 801b2e0:	2b64      	cmp	r3, #100	@ 0x64
 801b2e2:	d902      	bls.n	801b2ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b2e4:	2303      	movs	r3, #3
 801b2e6:	f000 fb4c 	bl	801b982 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b2ea:	4b90      	ldr	r3, [pc, #576]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b2ec:	681a      	ldr	r2, [r3, #0]
 801b2ee:	2380      	movs	r3, #128	@ 0x80
 801b2f0:	029b      	lsls	r3, r3, #10
 801b2f2:	4013      	ands	r3, r2
 801b2f4:	d0ef      	beq.n	801b2d6 <HAL_RCC_OscConfig+0xe6>
 801b2f6:	e015      	b.n	801b324 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b2f8:	f7f9 fae2 	bl	80148c0 <HAL_GetTick>
 801b2fc:	0003      	movs	r3, r0
 801b2fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b300:	e008      	b.n	801b314 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b302:	f7f9 fadd 	bl	80148c0 <HAL_GetTick>
 801b306:	0002      	movs	r2, r0
 801b308:	697b      	ldr	r3, [r7, #20]
 801b30a:	1ad3      	subs	r3, r2, r3
 801b30c:	2b64      	cmp	r3, #100	@ 0x64
 801b30e:	d901      	bls.n	801b314 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801b310:	2303      	movs	r3, #3
 801b312:	e336      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b314:	4b85      	ldr	r3, [pc, #532]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b316:	681a      	ldr	r2, [r3, #0]
 801b318:	2380      	movs	r3, #128	@ 0x80
 801b31a:	029b      	lsls	r3, r3, #10
 801b31c:	4013      	ands	r3, r2
 801b31e:	d1f0      	bne.n	801b302 <HAL_RCC_OscConfig+0x112>
 801b320:	e000      	b.n	801b324 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b322:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	2202      	movs	r2, #2
 801b32a:	4013      	ands	r3, r2
 801b32c:	d100      	bne.n	801b330 <HAL_RCC_OscConfig+0x140>
 801b32e:	e099      	b.n	801b464 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	68db      	ldr	r3, [r3, #12]
 801b334:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b338:	2220      	movs	r2, #32
 801b33a:	4013      	ands	r3, r2
 801b33c:	d009      	beq.n	801b352 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801b33e:	4b7b      	ldr	r3, [pc, #492]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b340:	681a      	ldr	r2, [r3, #0]
 801b342:	4b7a      	ldr	r3, [pc, #488]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b344:	2120      	movs	r1, #32
 801b346:	430a      	orrs	r2, r1
 801b348:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801b34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b34c:	2220      	movs	r2, #32
 801b34e:	4393      	bics	r3, r2
 801b350:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b352:	69fb      	ldr	r3, [r7, #28]
 801b354:	2b04      	cmp	r3, #4
 801b356:	d005      	beq.n	801b364 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801b358:	69fb      	ldr	r3, [r7, #28]
 801b35a:	2b0c      	cmp	r3, #12
 801b35c:	d13e      	bne.n	801b3dc <HAL_RCC_OscConfig+0x1ec>
 801b35e:	69bb      	ldr	r3, [r7, #24]
 801b360:	2b00      	cmp	r3, #0
 801b362:	d13b      	bne.n	801b3dc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801b364:	4b71      	ldr	r3, [pc, #452]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	2204      	movs	r2, #4
 801b36a:	4013      	ands	r3, r2
 801b36c:	d004      	beq.n	801b378 <HAL_RCC_OscConfig+0x188>
 801b36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b370:	2b00      	cmp	r3, #0
 801b372:	d101      	bne.n	801b378 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801b374:	2301      	movs	r3, #1
 801b376:	e304      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b378:	4b6c      	ldr	r3, [pc, #432]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b37a:	685b      	ldr	r3, [r3, #4]
 801b37c:	4a6e      	ldr	r2, [pc, #440]	@ (801b538 <HAL_RCC_OscConfig+0x348>)
 801b37e:	4013      	ands	r3, r2
 801b380:	0019      	movs	r1, r3
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	691b      	ldr	r3, [r3, #16]
 801b386:	021a      	lsls	r2, r3, #8
 801b388:	4b68      	ldr	r3, [pc, #416]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b38a:	430a      	orrs	r2, r1
 801b38c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b38e:	4b67      	ldr	r3, [pc, #412]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	2209      	movs	r2, #9
 801b394:	4393      	bics	r3, r2
 801b396:	0019      	movs	r1, r3
 801b398:	4b64      	ldr	r3, [pc, #400]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b39c:	430a      	orrs	r2, r1
 801b39e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b3a0:	f000 fc42 	bl	801bc28 <HAL_RCC_GetSysClockFreq>
 801b3a4:	0001      	movs	r1, r0
 801b3a6:	4b61      	ldr	r3, [pc, #388]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b3a8:	68db      	ldr	r3, [r3, #12]
 801b3aa:	091b      	lsrs	r3, r3, #4
 801b3ac:	220f      	movs	r2, #15
 801b3ae:	4013      	ands	r3, r2
 801b3b0:	4a62      	ldr	r2, [pc, #392]	@ (801b53c <HAL_RCC_OscConfig+0x34c>)
 801b3b2:	5cd3      	ldrb	r3, [r2, r3]
 801b3b4:	000a      	movs	r2, r1
 801b3b6:	40da      	lsrs	r2, r3
 801b3b8:	4b61      	ldr	r3, [pc, #388]	@ (801b540 <HAL_RCC_OscConfig+0x350>)
 801b3ba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801b3bc:	4b61      	ldr	r3, [pc, #388]	@ (801b544 <HAL_RCC_OscConfig+0x354>)
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	2513      	movs	r5, #19
 801b3c2:	197c      	adds	r4, r7, r5
 801b3c4:	0018      	movs	r0, r3
 801b3c6:	f7f9 fa35 	bl	8014834 <HAL_InitTick>
 801b3ca:	0003      	movs	r3, r0
 801b3cc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801b3ce:	197b      	adds	r3, r7, r5
 801b3d0:	781b      	ldrb	r3, [r3, #0]
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d046      	beq.n	801b464 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801b3d6:	197b      	adds	r3, r7, r5
 801b3d8:	781b      	ldrb	r3, [r3, #0]
 801b3da:	e2d2      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801b3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d027      	beq.n	801b432 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b3e2:	4b52      	ldr	r3, [pc, #328]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	2209      	movs	r2, #9
 801b3e8:	4393      	bics	r3, r2
 801b3ea:	0019      	movs	r1, r3
 801b3ec:	4b4f      	ldr	r3, [pc, #316]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b3ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b3f0:	430a      	orrs	r2, r1
 801b3f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b3f4:	f7f9 fa64 	bl	80148c0 <HAL_GetTick>
 801b3f8:	0003      	movs	r3, r0
 801b3fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b3fc:	e008      	b.n	801b410 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b3fe:	f7f9 fa5f 	bl	80148c0 <HAL_GetTick>
 801b402:	0002      	movs	r2, r0
 801b404:	697b      	ldr	r3, [r7, #20]
 801b406:	1ad3      	subs	r3, r2, r3
 801b408:	2b02      	cmp	r3, #2
 801b40a:	d901      	bls.n	801b410 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801b40c:	2303      	movs	r3, #3
 801b40e:	e2b8      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b410:	4b46      	ldr	r3, [pc, #280]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	2204      	movs	r2, #4
 801b416:	4013      	ands	r3, r2
 801b418:	d0f1      	beq.n	801b3fe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b41a:	4b44      	ldr	r3, [pc, #272]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b41c:	685b      	ldr	r3, [r3, #4]
 801b41e:	4a46      	ldr	r2, [pc, #280]	@ (801b538 <HAL_RCC_OscConfig+0x348>)
 801b420:	4013      	ands	r3, r2
 801b422:	0019      	movs	r1, r3
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	691b      	ldr	r3, [r3, #16]
 801b428:	021a      	lsls	r2, r3, #8
 801b42a:	4b40      	ldr	r3, [pc, #256]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b42c:	430a      	orrs	r2, r1
 801b42e:	605a      	str	r2, [r3, #4]
 801b430:	e018      	b.n	801b464 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b432:	4b3e      	ldr	r3, [pc, #248]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b434:	681a      	ldr	r2, [r3, #0]
 801b436:	4b3d      	ldr	r3, [pc, #244]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b438:	2101      	movs	r1, #1
 801b43a:	438a      	bics	r2, r1
 801b43c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b43e:	f7f9 fa3f 	bl	80148c0 <HAL_GetTick>
 801b442:	0003      	movs	r3, r0
 801b444:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b446:	e008      	b.n	801b45a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b448:	f7f9 fa3a 	bl	80148c0 <HAL_GetTick>
 801b44c:	0002      	movs	r2, r0
 801b44e:	697b      	ldr	r3, [r7, #20]
 801b450:	1ad3      	subs	r3, r2, r3
 801b452:	2b02      	cmp	r3, #2
 801b454:	d901      	bls.n	801b45a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801b456:	2303      	movs	r3, #3
 801b458:	e293      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b45a:	4b34      	ldr	r3, [pc, #208]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	2204      	movs	r2, #4
 801b460:	4013      	ands	r3, r2
 801b462:	d1f1      	bne.n	801b448 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	2210      	movs	r2, #16
 801b46a:	4013      	ands	r3, r2
 801b46c:	d100      	bne.n	801b470 <HAL_RCC_OscConfig+0x280>
 801b46e:	e0a2      	b.n	801b5b6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b470:	69fb      	ldr	r3, [r7, #28]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d140      	bne.n	801b4f8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b476:	4b2d      	ldr	r3, [pc, #180]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b478:	681a      	ldr	r2, [r3, #0]
 801b47a:	2380      	movs	r3, #128	@ 0x80
 801b47c:	009b      	lsls	r3, r3, #2
 801b47e:	4013      	ands	r3, r2
 801b480:	d005      	beq.n	801b48e <HAL_RCC_OscConfig+0x29e>
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	69db      	ldr	r3, [r3, #28]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d101      	bne.n	801b48e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b48a:	2301      	movs	r3, #1
 801b48c:	e279      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b48e:	4b27      	ldr	r3, [pc, #156]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b490:	685b      	ldr	r3, [r3, #4]
 801b492:	4a2d      	ldr	r2, [pc, #180]	@ (801b548 <HAL_RCC_OscConfig+0x358>)
 801b494:	4013      	ands	r3, r2
 801b496:	0019      	movs	r1, r3
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b49c:	4b23      	ldr	r3, [pc, #140]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b49e:	430a      	orrs	r2, r1
 801b4a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b4a2:	4b22      	ldr	r3, [pc, #136]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b4a4:	685b      	ldr	r3, [r3, #4]
 801b4a6:	021b      	lsls	r3, r3, #8
 801b4a8:	0a19      	lsrs	r1, r3, #8
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	6a1b      	ldr	r3, [r3, #32]
 801b4ae:	061a      	lsls	r2, r3, #24
 801b4b0:	4b1e      	ldr	r3, [pc, #120]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b4b2:	430a      	orrs	r2, r1
 801b4b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b4ba:	0b5b      	lsrs	r3, r3, #13
 801b4bc:	3301      	adds	r3, #1
 801b4be:	2280      	movs	r2, #128	@ 0x80
 801b4c0:	0212      	lsls	r2, r2, #8
 801b4c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801b4c4:	4b19      	ldr	r3, [pc, #100]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b4c6:	68db      	ldr	r3, [r3, #12]
 801b4c8:	091b      	lsrs	r3, r3, #4
 801b4ca:	210f      	movs	r1, #15
 801b4cc:	400b      	ands	r3, r1
 801b4ce:	491b      	ldr	r1, [pc, #108]	@ (801b53c <HAL_RCC_OscConfig+0x34c>)
 801b4d0:	5ccb      	ldrb	r3, [r1, r3]
 801b4d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b4d4:	4b1a      	ldr	r3, [pc, #104]	@ (801b540 <HAL_RCC_OscConfig+0x350>)
 801b4d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801b4d8:	4b1a      	ldr	r3, [pc, #104]	@ (801b544 <HAL_RCC_OscConfig+0x354>)
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	2513      	movs	r5, #19
 801b4de:	197c      	adds	r4, r7, r5
 801b4e0:	0018      	movs	r0, r3
 801b4e2:	f7f9 f9a7 	bl	8014834 <HAL_InitTick>
 801b4e6:	0003      	movs	r3, r0
 801b4e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801b4ea:	197b      	adds	r3, r7, r5
 801b4ec:	781b      	ldrb	r3, [r3, #0]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d061      	beq.n	801b5b6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801b4f2:	197b      	adds	r3, r7, r5
 801b4f4:	781b      	ldrb	r3, [r3, #0]
 801b4f6:	e244      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	69db      	ldr	r3, [r3, #28]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d040      	beq.n	801b582 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b500:	4b0a      	ldr	r3, [pc, #40]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b502:	681a      	ldr	r2, [r3, #0]
 801b504:	4b09      	ldr	r3, [pc, #36]	@ (801b52c <HAL_RCC_OscConfig+0x33c>)
 801b506:	2180      	movs	r1, #128	@ 0x80
 801b508:	0049      	lsls	r1, r1, #1
 801b50a:	430a      	orrs	r2, r1
 801b50c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b50e:	f7f9 f9d7 	bl	80148c0 <HAL_GetTick>
 801b512:	0003      	movs	r3, r0
 801b514:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b516:	e019      	b.n	801b54c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b518:	f7f9 f9d2 	bl	80148c0 <HAL_GetTick>
 801b51c:	0002      	movs	r2, r0
 801b51e:	697b      	ldr	r3, [r7, #20]
 801b520:	1ad3      	subs	r3, r2, r3
 801b522:	2b02      	cmp	r3, #2
 801b524:	d912      	bls.n	801b54c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801b526:	2303      	movs	r3, #3
 801b528:	e22b      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
 801b52a:	46c0      	nop			@ (mov r8, r8)
 801b52c:	40021000 	.word	0x40021000
 801b530:	fffeffff 	.word	0xfffeffff
 801b534:	fffbffff 	.word	0xfffbffff
 801b538:	ffffe0ff 	.word	0xffffe0ff
 801b53c:	0802e420 	.word	0x0802e420
 801b540:	200000ec 	.word	0x200000ec
 801b544:	200000fc 	.word	0x200000fc
 801b548:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b54c:	4bca      	ldr	r3, [pc, #808]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b54e:	681a      	ldr	r2, [r3, #0]
 801b550:	2380      	movs	r3, #128	@ 0x80
 801b552:	009b      	lsls	r3, r3, #2
 801b554:	4013      	ands	r3, r2
 801b556:	d0df      	beq.n	801b518 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b558:	4bc7      	ldr	r3, [pc, #796]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b55a:	685b      	ldr	r3, [r3, #4]
 801b55c:	4ac7      	ldr	r2, [pc, #796]	@ (801b87c <HAL_RCC_OscConfig+0x68c>)
 801b55e:	4013      	ands	r3, r2
 801b560:	0019      	movs	r1, r3
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b566:	4bc4      	ldr	r3, [pc, #784]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b568:	430a      	orrs	r2, r1
 801b56a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b56c:	4bc2      	ldr	r3, [pc, #776]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b56e:	685b      	ldr	r3, [r3, #4]
 801b570:	021b      	lsls	r3, r3, #8
 801b572:	0a19      	lsrs	r1, r3, #8
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	6a1b      	ldr	r3, [r3, #32]
 801b578:	061a      	lsls	r2, r3, #24
 801b57a:	4bbf      	ldr	r3, [pc, #764]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b57c:	430a      	orrs	r2, r1
 801b57e:	605a      	str	r2, [r3, #4]
 801b580:	e019      	b.n	801b5b6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b582:	4bbd      	ldr	r3, [pc, #756]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b584:	681a      	ldr	r2, [r3, #0]
 801b586:	4bbc      	ldr	r3, [pc, #752]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b588:	49bd      	ldr	r1, [pc, #756]	@ (801b880 <HAL_RCC_OscConfig+0x690>)
 801b58a:	400a      	ands	r2, r1
 801b58c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b58e:	f7f9 f997 	bl	80148c0 <HAL_GetTick>
 801b592:	0003      	movs	r3, r0
 801b594:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b596:	e008      	b.n	801b5aa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b598:	f7f9 f992 	bl	80148c0 <HAL_GetTick>
 801b59c:	0002      	movs	r2, r0
 801b59e:	697b      	ldr	r3, [r7, #20]
 801b5a0:	1ad3      	subs	r3, r2, r3
 801b5a2:	2b02      	cmp	r3, #2
 801b5a4:	d901      	bls.n	801b5aa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801b5a6:	2303      	movs	r3, #3
 801b5a8:	e1eb      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b5aa:	4bb3      	ldr	r3, [pc, #716]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b5ac:	681a      	ldr	r2, [r3, #0]
 801b5ae:	2380      	movs	r3, #128	@ 0x80
 801b5b0:	009b      	lsls	r3, r3, #2
 801b5b2:	4013      	ands	r3, r2
 801b5b4:	d1f0      	bne.n	801b598 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	2208      	movs	r2, #8
 801b5bc:	4013      	ands	r3, r2
 801b5be:	d036      	beq.n	801b62e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	695b      	ldr	r3, [r3, #20]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d019      	beq.n	801b5fc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b5c8:	4bab      	ldr	r3, [pc, #684]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b5ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b5cc:	4baa      	ldr	r3, [pc, #680]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b5ce:	2101      	movs	r1, #1
 801b5d0:	430a      	orrs	r2, r1
 801b5d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b5d4:	f7f9 f974 	bl	80148c0 <HAL_GetTick>
 801b5d8:	0003      	movs	r3, r0
 801b5da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b5dc:	e008      	b.n	801b5f0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b5de:	f7f9 f96f 	bl	80148c0 <HAL_GetTick>
 801b5e2:	0002      	movs	r2, r0
 801b5e4:	697b      	ldr	r3, [r7, #20]
 801b5e6:	1ad3      	subs	r3, r2, r3
 801b5e8:	2b02      	cmp	r3, #2
 801b5ea:	d901      	bls.n	801b5f0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801b5ec:	2303      	movs	r3, #3
 801b5ee:	e1c8      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b5f0:	4ba1      	ldr	r3, [pc, #644]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b5f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b5f4:	2202      	movs	r2, #2
 801b5f6:	4013      	ands	r3, r2
 801b5f8:	d0f1      	beq.n	801b5de <HAL_RCC_OscConfig+0x3ee>
 801b5fa:	e018      	b.n	801b62e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b5fc:	4b9e      	ldr	r3, [pc, #632]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b5fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b600:	4b9d      	ldr	r3, [pc, #628]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b602:	2101      	movs	r1, #1
 801b604:	438a      	bics	r2, r1
 801b606:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b608:	f7f9 f95a 	bl	80148c0 <HAL_GetTick>
 801b60c:	0003      	movs	r3, r0
 801b60e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b610:	e008      	b.n	801b624 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b612:	f7f9 f955 	bl	80148c0 <HAL_GetTick>
 801b616:	0002      	movs	r2, r0
 801b618:	697b      	ldr	r3, [r7, #20]
 801b61a:	1ad3      	subs	r3, r2, r3
 801b61c:	2b02      	cmp	r3, #2
 801b61e:	d901      	bls.n	801b624 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801b620:	2303      	movs	r3, #3
 801b622:	e1ae      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b624:	4b94      	ldr	r3, [pc, #592]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b628:	2202      	movs	r2, #2
 801b62a:	4013      	ands	r3, r2
 801b62c:	d1f1      	bne.n	801b612 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	2204      	movs	r2, #4
 801b634:	4013      	ands	r3, r2
 801b636:	d100      	bne.n	801b63a <HAL_RCC_OscConfig+0x44a>
 801b638:	e0ae      	b.n	801b798 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b63a:	2023      	movs	r0, #35	@ 0x23
 801b63c:	183b      	adds	r3, r7, r0
 801b63e:	2200      	movs	r2, #0
 801b640:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b642:	4b8d      	ldr	r3, [pc, #564]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b646:	2380      	movs	r3, #128	@ 0x80
 801b648:	055b      	lsls	r3, r3, #21
 801b64a:	4013      	ands	r3, r2
 801b64c:	d109      	bne.n	801b662 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b64e:	4b8a      	ldr	r3, [pc, #552]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b652:	4b89      	ldr	r3, [pc, #548]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b654:	2180      	movs	r1, #128	@ 0x80
 801b656:	0549      	lsls	r1, r1, #21
 801b658:	430a      	orrs	r2, r1
 801b65a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b65c:	183b      	adds	r3, r7, r0
 801b65e:	2201      	movs	r2, #1
 801b660:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b662:	4b88      	ldr	r3, [pc, #544]	@ (801b884 <HAL_RCC_OscConfig+0x694>)
 801b664:	681a      	ldr	r2, [r3, #0]
 801b666:	2380      	movs	r3, #128	@ 0x80
 801b668:	005b      	lsls	r3, r3, #1
 801b66a:	4013      	ands	r3, r2
 801b66c:	d11a      	bne.n	801b6a4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b66e:	4b85      	ldr	r3, [pc, #532]	@ (801b884 <HAL_RCC_OscConfig+0x694>)
 801b670:	681a      	ldr	r2, [r3, #0]
 801b672:	4b84      	ldr	r3, [pc, #528]	@ (801b884 <HAL_RCC_OscConfig+0x694>)
 801b674:	2180      	movs	r1, #128	@ 0x80
 801b676:	0049      	lsls	r1, r1, #1
 801b678:	430a      	orrs	r2, r1
 801b67a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b67c:	f7f9 f920 	bl	80148c0 <HAL_GetTick>
 801b680:	0003      	movs	r3, r0
 801b682:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b684:	e008      	b.n	801b698 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b686:	f7f9 f91b 	bl	80148c0 <HAL_GetTick>
 801b68a:	0002      	movs	r2, r0
 801b68c:	697b      	ldr	r3, [r7, #20]
 801b68e:	1ad3      	subs	r3, r2, r3
 801b690:	2b64      	cmp	r3, #100	@ 0x64
 801b692:	d901      	bls.n	801b698 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801b694:	2303      	movs	r3, #3
 801b696:	e174      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b698:	4b7a      	ldr	r3, [pc, #488]	@ (801b884 <HAL_RCC_OscConfig+0x694>)
 801b69a:	681a      	ldr	r2, [r3, #0]
 801b69c:	2380      	movs	r3, #128	@ 0x80
 801b69e:	005b      	lsls	r3, r3, #1
 801b6a0:	4013      	ands	r3, r2
 801b6a2:	d0f0      	beq.n	801b686 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	689a      	ldr	r2, [r3, #8]
 801b6a8:	2380      	movs	r3, #128	@ 0x80
 801b6aa:	005b      	lsls	r3, r3, #1
 801b6ac:	429a      	cmp	r2, r3
 801b6ae:	d107      	bne.n	801b6c0 <HAL_RCC_OscConfig+0x4d0>
 801b6b0:	4b71      	ldr	r3, [pc, #452]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b6b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6b4:	4b70      	ldr	r3, [pc, #448]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b6b6:	2180      	movs	r1, #128	@ 0x80
 801b6b8:	0049      	lsls	r1, r1, #1
 801b6ba:	430a      	orrs	r2, r1
 801b6bc:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6be:	e031      	b.n	801b724 <HAL_RCC_OscConfig+0x534>
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	689b      	ldr	r3, [r3, #8]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d10c      	bne.n	801b6e2 <HAL_RCC_OscConfig+0x4f2>
 801b6c8:	4b6b      	ldr	r3, [pc, #428]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b6ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6cc:	4b6a      	ldr	r3, [pc, #424]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b6ce:	496c      	ldr	r1, [pc, #432]	@ (801b880 <HAL_RCC_OscConfig+0x690>)
 801b6d0:	400a      	ands	r2, r1
 801b6d2:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6d4:	4b68      	ldr	r3, [pc, #416]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b6d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6d8:	4b67      	ldr	r3, [pc, #412]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b6da:	496b      	ldr	r1, [pc, #428]	@ (801b888 <HAL_RCC_OscConfig+0x698>)
 801b6dc:	400a      	ands	r2, r1
 801b6de:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6e0:	e020      	b.n	801b724 <HAL_RCC_OscConfig+0x534>
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	689a      	ldr	r2, [r3, #8]
 801b6e6:	23a0      	movs	r3, #160	@ 0xa0
 801b6e8:	00db      	lsls	r3, r3, #3
 801b6ea:	429a      	cmp	r2, r3
 801b6ec:	d10e      	bne.n	801b70c <HAL_RCC_OscConfig+0x51c>
 801b6ee:	4b62      	ldr	r3, [pc, #392]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b6f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6f2:	4b61      	ldr	r3, [pc, #388]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b6f4:	2180      	movs	r1, #128	@ 0x80
 801b6f6:	00c9      	lsls	r1, r1, #3
 801b6f8:	430a      	orrs	r2, r1
 801b6fa:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6fc:	4b5e      	ldr	r3, [pc, #376]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b6fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b700:	4b5d      	ldr	r3, [pc, #372]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b702:	2180      	movs	r1, #128	@ 0x80
 801b704:	0049      	lsls	r1, r1, #1
 801b706:	430a      	orrs	r2, r1
 801b708:	651a      	str	r2, [r3, #80]	@ 0x50
 801b70a:	e00b      	b.n	801b724 <HAL_RCC_OscConfig+0x534>
 801b70c:	4b5a      	ldr	r3, [pc, #360]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b70e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b710:	4b59      	ldr	r3, [pc, #356]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b712:	495b      	ldr	r1, [pc, #364]	@ (801b880 <HAL_RCC_OscConfig+0x690>)
 801b714:	400a      	ands	r2, r1
 801b716:	651a      	str	r2, [r3, #80]	@ 0x50
 801b718:	4b57      	ldr	r3, [pc, #348]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b71a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b71c:	4b56      	ldr	r3, [pc, #344]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b71e:	495a      	ldr	r1, [pc, #360]	@ (801b888 <HAL_RCC_OscConfig+0x698>)
 801b720:	400a      	ands	r2, r1
 801b722:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	689b      	ldr	r3, [r3, #8]
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d015      	beq.n	801b758 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b72c:	f7f9 f8c8 	bl	80148c0 <HAL_GetTick>
 801b730:	0003      	movs	r3, r0
 801b732:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b734:	e009      	b.n	801b74a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b736:	f7f9 f8c3 	bl	80148c0 <HAL_GetTick>
 801b73a:	0002      	movs	r2, r0
 801b73c:	697b      	ldr	r3, [r7, #20]
 801b73e:	1ad3      	subs	r3, r2, r3
 801b740:	4a52      	ldr	r2, [pc, #328]	@ (801b88c <HAL_RCC_OscConfig+0x69c>)
 801b742:	4293      	cmp	r3, r2
 801b744:	d901      	bls.n	801b74a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801b746:	2303      	movs	r3, #3
 801b748:	e11b      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b74a:	4b4b      	ldr	r3, [pc, #300]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b74c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b74e:	2380      	movs	r3, #128	@ 0x80
 801b750:	009b      	lsls	r3, r3, #2
 801b752:	4013      	ands	r3, r2
 801b754:	d0ef      	beq.n	801b736 <HAL_RCC_OscConfig+0x546>
 801b756:	e014      	b.n	801b782 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b758:	f7f9 f8b2 	bl	80148c0 <HAL_GetTick>
 801b75c:	0003      	movs	r3, r0
 801b75e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b760:	e009      	b.n	801b776 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b762:	f7f9 f8ad 	bl	80148c0 <HAL_GetTick>
 801b766:	0002      	movs	r2, r0
 801b768:	697b      	ldr	r3, [r7, #20]
 801b76a:	1ad3      	subs	r3, r2, r3
 801b76c:	4a47      	ldr	r2, [pc, #284]	@ (801b88c <HAL_RCC_OscConfig+0x69c>)
 801b76e:	4293      	cmp	r3, r2
 801b770:	d901      	bls.n	801b776 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801b772:	2303      	movs	r3, #3
 801b774:	e105      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b776:	4b40      	ldr	r3, [pc, #256]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b778:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b77a:	2380      	movs	r3, #128	@ 0x80
 801b77c:	009b      	lsls	r3, r3, #2
 801b77e:	4013      	ands	r3, r2
 801b780:	d1ef      	bne.n	801b762 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b782:	2323      	movs	r3, #35	@ 0x23
 801b784:	18fb      	adds	r3, r7, r3
 801b786:	781b      	ldrb	r3, [r3, #0]
 801b788:	2b01      	cmp	r3, #1
 801b78a:	d105      	bne.n	801b798 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b78c:	4b3a      	ldr	r3, [pc, #232]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b78e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b790:	4b39      	ldr	r3, [pc, #228]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b792:	493f      	ldr	r1, [pc, #252]	@ (801b890 <HAL_RCC_OscConfig+0x6a0>)
 801b794:	400a      	ands	r2, r1
 801b796:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	2220      	movs	r2, #32
 801b79e:	4013      	ands	r3, r2
 801b7a0:	d049      	beq.n	801b836 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	699b      	ldr	r3, [r3, #24]
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d026      	beq.n	801b7f8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801b7aa:	4b33      	ldr	r3, [pc, #204]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b7ac:	689a      	ldr	r2, [r3, #8]
 801b7ae:	4b32      	ldr	r3, [pc, #200]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b7b0:	2101      	movs	r1, #1
 801b7b2:	430a      	orrs	r2, r1
 801b7b4:	609a      	str	r2, [r3, #8]
 801b7b6:	4b30      	ldr	r3, [pc, #192]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b7b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b7ba:	4b2f      	ldr	r3, [pc, #188]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b7bc:	2101      	movs	r1, #1
 801b7be:	430a      	orrs	r2, r1
 801b7c0:	635a      	str	r2, [r3, #52]	@ 0x34
 801b7c2:	4b34      	ldr	r3, [pc, #208]	@ (801b894 <HAL_RCC_OscConfig+0x6a4>)
 801b7c4:	6a1a      	ldr	r2, [r3, #32]
 801b7c6:	4b33      	ldr	r3, [pc, #204]	@ (801b894 <HAL_RCC_OscConfig+0x6a4>)
 801b7c8:	2180      	movs	r1, #128	@ 0x80
 801b7ca:	0189      	lsls	r1, r1, #6
 801b7cc:	430a      	orrs	r2, r1
 801b7ce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b7d0:	f7f9 f876 	bl	80148c0 <HAL_GetTick>
 801b7d4:	0003      	movs	r3, r0
 801b7d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b7d8:	e008      	b.n	801b7ec <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b7da:	f7f9 f871 	bl	80148c0 <HAL_GetTick>
 801b7de:	0002      	movs	r2, r0
 801b7e0:	697b      	ldr	r3, [r7, #20]
 801b7e2:	1ad3      	subs	r3, r2, r3
 801b7e4:	2b02      	cmp	r3, #2
 801b7e6:	d901      	bls.n	801b7ec <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801b7e8:	2303      	movs	r3, #3
 801b7ea:	e0ca      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b7ec:	4b22      	ldr	r3, [pc, #136]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b7ee:	689b      	ldr	r3, [r3, #8]
 801b7f0:	2202      	movs	r2, #2
 801b7f2:	4013      	ands	r3, r2
 801b7f4:	d0f1      	beq.n	801b7da <HAL_RCC_OscConfig+0x5ea>
 801b7f6:	e01e      	b.n	801b836 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801b7f8:	4b1f      	ldr	r3, [pc, #124]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b7fa:	689a      	ldr	r2, [r3, #8]
 801b7fc:	4b1e      	ldr	r3, [pc, #120]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b7fe:	2101      	movs	r1, #1
 801b800:	438a      	bics	r2, r1
 801b802:	609a      	str	r2, [r3, #8]
 801b804:	4b23      	ldr	r3, [pc, #140]	@ (801b894 <HAL_RCC_OscConfig+0x6a4>)
 801b806:	6a1a      	ldr	r2, [r3, #32]
 801b808:	4b22      	ldr	r3, [pc, #136]	@ (801b894 <HAL_RCC_OscConfig+0x6a4>)
 801b80a:	4923      	ldr	r1, [pc, #140]	@ (801b898 <HAL_RCC_OscConfig+0x6a8>)
 801b80c:	400a      	ands	r2, r1
 801b80e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b810:	f7f9 f856 	bl	80148c0 <HAL_GetTick>
 801b814:	0003      	movs	r3, r0
 801b816:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b818:	e008      	b.n	801b82c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b81a:	f7f9 f851 	bl	80148c0 <HAL_GetTick>
 801b81e:	0002      	movs	r2, r0
 801b820:	697b      	ldr	r3, [r7, #20]
 801b822:	1ad3      	subs	r3, r2, r3
 801b824:	2b02      	cmp	r3, #2
 801b826:	d901      	bls.n	801b82c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801b828:	2303      	movs	r3, #3
 801b82a:	e0aa      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b82c:	4b12      	ldr	r3, [pc, #72]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b82e:	689b      	ldr	r3, [r3, #8]
 801b830:	2202      	movs	r2, #2
 801b832:	4013      	ands	r3, r2
 801b834:	d1f1      	bne.n	801b81a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d100      	bne.n	801b840 <HAL_RCC_OscConfig+0x650>
 801b83e:	e09f      	b.n	801b980 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b840:	69fb      	ldr	r3, [r7, #28]
 801b842:	2b0c      	cmp	r3, #12
 801b844:	d100      	bne.n	801b848 <HAL_RCC_OscConfig+0x658>
 801b846:	e078      	b.n	801b93a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b84c:	2b02      	cmp	r3, #2
 801b84e:	d159      	bne.n	801b904 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b850:	4b09      	ldr	r3, [pc, #36]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b852:	681a      	ldr	r2, [r3, #0]
 801b854:	4b08      	ldr	r3, [pc, #32]	@ (801b878 <HAL_RCC_OscConfig+0x688>)
 801b856:	4911      	ldr	r1, [pc, #68]	@ (801b89c <HAL_RCC_OscConfig+0x6ac>)
 801b858:	400a      	ands	r2, r1
 801b85a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b85c:	f7f9 f830 	bl	80148c0 <HAL_GetTick>
 801b860:	0003      	movs	r3, r0
 801b862:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b864:	e01c      	b.n	801b8a0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b866:	f7f9 f82b 	bl	80148c0 <HAL_GetTick>
 801b86a:	0002      	movs	r2, r0
 801b86c:	697b      	ldr	r3, [r7, #20]
 801b86e:	1ad3      	subs	r3, r2, r3
 801b870:	2b02      	cmp	r3, #2
 801b872:	d915      	bls.n	801b8a0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801b874:	2303      	movs	r3, #3
 801b876:	e084      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
 801b878:	40021000 	.word	0x40021000
 801b87c:	ffff1fff 	.word	0xffff1fff
 801b880:	fffffeff 	.word	0xfffffeff
 801b884:	40007000 	.word	0x40007000
 801b888:	fffffbff 	.word	0xfffffbff
 801b88c:	00001388 	.word	0x00001388
 801b890:	efffffff 	.word	0xefffffff
 801b894:	40010000 	.word	0x40010000
 801b898:	ffffdfff 	.word	0xffffdfff
 801b89c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b8a0:	4b3a      	ldr	r3, [pc, #232]	@ (801b98c <HAL_RCC_OscConfig+0x79c>)
 801b8a2:	681a      	ldr	r2, [r3, #0]
 801b8a4:	2380      	movs	r3, #128	@ 0x80
 801b8a6:	049b      	lsls	r3, r3, #18
 801b8a8:	4013      	ands	r3, r2
 801b8aa:	d1dc      	bne.n	801b866 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b8ac:	4b37      	ldr	r3, [pc, #220]	@ (801b98c <HAL_RCC_OscConfig+0x79c>)
 801b8ae:	68db      	ldr	r3, [r3, #12]
 801b8b0:	4a37      	ldr	r2, [pc, #220]	@ (801b990 <HAL_RCC_OscConfig+0x7a0>)
 801b8b2:	4013      	ands	r3, r2
 801b8b4:	0019      	movs	r1, r3
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b8be:	431a      	orrs	r2, r3
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b8c4:	431a      	orrs	r2, r3
 801b8c6:	4b31      	ldr	r3, [pc, #196]	@ (801b98c <HAL_RCC_OscConfig+0x79c>)
 801b8c8:	430a      	orrs	r2, r1
 801b8ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b8cc:	4b2f      	ldr	r3, [pc, #188]	@ (801b98c <HAL_RCC_OscConfig+0x79c>)
 801b8ce:	681a      	ldr	r2, [r3, #0]
 801b8d0:	4b2e      	ldr	r3, [pc, #184]	@ (801b98c <HAL_RCC_OscConfig+0x79c>)
 801b8d2:	2180      	movs	r1, #128	@ 0x80
 801b8d4:	0449      	lsls	r1, r1, #17
 801b8d6:	430a      	orrs	r2, r1
 801b8d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8da:	f7f8 fff1 	bl	80148c0 <HAL_GetTick>
 801b8de:	0003      	movs	r3, r0
 801b8e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b8e2:	e008      	b.n	801b8f6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b8e4:	f7f8 ffec 	bl	80148c0 <HAL_GetTick>
 801b8e8:	0002      	movs	r2, r0
 801b8ea:	697b      	ldr	r3, [r7, #20]
 801b8ec:	1ad3      	subs	r3, r2, r3
 801b8ee:	2b02      	cmp	r3, #2
 801b8f0:	d901      	bls.n	801b8f6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801b8f2:	2303      	movs	r3, #3
 801b8f4:	e045      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b8f6:	4b25      	ldr	r3, [pc, #148]	@ (801b98c <HAL_RCC_OscConfig+0x79c>)
 801b8f8:	681a      	ldr	r2, [r3, #0]
 801b8fa:	2380      	movs	r3, #128	@ 0x80
 801b8fc:	049b      	lsls	r3, r3, #18
 801b8fe:	4013      	ands	r3, r2
 801b900:	d0f0      	beq.n	801b8e4 <HAL_RCC_OscConfig+0x6f4>
 801b902:	e03d      	b.n	801b980 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b904:	4b21      	ldr	r3, [pc, #132]	@ (801b98c <HAL_RCC_OscConfig+0x79c>)
 801b906:	681a      	ldr	r2, [r3, #0]
 801b908:	4b20      	ldr	r3, [pc, #128]	@ (801b98c <HAL_RCC_OscConfig+0x79c>)
 801b90a:	4922      	ldr	r1, [pc, #136]	@ (801b994 <HAL_RCC_OscConfig+0x7a4>)
 801b90c:	400a      	ands	r2, r1
 801b90e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b910:	f7f8 ffd6 	bl	80148c0 <HAL_GetTick>
 801b914:	0003      	movs	r3, r0
 801b916:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b918:	e008      	b.n	801b92c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b91a:	f7f8 ffd1 	bl	80148c0 <HAL_GetTick>
 801b91e:	0002      	movs	r2, r0
 801b920:	697b      	ldr	r3, [r7, #20]
 801b922:	1ad3      	subs	r3, r2, r3
 801b924:	2b02      	cmp	r3, #2
 801b926:	d901      	bls.n	801b92c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801b928:	2303      	movs	r3, #3
 801b92a:	e02a      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b92c:	4b17      	ldr	r3, [pc, #92]	@ (801b98c <HAL_RCC_OscConfig+0x79c>)
 801b92e:	681a      	ldr	r2, [r3, #0]
 801b930:	2380      	movs	r3, #128	@ 0x80
 801b932:	049b      	lsls	r3, r3, #18
 801b934:	4013      	ands	r3, r2
 801b936:	d1f0      	bne.n	801b91a <HAL_RCC_OscConfig+0x72a>
 801b938:	e022      	b.n	801b980 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b93e:	2b01      	cmp	r3, #1
 801b940:	d101      	bne.n	801b946 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801b942:	2301      	movs	r3, #1
 801b944:	e01d      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801b946:	4b11      	ldr	r3, [pc, #68]	@ (801b98c <HAL_RCC_OscConfig+0x79c>)
 801b948:	68db      	ldr	r3, [r3, #12]
 801b94a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b94c:	69ba      	ldr	r2, [r7, #24]
 801b94e:	2380      	movs	r3, #128	@ 0x80
 801b950:	025b      	lsls	r3, r3, #9
 801b952:	401a      	ands	r2, r3
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b958:	429a      	cmp	r2, r3
 801b95a:	d10f      	bne.n	801b97c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b95c:	69ba      	ldr	r2, [r7, #24]
 801b95e:	23f0      	movs	r3, #240	@ 0xf0
 801b960:	039b      	lsls	r3, r3, #14
 801b962:	401a      	ands	r2, r3
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b968:	429a      	cmp	r2, r3
 801b96a:	d107      	bne.n	801b97c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801b96c:	69ba      	ldr	r2, [r7, #24]
 801b96e:	23c0      	movs	r3, #192	@ 0xc0
 801b970:	041b      	lsls	r3, r3, #16
 801b972:	401a      	ands	r2, r3
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b978:	429a      	cmp	r2, r3
 801b97a:	d001      	beq.n	801b980 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801b97c:	2301      	movs	r3, #1
 801b97e:	e000      	b.n	801b982 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801b980:	2300      	movs	r3, #0
}
 801b982:	0018      	movs	r0, r3
 801b984:	46bd      	mov	sp, r7
 801b986:	b00a      	add	sp, #40	@ 0x28
 801b988:	bdb0      	pop	{r4, r5, r7, pc}
 801b98a:	46c0      	nop			@ (mov r8, r8)
 801b98c:	40021000 	.word	0x40021000
 801b990:	ff02ffff 	.word	0xff02ffff
 801b994:	feffffff 	.word	0xfeffffff

0801b998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b998:	b5b0      	push	{r4, r5, r7, lr}
 801b99a:	b084      	sub	sp, #16
 801b99c:	af00      	add	r7, sp, #0
 801b99e:	6078      	str	r0, [r7, #4]
 801b9a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d101      	bne.n	801b9ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b9a8:	2301      	movs	r3, #1
 801b9aa:	e128      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b9ac:	4b96      	ldr	r3, [pc, #600]	@ (801bc08 <HAL_RCC_ClockConfig+0x270>)
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	2201      	movs	r2, #1
 801b9b2:	4013      	ands	r3, r2
 801b9b4:	683a      	ldr	r2, [r7, #0]
 801b9b6:	429a      	cmp	r2, r3
 801b9b8:	d91e      	bls.n	801b9f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b9ba:	4b93      	ldr	r3, [pc, #588]	@ (801bc08 <HAL_RCC_ClockConfig+0x270>)
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	2201      	movs	r2, #1
 801b9c0:	4393      	bics	r3, r2
 801b9c2:	0019      	movs	r1, r3
 801b9c4:	4b90      	ldr	r3, [pc, #576]	@ (801bc08 <HAL_RCC_ClockConfig+0x270>)
 801b9c6:	683a      	ldr	r2, [r7, #0]
 801b9c8:	430a      	orrs	r2, r1
 801b9ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b9cc:	f7f8 ff78 	bl	80148c0 <HAL_GetTick>
 801b9d0:	0003      	movs	r3, r0
 801b9d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b9d4:	e009      	b.n	801b9ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b9d6:	f7f8 ff73 	bl	80148c0 <HAL_GetTick>
 801b9da:	0002      	movs	r2, r0
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	1ad3      	subs	r3, r2, r3
 801b9e0:	4a8a      	ldr	r2, [pc, #552]	@ (801bc0c <HAL_RCC_ClockConfig+0x274>)
 801b9e2:	4293      	cmp	r3, r2
 801b9e4:	d901      	bls.n	801b9ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801b9e6:	2303      	movs	r3, #3
 801b9e8:	e109      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b9ea:	4b87      	ldr	r3, [pc, #540]	@ (801bc08 <HAL_RCC_ClockConfig+0x270>)
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	2201      	movs	r2, #1
 801b9f0:	4013      	ands	r3, r2
 801b9f2:	683a      	ldr	r2, [r7, #0]
 801b9f4:	429a      	cmp	r2, r3
 801b9f6:	d1ee      	bne.n	801b9d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	2202      	movs	r2, #2
 801b9fe:	4013      	ands	r3, r2
 801ba00:	d009      	beq.n	801ba16 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ba02:	4b83      	ldr	r3, [pc, #524]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801ba04:	68db      	ldr	r3, [r3, #12]
 801ba06:	22f0      	movs	r2, #240	@ 0xf0
 801ba08:	4393      	bics	r3, r2
 801ba0a:	0019      	movs	r1, r3
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	689a      	ldr	r2, [r3, #8]
 801ba10:	4b7f      	ldr	r3, [pc, #508]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801ba12:	430a      	orrs	r2, r1
 801ba14:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	2201      	movs	r2, #1
 801ba1c:	4013      	ands	r3, r2
 801ba1e:	d100      	bne.n	801ba22 <HAL_RCC_ClockConfig+0x8a>
 801ba20:	e089      	b.n	801bb36 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	685b      	ldr	r3, [r3, #4]
 801ba26:	2b02      	cmp	r3, #2
 801ba28:	d107      	bne.n	801ba3a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ba2a:	4b79      	ldr	r3, [pc, #484]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801ba2c:	681a      	ldr	r2, [r3, #0]
 801ba2e:	2380      	movs	r3, #128	@ 0x80
 801ba30:	029b      	lsls	r3, r3, #10
 801ba32:	4013      	ands	r3, r2
 801ba34:	d120      	bne.n	801ba78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba36:	2301      	movs	r3, #1
 801ba38:	e0e1      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	685b      	ldr	r3, [r3, #4]
 801ba3e:	2b03      	cmp	r3, #3
 801ba40:	d107      	bne.n	801ba52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ba42:	4b73      	ldr	r3, [pc, #460]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801ba44:	681a      	ldr	r2, [r3, #0]
 801ba46:	2380      	movs	r3, #128	@ 0x80
 801ba48:	049b      	lsls	r3, r3, #18
 801ba4a:	4013      	ands	r3, r2
 801ba4c:	d114      	bne.n	801ba78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba4e:	2301      	movs	r3, #1
 801ba50:	e0d5      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	685b      	ldr	r3, [r3, #4]
 801ba56:	2b01      	cmp	r3, #1
 801ba58:	d106      	bne.n	801ba68 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ba5a:	4b6d      	ldr	r3, [pc, #436]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801ba5c:	681b      	ldr	r3, [r3, #0]
 801ba5e:	2204      	movs	r2, #4
 801ba60:	4013      	ands	r3, r2
 801ba62:	d109      	bne.n	801ba78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba64:	2301      	movs	r3, #1
 801ba66:	e0ca      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801ba68:	4b69      	ldr	r3, [pc, #420]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801ba6a:	681a      	ldr	r2, [r3, #0]
 801ba6c:	2380      	movs	r3, #128	@ 0x80
 801ba6e:	009b      	lsls	r3, r3, #2
 801ba70:	4013      	ands	r3, r2
 801ba72:	d101      	bne.n	801ba78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ba74:	2301      	movs	r3, #1
 801ba76:	e0c2      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801ba78:	4b65      	ldr	r3, [pc, #404]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801ba7a:	68db      	ldr	r3, [r3, #12]
 801ba7c:	2203      	movs	r2, #3
 801ba7e:	4393      	bics	r3, r2
 801ba80:	0019      	movs	r1, r3
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	685a      	ldr	r2, [r3, #4]
 801ba86:	4b62      	ldr	r3, [pc, #392]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801ba88:	430a      	orrs	r2, r1
 801ba8a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801ba8c:	f7f8 ff18 	bl	80148c0 <HAL_GetTick>
 801ba90:	0003      	movs	r3, r0
 801ba92:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	685b      	ldr	r3, [r3, #4]
 801ba98:	2b02      	cmp	r3, #2
 801ba9a:	d111      	bne.n	801bac0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801ba9c:	e009      	b.n	801bab2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ba9e:	f7f8 ff0f 	bl	80148c0 <HAL_GetTick>
 801baa2:	0002      	movs	r2, r0
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	1ad3      	subs	r3, r2, r3
 801baa8:	4a58      	ldr	r2, [pc, #352]	@ (801bc0c <HAL_RCC_ClockConfig+0x274>)
 801baaa:	4293      	cmp	r3, r2
 801baac:	d901      	bls.n	801bab2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801baae:	2303      	movs	r3, #3
 801bab0:	e0a5      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bab2:	4b57      	ldr	r3, [pc, #348]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801bab4:	68db      	ldr	r3, [r3, #12]
 801bab6:	220c      	movs	r2, #12
 801bab8:	4013      	ands	r3, r2
 801baba:	2b08      	cmp	r3, #8
 801babc:	d1ef      	bne.n	801ba9e <HAL_RCC_ClockConfig+0x106>
 801babe:	e03a      	b.n	801bb36 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	685b      	ldr	r3, [r3, #4]
 801bac4:	2b03      	cmp	r3, #3
 801bac6:	d111      	bne.n	801baec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bac8:	e009      	b.n	801bade <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801baca:	f7f8 fef9 	bl	80148c0 <HAL_GetTick>
 801bace:	0002      	movs	r2, r0
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	1ad3      	subs	r3, r2, r3
 801bad4:	4a4d      	ldr	r2, [pc, #308]	@ (801bc0c <HAL_RCC_ClockConfig+0x274>)
 801bad6:	4293      	cmp	r3, r2
 801bad8:	d901      	bls.n	801bade <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801bada:	2303      	movs	r3, #3
 801badc:	e08f      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bade:	4b4c      	ldr	r3, [pc, #304]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801bae0:	68db      	ldr	r3, [r3, #12]
 801bae2:	220c      	movs	r2, #12
 801bae4:	4013      	ands	r3, r2
 801bae6:	2b0c      	cmp	r3, #12
 801bae8:	d1ef      	bne.n	801baca <HAL_RCC_ClockConfig+0x132>
 801baea:	e024      	b.n	801bb36 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	685b      	ldr	r3, [r3, #4]
 801baf0:	2b01      	cmp	r3, #1
 801baf2:	d11b      	bne.n	801bb2c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801baf4:	e009      	b.n	801bb0a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801baf6:	f7f8 fee3 	bl	80148c0 <HAL_GetTick>
 801bafa:	0002      	movs	r2, r0
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	1ad3      	subs	r3, r2, r3
 801bb00:	4a42      	ldr	r2, [pc, #264]	@ (801bc0c <HAL_RCC_ClockConfig+0x274>)
 801bb02:	4293      	cmp	r3, r2
 801bb04:	d901      	bls.n	801bb0a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801bb06:	2303      	movs	r3, #3
 801bb08:	e079      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bb0a:	4b41      	ldr	r3, [pc, #260]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801bb0c:	68db      	ldr	r3, [r3, #12]
 801bb0e:	220c      	movs	r2, #12
 801bb10:	4013      	ands	r3, r2
 801bb12:	2b04      	cmp	r3, #4
 801bb14:	d1ef      	bne.n	801baf6 <HAL_RCC_ClockConfig+0x15e>
 801bb16:	e00e      	b.n	801bb36 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb18:	f7f8 fed2 	bl	80148c0 <HAL_GetTick>
 801bb1c:	0002      	movs	r2, r0
 801bb1e:	68fb      	ldr	r3, [r7, #12]
 801bb20:	1ad3      	subs	r3, r2, r3
 801bb22:	4a3a      	ldr	r2, [pc, #232]	@ (801bc0c <HAL_RCC_ClockConfig+0x274>)
 801bb24:	4293      	cmp	r3, r2
 801bb26:	d901      	bls.n	801bb2c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801bb28:	2303      	movs	r3, #3
 801bb2a:	e068      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801bb2c:	4b38      	ldr	r3, [pc, #224]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801bb2e:	68db      	ldr	r3, [r3, #12]
 801bb30:	220c      	movs	r2, #12
 801bb32:	4013      	ands	r3, r2
 801bb34:	d1f0      	bne.n	801bb18 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801bb36:	4b34      	ldr	r3, [pc, #208]	@ (801bc08 <HAL_RCC_ClockConfig+0x270>)
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	2201      	movs	r2, #1
 801bb3c:	4013      	ands	r3, r2
 801bb3e:	683a      	ldr	r2, [r7, #0]
 801bb40:	429a      	cmp	r2, r3
 801bb42:	d21e      	bcs.n	801bb82 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bb44:	4b30      	ldr	r3, [pc, #192]	@ (801bc08 <HAL_RCC_ClockConfig+0x270>)
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	2201      	movs	r2, #1
 801bb4a:	4393      	bics	r3, r2
 801bb4c:	0019      	movs	r1, r3
 801bb4e:	4b2e      	ldr	r3, [pc, #184]	@ (801bc08 <HAL_RCC_ClockConfig+0x270>)
 801bb50:	683a      	ldr	r2, [r7, #0]
 801bb52:	430a      	orrs	r2, r1
 801bb54:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801bb56:	f7f8 feb3 	bl	80148c0 <HAL_GetTick>
 801bb5a:	0003      	movs	r3, r0
 801bb5c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bb5e:	e009      	b.n	801bb74 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb60:	f7f8 feae 	bl	80148c0 <HAL_GetTick>
 801bb64:	0002      	movs	r2, r0
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	1ad3      	subs	r3, r2, r3
 801bb6a:	4a28      	ldr	r2, [pc, #160]	@ (801bc0c <HAL_RCC_ClockConfig+0x274>)
 801bb6c:	4293      	cmp	r3, r2
 801bb6e:	d901      	bls.n	801bb74 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801bb70:	2303      	movs	r3, #3
 801bb72:	e044      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bb74:	4b24      	ldr	r3, [pc, #144]	@ (801bc08 <HAL_RCC_ClockConfig+0x270>)
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	2201      	movs	r2, #1
 801bb7a:	4013      	ands	r3, r2
 801bb7c:	683a      	ldr	r2, [r7, #0]
 801bb7e:	429a      	cmp	r2, r3
 801bb80:	d1ee      	bne.n	801bb60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	2204      	movs	r2, #4
 801bb88:	4013      	ands	r3, r2
 801bb8a:	d009      	beq.n	801bba0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bb8c:	4b20      	ldr	r3, [pc, #128]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801bb8e:	68db      	ldr	r3, [r3, #12]
 801bb90:	4a20      	ldr	r2, [pc, #128]	@ (801bc14 <HAL_RCC_ClockConfig+0x27c>)
 801bb92:	4013      	ands	r3, r2
 801bb94:	0019      	movs	r1, r3
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	68da      	ldr	r2, [r3, #12]
 801bb9a:	4b1d      	ldr	r3, [pc, #116]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801bb9c:	430a      	orrs	r2, r1
 801bb9e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	681b      	ldr	r3, [r3, #0]
 801bba4:	2208      	movs	r2, #8
 801bba6:	4013      	ands	r3, r2
 801bba8:	d00a      	beq.n	801bbc0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801bbaa:	4b19      	ldr	r3, [pc, #100]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801bbac:	68db      	ldr	r3, [r3, #12]
 801bbae:	4a1a      	ldr	r2, [pc, #104]	@ (801bc18 <HAL_RCC_ClockConfig+0x280>)
 801bbb0:	4013      	ands	r3, r2
 801bbb2:	0019      	movs	r1, r3
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	691b      	ldr	r3, [r3, #16]
 801bbb8:	00da      	lsls	r2, r3, #3
 801bbba:	4b15      	ldr	r3, [pc, #84]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801bbbc:	430a      	orrs	r2, r1
 801bbbe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801bbc0:	f000 f832 	bl	801bc28 <HAL_RCC_GetSysClockFreq>
 801bbc4:	0001      	movs	r1, r0
 801bbc6:	4b12      	ldr	r3, [pc, #72]	@ (801bc10 <HAL_RCC_ClockConfig+0x278>)
 801bbc8:	68db      	ldr	r3, [r3, #12]
 801bbca:	091b      	lsrs	r3, r3, #4
 801bbcc:	220f      	movs	r2, #15
 801bbce:	4013      	ands	r3, r2
 801bbd0:	4a12      	ldr	r2, [pc, #72]	@ (801bc1c <HAL_RCC_ClockConfig+0x284>)
 801bbd2:	5cd3      	ldrb	r3, [r2, r3]
 801bbd4:	000a      	movs	r2, r1
 801bbd6:	40da      	lsrs	r2, r3
 801bbd8:	4b11      	ldr	r3, [pc, #68]	@ (801bc20 <HAL_RCC_ClockConfig+0x288>)
 801bbda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801bbdc:	4b11      	ldr	r3, [pc, #68]	@ (801bc24 <HAL_RCC_ClockConfig+0x28c>)
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	250b      	movs	r5, #11
 801bbe2:	197c      	adds	r4, r7, r5
 801bbe4:	0018      	movs	r0, r3
 801bbe6:	f7f8 fe25 	bl	8014834 <HAL_InitTick>
 801bbea:	0003      	movs	r3, r0
 801bbec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801bbee:	197b      	adds	r3, r7, r5
 801bbf0:	781b      	ldrb	r3, [r3, #0]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d002      	beq.n	801bbfc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801bbf6:	197b      	adds	r3, r7, r5
 801bbf8:	781b      	ldrb	r3, [r3, #0]
 801bbfa:	e000      	b.n	801bbfe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801bbfc:	2300      	movs	r3, #0
}
 801bbfe:	0018      	movs	r0, r3
 801bc00:	46bd      	mov	sp, r7
 801bc02:	b004      	add	sp, #16
 801bc04:	bdb0      	pop	{r4, r5, r7, pc}
 801bc06:	46c0      	nop			@ (mov r8, r8)
 801bc08:	40022000 	.word	0x40022000
 801bc0c:	00001388 	.word	0x00001388
 801bc10:	40021000 	.word	0x40021000
 801bc14:	fffff8ff 	.word	0xfffff8ff
 801bc18:	ffffc7ff 	.word	0xffffc7ff
 801bc1c:	0802e420 	.word	0x0802e420
 801bc20:	200000ec 	.word	0x200000ec
 801bc24:	200000fc 	.word	0x200000fc

0801bc28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bc28:	b5b0      	push	{r4, r5, r7, lr}
 801bc2a:	b08e      	sub	sp, #56	@ 0x38
 801bc2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801bc2e:	4b4c      	ldr	r3, [pc, #304]	@ (801bd60 <HAL_RCC_GetSysClockFreq+0x138>)
 801bc30:	68db      	ldr	r3, [r3, #12]
 801bc32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801bc34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bc36:	230c      	movs	r3, #12
 801bc38:	4013      	ands	r3, r2
 801bc3a:	2b0c      	cmp	r3, #12
 801bc3c:	d014      	beq.n	801bc68 <HAL_RCC_GetSysClockFreq+0x40>
 801bc3e:	d900      	bls.n	801bc42 <HAL_RCC_GetSysClockFreq+0x1a>
 801bc40:	e07b      	b.n	801bd3a <HAL_RCC_GetSysClockFreq+0x112>
 801bc42:	2b04      	cmp	r3, #4
 801bc44:	d002      	beq.n	801bc4c <HAL_RCC_GetSysClockFreq+0x24>
 801bc46:	2b08      	cmp	r3, #8
 801bc48:	d00b      	beq.n	801bc62 <HAL_RCC_GetSysClockFreq+0x3a>
 801bc4a:	e076      	b.n	801bd3a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bc4c:	4b44      	ldr	r3, [pc, #272]	@ (801bd60 <HAL_RCC_GetSysClockFreq+0x138>)
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	2210      	movs	r2, #16
 801bc52:	4013      	ands	r3, r2
 801bc54:	d002      	beq.n	801bc5c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801bc56:	4b43      	ldr	r3, [pc, #268]	@ (801bd64 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bc58:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801bc5a:	e07c      	b.n	801bd56 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801bc5c:	4b42      	ldr	r3, [pc, #264]	@ (801bd68 <HAL_RCC_GetSysClockFreq+0x140>)
 801bc5e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bc60:	e079      	b.n	801bd56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801bc62:	4b42      	ldr	r3, [pc, #264]	@ (801bd6c <HAL_RCC_GetSysClockFreq+0x144>)
 801bc64:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bc66:	e076      	b.n	801bd56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801bc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc6a:	0c9a      	lsrs	r2, r3, #18
 801bc6c:	230f      	movs	r3, #15
 801bc6e:	401a      	ands	r2, r3
 801bc70:	4b3f      	ldr	r3, [pc, #252]	@ (801bd70 <HAL_RCC_GetSysClockFreq+0x148>)
 801bc72:	5c9b      	ldrb	r3, [r3, r2]
 801bc74:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801bc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc78:	0d9a      	lsrs	r2, r3, #22
 801bc7a:	2303      	movs	r3, #3
 801bc7c:	4013      	ands	r3, r2
 801bc7e:	3301      	adds	r3, #1
 801bc80:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bc82:	4b37      	ldr	r3, [pc, #220]	@ (801bd60 <HAL_RCC_GetSysClockFreq+0x138>)
 801bc84:	68da      	ldr	r2, [r3, #12]
 801bc86:	2380      	movs	r3, #128	@ 0x80
 801bc88:	025b      	lsls	r3, r3, #9
 801bc8a:	4013      	ands	r3, r2
 801bc8c:	d01a      	beq.n	801bcc4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc90:	61bb      	str	r3, [r7, #24]
 801bc92:	2300      	movs	r3, #0
 801bc94:	61fb      	str	r3, [r7, #28]
 801bc96:	4a35      	ldr	r2, [pc, #212]	@ (801bd6c <HAL_RCC_GetSysClockFreq+0x144>)
 801bc98:	2300      	movs	r3, #0
 801bc9a:	69b8      	ldr	r0, [r7, #24]
 801bc9c:	69f9      	ldr	r1, [r7, #28]
 801bc9e:	f7e4 fc8f 	bl	80005c0 <__aeabi_lmul>
 801bca2:	0002      	movs	r2, r0
 801bca4:	000b      	movs	r3, r1
 801bca6:	0010      	movs	r0, r2
 801bca8:	0019      	movs	r1, r3
 801bcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcac:	613b      	str	r3, [r7, #16]
 801bcae:	2300      	movs	r3, #0
 801bcb0:	617b      	str	r3, [r7, #20]
 801bcb2:	693a      	ldr	r2, [r7, #16]
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	f7e4 fc63 	bl	8000580 <__aeabi_uldivmod>
 801bcba:	0002      	movs	r2, r0
 801bcbc:	000b      	movs	r3, r1
 801bcbe:	0013      	movs	r3, r2
 801bcc0:	637b      	str	r3, [r7, #52]	@ 0x34
 801bcc2:	e037      	b.n	801bd34 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bcc4:	4b26      	ldr	r3, [pc, #152]	@ (801bd60 <HAL_RCC_GetSysClockFreq+0x138>)
 801bcc6:	681b      	ldr	r3, [r3, #0]
 801bcc8:	2210      	movs	r2, #16
 801bcca:	4013      	ands	r3, r2
 801bccc:	d01a      	beq.n	801bd04 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801bcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcd0:	60bb      	str	r3, [r7, #8]
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	60fb      	str	r3, [r7, #12]
 801bcd6:	4a23      	ldr	r2, [pc, #140]	@ (801bd64 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bcd8:	2300      	movs	r3, #0
 801bcda:	68b8      	ldr	r0, [r7, #8]
 801bcdc:	68f9      	ldr	r1, [r7, #12]
 801bcde:	f7e4 fc6f 	bl	80005c0 <__aeabi_lmul>
 801bce2:	0002      	movs	r2, r0
 801bce4:	000b      	movs	r3, r1
 801bce6:	0010      	movs	r0, r2
 801bce8:	0019      	movs	r1, r3
 801bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcec:	603b      	str	r3, [r7, #0]
 801bcee:	2300      	movs	r3, #0
 801bcf0:	607b      	str	r3, [r7, #4]
 801bcf2:	683a      	ldr	r2, [r7, #0]
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	f7e4 fc43 	bl	8000580 <__aeabi_uldivmod>
 801bcfa:	0002      	movs	r2, r0
 801bcfc:	000b      	movs	r3, r1
 801bcfe:	0013      	movs	r3, r2
 801bd00:	637b      	str	r3, [r7, #52]	@ 0x34
 801bd02:	e017      	b.n	801bd34 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd06:	0018      	movs	r0, r3
 801bd08:	2300      	movs	r3, #0
 801bd0a:	0019      	movs	r1, r3
 801bd0c:	4a16      	ldr	r2, [pc, #88]	@ (801bd68 <HAL_RCC_GetSysClockFreq+0x140>)
 801bd0e:	2300      	movs	r3, #0
 801bd10:	f7e4 fc56 	bl	80005c0 <__aeabi_lmul>
 801bd14:	0002      	movs	r2, r0
 801bd16:	000b      	movs	r3, r1
 801bd18:	0010      	movs	r0, r2
 801bd1a:	0019      	movs	r1, r3
 801bd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd1e:	001c      	movs	r4, r3
 801bd20:	2300      	movs	r3, #0
 801bd22:	001d      	movs	r5, r3
 801bd24:	0022      	movs	r2, r4
 801bd26:	002b      	movs	r3, r5
 801bd28:	f7e4 fc2a 	bl	8000580 <__aeabi_uldivmod>
 801bd2c:	0002      	movs	r2, r0
 801bd2e:	000b      	movs	r3, r1
 801bd30:	0013      	movs	r3, r2
 801bd32:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801bd34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd36:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bd38:	e00d      	b.n	801bd56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801bd3a:	4b09      	ldr	r3, [pc, #36]	@ (801bd60 <HAL_RCC_GetSysClockFreq+0x138>)
 801bd3c:	685b      	ldr	r3, [r3, #4]
 801bd3e:	0b5b      	lsrs	r3, r3, #13
 801bd40:	2207      	movs	r2, #7
 801bd42:	4013      	ands	r3, r2
 801bd44:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801bd46:	6a3b      	ldr	r3, [r7, #32]
 801bd48:	3301      	adds	r3, #1
 801bd4a:	2280      	movs	r2, #128	@ 0x80
 801bd4c:	0212      	lsls	r2, r2, #8
 801bd4e:	409a      	lsls	r2, r3
 801bd50:	0013      	movs	r3, r2
 801bd52:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bd54:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801bd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801bd58:	0018      	movs	r0, r3
 801bd5a:	46bd      	mov	sp, r7
 801bd5c:	b00e      	add	sp, #56	@ 0x38
 801bd5e:	bdb0      	pop	{r4, r5, r7, pc}
 801bd60:	40021000 	.word	0x40021000
 801bd64:	003d0900 	.word	0x003d0900
 801bd68:	00f42400 	.word	0x00f42400
 801bd6c:	007a1200 	.word	0x007a1200
 801bd70:	0802e438 	.word	0x0802e438

0801bd74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bd74:	b580      	push	{r7, lr}
 801bd76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801bd78:	4b02      	ldr	r3, [pc, #8]	@ (801bd84 <HAL_RCC_GetHCLKFreq+0x10>)
 801bd7a:	681b      	ldr	r3, [r3, #0]
}
 801bd7c:	0018      	movs	r0, r3
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	bd80      	pop	{r7, pc}
 801bd82:	46c0      	nop			@ (mov r8, r8)
 801bd84:	200000ec 	.word	0x200000ec

0801bd88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bd88:	b580      	push	{r7, lr}
 801bd8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801bd8c:	f7ff fff2 	bl	801bd74 <HAL_RCC_GetHCLKFreq>
 801bd90:	0001      	movs	r1, r0
 801bd92:	4b06      	ldr	r3, [pc, #24]	@ (801bdac <HAL_RCC_GetPCLK1Freq+0x24>)
 801bd94:	68db      	ldr	r3, [r3, #12]
 801bd96:	0a1b      	lsrs	r3, r3, #8
 801bd98:	2207      	movs	r2, #7
 801bd9a:	4013      	ands	r3, r2
 801bd9c:	4a04      	ldr	r2, [pc, #16]	@ (801bdb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801bd9e:	5cd3      	ldrb	r3, [r2, r3]
 801bda0:	40d9      	lsrs	r1, r3
 801bda2:	000b      	movs	r3, r1
}
 801bda4:	0018      	movs	r0, r3
 801bda6:	46bd      	mov	sp, r7
 801bda8:	bd80      	pop	{r7, pc}
 801bdaa:	46c0      	nop			@ (mov r8, r8)
 801bdac:	40021000 	.word	0x40021000
 801bdb0:	0802e430 	.word	0x0802e430

0801bdb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801bdb8:	f7ff ffdc 	bl	801bd74 <HAL_RCC_GetHCLKFreq>
 801bdbc:	0001      	movs	r1, r0
 801bdbe:	4b06      	ldr	r3, [pc, #24]	@ (801bdd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 801bdc0:	68db      	ldr	r3, [r3, #12]
 801bdc2:	0adb      	lsrs	r3, r3, #11
 801bdc4:	2207      	movs	r2, #7
 801bdc6:	4013      	ands	r3, r2
 801bdc8:	4a04      	ldr	r2, [pc, #16]	@ (801bddc <HAL_RCC_GetPCLK2Freq+0x28>)
 801bdca:	5cd3      	ldrb	r3, [r2, r3]
 801bdcc:	40d9      	lsrs	r1, r3
 801bdce:	000b      	movs	r3, r1
}
 801bdd0:	0018      	movs	r0, r3
 801bdd2:	46bd      	mov	sp, r7
 801bdd4:	bd80      	pop	{r7, pc}
 801bdd6:	46c0      	nop			@ (mov r8, r8)
 801bdd8:	40021000 	.word	0x40021000
 801bddc:	0802e430 	.word	0x0802e430

0801bde0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bde0:	b580      	push	{r7, lr}
 801bde2:	b086      	sub	sp, #24
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801bde8:	2017      	movs	r0, #23
 801bdea:	183b      	adds	r3, r7, r0
 801bdec:	2200      	movs	r2, #0
 801bdee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	2220      	movs	r2, #32
 801bdf6:	4013      	ands	r3, r2
 801bdf8:	d100      	bne.n	801bdfc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801bdfa:	e0c7      	b.n	801bf8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bdfc:	4b9b      	ldr	r3, [pc, #620]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bdfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801be00:	2380      	movs	r3, #128	@ 0x80
 801be02:	055b      	lsls	r3, r3, #21
 801be04:	4013      	ands	r3, r2
 801be06:	d109      	bne.n	801be1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801be08:	4b98      	ldr	r3, [pc, #608]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801be0c:	4b97      	ldr	r3, [pc, #604]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be0e:	2180      	movs	r1, #128	@ 0x80
 801be10:	0549      	lsls	r1, r1, #21
 801be12:	430a      	orrs	r2, r1
 801be14:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801be16:	183b      	adds	r3, r7, r0
 801be18:	2201      	movs	r2, #1
 801be1a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be1c:	4b94      	ldr	r3, [pc, #592]	@ (801c070 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be1e:	681a      	ldr	r2, [r3, #0]
 801be20:	2380      	movs	r3, #128	@ 0x80
 801be22:	005b      	lsls	r3, r3, #1
 801be24:	4013      	ands	r3, r2
 801be26:	d11a      	bne.n	801be5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801be28:	4b91      	ldr	r3, [pc, #580]	@ (801c070 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be2a:	681a      	ldr	r2, [r3, #0]
 801be2c:	4b90      	ldr	r3, [pc, #576]	@ (801c070 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be2e:	2180      	movs	r1, #128	@ 0x80
 801be30:	0049      	lsls	r1, r1, #1
 801be32:	430a      	orrs	r2, r1
 801be34:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801be36:	f7f8 fd43 	bl	80148c0 <HAL_GetTick>
 801be3a:	0003      	movs	r3, r0
 801be3c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be3e:	e008      	b.n	801be52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801be40:	f7f8 fd3e 	bl	80148c0 <HAL_GetTick>
 801be44:	0002      	movs	r2, r0
 801be46:	693b      	ldr	r3, [r7, #16]
 801be48:	1ad3      	subs	r3, r2, r3
 801be4a:	2b64      	cmp	r3, #100	@ 0x64
 801be4c:	d901      	bls.n	801be52 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801be4e:	2303      	movs	r3, #3
 801be50:	e107      	b.n	801c062 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be52:	4b87      	ldr	r3, [pc, #540]	@ (801c070 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801be54:	681a      	ldr	r2, [r3, #0]
 801be56:	2380      	movs	r3, #128	@ 0x80
 801be58:	005b      	lsls	r3, r3, #1
 801be5a:	4013      	ands	r3, r2
 801be5c:	d0f0      	beq.n	801be40 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801be5e:	4b83      	ldr	r3, [pc, #524]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be60:	681a      	ldr	r2, [r3, #0]
 801be62:	23c0      	movs	r3, #192	@ 0xc0
 801be64:	039b      	lsls	r3, r3, #14
 801be66:	4013      	ands	r3, r2
 801be68:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	685a      	ldr	r2, [r3, #4]
 801be6e:	23c0      	movs	r3, #192	@ 0xc0
 801be70:	039b      	lsls	r3, r3, #14
 801be72:	4013      	ands	r3, r2
 801be74:	68fa      	ldr	r2, [r7, #12]
 801be76:	429a      	cmp	r2, r3
 801be78:	d013      	beq.n	801bea2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	685a      	ldr	r2, [r3, #4]
 801be7e:	23c0      	movs	r3, #192	@ 0xc0
 801be80:	029b      	lsls	r3, r3, #10
 801be82:	401a      	ands	r2, r3
 801be84:	23c0      	movs	r3, #192	@ 0xc0
 801be86:	029b      	lsls	r3, r3, #10
 801be88:	429a      	cmp	r2, r3
 801be8a:	d10a      	bne.n	801bea2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801be8c:	4b77      	ldr	r3, [pc, #476]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801be8e:	681a      	ldr	r2, [r3, #0]
 801be90:	2380      	movs	r3, #128	@ 0x80
 801be92:	029b      	lsls	r3, r3, #10
 801be94:	401a      	ands	r2, r3
 801be96:	2380      	movs	r3, #128	@ 0x80
 801be98:	029b      	lsls	r3, r3, #10
 801be9a:	429a      	cmp	r2, r3
 801be9c:	d101      	bne.n	801bea2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801be9e:	2301      	movs	r3, #1
 801bea0:	e0df      	b.n	801c062 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801bea2:	4b72      	ldr	r3, [pc, #456]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bea4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bea6:	23c0      	movs	r3, #192	@ 0xc0
 801bea8:	029b      	lsls	r3, r3, #10
 801beaa:	4013      	ands	r3, r2
 801beac:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d03b      	beq.n	801bf2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	685a      	ldr	r2, [r3, #4]
 801beb8:	23c0      	movs	r3, #192	@ 0xc0
 801beba:	029b      	lsls	r3, r3, #10
 801bebc:	4013      	ands	r3, r2
 801bebe:	68fa      	ldr	r2, [r7, #12]
 801bec0:	429a      	cmp	r2, r3
 801bec2:	d033      	beq.n	801bf2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	2220      	movs	r2, #32
 801beca:	4013      	ands	r3, r2
 801becc:	d02e      	beq.n	801bf2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801bece:	4b67      	ldr	r3, [pc, #412]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bed2:	4a68      	ldr	r2, [pc, #416]	@ (801c074 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801bed4:	4013      	ands	r3, r2
 801bed6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801bed8:	4b64      	ldr	r3, [pc, #400]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801beda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bedc:	4b63      	ldr	r3, [pc, #396]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bede:	2180      	movs	r1, #128	@ 0x80
 801bee0:	0309      	lsls	r1, r1, #12
 801bee2:	430a      	orrs	r2, r1
 801bee4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801bee6:	4b61      	ldr	r3, [pc, #388]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801beea:	4b60      	ldr	r3, [pc, #384]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801beec:	4962      	ldr	r1, [pc, #392]	@ (801c078 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801beee:	400a      	ands	r2, r1
 801bef0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801bef2:	4b5e      	ldr	r3, [pc, #376]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bef4:	68fa      	ldr	r2, [r7, #12]
 801bef6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801bef8:	68fa      	ldr	r2, [r7, #12]
 801befa:	2380      	movs	r3, #128	@ 0x80
 801befc:	005b      	lsls	r3, r3, #1
 801befe:	4013      	ands	r3, r2
 801bf00:	d014      	beq.n	801bf2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bf02:	f7f8 fcdd 	bl	80148c0 <HAL_GetTick>
 801bf06:	0003      	movs	r3, r0
 801bf08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bf0a:	e009      	b.n	801bf20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bf0c:	f7f8 fcd8 	bl	80148c0 <HAL_GetTick>
 801bf10:	0002      	movs	r2, r0
 801bf12:	693b      	ldr	r3, [r7, #16]
 801bf14:	1ad3      	subs	r3, r2, r3
 801bf16:	4a59      	ldr	r2, [pc, #356]	@ (801c07c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801bf18:	4293      	cmp	r3, r2
 801bf1a:	d901      	bls.n	801bf20 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801bf1c:	2303      	movs	r3, #3
 801bf1e:	e0a0      	b.n	801c062 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bf20:	4b52      	ldr	r3, [pc, #328]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf24:	2380      	movs	r3, #128	@ 0x80
 801bf26:	009b      	lsls	r3, r3, #2
 801bf28:	4013      	ands	r3, r2
 801bf2a:	d0ef      	beq.n	801bf0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	2220      	movs	r2, #32
 801bf32:	4013      	ands	r3, r2
 801bf34:	d01f      	beq.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	685a      	ldr	r2, [r3, #4]
 801bf3a:	23c0      	movs	r3, #192	@ 0xc0
 801bf3c:	029b      	lsls	r3, r3, #10
 801bf3e:	401a      	ands	r2, r3
 801bf40:	23c0      	movs	r3, #192	@ 0xc0
 801bf42:	029b      	lsls	r3, r3, #10
 801bf44:	429a      	cmp	r2, r3
 801bf46:	d10c      	bne.n	801bf62 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801bf48:	4b48      	ldr	r3, [pc, #288]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	4a4c      	ldr	r2, [pc, #304]	@ (801c080 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801bf4e:	4013      	ands	r3, r2
 801bf50:	0019      	movs	r1, r3
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	685a      	ldr	r2, [r3, #4]
 801bf56:	23c0      	movs	r3, #192	@ 0xc0
 801bf58:	039b      	lsls	r3, r3, #14
 801bf5a:	401a      	ands	r2, r3
 801bf5c:	4b43      	ldr	r3, [pc, #268]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf5e:	430a      	orrs	r2, r1
 801bf60:	601a      	str	r2, [r3, #0]
 801bf62:	4b42      	ldr	r3, [pc, #264]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	685a      	ldr	r2, [r3, #4]
 801bf6a:	23c0      	movs	r3, #192	@ 0xc0
 801bf6c:	029b      	lsls	r3, r3, #10
 801bf6e:	401a      	ands	r2, r3
 801bf70:	4b3e      	ldr	r3, [pc, #248]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf72:	430a      	orrs	r2, r1
 801bf74:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801bf76:	2317      	movs	r3, #23
 801bf78:	18fb      	adds	r3, r7, r3
 801bf7a:	781b      	ldrb	r3, [r3, #0]
 801bf7c:	2b01      	cmp	r3, #1
 801bf7e:	d105      	bne.n	801bf8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bf80:	4b3a      	ldr	r3, [pc, #232]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bf84:	4b39      	ldr	r3, [pc, #228]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf86:	493f      	ldr	r1, [pc, #252]	@ (801c084 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801bf88:	400a      	ands	r2, r1
 801bf8a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	2201      	movs	r2, #1
 801bf92:	4013      	ands	r3, r2
 801bf94:	d009      	beq.n	801bfaa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801bf96:	4b35      	ldr	r3, [pc, #212]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bf9a:	2203      	movs	r2, #3
 801bf9c:	4393      	bics	r3, r2
 801bf9e:	0019      	movs	r1, r3
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	689a      	ldr	r2, [r3, #8]
 801bfa4:	4b31      	ldr	r3, [pc, #196]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfa6:	430a      	orrs	r2, r1
 801bfa8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	2202      	movs	r2, #2
 801bfb0:	4013      	ands	r3, r2
 801bfb2:	d009      	beq.n	801bfc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801bfb4:	4b2d      	ldr	r3, [pc, #180]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfb8:	220c      	movs	r2, #12
 801bfba:	4393      	bics	r3, r2
 801bfbc:	0019      	movs	r1, r3
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	68da      	ldr	r2, [r3, #12]
 801bfc2:	4b2a      	ldr	r3, [pc, #168]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfc4:	430a      	orrs	r2, r1
 801bfc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	2204      	movs	r2, #4
 801bfce:	4013      	ands	r3, r2
 801bfd0:	d009      	beq.n	801bfe6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801bfd2:	4b26      	ldr	r3, [pc, #152]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfd6:	4a2c      	ldr	r2, [pc, #176]	@ (801c088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801bfd8:	4013      	ands	r3, r2
 801bfda:	0019      	movs	r1, r3
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	691a      	ldr	r2, [r3, #16]
 801bfe0:	4b22      	ldr	r3, [pc, #136]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfe2:	430a      	orrs	r2, r1
 801bfe4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	2208      	movs	r2, #8
 801bfec:	4013      	ands	r3, r2
 801bfee:	d009      	beq.n	801c004 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801bff0:	4b1e      	ldr	r3, [pc, #120]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bff4:	4a25      	ldr	r2, [pc, #148]	@ (801c08c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801bff6:	4013      	ands	r3, r2
 801bff8:	0019      	movs	r1, r3
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	695a      	ldr	r2, [r3, #20]
 801bffe:	4b1b      	ldr	r3, [pc, #108]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c000:	430a      	orrs	r2, r1
 801c002:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	681a      	ldr	r2, [r3, #0]
 801c008:	2380      	movs	r3, #128	@ 0x80
 801c00a:	005b      	lsls	r3, r3, #1
 801c00c:	4013      	ands	r3, r2
 801c00e:	d009      	beq.n	801c024 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c010:	4b16      	ldr	r3, [pc, #88]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c014:	4a17      	ldr	r2, [pc, #92]	@ (801c074 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801c016:	4013      	ands	r3, r2
 801c018:	0019      	movs	r1, r3
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	699a      	ldr	r2, [r3, #24]
 801c01e:	4b13      	ldr	r3, [pc, #76]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c020:	430a      	orrs	r2, r1
 801c022:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	2240      	movs	r2, #64	@ 0x40
 801c02a:	4013      	ands	r3, r2
 801c02c:	d009      	beq.n	801c042 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c02e:	4b0f      	ldr	r3, [pc, #60]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c032:	4a17      	ldr	r2, [pc, #92]	@ (801c090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801c034:	4013      	ands	r3, r2
 801c036:	0019      	movs	r1, r3
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	6a1a      	ldr	r2, [r3, #32]
 801c03c:	4b0b      	ldr	r3, [pc, #44]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c03e:	430a      	orrs	r2, r1
 801c040:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	2280      	movs	r2, #128	@ 0x80
 801c048:	4013      	ands	r3, r2
 801c04a:	d009      	beq.n	801c060 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801c04c:	4b07      	ldr	r3, [pc, #28]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c04e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c050:	4a10      	ldr	r2, [pc, #64]	@ (801c094 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801c052:	4013      	ands	r3, r2
 801c054:	0019      	movs	r1, r3
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	69da      	ldr	r2, [r3, #28]
 801c05a:	4b04      	ldr	r3, [pc, #16]	@ (801c06c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c05c:	430a      	orrs	r2, r1
 801c05e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801c060:	2300      	movs	r3, #0
}
 801c062:	0018      	movs	r0, r3
 801c064:	46bd      	mov	sp, r7
 801c066:	b006      	add	sp, #24
 801c068:	bd80      	pop	{r7, pc}
 801c06a:	46c0      	nop			@ (mov r8, r8)
 801c06c:	40021000 	.word	0x40021000
 801c070:	40007000 	.word	0x40007000
 801c074:	fffcffff 	.word	0xfffcffff
 801c078:	fff7ffff 	.word	0xfff7ffff
 801c07c:	00001388 	.word	0x00001388
 801c080:	ffcfffff 	.word	0xffcfffff
 801c084:	efffffff 	.word	0xefffffff
 801c088:	fffff3ff 	.word	0xfffff3ff
 801c08c:	ffffcfff 	.word	0xffffcfff
 801c090:	fbffffff 	.word	0xfbffffff
 801c094:	fff3ffff 	.word	0xfff3ffff

0801c098 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c098:	b5b0      	push	{r4, r5, r7, lr}
 801c09a:	b084      	sub	sp, #16
 801c09c:	af00      	add	r7, sp, #0
 801c09e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801c0a0:	230f      	movs	r3, #15
 801c0a2:	18fb      	adds	r3, r7, r3
 801c0a4:	2201      	movs	r2, #1
 801c0a6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d101      	bne.n	801c0b2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801c0ae:	2301      	movs	r3, #1
 801c0b0:	e088      	b.n	801c1c4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	2221      	movs	r2, #33	@ 0x21
 801c0b6:	5c9b      	ldrb	r3, [r3, r2]
 801c0b8:	b2db      	uxtb	r3, r3
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d107      	bne.n	801c0ce <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	2220      	movs	r2, #32
 801c0c2:	2100      	movs	r1, #0
 801c0c4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	0018      	movs	r0, r3
 801c0ca:	f7f2 fa07 	bl	800e4dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	2221      	movs	r2, #33	@ 0x21
 801c0d2:	2102      	movs	r1, #2
 801c0d4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	68db      	ldr	r3, [r3, #12]
 801c0dc:	2210      	movs	r2, #16
 801c0de:	4013      	ands	r3, r2
 801c0e0:	2b10      	cmp	r3, #16
 801c0e2:	d05f      	beq.n	801c1a4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	22ca      	movs	r2, #202	@ 0xca
 801c0ea:	625a      	str	r2, [r3, #36]	@ 0x24
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	2253      	movs	r2, #83	@ 0x53
 801c0f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801c0f4:	250f      	movs	r5, #15
 801c0f6:	197c      	adds	r4, r7, r5
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	0018      	movs	r0, r3
 801c0fc:	f000 fa99 	bl	801c632 <RTC_EnterInitMode>
 801c100:	0003      	movs	r3, r0
 801c102:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801c104:	0028      	movs	r0, r5
 801c106:	183b      	adds	r3, r7, r0
 801c108:	781b      	ldrb	r3, [r3, #0]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d12c      	bne.n	801c168 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	689a      	ldr	r2, [r3, #8]
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	492c      	ldr	r1, [pc, #176]	@ (801c1cc <HAL_RTC_Init+0x134>)
 801c11a:	400a      	ands	r2, r1
 801c11c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	6899      	ldr	r1, [r3, #8]
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	685a      	ldr	r2, [r3, #4]
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	691b      	ldr	r3, [r3, #16]
 801c12c:	431a      	orrs	r2, r3
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	699b      	ldr	r3, [r3, #24]
 801c132:	431a      	orrs	r2, r3
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	430a      	orrs	r2, r1
 801c13a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	687a      	ldr	r2, [r7, #4]
 801c142:	68d2      	ldr	r2, [r2, #12]
 801c144:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	6919      	ldr	r1, [r3, #16]
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	689b      	ldr	r3, [r3, #8]
 801c150:	041a      	lsls	r2, r3, #16
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	430a      	orrs	r2, r1
 801c158:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801c15a:	183c      	adds	r4, r7, r0
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	0018      	movs	r0, r3
 801c160:	f000 faab 	bl	801c6ba <RTC_ExitInitMode>
 801c164:	0003      	movs	r3, r0
 801c166:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801c168:	230f      	movs	r3, #15
 801c16a:	18fb      	adds	r3, r7, r3
 801c16c:	781b      	ldrb	r3, [r3, #0]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d113      	bne.n	801c19a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	2103      	movs	r1, #3
 801c17e:	438a      	bics	r2, r1
 801c180:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	69da      	ldr	r2, [r3, #28]
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	695b      	ldr	r3, [r3, #20]
 801c190:	431a      	orrs	r2, r3
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	430a      	orrs	r2, r1
 801c198:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	22ff      	movs	r2, #255	@ 0xff
 801c1a0:	625a      	str	r2, [r3, #36]	@ 0x24
 801c1a2:	e003      	b.n	801c1ac <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801c1a4:	230f      	movs	r3, #15
 801c1a6:	18fb      	adds	r3, r7, r3
 801c1a8:	2200      	movs	r2, #0
 801c1aa:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801c1ac:	230f      	movs	r3, #15
 801c1ae:	18fb      	adds	r3, r7, r3
 801c1b0:	781b      	ldrb	r3, [r3, #0]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d103      	bne.n	801c1be <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	2221      	movs	r2, #33	@ 0x21
 801c1ba:	2101      	movs	r1, #1
 801c1bc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801c1be:	230f      	movs	r3, #15
 801c1c0:	18fb      	adds	r3, r7, r3
 801c1c2:	781b      	ldrb	r3, [r3, #0]
}
 801c1c4:	0018      	movs	r0, r3
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	b004      	add	sp, #16
 801c1ca:	bdb0      	pop	{r4, r5, r7, pc}
 801c1cc:	ff8fffbf 	.word	0xff8fffbf

0801c1d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c1d0:	b5b0      	push	{r4, r5, r7, lr}
 801c1d2:	b086      	sub	sp, #24
 801c1d4:	af00      	add	r7, sp, #0
 801c1d6:	60f8      	str	r0, [r7, #12]
 801c1d8:	60b9      	str	r1, [r7, #8]
 801c1da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c1dc:	2300      	movs	r3, #0
 801c1de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c1e0:	68fb      	ldr	r3, [r7, #12]
 801c1e2:	2220      	movs	r2, #32
 801c1e4:	5c9b      	ldrb	r3, [r3, r2]
 801c1e6:	2b01      	cmp	r3, #1
 801c1e8:	d101      	bne.n	801c1ee <HAL_RTC_SetTime+0x1e>
 801c1ea:	2302      	movs	r3, #2
 801c1ec:	e092      	b.n	801c314 <HAL_RTC_SetTime+0x144>
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	2220      	movs	r2, #32
 801c1f2:	2101      	movs	r1, #1
 801c1f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c1f6:	68fb      	ldr	r3, [r7, #12]
 801c1f8:	2221      	movs	r2, #33	@ 0x21
 801c1fa:	2102      	movs	r1, #2
 801c1fc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	2b00      	cmp	r3, #0
 801c202:	d125      	bne.n	801c250 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	689b      	ldr	r3, [r3, #8]
 801c20a:	2240      	movs	r2, #64	@ 0x40
 801c20c:	4013      	ands	r3, r2
 801c20e:	d102      	bne.n	801c216 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c210:	68bb      	ldr	r3, [r7, #8]
 801c212:	2200      	movs	r2, #0
 801c214:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c216:	68bb      	ldr	r3, [r7, #8]
 801c218:	781b      	ldrb	r3, [r3, #0]
 801c21a:	0018      	movs	r0, r3
 801c21c:	f000 fa77 	bl	801c70e <RTC_ByteToBcd2>
 801c220:	0003      	movs	r3, r0
 801c222:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c224:	68bb      	ldr	r3, [r7, #8]
 801c226:	785b      	ldrb	r3, [r3, #1]
 801c228:	0018      	movs	r0, r3
 801c22a:	f000 fa70 	bl	801c70e <RTC_ByteToBcd2>
 801c22e:	0003      	movs	r3, r0
 801c230:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c232:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801c234:	68bb      	ldr	r3, [r7, #8]
 801c236:	789b      	ldrb	r3, [r3, #2]
 801c238:	0018      	movs	r0, r3
 801c23a:	f000 fa68 	bl	801c70e <RTC_ByteToBcd2>
 801c23e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c240:	0022      	movs	r2, r4
 801c242:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801c244:	68bb      	ldr	r3, [r7, #8]
 801c246:	78db      	ldrb	r3, [r3, #3]
 801c248:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c24a:	4313      	orrs	r3, r2
 801c24c:	617b      	str	r3, [r7, #20]
 801c24e:	e017      	b.n	801c280 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	689b      	ldr	r3, [r3, #8]
 801c256:	2240      	movs	r2, #64	@ 0x40
 801c258:	4013      	ands	r3, r2
 801c25a:	d102      	bne.n	801c262 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c25c:	68bb      	ldr	r3, [r7, #8]
 801c25e:	2200      	movs	r2, #0
 801c260:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c262:	68bb      	ldr	r3, [r7, #8]
 801c264:	781b      	ldrb	r3, [r3, #0]
 801c266:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c268:	68bb      	ldr	r3, [r7, #8]
 801c26a:	785b      	ldrb	r3, [r3, #1]
 801c26c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c26e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801c270:	68ba      	ldr	r2, [r7, #8]
 801c272:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c274:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801c276:	68bb      	ldr	r3, [r7, #8]
 801c278:	78db      	ldrb	r3, [r3, #3]
 801c27a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c27c:	4313      	orrs	r3, r2
 801c27e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	22ca      	movs	r2, #202	@ 0xca
 801c286:	625a      	str	r2, [r3, #36]	@ 0x24
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	2253      	movs	r2, #83	@ 0x53
 801c28e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c290:	2513      	movs	r5, #19
 801c292:	197c      	adds	r4, r7, r5
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	0018      	movs	r0, r3
 801c298:	f000 f9cb 	bl	801c632 <RTC_EnterInitMode>
 801c29c:	0003      	movs	r3, r0
 801c29e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c2a0:	0028      	movs	r0, r5
 801c2a2:	183b      	adds	r3, r7, r0
 801c2a4:	781b      	ldrb	r3, [r3, #0]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d120      	bne.n	801c2ec <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	697a      	ldr	r2, [r7, #20]
 801c2b0:	491a      	ldr	r1, [pc, #104]	@ (801c31c <HAL_RTC_SetTime+0x14c>)
 801c2b2:	400a      	ands	r2, r1
 801c2b4:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	689a      	ldr	r2, [r3, #8]
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	4917      	ldr	r1, [pc, #92]	@ (801c320 <HAL_RTC_SetTime+0x150>)
 801c2c2:	400a      	ands	r2, r1
 801c2c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	6899      	ldr	r1, [r3, #8]
 801c2cc:	68bb      	ldr	r3, [r7, #8]
 801c2ce:	68da      	ldr	r2, [r3, #12]
 801c2d0:	68bb      	ldr	r3, [r7, #8]
 801c2d2:	691b      	ldr	r3, [r3, #16]
 801c2d4:	431a      	orrs	r2, r3
 801c2d6:	68fb      	ldr	r3, [r7, #12]
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	430a      	orrs	r2, r1
 801c2dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c2de:	183c      	adds	r4, r7, r0
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	0018      	movs	r0, r3
 801c2e4:	f000 f9e9 	bl	801c6ba <RTC_ExitInitMode>
 801c2e8:	0003      	movs	r3, r0
 801c2ea:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c2ec:	2313      	movs	r3, #19
 801c2ee:	18fb      	adds	r3, r7, r3
 801c2f0:	781b      	ldrb	r3, [r3, #0]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d103      	bne.n	801c2fe <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	2221      	movs	r2, #33	@ 0x21
 801c2fa:	2101      	movs	r1, #1
 801c2fc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c2fe:	68fb      	ldr	r3, [r7, #12]
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	22ff      	movs	r2, #255	@ 0xff
 801c304:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	2220      	movs	r2, #32
 801c30a:	2100      	movs	r1, #0
 801c30c:	5499      	strb	r1, [r3, r2]

  return status;
 801c30e:	2313      	movs	r3, #19
 801c310:	18fb      	adds	r3, r7, r3
 801c312:	781b      	ldrb	r3, [r3, #0]
}
 801c314:	0018      	movs	r0, r3
 801c316:	46bd      	mov	sp, r7
 801c318:	b006      	add	sp, #24
 801c31a:	bdb0      	pop	{r4, r5, r7, pc}
 801c31c:	007f7f7f 	.word	0x007f7f7f
 801c320:	fffbffff 	.word	0xfffbffff

0801c324 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c324:	b580      	push	{r7, lr}
 801c326:	b086      	sub	sp, #24
 801c328:	af00      	add	r7, sp, #0
 801c32a:	60f8      	str	r0, [r7, #12]
 801c32c:	60b9      	str	r1, [r7, #8]
 801c32e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c330:	2300      	movs	r3, #0
 801c332:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c33a:	68bb      	ldr	r3, [r7, #8]
 801c33c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801c33e:	68fb      	ldr	r3, [r7, #12]
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	691b      	ldr	r3, [r3, #16]
 801c344:	045b      	lsls	r3, r3, #17
 801c346:	0c5a      	lsrs	r2, r3, #17
 801c348:	68bb      	ldr	r3, [r7, #8]
 801c34a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	681b      	ldr	r3, [r3, #0]
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	4a22      	ldr	r2, [pc, #136]	@ (801c3dc <HAL_RTC_GetTime+0xb8>)
 801c354:	4013      	ands	r3, r2
 801c356:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801c358:	697b      	ldr	r3, [r7, #20]
 801c35a:	0c1b      	lsrs	r3, r3, #16
 801c35c:	b2db      	uxtb	r3, r3
 801c35e:	223f      	movs	r2, #63	@ 0x3f
 801c360:	4013      	ands	r3, r2
 801c362:	b2da      	uxtb	r2, r3
 801c364:	68bb      	ldr	r3, [r7, #8]
 801c366:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801c368:	697b      	ldr	r3, [r7, #20]
 801c36a:	0a1b      	lsrs	r3, r3, #8
 801c36c:	b2db      	uxtb	r3, r3
 801c36e:	227f      	movs	r2, #127	@ 0x7f
 801c370:	4013      	ands	r3, r2
 801c372:	b2da      	uxtb	r2, r3
 801c374:	68bb      	ldr	r3, [r7, #8]
 801c376:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801c378:	697b      	ldr	r3, [r7, #20]
 801c37a:	b2db      	uxtb	r3, r3
 801c37c:	227f      	movs	r2, #127	@ 0x7f
 801c37e:	4013      	ands	r3, r2
 801c380:	b2da      	uxtb	r2, r3
 801c382:	68bb      	ldr	r3, [r7, #8]
 801c384:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801c386:	697b      	ldr	r3, [r7, #20]
 801c388:	0d9b      	lsrs	r3, r3, #22
 801c38a:	b2db      	uxtb	r3, r3
 801c38c:	2201      	movs	r2, #1
 801c38e:	4013      	ands	r3, r2
 801c390:	b2da      	uxtb	r2, r3
 801c392:	68bb      	ldr	r3, [r7, #8]
 801c394:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d11a      	bne.n	801c3d2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801c39c:	68bb      	ldr	r3, [r7, #8]
 801c39e:	781b      	ldrb	r3, [r3, #0]
 801c3a0:	0018      	movs	r0, r3
 801c3a2:	f000 f9d5 	bl	801c750 <RTC_Bcd2ToByte>
 801c3a6:	0003      	movs	r3, r0
 801c3a8:	001a      	movs	r2, r3
 801c3aa:	68bb      	ldr	r3, [r7, #8]
 801c3ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801c3ae:	68bb      	ldr	r3, [r7, #8]
 801c3b0:	785b      	ldrb	r3, [r3, #1]
 801c3b2:	0018      	movs	r0, r3
 801c3b4:	f000 f9cc 	bl	801c750 <RTC_Bcd2ToByte>
 801c3b8:	0003      	movs	r3, r0
 801c3ba:	001a      	movs	r2, r3
 801c3bc:	68bb      	ldr	r3, [r7, #8]
 801c3be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801c3c0:	68bb      	ldr	r3, [r7, #8]
 801c3c2:	789b      	ldrb	r3, [r3, #2]
 801c3c4:	0018      	movs	r0, r3
 801c3c6:	f000 f9c3 	bl	801c750 <RTC_Bcd2ToByte>
 801c3ca:	0003      	movs	r3, r0
 801c3cc:	001a      	movs	r2, r3
 801c3ce:	68bb      	ldr	r3, [r7, #8]
 801c3d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801c3d2:	2300      	movs	r3, #0
}
 801c3d4:	0018      	movs	r0, r3
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	b006      	add	sp, #24
 801c3da:	bd80      	pop	{r7, pc}
 801c3dc:	007f7f7f 	.word	0x007f7f7f

0801c3e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c3e0:	b5b0      	push	{r4, r5, r7, lr}
 801c3e2:	b086      	sub	sp, #24
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	60f8      	str	r0, [r7, #12]
 801c3e8:	60b9      	str	r1, [r7, #8]
 801c3ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c3ec:	2300      	movs	r3, #0
 801c3ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	2220      	movs	r2, #32
 801c3f4:	5c9b      	ldrb	r3, [r3, r2]
 801c3f6:	2b01      	cmp	r3, #1
 801c3f8:	d101      	bne.n	801c3fe <HAL_RTC_SetDate+0x1e>
 801c3fa:	2302      	movs	r3, #2
 801c3fc:	e07e      	b.n	801c4fc <HAL_RTC_SetDate+0x11c>
 801c3fe:	68fb      	ldr	r3, [r7, #12]
 801c400:	2220      	movs	r2, #32
 801c402:	2101      	movs	r1, #1
 801c404:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	2221      	movs	r2, #33	@ 0x21
 801c40a:	2102      	movs	r1, #2
 801c40c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d10e      	bne.n	801c432 <HAL_RTC_SetDate+0x52>
 801c414:	68bb      	ldr	r3, [r7, #8]
 801c416:	785b      	ldrb	r3, [r3, #1]
 801c418:	001a      	movs	r2, r3
 801c41a:	2310      	movs	r3, #16
 801c41c:	4013      	ands	r3, r2
 801c41e:	d008      	beq.n	801c432 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801c420:	68bb      	ldr	r3, [r7, #8]
 801c422:	785b      	ldrb	r3, [r3, #1]
 801c424:	2210      	movs	r2, #16
 801c426:	4393      	bics	r3, r2
 801c428:	b2db      	uxtb	r3, r3
 801c42a:	330a      	adds	r3, #10
 801c42c:	b2da      	uxtb	r2, r3
 801c42e:	68bb      	ldr	r3, [r7, #8]
 801c430:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	2b00      	cmp	r3, #0
 801c436:	d11c      	bne.n	801c472 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c438:	68bb      	ldr	r3, [r7, #8]
 801c43a:	78db      	ldrb	r3, [r3, #3]
 801c43c:	0018      	movs	r0, r3
 801c43e:	f000 f966 	bl	801c70e <RTC_ByteToBcd2>
 801c442:	0003      	movs	r3, r0
 801c444:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c446:	68bb      	ldr	r3, [r7, #8]
 801c448:	785b      	ldrb	r3, [r3, #1]
 801c44a:	0018      	movs	r0, r3
 801c44c:	f000 f95f 	bl	801c70e <RTC_ByteToBcd2>
 801c450:	0003      	movs	r3, r0
 801c452:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c454:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801c456:	68bb      	ldr	r3, [r7, #8]
 801c458:	789b      	ldrb	r3, [r3, #2]
 801c45a:	0018      	movs	r0, r3
 801c45c:	f000 f957 	bl	801c70e <RTC_ByteToBcd2>
 801c460:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c462:	0022      	movs	r2, r4
 801c464:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801c466:	68bb      	ldr	r3, [r7, #8]
 801c468:	781b      	ldrb	r3, [r3, #0]
 801c46a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c46c:	4313      	orrs	r3, r2
 801c46e:	617b      	str	r3, [r7, #20]
 801c470:	e00e      	b.n	801c490 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c472:	68bb      	ldr	r3, [r7, #8]
 801c474:	78db      	ldrb	r3, [r3, #3]
 801c476:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c478:	68bb      	ldr	r3, [r7, #8]
 801c47a:	785b      	ldrb	r3, [r3, #1]
 801c47c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c47e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801c480:	68ba      	ldr	r2, [r7, #8]
 801c482:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c484:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801c486:	68bb      	ldr	r3, [r7, #8]
 801c488:	781b      	ldrb	r3, [r3, #0]
 801c48a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c48c:	4313      	orrs	r3, r2
 801c48e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	22ca      	movs	r2, #202	@ 0xca
 801c496:	625a      	str	r2, [r3, #36]	@ 0x24
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	2253      	movs	r2, #83	@ 0x53
 801c49e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c4a0:	2513      	movs	r5, #19
 801c4a2:	197c      	adds	r4, r7, r5
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	0018      	movs	r0, r3
 801c4a8:	f000 f8c3 	bl	801c632 <RTC_EnterInitMode>
 801c4ac:	0003      	movs	r3, r0
 801c4ae:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c4b0:	0028      	movs	r0, r5
 801c4b2:	183b      	adds	r3, r7, r0
 801c4b4:	781b      	ldrb	r3, [r3, #0]
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d10c      	bne.n	801c4d4 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	681b      	ldr	r3, [r3, #0]
 801c4be:	697a      	ldr	r2, [r7, #20]
 801c4c0:	4910      	ldr	r1, [pc, #64]	@ (801c504 <HAL_RTC_SetDate+0x124>)
 801c4c2:	400a      	ands	r2, r1
 801c4c4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c4c6:	183c      	adds	r4, r7, r0
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	0018      	movs	r0, r3
 801c4cc:	f000 f8f5 	bl	801c6ba <RTC_ExitInitMode>
 801c4d0:	0003      	movs	r3, r0
 801c4d2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c4d4:	2313      	movs	r3, #19
 801c4d6:	18fb      	adds	r3, r7, r3
 801c4d8:	781b      	ldrb	r3, [r3, #0]
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d103      	bne.n	801c4e6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	2221      	movs	r2, #33	@ 0x21
 801c4e2:	2101      	movs	r1, #1
 801c4e4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c4e6:	68fb      	ldr	r3, [r7, #12]
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	22ff      	movs	r2, #255	@ 0xff
 801c4ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	2220      	movs	r2, #32
 801c4f2:	2100      	movs	r1, #0
 801c4f4:	5499      	strb	r1, [r3, r2]

  return status;
 801c4f6:	2313      	movs	r3, #19
 801c4f8:	18fb      	adds	r3, r7, r3
 801c4fa:	781b      	ldrb	r3, [r3, #0]
}
 801c4fc:	0018      	movs	r0, r3
 801c4fe:	46bd      	mov	sp, r7
 801c500:	b006      	add	sp, #24
 801c502:	bdb0      	pop	{r4, r5, r7, pc}
 801c504:	00ffff3f 	.word	0x00ffff3f

0801c508 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c508:	b580      	push	{r7, lr}
 801c50a:	b086      	sub	sp, #24
 801c50c:	af00      	add	r7, sp, #0
 801c50e:	60f8      	str	r0, [r7, #12]
 801c510:	60b9      	str	r1, [r7, #8]
 801c512:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c514:	2300      	movs	r3, #0
 801c516:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	685b      	ldr	r3, [r3, #4]
 801c51e:	4a21      	ldr	r2, [pc, #132]	@ (801c5a4 <HAL_RTC_GetDate+0x9c>)
 801c520:	4013      	ands	r3, r2
 801c522:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801c524:	697b      	ldr	r3, [r7, #20]
 801c526:	0c1b      	lsrs	r3, r3, #16
 801c528:	b2da      	uxtb	r2, r3
 801c52a:	68bb      	ldr	r3, [r7, #8]
 801c52c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801c52e:	697b      	ldr	r3, [r7, #20]
 801c530:	0a1b      	lsrs	r3, r3, #8
 801c532:	b2db      	uxtb	r3, r3
 801c534:	221f      	movs	r2, #31
 801c536:	4013      	ands	r3, r2
 801c538:	b2da      	uxtb	r2, r3
 801c53a:	68bb      	ldr	r3, [r7, #8]
 801c53c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801c53e:	697b      	ldr	r3, [r7, #20]
 801c540:	b2db      	uxtb	r3, r3
 801c542:	223f      	movs	r2, #63	@ 0x3f
 801c544:	4013      	ands	r3, r2
 801c546:	b2da      	uxtb	r2, r3
 801c548:	68bb      	ldr	r3, [r7, #8]
 801c54a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801c54c:	697b      	ldr	r3, [r7, #20]
 801c54e:	0b5b      	lsrs	r3, r3, #13
 801c550:	b2db      	uxtb	r3, r3
 801c552:	2207      	movs	r2, #7
 801c554:	4013      	ands	r3, r2
 801c556:	b2da      	uxtb	r2, r3
 801c558:	68bb      	ldr	r3, [r7, #8]
 801c55a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d11a      	bne.n	801c598 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801c562:	68bb      	ldr	r3, [r7, #8]
 801c564:	78db      	ldrb	r3, [r3, #3]
 801c566:	0018      	movs	r0, r3
 801c568:	f000 f8f2 	bl	801c750 <RTC_Bcd2ToByte>
 801c56c:	0003      	movs	r3, r0
 801c56e:	001a      	movs	r2, r3
 801c570:	68bb      	ldr	r3, [r7, #8]
 801c572:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801c574:	68bb      	ldr	r3, [r7, #8]
 801c576:	785b      	ldrb	r3, [r3, #1]
 801c578:	0018      	movs	r0, r3
 801c57a:	f000 f8e9 	bl	801c750 <RTC_Bcd2ToByte>
 801c57e:	0003      	movs	r3, r0
 801c580:	001a      	movs	r2, r3
 801c582:	68bb      	ldr	r3, [r7, #8]
 801c584:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801c586:	68bb      	ldr	r3, [r7, #8]
 801c588:	789b      	ldrb	r3, [r3, #2]
 801c58a:	0018      	movs	r0, r3
 801c58c:	f000 f8e0 	bl	801c750 <RTC_Bcd2ToByte>
 801c590:	0003      	movs	r3, r0
 801c592:	001a      	movs	r2, r3
 801c594:	68bb      	ldr	r3, [r7, #8]
 801c596:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801c598:	2300      	movs	r3, #0
}
 801c59a:	0018      	movs	r0, r3
 801c59c:	46bd      	mov	sp, r7
 801c59e:	b006      	add	sp, #24
 801c5a0:	bd80      	pop	{r7, pc}
 801c5a2:	46c0      	nop			@ (mov r8, r8)
 801c5a4:	00ffff3f 	.word	0x00ffff3f

0801c5a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b084      	sub	sp, #16
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	4a0e      	ldr	r2, [pc, #56]	@ (801c5f4 <HAL_RTC_WaitForSynchro+0x4c>)
 801c5ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c5bc:	f7f8 f980 	bl	80148c0 <HAL_GetTick>
 801c5c0:	0003      	movs	r3, r0
 801c5c2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c5c4:	e00a      	b.n	801c5dc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c5c6:	f7f8 f97b 	bl	80148c0 <HAL_GetTick>
 801c5ca:	0002      	movs	r2, r0
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	1ad2      	subs	r2, r2, r3
 801c5d0:	23fa      	movs	r3, #250	@ 0xfa
 801c5d2:	009b      	lsls	r3, r3, #2
 801c5d4:	429a      	cmp	r2, r3
 801c5d6:	d901      	bls.n	801c5dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801c5d8:	2303      	movs	r3, #3
 801c5da:	e006      	b.n	801c5ea <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	68db      	ldr	r3, [r3, #12]
 801c5e2:	2220      	movs	r2, #32
 801c5e4:	4013      	ands	r3, r2
 801c5e6:	d0ee      	beq.n	801c5c6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801c5e8:	2300      	movs	r3, #0
}
 801c5ea:	0018      	movs	r0, r3
 801c5ec:	46bd      	mov	sp, r7
 801c5ee:	b004      	add	sp, #16
 801c5f0:	bd80      	pop	{r7, pc}
 801c5f2:	46c0      	nop			@ (mov r8, r8)
 801c5f4:	0001ff5f 	.word	0x0001ff5f

0801c5f8 <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801c5f8:	b580      	push	{r7, lr}
 801c5fa:	b082      	sub	sp, #8
 801c5fc:	af00      	add	r7, sp, #0
 801c5fe:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	22ca      	movs	r2, #202	@ 0xca
 801c606:	625a      	str	r2, [r3, #36]	@ 0x24
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	2253      	movs	r2, #83	@ 0x53
 801c60e:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	689a      	ldr	r2, [r3, #8]
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	2180      	movs	r1, #128	@ 0x80
 801c61c:	0249      	lsls	r1, r1, #9
 801c61e:	430a      	orrs	r2, r1
 801c620:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	22ff      	movs	r2, #255	@ 0xff
 801c628:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c62a:	46c0      	nop			@ (mov r8, r8)
 801c62c:	46bd      	mov	sp, r7
 801c62e:	b002      	add	sp, #8
 801c630:	bd80      	pop	{r7, pc}

0801c632 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801c632:	b580      	push	{r7, lr}
 801c634:	b084      	sub	sp, #16
 801c636:	af00      	add	r7, sp, #0
 801c638:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c63a:	2300      	movs	r3, #0
 801c63c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801c63e:	230f      	movs	r3, #15
 801c640:	18fb      	adds	r3, r7, r3
 801c642:	2200      	movs	r2, #0
 801c644:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	68db      	ldr	r3, [r3, #12]
 801c64c:	2240      	movs	r2, #64	@ 0x40
 801c64e:	4013      	ands	r3, r2
 801c650:	d12c      	bne.n	801c6ac <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	68da      	ldr	r2, [r3, #12]
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	2180      	movs	r1, #128	@ 0x80
 801c65e:	430a      	orrs	r2, r1
 801c660:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c662:	f7f8 f92d 	bl	80148c0 <HAL_GetTick>
 801c666:	0003      	movs	r3, r0
 801c668:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c66a:	e014      	b.n	801c696 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c66c:	f7f8 f928 	bl	80148c0 <HAL_GetTick>
 801c670:	0002      	movs	r2, r0
 801c672:	68bb      	ldr	r3, [r7, #8]
 801c674:	1ad2      	subs	r2, r2, r3
 801c676:	200f      	movs	r0, #15
 801c678:	183b      	adds	r3, r7, r0
 801c67a:	1839      	adds	r1, r7, r0
 801c67c:	7809      	ldrb	r1, [r1, #0]
 801c67e:	7019      	strb	r1, [r3, #0]
 801c680:	23fa      	movs	r3, #250	@ 0xfa
 801c682:	009b      	lsls	r3, r3, #2
 801c684:	429a      	cmp	r2, r3
 801c686:	d906      	bls.n	801c696 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	2221      	movs	r2, #33	@ 0x21
 801c68c:	2104      	movs	r1, #4
 801c68e:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801c690:	183b      	adds	r3, r7, r0
 801c692:	2201      	movs	r2, #1
 801c694:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	68db      	ldr	r3, [r3, #12]
 801c69c:	2240      	movs	r2, #64	@ 0x40
 801c69e:	4013      	ands	r3, r2
 801c6a0:	d104      	bne.n	801c6ac <RTC_EnterInitMode+0x7a>
 801c6a2:	230f      	movs	r3, #15
 801c6a4:	18fb      	adds	r3, r7, r3
 801c6a6:	781b      	ldrb	r3, [r3, #0]
 801c6a8:	2b01      	cmp	r3, #1
 801c6aa:	d1df      	bne.n	801c66c <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801c6ac:	230f      	movs	r3, #15
 801c6ae:	18fb      	adds	r3, r7, r3
 801c6b0:	781b      	ldrb	r3, [r3, #0]
}
 801c6b2:	0018      	movs	r0, r3
 801c6b4:	46bd      	mov	sp, r7
 801c6b6:	b004      	add	sp, #16
 801c6b8:	bd80      	pop	{r7, pc}

0801c6ba <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801c6ba:	b590      	push	{r4, r7, lr}
 801c6bc:	b085      	sub	sp, #20
 801c6be:	af00      	add	r7, sp, #0
 801c6c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c6c2:	240f      	movs	r4, #15
 801c6c4:	193b      	adds	r3, r7, r4
 801c6c6:	2200      	movs	r2, #0
 801c6c8:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	68da      	ldr	r2, [r3, #12]
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	2180      	movs	r1, #128	@ 0x80
 801c6d6:	438a      	bics	r2, r1
 801c6d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	689b      	ldr	r3, [r3, #8]
 801c6e0:	2220      	movs	r2, #32
 801c6e2:	4013      	ands	r3, r2
 801c6e4:	d10c      	bne.n	801c700 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	0018      	movs	r0, r3
 801c6ea:	f7ff ff5d 	bl	801c5a8 <HAL_RTC_WaitForSynchro>
 801c6ee:	1e03      	subs	r3, r0, #0
 801c6f0:	d006      	beq.n	801c700 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	2221      	movs	r2, #33	@ 0x21
 801c6f6:	2104      	movs	r1, #4
 801c6f8:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801c6fa:	193b      	adds	r3, r7, r4
 801c6fc:	2201      	movs	r2, #1
 801c6fe:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801c700:	230f      	movs	r3, #15
 801c702:	18fb      	adds	r3, r7, r3
 801c704:	781b      	ldrb	r3, [r3, #0]
}
 801c706:	0018      	movs	r0, r3
 801c708:	46bd      	mov	sp, r7
 801c70a:	b005      	add	sp, #20
 801c70c:	bd90      	pop	{r4, r7, pc}

0801c70e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801c70e:	b580      	push	{r7, lr}
 801c710:	b084      	sub	sp, #16
 801c712:	af00      	add	r7, sp, #0
 801c714:	0002      	movs	r2, r0
 801c716:	1dfb      	adds	r3, r7, #7
 801c718:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801c71a:	2300      	movs	r3, #0
 801c71c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801c71e:	e007      	b.n	801c730 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	3301      	adds	r3, #1
 801c724:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801c726:	1dfb      	adds	r3, r7, #7
 801c728:	1dfa      	adds	r2, r7, #7
 801c72a:	7812      	ldrb	r2, [r2, #0]
 801c72c:	3a0a      	subs	r2, #10
 801c72e:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801c730:	1dfb      	adds	r3, r7, #7
 801c732:	781b      	ldrb	r3, [r3, #0]
 801c734:	2b09      	cmp	r3, #9
 801c736:	d8f3      	bhi.n	801c720 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	b2db      	uxtb	r3, r3
 801c73c:	011b      	lsls	r3, r3, #4
 801c73e:	b2da      	uxtb	r2, r3
 801c740:	1dfb      	adds	r3, r7, #7
 801c742:	781b      	ldrb	r3, [r3, #0]
 801c744:	4313      	orrs	r3, r2
 801c746:	b2db      	uxtb	r3, r3
}
 801c748:	0018      	movs	r0, r3
 801c74a:	46bd      	mov	sp, r7
 801c74c:	b004      	add	sp, #16
 801c74e:	bd80      	pop	{r7, pc}

0801c750 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801c750:	b580      	push	{r7, lr}
 801c752:	b084      	sub	sp, #16
 801c754:	af00      	add	r7, sp, #0
 801c756:	0002      	movs	r2, r0
 801c758:	1dfb      	adds	r3, r7, #7
 801c75a:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801c75c:	2300      	movs	r3, #0
 801c75e:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801c760:	1dfb      	adds	r3, r7, #7
 801c762:	781b      	ldrb	r3, [r3, #0]
 801c764:	091b      	lsrs	r3, r3, #4
 801c766:	b2db      	uxtb	r3, r3
 801c768:	001a      	movs	r2, r3
 801c76a:	0013      	movs	r3, r2
 801c76c:	009b      	lsls	r3, r3, #2
 801c76e:	189b      	adds	r3, r3, r2
 801c770:	005b      	lsls	r3, r3, #1
 801c772:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	b2da      	uxtb	r2, r3
 801c778:	1dfb      	adds	r3, r7, #7
 801c77a:	781b      	ldrb	r3, [r3, #0]
 801c77c:	210f      	movs	r1, #15
 801c77e:	400b      	ands	r3, r1
 801c780:	b2db      	uxtb	r3, r3
 801c782:	18d3      	adds	r3, r2, r3
 801c784:	b2db      	uxtb	r3, r3
}
 801c786:	0018      	movs	r0, r3
 801c788:	46bd      	mov	sp, r7
 801c78a:	b004      	add	sp, #16
 801c78c:	bd80      	pop	{r7, pc}
	...

0801c790 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801c790:	b580      	push	{r7, lr}
 801c792:	b086      	sub	sp, #24
 801c794:	af00      	add	r7, sp, #0
 801c796:	60f8      	str	r0, [r7, #12]
 801c798:	60b9      	str	r1, [r7, #8]
 801c79a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c79c:	4b64      	ldr	r3, [pc, #400]	@ (801c930 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	22fa      	movs	r2, #250	@ 0xfa
 801c7a2:	01d1      	lsls	r1, r2, #7
 801c7a4:	0018      	movs	r0, r3
 801c7a6:	f7e3 fcfd 	bl	80001a4 <__udivsi3>
 801c7aa:	0003      	movs	r3, r0
 801c7ac:	001a      	movs	r2, r3
 801c7ae:	0013      	movs	r3, r2
 801c7b0:	015b      	lsls	r3, r3, #5
 801c7b2:	1a9b      	subs	r3, r3, r2
 801c7b4:	009b      	lsls	r3, r3, #2
 801c7b6:	189b      	adds	r3, r3, r2
 801c7b8:	00db      	lsls	r3, r3, #3
 801c7ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	2220      	movs	r2, #32
 801c7c0:	5c9b      	ldrb	r3, [r3, r2]
 801c7c2:	2b01      	cmp	r3, #1
 801c7c4:	d101      	bne.n	801c7ca <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801c7c6:	2302      	movs	r3, #2
 801c7c8:	e0ad      	b.n	801c926 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	2220      	movs	r2, #32
 801c7ce:	2101      	movs	r1, #1
 801c7d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	2221      	movs	r2, #33	@ 0x21
 801c7d6:	2102      	movs	r1, #2
 801c7d8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	22ca      	movs	r2, #202	@ 0xca
 801c7e0:	625a      	str	r2, [r3, #36]	@ 0x24
 801c7e2:	68fb      	ldr	r3, [r7, #12]
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	2253      	movs	r2, #83	@ 0x53
 801c7e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	689a      	ldr	r2, [r3, #8]
 801c7f0:	2380      	movs	r3, #128	@ 0x80
 801c7f2:	00db      	lsls	r3, r3, #3
 801c7f4:	4013      	ands	r3, r2
 801c7f6:	d019      	beq.n	801c82c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801c7f8:	697b      	ldr	r3, [r7, #20]
 801c7fa:	3b01      	subs	r3, #1
 801c7fc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c7fe:	697b      	ldr	r3, [r7, #20]
 801c800:	2b00      	cmp	r3, #0
 801c802:	d10d      	bne.n	801c820 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	22ff      	movs	r2, #255	@ 0xff
 801c80a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	2221      	movs	r2, #33	@ 0x21
 801c810:	2103      	movs	r1, #3
 801c812:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	2220      	movs	r2, #32
 801c818:	2100      	movs	r1, #0
 801c81a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801c81c:	2303      	movs	r3, #3
 801c81e:	e082      	b.n	801c926 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	68db      	ldr	r3, [r3, #12]
 801c826:	2204      	movs	r2, #4
 801c828:	4013      	ands	r3, r2
 801c82a:	d1e5      	bne.n	801c7f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	689a      	ldr	r2, [r3, #8]
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	493f      	ldr	r1, [pc, #252]	@ (801c934 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801c838:	400a      	ands	r2, r1
 801c83a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	68db      	ldr	r3, [r3, #12]
 801c842:	22ff      	movs	r2, #255	@ 0xff
 801c844:	401a      	ands	r2, r3
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	493b      	ldr	r1, [pc, #236]	@ (801c938 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801c84c:	430a      	orrs	r2, r1
 801c84e:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c850:	4b37      	ldr	r3, [pc, #220]	@ (801c930 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	22fa      	movs	r2, #250	@ 0xfa
 801c856:	01d1      	lsls	r1, r2, #7
 801c858:	0018      	movs	r0, r3
 801c85a:	f7e3 fca3 	bl	80001a4 <__udivsi3>
 801c85e:	0003      	movs	r3, r0
 801c860:	001a      	movs	r2, r3
 801c862:	0013      	movs	r3, r2
 801c864:	015b      	lsls	r3, r3, #5
 801c866:	1a9b      	subs	r3, r3, r2
 801c868:	009b      	lsls	r3, r3, #2
 801c86a:	189b      	adds	r3, r3, r2
 801c86c:	00db      	lsls	r3, r3, #3
 801c86e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801c870:	697b      	ldr	r3, [r7, #20]
 801c872:	3b01      	subs	r3, #1
 801c874:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801c876:	697b      	ldr	r3, [r7, #20]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d10d      	bne.n	801c898 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	22ff      	movs	r2, #255	@ 0xff
 801c882:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	2221      	movs	r2, #33	@ 0x21
 801c888:	2103      	movs	r1, #3
 801c88a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	2220      	movs	r2, #32
 801c890:	2100      	movs	r1, #0
 801c892:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c894:	2303      	movs	r3, #3
 801c896:	e046      	b.n	801c926 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	68db      	ldr	r3, [r3, #12]
 801c89e:	2204      	movs	r2, #4
 801c8a0:	4013      	ands	r3, r2
 801c8a2:	d0e5      	beq.n	801c870 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	689a      	ldr	r2, [r3, #8]
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	2107      	movs	r1, #7
 801c8b0:	438a      	bics	r2, r1
 801c8b2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	6899      	ldr	r1, [r3, #8]
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	687a      	ldr	r2, [r7, #4]
 801c8c0:	430a      	orrs	r2, r1
 801c8c2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	68ba      	ldr	r2, [r7, #8]
 801c8ca:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801c8cc:	4b1b      	ldr	r3, [pc, #108]	@ (801c93c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c8ce:	681a      	ldr	r2, [r3, #0]
 801c8d0:	4b1a      	ldr	r3, [pc, #104]	@ (801c93c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c8d2:	2180      	movs	r1, #128	@ 0x80
 801c8d4:	0349      	lsls	r1, r1, #13
 801c8d6:	430a      	orrs	r2, r1
 801c8d8:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801c8da:	4b18      	ldr	r3, [pc, #96]	@ (801c93c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c8dc:	689a      	ldr	r2, [r3, #8]
 801c8de:	4b17      	ldr	r3, [pc, #92]	@ (801c93c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c8e0:	2180      	movs	r1, #128	@ 0x80
 801c8e2:	0349      	lsls	r1, r1, #13
 801c8e4:	430a      	orrs	r2, r1
 801c8e6:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	689a      	ldr	r2, [r3, #8]
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	2180      	movs	r1, #128	@ 0x80
 801c8f4:	01c9      	lsls	r1, r1, #7
 801c8f6:	430a      	orrs	r2, r1
 801c8f8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	689a      	ldr	r2, [r3, #8]
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	2180      	movs	r1, #128	@ 0x80
 801c906:	00c9      	lsls	r1, r1, #3
 801c908:	430a      	orrs	r2, r1
 801c90a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	22ff      	movs	r2, #255	@ 0xff
 801c912:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	2221      	movs	r2, #33	@ 0x21
 801c918:	2101      	movs	r1, #1
 801c91a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	2220      	movs	r2, #32
 801c920:	2100      	movs	r1, #0
 801c922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c924:	2300      	movs	r3, #0
}
 801c926:	0018      	movs	r0, r3
 801c928:	46bd      	mov	sp, r7
 801c92a:	b006      	add	sp, #24
 801c92c:	bd80      	pop	{r7, pc}
 801c92e:	46c0      	nop			@ (mov r8, r8)
 801c930:	200000ec 	.word	0x200000ec
 801c934:	fffffbff 	.word	0xfffffbff
 801c938:	fffffb7f 	.word	0xfffffb7f
 801c93c:	40010400 	.word	0x40010400

0801c940 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801c940:	b580      	push	{r7, lr}
 801c942:	b084      	sub	sp, #16
 801c944:	af00      	add	r7, sp, #0
 801c946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c948:	2300      	movs	r3, #0
 801c94a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	2220      	movs	r2, #32
 801c950:	5c9b      	ldrb	r3, [r3, r2]
 801c952:	2b01      	cmp	r3, #1
 801c954:	d101      	bne.n	801c95a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801c956:	2302      	movs	r3, #2
 801c958:	e04e      	b.n	801c9f8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	2220      	movs	r2, #32
 801c95e:	2101      	movs	r1, #1
 801c960:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	2221      	movs	r2, #33	@ 0x21
 801c966:	2102      	movs	r1, #2
 801c968:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	22ca      	movs	r2, #202	@ 0xca
 801c970:	625a      	str	r2, [r3, #36]	@ 0x24
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	2253      	movs	r2, #83	@ 0x53
 801c978:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	689a      	ldr	r2, [r3, #8]
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	491e      	ldr	r1, [pc, #120]	@ (801ca00 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801c986:	400a      	ands	r2, r1
 801c988:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	689a      	ldr	r2, [r3, #8]
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	491b      	ldr	r1, [pc, #108]	@ (801ca04 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801c996:	400a      	ands	r2, r1
 801c998:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c99a:	f7f7 ff91 	bl	80148c0 <HAL_GetTick>
 801c99e:	0003      	movs	r3, r0
 801c9a0:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801c9a2:	e016      	b.n	801c9d2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c9a4:	f7f7 ff8c 	bl	80148c0 <HAL_GetTick>
 801c9a8:	0002      	movs	r2, r0
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	1ad2      	subs	r2, r2, r3
 801c9ae:	23fa      	movs	r3, #250	@ 0xfa
 801c9b0:	009b      	lsls	r3, r3, #2
 801c9b2:	429a      	cmp	r2, r3
 801c9b4:	d90d      	bls.n	801c9d2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	22ff      	movs	r2, #255	@ 0xff
 801c9bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	2221      	movs	r2, #33	@ 0x21
 801c9c2:	2103      	movs	r1, #3
 801c9c4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	2220      	movs	r2, #32
 801c9ca:	2100      	movs	r1, #0
 801c9cc:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c9ce:	2303      	movs	r3, #3
 801c9d0:	e012      	b.n	801c9f8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	68db      	ldr	r3, [r3, #12]
 801c9d8:	2204      	movs	r2, #4
 801c9da:	4013      	ands	r3, r2
 801c9dc:	d0e2      	beq.n	801c9a4 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	22ff      	movs	r2, #255	@ 0xff
 801c9e4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	2221      	movs	r2, #33	@ 0x21
 801c9ea:	2101      	movs	r1, #1
 801c9ec:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	2220      	movs	r2, #32
 801c9f2:	2100      	movs	r1, #0
 801c9f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c9f6:	2300      	movs	r3, #0
}
 801c9f8:	0018      	movs	r0, r3
 801c9fa:	46bd      	mov	sp, r7
 801c9fc:	b004      	add	sp, #16
 801c9fe:	bd80      	pop	{r7, pc}
 801ca00:	fffffbff 	.word	0xfffffbff
 801ca04:	ffffbfff 	.word	0xffffbfff

0801ca08 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801ca08:	b580      	push	{r7, lr}
 801ca0a:	b082      	sub	sp, #8
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801ca10:	4b13      	ldr	r3, [pc, #76]	@ (801ca60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801ca12:	2280      	movs	r2, #128	@ 0x80
 801ca14:	0352      	lsls	r2, r2, #13
 801ca16:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	689a      	ldr	r2, [r3, #8]
 801ca1e:	2380      	movs	r3, #128	@ 0x80
 801ca20:	01db      	lsls	r3, r3, #7
 801ca22:	4013      	ands	r3, r2
 801ca24:	d014      	beq.n	801ca50 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	68da      	ldr	r2, [r3, #12]
 801ca2c:	2380      	movs	r3, #128	@ 0x80
 801ca2e:	00db      	lsls	r3, r3, #3
 801ca30:	4013      	ands	r3, r2
 801ca32:	d00d      	beq.n	801ca50 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	68db      	ldr	r3, [r3, #12]
 801ca3a:	22ff      	movs	r2, #255	@ 0xff
 801ca3c:	401a      	ands	r2, r3
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	4908      	ldr	r1, [pc, #32]	@ (801ca64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801ca44:	430a      	orrs	r2, r1
 801ca46:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	0018      	movs	r0, r3
 801ca4c:	f000 f80c 	bl	801ca68 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	2221      	movs	r2, #33	@ 0x21
 801ca54:	2101      	movs	r1, #1
 801ca56:	5499      	strb	r1, [r3, r2]
}
 801ca58:	46c0      	nop			@ (mov r8, r8)
 801ca5a:	46bd      	mov	sp, r7
 801ca5c:	b002      	add	sp, #8
 801ca5e:	bd80      	pop	{r7, pc}
 801ca60:	40010400 	.word	0x40010400
 801ca64:	fffffb7f 	.word	0xfffffb7f

0801ca68 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801ca68:	b580      	push	{r7, lr}
 801ca6a:	b082      	sub	sp, #8
 801ca6c:	af00      	add	r7, sp, #0
 801ca6e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801ca70:	46c0      	nop			@ (mov r8, r8)
 801ca72:	46bd      	mov	sp, r7
 801ca74:	b002      	add	sp, #8
 801ca76:	bd80      	pop	{r7, pc}

0801ca78 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801ca78:	b580      	push	{r7, lr}
 801ca7a:	b086      	sub	sp, #24
 801ca7c:	af00      	add	r7, sp, #0
 801ca7e:	60f8      	str	r0, [r7, #12]
 801ca80:	60b9      	str	r1, [r7, #8]
 801ca82:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801ca84:	2300      	movs	r3, #0
 801ca86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	3350      	adds	r3, #80	@ 0x50
 801ca8e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801ca90:	68bb      	ldr	r3, [r7, #8]
 801ca92:	009b      	lsls	r3, r3, #2
 801ca94:	697a      	ldr	r2, [r7, #20]
 801ca96:	18d3      	adds	r3, r2, r3
 801ca98:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801ca9a:	697b      	ldr	r3, [r7, #20]
 801ca9c:	687a      	ldr	r2, [r7, #4]
 801ca9e:	601a      	str	r2, [r3, #0]
}
 801caa0:	46c0      	nop			@ (mov r8, r8)
 801caa2:	46bd      	mov	sp, r7
 801caa4:	b006      	add	sp, #24
 801caa6:	bd80      	pop	{r7, pc}

0801caa8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801caa8:	b580      	push	{r7, lr}
 801caaa:	b084      	sub	sp, #16
 801caac:	af00      	add	r7, sp, #0
 801caae:	6078      	str	r0, [r7, #4]
 801cab0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801cab2:	2300      	movs	r3, #0
 801cab4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	3350      	adds	r3, #80	@ 0x50
 801cabc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801cabe:	683b      	ldr	r3, [r7, #0]
 801cac0:	009b      	lsls	r3, r3, #2
 801cac2:	68fa      	ldr	r2, [r7, #12]
 801cac4:	18d3      	adds	r3, r2, r3
 801cac6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801cac8:	68fb      	ldr	r3, [r7, #12]
 801caca:	681b      	ldr	r3, [r3, #0]
}
 801cacc:	0018      	movs	r0, r3
 801cace:	46bd      	mov	sp, r7
 801cad0:	b004      	add	sp, #16
 801cad2:	bd80      	pop	{r7, pc}

0801cad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cad4:	b580      	push	{r7, lr}
 801cad6:	b082      	sub	sp, #8
 801cad8:	af00      	add	r7, sp, #0
 801cada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d101      	bne.n	801cae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cae2:	2301      	movs	r3, #1
 801cae4:	e032      	b.n	801cb4c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	2239      	movs	r2, #57	@ 0x39
 801caea:	5c9b      	ldrb	r3, [r3, r2]
 801caec:	b2db      	uxtb	r3, r3
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d107      	bne.n	801cb02 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	2238      	movs	r2, #56	@ 0x38
 801caf6:	2100      	movs	r1, #0
 801caf8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	0018      	movs	r0, r3
 801cafe:	f7f6 fec3 	bl	8013888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	2239      	movs	r2, #57	@ 0x39
 801cb06:	2102      	movs	r1, #2
 801cb08:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	681a      	ldr	r2, [r3, #0]
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	3304      	adds	r3, #4
 801cb12:	0019      	movs	r1, r3
 801cb14:	0010      	movs	r0, r2
 801cb16:	f000 fa1d 	bl	801cf54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	223e      	movs	r2, #62	@ 0x3e
 801cb1e:	2101      	movs	r1, #1
 801cb20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	223a      	movs	r2, #58	@ 0x3a
 801cb26:	2101      	movs	r1, #1
 801cb28:	5499      	strb	r1, [r3, r2]
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	223b      	movs	r2, #59	@ 0x3b
 801cb2e:	2101      	movs	r1, #1
 801cb30:	5499      	strb	r1, [r3, r2]
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	223c      	movs	r2, #60	@ 0x3c
 801cb36:	2101      	movs	r1, #1
 801cb38:	5499      	strb	r1, [r3, r2]
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	223d      	movs	r2, #61	@ 0x3d
 801cb3e:	2101      	movs	r1, #1
 801cb40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	2239      	movs	r2, #57	@ 0x39
 801cb46:	2101      	movs	r1, #1
 801cb48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cb4a:	2300      	movs	r3, #0
}
 801cb4c:	0018      	movs	r0, r3
 801cb4e:	46bd      	mov	sp, r7
 801cb50:	b002      	add	sp, #8
 801cb52:	bd80      	pop	{r7, pc}

0801cb54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b084      	sub	sp, #16
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	2239      	movs	r2, #57	@ 0x39
 801cb60:	5c9b      	ldrb	r3, [r3, r2]
 801cb62:	b2db      	uxtb	r3, r3
 801cb64:	2b01      	cmp	r3, #1
 801cb66:	d001      	beq.n	801cb6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801cb68:	2301      	movs	r3, #1
 801cb6a:	e033      	b.n	801cbd4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	2239      	movs	r2, #57	@ 0x39
 801cb70:	2102      	movs	r1, #2
 801cb72:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	681a      	ldr	r2, [r3, #0]
 801cb78:	2380      	movs	r3, #128	@ 0x80
 801cb7a:	05db      	lsls	r3, r3, #23
 801cb7c:	429a      	cmp	r2, r3
 801cb7e:	d00e      	beq.n	801cb9e <HAL_TIM_Base_Start+0x4a>
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	4a15      	ldr	r2, [pc, #84]	@ (801cbdc <HAL_TIM_Base_Start+0x88>)
 801cb86:	4293      	cmp	r3, r2
 801cb88:	d009      	beq.n	801cb9e <HAL_TIM_Base_Start+0x4a>
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	4a14      	ldr	r2, [pc, #80]	@ (801cbe0 <HAL_TIM_Base_Start+0x8c>)
 801cb90:	4293      	cmp	r3, r2
 801cb92:	d004      	beq.n	801cb9e <HAL_TIM_Base_Start+0x4a>
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	4a12      	ldr	r2, [pc, #72]	@ (801cbe4 <HAL_TIM_Base_Start+0x90>)
 801cb9a:	4293      	cmp	r3, r2
 801cb9c:	d111      	bne.n	801cbc2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	689b      	ldr	r3, [r3, #8]
 801cba4:	2207      	movs	r2, #7
 801cba6:	4013      	ands	r3, r2
 801cba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cbaa:	68fb      	ldr	r3, [r7, #12]
 801cbac:	2b06      	cmp	r3, #6
 801cbae:	d010      	beq.n	801cbd2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	681a      	ldr	r2, [r3, #0]
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	2101      	movs	r1, #1
 801cbbc:	430a      	orrs	r2, r1
 801cbbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cbc0:	e007      	b.n	801cbd2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	681a      	ldr	r2, [r3, #0]
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	2101      	movs	r1, #1
 801cbce:	430a      	orrs	r2, r1
 801cbd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cbd2:	2300      	movs	r3, #0
}
 801cbd4:	0018      	movs	r0, r3
 801cbd6:	46bd      	mov	sp, r7
 801cbd8:	b004      	add	sp, #16
 801cbda:	bd80      	pop	{r7, pc}
 801cbdc:	40000400 	.word	0x40000400
 801cbe0:	40010800 	.word	0x40010800
 801cbe4:	40011400 	.word	0x40011400

0801cbe8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	b082      	sub	sp, #8
 801cbec:	af00      	add	r7, sp, #0
 801cbee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	6a1b      	ldr	r3, [r3, #32]
 801cbf6:	4a0a      	ldr	r2, [pc, #40]	@ (801cc20 <HAL_TIM_Base_Stop+0x38>)
 801cbf8:	4013      	ands	r3, r2
 801cbfa:	d107      	bne.n	801cc0c <HAL_TIM_Base_Stop+0x24>
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	681b      	ldr	r3, [r3, #0]
 801cc00:	681a      	ldr	r2, [r3, #0]
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	2101      	movs	r1, #1
 801cc08:	438a      	bics	r2, r1
 801cc0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	2239      	movs	r2, #57	@ 0x39
 801cc10:	2101      	movs	r1, #1
 801cc12:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801cc14:	2300      	movs	r3, #0
}
 801cc16:	0018      	movs	r0, r3
 801cc18:	46bd      	mov	sp, r7
 801cc1a:	b002      	add	sp, #8
 801cc1c:	bd80      	pop	{r7, pc}
 801cc1e:	46c0      	nop			@ (mov r8, r8)
 801cc20:	00001111 	.word	0x00001111

0801cc24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cc24:	b580      	push	{r7, lr}
 801cc26:	b082      	sub	sp, #8
 801cc28:	af00      	add	r7, sp, #0
 801cc2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d101      	bne.n	801cc36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cc32:	2301      	movs	r3, #1
 801cc34:	e032      	b.n	801cc9c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	2239      	movs	r2, #57	@ 0x39
 801cc3a:	5c9b      	ldrb	r3, [r3, r2]
 801cc3c:	b2db      	uxtb	r3, r3
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d107      	bne.n	801cc52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	2238      	movs	r2, #56	@ 0x38
 801cc46:	2100      	movs	r1, #0
 801cc48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	0018      	movs	r0, r3
 801cc4e:	f7f6 fdf7 	bl	8013840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	2239      	movs	r2, #57	@ 0x39
 801cc56:	2102      	movs	r1, #2
 801cc58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	681a      	ldr	r2, [r3, #0]
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	3304      	adds	r3, #4
 801cc62:	0019      	movs	r1, r3
 801cc64:	0010      	movs	r0, r2
 801cc66:	f000 f975 	bl	801cf54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	223e      	movs	r2, #62	@ 0x3e
 801cc6e:	2101      	movs	r1, #1
 801cc70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	223a      	movs	r2, #58	@ 0x3a
 801cc76:	2101      	movs	r1, #1
 801cc78:	5499      	strb	r1, [r3, r2]
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	223b      	movs	r2, #59	@ 0x3b
 801cc7e:	2101      	movs	r1, #1
 801cc80:	5499      	strb	r1, [r3, r2]
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	223c      	movs	r2, #60	@ 0x3c
 801cc86:	2101      	movs	r1, #1
 801cc88:	5499      	strb	r1, [r3, r2]
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	223d      	movs	r2, #61	@ 0x3d
 801cc8e:	2101      	movs	r1, #1
 801cc90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	2239      	movs	r2, #57	@ 0x39
 801cc96:	2101      	movs	r1, #1
 801cc98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cc9a:	2300      	movs	r3, #0
}
 801cc9c:	0018      	movs	r0, r3
 801cc9e:	46bd      	mov	sp, r7
 801cca0:	b002      	add	sp, #8
 801cca2:	bd80      	pop	{r7, pc}

0801cca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801cca4:	b580      	push	{r7, lr}
 801cca6:	b084      	sub	sp, #16
 801cca8:	af00      	add	r7, sp, #0
 801ccaa:	6078      	str	r0, [r7, #4]
 801ccac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ccae:	683b      	ldr	r3, [r7, #0]
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d108      	bne.n	801ccc6 <HAL_TIM_PWM_Start+0x22>
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	223a      	movs	r2, #58	@ 0x3a
 801ccb8:	5c9b      	ldrb	r3, [r3, r2]
 801ccba:	b2db      	uxtb	r3, r3
 801ccbc:	3b01      	subs	r3, #1
 801ccbe:	1e5a      	subs	r2, r3, #1
 801ccc0:	4193      	sbcs	r3, r2
 801ccc2:	b2db      	uxtb	r3, r3
 801ccc4:	e01f      	b.n	801cd06 <HAL_TIM_PWM_Start+0x62>
 801ccc6:	683b      	ldr	r3, [r7, #0]
 801ccc8:	2b04      	cmp	r3, #4
 801ccca:	d108      	bne.n	801ccde <HAL_TIM_PWM_Start+0x3a>
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	223b      	movs	r2, #59	@ 0x3b
 801ccd0:	5c9b      	ldrb	r3, [r3, r2]
 801ccd2:	b2db      	uxtb	r3, r3
 801ccd4:	3b01      	subs	r3, #1
 801ccd6:	1e5a      	subs	r2, r3, #1
 801ccd8:	4193      	sbcs	r3, r2
 801ccda:	b2db      	uxtb	r3, r3
 801ccdc:	e013      	b.n	801cd06 <HAL_TIM_PWM_Start+0x62>
 801ccde:	683b      	ldr	r3, [r7, #0]
 801cce0:	2b08      	cmp	r3, #8
 801cce2:	d108      	bne.n	801ccf6 <HAL_TIM_PWM_Start+0x52>
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	223c      	movs	r2, #60	@ 0x3c
 801cce8:	5c9b      	ldrb	r3, [r3, r2]
 801ccea:	b2db      	uxtb	r3, r3
 801ccec:	3b01      	subs	r3, #1
 801ccee:	1e5a      	subs	r2, r3, #1
 801ccf0:	4193      	sbcs	r3, r2
 801ccf2:	b2db      	uxtb	r3, r3
 801ccf4:	e007      	b.n	801cd06 <HAL_TIM_PWM_Start+0x62>
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	223d      	movs	r2, #61	@ 0x3d
 801ccfa:	5c9b      	ldrb	r3, [r3, r2]
 801ccfc:	b2db      	uxtb	r3, r3
 801ccfe:	3b01      	subs	r3, #1
 801cd00:	1e5a      	subs	r2, r3, #1
 801cd02:	4193      	sbcs	r3, r2
 801cd04:	b2db      	uxtb	r3, r3
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d001      	beq.n	801cd0e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801cd0a:	2301      	movs	r3, #1
 801cd0c:	e052      	b.n	801cdb4 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801cd0e:	683b      	ldr	r3, [r7, #0]
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d104      	bne.n	801cd1e <HAL_TIM_PWM_Start+0x7a>
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	223a      	movs	r2, #58	@ 0x3a
 801cd18:	2102      	movs	r1, #2
 801cd1a:	5499      	strb	r1, [r3, r2]
 801cd1c:	e013      	b.n	801cd46 <HAL_TIM_PWM_Start+0xa2>
 801cd1e:	683b      	ldr	r3, [r7, #0]
 801cd20:	2b04      	cmp	r3, #4
 801cd22:	d104      	bne.n	801cd2e <HAL_TIM_PWM_Start+0x8a>
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	223b      	movs	r2, #59	@ 0x3b
 801cd28:	2102      	movs	r1, #2
 801cd2a:	5499      	strb	r1, [r3, r2]
 801cd2c:	e00b      	b.n	801cd46 <HAL_TIM_PWM_Start+0xa2>
 801cd2e:	683b      	ldr	r3, [r7, #0]
 801cd30:	2b08      	cmp	r3, #8
 801cd32:	d104      	bne.n	801cd3e <HAL_TIM_PWM_Start+0x9a>
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	223c      	movs	r2, #60	@ 0x3c
 801cd38:	2102      	movs	r1, #2
 801cd3a:	5499      	strb	r1, [r3, r2]
 801cd3c:	e003      	b.n	801cd46 <HAL_TIM_PWM_Start+0xa2>
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	223d      	movs	r2, #61	@ 0x3d
 801cd42:	2102      	movs	r1, #2
 801cd44:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	6839      	ldr	r1, [r7, #0]
 801cd4c:	2201      	movs	r2, #1
 801cd4e:	0018      	movs	r0, r3
 801cd50:	f000 fa62 	bl	801d218 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	681a      	ldr	r2, [r3, #0]
 801cd58:	2380      	movs	r3, #128	@ 0x80
 801cd5a:	05db      	lsls	r3, r3, #23
 801cd5c:	429a      	cmp	r2, r3
 801cd5e:	d00e      	beq.n	801cd7e <HAL_TIM_PWM_Start+0xda>
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	4a15      	ldr	r2, [pc, #84]	@ (801cdbc <HAL_TIM_PWM_Start+0x118>)
 801cd66:	4293      	cmp	r3, r2
 801cd68:	d009      	beq.n	801cd7e <HAL_TIM_PWM_Start+0xda>
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	4a14      	ldr	r2, [pc, #80]	@ (801cdc0 <HAL_TIM_PWM_Start+0x11c>)
 801cd70:	4293      	cmp	r3, r2
 801cd72:	d004      	beq.n	801cd7e <HAL_TIM_PWM_Start+0xda>
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	681b      	ldr	r3, [r3, #0]
 801cd78:	4a12      	ldr	r2, [pc, #72]	@ (801cdc4 <HAL_TIM_PWM_Start+0x120>)
 801cd7a:	4293      	cmp	r3, r2
 801cd7c:	d111      	bne.n	801cda2 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	689b      	ldr	r3, [r3, #8]
 801cd84:	2207      	movs	r2, #7
 801cd86:	4013      	ands	r3, r2
 801cd88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	2b06      	cmp	r3, #6
 801cd8e:	d010      	beq.n	801cdb2 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	681a      	ldr	r2, [r3, #0]
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	2101      	movs	r1, #1
 801cd9c:	430a      	orrs	r2, r1
 801cd9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cda0:	e007      	b.n	801cdb2 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	681a      	ldr	r2, [r3, #0]
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	2101      	movs	r1, #1
 801cdae:	430a      	orrs	r2, r1
 801cdb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cdb2:	2300      	movs	r3, #0
}
 801cdb4:	0018      	movs	r0, r3
 801cdb6:	46bd      	mov	sp, r7
 801cdb8:	b004      	add	sp, #16
 801cdba:	bd80      	pop	{r7, pc}
 801cdbc:	40000400 	.word	0x40000400
 801cdc0:	40010800 	.word	0x40010800
 801cdc4:	40011400 	.word	0x40011400

0801cdc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801cdc8:	b580      	push	{r7, lr}
 801cdca:	b086      	sub	sp, #24
 801cdcc:	af00      	add	r7, sp, #0
 801cdce:	60f8      	str	r0, [r7, #12]
 801cdd0:	60b9      	str	r1, [r7, #8]
 801cdd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801cdd4:	2317      	movs	r3, #23
 801cdd6:	18fb      	adds	r3, r7, r3
 801cdd8:	2200      	movs	r2, #0
 801cdda:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801cddc:	68fb      	ldr	r3, [r7, #12]
 801cdde:	2238      	movs	r2, #56	@ 0x38
 801cde0:	5c9b      	ldrb	r3, [r3, r2]
 801cde2:	2b01      	cmp	r3, #1
 801cde4:	d101      	bne.n	801cdea <HAL_TIM_PWM_ConfigChannel+0x22>
 801cde6:	2302      	movs	r3, #2
 801cde8:	e0ad      	b.n	801cf46 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801cdea:	68fb      	ldr	r3, [r7, #12]
 801cdec:	2238      	movs	r2, #56	@ 0x38
 801cdee:	2101      	movs	r1, #1
 801cdf0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	2b0c      	cmp	r3, #12
 801cdf6:	d100      	bne.n	801cdfa <HAL_TIM_PWM_ConfigChannel+0x32>
 801cdf8:	e076      	b.n	801cee8 <HAL_TIM_PWM_ConfigChannel+0x120>
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	2b0c      	cmp	r3, #12
 801cdfe:	d900      	bls.n	801ce02 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801ce00:	e095      	b.n	801cf2e <HAL_TIM_PWM_ConfigChannel+0x166>
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	2b08      	cmp	r3, #8
 801ce06:	d04e      	beq.n	801cea6 <HAL_TIM_PWM_ConfigChannel+0xde>
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	2b08      	cmp	r3, #8
 801ce0c:	d900      	bls.n	801ce10 <HAL_TIM_PWM_ConfigChannel+0x48>
 801ce0e:	e08e      	b.n	801cf2e <HAL_TIM_PWM_ConfigChannel+0x166>
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d003      	beq.n	801ce1e <HAL_TIM_PWM_ConfigChannel+0x56>
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	2b04      	cmp	r3, #4
 801ce1a:	d021      	beq.n	801ce60 <HAL_TIM_PWM_ConfigChannel+0x98>
 801ce1c:	e087      	b.n	801cf2e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	68ba      	ldr	r2, [r7, #8]
 801ce24:	0011      	movs	r1, r2
 801ce26:	0018      	movs	r0, r3
 801ce28:	f000 f8f2 	bl	801d010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801ce2c:	68fb      	ldr	r3, [r7, #12]
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	699a      	ldr	r2, [r3, #24]
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	2108      	movs	r1, #8
 801ce38:	430a      	orrs	r2, r1
 801ce3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ce3c:	68fb      	ldr	r3, [r7, #12]
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	699a      	ldr	r2, [r3, #24]
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	2104      	movs	r1, #4
 801ce48:	438a      	bics	r2, r1
 801ce4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ce4c:	68fb      	ldr	r3, [r7, #12]
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	6999      	ldr	r1, [r3, #24]
 801ce52:	68bb      	ldr	r3, [r7, #8]
 801ce54:	68da      	ldr	r2, [r3, #12]
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	430a      	orrs	r2, r1
 801ce5c:	619a      	str	r2, [r3, #24]
      break;
 801ce5e:	e06b      	b.n	801cf38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	68ba      	ldr	r2, [r7, #8]
 801ce66:	0011      	movs	r1, r2
 801ce68:	0018      	movs	r0, r3
 801ce6a:	f000 f90d 	bl	801d088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	699a      	ldr	r2, [r3, #24]
 801ce74:	68fb      	ldr	r3, [r7, #12]
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	2180      	movs	r1, #128	@ 0x80
 801ce7a:	0109      	lsls	r1, r1, #4
 801ce7c:	430a      	orrs	r2, r1
 801ce7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	699a      	ldr	r2, [r3, #24]
 801ce86:	68fb      	ldr	r3, [r7, #12]
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	4931      	ldr	r1, [pc, #196]	@ (801cf50 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801ce8c:	400a      	ands	r2, r1
 801ce8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	6999      	ldr	r1, [r3, #24]
 801ce96:	68bb      	ldr	r3, [r7, #8]
 801ce98:	68db      	ldr	r3, [r3, #12]
 801ce9a:	021a      	lsls	r2, r3, #8
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	430a      	orrs	r2, r1
 801cea2:	619a      	str	r2, [r3, #24]
      break;
 801cea4:	e048      	b.n	801cf38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	68ba      	ldr	r2, [r7, #8]
 801ceac:	0011      	movs	r1, r2
 801ceae:	0018      	movs	r0, r3
 801ceb0:	f000 f92c 	bl	801d10c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	69da      	ldr	r2, [r3, #28]
 801ceba:	68fb      	ldr	r3, [r7, #12]
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	2108      	movs	r1, #8
 801cec0:	430a      	orrs	r2, r1
 801cec2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	69da      	ldr	r2, [r3, #28]
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	2104      	movs	r1, #4
 801ced0:	438a      	bics	r2, r1
 801ced2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801ced4:	68fb      	ldr	r3, [r7, #12]
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	69d9      	ldr	r1, [r3, #28]
 801ceda:	68bb      	ldr	r3, [r7, #8]
 801cedc:	68da      	ldr	r2, [r3, #12]
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	430a      	orrs	r2, r1
 801cee4:	61da      	str	r2, [r3, #28]
      break;
 801cee6:	e027      	b.n	801cf38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	68ba      	ldr	r2, [r7, #8]
 801ceee:	0011      	movs	r1, r2
 801cef0:	0018      	movs	r0, r3
 801cef2:	f000 f94b 	bl	801d18c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801cef6:	68fb      	ldr	r3, [r7, #12]
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	69da      	ldr	r2, [r3, #28]
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	2180      	movs	r1, #128	@ 0x80
 801cf02:	0109      	lsls	r1, r1, #4
 801cf04:	430a      	orrs	r2, r1
 801cf06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	69da      	ldr	r2, [r3, #28]
 801cf0e:	68fb      	ldr	r3, [r7, #12]
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	490f      	ldr	r1, [pc, #60]	@ (801cf50 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cf14:	400a      	ands	r2, r1
 801cf16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	69d9      	ldr	r1, [r3, #28]
 801cf1e:	68bb      	ldr	r3, [r7, #8]
 801cf20:	68db      	ldr	r3, [r3, #12]
 801cf22:	021a      	lsls	r2, r3, #8
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	430a      	orrs	r2, r1
 801cf2a:	61da      	str	r2, [r3, #28]
      break;
 801cf2c:	e004      	b.n	801cf38 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801cf2e:	2317      	movs	r3, #23
 801cf30:	18fb      	adds	r3, r7, r3
 801cf32:	2201      	movs	r2, #1
 801cf34:	701a      	strb	r2, [r3, #0]
      break;
 801cf36:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801cf38:	68fb      	ldr	r3, [r7, #12]
 801cf3a:	2238      	movs	r2, #56	@ 0x38
 801cf3c:	2100      	movs	r1, #0
 801cf3e:	5499      	strb	r1, [r3, r2]

  return status;
 801cf40:	2317      	movs	r3, #23
 801cf42:	18fb      	adds	r3, r7, r3
 801cf44:	781b      	ldrb	r3, [r3, #0]
}
 801cf46:	0018      	movs	r0, r3
 801cf48:	46bd      	mov	sp, r7
 801cf4a:	b006      	add	sp, #24
 801cf4c:	bd80      	pop	{r7, pc}
 801cf4e:	46c0      	nop			@ (mov r8, r8)
 801cf50:	fffffbff 	.word	0xfffffbff

0801cf54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801cf54:	b580      	push	{r7, lr}
 801cf56:	b084      	sub	sp, #16
 801cf58:	af00      	add	r7, sp, #0
 801cf5a:	6078      	str	r0, [r7, #4]
 801cf5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801cf64:	687a      	ldr	r2, [r7, #4]
 801cf66:	2380      	movs	r3, #128	@ 0x80
 801cf68:	05db      	lsls	r3, r3, #23
 801cf6a:	429a      	cmp	r2, r3
 801cf6c:	d00b      	beq.n	801cf86 <TIM_Base_SetConfig+0x32>
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	4a23      	ldr	r2, [pc, #140]	@ (801d000 <TIM_Base_SetConfig+0xac>)
 801cf72:	4293      	cmp	r3, r2
 801cf74:	d007      	beq.n	801cf86 <TIM_Base_SetConfig+0x32>
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	4a22      	ldr	r2, [pc, #136]	@ (801d004 <TIM_Base_SetConfig+0xb0>)
 801cf7a:	4293      	cmp	r3, r2
 801cf7c:	d003      	beq.n	801cf86 <TIM_Base_SetConfig+0x32>
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	4a21      	ldr	r2, [pc, #132]	@ (801d008 <TIM_Base_SetConfig+0xb4>)
 801cf82:	4293      	cmp	r3, r2
 801cf84:	d108      	bne.n	801cf98 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801cf86:	68fb      	ldr	r3, [r7, #12]
 801cf88:	2270      	movs	r2, #112	@ 0x70
 801cf8a:	4393      	bics	r3, r2
 801cf8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801cf8e:	683b      	ldr	r3, [r7, #0]
 801cf90:	685b      	ldr	r3, [r3, #4]
 801cf92:	68fa      	ldr	r2, [r7, #12]
 801cf94:	4313      	orrs	r3, r2
 801cf96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801cf98:	687a      	ldr	r2, [r7, #4]
 801cf9a:	2380      	movs	r3, #128	@ 0x80
 801cf9c:	05db      	lsls	r3, r3, #23
 801cf9e:	429a      	cmp	r2, r3
 801cfa0:	d00b      	beq.n	801cfba <TIM_Base_SetConfig+0x66>
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	4a16      	ldr	r2, [pc, #88]	@ (801d000 <TIM_Base_SetConfig+0xac>)
 801cfa6:	4293      	cmp	r3, r2
 801cfa8:	d007      	beq.n	801cfba <TIM_Base_SetConfig+0x66>
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	4a15      	ldr	r2, [pc, #84]	@ (801d004 <TIM_Base_SetConfig+0xb0>)
 801cfae:	4293      	cmp	r3, r2
 801cfb0:	d003      	beq.n	801cfba <TIM_Base_SetConfig+0x66>
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	4a14      	ldr	r2, [pc, #80]	@ (801d008 <TIM_Base_SetConfig+0xb4>)
 801cfb6:	4293      	cmp	r3, r2
 801cfb8:	d108      	bne.n	801cfcc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801cfba:	68fb      	ldr	r3, [r7, #12]
 801cfbc:	4a13      	ldr	r2, [pc, #76]	@ (801d00c <TIM_Base_SetConfig+0xb8>)
 801cfbe:	4013      	ands	r3, r2
 801cfc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801cfc2:	683b      	ldr	r3, [r7, #0]
 801cfc4:	68db      	ldr	r3, [r3, #12]
 801cfc6:	68fa      	ldr	r2, [r7, #12]
 801cfc8:	4313      	orrs	r3, r2
 801cfca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	2280      	movs	r2, #128	@ 0x80
 801cfd0:	4393      	bics	r3, r2
 801cfd2:	001a      	movs	r2, r3
 801cfd4:	683b      	ldr	r3, [r7, #0]
 801cfd6:	691b      	ldr	r3, [r3, #16]
 801cfd8:	4313      	orrs	r3, r2
 801cfda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	68fa      	ldr	r2, [r7, #12]
 801cfe0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801cfe2:	683b      	ldr	r3, [r7, #0]
 801cfe4:	689a      	ldr	r2, [r3, #8]
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801cfea:	683b      	ldr	r3, [r7, #0]
 801cfec:	681a      	ldr	r2, [r3, #0]
 801cfee:	687b      	ldr	r3, [r7, #4]
 801cff0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	2201      	movs	r2, #1
 801cff6:	615a      	str	r2, [r3, #20]
}
 801cff8:	46c0      	nop			@ (mov r8, r8)
 801cffa:	46bd      	mov	sp, r7
 801cffc:	b004      	add	sp, #16
 801cffe:	bd80      	pop	{r7, pc}
 801d000:	40000400 	.word	0x40000400
 801d004:	40010800 	.word	0x40010800
 801d008:	40011400 	.word	0x40011400
 801d00c:	fffffcff 	.word	0xfffffcff

0801d010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d010:	b580      	push	{r7, lr}
 801d012:	b086      	sub	sp, #24
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]
 801d018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	6a1b      	ldr	r3, [r3, #32]
 801d01e:	2201      	movs	r2, #1
 801d020:	4393      	bics	r3, r2
 801d022:	001a      	movs	r2, r3
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	6a1b      	ldr	r3, [r3, #32]
 801d02c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	685b      	ldr	r3, [r3, #4]
 801d032:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	699b      	ldr	r3, [r3, #24]
 801d038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	2270      	movs	r2, #112	@ 0x70
 801d03e:	4393      	bics	r3, r2
 801d040:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	2203      	movs	r2, #3
 801d046:	4393      	bics	r3, r2
 801d048:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d04a:	683b      	ldr	r3, [r7, #0]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	68fa      	ldr	r2, [r7, #12]
 801d050:	4313      	orrs	r3, r2
 801d052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d054:	697b      	ldr	r3, [r7, #20]
 801d056:	2202      	movs	r2, #2
 801d058:	4393      	bics	r3, r2
 801d05a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d05c:	683b      	ldr	r3, [r7, #0]
 801d05e:	689b      	ldr	r3, [r3, #8]
 801d060:	697a      	ldr	r2, [r7, #20]
 801d062:	4313      	orrs	r3, r2
 801d064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	693a      	ldr	r2, [r7, #16]
 801d06a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	68fa      	ldr	r2, [r7, #12]
 801d070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d072:	683b      	ldr	r3, [r7, #0]
 801d074:	685a      	ldr	r2, [r3, #4]
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	697a      	ldr	r2, [r7, #20]
 801d07e:	621a      	str	r2, [r3, #32]
}
 801d080:	46c0      	nop			@ (mov r8, r8)
 801d082:	46bd      	mov	sp, r7
 801d084:	b006      	add	sp, #24
 801d086:	bd80      	pop	{r7, pc}

0801d088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d088:	b580      	push	{r7, lr}
 801d08a:	b086      	sub	sp, #24
 801d08c:	af00      	add	r7, sp, #0
 801d08e:	6078      	str	r0, [r7, #4]
 801d090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	6a1b      	ldr	r3, [r3, #32]
 801d096:	2210      	movs	r2, #16
 801d098:	4393      	bics	r3, r2
 801d09a:	001a      	movs	r2, r3
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	6a1b      	ldr	r3, [r3, #32]
 801d0a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	685b      	ldr	r3, [r3, #4]
 801d0aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	699b      	ldr	r3, [r3, #24]
 801d0b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d0b2:	68fb      	ldr	r3, [r7, #12]
 801d0b4:	4a13      	ldr	r2, [pc, #76]	@ (801d104 <TIM_OC2_SetConfig+0x7c>)
 801d0b6:	4013      	ands	r3, r2
 801d0b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	4a12      	ldr	r2, [pc, #72]	@ (801d108 <TIM_OC2_SetConfig+0x80>)
 801d0be:	4013      	ands	r3, r2
 801d0c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d0c2:	683b      	ldr	r3, [r7, #0]
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	021b      	lsls	r3, r3, #8
 801d0c8:	68fa      	ldr	r2, [r7, #12]
 801d0ca:	4313      	orrs	r3, r2
 801d0cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d0ce:	697b      	ldr	r3, [r7, #20]
 801d0d0:	2220      	movs	r2, #32
 801d0d2:	4393      	bics	r3, r2
 801d0d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d0d6:	683b      	ldr	r3, [r7, #0]
 801d0d8:	689b      	ldr	r3, [r3, #8]
 801d0da:	011b      	lsls	r3, r3, #4
 801d0dc:	697a      	ldr	r2, [r7, #20]
 801d0de:	4313      	orrs	r3, r2
 801d0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	693a      	ldr	r2, [r7, #16]
 801d0e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	68fa      	ldr	r2, [r7, #12]
 801d0ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d0ee:	683b      	ldr	r3, [r7, #0]
 801d0f0:	685a      	ldr	r2, [r3, #4]
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	697a      	ldr	r2, [r7, #20]
 801d0fa:	621a      	str	r2, [r3, #32]
}
 801d0fc:	46c0      	nop			@ (mov r8, r8)
 801d0fe:	46bd      	mov	sp, r7
 801d100:	b006      	add	sp, #24
 801d102:	bd80      	pop	{r7, pc}
 801d104:	ffff8fff 	.word	0xffff8fff
 801d108:	fffffcff 	.word	0xfffffcff

0801d10c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b086      	sub	sp, #24
 801d110:	af00      	add	r7, sp, #0
 801d112:	6078      	str	r0, [r7, #4]
 801d114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	6a1b      	ldr	r3, [r3, #32]
 801d11a:	4a1a      	ldr	r2, [pc, #104]	@ (801d184 <TIM_OC3_SetConfig+0x78>)
 801d11c:	401a      	ands	r2, r3
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	6a1b      	ldr	r3, [r3, #32]
 801d126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	685b      	ldr	r3, [r3, #4]
 801d12c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d12e:	687b      	ldr	r3, [r7, #4]
 801d130:	69db      	ldr	r3, [r3, #28]
 801d132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d134:	68fb      	ldr	r3, [r7, #12]
 801d136:	2270      	movs	r2, #112	@ 0x70
 801d138:	4393      	bics	r3, r2
 801d13a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d13c:	68fb      	ldr	r3, [r7, #12]
 801d13e:	2203      	movs	r2, #3
 801d140:	4393      	bics	r3, r2
 801d142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d144:	683b      	ldr	r3, [r7, #0]
 801d146:	681b      	ldr	r3, [r3, #0]
 801d148:	68fa      	ldr	r2, [r7, #12]
 801d14a:	4313      	orrs	r3, r2
 801d14c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d14e:	697b      	ldr	r3, [r7, #20]
 801d150:	4a0d      	ldr	r2, [pc, #52]	@ (801d188 <TIM_OC3_SetConfig+0x7c>)
 801d152:	4013      	ands	r3, r2
 801d154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d156:	683b      	ldr	r3, [r7, #0]
 801d158:	689b      	ldr	r3, [r3, #8]
 801d15a:	021b      	lsls	r3, r3, #8
 801d15c:	697a      	ldr	r2, [r7, #20]
 801d15e:	4313      	orrs	r3, r2
 801d160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	693a      	ldr	r2, [r7, #16]
 801d166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	68fa      	ldr	r2, [r7, #12]
 801d16c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d16e:	683b      	ldr	r3, [r7, #0]
 801d170:	685a      	ldr	r2, [r3, #4]
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	697a      	ldr	r2, [r7, #20]
 801d17a:	621a      	str	r2, [r3, #32]
}
 801d17c:	46c0      	nop			@ (mov r8, r8)
 801d17e:	46bd      	mov	sp, r7
 801d180:	b006      	add	sp, #24
 801d182:	bd80      	pop	{r7, pc}
 801d184:	fffffeff 	.word	0xfffffeff
 801d188:	fffffdff 	.word	0xfffffdff

0801d18c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d18c:	b580      	push	{r7, lr}
 801d18e:	b086      	sub	sp, #24
 801d190:	af00      	add	r7, sp, #0
 801d192:	6078      	str	r0, [r7, #4]
 801d194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	6a1b      	ldr	r3, [r3, #32]
 801d19a:	4a1b      	ldr	r2, [pc, #108]	@ (801d208 <TIM_OC4_SetConfig+0x7c>)
 801d19c:	401a      	ands	r2, r3
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	6a1b      	ldr	r3, [r3, #32]
 801d1a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	685b      	ldr	r3, [r3, #4]
 801d1ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	69db      	ldr	r3, [r3, #28]
 801d1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	4a15      	ldr	r2, [pc, #84]	@ (801d20c <TIM_OC4_SetConfig+0x80>)
 801d1b8:	4013      	ands	r3, r2
 801d1ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	4a14      	ldr	r2, [pc, #80]	@ (801d210 <TIM_OC4_SetConfig+0x84>)
 801d1c0:	4013      	ands	r3, r2
 801d1c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d1c4:	683b      	ldr	r3, [r7, #0]
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	021b      	lsls	r3, r3, #8
 801d1ca:	68fa      	ldr	r2, [r7, #12]
 801d1cc:	4313      	orrs	r3, r2
 801d1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d1d0:	697b      	ldr	r3, [r7, #20]
 801d1d2:	4a10      	ldr	r2, [pc, #64]	@ (801d214 <TIM_OC4_SetConfig+0x88>)
 801d1d4:	4013      	ands	r3, r2
 801d1d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d1d8:	683b      	ldr	r3, [r7, #0]
 801d1da:	689b      	ldr	r3, [r3, #8]
 801d1dc:	031b      	lsls	r3, r3, #12
 801d1de:	697a      	ldr	r2, [r7, #20]
 801d1e0:	4313      	orrs	r3, r2
 801d1e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	693a      	ldr	r2, [r7, #16]
 801d1e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	68fa      	ldr	r2, [r7, #12]
 801d1ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d1f0:	683b      	ldr	r3, [r7, #0]
 801d1f2:	685a      	ldr	r2, [r3, #4]
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	697a      	ldr	r2, [r7, #20]
 801d1fc:	621a      	str	r2, [r3, #32]
}
 801d1fe:	46c0      	nop			@ (mov r8, r8)
 801d200:	46bd      	mov	sp, r7
 801d202:	b006      	add	sp, #24
 801d204:	bd80      	pop	{r7, pc}
 801d206:	46c0      	nop			@ (mov r8, r8)
 801d208:	ffffefff 	.word	0xffffefff
 801d20c:	ffff8fff 	.word	0xffff8fff
 801d210:	fffffcff 	.word	0xfffffcff
 801d214:	ffffdfff 	.word	0xffffdfff

0801d218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801d218:	b580      	push	{r7, lr}
 801d21a:	b086      	sub	sp, #24
 801d21c:	af00      	add	r7, sp, #0
 801d21e:	60f8      	str	r0, [r7, #12]
 801d220:	60b9      	str	r1, [r7, #8]
 801d222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d224:	68bb      	ldr	r3, [r7, #8]
 801d226:	221f      	movs	r2, #31
 801d228:	4013      	ands	r3, r2
 801d22a:	2201      	movs	r2, #1
 801d22c:	409a      	lsls	r2, r3
 801d22e:	0013      	movs	r3, r2
 801d230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	6a1b      	ldr	r3, [r3, #32]
 801d236:	697a      	ldr	r2, [r7, #20]
 801d238:	43d2      	mvns	r2, r2
 801d23a:	401a      	ands	r2, r3
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	6a1a      	ldr	r2, [r3, #32]
 801d244:	68bb      	ldr	r3, [r7, #8]
 801d246:	211f      	movs	r1, #31
 801d248:	400b      	ands	r3, r1
 801d24a:	6879      	ldr	r1, [r7, #4]
 801d24c:	4099      	lsls	r1, r3
 801d24e:	000b      	movs	r3, r1
 801d250:	431a      	orrs	r2, r3
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	621a      	str	r2, [r3, #32]
}
 801d256:	46c0      	nop			@ (mov r8, r8)
 801d258:	46bd      	mov	sp, r7
 801d25a:	b006      	add	sp, #24
 801d25c:	bd80      	pop	{r7, pc}
	...

0801d260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b084      	sub	sp, #16
 801d264:	af00      	add	r7, sp, #0
 801d266:	6078      	str	r0, [r7, #4]
 801d268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	2238      	movs	r2, #56	@ 0x38
 801d26e:	5c9b      	ldrb	r3, [r3, r2]
 801d270:	2b01      	cmp	r3, #1
 801d272:	d101      	bne.n	801d278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d274:	2302      	movs	r3, #2
 801d276:	e047      	b.n	801d308 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	2238      	movs	r2, #56	@ 0x38
 801d27c:	2101      	movs	r1, #1
 801d27e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	2239      	movs	r2, #57	@ 0x39
 801d284:	2102      	movs	r1, #2
 801d286:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	685b      	ldr	r3, [r3, #4]
 801d28e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	689b      	ldr	r3, [r3, #8]
 801d296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d298:	68fb      	ldr	r3, [r7, #12]
 801d29a:	2270      	movs	r2, #112	@ 0x70
 801d29c:	4393      	bics	r3, r2
 801d29e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d2a0:	683b      	ldr	r3, [r7, #0]
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	68fa      	ldr	r2, [r7, #12]
 801d2a6:	4313      	orrs	r3, r2
 801d2a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	681b      	ldr	r3, [r3, #0]
 801d2ae:	68fa      	ldr	r2, [r7, #12]
 801d2b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	681a      	ldr	r2, [r3, #0]
 801d2b6:	2380      	movs	r3, #128	@ 0x80
 801d2b8:	05db      	lsls	r3, r3, #23
 801d2ba:	429a      	cmp	r2, r3
 801d2bc:	d00e      	beq.n	801d2dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	4a13      	ldr	r2, [pc, #76]	@ (801d310 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801d2c4:	4293      	cmp	r3, r2
 801d2c6:	d009      	beq.n	801d2dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	4a11      	ldr	r2, [pc, #68]	@ (801d314 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801d2ce:	4293      	cmp	r3, r2
 801d2d0:	d004      	beq.n	801d2dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	4a10      	ldr	r2, [pc, #64]	@ (801d318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801d2d8:	4293      	cmp	r3, r2
 801d2da:	d10c      	bne.n	801d2f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d2dc:	68bb      	ldr	r3, [r7, #8]
 801d2de:	2280      	movs	r2, #128	@ 0x80
 801d2e0:	4393      	bics	r3, r2
 801d2e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d2e4:	683b      	ldr	r3, [r7, #0]
 801d2e6:	685b      	ldr	r3, [r3, #4]
 801d2e8:	68ba      	ldr	r2, [r7, #8]
 801d2ea:	4313      	orrs	r3, r2
 801d2ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	681b      	ldr	r3, [r3, #0]
 801d2f2:	68ba      	ldr	r2, [r7, #8]
 801d2f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	2239      	movs	r2, #57	@ 0x39
 801d2fa:	2101      	movs	r1, #1
 801d2fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	2238      	movs	r2, #56	@ 0x38
 801d302:	2100      	movs	r1, #0
 801d304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d306:	2300      	movs	r3, #0
}
 801d308:	0018      	movs	r0, r3
 801d30a:	46bd      	mov	sp, r7
 801d30c:	b004      	add	sp, #16
 801d30e:	bd80      	pop	{r7, pc}
 801d310:	40000400 	.word	0x40000400
 801d314:	40010800 	.word	0x40010800
 801d318:	40011400 	.word	0x40011400

0801d31c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801d31c:	b580      	push	{r7, lr}
 801d31e:	b082      	sub	sp, #8
 801d320:	af00      	add	r7, sp, #0
 801d322:	6078      	str	r0, [r7, #4]
 801d324:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	2238      	movs	r2, #56	@ 0x38
 801d32a:	5c9b      	ldrb	r3, [r3, r2]
 801d32c:	2b01      	cmp	r3, #1
 801d32e:	d101      	bne.n	801d334 <HAL_TIMEx_RemapConfig+0x18>
 801d330:	2302      	movs	r3, #2
 801d332:	e00c      	b.n	801d34e <HAL_TIMEx_RemapConfig+0x32>
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	2238      	movs	r2, #56	@ 0x38
 801d338:	2101      	movs	r1, #1
 801d33a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	683a      	ldr	r2, [r7, #0]
 801d342:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	2238      	movs	r2, #56	@ 0x38
 801d348:	2100      	movs	r1, #0
 801d34a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d34c:	2300      	movs	r3, #0
}
 801d34e:	0018      	movs	r0, r3
 801d350:	46bd      	mov	sp, r7
 801d352:	b002      	add	sp, #8
 801d354:	bd80      	pop	{r7, pc}
	...

0801d358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d358:	b580      	push	{r7, lr}
 801d35a:	b082      	sub	sp, #8
 801d35c:	af00      	add	r7, sp, #0
 801d35e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	2b00      	cmp	r3, #0
 801d364:	d101      	bne.n	801d36a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d366:	2301      	movs	r3, #1
 801d368:	e053      	b.n	801d412 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d116      	bne.n	801d3a0 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	2278      	movs	r2, #120	@ 0x78
 801d376:	2100      	movs	r1, #0
 801d378:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	0018      	movs	r0, r3
 801d37e:	f000 fd65 	bl	801de4c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	22b0      	movs	r2, #176	@ 0xb0
 801d386:	589b      	ldr	r3, [r3, r2]
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d103      	bne.n	801d394 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	21b0      	movs	r1, #176	@ 0xb0
 801d390:	4a22      	ldr	r2, [pc, #136]	@ (801d41c <HAL_UART_Init+0xc4>)
 801d392:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	22b0      	movs	r2, #176	@ 0xb0
 801d398:	589b      	ldr	r3, [r3, r2]
 801d39a:	687a      	ldr	r2, [r7, #4]
 801d39c:	0010      	movs	r0, r2
 801d39e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	2224      	movs	r2, #36	@ 0x24
 801d3a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	681a      	ldr	r2, [r3, #0]
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	2101      	movs	r1, #1
 801d3b2:	438a      	bics	r2, r1
 801d3b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	0018      	movs	r0, r3
 801d3ba:	f000 fd8b 	bl	801ded4 <UART_SetConfig>
 801d3be:	0003      	movs	r3, r0
 801d3c0:	2b01      	cmp	r3, #1
 801d3c2:	d101      	bne.n	801d3c8 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801d3c4:	2301      	movs	r3, #1
 801d3c6:	e024      	b.n	801d412 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d003      	beq.n	801d3d8 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	0018      	movs	r0, r3
 801d3d4:	f001 f81c 	bl	801e410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	685a      	ldr	r2, [r3, #4]
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	490f      	ldr	r1, [pc, #60]	@ (801d420 <HAL_UART_Init+0xc8>)
 801d3e4:	400a      	ands	r2, r1
 801d3e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	689a      	ldr	r2, [r3, #8]
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	212a      	movs	r1, #42	@ 0x2a
 801d3f4:	438a      	bics	r2, r1
 801d3f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	681a      	ldr	r2, [r3, #0]
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	2101      	movs	r1, #1
 801d404:	430a      	orrs	r2, r1
 801d406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	0018      	movs	r0, r3
 801d40c:	f001 f8b4 	bl	801e578 <UART_CheckIdleState>
 801d410:	0003      	movs	r3, r0
}
 801d412:	0018      	movs	r0, r3
 801d414:	46bd      	mov	sp, r7
 801d416:	b002      	add	sp, #8
 801d418:	bd80      	pop	{r7, pc}
 801d41a:	46c0      	nop			@ (mov r8, r8)
 801d41c:	08013ab5 	.word	0x08013ab5
 801d420:	ffffb7ff 	.word	0xffffb7ff

0801d424 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d424:	b580      	push	{r7, lr}
 801d426:	b08a      	sub	sp, #40	@ 0x28
 801d428:	af02      	add	r7, sp, #8
 801d42a:	60f8      	str	r0, [r7, #12]
 801d42c:	60b9      	str	r1, [r7, #8]
 801d42e:	603b      	str	r3, [r7, #0]
 801d430:	1dbb      	adds	r3, r7, #6
 801d432:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d438:	2b20      	cmp	r3, #32
 801d43a:	d000      	beq.n	801d43e <HAL_UART_Transmit+0x1a>
 801d43c:	e08c      	b.n	801d558 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801d43e:	68bb      	ldr	r3, [r7, #8]
 801d440:	2b00      	cmp	r3, #0
 801d442:	d003      	beq.n	801d44c <HAL_UART_Transmit+0x28>
 801d444:	1dbb      	adds	r3, r7, #6
 801d446:	881b      	ldrh	r3, [r3, #0]
 801d448:	2b00      	cmp	r3, #0
 801d44a:	d101      	bne.n	801d450 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801d44c:	2301      	movs	r3, #1
 801d44e:	e084      	b.n	801d55a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d450:	68fb      	ldr	r3, [r7, #12]
 801d452:	689a      	ldr	r2, [r3, #8]
 801d454:	2380      	movs	r3, #128	@ 0x80
 801d456:	015b      	lsls	r3, r3, #5
 801d458:	429a      	cmp	r2, r3
 801d45a:	d109      	bne.n	801d470 <HAL_UART_Transmit+0x4c>
 801d45c:	68fb      	ldr	r3, [r7, #12]
 801d45e:	691b      	ldr	r3, [r3, #16]
 801d460:	2b00      	cmp	r3, #0
 801d462:	d105      	bne.n	801d470 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d464:	68bb      	ldr	r3, [r7, #8]
 801d466:	2201      	movs	r2, #1
 801d468:	4013      	ands	r3, r2
 801d46a:	d001      	beq.n	801d470 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801d46c:	2301      	movs	r3, #1
 801d46e:	e074      	b.n	801d55a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	2284      	movs	r2, #132	@ 0x84
 801d474:	2100      	movs	r1, #0
 801d476:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	2221      	movs	r2, #33	@ 0x21
 801d47c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d47e:	f7f7 fa1f 	bl	80148c0 <HAL_GetTick>
 801d482:	0003      	movs	r3, r0
 801d484:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801d486:	68fb      	ldr	r3, [r7, #12]
 801d488:	1dba      	adds	r2, r7, #6
 801d48a:	2150      	movs	r1, #80	@ 0x50
 801d48c:	8812      	ldrh	r2, [r2, #0]
 801d48e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d490:	68fb      	ldr	r3, [r7, #12]
 801d492:	1dba      	adds	r2, r7, #6
 801d494:	2152      	movs	r1, #82	@ 0x52
 801d496:	8812      	ldrh	r2, [r2, #0]
 801d498:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	689a      	ldr	r2, [r3, #8]
 801d49e:	2380      	movs	r3, #128	@ 0x80
 801d4a0:	015b      	lsls	r3, r3, #5
 801d4a2:	429a      	cmp	r2, r3
 801d4a4:	d108      	bne.n	801d4b8 <HAL_UART_Transmit+0x94>
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	691b      	ldr	r3, [r3, #16]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d104      	bne.n	801d4b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801d4ae:	2300      	movs	r3, #0
 801d4b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d4b2:	68bb      	ldr	r3, [r7, #8]
 801d4b4:	61bb      	str	r3, [r7, #24]
 801d4b6:	e003      	b.n	801d4c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801d4b8:	68bb      	ldr	r3, [r7, #8]
 801d4ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d4bc:	2300      	movs	r3, #0
 801d4be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d4c0:	e02f      	b.n	801d522 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d4c2:	697a      	ldr	r2, [r7, #20]
 801d4c4:	68f8      	ldr	r0, [r7, #12]
 801d4c6:	683b      	ldr	r3, [r7, #0]
 801d4c8:	9300      	str	r3, [sp, #0]
 801d4ca:	0013      	movs	r3, r2
 801d4cc:	2200      	movs	r2, #0
 801d4ce:	2180      	movs	r1, #128	@ 0x80
 801d4d0:	f001 f8fa 	bl	801e6c8 <UART_WaitOnFlagUntilTimeout>
 801d4d4:	1e03      	subs	r3, r0, #0
 801d4d6:	d004      	beq.n	801d4e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801d4d8:	68fb      	ldr	r3, [r7, #12]
 801d4da:	2220      	movs	r2, #32
 801d4dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801d4de:	2303      	movs	r3, #3
 801d4e0:	e03b      	b.n	801d55a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801d4e2:	69fb      	ldr	r3, [r7, #28]
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	d10b      	bne.n	801d500 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d4e8:	69bb      	ldr	r3, [r7, #24]
 801d4ea:	881b      	ldrh	r3, [r3, #0]
 801d4ec:	001a      	movs	r2, r3
 801d4ee:	68fb      	ldr	r3, [r7, #12]
 801d4f0:	681b      	ldr	r3, [r3, #0]
 801d4f2:	05d2      	lsls	r2, r2, #23
 801d4f4:	0dd2      	lsrs	r2, r2, #23
 801d4f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801d4f8:	69bb      	ldr	r3, [r7, #24]
 801d4fa:	3302      	adds	r3, #2
 801d4fc:	61bb      	str	r3, [r7, #24]
 801d4fe:	e007      	b.n	801d510 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d500:	69fb      	ldr	r3, [r7, #28]
 801d502:	781a      	ldrb	r2, [r3, #0]
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801d50a:	69fb      	ldr	r3, [r7, #28]
 801d50c:	3301      	adds	r3, #1
 801d50e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d510:	68fb      	ldr	r3, [r7, #12]
 801d512:	2252      	movs	r2, #82	@ 0x52
 801d514:	5a9b      	ldrh	r3, [r3, r2]
 801d516:	b29b      	uxth	r3, r3
 801d518:	3b01      	subs	r3, #1
 801d51a:	b299      	uxth	r1, r3
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	2252      	movs	r2, #82	@ 0x52
 801d520:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801d522:	68fb      	ldr	r3, [r7, #12]
 801d524:	2252      	movs	r2, #82	@ 0x52
 801d526:	5a9b      	ldrh	r3, [r3, r2]
 801d528:	b29b      	uxth	r3, r3
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d1c9      	bne.n	801d4c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d52e:	697a      	ldr	r2, [r7, #20]
 801d530:	68f8      	ldr	r0, [r7, #12]
 801d532:	683b      	ldr	r3, [r7, #0]
 801d534:	9300      	str	r3, [sp, #0]
 801d536:	0013      	movs	r3, r2
 801d538:	2200      	movs	r2, #0
 801d53a:	2140      	movs	r1, #64	@ 0x40
 801d53c:	f001 f8c4 	bl	801e6c8 <UART_WaitOnFlagUntilTimeout>
 801d540:	1e03      	subs	r3, r0, #0
 801d542:	d004      	beq.n	801d54e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	2220      	movs	r2, #32
 801d548:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801d54a:	2303      	movs	r3, #3
 801d54c:	e005      	b.n	801d55a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	2220      	movs	r2, #32
 801d552:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801d554:	2300      	movs	r3, #0
 801d556:	e000      	b.n	801d55a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801d558:	2302      	movs	r3, #2
  }
}
 801d55a:	0018      	movs	r0, r3
 801d55c:	46bd      	mov	sp, r7
 801d55e:	b008      	add	sp, #32
 801d560:	bd80      	pop	{r7, pc}
	...

0801d564 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b088      	sub	sp, #32
 801d568:	af00      	add	r7, sp, #0
 801d56a:	60f8      	str	r0, [r7, #12]
 801d56c:	60b9      	str	r1, [r7, #8]
 801d56e:	1dbb      	adds	r3, r7, #6
 801d570:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d572:	68fb      	ldr	r3, [r7, #12]
 801d574:	2280      	movs	r2, #128	@ 0x80
 801d576:	589b      	ldr	r3, [r3, r2]
 801d578:	2b20      	cmp	r3, #32
 801d57a:	d14a      	bne.n	801d612 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d57c:	68bb      	ldr	r3, [r7, #8]
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d003      	beq.n	801d58a <HAL_UART_Receive_IT+0x26>
 801d582:	1dbb      	adds	r3, r7, #6
 801d584:	881b      	ldrh	r3, [r3, #0]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d101      	bne.n	801d58e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801d58a:	2301      	movs	r3, #1
 801d58c:	e042      	b.n	801d614 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	689a      	ldr	r2, [r3, #8]
 801d592:	2380      	movs	r3, #128	@ 0x80
 801d594:	015b      	lsls	r3, r3, #5
 801d596:	429a      	cmp	r2, r3
 801d598:	d109      	bne.n	801d5ae <HAL_UART_Receive_IT+0x4a>
 801d59a:	68fb      	ldr	r3, [r7, #12]
 801d59c:	691b      	ldr	r3, [r3, #16]
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d105      	bne.n	801d5ae <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d5a2:	68bb      	ldr	r3, [r7, #8]
 801d5a4:	2201      	movs	r2, #1
 801d5a6:	4013      	ands	r3, r2
 801d5a8:	d001      	beq.n	801d5ae <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801d5aa:	2301      	movs	r3, #1
 801d5ac:	e032      	b.n	801d614 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	2200      	movs	r2, #0
 801d5b2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	4a18      	ldr	r2, [pc, #96]	@ (801d61c <HAL_UART_Receive_IT+0xb8>)
 801d5ba:	4293      	cmp	r3, r2
 801d5bc:	d020      	beq.n	801d600 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d5be:	68fb      	ldr	r3, [r7, #12]
 801d5c0:	681b      	ldr	r3, [r3, #0]
 801d5c2:	685a      	ldr	r2, [r3, #4]
 801d5c4:	2380      	movs	r3, #128	@ 0x80
 801d5c6:	041b      	lsls	r3, r3, #16
 801d5c8:	4013      	ands	r3, r2
 801d5ca:	d019      	beq.n	801d600 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d5cc:	f3ef 8310 	mrs	r3, PRIMASK
 801d5d0:	613b      	str	r3, [r7, #16]
  return(result);
 801d5d2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d5d4:	61fb      	str	r3, [r7, #28]
 801d5d6:	2301      	movs	r3, #1
 801d5d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5da:	697b      	ldr	r3, [r7, #20]
 801d5dc:	f383 8810 	msr	PRIMASK, r3
}
 801d5e0:	46c0      	nop			@ (mov r8, r8)
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	681a      	ldr	r2, [r3, #0]
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	681b      	ldr	r3, [r3, #0]
 801d5ec:	2180      	movs	r1, #128	@ 0x80
 801d5ee:	04c9      	lsls	r1, r1, #19
 801d5f0:	430a      	orrs	r2, r1
 801d5f2:	601a      	str	r2, [r3, #0]
 801d5f4:	69fb      	ldr	r3, [r7, #28]
 801d5f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5f8:	69bb      	ldr	r3, [r7, #24]
 801d5fa:	f383 8810 	msr	PRIMASK, r3
}
 801d5fe:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801d600:	1dbb      	adds	r3, r7, #6
 801d602:	881a      	ldrh	r2, [r3, #0]
 801d604:	68b9      	ldr	r1, [r7, #8]
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	0018      	movs	r0, r3
 801d60a:	f001 f8c7 	bl	801e79c <UART_Start_Receive_IT>
 801d60e:	0003      	movs	r3, r0
 801d610:	e000      	b.n	801d614 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d612:	2302      	movs	r3, #2
  }
}
 801d614:	0018      	movs	r0, r3
 801d616:	46bd      	mov	sp, r7
 801d618:	b008      	add	sp, #32
 801d61a:	bd80      	pop	{r7, pc}
 801d61c:	40004800 	.word	0x40004800

0801d620 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d620:	b580      	push	{r7, lr}
 801d622:	b088      	sub	sp, #32
 801d624:	af00      	add	r7, sp, #0
 801d626:	60f8      	str	r0, [r7, #12]
 801d628:	60b9      	str	r1, [r7, #8]
 801d62a:	1dbb      	adds	r3, r7, #6
 801d62c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d632:	2b20      	cmp	r3, #32
 801d634:	d000      	beq.n	801d638 <HAL_UART_Transmit_DMA+0x18>
 801d636:	e077      	b.n	801d728 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801d638:	68bb      	ldr	r3, [r7, #8]
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d003      	beq.n	801d646 <HAL_UART_Transmit_DMA+0x26>
 801d63e:	1dbb      	adds	r3, r7, #6
 801d640:	881b      	ldrh	r3, [r3, #0]
 801d642:	2b00      	cmp	r3, #0
 801d644:	d101      	bne.n	801d64a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801d646:	2301      	movs	r3, #1
 801d648:	e06f      	b.n	801d72a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d64a:	68fb      	ldr	r3, [r7, #12]
 801d64c:	689a      	ldr	r2, [r3, #8]
 801d64e:	2380      	movs	r3, #128	@ 0x80
 801d650:	015b      	lsls	r3, r3, #5
 801d652:	429a      	cmp	r2, r3
 801d654:	d109      	bne.n	801d66a <HAL_UART_Transmit_DMA+0x4a>
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	691b      	ldr	r3, [r3, #16]
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d105      	bne.n	801d66a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d65e:	68bb      	ldr	r3, [r7, #8]
 801d660:	2201      	movs	r2, #1
 801d662:	4013      	ands	r3, r2
 801d664:	d001      	beq.n	801d66a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d666:	2301      	movs	r3, #1
 801d668:	e05f      	b.n	801d72a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	68ba      	ldr	r2, [r7, #8]
 801d66e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	1dba      	adds	r2, r7, #6
 801d674:	2150      	movs	r1, #80	@ 0x50
 801d676:	8812      	ldrh	r2, [r2, #0]
 801d678:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	1dba      	adds	r2, r7, #6
 801d67e:	2152      	movs	r1, #82	@ 0x52
 801d680:	8812      	ldrh	r2, [r2, #0]
 801d682:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	2284      	movs	r2, #132	@ 0x84
 801d688:	2100      	movs	r1, #0
 801d68a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	2221      	movs	r2, #33	@ 0x21
 801d690:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d696:	2b00      	cmp	r3, #0
 801d698:	d027      	beq.n	801d6ea <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d69e:	4a25      	ldr	r2, [pc, #148]	@ (801d734 <HAL_UART_Transmit_DMA+0x114>)
 801d6a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d6a6:	4a24      	ldr	r2, [pc, #144]	@ (801d738 <HAL_UART_Transmit_DMA+0x118>)
 801d6a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d6aa:	68fb      	ldr	r3, [r7, #12]
 801d6ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d6ae:	4a23      	ldr	r2, [pc, #140]	@ (801d73c <HAL_UART_Transmit_DMA+0x11c>)
 801d6b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801d6b2:	68fb      	ldr	r3, [r7, #12]
 801d6b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d6b6:	2200      	movs	r2, #0
 801d6b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d6ba:	68fb      	ldr	r3, [r7, #12]
 801d6bc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d6c2:	0019      	movs	r1, r3
 801d6c4:	68fb      	ldr	r3, [r7, #12]
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	3328      	adds	r3, #40	@ 0x28
 801d6ca:	001a      	movs	r2, r3
 801d6cc:	1dbb      	adds	r3, r7, #6
 801d6ce:	881b      	ldrh	r3, [r3, #0]
 801d6d0:	f7f7 fe2a 	bl	8015328 <HAL_DMA_Start_IT>
 801d6d4:	1e03      	subs	r3, r0, #0
 801d6d6:	d008      	beq.n	801d6ea <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	2284      	movs	r2, #132	@ 0x84
 801d6dc:	2110      	movs	r1, #16
 801d6de:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801d6e0:	68fb      	ldr	r3, [r7, #12]
 801d6e2:	2220      	movs	r2, #32
 801d6e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801d6e6:	2301      	movs	r3, #1
 801d6e8:	e01f      	b.n	801d72a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	2240      	movs	r2, #64	@ 0x40
 801d6f0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6f2:	f3ef 8310 	mrs	r3, PRIMASK
 801d6f6:	613b      	str	r3, [r7, #16]
  return(result);
 801d6f8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d6fa:	61fb      	str	r3, [r7, #28]
 801d6fc:	2301      	movs	r3, #1
 801d6fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d700:	697b      	ldr	r3, [r7, #20]
 801d702:	f383 8810 	msr	PRIMASK, r3
}
 801d706:	46c0      	nop			@ (mov r8, r8)
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	689a      	ldr	r2, [r3, #8]
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	2180      	movs	r1, #128	@ 0x80
 801d714:	430a      	orrs	r2, r1
 801d716:	609a      	str	r2, [r3, #8]
 801d718:	69fb      	ldr	r3, [r7, #28]
 801d71a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d71c:	69bb      	ldr	r3, [r7, #24]
 801d71e:	f383 8810 	msr	PRIMASK, r3
}
 801d722:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801d724:	2300      	movs	r3, #0
 801d726:	e000      	b.n	801d72a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801d728:	2302      	movs	r3, #2
  }
}
 801d72a:	0018      	movs	r0, r3
 801d72c:	46bd      	mov	sp, r7
 801d72e:	b008      	add	sp, #32
 801d730:	bd80      	pop	{r7, pc}
 801d732:	46c0      	nop			@ (mov r8, r8)
 801d734:	0801eb81 	.word	0x0801eb81
 801d738:	0801ec1d 	.word	0x0801ec1d
 801d73c:	0801edbd 	.word	0x0801edbd

0801d740 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d740:	b580      	push	{r7, lr}
 801d742:	b088      	sub	sp, #32
 801d744:	af00      	add	r7, sp, #0
 801d746:	60f8      	str	r0, [r7, #12]
 801d748:	60b9      	str	r1, [r7, #8]
 801d74a:	1dbb      	adds	r3, r7, #6
 801d74c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	2280      	movs	r2, #128	@ 0x80
 801d752:	589b      	ldr	r3, [r3, r2]
 801d754:	2b20      	cmp	r3, #32
 801d756:	d14a      	bne.n	801d7ee <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d758:	68bb      	ldr	r3, [r7, #8]
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d003      	beq.n	801d766 <HAL_UART_Receive_DMA+0x26>
 801d75e:	1dbb      	adds	r3, r7, #6
 801d760:	881b      	ldrh	r3, [r3, #0]
 801d762:	2b00      	cmp	r3, #0
 801d764:	d101      	bne.n	801d76a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801d766:	2301      	movs	r3, #1
 801d768:	e042      	b.n	801d7f0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d76a:	68fb      	ldr	r3, [r7, #12]
 801d76c:	689a      	ldr	r2, [r3, #8]
 801d76e:	2380      	movs	r3, #128	@ 0x80
 801d770:	015b      	lsls	r3, r3, #5
 801d772:	429a      	cmp	r2, r3
 801d774:	d109      	bne.n	801d78a <HAL_UART_Receive_DMA+0x4a>
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	691b      	ldr	r3, [r3, #16]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d105      	bne.n	801d78a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d77e:	68bb      	ldr	r3, [r7, #8]
 801d780:	2201      	movs	r2, #1
 801d782:	4013      	ands	r3, r2
 801d784:	d001      	beq.n	801d78a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d786:	2301      	movs	r3, #1
 801d788:	e032      	b.n	801d7f0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	2200      	movs	r2, #0
 801d78e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d790:	68fb      	ldr	r3, [r7, #12]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	4a18      	ldr	r2, [pc, #96]	@ (801d7f8 <HAL_UART_Receive_DMA+0xb8>)
 801d796:	4293      	cmp	r3, r2
 801d798:	d020      	beq.n	801d7dc <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	685a      	ldr	r2, [r3, #4]
 801d7a0:	2380      	movs	r3, #128	@ 0x80
 801d7a2:	041b      	lsls	r3, r3, #16
 801d7a4:	4013      	ands	r3, r2
 801d7a6:	d019      	beq.n	801d7dc <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7a8:	f3ef 8310 	mrs	r3, PRIMASK
 801d7ac:	613b      	str	r3, [r7, #16]
  return(result);
 801d7ae:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d7b0:	61fb      	str	r3, [r7, #28]
 801d7b2:	2301      	movs	r3, #1
 801d7b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7b6:	697b      	ldr	r3, [r7, #20]
 801d7b8:	f383 8810 	msr	PRIMASK, r3
}
 801d7bc:	46c0      	nop			@ (mov r8, r8)
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	681a      	ldr	r2, [r3, #0]
 801d7c4:	68fb      	ldr	r3, [r7, #12]
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	2180      	movs	r1, #128	@ 0x80
 801d7ca:	04c9      	lsls	r1, r1, #19
 801d7cc:	430a      	orrs	r2, r1
 801d7ce:	601a      	str	r2, [r3, #0]
 801d7d0:	69fb      	ldr	r3, [r7, #28]
 801d7d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7d4:	69bb      	ldr	r3, [r7, #24]
 801d7d6:	f383 8810 	msr	PRIMASK, r3
}
 801d7da:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801d7dc:	1dbb      	adds	r3, r7, #6
 801d7de:	881a      	ldrh	r2, [r3, #0]
 801d7e0:	68b9      	ldr	r1, [r7, #8]
 801d7e2:	68fb      	ldr	r3, [r7, #12]
 801d7e4:	0018      	movs	r0, r3
 801d7e6:	f001 f8a3 	bl	801e930 <UART_Start_Receive_DMA>
 801d7ea:	0003      	movs	r3, r0
 801d7ec:	e000      	b.n	801d7f0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d7ee:	2302      	movs	r3, #2
  }
}
 801d7f0:	0018      	movs	r0, r3
 801d7f2:	46bd      	mov	sp, r7
 801d7f4:	b008      	add	sp, #32
 801d7f6:	bd80      	pop	{r7, pc}
 801d7f8:	40004800 	.word	0x40004800

0801d7fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d7fc:	b590      	push	{r4, r7, lr}
 801d7fe:	b0ab      	sub	sp, #172	@ 0xac
 801d800:	af00      	add	r7, sp, #0
 801d802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	69db      	ldr	r3, [r3, #28]
 801d80a:	22a4      	movs	r2, #164	@ 0xa4
 801d80c:	18b9      	adds	r1, r7, r2
 801d80e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	20a0      	movs	r0, #160	@ 0xa0
 801d818:	1839      	adds	r1, r7, r0
 801d81a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	689b      	ldr	r3, [r3, #8]
 801d822:	219c      	movs	r1, #156	@ 0x9c
 801d824:	1879      	adds	r1, r7, r1
 801d826:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d828:	0011      	movs	r1, r2
 801d82a:	18bb      	adds	r3, r7, r2
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	4a9c      	ldr	r2, [pc, #624]	@ (801daa0 <HAL_UART_IRQHandler+0x2a4>)
 801d830:	4013      	ands	r3, r2
 801d832:	2298      	movs	r2, #152	@ 0x98
 801d834:	18bc      	adds	r4, r7, r2
 801d836:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801d838:	18bb      	adds	r3, r7, r2
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d114      	bne.n	801d86a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801d840:	187b      	adds	r3, r7, r1
 801d842:	681b      	ldr	r3, [r3, #0]
 801d844:	2220      	movs	r2, #32
 801d846:	4013      	ands	r3, r2
 801d848:	d00f      	beq.n	801d86a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d84a:	183b      	adds	r3, r7, r0
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	2220      	movs	r2, #32
 801d850:	4013      	ands	r3, r2
 801d852:	d00a      	beq.n	801d86a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d858:	2b00      	cmp	r3, #0
 801d85a:	d100      	bne.n	801d85e <HAL_UART_IRQHandler+0x62>
 801d85c:	e2aa      	b.n	801ddb4 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d862:	687a      	ldr	r2, [r7, #4]
 801d864:	0010      	movs	r0, r2
 801d866:	4798      	blx	r3
      }
      return;
 801d868:	e2a4      	b.n	801ddb4 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801d86a:	2398      	movs	r3, #152	@ 0x98
 801d86c:	18fb      	adds	r3, r7, r3
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	2b00      	cmp	r3, #0
 801d872:	d100      	bne.n	801d876 <HAL_UART_IRQHandler+0x7a>
 801d874:	e11a      	b.n	801daac <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801d876:	239c      	movs	r3, #156	@ 0x9c
 801d878:	18fb      	adds	r3, r7, r3
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	2201      	movs	r2, #1
 801d87e:	4013      	ands	r3, r2
 801d880:	d106      	bne.n	801d890 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801d882:	23a0      	movs	r3, #160	@ 0xa0
 801d884:	18fb      	adds	r3, r7, r3
 801d886:	681b      	ldr	r3, [r3, #0]
 801d888:	4a86      	ldr	r2, [pc, #536]	@ (801daa4 <HAL_UART_IRQHandler+0x2a8>)
 801d88a:	4013      	ands	r3, r2
 801d88c:	d100      	bne.n	801d890 <HAL_UART_IRQHandler+0x94>
 801d88e:	e10d      	b.n	801daac <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d890:	23a4      	movs	r3, #164	@ 0xa4
 801d892:	18fb      	adds	r3, r7, r3
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	2201      	movs	r2, #1
 801d898:	4013      	ands	r3, r2
 801d89a:	d012      	beq.n	801d8c2 <HAL_UART_IRQHandler+0xc6>
 801d89c:	23a0      	movs	r3, #160	@ 0xa0
 801d89e:	18fb      	adds	r3, r7, r3
 801d8a0:	681a      	ldr	r2, [r3, #0]
 801d8a2:	2380      	movs	r3, #128	@ 0x80
 801d8a4:	005b      	lsls	r3, r3, #1
 801d8a6:	4013      	ands	r3, r2
 801d8a8:	d00b      	beq.n	801d8c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	2201      	movs	r2, #1
 801d8b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	2284      	movs	r2, #132	@ 0x84
 801d8b6:	589b      	ldr	r3, [r3, r2]
 801d8b8:	2201      	movs	r2, #1
 801d8ba:	431a      	orrs	r2, r3
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	2184      	movs	r1, #132	@ 0x84
 801d8c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d8c2:	23a4      	movs	r3, #164	@ 0xa4
 801d8c4:	18fb      	adds	r3, r7, r3
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	2202      	movs	r2, #2
 801d8ca:	4013      	ands	r3, r2
 801d8cc:	d011      	beq.n	801d8f2 <HAL_UART_IRQHandler+0xf6>
 801d8ce:	239c      	movs	r3, #156	@ 0x9c
 801d8d0:	18fb      	adds	r3, r7, r3
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	2201      	movs	r2, #1
 801d8d6:	4013      	ands	r3, r2
 801d8d8:	d00b      	beq.n	801d8f2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	2202      	movs	r2, #2
 801d8e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	2284      	movs	r2, #132	@ 0x84
 801d8e6:	589b      	ldr	r3, [r3, r2]
 801d8e8:	2204      	movs	r2, #4
 801d8ea:	431a      	orrs	r2, r3
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	2184      	movs	r1, #132	@ 0x84
 801d8f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d8f2:	23a4      	movs	r3, #164	@ 0xa4
 801d8f4:	18fb      	adds	r3, r7, r3
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	2204      	movs	r2, #4
 801d8fa:	4013      	ands	r3, r2
 801d8fc:	d011      	beq.n	801d922 <HAL_UART_IRQHandler+0x126>
 801d8fe:	239c      	movs	r3, #156	@ 0x9c
 801d900:	18fb      	adds	r3, r7, r3
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	2201      	movs	r2, #1
 801d906:	4013      	ands	r3, r2
 801d908:	d00b      	beq.n	801d922 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	2204      	movs	r2, #4
 801d910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d912:	687b      	ldr	r3, [r7, #4]
 801d914:	2284      	movs	r2, #132	@ 0x84
 801d916:	589b      	ldr	r3, [r3, r2]
 801d918:	2202      	movs	r2, #2
 801d91a:	431a      	orrs	r2, r3
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	2184      	movs	r1, #132	@ 0x84
 801d920:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801d922:	23a4      	movs	r3, #164	@ 0xa4
 801d924:	18fb      	adds	r3, r7, r3
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	2208      	movs	r2, #8
 801d92a:	4013      	ands	r3, r2
 801d92c:	d017      	beq.n	801d95e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d92e:	23a0      	movs	r3, #160	@ 0xa0
 801d930:	18fb      	adds	r3, r7, r3
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	2220      	movs	r2, #32
 801d936:	4013      	ands	r3, r2
 801d938:	d105      	bne.n	801d946 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801d93a:	239c      	movs	r3, #156	@ 0x9c
 801d93c:	18fb      	adds	r3, r7, r3
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	2201      	movs	r2, #1
 801d942:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d944:	d00b      	beq.n	801d95e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	2208      	movs	r2, #8
 801d94c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	2284      	movs	r2, #132	@ 0x84
 801d952:	589b      	ldr	r3, [r3, r2]
 801d954:	2208      	movs	r2, #8
 801d956:	431a      	orrs	r2, r3
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	2184      	movs	r1, #132	@ 0x84
 801d95c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801d95e:	23a4      	movs	r3, #164	@ 0xa4
 801d960:	18fb      	adds	r3, r7, r3
 801d962:	681a      	ldr	r2, [r3, #0]
 801d964:	2380      	movs	r3, #128	@ 0x80
 801d966:	011b      	lsls	r3, r3, #4
 801d968:	4013      	ands	r3, r2
 801d96a:	d013      	beq.n	801d994 <HAL_UART_IRQHandler+0x198>
 801d96c:	23a0      	movs	r3, #160	@ 0xa0
 801d96e:	18fb      	adds	r3, r7, r3
 801d970:	681a      	ldr	r2, [r3, #0]
 801d972:	2380      	movs	r3, #128	@ 0x80
 801d974:	04db      	lsls	r3, r3, #19
 801d976:	4013      	ands	r3, r2
 801d978:	d00c      	beq.n	801d994 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	2280      	movs	r2, #128	@ 0x80
 801d980:	0112      	lsls	r2, r2, #4
 801d982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	2284      	movs	r2, #132	@ 0x84
 801d988:	589b      	ldr	r3, [r3, r2]
 801d98a:	2220      	movs	r2, #32
 801d98c:	431a      	orrs	r2, r3
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	2184      	movs	r1, #132	@ 0x84
 801d992:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	2284      	movs	r2, #132	@ 0x84
 801d998:	589b      	ldr	r3, [r3, r2]
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d100      	bne.n	801d9a0 <HAL_UART_IRQHandler+0x1a4>
 801d99e:	e20b      	b.n	801ddb8 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801d9a0:	23a4      	movs	r3, #164	@ 0xa4
 801d9a2:	18fb      	adds	r3, r7, r3
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	2220      	movs	r2, #32
 801d9a8:	4013      	ands	r3, r2
 801d9aa:	d00e      	beq.n	801d9ca <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d9ac:	23a0      	movs	r3, #160	@ 0xa0
 801d9ae:	18fb      	adds	r3, r7, r3
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	2220      	movs	r2, #32
 801d9b4:	4013      	ands	r3, r2
 801d9b6:	d008      	beq.n	801d9ca <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	d004      	beq.n	801d9ca <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d9c4:	687a      	ldr	r2, [r7, #4]
 801d9c6:	0010      	movs	r0, r2
 801d9c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	2284      	movs	r2, #132	@ 0x84
 801d9ce:	589b      	ldr	r3, [r3, r2]
 801d9d0:	2194      	movs	r1, #148	@ 0x94
 801d9d2:	187a      	adds	r2, r7, r1
 801d9d4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	689b      	ldr	r3, [r3, #8]
 801d9dc:	2240      	movs	r2, #64	@ 0x40
 801d9de:	4013      	ands	r3, r2
 801d9e0:	2b40      	cmp	r3, #64	@ 0x40
 801d9e2:	d004      	beq.n	801d9ee <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801d9e4:	187b      	adds	r3, r7, r1
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	2228      	movs	r2, #40	@ 0x28
 801d9ea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d9ec:	d04b      	beq.n	801da86 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	0018      	movs	r0, r3
 801d9f2:	f001 f861 	bl	801eab8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	681b      	ldr	r3, [r3, #0]
 801d9fa:	689b      	ldr	r3, [r3, #8]
 801d9fc:	2240      	movs	r2, #64	@ 0x40
 801d9fe:	4013      	ands	r3, r2
 801da00:	2b40      	cmp	r3, #64	@ 0x40
 801da02:	d139      	bne.n	801da78 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da04:	f3ef 8310 	mrs	r3, PRIMASK
 801da08:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801da0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801da0c:	2090      	movs	r0, #144	@ 0x90
 801da0e:	183a      	adds	r2, r7, r0
 801da10:	6013      	str	r3, [r2, #0]
 801da12:	2301      	movs	r3, #1
 801da14:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801da18:	f383 8810 	msr	PRIMASK, r3
}
 801da1c:	46c0      	nop			@ (mov r8, r8)
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	689a      	ldr	r2, [r3, #8]
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	2140      	movs	r1, #64	@ 0x40
 801da2a:	438a      	bics	r2, r1
 801da2c:	609a      	str	r2, [r3, #8]
 801da2e:	183b      	adds	r3, r7, r0
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801da36:	f383 8810 	msr	PRIMASK, r3
}
 801da3a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da40:	2b00      	cmp	r3, #0
 801da42:	d012      	beq.n	801da6a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da48:	4a17      	ldr	r2, [pc, #92]	@ (801daa8 <HAL_UART_IRQHandler+0x2ac>)
 801da4a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da50:	0018      	movs	r0, r3
 801da52:	f7f7 fd0f 	bl	8015474 <HAL_DMA_Abort_IT>
 801da56:	1e03      	subs	r3, r0, #0
 801da58:	d020      	beq.n	801da9c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da64:	0018      	movs	r0, r3
 801da66:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da68:	e018      	b.n	801da9c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	2298      	movs	r2, #152	@ 0x98
 801da6e:	589b      	ldr	r3, [r3, r2]
 801da70:	687a      	ldr	r2, [r7, #4]
 801da72:	0010      	movs	r0, r2
 801da74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da76:	e011      	b.n	801da9c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	2298      	movs	r2, #152	@ 0x98
 801da7c:	589b      	ldr	r3, [r3, r2]
 801da7e:	687a      	ldr	r2, [r7, #4]
 801da80:	0010      	movs	r0, r2
 801da82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da84:	e00a      	b.n	801da9c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	2298      	movs	r2, #152	@ 0x98
 801da8a:	589b      	ldr	r3, [r3, r2]
 801da8c:	687a      	ldr	r2, [r7, #4]
 801da8e:	0010      	movs	r0, r2
 801da90:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	2284      	movs	r2, #132	@ 0x84
 801da96:	2100      	movs	r1, #0
 801da98:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801da9a:	e18d      	b.n	801ddb8 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da9c:	46c0      	nop			@ (mov r8, r8)
    return;
 801da9e:	e18b      	b.n	801ddb8 <HAL_UART_IRQHandler+0x5bc>
 801daa0:	0000080f 	.word	0x0000080f
 801daa4:	04000120 	.word	0x04000120
 801daa8:	0801ee45 	.word	0x0801ee45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dab0:	2b01      	cmp	r3, #1
 801dab2:	d000      	beq.n	801dab6 <HAL_UART_IRQHandler+0x2ba>
 801dab4:	e13d      	b.n	801dd32 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801dab6:	23a4      	movs	r3, #164	@ 0xa4
 801dab8:	18fb      	adds	r3, r7, r3
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	2210      	movs	r2, #16
 801dabe:	4013      	ands	r3, r2
 801dac0:	d100      	bne.n	801dac4 <HAL_UART_IRQHandler+0x2c8>
 801dac2:	e136      	b.n	801dd32 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801dac4:	23a0      	movs	r3, #160	@ 0xa0
 801dac6:	18fb      	adds	r3, r7, r3
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	2210      	movs	r2, #16
 801dacc:	4013      	ands	r3, r2
 801dace:	d100      	bne.n	801dad2 <HAL_UART_IRQHandler+0x2d6>
 801dad0:	e12f      	b.n	801dd32 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	681b      	ldr	r3, [r3, #0]
 801dad6:	2210      	movs	r2, #16
 801dad8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dada:	687b      	ldr	r3, [r7, #4]
 801dadc:	681b      	ldr	r3, [r3, #0]
 801dade:	689b      	ldr	r3, [r3, #8]
 801dae0:	2240      	movs	r2, #64	@ 0x40
 801dae2:	4013      	ands	r3, r2
 801dae4:	2b40      	cmp	r3, #64	@ 0x40
 801dae6:	d000      	beq.n	801daea <HAL_UART_IRQHandler+0x2ee>
 801dae8:	e0a2      	b.n	801dc30 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	685a      	ldr	r2, [r3, #4]
 801daf2:	217e      	movs	r1, #126	@ 0x7e
 801daf4:	187b      	adds	r3, r7, r1
 801daf6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801daf8:	187b      	adds	r3, r7, r1
 801dafa:	881b      	ldrh	r3, [r3, #0]
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d100      	bne.n	801db02 <HAL_UART_IRQHandler+0x306>
 801db00:	e15c      	b.n	801ddbc <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	2258      	movs	r2, #88	@ 0x58
 801db06:	5a9b      	ldrh	r3, [r3, r2]
 801db08:	187a      	adds	r2, r7, r1
 801db0a:	8812      	ldrh	r2, [r2, #0]
 801db0c:	429a      	cmp	r2, r3
 801db0e:	d300      	bcc.n	801db12 <HAL_UART_IRQHandler+0x316>
 801db10:	e154      	b.n	801ddbc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	187a      	adds	r2, r7, r1
 801db16:	215a      	movs	r1, #90	@ 0x5a
 801db18:	8812      	ldrh	r2, [r2, #0]
 801db1a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db20:	681b      	ldr	r3, [r3, #0]
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	2220      	movs	r2, #32
 801db26:	4013      	ands	r3, r2
 801db28:	d16f      	bne.n	801dc0a <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db2a:	f3ef 8310 	mrs	r3, PRIMASK
 801db2e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801db30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801db32:	67bb      	str	r3, [r7, #120]	@ 0x78
 801db34:	2301      	movs	r3, #1
 801db36:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801db3a:	f383 8810 	msr	PRIMASK, r3
}
 801db3e:	46c0      	nop			@ (mov r8, r8)
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	681a      	ldr	r2, [r3, #0]
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	49a0      	ldr	r1, [pc, #640]	@ (801ddcc <HAL_UART_IRQHandler+0x5d0>)
 801db4c:	400a      	ands	r2, r1
 801db4e:	601a      	str	r2, [r3, #0]
 801db50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db52:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db56:	f383 8810 	msr	PRIMASK, r3
}
 801db5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db5c:	f3ef 8310 	mrs	r3, PRIMASK
 801db60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801db62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801db64:	677b      	str	r3, [r7, #116]	@ 0x74
 801db66:	2301      	movs	r3, #1
 801db68:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801db6c:	f383 8810 	msr	PRIMASK, r3
}
 801db70:	46c0      	nop			@ (mov r8, r8)
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	689a      	ldr	r2, [r3, #8]
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	2101      	movs	r1, #1
 801db7e:	438a      	bics	r2, r1
 801db80:	609a      	str	r2, [r3, #8]
 801db82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801db84:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db88:	f383 8810 	msr	PRIMASK, r3
}
 801db8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db8e:	f3ef 8310 	mrs	r3, PRIMASK
 801db92:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801db94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801db96:	673b      	str	r3, [r7, #112]	@ 0x70
 801db98:	2301      	movs	r3, #1
 801db9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801db9e:	f383 8810 	msr	PRIMASK, r3
}
 801dba2:	46c0      	nop			@ (mov r8, r8)
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	689a      	ldr	r2, [r3, #8]
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	2140      	movs	r1, #64	@ 0x40
 801dbb0:	438a      	bics	r2, r1
 801dbb2:	609a      	str	r2, [r3, #8]
 801dbb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dbb6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dbba:	f383 8810 	msr	PRIMASK, r3
}
 801dbbe:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	2280      	movs	r2, #128	@ 0x80
 801dbc4:	2120      	movs	r1, #32
 801dbc6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	2200      	movs	r2, #0
 801dbcc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbce:	f3ef 8310 	mrs	r3, PRIMASK
 801dbd2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801dbd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dbd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801dbd8:	2301      	movs	r3, #1
 801dbda:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801dbde:	f383 8810 	msr	PRIMASK, r3
}
 801dbe2:	46c0      	nop			@ (mov r8, r8)
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	681b      	ldr	r3, [r3, #0]
 801dbe8:	681a      	ldr	r2, [r3, #0]
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	681b      	ldr	r3, [r3, #0]
 801dbee:	2110      	movs	r1, #16
 801dbf0:	438a      	bics	r2, r1
 801dbf2:	601a      	str	r2, [r3, #0]
 801dbf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dbf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801dbfa:	f383 8810 	msr	PRIMASK, r3
}
 801dbfe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc04:	0018      	movs	r0, r3
 801dc06:	f7f7 fbf5 	bl	80153f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	2202      	movs	r2, #2
 801dc0e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	22ac      	movs	r2, #172	@ 0xac
 801dc14:	589b      	ldr	r3, [r3, r2]
 801dc16:	687a      	ldr	r2, [r7, #4]
 801dc18:	2158      	movs	r1, #88	@ 0x58
 801dc1a:	5a51      	ldrh	r1, [r2, r1]
 801dc1c:	687a      	ldr	r2, [r7, #4]
 801dc1e:	205a      	movs	r0, #90	@ 0x5a
 801dc20:	5a12      	ldrh	r2, [r2, r0]
 801dc22:	b292      	uxth	r2, r2
 801dc24:	1a8a      	subs	r2, r1, r2
 801dc26:	b291      	uxth	r1, r2
 801dc28:	687a      	ldr	r2, [r7, #4]
 801dc2a:	0010      	movs	r0, r2
 801dc2c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dc2e:	e0c5      	b.n	801ddbc <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	2258      	movs	r2, #88	@ 0x58
 801dc34:	5a99      	ldrh	r1, [r3, r2]
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	225a      	movs	r2, #90	@ 0x5a
 801dc3a:	5a9b      	ldrh	r3, [r3, r2]
 801dc3c:	b29a      	uxth	r2, r3
 801dc3e:	208e      	movs	r0, #142	@ 0x8e
 801dc40:	183b      	adds	r3, r7, r0
 801dc42:	1a8a      	subs	r2, r1, r2
 801dc44:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	225a      	movs	r2, #90	@ 0x5a
 801dc4a:	5a9b      	ldrh	r3, [r3, r2]
 801dc4c:	b29b      	uxth	r3, r3
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d100      	bne.n	801dc54 <HAL_UART_IRQHandler+0x458>
 801dc52:	e0b5      	b.n	801ddc0 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801dc54:	183b      	adds	r3, r7, r0
 801dc56:	881b      	ldrh	r3, [r3, #0]
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d100      	bne.n	801dc5e <HAL_UART_IRQHandler+0x462>
 801dc5c:	e0b0      	b.n	801ddc0 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc5e:	f3ef 8310 	mrs	r3, PRIMASK
 801dc62:	60fb      	str	r3, [r7, #12]
  return(result);
 801dc64:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dc66:	2488      	movs	r4, #136	@ 0x88
 801dc68:	193a      	adds	r2, r7, r4
 801dc6a:	6013      	str	r3, [r2, #0]
 801dc6c:	2301      	movs	r3, #1
 801dc6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc70:	693b      	ldr	r3, [r7, #16]
 801dc72:	f383 8810 	msr	PRIMASK, r3
}
 801dc76:	46c0      	nop			@ (mov r8, r8)
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	681a      	ldr	r2, [r3, #0]
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	4953      	ldr	r1, [pc, #332]	@ (801ddd0 <HAL_UART_IRQHandler+0x5d4>)
 801dc84:	400a      	ands	r2, r1
 801dc86:	601a      	str	r2, [r3, #0]
 801dc88:	193b      	adds	r3, r7, r4
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc8e:	697b      	ldr	r3, [r7, #20]
 801dc90:	f383 8810 	msr	PRIMASK, r3
}
 801dc94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc96:	f3ef 8310 	mrs	r3, PRIMASK
 801dc9a:	61bb      	str	r3, [r7, #24]
  return(result);
 801dc9c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dc9e:	2484      	movs	r4, #132	@ 0x84
 801dca0:	193a      	adds	r2, r7, r4
 801dca2:	6013      	str	r3, [r2, #0]
 801dca4:	2301      	movs	r3, #1
 801dca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dca8:	69fb      	ldr	r3, [r7, #28]
 801dcaa:	f383 8810 	msr	PRIMASK, r3
}
 801dcae:	46c0      	nop			@ (mov r8, r8)
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	689a      	ldr	r2, [r3, #8]
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	2101      	movs	r1, #1
 801dcbc:	438a      	bics	r2, r1
 801dcbe:	609a      	str	r2, [r3, #8]
 801dcc0:	193b      	adds	r3, r7, r4
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcc6:	6a3b      	ldr	r3, [r7, #32]
 801dcc8:	f383 8810 	msr	PRIMASK, r3
}
 801dccc:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	2280      	movs	r2, #128	@ 0x80
 801dcd2:	2120      	movs	r1, #32
 801dcd4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	2200      	movs	r2, #0
 801dcda:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	2200      	movs	r2, #0
 801dce0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dce2:	f3ef 8310 	mrs	r3, PRIMASK
 801dce6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801dce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dcea:	2480      	movs	r4, #128	@ 0x80
 801dcec:	193a      	adds	r2, r7, r4
 801dcee:	6013      	str	r3, [r2, #0]
 801dcf0:	2301      	movs	r3, #1
 801dcf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dcf6:	f383 8810 	msr	PRIMASK, r3
}
 801dcfa:	46c0      	nop			@ (mov r8, r8)
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	681a      	ldr	r2, [r3, #0]
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	2110      	movs	r1, #16
 801dd08:	438a      	bics	r2, r1
 801dd0a:	601a      	str	r2, [r3, #0]
 801dd0c:	193b      	adds	r3, r7, r4
 801dd0e:	681b      	ldr	r3, [r3, #0]
 801dd10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd14:	f383 8810 	msr	PRIMASK, r3
}
 801dd18:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	2202      	movs	r2, #2
 801dd1e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	22ac      	movs	r2, #172	@ 0xac
 801dd24:	589b      	ldr	r3, [r3, r2]
 801dd26:	183a      	adds	r2, r7, r0
 801dd28:	8811      	ldrh	r1, [r2, #0]
 801dd2a:	687a      	ldr	r2, [r7, #4]
 801dd2c:	0010      	movs	r0, r2
 801dd2e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dd30:	e046      	b.n	801ddc0 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801dd32:	23a4      	movs	r3, #164	@ 0xa4
 801dd34:	18fb      	adds	r3, r7, r3
 801dd36:	681a      	ldr	r2, [r3, #0]
 801dd38:	2380      	movs	r3, #128	@ 0x80
 801dd3a:	035b      	lsls	r3, r3, #13
 801dd3c:	4013      	ands	r3, r2
 801dd3e:	d012      	beq.n	801dd66 <HAL_UART_IRQHandler+0x56a>
 801dd40:	239c      	movs	r3, #156	@ 0x9c
 801dd42:	18fb      	adds	r3, r7, r3
 801dd44:	681a      	ldr	r2, [r3, #0]
 801dd46:	2380      	movs	r3, #128	@ 0x80
 801dd48:	03db      	lsls	r3, r3, #15
 801dd4a:	4013      	ands	r3, r2
 801dd4c:	d00b      	beq.n	801dd66 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	681b      	ldr	r3, [r3, #0]
 801dd52:	2280      	movs	r2, #128	@ 0x80
 801dd54:	0352      	lsls	r2, r2, #13
 801dd56:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	22a8      	movs	r2, #168	@ 0xa8
 801dd5c:	589b      	ldr	r3, [r3, r2]
 801dd5e:	687a      	ldr	r2, [r7, #4]
 801dd60:	0010      	movs	r0, r2
 801dd62:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801dd64:	e02f      	b.n	801ddc6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801dd66:	23a4      	movs	r3, #164	@ 0xa4
 801dd68:	18fb      	adds	r3, r7, r3
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	2280      	movs	r2, #128	@ 0x80
 801dd6e:	4013      	ands	r3, r2
 801dd70:	d00f      	beq.n	801dd92 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801dd72:	23a0      	movs	r3, #160	@ 0xa0
 801dd74:	18fb      	adds	r3, r7, r3
 801dd76:	681b      	ldr	r3, [r3, #0]
 801dd78:	2280      	movs	r2, #128	@ 0x80
 801dd7a:	4013      	ands	r3, r2
 801dd7c:	d009      	beq.n	801dd92 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	d01e      	beq.n	801ddc4 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dd8a:	687a      	ldr	r2, [r7, #4]
 801dd8c:	0010      	movs	r0, r2
 801dd8e:	4798      	blx	r3
    }
    return;
 801dd90:	e018      	b.n	801ddc4 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801dd92:	23a4      	movs	r3, #164	@ 0xa4
 801dd94:	18fb      	adds	r3, r7, r3
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	2240      	movs	r2, #64	@ 0x40
 801dd9a:	4013      	ands	r3, r2
 801dd9c:	d013      	beq.n	801ddc6 <HAL_UART_IRQHandler+0x5ca>
 801dd9e:	23a0      	movs	r3, #160	@ 0xa0
 801dda0:	18fb      	adds	r3, r7, r3
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	2240      	movs	r2, #64	@ 0x40
 801dda6:	4013      	ands	r3, r2
 801dda8:	d00d      	beq.n	801ddc6 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	0018      	movs	r0, r3
 801ddae:	f001 f862 	bl	801ee76 <UART_EndTransmit_IT>
    return;
 801ddb2:	e008      	b.n	801ddc6 <HAL_UART_IRQHandler+0x5ca>
      return;
 801ddb4:	46c0      	nop			@ (mov r8, r8)
 801ddb6:	e006      	b.n	801ddc6 <HAL_UART_IRQHandler+0x5ca>
    return;
 801ddb8:	46c0      	nop			@ (mov r8, r8)
 801ddba:	e004      	b.n	801ddc6 <HAL_UART_IRQHandler+0x5ca>
      return;
 801ddbc:	46c0      	nop			@ (mov r8, r8)
 801ddbe:	e002      	b.n	801ddc6 <HAL_UART_IRQHandler+0x5ca>
      return;
 801ddc0:	46c0      	nop			@ (mov r8, r8)
 801ddc2:	e000      	b.n	801ddc6 <HAL_UART_IRQHandler+0x5ca>
    return;
 801ddc4:	46c0      	nop			@ (mov r8, r8)
  }

}
 801ddc6:	46bd      	mov	sp, r7
 801ddc8:	b02b      	add	sp, #172	@ 0xac
 801ddca:	bd90      	pop	{r4, r7, pc}
 801ddcc:	fffffeff 	.word	0xfffffeff
 801ddd0:	fffffedf 	.word	0xfffffedf

0801ddd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801ddd4:	b580      	push	{r7, lr}
 801ddd6:	b082      	sub	sp, #8
 801ddd8:	af00      	add	r7, sp, #0
 801ddda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801dddc:	46c0      	nop			@ (mov r8, r8)
 801ddde:	46bd      	mov	sp, r7
 801dde0:	b002      	add	sp, #8
 801dde2:	bd80      	pop	{r7, pc}

0801dde4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801dde4:	b580      	push	{r7, lr}
 801dde6:	b082      	sub	sp, #8
 801dde8:	af00      	add	r7, sp, #0
 801ddea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801ddec:	46c0      	nop			@ (mov r8, r8)
 801ddee:	46bd      	mov	sp, r7
 801ddf0:	b002      	add	sp, #8
 801ddf2:	bd80      	pop	{r7, pc}

0801ddf4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801ddf4:	b580      	push	{r7, lr}
 801ddf6:	b082      	sub	sp, #8
 801ddf8:	af00      	add	r7, sp, #0
 801ddfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801ddfc:	46c0      	nop			@ (mov r8, r8)
 801ddfe:	46bd      	mov	sp, r7
 801de00:	b002      	add	sp, #8
 801de02:	bd80      	pop	{r7, pc}

0801de04 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801de04:	b580      	push	{r7, lr}
 801de06:	b082      	sub	sp, #8
 801de08:	af00      	add	r7, sp, #0
 801de0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801de0c:	46c0      	nop			@ (mov r8, r8)
 801de0e:	46bd      	mov	sp, r7
 801de10:	b002      	add	sp, #8
 801de12:	bd80      	pop	{r7, pc}

0801de14 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801de14:	b580      	push	{r7, lr}
 801de16:	b082      	sub	sp, #8
 801de18:	af00      	add	r7, sp, #0
 801de1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801de1c:	46c0      	nop			@ (mov r8, r8)
 801de1e:	46bd      	mov	sp, r7
 801de20:	b002      	add	sp, #8
 801de22:	bd80      	pop	{r7, pc}

0801de24 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801de24:	b580      	push	{r7, lr}
 801de26:	b082      	sub	sp, #8
 801de28:	af00      	add	r7, sp, #0
 801de2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801de2c:	46c0      	nop			@ (mov r8, r8)
 801de2e:	46bd      	mov	sp, r7
 801de30:	b002      	add	sp, #8
 801de32:	bd80      	pop	{r7, pc}

0801de34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801de34:	b580      	push	{r7, lr}
 801de36:	b082      	sub	sp, #8
 801de38:	af00      	add	r7, sp, #0
 801de3a:	6078      	str	r0, [r7, #4]
 801de3c:	000a      	movs	r2, r1
 801de3e:	1cbb      	adds	r3, r7, #2
 801de40:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801de42:	46c0      	nop			@ (mov r8, r8)
 801de44:	46bd      	mov	sp, r7
 801de46:	b002      	add	sp, #8
 801de48:	bd80      	pop	{r7, pc}
	...

0801de4c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801de4c:	b580      	push	{r7, lr}
 801de4e:	b082      	sub	sp, #8
 801de50:	af00      	add	r7, sp, #0
 801de52:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	2188      	movs	r1, #136	@ 0x88
 801de58:	4a14      	ldr	r2, [pc, #80]	@ (801deac <UART_InitCallbacksToDefault+0x60>)
 801de5a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	218c      	movs	r1, #140	@ 0x8c
 801de60:	4a13      	ldr	r2, [pc, #76]	@ (801deb0 <UART_InitCallbacksToDefault+0x64>)
 801de62:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	2190      	movs	r1, #144	@ 0x90
 801de68:	4a12      	ldr	r2, [pc, #72]	@ (801deb4 <UART_InitCallbacksToDefault+0x68>)
 801de6a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	2194      	movs	r1, #148	@ 0x94
 801de70:	4a11      	ldr	r2, [pc, #68]	@ (801deb8 <UART_InitCallbacksToDefault+0x6c>)
 801de72:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	2198      	movs	r1, #152	@ 0x98
 801de78:	4a10      	ldr	r2, [pc, #64]	@ (801debc <UART_InitCallbacksToDefault+0x70>)
 801de7a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	219c      	movs	r1, #156	@ 0x9c
 801de80:	4a0f      	ldr	r2, [pc, #60]	@ (801dec0 <UART_InitCallbacksToDefault+0x74>)
 801de82:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	21a0      	movs	r1, #160	@ 0xa0
 801de88:	4a0e      	ldr	r2, [pc, #56]	@ (801dec4 <UART_InitCallbacksToDefault+0x78>)
 801de8a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	21a4      	movs	r1, #164	@ 0xa4
 801de90:	4a0d      	ldr	r2, [pc, #52]	@ (801dec8 <UART_InitCallbacksToDefault+0x7c>)
 801de92:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	21a8      	movs	r1, #168	@ 0xa8
 801de98:	4a0c      	ldr	r2, [pc, #48]	@ (801decc <UART_InitCallbacksToDefault+0x80>)
 801de9a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	21ac      	movs	r1, #172	@ 0xac
 801dea0:	4a0b      	ldr	r2, [pc, #44]	@ (801ded0 <UART_InitCallbacksToDefault+0x84>)
 801dea2:	505a      	str	r2, [r3, r1]

}
 801dea4:	46c0      	nop			@ (mov r8, r8)
 801dea6:	46bd      	mov	sp, r7
 801dea8:	b002      	add	sp, #8
 801deaa:	bd80      	pop	{r7, pc}
 801deac:	0801dde5 	.word	0x0801dde5
 801deb0:	0801ddd5 	.word	0x0801ddd5
 801deb4:	0801ddf5 	.word	0x0801ddf5
 801deb8:	0800d2bd 	.word	0x0800d2bd
 801debc:	0800512d 	.word	0x0800512d
 801dec0:	0801de05 	.word	0x0801de05
 801dec4:	0801de15 	.word	0x0801de15
 801dec8:	0801de25 	.word	0x0801de25
 801decc:	0801f269 	.word	0x0801f269
 801ded0:	0801de35 	.word	0x0801de35

0801ded4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801ded4:	b5b0      	push	{r4, r5, r7, lr}
 801ded6:	b08e      	sub	sp, #56	@ 0x38
 801ded8:	af00      	add	r7, sp, #0
 801deda:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801dedc:	231a      	movs	r3, #26
 801dede:	2218      	movs	r2, #24
 801dee0:	189b      	adds	r3, r3, r2
 801dee2:	19db      	adds	r3, r3, r7
 801dee4:	2200      	movs	r2, #0
 801dee6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801dee8:	69fb      	ldr	r3, [r7, #28]
 801deea:	689a      	ldr	r2, [r3, #8]
 801deec:	69fb      	ldr	r3, [r7, #28]
 801deee:	691b      	ldr	r3, [r3, #16]
 801def0:	431a      	orrs	r2, r3
 801def2:	69fb      	ldr	r3, [r7, #28]
 801def4:	695b      	ldr	r3, [r3, #20]
 801def6:	431a      	orrs	r2, r3
 801def8:	69fb      	ldr	r3, [r7, #28]
 801defa:	69db      	ldr	r3, [r3, #28]
 801defc:	4313      	orrs	r3, r2
 801defe:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801df00:	69fb      	ldr	r3, [r7, #28]
 801df02:	681b      	ldr	r3, [r3, #0]
 801df04:	681b      	ldr	r3, [r3, #0]
 801df06:	4ac3      	ldr	r2, [pc, #780]	@ (801e214 <UART_SetConfig+0x340>)
 801df08:	4013      	ands	r3, r2
 801df0a:	0019      	movs	r1, r3
 801df0c:	69fb      	ldr	r3, [r7, #28]
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df12:	430a      	orrs	r2, r1
 801df14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801df16:	69fb      	ldr	r3, [r7, #28]
 801df18:	681b      	ldr	r3, [r3, #0]
 801df1a:	685b      	ldr	r3, [r3, #4]
 801df1c:	4abe      	ldr	r2, [pc, #760]	@ (801e218 <UART_SetConfig+0x344>)
 801df1e:	4013      	ands	r3, r2
 801df20:	0019      	movs	r1, r3
 801df22:	69fb      	ldr	r3, [r7, #28]
 801df24:	68da      	ldr	r2, [r3, #12]
 801df26:	69fb      	ldr	r3, [r7, #28]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	430a      	orrs	r2, r1
 801df2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801df2e:	69fb      	ldr	r3, [r7, #28]
 801df30:	699b      	ldr	r3, [r3, #24]
 801df32:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801df34:	69fb      	ldr	r3, [r7, #28]
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	4ab8      	ldr	r2, [pc, #736]	@ (801e21c <UART_SetConfig+0x348>)
 801df3a:	4293      	cmp	r3, r2
 801df3c:	d004      	beq.n	801df48 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801df3e:	69fb      	ldr	r3, [r7, #28]
 801df40:	6a1b      	ldr	r3, [r3, #32]
 801df42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df44:	4313      	orrs	r3, r2
 801df46:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801df48:	69fb      	ldr	r3, [r7, #28]
 801df4a:	681b      	ldr	r3, [r3, #0]
 801df4c:	689b      	ldr	r3, [r3, #8]
 801df4e:	4ab4      	ldr	r2, [pc, #720]	@ (801e220 <UART_SetConfig+0x34c>)
 801df50:	4013      	ands	r3, r2
 801df52:	0019      	movs	r1, r3
 801df54:	69fb      	ldr	r3, [r7, #28]
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df5a:	430a      	orrs	r2, r1
 801df5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801df5e:	69fb      	ldr	r3, [r7, #28]
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	4ab0      	ldr	r2, [pc, #704]	@ (801e224 <UART_SetConfig+0x350>)
 801df64:	4293      	cmp	r3, r2
 801df66:	d131      	bne.n	801dfcc <UART_SetConfig+0xf8>
 801df68:	4baf      	ldr	r3, [pc, #700]	@ (801e228 <UART_SetConfig+0x354>)
 801df6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801df6c:	2203      	movs	r2, #3
 801df6e:	4013      	ands	r3, r2
 801df70:	2b03      	cmp	r3, #3
 801df72:	d01d      	beq.n	801dfb0 <UART_SetConfig+0xdc>
 801df74:	d823      	bhi.n	801dfbe <UART_SetConfig+0xea>
 801df76:	2b02      	cmp	r3, #2
 801df78:	d00c      	beq.n	801df94 <UART_SetConfig+0xc0>
 801df7a:	d820      	bhi.n	801dfbe <UART_SetConfig+0xea>
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	d002      	beq.n	801df86 <UART_SetConfig+0xb2>
 801df80:	2b01      	cmp	r3, #1
 801df82:	d00e      	beq.n	801dfa2 <UART_SetConfig+0xce>
 801df84:	e01b      	b.n	801dfbe <UART_SetConfig+0xea>
 801df86:	231b      	movs	r3, #27
 801df88:	2218      	movs	r2, #24
 801df8a:	189b      	adds	r3, r3, r2
 801df8c:	19db      	adds	r3, r3, r7
 801df8e:	2201      	movs	r2, #1
 801df90:	701a      	strb	r2, [r3, #0]
 801df92:	e0b4      	b.n	801e0fe <UART_SetConfig+0x22a>
 801df94:	231b      	movs	r3, #27
 801df96:	2218      	movs	r2, #24
 801df98:	189b      	adds	r3, r3, r2
 801df9a:	19db      	adds	r3, r3, r7
 801df9c:	2202      	movs	r2, #2
 801df9e:	701a      	strb	r2, [r3, #0]
 801dfa0:	e0ad      	b.n	801e0fe <UART_SetConfig+0x22a>
 801dfa2:	231b      	movs	r3, #27
 801dfa4:	2218      	movs	r2, #24
 801dfa6:	189b      	adds	r3, r3, r2
 801dfa8:	19db      	adds	r3, r3, r7
 801dfaa:	2204      	movs	r2, #4
 801dfac:	701a      	strb	r2, [r3, #0]
 801dfae:	e0a6      	b.n	801e0fe <UART_SetConfig+0x22a>
 801dfb0:	231b      	movs	r3, #27
 801dfb2:	2218      	movs	r2, #24
 801dfb4:	189b      	adds	r3, r3, r2
 801dfb6:	19db      	adds	r3, r3, r7
 801dfb8:	2208      	movs	r2, #8
 801dfba:	701a      	strb	r2, [r3, #0]
 801dfbc:	e09f      	b.n	801e0fe <UART_SetConfig+0x22a>
 801dfbe:	231b      	movs	r3, #27
 801dfc0:	2218      	movs	r2, #24
 801dfc2:	189b      	adds	r3, r3, r2
 801dfc4:	19db      	adds	r3, r3, r7
 801dfc6:	2210      	movs	r2, #16
 801dfc8:	701a      	strb	r2, [r3, #0]
 801dfca:	e098      	b.n	801e0fe <UART_SetConfig+0x22a>
 801dfcc:	69fb      	ldr	r3, [r7, #28]
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	4a96      	ldr	r2, [pc, #600]	@ (801e22c <UART_SetConfig+0x358>)
 801dfd2:	4293      	cmp	r3, r2
 801dfd4:	d131      	bne.n	801e03a <UART_SetConfig+0x166>
 801dfd6:	4b94      	ldr	r3, [pc, #592]	@ (801e228 <UART_SetConfig+0x354>)
 801dfd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dfda:	220c      	movs	r2, #12
 801dfdc:	4013      	ands	r3, r2
 801dfde:	2b0c      	cmp	r3, #12
 801dfe0:	d01d      	beq.n	801e01e <UART_SetConfig+0x14a>
 801dfe2:	d823      	bhi.n	801e02c <UART_SetConfig+0x158>
 801dfe4:	2b08      	cmp	r3, #8
 801dfe6:	d00c      	beq.n	801e002 <UART_SetConfig+0x12e>
 801dfe8:	d820      	bhi.n	801e02c <UART_SetConfig+0x158>
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d002      	beq.n	801dff4 <UART_SetConfig+0x120>
 801dfee:	2b04      	cmp	r3, #4
 801dff0:	d00e      	beq.n	801e010 <UART_SetConfig+0x13c>
 801dff2:	e01b      	b.n	801e02c <UART_SetConfig+0x158>
 801dff4:	231b      	movs	r3, #27
 801dff6:	2218      	movs	r2, #24
 801dff8:	189b      	adds	r3, r3, r2
 801dffa:	19db      	adds	r3, r3, r7
 801dffc:	2200      	movs	r2, #0
 801dffe:	701a      	strb	r2, [r3, #0]
 801e000:	e07d      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e002:	231b      	movs	r3, #27
 801e004:	2218      	movs	r2, #24
 801e006:	189b      	adds	r3, r3, r2
 801e008:	19db      	adds	r3, r3, r7
 801e00a:	2202      	movs	r2, #2
 801e00c:	701a      	strb	r2, [r3, #0]
 801e00e:	e076      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e010:	231b      	movs	r3, #27
 801e012:	2218      	movs	r2, #24
 801e014:	189b      	adds	r3, r3, r2
 801e016:	19db      	adds	r3, r3, r7
 801e018:	2204      	movs	r2, #4
 801e01a:	701a      	strb	r2, [r3, #0]
 801e01c:	e06f      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e01e:	231b      	movs	r3, #27
 801e020:	2218      	movs	r2, #24
 801e022:	189b      	adds	r3, r3, r2
 801e024:	19db      	adds	r3, r3, r7
 801e026:	2208      	movs	r2, #8
 801e028:	701a      	strb	r2, [r3, #0]
 801e02a:	e068      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e02c:	231b      	movs	r3, #27
 801e02e:	2218      	movs	r2, #24
 801e030:	189b      	adds	r3, r3, r2
 801e032:	19db      	adds	r3, r3, r7
 801e034:	2210      	movs	r2, #16
 801e036:	701a      	strb	r2, [r3, #0]
 801e038:	e061      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e03a:	69fb      	ldr	r3, [r7, #28]
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	4a7c      	ldr	r2, [pc, #496]	@ (801e230 <UART_SetConfig+0x35c>)
 801e040:	4293      	cmp	r3, r2
 801e042:	d106      	bne.n	801e052 <UART_SetConfig+0x17e>
 801e044:	231b      	movs	r3, #27
 801e046:	2218      	movs	r2, #24
 801e048:	189b      	adds	r3, r3, r2
 801e04a:	19db      	adds	r3, r3, r7
 801e04c:	2200      	movs	r2, #0
 801e04e:	701a      	strb	r2, [r3, #0]
 801e050:	e055      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e052:	69fb      	ldr	r3, [r7, #28]
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	4a77      	ldr	r2, [pc, #476]	@ (801e234 <UART_SetConfig+0x360>)
 801e058:	4293      	cmp	r3, r2
 801e05a:	d106      	bne.n	801e06a <UART_SetConfig+0x196>
 801e05c:	231b      	movs	r3, #27
 801e05e:	2218      	movs	r2, #24
 801e060:	189b      	adds	r3, r3, r2
 801e062:	19db      	adds	r3, r3, r7
 801e064:	2200      	movs	r2, #0
 801e066:	701a      	strb	r2, [r3, #0]
 801e068:	e049      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e06a:	69fb      	ldr	r3, [r7, #28]
 801e06c:	681b      	ldr	r3, [r3, #0]
 801e06e:	4a6b      	ldr	r2, [pc, #428]	@ (801e21c <UART_SetConfig+0x348>)
 801e070:	4293      	cmp	r3, r2
 801e072:	d13e      	bne.n	801e0f2 <UART_SetConfig+0x21e>
 801e074:	4b6c      	ldr	r3, [pc, #432]	@ (801e228 <UART_SetConfig+0x354>)
 801e076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e078:	23c0      	movs	r3, #192	@ 0xc0
 801e07a:	011b      	lsls	r3, r3, #4
 801e07c:	4013      	ands	r3, r2
 801e07e:	22c0      	movs	r2, #192	@ 0xc0
 801e080:	0112      	lsls	r2, r2, #4
 801e082:	4293      	cmp	r3, r2
 801e084:	d027      	beq.n	801e0d6 <UART_SetConfig+0x202>
 801e086:	22c0      	movs	r2, #192	@ 0xc0
 801e088:	0112      	lsls	r2, r2, #4
 801e08a:	4293      	cmp	r3, r2
 801e08c:	d82a      	bhi.n	801e0e4 <UART_SetConfig+0x210>
 801e08e:	2280      	movs	r2, #128	@ 0x80
 801e090:	0112      	lsls	r2, r2, #4
 801e092:	4293      	cmp	r3, r2
 801e094:	d011      	beq.n	801e0ba <UART_SetConfig+0x1e6>
 801e096:	2280      	movs	r2, #128	@ 0x80
 801e098:	0112      	lsls	r2, r2, #4
 801e09a:	4293      	cmp	r3, r2
 801e09c:	d822      	bhi.n	801e0e4 <UART_SetConfig+0x210>
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d004      	beq.n	801e0ac <UART_SetConfig+0x1d8>
 801e0a2:	2280      	movs	r2, #128	@ 0x80
 801e0a4:	00d2      	lsls	r2, r2, #3
 801e0a6:	4293      	cmp	r3, r2
 801e0a8:	d00e      	beq.n	801e0c8 <UART_SetConfig+0x1f4>
 801e0aa:	e01b      	b.n	801e0e4 <UART_SetConfig+0x210>
 801e0ac:	231b      	movs	r3, #27
 801e0ae:	2218      	movs	r2, #24
 801e0b0:	189b      	adds	r3, r3, r2
 801e0b2:	19db      	adds	r3, r3, r7
 801e0b4:	2200      	movs	r2, #0
 801e0b6:	701a      	strb	r2, [r3, #0]
 801e0b8:	e021      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e0ba:	231b      	movs	r3, #27
 801e0bc:	2218      	movs	r2, #24
 801e0be:	189b      	adds	r3, r3, r2
 801e0c0:	19db      	adds	r3, r3, r7
 801e0c2:	2202      	movs	r2, #2
 801e0c4:	701a      	strb	r2, [r3, #0]
 801e0c6:	e01a      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e0c8:	231b      	movs	r3, #27
 801e0ca:	2218      	movs	r2, #24
 801e0cc:	189b      	adds	r3, r3, r2
 801e0ce:	19db      	adds	r3, r3, r7
 801e0d0:	2204      	movs	r2, #4
 801e0d2:	701a      	strb	r2, [r3, #0]
 801e0d4:	e013      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e0d6:	231b      	movs	r3, #27
 801e0d8:	2218      	movs	r2, #24
 801e0da:	189b      	adds	r3, r3, r2
 801e0dc:	19db      	adds	r3, r3, r7
 801e0de:	2208      	movs	r2, #8
 801e0e0:	701a      	strb	r2, [r3, #0]
 801e0e2:	e00c      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e0e4:	231b      	movs	r3, #27
 801e0e6:	2218      	movs	r2, #24
 801e0e8:	189b      	adds	r3, r3, r2
 801e0ea:	19db      	adds	r3, r3, r7
 801e0ec:	2210      	movs	r2, #16
 801e0ee:	701a      	strb	r2, [r3, #0]
 801e0f0:	e005      	b.n	801e0fe <UART_SetConfig+0x22a>
 801e0f2:	231b      	movs	r3, #27
 801e0f4:	2218      	movs	r2, #24
 801e0f6:	189b      	adds	r3, r3, r2
 801e0f8:	19db      	adds	r3, r3, r7
 801e0fa:	2210      	movs	r2, #16
 801e0fc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e0fe:	69fb      	ldr	r3, [r7, #28]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	4a46      	ldr	r2, [pc, #280]	@ (801e21c <UART_SetConfig+0x348>)
 801e104:	4293      	cmp	r3, r2
 801e106:	d000      	beq.n	801e10a <UART_SetConfig+0x236>
 801e108:	e09a      	b.n	801e240 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e10a:	231b      	movs	r3, #27
 801e10c:	2218      	movs	r2, #24
 801e10e:	189b      	adds	r3, r3, r2
 801e110:	19db      	adds	r3, r3, r7
 801e112:	781b      	ldrb	r3, [r3, #0]
 801e114:	2b08      	cmp	r3, #8
 801e116:	d01d      	beq.n	801e154 <UART_SetConfig+0x280>
 801e118:	dc20      	bgt.n	801e15c <UART_SetConfig+0x288>
 801e11a:	2b04      	cmp	r3, #4
 801e11c:	d015      	beq.n	801e14a <UART_SetConfig+0x276>
 801e11e:	dc1d      	bgt.n	801e15c <UART_SetConfig+0x288>
 801e120:	2b00      	cmp	r3, #0
 801e122:	d002      	beq.n	801e12a <UART_SetConfig+0x256>
 801e124:	2b02      	cmp	r3, #2
 801e126:	d005      	beq.n	801e134 <UART_SetConfig+0x260>
 801e128:	e018      	b.n	801e15c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e12a:	f7fd fe2d 	bl	801bd88 <HAL_RCC_GetPCLK1Freq>
 801e12e:	0003      	movs	r3, r0
 801e130:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e132:	e01c      	b.n	801e16e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e134:	4b3c      	ldr	r3, [pc, #240]	@ (801e228 <UART_SetConfig+0x354>)
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	2210      	movs	r2, #16
 801e13a:	4013      	ands	r3, r2
 801e13c:	d002      	beq.n	801e144 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e13e:	4b3e      	ldr	r3, [pc, #248]	@ (801e238 <UART_SetConfig+0x364>)
 801e140:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e142:	e014      	b.n	801e16e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801e144:	4b3d      	ldr	r3, [pc, #244]	@ (801e23c <UART_SetConfig+0x368>)
 801e146:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e148:	e011      	b.n	801e16e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e14a:	f7fd fd6d 	bl	801bc28 <HAL_RCC_GetSysClockFreq>
 801e14e:	0003      	movs	r3, r0
 801e150:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e152:	e00c      	b.n	801e16e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e154:	2380      	movs	r3, #128	@ 0x80
 801e156:	021b      	lsls	r3, r3, #8
 801e158:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e15a:	e008      	b.n	801e16e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801e15c:	2300      	movs	r3, #0
 801e15e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e160:	231a      	movs	r3, #26
 801e162:	2218      	movs	r2, #24
 801e164:	189b      	adds	r3, r3, r2
 801e166:	19db      	adds	r3, r3, r7
 801e168:	2201      	movs	r2, #1
 801e16a:	701a      	strb	r2, [r3, #0]
        break;
 801e16c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e170:	2b00      	cmp	r3, #0
 801e172:	d100      	bne.n	801e176 <UART_SetConfig+0x2a2>
 801e174:	e133      	b.n	801e3de <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e176:	69fb      	ldr	r3, [r7, #28]
 801e178:	685a      	ldr	r2, [r3, #4]
 801e17a:	0013      	movs	r3, r2
 801e17c:	005b      	lsls	r3, r3, #1
 801e17e:	189b      	adds	r3, r3, r2
 801e180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e182:	429a      	cmp	r2, r3
 801e184:	d305      	bcc.n	801e192 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801e186:	69fb      	ldr	r3, [r7, #28]
 801e188:	685b      	ldr	r3, [r3, #4]
 801e18a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e18c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e18e:	429a      	cmp	r2, r3
 801e190:	d906      	bls.n	801e1a0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801e192:	231a      	movs	r3, #26
 801e194:	2218      	movs	r2, #24
 801e196:	189b      	adds	r3, r3, r2
 801e198:	19db      	adds	r3, r3, r7
 801e19a:	2201      	movs	r2, #1
 801e19c:	701a      	strb	r2, [r3, #0]
 801e19e:	e11e      	b.n	801e3de <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801e1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e1a2:	613b      	str	r3, [r7, #16]
 801e1a4:	2300      	movs	r3, #0
 801e1a6:	617b      	str	r3, [r7, #20]
 801e1a8:	6939      	ldr	r1, [r7, #16]
 801e1aa:	697a      	ldr	r2, [r7, #20]
 801e1ac:	000b      	movs	r3, r1
 801e1ae:	0e1b      	lsrs	r3, r3, #24
 801e1b0:	0010      	movs	r0, r2
 801e1b2:	0205      	lsls	r5, r0, #8
 801e1b4:	431d      	orrs	r5, r3
 801e1b6:	000b      	movs	r3, r1
 801e1b8:	021c      	lsls	r4, r3, #8
 801e1ba:	69fb      	ldr	r3, [r7, #28]
 801e1bc:	685b      	ldr	r3, [r3, #4]
 801e1be:	085b      	lsrs	r3, r3, #1
 801e1c0:	60bb      	str	r3, [r7, #8]
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	60fb      	str	r3, [r7, #12]
 801e1c6:	68b8      	ldr	r0, [r7, #8]
 801e1c8:	68f9      	ldr	r1, [r7, #12]
 801e1ca:	1900      	adds	r0, r0, r4
 801e1cc:	4169      	adcs	r1, r5
 801e1ce:	69fb      	ldr	r3, [r7, #28]
 801e1d0:	685b      	ldr	r3, [r3, #4]
 801e1d2:	603b      	str	r3, [r7, #0]
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	607b      	str	r3, [r7, #4]
 801e1d8:	683a      	ldr	r2, [r7, #0]
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	f7e2 f9d0 	bl	8000580 <__aeabi_uldivmod>
 801e1e0:	0002      	movs	r2, r0
 801e1e2:	000b      	movs	r3, r1
 801e1e4:	0013      	movs	r3, r2
 801e1e6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e1e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e1ea:	23c0      	movs	r3, #192	@ 0xc0
 801e1ec:	009b      	lsls	r3, r3, #2
 801e1ee:	429a      	cmp	r2, r3
 801e1f0:	d309      	bcc.n	801e206 <UART_SetConfig+0x332>
 801e1f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e1f4:	2380      	movs	r3, #128	@ 0x80
 801e1f6:	035b      	lsls	r3, r3, #13
 801e1f8:	429a      	cmp	r2, r3
 801e1fa:	d204      	bcs.n	801e206 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801e1fc:	69fb      	ldr	r3, [r7, #28]
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e202:	60da      	str	r2, [r3, #12]
 801e204:	e0eb      	b.n	801e3de <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801e206:	231a      	movs	r3, #26
 801e208:	2218      	movs	r2, #24
 801e20a:	189b      	adds	r3, r3, r2
 801e20c:	19db      	adds	r3, r3, r7
 801e20e:	2201      	movs	r2, #1
 801e210:	701a      	strb	r2, [r3, #0]
 801e212:	e0e4      	b.n	801e3de <UART_SetConfig+0x50a>
 801e214:	efff69f3 	.word	0xefff69f3
 801e218:	ffffcfff 	.word	0xffffcfff
 801e21c:	40004800 	.word	0x40004800
 801e220:	fffff4ff 	.word	0xfffff4ff
 801e224:	40013800 	.word	0x40013800
 801e228:	40021000 	.word	0x40021000
 801e22c:	40004400 	.word	0x40004400
 801e230:	40004c00 	.word	0x40004c00
 801e234:	40005000 	.word	0x40005000
 801e238:	003d0900 	.word	0x003d0900
 801e23c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e240:	69fb      	ldr	r3, [r7, #28]
 801e242:	69da      	ldr	r2, [r3, #28]
 801e244:	2380      	movs	r3, #128	@ 0x80
 801e246:	021b      	lsls	r3, r3, #8
 801e248:	429a      	cmp	r2, r3
 801e24a:	d000      	beq.n	801e24e <UART_SetConfig+0x37a>
 801e24c:	e070      	b.n	801e330 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801e24e:	231b      	movs	r3, #27
 801e250:	2218      	movs	r2, #24
 801e252:	189b      	adds	r3, r3, r2
 801e254:	19db      	adds	r3, r3, r7
 801e256:	781b      	ldrb	r3, [r3, #0]
 801e258:	2b08      	cmp	r3, #8
 801e25a:	d822      	bhi.n	801e2a2 <UART_SetConfig+0x3ce>
 801e25c:	009a      	lsls	r2, r3, #2
 801e25e:	4b67      	ldr	r3, [pc, #412]	@ (801e3fc <UART_SetConfig+0x528>)
 801e260:	18d3      	adds	r3, r2, r3
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e266:	f7fd fd8f 	bl	801bd88 <HAL_RCC_GetPCLK1Freq>
 801e26a:	0003      	movs	r3, r0
 801e26c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e26e:	e021      	b.n	801e2b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e270:	f7fd fda0 	bl	801bdb4 <HAL_RCC_GetPCLK2Freq>
 801e274:	0003      	movs	r3, r0
 801e276:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e278:	e01c      	b.n	801e2b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e27a:	4b61      	ldr	r3, [pc, #388]	@ (801e400 <UART_SetConfig+0x52c>)
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	2210      	movs	r2, #16
 801e280:	4013      	ands	r3, r2
 801e282:	d002      	beq.n	801e28a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e284:	4b5f      	ldr	r3, [pc, #380]	@ (801e404 <UART_SetConfig+0x530>)
 801e286:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e288:	e014      	b.n	801e2b4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801e28a:	4b5f      	ldr	r3, [pc, #380]	@ (801e408 <UART_SetConfig+0x534>)
 801e28c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e28e:	e011      	b.n	801e2b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e290:	f7fd fcca 	bl	801bc28 <HAL_RCC_GetSysClockFreq>
 801e294:	0003      	movs	r3, r0
 801e296:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e298:	e00c      	b.n	801e2b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e29a:	2380      	movs	r3, #128	@ 0x80
 801e29c:	021b      	lsls	r3, r3, #8
 801e29e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e2a0:	e008      	b.n	801e2b4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801e2a2:	2300      	movs	r3, #0
 801e2a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e2a6:	231a      	movs	r3, #26
 801e2a8:	2218      	movs	r2, #24
 801e2aa:	189b      	adds	r3, r3, r2
 801e2ac:	19db      	adds	r3, r3, r7
 801e2ae:	2201      	movs	r2, #1
 801e2b0:	701a      	strb	r2, [r3, #0]
        break;
 801e2b2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d100      	bne.n	801e2bc <UART_SetConfig+0x3e8>
 801e2ba:	e090      	b.n	801e3de <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2be:	005a      	lsls	r2, r3, #1
 801e2c0:	69fb      	ldr	r3, [r7, #28]
 801e2c2:	685b      	ldr	r3, [r3, #4]
 801e2c4:	085b      	lsrs	r3, r3, #1
 801e2c6:	18d2      	adds	r2, r2, r3
 801e2c8:	69fb      	ldr	r3, [r7, #28]
 801e2ca:	685b      	ldr	r3, [r3, #4]
 801e2cc:	0019      	movs	r1, r3
 801e2ce:	0010      	movs	r0, r2
 801e2d0:	f7e1 ff68 	bl	80001a4 <__udivsi3>
 801e2d4:	0003      	movs	r3, r0
 801e2d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2da:	2b0f      	cmp	r3, #15
 801e2dc:	d921      	bls.n	801e322 <UART_SetConfig+0x44e>
 801e2de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e2e0:	2380      	movs	r3, #128	@ 0x80
 801e2e2:	025b      	lsls	r3, r3, #9
 801e2e4:	429a      	cmp	r2, r3
 801e2e6:	d21c      	bcs.n	801e322 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2ea:	b29a      	uxth	r2, r3
 801e2ec:	200e      	movs	r0, #14
 801e2ee:	2418      	movs	r4, #24
 801e2f0:	1903      	adds	r3, r0, r4
 801e2f2:	19db      	adds	r3, r3, r7
 801e2f4:	210f      	movs	r1, #15
 801e2f6:	438a      	bics	r2, r1
 801e2f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2fc:	085b      	lsrs	r3, r3, #1
 801e2fe:	b29b      	uxth	r3, r3
 801e300:	2207      	movs	r2, #7
 801e302:	4013      	ands	r3, r2
 801e304:	b299      	uxth	r1, r3
 801e306:	1903      	adds	r3, r0, r4
 801e308:	19db      	adds	r3, r3, r7
 801e30a:	1902      	adds	r2, r0, r4
 801e30c:	19d2      	adds	r2, r2, r7
 801e30e:	8812      	ldrh	r2, [r2, #0]
 801e310:	430a      	orrs	r2, r1
 801e312:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801e314:	69fb      	ldr	r3, [r7, #28]
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	1902      	adds	r2, r0, r4
 801e31a:	19d2      	adds	r2, r2, r7
 801e31c:	8812      	ldrh	r2, [r2, #0]
 801e31e:	60da      	str	r2, [r3, #12]
 801e320:	e05d      	b.n	801e3de <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e322:	231a      	movs	r3, #26
 801e324:	2218      	movs	r2, #24
 801e326:	189b      	adds	r3, r3, r2
 801e328:	19db      	adds	r3, r3, r7
 801e32a:	2201      	movs	r2, #1
 801e32c:	701a      	strb	r2, [r3, #0]
 801e32e:	e056      	b.n	801e3de <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e330:	231b      	movs	r3, #27
 801e332:	2218      	movs	r2, #24
 801e334:	189b      	adds	r3, r3, r2
 801e336:	19db      	adds	r3, r3, r7
 801e338:	781b      	ldrb	r3, [r3, #0]
 801e33a:	2b08      	cmp	r3, #8
 801e33c:	d822      	bhi.n	801e384 <UART_SetConfig+0x4b0>
 801e33e:	009a      	lsls	r2, r3, #2
 801e340:	4b32      	ldr	r3, [pc, #200]	@ (801e40c <UART_SetConfig+0x538>)
 801e342:	18d3      	adds	r3, r2, r3
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e348:	f7fd fd1e 	bl	801bd88 <HAL_RCC_GetPCLK1Freq>
 801e34c:	0003      	movs	r3, r0
 801e34e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e350:	e021      	b.n	801e396 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e352:	f7fd fd2f 	bl	801bdb4 <HAL_RCC_GetPCLK2Freq>
 801e356:	0003      	movs	r3, r0
 801e358:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e35a:	e01c      	b.n	801e396 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e35c:	4b28      	ldr	r3, [pc, #160]	@ (801e400 <UART_SetConfig+0x52c>)
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	2210      	movs	r2, #16
 801e362:	4013      	ands	r3, r2
 801e364:	d002      	beq.n	801e36c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e366:	4b27      	ldr	r3, [pc, #156]	@ (801e404 <UART_SetConfig+0x530>)
 801e368:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e36a:	e014      	b.n	801e396 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801e36c:	4b26      	ldr	r3, [pc, #152]	@ (801e408 <UART_SetConfig+0x534>)
 801e36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e370:	e011      	b.n	801e396 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e372:	f7fd fc59 	bl	801bc28 <HAL_RCC_GetSysClockFreq>
 801e376:	0003      	movs	r3, r0
 801e378:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e37a:	e00c      	b.n	801e396 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e37c:	2380      	movs	r3, #128	@ 0x80
 801e37e:	021b      	lsls	r3, r3, #8
 801e380:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e382:	e008      	b.n	801e396 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801e384:	2300      	movs	r3, #0
 801e386:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e388:	231a      	movs	r3, #26
 801e38a:	2218      	movs	r2, #24
 801e38c:	189b      	adds	r3, r3, r2
 801e38e:	19db      	adds	r3, r3, r7
 801e390:	2201      	movs	r2, #1
 801e392:	701a      	strb	r2, [r3, #0]
        break;
 801e394:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801e396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e398:	2b00      	cmp	r3, #0
 801e39a:	d020      	beq.n	801e3de <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e39c:	69fb      	ldr	r3, [r7, #28]
 801e39e:	685b      	ldr	r3, [r3, #4]
 801e3a0:	085a      	lsrs	r2, r3, #1
 801e3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3a4:	18d2      	adds	r2, r2, r3
 801e3a6:	69fb      	ldr	r3, [r7, #28]
 801e3a8:	685b      	ldr	r3, [r3, #4]
 801e3aa:	0019      	movs	r1, r3
 801e3ac:	0010      	movs	r0, r2
 801e3ae:	f7e1 fef9 	bl	80001a4 <__udivsi3>
 801e3b2:	0003      	movs	r3, r0
 801e3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e3b8:	2b0f      	cmp	r3, #15
 801e3ba:	d90a      	bls.n	801e3d2 <UART_SetConfig+0x4fe>
 801e3bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e3be:	2380      	movs	r3, #128	@ 0x80
 801e3c0:	025b      	lsls	r3, r3, #9
 801e3c2:	429a      	cmp	r2, r3
 801e3c4:	d205      	bcs.n	801e3d2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e3c8:	b29a      	uxth	r2, r3
 801e3ca:	69fb      	ldr	r3, [r7, #28]
 801e3cc:	681b      	ldr	r3, [r3, #0]
 801e3ce:	60da      	str	r2, [r3, #12]
 801e3d0:	e005      	b.n	801e3de <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e3d2:	231a      	movs	r3, #26
 801e3d4:	2218      	movs	r2, #24
 801e3d6:	189b      	adds	r3, r3, r2
 801e3d8:	19db      	adds	r3, r3, r7
 801e3da:	2201      	movs	r2, #1
 801e3dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e3de:	69fb      	ldr	r3, [r7, #28]
 801e3e0:	2200      	movs	r2, #0
 801e3e2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801e3e4:	69fb      	ldr	r3, [r7, #28]
 801e3e6:	2200      	movs	r2, #0
 801e3e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801e3ea:	231a      	movs	r3, #26
 801e3ec:	2218      	movs	r2, #24
 801e3ee:	189b      	adds	r3, r3, r2
 801e3f0:	19db      	adds	r3, r3, r7
 801e3f2:	781b      	ldrb	r3, [r3, #0]
}
 801e3f4:	0018      	movs	r0, r3
 801e3f6:	46bd      	mov	sp, r7
 801e3f8:	b00e      	add	sp, #56	@ 0x38
 801e3fa:	bdb0      	pop	{r4, r5, r7, pc}
 801e3fc:	0802e46c 	.word	0x0802e46c
 801e400:	40021000 	.word	0x40021000
 801e404:	003d0900 	.word	0x003d0900
 801e408:	00f42400 	.word	0x00f42400
 801e40c:	0802e490 	.word	0x0802e490

0801e410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e410:	b580      	push	{r7, lr}
 801e412:	b082      	sub	sp, #8
 801e414:	af00      	add	r7, sp, #0
 801e416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e41c:	2201      	movs	r2, #1
 801e41e:	4013      	ands	r3, r2
 801e420:	d00b      	beq.n	801e43a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e422:	687b      	ldr	r3, [r7, #4]
 801e424:	681b      	ldr	r3, [r3, #0]
 801e426:	685b      	ldr	r3, [r3, #4]
 801e428:	4a4a      	ldr	r2, [pc, #296]	@ (801e554 <UART_AdvFeatureConfig+0x144>)
 801e42a:	4013      	ands	r3, r2
 801e42c:	0019      	movs	r1, r3
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	430a      	orrs	r2, r1
 801e438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e43a:	687b      	ldr	r3, [r7, #4]
 801e43c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e43e:	2202      	movs	r2, #2
 801e440:	4013      	ands	r3, r2
 801e442:	d00b      	beq.n	801e45c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	685b      	ldr	r3, [r3, #4]
 801e44a:	4a43      	ldr	r2, [pc, #268]	@ (801e558 <UART_AdvFeatureConfig+0x148>)
 801e44c:	4013      	ands	r3, r2
 801e44e:	0019      	movs	r1, r3
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	430a      	orrs	r2, r1
 801e45a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e460:	2204      	movs	r2, #4
 801e462:	4013      	ands	r3, r2
 801e464:	d00b      	beq.n	801e47e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	685b      	ldr	r3, [r3, #4]
 801e46c:	4a3b      	ldr	r2, [pc, #236]	@ (801e55c <UART_AdvFeatureConfig+0x14c>)
 801e46e:	4013      	ands	r3, r2
 801e470:	0019      	movs	r1, r3
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	430a      	orrs	r2, r1
 801e47c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e482:	2208      	movs	r2, #8
 801e484:	4013      	ands	r3, r2
 801e486:	d00b      	beq.n	801e4a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	685b      	ldr	r3, [r3, #4]
 801e48e:	4a34      	ldr	r2, [pc, #208]	@ (801e560 <UART_AdvFeatureConfig+0x150>)
 801e490:	4013      	ands	r3, r2
 801e492:	0019      	movs	r1, r3
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	681b      	ldr	r3, [r3, #0]
 801e49c:	430a      	orrs	r2, r1
 801e49e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4a4:	2210      	movs	r2, #16
 801e4a6:	4013      	ands	r3, r2
 801e4a8:	d00b      	beq.n	801e4c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	689b      	ldr	r3, [r3, #8]
 801e4b0:	4a2c      	ldr	r2, [pc, #176]	@ (801e564 <UART_AdvFeatureConfig+0x154>)
 801e4b2:	4013      	ands	r3, r2
 801e4b4:	0019      	movs	r1, r3
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	430a      	orrs	r2, r1
 801e4c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4c6:	2220      	movs	r2, #32
 801e4c8:	4013      	ands	r3, r2
 801e4ca:	d00b      	beq.n	801e4e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	681b      	ldr	r3, [r3, #0]
 801e4d0:	689b      	ldr	r3, [r3, #8]
 801e4d2:	4a25      	ldr	r2, [pc, #148]	@ (801e568 <UART_AdvFeatureConfig+0x158>)
 801e4d4:	4013      	ands	r3, r2
 801e4d6:	0019      	movs	r1, r3
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	430a      	orrs	r2, r1
 801e4e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4e8:	2240      	movs	r2, #64	@ 0x40
 801e4ea:	4013      	ands	r3, r2
 801e4ec:	d01d      	beq.n	801e52a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	685b      	ldr	r3, [r3, #4]
 801e4f4:	4a1d      	ldr	r2, [pc, #116]	@ (801e56c <UART_AdvFeatureConfig+0x15c>)
 801e4f6:	4013      	ands	r3, r2
 801e4f8:	0019      	movs	r1, r3
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	430a      	orrs	r2, r1
 801e504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e50a:	2380      	movs	r3, #128	@ 0x80
 801e50c:	035b      	lsls	r3, r3, #13
 801e50e:	429a      	cmp	r2, r3
 801e510:	d10b      	bne.n	801e52a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	681b      	ldr	r3, [r3, #0]
 801e516:	685b      	ldr	r3, [r3, #4]
 801e518:	4a15      	ldr	r2, [pc, #84]	@ (801e570 <UART_AdvFeatureConfig+0x160>)
 801e51a:	4013      	ands	r3, r2
 801e51c:	0019      	movs	r1, r3
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	681b      	ldr	r3, [r3, #0]
 801e526:	430a      	orrs	r2, r1
 801e528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e52e:	2280      	movs	r2, #128	@ 0x80
 801e530:	4013      	ands	r3, r2
 801e532:	d00b      	beq.n	801e54c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	685b      	ldr	r3, [r3, #4]
 801e53a:	4a0e      	ldr	r2, [pc, #56]	@ (801e574 <UART_AdvFeatureConfig+0x164>)
 801e53c:	4013      	ands	r3, r2
 801e53e:	0019      	movs	r1, r3
 801e540:	687b      	ldr	r3, [r7, #4]
 801e542:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	430a      	orrs	r2, r1
 801e54a:	605a      	str	r2, [r3, #4]
  }
}
 801e54c:	46c0      	nop			@ (mov r8, r8)
 801e54e:	46bd      	mov	sp, r7
 801e550:	b002      	add	sp, #8
 801e552:	bd80      	pop	{r7, pc}
 801e554:	fffdffff 	.word	0xfffdffff
 801e558:	fffeffff 	.word	0xfffeffff
 801e55c:	fffbffff 	.word	0xfffbffff
 801e560:	ffff7fff 	.word	0xffff7fff
 801e564:	ffffefff 	.word	0xffffefff
 801e568:	ffffdfff 	.word	0xffffdfff
 801e56c:	ffefffff 	.word	0xffefffff
 801e570:	ff9fffff 	.word	0xff9fffff
 801e574:	fff7ffff 	.word	0xfff7ffff

0801e578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e578:	b580      	push	{r7, lr}
 801e57a:	b092      	sub	sp, #72	@ 0x48
 801e57c:	af02      	add	r7, sp, #8
 801e57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	2284      	movs	r2, #132	@ 0x84
 801e584:	2100      	movs	r1, #0
 801e586:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e588:	f7f6 f99a 	bl	80148c0 <HAL_GetTick>
 801e58c:	0003      	movs	r3, r0
 801e58e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	681b      	ldr	r3, [r3, #0]
 801e596:	2208      	movs	r2, #8
 801e598:	4013      	ands	r3, r2
 801e59a:	2b08      	cmp	r3, #8
 801e59c:	d12c      	bne.n	801e5f8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e5a0:	2280      	movs	r2, #128	@ 0x80
 801e5a2:	0391      	lsls	r1, r2, #14
 801e5a4:	6878      	ldr	r0, [r7, #4]
 801e5a6:	4a46      	ldr	r2, [pc, #280]	@ (801e6c0 <UART_CheckIdleState+0x148>)
 801e5a8:	9200      	str	r2, [sp, #0]
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	f000 f88c 	bl	801e6c8 <UART_WaitOnFlagUntilTimeout>
 801e5b0:	1e03      	subs	r3, r0, #0
 801e5b2:	d021      	beq.n	801e5f8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e5b4:	f3ef 8310 	mrs	r3, PRIMASK
 801e5b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e5bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e5be:	2301      	movs	r3, #1
 801e5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5c4:	f383 8810 	msr	PRIMASK, r3
}
 801e5c8:	46c0      	nop			@ (mov r8, r8)
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	681a      	ldr	r2, [r3, #0]
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	2180      	movs	r1, #128	@ 0x80
 801e5d6:	438a      	bics	r2, r1
 801e5d8:	601a      	str	r2, [r3, #0]
 801e5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e5e0:	f383 8810 	msr	PRIMASK, r3
}
 801e5e4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801e5e6:	687b      	ldr	r3, [r7, #4]
 801e5e8:	2220      	movs	r2, #32
 801e5ea:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	2278      	movs	r2, #120	@ 0x78
 801e5f0:	2100      	movs	r1, #0
 801e5f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e5f4:	2303      	movs	r3, #3
 801e5f6:	e05f      	b.n	801e6b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e5f8:	687b      	ldr	r3, [r7, #4]
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	681b      	ldr	r3, [r3, #0]
 801e5fe:	2204      	movs	r2, #4
 801e600:	4013      	ands	r3, r2
 801e602:	2b04      	cmp	r3, #4
 801e604:	d146      	bne.n	801e694 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e608:	2280      	movs	r2, #128	@ 0x80
 801e60a:	03d1      	lsls	r1, r2, #15
 801e60c:	6878      	ldr	r0, [r7, #4]
 801e60e:	4a2c      	ldr	r2, [pc, #176]	@ (801e6c0 <UART_CheckIdleState+0x148>)
 801e610:	9200      	str	r2, [sp, #0]
 801e612:	2200      	movs	r2, #0
 801e614:	f000 f858 	bl	801e6c8 <UART_WaitOnFlagUntilTimeout>
 801e618:	1e03      	subs	r3, r0, #0
 801e61a:	d03b      	beq.n	801e694 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e61c:	f3ef 8310 	mrs	r3, PRIMASK
 801e620:	60fb      	str	r3, [r7, #12]
  return(result);
 801e622:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e624:	637b      	str	r3, [r7, #52]	@ 0x34
 801e626:	2301      	movs	r3, #1
 801e628:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e62a:	693b      	ldr	r3, [r7, #16]
 801e62c:	f383 8810 	msr	PRIMASK, r3
}
 801e630:	46c0      	nop			@ (mov r8, r8)
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	681a      	ldr	r2, [r3, #0]
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	4921      	ldr	r1, [pc, #132]	@ (801e6c4 <UART_CheckIdleState+0x14c>)
 801e63e:	400a      	ands	r2, r1
 801e640:	601a      	str	r2, [r3, #0]
 801e642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e646:	697b      	ldr	r3, [r7, #20]
 801e648:	f383 8810 	msr	PRIMASK, r3
}
 801e64c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e64e:	f3ef 8310 	mrs	r3, PRIMASK
 801e652:	61bb      	str	r3, [r7, #24]
  return(result);
 801e654:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e656:	633b      	str	r3, [r7, #48]	@ 0x30
 801e658:	2301      	movs	r3, #1
 801e65a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e65c:	69fb      	ldr	r3, [r7, #28]
 801e65e:	f383 8810 	msr	PRIMASK, r3
}
 801e662:	46c0      	nop			@ (mov r8, r8)
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	689a      	ldr	r2, [r3, #8]
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	681b      	ldr	r3, [r3, #0]
 801e66e:	2101      	movs	r1, #1
 801e670:	438a      	bics	r2, r1
 801e672:	609a      	str	r2, [r3, #8]
 801e674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e676:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e678:	6a3b      	ldr	r3, [r7, #32]
 801e67a:	f383 8810 	msr	PRIMASK, r3
}
 801e67e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	2280      	movs	r2, #128	@ 0x80
 801e684:	2120      	movs	r1, #32
 801e686:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	2278      	movs	r2, #120	@ 0x78
 801e68c:	2100      	movs	r1, #0
 801e68e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e690:	2303      	movs	r3, #3
 801e692:	e011      	b.n	801e6b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	2220      	movs	r2, #32
 801e698:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e69a:	687b      	ldr	r3, [r7, #4]
 801e69c:	2280      	movs	r2, #128	@ 0x80
 801e69e:	2120      	movs	r1, #32
 801e6a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	2200      	movs	r2, #0
 801e6a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	2200      	movs	r2, #0
 801e6ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	2278      	movs	r2, #120	@ 0x78
 801e6b2:	2100      	movs	r1, #0
 801e6b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801e6b6:	2300      	movs	r3, #0
}
 801e6b8:	0018      	movs	r0, r3
 801e6ba:	46bd      	mov	sp, r7
 801e6bc:	b010      	add	sp, #64	@ 0x40
 801e6be:	bd80      	pop	{r7, pc}
 801e6c0:	01ffffff 	.word	0x01ffffff
 801e6c4:	fffffedf 	.word	0xfffffedf

0801e6c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e6c8:	b580      	push	{r7, lr}
 801e6ca:	b084      	sub	sp, #16
 801e6cc:	af00      	add	r7, sp, #0
 801e6ce:	60f8      	str	r0, [r7, #12]
 801e6d0:	60b9      	str	r1, [r7, #8]
 801e6d2:	603b      	str	r3, [r7, #0]
 801e6d4:	1dfb      	adds	r3, r7, #7
 801e6d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e6d8:	e04b      	b.n	801e772 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e6da:	69bb      	ldr	r3, [r7, #24]
 801e6dc:	3301      	adds	r3, #1
 801e6de:	d048      	beq.n	801e772 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e6e0:	f7f6 f8ee 	bl	80148c0 <HAL_GetTick>
 801e6e4:	0002      	movs	r2, r0
 801e6e6:	683b      	ldr	r3, [r7, #0]
 801e6e8:	1ad3      	subs	r3, r2, r3
 801e6ea:	69ba      	ldr	r2, [r7, #24]
 801e6ec:	429a      	cmp	r2, r3
 801e6ee:	d302      	bcc.n	801e6f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 801e6f0:	69bb      	ldr	r3, [r7, #24]
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d101      	bne.n	801e6fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801e6f6:	2303      	movs	r3, #3
 801e6f8:	e04b      	b.n	801e792 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e6fa:	68fb      	ldr	r3, [r7, #12]
 801e6fc:	681b      	ldr	r3, [r3, #0]
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	2204      	movs	r2, #4
 801e702:	4013      	ands	r3, r2
 801e704:	d035      	beq.n	801e772 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801e706:	68fb      	ldr	r3, [r7, #12]
 801e708:	681b      	ldr	r3, [r3, #0]
 801e70a:	69db      	ldr	r3, [r3, #28]
 801e70c:	2208      	movs	r2, #8
 801e70e:	4013      	ands	r3, r2
 801e710:	2b08      	cmp	r3, #8
 801e712:	d111      	bne.n	801e738 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e714:	68fb      	ldr	r3, [r7, #12]
 801e716:	681b      	ldr	r3, [r3, #0]
 801e718:	2208      	movs	r2, #8
 801e71a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801e71c:	68fb      	ldr	r3, [r7, #12]
 801e71e:	0018      	movs	r0, r3
 801e720:	f000 f9ca 	bl	801eab8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	2284      	movs	r2, #132	@ 0x84
 801e728:	2108      	movs	r1, #8
 801e72a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	2278      	movs	r2, #120	@ 0x78
 801e730:	2100      	movs	r1, #0
 801e732:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801e734:	2301      	movs	r3, #1
 801e736:	e02c      	b.n	801e792 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e738:	68fb      	ldr	r3, [r7, #12]
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	69da      	ldr	r2, [r3, #28]
 801e73e:	2380      	movs	r3, #128	@ 0x80
 801e740:	011b      	lsls	r3, r3, #4
 801e742:	401a      	ands	r2, r3
 801e744:	2380      	movs	r3, #128	@ 0x80
 801e746:	011b      	lsls	r3, r3, #4
 801e748:	429a      	cmp	r2, r3
 801e74a:	d112      	bne.n	801e772 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e74c:	68fb      	ldr	r3, [r7, #12]
 801e74e:	681b      	ldr	r3, [r3, #0]
 801e750:	2280      	movs	r2, #128	@ 0x80
 801e752:	0112      	lsls	r2, r2, #4
 801e754:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801e756:	68fb      	ldr	r3, [r7, #12]
 801e758:	0018      	movs	r0, r3
 801e75a:	f000 f9ad 	bl	801eab8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	2284      	movs	r2, #132	@ 0x84
 801e762:	2120      	movs	r1, #32
 801e764:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	2278      	movs	r2, #120	@ 0x78
 801e76a:	2100      	movs	r1, #0
 801e76c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801e76e:	2303      	movs	r3, #3
 801e770:	e00f      	b.n	801e792 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e772:	68fb      	ldr	r3, [r7, #12]
 801e774:	681b      	ldr	r3, [r3, #0]
 801e776:	69db      	ldr	r3, [r3, #28]
 801e778:	68ba      	ldr	r2, [r7, #8]
 801e77a:	4013      	ands	r3, r2
 801e77c:	68ba      	ldr	r2, [r7, #8]
 801e77e:	1ad3      	subs	r3, r2, r3
 801e780:	425a      	negs	r2, r3
 801e782:	4153      	adcs	r3, r2
 801e784:	b2db      	uxtb	r3, r3
 801e786:	001a      	movs	r2, r3
 801e788:	1dfb      	adds	r3, r7, #7
 801e78a:	781b      	ldrb	r3, [r3, #0]
 801e78c:	429a      	cmp	r2, r3
 801e78e:	d0a4      	beq.n	801e6da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e790:	2300      	movs	r3, #0
}
 801e792:	0018      	movs	r0, r3
 801e794:	46bd      	mov	sp, r7
 801e796:	b004      	add	sp, #16
 801e798:	bd80      	pop	{r7, pc}
	...

0801e79c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e79c:	b580      	push	{r7, lr}
 801e79e:	b090      	sub	sp, #64	@ 0x40
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	60f8      	str	r0, [r7, #12]
 801e7a4:	60b9      	str	r1, [r7, #8]
 801e7a6:	1dbb      	adds	r3, r7, #6
 801e7a8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801e7aa:	68fb      	ldr	r3, [r7, #12]
 801e7ac:	68ba      	ldr	r2, [r7, #8]
 801e7ae:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801e7b0:	68fb      	ldr	r3, [r7, #12]
 801e7b2:	1dba      	adds	r2, r7, #6
 801e7b4:	2158      	movs	r1, #88	@ 0x58
 801e7b6:	8812      	ldrh	r2, [r2, #0]
 801e7b8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801e7ba:	68fb      	ldr	r3, [r7, #12]
 801e7bc:	1dba      	adds	r2, r7, #6
 801e7be:	215a      	movs	r1, #90	@ 0x5a
 801e7c0:	8812      	ldrh	r2, [r2, #0]
 801e7c2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801e7c4:	68fb      	ldr	r3, [r7, #12]
 801e7c6:	2200      	movs	r2, #0
 801e7c8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801e7ca:	68fb      	ldr	r3, [r7, #12]
 801e7cc:	689a      	ldr	r2, [r3, #8]
 801e7ce:	2380      	movs	r3, #128	@ 0x80
 801e7d0:	015b      	lsls	r3, r3, #5
 801e7d2:	429a      	cmp	r2, r3
 801e7d4:	d10d      	bne.n	801e7f2 <UART_Start_Receive_IT+0x56>
 801e7d6:	68fb      	ldr	r3, [r7, #12]
 801e7d8:	691b      	ldr	r3, [r3, #16]
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d104      	bne.n	801e7e8 <UART_Start_Receive_IT+0x4c>
 801e7de:	68fb      	ldr	r3, [r7, #12]
 801e7e0:	225c      	movs	r2, #92	@ 0x5c
 801e7e2:	4950      	ldr	r1, [pc, #320]	@ (801e924 <UART_Start_Receive_IT+0x188>)
 801e7e4:	5299      	strh	r1, [r3, r2]
 801e7e6:	e02e      	b.n	801e846 <UART_Start_Receive_IT+0xaa>
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	225c      	movs	r2, #92	@ 0x5c
 801e7ec:	21ff      	movs	r1, #255	@ 0xff
 801e7ee:	5299      	strh	r1, [r3, r2]
 801e7f0:	e029      	b.n	801e846 <UART_Start_Receive_IT+0xaa>
 801e7f2:	68fb      	ldr	r3, [r7, #12]
 801e7f4:	689b      	ldr	r3, [r3, #8]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d10d      	bne.n	801e816 <UART_Start_Receive_IT+0x7a>
 801e7fa:	68fb      	ldr	r3, [r7, #12]
 801e7fc:	691b      	ldr	r3, [r3, #16]
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	d104      	bne.n	801e80c <UART_Start_Receive_IT+0x70>
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	225c      	movs	r2, #92	@ 0x5c
 801e806:	21ff      	movs	r1, #255	@ 0xff
 801e808:	5299      	strh	r1, [r3, r2]
 801e80a:	e01c      	b.n	801e846 <UART_Start_Receive_IT+0xaa>
 801e80c:	68fb      	ldr	r3, [r7, #12]
 801e80e:	225c      	movs	r2, #92	@ 0x5c
 801e810:	217f      	movs	r1, #127	@ 0x7f
 801e812:	5299      	strh	r1, [r3, r2]
 801e814:	e017      	b.n	801e846 <UART_Start_Receive_IT+0xaa>
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	689a      	ldr	r2, [r3, #8]
 801e81a:	2380      	movs	r3, #128	@ 0x80
 801e81c:	055b      	lsls	r3, r3, #21
 801e81e:	429a      	cmp	r2, r3
 801e820:	d10d      	bne.n	801e83e <UART_Start_Receive_IT+0xa2>
 801e822:	68fb      	ldr	r3, [r7, #12]
 801e824:	691b      	ldr	r3, [r3, #16]
 801e826:	2b00      	cmp	r3, #0
 801e828:	d104      	bne.n	801e834 <UART_Start_Receive_IT+0x98>
 801e82a:	68fb      	ldr	r3, [r7, #12]
 801e82c:	225c      	movs	r2, #92	@ 0x5c
 801e82e:	217f      	movs	r1, #127	@ 0x7f
 801e830:	5299      	strh	r1, [r3, r2]
 801e832:	e008      	b.n	801e846 <UART_Start_Receive_IT+0xaa>
 801e834:	68fb      	ldr	r3, [r7, #12]
 801e836:	225c      	movs	r2, #92	@ 0x5c
 801e838:	213f      	movs	r1, #63	@ 0x3f
 801e83a:	5299      	strh	r1, [r3, r2]
 801e83c:	e003      	b.n	801e846 <UART_Start_Receive_IT+0xaa>
 801e83e:	68fb      	ldr	r3, [r7, #12]
 801e840:	225c      	movs	r2, #92	@ 0x5c
 801e842:	2100      	movs	r1, #0
 801e844:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e846:	68fb      	ldr	r3, [r7, #12]
 801e848:	2284      	movs	r2, #132	@ 0x84
 801e84a:	2100      	movs	r1, #0
 801e84c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e84e:	68fb      	ldr	r3, [r7, #12]
 801e850:	2280      	movs	r2, #128	@ 0x80
 801e852:	2122      	movs	r1, #34	@ 0x22
 801e854:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e856:	f3ef 8310 	mrs	r3, PRIMASK
 801e85a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801e85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e860:	2301      	movs	r3, #1
 801e862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e866:	f383 8810 	msr	PRIMASK, r3
}
 801e86a:	46c0      	nop			@ (mov r8, r8)
 801e86c:	68fb      	ldr	r3, [r7, #12]
 801e86e:	681b      	ldr	r3, [r3, #0]
 801e870:	689a      	ldr	r2, [r3, #8]
 801e872:	68fb      	ldr	r3, [r7, #12]
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	2101      	movs	r1, #1
 801e878:	430a      	orrs	r2, r1
 801e87a:	609a      	str	r2, [r3, #8]
 801e87c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e87e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e882:	f383 8810 	msr	PRIMASK, r3
}
 801e886:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	689a      	ldr	r2, [r3, #8]
 801e88c:	2380      	movs	r3, #128	@ 0x80
 801e88e:	015b      	lsls	r3, r3, #5
 801e890:	429a      	cmp	r2, r3
 801e892:	d107      	bne.n	801e8a4 <UART_Start_Receive_IT+0x108>
 801e894:	68fb      	ldr	r3, [r7, #12]
 801e896:	691b      	ldr	r3, [r3, #16]
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d103      	bne.n	801e8a4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801e89c:	68fb      	ldr	r3, [r7, #12]
 801e89e:	4a22      	ldr	r2, [pc, #136]	@ (801e928 <UART_Start_Receive_IT+0x18c>)
 801e8a0:	669a      	str	r2, [r3, #104]	@ 0x68
 801e8a2:	e002      	b.n	801e8aa <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801e8a4:	68fb      	ldr	r3, [r7, #12]
 801e8a6:	4a21      	ldr	r2, [pc, #132]	@ (801e92c <UART_Start_Receive_IT+0x190>)
 801e8a8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801e8aa:	68fb      	ldr	r3, [r7, #12]
 801e8ac:	691b      	ldr	r3, [r3, #16]
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	d019      	beq.n	801e8e6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8b2:	f3ef 8310 	mrs	r3, PRIMASK
 801e8b6:	61fb      	str	r3, [r7, #28]
  return(result);
 801e8b8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801e8ba:	637b      	str	r3, [r7, #52]	@ 0x34
 801e8bc:	2301      	movs	r3, #1
 801e8be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8c0:	6a3b      	ldr	r3, [r7, #32]
 801e8c2:	f383 8810 	msr	PRIMASK, r3
}
 801e8c6:	46c0      	nop			@ (mov r8, r8)
 801e8c8:	68fb      	ldr	r3, [r7, #12]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	681a      	ldr	r2, [r3, #0]
 801e8ce:	68fb      	ldr	r3, [r7, #12]
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	2190      	movs	r1, #144	@ 0x90
 801e8d4:	0049      	lsls	r1, r1, #1
 801e8d6:	430a      	orrs	r2, r1
 801e8d8:	601a      	str	r2, [r3, #0]
 801e8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8dc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8e0:	f383 8810 	msr	PRIMASK, r3
}
 801e8e4:	e018      	b.n	801e918 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8e6:	f3ef 8310 	mrs	r3, PRIMASK
 801e8ea:	613b      	str	r3, [r7, #16]
  return(result);
 801e8ec:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801e8ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e8f0:	2301      	movs	r3, #1
 801e8f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8f4:	697b      	ldr	r3, [r7, #20]
 801e8f6:	f383 8810 	msr	PRIMASK, r3
}
 801e8fa:	46c0      	nop			@ (mov r8, r8)
 801e8fc:	68fb      	ldr	r3, [r7, #12]
 801e8fe:	681b      	ldr	r3, [r3, #0]
 801e900:	681a      	ldr	r2, [r3, #0]
 801e902:	68fb      	ldr	r3, [r7, #12]
 801e904:	681b      	ldr	r3, [r3, #0]
 801e906:	2120      	movs	r1, #32
 801e908:	430a      	orrs	r2, r1
 801e90a:	601a      	str	r2, [r3, #0]
 801e90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e90e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e910:	69bb      	ldr	r3, [r7, #24]
 801e912:	f383 8810 	msr	PRIMASK, r3
}
 801e916:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801e918:	2300      	movs	r3, #0
}
 801e91a:	0018      	movs	r0, r3
 801e91c:	46bd      	mov	sp, r7
 801e91e:	b010      	add	sp, #64	@ 0x40
 801e920:	bd80      	pop	{r7, pc}
 801e922:	46c0      	nop			@ (mov r8, r8)
 801e924:	000001ff 	.word	0x000001ff
 801e928:	0801f09d 	.word	0x0801f09d
 801e92c:	0801eed1 	.word	0x0801eed1

0801e930 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e930:	b580      	push	{r7, lr}
 801e932:	b090      	sub	sp, #64	@ 0x40
 801e934:	af00      	add	r7, sp, #0
 801e936:	60f8      	str	r0, [r7, #12]
 801e938:	60b9      	str	r1, [r7, #8]
 801e93a:	1dbb      	adds	r3, r7, #6
 801e93c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801e93e:	68fb      	ldr	r3, [r7, #12]
 801e940:	68ba      	ldr	r2, [r7, #8]
 801e942:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801e944:	68fb      	ldr	r3, [r7, #12]
 801e946:	1dba      	adds	r2, r7, #6
 801e948:	2158      	movs	r1, #88	@ 0x58
 801e94a:	8812      	ldrh	r2, [r2, #0]
 801e94c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e94e:	68fb      	ldr	r3, [r7, #12]
 801e950:	2284      	movs	r2, #132	@ 0x84
 801e952:	2100      	movs	r1, #0
 801e954:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e956:	68fb      	ldr	r3, [r7, #12]
 801e958:	2280      	movs	r2, #128	@ 0x80
 801e95a:	2122      	movs	r1, #34	@ 0x22
 801e95c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801e95e:	68fb      	ldr	r3, [r7, #12]
 801e960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e962:	2b00      	cmp	r3, #0
 801e964:	d028      	beq.n	801e9b8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801e966:	68fb      	ldr	r3, [r7, #12]
 801e968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e96a:	4a3e      	ldr	r2, [pc, #248]	@ (801ea64 <UART_Start_Receive_DMA+0x134>)
 801e96c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801e96e:	68fb      	ldr	r3, [r7, #12]
 801e970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e972:	4a3d      	ldr	r2, [pc, #244]	@ (801ea68 <UART_Start_Receive_DMA+0x138>)
 801e974:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801e976:	68fb      	ldr	r3, [r7, #12]
 801e978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e97a:	4a3c      	ldr	r2, [pc, #240]	@ (801ea6c <UART_Start_Receive_DMA+0x13c>)
 801e97c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e982:	2200      	movs	r2, #0
 801e984:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801e986:	68fb      	ldr	r3, [r7, #12]
 801e988:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801e98a:	68fb      	ldr	r3, [r7, #12]
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	3324      	adds	r3, #36	@ 0x24
 801e990:	0019      	movs	r1, r3
 801e992:	68fb      	ldr	r3, [r7, #12]
 801e994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e996:	001a      	movs	r2, r3
 801e998:	1dbb      	adds	r3, r7, #6
 801e99a:	881b      	ldrh	r3, [r3, #0]
 801e99c:	f7f6 fcc4 	bl	8015328 <HAL_DMA_Start_IT>
 801e9a0:	1e03      	subs	r3, r0, #0
 801e9a2:	d009      	beq.n	801e9b8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801e9a4:	68fb      	ldr	r3, [r7, #12]
 801e9a6:	2284      	movs	r2, #132	@ 0x84
 801e9a8:	2110      	movs	r1, #16
 801e9aa:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e9ac:	68fb      	ldr	r3, [r7, #12]
 801e9ae:	2280      	movs	r2, #128	@ 0x80
 801e9b0:	2120      	movs	r1, #32
 801e9b2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801e9b4:	2301      	movs	r3, #1
 801e9b6:	e050      	b.n	801ea5a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801e9b8:	68fb      	ldr	r3, [r7, #12]
 801e9ba:	691b      	ldr	r3, [r3, #16]
 801e9bc:	2b00      	cmp	r3, #0
 801e9be:	d019      	beq.n	801e9f4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9c0:	f3ef 8310 	mrs	r3, PRIMASK
 801e9c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801e9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e9ca:	2301      	movs	r3, #1
 801e9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9d0:	f383 8810 	msr	PRIMASK, r3
}
 801e9d4:	46c0      	nop			@ (mov r8, r8)
 801e9d6:	68fb      	ldr	r3, [r7, #12]
 801e9d8:	681b      	ldr	r3, [r3, #0]
 801e9da:	681a      	ldr	r2, [r3, #0]
 801e9dc:	68fb      	ldr	r3, [r7, #12]
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	2180      	movs	r1, #128	@ 0x80
 801e9e2:	0049      	lsls	r1, r1, #1
 801e9e4:	430a      	orrs	r2, r1
 801e9e6:	601a      	str	r2, [r3, #0]
 801e9e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e9ea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9ee:	f383 8810 	msr	PRIMASK, r3
}
 801e9f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9f4:	f3ef 8310 	mrs	r3, PRIMASK
 801e9f8:	613b      	str	r3, [r7, #16]
  return(result);
 801e9fa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e9fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e9fe:	2301      	movs	r3, #1
 801ea00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea02:	697b      	ldr	r3, [r7, #20]
 801ea04:	f383 8810 	msr	PRIMASK, r3
}
 801ea08:	46c0      	nop			@ (mov r8, r8)
 801ea0a:	68fb      	ldr	r3, [r7, #12]
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	689a      	ldr	r2, [r3, #8]
 801ea10:	68fb      	ldr	r3, [r7, #12]
 801ea12:	681b      	ldr	r3, [r3, #0]
 801ea14:	2101      	movs	r1, #1
 801ea16:	430a      	orrs	r2, r1
 801ea18:	609a      	str	r2, [r3, #8]
 801ea1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea1e:	69bb      	ldr	r3, [r7, #24]
 801ea20:	f383 8810 	msr	PRIMASK, r3
}
 801ea24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea26:	f3ef 8310 	mrs	r3, PRIMASK
 801ea2a:	61fb      	str	r3, [r7, #28]
  return(result);
 801ea2c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ea2e:	637b      	str	r3, [r7, #52]	@ 0x34
 801ea30:	2301      	movs	r3, #1
 801ea32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea34:	6a3b      	ldr	r3, [r7, #32]
 801ea36:	f383 8810 	msr	PRIMASK, r3
}
 801ea3a:	46c0      	nop			@ (mov r8, r8)
 801ea3c:	68fb      	ldr	r3, [r7, #12]
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	689a      	ldr	r2, [r3, #8]
 801ea42:	68fb      	ldr	r3, [r7, #12]
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	2140      	movs	r1, #64	@ 0x40
 801ea48:	430a      	orrs	r2, r1
 801ea4a:	609a      	str	r2, [r3, #8]
 801ea4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea4e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea52:	f383 8810 	msr	PRIMASK, r3
}
 801ea56:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801ea58:	2300      	movs	r3, #0
}
 801ea5a:	0018      	movs	r0, r3
 801ea5c:	46bd      	mov	sp, r7
 801ea5e:	b010      	add	sp, #64	@ 0x40
 801ea60:	bd80      	pop	{r7, pc}
 801ea62:	46c0      	nop			@ (mov r8, r8)
 801ea64:	0801ec41 	.word	0x0801ec41
 801ea68:	0801ed75 	.word	0x0801ed75
 801ea6c:	0801edbd 	.word	0x0801edbd

0801ea70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801ea70:	b580      	push	{r7, lr}
 801ea72:	b086      	sub	sp, #24
 801ea74:	af00      	add	r7, sp, #0
 801ea76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea78:	f3ef 8310 	mrs	r3, PRIMASK
 801ea7c:	60bb      	str	r3, [r7, #8]
  return(result);
 801ea7e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801ea80:	617b      	str	r3, [r7, #20]
 801ea82:	2301      	movs	r3, #1
 801ea84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea86:	68fb      	ldr	r3, [r7, #12]
 801ea88:	f383 8810 	msr	PRIMASK, r3
}
 801ea8c:	46c0      	nop			@ (mov r8, r8)
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	681b      	ldr	r3, [r3, #0]
 801ea92:	681a      	ldr	r2, [r3, #0]
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	21c0      	movs	r1, #192	@ 0xc0
 801ea9a:	438a      	bics	r2, r1
 801ea9c:	601a      	str	r2, [r3, #0]
 801ea9e:	697b      	ldr	r3, [r7, #20]
 801eaa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eaa2:	693b      	ldr	r3, [r7, #16]
 801eaa4:	f383 8810 	msr	PRIMASK, r3
}
 801eaa8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	2220      	movs	r2, #32
 801eaae:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801eab0:	46c0      	nop			@ (mov r8, r8)
 801eab2:	46bd      	mov	sp, r7
 801eab4:	b006      	add	sp, #24
 801eab6:	bd80      	pop	{r7, pc}

0801eab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801eab8:	b580      	push	{r7, lr}
 801eaba:	b08e      	sub	sp, #56	@ 0x38
 801eabc:	af00      	add	r7, sp, #0
 801eabe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eac0:	f3ef 8310 	mrs	r3, PRIMASK
 801eac4:	617b      	str	r3, [r7, #20]
  return(result);
 801eac6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801eac8:	637b      	str	r3, [r7, #52]	@ 0x34
 801eaca:	2301      	movs	r3, #1
 801eacc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eace:	69bb      	ldr	r3, [r7, #24]
 801ead0:	f383 8810 	msr	PRIMASK, r3
}
 801ead4:	46c0      	nop			@ (mov r8, r8)
 801ead6:	687b      	ldr	r3, [r7, #4]
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	681a      	ldr	r2, [r3, #0]
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	681b      	ldr	r3, [r3, #0]
 801eae0:	4926      	ldr	r1, [pc, #152]	@ (801eb7c <UART_EndRxTransfer+0xc4>)
 801eae2:	400a      	ands	r2, r1
 801eae4:	601a      	str	r2, [r3, #0]
 801eae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eae8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eaea:	69fb      	ldr	r3, [r7, #28]
 801eaec:	f383 8810 	msr	PRIMASK, r3
}
 801eaf0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eaf2:	f3ef 8310 	mrs	r3, PRIMASK
 801eaf6:	623b      	str	r3, [r7, #32]
  return(result);
 801eaf8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eafa:	633b      	str	r3, [r7, #48]	@ 0x30
 801eafc:	2301      	movs	r3, #1
 801eafe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb02:	f383 8810 	msr	PRIMASK, r3
}
 801eb06:	46c0      	nop			@ (mov r8, r8)
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	681b      	ldr	r3, [r3, #0]
 801eb0c:	689a      	ldr	r2, [r3, #8]
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	2101      	movs	r1, #1
 801eb14:	438a      	bics	r2, r1
 801eb16:	609a      	str	r2, [r3, #8]
 801eb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb1e:	f383 8810 	msr	PRIMASK, r3
}
 801eb22:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801eb24:	687b      	ldr	r3, [r7, #4]
 801eb26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801eb28:	2b01      	cmp	r3, #1
 801eb2a:	d118      	bne.n	801eb5e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb2c:	f3ef 8310 	mrs	r3, PRIMASK
 801eb30:	60bb      	str	r3, [r7, #8]
  return(result);
 801eb32:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801eb34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801eb36:	2301      	movs	r3, #1
 801eb38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	f383 8810 	msr	PRIMASK, r3
}
 801eb40:	46c0      	nop			@ (mov r8, r8)
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	681b      	ldr	r3, [r3, #0]
 801eb46:	681a      	ldr	r2, [r3, #0]
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	2110      	movs	r1, #16
 801eb4e:	438a      	bics	r2, r1
 801eb50:	601a      	str	r2, [r3, #0]
 801eb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb56:	693b      	ldr	r3, [r7, #16]
 801eb58:	f383 8810 	msr	PRIMASK, r3
}
 801eb5c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	2280      	movs	r2, #128	@ 0x80
 801eb62:	2120      	movs	r1, #32
 801eb64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801eb66:	687b      	ldr	r3, [r7, #4]
 801eb68:	2200      	movs	r2, #0
 801eb6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	2200      	movs	r2, #0
 801eb70:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801eb72:	46c0      	nop			@ (mov r8, r8)
 801eb74:	46bd      	mov	sp, r7
 801eb76:	b00e      	add	sp, #56	@ 0x38
 801eb78:	bd80      	pop	{r7, pc}
 801eb7a:	46c0      	nop			@ (mov r8, r8)
 801eb7c:	fffffedf 	.word	0xfffffedf

0801eb80 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801eb80:	b580      	push	{r7, lr}
 801eb82:	b08c      	sub	sp, #48	@ 0x30
 801eb84:	af00      	add	r7, sp, #0
 801eb86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801eb8e:	687b      	ldr	r3, [r7, #4]
 801eb90:	681b      	ldr	r3, [r3, #0]
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	2220      	movs	r2, #32
 801eb96:	4013      	ands	r3, r2
 801eb98:	d135      	bne.n	801ec06 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801eb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb9c:	2252      	movs	r2, #82	@ 0x52
 801eb9e:	2100      	movs	r1, #0
 801eba0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eba2:	f3ef 8310 	mrs	r3, PRIMASK
 801eba6:	60fb      	str	r3, [r7, #12]
  return(result);
 801eba8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ebaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ebac:	2301      	movs	r3, #1
 801ebae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebb0:	693b      	ldr	r3, [r7, #16]
 801ebb2:	f383 8810 	msr	PRIMASK, r3
}
 801ebb6:	46c0      	nop			@ (mov r8, r8)
 801ebb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebba:	681b      	ldr	r3, [r3, #0]
 801ebbc:	689a      	ldr	r2, [r3, #8]
 801ebbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	2180      	movs	r1, #128	@ 0x80
 801ebc4:	438a      	bics	r2, r1
 801ebc6:	609a      	str	r2, [r3, #8]
 801ebc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ebca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebcc:	697b      	ldr	r3, [r7, #20]
 801ebce:	f383 8810 	msr	PRIMASK, r3
}
 801ebd2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebd4:	f3ef 8310 	mrs	r3, PRIMASK
 801ebd8:	61bb      	str	r3, [r7, #24]
  return(result);
 801ebda:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ebdc:	627b      	str	r3, [r7, #36]	@ 0x24
 801ebde:	2301      	movs	r3, #1
 801ebe0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebe2:	69fb      	ldr	r3, [r7, #28]
 801ebe4:	f383 8810 	msr	PRIMASK, r3
}
 801ebe8:	46c0      	nop			@ (mov r8, r8)
 801ebea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebec:	681b      	ldr	r3, [r3, #0]
 801ebee:	681a      	ldr	r2, [r3, #0]
 801ebf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebf2:	681b      	ldr	r3, [r3, #0]
 801ebf4:	2140      	movs	r1, #64	@ 0x40
 801ebf6:	430a      	orrs	r2, r1
 801ebf8:	601a      	str	r2, [r3, #0]
 801ebfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebfc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebfe:	6a3b      	ldr	r3, [r7, #32]
 801ec00:	f383 8810 	msr	PRIMASK, r3
}
 801ec04:	e006      	b.n	801ec14 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801ec06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec08:	228c      	movs	r2, #140	@ 0x8c
 801ec0a:	589b      	ldr	r3, [r3, r2]
 801ec0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ec0e:	0010      	movs	r0, r2
 801ec10:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ec12:	46c0      	nop			@ (mov r8, r8)
 801ec14:	46c0      	nop			@ (mov r8, r8)
 801ec16:	46bd      	mov	sp, r7
 801ec18:	b00c      	add	sp, #48	@ 0x30
 801ec1a:	bd80      	pop	{r7, pc}

0801ec1c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ec1c:	b580      	push	{r7, lr}
 801ec1e:	b084      	sub	sp, #16
 801ec20:	af00      	add	r7, sp, #0
 801ec22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec28:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801ec2a:	68fb      	ldr	r3, [r7, #12]
 801ec2c:	2288      	movs	r2, #136	@ 0x88
 801ec2e:	589b      	ldr	r3, [r3, r2]
 801ec30:	68fa      	ldr	r2, [r7, #12]
 801ec32:	0010      	movs	r0, r2
 801ec34:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ec36:	46c0      	nop			@ (mov r8, r8)
 801ec38:	46bd      	mov	sp, r7
 801ec3a:	b004      	add	sp, #16
 801ec3c:	bd80      	pop	{r7, pc}
	...

0801ec40 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801ec40:	b580      	push	{r7, lr}
 801ec42:	b094      	sub	sp, #80	@ 0x50
 801ec44:	af00      	add	r7, sp, #0
 801ec46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec4c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	681b      	ldr	r3, [r3, #0]
 801ec52:	681b      	ldr	r3, [r3, #0]
 801ec54:	2220      	movs	r2, #32
 801ec56:	4013      	ands	r3, r2
 801ec58:	d16f      	bne.n	801ed3a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801ec5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec5c:	225a      	movs	r2, #90	@ 0x5a
 801ec5e:	2100      	movs	r1, #0
 801ec60:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec62:	f3ef 8310 	mrs	r3, PRIMASK
 801ec66:	61bb      	str	r3, [r7, #24]
  return(result);
 801ec68:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ec6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ec6c:	2301      	movs	r3, #1
 801ec6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec70:	69fb      	ldr	r3, [r7, #28]
 801ec72:	f383 8810 	msr	PRIMASK, r3
}
 801ec76:	46c0      	nop			@ (mov r8, r8)
 801ec78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec7a:	681b      	ldr	r3, [r3, #0]
 801ec7c:	681a      	ldr	r2, [r3, #0]
 801ec7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	493b      	ldr	r1, [pc, #236]	@ (801ed70 <UART_DMAReceiveCplt+0x130>)
 801ec84:	400a      	ands	r2, r1
 801ec86:	601a      	str	r2, [r3, #0]
 801ec88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ec8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec8c:	6a3b      	ldr	r3, [r7, #32]
 801ec8e:	f383 8810 	msr	PRIMASK, r3
}
 801ec92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec94:	f3ef 8310 	mrs	r3, PRIMASK
 801ec98:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ec9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ec9c:	647b      	str	r3, [r7, #68]	@ 0x44
 801ec9e:	2301      	movs	r3, #1
 801eca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eca4:	f383 8810 	msr	PRIMASK, r3
}
 801eca8:	46c0      	nop			@ (mov r8, r8)
 801ecaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecac:	681b      	ldr	r3, [r3, #0]
 801ecae:	689a      	ldr	r2, [r3, #8]
 801ecb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	2101      	movs	r1, #1
 801ecb6:	438a      	bics	r2, r1
 801ecb8:	609a      	str	r2, [r3, #8]
 801ecba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ecbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecc0:	f383 8810 	msr	PRIMASK, r3
}
 801ecc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecc6:	f3ef 8310 	mrs	r3, PRIMASK
 801ecca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801eccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ecce:	643b      	str	r3, [r7, #64]	@ 0x40
 801ecd0:	2301      	movs	r3, #1
 801ecd2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ecd6:	f383 8810 	msr	PRIMASK, r3
}
 801ecda:	46c0      	nop			@ (mov r8, r8)
 801ecdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	689a      	ldr	r2, [r3, #8]
 801ece2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	2140      	movs	r1, #64	@ 0x40
 801ece8:	438a      	bics	r2, r1
 801ecea:	609a      	str	r2, [r3, #8]
 801ecec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ecee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ecf2:	f383 8810 	msr	PRIMASK, r3
}
 801ecf6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801ecf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ecfa:	2280      	movs	r2, #128	@ 0x80
 801ecfc:	2120      	movs	r1, #32
 801ecfe:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ed00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ed04:	2b01      	cmp	r3, #1
 801ed06:	d118      	bne.n	801ed3a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed08:	f3ef 8310 	mrs	r3, PRIMASK
 801ed0c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ed0e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ed10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ed12:	2301      	movs	r3, #1
 801ed14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed16:	693b      	ldr	r3, [r7, #16]
 801ed18:	f383 8810 	msr	PRIMASK, r3
}
 801ed1c:	46c0      	nop			@ (mov r8, r8)
 801ed1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed20:	681b      	ldr	r3, [r3, #0]
 801ed22:	681a      	ldr	r2, [r3, #0]
 801ed24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed26:	681b      	ldr	r3, [r3, #0]
 801ed28:	2110      	movs	r1, #16
 801ed2a:	438a      	bics	r2, r1
 801ed2c:	601a      	str	r2, [r3, #0]
 801ed2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed32:	697b      	ldr	r3, [r7, #20]
 801ed34:	f383 8810 	msr	PRIMASK, r3
}
 801ed38:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ed3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed3c:	2200      	movs	r2, #0
 801ed3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ed40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ed44:	2b01      	cmp	r3, #1
 801ed46:	d109      	bne.n	801ed5c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801ed48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed4a:	22ac      	movs	r2, #172	@ 0xac
 801ed4c:	589b      	ldr	r3, [r3, r2]
 801ed4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ed50:	2158      	movs	r1, #88	@ 0x58
 801ed52:	5a51      	ldrh	r1, [r2, r1]
 801ed54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ed56:	0010      	movs	r0, r2
 801ed58:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ed5a:	e005      	b.n	801ed68 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801ed5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ed5e:	2294      	movs	r2, #148	@ 0x94
 801ed60:	589b      	ldr	r3, [r3, r2]
 801ed62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ed64:	0010      	movs	r0, r2
 801ed66:	4798      	blx	r3
}
 801ed68:	46c0      	nop			@ (mov r8, r8)
 801ed6a:	46bd      	mov	sp, r7
 801ed6c:	b014      	add	sp, #80	@ 0x50
 801ed6e:	bd80      	pop	{r7, pc}
 801ed70:	fffffeff 	.word	0xfffffeff

0801ed74 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ed74:	b580      	push	{r7, lr}
 801ed76:	b084      	sub	sp, #16
 801ed78:	af00      	add	r7, sp, #0
 801ed7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed80:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801ed82:	68fb      	ldr	r3, [r7, #12]
 801ed84:	2201      	movs	r2, #1
 801ed86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ed88:	68fb      	ldr	r3, [r7, #12]
 801ed8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ed8c:	2b01      	cmp	r3, #1
 801ed8e:	d10b      	bne.n	801eda8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801ed90:	68fb      	ldr	r3, [r7, #12]
 801ed92:	22ac      	movs	r2, #172	@ 0xac
 801ed94:	589b      	ldr	r3, [r3, r2]
 801ed96:	68fa      	ldr	r2, [r7, #12]
 801ed98:	2158      	movs	r1, #88	@ 0x58
 801ed9a:	5a52      	ldrh	r2, [r2, r1]
 801ed9c:	0852      	lsrs	r2, r2, #1
 801ed9e:	b291      	uxth	r1, r2
 801eda0:	68fa      	ldr	r2, [r7, #12]
 801eda2:	0010      	movs	r0, r2
 801eda4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801eda6:	e005      	b.n	801edb4 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801eda8:	68fb      	ldr	r3, [r7, #12]
 801edaa:	2290      	movs	r2, #144	@ 0x90
 801edac:	589b      	ldr	r3, [r3, r2]
 801edae:	68fa      	ldr	r2, [r7, #12]
 801edb0:	0010      	movs	r0, r2
 801edb2:	4798      	blx	r3
}
 801edb4:	46c0      	nop			@ (mov r8, r8)
 801edb6:	46bd      	mov	sp, r7
 801edb8:	b004      	add	sp, #16
 801edba:	bd80      	pop	{r7, pc}

0801edbc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801edbc:	b580      	push	{r7, lr}
 801edbe:	b086      	sub	sp, #24
 801edc0:	af00      	add	r7, sp, #0
 801edc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edc8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801edca:	697b      	ldr	r3, [r7, #20]
 801edcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801edce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801edd0:	697b      	ldr	r3, [r7, #20]
 801edd2:	2280      	movs	r2, #128	@ 0x80
 801edd4:	589b      	ldr	r3, [r3, r2]
 801edd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801edd8:	697b      	ldr	r3, [r7, #20]
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	689b      	ldr	r3, [r3, #8]
 801edde:	2280      	movs	r2, #128	@ 0x80
 801ede0:	4013      	ands	r3, r2
 801ede2:	2b80      	cmp	r3, #128	@ 0x80
 801ede4:	d10a      	bne.n	801edfc <UART_DMAError+0x40>
 801ede6:	693b      	ldr	r3, [r7, #16]
 801ede8:	2b21      	cmp	r3, #33	@ 0x21
 801edea:	d107      	bne.n	801edfc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801edec:	697b      	ldr	r3, [r7, #20]
 801edee:	2252      	movs	r2, #82	@ 0x52
 801edf0:	2100      	movs	r1, #0
 801edf2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801edf4:	697b      	ldr	r3, [r7, #20]
 801edf6:	0018      	movs	r0, r3
 801edf8:	f7ff fe3a 	bl	801ea70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801edfc:	697b      	ldr	r3, [r7, #20]
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	689b      	ldr	r3, [r3, #8]
 801ee02:	2240      	movs	r2, #64	@ 0x40
 801ee04:	4013      	ands	r3, r2
 801ee06:	2b40      	cmp	r3, #64	@ 0x40
 801ee08:	d10a      	bne.n	801ee20 <UART_DMAError+0x64>
 801ee0a:	68fb      	ldr	r3, [r7, #12]
 801ee0c:	2b22      	cmp	r3, #34	@ 0x22
 801ee0e:	d107      	bne.n	801ee20 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801ee10:	697b      	ldr	r3, [r7, #20]
 801ee12:	225a      	movs	r2, #90	@ 0x5a
 801ee14:	2100      	movs	r1, #0
 801ee16:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801ee18:	697b      	ldr	r3, [r7, #20]
 801ee1a:	0018      	movs	r0, r3
 801ee1c:	f7ff fe4c 	bl	801eab8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801ee20:	697b      	ldr	r3, [r7, #20]
 801ee22:	2284      	movs	r2, #132	@ 0x84
 801ee24:	589b      	ldr	r3, [r3, r2]
 801ee26:	2210      	movs	r2, #16
 801ee28:	431a      	orrs	r2, r3
 801ee2a:	697b      	ldr	r3, [r7, #20]
 801ee2c:	2184      	movs	r1, #132	@ 0x84
 801ee2e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801ee30:	697b      	ldr	r3, [r7, #20]
 801ee32:	2298      	movs	r2, #152	@ 0x98
 801ee34:	589b      	ldr	r3, [r3, r2]
 801ee36:	697a      	ldr	r2, [r7, #20]
 801ee38:	0010      	movs	r0, r2
 801ee3a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ee3c:	46c0      	nop			@ (mov r8, r8)
 801ee3e:	46bd      	mov	sp, r7
 801ee40:	b006      	add	sp, #24
 801ee42:	bd80      	pop	{r7, pc}

0801ee44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801ee44:	b580      	push	{r7, lr}
 801ee46:	b084      	sub	sp, #16
 801ee48:	af00      	add	r7, sp, #0
 801ee4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801ee52:	68fb      	ldr	r3, [r7, #12]
 801ee54:	225a      	movs	r2, #90	@ 0x5a
 801ee56:	2100      	movs	r1, #0
 801ee58:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801ee5a:	68fb      	ldr	r3, [r7, #12]
 801ee5c:	2252      	movs	r2, #82	@ 0x52
 801ee5e:	2100      	movs	r1, #0
 801ee60:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801ee62:	68fb      	ldr	r3, [r7, #12]
 801ee64:	2298      	movs	r2, #152	@ 0x98
 801ee66:	589b      	ldr	r3, [r3, r2]
 801ee68:	68fa      	ldr	r2, [r7, #12]
 801ee6a:	0010      	movs	r0, r2
 801ee6c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ee6e:	46c0      	nop			@ (mov r8, r8)
 801ee70:	46bd      	mov	sp, r7
 801ee72:	b004      	add	sp, #16
 801ee74:	bd80      	pop	{r7, pc}

0801ee76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801ee76:	b580      	push	{r7, lr}
 801ee78:	b086      	sub	sp, #24
 801ee7a:	af00      	add	r7, sp, #0
 801ee7c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee7e:	f3ef 8310 	mrs	r3, PRIMASK
 801ee82:	60bb      	str	r3, [r7, #8]
  return(result);
 801ee84:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ee86:	617b      	str	r3, [r7, #20]
 801ee88:	2301      	movs	r3, #1
 801ee8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee8c:	68fb      	ldr	r3, [r7, #12]
 801ee8e:	f383 8810 	msr	PRIMASK, r3
}
 801ee92:	46c0      	nop			@ (mov r8, r8)
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	681a      	ldr	r2, [r3, #0]
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	681b      	ldr	r3, [r3, #0]
 801ee9e:	2140      	movs	r1, #64	@ 0x40
 801eea0:	438a      	bics	r2, r1
 801eea2:	601a      	str	r2, [r3, #0]
 801eea4:	697b      	ldr	r3, [r7, #20]
 801eea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eea8:	693b      	ldr	r3, [r7, #16]
 801eeaa:	f383 8810 	msr	PRIMASK, r3
}
 801eeae:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801eeb0:	687b      	ldr	r3, [r7, #4]
 801eeb2:	2220      	movs	r2, #32
 801eeb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	2200      	movs	r2, #0
 801eeba:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	228c      	movs	r2, #140	@ 0x8c
 801eec0:	589b      	ldr	r3, [r3, r2]
 801eec2:	687a      	ldr	r2, [r7, #4]
 801eec4:	0010      	movs	r0, r2
 801eec6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801eec8:	46c0      	nop			@ (mov r8, r8)
 801eeca:	46bd      	mov	sp, r7
 801eecc:	b006      	add	sp, #24
 801eece:	bd80      	pop	{r7, pc}

0801eed0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801eed0:	b580      	push	{r7, lr}
 801eed2:	b094      	sub	sp, #80	@ 0x50
 801eed4:	af00      	add	r7, sp, #0
 801eed6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801eed8:	204e      	movs	r0, #78	@ 0x4e
 801eeda:	183b      	adds	r3, r7, r0
 801eedc:	687a      	ldr	r2, [r7, #4]
 801eede:	215c      	movs	r1, #92	@ 0x5c
 801eee0:	5a52      	ldrh	r2, [r2, r1]
 801eee2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	2280      	movs	r2, #128	@ 0x80
 801eee8:	589b      	ldr	r3, [r3, r2]
 801eeea:	2b22      	cmp	r3, #34	@ 0x22
 801eeec:	d000      	beq.n	801eef0 <UART_RxISR_8BIT+0x20>
 801eeee:	e0c2      	b.n	801f076 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	681b      	ldr	r3, [r3, #0]
 801eef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801eef6:	214c      	movs	r1, #76	@ 0x4c
 801eef8:	187b      	adds	r3, r7, r1
 801eefa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801eefc:	187b      	adds	r3, r7, r1
 801eefe:	881b      	ldrh	r3, [r3, #0]
 801ef00:	b2da      	uxtb	r2, r3
 801ef02:	183b      	adds	r3, r7, r0
 801ef04:	881b      	ldrh	r3, [r3, #0]
 801ef06:	b2d9      	uxtb	r1, r3
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef0c:	400a      	ands	r2, r1
 801ef0e:	b2d2      	uxtb	r2, r2
 801ef10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef16:	1c5a      	adds	r2, r3, #1
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	225a      	movs	r2, #90	@ 0x5a
 801ef20:	5a9b      	ldrh	r3, [r3, r2]
 801ef22:	b29b      	uxth	r3, r3
 801ef24:	3b01      	subs	r3, #1
 801ef26:	b299      	uxth	r1, r3
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	225a      	movs	r2, #90	@ 0x5a
 801ef2c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801ef2e:	687b      	ldr	r3, [r7, #4]
 801ef30:	225a      	movs	r2, #90	@ 0x5a
 801ef32:	5a9b      	ldrh	r3, [r3, r2]
 801ef34:	b29b      	uxth	r3, r3
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d000      	beq.n	801ef3c <UART_RxISR_8BIT+0x6c>
 801ef3a:	e0a4      	b.n	801f086 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef3c:	f3ef 8310 	mrs	r3, PRIMASK
 801ef40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ef42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ef44:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ef46:	2301      	movs	r3, #1
 801ef48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef4c:	f383 8810 	msr	PRIMASK, r3
}
 801ef50:	46c0      	nop			@ (mov r8, r8)
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	681b      	ldr	r3, [r3, #0]
 801ef56:	681a      	ldr	r2, [r3, #0]
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	494c      	ldr	r1, [pc, #304]	@ (801f090 <UART_RxISR_8BIT+0x1c0>)
 801ef5e:	400a      	ands	r2, r1
 801ef60:	601a      	str	r2, [r3, #0]
 801ef62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ef64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef68:	f383 8810 	msr	PRIMASK, r3
}
 801ef6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef6e:	f3ef 8310 	mrs	r3, PRIMASK
 801ef72:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ef74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ef76:	647b      	str	r3, [r7, #68]	@ 0x44
 801ef78:	2301      	movs	r3, #1
 801ef7a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ef7e:	f383 8810 	msr	PRIMASK, r3
}
 801ef82:	46c0      	nop			@ (mov r8, r8)
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	681b      	ldr	r3, [r3, #0]
 801ef88:	689a      	ldr	r2, [r3, #8]
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	681b      	ldr	r3, [r3, #0]
 801ef8e:	2101      	movs	r1, #1
 801ef90:	438a      	bics	r2, r1
 801ef92:	609a      	str	r2, [r3, #8]
 801ef94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ef96:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ef9a:	f383 8810 	msr	PRIMASK, r3
}
 801ef9e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	2280      	movs	r2, #128	@ 0x80
 801efa4:	2120      	movs	r1, #32
 801efa6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	2200      	movs	r2, #0
 801efac:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	2200      	movs	r2, #0
 801efb2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	681b      	ldr	r3, [r3, #0]
 801efb8:	4a36      	ldr	r2, [pc, #216]	@ (801f094 <UART_RxISR_8BIT+0x1c4>)
 801efba:	4293      	cmp	r3, r2
 801efbc:	d01f      	beq.n	801effe <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	681b      	ldr	r3, [r3, #0]
 801efc2:	685a      	ldr	r2, [r3, #4]
 801efc4:	2380      	movs	r3, #128	@ 0x80
 801efc6:	041b      	lsls	r3, r3, #16
 801efc8:	4013      	ands	r3, r2
 801efca:	d018      	beq.n	801effe <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801efcc:	f3ef 8310 	mrs	r3, PRIMASK
 801efd0:	61bb      	str	r3, [r7, #24]
  return(result);
 801efd2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801efd4:	643b      	str	r3, [r7, #64]	@ 0x40
 801efd6:	2301      	movs	r3, #1
 801efd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efda:	69fb      	ldr	r3, [r7, #28]
 801efdc:	f383 8810 	msr	PRIMASK, r3
}
 801efe0:	46c0      	nop			@ (mov r8, r8)
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	681a      	ldr	r2, [r3, #0]
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	681b      	ldr	r3, [r3, #0]
 801efec:	492a      	ldr	r1, [pc, #168]	@ (801f098 <UART_RxISR_8BIT+0x1c8>)
 801efee:	400a      	ands	r2, r1
 801eff0:	601a      	str	r2, [r3, #0]
 801eff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eff4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eff6:	6a3b      	ldr	r3, [r7, #32]
 801eff8:	f383 8810 	msr	PRIMASK, r3
}
 801effc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f002:	2b01      	cmp	r3, #1
 801f004:	d130      	bne.n	801f068 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	2200      	movs	r2, #0
 801f00a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f00c:	f3ef 8310 	mrs	r3, PRIMASK
 801f010:	60fb      	str	r3, [r7, #12]
  return(result);
 801f012:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f016:	2301      	movs	r3, #1
 801f018:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f01a:	693b      	ldr	r3, [r7, #16]
 801f01c:	f383 8810 	msr	PRIMASK, r3
}
 801f020:	46c0      	nop			@ (mov r8, r8)
 801f022:	687b      	ldr	r3, [r7, #4]
 801f024:	681b      	ldr	r3, [r3, #0]
 801f026:	681a      	ldr	r2, [r3, #0]
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	2110      	movs	r1, #16
 801f02e:	438a      	bics	r2, r1
 801f030:	601a      	str	r2, [r3, #0]
 801f032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f034:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f036:	697b      	ldr	r3, [r7, #20]
 801f038:	f383 8810 	msr	PRIMASK, r3
}
 801f03c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	681b      	ldr	r3, [r3, #0]
 801f042:	69db      	ldr	r3, [r3, #28]
 801f044:	2210      	movs	r2, #16
 801f046:	4013      	ands	r3, r2
 801f048:	2b10      	cmp	r3, #16
 801f04a:	d103      	bne.n	801f054 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	2210      	movs	r2, #16
 801f052:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	22ac      	movs	r2, #172	@ 0xac
 801f058:	589b      	ldr	r3, [r3, r2]
 801f05a:	687a      	ldr	r2, [r7, #4]
 801f05c:	2158      	movs	r1, #88	@ 0x58
 801f05e:	5a51      	ldrh	r1, [r2, r1]
 801f060:	687a      	ldr	r2, [r7, #4]
 801f062:	0010      	movs	r0, r2
 801f064:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f066:	e00e      	b.n	801f086 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	2294      	movs	r2, #148	@ 0x94
 801f06c:	589b      	ldr	r3, [r3, r2]
 801f06e:	687a      	ldr	r2, [r7, #4]
 801f070:	0010      	movs	r0, r2
 801f072:	4798      	blx	r3
}
 801f074:	e007      	b.n	801f086 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	699a      	ldr	r2, [r3, #24]
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	2108      	movs	r1, #8
 801f082:	430a      	orrs	r2, r1
 801f084:	619a      	str	r2, [r3, #24]
}
 801f086:	46c0      	nop			@ (mov r8, r8)
 801f088:	46bd      	mov	sp, r7
 801f08a:	b014      	add	sp, #80	@ 0x50
 801f08c:	bd80      	pop	{r7, pc}
 801f08e:	46c0      	nop			@ (mov r8, r8)
 801f090:	fffffedf 	.word	0xfffffedf
 801f094:	40004800 	.word	0x40004800
 801f098:	fbffffff 	.word	0xfbffffff

0801f09c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f09c:	b580      	push	{r7, lr}
 801f09e:	b094      	sub	sp, #80	@ 0x50
 801f0a0:	af00      	add	r7, sp, #0
 801f0a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f0a4:	204e      	movs	r0, #78	@ 0x4e
 801f0a6:	183b      	adds	r3, r7, r0
 801f0a8:	687a      	ldr	r2, [r7, #4]
 801f0aa:	215c      	movs	r1, #92	@ 0x5c
 801f0ac:	5a52      	ldrh	r2, [r2, r1]
 801f0ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	2280      	movs	r2, #128	@ 0x80
 801f0b4:	589b      	ldr	r3, [r3, r2]
 801f0b6:	2b22      	cmp	r3, #34	@ 0x22
 801f0b8:	d000      	beq.n	801f0bc <UART_RxISR_16BIT+0x20>
 801f0ba:	e0c2      	b.n	801f242 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f0c2:	214c      	movs	r1, #76	@ 0x4c
 801f0c4:	187b      	adds	r3, r7, r1
 801f0c6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f0cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801f0ce:	187b      	adds	r3, r7, r1
 801f0d0:	183a      	adds	r2, r7, r0
 801f0d2:	881b      	ldrh	r3, [r3, #0]
 801f0d4:	8812      	ldrh	r2, [r2, #0]
 801f0d6:	4013      	ands	r3, r2
 801f0d8:	b29a      	uxth	r2, r3
 801f0da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f0dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f0e2:	1c9a      	adds	r2, r3, #2
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	225a      	movs	r2, #90	@ 0x5a
 801f0ec:	5a9b      	ldrh	r3, [r3, r2]
 801f0ee:	b29b      	uxth	r3, r3
 801f0f0:	3b01      	subs	r3, #1
 801f0f2:	b299      	uxth	r1, r3
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	225a      	movs	r2, #90	@ 0x5a
 801f0f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	225a      	movs	r2, #90	@ 0x5a
 801f0fe:	5a9b      	ldrh	r3, [r3, r2]
 801f100:	b29b      	uxth	r3, r3
 801f102:	2b00      	cmp	r3, #0
 801f104:	d000      	beq.n	801f108 <UART_RxISR_16BIT+0x6c>
 801f106:	e0a4      	b.n	801f252 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f108:	f3ef 8310 	mrs	r3, PRIMASK
 801f10c:	623b      	str	r3, [r7, #32]
  return(result);
 801f10e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f110:	647b      	str	r3, [r7, #68]	@ 0x44
 801f112:	2301      	movs	r3, #1
 801f114:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f118:	f383 8810 	msr	PRIMASK, r3
}
 801f11c:	46c0      	nop			@ (mov r8, r8)
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	681a      	ldr	r2, [r3, #0]
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	494c      	ldr	r1, [pc, #304]	@ (801f25c <UART_RxISR_16BIT+0x1c0>)
 801f12a:	400a      	ands	r2, r1
 801f12c:	601a      	str	r2, [r3, #0]
 801f12e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f130:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f134:	f383 8810 	msr	PRIMASK, r3
}
 801f138:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f13a:	f3ef 8310 	mrs	r3, PRIMASK
 801f13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801f140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f142:	643b      	str	r3, [r7, #64]	@ 0x40
 801f144:	2301      	movs	r3, #1
 801f146:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f14a:	f383 8810 	msr	PRIMASK, r3
}
 801f14e:	46c0      	nop			@ (mov r8, r8)
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	689a      	ldr	r2, [r3, #8]
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	2101      	movs	r1, #1
 801f15c:	438a      	bics	r2, r1
 801f15e:	609a      	str	r2, [r3, #8]
 801f160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f162:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f166:	f383 8810 	msr	PRIMASK, r3
}
 801f16a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	2280      	movs	r2, #128	@ 0x80
 801f170:	2120      	movs	r1, #32
 801f172:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	2200      	movs	r2, #0
 801f178:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	2200      	movs	r2, #0
 801f17e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	681b      	ldr	r3, [r3, #0]
 801f184:	4a36      	ldr	r2, [pc, #216]	@ (801f260 <UART_RxISR_16BIT+0x1c4>)
 801f186:	4293      	cmp	r3, r2
 801f188:	d01f      	beq.n	801f1ca <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	681b      	ldr	r3, [r3, #0]
 801f18e:	685a      	ldr	r2, [r3, #4]
 801f190:	2380      	movs	r3, #128	@ 0x80
 801f192:	041b      	lsls	r3, r3, #16
 801f194:	4013      	ands	r3, r2
 801f196:	d018      	beq.n	801f1ca <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f198:	f3ef 8310 	mrs	r3, PRIMASK
 801f19c:	617b      	str	r3, [r7, #20]
  return(result);
 801f19e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f1a2:	2301      	movs	r3, #1
 801f1a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1a6:	69bb      	ldr	r3, [r7, #24]
 801f1a8:	f383 8810 	msr	PRIMASK, r3
}
 801f1ac:	46c0      	nop			@ (mov r8, r8)
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	681a      	ldr	r2, [r3, #0]
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	681b      	ldr	r3, [r3, #0]
 801f1b8:	492a      	ldr	r1, [pc, #168]	@ (801f264 <UART_RxISR_16BIT+0x1c8>)
 801f1ba:	400a      	ands	r2, r1
 801f1bc:	601a      	str	r2, [r3, #0]
 801f1be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f1c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1c2:	69fb      	ldr	r3, [r7, #28]
 801f1c4:	f383 8810 	msr	PRIMASK, r3
}
 801f1c8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f1ce:	2b01      	cmp	r3, #1
 801f1d0:	d130      	bne.n	801f234 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	2200      	movs	r2, #0
 801f1d6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1d8:	f3ef 8310 	mrs	r3, PRIMASK
 801f1dc:	60bb      	str	r3, [r7, #8]
  return(result);
 801f1de:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f1e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f1e2:	2301      	movs	r3, #1
 801f1e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1e6:	68fb      	ldr	r3, [r7, #12]
 801f1e8:	f383 8810 	msr	PRIMASK, r3
}
 801f1ec:	46c0      	nop			@ (mov r8, r8)
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	681b      	ldr	r3, [r3, #0]
 801f1f2:	681a      	ldr	r2, [r3, #0]
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	681b      	ldr	r3, [r3, #0]
 801f1f8:	2110      	movs	r1, #16
 801f1fa:	438a      	bics	r2, r1
 801f1fc:	601a      	str	r2, [r3, #0]
 801f1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f200:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f202:	693b      	ldr	r3, [r7, #16]
 801f204:	f383 8810 	msr	PRIMASK, r3
}
 801f208:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	681b      	ldr	r3, [r3, #0]
 801f20e:	69db      	ldr	r3, [r3, #28]
 801f210:	2210      	movs	r2, #16
 801f212:	4013      	ands	r3, r2
 801f214:	2b10      	cmp	r3, #16
 801f216:	d103      	bne.n	801f220 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	2210      	movs	r2, #16
 801f21e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	22ac      	movs	r2, #172	@ 0xac
 801f224:	589b      	ldr	r3, [r3, r2]
 801f226:	687a      	ldr	r2, [r7, #4]
 801f228:	2158      	movs	r1, #88	@ 0x58
 801f22a:	5a51      	ldrh	r1, [r2, r1]
 801f22c:	687a      	ldr	r2, [r7, #4]
 801f22e:	0010      	movs	r0, r2
 801f230:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f232:	e00e      	b.n	801f252 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	2294      	movs	r2, #148	@ 0x94
 801f238:	589b      	ldr	r3, [r3, r2]
 801f23a:	687a      	ldr	r2, [r7, #4]
 801f23c:	0010      	movs	r0, r2
 801f23e:	4798      	blx	r3
}
 801f240:	e007      	b.n	801f252 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	681b      	ldr	r3, [r3, #0]
 801f246:	699a      	ldr	r2, [r3, #24]
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	681b      	ldr	r3, [r3, #0]
 801f24c:	2108      	movs	r1, #8
 801f24e:	430a      	orrs	r2, r1
 801f250:	619a      	str	r2, [r3, #24]
}
 801f252:	46c0      	nop			@ (mov r8, r8)
 801f254:	46bd      	mov	sp, r7
 801f256:	b014      	add	sp, #80	@ 0x50
 801f258:	bd80      	pop	{r7, pc}
 801f25a:	46c0      	nop			@ (mov r8, r8)
 801f25c:	fffffedf 	.word	0xfffffedf
 801f260:	40004800 	.word	0x40004800
 801f264:	fbffffff 	.word	0xfbffffff

0801f268 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f268:	b580      	push	{r7, lr}
 801f26a:	b082      	sub	sp, #8
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f270:	46c0      	nop			@ (mov r8, r8)
 801f272:	46bd      	mov	sp, r7
 801f274:	b002      	add	sp, #8
 801f276:	bd80      	pop	{r7, pc}

0801f278 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801f278:	b580      	push	{r7, lr}
 801f27a:	b084      	sub	sp, #16
 801f27c:	af00      	add	r7, sp, #0
 801f27e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	2244      	movs	r2, #68	@ 0x44
 801f284:	2100      	movs	r1, #0
 801f286:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f288:	4b05      	ldr	r3, [pc, #20]	@ (801f2a0 <USB_EnableGlobalInt+0x28>)
 801f28a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801f28c:	68fb      	ldr	r3, [r7, #12]
 801f28e:	b299      	uxth	r1, r3
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	2240      	movs	r2, #64	@ 0x40
 801f294:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f296:	2300      	movs	r3, #0
}
 801f298:	0018      	movs	r0, r3
 801f29a:	46bd      	mov	sp, r7
 801f29c:	b004      	add	sp, #16
 801f29e:	bd80      	pop	{r7, pc}
 801f2a0:	0000bf80 	.word	0x0000bf80

0801f2a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801f2a4:	b580      	push	{r7, lr}
 801f2a6:	b084      	sub	sp, #16
 801f2a8:	af00      	add	r7, sp, #0
 801f2aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f2ac:	4b09      	ldr	r3, [pc, #36]	@ (801f2d4 <USB_DisableGlobalInt+0x30>)
 801f2ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	2240      	movs	r2, #64	@ 0x40
 801f2b4:	5a9b      	ldrh	r3, [r3, r2]
 801f2b6:	b29b      	uxth	r3, r3
 801f2b8:	68fa      	ldr	r2, [r7, #12]
 801f2ba:	b292      	uxth	r2, r2
 801f2bc:	43d2      	mvns	r2, r2
 801f2be:	b292      	uxth	r2, r2
 801f2c0:	4013      	ands	r3, r2
 801f2c2:	b299      	uxth	r1, r3
 801f2c4:	687b      	ldr	r3, [r7, #4]
 801f2c6:	2240      	movs	r2, #64	@ 0x40
 801f2c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f2ca:	2300      	movs	r3, #0
}
 801f2cc:	0018      	movs	r0, r3
 801f2ce:	46bd      	mov	sp, r7
 801f2d0:	b004      	add	sp, #16
 801f2d2:	bd80      	pop	{r7, pc}
 801f2d4:	0000bf80 	.word	0x0000bf80

0801f2d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801f2d8:	b084      	sub	sp, #16
 801f2da:	b590      	push	{r4, r7, lr}
 801f2dc:	b083      	sub	sp, #12
 801f2de:	af00      	add	r7, sp, #0
 801f2e0:	6078      	str	r0, [r7, #4]
 801f2e2:	2004      	movs	r0, #4
 801f2e4:	2410      	movs	r4, #16
 801f2e6:	1900      	adds	r0, r0, r4
 801f2e8:	2408      	movs	r4, #8
 801f2ea:	46a4      	mov	ip, r4
 801f2ec:	44bc      	add	ip, r7
 801f2ee:	4460      	add	r0, ip
 801f2f0:	6001      	str	r1, [r0, #0]
 801f2f2:	6042      	str	r2, [r0, #4]
 801f2f4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	2240      	movs	r2, #64	@ 0x40
 801f2fa:	2101      	movs	r1, #1
 801f2fc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801f2fe:	687b      	ldr	r3, [r7, #4]
 801f300:	2240      	movs	r2, #64	@ 0x40
 801f302:	2100      	movs	r1, #0
 801f304:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	2244      	movs	r2, #68	@ 0x44
 801f30a:	2100      	movs	r1, #0
 801f30c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	2250      	movs	r2, #80	@ 0x50
 801f312:	2100      	movs	r1, #0
 801f314:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f316:	2300      	movs	r3, #0
}
 801f318:	0018      	movs	r0, r3
 801f31a:	46bd      	mov	sp, r7
 801f31c:	b003      	add	sp, #12
 801f31e:	bc90      	pop	{r4, r7}
 801f320:	bc08      	pop	{r3}
 801f322:	b004      	add	sp, #16
 801f324:	4718      	bx	r3
	...

0801f328 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f328:	b580      	push	{r7, lr}
 801f32a:	b09c      	sub	sp, #112	@ 0x70
 801f32c:	af00      	add	r7, sp, #0
 801f32e:	6078      	str	r0, [r7, #4]
 801f330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801f332:	236f      	movs	r3, #111	@ 0x6f
 801f334:	18fb      	adds	r3, r7, r3
 801f336:	2200      	movs	r2, #0
 801f338:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801f33a:	687a      	ldr	r2, [r7, #4]
 801f33c:	683b      	ldr	r3, [r7, #0]
 801f33e:	781b      	ldrb	r3, [r3, #0]
 801f340:	009b      	lsls	r3, r3, #2
 801f342:	18d3      	adds	r3, r2, r3
 801f344:	881b      	ldrh	r3, [r3, #0]
 801f346:	b29a      	uxth	r2, r3
 801f348:	236c      	movs	r3, #108	@ 0x6c
 801f34a:	18fb      	adds	r3, r7, r3
 801f34c:	49a3      	ldr	r1, [pc, #652]	@ (801f5dc <USB_ActivateEndpoint+0x2b4>)
 801f34e:	400a      	ands	r2, r1
 801f350:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801f352:	683b      	ldr	r3, [r7, #0]
 801f354:	78db      	ldrb	r3, [r3, #3]
 801f356:	2b03      	cmp	r3, #3
 801f358:	d017      	beq.n	801f38a <USB_ActivateEndpoint+0x62>
 801f35a:	dc28      	bgt.n	801f3ae <USB_ActivateEndpoint+0x86>
 801f35c:	2b02      	cmp	r3, #2
 801f35e:	d00e      	beq.n	801f37e <USB_ActivateEndpoint+0x56>
 801f360:	dc25      	bgt.n	801f3ae <USB_ActivateEndpoint+0x86>
 801f362:	2b00      	cmp	r3, #0
 801f364:	d002      	beq.n	801f36c <USB_ActivateEndpoint+0x44>
 801f366:	2b01      	cmp	r3, #1
 801f368:	d018      	beq.n	801f39c <USB_ActivateEndpoint+0x74>
 801f36a:	e020      	b.n	801f3ae <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801f36c:	226c      	movs	r2, #108	@ 0x6c
 801f36e:	18bb      	adds	r3, r7, r2
 801f370:	18ba      	adds	r2, r7, r2
 801f372:	8812      	ldrh	r2, [r2, #0]
 801f374:	2180      	movs	r1, #128	@ 0x80
 801f376:	0089      	lsls	r1, r1, #2
 801f378:	430a      	orrs	r2, r1
 801f37a:	801a      	strh	r2, [r3, #0]
      break;
 801f37c:	e01c      	b.n	801f3b8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801f37e:	226c      	movs	r2, #108	@ 0x6c
 801f380:	18bb      	adds	r3, r7, r2
 801f382:	18ba      	adds	r2, r7, r2
 801f384:	8812      	ldrh	r2, [r2, #0]
 801f386:	801a      	strh	r2, [r3, #0]
      break;
 801f388:	e016      	b.n	801f3b8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801f38a:	226c      	movs	r2, #108	@ 0x6c
 801f38c:	18bb      	adds	r3, r7, r2
 801f38e:	18ba      	adds	r2, r7, r2
 801f390:	8812      	ldrh	r2, [r2, #0]
 801f392:	21c0      	movs	r1, #192	@ 0xc0
 801f394:	00c9      	lsls	r1, r1, #3
 801f396:	430a      	orrs	r2, r1
 801f398:	801a      	strh	r2, [r3, #0]
      break;
 801f39a:	e00d      	b.n	801f3b8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801f39c:	226c      	movs	r2, #108	@ 0x6c
 801f39e:	18bb      	adds	r3, r7, r2
 801f3a0:	18ba      	adds	r2, r7, r2
 801f3a2:	8812      	ldrh	r2, [r2, #0]
 801f3a4:	2180      	movs	r1, #128	@ 0x80
 801f3a6:	00c9      	lsls	r1, r1, #3
 801f3a8:	430a      	orrs	r2, r1
 801f3aa:	801a      	strh	r2, [r3, #0]
      break;
 801f3ac:	e004      	b.n	801f3b8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801f3ae:	236f      	movs	r3, #111	@ 0x6f
 801f3b0:	18fb      	adds	r3, r7, r3
 801f3b2:	2201      	movs	r2, #1
 801f3b4:	701a      	strb	r2, [r3, #0]
      break;
 801f3b6:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801f3b8:	687a      	ldr	r2, [r7, #4]
 801f3ba:	683b      	ldr	r3, [r7, #0]
 801f3bc:	781b      	ldrb	r3, [r3, #0]
 801f3be:	009b      	lsls	r3, r3, #2
 801f3c0:	18d3      	adds	r3, r2, r3
 801f3c2:	226c      	movs	r2, #108	@ 0x6c
 801f3c4:	18ba      	adds	r2, r7, r2
 801f3c6:	8812      	ldrh	r2, [r2, #0]
 801f3c8:	4985      	ldr	r1, [pc, #532]	@ (801f5e0 <USB_ActivateEndpoint+0x2b8>)
 801f3ca:	430a      	orrs	r2, r1
 801f3cc:	b292      	uxth	r2, r2
 801f3ce:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801f3d0:	687a      	ldr	r2, [r7, #4]
 801f3d2:	683b      	ldr	r3, [r7, #0]
 801f3d4:	781b      	ldrb	r3, [r3, #0]
 801f3d6:	009b      	lsls	r3, r3, #2
 801f3d8:	18d3      	adds	r3, r2, r3
 801f3da:	881b      	ldrh	r3, [r3, #0]
 801f3dc:	b29b      	uxth	r3, r3
 801f3de:	b21b      	sxth	r3, r3
 801f3e0:	4a80      	ldr	r2, [pc, #512]	@ (801f5e4 <USB_ActivateEndpoint+0x2bc>)
 801f3e2:	4013      	ands	r3, r2
 801f3e4:	b21a      	sxth	r2, r3
 801f3e6:	683b      	ldr	r3, [r7, #0]
 801f3e8:	781b      	ldrb	r3, [r3, #0]
 801f3ea:	b21b      	sxth	r3, r3
 801f3ec:	4313      	orrs	r3, r2
 801f3ee:	b21a      	sxth	r2, r3
 801f3f0:	2166      	movs	r1, #102	@ 0x66
 801f3f2:	187b      	adds	r3, r7, r1
 801f3f4:	801a      	strh	r2, [r3, #0]
 801f3f6:	687a      	ldr	r2, [r7, #4]
 801f3f8:	683b      	ldr	r3, [r7, #0]
 801f3fa:	781b      	ldrb	r3, [r3, #0]
 801f3fc:	009b      	lsls	r3, r3, #2
 801f3fe:	18d3      	adds	r3, r2, r3
 801f400:	187a      	adds	r2, r7, r1
 801f402:	8812      	ldrh	r2, [r2, #0]
 801f404:	4976      	ldr	r1, [pc, #472]	@ (801f5e0 <USB_ActivateEndpoint+0x2b8>)
 801f406:	430a      	orrs	r2, r1
 801f408:	b292      	uxth	r2, r2
 801f40a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801f40c:	683b      	ldr	r3, [r7, #0]
 801f40e:	7b1b      	ldrb	r3, [r3, #12]
 801f410:	2b00      	cmp	r3, #0
 801f412:	d000      	beq.n	801f416 <USB_ActivateEndpoint+0xee>
 801f414:	e178      	b.n	801f708 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801f416:	683b      	ldr	r3, [r7, #0]
 801f418:	785b      	ldrb	r3, [r3, #1]
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	d100      	bne.n	801f420 <USB_ActivateEndpoint+0xf8>
 801f41e:	e07a      	b.n	801f516 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f420:	687b      	ldr	r3, [r7, #4]
 801f422:	61bb      	str	r3, [r7, #24]
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	2250      	movs	r2, #80	@ 0x50
 801f428:	5a9b      	ldrh	r3, [r3, r2]
 801f42a:	b29b      	uxth	r3, r3
 801f42c:	001a      	movs	r2, r3
 801f42e:	69bb      	ldr	r3, [r7, #24]
 801f430:	189b      	adds	r3, r3, r2
 801f432:	61bb      	str	r3, [r7, #24]
 801f434:	683b      	ldr	r3, [r7, #0]
 801f436:	781b      	ldrb	r3, [r3, #0]
 801f438:	00da      	lsls	r2, r3, #3
 801f43a:	69bb      	ldr	r3, [r7, #24]
 801f43c:	18d3      	adds	r3, r2, r3
 801f43e:	2280      	movs	r2, #128	@ 0x80
 801f440:	00d2      	lsls	r2, r2, #3
 801f442:	4694      	mov	ip, r2
 801f444:	4463      	add	r3, ip
 801f446:	617b      	str	r3, [r7, #20]
 801f448:	683b      	ldr	r3, [r7, #0]
 801f44a:	88db      	ldrh	r3, [r3, #6]
 801f44c:	085b      	lsrs	r3, r3, #1
 801f44e:	b29b      	uxth	r3, r3
 801f450:	18db      	adds	r3, r3, r3
 801f452:	b29a      	uxth	r2, r3
 801f454:	697b      	ldr	r3, [r7, #20]
 801f456:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f458:	687a      	ldr	r2, [r7, #4]
 801f45a:	683b      	ldr	r3, [r7, #0]
 801f45c:	781b      	ldrb	r3, [r3, #0]
 801f45e:	009b      	lsls	r3, r3, #2
 801f460:	18d2      	adds	r2, r2, r3
 801f462:	2112      	movs	r1, #18
 801f464:	187b      	adds	r3, r7, r1
 801f466:	8812      	ldrh	r2, [r2, #0]
 801f468:	801a      	strh	r2, [r3, #0]
 801f46a:	187b      	adds	r3, r7, r1
 801f46c:	881b      	ldrh	r3, [r3, #0]
 801f46e:	2240      	movs	r2, #64	@ 0x40
 801f470:	4013      	ands	r3, r2
 801f472:	d016      	beq.n	801f4a2 <USB_ActivateEndpoint+0x17a>
 801f474:	687a      	ldr	r2, [r7, #4]
 801f476:	683b      	ldr	r3, [r7, #0]
 801f478:	781b      	ldrb	r3, [r3, #0]
 801f47a:	009b      	lsls	r3, r3, #2
 801f47c:	18d3      	adds	r3, r2, r3
 801f47e:	881b      	ldrh	r3, [r3, #0]
 801f480:	b29a      	uxth	r2, r3
 801f482:	2010      	movs	r0, #16
 801f484:	183b      	adds	r3, r7, r0
 801f486:	4957      	ldr	r1, [pc, #348]	@ (801f5e4 <USB_ActivateEndpoint+0x2bc>)
 801f488:	400a      	ands	r2, r1
 801f48a:	801a      	strh	r2, [r3, #0]
 801f48c:	687a      	ldr	r2, [r7, #4]
 801f48e:	683b      	ldr	r3, [r7, #0]
 801f490:	781b      	ldrb	r3, [r3, #0]
 801f492:	009b      	lsls	r3, r3, #2
 801f494:	18d3      	adds	r3, r2, r3
 801f496:	183a      	adds	r2, r7, r0
 801f498:	8812      	ldrh	r2, [r2, #0]
 801f49a:	4953      	ldr	r1, [pc, #332]	@ (801f5e8 <USB_ActivateEndpoint+0x2c0>)
 801f49c:	430a      	orrs	r2, r1
 801f49e:	b292      	uxth	r2, r2
 801f4a0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f4a2:	683b      	ldr	r3, [r7, #0]
 801f4a4:	78db      	ldrb	r3, [r3, #3]
 801f4a6:	2b01      	cmp	r3, #1
 801f4a8:	d01d      	beq.n	801f4e6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f4aa:	687a      	ldr	r2, [r7, #4]
 801f4ac:	683b      	ldr	r3, [r7, #0]
 801f4ae:	781b      	ldrb	r3, [r3, #0]
 801f4b0:	009b      	lsls	r3, r3, #2
 801f4b2:	18d3      	adds	r3, r2, r3
 801f4b4:	881b      	ldrh	r3, [r3, #0]
 801f4b6:	b29a      	uxth	r2, r3
 801f4b8:	200c      	movs	r0, #12
 801f4ba:	183b      	adds	r3, r7, r0
 801f4bc:	494b      	ldr	r1, [pc, #300]	@ (801f5ec <USB_ActivateEndpoint+0x2c4>)
 801f4be:	400a      	ands	r2, r1
 801f4c0:	801a      	strh	r2, [r3, #0]
 801f4c2:	183b      	adds	r3, r7, r0
 801f4c4:	183a      	adds	r2, r7, r0
 801f4c6:	8812      	ldrh	r2, [r2, #0]
 801f4c8:	2120      	movs	r1, #32
 801f4ca:	404a      	eors	r2, r1
 801f4cc:	801a      	strh	r2, [r3, #0]
 801f4ce:	687a      	ldr	r2, [r7, #4]
 801f4d0:	683b      	ldr	r3, [r7, #0]
 801f4d2:	781b      	ldrb	r3, [r3, #0]
 801f4d4:	009b      	lsls	r3, r3, #2
 801f4d6:	18d3      	adds	r3, r2, r3
 801f4d8:	183a      	adds	r2, r7, r0
 801f4da:	8812      	ldrh	r2, [r2, #0]
 801f4dc:	4940      	ldr	r1, [pc, #256]	@ (801f5e0 <USB_ActivateEndpoint+0x2b8>)
 801f4de:	430a      	orrs	r2, r1
 801f4e0:	b292      	uxth	r2, r2
 801f4e2:	801a      	strh	r2, [r3, #0]
 801f4e4:	e2b4      	b.n	801fa50 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f4e6:	687a      	ldr	r2, [r7, #4]
 801f4e8:	683b      	ldr	r3, [r7, #0]
 801f4ea:	781b      	ldrb	r3, [r3, #0]
 801f4ec:	009b      	lsls	r3, r3, #2
 801f4ee:	18d3      	adds	r3, r2, r3
 801f4f0:	881b      	ldrh	r3, [r3, #0]
 801f4f2:	b29a      	uxth	r2, r3
 801f4f4:	200e      	movs	r0, #14
 801f4f6:	183b      	adds	r3, r7, r0
 801f4f8:	493c      	ldr	r1, [pc, #240]	@ (801f5ec <USB_ActivateEndpoint+0x2c4>)
 801f4fa:	400a      	ands	r2, r1
 801f4fc:	801a      	strh	r2, [r3, #0]
 801f4fe:	687a      	ldr	r2, [r7, #4]
 801f500:	683b      	ldr	r3, [r7, #0]
 801f502:	781b      	ldrb	r3, [r3, #0]
 801f504:	009b      	lsls	r3, r3, #2
 801f506:	18d3      	adds	r3, r2, r3
 801f508:	183a      	adds	r2, r7, r0
 801f50a:	8812      	ldrh	r2, [r2, #0]
 801f50c:	4934      	ldr	r1, [pc, #208]	@ (801f5e0 <USB_ActivateEndpoint+0x2b8>)
 801f50e:	430a      	orrs	r2, r1
 801f510:	b292      	uxth	r2, r2
 801f512:	801a      	strh	r2, [r3, #0]
 801f514:	e29c      	b.n	801fa50 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	633b      	str	r3, [r7, #48]	@ 0x30
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	2250      	movs	r2, #80	@ 0x50
 801f51e:	5a9b      	ldrh	r3, [r3, r2]
 801f520:	b29b      	uxth	r3, r3
 801f522:	001a      	movs	r2, r3
 801f524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f526:	189b      	adds	r3, r3, r2
 801f528:	633b      	str	r3, [r7, #48]	@ 0x30
 801f52a:	683b      	ldr	r3, [r7, #0]
 801f52c:	781b      	ldrb	r3, [r3, #0]
 801f52e:	00da      	lsls	r2, r3, #3
 801f530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f532:	18d3      	adds	r3, r2, r3
 801f534:	4a2e      	ldr	r2, [pc, #184]	@ (801f5f0 <USB_ActivateEndpoint+0x2c8>)
 801f536:	4694      	mov	ip, r2
 801f538:	4463      	add	r3, ip
 801f53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f53c:	683b      	ldr	r3, [r7, #0]
 801f53e:	88db      	ldrh	r3, [r3, #6]
 801f540:	085b      	lsrs	r3, r3, #1
 801f542:	b29b      	uxth	r3, r3
 801f544:	18db      	adds	r3, r3, r3
 801f546:	b29a      	uxth	r2, r3
 801f548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f54a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	2250      	movs	r2, #80	@ 0x50
 801f554:	5a9b      	ldrh	r3, [r3, r2]
 801f556:	b29b      	uxth	r3, r3
 801f558:	001a      	movs	r2, r3
 801f55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f55c:	189b      	adds	r3, r3, r2
 801f55e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f560:	683b      	ldr	r3, [r7, #0]
 801f562:	781b      	ldrb	r3, [r3, #0]
 801f564:	00da      	lsls	r2, r3, #3
 801f566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f568:	18d3      	adds	r3, r2, r3
 801f56a:	4a22      	ldr	r2, [pc, #136]	@ (801f5f4 <USB_ActivateEndpoint+0x2cc>)
 801f56c:	4694      	mov	ip, r2
 801f56e:	4463      	add	r3, ip
 801f570:	627b      	str	r3, [r7, #36]	@ 0x24
 801f572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f574:	881b      	ldrh	r3, [r3, #0]
 801f576:	b29b      	uxth	r3, r3
 801f578:	059b      	lsls	r3, r3, #22
 801f57a:	0d9b      	lsrs	r3, r3, #22
 801f57c:	b29a      	uxth	r2, r3
 801f57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f580:	801a      	strh	r2, [r3, #0]
 801f582:	683b      	ldr	r3, [r7, #0]
 801f584:	691b      	ldr	r3, [r3, #16]
 801f586:	2b3e      	cmp	r3, #62	@ 0x3e
 801f588:	d91a      	bls.n	801f5c0 <USB_ActivateEndpoint+0x298>
 801f58a:	683b      	ldr	r3, [r7, #0]
 801f58c:	691b      	ldr	r3, [r3, #16]
 801f58e:	095b      	lsrs	r3, r3, #5
 801f590:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f592:	683b      	ldr	r3, [r7, #0]
 801f594:	691b      	ldr	r3, [r3, #16]
 801f596:	221f      	movs	r2, #31
 801f598:	4013      	ands	r3, r2
 801f59a:	d102      	bne.n	801f5a2 <USB_ActivateEndpoint+0x27a>
 801f59c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f59e:	3b01      	subs	r3, #1
 801f5a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5a4:	881b      	ldrh	r3, [r3, #0]
 801f5a6:	b29a      	uxth	r2, r3
 801f5a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f5aa:	b29b      	uxth	r3, r3
 801f5ac:	029b      	lsls	r3, r3, #10
 801f5ae:	b29b      	uxth	r3, r3
 801f5b0:	4313      	orrs	r3, r2
 801f5b2:	b29b      	uxth	r3, r3
 801f5b4:	4a10      	ldr	r2, [pc, #64]	@ (801f5f8 <USB_ActivateEndpoint+0x2d0>)
 801f5b6:	4313      	orrs	r3, r2
 801f5b8:	b29a      	uxth	r2, r3
 801f5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5bc:	801a      	strh	r2, [r3, #0]
 801f5be:	e034      	b.n	801f62a <USB_ActivateEndpoint+0x302>
 801f5c0:	683b      	ldr	r3, [r7, #0]
 801f5c2:	691b      	ldr	r3, [r3, #16]
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	d119      	bne.n	801f5fc <USB_ActivateEndpoint+0x2d4>
 801f5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5ca:	881b      	ldrh	r3, [r3, #0]
 801f5cc:	b29b      	uxth	r3, r3
 801f5ce:	4a0a      	ldr	r2, [pc, #40]	@ (801f5f8 <USB_ActivateEndpoint+0x2d0>)
 801f5d0:	4313      	orrs	r3, r2
 801f5d2:	b29a      	uxth	r2, r3
 801f5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5d6:	801a      	strh	r2, [r3, #0]
 801f5d8:	e027      	b.n	801f62a <USB_ActivateEndpoint+0x302>
 801f5da:	46c0      	nop			@ (mov r8, r8)
 801f5dc:	ffff898f 	.word	0xffff898f
 801f5e0:	ffff8080 	.word	0xffff8080
 801f5e4:	ffff8f8f 	.word	0xffff8f8f
 801f5e8:	ffff80c0 	.word	0xffff80c0
 801f5ec:	ffff8fbf 	.word	0xffff8fbf
 801f5f0:	00000404 	.word	0x00000404
 801f5f4:	00000406 	.word	0x00000406
 801f5f8:	ffff8000 	.word	0xffff8000
 801f5fc:	683b      	ldr	r3, [r7, #0]
 801f5fe:	691b      	ldr	r3, [r3, #16]
 801f600:	085b      	lsrs	r3, r3, #1
 801f602:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f604:	683b      	ldr	r3, [r7, #0]
 801f606:	691b      	ldr	r3, [r3, #16]
 801f608:	2201      	movs	r2, #1
 801f60a:	4013      	ands	r3, r2
 801f60c:	d002      	beq.n	801f614 <USB_ActivateEndpoint+0x2ec>
 801f60e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f610:	3301      	adds	r3, #1
 801f612:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f616:	881b      	ldrh	r3, [r3, #0]
 801f618:	b29a      	uxth	r2, r3
 801f61a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f61c:	b29b      	uxth	r3, r3
 801f61e:	029b      	lsls	r3, r3, #10
 801f620:	b29b      	uxth	r3, r3
 801f622:	4313      	orrs	r3, r2
 801f624:	b29a      	uxth	r2, r3
 801f626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f628:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f62a:	687a      	ldr	r2, [r7, #4]
 801f62c:	683b      	ldr	r3, [r7, #0]
 801f62e:	781b      	ldrb	r3, [r3, #0]
 801f630:	009b      	lsls	r3, r3, #2
 801f632:	18d2      	adds	r2, r2, r3
 801f634:	2122      	movs	r1, #34	@ 0x22
 801f636:	187b      	adds	r3, r7, r1
 801f638:	8812      	ldrh	r2, [r2, #0]
 801f63a:	801a      	strh	r2, [r3, #0]
 801f63c:	187b      	adds	r3, r7, r1
 801f63e:	881a      	ldrh	r2, [r3, #0]
 801f640:	2380      	movs	r3, #128	@ 0x80
 801f642:	01db      	lsls	r3, r3, #7
 801f644:	4013      	ands	r3, r2
 801f646:	d016      	beq.n	801f676 <USB_ActivateEndpoint+0x34e>
 801f648:	687a      	ldr	r2, [r7, #4]
 801f64a:	683b      	ldr	r3, [r7, #0]
 801f64c:	781b      	ldrb	r3, [r3, #0]
 801f64e:	009b      	lsls	r3, r3, #2
 801f650:	18d3      	adds	r3, r2, r3
 801f652:	881b      	ldrh	r3, [r3, #0]
 801f654:	b29a      	uxth	r2, r3
 801f656:	2020      	movs	r0, #32
 801f658:	183b      	adds	r3, r7, r0
 801f65a:	49dd      	ldr	r1, [pc, #884]	@ (801f9d0 <USB_ActivateEndpoint+0x6a8>)
 801f65c:	400a      	ands	r2, r1
 801f65e:	801a      	strh	r2, [r3, #0]
 801f660:	687a      	ldr	r2, [r7, #4]
 801f662:	683b      	ldr	r3, [r7, #0]
 801f664:	781b      	ldrb	r3, [r3, #0]
 801f666:	009b      	lsls	r3, r3, #2
 801f668:	18d3      	adds	r3, r2, r3
 801f66a:	183a      	adds	r2, r7, r0
 801f66c:	8812      	ldrh	r2, [r2, #0]
 801f66e:	49d9      	ldr	r1, [pc, #868]	@ (801f9d4 <USB_ActivateEndpoint+0x6ac>)
 801f670:	430a      	orrs	r2, r1
 801f672:	b292      	uxth	r2, r2
 801f674:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801f676:	683b      	ldr	r3, [r7, #0]
 801f678:	781b      	ldrb	r3, [r3, #0]
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	d125      	bne.n	801f6ca <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f67e:	687a      	ldr	r2, [r7, #4]
 801f680:	683b      	ldr	r3, [r7, #0]
 801f682:	781b      	ldrb	r3, [r3, #0]
 801f684:	009b      	lsls	r3, r3, #2
 801f686:	18d3      	adds	r3, r2, r3
 801f688:	881b      	ldrh	r3, [r3, #0]
 801f68a:	b29a      	uxth	r2, r3
 801f68c:	201c      	movs	r0, #28
 801f68e:	183b      	adds	r3, r7, r0
 801f690:	49d1      	ldr	r1, [pc, #836]	@ (801f9d8 <USB_ActivateEndpoint+0x6b0>)
 801f692:	400a      	ands	r2, r1
 801f694:	801a      	strh	r2, [r3, #0]
 801f696:	183b      	adds	r3, r7, r0
 801f698:	183a      	adds	r2, r7, r0
 801f69a:	8812      	ldrh	r2, [r2, #0]
 801f69c:	2180      	movs	r1, #128	@ 0x80
 801f69e:	0149      	lsls	r1, r1, #5
 801f6a0:	404a      	eors	r2, r1
 801f6a2:	801a      	strh	r2, [r3, #0]
 801f6a4:	183b      	adds	r3, r7, r0
 801f6a6:	183a      	adds	r2, r7, r0
 801f6a8:	8812      	ldrh	r2, [r2, #0]
 801f6aa:	2180      	movs	r1, #128	@ 0x80
 801f6ac:	0189      	lsls	r1, r1, #6
 801f6ae:	404a      	eors	r2, r1
 801f6b0:	801a      	strh	r2, [r3, #0]
 801f6b2:	687a      	ldr	r2, [r7, #4]
 801f6b4:	683b      	ldr	r3, [r7, #0]
 801f6b6:	781b      	ldrb	r3, [r3, #0]
 801f6b8:	009b      	lsls	r3, r3, #2
 801f6ba:	18d3      	adds	r3, r2, r3
 801f6bc:	183a      	adds	r2, r7, r0
 801f6be:	8812      	ldrh	r2, [r2, #0]
 801f6c0:	49c6      	ldr	r1, [pc, #792]	@ (801f9dc <USB_ActivateEndpoint+0x6b4>)
 801f6c2:	430a      	orrs	r2, r1
 801f6c4:	b292      	uxth	r2, r2
 801f6c6:	801a      	strh	r2, [r3, #0]
 801f6c8:	e1c2      	b.n	801fa50 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801f6ca:	687a      	ldr	r2, [r7, #4]
 801f6cc:	683b      	ldr	r3, [r7, #0]
 801f6ce:	781b      	ldrb	r3, [r3, #0]
 801f6d0:	009b      	lsls	r3, r3, #2
 801f6d2:	18d3      	adds	r3, r2, r3
 801f6d4:	881b      	ldrh	r3, [r3, #0]
 801f6d6:	b29a      	uxth	r2, r3
 801f6d8:	201e      	movs	r0, #30
 801f6da:	183b      	adds	r3, r7, r0
 801f6dc:	49be      	ldr	r1, [pc, #760]	@ (801f9d8 <USB_ActivateEndpoint+0x6b0>)
 801f6de:	400a      	ands	r2, r1
 801f6e0:	801a      	strh	r2, [r3, #0]
 801f6e2:	183b      	adds	r3, r7, r0
 801f6e4:	183a      	adds	r2, r7, r0
 801f6e6:	8812      	ldrh	r2, [r2, #0]
 801f6e8:	2180      	movs	r1, #128	@ 0x80
 801f6ea:	0189      	lsls	r1, r1, #6
 801f6ec:	404a      	eors	r2, r1
 801f6ee:	801a      	strh	r2, [r3, #0]
 801f6f0:	687a      	ldr	r2, [r7, #4]
 801f6f2:	683b      	ldr	r3, [r7, #0]
 801f6f4:	781b      	ldrb	r3, [r3, #0]
 801f6f6:	009b      	lsls	r3, r3, #2
 801f6f8:	18d3      	adds	r3, r2, r3
 801f6fa:	183a      	adds	r2, r7, r0
 801f6fc:	8812      	ldrh	r2, [r2, #0]
 801f6fe:	49b7      	ldr	r1, [pc, #732]	@ (801f9dc <USB_ActivateEndpoint+0x6b4>)
 801f700:	430a      	orrs	r2, r1
 801f702:	b292      	uxth	r2, r2
 801f704:	801a      	strh	r2, [r3, #0]
 801f706:	e1a3      	b.n	801fa50 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801f708:	683b      	ldr	r3, [r7, #0]
 801f70a:	78db      	ldrb	r3, [r3, #3]
 801f70c:	2b02      	cmp	r3, #2
 801f70e:	d117      	bne.n	801f740 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f710:	687a      	ldr	r2, [r7, #4]
 801f712:	683b      	ldr	r3, [r7, #0]
 801f714:	781b      	ldrb	r3, [r3, #0]
 801f716:	009b      	lsls	r3, r3, #2
 801f718:	18d3      	adds	r3, r2, r3
 801f71a:	881b      	ldrh	r3, [r3, #0]
 801f71c:	b29a      	uxth	r2, r3
 801f71e:	2062      	movs	r0, #98	@ 0x62
 801f720:	183b      	adds	r3, r7, r0
 801f722:	49ab      	ldr	r1, [pc, #684]	@ (801f9d0 <USB_ActivateEndpoint+0x6a8>)
 801f724:	400a      	ands	r2, r1
 801f726:	801a      	strh	r2, [r3, #0]
 801f728:	687a      	ldr	r2, [r7, #4]
 801f72a:	683b      	ldr	r3, [r7, #0]
 801f72c:	781b      	ldrb	r3, [r3, #0]
 801f72e:	009b      	lsls	r3, r3, #2
 801f730:	18d3      	adds	r3, r2, r3
 801f732:	183a      	adds	r2, r7, r0
 801f734:	8812      	ldrh	r2, [r2, #0]
 801f736:	49aa      	ldr	r1, [pc, #680]	@ (801f9e0 <USB_ActivateEndpoint+0x6b8>)
 801f738:	430a      	orrs	r2, r1
 801f73a:	b292      	uxth	r2, r2
 801f73c:	801a      	strh	r2, [r3, #0]
 801f73e:	e016      	b.n	801f76e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801f740:	687a      	ldr	r2, [r7, #4]
 801f742:	683b      	ldr	r3, [r7, #0]
 801f744:	781b      	ldrb	r3, [r3, #0]
 801f746:	009b      	lsls	r3, r3, #2
 801f748:	18d3      	adds	r3, r2, r3
 801f74a:	881b      	ldrh	r3, [r3, #0]
 801f74c:	b29a      	uxth	r2, r3
 801f74e:	2064      	movs	r0, #100	@ 0x64
 801f750:	183b      	adds	r3, r7, r0
 801f752:	49a4      	ldr	r1, [pc, #656]	@ (801f9e4 <USB_ActivateEndpoint+0x6bc>)
 801f754:	400a      	ands	r2, r1
 801f756:	801a      	strh	r2, [r3, #0]
 801f758:	687a      	ldr	r2, [r7, #4]
 801f75a:	683b      	ldr	r3, [r7, #0]
 801f75c:	781b      	ldrb	r3, [r3, #0]
 801f75e:	009b      	lsls	r3, r3, #2
 801f760:	18d3      	adds	r3, r2, r3
 801f762:	183a      	adds	r2, r7, r0
 801f764:	8812      	ldrh	r2, [r2, #0]
 801f766:	499d      	ldr	r1, [pc, #628]	@ (801f9dc <USB_ActivateEndpoint+0x6b4>)
 801f768:	430a      	orrs	r2, r1
 801f76a:	b292      	uxth	r2, r2
 801f76c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f772:	687b      	ldr	r3, [r7, #4]
 801f774:	2250      	movs	r2, #80	@ 0x50
 801f776:	5a9b      	ldrh	r3, [r3, r2]
 801f778:	b29b      	uxth	r3, r3
 801f77a:	001a      	movs	r2, r3
 801f77c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f77e:	189b      	adds	r3, r3, r2
 801f780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f782:	683b      	ldr	r3, [r7, #0]
 801f784:	781b      	ldrb	r3, [r3, #0]
 801f786:	00da      	lsls	r2, r3, #3
 801f788:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f78a:	18d3      	adds	r3, r2, r3
 801f78c:	2280      	movs	r2, #128	@ 0x80
 801f78e:	00d2      	lsls	r2, r2, #3
 801f790:	4694      	mov	ip, r2
 801f792:	4463      	add	r3, ip
 801f794:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f796:	683b      	ldr	r3, [r7, #0]
 801f798:	891b      	ldrh	r3, [r3, #8]
 801f79a:	085b      	lsrs	r3, r3, #1
 801f79c:	b29b      	uxth	r3, r3
 801f79e:	18db      	adds	r3, r3, r3
 801f7a0:	b29a      	uxth	r2, r3
 801f7a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f7a4:	801a      	strh	r2, [r3, #0]
 801f7a6:	687b      	ldr	r3, [r7, #4]
 801f7a8:	657b      	str	r3, [r7, #84]	@ 0x54
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	2250      	movs	r2, #80	@ 0x50
 801f7ae:	5a9b      	ldrh	r3, [r3, r2]
 801f7b0:	b29b      	uxth	r3, r3
 801f7b2:	001a      	movs	r2, r3
 801f7b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f7b6:	189b      	adds	r3, r3, r2
 801f7b8:	657b      	str	r3, [r7, #84]	@ 0x54
 801f7ba:	683b      	ldr	r3, [r7, #0]
 801f7bc:	781b      	ldrb	r3, [r3, #0]
 801f7be:	00da      	lsls	r2, r3, #3
 801f7c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f7c2:	18d3      	adds	r3, r2, r3
 801f7c4:	4a88      	ldr	r2, [pc, #544]	@ (801f9e8 <USB_ActivateEndpoint+0x6c0>)
 801f7c6:	4694      	mov	ip, r2
 801f7c8:	4463      	add	r3, ip
 801f7ca:	653b      	str	r3, [r7, #80]	@ 0x50
 801f7cc:	683b      	ldr	r3, [r7, #0]
 801f7ce:	895b      	ldrh	r3, [r3, #10]
 801f7d0:	085b      	lsrs	r3, r3, #1
 801f7d2:	b29b      	uxth	r3, r3
 801f7d4:	18db      	adds	r3, r3, r3
 801f7d6:	b29a      	uxth	r2, r3
 801f7d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f7da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801f7dc:	683b      	ldr	r3, [r7, #0]
 801f7de:	785b      	ldrb	r3, [r3, #1]
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d000      	beq.n	801f7e6 <USB_ActivateEndpoint+0x4be>
 801f7e4:	e087      	b.n	801f8f6 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f7e6:	687a      	ldr	r2, [r7, #4]
 801f7e8:	683b      	ldr	r3, [r7, #0]
 801f7ea:	781b      	ldrb	r3, [r3, #0]
 801f7ec:	009b      	lsls	r3, r3, #2
 801f7ee:	18d2      	adds	r2, r2, r3
 801f7f0:	2140      	movs	r1, #64	@ 0x40
 801f7f2:	187b      	adds	r3, r7, r1
 801f7f4:	8812      	ldrh	r2, [r2, #0]
 801f7f6:	801a      	strh	r2, [r3, #0]
 801f7f8:	187b      	adds	r3, r7, r1
 801f7fa:	881a      	ldrh	r2, [r3, #0]
 801f7fc:	2380      	movs	r3, #128	@ 0x80
 801f7fe:	01db      	lsls	r3, r3, #7
 801f800:	4013      	ands	r3, r2
 801f802:	d016      	beq.n	801f832 <USB_ActivateEndpoint+0x50a>
 801f804:	687a      	ldr	r2, [r7, #4]
 801f806:	683b      	ldr	r3, [r7, #0]
 801f808:	781b      	ldrb	r3, [r3, #0]
 801f80a:	009b      	lsls	r3, r3, #2
 801f80c:	18d3      	adds	r3, r2, r3
 801f80e:	881b      	ldrh	r3, [r3, #0]
 801f810:	b29a      	uxth	r2, r3
 801f812:	203e      	movs	r0, #62	@ 0x3e
 801f814:	183b      	adds	r3, r7, r0
 801f816:	496e      	ldr	r1, [pc, #440]	@ (801f9d0 <USB_ActivateEndpoint+0x6a8>)
 801f818:	400a      	ands	r2, r1
 801f81a:	801a      	strh	r2, [r3, #0]
 801f81c:	687a      	ldr	r2, [r7, #4]
 801f81e:	683b      	ldr	r3, [r7, #0]
 801f820:	781b      	ldrb	r3, [r3, #0]
 801f822:	009b      	lsls	r3, r3, #2
 801f824:	18d3      	adds	r3, r2, r3
 801f826:	183a      	adds	r2, r7, r0
 801f828:	8812      	ldrh	r2, [r2, #0]
 801f82a:	496a      	ldr	r1, [pc, #424]	@ (801f9d4 <USB_ActivateEndpoint+0x6ac>)
 801f82c:	430a      	orrs	r2, r1
 801f82e:	b292      	uxth	r2, r2
 801f830:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f832:	687a      	ldr	r2, [r7, #4]
 801f834:	683b      	ldr	r3, [r7, #0]
 801f836:	781b      	ldrb	r3, [r3, #0]
 801f838:	009b      	lsls	r3, r3, #2
 801f83a:	18d2      	adds	r2, r2, r3
 801f83c:	213c      	movs	r1, #60	@ 0x3c
 801f83e:	187b      	adds	r3, r7, r1
 801f840:	8812      	ldrh	r2, [r2, #0]
 801f842:	801a      	strh	r2, [r3, #0]
 801f844:	187b      	adds	r3, r7, r1
 801f846:	881b      	ldrh	r3, [r3, #0]
 801f848:	2240      	movs	r2, #64	@ 0x40
 801f84a:	4013      	ands	r3, r2
 801f84c:	d016      	beq.n	801f87c <USB_ActivateEndpoint+0x554>
 801f84e:	687a      	ldr	r2, [r7, #4]
 801f850:	683b      	ldr	r3, [r7, #0]
 801f852:	781b      	ldrb	r3, [r3, #0]
 801f854:	009b      	lsls	r3, r3, #2
 801f856:	18d3      	adds	r3, r2, r3
 801f858:	881b      	ldrh	r3, [r3, #0]
 801f85a:	b29a      	uxth	r2, r3
 801f85c:	203a      	movs	r0, #58	@ 0x3a
 801f85e:	183b      	adds	r3, r7, r0
 801f860:	495b      	ldr	r1, [pc, #364]	@ (801f9d0 <USB_ActivateEndpoint+0x6a8>)
 801f862:	400a      	ands	r2, r1
 801f864:	801a      	strh	r2, [r3, #0]
 801f866:	687a      	ldr	r2, [r7, #4]
 801f868:	683b      	ldr	r3, [r7, #0]
 801f86a:	781b      	ldrb	r3, [r3, #0]
 801f86c:	009b      	lsls	r3, r3, #2
 801f86e:	18d3      	adds	r3, r2, r3
 801f870:	183a      	adds	r2, r7, r0
 801f872:	8812      	ldrh	r2, [r2, #0]
 801f874:	495d      	ldr	r1, [pc, #372]	@ (801f9ec <USB_ActivateEndpoint+0x6c4>)
 801f876:	430a      	orrs	r2, r1
 801f878:	b292      	uxth	r2, r2
 801f87a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f87c:	687a      	ldr	r2, [r7, #4]
 801f87e:	683b      	ldr	r3, [r7, #0]
 801f880:	781b      	ldrb	r3, [r3, #0]
 801f882:	009b      	lsls	r3, r3, #2
 801f884:	18d3      	adds	r3, r2, r3
 801f886:	881b      	ldrh	r3, [r3, #0]
 801f888:	b29a      	uxth	r2, r3
 801f88a:	2038      	movs	r0, #56	@ 0x38
 801f88c:	183b      	adds	r3, r7, r0
 801f88e:	4952      	ldr	r1, [pc, #328]	@ (801f9d8 <USB_ActivateEndpoint+0x6b0>)
 801f890:	400a      	ands	r2, r1
 801f892:	801a      	strh	r2, [r3, #0]
 801f894:	183b      	adds	r3, r7, r0
 801f896:	183a      	adds	r2, r7, r0
 801f898:	8812      	ldrh	r2, [r2, #0]
 801f89a:	2180      	movs	r1, #128	@ 0x80
 801f89c:	0149      	lsls	r1, r1, #5
 801f89e:	404a      	eors	r2, r1
 801f8a0:	801a      	strh	r2, [r3, #0]
 801f8a2:	183b      	adds	r3, r7, r0
 801f8a4:	183a      	adds	r2, r7, r0
 801f8a6:	8812      	ldrh	r2, [r2, #0]
 801f8a8:	2180      	movs	r1, #128	@ 0x80
 801f8aa:	0189      	lsls	r1, r1, #6
 801f8ac:	404a      	eors	r2, r1
 801f8ae:	801a      	strh	r2, [r3, #0]
 801f8b0:	687a      	ldr	r2, [r7, #4]
 801f8b2:	683b      	ldr	r3, [r7, #0]
 801f8b4:	781b      	ldrb	r3, [r3, #0]
 801f8b6:	009b      	lsls	r3, r3, #2
 801f8b8:	18d3      	adds	r3, r2, r3
 801f8ba:	183a      	adds	r2, r7, r0
 801f8bc:	8812      	ldrh	r2, [r2, #0]
 801f8be:	4947      	ldr	r1, [pc, #284]	@ (801f9dc <USB_ActivateEndpoint+0x6b4>)
 801f8c0:	430a      	orrs	r2, r1
 801f8c2:	b292      	uxth	r2, r2
 801f8c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f8c6:	687a      	ldr	r2, [r7, #4]
 801f8c8:	683b      	ldr	r3, [r7, #0]
 801f8ca:	781b      	ldrb	r3, [r3, #0]
 801f8cc:	009b      	lsls	r3, r3, #2
 801f8ce:	18d3      	adds	r3, r2, r3
 801f8d0:	881b      	ldrh	r3, [r3, #0]
 801f8d2:	b29a      	uxth	r2, r3
 801f8d4:	2036      	movs	r0, #54	@ 0x36
 801f8d6:	183b      	adds	r3, r7, r0
 801f8d8:	4945      	ldr	r1, [pc, #276]	@ (801f9f0 <USB_ActivateEndpoint+0x6c8>)
 801f8da:	400a      	ands	r2, r1
 801f8dc:	801a      	strh	r2, [r3, #0]
 801f8de:	687a      	ldr	r2, [r7, #4]
 801f8e0:	683b      	ldr	r3, [r7, #0]
 801f8e2:	781b      	ldrb	r3, [r3, #0]
 801f8e4:	009b      	lsls	r3, r3, #2
 801f8e6:	18d3      	adds	r3, r2, r3
 801f8e8:	183a      	adds	r2, r7, r0
 801f8ea:	8812      	ldrh	r2, [r2, #0]
 801f8ec:	493b      	ldr	r1, [pc, #236]	@ (801f9dc <USB_ActivateEndpoint+0x6b4>)
 801f8ee:	430a      	orrs	r2, r1
 801f8f0:	b292      	uxth	r2, r2
 801f8f2:	801a      	strh	r2, [r3, #0]
 801f8f4:	e0ac      	b.n	801fa50 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f8f6:	687a      	ldr	r2, [r7, #4]
 801f8f8:	683b      	ldr	r3, [r7, #0]
 801f8fa:	781b      	ldrb	r3, [r3, #0]
 801f8fc:	009b      	lsls	r3, r3, #2
 801f8fe:	18d2      	adds	r2, r2, r3
 801f900:	214e      	movs	r1, #78	@ 0x4e
 801f902:	187b      	adds	r3, r7, r1
 801f904:	8812      	ldrh	r2, [r2, #0]
 801f906:	801a      	strh	r2, [r3, #0]
 801f908:	187b      	adds	r3, r7, r1
 801f90a:	881a      	ldrh	r2, [r3, #0]
 801f90c:	2380      	movs	r3, #128	@ 0x80
 801f90e:	01db      	lsls	r3, r3, #7
 801f910:	4013      	ands	r3, r2
 801f912:	d016      	beq.n	801f942 <USB_ActivateEndpoint+0x61a>
 801f914:	687a      	ldr	r2, [r7, #4]
 801f916:	683b      	ldr	r3, [r7, #0]
 801f918:	781b      	ldrb	r3, [r3, #0]
 801f91a:	009b      	lsls	r3, r3, #2
 801f91c:	18d3      	adds	r3, r2, r3
 801f91e:	881b      	ldrh	r3, [r3, #0]
 801f920:	b29a      	uxth	r2, r3
 801f922:	204c      	movs	r0, #76	@ 0x4c
 801f924:	183b      	adds	r3, r7, r0
 801f926:	492a      	ldr	r1, [pc, #168]	@ (801f9d0 <USB_ActivateEndpoint+0x6a8>)
 801f928:	400a      	ands	r2, r1
 801f92a:	801a      	strh	r2, [r3, #0]
 801f92c:	687a      	ldr	r2, [r7, #4]
 801f92e:	683b      	ldr	r3, [r7, #0]
 801f930:	781b      	ldrb	r3, [r3, #0]
 801f932:	009b      	lsls	r3, r3, #2
 801f934:	18d3      	adds	r3, r2, r3
 801f936:	183a      	adds	r2, r7, r0
 801f938:	8812      	ldrh	r2, [r2, #0]
 801f93a:	4926      	ldr	r1, [pc, #152]	@ (801f9d4 <USB_ActivateEndpoint+0x6ac>)
 801f93c:	430a      	orrs	r2, r1
 801f93e:	b292      	uxth	r2, r2
 801f940:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f942:	687a      	ldr	r2, [r7, #4]
 801f944:	683b      	ldr	r3, [r7, #0]
 801f946:	781b      	ldrb	r3, [r3, #0]
 801f948:	009b      	lsls	r3, r3, #2
 801f94a:	18d2      	adds	r2, r2, r3
 801f94c:	214a      	movs	r1, #74	@ 0x4a
 801f94e:	187b      	adds	r3, r7, r1
 801f950:	8812      	ldrh	r2, [r2, #0]
 801f952:	801a      	strh	r2, [r3, #0]
 801f954:	187b      	adds	r3, r7, r1
 801f956:	881b      	ldrh	r3, [r3, #0]
 801f958:	2240      	movs	r2, #64	@ 0x40
 801f95a:	4013      	ands	r3, r2
 801f95c:	d016      	beq.n	801f98c <USB_ActivateEndpoint+0x664>
 801f95e:	687a      	ldr	r2, [r7, #4]
 801f960:	683b      	ldr	r3, [r7, #0]
 801f962:	781b      	ldrb	r3, [r3, #0]
 801f964:	009b      	lsls	r3, r3, #2
 801f966:	18d3      	adds	r3, r2, r3
 801f968:	881b      	ldrh	r3, [r3, #0]
 801f96a:	b29a      	uxth	r2, r3
 801f96c:	2048      	movs	r0, #72	@ 0x48
 801f96e:	183b      	adds	r3, r7, r0
 801f970:	4917      	ldr	r1, [pc, #92]	@ (801f9d0 <USB_ActivateEndpoint+0x6a8>)
 801f972:	400a      	ands	r2, r1
 801f974:	801a      	strh	r2, [r3, #0]
 801f976:	687a      	ldr	r2, [r7, #4]
 801f978:	683b      	ldr	r3, [r7, #0]
 801f97a:	781b      	ldrb	r3, [r3, #0]
 801f97c:	009b      	lsls	r3, r3, #2
 801f97e:	18d3      	adds	r3, r2, r3
 801f980:	183a      	adds	r2, r7, r0
 801f982:	8812      	ldrh	r2, [r2, #0]
 801f984:	4919      	ldr	r1, [pc, #100]	@ (801f9ec <USB_ActivateEndpoint+0x6c4>)
 801f986:	430a      	orrs	r2, r1
 801f988:	b292      	uxth	r2, r2
 801f98a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f98c:	683b      	ldr	r3, [r7, #0]
 801f98e:	78db      	ldrb	r3, [r3, #3]
 801f990:	2b01      	cmp	r3, #1
 801f992:	d02f      	beq.n	801f9f4 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f994:	687a      	ldr	r2, [r7, #4]
 801f996:	683b      	ldr	r3, [r7, #0]
 801f998:	781b      	ldrb	r3, [r3, #0]
 801f99a:	009b      	lsls	r3, r3, #2
 801f99c:	18d3      	adds	r3, r2, r3
 801f99e:	881b      	ldrh	r3, [r3, #0]
 801f9a0:	b29a      	uxth	r2, r3
 801f9a2:	2044      	movs	r0, #68	@ 0x44
 801f9a4:	183b      	adds	r3, r7, r0
 801f9a6:	4912      	ldr	r1, [pc, #72]	@ (801f9f0 <USB_ActivateEndpoint+0x6c8>)
 801f9a8:	400a      	ands	r2, r1
 801f9aa:	801a      	strh	r2, [r3, #0]
 801f9ac:	183b      	adds	r3, r7, r0
 801f9ae:	183a      	adds	r2, r7, r0
 801f9b0:	8812      	ldrh	r2, [r2, #0]
 801f9b2:	2120      	movs	r1, #32
 801f9b4:	404a      	eors	r2, r1
 801f9b6:	801a      	strh	r2, [r3, #0]
 801f9b8:	687a      	ldr	r2, [r7, #4]
 801f9ba:	683b      	ldr	r3, [r7, #0]
 801f9bc:	781b      	ldrb	r3, [r3, #0]
 801f9be:	009b      	lsls	r3, r3, #2
 801f9c0:	18d3      	adds	r3, r2, r3
 801f9c2:	183a      	adds	r2, r7, r0
 801f9c4:	8812      	ldrh	r2, [r2, #0]
 801f9c6:	4905      	ldr	r1, [pc, #20]	@ (801f9dc <USB_ActivateEndpoint+0x6b4>)
 801f9c8:	430a      	orrs	r2, r1
 801f9ca:	b292      	uxth	r2, r2
 801f9cc:	801a      	strh	r2, [r3, #0]
 801f9ce:	e028      	b.n	801fa22 <USB_ActivateEndpoint+0x6fa>
 801f9d0:	ffff8f8f 	.word	0xffff8f8f
 801f9d4:	ffffc080 	.word	0xffffc080
 801f9d8:	ffffbf8f 	.word	0xffffbf8f
 801f9dc:	ffff8080 	.word	0xffff8080
 801f9e0:	ffff8180 	.word	0xffff8180
 801f9e4:	ffff8e8f 	.word	0xffff8e8f
 801f9e8:	00000404 	.word	0x00000404
 801f9ec:	ffff80c0 	.word	0xffff80c0
 801f9f0:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f9f4:	687a      	ldr	r2, [r7, #4]
 801f9f6:	683b      	ldr	r3, [r7, #0]
 801f9f8:	781b      	ldrb	r3, [r3, #0]
 801f9fa:	009b      	lsls	r3, r3, #2
 801f9fc:	18d3      	adds	r3, r2, r3
 801f9fe:	881b      	ldrh	r3, [r3, #0]
 801fa00:	b29a      	uxth	r2, r3
 801fa02:	2046      	movs	r0, #70	@ 0x46
 801fa04:	183b      	adds	r3, r7, r0
 801fa06:	4916      	ldr	r1, [pc, #88]	@ (801fa60 <USB_ActivateEndpoint+0x738>)
 801fa08:	400a      	ands	r2, r1
 801fa0a:	801a      	strh	r2, [r3, #0]
 801fa0c:	687a      	ldr	r2, [r7, #4]
 801fa0e:	683b      	ldr	r3, [r7, #0]
 801fa10:	781b      	ldrb	r3, [r3, #0]
 801fa12:	009b      	lsls	r3, r3, #2
 801fa14:	18d3      	adds	r3, r2, r3
 801fa16:	183a      	adds	r2, r7, r0
 801fa18:	8812      	ldrh	r2, [r2, #0]
 801fa1a:	4912      	ldr	r1, [pc, #72]	@ (801fa64 <USB_ActivateEndpoint+0x73c>)
 801fa1c:	430a      	orrs	r2, r1
 801fa1e:	b292      	uxth	r2, r2
 801fa20:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fa22:	687a      	ldr	r2, [r7, #4]
 801fa24:	683b      	ldr	r3, [r7, #0]
 801fa26:	781b      	ldrb	r3, [r3, #0]
 801fa28:	009b      	lsls	r3, r3, #2
 801fa2a:	18d3      	adds	r3, r2, r3
 801fa2c:	881b      	ldrh	r3, [r3, #0]
 801fa2e:	b29a      	uxth	r2, r3
 801fa30:	2042      	movs	r0, #66	@ 0x42
 801fa32:	183b      	adds	r3, r7, r0
 801fa34:	490c      	ldr	r1, [pc, #48]	@ (801fa68 <USB_ActivateEndpoint+0x740>)
 801fa36:	400a      	ands	r2, r1
 801fa38:	801a      	strh	r2, [r3, #0]
 801fa3a:	687a      	ldr	r2, [r7, #4]
 801fa3c:	683b      	ldr	r3, [r7, #0]
 801fa3e:	781b      	ldrb	r3, [r3, #0]
 801fa40:	009b      	lsls	r3, r3, #2
 801fa42:	18d3      	adds	r3, r2, r3
 801fa44:	183a      	adds	r2, r7, r0
 801fa46:	8812      	ldrh	r2, [r2, #0]
 801fa48:	4906      	ldr	r1, [pc, #24]	@ (801fa64 <USB_ActivateEndpoint+0x73c>)
 801fa4a:	430a      	orrs	r2, r1
 801fa4c:	b292      	uxth	r2, r2
 801fa4e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801fa50:	236f      	movs	r3, #111	@ 0x6f
 801fa52:	18fb      	adds	r3, r7, r3
 801fa54:	781b      	ldrb	r3, [r3, #0]
}
 801fa56:	0018      	movs	r0, r3
 801fa58:	46bd      	mov	sp, r7
 801fa5a:	b01c      	add	sp, #112	@ 0x70
 801fa5c:	bd80      	pop	{r7, pc}
 801fa5e:	46c0      	nop			@ (mov r8, r8)
 801fa60:	ffff8fbf 	.word	0xffff8fbf
 801fa64:	ffff8080 	.word	0xffff8080
 801fa68:	ffffbf8f 	.word	0xffffbf8f

0801fa6c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fa6c:	b580      	push	{r7, lr}
 801fa6e:	b08c      	sub	sp, #48	@ 0x30
 801fa70:	af00      	add	r7, sp, #0
 801fa72:	6078      	str	r0, [r7, #4]
 801fa74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801fa76:	683b      	ldr	r3, [r7, #0]
 801fa78:	7b1b      	ldrb	r3, [r3, #12]
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	d000      	beq.n	801fa80 <USB_DeactivateEndpoint+0x14>
 801fa7e:	e07e      	b.n	801fb7e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801fa80:	683b      	ldr	r3, [r7, #0]
 801fa82:	785b      	ldrb	r3, [r3, #1]
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	d03c      	beq.n	801fb02 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fa88:	687a      	ldr	r2, [r7, #4]
 801fa8a:	683b      	ldr	r3, [r7, #0]
 801fa8c:	781b      	ldrb	r3, [r3, #0]
 801fa8e:	009b      	lsls	r3, r3, #2
 801fa90:	18d2      	adds	r2, r2, r3
 801fa92:	210c      	movs	r1, #12
 801fa94:	187b      	adds	r3, r7, r1
 801fa96:	8812      	ldrh	r2, [r2, #0]
 801fa98:	801a      	strh	r2, [r3, #0]
 801fa9a:	187b      	adds	r3, r7, r1
 801fa9c:	881b      	ldrh	r3, [r3, #0]
 801fa9e:	2240      	movs	r2, #64	@ 0x40
 801faa0:	4013      	ands	r3, r2
 801faa2:	d016      	beq.n	801fad2 <USB_DeactivateEndpoint+0x66>
 801faa4:	687a      	ldr	r2, [r7, #4]
 801faa6:	683b      	ldr	r3, [r7, #0]
 801faa8:	781b      	ldrb	r3, [r3, #0]
 801faaa:	009b      	lsls	r3, r3, #2
 801faac:	18d3      	adds	r3, r2, r3
 801faae:	881b      	ldrh	r3, [r3, #0]
 801fab0:	b29a      	uxth	r2, r3
 801fab2:	200a      	movs	r0, #10
 801fab4:	183b      	adds	r3, r7, r0
 801fab6:	49c7      	ldr	r1, [pc, #796]	@ (801fdd4 <USB_DeactivateEndpoint+0x368>)
 801fab8:	400a      	ands	r2, r1
 801faba:	801a      	strh	r2, [r3, #0]
 801fabc:	687a      	ldr	r2, [r7, #4]
 801fabe:	683b      	ldr	r3, [r7, #0]
 801fac0:	781b      	ldrb	r3, [r3, #0]
 801fac2:	009b      	lsls	r3, r3, #2
 801fac4:	18d3      	adds	r3, r2, r3
 801fac6:	183a      	adds	r2, r7, r0
 801fac8:	8812      	ldrh	r2, [r2, #0]
 801faca:	49c3      	ldr	r1, [pc, #780]	@ (801fdd8 <USB_DeactivateEndpoint+0x36c>)
 801facc:	430a      	orrs	r2, r1
 801face:	b292      	uxth	r2, r2
 801fad0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fad2:	687a      	ldr	r2, [r7, #4]
 801fad4:	683b      	ldr	r3, [r7, #0]
 801fad6:	781b      	ldrb	r3, [r3, #0]
 801fad8:	009b      	lsls	r3, r3, #2
 801fada:	18d3      	adds	r3, r2, r3
 801fadc:	881b      	ldrh	r3, [r3, #0]
 801fade:	b29a      	uxth	r2, r3
 801fae0:	2008      	movs	r0, #8
 801fae2:	183b      	adds	r3, r7, r0
 801fae4:	49bd      	ldr	r1, [pc, #756]	@ (801fddc <USB_DeactivateEndpoint+0x370>)
 801fae6:	400a      	ands	r2, r1
 801fae8:	801a      	strh	r2, [r3, #0]
 801faea:	687a      	ldr	r2, [r7, #4]
 801faec:	683b      	ldr	r3, [r7, #0]
 801faee:	781b      	ldrb	r3, [r3, #0]
 801faf0:	009b      	lsls	r3, r3, #2
 801faf2:	18d3      	adds	r3, r2, r3
 801faf4:	183a      	adds	r2, r7, r0
 801faf6:	8812      	ldrh	r2, [r2, #0]
 801faf8:	49b9      	ldr	r1, [pc, #740]	@ (801fde0 <USB_DeactivateEndpoint+0x374>)
 801fafa:	430a      	orrs	r2, r1
 801fafc:	b292      	uxth	r2, r2
 801fafe:	801a      	strh	r2, [r3, #0]
 801fb00:	e163      	b.n	801fdca <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fb02:	687a      	ldr	r2, [r7, #4]
 801fb04:	683b      	ldr	r3, [r7, #0]
 801fb06:	781b      	ldrb	r3, [r3, #0]
 801fb08:	009b      	lsls	r3, r3, #2
 801fb0a:	18d2      	adds	r2, r2, r3
 801fb0c:	2112      	movs	r1, #18
 801fb0e:	187b      	adds	r3, r7, r1
 801fb10:	8812      	ldrh	r2, [r2, #0]
 801fb12:	801a      	strh	r2, [r3, #0]
 801fb14:	187b      	adds	r3, r7, r1
 801fb16:	881a      	ldrh	r2, [r3, #0]
 801fb18:	2380      	movs	r3, #128	@ 0x80
 801fb1a:	01db      	lsls	r3, r3, #7
 801fb1c:	4013      	ands	r3, r2
 801fb1e:	d016      	beq.n	801fb4e <USB_DeactivateEndpoint+0xe2>
 801fb20:	687a      	ldr	r2, [r7, #4]
 801fb22:	683b      	ldr	r3, [r7, #0]
 801fb24:	781b      	ldrb	r3, [r3, #0]
 801fb26:	009b      	lsls	r3, r3, #2
 801fb28:	18d3      	adds	r3, r2, r3
 801fb2a:	881b      	ldrh	r3, [r3, #0]
 801fb2c:	b29a      	uxth	r2, r3
 801fb2e:	2010      	movs	r0, #16
 801fb30:	183b      	adds	r3, r7, r0
 801fb32:	49a8      	ldr	r1, [pc, #672]	@ (801fdd4 <USB_DeactivateEndpoint+0x368>)
 801fb34:	400a      	ands	r2, r1
 801fb36:	801a      	strh	r2, [r3, #0]
 801fb38:	687a      	ldr	r2, [r7, #4]
 801fb3a:	683b      	ldr	r3, [r7, #0]
 801fb3c:	781b      	ldrb	r3, [r3, #0]
 801fb3e:	009b      	lsls	r3, r3, #2
 801fb40:	18d3      	adds	r3, r2, r3
 801fb42:	183a      	adds	r2, r7, r0
 801fb44:	8812      	ldrh	r2, [r2, #0]
 801fb46:	49a7      	ldr	r1, [pc, #668]	@ (801fde4 <USB_DeactivateEndpoint+0x378>)
 801fb48:	430a      	orrs	r2, r1
 801fb4a:	b292      	uxth	r2, r2
 801fb4c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fb4e:	687a      	ldr	r2, [r7, #4]
 801fb50:	683b      	ldr	r3, [r7, #0]
 801fb52:	781b      	ldrb	r3, [r3, #0]
 801fb54:	009b      	lsls	r3, r3, #2
 801fb56:	18d3      	adds	r3, r2, r3
 801fb58:	881b      	ldrh	r3, [r3, #0]
 801fb5a:	b29a      	uxth	r2, r3
 801fb5c:	200e      	movs	r0, #14
 801fb5e:	183b      	adds	r3, r7, r0
 801fb60:	49a1      	ldr	r1, [pc, #644]	@ (801fde8 <USB_DeactivateEndpoint+0x37c>)
 801fb62:	400a      	ands	r2, r1
 801fb64:	801a      	strh	r2, [r3, #0]
 801fb66:	687a      	ldr	r2, [r7, #4]
 801fb68:	683b      	ldr	r3, [r7, #0]
 801fb6a:	781b      	ldrb	r3, [r3, #0]
 801fb6c:	009b      	lsls	r3, r3, #2
 801fb6e:	18d3      	adds	r3, r2, r3
 801fb70:	183a      	adds	r2, r7, r0
 801fb72:	8812      	ldrh	r2, [r2, #0]
 801fb74:	499a      	ldr	r1, [pc, #616]	@ (801fde0 <USB_DeactivateEndpoint+0x374>)
 801fb76:	430a      	orrs	r2, r1
 801fb78:	b292      	uxth	r2, r2
 801fb7a:	801a      	strh	r2, [r3, #0]
 801fb7c:	e125      	b.n	801fdca <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801fb7e:	683b      	ldr	r3, [r7, #0]
 801fb80:	785b      	ldrb	r3, [r3, #1]
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	d000      	beq.n	801fb88 <USB_DeactivateEndpoint+0x11c>
 801fb86:	e090      	b.n	801fcaa <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fb88:	687a      	ldr	r2, [r7, #4]
 801fb8a:	683b      	ldr	r3, [r7, #0]
 801fb8c:	781b      	ldrb	r3, [r3, #0]
 801fb8e:	009b      	lsls	r3, r3, #2
 801fb90:	18d2      	adds	r2, r2, r3
 801fb92:	2120      	movs	r1, #32
 801fb94:	187b      	adds	r3, r7, r1
 801fb96:	8812      	ldrh	r2, [r2, #0]
 801fb98:	801a      	strh	r2, [r3, #0]
 801fb9a:	187b      	adds	r3, r7, r1
 801fb9c:	881a      	ldrh	r2, [r3, #0]
 801fb9e:	2380      	movs	r3, #128	@ 0x80
 801fba0:	01db      	lsls	r3, r3, #7
 801fba2:	4013      	ands	r3, r2
 801fba4:	d016      	beq.n	801fbd4 <USB_DeactivateEndpoint+0x168>
 801fba6:	687a      	ldr	r2, [r7, #4]
 801fba8:	683b      	ldr	r3, [r7, #0]
 801fbaa:	781b      	ldrb	r3, [r3, #0]
 801fbac:	009b      	lsls	r3, r3, #2
 801fbae:	18d3      	adds	r3, r2, r3
 801fbb0:	881b      	ldrh	r3, [r3, #0]
 801fbb2:	b29a      	uxth	r2, r3
 801fbb4:	201e      	movs	r0, #30
 801fbb6:	183b      	adds	r3, r7, r0
 801fbb8:	4986      	ldr	r1, [pc, #536]	@ (801fdd4 <USB_DeactivateEndpoint+0x368>)
 801fbba:	400a      	ands	r2, r1
 801fbbc:	801a      	strh	r2, [r3, #0]
 801fbbe:	687a      	ldr	r2, [r7, #4]
 801fbc0:	683b      	ldr	r3, [r7, #0]
 801fbc2:	781b      	ldrb	r3, [r3, #0]
 801fbc4:	009b      	lsls	r3, r3, #2
 801fbc6:	18d3      	adds	r3, r2, r3
 801fbc8:	183a      	adds	r2, r7, r0
 801fbca:	8812      	ldrh	r2, [r2, #0]
 801fbcc:	4985      	ldr	r1, [pc, #532]	@ (801fde4 <USB_DeactivateEndpoint+0x378>)
 801fbce:	430a      	orrs	r2, r1
 801fbd0:	b292      	uxth	r2, r2
 801fbd2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fbd4:	687a      	ldr	r2, [r7, #4]
 801fbd6:	683b      	ldr	r3, [r7, #0]
 801fbd8:	781b      	ldrb	r3, [r3, #0]
 801fbda:	009b      	lsls	r3, r3, #2
 801fbdc:	18d2      	adds	r2, r2, r3
 801fbde:	211c      	movs	r1, #28
 801fbe0:	187b      	adds	r3, r7, r1
 801fbe2:	8812      	ldrh	r2, [r2, #0]
 801fbe4:	801a      	strh	r2, [r3, #0]
 801fbe6:	187b      	adds	r3, r7, r1
 801fbe8:	881b      	ldrh	r3, [r3, #0]
 801fbea:	2240      	movs	r2, #64	@ 0x40
 801fbec:	4013      	ands	r3, r2
 801fbee:	d016      	beq.n	801fc1e <USB_DeactivateEndpoint+0x1b2>
 801fbf0:	687a      	ldr	r2, [r7, #4]
 801fbf2:	683b      	ldr	r3, [r7, #0]
 801fbf4:	781b      	ldrb	r3, [r3, #0]
 801fbf6:	009b      	lsls	r3, r3, #2
 801fbf8:	18d3      	adds	r3, r2, r3
 801fbfa:	881b      	ldrh	r3, [r3, #0]
 801fbfc:	b29a      	uxth	r2, r3
 801fbfe:	201a      	movs	r0, #26
 801fc00:	183b      	adds	r3, r7, r0
 801fc02:	4974      	ldr	r1, [pc, #464]	@ (801fdd4 <USB_DeactivateEndpoint+0x368>)
 801fc04:	400a      	ands	r2, r1
 801fc06:	801a      	strh	r2, [r3, #0]
 801fc08:	687a      	ldr	r2, [r7, #4]
 801fc0a:	683b      	ldr	r3, [r7, #0]
 801fc0c:	781b      	ldrb	r3, [r3, #0]
 801fc0e:	009b      	lsls	r3, r3, #2
 801fc10:	18d3      	adds	r3, r2, r3
 801fc12:	183a      	adds	r2, r7, r0
 801fc14:	8812      	ldrh	r2, [r2, #0]
 801fc16:	4970      	ldr	r1, [pc, #448]	@ (801fdd8 <USB_DeactivateEndpoint+0x36c>)
 801fc18:	430a      	orrs	r2, r1
 801fc1a:	b292      	uxth	r2, r2
 801fc1c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801fc1e:	687a      	ldr	r2, [r7, #4]
 801fc20:	683b      	ldr	r3, [r7, #0]
 801fc22:	781b      	ldrb	r3, [r3, #0]
 801fc24:	009b      	lsls	r3, r3, #2
 801fc26:	18d3      	adds	r3, r2, r3
 801fc28:	881b      	ldrh	r3, [r3, #0]
 801fc2a:	b29a      	uxth	r2, r3
 801fc2c:	2018      	movs	r0, #24
 801fc2e:	183b      	adds	r3, r7, r0
 801fc30:	4968      	ldr	r1, [pc, #416]	@ (801fdd4 <USB_DeactivateEndpoint+0x368>)
 801fc32:	400a      	ands	r2, r1
 801fc34:	801a      	strh	r2, [r3, #0]
 801fc36:	687a      	ldr	r2, [r7, #4]
 801fc38:	683b      	ldr	r3, [r7, #0]
 801fc3a:	781b      	ldrb	r3, [r3, #0]
 801fc3c:	009b      	lsls	r3, r3, #2
 801fc3e:	18d3      	adds	r3, r2, r3
 801fc40:	183a      	adds	r2, r7, r0
 801fc42:	8812      	ldrh	r2, [r2, #0]
 801fc44:	4964      	ldr	r1, [pc, #400]	@ (801fdd8 <USB_DeactivateEndpoint+0x36c>)
 801fc46:	430a      	orrs	r2, r1
 801fc48:	b292      	uxth	r2, r2
 801fc4a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fc4c:	687a      	ldr	r2, [r7, #4]
 801fc4e:	683b      	ldr	r3, [r7, #0]
 801fc50:	781b      	ldrb	r3, [r3, #0]
 801fc52:	009b      	lsls	r3, r3, #2
 801fc54:	18d3      	adds	r3, r2, r3
 801fc56:	881b      	ldrh	r3, [r3, #0]
 801fc58:	b29a      	uxth	r2, r3
 801fc5a:	2016      	movs	r0, #22
 801fc5c:	183b      	adds	r3, r7, r0
 801fc5e:	4962      	ldr	r1, [pc, #392]	@ (801fde8 <USB_DeactivateEndpoint+0x37c>)
 801fc60:	400a      	ands	r2, r1
 801fc62:	801a      	strh	r2, [r3, #0]
 801fc64:	687a      	ldr	r2, [r7, #4]
 801fc66:	683b      	ldr	r3, [r7, #0]
 801fc68:	781b      	ldrb	r3, [r3, #0]
 801fc6a:	009b      	lsls	r3, r3, #2
 801fc6c:	18d3      	adds	r3, r2, r3
 801fc6e:	183a      	adds	r2, r7, r0
 801fc70:	8812      	ldrh	r2, [r2, #0]
 801fc72:	495b      	ldr	r1, [pc, #364]	@ (801fde0 <USB_DeactivateEndpoint+0x374>)
 801fc74:	430a      	orrs	r2, r1
 801fc76:	b292      	uxth	r2, r2
 801fc78:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fc7a:	687a      	ldr	r2, [r7, #4]
 801fc7c:	683b      	ldr	r3, [r7, #0]
 801fc7e:	781b      	ldrb	r3, [r3, #0]
 801fc80:	009b      	lsls	r3, r3, #2
 801fc82:	18d3      	adds	r3, r2, r3
 801fc84:	881b      	ldrh	r3, [r3, #0]
 801fc86:	b29a      	uxth	r2, r3
 801fc88:	2014      	movs	r0, #20
 801fc8a:	183b      	adds	r3, r7, r0
 801fc8c:	4953      	ldr	r1, [pc, #332]	@ (801fddc <USB_DeactivateEndpoint+0x370>)
 801fc8e:	400a      	ands	r2, r1
 801fc90:	801a      	strh	r2, [r3, #0]
 801fc92:	687a      	ldr	r2, [r7, #4]
 801fc94:	683b      	ldr	r3, [r7, #0]
 801fc96:	781b      	ldrb	r3, [r3, #0]
 801fc98:	009b      	lsls	r3, r3, #2
 801fc9a:	18d3      	adds	r3, r2, r3
 801fc9c:	183a      	adds	r2, r7, r0
 801fc9e:	8812      	ldrh	r2, [r2, #0]
 801fca0:	494f      	ldr	r1, [pc, #316]	@ (801fde0 <USB_DeactivateEndpoint+0x374>)
 801fca2:	430a      	orrs	r2, r1
 801fca4:	b292      	uxth	r2, r2
 801fca6:	801a      	strh	r2, [r3, #0]
 801fca8:	e08f      	b.n	801fdca <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fcaa:	687a      	ldr	r2, [r7, #4]
 801fcac:	683b      	ldr	r3, [r7, #0]
 801fcae:	781b      	ldrb	r3, [r3, #0]
 801fcb0:	009b      	lsls	r3, r3, #2
 801fcb2:	18d2      	adds	r2, r2, r3
 801fcb4:	212e      	movs	r1, #46	@ 0x2e
 801fcb6:	187b      	adds	r3, r7, r1
 801fcb8:	8812      	ldrh	r2, [r2, #0]
 801fcba:	801a      	strh	r2, [r3, #0]
 801fcbc:	187b      	adds	r3, r7, r1
 801fcbe:	881a      	ldrh	r2, [r3, #0]
 801fcc0:	2380      	movs	r3, #128	@ 0x80
 801fcc2:	01db      	lsls	r3, r3, #7
 801fcc4:	4013      	ands	r3, r2
 801fcc6:	d016      	beq.n	801fcf6 <USB_DeactivateEndpoint+0x28a>
 801fcc8:	687a      	ldr	r2, [r7, #4]
 801fcca:	683b      	ldr	r3, [r7, #0]
 801fccc:	781b      	ldrb	r3, [r3, #0]
 801fcce:	009b      	lsls	r3, r3, #2
 801fcd0:	18d3      	adds	r3, r2, r3
 801fcd2:	881b      	ldrh	r3, [r3, #0]
 801fcd4:	b29a      	uxth	r2, r3
 801fcd6:	202c      	movs	r0, #44	@ 0x2c
 801fcd8:	183b      	adds	r3, r7, r0
 801fcda:	493e      	ldr	r1, [pc, #248]	@ (801fdd4 <USB_DeactivateEndpoint+0x368>)
 801fcdc:	400a      	ands	r2, r1
 801fcde:	801a      	strh	r2, [r3, #0]
 801fce0:	687a      	ldr	r2, [r7, #4]
 801fce2:	683b      	ldr	r3, [r7, #0]
 801fce4:	781b      	ldrb	r3, [r3, #0]
 801fce6:	009b      	lsls	r3, r3, #2
 801fce8:	18d3      	adds	r3, r2, r3
 801fcea:	183a      	adds	r2, r7, r0
 801fcec:	8812      	ldrh	r2, [r2, #0]
 801fcee:	493d      	ldr	r1, [pc, #244]	@ (801fde4 <USB_DeactivateEndpoint+0x378>)
 801fcf0:	430a      	orrs	r2, r1
 801fcf2:	b292      	uxth	r2, r2
 801fcf4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fcf6:	687a      	ldr	r2, [r7, #4]
 801fcf8:	683b      	ldr	r3, [r7, #0]
 801fcfa:	781b      	ldrb	r3, [r3, #0]
 801fcfc:	009b      	lsls	r3, r3, #2
 801fcfe:	18d2      	adds	r2, r2, r3
 801fd00:	212a      	movs	r1, #42	@ 0x2a
 801fd02:	187b      	adds	r3, r7, r1
 801fd04:	8812      	ldrh	r2, [r2, #0]
 801fd06:	801a      	strh	r2, [r3, #0]
 801fd08:	187b      	adds	r3, r7, r1
 801fd0a:	881b      	ldrh	r3, [r3, #0]
 801fd0c:	2240      	movs	r2, #64	@ 0x40
 801fd0e:	4013      	ands	r3, r2
 801fd10:	d016      	beq.n	801fd40 <USB_DeactivateEndpoint+0x2d4>
 801fd12:	687a      	ldr	r2, [r7, #4]
 801fd14:	683b      	ldr	r3, [r7, #0]
 801fd16:	781b      	ldrb	r3, [r3, #0]
 801fd18:	009b      	lsls	r3, r3, #2
 801fd1a:	18d3      	adds	r3, r2, r3
 801fd1c:	881b      	ldrh	r3, [r3, #0]
 801fd1e:	b29a      	uxth	r2, r3
 801fd20:	2028      	movs	r0, #40	@ 0x28
 801fd22:	183b      	adds	r3, r7, r0
 801fd24:	492b      	ldr	r1, [pc, #172]	@ (801fdd4 <USB_DeactivateEndpoint+0x368>)
 801fd26:	400a      	ands	r2, r1
 801fd28:	801a      	strh	r2, [r3, #0]
 801fd2a:	687a      	ldr	r2, [r7, #4]
 801fd2c:	683b      	ldr	r3, [r7, #0]
 801fd2e:	781b      	ldrb	r3, [r3, #0]
 801fd30:	009b      	lsls	r3, r3, #2
 801fd32:	18d3      	adds	r3, r2, r3
 801fd34:	183a      	adds	r2, r7, r0
 801fd36:	8812      	ldrh	r2, [r2, #0]
 801fd38:	4927      	ldr	r1, [pc, #156]	@ (801fdd8 <USB_DeactivateEndpoint+0x36c>)
 801fd3a:	430a      	orrs	r2, r1
 801fd3c:	b292      	uxth	r2, r2
 801fd3e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801fd40:	687a      	ldr	r2, [r7, #4]
 801fd42:	683b      	ldr	r3, [r7, #0]
 801fd44:	781b      	ldrb	r3, [r3, #0]
 801fd46:	009b      	lsls	r3, r3, #2
 801fd48:	18d3      	adds	r3, r2, r3
 801fd4a:	881b      	ldrh	r3, [r3, #0]
 801fd4c:	b29a      	uxth	r2, r3
 801fd4e:	2026      	movs	r0, #38	@ 0x26
 801fd50:	183b      	adds	r3, r7, r0
 801fd52:	4920      	ldr	r1, [pc, #128]	@ (801fdd4 <USB_DeactivateEndpoint+0x368>)
 801fd54:	400a      	ands	r2, r1
 801fd56:	801a      	strh	r2, [r3, #0]
 801fd58:	687a      	ldr	r2, [r7, #4]
 801fd5a:	683b      	ldr	r3, [r7, #0]
 801fd5c:	781b      	ldrb	r3, [r3, #0]
 801fd5e:	009b      	lsls	r3, r3, #2
 801fd60:	18d3      	adds	r3, r2, r3
 801fd62:	183a      	adds	r2, r7, r0
 801fd64:	8812      	ldrh	r2, [r2, #0]
 801fd66:	491f      	ldr	r1, [pc, #124]	@ (801fde4 <USB_DeactivateEndpoint+0x378>)
 801fd68:	430a      	orrs	r2, r1
 801fd6a:	b292      	uxth	r2, r2
 801fd6c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fd6e:	687a      	ldr	r2, [r7, #4]
 801fd70:	683b      	ldr	r3, [r7, #0]
 801fd72:	781b      	ldrb	r3, [r3, #0]
 801fd74:	009b      	lsls	r3, r3, #2
 801fd76:	18d3      	adds	r3, r2, r3
 801fd78:	881b      	ldrh	r3, [r3, #0]
 801fd7a:	b29a      	uxth	r2, r3
 801fd7c:	2024      	movs	r0, #36	@ 0x24
 801fd7e:	183b      	adds	r3, r7, r0
 801fd80:	4916      	ldr	r1, [pc, #88]	@ (801fddc <USB_DeactivateEndpoint+0x370>)
 801fd82:	400a      	ands	r2, r1
 801fd84:	801a      	strh	r2, [r3, #0]
 801fd86:	687a      	ldr	r2, [r7, #4]
 801fd88:	683b      	ldr	r3, [r7, #0]
 801fd8a:	781b      	ldrb	r3, [r3, #0]
 801fd8c:	009b      	lsls	r3, r3, #2
 801fd8e:	18d3      	adds	r3, r2, r3
 801fd90:	183a      	adds	r2, r7, r0
 801fd92:	8812      	ldrh	r2, [r2, #0]
 801fd94:	4912      	ldr	r1, [pc, #72]	@ (801fde0 <USB_DeactivateEndpoint+0x374>)
 801fd96:	430a      	orrs	r2, r1
 801fd98:	b292      	uxth	r2, r2
 801fd9a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fd9c:	687a      	ldr	r2, [r7, #4]
 801fd9e:	683b      	ldr	r3, [r7, #0]
 801fda0:	781b      	ldrb	r3, [r3, #0]
 801fda2:	009b      	lsls	r3, r3, #2
 801fda4:	18d3      	adds	r3, r2, r3
 801fda6:	881b      	ldrh	r3, [r3, #0]
 801fda8:	b29a      	uxth	r2, r3
 801fdaa:	2022      	movs	r0, #34	@ 0x22
 801fdac:	183b      	adds	r3, r7, r0
 801fdae:	490e      	ldr	r1, [pc, #56]	@ (801fde8 <USB_DeactivateEndpoint+0x37c>)
 801fdb0:	400a      	ands	r2, r1
 801fdb2:	801a      	strh	r2, [r3, #0]
 801fdb4:	687a      	ldr	r2, [r7, #4]
 801fdb6:	683b      	ldr	r3, [r7, #0]
 801fdb8:	781b      	ldrb	r3, [r3, #0]
 801fdba:	009b      	lsls	r3, r3, #2
 801fdbc:	18d3      	adds	r3, r2, r3
 801fdbe:	183a      	adds	r2, r7, r0
 801fdc0:	8812      	ldrh	r2, [r2, #0]
 801fdc2:	4907      	ldr	r1, [pc, #28]	@ (801fde0 <USB_DeactivateEndpoint+0x374>)
 801fdc4:	430a      	orrs	r2, r1
 801fdc6:	b292      	uxth	r2, r2
 801fdc8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801fdca:	2300      	movs	r3, #0
}
 801fdcc:	0018      	movs	r0, r3
 801fdce:	46bd      	mov	sp, r7
 801fdd0:	b00c      	add	sp, #48	@ 0x30
 801fdd2:	bd80      	pop	{r7, pc}
 801fdd4:	ffff8f8f 	.word	0xffff8f8f
 801fdd8:	ffff80c0 	.word	0xffff80c0
 801fddc:	ffff8fbf 	.word	0xffff8fbf
 801fde0:	ffff8080 	.word	0xffff8080
 801fde4:	ffffc080 	.word	0xffffc080
 801fde8:	ffffbf8f 	.word	0xffffbf8f

0801fdec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fdec:	b590      	push	{r4, r7, lr}
 801fdee:	b0c3      	sub	sp, #268	@ 0x10c
 801fdf0:	af00      	add	r7, sp, #0
 801fdf2:	6078      	str	r0, [r7, #4]
 801fdf4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801fdf6:	683b      	ldr	r3, [r7, #0]
 801fdf8:	785b      	ldrb	r3, [r3, #1]
 801fdfa:	2b01      	cmp	r3, #1
 801fdfc:	d001      	beq.n	801fe02 <USB_EPStartXfer+0x16>
 801fdfe:	f000 fd2d 	bl	802085c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801fe02:	683b      	ldr	r3, [r7, #0]
 801fe04:	699a      	ldr	r2, [r3, #24]
 801fe06:	683b      	ldr	r3, [r7, #0]
 801fe08:	691b      	ldr	r3, [r3, #16]
 801fe0a:	429a      	cmp	r2, r3
 801fe0c:	d905      	bls.n	801fe1a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801fe0e:	683b      	ldr	r3, [r7, #0]
 801fe10:	691b      	ldr	r3, [r3, #16]
 801fe12:	1d7a      	adds	r2, r7, #5
 801fe14:	32ff      	adds	r2, #255	@ 0xff
 801fe16:	6013      	str	r3, [r2, #0]
 801fe18:	e004      	b.n	801fe24 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801fe1a:	683b      	ldr	r3, [r7, #0]
 801fe1c:	699b      	ldr	r3, [r3, #24]
 801fe1e:	1d7a      	adds	r2, r7, #5
 801fe20:	32ff      	adds	r2, #255	@ 0xff
 801fe22:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801fe24:	683b      	ldr	r3, [r7, #0]
 801fe26:	7b1b      	ldrb	r3, [r3, #12]
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	d125      	bne.n	801fe78 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801fe2c:	683b      	ldr	r3, [r7, #0]
 801fe2e:	6959      	ldr	r1, [r3, #20]
 801fe30:	683b      	ldr	r3, [r7, #0]
 801fe32:	88da      	ldrh	r2, [r3, #6]
 801fe34:	1d7b      	adds	r3, r7, #5
 801fe36:	33ff      	adds	r3, #255	@ 0xff
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	b29b      	uxth	r3, r3
 801fe3c:	6878      	ldr	r0, [r7, #4]
 801fe3e:	f001 fa47 	bl	80212d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	613b      	str	r3, [r7, #16]
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	2250      	movs	r2, #80	@ 0x50
 801fe4a:	5a9b      	ldrh	r3, [r3, r2]
 801fe4c:	b29b      	uxth	r3, r3
 801fe4e:	001a      	movs	r2, r3
 801fe50:	693b      	ldr	r3, [r7, #16]
 801fe52:	189b      	adds	r3, r3, r2
 801fe54:	613b      	str	r3, [r7, #16]
 801fe56:	683b      	ldr	r3, [r7, #0]
 801fe58:	781b      	ldrb	r3, [r3, #0]
 801fe5a:	00da      	lsls	r2, r3, #3
 801fe5c:	693b      	ldr	r3, [r7, #16]
 801fe5e:	18d3      	adds	r3, r2, r3
 801fe60:	4ad7      	ldr	r2, [pc, #860]	@ (80201c0 <USB_EPStartXfer+0x3d4>)
 801fe62:	4694      	mov	ip, r2
 801fe64:	4463      	add	r3, ip
 801fe66:	60fb      	str	r3, [r7, #12]
 801fe68:	1d7b      	adds	r3, r7, #5
 801fe6a:	33ff      	adds	r3, #255	@ 0xff
 801fe6c:	681b      	ldr	r3, [r3, #0]
 801fe6e:	b29a      	uxth	r2, r3
 801fe70:	68fb      	ldr	r3, [r7, #12]
 801fe72:	801a      	strh	r2, [r3, #0]
 801fe74:	f000 fccd 	bl	8020812 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801fe78:	683b      	ldr	r3, [r7, #0]
 801fe7a:	78db      	ldrb	r3, [r3, #3]
 801fe7c:	2b02      	cmp	r3, #2
 801fe7e:	d000      	beq.n	801fe82 <USB_EPStartXfer+0x96>
 801fe80:	e362      	b.n	8020548 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801fe82:	683b      	ldr	r3, [r7, #0]
 801fe84:	6a1a      	ldr	r2, [r3, #32]
 801fe86:	683b      	ldr	r3, [r7, #0]
 801fe88:	691b      	ldr	r3, [r3, #16]
 801fe8a:	429a      	cmp	r2, r3
 801fe8c:	d800      	bhi.n	801fe90 <USB_EPStartXfer+0xa4>
 801fe8e:	e309      	b.n	80204a4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801fe90:	687a      	ldr	r2, [r7, #4]
 801fe92:	683b      	ldr	r3, [r7, #0]
 801fe94:	781b      	ldrb	r3, [r3, #0]
 801fe96:	009b      	lsls	r3, r3, #2
 801fe98:	18d3      	adds	r3, r2, r3
 801fe9a:	881b      	ldrh	r3, [r3, #0]
 801fe9c:	b29a      	uxth	r2, r3
 801fe9e:	2056      	movs	r0, #86	@ 0x56
 801fea0:	183b      	adds	r3, r7, r0
 801fea2:	49c8      	ldr	r1, [pc, #800]	@ (80201c4 <USB_EPStartXfer+0x3d8>)
 801fea4:	400a      	ands	r2, r1
 801fea6:	801a      	strh	r2, [r3, #0]
 801fea8:	687a      	ldr	r2, [r7, #4]
 801feaa:	683b      	ldr	r3, [r7, #0]
 801feac:	781b      	ldrb	r3, [r3, #0]
 801feae:	009b      	lsls	r3, r3, #2
 801feb0:	18d3      	adds	r3, r2, r3
 801feb2:	183a      	adds	r2, r7, r0
 801feb4:	8812      	ldrh	r2, [r2, #0]
 801feb6:	49c4      	ldr	r1, [pc, #784]	@ (80201c8 <USB_EPStartXfer+0x3dc>)
 801feb8:	430a      	orrs	r2, r1
 801feba:	b292      	uxth	r2, r2
 801febc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801febe:	683b      	ldr	r3, [r7, #0]
 801fec0:	6a1a      	ldr	r2, [r3, #32]
 801fec2:	1d7b      	adds	r3, r7, #5
 801fec4:	33ff      	adds	r3, #255	@ 0xff
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	1ad2      	subs	r2, r2, r3
 801feca:	683b      	ldr	r3, [r7, #0]
 801fecc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801fece:	687a      	ldr	r2, [r7, #4]
 801fed0:	683b      	ldr	r3, [r7, #0]
 801fed2:	781b      	ldrb	r3, [r3, #0]
 801fed4:	009b      	lsls	r3, r3, #2
 801fed6:	18d3      	adds	r3, r2, r3
 801fed8:	881b      	ldrh	r3, [r3, #0]
 801feda:	b29b      	uxth	r3, r3
 801fedc:	001a      	movs	r2, r3
 801fede:	2340      	movs	r3, #64	@ 0x40
 801fee0:	4013      	ands	r3, r2
 801fee2:	d100      	bne.n	801fee6 <USB_EPStartXfer+0xfa>
 801fee4:	e176      	b.n	80201d4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801fee6:	687b      	ldr	r3, [r7, #4]
 801fee8:	633b      	str	r3, [r7, #48]	@ 0x30
 801feea:	683b      	ldr	r3, [r7, #0]
 801feec:	785b      	ldrb	r3, [r3, #1]
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d000      	beq.n	801fef4 <USB_EPStartXfer+0x108>
 801fef2:	e074      	b.n	801ffde <USB_EPStartXfer+0x1f2>
 801fef4:	687b      	ldr	r3, [r7, #4]
 801fef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	2250      	movs	r2, #80	@ 0x50
 801fefc:	5a9b      	ldrh	r3, [r3, r2]
 801fefe:	b29b      	uxth	r3, r3
 801ff00:	001a      	movs	r2, r3
 801ff02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff04:	189b      	adds	r3, r3, r2
 801ff06:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ff08:	683b      	ldr	r3, [r7, #0]
 801ff0a:	781b      	ldrb	r3, [r3, #0]
 801ff0c:	00da      	lsls	r2, r3, #3
 801ff0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff10:	18d3      	adds	r3, r2, r3
 801ff12:	4aae      	ldr	r2, [pc, #696]	@ (80201cc <USB_EPStartXfer+0x3e0>)
 801ff14:	4694      	mov	ip, r2
 801ff16:	4463      	add	r3, ip
 801ff18:	627b      	str	r3, [r7, #36]	@ 0x24
 801ff1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff1c:	881b      	ldrh	r3, [r3, #0]
 801ff1e:	b29b      	uxth	r3, r3
 801ff20:	059b      	lsls	r3, r3, #22
 801ff22:	0d9b      	lsrs	r3, r3, #22
 801ff24:	b29a      	uxth	r2, r3
 801ff26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff28:	801a      	strh	r2, [r3, #0]
 801ff2a:	1d7b      	adds	r3, r7, #5
 801ff2c:	33ff      	adds	r3, #255	@ 0xff
 801ff2e:	681b      	ldr	r3, [r3, #0]
 801ff30:	2b3e      	cmp	r3, #62	@ 0x3e
 801ff32:	d924      	bls.n	801ff7e <USB_EPStartXfer+0x192>
 801ff34:	1d7b      	adds	r3, r7, #5
 801ff36:	33ff      	adds	r3, #255	@ 0xff
 801ff38:	681b      	ldr	r3, [r3, #0]
 801ff3a:	095b      	lsrs	r3, r3, #5
 801ff3c:	1c7a      	adds	r2, r7, #1
 801ff3e:	32ff      	adds	r2, #255	@ 0xff
 801ff40:	6013      	str	r3, [r2, #0]
 801ff42:	1d7b      	adds	r3, r7, #5
 801ff44:	33ff      	adds	r3, #255	@ 0xff
 801ff46:	681b      	ldr	r3, [r3, #0]
 801ff48:	221f      	movs	r2, #31
 801ff4a:	4013      	ands	r3, r2
 801ff4c:	d106      	bne.n	801ff5c <USB_EPStartXfer+0x170>
 801ff4e:	1c7b      	adds	r3, r7, #1
 801ff50:	33ff      	adds	r3, #255	@ 0xff
 801ff52:	681b      	ldr	r3, [r3, #0]
 801ff54:	3b01      	subs	r3, #1
 801ff56:	1c7a      	adds	r2, r7, #1
 801ff58:	32ff      	adds	r2, #255	@ 0xff
 801ff5a:	6013      	str	r3, [r2, #0]
 801ff5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff5e:	881b      	ldrh	r3, [r3, #0]
 801ff60:	b29a      	uxth	r2, r3
 801ff62:	1c7b      	adds	r3, r7, #1
 801ff64:	33ff      	adds	r3, #255	@ 0xff
 801ff66:	681b      	ldr	r3, [r3, #0]
 801ff68:	b29b      	uxth	r3, r3
 801ff6a:	029b      	lsls	r3, r3, #10
 801ff6c:	b29b      	uxth	r3, r3
 801ff6e:	4313      	orrs	r3, r2
 801ff70:	b29b      	uxth	r3, r3
 801ff72:	4a97      	ldr	r2, [pc, #604]	@ (80201d0 <USB_EPStartXfer+0x3e4>)
 801ff74:	4313      	orrs	r3, r2
 801ff76:	b29a      	uxth	r2, r3
 801ff78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff7a:	801a      	strh	r2, [r3, #0]
 801ff7c:	e04a      	b.n	8020014 <USB_EPStartXfer+0x228>
 801ff7e:	1d7b      	adds	r3, r7, #5
 801ff80:	33ff      	adds	r3, #255	@ 0xff
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	d108      	bne.n	801ff9a <USB_EPStartXfer+0x1ae>
 801ff88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff8a:	881b      	ldrh	r3, [r3, #0]
 801ff8c:	b29b      	uxth	r3, r3
 801ff8e:	4a90      	ldr	r2, [pc, #576]	@ (80201d0 <USB_EPStartXfer+0x3e4>)
 801ff90:	4313      	orrs	r3, r2
 801ff92:	b29a      	uxth	r2, r3
 801ff94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff96:	801a      	strh	r2, [r3, #0]
 801ff98:	e03c      	b.n	8020014 <USB_EPStartXfer+0x228>
 801ff9a:	1d7b      	adds	r3, r7, #5
 801ff9c:	33ff      	adds	r3, #255	@ 0xff
 801ff9e:	681b      	ldr	r3, [r3, #0]
 801ffa0:	085b      	lsrs	r3, r3, #1
 801ffa2:	1c7a      	adds	r2, r7, #1
 801ffa4:	32ff      	adds	r2, #255	@ 0xff
 801ffa6:	6013      	str	r3, [r2, #0]
 801ffa8:	1d7b      	adds	r3, r7, #5
 801ffaa:	33ff      	adds	r3, #255	@ 0xff
 801ffac:	681b      	ldr	r3, [r3, #0]
 801ffae:	2201      	movs	r2, #1
 801ffb0:	4013      	ands	r3, r2
 801ffb2:	d006      	beq.n	801ffc2 <USB_EPStartXfer+0x1d6>
 801ffb4:	1c7b      	adds	r3, r7, #1
 801ffb6:	33ff      	adds	r3, #255	@ 0xff
 801ffb8:	681b      	ldr	r3, [r3, #0]
 801ffba:	3301      	adds	r3, #1
 801ffbc:	1c7a      	adds	r2, r7, #1
 801ffbe:	32ff      	adds	r2, #255	@ 0xff
 801ffc0:	6013      	str	r3, [r2, #0]
 801ffc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffc4:	881b      	ldrh	r3, [r3, #0]
 801ffc6:	b29a      	uxth	r2, r3
 801ffc8:	1c7b      	adds	r3, r7, #1
 801ffca:	33ff      	adds	r3, #255	@ 0xff
 801ffcc:	681b      	ldr	r3, [r3, #0]
 801ffce:	b29b      	uxth	r3, r3
 801ffd0:	029b      	lsls	r3, r3, #10
 801ffd2:	b29b      	uxth	r3, r3
 801ffd4:	4313      	orrs	r3, r2
 801ffd6:	b29a      	uxth	r2, r3
 801ffd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffda:	801a      	strh	r2, [r3, #0]
 801ffdc:	e01a      	b.n	8020014 <USB_EPStartXfer+0x228>
 801ffde:	683b      	ldr	r3, [r7, #0]
 801ffe0:	785b      	ldrb	r3, [r3, #1]
 801ffe2:	2b01      	cmp	r3, #1
 801ffe4:	d116      	bne.n	8020014 <USB_EPStartXfer+0x228>
 801ffe6:	687b      	ldr	r3, [r7, #4]
 801ffe8:	2250      	movs	r2, #80	@ 0x50
 801ffea:	5a9b      	ldrh	r3, [r3, r2]
 801ffec:	b29b      	uxth	r3, r3
 801ffee:	001a      	movs	r2, r3
 801fff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fff2:	189b      	adds	r3, r3, r2
 801fff4:	633b      	str	r3, [r7, #48]	@ 0x30
 801fff6:	683b      	ldr	r3, [r7, #0]
 801fff8:	781b      	ldrb	r3, [r3, #0]
 801fffa:	00da      	lsls	r2, r3, #3
 801fffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fffe:	18d3      	adds	r3, r2, r3
 8020000:	4a72      	ldr	r2, [pc, #456]	@ (80201cc <USB_EPStartXfer+0x3e0>)
 8020002:	4694      	mov	ip, r2
 8020004:	4463      	add	r3, ip
 8020006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020008:	1d7b      	adds	r3, r7, #5
 802000a:	33ff      	adds	r3, #255	@ 0xff
 802000c:	681b      	ldr	r3, [r3, #0]
 802000e:	b29a      	uxth	r2, r3
 8020010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020012:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8020014:	2076      	movs	r0, #118	@ 0x76
 8020016:	183b      	adds	r3, r7, r0
 8020018:	683a      	ldr	r2, [r7, #0]
 802001a:	8952      	ldrh	r2, [r2, #10]
 802001c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802001e:	683b      	ldr	r3, [r7, #0]
 8020020:	6959      	ldr	r1, [r3, #20]
 8020022:	1d7b      	adds	r3, r7, #5
 8020024:	33ff      	adds	r3, #255	@ 0xff
 8020026:	681b      	ldr	r3, [r3, #0]
 8020028:	b29c      	uxth	r4, r3
 802002a:	183b      	adds	r3, r7, r0
 802002c:	881a      	ldrh	r2, [r3, #0]
 802002e:	6878      	ldr	r0, [r7, #4]
 8020030:	0023      	movs	r3, r4
 8020032:	f001 f94d 	bl	80212d0 <USB_WritePMA>
            ep->xfer_buff += len;
 8020036:	683b      	ldr	r3, [r7, #0]
 8020038:	695a      	ldr	r2, [r3, #20]
 802003a:	1d7b      	adds	r3, r7, #5
 802003c:	33ff      	adds	r3, #255	@ 0xff
 802003e:	681b      	ldr	r3, [r3, #0]
 8020040:	18d2      	adds	r2, r2, r3
 8020042:	683b      	ldr	r3, [r7, #0]
 8020044:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8020046:	683b      	ldr	r3, [r7, #0]
 8020048:	6a1a      	ldr	r2, [r3, #32]
 802004a:	683b      	ldr	r3, [r7, #0]
 802004c:	691b      	ldr	r3, [r3, #16]
 802004e:	429a      	cmp	r2, r3
 8020050:	d908      	bls.n	8020064 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8020052:	683b      	ldr	r3, [r7, #0]
 8020054:	6a1a      	ldr	r2, [r3, #32]
 8020056:	1d7b      	adds	r3, r7, #5
 8020058:	33ff      	adds	r3, #255	@ 0xff
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	1ad2      	subs	r2, r2, r3
 802005e:	683b      	ldr	r3, [r7, #0]
 8020060:	621a      	str	r2, [r3, #32]
 8020062:	e007      	b.n	8020074 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8020064:	683b      	ldr	r3, [r7, #0]
 8020066:	6a1b      	ldr	r3, [r3, #32]
 8020068:	1d7a      	adds	r2, r7, #5
 802006a:	32ff      	adds	r2, #255	@ 0xff
 802006c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 802006e:	683b      	ldr	r3, [r7, #0]
 8020070:	2200      	movs	r2, #0
 8020072:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020074:	683b      	ldr	r3, [r7, #0]
 8020076:	785b      	ldrb	r3, [r3, #1]
 8020078:	2b00      	cmp	r3, #0
 802007a:	d000      	beq.n	802007e <USB_EPStartXfer+0x292>
 802007c:	e070      	b.n	8020160 <USB_EPStartXfer+0x374>
 802007e:	687b      	ldr	r3, [r7, #4]
 8020080:	61bb      	str	r3, [r7, #24]
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	2250      	movs	r2, #80	@ 0x50
 8020086:	5a9b      	ldrh	r3, [r3, r2]
 8020088:	b29b      	uxth	r3, r3
 802008a:	001a      	movs	r2, r3
 802008c:	69bb      	ldr	r3, [r7, #24]
 802008e:	189b      	adds	r3, r3, r2
 8020090:	61bb      	str	r3, [r7, #24]
 8020092:	683b      	ldr	r3, [r7, #0]
 8020094:	781b      	ldrb	r3, [r3, #0]
 8020096:	00da      	lsls	r2, r3, #3
 8020098:	69bb      	ldr	r3, [r7, #24]
 802009a:	18d3      	adds	r3, r2, r3
 802009c:	4a48      	ldr	r2, [pc, #288]	@ (80201c0 <USB_EPStartXfer+0x3d4>)
 802009e:	4694      	mov	ip, r2
 80200a0:	4463      	add	r3, ip
 80200a2:	617b      	str	r3, [r7, #20]
 80200a4:	697b      	ldr	r3, [r7, #20]
 80200a6:	881b      	ldrh	r3, [r3, #0]
 80200a8:	b29b      	uxth	r3, r3
 80200aa:	059b      	lsls	r3, r3, #22
 80200ac:	0d9b      	lsrs	r3, r3, #22
 80200ae:	b29a      	uxth	r2, r3
 80200b0:	697b      	ldr	r3, [r7, #20]
 80200b2:	801a      	strh	r2, [r3, #0]
 80200b4:	1d7b      	adds	r3, r7, #5
 80200b6:	33ff      	adds	r3, #255	@ 0xff
 80200b8:	681b      	ldr	r3, [r3, #0]
 80200ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80200bc:	d922      	bls.n	8020104 <USB_EPStartXfer+0x318>
 80200be:	1d7b      	adds	r3, r7, #5
 80200c0:	33ff      	adds	r3, #255	@ 0xff
 80200c2:	681b      	ldr	r3, [r3, #0]
 80200c4:	095b      	lsrs	r3, r3, #5
 80200c6:	21fc      	movs	r1, #252	@ 0xfc
 80200c8:	187a      	adds	r2, r7, r1
 80200ca:	6013      	str	r3, [r2, #0]
 80200cc:	1d7b      	adds	r3, r7, #5
 80200ce:	33ff      	adds	r3, #255	@ 0xff
 80200d0:	681b      	ldr	r3, [r3, #0]
 80200d2:	221f      	movs	r2, #31
 80200d4:	4013      	ands	r3, r2
 80200d6:	d104      	bne.n	80200e2 <USB_EPStartXfer+0x2f6>
 80200d8:	187b      	adds	r3, r7, r1
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	3b01      	subs	r3, #1
 80200de:	187a      	adds	r2, r7, r1
 80200e0:	6013      	str	r3, [r2, #0]
 80200e2:	697b      	ldr	r3, [r7, #20]
 80200e4:	881b      	ldrh	r3, [r3, #0]
 80200e6:	b29a      	uxth	r2, r3
 80200e8:	23fc      	movs	r3, #252	@ 0xfc
 80200ea:	18fb      	adds	r3, r7, r3
 80200ec:	681b      	ldr	r3, [r3, #0]
 80200ee:	b29b      	uxth	r3, r3
 80200f0:	029b      	lsls	r3, r3, #10
 80200f2:	b29b      	uxth	r3, r3
 80200f4:	4313      	orrs	r3, r2
 80200f6:	b29b      	uxth	r3, r3
 80200f8:	4a35      	ldr	r2, [pc, #212]	@ (80201d0 <USB_EPStartXfer+0x3e4>)
 80200fa:	4313      	orrs	r3, r2
 80200fc:	b29a      	uxth	r2, r3
 80200fe:	697b      	ldr	r3, [r7, #20]
 8020100:	801a      	strh	r2, [r3, #0]
 8020102:	e04a      	b.n	802019a <USB_EPStartXfer+0x3ae>
 8020104:	1d7b      	adds	r3, r7, #5
 8020106:	33ff      	adds	r3, #255	@ 0xff
 8020108:	681b      	ldr	r3, [r3, #0]
 802010a:	2b00      	cmp	r3, #0
 802010c:	d108      	bne.n	8020120 <USB_EPStartXfer+0x334>
 802010e:	697b      	ldr	r3, [r7, #20]
 8020110:	881b      	ldrh	r3, [r3, #0]
 8020112:	b29b      	uxth	r3, r3
 8020114:	4a2e      	ldr	r2, [pc, #184]	@ (80201d0 <USB_EPStartXfer+0x3e4>)
 8020116:	4313      	orrs	r3, r2
 8020118:	b29a      	uxth	r2, r3
 802011a:	697b      	ldr	r3, [r7, #20]
 802011c:	801a      	strh	r2, [r3, #0]
 802011e:	e03c      	b.n	802019a <USB_EPStartXfer+0x3ae>
 8020120:	1d7b      	adds	r3, r7, #5
 8020122:	33ff      	adds	r3, #255	@ 0xff
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	085b      	lsrs	r3, r3, #1
 8020128:	21fc      	movs	r1, #252	@ 0xfc
 802012a:	187a      	adds	r2, r7, r1
 802012c:	6013      	str	r3, [r2, #0]
 802012e:	1d7b      	adds	r3, r7, #5
 8020130:	33ff      	adds	r3, #255	@ 0xff
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	2201      	movs	r2, #1
 8020136:	4013      	ands	r3, r2
 8020138:	d004      	beq.n	8020144 <USB_EPStartXfer+0x358>
 802013a:	187b      	adds	r3, r7, r1
 802013c:	681b      	ldr	r3, [r3, #0]
 802013e:	3301      	adds	r3, #1
 8020140:	187a      	adds	r2, r7, r1
 8020142:	6013      	str	r3, [r2, #0]
 8020144:	697b      	ldr	r3, [r7, #20]
 8020146:	881b      	ldrh	r3, [r3, #0]
 8020148:	b29a      	uxth	r2, r3
 802014a:	23fc      	movs	r3, #252	@ 0xfc
 802014c:	18fb      	adds	r3, r7, r3
 802014e:	681b      	ldr	r3, [r3, #0]
 8020150:	b29b      	uxth	r3, r3
 8020152:	029b      	lsls	r3, r3, #10
 8020154:	b29b      	uxth	r3, r3
 8020156:	4313      	orrs	r3, r2
 8020158:	b29a      	uxth	r2, r3
 802015a:	697b      	ldr	r3, [r7, #20]
 802015c:	801a      	strh	r2, [r3, #0]
 802015e:	e01c      	b.n	802019a <USB_EPStartXfer+0x3ae>
 8020160:	683b      	ldr	r3, [r7, #0]
 8020162:	785b      	ldrb	r3, [r3, #1]
 8020164:	2b01      	cmp	r3, #1
 8020166:	d118      	bne.n	802019a <USB_EPStartXfer+0x3ae>
 8020168:	687b      	ldr	r3, [r7, #4]
 802016a:	623b      	str	r3, [r7, #32]
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	2250      	movs	r2, #80	@ 0x50
 8020170:	5a9b      	ldrh	r3, [r3, r2]
 8020172:	b29b      	uxth	r3, r3
 8020174:	001a      	movs	r2, r3
 8020176:	6a3b      	ldr	r3, [r7, #32]
 8020178:	189b      	adds	r3, r3, r2
 802017a:	623b      	str	r3, [r7, #32]
 802017c:	683b      	ldr	r3, [r7, #0]
 802017e:	781b      	ldrb	r3, [r3, #0]
 8020180:	00da      	lsls	r2, r3, #3
 8020182:	6a3b      	ldr	r3, [r7, #32]
 8020184:	18d3      	adds	r3, r2, r3
 8020186:	4a0e      	ldr	r2, [pc, #56]	@ (80201c0 <USB_EPStartXfer+0x3d4>)
 8020188:	4694      	mov	ip, r2
 802018a:	4463      	add	r3, ip
 802018c:	61fb      	str	r3, [r7, #28]
 802018e:	1d7b      	adds	r3, r7, #5
 8020190:	33ff      	adds	r3, #255	@ 0xff
 8020192:	681b      	ldr	r3, [r3, #0]
 8020194:	b29a      	uxth	r2, r3
 8020196:	69fb      	ldr	r3, [r7, #28]
 8020198:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 802019a:	2076      	movs	r0, #118	@ 0x76
 802019c:	183b      	adds	r3, r7, r0
 802019e:	683a      	ldr	r2, [r7, #0]
 80201a0:	8912      	ldrh	r2, [r2, #8]
 80201a2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80201a4:	683b      	ldr	r3, [r7, #0]
 80201a6:	6959      	ldr	r1, [r3, #20]
 80201a8:	1d7b      	adds	r3, r7, #5
 80201aa:	33ff      	adds	r3, #255	@ 0xff
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	b29c      	uxth	r4, r3
 80201b0:	183b      	adds	r3, r7, r0
 80201b2:	881a      	ldrh	r2, [r3, #0]
 80201b4:	6878      	ldr	r0, [r7, #4]
 80201b6:	0023      	movs	r3, r4
 80201b8:	f001 f88a 	bl	80212d0 <USB_WritePMA>
 80201bc:	e329      	b.n	8020812 <USB_EPStartXfer+0xa26>
 80201be:	46c0      	nop			@ (mov r8, r8)
 80201c0:	00000402 	.word	0x00000402
 80201c4:	ffff8f8f 	.word	0xffff8f8f
 80201c8:	ffff8180 	.word	0xffff8180
 80201cc:	00000406 	.word	0x00000406
 80201d0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80201d4:	683b      	ldr	r3, [r7, #0]
 80201d6:	785b      	ldrb	r3, [r3, #1]
 80201d8:	2b00      	cmp	r3, #0
 80201da:	d000      	beq.n	80201de <USB_EPStartXfer+0x3f2>
 80201dc:	e070      	b.n	80202c0 <USB_EPStartXfer+0x4d4>
 80201de:	687b      	ldr	r3, [r7, #4]
 80201e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80201e2:	687b      	ldr	r3, [r7, #4]
 80201e4:	2250      	movs	r2, #80	@ 0x50
 80201e6:	5a9b      	ldrh	r3, [r3, r2]
 80201e8:	b29b      	uxth	r3, r3
 80201ea:	001a      	movs	r2, r3
 80201ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80201ee:	189b      	adds	r3, r3, r2
 80201f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80201f2:	683b      	ldr	r3, [r7, #0]
 80201f4:	781b      	ldrb	r3, [r3, #0]
 80201f6:	00da      	lsls	r2, r3, #3
 80201f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80201fa:	18d3      	adds	r3, r2, r3
 80201fc:	4acd      	ldr	r2, [pc, #820]	@ (8020534 <USB_EPStartXfer+0x748>)
 80201fe:	4694      	mov	ip, r2
 8020200:	4463      	add	r3, ip
 8020202:	647b      	str	r3, [r7, #68]	@ 0x44
 8020204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020206:	881b      	ldrh	r3, [r3, #0]
 8020208:	b29b      	uxth	r3, r3
 802020a:	059b      	lsls	r3, r3, #22
 802020c:	0d9b      	lsrs	r3, r3, #22
 802020e:	b29a      	uxth	r2, r3
 8020210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020212:	801a      	strh	r2, [r3, #0]
 8020214:	1d7b      	adds	r3, r7, #5
 8020216:	33ff      	adds	r3, #255	@ 0xff
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	2b3e      	cmp	r3, #62	@ 0x3e
 802021c:	d922      	bls.n	8020264 <USB_EPStartXfer+0x478>
 802021e:	1d7b      	adds	r3, r7, #5
 8020220:	33ff      	adds	r3, #255	@ 0xff
 8020222:	681b      	ldr	r3, [r3, #0]
 8020224:	095b      	lsrs	r3, r3, #5
 8020226:	21f8      	movs	r1, #248	@ 0xf8
 8020228:	187a      	adds	r2, r7, r1
 802022a:	6013      	str	r3, [r2, #0]
 802022c:	1d7b      	adds	r3, r7, #5
 802022e:	33ff      	adds	r3, #255	@ 0xff
 8020230:	681b      	ldr	r3, [r3, #0]
 8020232:	221f      	movs	r2, #31
 8020234:	4013      	ands	r3, r2
 8020236:	d104      	bne.n	8020242 <USB_EPStartXfer+0x456>
 8020238:	187b      	adds	r3, r7, r1
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	3b01      	subs	r3, #1
 802023e:	187a      	adds	r2, r7, r1
 8020240:	6013      	str	r3, [r2, #0]
 8020242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020244:	881b      	ldrh	r3, [r3, #0]
 8020246:	b29a      	uxth	r2, r3
 8020248:	23f8      	movs	r3, #248	@ 0xf8
 802024a:	18fb      	adds	r3, r7, r3
 802024c:	681b      	ldr	r3, [r3, #0]
 802024e:	b29b      	uxth	r3, r3
 8020250:	029b      	lsls	r3, r3, #10
 8020252:	b29b      	uxth	r3, r3
 8020254:	4313      	orrs	r3, r2
 8020256:	b29b      	uxth	r3, r3
 8020258:	4ab7      	ldr	r2, [pc, #732]	@ (8020538 <USB_EPStartXfer+0x74c>)
 802025a:	4313      	orrs	r3, r2
 802025c:	b29a      	uxth	r2, r3
 802025e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020260:	801a      	strh	r2, [r3, #0]
 8020262:	e04a      	b.n	80202fa <USB_EPStartXfer+0x50e>
 8020264:	1d7b      	adds	r3, r7, #5
 8020266:	33ff      	adds	r3, #255	@ 0xff
 8020268:	681b      	ldr	r3, [r3, #0]
 802026a:	2b00      	cmp	r3, #0
 802026c:	d108      	bne.n	8020280 <USB_EPStartXfer+0x494>
 802026e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020270:	881b      	ldrh	r3, [r3, #0]
 8020272:	b29b      	uxth	r3, r3
 8020274:	4ab0      	ldr	r2, [pc, #704]	@ (8020538 <USB_EPStartXfer+0x74c>)
 8020276:	4313      	orrs	r3, r2
 8020278:	b29a      	uxth	r2, r3
 802027a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802027c:	801a      	strh	r2, [r3, #0]
 802027e:	e03c      	b.n	80202fa <USB_EPStartXfer+0x50e>
 8020280:	1d7b      	adds	r3, r7, #5
 8020282:	33ff      	adds	r3, #255	@ 0xff
 8020284:	681b      	ldr	r3, [r3, #0]
 8020286:	085b      	lsrs	r3, r3, #1
 8020288:	21f8      	movs	r1, #248	@ 0xf8
 802028a:	187a      	adds	r2, r7, r1
 802028c:	6013      	str	r3, [r2, #0]
 802028e:	1d7b      	adds	r3, r7, #5
 8020290:	33ff      	adds	r3, #255	@ 0xff
 8020292:	681b      	ldr	r3, [r3, #0]
 8020294:	2201      	movs	r2, #1
 8020296:	4013      	ands	r3, r2
 8020298:	d004      	beq.n	80202a4 <USB_EPStartXfer+0x4b8>
 802029a:	187b      	adds	r3, r7, r1
 802029c:	681b      	ldr	r3, [r3, #0]
 802029e:	3301      	adds	r3, #1
 80202a0:	187a      	adds	r2, r7, r1
 80202a2:	6013      	str	r3, [r2, #0]
 80202a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80202a6:	881b      	ldrh	r3, [r3, #0]
 80202a8:	b29a      	uxth	r2, r3
 80202aa:	23f8      	movs	r3, #248	@ 0xf8
 80202ac:	18fb      	adds	r3, r7, r3
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	b29b      	uxth	r3, r3
 80202b2:	029b      	lsls	r3, r3, #10
 80202b4:	b29b      	uxth	r3, r3
 80202b6:	4313      	orrs	r3, r2
 80202b8:	b29a      	uxth	r2, r3
 80202ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80202bc:	801a      	strh	r2, [r3, #0]
 80202be:	e01c      	b.n	80202fa <USB_EPStartXfer+0x50e>
 80202c0:	683b      	ldr	r3, [r7, #0]
 80202c2:	785b      	ldrb	r3, [r3, #1]
 80202c4:	2b01      	cmp	r3, #1
 80202c6:	d118      	bne.n	80202fa <USB_EPStartXfer+0x50e>
 80202c8:	687b      	ldr	r3, [r7, #4]
 80202ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	2250      	movs	r2, #80	@ 0x50
 80202d0:	5a9b      	ldrh	r3, [r3, r2]
 80202d2:	b29b      	uxth	r3, r3
 80202d4:	001a      	movs	r2, r3
 80202d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80202d8:	189b      	adds	r3, r3, r2
 80202da:	653b      	str	r3, [r7, #80]	@ 0x50
 80202dc:	683b      	ldr	r3, [r7, #0]
 80202de:	781b      	ldrb	r3, [r3, #0]
 80202e0:	00da      	lsls	r2, r3, #3
 80202e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80202e4:	18d3      	adds	r3, r2, r3
 80202e6:	4a93      	ldr	r2, [pc, #588]	@ (8020534 <USB_EPStartXfer+0x748>)
 80202e8:	4694      	mov	ip, r2
 80202ea:	4463      	add	r3, ip
 80202ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80202ee:	1d7b      	adds	r3, r7, #5
 80202f0:	33ff      	adds	r3, #255	@ 0xff
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	b29a      	uxth	r2, r3
 80202f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80202f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80202fa:	2076      	movs	r0, #118	@ 0x76
 80202fc:	183b      	adds	r3, r7, r0
 80202fe:	683a      	ldr	r2, [r7, #0]
 8020300:	8912      	ldrh	r2, [r2, #8]
 8020302:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020304:	683b      	ldr	r3, [r7, #0]
 8020306:	6959      	ldr	r1, [r3, #20]
 8020308:	1d7b      	adds	r3, r7, #5
 802030a:	33ff      	adds	r3, #255	@ 0xff
 802030c:	681b      	ldr	r3, [r3, #0]
 802030e:	b29c      	uxth	r4, r3
 8020310:	183b      	adds	r3, r7, r0
 8020312:	881a      	ldrh	r2, [r3, #0]
 8020314:	6878      	ldr	r0, [r7, #4]
 8020316:	0023      	movs	r3, r4
 8020318:	f000 ffda 	bl	80212d0 <USB_WritePMA>
            ep->xfer_buff += len;
 802031c:	683b      	ldr	r3, [r7, #0]
 802031e:	695a      	ldr	r2, [r3, #20]
 8020320:	1d7b      	adds	r3, r7, #5
 8020322:	33ff      	adds	r3, #255	@ 0xff
 8020324:	681b      	ldr	r3, [r3, #0]
 8020326:	18d2      	adds	r2, r2, r3
 8020328:	683b      	ldr	r3, [r7, #0]
 802032a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 802032c:	683b      	ldr	r3, [r7, #0]
 802032e:	6a1a      	ldr	r2, [r3, #32]
 8020330:	683b      	ldr	r3, [r7, #0]
 8020332:	691b      	ldr	r3, [r3, #16]
 8020334:	429a      	cmp	r2, r3
 8020336:	d908      	bls.n	802034a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8020338:	683b      	ldr	r3, [r7, #0]
 802033a:	6a1a      	ldr	r2, [r3, #32]
 802033c:	1d7b      	adds	r3, r7, #5
 802033e:	33ff      	adds	r3, #255	@ 0xff
 8020340:	681b      	ldr	r3, [r3, #0]
 8020342:	1ad2      	subs	r2, r2, r3
 8020344:	683b      	ldr	r3, [r7, #0]
 8020346:	621a      	str	r2, [r3, #32]
 8020348:	e007      	b.n	802035a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 802034a:	683b      	ldr	r3, [r7, #0]
 802034c:	6a1b      	ldr	r3, [r3, #32]
 802034e:	1d7a      	adds	r2, r7, #5
 8020350:	32ff      	adds	r2, #255	@ 0xff
 8020352:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8020354:	683b      	ldr	r3, [r7, #0]
 8020356:	2200      	movs	r2, #0
 8020358:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	643b      	str	r3, [r7, #64]	@ 0x40
 802035e:	683b      	ldr	r3, [r7, #0]
 8020360:	785b      	ldrb	r3, [r3, #1]
 8020362:	2b00      	cmp	r3, #0
 8020364:	d000      	beq.n	8020368 <USB_EPStartXfer+0x57c>
 8020366:	e070      	b.n	802044a <USB_EPStartXfer+0x65e>
 8020368:	687b      	ldr	r3, [r7, #4]
 802036a:	63bb      	str	r3, [r7, #56]	@ 0x38
 802036c:	687b      	ldr	r3, [r7, #4]
 802036e:	2250      	movs	r2, #80	@ 0x50
 8020370:	5a9b      	ldrh	r3, [r3, r2]
 8020372:	b29b      	uxth	r3, r3
 8020374:	001a      	movs	r2, r3
 8020376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020378:	189b      	adds	r3, r3, r2
 802037a:	63bb      	str	r3, [r7, #56]	@ 0x38
 802037c:	683b      	ldr	r3, [r7, #0]
 802037e:	781b      	ldrb	r3, [r3, #0]
 8020380:	00da      	lsls	r2, r3, #3
 8020382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020384:	18d3      	adds	r3, r2, r3
 8020386:	4a6d      	ldr	r2, [pc, #436]	@ (802053c <USB_EPStartXfer+0x750>)
 8020388:	4694      	mov	ip, r2
 802038a:	4463      	add	r3, ip
 802038c:	637b      	str	r3, [r7, #52]	@ 0x34
 802038e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020390:	881b      	ldrh	r3, [r3, #0]
 8020392:	b29b      	uxth	r3, r3
 8020394:	059b      	lsls	r3, r3, #22
 8020396:	0d9b      	lsrs	r3, r3, #22
 8020398:	b29a      	uxth	r2, r3
 802039a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802039c:	801a      	strh	r2, [r3, #0]
 802039e:	1d7b      	adds	r3, r7, #5
 80203a0:	33ff      	adds	r3, #255	@ 0xff
 80203a2:	681b      	ldr	r3, [r3, #0]
 80203a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80203a6:	d922      	bls.n	80203ee <USB_EPStartXfer+0x602>
 80203a8:	1d7b      	adds	r3, r7, #5
 80203aa:	33ff      	adds	r3, #255	@ 0xff
 80203ac:	681b      	ldr	r3, [r3, #0]
 80203ae:	095b      	lsrs	r3, r3, #5
 80203b0:	21f4      	movs	r1, #244	@ 0xf4
 80203b2:	187a      	adds	r2, r7, r1
 80203b4:	6013      	str	r3, [r2, #0]
 80203b6:	1d7b      	adds	r3, r7, #5
 80203b8:	33ff      	adds	r3, #255	@ 0xff
 80203ba:	681b      	ldr	r3, [r3, #0]
 80203bc:	221f      	movs	r2, #31
 80203be:	4013      	ands	r3, r2
 80203c0:	d104      	bne.n	80203cc <USB_EPStartXfer+0x5e0>
 80203c2:	187b      	adds	r3, r7, r1
 80203c4:	681b      	ldr	r3, [r3, #0]
 80203c6:	3b01      	subs	r3, #1
 80203c8:	187a      	adds	r2, r7, r1
 80203ca:	6013      	str	r3, [r2, #0]
 80203cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80203ce:	881b      	ldrh	r3, [r3, #0]
 80203d0:	b29a      	uxth	r2, r3
 80203d2:	23f4      	movs	r3, #244	@ 0xf4
 80203d4:	18fb      	adds	r3, r7, r3
 80203d6:	681b      	ldr	r3, [r3, #0]
 80203d8:	b29b      	uxth	r3, r3
 80203da:	029b      	lsls	r3, r3, #10
 80203dc:	b29b      	uxth	r3, r3
 80203de:	4313      	orrs	r3, r2
 80203e0:	b29b      	uxth	r3, r3
 80203e2:	4a55      	ldr	r2, [pc, #340]	@ (8020538 <USB_EPStartXfer+0x74c>)
 80203e4:	4313      	orrs	r3, r2
 80203e6:	b29a      	uxth	r2, r3
 80203e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80203ea:	801a      	strh	r2, [r3, #0]
 80203ec:	e048      	b.n	8020480 <USB_EPStartXfer+0x694>
 80203ee:	1d7b      	adds	r3, r7, #5
 80203f0:	33ff      	adds	r3, #255	@ 0xff
 80203f2:	681b      	ldr	r3, [r3, #0]
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	d108      	bne.n	802040a <USB_EPStartXfer+0x61e>
 80203f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80203fa:	881b      	ldrh	r3, [r3, #0]
 80203fc:	b29b      	uxth	r3, r3
 80203fe:	4a4e      	ldr	r2, [pc, #312]	@ (8020538 <USB_EPStartXfer+0x74c>)
 8020400:	4313      	orrs	r3, r2
 8020402:	b29a      	uxth	r2, r3
 8020404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020406:	801a      	strh	r2, [r3, #0]
 8020408:	e03a      	b.n	8020480 <USB_EPStartXfer+0x694>
 802040a:	1d7b      	adds	r3, r7, #5
 802040c:	33ff      	adds	r3, #255	@ 0xff
 802040e:	681b      	ldr	r3, [r3, #0]
 8020410:	085b      	lsrs	r3, r3, #1
 8020412:	21f4      	movs	r1, #244	@ 0xf4
 8020414:	187a      	adds	r2, r7, r1
 8020416:	6013      	str	r3, [r2, #0]
 8020418:	1d7b      	adds	r3, r7, #5
 802041a:	33ff      	adds	r3, #255	@ 0xff
 802041c:	681b      	ldr	r3, [r3, #0]
 802041e:	2201      	movs	r2, #1
 8020420:	4013      	ands	r3, r2
 8020422:	d004      	beq.n	802042e <USB_EPStartXfer+0x642>
 8020424:	187b      	adds	r3, r7, r1
 8020426:	681b      	ldr	r3, [r3, #0]
 8020428:	3301      	adds	r3, #1
 802042a:	187a      	adds	r2, r7, r1
 802042c:	6013      	str	r3, [r2, #0]
 802042e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020430:	881b      	ldrh	r3, [r3, #0]
 8020432:	b29a      	uxth	r2, r3
 8020434:	23f4      	movs	r3, #244	@ 0xf4
 8020436:	18fb      	adds	r3, r7, r3
 8020438:	681b      	ldr	r3, [r3, #0]
 802043a:	b29b      	uxth	r3, r3
 802043c:	029b      	lsls	r3, r3, #10
 802043e:	b29b      	uxth	r3, r3
 8020440:	4313      	orrs	r3, r2
 8020442:	b29a      	uxth	r2, r3
 8020444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020446:	801a      	strh	r2, [r3, #0]
 8020448:	e01a      	b.n	8020480 <USB_EPStartXfer+0x694>
 802044a:	683b      	ldr	r3, [r7, #0]
 802044c:	785b      	ldrb	r3, [r3, #1]
 802044e:	2b01      	cmp	r3, #1
 8020450:	d116      	bne.n	8020480 <USB_EPStartXfer+0x694>
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	2250      	movs	r2, #80	@ 0x50
 8020456:	5a9b      	ldrh	r3, [r3, r2]
 8020458:	b29b      	uxth	r3, r3
 802045a:	001a      	movs	r2, r3
 802045c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802045e:	189b      	adds	r3, r3, r2
 8020460:	643b      	str	r3, [r7, #64]	@ 0x40
 8020462:	683b      	ldr	r3, [r7, #0]
 8020464:	781b      	ldrb	r3, [r3, #0]
 8020466:	00da      	lsls	r2, r3, #3
 8020468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802046a:	18d3      	adds	r3, r2, r3
 802046c:	4a33      	ldr	r2, [pc, #204]	@ (802053c <USB_EPStartXfer+0x750>)
 802046e:	4694      	mov	ip, r2
 8020470:	4463      	add	r3, ip
 8020472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020474:	1d7b      	adds	r3, r7, #5
 8020476:	33ff      	adds	r3, #255	@ 0xff
 8020478:	681b      	ldr	r3, [r3, #0]
 802047a:	b29a      	uxth	r2, r3
 802047c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802047e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8020480:	2076      	movs	r0, #118	@ 0x76
 8020482:	183b      	adds	r3, r7, r0
 8020484:	683a      	ldr	r2, [r7, #0]
 8020486:	8952      	ldrh	r2, [r2, #10]
 8020488:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802048a:	683b      	ldr	r3, [r7, #0]
 802048c:	6959      	ldr	r1, [r3, #20]
 802048e:	1d7b      	adds	r3, r7, #5
 8020490:	33ff      	adds	r3, #255	@ 0xff
 8020492:	681b      	ldr	r3, [r3, #0]
 8020494:	b29c      	uxth	r4, r3
 8020496:	183b      	adds	r3, r7, r0
 8020498:	881a      	ldrh	r2, [r3, #0]
 802049a:	6878      	ldr	r0, [r7, #4]
 802049c:	0023      	movs	r3, r4
 802049e:	f000 ff17 	bl	80212d0 <USB_WritePMA>
 80204a2:	e1b6      	b.n	8020812 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80204a4:	683b      	ldr	r3, [r7, #0]
 80204a6:	6a1b      	ldr	r3, [r3, #32]
 80204a8:	1d7a      	adds	r2, r7, #5
 80204aa:	32ff      	adds	r2, #255	@ 0xff
 80204ac:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80204ae:	687a      	ldr	r2, [r7, #4]
 80204b0:	683b      	ldr	r3, [r7, #0]
 80204b2:	781b      	ldrb	r3, [r3, #0]
 80204b4:	009b      	lsls	r3, r3, #2
 80204b6:	18d3      	adds	r3, r2, r3
 80204b8:	881b      	ldrh	r3, [r3, #0]
 80204ba:	b29a      	uxth	r2, r3
 80204bc:	2062      	movs	r0, #98	@ 0x62
 80204be:	183b      	adds	r3, r7, r0
 80204c0:	491f      	ldr	r1, [pc, #124]	@ (8020540 <USB_EPStartXfer+0x754>)
 80204c2:	400a      	ands	r2, r1
 80204c4:	801a      	strh	r2, [r3, #0]
 80204c6:	687a      	ldr	r2, [r7, #4]
 80204c8:	683b      	ldr	r3, [r7, #0]
 80204ca:	781b      	ldrb	r3, [r3, #0]
 80204cc:	009b      	lsls	r3, r3, #2
 80204ce:	18d3      	adds	r3, r2, r3
 80204d0:	183a      	adds	r2, r7, r0
 80204d2:	8812      	ldrh	r2, [r2, #0]
 80204d4:	491b      	ldr	r1, [pc, #108]	@ (8020544 <USB_EPStartXfer+0x758>)
 80204d6:	430a      	orrs	r2, r1
 80204d8:	b292      	uxth	r2, r2
 80204da:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	2250      	movs	r2, #80	@ 0x50
 80204e4:	5a9b      	ldrh	r3, [r3, r2]
 80204e6:	b29b      	uxth	r3, r3
 80204e8:	001a      	movs	r2, r3
 80204ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80204ec:	189b      	adds	r3, r3, r2
 80204ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80204f0:	683b      	ldr	r3, [r7, #0]
 80204f2:	781b      	ldrb	r3, [r3, #0]
 80204f4:	00da      	lsls	r2, r3, #3
 80204f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80204f8:	18d3      	adds	r3, r2, r3
 80204fa:	4a0e      	ldr	r2, [pc, #56]	@ (8020534 <USB_EPStartXfer+0x748>)
 80204fc:	4694      	mov	ip, r2
 80204fe:	4463      	add	r3, ip
 8020500:	65bb      	str	r3, [r7, #88]	@ 0x58
 8020502:	1d7b      	adds	r3, r7, #5
 8020504:	33ff      	adds	r3, #255	@ 0xff
 8020506:	681b      	ldr	r3, [r3, #0]
 8020508:	b29a      	uxth	r2, r3
 802050a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802050c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 802050e:	2076      	movs	r0, #118	@ 0x76
 8020510:	183b      	adds	r3, r7, r0
 8020512:	683a      	ldr	r2, [r7, #0]
 8020514:	8912      	ldrh	r2, [r2, #8]
 8020516:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020518:	683b      	ldr	r3, [r7, #0]
 802051a:	6959      	ldr	r1, [r3, #20]
 802051c:	1d7b      	adds	r3, r7, #5
 802051e:	33ff      	adds	r3, #255	@ 0xff
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	b29c      	uxth	r4, r3
 8020524:	183b      	adds	r3, r7, r0
 8020526:	881a      	ldrh	r2, [r3, #0]
 8020528:	6878      	ldr	r0, [r7, #4]
 802052a:	0023      	movs	r3, r4
 802052c:	f000 fed0 	bl	80212d0 <USB_WritePMA>
 8020530:	e16f      	b.n	8020812 <USB_EPStartXfer+0xa26>
 8020532:	46c0      	nop			@ (mov r8, r8)
 8020534:	00000402 	.word	0x00000402
 8020538:	ffff8000 	.word	0xffff8000
 802053c:	00000406 	.word	0x00000406
 8020540:	ffff8e8f 	.word	0xffff8e8f
 8020544:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8020548:	683b      	ldr	r3, [r7, #0]
 802054a:	6a1a      	ldr	r2, [r3, #32]
 802054c:	1d7b      	adds	r3, r7, #5
 802054e:	33ff      	adds	r3, #255	@ 0xff
 8020550:	681b      	ldr	r3, [r3, #0]
 8020552:	1ad2      	subs	r2, r2, r3
 8020554:	683b      	ldr	r3, [r7, #0]
 8020556:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8020558:	687a      	ldr	r2, [r7, #4]
 802055a:	683b      	ldr	r3, [r7, #0]
 802055c:	781b      	ldrb	r3, [r3, #0]
 802055e:	009b      	lsls	r3, r3, #2
 8020560:	18d3      	adds	r3, r2, r3
 8020562:	881b      	ldrh	r3, [r3, #0]
 8020564:	b29b      	uxth	r3, r3
 8020566:	001a      	movs	r2, r3
 8020568:	2340      	movs	r3, #64	@ 0x40
 802056a:	4013      	ands	r3, r2
 802056c:	d100      	bne.n	8020570 <USB_EPStartXfer+0x784>
 802056e:	e0a4      	b.n	80206ba <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	673b      	str	r3, [r7, #112]	@ 0x70
 8020574:	683b      	ldr	r3, [r7, #0]
 8020576:	785b      	ldrb	r3, [r3, #1]
 8020578:	2b00      	cmp	r3, #0
 802057a:	d000      	beq.n	802057e <USB_EPStartXfer+0x792>
 802057c:	e070      	b.n	8020660 <USB_EPStartXfer+0x874>
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	2250      	movs	r2, #80	@ 0x50
 8020586:	5a9b      	ldrh	r3, [r3, r2]
 8020588:	b29b      	uxth	r3, r3
 802058a:	001a      	movs	r2, r3
 802058c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802058e:	189b      	adds	r3, r3, r2
 8020590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020592:	683b      	ldr	r3, [r7, #0]
 8020594:	781b      	ldrb	r3, [r3, #0]
 8020596:	00da      	lsls	r2, r3, #3
 8020598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802059a:	18d3      	adds	r3, r2, r3
 802059c:	4abc      	ldr	r2, [pc, #752]	@ (8020890 <USB_EPStartXfer+0xaa4>)
 802059e:	4694      	mov	ip, r2
 80205a0:	4463      	add	r3, ip
 80205a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80205a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80205a6:	881b      	ldrh	r3, [r3, #0]
 80205a8:	b29b      	uxth	r3, r3
 80205aa:	059b      	lsls	r3, r3, #22
 80205ac:	0d9b      	lsrs	r3, r3, #22
 80205ae:	b29a      	uxth	r2, r3
 80205b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80205b2:	801a      	strh	r2, [r3, #0]
 80205b4:	1d7b      	adds	r3, r7, #5
 80205b6:	33ff      	adds	r3, #255	@ 0xff
 80205b8:	681b      	ldr	r3, [r3, #0]
 80205ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80205bc:	d922      	bls.n	8020604 <USB_EPStartXfer+0x818>
 80205be:	1d7b      	adds	r3, r7, #5
 80205c0:	33ff      	adds	r3, #255	@ 0xff
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	095b      	lsrs	r3, r3, #5
 80205c6:	21f0      	movs	r1, #240	@ 0xf0
 80205c8:	187a      	adds	r2, r7, r1
 80205ca:	6013      	str	r3, [r2, #0]
 80205cc:	1d7b      	adds	r3, r7, #5
 80205ce:	33ff      	adds	r3, #255	@ 0xff
 80205d0:	681b      	ldr	r3, [r3, #0]
 80205d2:	221f      	movs	r2, #31
 80205d4:	4013      	ands	r3, r2
 80205d6:	d104      	bne.n	80205e2 <USB_EPStartXfer+0x7f6>
 80205d8:	187b      	adds	r3, r7, r1
 80205da:	681b      	ldr	r3, [r3, #0]
 80205dc:	3b01      	subs	r3, #1
 80205de:	187a      	adds	r2, r7, r1
 80205e0:	6013      	str	r3, [r2, #0]
 80205e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80205e4:	881b      	ldrh	r3, [r3, #0]
 80205e6:	b29a      	uxth	r2, r3
 80205e8:	23f0      	movs	r3, #240	@ 0xf0
 80205ea:	18fb      	adds	r3, r7, r3
 80205ec:	681b      	ldr	r3, [r3, #0]
 80205ee:	b29b      	uxth	r3, r3
 80205f0:	029b      	lsls	r3, r3, #10
 80205f2:	b29b      	uxth	r3, r3
 80205f4:	4313      	orrs	r3, r2
 80205f6:	b29b      	uxth	r3, r3
 80205f8:	4aa6      	ldr	r2, [pc, #664]	@ (8020894 <USB_EPStartXfer+0xaa8>)
 80205fa:	4313      	orrs	r3, r2
 80205fc:	b29a      	uxth	r2, r3
 80205fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020600:	801a      	strh	r2, [r3, #0]
 8020602:	e048      	b.n	8020696 <USB_EPStartXfer+0x8aa>
 8020604:	1d7b      	adds	r3, r7, #5
 8020606:	33ff      	adds	r3, #255	@ 0xff
 8020608:	681b      	ldr	r3, [r3, #0]
 802060a:	2b00      	cmp	r3, #0
 802060c:	d108      	bne.n	8020620 <USB_EPStartXfer+0x834>
 802060e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020610:	881b      	ldrh	r3, [r3, #0]
 8020612:	b29b      	uxth	r3, r3
 8020614:	4a9f      	ldr	r2, [pc, #636]	@ (8020894 <USB_EPStartXfer+0xaa8>)
 8020616:	4313      	orrs	r3, r2
 8020618:	b29a      	uxth	r2, r3
 802061a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802061c:	801a      	strh	r2, [r3, #0]
 802061e:	e03a      	b.n	8020696 <USB_EPStartXfer+0x8aa>
 8020620:	1d7b      	adds	r3, r7, #5
 8020622:	33ff      	adds	r3, #255	@ 0xff
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	085b      	lsrs	r3, r3, #1
 8020628:	21f0      	movs	r1, #240	@ 0xf0
 802062a:	187a      	adds	r2, r7, r1
 802062c:	6013      	str	r3, [r2, #0]
 802062e:	1d7b      	adds	r3, r7, #5
 8020630:	33ff      	adds	r3, #255	@ 0xff
 8020632:	681b      	ldr	r3, [r3, #0]
 8020634:	2201      	movs	r2, #1
 8020636:	4013      	ands	r3, r2
 8020638:	d004      	beq.n	8020644 <USB_EPStartXfer+0x858>
 802063a:	187b      	adds	r3, r7, r1
 802063c:	681b      	ldr	r3, [r3, #0]
 802063e:	3301      	adds	r3, #1
 8020640:	187a      	adds	r2, r7, r1
 8020642:	6013      	str	r3, [r2, #0]
 8020644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020646:	881b      	ldrh	r3, [r3, #0]
 8020648:	b29a      	uxth	r2, r3
 802064a:	23f0      	movs	r3, #240	@ 0xf0
 802064c:	18fb      	adds	r3, r7, r3
 802064e:	681b      	ldr	r3, [r3, #0]
 8020650:	b29b      	uxth	r3, r3
 8020652:	029b      	lsls	r3, r3, #10
 8020654:	b29b      	uxth	r3, r3
 8020656:	4313      	orrs	r3, r2
 8020658:	b29a      	uxth	r2, r3
 802065a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802065c:	801a      	strh	r2, [r3, #0]
 802065e:	e01a      	b.n	8020696 <USB_EPStartXfer+0x8aa>
 8020660:	683b      	ldr	r3, [r7, #0]
 8020662:	785b      	ldrb	r3, [r3, #1]
 8020664:	2b01      	cmp	r3, #1
 8020666:	d116      	bne.n	8020696 <USB_EPStartXfer+0x8aa>
 8020668:	687b      	ldr	r3, [r7, #4]
 802066a:	2250      	movs	r2, #80	@ 0x50
 802066c:	5a9b      	ldrh	r3, [r3, r2]
 802066e:	b29b      	uxth	r3, r3
 8020670:	001a      	movs	r2, r3
 8020672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020674:	189b      	adds	r3, r3, r2
 8020676:	673b      	str	r3, [r7, #112]	@ 0x70
 8020678:	683b      	ldr	r3, [r7, #0]
 802067a:	781b      	ldrb	r3, [r3, #0]
 802067c:	00da      	lsls	r2, r3, #3
 802067e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020680:	18d3      	adds	r3, r2, r3
 8020682:	4a83      	ldr	r2, [pc, #524]	@ (8020890 <USB_EPStartXfer+0xaa4>)
 8020684:	4694      	mov	ip, r2
 8020686:	4463      	add	r3, ip
 8020688:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802068a:	1d7b      	adds	r3, r7, #5
 802068c:	33ff      	adds	r3, #255	@ 0xff
 802068e:	681b      	ldr	r3, [r3, #0]
 8020690:	b29a      	uxth	r2, r3
 8020692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020694:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8020696:	2076      	movs	r0, #118	@ 0x76
 8020698:	183b      	adds	r3, r7, r0
 802069a:	683a      	ldr	r2, [r7, #0]
 802069c:	8952      	ldrh	r2, [r2, #10]
 802069e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80206a0:	683b      	ldr	r3, [r7, #0]
 80206a2:	6959      	ldr	r1, [r3, #20]
 80206a4:	1d7b      	adds	r3, r7, #5
 80206a6:	33ff      	adds	r3, #255	@ 0xff
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	b29c      	uxth	r4, r3
 80206ac:	183b      	adds	r3, r7, r0
 80206ae:	881a      	ldrh	r2, [r3, #0]
 80206b0:	6878      	ldr	r0, [r7, #4]
 80206b2:	0023      	movs	r3, r4
 80206b4:	f000 fe0c 	bl	80212d0 <USB_WritePMA>
 80206b8:	e0ab      	b.n	8020812 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80206ba:	683b      	ldr	r3, [r7, #0]
 80206bc:	785b      	ldrb	r3, [r3, #1]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d000      	beq.n	80206c4 <USB_EPStartXfer+0x8d8>
 80206c2:	e070      	b.n	80207a6 <USB_EPStartXfer+0x9ba>
 80206c4:	687b      	ldr	r3, [r7, #4]
 80206c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	2250      	movs	r2, #80	@ 0x50
 80206cc:	5a9b      	ldrh	r3, [r3, r2]
 80206ce:	b29b      	uxth	r3, r3
 80206d0:	001a      	movs	r2, r3
 80206d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80206d4:	189b      	adds	r3, r3, r2
 80206d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80206d8:	683b      	ldr	r3, [r7, #0]
 80206da:	781b      	ldrb	r3, [r3, #0]
 80206dc:	00da      	lsls	r2, r3, #3
 80206de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80206e0:	18d3      	adds	r3, r2, r3
 80206e2:	4a6d      	ldr	r2, [pc, #436]	@ (8020898 <USB_EPStartXfer+0xaac>)
 80206e4:	4694      	mov	ip, r2
 80206e6:	4463      	add	r3, ip
 80206e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80206ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80206ec:	881b      	ldrh	r3, [r3, #0]
 80206ee:	b29b      	uxth	r3, r3
 80206f0:	059b      	lsls	r3, r3, #22
 80206f2:	0d9b      	lsrs	r3, r3, #22
 80206f4:	b29a      	uxth	r2, r3
 80206f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80206f8:	801a      	strh	r2, [r3, #0]
 80206fa:	1d7b      	adds	r3, r7, #5
 80206fc:	33ff      	adds	r3, #255	@ 0xff
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	2b3e      	cmp	r3, #62	@ 0x3e
 8020702:	d922      	bls.n	802074a <USB_EPStartXfer+0x95e>
 8020704:	1d7b      	adds	r3, r7, #5
 8020706:	33ff      	adds	r3, #255	@ 0xff
 8020708:	681b      	ldr	r3, [r3, #0]
 802070a:	095b      	lsrs	r3, r3, #5
 802070c:	21ec      	movs	r1, #236	@ 0xec
 802070e:	187a      	adds	r2, r7, r1
 8020710:	6013      	str	r3, [r2, #0]
 8020712:	1d7b      	adds	r3, r7, #5
 8020714:	33ff      	adds	r3, #255	@ 0xff
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	221f      	movs	r2, #31
 802071a:	4013      	ands	r3, r2
 802071c:	d104      	bne.n	8020728 <USB_EPStartXfer+0x93c>
 802071e:	187b      	adds	r3, r7, r1
 8020720:	681b      	ldr	r3, [r3, #0]
 8020722:	3b01      	subs	r3, #1
 8020724:	187a      	adds	r2, r7, r1
 8020726:	6013      	str	r3, [r2, #0]
 8020728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802072a:	881b      	ldrh	r3, [r3, #0]
 802072c:	b29a      	uxth	r2, r3
 802072e:	23ec      	movs	r3, #236	@ 0xec
 8020730:	18fb      	adds	r3, r7, r3
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	b29b      	uxth	r3, r3
 8020736:	029b      	lsls	r3, r3, #10
 8020738:	b29b      	uxth	r3, r3
 802073a:	4313      	orrs	r3, r2
 802073c:	b29b      	uxth	r3, r3
 802073e:	4a55      	ldr	r2, [pc, #340]	@ (8020894 <USB_EPStartXfer+0xaa8>)
 8020740:	4313      	orrs	r3, r2
 8020742:	b29a      	uxth	r2, r3
 8020744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020746:	801a      	strh	r2, [r3, #0]
 8020748:	e052      	b.n	80207f0 <USB_EPStartXfer+0xa04>
 802074a:	1d7b      	adds	r3, r7, #5
 802074c:	33ff      	adds	r3, #255	@ 0xff
 802074e:	681b      	ldr	r3, [r3, #0]
 8020750:	2b00      	cmp	r3, #0
 8020752:	d108      	bne.n	8020766 <USB_EPStartXfer+0x97a>
 8020754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020756:	881b      	ldrh	r3, [r3, #0]
 8020758:	b29b      	uxth	r3, r3
 802075a:	4a4e      	ldr	r2, [pc, #312]	@ (8020894 <USB_EPStartXfer+0xaa8>)
 802075c:	4313      	orrs	r3, r2
 802075e:	b29a      	uxth	r2, r3
 8020760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020762:	801a      	strh	r2, [r3, #0]
 8020764:	e044      	b.n	80207f0 <USB_EPStartXfer+0xa04>
 8020766:	1d7b      	adds	r3, r7, #5
 8020768:	33ff      	adds	r3, #255	@ 0xff
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	085b      	lsrs	r3, r3, #1
 802076e:	21ec      	movs	r1, #236	@ 0xec
 8020770:	187a      	adds	r2, r7, r1
 8020772:	6013      	str	r3, [r2, #0]
 8020774:	1d7b      	adds	r3, r7, #5
 8020776:	33ff      	adds	r3, #255	@ 0xff
 8020778:	681b      	ldr	r3, [r3, #0]
 802077a:	2201      	movs	r2, #1
 802077c:	4013      	ands	r3, r2
 802077e:	d004      	beq.n	802078a <USB_EPStartXfer+0x99e>
 8020780:	187b      	adds	r3, r7, r1
 8020782:	681b      	ldr	r3, [r3, #0]
 8020784:	3301      	adds	r3, #1
 8020786:	187a      	adds	r2, r7, r1
 8020788:	6013      	str	r3, [r2, #0]
 802078a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802078c:	881b      	ldrh	r3, [r3, #0]
 802078e:	b29a      	uxth	r2, r3
 8020790:	23ec      	movs	r3, #236	@ 0xec
 8020792:	18fb      	adds	r3, r7, r3
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	b29b      	uxth	r3, r3
 8020798:	029b      	lsls	r3, r3, #10
 802079a:	b29b      	uxth	r3, r3
 802079c:	4313      	orrs	r3, r2
 802079e:	b29a      	uxth	r2, r3
 80207a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80207a2:	801a      	strh	r2, [r3, #0]
 80207a4:	e024      	b.n	80207f0 <USB_EPStartXfer+0xa04>
 80207a6:	683b      	ldr	r3, [r7, #0]
 80207a8:	785b      	ldrb	r3, [r3, #1]
 80207aa:	2b01      	cmp	r3, #1
 80207ac:	d120      	bne.n	80207f0 <USB_EPStartXfer+0xa04>
 80207ae:	687b      	ldr	r3, [r7, #4]
 80207b0:	2184      	movs	r1, #132	@ 0x84
 80207b2:	187a      	adds	r2, r7, r1
 80207b4:	6013      	str	r3, [r2, #0]
 80207b6:	687b      	ldr	r3, [r7, #4]
 80207b8:	2250      	movs	r2, #80	@ 0x50
 80207ba:	5a9b      	ldrh	r3, [r3, r2]
 80207bc:	b29b      	uxth	r3, r3
 80207be:	001a      	movs	r2, r3
 80207c0:	187b      	adds	r3, r7, r1
 80207c2:	681b      	ldr	r3, [r3, #0]
 80207c4:	189b      	adds	r3, r3, r2
 80207c6:	187a      	adds	r2, r7, r1
 80207c8:	6013      	str	r3, [r2, #0]
 80207ca:	683b      	ldr	r3, [r7, #0]
 80207cc:	781b      	ldrb	r3, [r3, #0]
 80207ce:	00da      	lsls	r2, r3, #3
 80207d0:	187b      	adds	r3, r7, r1
 80207d2:	681b      	ldr	r3, [r3, #0]
 80207d4:	18d3      	adds	r3, r2, r3
 80207d6:	4a30      	ldr	r2, [pc, #192]	@ (8020898 <USB_EPStartXfer+0xaac>)
 80207d8:	4694      	mov	ip, r2
 80207da:	4463      	add	r3, ip
 80207dc:	2180      	movs	r1, #128	@ 0x80
 80207de:	187a      	adds	r2, r7, r1
 80207e0:	6013      	str	r3, [r2, #0]
 80207e2:	1d7b      	adds	r3, r7, #5
 80207e4:	33ff      	adds	r3, #255	@ 0xff
 80207e6:	681b      	ldr	r3, [r3, #0]
 80207e8:	b29a      	uxth	r2, r3
 80207ea:	187b      	adds	r3, r7, r1
 80207ec:	681b      	ldr	r3, [r3, #0]
 80207ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80207f0:	2076      	movs	r0, #118	@ 0x76
 80207f2:	183b      	adds	r3, r7, r0
 80207f4:	683a      	ldr	r2, [r7, #0]
 80207f6:	8912      	ldrh	r2, [r2, #8]
 80207f8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80207fa:	683b      	ldr	r3, [r7, #0]
 80207fc:	6959      	ldr	r1, [r3, #20]
 80207fe:	1d7b      	adds	r3, r7, #5
 8020800:	33ff      	adds	r3, #255	@ 0xff
 8020802:	681b      	ldr	r3, [r3, #0]
 8020804:	b29c      	uxth	r4, r3
 8020806:	183b      	adds	r3, r7, r0
 8020808:	881a      	ldrh	r2, [r3, #0]
 802080a:	6878      	ldr	r0, [r7, #4]
 802080c:	0023      	movs	r3, r4
 802080e:	f000 fd5f 	bl	80212d0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8020812:	687a      	ldr	r2, [r7, #4]
 8020814:	683b      	ldr	r3, [r7, #0]
 8020816:	781b      	ldrb	r3, [r3, #0]
 8020818:	009b      	lsls	r3, r3, #2
 802081a:	18d3      	adds	r3, r2, r3
 802081c:	881b      	ldrh	r3, [r3, #0]
 802081e:	b29a      	uxth	r2, r3
 8020820:	200a      	movs	r0, #10
 8020822:	183b      	adds	r3, r7, r0
 8020824:	491d      	ldr	r1, [pc, #116]	@ (802089c <USB_EPStartXfer+0xab0>)
 8020826:	400a      	ands	r2, r1
 8020828:	801a      	strh	r2, [r3, #0]
 802082a:	183b      	adds	r3, r7, r0
 802082c:	183a      	adds	r2, r7, r0
 802082e:	8812      	ldrh	r2, [r2, #0]
 8020830:	2110      	movs	r1, #16
 8020832:	404a      	eors	r2, r1
 8020834:	801a      	strh	r2, [r3, #0]
 8020836:	183b      	adds	r3, r7, r0
 8020838:	183a      	adds	r2, r7, r0
 802083a:	8812      	ldrh	r2, [r2, #0]
 802083c:	2120      	movs	r1, #32
 802083e:	404a      	eors	r2, r1
 8020840:	801a      	strh	r2, [r3, #0]
 8020842:	687a      	ldr	r2, [r7, #4]
 8020844:	683b      	ldr	r3, [r7, #0]
 8020846:	781b      	ldrb	r3, [r3, #0]
 8020848:	009b      	lsls	r3, r3, #2
 802084a:	18d3      	adds	r3, r2, r3
 802084c:	183a      	adds	r2, r7, r0
 802084e:	8812      	ldrh	r2, [r2, #0]
 8020850:	4913      	ldr	r1, [pc, #76]	@ (80208a0 <USB_EPStartXfer+0xab4>)
 8020852:	430a      	orrs	r2, r1
 8020854:	b292      	uxth	r2, r2
 8020856:	801a      	strh	r2, [r3, #0]
 8020858:	f000 fbf4 	bl	8021044 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 802085c:	683b      	ldr	r3, [r7, #0]
 802085e:	7b1b      	ldrb	r3, [r3, #12]
 8020860:	2b00      	cmp	r3, #0
 8020862:	d000      	beq.n	8020866 <USB_EPStartXfer+0xa7a>
 8020864:	e0a9      	b.n	80209ba <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8020866:	683b      	ldr	r3, [r7, #0]
 8020868:	699a      	ldr	r2, [r3, #24]
 802086a:	683b      	ldr	r3, [r7, #0]
 802086c:	691b      	ldr	r3, [r3, #16]
 802086e:	429a      	cmp	r2, r3
 8020870:	d918      	bls.n	80208a4 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8020872:	683b      	ldr	r3, [r7, #0]
 8020874:	691b      	ldr	r3, [r3, #16]
 8020876:	1d7a      	adds	r2, r7, #5
 8020878:	32ff      	adds	r2, #255	@ 0xff
 802087a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 802087c:	683b      	ldr	r3, [r7, #0]
 802087e:	699a      	ldr	r2, [r3, #24]
 8020880:	1d7b      	adds	r3, r7, #5
 8020882:	33ff      	adds	r3, #255	@ 0xff
 8020884:	681b      	ldr	r3, [r3, #0]
 8020886:	1ad2      	subs	r2, r2, r3
 8020888:	683b      	ldr	r3, [r7, #0]
 802088a:	619a      	str	r2, [r3, #24]
 802088c:	e012      	b.n	80208b4 <USB_EPStartXfer+0xac8>
 802088e:	46c0      	nop			@ (mov r8, r8)
 8020890:	00000406 	.word	0x00000406
 8020894:	ffff8000 	.word	0xffff8000
 8020898:	00000402 	.word	0x00000402
 802089c:	ffff8fbf 	.word	0xffff8fbf
 80208a0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80208a4:	683b      	ldr	r3, [r7, #0]
 80208a6:	699b      	ldr	r3, [r3, #24]
 80208a8:	1d7a      	adds	r2, r7, #5
 80208aa:	32ff      	adds	r2, #255	@ 0xff
 80208ac:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80208ae:	683b      	ldr	r3, [r7, #0]
 80208b0:	2200      	movs	r2, #0
 80208b2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	2190      	movs	r1, #144	@ 0x90
 80208b8:	187a      	adds	r2, r7, r1
 80208ba:	6013      	str	r3, [r2, #0]
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	2250      	movs	r2, #80	@ 0x50
 80208c0:	5a9b      	ldrh	r3, [r3, r2]
 80208c2:	b29b      	uxth	r3, r3
 80208c4:	001a      	movs	r2, r3
 80208c6:	187b      	adds	r3, r7, r1
 80208c8:	681b      	ldr	r3, [r3, #0]
 80208ca:	189b      	adds	r3, r3, r2
 80208cc:	187a      	adds	r2, r7, r1
 80208ce:	6013      	str	r3, [r2, #0]
 80208d0:	683b      	ldr	r3, [r7, #0]
 80208d2:	781b      	ldrb	r3, [r3, #0]
 80208d4:	00da      	lsls	r2, r3, #3
 80208d6:	187b      	adds	r3, r7, r1
 80208d8:	681b      	ldr	r3, [r3, #0]
 80208da:	18d3      	adds	r3, r2, r3
 80208dc:	4acf      	ldr	r2, [pc, #828]	@ (8020c1c <USB_EPStartXfer+0xe30>)
 80208de:	4694      	mov	ip, r2
 80208e0:	4463      	add	r3, ip
 80208e2:	218c      	movs	r1, #140	@ 0x8c
 80208e4:	187a      	adds	r2, r7, r1
 80208e6:	6013      	str	r3, [r2, #0]
 80208e8:	187b      	adds	r3, r7, r1
 80208ea:	681b      	ldr	r3, [r3, #0]
 80208ec:	881b      	ldrh	r3, [r3, #0]
 80208ee:	b29b      	uxth	r3, r3
 80208f0:	059b      	lsls	r3, r3, #22
 80208f2:	0d9b      	lsrs	r3, r3, #22
 80208f4:	b29a      	uxth	r2, r3
 80208f6:	187b      	adds	r3, r7, r1
 80208f8:	681b      	ldr	r3, [r3, #0]
 80208fa:	801a      	strh	r2, [r3, #0]
 80208fc:	1d7b      	adds	r3, r7, #5
 80208fe:	33ff      	adds	r3, #255	@ 0xff
 8020900:	681b      	ldr	r3, [r3, #0]
 8020902:	2b3e      	cmp	r3, #62	@ 0x3e
 8020904:	d925      	bls.n	8020952 <USB_EPStartXfer+0xb66>
 8020906:	1d7b      	adds	r3, r7, #5
 8020908:	33ff      	adds	r3, #255	@ 0xff
 802090a:	681b      	ldr	r3, [r3, #0]
 802090c:	095b      	lsrs	r3, r3, #5
 802090e:	21e8      	movs	r1, #232	@ 0xe8
 8020910:	187a      	adds	r2, r7, r1
 8020912:	6013      	str	r3, [r2, #0]
 8020914:	1d7b      	adds	r3, r7, #5
 8020916:	33ff      	adds	r3, #255	@ 0xff
 8020918:	681b      	ldr	r3, [r3, #0]
 802091a:	221f      	movs	r2, #31
 802091c:	4013      	ands	r3, r2
 802091e:	d104      	bne.n	802092a <USB_EPStartXfer+0xb3e>
 8020920:	187b      	adds	r3, r7, r1
 8020922:	681b      	ldr	r3, [r3, #0]
 8020924:	3b01      	subs	r3, #1
 8020926:	187a      	adds	r2, r7, r1
 8020928:	6013      	str	r3, [r2, #0]
 802092a:	218c      	movs	r1, #140	@ 0x8c
 802092c:	187b      	adds	r3, r7, r1
 802092e:	681b      	ldr	r3, [r3, #0]
 8020930:	881b      	ldrh	r3, [r3, #0]
 8020932:	b29a      	uxth	r2, r3
 8020934:	23e8      	movs	r3, #232	@ 0xe8
 8020936:	18fb      	adds	r3, r7, r3
 8020938:	681b      	ldr	r3, [r3, #0]
 802093a:	b29b      	uxth	r3, r3
 802093c:	029b      	lsls	r3, r3, #10
 802093e:	b29b      	uxth	r3, r3
 8020940:	4313      	orrs	r3, r2
 8020942:	b29b      	uxth	r3, r3
 8020944:	4ab6      	ldr	r2, [pc, #728]	@ (8020c20 <USB_EPStartXfer+0xe34>)
 8020946:	4313      	orrs	r3, r2
 8020948:	b29a      	uxth	r2, r3
 802094a:	187b      	adds	r3, r7, r1
 802094c:	681b      	ldr	r3, [r3, #0]
 802094e:	801a      	strh	r2, [r3, #0]
 8020950:	e353      	b.n	8020ffa <USB_EPStartXfer+0x120e>
 8020952:	1d7b      	adds	r3, r7, #5
 8020954:	33ff      	adds	r3, #255	@ 0xff
 8020956:	681b      	ldr	r3, [r3, #0]
 8020958:	2b00      	cmp	r3, #0
 802095a:	d10b      	bne.n	8020974 <USB_EPStartXfer+0xb88>
 802095c:	218c      	movs	r1, #140	@ 0x8c
 802095e:	187b      	adds	r3, r7, r1
 8020960:	681b      	ldr	r3, [r3, #0]
 8020962:	881b      	ldrh	r3, [r3, #0]
 8020964:	b29b      	uxth	r3, r3
 8020966:	4aae      	ldr	r2, [pc, #696]	@ (8020c20 <USB_EPStartXfer+0xe34>)
 8020968:	4313      	orrs	r3, r2
 802096a:	b29a      	uxth	r2, r3
 802096c:	187b      	adds	r3, r7, r1
 802096e:	681b      	ldr	r3, [r3, #0]
 8020970:	801a      	strh	r2, [r3, #0]
 8020972:	e342      	b.n	8020ffa <USB_EPStartXfer+0x120e>
 8020974:	1d7b      	adds	r3, r7, #5
 8020976:	33ff      	adds	r3, #255	@ 0xff
 8020978:	681b      	ldr	r3, [r3, #0]
 802097a:	085b      	lsrs	r3, r3, #1
 802097c:	21e8      	movs	r1, #232	@ 0xe8
 802097e:	187a      	adds	r2, r7, r1
 8020980:	6013      	str	r3, [r2, #0]
 8020982:	1d7b      	adds	r3, r7, #5
 8020984:	33ff      	adds	r3, #255	@ 0xff
 8020986:	681b      	ldr	r3, [r3, #0]
 8020988:	2201      	movs	r2, #1
 802098a:	4013      	ands	r3, r2
 802098c:	d004      	beq.n	8020998 <USB_EPStartXfer+0xbac>
 802098e:	187b      	adds	r3, r7, r1
 8020990:	681b      	ldr	r3, [r3, #0]
 8020992:	3301      	adds	r3, #1
 8020994:	187a      	adds	r2, r7, r1
 8020996:	6013      	str	r3, [r2, #0]
 8020998:	218c      	movs	r1, #140	@ 0x8c
 802099a:	187b      	adds	r3, r7, r1
 802099c:	681b      	ldr	r3, [r3, #0]
 802099e:	881b      	ldrh	r3, [r3, #0]
 80209a0:	b29a      	uxth	r2, r3
 80209a2:	23e8      	movs	r3, #232	@ 0xe8
 80209a4:	18fb      	adds	r3, r7, r3
 80209a6:	681b      	ldr	r3, [r3, #0]
 80209a8:	b29b      	uxth	r3, r3
 80209aa:	029b      	lsls	r3, r3, #10
 80209ac:	b29b      	uxth	r3, r3
 80209ae:	4313      	orrs	r3, r2
 80209b0:	b29a      	uxth	r2, r3
 80209b2:	187b      	adds	r3, r7, r1
 80209b4:	681b      	ldr	r3, [r3, #0]
 80209b6:	801a      	strh	r2, [r3, #0]
 80209b8:	e31f      	b.n	8020ffa <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80209ba:	683b      	ldr	r3, [r7, #0]
 80209bc:	78db      	ldrb	r3, [r3, #3]
 80209be:	2b02      	cmp	r3, #2
 80209c0:	d000      	beq.n	80209c4 <USB_EPStartXfer+0xbd8>
 80209c2:	e191      	b.n	8020ce8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80209c4:	683b      	ldr	r3, [r7, #0]
 80209c6:	785b      	ldrb	r3, [r3, #1]
 80209c8:	2b00      	cmp	r3, #0
 80209ca:	d000      	beq.n	80209ce <USB_EPStartXfer+0xbe2>
 80209cc:	e07c      	b.n	8020ac8 <USB_EPStartXfer+0xcdc>
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	21ac      	movs	r1, #172	@ 0xac
 80209d2:	187a      	adds	r2, r7, r1
 80209d4:	6013      	str	r3, [r2, #0]
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	2250      	movs	r2, #80	@ 0x50
 80209da:	5a9b      	ldrh	r3, [r3, r2]
 80209dc:	b29b      	uxth	r3, r3
 80209de:	001a      	movs	r2, r3
 80209e0:	187b      	adds	r3, r7, r1
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	189b      	adds	r3, r3, r2
 80209e6:	187a      	adds	r2, r7, r1
 80209e8:	6013      	str	r3, [r2, #0]
 80209ea:	683b      	ldr	r3, [r7, #0]
 80209ec:	781b      	ldrb	r3, [r3, #0]
 80209ee:	00da      	lsls	r2, r3, #3
 80209f0:	187b      	adds	r3, r7, r1
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	18d3      	adds	r3, r2, r3
 80209f6:	4a8b      	ldr	r2, [pc, #556]	@ (8020c24 <USB_EPStartXfer+0xe38>)
 80209f8:	4694      	mov	ip, r2
 80209fa:	4463      	add	r3, ip
 80209fc:	21a8      	movs	r1, #168	@ 0xa8
 80209fe:	187a      	adds	r2, r7, r1
 8020a00:	6013      	str	r3, [r2, #0]
 8020a02:	187b      	adds	r3, r7, r1
 8020a04:	681b      	ldr	r3, [r3, #0]
 8020a06:	881b      	ldrh	r3, [r3, #0]
 8020a08:	b29b      	uxth	r3, r3
 8020a0a:	059b      	lsls	r3, r3, #22
 8020a0c:	0d9b      	lsrs	r3, r3, #22
 8020a0e:	b29a      	uxth	r2, r3
 8020a10:	187b      	adds	r3, r7, r1
 8020a12:	681b      	ldr	r3, [r3, #0]
 8020a14:	801a      	strh	r2, [r3, #0]
 8020a16:	683b      	ldr	r3, [r7, #0]
 8020a18:	691b      	ldr	r3, [r3, #16]
 8020a1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8020a1c:	d923      	bls.n	8020a66 <USB_EPStartXfer+0xc7a>
 8020a1e:	683b      	ldr	r3, [r7, #0]
 8020a20:	691b      	ldr	r3, [r3, #16]
 8020a22:	095b      	lsrs	r3, r3, #5
 8020a24:	21e4      	movs	r1, #228	@ 0xe4
 8020a26:	187a      	adds	r2, r7, r1
 8020a28:	6013      	str	r3, [r2, #0]
 8020a2a:	683b      	ldr	r3, [r7, #0]
 8020a2c:	691b      	ldr	r3, [r3, #16]
 8020a2e:	221f      	movs	r2, #31
 8020a30:	4013      	ands	r3, r2
 8020a32:	d104      	bne.n	8020a3e <USB_EPStartXfer+0xc52>
 8020a34:	187b      	adds	r3, r7, r1
 8020a36:	681b      	ldr	r3, [r3, #0]
 8020a38:	3b01      	subs	r3, #1
 8020a3a:	187a      	adds	r2, r7, r1
 8020a3c:	6013      	str	r3, [r2, #0]
 8020a3e:	21a8      	movs	r1, #168	@ 0xa8
 8020a40:	187b      	adds	r3, r7, r1
 8020a42:	681b      	ldr	r3, [r3, #0]
 8020a44:	881b      	ldrh	r3, [r3, #0]
 8020a46:	b29a      	uxth	r2, r3
 8020a48:	23e4      	movs	r3, #228	@ 0xe4
 8020a4a:	18fb      	adds	r3, r7, r3
 8020a4c:	681b      	ldr	r3, [r3, #0]
 8020a4e:	b29b      	uxth	r3, r3
 8020a50:	029b      	lsls	r3, r3, #10
 8020a52:	b29b      	uxth	r3, r3
 8020a54:	4313      	orrs	r3, r2
 8020a56:	b29b      	uxth	r3, r3
 8020a58:	4a71      	ldr	r2, [pc, #452]	@ (8020c20 <USB_EPStartXfer+0xe34>)
 8020a5a:	4313      	orrs	r3, r2
 8020a5c:	b29a      	uxth	r2, r3
 8020a5e:	187b      	adds	r3, r7, r1
 8020a60:	681b      	ldr	r3, [r3, #0]
 8020a62:	801a      	strh	r2, [r3, #0]
 8020a64:	e054      	b.n	8020b10 <USB_EPStartXfer+0xd24>
 8020a66:	683b      	ldr	r3, [r7, #0]
 8020a68:	691b      	ldr	r3, [r3, #16]
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	d10b      	bne.n	8020a86 <USB_EPStartXfer+0xc9a>
 8020a6e:	21a8      	movs	r1, #168	@ 0xa8
 8020a70:	187b      	adds	r3, r7, r1
 8020a72:	681b      	ldr	r3, [r3, #0]
 8020a74:	881b      	ldrh	r3, [r3, #0]
 8020a76:	b29b      	uxth	r3, r3
 8020a78:	4a69      	ldr	r2, [pc, #420]	@ (8020c20 <USB_EPStartXfer+0xe34>)
 8020a7a:	4313      	orrs	r3, r2
 8020a7c:	b29a      	uxth	r2, r3
 8020a7e:	187b      	adds	r3, r7, r1
 8020a80:	681b      	ldr	r3, [r3, #0]
 8020a82:	801a      	strh	r2, [r3, #0]
 8020a84:	e044      	b.n	8020b10 <USB_EPStartXfer+0xd24>
 8020a86:	683b      	ldr	r3, [r7, #0]
 8020a88:	691b      	ldr	r3, [r3, #16]
 8020a8a:	085b      	lsrs	r3, r3, #1
 8020a8c:	21e4      	movs	r1, #228	@ 0xe4
 8020a8e:	187a      	adds	r2, r7, r1
 8020a90:	6013      	str	r3, [r2, #0]
 8020a92:	683b      	ldr	r3, [r7, #0]
 8020a94:	691b      	ldr	r3, [r3, #16]
 8020a96:	2201      	movs	r2, #1
 8020a98:	4013      	ands	r3, r2
 8020a9a:	d004      	beq.n	8020aa6 <USB_EPStartXfer+0xcba>
 8020a9c:	187b      	adds	r3, r7, r1
 8020a9e:	681b      	ldr	r3, [r3, #0]
 8020aa0:	3301      	adds	r3, #1
 8020aa2:	187a      	adds	r2, r7, r1
 8020aa4:	6013      	str	r3, [r2, #0]
 8020aa6:	21a8      	movs	r1, #168	@ 0xa8
 8020aa8:	187b      	adds	r3, r7, r1
 8020aaa:	681b      	ldr	r3, [r3, #0]
 8020aac:	881b      	ldrh	r3, [r3, #0]
 8020aae:	b29a      	uxth	r2, r3
 8020ab0:	23e4      	movs	r3, #228	@ 0xe4
 8020ab2:	18fb      	adds	r3, r7, r3
 8020ab4:	681b      	ldr	r3, [r3, #0]
 8020ab6:	b29b      	uxth	r3, r3
 8020ab8:	029b      	lsls	r3, r3, #10
 8020aba:	b29b      	uxth	r3, r3
 8020abc:	4313      	orrs	r3, r2
 8020abe:	b29a      	uxth	r2, r3
 8020ac0:	187b      	adds	r3, r7, r1
 8020ac2:	681b      	ldr	r3, [r3, #0]
 8020ac4:	801a      	strh	r2, [r3, #0]
 8020ac6:	e023      	b.n	8020b10 <USB_EPStartXfer+0xd24>
 8020ac8:	683b      	ldr	r3, [r7, #0]
 8020aca:	785b      	ldrb	r3, [r3, #1]
 8020acc:	2b01      	cmp	r3, #1
 8020ace:	d11f      	bne.n	8020b10 <USB_EPStartXfer+0xd24>
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	21b4      	movs	r1, #180	@ 0xb4
 8020ad4:	187a      	adds	r2, r7, r1
 8020ad6:	6013      	str	r3, [r2, #0]
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	2250      	movs	r2, #80	@ 0x50
 8020adc:	5a9b      	ldrh	r3, [r3, r2]
 8020ade:	b29b      	uxth	r3, r3
 8020ae0:	001a      	movs	r2, r3
 8020ae2:	187b      	adds	r3, r7, r1
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	189b      	adds	r3, r3, r2
 8020ae8:	187a      	adds	r2, r7, r1
 8020aea:	6013      	str	r3, [r2, #0]
 8020aec:	683b      	ldr	r3, [r7, #0]
 8020aee:	781b      	ldrb	r3, [r3, #0]
 8020af0:	00da      	lsls	r2, r3, #3
 8020af2:	187b      	adds	r3, r7, r1
 8020af4:	681b      	ldr	r3, [r3, #0]
 8020af6:	18d3      	adds	r3, r2, r3
 8020af8:	4a4a      	ldr	r2, [pc, #296]	@ (8020c24 <USB_EPStartXfer+0xe38>)
 8020afa:	4694      	mov	ip, r2
 8020afc:	4463      	add	r3, ip
 8020afe:	21b0      	movs	r1, #176	@ 0xb0
 8020b00:	187a      	adds	r2, r7, r1
 8020b02:	6013      	str	r3, [r2, #0]
 8020b04:	683b      	ldr	r3, [r7, #0]
 8020b06:	691b      	ldr	r3, [r3, #16]
 8020b08:	b29a      	uxth	r2, r3
 8020b0a:	187b      	adds	r3, r7, r1
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	801a      	strh	r2, [r3, #0]
 8020b10:	687b      	ldr	r3, [r7, #4]
 8020b12:	22a4      	movs	r2, #164	@ 0xa4
 8020b14:	18ba      	adds	r2, r7, r2
 8020b16:	6013      	str	r3, [r2, #0]
 8020b18:	683b      	ldr	r3, [r7, #0]
 8020b1a:	785b      	ldrb	r3, [r3, #1]
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	d000      	beq.n	8020b22 <USB_EPStartXfer+0xd36>
 8020b20:	e082      	b.n	8020c28 <USB_EPStartXfer+0xe3c>
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	219c      	movs	r1, #156	@ 0x9c
 8020b26:	187a      	adds	r2, r7, r1
 8020b28:	6013      	str	r3, [r2, #0]
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	2250      	movs	r2, #80	@ 0x50
 8020b2e:	5a9b      	ldrh	r3, [r3, r2]
 8020b30:	b29b      	uxth	r3, r3
 8020b32:	001a      	movs	r2, r3
 8020b34:	187b      	adds	r3, r7, r1
 8020b36:	681b      	ldr	r3, [r3, #0]
 8020b38:	189b      	adds	r3, r3, r2
 8020b3a:	187a      	adds	r2, r7, r1
 8020b3c:	6013      	str	r3, [r2, #0]
 8020b3e:	683b      	ldr	r3, [r7, #0]
 8020b40:	781b      	ldrb	r3, [r3, #0]
 8020b42:	00da      	lsls	r2, r3, #3
 8020b44:	187b      	adds	r3, r7, r1
 8020b46:	681b      	ldr	r3, [r3, #0]
 8020b48:	18d3      	adds	r3, r2, r3
 8020b4a:	4a34      	ldr	r2, [pc, #208]	@ (8020c1c <USB_EPStartXfer+0xe30>)
 8020b4c:	4694      	mov	ip, r2
 8020b4e:	4463      	add	r3, ip
 8020b50:	2198      	movs	r1, #152	@ 0x98
 8020b52:	187a      	adds	r2, r7, r1
 8020b54:	6013      	str	r3, [r2, #0]
 8020b56:	187b      	adds	r3, r7, r1
 8020b58:	681b      	ldr	r3, [r3, #0]
 8020b5a:	881b      	ldrh	r3, [r3, #0]
 8020b5c:	b29b      	uxth	r3, r3
 8020b5e:	059b      	lsls	r3, r3, #22
 8020b60:	0d9b      	lsrs	r3, r3, #22
 8020b62:	b29a      	uxth	r2, r3
 8020b64:	187b      	adds	r3, r7, r1
 8020b66:	681b      	ldr	r3, [r3, #0]
 8020b68:	801a      	strh	r2, [r3, #0]
 8020b6a:	683b      	ldr	r3, [r7, #0]
 8020b6c:	691b      	ldr	r3, [r3, #16]
 8020b6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020b70:	d923      	bls.n	8020bba <USB_EPStartXfer+0xdce>
 8020b72:	683b      	ldr	r3, [r7, #0]
 8020b74:	691b      	ldr	r3, [r3, #16]
 8020b76:	095b      	lsrs	r3, r3, #5
 8020b78:	21e0      	movs	r1, #224	@ 0xe0
 8020b7a:	187a      	adds	r2, r7, r1
 8020b7c:	6013      	str	r3, [r2, #0]
 8020b7e:	683b      	ldr	r3, [r7, #0]
 8020b80:	691b      	ldr	r3, [r3, #16]
 8020b82:	221f      	movs	r2, #31
 8020b84:	4013      	ands	r3, r2
 8020b86:	d104      	bne.n	8020b92 <USB_EPStartXfer+0xda6>
 8020b88:	187b      	adds	r3, r7, r1
 8020b8a:	681b      	ldr	r3, [r3, #0]
 8020b8c:	3b01      	subs	r3, #1
 8020b8e:	187a      	adds	r2, r7, r1
 8020b90:	6013      	str	r3, [r2, #0]
 8020b92:	2198      	movs	r1, #152	@ 0x98
 8020b94:	187b      	adds	r3, r7, r1
 8020b96:	681b      	ldr	r3, [r3, #0]
 8020b98:	881b      	ldrh	r3, [r3, #0]
 8020b9a:	b29a      	uxth	r2, r3
 8020b9c:	23e0      	movs	r3, #224	@ 0xe0
 8020b9e:	18fb      	adds	r3, r7, r3
 8020ba0:	681b      	ldr	r3, [r3, #0]
 8020ba2:	b29b      	uxth	r3, r3
 8020ba4:	029b      	lsls	r3, r3, #10
 8020ba6:	b29b      	uxth	r3, r3
 8020ba8:	4313      	orrs	r3, r2
 8020baa:	b29b      	uxth	r3, r3
 8020bac:	4a1c      	ldr	r2, [pc, #112]	@ (8020c20 <USB_EPStartXfer+0xe34>)
 8020bae:	4313      	orrs	r3, r2
 8020bb0:	b29a      	uxth	r2, r3
 8020bb2:	187b      	adds	r3, r7, r1
 8020bb4:	681b      	ldr	r3, [r3, #0]
 8020bb6:	801a      	strh	r2, [r3, #0]
 8020bb8:	e057      	b.n	8020c6a <USB_EPStartXfer+0xe7e>
 8020bba:	683b      	ldr	r3, [r7, #0]
 8020bbc:	691b      	ldr	r3, [r3, #16]
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	d10b      	bne.n	8020bda <USB_EPStartXfer+0xdee>
 8020bc2:	2198      	movs	r1, #152	@ 0x98
 8020bc4:	187b      	adds	r3, r7, r1
 8020bc6:	681b      	ldr	r3, [r3, #0]
 8020bc8:	881b      	ldrh	r3, [r3, #0]
 8020bca:	b29b      	uxth	r3, r3
 8020bcc:	4a14      	ldr	r2, [pc, #80]	@ (8020c20 <USB_EPStartXfer+0xe34>)
 8020bce:	4313      	orrs	r3, r2
 8020bd0:	b29a      	uxth	r2, r3
 8020bd2:	187b      	adds	r3, r7, r1
 8020bd4:	681b      	ldr	r3, [r3, #0]
 8020bd6:	801a      	strh	r2, [r3, #0]
 8020bd8:	e047      	b.n	8020c6a <USB_EPStartXfer+0xe7e>
 8020bda:	683b      	ldr	r3, [r7, #0]
 8020bdc:	691b      	ldr	r3, [r3, #16]
 8020bde:	085b      	lsrs	r3, r3, #1
 8020be0:	21e0      	movs	r1, #224	@ 0xe0
 8020be2:	187a      	adds	r2, r7, r1
 8020be4:	6013      	str	r3, [r2, #0]
 8020be6:	683b      	ldr	r3, [r7, #0]
 8020be8:	691b      	ldr	r3, [r3, #16]
 8020bea:	2201      	movs	r2, #1
 8020bec:	4013      	ands	r3, r2
 8020bee:	d004      	beq.n	8020bfa <USB_EPStartXfer+0xe0e>
 8020bf0:	187b      	adds	r3, r7, r1
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	3301      	adds	r3, #1
 8020bf6:	187a      	adds	r2, r7, r1
 8020bf8:	6013      	str	r3, [r2, #0]
 8020bfa:	2198      	movs	r1, #152	@ 0x98
 8020bfc:	187b      	adds	r3, r7, r1
 8020bfe:	681b      	ldr	r3, [r3, #0]
 8020c00:	881b      	ldrh	r3, [r3, #0]
 8020c02:	b29a      	uxth	r2, r3
 8020c04:	23e0      	movs	r3, #224	@ 0xe0
 8020c06:	18fb      	adds	r3, r7, r3
 8020c08:	681b      	ldr	r3, [r3, #0]
 8020c0a:	b29b      	uxth	r3, r3
 8020c0c:	029b      	lsls	r3, r3, #10
 8020c0e:	b29b      	uxth	r3, r3
 8020c10:	4313      	orrs	r3, r2
 8020c12:	b29a      	uxth	r2, r3
 8020c14:	187b      	adds	r3, r7, r1
 8020c16:	681b      	ldr	r3, [r3, #0]
 8020c18:	801a      	strh	r2, [r3, #0]
 8020c1a:	e026      	b.n	8020c6a <USB_EPStartXfer+0xe7e>
 8020c1c:	00000406 	.word	0x00000406
 8020c20:	ffff8000 	.word	0xffff8000
 8020c24:	00000402 	.word	0x00000402
 8020c28:	683b      	ldr	r3, [r7, #0]
 8020c2a:	785b      	ldrb	r3, [r3, #1]
 8020c2c:	2b01      	cmp	r3, #1
 8020c2e:	d11c      	bne.n	8020c6a <USB_EPStartXfer+0xe7e>
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	2250      	movs	r2, #80	@ 0x50
 8020c34:	5a9b      	ldrh	r3, [r3, r2]
 8020c36:	b29b      	uxth	r3, r3
 8020c38:	001a      	movs	r2, r3
 8020c3a:	21a4      	movs	r1, #164	@ 0xa4
 8020c3c:	187b      	adds	r3, r7, r1
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	189b      	adds	r3, r3, r2
 8020c42:	187a      	adds	r2, r7, r1
 8020c44:	6013      	str	r3, [r2, #0]
 8020c46:	683b      	ldr	r3, [r7, #0]
 8020c48:	781b      	ldrb	r3, [r3, #0]
 8020c4a:	00da      	lsls	r2, r3, #3
 8020c4c:	187b      	adds	r3, r7, r1
 8020c4e:	681b      	ldr	r3, [r3, #0]
 8020c50:	18d3      	adds	r3, r2, r3
 8020c52:	4ad2      	ldr	r2, [pc, #840]	@ (8020f9c <USB_EPStartXfer+0x11b0>)
 8020c54:	4694      	mov	ip, r2
 8020c56:	4463      	add	r3, ip
 8020c58:	21a0      	movs	r1, #160	@ 0xa0
 8020c5a:	187a      	adds	r2, r7, r1
 8020c5c:	6013      	str	r3, [r2, #0]
 8020c5e:	683b      	ldr	r3, [r7, #0]
 8020c60:	691b      	ldr	r3, [r3, #16]
 8020c62:	b29a      	uxth	r2, r3
 8020c64:	187b      	adds	r3, r7, r1
 8020c66:	681b      	ldr	r3, [r3, #0]
 8020c68:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8020c6a:	683b      	ldr	r3, [r7, #0]
 8020c6c:	69db      	ldr	r3, [r3, #28]
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d100      	bne.n	8020c74 <USB_EPStartXfer+0xe88>
 8020c72:	e1c2      	b.n	8020ffa <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020c74:	687a      	ldr	r2, [r7, #4]
 8020c76:	683b      	ldr	r3, [r7, #0]
 8020c78:	781b      	ldrb	r3, [r3, #0]
 8020c7a:	009b      	lsls	r3, r3, #2
 8020c7c:	18d2      	adds	r2, r2, r3
 8020c7e:	2196      	movs	r1, #150	@ 0x96
 8020c80:	187b      	adds	r3, r7, r1
 8020c82:	8812      	ldrh	r2, [r2, #0]
 8020c84:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020c86:	187b      	adds	r3, r7, r1
 8020c88:	881a      	ldrh	r2, [r3, #0]
 8020c8a:	2380      	movs	r3, #128	@ 0x80
 8020c8c:	01db      	lsls	r3, r3, #7
 8020c8e:	4013      	ands	r3, r2
 8020c90:	d004      	beq.n	8020c9c <USB_EPStartXfer+0xeb0>
 8020c92:	187b      	adds	r3, r7, r1
 8020c94:	881b      	ldrh	r3, [r3, #0]
 8020c96:	2240      	movs	r2, #64	@ 0x40
 8020c98:	4013      	ands	r3, r2
 8020c9a:	d10d      	bne.n	8020cb8 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020c9c:	2196      	movs	r1, #150	@ 0x96
 8020c9e:	187b      	adds	r3, r7, r1
 8020ca0:	881a      	ldrh	r2, [r3, #0]
 8020ca2:	2380      	movs	r3, #128	@ 0x80
 8020ca4:	01db      	lsls	r3, r3, #7
 8020ca6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020ca8:	d000      	beq.n	8020cac <USB_EPStartXfer+0xec0>
 8020caa:	e1a6      	b.n	8020ffa <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020cac:	187b      	adds	r3, r7, r1
 8020cae:	881b      	ldrh	r3, [r3, #0]
 8020cb0:	2240      	movs	r2, #64	@ 0x40
 8020cb2:	4013      	ands	r3, r2
 8020cb4:	d000      	beq.n	8020cb8 <USB_EPStartXfer+0xecc>
 8020cb6:	e1a0      	b.n	8020ffa <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8020cb8:	687a      	ldr	r2, [r7, #4]
 8020cba:	683b      	ldr	r3, [r7, #0]
 8020cbc:	781b      	ldrb	r3, [r3, #0]
 8020cbe:	009b      	lsls	r3, r3, #2
 8020cc0:	18d3      	adds	r3, r2, r3
 8020cc2:	881b      	ldrh	r3, [r3, #0]
 8020cc4:	b29a      	uxth	r2, r3
 8020cc6:	2094      	movs	r0, #148	@ 0x94
 8020cc8:	183b      	adds	r3, r7, r0
 8020cca:	49b5      	ldr	r1, [pc, #724]	@ (8020fa0 <USB_EPStartXfer+0x11b4>)
 8020ccc:	400a      	ands	r2, r1
 8020cce:	801a      	strh	r2, [r3, #0]
 8020cd0:	687a      	ldr	r2, [r7, #4]
 8020cd2:	683b      	ldr	r3, [r7, #0]
 8020cd4:	781b      	ldrb	r3, [r3, #0]
 8020cd6:	009b      	lsls	r3, r3, #2
 8020cd8:	18d3      	adds	r3, r2, r3
 8020cda:	183a      	adds	r2, r7, r0
 8020cdc:	8812      	ldrh	r2, [r2, #0]
 8020cde:	49b1      	ldr	r1, [pc, #708]	@ (8020fa4 <USB_EPStartXfer+0x11b8>)
 8020ce0:	430a      	orrs	r2, r1
 8020ce2:	b292      	uxth	r2, r2
 8020ce4:	801a      	strh	r2, [r3, #0]
 8020ce6:	e188      	b.n	8020ffa <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8020ce8:	683b      	ldr	r3, [r7, #0]
 8020cea:	78db      	ldrb	r3, [r3, #3]
 8020cec:	2b01      	cmp	r3, #1
 8020cee:	d000      	beq.n	8020cf2 <USB_EPStartXfer+0xf06>
 8020cf0:	e181      	b.n	8020ff6 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8020cf2:	683b      	ldr	r3, [r7, #0]
 8020cf4:	699a      	ldr	r2, [r3, #24]
 8020cf6:	683b      	ldr	r3, [r7, #0]
 8020cf8:	691b      	ldr	r3, [r3, #16]
 8020cfa:	429a      	cmp	r2, r3
 8020cfc:	d90d      	bls.n	8020d1a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8020cfe:	683b      	ldr	r3, [r7, #0]
 8020d00:	691b      	ldr	r3, [r3, #16]
 8020d02:	1d7a      	adds	r2, r7, #5
 8020d04:	32ff      	adds	r2, #255	@ 0xff
 8020d06:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8020d08:	683b      	ldr	r3, [r7, #0]
 8020d0a:	699a      	ldr	r2, [r3, #24]
 8020d0c:	1d7b      	adds	r3, r7, #5
 8020d0e:	33ff      	adds	r3, #255	@ 0xff
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	1ad2      	subs	r2, r2, r3
 8020d14:	683b      	ldr	r3, [r7, #0]
 8020d16:	619a      	str	r2, [r3, #24]
 8020d18:	e007      	b.n	8020d2a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8020d1a:	683b      	ldr	r3, [r7, #0]
 8020d1c:	699b      	ldr	r3, [r3, #24]
 8020d1e:	1d7a      	adds	r2, r7, #5
 8020d20:	32ff      	adds	r2, #255	@ 0xff
 8020d22:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8020d24:	683b      	ldr	r3, [r7, #0]
 8020d26:	2200      	movs	r2, #0
 8020d28:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8020d2a:	683b      	ldr	r3, [r7, #0]
 8020d2c:	785b      	ldrb	r3, [r3, #1]
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	d000      	beq.n	8020d34 <USB_EPStartXfer+0xf48>
 8020d32:	e082      	b.n	8020e3a <USB_EPStartXfer+0x104e>
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	21cc      	movs	r1, #204	@ 0xcc
 8020d38:	187a      	adds	r2, r7, r1
 8020d3a:	6013      	str	r3, [r2, #0]
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	2250      	movs	r2, #80	@ 0x50
 8020d40:	5a9b      	ldrh	r3, [r3, r2]
 8020d42:	b29b      	uxth	r3, r3
 8020d44:	001a      	movs	r2, r3
 8020d46:	187b      	adds	r3, r7, r1
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	189b      	adds	r3, r3, r2
 8020d4c:	187a      	adds	r2, r7, r1
 8020d4e:	6013      	str	r3, [r2, #0]
 8020d50:	683b      	ldr	r3, [r7, #0]
 8020d52:	781b      	ldrb	r3, [r3, #0]
 8020d54:	00da      	lsls	r2, r3, #3
 8020d56:	187b      	adds	r3, r7, r1
 8020d58:	681b      	ldr	r3, [r3, #0]
 8020d5a:	18d3      	adds	r3, r2, r3
 8020d5c:	4a92      	ldr	r2, [pc, #584]	@ (8020fa8 <USB_EPStartXfer+0x11bc>)
 8020d5e:	4694      	mov	ip, r2
 8020d60:	4463      	add	r3, ip
 8020d62:	21c8      	movs	r1, #200	@ 0xc8
 8020d64:	187a      	adds	r2, r7, r1
 8020d66:	6013      	str	r3, [r2, #0]
 8020d68:	187b      	adds	r3, r7, r1
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	881b      	ldrh	r3, [r3, #0]
 8020d6e:	b29b      	uxth	r3, r3
 8020d70:	059b      	lsls	r3, r3, #22
 8020d72:	0d9b      	lsrs	r3, r3, #22
 8020d74:	b29a      	uxth	r2, r3
 8020d76:	187b      	adds	r3, r7, r1
 8020d78:	681b      	ldr	r3, [r3, #0]
 8020d7a:	801a      	strh	r2, [r3, #0]
 8020d7c:	1d7b      	adds	r3, r7, #5
 8020d7e:	33ff      	adds	r3, #255	@ 0xff
 8020d80:	681b      	ldr	r3, [r3, #0]
 8020d82:	2b3e      	cmp	r3, #62	@ 0x3e
 8020d84:	d925      	bls.n	8020dd2 <USB_EPStartXfer+0xfe6>
 8020d86:	1d7b      	adds	r3, r7, #5
 8020d88:	33ff      	adds	r3, #255	@ 0xff
 8020d8a:	681b      	ldr	r3, [r3, #0]
 8020d8c:	095b      	lsrs	r3, r3, #5
 8020d8e:	21dc      	movs	r1, #220	@ 0xdc
 8020d90:	187a      	adds	r2, r7, r1
 8020d92:	6013      	str	r3, [r2, #0]
 8020d94:	1d7b      	adds	r3, r7, #5
 8020d96:	33ff      	adds	r3, #255	@ 0xff
 8020d98:	681b      	ldr	r3, [r3, #0]
 8020d9a:	221f      	movs	r2, #31
 8020d9c:	4013      	ands	r3, r2
 8020d9e:	d104      	bne.n	8020daa <USB_EPStartXfer+0xfbe>
 8020da0:	187b      	adds	r3, r7, r1
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	3b01      	subs	r3, #1
 8020da6:	187a      	adds	r2, r7, r1
 8020da8:	6013      	str	r3, [r2, #0]
 8020daa:	21c8      	movs	r1, #200	@ 0xc8
 8020dac:	187b      	adds	r3, r7, r1
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	881b      	ldrh	r3, [r3, #0]
 8020db2:	b29a      	uxth	r2, r3
 8020db4:	23dc      	movs	r3, #220	@ 0xdc
 8020db6:	18fb      	adds	r3, r7, r3
 8020db8:	681b      	ldr	r3, [r3, #0]
 8020dba:	b29b      	uxth	r3, r3
 8020dbc:	029b      	lsls	r3, r3, #10
 8020dbe:	b29b      	uxth	r3, r3
 8020dc0:	4313      	orrs	r3, r2
 8020dc2:	b29b      	uxth	r3, r3
 8020dc4:	4a79      	ldr	r2, [pc, #484]	@ (8020fac <USB_EPStartXfer+0x11c0>)
 8020dc6:	4313      	orrs	r3, r2
 8020dc8:	b29a      	uxth	r2, r3
 8020dca:	187b      	adds	r3, r7, r1
 8020dcc:	681b      	ldr	r3, [r3, #0]
 8020dce:	801a      	strh	r2, [r3, #0]
 8020dd0:	e058      	b.n	8020e84 <USB_EPStartXfer+0x1098>
 8020dd2:	1d7b      	adds	r3, r7, #5
 8020dd4:	33ff      	adds	r3, #255	@ 0xff
 8020dd6:	681b      	ldr	r3, [r3, #0]
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d10b      	bne.n	8020df4 <USB_EPStartXfer+0x1008>
 8020ddc:	21c8      	movs	r1, #200	@ 0xc8
 8020dde:	187b      	adds	r3, r7, r1
 8020de0:	681b      	ldr	r3, [r3, #0]
 8020de2:	881b      	ldrh	r3, [r3, #0]
 8020de4:	b29b      	uxth	r3, r3
 8020de6:	4a71      	ldr	r2, [pc, #452]	@ (8020fac <USB_EPStartXfer+0x11c0>)
 8020de8:	4313      	orrs	r3, r2
 8020dea:	b29a      	uxth	r2, r3
 8020dec:	187b      	adds	r3, r7, r1
 8020dee:	681b      	ldr	r3, [r3, #0]
 8020df0:	801a      	strh	r2, [r3, #0]
 8020df2:	e047      	b.n	8020e84 <USB_EPStartXfer+0x1098>
 8020df4:	1d7b      	adds	r3, r7, #5
 8020df6:	33ff      	adds	r3, #255	@ 0xff
 8020df8:	681b      	ldr	r3, [r3, #0]
 8020dfa:	085b      	lsrs	r3, r3, #1
 8020dfc:	21dc      	movs	r1, #220	@ 0xdc
 8020dfe:	187a      	adds	r2, r7, r1
 8020e00:	6013      	str	r3, [r2, #0]
 8020e02:	1d7b      	adds	r3, r7, #5
 8020e04:	33ff      	adds	r3, #255	@ 0xff
 8020e06:	681b      	ldr	r3, [r3, #0]
 8020e08:	2201      	movs	r2, #1
 8020e0a:	4013      	ands	r3, r2
 8020e0c:	d004      	beq.n	8020e18 <USB_EPStartXfer+0x102c>
 8020e0e:	187b      	adds	r3, r7, r1
 8020e10:	681b      	ldr	r3, [r3, #0]
 8020e12:	3301      	adds	r3, #1
 8020e14:	187a      	adds	r2, r7, r1
 8020e16:	6013      	str	r3, [r2, #0]
 8020e18:	21c8      	movs	r1, #200	@ 0xc8
 8020e1a:	187b      	adds	r3, r7, r1
 8020e1c:	681b      	ldr	r3, [r3, #0]
 8020e1e:	881b      	ldrh	r3, [r3, #0]
 8020e20:	b29a      	uxth	r2, r3
 8020e22:	23dc      	movs	r3, #220	@ 0xdc
 8020e24:	18fb      	adds	r3, r7, r3
 8020e26:	681b      	ldr	r3, [r3, #0]
 8020e28:	b29b      	uxth	r3, r3
 8020e2a:	029b      	lsls	r3, r3, #10
 8020e2c:	b29b      	uxth	r3, r3
 8020e2e:	4313      	orrs	r3, r2
 8020e30:	b29a      	uxth	r2, r3
 8020e32:	187b      	adds	r3, r7, r1
 8020e34:	681b      	ldr	r3, [r3, #0]
 8020e36:	801a      	strh	r2, [r3, #0]
 8020e38:	e024      	b.n	8020e84 <USB_EPStartXfer+0x1098>
 8020e3a:	683b      	ldr	r3, [r7, #0]
 8020e3c:	785b      	ldrb	r3, [r3, #1]
 8020e3e:	2b01      	cmp	r3, #1
 8020e40:	d120      	bne.n	8020e84 <USB_EPStartXfer+0x1098>
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	21d4      	movs	r1, #212	@ 0xd4
 8020e46:	187a      	adds	r2, r7, r1
 8020e48:	6013      	str	r3, [r2, #0]
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	2250      	movs	r2, #80	@ 0x50
 8020e4e:	5a9b      	ldrh	r3, [r3, r2]
 8020e50:	b29b      	uxth	r3, r3
 8020e52:	001a      	movs	r2, r3
 8020e54:	187b      	adds	r3, r7, r1
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	189b      	adds	r3, r3, r2
 8020e5a:	187a      	adds	r2, r7, r1
 8020e5c:	6013      	str	r3, [r2, #0]
 8020e5e:	683b      	ldr	r3, [r7, #0]
 8020e60:	781b      	ldrb	r3, [r3, #0]
 8020e62:	00da      	lsls	r2, r3, #3
 8020e64:	187b      	adds	r3, r7, r1
 8020e66:	681b      	ldr	r3, [r3, #0]
 8020e68:	18d3      	adds	r3, r2, r3
 8020e6a:	4a4f      	ldr	r2, [pc, #316]	@ (8020fa8 <USB_EPStartXfer+0x11bc>)
 8020e6c:	4694      	mov	ip, r2
 8020e6e:	4463      	add	r3, ip
 8020e70:	21d0      	movs	r1, #208	@ 0xd0
 8020e72:	187a      	adds	r2, r7, r1
 8020e74:	6013      	str	r3, [r2, #0]
 8020e76:	1d7b      	adds	r3, r7, #5
 8020e78:	33ff      	adds	r3, #255	@ 0xff
 8020e7a:	681b      	ldr	r3, [r3, #0]
 8020e7c:	b29a      	uxth	r2, r3
 8020e7e:	187b      	adds	r3, r7, r1
 8020e80:	681b      	ldr	r3, [r3, #0]
 8020e82:	801a      	strh	r2, [r3, #0]
 8020e84:	687b      	ldr	r3, [r7, #4]
 8020e86:	22c4      	movs	r2, #196	@ 0xc4
 8020e88:	18ba      	adds	r2, r7, r2
 8020e8a:	6013      	str	r3, [r2, #0]
 8020e8c:	683b      	ldr	r3, [r7, #0]
 8020e8e:	785b      	ldrb	r3, [r3, #1]
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	d000      	beq.n	8020e96 <USB_EPStartXfer+0x10aa>
 8020e94:	e08c      	b.n	8020fb0 <USB_EPStartXfer+0x11c4>
 8020e96:	687b      	ldr	r3, [r7, #4]
 8020e98:	21bc      	movs	r1, #188	@ 0xbc
 8020e9a:	187a      	adds	r2, r7, r1
 8020e9c:	6013      	str	r3, [r2, #0]
 8020e9e:	687b      	ldr	r3, [r7, #4]
 8020ea0:	2250      	movs	r2, #80	@ 0x50
 8020ea2:	5a9b      	ldrh	r3, [r3, r2]
 8020ea4:	b29b      	uxth	r3, r3
 8020ea6:	001a      	movs	r2, r3
 8020ea8:	187b      	adds	r3, r7, r1
 8020eaa:	681b      	ldr	r3, [r3, #0]
 8020eac:	189b      	adds	r3, r3, r2
 8020eae:	187a      	adds	r2, r7, r1
 8020eb0:	6013      	str	r3, [r2, #0]
 8020eb2:	683b      	ldr	r3, [r7, #0]
 8020eb4:	781b      	ldrb	r3, [r3, #0]
 8020eb6:	00da      	lsls	r2, r3, #3
 8020eb8:	187b      	adds	r3, r7, r1
 8020eba:	681b      	ldr	r3, [r3, #0]
 8020ebc:	18d3      	adds	r3, r2, r3
 8020ebe:	4a37      	ldr	r2, [pc, #220]	@ (8020f9c <USB_EPStartXfer+0x11b0>)
 8020ec0:	4694      	mov	ip, r2
 8020ec2:	4463      	add	r3, ip
 8020ec4:	21b8      	movs	r1, #184	@ 0xb8
 8020ec6:	187a      	adds	r2, r7, r1
 8020ec8:	6013      	str	r3, [r2, #0]
 8020eca:	187b      	adds	r3, r7, r1
 8020ecc:	681b      	ldr	r3, [r3, #0]
 8020ece:	881b      	ldrh	r3, [r3, #0]
 8020ed0:	b29b      	uxth	r3, r3
 8020ed2:	059b      	lsls	r3, r3, #22
 8020ed4:	0d9b      	lsrs	r3, r3, #22
 8020ed6:	b29a      	uxth	r2, r3
 8020ed8:	187b      	adds	r3, r7, r1
 8020eda:	681b      	ldr	r3, [r3, #0]
 8020edc:	801a      	strh	r2, [r3, #0]
 8020ede:	1d7b      	adds	r3, r7, #5
 8020ee0:	33ff      	adds	r3, #255	@ 0xff
 8020ee2:	681b      	ldr	r3, [r3, #0]
 8020ee4:	2b3e      	cmp	r3, #62	@ 0x3e
 8020ee6:	d925      	bls.n	8020f34 <USB_EPStartXfer+0x1148>
 8020ee8:	1d7b      	adds	r3, r7, #5
 8020eea:	33ff      	adds	r3, #255	@ 0xff
 8020eec:	681b      	ldr	r3, [r3, #0]
 8020eee:	095b      	lsrs	r3, r3, #5
 8020ef0:	21d8      	movs	r1, #216	@ 0xd8
 8020ef2:	187a      	adds	r2, r7, r1
 8020ef4:	6013      	str	r3, [r2, #0]
 8020ef6:	1d7b      	adds	r3, r7, #5
 8020ef8:	33ff      	adds	r3, #255	@ 0xff
 8020efa:	681b      	ldr	r3, [r3, #0]
 8020efc:	221f      	movs	r2, #31
 8020efe:	4013      	ands	r3, r2
 8020f00:	d104      	bne.n	8020f0c <USB_EPStartXfer+0x1120>
 8020f02:	187b      	adds	r3, r7, r1
 8020f04:	681b      	ldr	r3, [r3, #0]
 8020f06:	3b01      	subs	r3, #1
 8020f08:	187a      	adds	r2, r7, r1
 8020f0a:	6013      	str	r3, [r2, #0]
 8020f0c:	21b8      	movs	r1, #184	@ 0xb8
 8020f0e:	187b      	adds	r3, r7, r1
 8020f10:	681b      	ldr	r3, [r3, #0]
 8020f12:	881b      	ldrh	r3, [r3, #0]
 8020f14:	b29a      	uxth	r2, r3
 8020f16:	23d8      	movs	r3, #216	@ 0xd8
 8020f18:	18fb      	adds	r3, r7, r3
 8020f1a:	681b      	ldr	r3, [r3, #0]
 8020f1c:	b29b      	uxth	r3, r3
 8020f1e:	029b      	lsls	r3, r3, #10
 8020f20:	b29b      	uxth	r3, r3
 8020f22:	4313      	orrs	r3, r2
 8020f24:	b29b      	uxth	r3, r3
 8020f26:	4a21      	ldr	r2, [pc, #132]	@ (8020fac <USB_EPStartXfer+0x11c0>)
 8020f28:	4313      	orrs	r3, r2
 8020f2a:	b29a      	uxth	r2, r3
 8020f2c:	187b      	adds	r3, r7, r1
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	801a      	strh	r2, [r3, #0]
 8020f32:	e062      	b.n	8020ffa <USB_EPStartXfer+0x120e>
 8020f34:	1d7b      	adds	r3, r7, #5
 8020f36:	33ff      	adds	r3, #255	@ 0xff
 8020f38:	681b      	ldr	r3, [r3, #0]
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d10b      	bne.n	8020f56 <USB_EPStartXfer+0x116a>
 8020f3e:	21b8      	movs	r1, #184	@ 0xb8
 8020f40:	187b      	adds	r3, r7, r1
 8020f42:	681b      	ldr	r3, [r3, #0]
 8020f44:	881b      	ldrh	r3, [r3, #0]
 8020f46:	b29b      	uxth	r3, r3
 8020f48:	4a18      	ldr	r2, [pc, #96]	@ (8020fac <USB_EPStartXfer+0x11c0>)
 8020f4a:	4313      	orrs	r3, r2
 8020f4c:	b29a      	uxth	r2, r3
 8020f4e:	187b      	adds	r3, r7, r1
 8020f50:	681b      	ldr	r3, [r3, #0]
 8020f52:	801a      	strh	r2, [r3, #0]
 8020f54:	e051      	b.n	8020ffa <USB_EPStartXfer+0x120e>
 8020f56:	1d7b      	adds	r3, r7, #5
 8020f58:	33ff      	adds	r3, #255	@ 0xff
 8020f5a:	681b      	ldr	r3, [r3, #0]
 8020f5c:	085b      	lsrs	r3, r3, #1
 8020f5e:	21d8      	movs	r1, #216	@ 0xd8
 8020f60:	187a      	adds	r2, r7, r1
 8020f62:	6013      	str	r3, [r2, #0]
 8020f64:	1d7b      	adds	r3, r7, #5
 8020f66:	33ff      	adds	r3, #255	@ 0xff
 8020f68:	681b      	ldr	r3, [r3, #0]
 8020f6a:	2201      	movs	r2, #1
 8020f6c:	4013      	ands	r3, r2
 8020f6e:	d004      	beq.n	8020f7a <USB_EPStartXfer+0x118e>
 8020f70:	187b      	adds	r3, r7, r1
 8020f72:	681b      	ldr	r3, [r3, #0]
 8020f74:	3301      	adds	r3, #1
 8020f76:	187a      	adds	r2, r7, r1
 8020f78:	6013      	str	r3, [r2, #0]
 8020f7a:	21b8      	movs	r1, #184	@ 0xb8
 8020f7c:	187b      	adds	r3, r7, r1
 8020f7e:	681b      	ldr	r3, [r3, #0]
 8020f80:	881b      	ldrh	r3, [r3, #0]
 8020f82:	b29a      	uxth	r2, r3
 8020f84:	23d8      	movs	r3, #216	@ 0xd8
 8020f86:	18fb      	adds	r3, r7, r3
 8020f88:	681b      	ldr	r3, [r3, #0]
 8020f8a:	b29b      	uxth	r3, r3
 8020f8c:	029b      	lsls	r3, r3, #10
 8020f8e:	b29b      	uxth	r3, r3
 8020f90:	4313      	orrs	r3, r2
 8020f92:	b29a      	uxth	r2, r3
 8020f94:	187b      	adds	r3, r7, r1
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	801a      	strh	r2, [r3, #0]
 8020f9a:	e02e      	b.n	8020ffa <USB_EPStartXfer+0x120e>
 8020f9c:	00000406 	.word	0x00000406
 8020fa0:	ffff8f8f 	.word	0xffff8f8f
 8020fa4:	ffff80c0 	.word	0xffff80c0
 8020fa8:	00000402 	.word	0x00000402
 8020fac:	ffff8000 	.word	0xffff8000
 8020fb0:	683b      	ldr	r3, [r7, #0]
 8020fb2:	785b      	ldrb	r3, [r3, #1]
 8020fb4:	2b01      	cmp	r3, #1
 8020fb6:	d120      	bne.n	8020ffa <USB_EPStartXfer+0x120e>
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	2250      	movs	r2, #80	@ 0x50
 8020fbc:	5a9b      	ldrh	r3, [r3, r2]
 8020fbe:	b29b      	uxth	r3, r3
 8020fc0:	001a      	movs	r2, r3
 8020fc2:	21c4      	movs	r1, #196	@ 0xc4
 8020fc4:	187b      	adds	r3, r7, r1
 8020fc6:	681b      	ldr	r3, [r3, #0]
 8020fc8:	189b      	adds	r3, r3, r2
 8020fca:	187a      	adds	r2, r7, r1
 8020fcc:	6013      	str	r3, [r2, #0]
 8020fce:	683b      	ldr	r3, [r7, #0]
 8020fd0:	781b      	ldrb	r3, [r3, #0]
 8020fd2:	00da      	lsls	r2, r3, #3
 8020fd4:	187b      	adds	r3, r7, r1
 8020fd6:	681b      	ldr	r3, [r3, #0]
 8020fd8:	18d3      	adds	r3, r2, r3
 8020fda:	4a1d      	ldr	r2, [pc, #116]	@ (8021050 <USB_EPStartXfer+0x1264>)
 8020fdc:	4694      	mov	ip, r2
 8020fde:	4463      	add	r3, ip
 8020fe0:	21c0      	movs	r1, #192	@ 0xc0
 8020fe2:	187a      	adds	r2, r7, r1
 8020fe4:	6013      	str	r3, [r2, #0]
 8020fe6:	1d7b      	adds	r3, r7, #5
 8020fe8:	33ff      	adds	r3, #255	@ 0xff
 8020fea:	681b      	ldr	r3, [r3, #0]
 8020fec:	b29a      	uxth	r2, r3
 8020fee:	187b      	adds	r3, r7, r1
 8020ff0:	681b      	ldr	r3, [r3, #0]
 8020ff2:	801a      	strh	r2, [r3, #0]
 8020ff4:	e001      	b.n	8020ffa <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8020ff6:	2301      	movs	r3, #1
 8020ff8:	e025      	b.n	8021046 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8020ffa:	687a      	ldr	r2, [r7, #4]
 8020ffc:	683b      	ldr	r3, [r7, #0]
 8020ffe:	781b      	ldrb	r3, [r3, #0]
 8021000:	009b      	lsls	r3, r3, #2
 8021002:	18d3      	adds	r3, r2, r3
 8021004:	881b      	ldrh	r3, [r3, #0]
 8021006:	b29a      	uxth	r2, r3
 8021008:	208a      	movs	r0, #138	@ 0x8a
 802100a:	183b      	adds	r3, r7, r0
 802100c:	4911      	ldr	r1, [pc, #68]	@ (8021054 <USB_EPStartXfer+0x1268>)
 802100e:	400a      	ands	r2, r1
 8021010:	801a      	strh	r2, [r3, #0]
 8021012:	183b      	adds	r3, r7, r0
 8021014:	183a      	adds	r2, r7, r0
 8021016:	8812      	ldrh	r2, [r2, #0]
 8021018:	2180      	movs	r1, #128	@ 0x80
 802101a:	0149      	lsls	r1, r1, #5
 802101c:	404a      	eors	r2, r1
 802101e:	801a      	strh	r2, [r3, #0]
 8021020:	183b      	adds	r3, r7, r0
 8021022:	183a      	adds	r2, r7, r0
 8021024:	8812      	ldrh	r2, [r2, #0]
 8021026:	2180      	movs	r1, #128	@ 0x80
 8021028:	0189      	lsls	r1, r1, #6
 802102a:	404a      	eors	r2, r1
 802102c:	801a      	strh	r2, [r3, #0]
 802102e:	687a      	ldr	r2, [r7, #4]
 8021030:	683b      	ldr	r3, [r7, #0]
 8021032:	781b      	ldrb	r3, [r3, #0]
 8021034:	009b      	lsls	r3, r3, #2
 8021036:	18d3      	adds	r3, r2, r3
 8021038:	183a      	adds	r2, r7, r0
 802103a:	8812      	ldrh	r2, [r2, #0]
 802103c:	4906      	ldr	r1, [pc, #24]	@ (8021058 <USB_EPStartXfer+0x126c>)
 802103e:	430a      	orrs	r2, r1
 8021040:	b292      	uxth	r2, r2
 8021042:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8021044:	2300      	movs	r3, #0
}
 8021046:	0018      	movs	r0, r3
 8021048:	46bd      	mov	sp, r7
 802104a:	b043      	add	sp, #268	@ 0x10c
 802104c:	bd90      	pop	{r4, r7, pc}
 802104e:	46c0      	nop			@ (mov r8, r8)
 8021050:	00000406 	.word	0x00000406
 8021054:	ffffbf8f 	.word	0xffffbf8f
 8021058:	ffff8080 	.word	0xffff8080

0802105c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 802105c:	b580      	push	{r7, lr}
 802105e:	b084      	sub	sp, #16
 8021060:	af00      	add	r7, sp, #0
 8021062:	6078      	str	r0, [r7, #4]
 8021064:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8021066:	683b      	ldr	r3, [r7, #0]
 8021068:	785b      	ldrb	r3, [r3, #1]
 802106a:	2b00      	cmp	r3, #0
 802106c:	d01d      	beq.n	80210aa <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 802106e:	687a      	ldr	r2, [r7, #4]
 8021070:	683b      	ldr	r3, [r7, #0]
 8021072:	781b      	ldrb	r3, [r3, #0]
 8021074:	009b      	lsls	r3, r3, #2
 8021076:	18d3      	adds	r3, r2, r3
 8021078:	881b      	ldrh	r3, [r3, #0]
 802107a:	b29a      	uxth	r2, r3
 802107c:	200c      	movs	r0, #12
 802107e:	183b      	adds	r3, r7, r0
 8021080:	491b      	ldr	r1, [pc, #108]	@ (80210f0 <USB_EPSetStall+0x94>)
 8021082:	400a      	ands	r2, r1
 8021084:	801a      	strh	r2, [r3, #0]
 8021086:	183b      	adds	r3, r7, r0
 8021088:	183a      	adds	r2, r7, r0
 802108a:	8812      	ldrh	r2, [r2, #0]
 802108c:	2110      	movs	r1, #16
 802108e:	404a      	eors	r2, r1
 8021090:	801a      	strh	r2, [r3, #0]
 8021092:	687a      	ldr	r2, [r7, #4]
 8021094:	683b      	ldr	r3, [r7, #0]
 8021096:	781b      	ldrb	r3, [r3, #0]
 8021098:	009b      	lsls	r3, r3, #2
 802109a:	18d3      	adds	r3, r2, r3
 802109c:	183a      	adds	r2, r7, r0
 802109e:	8812      	ldrh	r2, [r2, #0]
 80210a0:	4914      	ldr	r1, [pc, #80]	@ (80210f4 <USB_EPSetStall+0x98>)
 80210a2:	430a      	orrs	r2, r1
 80210a4:	b292      	uxth	r2, r2
 80210a6:	801a      	strh	r2, [r3, #0]
 80210a8:	e01d      	b.n	80210e6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80210aa:	687a      	ldr	r2, [r7, #4]
 80210ac:	683b      	ldr	r3, [r7, #0]
 80210ae:	781b      	ldrb	r3, [r3, #0]
 80210b0:	009b      	lsls	r3, r3, #2
 80210b2:	18d3      	adds	r3, r2, r3
 80210b4:	881b      	ldrh	r3, [r3, #0]
 80210b6:	b29a      	uxth	r2, r3
 80210b8:	200e      	movs	r0, #14
 80210ba:	183b      	adds	r3, r7, r0
 80210bc:	490e      	ldr	r1, [pc, #56]	@ (80210f8 <USB_EPSetStall+0x9c>)
 80210be:	400a      	ands	r2, r1
 80210c0:	801a      	strh	r2, [r3, #0]
 80210c2:	183b      	adds	r3, r7, r0
 80210c4:	183a      	adds	r2, r7, r0
 80210c6:	8812      	ldrh	r2, [r2, #0]
 80210c8:	2180      	movs	r1, #128	@ 0x80
 80210ca:	0149      	lsls	r1, r1, #5
 80210cc:	404a      	eors	r2, r1
 80210ce:	801a      	strh	r2, [r3, #0]
 80210d0:	687a      	ldr	r2, [r7, #4]
 80210d2:	683b      	ldr	r3, [r7, #0]
 80210d4:	781b      	ldrb	r3, [r3, #0]
 80210d6:	009b      	lsls	r3, r3, #2
 80210d8:	18d3      	adds	r3, r2, r3
 80210da:	183a      	adds	r2, r7, r0
 80210dc:	8812      	ldrh	r2, [r2, #0]
 80210de:	4905      	ldr	r1, [pc, #20]	@ (80210f4 <USB_EPSetStall+0x98>)
 80210e0:	430a      	orrs	r2, r1
 80210e2:	b292      	uxth	r2, r2
 80210e4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80210e6:	2300      	movs	r3, #0
}
 80210e8:	0018      	movs	r0, r3
 80210ea:	46bd      	mov	sp, r7
 80210ec:	b004      	add	sp, #16
 80210ee:	bd80      	pop	{r7, pc}
 80210f0:	ffff8fbf 	.word	0xffff8fbf
 80210f4:	ffff8080 	.word	0xffff8080
 80210f8:	ffffbf8f 	.word	0xffffbf8f

080210fc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80210fc:	b580      	push	{r7, lr}
 80210fe:	b086      	sub	sp, #24
 8021100:	af00      	add	r7, sp, #0
 8021102:	6078      	str	r0, [r7, #4]
 8021104:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8021106:	683b      	ldr	r3, [r7, #0]
 8021108:	7b1b      	ldrb	r3, [r3, #12]
 802110a:	2b00      	cmp	r3, #0
 802110c:	d000      	beq.n	8021110 <USB_EPClearStall+0x14>
 802110e:	e095      	b.n	802123c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8021110:	683b      	ldr	r3, [r7, #0]
 8021112:	785b      	ldrb	r3, [r3, #1]
 8021114:	2b00      	cmp	r3, #0
 8021116:	d046      	beq.n	80211a6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8021118:	687a      	ldr	r2, [r7, #4]
 802111a:	683b      	ldr	r3, [r7, #0]
 802111c:	781b      	ldrb	r3, [r3, #0]
 802111e:	009b      	lsls	r3, r3, #2
 8021120:	18d2      	adds	r2, r2, r3
 8021122:	2110      	movs	r1, #16
 8021124:	187b      	adds	r3, r7, r1
 8021126:	8812      	ldrh	r2, [r2, #0]
 8021128:	801a      	strh	r2, [r3, #0]
 802112a:	187b      	adds	r3, r7, r1
 802112c:	881b      	ldrh	r3, [r3, #0]
 802112e:	2240      	movs	r2, #64	@ 0x40
 8021130:	4013      	ands	r3, r2
 8021132:	d016      	beq.n	8021162 <USB_EPClearStall+0x66>
 8021134:	687a      	ldr	r2, [r7, #4]
 8021136:	683b      	ldr	r3, [r7, #0]
 8021138:	781b      	ldrb	r3, [r3, #0]
 802113a:	009b      	lsls	r3, r3, #2
 802113c:	18d3      	adds	r3, r2, r3
 802113e:	881b      	ldrh	r3, [r3, #0]
 8021140:	b29a      	uxth	r2, r3
 8021142:	200e      	movs	r0, #14
 8021144:	183b      	adds	r3, r7, r0
 8021146:	4940      	ldr	r1, [pc, #256]	@ (8021248 <USB_EPClearStall+0x14c>)
 8021148:	400a      	ands	r2, r1
 802114a:	801a      	strh	r2, [r3, #0]
 802114c:	687a      	ldr	r2, [r7, #4]
 802114e:	683b      	ldr	r3, [r7, #0]
 8021150:	781b      	ldrb	r3, [r3, #0]
 8021152:	009b      	lsls	r3, r3, #2
 8021154:	18d3      	adds	r3, r2, r3
 8021156:	183a      	adds	r2, r7, r0
 8021158:	8812      	ldrh	r2, [r2, #0]
 802115a:	493c      	ldr	r1, [pc, #240]	@ (802124c <USB_EPClearStall+0x150>)
 802115c:	430a      	orrs	r2, r1
 802115e:	b292      	uxth	r2, r2
 8021160:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8021162:	683b      	ldr	r3, [r7, #0]
 8021164:	78db      	ldrb	r3, [r3, #3]
 8021166:	2b01      	cmp	r3, #1
 8021168:	d068      	beq.n	802123c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 802116a:	687a      	ldr	r2, [r7, #4]
 802116c:	683b      	ldr	r3, [r7, #0]
 802116e:	781b      	ldrb	r3, [r3, #0]
 8021170:	009b      	lsls	r3, r3, #2
 8021172:	18d3      	adds	r3, r2, r3
 8021174:	881b      	ldrh	r3, [r3, #0]
 8021176:	b29a      	uxth	r2, r3
 8021178:	200c      	movs	r0, #12
 802117a:	183b      	adds	r3, r7, r0
 802117c:	4934      	ldr	r1, [pc, #208]	@ (8021250 <USB_EPClearStall+0x154>)
 802117e:	400a      	ands	r2, r1
 8021180:	801a      	strh	r2, [r3, #0]
 8021182:	183b      	adds	r3, r7, r0
 8021184:	183a      	adds	r2, r7, r0
 8021186:	8812      	ldrh	r2, [r2, #0]
 8021188:	2120      	movs	r1, #32
 802118a:	404a      	eors	r2, r1
 802118c:	801a      	strh	r2, [r3, #0]
 802118e:	687a      	ldr	r2, [r7, #4]
 8021190:	683b      	ldr	r3, [r7, #0]
 8021192:	781b      	ldrb	r3, [r3, #0]
 8021194:	009b      	lsls	r3, r3, #2
 8021196:	18d3      	adds	r3, r2, r3
 8021198:	183a      	adds	r2, r7, r0
 802119a:	8812      	ldrh	r2, [r2, #0]
 802119c:	492d      	ldr	r1, [pc, #180]	@ (8021254 <USB_EPClearStall+0x158>)
 802119e:	430a      	orrs	r2, r1
 80211a0:	b292      	uxth	r2, r2
 80211a2:	801a      	strh	r2, [r3, #0]
 80211a4:	e04a      	b.n	802123c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80211a6:	687a      	ldr	r2, [r7, #4]
 80211a8:	683b      	ldr	r3, [r7, #0]
 80211aa:	781b      	ldrb	r3, [r3, #0]
 80211ac:	009b      	lsls	r3, r3, #2
 80211ae:	18d2      	adds	r2, r2, r3
 80211b0:	2116      	movs	r1, #22
 80211b2:	187b      	adds	r3, r7, r1
 80211b4:	8812      	ldrh	r2, [r2, #0]
 80211b6:	801a      	strh	r2, [r3, #0]
 80211b8:	187b      	adds	r3, r7, r1
 80211ba:	881a      	ldrh	r2, [r3, #0]
 80211bc:	2380      	movs	r3, #128	@ 0x80
 80211be:	01db      	lsls	r3, r3, #7
 80211c0:	4013      	ands	r3, r2
 80211c2:	d016      	beq.n	80211f2 <USB_EPClearStall+0xf6>
 80211c4:	687a      	ldr	r2, [r7, #4]
 80211c6:	683b      	ldr	r3, [r7, #0]
 80211c8:	781b      	ldrb	r3, [r3, #0]
 80211ca:	009b      	lsls	r3, r3, #2
 80211cc:	18d3      	adds	r3, r2, r3
 80211ce:	881b      	ldrh	r3, [r3, #0]
 80211d0:	b29a      	uxth	r2, r3
 80211d2:	2014      	movs	r0, #20
 80211d4:	183b      	adds	r3, r7, r0
 80211d6:	491c      	ldr	r1, [pc, #112]	@ (8021248 <USB_EPClearStall+0x14c>)
 80211d8:	400a      	ands	r2, r1
 80211da:	801a      	strh	r2, [r3, #0]
 80211dc:	687a      	ldr	r2, [r7, #4]
 80211de:	683b      	ldr	r3, [r7, #0]
 80211e0:	781b      	ldrb	r3, [r3, #0]
 80211e2:	009b      	lsls	r3, r3, #2
 80211e4:	18d3      	adds	r3, r2, r3
 80211e6:	183a      	adds	r2, r7, r0
 80211e8:	8812      	ldrh	r2, [r2, #0]
 80211ea:	491b      	ldr	r1, [pc, #108]	@ (8021258 <USB_EPClearStall+0x15c>)
 80211ec:	430a      	orrs	r2, r1
 80211ee:	b292      	uxth	r2, r2
 80211f0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80211f2:	687a      	ldr	r2, [r7, #4]
 80211f4:	683b      	ldr	r3, [r7, #0]
 80211f6:	781b      	ldrb	r3, [r3, #0]
 80211f8:	009b      	lsls	r3, r3, #2
 80211fa:	18d3      	adds	r3, r2, r3
 80211fc:	881b      	ldrh	r3, [r3, #0]
 80211fe:	b29a      	uxth	r2, r3
 8021200:	2012      	movs	r0, #18
 8021202:	183b      	adds	r3, r7, r0
 8021204:	4915      	ldr	r1, [pc, #84]	@ (802125c <USB_EPClearStall+0x160>)
 8021206:	400a      	ands	r2, r1
 8021208:	801a      	strh	r2, [r3, #0]
 802120a:	183b      	adds	r3, r7, r0
 802120c:	183a      	adds	r2, r7, r0
 802120e:	8812      	ldrh	r2, [r2, #0]
 8021210:	2180      	movs	r1, #128	@ 0x80
 8021212:	0149      	lsls	r1, r1, #5
 8021214:	404a      	eors	r2, r1
 8021216:	801a      	strh	r2, [r3, #0]
 8021218:	183b      	adds	r3, r7, r0
 802121a:	183a      	adds	r2, r7, r0
 802121c:	8812      	ldrh	r2, [r2, #0]
 802121e:	2180      	movs	r1, #128	@ 0x80
 8021220:	0189      	lsls	r1, r1, #6
 8021222:	404a      	eors	r2, r1
 8021224:	801a      	strh	r2, [r3, #0]
 8021226:	687a      	ldr	r2, [r7, #4]
 8021228:	683b      	ldr	r3, [r7, #0]
 802122a:	781b      	ldrb	r3, [r3, #0]
 802122c:	009b      	lsls	r3, r3, #2
 802122e:	18d3      	adds	r3, r2, r3
 8021230:	183a      	adds	r2, r7, r0
 8021232:	8812      	ldrh	r2, [r2, #0]
 8021234:	4907      	ldr	r1, [pc, #28]	@ (8021254 <USB_EPClearStall+0x158>)
 8021236:	430a      	orrs	r2, r1
 8021238:	b292      	uxth	r2, r2
 802123a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 802123c:	2300      	movs	r3, #0
}
 802123e:	0018      	movs	r0, r3
 8021240:	46bd      	mov	sp, r7
 8021242:	b006      	add	sp, #24
 8021244:	bd80      	pop	{r7, pc}
 8021246:	46c0      	nop			@ (mov r8, r8)
 8021248:	ffff8f8f 	.word	0xffff8f8f
 802124c:	ffff80c0 	.word	0xffff80c0
 8021250:	ffff8fbf 	.word	0xffff8fbf
 8021254:	ffff8080 	.word	0xffff8080
 8021258:	ffffc080 	.word	0xffffc080
 802125c:	ffffbf8f 	.word	0xffffbf8f

08021260 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8021260:	b580      	push	{r7, lr}
 8021262:	b082      	sub	sp, #8
 8021264:	af00      	add	r7, sp, #0
 8021266:	6078      	str	r0, [r7, #4]
 8021268:	000a      	movs	r2, r1
 802126a:	1cfb      	adds	r3, r7, #3
 802126c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 802126e:	1cfb      	adds	r3, r7, #3
 8021270:	781b      	ldrb	r3, [r3, #0]
 8021272:	2b00      	cmp	r3, #0
 8021274:	d103      	bne.n	802127e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	224c      	movs	r2, #76	@ 0x4c
 802127a:	2180      	movs	r1, #128	@ 0x80
 802127c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 802127e:	2300      	movs	r3, #0
}
 8021280:	0018      	movs	r0, r3
 8021282:	46bd      	mov	sp, r7
 8021284:	b002      	add	sp, #8
 8021286:	bd80      	pop	{r7, pc}

08021288 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8021288:	b580      	push	{r7, lr}
 802128a:	b082      	sub	sp, #8
 802128c:	af00      	add	r7, sp, #0
 802128e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	2258      	movs	r2, #88	@ 0x58
 8021294:	5a9b      	ldrh	r3, [r3, r2]
 8021296:	b29b      	uxth	r3, r3
 8021298:	4a05      	ldr	r2, [pc, #20]	@ (80212b0 <USB_DevConnect+0x28>)
 802129a:	4313      	orrs	r3, r2
 802129c:	b299      	uxth	r1, r3
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	2258      	movs	r2, #88	@ 0x58
 80212a2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80212a4:	2300      	movs	r3, #0
}
 80212a6:	0018      	movs	r0, r3
 80212a8:	46bd      	mov	sp, r7
 80212aa:	b002      	add	sp, #8
 80212ac:	bd80      	pop	{r7, pc}
 80212ae:	46c0      	nop			@ (mov r8, r8)
 80212b0:	ffff8000 	.word	0xffff8000

080212b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80212b4:	b580      	push	{r7, lr}
 80212b6:	b084      	sub	sp, #16
 80212b8:	af00      	add	r7, sp, #0
 80212ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80212bc:	687b      	ldr	r3, [r7, #4]
 80212be:	2244      	movs	r2, #68	@ 0x44
 80212c0:	5a9b      	ldrh	r3, [r3, r2]
 80212c2:	b29b      	uxth	r3, r3
 80212c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80212c6:	68fb      	ldr	r3, [r7, #12]
}
 80212c8:	0018      	movs	r0, r3
 80212ca:	46bd      	mov	sp, r7
 80212cc:	b004      	add	sp, #16
 80212ce:	bd80      	pop	{r7, pc}

080212d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80212d0:	b580      	push	{r7, lr}
 80212d2:	b08a      	sub	sp, #40	@ 0x28
 80212d4:	af00      	add	r7, sp, #0
 80212d6:	60f8      	str	r0, [r7, #12]
 80212d8:	60b9      	str	r1, [r7, #8]
 80212da:	0019      	movs	r1, r3
 80212dc:	1dbb      	adds	r3, r7, #6
 80212de:	801a      	strh	r2, [r3, #0]
 80212e0:	1d3b      	adds	r3, r7, #4
 80212e2:	1c0a      	adds	r2, r1, #0
 80212e4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80212e6:	1d3b      	adds	r3, r7, #4
 80212e8:	881b      	ldrh	r3, [r3, #0]
 80212ea:	3301      	adds	r3, #1
 80212ec:	085b      	lsrs	r3, r3, #1
 80212ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80212f0:	68fb      	ldr	r3, [r7, #12]
 80212f2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80212f4:	68bb      	ldr	r3, [r7, #8]
 80212f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80212f8:	1dbb      	adds	r3, r7, #6
 80212fa:	881a      	ldrh	r2, [r3, #0]
 80212fc:	697b      	ldr	r3, [r7, #20]
 80212fe:	18d3      	adds	r3, r2, r3
 8021300:	2280      	movs	r2, #128	@ 0x80
 8021302:	00d2      	lsls	r2, r2, #3
 8021304:	4694      	mov	ip, r2
 8021306:	4463      	add	r3, ip
 8021308:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 802130a:	69bb      	ldr	r3, [r7, #24]
 802130c:	627b      	str	r3, [r7, #36]	@ 0x24
 802130e:	e021      	b.n	8021354 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8021310:	69fb      	ldr	r3, [r7, #28]
 8021312:	781a      	ldrb	r2, [r3, #0]
 8021314:	2112      	movs	r1, #18
 8021316:	187b      	adds	r3, r7, r1
 8021318:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 802131a:	69fb      	ldr	r3, [r7, #28]
 802131c:	3301      	adds	r3, #1
 802131e:	781b      	ldrb	r3, [r3, #0]
 8021320:	b21b      	sxth	r3, r3
 8021322:	021b      	lsls	r3, r3, #8
 8021324:	b21a      	sxth	r2, r3
 8021326:	187b      	adds	r3, r7, r1
 8021328:	2000      	movs	r0, #0
 802132a:	5e1b      	ldrsh	r3, [r3, r0]
 802132c:	4313      	orrs	r3, r2
 802132e:	b21a      	sxth	r2, r3
 8021330:	187b      	adds	r3, r7, r1
 8021332:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8021334:	6a3b      	ldr	r3, [r7, #32]
 8021336:	187a      	adds	r2, r7, r1
 8021338:	8812      	ldrh	r2, [r2, #0]
 802133a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 802133c:	6a3b      	ldr	r3, [r7, #32]
 802133e:	3302      	adds	r3, #2
 8021340:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8021342:	69fb      	ldr	r3, [r7, #28]
 8021344:	3301      	adds	r3, #1
 8021346:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8021348:	69fb      	ldr	r3, [r7, #28]
 802134a:	3301      	adds	r3, #1
 802134c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 802134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021350:	3b01      	subs	r3, #1
 8021352:	627b      	str	r3, [r7, #36]	@ 0x24
 8021354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021356:	2b00      	cmp	r3, #0
 8021358:	d1da      	bne.n	8021310 <USB_WritePMA+0x40>
  }
}
 802135a:	46c0      	nop			@ (mov r8, r8)
 802135c:	46c0      	nop			@ (mov r8, r8)
 802135e:	46bd      	mov	sp, r7
 8021360:	b00a      	add	sp, #40	@ 0x28
 8021362:	bd80      	pop	{r7, pc}

08021364 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8021364:	b580      	push	{r7, lr}
 8021366:	b08a      	sub	sp, #40	@ 0x28
 8021368:	af00      	add	r7, sp, #0
 802136a:	60f8      	str	r0, [r7, #12]
 802136c:	60b9      	str	r1, [r7, #8]
 802136e:	0019      	movs	r1, r3
 8021370:	1dbb      	adds	r3, r7, #6
 8021372:	801a      	strh	r2, [r3, #0]
 8021374:	1d3b      	adds	r3, r7, #4
 8021376:	1c0a      	adds	r2, r1, #0
 8021378:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 802137a:	1d3b      	adds	r3, r7, #4
 802137c:	881b      	ldrh	r3, [r3, #0]
 802137e:	085b      	lsrs	r3, r3, #1
 8021380:	b29b      	uxth	r3, r3
 8021382:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8021384:	68fb      	ldr	r3, [r7, #12]
 8021386:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8021388:	68bb      	ldr	r3, [r7, #8]
 802138a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 802138c:	1dbb      	adds	r3, r7, #6
 802138e:	881a      	ldrh	r2, [r3, #0]
 8021390:	697b      	ldr	r3, [r7, #20]
 8021392:	18d3      	adds	r3, r2, r3
 8021394:	2280      	movs	r2, #128	@ 0x80
 8021396:	00d2      	lsls	r2, r2, #3
 8021398:	4694      	mov	ip, r2
 802139a:	4463      	add	r3, ip
 802139c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 802139e:	69bb      	ldr	r3, [r7, #24]
 80213a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80213a2:	e018      	b.n	80213d6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80213a4:	6a3b      	ldr	r3, [r7, #32]
 80213a6:	881b      	ldrh	r3, [r3, #0]
 80213a8:	b29b      	uxth	r3, r3
 80213aa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80213ac:	6a3b      	ldr	r3, [r7, #32]
 80213ae:	3302      	adds	r3, #2
 80213b0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80213b2:	693b      	ldr	r3, [r7, #16]
 80213b4:	b2da      	uxtb	r2, r3
 80213b6:	69fb      	ldr	r3, [r7, #28]
 80213b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80213ba:	69fb      	ldr	r3, [r7, #28]
 80213bc:	3301      	adds	r3, #1
 80213be:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80213c0:	693b      	ldr	r3, [r7, #16]
 80213c2:	0a1b      	lsrs	r3, r3, #8
 80213c4:	b2da      	uxtb	r2, r3
 80213c6:	69fb      	ldr	r3, [r7, #28]
 80213c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80213ca:	69fb      	ldr	r3, [r7, #28]
 80213cc:	3301      	adds	r3, #1
 80213ce:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80213d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213d2:	3b01      	subs	r3, #1
 80213d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80213d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213d8:	2b00      	cmp	r3, #0
 80213da:	d1e3      	bne.n	80213a4 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80213dc:	1d3b      	adds	r3, r7, #4
 80213de:	881b      	ldrh	r3, [r3, #0]
 80213e0:	2201      	movs	r2, #1
 80213e2:	4013      	ands	r3, r2
 80213e4:	b29b      	uxth	r3, r3
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d007      	beq.n	80213fa <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80213ea:	6a3b      	ldr	r3, [r7, #32]
 80213ec:	881b      	ldrh	r3, [r3, #0]
 80213ee:	b29b      	uxth	r3, r3
 80213f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80213f2:	693b      	ldr	r3, [r7, #16]
 80213f4:	b2da      	uxtb	r2, r3
 80213f6:	69fb      	ldr	r3, [r7, #28]
 80213f8:	701a      	strb	r2, [r3, #0]
  }
}
 80213fa:	46c0      	nop			@ (mov r8, r8)
 80213fc:	46bd      	mov	sp, r7
 80213fe:	b00a      	add	sp, #40	@ 0x28
 8021400:	bd80      	pop	{r7, pc}

08021402 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021402:	b580      	push	{r7, lr}
 8021404:	b084      	sub	sp, #16
 8021406:	af00      	add	r7, sp, #0
 8021408:	6078      	str	r0, [r7, #4]
 802140a:	000a      	movs	r2, r1
 802140c:	1cfb      	adds	r3, r7, #3
 802140e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8021410:	230f      	movs	r3, #15
 8021412:	18fb      	adds	r3, r7, r3
 8021414:	2200      	movs	r2, #0
 8021416:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021418:	687b      	ldr	r3, [r7, #4]
 802141a:	7c1b      	ldrb	r3, [r3, #16]
 802141c:	2b00      	cmp	r3, #0
 802141e:	d116      	bne.n	802144e <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8021420:	2380      	movs	r3, #128	@ 0x80
 8021422:	009b      	lsls	r3, r3, #2
 8021424:	6878      	ldr	r0, [r7, #4]
 8021426:	2202      	movs	r2, #2
 8021428:	2181      	movs	r1, #129	@ 0x81
 802142a:	f002 f8f8 	bl	802361e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802142e:	687b      	ldr	r3, [r7, #4]
 8021430:	2201      	movs	r2, #1
 8021432:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021434:	2380      	movs	r3, #128	@ 0x80
 8021436:	009b      	lsls	r3, r3, #2
 8021438:	6878      	ldr	r0, [r7, #4]
 802143a:	2202      	movs	r2, #2
 802143c:	2101      	movs	r1, #1
 802143e:	f002 f8ee 	bl	802361e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8021442:	687a      	ldr	r2, [r7, #4]
 8021444:	23b6      	movs	r3, #182	@ 0xb6
 8021446:	005b      	lsls	r3, r3, #1
 8021448:	2101      	movs	r1, #1
 802144a:	50d1      	str	r1, [r2, r3]
 802144c:	e013      	b.n	8021476 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 802144e:	6878      	ldr	r0, [r7, #4]
 8021450:	2340      	movs	r3, #64	@ 0x40
 8021452:	2202      	movs	r2, #2
 8021454:	2181      	movs	r1, #129	@ 0x81
 8021456:	f002 f8e2 	bl	802361e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	2201      	movs	r2, #1
 802145e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021460:	6878      	ldr	r0, [r7, #4]
 8021462:	2340      	movs	r3, #64	@ 0x40
 8021464:	2202      	movs	r2, #2
 8021466:	2101      	movs	r1, #1
 8021468:	f002 f8d9 	bl	802361e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 802146c:	687a      	ldr	r2, [r7, #4]
 802146e:	23b6      	movs	r3, #182	@ 0xb6
 8021470:	005b      	lsls	r3, r3, #1
 8021472:	2101      	movs	r1, #1
 8021474:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8021476:	6878      	ldr	r0, [r7, #4]
 8021478:	2308      	movs	r3, #8
 802147a:	2203      	movs	r2, #3
 802147c:	2182      	movs	r1, #130	@ 0x82
 802147e:	f002 f8ce 	bl	802361e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	2201      	movs	r2, #1
 8021486:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8021488:	2387      	movs	r3, #135	@ 0x87
 802148a:	009b      	lsls	r3, r3, #2
 802148c:	0018      	movs	r0, r3
 802148e:	f002 fa5f 	bl	8023950 <USBD_static_malloc>
 8021492:	0001      	movs	r1, r0
 8021494:	687a      	ldr	r2, [r7, #4]
 8021496:	23ae      	movs	r3, #174	@ 0xae
 8021498:	009b      	lsls	r3, r3, #2
 802149a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 802149c:	687a      	ldr	r2, [r7, #4]
 802149e:	23ae      	movs	r3, #174	@ 0xae
 80214a0:	009b      	lsls	r3, r3, #2
 80214a2:	58d3      	ldr	r3, [r2, r3]
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	d104      	bne.n	80214b2 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80214a8:	230f      	movs	r3, #15
 80214aa:	18fb      	adds	r3, r7, r3
 80214ac:	2201      	movs	r2, #1
 80214ae:	701a      	strb	r2, [r3, #0]
 80214b0:	e02c      	b.n	802150c <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80214b2:	687a      	ldr	r2, [r7, #4]
 80214b4:	23ae      	movs	r3, #174	@ 0xae
 80214b6:	009b      	lsls	r3, r3, #2
 80214b8:	58d3      	ldr	r3, [r2, r3]
 80214ba:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80214bc:	687a      	ldr	r2, [r7, #4]
 80214be:	23af      	movs	r3, #175	@ 0xaf
 80214c0:	009b      	lsls	r3, r3, #2
 80214c2:	58d3      	ldr	r3, [r2, r3]
 80214c4:	681b      	ldr	r3, [r3, #0]
 80214c6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80214c8:	68ba      	ldr	r2, [r7, #8]
 80214ca:	2385      	movs	r3, #133	@ 0x85
 80214cc:	009b      	lsls	r3, r3, #2
 80214ce:	2100      	movs	r1, #0
 80214d0:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80214d2:	68ba      	ldr	r2, [r7, #8]
 80214d4:	2386      	movs	r3, #134	@ 0x86
 80214d6:	009b      	lsls	r3, r3, #2
 80214d8:	2100      	movs	r1, #0
 80214da:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80214dc:	687b      	ldr	r3, [r7, #4]
 80214de:	7c1b      	ldrb	r3, [r3, #16]
 80214e0:	2b00      	cmp	r3, #0
 80214e2:	d10a      	bne.n	80214fa <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80214e4:	68ba      	ldr	r2, [r7, #8]
 80214e6:	2381      	movs	r3, #129	@ 0x81
 80214e8:	009b      	lsls	r3, r3, #2
 80214ea:	58d2      	ldr	r2, [r2, r3]
 80214ec:	2380      	movs	r3, #128	@ 0x80
 80214ee:	009b      	lsls	r3, r3, #2
 80214f0:	6878      	ldr	r0, [r7, #4]
 80214f2:	2101      	movs	r1, #1
 80214f4:	f002 f9de 	bl	80238b4 <USBD_LL_PrepareReceive>
 80214f8:	e008      	b.n	802150c <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80214fa:	68ba      	ldr	r2, [r7, #8]
 80214fc:	2381      	movs	r3, #129	@ 0x81
 80214fe:	009b      	lsls	r3, r3, #2
 8021500:	58d2      	ldr	r2, [r2, r3]
 8021502:	6878      	ldr	r0, [r7, #4]
 8021504:	2340      	movs	r3, #64	@ 0x40
 8021506:	2101      	movs	r1, #1
 8021508:	f002 f9d4 	bl	80238b4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 802150c:	230f      	movs	r3, #15
 802150e:	18fb      	adds	r3, r7, r3
 8021510:	781b      	ldrb	r3, [r3, #0]
}
 8021512:	0018      	movs	r0, r3
 8021514:	46bd      	mov	sp, r7
 8021516:	b004      	add	sp, #16
 8021518:	bd80      	pop	{r7, pc}

0802151a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802151a:	b580      	push	{r7, lr}
 802151c:	b084      	sub	sp, #16
 802151e:	af00      	add	r7, sp, #0
 8021520:	6078      	str	r0, [r7, #4]
 8021522:	000a      	movs	r2, r1
 8021524:	1cfb      	adds	r3, r7, #3
 8021526:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8021528:	230f      	movs	r3, #15
 802152a:	18fb      	adds	r3, r7, r3
 802152c:	2200      	movs	r2, #0
 802152e:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8021530:	687b      	ldr	r3, [r7, #4]
 8021532:	2181      	movs	r1, #129	@ 0x81
 8021534:	0018      	movs	r0, r3
 8021536:	f002 f8a9 	bl	802368c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	2200      	movs	r2, #0
 802153e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8021540:	687b      	ldr	r3, [r7, #4]
 8021542:	2101      	movs	r1, #1
 8021544:	0018      	movs	r0, r3
 8021546:	f002 f8a1 	bl	802368c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 802154a:	687a      	ldr	r2, [r7, #4]
 802154c:	23b6      	movs	r3, #182	@ 0xb6
 802154e:	005b      	lsls	r3, r3, #1
 8021550:	2100      	movs	r1, #0
 8021552:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8021554:	687b      	ldr	r3, [r7, #4]
 8021556:	2182      	movs	r1, #130	@ 0x82
 8021558:	0018      	movs	r0, r3
 802155a:	f002 f897 	bl	802368c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 802155e:	687b      	ldr	r3, [r7, #4]
 8021560:	2200      	movs	r2, #0
 8021562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8021564:	687a      	ldr	r2, [r7, #4]
 8021566:	23ae      	movs	r3, #174	@ 0xae
 8021568:	009b      	lsls	r3, r3, #2
 802156a:	58d3      	ldr	r3, [r2, r3]
 802156c:	2b00      	cmp	r3, #0
 802156e:	d011      	beq.n	8021594 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8021570:	687a      	ldr	r2, [r7, #4]
 8021572:	23af      	movs	r3, #175	@ 0xaf
 8021574:	009b      	lsls	r3, r3, #2
 8021576:	58d3      	ldr	r3, [r2, r3]
 8021578:	685b      	ldr	r3, [r3, #4]
 802157a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 802157c:	687a      	ldr	r2, [r7, #4]
 802157e:	23ae      	movs	r3, #174	@ 0xae
 8021580:	009b      	lsls	r3, r3, #2
 8021582:	58d3      	ldr	r3, [r2, r3]
 8021584:	0018      	movs	r0, r3
 8021586:	f002 f9ef 	bl	8023968 <USBD_static_free>
    pdev->pClassData = NULL;
 802158a:	687a      	ldr	r2, [r7, #4]
 802158c:	23ae      	movs	r3, #174	@ 0xae
 802158e:	009b      	lsls	r3, r3, #2
 8021590:	2100      	movs	r1, #0
 8021592:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8021594:	230f      	movs	r3, #15
 8021596:	18fb      	adds	r3, r7, r3
 8021598:	781b      	ldrb	r3, [r3, #0]
}
 802159a:	0018      	movs	r0, r3
 802159c:	46bd      	mov	sp, r7
 802159e:	b004      	add	sp, #16
 80215a0:	bd80      	pop	{r7, pc}
	...

080215a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80215a4:	b580      	push	{r7, lr}
 80215a6:	b086      	sub	sp, #24
 80215a8:	af00      	add	r7, sp, #0
 80215aa:	6078      	str	r0, [r7, #4]
 80215ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80215ae:	687a      	ldr	r2, [r7, #4]
 80215b0:	23ae      	movs	r3, #174	@ 0xae
 80215b2:	009b      	lsls	r3, r3, #2
 80215b4:	58d3      	ldr	r3, [r2, r3]
 80215b6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80215b8:	230f      	movs	r3, #15
 80215ba:	18fb      	adds	r3, r7, r3
 80215bc:	2200      	movs	r2, #0
 80215be:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80215c0:	230c      	movs	r3, #12
 80215c2:	18fb      	adds	r3, r7, r3
 80215c4:	2200      	movs	r2, #0
 80215c6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80215c8:	2317      	movs	r3, #23
 80215ca:	18fb      	adds	r3, r7, r3
 80215cc:	2200      	movs	r2, #0
 80215ce:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80215d0:	683b      	ldr	r3, [r7, #0]
 80215d2:	781b      	ldrb	r3, [r3, #0]
 80215d4:	001a      	movs	r2, r3
 80215d6:	2360      	movs	r3, #96	@ 0x60
 80215d8:	4013      	ands	r3, r2
 80215da:	d03d      	beq.n	8021658 <USBD_CDC_Setup+0xb4>
 80215dc:	2b20      	cmp	r3, #32
 80215de:	d000      	beq.n	80215e2 <USBD_CDC_Setup+0x3e>
 80215e0:	e094      	b.n	802170c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80215e2:	683b      	ldr	r3, [r7, #0]
 80215e4:	88db      	ldrh	r3, [r3, #6]
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	d02b      	beq.n	8021642 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80215ea:	683b      	ldr	r3, [r7, #0]
 80215ec:	781b      	ldrb	r3, [r3, #0]
 80215ee:	b25b      	sxtb	r3, r3
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	da12      	bge.n	802161a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80215f4:	687a      	ldr	r2, [r7, #4]
 80215f6:	23af      	movs	r3, #175	@ 0xaf
 80215f8:	009b      	lsls	r3, r3, #2
 80215fa:	58d3      	ldr	r3, [r2, r3]
 80215fc:	689b      	ldr	r3, [r3, #8]
 80215fe:	683a      	ldr	r2, [r7, #0]
 8021600:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8021602:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8021604:	683a      	ldr	r2, [r7, #0]
 8021606:	88d2      	ldrh	r2, [r2, #6]
 8021608:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 802160a:	6939      	ldr	r1, [r7, #16]
 802160c:	683b      	ldr	r3, [r7, #0]
 802160e:	88da      	ldrh	r2, [r3, #6]
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	0018      	movs	r0, r3
 8021614:	f001 fbaf 	bl	8022d76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8021618:	e083      	b.n	8021722 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 802161a:	683b      	ldr	r3, [r7, #0]
 802161c:	7859      	ldrb	r1, [r3, #1]
 802161e:	693a      	ldr	r2, [r7, #16]
 8021620:	2380      	movs	r3, #128	@ 0x80
 8021622:	009b      	lsls	r3, r3, #2
 8021624:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8021626:	683b      	ldr	r3, [r7, #0]
 8021628:	88db      	ldrh	r3, [r3, #6]
 802162a:	b2d9      	uxtb	r1, r3
 802162c:	693b      	ldr	r3, [r7, #16]
 802162e:	4a40      	ldr	r2, [pc, #256]	@ (8021730 <USBD_CDC_Setup+0x18c>)
 8021630:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8021632:	6939      	ldr	r1, [r7, #16]
 8021634:	683b      	ldr	r3, [r7, #0]
 8021636:	88da      	ldrh	r2, [r3, #6]
 8021638:	687b      	ldr	r3, [r7, #4]
 802163a:	0018      	movs	r0, r3
 802163c:	f001 fbce 	bl	8022ddc <USBD_CtlPrepareRx>
      break;
 8021640:	e06f      	b.n	8021722 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8021642:	687a      	ldr	r2, [r7, #4]
 8021644:	23af      	movs	r3, #175	@ 0xaf
 8021646:	009b      	lsls	r3, r3, #2
 8021648:	58d3      	ldr	r3, [r2, r3]
 802164a:	689b      	ldr	r3, [r3, #8]
 802164c:	683a      	ldr	r2, [r7, #0]
 802164e:	7850      	ldrb	r0, [r2, #1]
 8021650:	6839      	ldr	r1, [r7, #0]
 8021652:	2200      	movs	r2, #0
 8021654:	4798      	blx	r3
      break;
 8021656:	e064      	b.n	8021722 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021658:	683b      	ldr	r3, [r7, #0]
 802165a:	785b      	ldrb	r3, [r3, #1]
 802165c:	2b0b      	cmp	r3, #11
 802165e:	d037      	beq.n	80216d0 <USBD_CDC_Setup+0x12c>
 8021660:	dc47      	bgt.n	80216f2 <USBD_CDC_Setup+0x14e>
 8021662:	2b00      	cmp	r3, #0
 8021664:	d002      	beq.n	802166c <USBD_CDC_Setup+0xc8>
 8021666:	2b0a      	cmp	r3, #10
 8021668:	d019      	beq.n	802169e <USBD_CDC_Setup+0xfa>
 802166a:	e042      	b.n	80216f2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802166c:	687a      	ldr	r2, [r7, #4]
 802166e:	23a7      	movs	r3, #167	@ 0xa7
 8021670:	009b      	lsls	r3, r3, #2
 8021672:	5cd3      	ldrb	r3, [r2, r3]
 8021674:	2b03      	cmp	r3, #3
 8021676:	d107      	bne.n	8021688 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8021678:	230c      	movs	r3, #12
 802167a:	18f9      	adds	r1, r7, r3
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	2202      	movs	r2, #2
 8021680:	0018      	movs	r0, r3
 8021682:	f001 fb78 	bl	8022d76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8021686:	e040      	b.n	802170a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8021688:	683a      	ldr	r2, [r7, #0]
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	0011      	movs	r1, r2
 802168e:	0018      	movs	r0, r3
 8021690:	f001 faf3 	bl	8022c7a <USBD_CtlError>
            ret = USBD_FAIL;
 8021694:	2317      	movs	r3, #23
 8021696:	18fb      	adds	r3, r7, r3
 8021698:	2202      	movs	r2, #2
 802169a:	701a      	strb	r2, [r3, #0]
          break;
 802169c:	e035      	b.n	802170a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802169e:	687a      	ldr	r2, [r7, #4]
 80216a0:	23a7      	movs	r3, #167	@ 0xa7
 80216a2:	009b      	lsls	r3, r3, #2
 80216a4:	5cd3      	ldrb	r3, [r2, r3]
 80216a6:	2b03      	cmp	r3, #3
 80216a8:	d107      	bne.n	80216ba <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80216aa:	230f      	movs	r3, #15
 80216ac:	18f9      	adds	r1, r7, r3
 80216ae:	687b      	ldr	r3, [r7, #4]
 80216b0:	2201      	movs	r2, #1
 80216b2:	0018      	movs	r0, r3
 80216b4:	f001 fb5f 	bl	8022d76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80216b8:	e027      	b.n	802170a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80216ba:	683a      	ldr	r2, [r7, #0]
 80216bc:	687b      	ldr	r3, [r7, #4]
 80216be:	0011      	movs	r1, r2
 80216c0:	0018      	movs	r0, r3
 80216c2:	f001 fada 	bl	8022c7a <USBD_CtlError>
            ret = USBD_FAIL;
 80216c6:	2317      	movs	r3, #23
 80216c8:	18fb      	adds	r3, r7, r3
 80216ca:	2202      	movs	r2, #2
 80216cc:	701a      	strb	r2, [r3, #0]
          break;
 80216ce:	e01c      	b.n	802170a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80216d0:	687a      	ldr	r2, [r7, #4]
 80216d2:	23a7      	movs	r3, #167	@ 0xa7
 80216d4:	009b      	lsls	r3, r3, #2
 80216d6:	5cd3      	ldrb	r3, [r2, r3]
 80216d8:	2b03      	cmp	r3, #3
 80216da:	d015      	beq.n	8021708 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80216dc:	683a      	ldr	r2, [r7, #0]
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	0011      	movs	r1, r2
 80216e2:	0018      	movs	r0, r3
 80216e4:	f001 fac9 	bl	8022c7a <USBD_CtlError>
            ret = USBD_FAIL;
 80216e8:	2317      	movs	r3, #23
 80216ea:	18fb      	adds	r3, r7, r3
 80216ec:	2202      	movs	r2, #2
 80216ee:	701a      	strb	r2, [r3, #0]
          }
          break;
 80216f0:	e00a      	b.n	8021708 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80216f2:	683a      	ldr	r2, [r7, #0]
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	0011      	movs	r1, r2
 80216f8:	0018      	movs	r0, r3
 80216fa:	f001 fabe 	bl	8022c7a <USBD_CtlError>
          ret = USBD_FAIL;
 80216fe:	2317      	movs	r3, #23
 8021700:	18fb      	adds	r3, r7, r3
 8021702:	2202      	movs	r2, #2
 8021704:	701a      	strb	r2, [r3, #0]
          break;
 8021706:	e000      	b.n	802170a <USBD_CDC_Setup+0x166>
          break;
 8021708:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 802170a:	e00a      	b.n	8021722 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 802170c:	683a      	ldr	r2, [r7, #0]
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	0011      	movs	r1, r2
 8021712:	0018      	movs	r0, r3
 8021714:	f001 fab1 	bl	8022c7a <USBD_CtlError>
      ret = USBD_FAIL;
 8021718:	2317      	movs	r3, #23
 802171a:	18fb      	adds	r3, r7, r3
 802171c:	2202      	movs	r2, #2
 802171e:	701a      	strb	r2, [r3, #0]
      break;
 8021720:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021722:	2317      	movs	r3, #23
 8021724:	18fb      	adds	r3, r7, r3
 8021726:	781b      	ldrb	r3, [r3, #0]
}
 8021728:	0018      	movs	r0, r3
 802172a:	46bd      	mov	sp, r7
 802172c:	b006      	add	sp, #24
 802172e:	bd80      	pop	{r7, pc}
 8021730:	00000201 	.word	0x00000201

08021734 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021734:	b580      	push	{r7, lr}
 8021736:	b084      	sub	sp, #16
 8021738:	af00      	add	r7, sp, #0
 802173a:	6078      	str	r0, [r7, #4]
 802173c:	000a      	movs	r2, r1
 802173e:	1cfb      	adds	r3, r7, #3
 8021740:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8021742:	687a      	ldr	r2, [r7, #4]
 8021744:	23ae      	movs	r3, #174	@ 0xae
 8021746:	009b      	lsls	r3, r3, #2
 8021748:	58d3      	ldr	r3, [r2, r3]
 802174a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 802174c:	687a      	ldr	r2, [r7, #4]
 802174e:	23b0      	movs	r3, #176	@ 0xb0
 8021750:	009b      	lsls	r3, r3, #2
 8021752:	58d3      	ldr	r3, [r2, r3]
 8021754:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8021756:	687a      	ldr	r2, [r7, #4]
 8021758:	23ae      	movs	r3, #174	@ 0xae
 802175a:	009b      	lsls	r3, r3, #2
 802175c:	58d3      	ldr	r3, [r2, r3]
 802175e:	2b00      	cmp	r3, #0
 8021760:	d03e      	beq.n	80217e0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8021762:	1cfb      	adds	r3, r7, #3
 8021764:	781a      	ldrb	r2, [r3, #0]
 8021766:	6879      	ldr	r1, [r7, #4]
 8021768:	0013      	movs	r3, r2
 802176a:	009b      	lsls	r3, r3, #2
 802176c:	189b      	adds	r3, r3, r2
 802176e:	009b      	lsls	r3, r3, #2
 8021770:	18cb      	adds	r3, r1, r3
 8021772:	331c      	adds	r3, #28
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	2b00      	cmp	r3, #0
 8021778:	d02b      	beq.n	80217d2 <USBD_CDC_DataIn+0x9e>
 802177a:	1cfb      	adds	r3, r7, #3
 802177c:	781a      	ldrb	r2, [r3, #0]
 802177e:	6879      	ldr	r1, [r7, #4]
 8021780:	0013      	movs	r3, r2
 8021782:	009b      	lsls	r3, r3, #2
 8021784:	189b      	adds	r3, r3, r2
 8021786:	009b      	lsls	r3, r3, #2
 8021788:	18cb      	adds	r3, r1, r3
 802178a:	331c      	adds	r3, #28
 802178c:	6818      	ldr	r0, [r3, #0]
 802178e:	1cfb      	adds	r3, r7, #3
 8021790:	781a      	ldrb	r2, [r3, #0]
 8021792:	68b9      	ldr	r1, [r7, #8]
 8021794:	0013      	movs	r3, r2
 8021796:	009b      	lsls	r3, r3, #2
 8021798:	189b      	adds	r3, r3, r2
 802179a:	00db      	lsls	r3, r3, #3
 802179c:	18cb      	adds	r3, r1, r3
 802179e:	3338      	adds	r3, #56	@ 0x38
 80217a0:	681b      	ldr	r3, [r3, #0]
 80217a2:	0019      	movs	r1, r3
 80217a4:	f7de fd84 	bl	80002b0 <__aeabi_uidivmod>
 80217a8:	1e0b      	subs	r3, r1, #0
 80217aa:	d112      	bne.n	80217d2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80217ac:	1cfb      	adds	r3, r7, #3
 80217ae:	781a      	ldrb	r2, [r3, #0]
 80217b0:	6879      	ldr	r1, [r7, #4]
 80217b2:	0013      	movs	r3, r2
 80217b4:	009b      	lsls	r3, r3, #2
 80217b6:	189b      	adds	r3, r3, r2
 80217b8:	009b      	lsls	r3, r3, #2
 80217ba:	18cb      	adds	r3, r1, r3
 80217bc:	331c      	adds	r3, #28
 80217be:	2200      	movs	r2, #0
 80217c0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80217c2:	1cfb      	adds	r3, r7, #3
 80217c4:	7819      	ldrb	r1, [r3, #0]
 80217c6:	6878      	ldr	r0, [r7, #4]
 80217c8:	2300      	movs	r3, #0
 80217ca:	2200      	movs	r2, #0
 80217cc:	f002 f83b 	bl	8023846 <USBD_LL_Transmit>
 80217d0:	e004      	b.n	80217dc <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80217d2:	68fa      	ldr	r2, [r7, #12]
 80217d4:	2385      	movs	r3, #133	@ 0x85
 80217d6:	009b      	lsls	r3, r3, #2
 80217d8:	2100      	movs	r1, #0
 80217da:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80217dc:	2300      	movs	r3, #0
 80217de:	e000      	b.n	80217e2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80217e0:	2302      	movs	r3, #2
  }
}
 80217e2:	0018      	movs	r0, r3
 80217e4:	46bd      	mov	sp, r7
 80217e6:	b004      	add	sp, #16
 80217e8:	bd80      	pop	{r7, pc}

080217ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80217ea:	b580      	push	{r7, lr}
 80217ec:	b084      	sub	sp, #16
 80217ee:	af00      	add	r7, sp, #0
 80217f0:	6078      	str	r0, [r7, #4]
 80217f2:	000a      	movs	r2, r1
 80217f4:	1cfb      	adds	r3, r7, #3
 80217f6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80217f8:	687a      	ldr	r2, [r7, #4]
 80217fa:	23ae      	movs	r3, #174	@ 0xae
 80217fc:	009b      	lsls	r3, r3, #2
 80217fe:	58d3      	ldr	r3, [r2, r3]
 8021800:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8021802:	1cfb      	adds	r3, r7, #3
 8021804:	781a      	ldrb	r2, [r3, #0]
 8021806:	687b      	ldr	r3, [r7, #4]
 8021808:	0011      	movs	r1, r2
 802180a:	0018      	movs	r0, r3
 802180c:	f002 f889 	bl	8023922 <USBD_LL_GetRxDataSize>
 8021810:	0001      	movs	r1, r0
 8021812:	68fa      	ldr	r2, [r7, #12]
 8021814:	2383      	movs	r3, #131	@ 0x83
 8021816:	009b      	lsls	r3, r3, #2
 8021818:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 802181a:	687a      	ldr	r2, [r7, #4]
 802181c:	23ae      	movs	r3, #174	@ 0xae
 802181e:	009b      	lsls	r3, r3, #2
 8021820:	58d3      	ldr	r3, [r2, r3]
 8021822:	2b00      	cmp	r3, #0
 8021824:	d011      	beq.n	802184a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8021826:	687a      	ldr	r2, [r7, #4]
 8021828:	23af      	movs	r3, #175	@ 0xaf
 802182a:	009b      	lsls	r3, r3, #2
 802182c:	58d3      	ldr	r3, [r2, r3]
 802182e:	68da      	ldr	r2, [r3, #12]
 8021830:	68f9      	ldr	r1, [r7, #12]
 8021832:	2381      	movs	r3, #129	@ 0x81
 8021834:	009b      	lsls	r3, r3, #2
 8021836:	58c8      	ldr	r0, [r1, r3]
 8021838:	68fb      	ldr	r3, [r7, #12]
 802183a:	2183      	movs	r1, #131	@ 0x83
 802183c:	0089      	lsls	r1, r1, #2
 802183e:	468c      	mov	ip, r1
 8021840:	4463      	add	r3, ip
 8021842:	0019      	movs	r1, r3
 8021844:	4790      	blx	r2

    return USBD_OK;
 8021846:	2300      	movs	r3, #0
 8021848:	e000      	b.n	802184c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 802184a:	2302      	movs	r3, #2
  }
}
 802184c:	0018      	movs	r0, r3
 802184e:	46bd      	mov	sp, r7
 8021850:	b004      	add	sp, #16
 8021852:	bd80      	pop	{r7, pc}

08021854 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8021854:	b590      	push	{r4, r7, lr}
 8021856:	b085      	sub	sp, #20
 8021858:	af00      	add	r7, sp, #0
 802185a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802185c:	687a      	ldr	r2, [r7, #4]
 802185e:	23ae      	movs	r3, #174	@ 0xae
 8021860:	009b      	lsls	r3, r3, #2
 8021862:	58d3      	ldr	r3, [r2, r3]
 8021864:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8021866:	687a      	ldr	r2, [r7, #4]
 8021868:	23af      	movs	r3, #175	@ 0xaf
 802186a:	009b      	lsls	r3, r3, #2
 802186c:	58d3      	ldr	r3, [r2, r3]
 802186e:	2b00      	cmp	r3, #0
 8021870:	d018      	beq.n	80218a4 <USBD_CDC_EP0_RxReady+0x50>
 8021872:	68fa      	ldr	r2, [r7, #12]
 8021874:	2380      	movs	r3, #128	@ 0x80
 8021876:	009b      	lsls	r3, r3, #2
 8021878:	5cd3      	ldrb	r3, [r2, r3]
 802187a:	2bff      	cmp	r3, #255	@ 0xff
 802187c:	d012      	beq.n	80218a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 802187e:	687a      	ldr	r2, [r7, #4]
 8021880:	23af      	movs	r3, #175	@ 0xaf
 8021882:	009b      	lsls	r3, r3, #2
 8021884:	58d3      	ldr	r3, [r2, r3]
 8021886:	689b      	ldr	r3, [r3, #8]
 8021888:	68f9      	ldr	r1, [r7, #12]
 802188a:	2280      	movs	r2, #128	@ 0x80
 802188c:	0092      	lsls	r2, r2, #2
 802188e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8021890:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8021892:	68fa      	ldr	r2, [r7, #12]
 8021894:	4c06      	ldr	r4, [pc, #24]	@ (80218b0 <USBD_CDC_EP0_RxReady+0x5c>)
 8021896:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021898:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 802189a:	68fa      	ldr	r2, [r7, #12]
 802189c:	2380      	movs	r3, #128	@ 0x80
 802189e:	009b      	lsls	r3, r3, #2
 80218a0:	21ff      	movs	r1, #255	@ 0xff
 80218a2:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80218a4:	2300      	movs	r3, #0
}
 80218a6:	0018      	movs	r0, r3
 80218a8:	46bd      	mov	sp, r7
 80218aa:	b005      	add	sp, #20
 80218ac:	bd90      	pop	{r4, r7, pc}
 80218ae:	46c0      	nop			@ (mov r8, r8)
 80218b0:	00000201 	.word	0x00000201

080218b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80218b4:	b580      	push	{r7, lr}
 80218b6:	b082      	sub	sp, #8
 80218b8:	af00      	add	r7, sp, #0
 80218ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80218bc:	687b      	ldr	r3, [r7, #4]
 80218be:	2243      	movs	r2, #67	@ 0x43
 80218c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80218c2:	4b02      	ldr	r3, [pc, #8]	@ (80218cc <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80218c4:	0018      	movs	r0, r3
 80218c6:	46bd      	mov	sp, r7
 80218c8:	b002      	add	sp, #8
 80218ca:	bd80      	pop	{r7, pc}
 80218cc:	2000018c 	.word	0x2000018c

080218d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80218d0:	b580      	push	{r7, lr}
 80218d2:	b082      	sub	sp, #8
 80218d4:	af00      	add	r7, sp, #0
 80218d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	2243      	movs	r2, #67	@ 0x43
 80218dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80218de:	4b02      	ldr	r3, [pc, #8]	@ (80218e8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80218e0:	0018      	movs	r0, r3
 80218e2:	46bd      	mov	sp, r7
 80218e4:	b002      	add	sp, #8
 80218e6:	bd80      	pop	{r7, pc}
 80218e8:	20000148 	.word	0x20000148

080218ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80218ec:	b580      	push	{r7, lr}
 80218ee:	b082      	sub	sp, #8
 80218f0:	af00      	add	r7, sp, #0
 80218f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80218f4:	687b      	ldr	r3, [r7, #4]
 80218f6:	2243      	movs	r2, #67	@ 0x43
 80218f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80218fa:	4b02      	ldr	r3, [pc, #8]	@ (8021904 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80218fc:	0018      	movs	r0, r3
 80218fe:	46bd      	mov	sp, r7
 8021900:	b002      	add	sp, #8
 8021902:	bd80      	pop	{r7, pc}
 8021904:	200001d0 	.word	0x200001d0

08021908 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8021908:	b580      	push	{r7, lr}
 802190a:	b082      	sub	sp, #8
 802190c:	af00      	add	r7, sp, #0
 802190e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	220a      	movs	r2, #10
 8021914:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8021916:	4b02      	ldr	r3, [pc, #8]	@ (8021920 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8021918:	0018      	movs	r0, r3
 802191a:	46bd      	mov	sp, r7
 802191c:	b002      	add	sp, #8
 802191e:	bd80      	pop	{r7, pc}
 8021920:	20000104 	.word	0x20000104

08021924 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8021924:	b580      	push	{r7, lr}
 8021926:	b084      	sub	sp, #16
 8021928:	af00      	add	r7, sp, #0
 802192a:	6078      	str	r0, [r7, #4]
 802192c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 802192e:	200f      	movs	r0, #15
 8021930:	183b      	adds	r3, r7, r0
 8021932:	2202      	movs	r2, #2
 8021934:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8021936:	683b      	ldr	r3, [r7, #0]
 8021938:	2b00      	cmp	r3, #0
 802193a:	d007      	beq.n	802194c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 802193c:	687a      	ldr	r2, [r7, #4]
 802193e:	23af      	movs	r3, #175	@ 0xaf
 8021940:	009b      	lsls	r3, r3, #2
 8021942:	6839      	ldr	r1, [r7, #0]
 8021944:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8021946:	183b      	adds	r3, r7, r0
 8021948:	2200      	movs	r2, #0
 802194a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 802194c:	230f      	movs	r3, #15
 802194e:	18fb      	adds	r3, r7, r3
 8021950:	781b      	ldrb	r3, [r3, #0]
}
 8021952:	0018      	movs	r0, r3
 8021954:	46bd      	mov	sp, r7
 8021956:	b004      	add	sp, #16
 8021958:	bd80      	pop	{r7, pc}

0802195a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 802195a:	b580      	push	{r7, lr}
 802195c:	b086      	sub	sp, #24
 802195e:	af00      	add	r7, sp, #0
 8021960:	60f8      	str	r0, [r7, #12]
 8021962:	60b9      	str	r1, [r7, #8]
 8021964:	1dbb      	adds	r3, r7, #6
 8021966:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021968:	68fa      	ldr	r2, [r7, #12]
 802196a:	23ae      	movs	r3, #174	@ 0xae
 802196c:	009b      	lsls	r3, r3, #2
 802196e:	58d3      	ldr	r3, [r2, r3]
 8021970:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8021972:	697a      	ldr	r2, [r7, #20]
 8021974:	2382      	movs	r3, #130	@ 0x82
 8021976:	009b      	lsls	r3, r3, #2
 8021978:	68b9      	ldr	r1, [r7, #8]
 802197a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 802197c:	1dbb      	adds	r3, r7, #6
 802197e:	8819      	ldrh	r1, [r3, #0]
 8021980:	697a      	ldr	r2, [r7, #20]
 8021982:	2384      	movs	r3, #132	@ 0x84
 8021984:	009b      	lsls	r3, r3, #2
 8021986:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021988:	2300      	movs	r3, #0
}
 802198a:	0018      	movs	r0, r3
 802198c:	46bd      	mov	sp, r7
 802198e:	b006      	add	sp, #24
 8021990:	bd80      	pop	{r7, pc}

08021992 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8021992:	b580      	push	{r7, lr}
 8021994:	b084      	sub	sp, #16
 8021996:	af00      	add	r7, sp, #0
 8021998:	6078      	str	r0, [r7, #4]
 802199a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802199c:	687a      	ldr	r2, [r7, #4]
 802199e:	23ae      	movs	r3, #174	@ 0xae
 80219a0:	009b      	lsls	r3, r3, #2
 80219a2:	58d3      	ldr	r3, [r2, r3]
 80219a4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80219a6:	68fa      	ldr	r2, [r7, #12]
 80219a8:	2381      	movs	r3, #129	@ 0x81
 80219aa:	009b      	lsls	r3, r3, #2
 80219ac:	6839      	ldr	r1, [r7, #0]
 80219ae:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80219b0:	2300      	movs	r3, #0
}
 80219b2:	0018      	movs	r0, r3
 80219b4:	46bd      	mov	sp, r7
 80219b6:	b004      	add	sp, #16
 80219b8:	bd80      	pop	{r7, pc}

080219ba <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80219ba:	b580      	push	{r7, lr}
 80219bc:	b084      	sub	sp, #16
 80219be:	af00      	add	r7, sp, #0
 80219c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80219c2:	687a      	ldr	r2, [r7, #4]
 80219c4:	23ae      	movs	r3, #174	@ 0xae
 80219c6:	009b      	lsls	r3, r3, #2
 80219c8:	58d3      	ldr	r3, [r2, r3]
 80219ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80219cc:	687a      	ldr	r2, [r7, #4]
 80219ce:	23ae      	movs	r3, #174	@ 0xae
 80219d0:	009b      	lsls	r3, r3, #2
 80219d2:	58d3      	ldr	r3, [r2, r3]
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	d022      	beq.n	8021a1e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80219d8:	68fa      	ldr	r2, [r7, #12]
 80219da:	2385      	movs	r3, #133	@ 0x85
 80219dc:	009b      	lsls	r3, r3, #2
 80219de:	58d3      	ldr	r3, [r2, r3]
 80219e0:	2b00      	cmp	r3, #0
 80219e2:	d11a      	bne.n	8021a1a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80219e4:	68fa      	ldr	r2, [r7, #12]
 80219e6:	2385      	movs	r3, #133	@ 0x85
 80219e8:	009b      	lsls	r3, r3, #2
 80219ea:	2101      	movs	r1, #1
 80219ec:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80219ee:	68fa      	ldr	r2, [r7, #12]
 80219f0:	2384      	movs	r3, #132	@ 0x84
 80219f2:	009b      	lsls	r3, r3, #2
 80219f4:	58d2      	ldr	r2, [r2, r3]
 80219f6:	687b      	ldr	r3, [r7, #4]
 80219f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80219fa:	68fa      	ldr	r2, [r7, #12]
 80219fc:	2382      	movs	r3, #130	@ 0x82
 80219fe:	009b      	lsls	r3, r3, #2
 8021a00:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8021a02:	68fa      	ldr	r2, [r7, #12]
 8021a04:	2384      	movs	r3, #132	@ 0x84
 8021a06:	009b      	lsls	r3, r3, #2
 8021a08:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021a0a:	b29b      	uxth	r3, r3
 8021a0c:	6878      	ldr	r0, [r7, #4]
 8021a0e:	000a      	movs	r2, r1
 8021a10:	2181      	movs	r1, #129	@ 0x81
 8021a12:	f001 ff18 	bl	8023846 <USBD_LL_Transmit>

      return USBD_OK;
 8021a16:	2300      	movs	r3, #0
 8021a18:	e002      	b.n	8021a20 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8021a1a:	2301      	movs	r3, #1
 8021a1c:	e000      	b.n	8021a20 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8021a1e:	2302      	movs	r3, #2
  }
}
 8021a20:	0018      	movs	r0, r3
 8021a22:	46bd      	mov	sp, r7
 8021a24:	b004      	add	sp, #16
 8021a26:	bd80      	pop	{r7, pc}

08021a28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8021a28:	b580      	push	{r7, lr}
 8021a2a:	b084      	sub	sp, #16
 8021a2c:	af00      	add	r7, sp, #0
 8021a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021a30:	687a      	ldr	r2, [r7, #4]
 8021a32:	23ae      	movs	r3, #174	@ 0xae
 8021a34:	009b      	lsls	r3, r3, #2
 8021a36:	58d3      	ldr	r3, [r2, r3]
 8021a38:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8021a3a:	687a      	ldr	r2, [r7, #4]
 8021a3c:	23ae      	movs	r3, #174	@ 0xae
 8021a3e:	009b      	lsls	r3, r3, #2
 8021a40:	58d3      	ldr	r3, [r2, r3]
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d019      	beq.n	8021a7a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021a46:	687b      	ldr	r3, [r7, #4]
 8021a48:	7c1b      	ldrb	r3, [r3, #16]
 8021a4a:	2b00      	cmp	r3, #0
 8021a4c:	d10a      	bne.n	8021a64 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021a4e:	68fa      	ldr	r2, [r7, #12]
 8021a50:	2381      	movs	r3, #129	@ 0x81
 8021a52:	009b      	lsls	r3, r3, #2
 8021a54:	58d2      	ldr	r2, [r2, r3]
 8021a56:	2380      	movs	r3, #128	@ 0x80
 8021a58:	009b      	lsls	r3, r3, #2
 8021a5a:	6878      	ldr	r0, [r7, #4]
 8021a5c:	2101      	movs	r1, #1
 8021a5e:	f001 ff29 	bl	80238b4 <USBD_LL_PrepareReceive>
 8021a62:	e008      	b.n	8021a76 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021a64:	68fa      	ldr	r2, [r7, #12]
 8021a66:	2381      	movs	r3, #129	@ 0x81
 8021a68:	009b      	lsls	r3, r3, #2
 8021a6a:	58d2      	ldr	r2, [r2, r3]
 8021a6c:	6878      	ldr	r0, [r7, #4]
 8021a6e:	2340      	movs	r3, #64	@ 0x40
 8021a70:	2101      	movs	r1, #1
 8021a72:	f001 ff1f 	bl	80238b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8021a76:	2300      	movs	r3, #0
 8021a78:	e000      	b.n	8021a7c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8021a7a:	2302      	movs	r3, #2
  }
}
 8021a7c:	0018      	movs	r0, r3
 8021a7e:	46bd      	mov	sp, r7
 8021a80:	b004      	add	sp, #16
 8021a82:	bd80      	pop	{r7, pc}

08021a84 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021a84:	b580      	push	{r7, lr}
 8021a86:	b084      	sub	sp, #16
 8021a88:	af00      	add	r7, sp, #0
 8021a8a:	60f8      	str	r0, [r7, #12]
 8021a8c:	60b9      	str	r1, [r7, #8]
 8021a8e:	1dfb      	adds	r3, r7, #7
 8021a90:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021a92:	68fb      	ldr	r3, [r7, #12]
 8021a94:	2b00      	cmp	r3, #0
 8021a96:	d101      	bne.n	8021a9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021a98:	2302      	movs	r3, #2
 8021a9a:	e020      	b.n	8021ade <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021a9c:	68fa      	ldr	r2, [r7, #12]
 8021a9e:	23ad      	movs	r3, #173	@ 0xad
 8021aa0:	009b      	lsls	r3, r3, #2
 8021aa2:	58d3      	ldr	r3, [r2, r3]
 8021aa4:	2b00      	cmp	r3, #0
 8021aa6:	d004      	beq.n	8021ab2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8021aa8:	68fa      	ldr	r2, [r7, #12]
 8021aaa:	23ad      	movs	r3, #173	@ 0xad
 8021aac:	009b      	lsls	r3, r3, #2
 8021aae:	2100      	movs	r1, #0
 8021ab0:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021ab2:	68bb      	ldr	r3, [r7, #8]
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	d004      	beq.n	8021ac2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021ab8:	68fa      	ldr	r2, [r7, #12]
 8021aba:	23ac      	movs	r3, #172	@ 0xac
 8021abc:	009b      	lsls	r3, r3, #2
 8021abe:	68b9      	ldr	r1, [r7, #8]
 8021ac0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021ac2:	68fa      	ldr	r2, [r7, #12]
 8021ac4:	23a7      	movs	r3, #167	@ 0xa7
 8021ac6:	009b      	lsls	r3, r3, #2
 8021ac8:	2101      	movs	r1, #1
 8021aca:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8021acc:	68fb      	ldr	r3, [r7, #12]
 8021ace:	1dfa      	adds	r2, r7, #7
 8021ad0:	7812      	ldrb	r2, [r2, #0]
 8021ad2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8021ad4:	68fb      	ldr	r3, [r7, #12]
 8021ad6:	0018      	movs	r0, r3
 8021ad8:	f001 fd18 	bl	802350c <USBD_LL_Init>

  return USBD_OK;
 8021adc:	2300      	movs	r3, #0
}
 8021ade:	0018      	movs	r0, r3
 8021ae0:	46bd      	mov	sp, r7
 8021ae2:	b004      	add	sp, #16
 8021ae4:	bd80      	pop	{r7, pc}

08021ae6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021ae6:	b580      	push	{r7, lr}
 8021ae8:	b084      	sub	sp, #16
 8021aea:	af00      	add	r7, sp, #0
 8021aec:	6078      	str	r0, [r7, #4]
 8021aee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8021af0:	200f      	movs	r0, #15
 8021af2:	183b      	adds	r3, r7, r0
 8021af4:	2200      	movs	r2, #0
 8021af6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8021af8:	683b      	ldr	r3, [r7, #0]
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d008      	beq.n	8021b10 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8021afe:	687a      	ldr	r2, [r7, #4]
 8021b00:	23ad      	movs	r3, #173	@ 0xad
 8021b02:	009b      	lsls	r3, r3, #2
 8021b04:	6839      	ldr	r1, [r7, #0]
 8021b06:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8021b08:	183b      	adds	r3, r7, r0
 8021b0a:	2200      	movs	r2, #0
 8021b0c:	701a      	strb	r2, [r3, #0]
 8021b0e:	e003      	b.n	8021b18 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8021b10:	230f      	movs	r3, #15
 8021b12:	18fb      	adds	r3, r7, r3
 8021b14:	2202      	movs	r2, #2
 8021b16:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8021b18:	230f      	movs	r3, #15
 8021b1a:	18fb      	adds	r3, r7, r3
 8021b1c:	781b      	ldrb	r3, [r3, #0]
}
 8021b1e:	0018      	movs	r0, r3
 8021b20:	46bd      	mov	sp, r7
 8021b22:	b004      	add	sp, #16
 8021b24:	bd80      	pop	{r7, pc}

08021b26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021b26:	b580      	push	{r7, lr}
 8021b28:	b082      	sub	sp, #8
 8021b2a:	af00      	add	r7, sp, #0
 8021b2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	0018      	movs	r0, r3
 8021b32:	f001 fd4f 	bl	80235d4 <USBD_LL_Start>

  return USBD_OK;
 8021b36:	2300      	movs	r3, #0
}
 8021b38:	0018      	movs	r0, r3
 8021b3a:	46bd      	mov	sp, r7
 8021b3c:	b002      	add	sp, #8
 8021b3e:	bd80      	pop	{r7, pc}

08021b40 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021b40:	b580      	push	{r7, lr}
 8021b42:	b082      	sub	sp, #8
 8021b44:	af00      	add	r7, sp, #0
 8021b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021b48:	2300      	movs	r3, #0
}
 8021b4a:	0018      	movs	r0, r3
 8021b4c:	46bd      	mov	sp, r7
 8021b4e:	b002      	add	sp, #8
 8021b50:	bd80      	pop	{r7, pc}

08021b52 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021b52:	b590      	push	{r4, r7, lr}
 8021b54:	b085      	sub	sp, #20
 8021b56:	af00      	add	r7, sp, #0
 8021b58:	6078      	str	r0, [r7, #4]
 8021b5a:	000a      	movs	r2, r1
 8021b5c:	1cfb      	adds	r3, r7, #3
 8021b5e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021b60:	240f      	movs	r4, #15
 8021b62:	193b      	adds	r3, r7, r4
 8021b64:	2202      	movs	r2, #2
 8021b66:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8021b68:	687a      	ldr	r2, [r7, #4]
 8021b6a:	23ad      	movs	r3, #173	@ 0xad
 8021b6c:	009b      	lsls	r3, r3, #2
 8021b6e:	58d3      	ldr	r3, [r2, r3]
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	d00e      	beq.n	8021b92 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021b74:	687a      	ldr	r2, [r7, #4]
 8021b76:	23ad      	movs	r3, #173	@ 0xad
 8021b78:	009b      	lsls	r3, r3, #2
 8021b7a:	58d3      	ldr	r3, [r2, r3]
 8021b7c:	681b      	ldr	r3, [r3, #0]
 8021b7e:	1cfa      	adds	r2, r7, #3
 8021b80:	7811      	ldrb	r1, [r2, #0]
 8021b82:	687a      	ldr	r2, [r7, #4]
 8021b84:	0010      	movs	r0, r2
 8021b86:	4798      	blx	r3
 8021b88:	1e03      	subs	r3, r0, #0
 8021b8a:	d102      	bne.n	8021b92 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021b8c:	193b      	adds	r3, r7, r4
 8021b8e:	2200      	movs	r2, #0
 8021b90:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8021b92:	230f      	movs	r3, #15
 8021b94:	18fb      	adds	r3, r7, r3
 8021b96:	781b      	ldrb	r3, [r3, #0]
}
 8021b98:	0018      	movs	r0, r3
 8021b9a:	46bd      	mov	sp, r7
 8021b9c:	b005      	add	sp, #20
 8021b9e:	bd90      	pop	{r4, r7, pc}

08021ba0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021ba0:	b580      	push	{r7, lr}
 8021ba2:	b082      	sub	sp, #8
 8021ba4:	af00      	add	r7, sp, #0
 8021ba6:	6078      	str	r0, [r7, #4]
 8021ba8:	000a      	movs	r2, r1
 8021baa:	1cfb      	adds	r3, r7, #3
 8021bac:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021bae:	687a      	ldr	r2, [r7, #4]
 8021bb0:	23ad      	movs	r3, #173	@ 0xad
 8021bb2:	009b      	lsls	r3, r3, #2
 8021bb4:	58d3      	ldr	r3, [r2, r3]
 8021bb6:	685b      	ldr	r3, [r3, #4]
 8021bb8:	1cfa      	adds	r2, r7, #3
 8021bba:	7811      	ldrb	r1, [r2, #0]
 8021bbc:	687a      	ldr	r2, [r7, #4]
 8021bbe:	0010      	movs	r0, r2
 8021bc0:	4798      	blx	r3

  return USBD_OK;
 8021bc2:	2300      	movs	r3, #0
}
 8021bc4:	0018      	movs	r0, r3
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	b002      	add	sp, #8
 8021bca:	bd80      	pop	{r7, pc}

08021bcc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021bcc:	b580      	push	{r7, lr}
 8021bce:	b082      	sub	sp, #8
 8021bd0:	af00      	add	r7, sp, #0
 8021bd2:	6078      	str	r0, [r7, #4]
 8021bd4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	22aa      	movs	r2, #170	@ 0xaa
 8021bda:	0092      	lsls	r2, r2, #2
 8021bdc:	4694      	mov	ip, r2
 8021bde:	4463      	add	r3, ip
 8021be0:	683a      	ldr	r2, [r7, #0]
 8021be2:	0011      	movs	r1, r2
 8021be4:	0018      	movs	r0, r3
 8021be6:	f001 f810 	bl	8022c0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021bea:	687a      	ldr	r2, [r7, #4]
 8021bec:	23a5      	movs	r3, #165	@ 0xa5
 8021bee:	009b      	lsls	r3, r3, #2
 8021bf0:	2101      	movs	r1, #1
 8021bf2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8021bf4:	687b      	ldr	r3, [r7, #4]
 8021bf6:	4a23      	ldr	r2, [pc, #140]	@ (8021c84 <USBD_LL_SetupStage+0xb8>)
 8021bf8:	5a9b      	ldrh	r3, [r3, r2]
 8021bfa:	0019      	movs	r1, r3
 8021bfc:	687a      	ldr	r2, [r7, #4]
 8021bfe:	23a6      	movs	r3, #166	@ 0xa6
 8021c00:	009b      	lsls	r3, r3, #2
 8021c02:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021c04:	687a      	ldr	r2, [r7, #4]
 8021c06:	23aa      	movs	r3, #170	@ 0xaa
 8021c08:	009b      	lsls	r3, r3, #2
 8021c0a:	5cd3      	ldrb	r3, [r2, r3]
 8021c0c:	001a      	movs	r2, r3
 8021c0e:	231f      	movs	r3, #31
 8021c10:	4013      	ands	r3, r2
 8021c12:	2b02      	cmp	r3, #2
 8021c14:	d019      	beq.n	8021c4a <USBD_LL_SetupStage+0x7e>
 8021c16:	d822      	bhi.n	8021c5e <USBD_LL_SetupStage+0x92>
 8021c18:	2b00      	cmp	r3, #0
 8021c1a:	d002      	beq.n	8021c22 <USBD_LL_SetupStage+0x56>
 8021c1c:	2b01      	cmp	r3, #1
 8021c1e:	d00a      	beq.n	8021c36 <USBD_LL_SetupStage+0x6a>
 8021c20:	e01d      	b.n	8021c5e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	22aa      	movs	r2, #170	@ 0xaa
 8021c26:	0092      	lsls	r2, r2, #2
 8021c28:	189a      	adds	r2, r3, r2
 8021c2a:	687b      	ldr	r3, [r7, #4]
 8021c2c:	0011      	movs	r1, r2
 8021c2e:	0018      	movs	r0, r3
 8021c30:	f000 fa10 	bl	8022054 <USBD_StdDevReq>
      break;
 8021c34:	e020      	b.n	8021c78 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8021c36:	687b      	ldr	r3, [r7, #4]
 8021c38:	22aa      	movs	r2, #170	@ 0xaa
 8021c3a:	0092      	lsls	r2, r2, #2
 8021c3c:	189a      	adds	r2, r3, r2
 8021c3e:	687b      	ldr	r3, [r7, #4]
 8021c40:	0011      	movs	r1, r2
 8021c42:	0018      	movs	r0, r3
 8021c44:	f000 fa78 	bl	8022138 <USBD_StdItfReq>
      break;
 8021c48:	e016      	b.n	8021c78 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8021c4a:	687b      	ldr	r3, [r7, #4]
 8021c4c:	22aa      	movs	r2, #170	@ 0xaa
 8021c4e:	0092      	lsls	r2, r2, #2
 8021c50:	189a      	adds	r2, r3, r2
 8021c52:	687b      	ldr	r3, [r7, #4]
 8021c54:	0011      	movs	r1, r2
 8021c56:	0018      	movs	r0, r3
 8021c58:	f000 fac5 	bl	80221e6 <USBD_StdEPReq>
      break;
 8021c5c:	e00c      	b.n	8021c78 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021c5e:	687a      	ldr	r2, [r7, #4]
 8021c60:	23aa      	movs	r3, #170	@ 0xaa
 8021c62:	009b      	lsls	r3, r3, #2
 8021c64:	5cd3      	ldrb	r3, [r2, r3]
 8021c66:	227f      	movs	r2, #127	@ 0x7f
 8021c68:	4393      	bics	r3, r2
 8021c6a:	b2da      	uxtb	r2, r3
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	0011      	movs	r1, r2
 8021c70:	0018      	movs	r0, r3
 8021c72:	f001 fd36 	bl	80236e2 <USBD_LL_StallEP>
      break;
 8021c76:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021c78:	2300      	movs	r3, #0
}
 8021c7a:	0018      	movs	r0, r3
 8021c7c:	46bd      	mov	sp, r7
 8021c7e:	b002      	add	sp, #8
 8021c80:	bd80      	pop	{r7, pc}
 8021c82:	46c0      	nop			@ (mov r8, r8)
 8021c84:	000002ae 	.word	0x000002ae

08021c88 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021c88:	b580      	push	{r7, lr}
 8021c8a:	b086      	sub	sp, #24
 8021c8c:	af00      	add	r7, sp, #0
 8021c8e:	60f8      	str	r0, [r7, #12]
 8021c90:	607a      	str	r2, [r7, #4]
 8021c92:	200b      	movs	r0, #11
 8021c94:	183b      	adds	r3, r7, r0
 8021c96:	1c0a      	adds	r2, r1, #0
 8021c98:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021c9a:	183b      	adds	r3, r7, r0
 8021c9c:	781b      	ldrb	r3, [r3, #0]
 8021c9e:	2b00      	cmp	r3, #0
 8021ca0:	d154      	bne.n	8021d4c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8021ca2:	68fb      	ldr	r3, [r7, #12]
 8021ca4:	3355      	adds	r3, #85	@ 0x55
 8021ca6:	33ff      	adds	r3, #255	@ 0xff
 8021ca8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021caa:	68fa      	ldr	r2, [r7, #12]
 8021cac:	23a5      	movs	r3, #165	@ 0xa5
 8021cae:	009b      	lsls	r3, r3, #2
 8021cb0:	58d3      	ldr	r3, [r2, r3]
 8021cb2:	2b03      	cmp	r3, #3
 8021cb4:	d139      	bne.n	8021d2a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8021cb6:	697b      	ldr	r3, [r7, #20]
 8021cb8:	68da      	ldr	r2, [r3, #12]
 8021cba:	697b      	ldr	r3, [r7, #20]
 8021cbc:	691b      	ldr	r3, [r3, #16]
 8021cbe:	429a      	cmp	r2, r3
 8021cc0:	d919      	bls.n	8021cf6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8021cc2:	697b      	ldr	r3, [r7, #20]
 8021cc4:	68da      	ldr	r2, [r3, #12]
 8021cc6:	697b      	ldr	r3, [r7, #20]
 8021cc8:	691b      	ldr	r3, [r3, #16]
 8021cca:	1ad2      	subs	r2, r2, r3
 8021ccc:	697b      	ldr	r3, [r7, #20]
 8021cce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021cd0:	697b      	ldr	r3, [r7, #20]
 8021cd2:	68da      	ldr	r2, [r3, #12]
 8021cd4:	697b      	ldr	r3, [r7, #20]
 8021cd6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021cd8:	429a      	cmp	r2, r3
 8021cda:	d203      	bcs.n	8021ce4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021cdc:	697b      	ldr	r3, [r7, #20]
 8021cde:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8021ce0:	b29b      	uxth	r3, r3
 8021ce2:	e002      	b.n	8021cea <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021ce4:	697b      	ldr	r3, [r7, #20]
 8021ce6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021ce8:	b29b      	uxth	r3, r3
 8021cea:	6879      	ldr	r1, [r7, #4]
 8021cec:	68f8      	ldr	r0, [r7, #12]
 8021cee:	001a      	movs	r2, r3
 8021cf0:	f001 f898 	bl	8022e24 <USBD_CtlContinueRx>
 8021cf4:	e045      	b.n	8021d82 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021cf6:	68fa      	ldr	r2, [r7, #12]
 8021cf8:	23ad      	movs	r3, #173	@ 0xad
 8021cfa:	009b      	lsls	r3, r3, #2
 8021cfc:	58d3      	ldr	r3, [r2, r3]
 8021cfe:	691b      	ldr	r3, [r3, #16]
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	d00d      	beq.n	8021d20 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021d04:	68fa      	ldr	r2, [r7, #12]
 8021d06:	23a7      	movs	r3, #167	@ 0xa7
 8021d08:	009b      	lsls	r3, r3, #2
 8021d0a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021d0c:	2b03      	cmp	r3, #3
 8021d0e:	d107      	bne.n	8021d20 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8021d10:	68fa      	ldr	r2, [r7, #12]
 8021d12:	23ad      	movs	r3, #173	@ 0xad
 8021d14:	009b      	lsls	r3, r3, #2
 8021d16:	58d3      	ldr	r3, [r2, r3]
 8021d18:	691b      	ldr	r3, [r3, #16]
 8021d1a:	68fa      	ldr	r2, [r7, #12]
 8021d1c:	0010      	movs	r0, r2
 8021d1e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8021d20:	68fb      	ldr	r3, [r7, #12]
 8021d22:	0018      	movs	r0, r3
 8021d24:	f001 f891 	bl	8022e4a <USBD_CtlSendStatus>
 8021d28:	e02b      	b.n	8021d82 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8021d2a:	68fa      	ldr	r2, [r7, #12]
 8021d2c:	23a5      	movs	r3, #165	@ 0xa5
 8021d2e:	009b      	lsls	r3, r3, #2
 8021d30:	58d3      	ldr	r3, [r2, r3]
 8021d32:	2b05      	cmp	r3, #5
 8021d34:	d125      	bne.n	8021d82 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8021d36:	68fa      	ldr	r2, [r7, #12]
 8021d38:	23a5      	movs	r3, #165	@ 0xa5
 8021d3a:	009b      	lsls	r3, r3, #2
 8021d3c:	2100      	movs	r1, #0
 8021d3e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8021d40:	68fb      	ldr	r3, [r7, #12]
 8021d42:	2100      	movs	r1, #0
 8021d44:	0018      	movs	r0, r3
 8021d46:	f001 fccc 	bl	80236e2 <USBD_LL_StallEP>
 8021d4a:	e01a      	b.n	8021d82 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8021d4c:	68fa      	ldr	r2, [r7, #12]
 8021d4e:	23ad      	movs	r3, #173	@ 0xad
 8021d50:	009b      	lsls	r3, r3, #2
 8021d52:	58d3      	ldr	r3, [r2, r3]
 8021d54:	699b      	ldr	r3, [r3, #24]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d011      	beq.n	8021d7e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021d5a:	68fa      	ldr	r2, [r7, #12]
 8021d5c:	23a7      	movs	r3, #167	@ 0xa7
 8021d5e:	009b      	lsls	r3, r3, #2
 8021d60:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8021d62:	2b03      	cmp	r3, #3
 8021d64:	d10b      	bne.n	8021d7e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8021d66:	68fa      	ldr	r2, [r7, #12]
 8021d68:	23ad      	movs	r3, #173	@ 0xad
 8021d6a:	009b      	lsls	r3, r3, #2
 8021d6c:	58d3      	ldr	r3, [r2, r3]
 8021d6e:	699b      	ldr	r3, [r3, #24]
 8021d70:	220b      	movs	r2, #11
 8021d72:	18ba      	adds	r2, r7, r2
 8021d74:	7811      	ldrb	r1, [r2, #0]
 8021d76:	68fa      	ldr	r2, [r7, #12]
 8021d78:	0010      	movs	r0, r2
 8021d7a:	4798      	blx	r3
 8021d7c:	e001      	b.n	8021d82 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021d7e:	2302      	movs	r3, #2
 8021d80:	e000      	b.n	8021d84 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8021d82:	2300      	movs	r3, #0
}
 8021d84:	0018      	movs	r0, r3
 8021d86:	46bd      	mov	sp, r7
 8021d88:	b006      	add	sp, #24
 8021d8a:	bd80      	pop	{r7, pc}

08021d8c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021d8c:	b580      	push	{r7, lr}
 8021d8e:	b086      	sub	sp, #24
 8021d90:	af00      	add	r7, sp, #0
 8021d92:	60f8      	str	r0, [r7, #12]
 8021d94:	607a      	str	r2, [r7, #4]
 8021d96:	200b      	movs	r0, #11
 8021d98:	183b      	adds	r3, r7, r0
 8021d9a:	1c0a      	adds	r2, r1, #0
 8021d9c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021d9e:	183b      	adds	r3, r7, r0
 8021da0:	781b      	ldrb	r3, [r3, #0]
 8021da2:	2b00      	cmp	r3, #0
 8021da4:	d000      	beq.n	8021da8 <USBD_LL_DataInStage+0x1c>
 8021da6:	e08e      	b.n	8021ec6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8021da8:	68fb      	ldr	r3, [r7, #12]
 8021daa:	3314      	adds	r3, #20
 8021dac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021dae:	68fa      	ldr	r2, [r7, #12]
 8021db0:	23a5      	movs	r3, #165	@ 0xa5
 8021db2:	009b      	lsls	r3, r3, #2
 8021db4:	58d3      	ldr	r3, [r2, r3]
 8021db6:	2b02      	cmp	r3, #2
 8021db8:	d164      	bne.n	8021e84 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8021dba:	697b      	ldr	r3, [r7, #20]
 8021dbc:	68da      	ldr	r2, [r3, #12]
 8021dbe:	697b      	ldr	r3, [r7, #20]
 8021dc0:	691b      	ldr	r3, [r3, #16]
 8021dc2:	429a      	cmp	r2, r3
 8021dc4:	d915      	bls.n	8021df2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8021dc6:	697b      	ldr	r3, [r7, #20]
 8021dc8:	68da      	ldr	r2, [r3, #12]
 8021dca:	697b      	ldr	r3, [r7, #20]
 8021dcc:	691b      	ldr	r3, [r3, #16]
 8021dce:	1ad2      	subs	r2, r2, r3
 8021dd0:	697b      	ldr	r3, [r7, #20]
 8021dd2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8021dd4:	697b      	ldr	r3, [r7, #20]
 8021dd6:	68db      	ldr	r3, [r3, #12]
 8021dd8:	b29a      	uxth	r2, r3
 8021dda:	6879      	ldr	r1, [r7, #4]
 8021ddc:	68fb      	ldr	r3, [r7, #12]
 8021dde:	0018      	movs	r0, r3
 8021de0:	f000 ffe9 	bl	8022db6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021de4:	68f8      	ldr	r0, [r7, #12]
 8021de6:	2300      	movs	r3, #0
 8021de8:	2200      	movs	r2, #0
 8021dea:	2100      	movs	r1, #0
 8021dec:	f001 fd62 	bl	80238b4 <USBD_LL_PrepareReceive>
 8021df0:	e059      	b.n	8021ea6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021df2:	697b      	ldr	r3, [r7, #20]
 8021df4:	689a      	ldr	r2, [r3, #8]
 8021df6:	697b      	ldr	r3, [r7, #20]
 8021df8:	691b      	ldr	r3, [r3, #16]
 8021dfa:	0019      	movs	r1, r3
 8021dfc:	0010      	movs	r0, r2
 8021dfe:	f7de fa57 	bl	80002b0 <__aeabi_uidivmod>
 8021e02:	1e0b      	subs	r3, r1, #0
 8021e04:	d11f      	bne.n	8021e46 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8021e06:	697b      	ldr	r3, [r7, #20]
 8021e08:	689a      	ldr	r2, [r3, #8]
 8021e0a:	697b      	ldr	r3, [r7, #20]
 8021e0c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021e0e:	429a      	cmp	r2, r3
 8021e10:	d319      	bcc.n	8021e46 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8021e12:	697b      	ldr	r3, [r7, #20]
 8021e14:	689a      	ldr	r2, [r3, #8]
 8021e16:	68f9      	ldr	r1, [r7, #12]
 8021e18:	23a6      	movs	r3, #166	@ 0xa6
 8021e1a:	009b      	lsls	r3, r3, #2
 8021e1c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8021e1e:	429a      	cmp	r2, r3
 8021e20:	d211      	bcs.n	8021e46 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021e22:	68fb      	ldr	r3, [r7, #12]
 8021e24:	2200      	movs	r2, #0
 8021e26:	2100      	movs	r1, #0
 8021e28:	0018      	movs	r0, r3
 8021e2a:	f000 ffc4 	bl	8022db6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021e2e:	68fa      	ldr	r2, [r7, #12]
 8021e30:	23a6      	movs	r3, #166	@ 0xa6
 8021e32:	009b      	lsls	r3, r3, #2
 8021e34:	2100      	movs	r1, #0
 8021e36:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021e38:	68f8      	ldr	r0, [r7, #12]
 8021e3a:	2300      	movs	r3, #0
 8021e3c:	2200      	movs	r2, #0
 8021e3e:	2100      	movs	r1, #0
 8021e40:	f001 fd38 	bl	80238b4 <USBD_LL_PrepareReceive>
 8021e44:	e02f      	b.n	8021ea6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021e46:	68fa      	ldr	r2, [r7, #12]
 8021e48:	23ad      	movs	r3, #173	@ 0xad
 8021e4a:	009b      	lsls	r3, r3, #2
 8021e4c:	58d3      	ldr	r3, [r2, r3]
 8021e4e:	68db      	ldr	r3, [r3, #12]
 8021e50:	2b00      	cmp	r3, #0
 8021e52:	d00d      	beq.n	8021e70 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021e54:	68fa      	ldr	r2, [r7, #12]
 8021e56:	23a7      	movs	r3, #167	@ 0xa7
 8021e58:	009b      	lsls	r3, r3, #2
 8021e5a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021e5c:	2b03      	cmp	r3, #3
 8021e5e:	d107      	bne.n	8021e70 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8021e60:	68fa      	ldr	r2, [r7, #12]
 8021e62:	23ad      	movs	r3, #173	@ 0xad
 8021e64:	009b      	lsls	r3, r3, #2
 8021e66:	58d3      	ldr	r3, [r2, r3]
 8021e68:	68db      	ldr	r3, [r3, #12]
 8021e6a:	68fa      	ldr	r2, [r7, #12]
 8021e6c:	0010      	movs	r0, r2
 8021e6e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8021e70:	68fb      	ldr	r3, [r7, #12]
 8021e72:	2180      	movs	r1, #128	@ 0x80
 8021e74:	0018      	movs	r0, r3
 8021e76:	f001 fc34 	bl	80236e2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8021e7a:	68fb      	ldr	r3, [r7, #12]
 8021e7c:	0018      	movs	r0, r3
 8021e7e:	f000 fff8 	bl	8022e72 <USBD_CtlReceiveStatus>
 8021e82:	e010      	b.n	8021ea6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021e84:	68fa      	ldr	r2, [r7, #12]
 8021e86:	23a5      	movs	r3, #165	@ 0xa5
 8021e88:	009b      	lsls	r3, r3, #2
 8021e8a:	58d3      	ldr	r3, [r2, r3]
 8021e8c:	2b04      	cmp	r3, #4
 8021e8e:	d005      	beq.n	8021e9c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8021e90:	68fa      	ldr	r2, [r7, #12]
 8021e92:	23a5      	movs	r3, #165	@ 0xa5
 8021e94:	009b      	lsls	r3, r3, #2
 8021e96:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021e98:	2b00      	cmp	r3, #0
 8021e9a:	d104      	bne.n	8021ea6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8021e9c:	68fb      	ldr	r3, [r7, #12]
 8021e9e:	2180      	movs	r1, #128	@ 0x80
 8021ea0:	0018      	movs	r0, r3
 8021ea2:	f001 fc1e 	bl	80236e2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8021ea6:	68fa      	ldr	r2, [r7, #12]
 8021ea8:	23a8      	movs	r3, #168	@ 0xa8
 8021eaa:	009b      	lsls	r3, r3, #2
 8021eac:	5cd3      	ldrb	r3, [r2, r3]
 8021eae:	2b01      	cmp	r3, #1
 8021eb0:	d124      	bne.n	8021efc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8021eb2:	68fb      	ldr	r3, [r7, #12]
 8021eb4:	0018      	movs	r0, r3
 8021eb6:	f7ff fe43 	bl	8021b40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021eba:	68fa      	ldr	r2, [r7, #12]
 8021ebc:	23a8      	movs	r3, #168	@ 0xa8
 8021ebe:	009b      	lsls	r3, r3, #2
 8021ec0:	2100      	movs	r1, #0
 8021ec2:	54d1      	strb	r1, [r2, r3]
 8021ec4:	e01a      	b.n	8021efc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8021ec6:	68fa      	ldr	r2, [r7, #12]
 8021ec8:	23ad      	movs	r3, #173	@ 0xad
 8021eca:	009b      	lsls	r3, r3, #2
 8021ecc:	58d3      	ldr	r3, [r2, r3]
 8021ece:	695b      	ldr	r3, [r3, #20]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d011      	beq.n	8021ef8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021ed4:	68fa      	ldr	r2, [r7, #12]
 8021ed6:	23a7      	movs	r3, #167	@ 0xa7
 8021ed8:	009b      	lsls	r3, r3, #2
 8021eda:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8021edc:	2b03      	cmp	r3, #3
 8021ede:	d10b      	bne.n	8021ef8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8021ee0:	68fa      	ldr	r2, [r7, #12]
 8021ee2:	23ad      	movs	r3, #173	@ 0xad
 8021ee4:	009b      	lsls	r3, r3, #2
 8021ee6:	58d3      	ldr	r3, [r2, r3]
 8021ee8:	695b      	ldr	r3, [r3, #20]
 8021eea:	220b      	movs	r2, #11
 8021eec:	18ba      	adds	r2, r7, r2
 8021eee:	7811      	ldrb	r1, [r2, #0]
 8021ef0:	68fa      	ldr	r2, [r7, #12]
 8021ef2:	0010      	movs	r0, r2
 8021ef4:	4798      	blx	r3
 8021ef6:	e001      	b.n	8021efc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021ef8:	2302      	movs	r3, #2
 8021efa:	e000      	b.n	8021efe <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8021efc:	2300      	movs	r3, #0
}
 8021efe:	0018      	movs	r0, r3
 8021f00:	46bd      	mov	sp, r7
 8021f02:	b006      	add	sp, #24
 8021f04:	bd80      	pop	{r7, pc}

08021f06 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021f06:	b580      	push	{r7, lr}
 8021f08:	b082      	sub	sp, #8
 8021f0a:	af00      	add	r7, sp, #0
 8021f0c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021f0e:	6878      	ldr	r0, [r7, #4]
 8021f10:	2340      	movs	r3, #64	@ 0x40
 8021f12:	2200      	movs	r2, #0
 8021f14:	2100      	movs	r1, #0
 8021f16:	f001 fb82 	bl	802361e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021f1a:	687a      	ldr	r2, [r7, #4]
 8021f1c:	23ac      	movs	r3, #172	@ 0xac
 8021f1e:	005b      	lsls	r3, r3, #1
 8021f20:	2101      	movs	r1, #1
 8021f22:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021f24:	687a      	ldr	r2, [r7, #4]
 8021f26:	23b2      	movs	r3, #178	@ 0xb2
 8021f28:	005b      	lsls	r3, r3, #1
 8021f2a:	2140      	movs	r1, #64	@ 0x40
 8021f2c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021f2e:	6878      	ldr	r0, [r7, #4]
 8021f30:	2340      	movs	r3, #64	@ 0x40
 8021f32:	2200      	movs	r2, #0
 8021f34:	2180      	movs	r1, #128	@ 0x80
 8021f36:	f001 fb72 	bl	802361e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	2201      	movs	r2, #1
 8021f3e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021f40:	687b      	ldr	r3, [r7, #4]
 8021f42:	2240      	movs	r2, #64	@ 0x40
 8021f44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021f46:	687a      	ldr	r2, [r7, #4]
 8021f48:	23a7      	movs	r3, #167	@ 0xa7
 8021f4a:	009b      	lsls	r3, r3, #2
 8021f4c:	2101      	movs	r1, #1
 8021f4e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8021f50:	687a      	ldr	r2, [r7, #4]
 8021f52:	23a5      	movs	r3, #165	@ 0xa5
 8021f54:	009b      	lsls	r3, r3, #2
 8021f56:	2100      	movs	r1, #0
 8021f58:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	2200      	movs	r2, #0
 8021f5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021f60:	687a      	ldr	r2, [r7, #4]
 8021f62:	23a9      	movs	r3, #169	@ 0xa9
 8021f64:	009b      	lsls	r3, r3, #2
 8021f66:	2100      	movs	r1, #0
 8021f68:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8021f6a:	687a      	ldr	r2, [r7, #4]
 8021f6c:	23ae      	movs	r3, #174	@ 0xae
 8021f6e:	009b      	lsls	r3, r3, #2
 8021f70:	58d3      	ldr	r3, [r2, r3]
 8021f72:	2b00      	cmp	r3, #0
 8021f74:	d00a      	beq.n	8021f8c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021f76:	687a      	ldr	r2, [r7, #4]
 8021f78:	23ad      	movs	r3, #173	@ 0xad
 8021f7a:	009b      	lsls	r3, r3, #2
 8021f7c:	58d3      	ldr	r3, [r2, r3]
 8021f7e:	685a      	ldr	r2, [r3, #4]
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	685b      	ldr	r3, [r3, #4]
 8021f84:	b2d9      	uxtb	r1, r3
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	0018      	movs	r0, r3
 8021f8a:	4790      	blx	r2
  }

  return USBD_OK;
 8021f8c:	2300      	movs	r3, #0
}
 8021f8e:	0018      	movs	r0, r3
 8021f90:	46bd      	mov	sp, r7
 8021f92:	b002      	add	sp, #8
 8021f94:	bd80      	pop	{r7, pc}

08021f96 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021f96:	b580      	push	{r7, lr}
 8021f98:	b082      	sub	sp, #8
 8021f9a:	af00      	add	r7, sp, #0
 8021f9c:	6078      	str	r0, [r7, #4]
 8021f9e:	000a      	movs	r2, r1
 8021fa0:	1cfb      	adds	r3, r7, #3
 8021fa2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8021fa4:	687b      	ldr	r3, [r7, #4]
 8021fa6:	1cfa      	adds	r2, r7, #3
 8021fa8:	7812      	ldrb	r2, [r2, #0]
 8021faa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021fac:	2300      	movs	r3, #0
}
 8021fae:	0018      	movs	r0, r3
 8021fb0:	46bd      	mov	sp, r7
 8021fb2:	b002      	add	sp, #8
 8021fb4:	bd80      	pop	{r7, pc}
	...

08021fb8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8021fb8:	b580      	push	{r7, lr}
 8021fba:	b082      	sub	sp, #8
 8021fbc:	af00      	add	r7, sp, #0
 8021fbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8021fc0:	687a      	ldr	r2, [r7, #4]
 8021fc2:	23a7      	movs	r3, #167	@ 0xa7
 8021fc4:	009b      	lsls	r3, r3, #2
 8021fc6:	5cd1      	ldrb	r1, [r2, r3]
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	4a06      	ldr	r2, [pc, #24]	@ (8021fe4 <USBD_LL_Suspend+0x2c>)
 8021fcc:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8021fce:	687a      	ldr	r2, [r7, #4]
 8021fd0:	23a7      	movs	r3, #167	@ 0xa7
 8021fd2:	009b      	lsls	r3, r3, #2
 8021fd4:	2104      	movs	r1, #4
 8021fd6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8021fd8:	2300      	movs	r3, #0
}
 8021fda:	0018      	movs	r0, r3
 8021fdc:	46bd      	mov	sp, r7
 8021fde:	b002      	add	sp, #8
 8021fe0:	bd80      	pop	{r7, pc}
 8021fe2:	46c0      	nop			@ (mov r8, r8)
 8021fe4:	0000029d 	.word	0x0000029d

08021fe8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8021fe8:	b580      	push	{r7, lr}
 8021fea:	b082      	sub	sp, #8
 8021fec:	af00      	add	r7, sp, #0
 8021fee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021ff0:	687a      	ldr	r2, [r7, #4]
 8021ff2:	23a7      	movs	r3, #167	@ 0xa7
 8021ff4:	009b      	lsls	r3, r3, #2
 8021ff6:	5cd3      	ldrb	r3, [r2, r3]
 8021ff8:	2b04      	cmp	r3, #4
 8021ffa:	d106      	bne.n	802200a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	4a05      	ldr	r2, [pc, #20]	@ (8022014 <USBD_LL_Resume+0x2c>)
 8022000:	5c99      	ldrb	r1, [r3, r2]
 8022002:	687a      	ldr	r2, [r7, #4]
 8022004:	23a7      	movs	r3, #167	@ 0xa7
 8022006:	009b      	lsls	r3, r3, #2
 8022008:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 802200a:	2300      	movs	r3, #0
}
 802200c:	0018      	movs	r0, r3
 802200e:	46bd      	mov	sp, r7
 8022010:	b002      	add	sp, #8
 8022012:	bd80      	pop	{r7, pc}
 8022014:	0000029d 	.word	0x0000029d

08022018 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8022018:	b580      	push	{r7, lr}
 802201a:	b082      	sub	sp, #8
 802201c:	af00      	add	r7, sp, #0
 802201e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022020:	687a      	ldr	r2, [r7, #4]
 8022022:	23a7      	movs	r3, #167	@ 0xa7
 8022024:	009b      	lsls	r3, r3, #2
 8022026:	5cd3      	ldrb	r3, [r2, r3]
 8022028:	2b03      	cmp	r3, #3
 802202a:	d10e      	bne.n	802204a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 802202c:	687a      	ldr	r2, [r7, #4]
 802202e:	23ad      	movs	r3, #173	@ 0xad
 8022030:	009b      	lsls	r3, r3, #2
 8022032:	58d3      	ldr	r3, [r2, r3]
 8022034:	69db      	ldr	r3, [r3, #28]
 8022036:	2b00      	cmp	r3, #0
 8022038:	d007      	beq.n	802204a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 802203a:	687a      	ldr	r2, [r7, #4]
 802203c:	23ad      	movs	r3, #173	@ 0xad
 802203e:	009b      	lsls	r3, r3, #2
 8022040:	58d3      	ldr	r3, [r2, r3]
 8022042:	69db      	ldr	r3, [r3, #28]
 8022044:	687a      	ldr	r2, [r7, #4]
 8022046:	0010      	movs	r0, r2
 8022048:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802204a:	2300      	movs	r3, #0
}
 802204c:	0018      	movs	r0, r3
 802204e:	46bd      	mov	sp, r7
 8022050:	b002      	add	sp, #8
 8022052:	bd80      	pop	{r7, pc}

08022054 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8022054:	b580      	push	{r7, lr}
 8022056:	b084      	sub	sp, #16
 8022058:	af00      	add	r7, sp, #0
 802205a:	6078      	str	r0, [r7, #4]
 802205c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802205e:	230f      	movs	r3, #15
 8022060:	18fb      	adds	r3, r7, r3
 8022062:	2200      	movs	r2, #0
 8022064:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8022066:	683b      	ldr	r3, [r7, #0]
 8022068:	781b      	ldrb	r3, [r3, #0]
 802206a:	001a      	movs	r2, r3
 802206c:	2360      	movs	r3, #96	@ 0x60
 802206e:	4013      	ands	r3, r2
 8022070:	2b40      	cmp	r3, #64	@ 0x40
 8022072:	d004      	beq.n	802207e <USBD_StdDevReq+0x2a>
 8022074:	d84f      	bhi.n	8022116 <USBD_StdDevReq+0xc2>
 8022076:	2b00      	cmp	r3, #0
 8022078:	d00b      	beq.n	8022092 <USBD_StdDevReq+0x3e>
 802207a:	2b20      	cmp	r3, #32
 802207c:	d14b      	bne.n	8022116 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802207e:	687a      	ldr	r2, [r7, #4]
 8022080:	23ad      	movs	r3, #173	@ 0xad
 8022082:	009b      	lsls	r3, r3, #2
 8022084:	58d3      	ldr	r3, [r2, r3]
 8022086:	689b      	ldr	r3, [r3, #8]
 8022088:	6839      	ldr	r1, [r7, #0]
 802208a:	687a      	ldr	r2, [r7, #4]
 802208c:	0010      	movs	r0, r2
 802208e:	4798      	blx	r3
      break;
 8022090:	e048      	b.n	8022124 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8022092:	683b      	ldr	r3, [r7, #0]
 8022094:	785b      	ldrb	r3, [r3, #1]
 8022096:	2b09      	cmp	r3, #9
 8022098:	d835      	bhi.n	8022106 <USBD_StdDevReq+0xb2>
 802209a:	009a      	lsls	r2, r3, #2
 802209c:	4b25      	ldr	r3, [pc, #148]	@ (8022134 <USBD_StdDevReq+0xe0>)
 802209e:	18d3      	adds	r3, r2, r3
 80220a0:	681b      	ldr	r3, [r3, #0]
 80220a2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80220a4:	683a      	ldr	r2, [r7, #0]
 80220a6:	687b      	ldr	r3, [r7, #4]
 80220a8:	0011      	movs	r1, r2
 80220aa:	0018      	movs	r0, r3
 80220ac:	f000 fa52 	bl	8022554 <USBD_GetDescriptor>
          break;
 80220b0:	e030      	b.n	8022114 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80220b2:	683a      	ldr	r2, [r7, #0]
 80220b4:	687b      	ldr	r3, [r7, #4]
 80220b6:	0011      	movs	r1, r2
 80220b8:	0018      	movs	r0, r3
 80220ba:	f000 fbfd 	bl	80228b8 <USBD_SetAddress>
          break;
 80220be:	e029      	b.n	8022114 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80220c0:	683a      	ldr	r2, [r7, #0]
 80220c2:	687b      	ldr	r3, [r7, #4]
 80220c4:	0011      	movs	r1, r2
 80220c6:	0018      	movs	r0, r3
 80220c8:	f000 fc4a 	bl	8022960 <USBD_SetConfig>
          break;
 80220cc:	e022      	b.n	8022114 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80220ce:	683a      	ldr	r2, [r7, #0]
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	0011      	movs	r1, r2
 80220d4:	0018      	movs	r0, r3
 80220d6:	f000 fce7 	bl	8022aa8 <USBD_GetConfig>
          break;
 80220da:	e01b      	b.n	8022114 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80220dc:	683a      	ldr	r2, [r7, #0]
 80220de:	687b      	ldr	r3, [r7, #4]
 80220e0:	0011      	movs	r1, r2
 80220e2:	0018      	movs	r0, r3
 80220e4:	f000 fd1b 	bl	8022b1e <USBD_GetStatus>
          break;
 80220e8:	e014      	b.n	8022114 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80220ea:	683a      	ldr	r2, [r7, #0]
 80220ec:	687b      	ldr	r3, [r7, #4]
 80220ee:	0011      	movs	r1, r2
 80220f0:	0018      	movs	r0, r3
 80220f2:	f000 fd4e 	bl	8022b92 <USBD_SetFeature>
          break;
 80220f6:	e00d      	b.n	8022114 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80220f8:	683a      	ldr	r2, [r7, #0]
 80220fa:	687b      	ldr	r3, [r7, #4]
 80220fc:	0011      	movs	r1, r2
 80220fe:	0018      	movs	r0, r3
 8022100:	f000 fd5d 	bl	8022bbe <USBD_ClrFeature>
          break;
 8022104:	e006      	b.n	8022114 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8022106:	683a      	ldr	r2, [r7, #0]
 8022108:	687b      	ldr	r3, [r7, #4]
 802210a:	0011      	movs	r1, r2
 802210c:	0018      	movs	r0, r3
 802210e:	f000 fdb4 	bl	8022c7a <USBD_CtlError>
          break;
 8022112:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022114:	e006      	b.n	8022124 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8022116:	683a      	ldr	r2, [r7, #0]
 8022118:	687b      	ldr	r3, [r7, #4]
 802211a:	0011      	movs	r1, r2
 802211c:	0018      	movs	r0, r3
 802211e:	f000 fdac 	bl	8022c7a <USBD_CtlError>
      break;
 8022122:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8022124:	230f      	movs	r3, #15
 8022126:	18fb      	adds	r3, r7, r3
 8022128:	781b      	ldrb	r3, [r3, #0]
}
 802212a:	0018      	movs	r0, r3
 802212c:	46bd      	mov	sp, r7
 802212e:	b004      	add	sp, #16
 8022130:	bd80      	pop	{r7, pc}
 8022132:	46c0      	nop			@ (mov r8, r8)
 8022134:	0802e4b4 	.word	0x0802e4b4

08022138 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8022138:	b5b0      	push	{r4, r5, r7, lr}
 802213a:	b084      	sub	sp, #16
 802213c:	af00      	add	r7, sp, #0
 802213e:	6078      	str	r0, [r7, #4]
 8022140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8022142:	230f      	movs	r3, #15
 8022144:	18fb      	adds	r3, r7, r3
 8022146:	2200      	movs	r2, #0
 8022148:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802214a:	683b      	ldr	r3, [r7, #0]
 802214c:	781b      	ldrb	r3, [r3, #0]
 802214e:	001a      	movs	r2, r3
 8022150:	2360      	movs	r3, #96	@ 0x60
 8022152:	4013      	ands	r3, r2
 8022154:	2b40      	cmp	r3, #64	@ 0x40
 8022156:	d004      	beq.n	8022162 <USBD_StdItfReq+0x2a>
 8022158:	d839      	bhi.n	80221ce <USBD_StdItfReq+0x96>
 802215a:	2b00      	cmp	r3, #0
 802215c:	d001      	beq.n	8022162 <USBD_StdItfReq+0x2a>
 802215e:	2b20      	cmp	r3, #32
 8022160:	d135      	bne.n	80221ce <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8022162:	687a      	ldr	r2, [r7, #4]
 8022164:	23a7      	movs	r3, #167	@ 0xa7
 8022166:	009b      	lsls	r3, r3, #2
 8022168:	5cd3      	ldrb	r3, [r2, r3]
 802216a:	3b01      	subs	r3, #1
 802216c:	2b02      	cmp	r3, #2
 802216e:	d825      	bhi.n	80221bc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8022170:	683b      	ldr	r3, [r7, #0]
 8022172:	889b      	ldrh	r3, [r3, #4]
 8022174:	b2db      	uxtb	r3, r3
 8022176:	2b01      	cmp	r3, #1
 8022178:	d819      	bhi.n	80221ae <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802217a:	687a      	ldr	r2, [r7, #4]
 802217c:	23ad      	movs	r3, #173	@ 0xad
 802217e:	009b      	lsls	r3, r3, #2
 8022180:	58d3      	ldr	r3, [r2, r3]
 8022182:	689b      	ldr	r3, [r3, #8]
 8022184:	250f      	movs	r5, #15
 8022186:	197c      	adds	r4, r7, r5
 8022188:	6839      	ldr	r1, [r7, #0]
 802218a:	687a      	ldr	r2, [r7, #4]
 802218c:	0010      	movs	r0, r2
 802218e:	4798      	blx	r3
 8022190:	0003      	movs	r3, r0
 8022192:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8022194:	683b      	ldr	r3, [r7, #0]
 8022196:	88db      	ldrh	r3, [r3, #6]
 8022198:	2b00      	cmp	r3, #0
 802219a:	d116      	bne.n	80221ca <USBD_StdItfReq+0x92>
 802219c:	197b      	adds	r3, r7, r5
 802219e:	781b      	ldrb	r3, [r3, #0]
 80221a0:	2b00      	cmp	r3, #0
 80221a2:	d112      	bne.n	80221ca <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	0018      	movs	r0, r3
 80221a8:	f000 fe4f 	bl	8022e4a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80221ac:	e00d      	b.n	80221ca <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80221ae:	683a      	ldr	r2, [r7, #0]
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	0011      	movs	r1, r2
 80221b4:	0018      	movs	r0, r3
 80221b6:	f000 fd60 	bl	8022c7a <USBD_CtlError>
          break;
 80221ba:	e006      	b.n	80221ca <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80221bc:	683a      	ldr	r2, [r7, #0]
 80221be:	687b      	ldr	r3, [r7, #4]
 80221c0:	0011      	movs	r1, r2
 80221c2:	0018      	movs	r0, r3
 80221c4:	f000 fd59 	bl	8022c7a <USBD_CtlError>
          break;
 80221c8:	e000      	b.n	80221cc <USBD_StdItfReq+0x94>
          break;
 80221ca:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80221cc:	e006      	b.n	80221dc <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80221ce:	683a      	ldr	r2, [r7, #0]
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	0011      	movs	r1, r2
 80221d4:	0018      	movs	r0, r3
 80221d6:	f000 fd50 	bl	8022c7a <USBD_CtlError>
      break;
 80221da:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80221dc:	2300      	movs	r3, #0
}
 80221de:	0018      	movs	r0, r3
 80221e0:	46bd      	mov	sp, r7
 80221e2:	b004      	add	sp, #16
 80221e4:	bdb0      	pop	{r4, r5, r7, pc}

080221e6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80221e6:	b5b0      	push	{r4, r5, r7, lr}
 80221e8:	b084      	sub	sp, #16
 80221ea:	af00      	add	r7, sp, #0
 80221ec:	6078      	str	r0, [r7, #4]
 80221ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80221f0:	230f      	movs	r3, #15
 80221f2:	18fb      	adds	r3, r7, r3
 80221f4:	2200      	movs	r2, #0
 80221f6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80221f8:	683b      	ldr	r3, [r7, #0]
 80221fa:	889a      	ldrh	r2, [r3, #4]
 80221fc:	230e      	movs	r3, #14
 80221fe:	18fb      	adds	r3, r7, r3
 8022200:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8022202:	683b      	ldr	r3, [r7, #0]
 8022204:	781b      	ldrb	r3, [r3, #0]
 8022206:	001a      	movs	r2, r3
 8022208:	2360      	movs	r3, #96	@ 0x60
 802220a:	4013      	ands	r3, r2
 802220c:	2b40      	cmp	r3, #64	@ 0x40
 802220e:	d006      	beq.n	802221e <USBD_StdEPReq+0x38>
 8022210:	d900      	bls.n	8022214 <USBD_StdEPReq+0x2e>
 8022212:	e190      	b.n	8022536 <USBD_StdEPReq+0x350>
 8022214:	2b00      	cmp	r3, #0
 8022216:	d00c      	beq.n	8022232 <USBD_StdEPReq+0x4c>
 8022218:	2b20      	cmp	r3, #32
 802221a:	d000      	beq.n	802221e <USBD_StdEPReq+0x38>
 802221c:	e18b      	b.n	8022536 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802221e:	687a      	ldr	r2, [r7, #4]
 8022220:	23ad      	movs	r3, #173	@ 0xad
 8022222:	009b      	lsls	r3, r3, #2
 8022224:	58d3      	ldr	r3, [r2, r3]
 8022226:	689b      	ldr	r3, [r3, #8]
 8022228:	6839      	ldr	r1, [r7, #0]
 802222a:	687a      	ldr	r2, [r7, #4]
 802222c:	0010      	movs	r0, r2
 802222e:	4798      	blx	r3
      break;
 8022230:	e188      	b.n	8022544 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8022232:	683b      	ldr	r3, [r7, #0]
 8022234:	781b      	ldrb	r3, [r3, #0]
 8022236:	001a      	movs	r2, r3
 8022238:	2360      	movs	r3, #96	@ 0x60
 802223a:	4013      	ands	r3, r2
 802223c:	2b20      	cmp	r3, #32
 802223e:	d10f      	bne.n	8022260 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8022240:	687a      	ldr	r2, [r7, #4]
 8022242:	23ad      	movs	r3, #173	@ 0xad
 8022244:	009b      	lsls	r3, r3, #2
 8022246:	58d3      	ldr	r3, [r2, r3]
 8022248:	689b      	ldr	r3, [r3, #8]
 802224a:	250f      	movs	r5, #15
 802224c:	197c      	adds	r4, r7, r5
 802224e:	6839      	ldr	r1, [r7, #0]
 8022250:	687a      	ldr	r2, [r7, #4]
 8022252:	0010      	movs	r0, r2
 8022254:	4798      	blx	r3
 8022256:	0003      	movs	r3, r0
 8022258:	7023      	strb	r3, [r4, #0]

        return ret;
 802225a:	197b      	adds	r3, r7, r5
 802225c:	781b      	ldrb	r3, [r3, #0]
 802225e:	e174      	b.n	802254a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8022260:	683b      	ldr	r3, [r7, #0]
 8022262:	785b      	ldrb	r3, [r3, #1]
 8022264:	2b03      	cmp	r3, #3
 8022266:	d007      	beq.n	8022278 <USBD_StdEPReq+0x92>
 8022268:	dd00      	ble.n	802226c <USBD_StdEPReq+0x86>
 802226a:	e15c      	b.n	8022526 <USBD_StdEPReq+0x340>
 802226c:	2b00      	cmp	r3, #0
 802226e:	d100      	bne.n	8022272 <USBD_StdEPReq+0x8c>
 8022270:	e092      	b.n	8022398 <USBD_StdEPReq+0x1b2>
 8022272:	2b01      	cmp	r3, #1
 8022274:	d04b      	beq.n	802230e <USBD_StdEPReq+0x128>
 8022276:	e156      	b.n	8022526 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8022278:	687a      	ldr	r2, [r7, #4]
 802227a:	23a7      	movs	r3, #167	@ 0xa7
 802227c:	009b      	lsls	r3, r3, #2
 802227e:	5cd3      	ldrb	r3, [r2, r3]
 8022280:	2b02      	cmp	r3, #2
 8022282:	d002      	beq.n	802228a <USBD_StdEPReq+0xa4>
 8022284:	2b03      	cmp	r3, #3
 8022286:	d01d      	beq.n	80222c4 <USBD_StdEPReq+0xde>
 8022288:	e039      	b.n	80222fe <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802228a:	220e      	movs	r2, #14
 802228c:	18bb      	adds	r3, r7, r2
 802228e:	781b      	ldrb	r3, [r3, #0]
 8022290:	2b00      	cmp	r3, #0
 8022292:	d010      	beq.n	80222b6 <USBD_StdEPReq+0xd0>
 8022294:	18bb      	adds	r3, r7, r2
 8022296:	781b      	ldrb	r3, [r3, #0]
 8022298:	2b80      	cmp	r3, #128	@ 0x80
 802229a:	d00c      	beq.n	80222b6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 802229c:	18bb      	adds	r3, r7, r2
 802229e:	781a      	ldrb	r2, [r3, #0]
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	0011      	movs	r1, r2
 80222a4:	0018      	movs	r0, r3
 80222a6:	f001 fa1c 	bl	80236e2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80222aa:	687b      	ldr	r3, [r7, #4]
 80222ac:	2180      	movs	r1, #128	@ 0x80
 80222ae:	0018      	movs	r0, r3
 80222b0:	f001 fa17 	bl	80236e2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80222b4:	e02a      	b.n	802230c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80222b6:	683a      	ldr	r2, [r7, #0]
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	0011      	movs	r1, r2
 80222bc:	0018      	movs	r0, r3
 80222be:	f000 fcdc 	bl	8022c7a <USBD_CtlError>
              break;
 80222c2:	e023      	b.n	802230c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80222c4:	683b      	ldr	r3, [r7, #0]
 80222c6:	885b      	ldrh	r3, [r3, #2]
 80222c8:	2b00      	cmp	r3, #0
 80222ca:	d113      	bne.n	80222f4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80222cc:	220e      	movs	r2, #14
 80222ce:	18bb      	adds	r3, r7, r2
 80222d0:	781b      	ldrb	r3, [r3, #0]
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	d00e      	beq.n	80222f4 <USBD_StdEPReq+0x10e>
 80222d6:	18bb      	adds	r3, r7, r2
 80222d8:	781b      	ldrb	r3, [r3, #0]
 80222da:	2b80      	cmp	r3, #128	@ 0x80
 80222dc:	d00a      	beq.n	80222f4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80222de:	683b      	ldr	r3, [r7, #0]
 80222e0:	88db      	ldrh	r3, [r3, #6]
 80222e2:	2b00      	cmp	r3, #0
 80222e4:	d106      	bne.n	80222f4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80222e6:	18bb      	adds	r3, r7, r2
 80222e8:	781a      	ldrb	r2, [r3, #0]
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	0011      	movs	r1, r2
 80222ee:	0018      	movs	r0, r3
 80222f0:	f001 f9f7 	bl	80236e2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	0018      	movs	r0, r3
 80222f8:	f000 fda7 	bl	8022e4a <USBD_CtlSendStatus>

              break;
 80222fc:	e006      	b.n	802230c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80222fe:	683a      	ldr	r2, [r7, #0]
 8022300:	687b      	ldr	r3, [r7, #4]
 8022302:	0011      	movs	r1, r2
 8022304:	0018      	movs	r0, r3
 8022306:	f000 fcb8 	bl	8022c7a <USBD_CtlError>
              break;
 802230a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 802230c:	e112      	b.n	8022534 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802230e:	687a      	ldr	r2, [r7, #4]
 8022310:	23a7      	movs	r3, #167	@ 0xa7
 8022312:	009b      	lsls	r3, r3, #2
 8022314:	5cd3      	ldrb	r3, [r2, r3]
 8022316:	2b02      	cmp	r3, #2
 8022318:	d002      	beq.n	8022320 <USBD_StdEPReq+0x13a>
 802231a:	2b03      	cmp	r3, #3
 802231c:	d01d      	beq.n	802235a <USBD_StdEPReq+0x174>
 802231e:	e032      	b.n	8022386 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022320:	220e      	movs	r2, #14
 8022322:	18bb      	adds	r3, r7, r2
 8022324:	781b      	ldrb	r3, [r3, #0]
 8022326:	2b00      	cmp	r3, #0
 8022328:	d010      	beq.n	802234c <USBD_StdEPReq+0x166>
 802232a:	18bb      	adds	r3, r7, r2
 802232c:	781b      	ldrb	r3, [r3, #0]
 802232e:	2b80      	cmp	r3, #128	@ 0x80
 8022330:	d00c      	beq.n	802234c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8022332:	18bb      	adds	r3, r7, r2
 8022334:	781a      	ldrb	r2, [r3, #0]
 8022336:	687b      	ldr	r3, [r7, #4]
 8022338:	0011      	movs	r1, r2
 802233a:	0018      	movs	r0, r3
 802233c:	f001 f9d1 	bl	80236e2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8022340:	687b      	ldr	r3, [r7, #4]
 8022342:	2180      	movs	r1, #128	@ 0x80
 8022344:	0018      	movs	r0, r3
 8022346:	f001 f9cc 	bl	80236e2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802234a:	e024      	b.n	8022396 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 802234c:	683a      	ldr	r2, [r7, #0]
 802234e:	687b      	ldr	r3, [r7, #4]
 8022350:	0011      	movs	r1, r2
 8022352:	0018      	movs	r0, r3
 8022354:	f000 fc91 	bl	8022c7a <USBD_CtlError>
              break;
 8022358:	e01d      	b.n	8022396 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802235a:	683b      	ldr	r3, [r7, #0]
 802235c:	885b      	ldrh	r3, [r3, #2]
 802235e:	2b00      	cmp	r3, #0
 8022360:	d118      	bne.n	8022394 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8022362:	210e      	movs	r1, #14
 8022364:	187b      	adds	r3, r7, r1
 8022366:	781b      	ldrb	r3, [r3, #0]
 8022368:	227f      	movs	r2, #127	@ 0x7f
 802236a:	4013      	ands	r3, r2
 802236c:	d006      	beq.n	802237c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 802236e:	187b      	adds	r3, r7, r1
 8022370:	781a      	ldrb	r2, [r3, #0]
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	0011      	movs	r1, r2
 8022376:	0018      	movs	r0, r3
 8022378:	f001 f9de 	bl	8023738 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 802237c:	687b      	ldr	r3, [r7, #4]
 802237e:	0018      	movs	r0, r3
 8022380:	f000 fd63 	bl	8022e4a <USBD_CtlSendStatus>
              }
              break;
 8022384:	e006      	b.n	8022394 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8022386:	683a      	ldr	r2, [r7, #0]
 8022388:	687b      	ldr	r3, [r7, #4]
 802238a:	0011      	movs	r1, r2
 802238c:	0018      	movs	r0, r3
 802238e:	f000 fc74 	bl	8022c7a <USBD_CtlError>
              break;
 8022392:	e000      	b.n	8022396 <USBD_StdEPReq+0x1b0>
              break;
 8022394:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8022396:	e0cd      	b.n	8022534 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8022398:	687a      	ldr	r2, [r7, #4]
 802239a:	23a7      	movs	r3, #167	@ 0xa7
 802239c:	009b      	lsls	r3, r3, #2
 802239e:	5cd3      	ldrb	r3, [r2, r3]
 80223a0:	2b02      	cmp	r3, #2
 80223a2:	d002      	beq.n	80223aa <USBD_StdEPReq+0x1c4>
 80223a4:	2b03      	cmp	r3, #3
 80223a6:	d03c      	beq.n	8022422 <USBD_StdEPReq+0x23c>
 80223a8:	e0b5      	b.n	8022516 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80223aa:	220e      	movs	r2, #14
 80223ac:	18bb      	adds	r3, r7, r2
 80223ae:	781b      	ldrb	r3, [r3, #0]
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	d00a      	beq.n	80223ca <USBD_StdEPReq+0x1e4>
 80223b4:	18bb      	adds	r3, r7, r2
 80223b6:	781b      	ldrb	r3, [r3, #0]
 80223b8:	2b80      	cmp	r3, #128	@ 0x80
 80223ba:	d006      	beq.n	80223ca <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80223bc:	683a      	ldr	r2, [r7, #0]
 80223be:	687b      	ldr	r3, [r7, #4]
 80223c0:	0011      	movs	r1, r2
 80223c2:	0018      	movs	r0, r3
 80223c4:	f000 fc59 	bl	8022c7a <USBD_CtlError>
                break;
 80223c8:	e0ac      	b.n	8022524 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80223ca:	220e      	movs	r2, #14
 80223cc:	18bb      	adds	r3, r7, r2
 80223ce:	781b      	ldrb	r3, [r3, #0]
 80223d0:	b25b      	sxtb	r3, r3
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	da0c      	bge.n	80223f0 <USBD_StdEPReq+0x20a>
 80223d6:	18bb      	adds	r3, r7, r2
 80223d8:	781b      	ldrb	r3, [r3, #0]
 80223da:	227f      	movs	r2, #127	@ 0x7f
 80223dc:	401a      	ands	r2, r3
 80223de:	0013      	movs	r3, r2
 80223e0:	009b      	lsls	r3, r3, #2
 80223e2:	189b      	adds	r3, r3, r2
 80223e4:	009b      	lsls	r3, r3, #2
 80223e6:	3310      	adds	r3, #16
 80223e8:	687a      	ldr	r2, [r7, #4]
 80223ea:	18d3      	adds	r3, r2, r3
 80223ec:	3304      	adds	r3, #4
 80223ee:	e00d      	b.n	802240c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80223f0:	230e      	movs	r3, #14
 80223f2:	18fb      	adds	r3, r7, r3
 80223f4:	781b      	ldrb	r3, [r3, #0]
 80223f6:	227f      	movs	r2, #127	@ 0x7f
 80223f8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80223fa:	0013      	movs	r3, r2
 80223fc:	009b      	lsls	r3, r3, #2
 80223fe:	189b      	adds	r3, r3, r2
 8022400:	009b      	lsls	r3, r3, #2
 8022402:	3351      	adds	r3, #81	@ 0x51
 8022404:	33ff      	adds	r3, #255	@ 0xff
 8022406:	687a      	ldr	r2, [r7, #4]
 8022408:	18d3      	adds	r3, r2, r3
 802240a:	3304      	adds	r3, #4
 802240c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802240e:	68bb      	ldr	r3, [r7, #8]
 8022410:	2200      	movs	r2, #0
 8022412:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8022414:	68b9      	ldr	r1, [r7, #8]
 8022416:	687b      	ldr	r3, [r7, #4]
 8022418:	2202      	movs	r2, #2
 802241a:	0018      	movs	r0, r3
 802241c:	f000 fcab 	bl	8022d76 <USBD_CtlSendData>
              break;
 8022420:	e080      	b.n	8022524 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8022422:	220e      	movs	r2, #14
 8022424:	18bb      	adds	r3, r7, r2
 8022426:	781b      	ldrb	r3, [r3, #0]
 8022428:	b25b      	sxtb	r3, r3
 802242a:	2b00      	cmp	r3, #0
 802242c:	da14      	bge.n	8022458 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802242e:	18bb      	adds	r3, r7, r2
 8022430:	781b      	ldrb	r3, [r3, #0]
 8022432:	220f      	movs	r2, #15
 8022434:	401a      	ands	r2, r3
 8022436:	6879      	ldr	r1, [r7, #4]
 8022438:	0013      	movs	r3, r2
 802243a:	009b      	lsls	r3, r3, #2
 802243c:	189b      	adds	r3, r3, r2
 802243e:	009b      	lsls	r3, r3, #2
 8022440:	18cb      	adds	r3, r1, r3
 8022442:	3318      	adds	r3, #24
 8022444:	681b      	ldr	r3, [r3, #0]
 8022446:	2b00      	cmp	r3, #0
 8022448:	d11e      	bne.n	8022488 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802244a:	683a      	ldr	r2, [r7, #0]
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	0011      	movs	r1, r2
 8022450:	0018      	movs	r0, r3
 8022452:	f000 fc12 	bl	8022c7a <USBD_CtlError>
                  break;
 8022456:	e065      	b.n	8022524 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8022458:	230e      	movs	r3, #14
 802245a:	18fb      	adds	r3, r7, r3
 802245c:	781b      	ldrb	r3, [r3, #0]
 802245e:	220f      	movs	r2, #15
 8022460:	401a      	ands	r2, r3
 8022462:	6878      	ldr	r0, [r7, #4]
 8022464:	23ac      	movs	r3, #172	@ 0xac
 8022466:	0059      	lsls	r1, r3, #1
 8022468:	0013      	movs	r3, r2
 802246a:	009b      	lsls	r3, r3, #2
 802246c:	189b      	adds	r3, r3, r2
 802246e:	009b      	lsls	r3, r3, #2
 8022470:	18c3      	adds	r3, r0, r3
 8022472:	185b      	adds	r3, r3, r1
 8022474:	681b      	ldr	r3, [r3, #0]
 8022476:	2b00      	cmp	r3, #0
 8022478:	d106      	bne.n	8022488 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802247a:	683a      	ldr	r2, [r7, #0]
 802247c:	687b      	ldr	r3, [r7, #4]
 802247e:	0011      	movs	r1, r2
 8022480:	0018      	movs	r0, r3
 8022482:	f000 fbfa 	bl	8022c7a <USBD_CtlError>
                  break;
 8022486:	e04d      	b.n	8022524 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022488:	220e      	movs	r2, #14
 802248a:	18bb      	adds	r3, r7, r2
 802248c:	781b      	ldrb	r3, [r3, #0]
 802248e:	b25b      	sxtb	r3, r3
 8022490:	2b00      	cmp	r3, #0
 8022492:	da0c      	bge.n	80224ae <USBD_StdEPReq+0x2c8>
 8022494:	18bb      	adds	r3, r7, r2
 8022496:	781b      	ldrb	r3, [r3, #0]
 8022498:	227f      	movs	r2, #127	@ 0x7f
 802249a:	401a      	ands	r2, r3
 802249c:	0013      	movs	r3, r2
 802249e:	009b      	lsls	r3, r3, #2
 80224a0:	189b      	adds	r3, r3, r2
 80224a2:	009b      	lsls	r3, r3, #2
 80224a4:	3310      	adds	r3, #16
 80224a6:	687a      	ldr	r2, [r7, #4]
 80224a8:	18d3      	adds	r3, r2, r3
 80224aa:	3304      	adds	r3, #4
 80224ac:	e00d      	b.n	80224ca <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80224ae:	230e      	movs	r3, #14
 80224b0:	18fb      	adds	r3, r7, r3
 80224b2:	781b      	ldrb	r3, [r3, #0]
 80224b4:	227f      	movs	r2, #127	@ 0x7f
 80224b6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80224b8:	0013      	movs	r3, r2
 80224ba:	009b      	lsls	r3, r3, #2
 80224bc:	189b      	adds	r3, r3, r2
 80224be:	009b      	lsls	r3, r3, #2
 80224c0:	3351      	adds	r3, #81	@ 0x51
 80224c2:	33ff      	adds	r3, #255	@ 0xff
 80224c4:	687a      	ldr	r2, [r7, #4]
 80224c6:	18d3      	adds	r3, r2, r3
 80224c8:	3304      	adds	r3, #4
 80224ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80224cc:	220e      	movs	r2, #14
 80224ce:	18bb      	adds	r3, r7, r2
 80224d0:	781b      	ldrb	r3, [r3, #0]
 80224d2:	2b00      	cmp	r3, #0
 80224d4:	d003      	beq.n	80224de <USBD_StdEPReq+0x2f8>
 80224d6:	18bb      	adds	r3, r7, r2
 80224d8:	781b      	ldrb	r3, [r3, #0]
 80224da:	2b80      	cmp	r3, #128	@ 0x80
 80224dc:	d103      	bne.n	80224e6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80224de:	68bb      	ldr	r3, [r7, #8]
 80224e0:	2200      	movs	r2, #0
 80224e2:	601a      	str	r2, [r3, #0]
 80224e4:	e010      	b.n	8022508 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80224e6:	230e      	movs	r3, #14
 80224e8:	18fb      	adds	r3, r7, r3
 80224ea:	781a      	ldrb	r2, [r3, #0]
 80224ec:	687b      	ldr	r3, [r7, #4]
 80224ee:	0011      	movs	r1, r2
 80224f0:	0018      	movs	r0, r3
 80224f2:	f001 f94c 	bl	802378e <USBD_LL_IsStallEP>
 80224f6:	1e03      	subs	r3, r0, #0
 80224f8:	d003      	beq.n	8022502 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80224fa:	68bb      	ldr	r3, [r7, #8]
 80224fc:	2201      	movs	r2, #1
 80224fe:	601a      	str	r2, [r3, #0]
 8022500:	e002      	b.n	8022508 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8022502:	68bb      	ldr	r3, [r7, #8]
 8022504:	2200      	movs	r2, #0
 8022506:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8022508:	68b9      	ldr	r1, [r7, #8]
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	2202      	movs	r2, #2
 802250e:	0018      	movs	r0, r3
 8022510:	f000 fc31 	bl	8022d76 <USBD_CtlSendData>
              break;
 8022514:	e006      	b.n	8022524 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8022516:	683a      	ldr	r2, [r7, #0]
 8022518:	687b      	ldr	r3, [r7, #4]
 802251a:	0011      	movs	r1, r2
 802251c:	0018      	movs	r0, r3
 802251e:	f000 fbac 	bl	8022c7a <USBD_CtlError>
              break;
 8022522:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8022524:	e006      	b.n	8022534 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8022526:	683a      	ldr	r2, [r7, #0]
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	0011      	movs	r1, r2
 802252c:	0018      	movs	r0, r3
 802252e:	f000 fba4 	bl	8022c7a <USBD_CtlError>
          break;
 8022532:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022534:	e006      	b.n	8022544 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8022536:	683a      	ldr	r2, [r7, #0]
 8022538:	687b      	ldr	r3, [r7, #4]
 802253a:	0011      	movs	r1, r2
 802253c:	0018      	movs	r0, r3
 802253e:	f000 fb9c 	bl	8022c7a <USBD_CtlError>
      break;
 8022542:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8022544:	230f      	movs	r3, #15
 8022546:	18fb      	adds	r3, r7, r3
 8022548:	781b      	ldrb	r3, [r3, #0]
}
 802254a:	0018      	movs	r0, r3
 802254c:	46bd      	mov	sp, r7
 802254e:	b004      	add	sp, #16
 8022550:	bdb0      	pop	{r4, r5, r7, pc}
	...

08022554 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8022554:	b580      	push	{r7, lr}
 8022556:	b084      	sub	sp, #16
 8022558:	af00      	add	r7, sp, #0
 802255a:	6078      	str	r0, [r7, #4]
 802255c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802255e:	2308      	movs	r3, #8
 8022560:	18fb      	adds	r3, r7, r3
 8022562:	2200      	movs	r2, #0
 8022564:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8022566:	2300      	movs	r3, #0
 8022568:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802256a:	230b      	movs	r3, #11
 802256c:	18fb      	adds	r3, r7, r3
 802256e:	2200      	movs	r2, #0
 8022570:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8022572:	683b      	ldr	r3, [r7, #0]
 8022574:	885b      	ldrh	r3, [r3, #2]
 8022576:	0a1b      	lsrs	r3, r3, #8
 8022578:	b29b      	uxth	r3, r3
 802257a:	2b07      	cmp	r3, #7
 802257c:	d900      	bls.n	8022580 <USBD_GetDescriptor+0x2c>
 802257e:	e159      	b.n	8022834 <USBD_GetDescriptor+0x2e0>
 8022580:	009a      	lsls	r2, r3, #2
 8022582:	4bcb      	ldr	r3, [pc, #812]	@ (80228b0 <USBD_GetDescriptor+0x35c>)
 8022584:	18d3      	adds	r3, r2, r3
 8022586:	681b      	ldr	r3, [r3, #0]
 8022588:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802258a:	687a      	ldr	r2, [r7, #4]
 802258c:	23ac      	movs	r3, #172	@ 0xac
 802258e:	009b      	lsls	r3, r3, #2
 8022590:	58d3      	ldr	r3, [r2, r3]
 8022592:	681b      	ldr	r3, [r3, #0]
 8022594:	687a      	ldr	r2, [r7, #4]
 8022596:	7c12      	ldrb	r2, [r2, #16]
 8022598:	2108      	movs	r1, #8
 802259a:	1879      	adds	r1, r7, r1
 802259c:	0010      	movs	r0, r2
 802259e:	4798      	blx	r3
 80225a0:	0003      	movs	r3, r0
 80225a2:	60fb      	str	r3, [r7, #12]
      break;
 80225a4:	e153      	b.n	802284e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80225a6:	687b      	ldr	r3, [r7, #4]
 80225a8:	7c1b      	ldrb	r3, [r3, #16]
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	d10f      	bne.n	80225ce <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80225ae:	687a      	ldr	r2, [r7, #4]
 80225b0:	23ad      	movs	r3, #173	@ 0xad
 80225b2:	009b      	lsls	r3, r3, #2
 80225b4:	58d3      	ldr	r3, [r2, r3]
 80225b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80225b8:	2208      	movs	r2, #8
 80225ba:	18ba      	adds	r2, r7, r2
 80225bc:	0010      	movs	r0, r2
 80225be:	4798      	blx	r3
 80225c0:	0003      	movs	r3, r0
 80225c2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80225c4:	68fb      	ldr	r3, [r7, #12]
 80225c6:	3301      	adds	r3, #1
 80225c8:	2202      	movs	r2, #2
 80225ca:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80225cc:	e13f      	b.n	802284e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80225ce:	687a      	ldr	r2, [r7, #4]
 80225d0:	23ad      	movs	r3, #173	@ 0xad
 80225d2:	009b      	lsls	r3, r3, #2
 80225d4:	58d3      	ldr	r3, [r2, r3]
 80225d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80225d8:	2208      	movs	r2, #8
 80225da:	18ba      	adds	r2, r7, r2
 80225dc:	0010      	movs	r0, r2
 80225de:	4798      	blx	r3
 80225e0:	0003      	movs	r3, r0
 80225e2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80225e4:	68fb      	ldr	r3, [r7, #12]
 80225e6:	3301      	adds	r3, #1
 80225e8:	2202      	movs	r2, #2
 80225ea:	701a      	strb	r2, [r3, #0]
      break;
 80225ec:	e12f      	b.n	802284e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80225ee:	683b      	ldr	r3, [r7, #0]
 80225f0:	885b      	ldrh	r3, [r3, #2]
 80225f2:	b2db      	uxtb	r3, r3
 80225f4:	2b05      	cmp	r3, #5
 80225f6:	d900      	bls.n	80225fa <USBD_GetDescriptor+0xa6>
 80225f8:	e0d0      	b.n	802279c <USBD_GetDescriptor+0x248>
 80225fa:	009a      	lsls	r2, r3, #2
 80225fc:	4bad      	ldr	r3, [pc, #692]	@ (80228b4 <USBD_GetDescriptor+0x360>)
 80225fe:	18d3      	adds	r3, r2, r3
 8022600:	681b      	ldr	r3, [r3, #0]
 8022602:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8022604:	687a      	ldr	r2, [r7, #4]
 8022606:	23ac      	movs	r3, #172	@ 0xac
 8022608:	009b      	lsls	r3, r3, #2
 802260a:	58d3      	ldr	r3, [r2, r3]
 802260c:	685b      	ldr	r3, [r3, #4]
 802260e:	2b00      	cmp	r3, #0
 8022610:	d00d      	beq.n	802262e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8022612:	687a      	ldr	r2, [r7, #4]
 8022614:	23ac      	movs	r3, #172	@ 0xac
 8022616:	009b      	lsls	r3, r3, #2
 8022618:	58d3      	ldr	r3, [r2, r3]
 802261a:	685b      	ldr	r3, [r3, #4]
 802261c:	687a      	ldr	r2, [r7, #4]
 802261e:	7c12      	ldrb	r2, [r2, #16]
 8022620:	2108      	movs	r1, #8
 8022622:	1879      	adds	r1, r7, r1
 8022624:	0010      	movs	r0, r2
 8022626:	4798      	blx	r3
 8022628:	0003      	movs	r3, r0
 802262a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802262c:	e0c3      	b.n	80227b6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802262e:	683a      	ldr	r2, [r7, #0]
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	0011      	movs	r1, r2
 8022634:	0018      	movs	r0, r3
 8022636:	f000 fb20 	bl	8022c7a <USBD_CtlError>
            err++;
 802263a:	210b      	movs	r1, #11
 802263c:	187b      	adds	r3, r7, r1
 802263e:	781a      	ldrb	r2, [r3, #0]
 8022640:	187b      	adds	r3, r7, r1
 8022642:	3201      	adds	r2, #1
 8022644:	701a      	strb	r2, [r3, #0]
          break;
 8022646:	e0b6      	b.n	80227b6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8022648:	687a      	ldr	r2, [r7, #4]
 802264a:	23ac      	movs	r3, #172	@ 0xac
 802264c:	009b      	lsls	r3, r3, #2
 802264e:	58d3      	ldr	r3, [r2, r3]
 8022650:	689b      	ldr	r3, [r3, #8]
 8022652:	2b00      	cmp	r3, #0
 8022654:	d00d      	beq.n	8022672 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8022656:	687a      	ldr	r2, [r7, #4]
 8022658:	23ac      	movs	r3, #172	@ 0xac
 802265a:	009b      	lsls	r3, r3, #2
 802265c:	58d3      	ldr	r3, [r2, r3]
 802265e:	689b      	ldr	r3, [r3, #8]
 8022660:	687a      	ldr	r2, [r7, #4]
 8022662:	7c12      	ldrb	r2, [r2, #16]
 8022664:	2108      	movs	r1, #8
 8022666:	1879      	adds	r1, r7, r1
 8022668:	0010      	movs	r0, r2
 802266a:	4798      	blx	r3
 802266c:	0003      	movs	r3, r0
 802266e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022670:	e0a1      	b.n	80227b6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022672:	683a      	ldr	r2, [r7, #0]
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	0011      	movs	r1, r2
 8022678:	0018      	movs	r0, r3
 802267a:	f000 fafe 	bl	8022c7a <USBD_CtlError>
            err++;
 802267e:	210b      	movs	r1, #11
 8022680:	187b      	adds	r3, r7, r1
 8022682:	781a      	ldrb	r2, [r3, #0]
 8022684:	187b      	adds	r3, r7, r1
 8022686:	3201      	adds	r2, #1
 8022688:	701a      	strb	r2, [r3, #0]
          break;
 802268a:	e094      	b.n	80227b6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802268c:	687a      	ldr	r2, [r7, #4]
 802268e:	23ac      	movs	r3, #172	@ 0xac
 8022690:	009b      	lsls	r3, r3, #2
 8022692:	58d3      	ldr	r3, [r2, r3]
 8022694:	68db      	ldr	r3, [r3, #12]
 8022696:	2b00      	cmp	r3, #0
 8022698:	d00d      	beq.n	80226b6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802269a:	687a      	ldr	r2, [r7, #4]
 802269c:	23ac      	movs	r3, #172	@ 0xac
 802269e:	009b      	lsls	r3, r3, #2
 80226a0:	58d3      	ldr	r3, [r2, r3]
 80226a2:	68db      	ldr	r3, [r3, #12]
 80226a4:	687a      	ldr	r2, [r7, #4]
 80226a6:	7c12      	ldrb	r2, [r2, #16]
 80226a8:	2108      	movs	r1, #8
 80226aa:	1879      	adds	r1, r7, r1
 80226ac:	0010      	movs	r0, r2
 80226ae:	4798      	blx	r3
 80226b0:	0003      	movs	r3, r0
 80226b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80226b4:	e07f      	b.n	80227b6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80226b6:	683a      	ldr	r2, [r7, #0]
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	0011      	movs	r1, r2
 80226bc:	0018      	movs	r0, r3
 80226be:	f000 fadc 	bl	8022c7a <USBD_CtlError>
            err++;
 80226c2:	210b      	movs	r1, #11
 80226c4:	187b      	adds	r3, r7, r1
 80226c6:	781a      	ldrb	r2, [r3, #0]
 80226c8:	187b      	adds	r3, r7, r1
 80226ca:	3201      	adds	r2, #1
 80226cc:	701a      	strb	r2, [r3, #0]
          break;
 80226ce:	e072      	b.n	80227b6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80226d0:	687a      	ldr	r2, [r7, #4]
 80226d2:	23ac      	movs	r3, #172	@ 0xac
 80226d4:	009b      	lsls	r3, r3, #2
 80226d6:	58d3      	ldr	r3, [r2, r3]
 80226d8:	691b      	ldr	r3, [r3, #16]
 80226da:	2b00      	cmp	r3, #0
 80226dc:	d00d      	beq.n	80226fa <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80226de:	687a      	ldr	r2, [r7, #4]
 80226e0:	23ac      	movs	r3, #172	@ 0xac
 80226e2:	009b      	lsls	r3, r3, #2
 80226e4:	58d3      	ldr	r3, [r2, r3]
 80226e6:	691b      	ldr	r3, [r3, #16]
 80226e8:	687a      	ldr	r2, [r7, #4]
 80226ea:	7c12      	ldrb	r2, [r2, #16]
 80226ec:	2108      	movs	r1, #8
 80226ee:	1879      	adds	r1, r7, r1
 80226f0:	0010      	movs	r0, r2
 80226f2:	4798      	blx	r3
 80226f4:	0003      	movs	r3, r0
 80226f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80226f8:	e05d      	b.n	80227b6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80226fa:	683a      	ldr	r2, [r7, #0]
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	0011      	movs	r1, r2
 8022700:	0018      	movs	r0, r3
 8022702:	f000 faba 	bl	8022c7a <USBD_CtlError>
            err++;
 8022706:	210b      	movs	r1, #11
 8022708:	187b      	adds	r3, r7, r1
 802270a:	781a      	ldrb	r2, [r3, #0]
 802270c:	187b      	adds	r3, r7, r1
 802270e:	3201      	adds	r2, #1
 8022710:	701a      	strb	r2, [r3, #0]
          break;
 8022712:	e050      	b.n	80227b6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8022714:	687a      	ldr	r2, [r7, #4]
 8022716:	23ac      	movs	r3, #172	@ 0xac
 8022718:	009b      	lsls	r3, r3, #2
 802271a:	58d3      	ldr	r3, [r2, r3]
 802271c:	695b      	ldr	r3, [r3, #20]
 802271e:	2b00      	cmp	r3, #0
 8022720:	d00d      	beq.n	802273e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8022722:	687a      	ldr	r2, [r7, #4]
 8022724:	23ac      	movs	r3, #172	@ 0xac
 8022726:	009b      	lsls	r3, r3, #2
 8022728:	58d3      	ldr	r3, [r2, r3]
 802272a:	695b      	ldr	r3, [r3, #20]
 802272c:	687a      	ldr	r2, [r7, #4]
 802272e:	7c12      	ldrb	r2, [r2, #16]
 8022730:	2108      	movs	r1, #8
 8022732:	1879      	adds	r1, r7, r1
 8022734:	0010      	movs	r0, r2
 8022736:	4798      	blx	r3
 8022738:	0003      	movs	r3, r0
 802273a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802273c:	e03b      	b.n	80227b6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802273e:	683a      	ldr	r2, [r7, #0]
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	0011      	movs	r1, r2
 8022744:	0018      	movs	r0, r3
 8022746:	f000 fa98 	bl	8022c7a <USBD_CtlError>
            err++;
 802274a:	210b      	movs	r1, #11
 802274c:	187b      	adds	r3, r7, r1
 802274e:	781a      	ldrb	r2, [r3, #0]
 8022750:	187b      	adds	r3, r7, r1
 8022752:	3201      	adds	r2, #1
 8022754:	701a      	strb	r2, [r3, #0]
          break;
 8022756:	e02e      	b.n	80227b6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8022758:	687a      	ldr	r2, [r7, #4]
 802275a:	23ac      	movs	r3, #172	@ 0xac
 802275c:	009b      	lsls	r3, r3, #2
 802275e:	58d3      	ldr	r3, [r2, r3]
 8022760:	699b      	ldr	r3, [r3, #24]
 8022762:	2b00      	cmp	r3, #0
 8022764:	d00d      	beq.n	8022782 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8022766:	687a      	ldr	r2, [r7, #4]
 8022768:	23ac      	movs	r3, #172	@ 0xac
 802276a:	009b      	lsls	r3, r3, #2
 802276c:	58d3      	ldr	r3, [r2, r3]
 802276e:	699b      	ldr	r3, [r3, #24]
 8022770:	687a      	ldr	r2, [r7, #4]
 8022772:	7c12      	ldrb	r2, [r2, #16]
 8022774:	2108      	movs	r1, #8
 8022776:	1879      	adds	r1, r7, r1
 8022778:	0010      	movs	r0, r2
 802277a:	4798      	blx	r3
 802277c:	0003      	movs	r3, r0
 802277e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022780:	e019      	b.n	80227b6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022782:	683a      	ldr	r2, [r7, #0]
 8022784:	687b      	ldr	r3, [r7, #4]
 8022786:	0011      	movs	r1, r2
 8022788:	0018      	movs	r0, r3
 802278a:	f000 fa76 	bl	8022c7a <USBD_CtlError>
            err++;
 802278e:	210b      	movs	r1, #11
 8022790:	187b      	adds	r3, r7, r1
 8022792:	781a      	ldrb	r2, [r3, #0]
 8022794:	187b      	adds	r3, r7, r1
 8022796:	3201      	adds	r2, #1
 8022798:	701a      	strb	r2, [r3, #0]
          break;
 802279a:	e00c      	b.n	80227b6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 802279c:	683a      	ldr	r2, [r7, #0]
 802279e:	687b      	ldr	r3, [r7, #4]
 80227a0:	0011      	movs	r1, r2
 80227a2:	0018      	movs	r0, r3
 80227a4:	f000 fa69 	bl	8022c7a <USBD_CtlError>
          err++;
 80227a8:	210b      	movs	r1, #11
 80227aa:	187b      	adds	r3, r7, r1
 80227ac:	781a      	ldrb	r2, [r3, #0]
 80227ae:	187b      	adds	r3, r7, r1
 80227b0:	3201      	adds	r2, #1
 80227b2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80227b4:	e04b      	b.n	802284e <USBD_GetDescriptor+0x2fa>
 80227b6:	e04a      	b.n	802284e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	7c1b      	ldrb	r3, [r3, #16]
 80227bc:	2b00      	cmp	r3, #0
 80227be:	d10b      	bne.n	80227d8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80227c0:	687a      	ldr	r2, [r7, #4]
 80227c2:	23ad      	movs	r3, #173	@ 0xad
 80227c4:	009b      	lsls	r3, r3, #2
 80227c6:	58d3      	ldr	r3, [r2, r3]
 80227c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80227ca:	2208      	movs	r2, #8
 80227cc:	18ba      	adds	r2, r7, r2
 80227ce:	0010      	movs	r0, r2
 80227d0:	4798      	blx	r3
 80227d2:	0003      	movs	r3, r0
 80227d4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80227d6:	e03a      	b.n	802284e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80227d8:	683a      	ldr	r2, [r7, #0]
 80227da:	687b      	ldr	r3, [r7, #4]
 80227dc:	0011      	movs	r1, r2
 80227de:	0018      	movs	r0, r3
 80227e0:	f000 fa4b 	bl	8022c7a <USBD_CtlError>
        err++;
 80227e4:	210b      	movs	r1, #11
 80227e6:	187b      	adds	r3, r7, r1
 80227e8:	781a      	ldrb	r2, [r3, #0]
 80227ea:	187b      	adds	r3, r7, r1
 80227ec:	3201      	adds	r2, #1
 80227ee:	701a      	strb	r2, [r3, #0]
      break;
 80227f0:	e02d      	b.n	802284e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	7c1b      	ldrb	r3, [r3, #16]
 80227f6:	2b00      	cmp	r3, #0
 80227f8:	d10f      	bne.n	802281a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80227fa:	687a      	ldr	r2, [r7, #4]
 80227fc:	23ad      	movs	r3, #173	@ 0xad
 80227fe:	009b      	lsls	r3, r3, #2
 8022800:	58d3      	ldr	r3, [r2, r3]
 8022802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022804:	2208      	movs	r2, #8
 8022806:	18ba      	adds	r2, r7, r2
 8022808:	0010      	movs	r0, r2
 802280a:	4798      	blx	r3
 802280c:	0003      	movs	r3, r0
 802280e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8022810:	68fb      	ldr	r3, [r7, #12]
 8022812:	3301      	adds	r3, #1
 8022814:	2207      	movs	r2, #7
 8022816:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022818:	e019      	b.n	802284e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 802281a:	683a      	ldr	r2, [r7, #0]
 802281c:	687b      	ldr	r3, [r7, #4]
 802281e:	0011      	movs	r1, r2
 8022820:	0018      	movs	r0, r3
 8022822:	f000 fa2a 	bl	8022c7a <USBD_CtlError>
        err++;
 8022826:	210b      	movs	r1, #11
 8022828:	187b      	adds	r3, r7, r1
 802282a:	781a      	ldrb	r2, [r3, #0]
 802282c:	187b      	adds	r3, r7, r1
 802282e:	3201      	adds	r2, #1
 8022830:	701a      	strb	r2, [r3, #0]
      break;
 8022832:	e00c      	b.n	802284e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8022834:	683a      	ldr	r2, [r7, #0]
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	0011      	movs	r1, r2
 802283a:	0018      	movs	r0, r3
 802283c:	f000 fa1d 	bl	8022c7a <USBD_CtlError>
      err++;
 8022840:	210b      	movs	r1, #11
 8022842:	187b      	adds	r3, r7, r1
 8022844:	781a      	ldrb	r2, [r3, #0]
 8022846:	187b      	adds	r3, r7, r1
 8022848:	3201      	adds	r2, #1
 802284a:	701a      	strb	r2, [r3, #0]
      break;
 802284c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 802284e:	230b      	movs	r3, #11
 8022850:	18fb      	adds	r3, r7, r3
 8022852:	781b      	ldrb	r3, [r3, #0]
 8022854:	2b00      	cmp	r3, #0
 8022856:	d127      	bne.n	80228a8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8022858:	2108      	movs	r1, #8
 802285a:	187b      	adds	r3, r7, r1
 802285c:	881b      	ldrh	r3, [r3, #0]
 802285e:	2b00      	cmp	r3, #0
 8022860:	d019      	beq.n	8022896 <USBD_GetDescriptor+0x342>
 8022862:	683b      	ldr	r3, [r7, #0]
 8022864:	88db      	ldrh	r3, [r3, #6]
 8022866:	2b00      	cmp	r3, #0
 8022868:	d015      	beq.n	8022896 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 802286a:	683b      	ldr	r3, [r7, #0]
 802286c:	88da      	ldrh	r2, [r3, #6]
 802286e:	187b      	adds	r3, r7, r1
 8022870:	881b      	ldrh	r3, [r3, #0]
 8022872:	1c18      	adds	r0, r3, #0
 8022874:	1c11      	adds	r1, r2, #0
 8022876:	b28a      	uxth	r2, r1
 8022878:	b283      	uxth	r3, r0
 802287a:	429a      	cmp	r2, r3
 802287c:	d900      	bls.n	8022880 <USBD_GetDescriptor+0x32c>
 802287e:	1c01      	adds	r1, r0, #0
 8022880:	b28a      	uxth	r2, r1
 8022882:	2108      	movs	r1, #8
 8022884:	187b      	adds	r3, r7, r1
 8022886:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8022888:	187b      	adds	r3, r7, r1
 802288a:	881a      	ldrh	r2, [r3, #0]
 802288c:	68f9      	ldr	r1, [r7, #12]
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	0018      	movs	r0, r3
 8022892:	f000 fa70 	bl	8022d76 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8022896:	683b      	ldr	r3, [r7, #0]
 8022898:	88db      	ldrh	r3, [r3, #6]
 802289a:	2b00      	cmp	r3, #0
 802289c:	d105      	bne.n	80228aa <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	0018      	movs	r0, r3
 80228a2:	f000 fad2 	bl	8022e4a <USBD_CtlSendStatus>
 80228a6:	e000      	b.n	80228aa <USBD_GetDescriptor+0x356>
    return;
 80228a8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80228aa:	46bd      	mov	sp, r7
 80228ac:	b004      	add	sp, #16
 80228ae:	bd80      	pop	{r7, pc}
 80228b0:	0802e4dc 	.word	0x0802e4dc
 80228b4:	0802e4fc 	.word	0x0802e4fc

080228b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80228b8:	b590      	push	{r4, r7, lr}
 80228ba:	b085      	sub	sp, #20
 80228bc:	af00      	add	r7, sp, #0
 80228be:	6078      	str	r0, [r7, #4]
 80228c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80228c2:	683b      	ldr	r3, [r7, #0]
 80228c4:	889b      	ldrh	r3, [r3, #4]
 80228c6:	2b00      	cmp	r3, #0
 80228c8:	d13d      	bne.n	8022946 <USBD_SetAddress+0x8e>
 80228ca:	683b      	ldr	r3, [r7, #0]
 80228cc:	88db      	ldrh	r3, [r3, #6]
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	d139      	bne.n	8022946 <USBD_SetAddress+0x8e>
 80228d2:	683b      	ldr	r3, [r7, #0]
 80228d4:	885b      	ldrh	r3, [r3, #2]
 80228d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80228d8:	d835      	bhi.n	8022946 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80228da:	683b      	ldr	r3, [r7, #0]
 80228dc:	885b      	ldrh	r3, [r3, #2]
 80228de:	b2da      	uxtb	r2, r3
 80228e0:	230f      	movs	r3, #15
 80228e2:	18fb      	adds	r3, r7, r3
 80228e4:	217f      	movs	r1, #127	@ 0x7f
 80228e6:	400a      	ands	r2, r1
 80228e8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80228ea:	687a      	ldr	r2, [r7, #4]
 80228ec:	23a7      	movs	r3, #167	@ 0xa7
 80228ee:	009b      	lsls	r3, r3, #2
 80228f0:	5cd3      	ldrb	r3, [r2, r3]
 80228f2:	2b03      	cmp	r3, #3
 80228f4:	d106      	bne.n	8022904 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80228f6:	683a      	ldr	r2, [r7, #0]
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	0011      	movs	r1, r2
 80228fc:	0018      	movs	r0, r3
 80228fe:	f000 f9bc 	bl	8022c7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022902:	e027      	b.n	8022954 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8022904:	687b      	ldr	r3, [r7, #4]
 8022906:	240f      	movs	r4, #15
 8022908:	193a      	adds	r2, r7, r4
 802290a:	4914      	ldr	r1, [pc, #80]	@ (802295c <USBD_SetAddress+0xa4>)
 802290c:	7812      	ldrb	r2, [r2, #0]
 802290e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8022910:	193b      	adds	r3, r7, r4
 8022912:	781a      	ldrb	r2, [r3, #0]
 8022914:	687b      	ldr	r3, [r7, #4]
 8022916:	0011      	movs	r1, r2
 8022918:	0018      	movs	r0, r3
 802291a:	f000 ff69 	bl	80237f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 802291e:	687b      	ldr	r3, [r7, #4]
 8022920:	0018      	movs	r0, r3
 8022922:	f000 fa92 	bl	8022e4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8022926:	193b      	adds	r3, r7, r4
 8022928:	781b      	ldrb	r3, [r3, #0]
 802292a:	2b00      	cmp	r3, #0
 802292c:	d005      	beq.n	802293a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 802292e:	687a      	ldr	r2, [r7, #4]
 8022930:	23a7      	movs	r3, #167	@ 0xa7
 8022932:	009b      	lsls	r3, r3, #2
 8022934:	2102      	movs	r1, #2
 8022936:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022938:	e00c      	b.n	8022954 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 802293a:	687a      	ldr	r2, [r7, #4]
 802293c:	23a7      	movs	r3, #167	@ 0xa7
 802293e:	009b      	lsls	r3, r3, #2
 8022940:	2101      	movs	r1, #1
 8022942:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022944:	e006      	b.n	8022954 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8022946:	683a      	ldr	r2, [r7, #0]
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	0011      	movs	r1, r2
 802294c:	0018      	movs	r0, r3
 802294e:	f000 f994 	bl	8022c7a <USBD_CtlError>
  }
}
 8022952:	46c0      	nop			@ (mov r8, r8)
 8022954:	46c0      	nop			@ (mov r8, r8)
 8022956:	46bd      	mov	sp, r7
 8022958:	b005      	add	sp, #20
 802295a:	bd90      	pop	{r4, r7, pc}
 802295c:	0000029e 	.word	0x0000029e

08022960 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022960:	b580      	push	{r7, lr}
 8022962:	b082      	sub	sp, #8
 8022964:	af00      	add	r7, sp, #0
 8022966:	6078      	str	r0, [r7, #4]
 8022968:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 802296a:	683b      	ldr	r3, [r7, #0]
 802296c:	885b      	ldrh	r3, [r3, #2]
 802296e:	b2da      	uxtb	r2, r3
 8022970:	4b4c      	ldr	r3, [pc, #304]	@ (8022aa4 <USBD_SetConfig+0x144>)
 8022972:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8022974:	4b4b      	ldr	r3, [pc, #300]	@ (8022aa4 <USBD_SetConfig+0x144>)
 8022976:	781b      	ldrb	r3, [r3, #0]
 8022978:	2b01      	cmp	r3, #1
 802297a:	d906      	bls.n	802298a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 802297c:	683a      	ldr	r2, [r7, #0]
 802297e:	687b      	ldr	r3, [r7, #4]
 8022980:	0011      	movs	r1, r2
 8022982:	0018      	movs	r0, r3
 8022984:	f000 f979 	bl	8022c7a <USBD_CtlError>
 8022988:	e088      	b.n	8022a9c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 802298a:	687a      	ldr	r2, [r7, #4]
 802298c:	23a7      	movs	r3, #167	@ 0xa7
 802298e:	009b      	lsls	r3, r3, #2
 8022990:	5cd3      	ldrb	r3, [r2, r3]
 8022992:	2b02      	cmp	r3, #2
 8022994:	d002      	beq.n	802299c <USBD_SetConfig+0x3c>
 8022996:	2b03      	cmp	r3, #3
 8022998:	d029      	beq.n	80229ee <USBD_SetConfig+0x8e>
 802299a:	e071      	b.n	8022a80 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 802299c:	4b41      	ldr	r3, [pc, #260]	@ (8022aa4 <USBD_SetConfig+0x144>)
 802299e:	781b      	ldrb	r3, [r3, #0]
 80229a0:	2b00      	cmp	r3, #0
 80229a2:	d01f      	beq.n	80229e4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80229a4:	4b3f      	ldr	r3, [pc, #252]	@ (8022aa4 <USBD_SetConfig+0x144>)
 80229a6:	781b      	ldrb	r3, [r3, #0]
 80229a8:	001a      	movs	r2, r3
 80229aa:	687b      	ldr	r3, [r7, #4]
 80229ac:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80229ae:	687a      	ldr	r2, [r7, #4]
 80229b0:	23a7      	movs	r3, #167	@ 0xa7
 80229b2:	009b      	lsls	r3, r3, #2
 80229b4:	2103      	movs	r1, #3
 80229b6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80229b8:	4b3a      	ldr	r3, [pc, #232]	@ (8022aa4 <USBD_SetConfig+0x144>)
 80229ba:	781a      	ldrb	r2, [r3, #0]
 80229bc:	687b      	ldr	r3, [r7, #4]
 80229be:	0011      	movs	r1, r2
 80229c0:	0018      	movs	r0, r3
 80229c2:	f7ff f8c6 	bl	8021b52 <USBD_SetClassConfig>
 80229c6:	0003      	movs	r3, r0
 80229c8:	2b02      	cmp	r3, #2
 80229ca:	d106      	bne.n	80229da <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80229cc:	683a      	ldr	r2, [r7, #0]
 80229ce:	687b      	ldr	r3, [r7, #4]
 80229d0:	0011      	movs	r1, r2
 80229d2:	0018      	movs	r0, r3
 80229d4:	f000 f951 	bl	8022c7a <USBD_CtlError>
            return;
 80229d8:	e060      	b.n	8022a9c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80229da:	687b      	ldr	r3, [r7, #4]
 80229dc:	0018      	movs	r0, r3
 80229de:	f000 fa34 	bl	8022e4a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80229e2:	e05b      	b.n	8022a9c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80229e4:	687b      	ldr	r3, [r7, #4]
 80229e6:	0018      	movs	r0, r3
 80229e8:	f000 fa2f 	bl	8022e4a <USBD_CtlSendStatus>
        break;
 80229ec:	e056      	b.n	8022a9c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80229ee:	4b2d      	ldr	r3, [pc, #180]	@ (8022aa4 <USBD_SetConfig+0x144>)
 80229f0:	781b      	ldrb	r3, [r3, #0]
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	d115      	bne.n	8022a22 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80229f6:	687a      	ldr	r2, [r7, #4]
 80229f8:	23a7      	movs	r3, #167	@ 0xa7
 80229fa:	009b      	lsls	r3, r3, #2
 80229fc:	2102      	movs	r1, #2
 80229fe:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8022a00:	4b28      	ldr	r3, [pc, #160]	@ (8022aa4 <USBD_SetConfig+0x144>)
 8022a02:	781b      	ldrb	r3, [r3, #0]
 8022a04:	001a      	movs	r2, r3
 8022a06:	687b      	ldr	r3, [r7, #4]
 8022a08:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8022a0a:	4b26      	ldr	r3, [pc, #152]	@ (8022aa4 <USBD_SetConfig+0x144>)
 8022a0c:	781a      	ldrb	r2, [r3, #0]
 8022a0e:	687b      	ldr	r3, [r7, #4]
 8022a10:	0011      	movs	r1, r2
 8022a12:	0018      	movs	r0, r3
 8022a14:	f7ff f8c4 	bl	8021ba0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	0018      	movs	r0, r3
 8022a1c:	f000 fa15 	bl	8022e4a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022a20:	e03c      	b.n	8022a9c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8022a22:	4b20      	ldr	r3, [pc, #128]	@ (8022aa4 <USBD_SetConfig+0x144>)
 8022a24:	781b      	ldrb	r3, [r3, #0]
 8022a26:	001a      	movs	r2, r3
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	685b      	ldr	r3, [r3, #4]
 8022a2c:	429a      	cmp	r2, r3
 8022a2e:	d022      	beq.n	8022a76 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	685b      	ldr	r3, [r3, #4]
 8022a34:	b2da      	uxtb	r2, r3
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	0011      	movs	r1, r2
 8022a3a:	0018      	movs	r0, r3
 8022a3c:	f7ff f8b0 	bl	8021ba0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8022a40:	4b18      	ldr	r3, [pc, #96]	@ (8022aa4 <USBD_SetConfig+0x144>)
 8022a42:	781b      	ldrb	r3, [r3, #0]
 8022a44:	001a      	movs	r2, r3
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022a4a:	4b16      	ldr	r3, [pc, #88]	@ (8022aa4 <USBD_SetConfig+0x144>)
 8022a4c:	781a      	ldrb	r2, [r3, #0]
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	0011      	movs	r1, r2
 8022a52:	0018      	movs	r0, r3
 8022a54:	f7ff f87d 	bl	8021b52 <USBD_SetClassConfig>
 8022a58:	0003      	movs	r3, r0
 8022a5a:	2b02      	cmp	r3, #2
 8022a5c:	d106      	bne.n	8022a6c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8022a5e:	683a      	ldr	r2, [r7, #0]
 8022a60:	687b      	ldr	r3, [r7, #4]
 8022a62:	0011      	movs	r1, r2
 8022a64:	0018      	movs	r0, r3
 8022a66:	f000 f908 	bl	8022c7a <USBD_CtlError>
            return;
 8022a6a:	e017      	b.n	8022a9c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	0018      	movs	r0, r3
 8022a70:	f000 f9eb 	bl	8022e4a <USBD_CtlSendStatus>
        break;
 8022a74:	e012      	b.n	8022a9c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	0018      	movs	r0, r3
 8022a7a:	f000 f9e6 	bl	8022e4a <USBD_CtlSendStatus>
        break;
 8022a7e:	e00d      	b.n	8022a9c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8022a80:	683a      	ldr	r2, [r7, #0]
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	0011      	movs	r1, r2
 8022a86:	0018      	movs	r0, r3
 8022a88:	f000 f8f7 	bl	8022c7a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022a8c:	4b05      	ldr	r3, [pc, #20]	@ (8022aa4 <USBD_SetConfig+0x144>)
 8022a8e:	781a      	ldrb	r2, [r3, #0]
 8022a90:	687b      	ldr	r3, [r7, #4]
 8022a92:	0011      	movs	r1, r2
 8022a94:	0018      	movs	r0, r3
 8022a96:	f7ff f883 	bl	8021ba0 <USBD_ClrClassConfig>
        break;
 8022a9a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022a9c:	46bd      	mov	sp, r7
 8022a9e:	b002      	add	sp, #8
 8022aa0:	bd80      	pop	{r7, pc}
 8022aa2:	46c0      	nop			@ (mov r8, r8)
 8022aa4:	20002534 	.word	0x20002534

08022aa8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022aa8:	b580      	push	{r7, lr}
 8022aaa:	b082      	sub	sp, #8
 8022aac:	af00      	add	r7, sp, #0
 8022aae:	6078      	str	r0, [r7, #4]
 8022ab0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8022ab2:	683b      	ldr	r3, [r7, #0]
 8022ab4:	88db      	ldrh	r3, [r3, #6]
 8022ab6:	2b01      	cmp	r3, #1
 8022ab8:	d006      	beq.n	8022ac8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8022aba:	683a      	ldr	r2, [r7, #0]
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	0011      	movs	r1, r2
 8022ac0:	0018      	movs	r0, r3
 8022ac2:	f000 f8da 	bl	8022c7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8022ac6:	e026      	b.n	8022b16 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8022ac8:	687a      	ldr	r2, [r7, #4]
 8022aca:	23a7      	movs	r3, #167	@ 0xa7
 8022acc:	009b      	lsls	r3, r3, #2
 8022ace:	5cd3      	ldrb	r3, [r2, r3]
 8022ad0:	2b02      	cmp	r3, #2
 8022ad2:	dc02      	bgt.n	8022ada <USBD_GetConfig+0x32>
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	dc03      	bgt.n	8022ae0 <USBD_GetConfig+0x38>
 8022ad8:	e016      	b.n	8022b08 <USBD_GetConfig+0x60>
 8022ada:	2b03      	cmp	r3, #3
 8022adc:	d00c      	beq.n	8022af8 <USBD_GetConfig+0x50>
 8022ade:	e013      	b.n	8022b08 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	2200      	movs	r2, #0
 8022ae4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8022ae6:	687b      	ldr	r3, [r7, #4]
 8022ae8:	3308      	adds	r3, #8
 8022aea:	0019      	movs	r1, r3
 8022aec:	687b      	ldr	r3, [r7, #4]
 8022aee:	2201      	movs	r2, #1
 8022af0:	0018      	movs	r0, r3
 8022af2:	f000 f940 	bl	8022d76 <USBD_CtlSendData>
        break;
 8022af6:	e00e      	b.n	8022b16 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8022af8:	687b      	ldr	r3, [r7, #4]
 8022afa:	1d19      	adds	r1, r3, #4
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	2201      	movs	r2, #1
 8022b00:	0018      	movs	r0, r3
 8022b02:	f000 f938 	bl	8022d76 <USBD_CtlSendData>
        break;
 8022b06:	e006      	b.n	8022b16 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8022b08:	683a      	ldr	r2, [r7, #0]
 8022b0a:	687b      	ldr	r3, [r7, #4]
 8022b0c:	0011      	movs	r1, r2
 8022b0e:	0018      	movs	r0, r3
 8022b10:	f000 f8b3 	bl	8022c7a <USBD_CtlError>
        break;
 8022b14:	46c0      	nop			@ (mov r8, r8)
}
 8022b16:	46c0      	nop			@ (mov r8, r8)
 8022b18:	46bd      	mov	sp, r7
 8022b1a:	b002      	add	sp, #8
 8022b1c:	bd80      	pop	{r7, pc}

08022b1e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022b1e:	b580      	push	{r7, lr}
 8022b20:	b082      	sub	sp, #8
 8022b22:	af00      	add	r7, sp, #0
 8022b24:	6078      	str	r0, [r7, #4]
 8022b26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022b28:	687a      	ldr	r2, [r7, #4]
 8022b2a:	23a7      	movs	r3, #167	@ 0xa7
 8022b2c:	009b      	lsls	r3, r3, #2
 8022b2e:	5cd3      	ldrb	r3, [r2, r3]
 8022b30:	3b01      	subs	r3, #1
 8022b32:	2b02      	cmp	r3, #2
 8022b34:	d822      	bhi.n	8022b7c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022b36:	683b      	ldr	r3, [r7, #0]
 8022b38:	88db      	ldrh	r3, [r3, #6]
 8022b3a:	2b02      	cmp	r3, #2
 8022b3c:	d006      	beq.n	8022b4c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8022b3e:	683a      	ldr	r2, [r7, #0]
 8022b40:	687b      	ldr	r3, [r7, #4]
 8022b42:	0011      	movs	r1, r2
 8022b44:	0018      	movs	r0, r3
 8022b46:	f000 f898 	bl	8022c7a <USBD_CtlError>
        break;
 8022b4a:	e01e      	b.n	8022b8a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022b4c:	687b      	ldr	r3, [r7, #4]
 8022b4e:	2201      	movs	r2, #1
 8022b50:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8022b52:	687a      	ldr	r2, [r7, #4]
 8022b54:	23a9      	movs	r3, #169	@ 0xa9
 8022b56:	009b      	lsls	r3, r3, #2
 8022b58:	58d3      	ldr	r3, [r2, r3]
 8022b5a:	2b00      	cmp	r3, #0
 8022b5c:	d005      	beq.n	8022b6a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022b5e:	687b      	ldr	r3, [r7, #4]
 8022b60:	68db      	ldr	r3, [r3, #12]
 8022b62:	2202      	movs	r2, #2
 8022b64:	431a      	orrs	r2, r3
 8022b66:	687b      	ldr	r3, [r7, #4]
 8022b68:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8022b6a:	687b      	ldr	r3, [r7, #4]
 8022b6c:	330c      	adds	r3, #12
 8022b6e:	0019      	movs	r1, r3
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	2202      	movs	r2, #2
 8022b74:	0018      	movs	r0, r3
 8022b76:	f000 f8fe 	bl	8022d76 <USBD_CtlSendData>
      break;
 8022b7a:	e006      	b.n	8022b8a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022b7c:	683a      	ldr	r2, [r7, #0]
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	0011      	movs	r1, r2
 8022b82:	0018      	movs	r0, r3
 8022b84:	f000 f879 	bl	8022c7a <USBD_CtlError>
      break;
 8022b88:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022b8a:	46c0      	nop			@ (mov r8, r8)
 8022b8c:	46bd      	mov	sp, r7
 8022b8e:	b002      	add	sp, #8
 8022b90:	bd80      	pop	{r7, pc}

08022b92 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022b92:	b580      	push	{r7, lr}
 8022b94:	b082      	sub	sp, #8
 8022b96:	af00      	add	r7, sp, #0
 8022b98:	6078      	str	r0, [r7, #4]
 8022b9a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022b9c:	683b      	ldr	r3, [r7, #0]
 8022b9e:	885b      	ldrh	r3, [r3, #2]
 8022ba0:	2b01      	cmp	r3, #1
 8022ba2:	d108      	bne.n	8022bb6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8022ba4:	687a      	ldr	r2, [r7, #4]
 8022ba6:	23a9      	movs	r3, #169	@ 0xa9
 8022ba8:	009b      	lsls	r3, r3, #2
 8022baa:	2101      	movs	r1, #1
 8022bac:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022bae:	687b      	ldr	r3, [r7, #4]
 8022bb0:	0018      	movs	r0, r3
 8022bb2:	f000 f94a 	bl	8022e4a <USBD_CtlSendStatus>
  }
}
 8022bb6:	46c0      	nop			@ (mov r8, r8)
 8022bb8:	46bd      	mov	sp, r7
 8022bba:	b002      	add	sp, #8
 8022bbc:	bd80      	pop	{r7, pc}

08022bbe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022bbe:	b580      	push	{r7, lr}
 8022bc0:	b082      	sub	sp, #8
 8022bc2:	af00      	add	r7, sp, #0
 8022bc4:	6078      	str	r0, [r7, #4]
 8022bc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022bc8:	687a      	ldr	r2, [r7, #4]
 8022bca:	23a7      	movs	r3, #167	@ 0xa7
 8022bcc:	009b      	lsls	r3, r3, #2
 8022bce:	5cd3      	ldrb	r3, [r2, r3]
 8022bd0:	3b01      	subs	r3, #1
 8022bd2:	2b02      	cmp	r3, #2
 8022bd4:	d80d      	bhi.n	8022bf2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022bd6:	683b      	ldr	r3, [r7, #0]
 8022bd8:	885b      	ldrh	r3, [r3, #2]
 8022bda:	2b01      	cmp	r3, #1
 8022bdc:	d110      	bne.n	8022c00 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8022bde:	687a      	ldr	r2, [r7, #4]
 8022be0:	23a9      	movs	r3, #169	@ 0xa9
 8022be2:	009b      	lsls	r3, r3, #2
 8022be4:	2100      	movs	r1, #0
 8022be6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8022be8:	687b      	ldr	r3, [r7, #4]
 8022bea:	0018      	movs	r0, r3
 8022bec:	f000 f92d 	bl	8022e4a <USBD_CtlSendStatus>
      }
      break;
 8022bf0:	e006      	b.n	8022c00 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8022bf2:	683a      	ldr	r2, [r7, #0]
 8022bf4:	687b      	ldr	r3, [r7, #4]
 8022bf6:	0011      	movs	r1, r2
 8022bf8:	0018      	movs	r0, r3
 8022bfa:	f000 f83e 	bl	8022c7a <USBD_CtlError>
      break;
 8022bfe:	e000      	b.n	8022c02 <USBD_ClrFeature+0x44>
      break;
 8022c00:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022c02:	46c0      	nop			@ (mov r8, r8)
 8022c04:	46bd      	mov	sp, r7
 8022c06:	b002      	add	sp, #8
 8022c08:	bd80      	pop	{r7, pc}

08022c0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022c0a:	b580      	push	{r7, lr}
 8022c0c:	b082      	sub	sp, #8
 8022c0e:	af00      	add	r7, sp, #0
 8022c10:	6078      	str	r0, [r7, #4]
 8022c12:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022c14:	683b      	ldr	r3, [r7, #0]
 8022c16:	781a      	ldrb	r2, [r3, #0]
 8022c18:	687b      	ldr	r3, [r7, #4]
 8022c1a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022c1c:	683b      	ldr	r3, [r7, #0]
 8022c1e:	785a      	ldrb	r2, [r3, #1]
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022c24:	683b      	ldr	r3, [r7, #0]
 8022c26:	3302      	adds	r3, #2
 8022c28:	781b      	ldrb	r3, [r3, #0]
 8022c2a:	001a      	movs	r2, r3
 8022c2c:	683b      	ldr	r3, [r7, #0]
 8022c2e:	3303      	adds	r3, #3
 8022c30:	781b      	ldrb	r3, [r3, #0]
 8022c32:	021b      	lsls	r3, r3, #8
 8022c34:	b29b      	uxth	r3, r3
 8022c36:	18d3      	adds	r3, r2, r3
 8022c38:	b29a      	uxth	r2, r3
 8022c3a:	687b      	ldr	r3, [r7, #4]
 8022c3c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022c3e:	683b      	ldr	r3, [r7, #0]
 8022c40:	3304      	adds	r3, #4
 8022c42:	781b      	ldrb	r3, [r3, #0]
 8022c44:	001a      	movs	r2, r3
 8022c46:	683b      	ldr	r3, [r7, #0]
 8022c48:	3305      	adds	r3, #5
 8022c4a:	781b      	ldrb	r3, [r3, #0]
 8022c4c:	021b      	lsls	r3, r3, #8
 8022c4e:	b29b      	uxth	r3, r3
 8022c50:	18d3      	adds	r3, r2, r3
 8022c52:	b29a      	uxth	r2, r3
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8022c58:	683b      	ldr	r3, [r7, #0]
 8022c5a:	3306      	adds	r3, #6
 8022c5c:	781b      	ldrb	r3, [r3, #0]
 8022c5e:	001a      	movs	r2, r3
 8022c60:	683b      	ldr	r3, [r7, #0]
 8022c62:	3307      	adds	r3, #7
 8022c64:	781b      	ldrb	r3, [r3, #0]
 8022c66:	021b      	lsls	r3, r3, #8
 8022c68:	b29b      	uxth	r3, r3
 8022c6a:	18d3      	adds	r3, r2, r3
 8022c6c:	b29a      	uxth	r2, r3
 8022c6e:	687b      	ldr	r3, [r7, #4]
 8022c70:	80da      	strh	r2, [r3, #6]

}
 8022c72:	46c0      	nop			@ (mov r8, r8)
 8022c74:	46bd      	mov	sp, r7
 8022c76:	b002      	add	sp, #8
 8022c78:	bd80      	pop	{r7, pc}

08022c7a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8022c7a:	b580      	push	{r7, lr}
 8022c7c:	b082      	sub	sp, #8
 8022c7e:	af00      	add	r7, sp, #0
 8022c80:	6078      	str	r0, [r7, #4]
 8022c82:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022c84:	687b      	ldr	r3, [r7, #4]
 8022c86:	2180      	movs	r1, #128	@ 0x80
 8022c88:	0018      	movs	r0, r3
 8022c8a:	f000 fd2a 	bl	80236e2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8022c8e:	687b      	ldr	r3, [r7, #4]
 8022c90:	2100      	movs	r1, #0
 8022c92:	0018      	movs	r0, r3
 8022c94:	f000 fd25 	bl	80236e2 <USBD_LL_StallEP>
}
 8022c98:	46c0      	nop			@ (mov r8, r8)
 8022c9a:	46bd      	mov	sp, r7
 8022c9c:	b002      	add	sp, #8
 8022c9e:	bd80      	pop	{r7, pc}

08022ca0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022ca0:	b590      	push	{r4, r7, lr}
 8022ca2:	b087      	sub	sp, #28
 8022ca4:	af00      	add	r7, sp, #0
 8022ca6:	60f8      	str	r0, [r7, #12]
 8022ca8:	60b9      	str	r1, [r7, #8]
 8022caa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022cac:	2417      	movs	r4, #23
 8022cae:	193b      	adds	r3, r7, r4
 8022cb0:	2200      	movs	r2, #0
 8022cb2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8022cb4:	68fb      	ldr	r3, [r7, #12]
 8022cb6:	2b00      	cmp	r3, #0
 8022cb8:	d03c      	beq.n	8022d34 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8022cba:	68fb      	ldr	r3, [r7, #12]
 8022cbc:	0018      	movs	r0, r3
 8022cbe:	f000 f83d 	bl	8022d3c <USBD_GetLen>
 8022cc2:	0003      	movs	r3, r0
 8022cc4:	3301      	adds	r3, #1
 8022cc6:	b29b      	uxth	r3, r3
 8022cc8:	18db      	adds	r3, r3, r3
 8022cca:	b29a      	uxth	r2, r3
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8022cd0:	193b      	adds	r3, r7, r4
 8022cd2:	781b      	ldrb	r3, [r3, #0]
 8022cd4:	193a      	adds	r2, r7, r4
 8022cd6:	1c59      	adds	r1, r3, #1
 8022cd8:	7011      	strb	r1, [r2, #0]
 8022cda:	001a      	movs	r2, r3
 8022cdc:	68bb      	ldr	r3, [r7, #8]
 8022cde:	189b      	adds	r3, r3, r2
 8022ce0:	687a      	ldr	r2, [r7, #4]
 8022ce2:	7812      	ldrb	r2, [r2, #0]
 8022ce4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8022ce6:	193b      	adds	r3, r7, r4
 8022ce8:	781b      	ldrb	r3, [r3, #0]
 8022cea:	193a      	adds	r2, r7, r4
 8022cec:	1c59      	adds	r1, r3, #1
 8022cee:	7011      	strb	r1, [r2, #0]
 8022cf0:	001a      	movs	r2, r3
 8022cf2:	68bb      	ldr	r3, [r7, #8]
 8022cf4:	189b      	adds	r3, r3, r2
 8022cf6:	2203      	movs	r2, #3
 8022cf8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8022cfa:	e017      	b.n	8022d2c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8022cfc:	68fb      	ldr	r3, [r7, #12]
 8022cfe:	1c5a      	adds	r2, r3, #1
 8022d00:	60fa      	str	r2, [r7, #12]
 8022d02:	2417      	movs	r4, #23
 8022d04:	193a      	adds	r2, r7, r4
 8022d06:	7812      	ldrb	r2, [r2, #0]
 8022d08:	1939      	adds	r1, r7, r4
 8022d0a:	1c50      	adds	r0, r2, #1
 8022d0c:	7008      	strb	r0, [r1, #0]
 8022d0e:	0011      	movs	r1, r2
 8022d10:	68ba      	ldr	r2, [r7, #8]
 8022d12:	1852      	adds	r2, r2, r1
 8022d14:	781b      	ldrb	r3, [r3, #0]
 8022d16:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8022d18:	193b      	adds	r3, r7, r4
 8022d1a:	781b      	ldrb	r3, [r3, #0]
 8022d1c:	193a      	adds	r2, r7, r4
 8022d1e:	1c59      	adds	r1, r3, #1
 8022d20:	7011      	strb	r1, [r2, #0]
 8022d22:	001a      	movs	r2, r3
 8022d24:	68bb      	ldr	r3, [r7, #8]
 8022d26:	189b      	adds	r3, r3, r2
 8022d28:	2200      	movs	r2, #0
 8022d2a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022d2c:	68fb      	ldr	r3, [r7, #12]
 8022d2e:	781b      	ldrb	r3, [r3, #0]
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	d1e3      	bne.n	8022cfc <USBD_GetString+0x5c>
    }
  }
}
 8022d34:	46c0      	nop			@ (mov r8, r8)
 8022d36:	46bd      	mov	sp, r7
 8022d38:	b007      	add	sp, #28
 8022d3a:	bd90      	pop	{r4, r7, pc}

08022d3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022d3c:	b580      	push	{r7, lr}
 8022d3e:	b084      	sub	sp, #16
 8022d40:	af00      	add	r7, sp, #0
 8022d42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022d44:	230f      	movs	r3, #15
 8022d46:	18fb      	adds	r3, r7, r3
 8022d48:	2200      	movs	r2, #0
 8022d4a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8022d4c:	e008      	b.n	8022d60 <USBD_GetLen+0x24>
  {
    len++;
 8022d4e:	210f      	movs	r1, #15
 8022d50:	187b      	adds	r3, r7, r1
 8022d52:	781a      	ldrb	r2, [r3, #0]
 8022d54:	187b      	adds	r3, r7, r1
 8022d56:	3201      	adds	r2, #1
 8022d58:	701a      	strb	r2, [r3, #0]
    buf++;
 8022d5a:	687b      	ldr	r3, [r7, #4]
 8022d5c:	3301      	adds	r3, #1
 8022d5e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8022d60:	687b      	ldr	r3, [r7, #4]
 8022d62:	781b      	ldrb	r3, [r3, #0]
 8022d64:	2b00      	cmp	r3, #0
 8022d66:	d1f2      	bne.n	8022d4e <USBD_GetLen+0x12>
  }

  return len;
 8022d68:	230f      	movs	r3, #15
 8022d6a:	18fb      	adds	r3, r7, r3
 8022d6c:	781b      	ldrb	r3, [r3, #0]
}
 8022d6e:	0018      	movs	r0, r3
 8022d70:	46bd      	mov	sp, r7
 8022d72:	b004      	add	sp, #16
 8022d74:	bd80      	pop	{r7, pc}

08022d76 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8022d76:	b580      	push	{r7, lr}
 8022d78:	b084      	sub	sp, #16
 8022d7a:	af00      	add	r7, sp, #0
 8022d7c:	60f8      	str	r0, [r7, #12]
 8022d7e:	60b9      	str	r1, [r7, #8]
 8022d80:	1dbb      	adds	r3, r7, #6
 8022d82:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022d84:	68fa      	ldr	r2, [r7, #12]
 8022d86:	23a5      	movs	r3, #165	@ 0xa5
 8022d88:	009b      	lsls	r3, r3, #2
 8022d8a:	2102      	movs	r1, #2
 8022d8c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8022d8e:	1dbb      	adds	r3, r7, #6
 8022d90:	881a      	ldrh	r2, [r3, #0]
 8022d92:	68fb      	ldr	r3, [r7, #12]
 8022d94:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8022d96:	1dbb      	adds	r3, r7, #6
 8022d98:	881a      	ldrh	r2, [r3, #0]
 8022d9a:	68fb      	ldr	r3, [r7, #12]
 8022d9c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022d9e:	1dbb      	adds	r3, r7, #6
 8022da0:	881b      	ldrh	r3, [r3, #0]
 8022da2:	68ba      	ldr	r2, [r7, #8]
 8022da4:	68f8      	ldr	r0, [r7, #12]
 8022da6:	2100      	movs	r1, #0
 8022da8:	f000 fd4d 	bl	8023846 <USBD_LL_Transmit>

  return USBD_OK;
 8022dac:	2300      	movs	r3, #0
}
 8022dae:	0018      	movs	r0, r3
 8022db0:	46bd      	mov	sp, r7
 8022db2:	b004      	add	sp, #16
 8022db4:	bd80      	pop	{r7, pc}

08022db6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8022db6:	b580      	push	{r7, lr}
 8022db8:	b084      	sub	sp, #16
 8022dba:	af00      	add	r7, sp, #0
 8022dbc:	60f8      	str	r0, [r7, #12]
 8022dbe:	60b9      	str	r1, [r7, #8]
 8022dc0:	1dbb      	adds	r3, r7, #6
 8022dc2:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022dc4:	1dbb      	adds	r3, r7, #6
 8022dc6:	881b      	ldrh	r3, [r3, #0]
 8022dc8:	68ba      	ldr	r2, [r7, #8]
 8022dca:	68f8      	ldr	r0, [r7, #12]
 8022dcc:	2100      	movs	r1, #0
 8022dce:	f000 fd3a 	bl	8023846 <USBD_LL_Transmit>

  return USBD_OK;
 8022dd2:	2300      	movs	r3, #0
}
 8022dd4:	0018      	movs	r0, r3
 8022dd6:	46bd      	mov	sp, r7
 8022dd8:	b004      	add	sp, #16
 8022dda:	bd80      	pop	{r7, pc}

08022ddc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8022ddc:	b580      	push	{r7, lr}
 8022dde:	b084      	sub	sp, #16
 8022de0:	af00      	add	r7, sp, #0
 8022de2:	60f8      	str	r0, [r7, #12]
 8022de4:	60b9      	str	r1, [r7, #8]
 8022de6:	1dbb      	adds	r3, r7, #6
 8022de8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8022dea:	68fa      	ldr	r2, [r7, #12]
 8022dec:	23a5      	movs	r3, #165	@ 0xa5
 8022dee:	009b      	lsls	r3, r3, #2
 8022df0:	2103      	movs	r1, #3
 8022df2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8022df4:	1dbb      	adds	r3, r7, #6
 8022df6:	8819      	ldrh	r1, [r3, #0]
 8022df8:	68fa      	ldr	r2, [r7, #12]
 8022dfa:	23ae      	movs	r3, #174	@ 0xae
 8022dfc:	005b      	lsls	r3, r3, #1
 8022dfe:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8022e00:	1dbb      	adds	r3, r7, #6
 8022e02:	8819      	ldrh	r1, [r3, #0]
 8022e04:	68fa      	ldr	r2, [r7, #12]
 8022e06:	23b0      	movs	r3, #176	@ 0xb0
 8022e08:	005b      	lsls	r3, r3, #1
 8022e0a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022e0c:	1dbb      	adds	r3, r7, #6
 8022e0e:	881b      	ldrh	r3, [r3, #0]
 8022e10:	68ba      	ldr	r2, [r7, #8]
 8022e12:	68f8      	ldr	r0, [r7, #12]
 8022e14:	2100      	movs	r1, #0
 8022e16:	f000 fd4d 	bl	80238b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022e1a:	2300      	movs	r3, #0
}
 8022e1c:	0018      	movs	r0, r3
 8022e1e:	46bd      	mov	sp, r7
 8022e20:	b004      	add	sp, #16
 8022e22:	bd80      	pop	{r7, pc}

08022e24 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8022e24:	b580      	push	{r7, lr}
 8022e26:	b084      	sub	sp, #16
 8022e28:	af00      	add	r7, sp, #0
 8022e2a:	60f8      	str	r0, [r7, #12]
 8022e2c:	60b9      	str	r1, [r7, #8]
 8022e2e:	1dbb      	adds	r3, r7, #6
 8022e30:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022e32:	1dbb      	adds	r3, r7, #6
 8022e34:	881b      	ldrh	r3, [r3, #0]
 8022e36:	68ba      	ldr	r2, [r7, #8]
 8022e38:	68f8      	ldr	r0, [r7, #12]
 8022e3a:	2100      	movs	r1, #0
 8022e3c:	f000 fd3a 	bl	80238b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022e40:	2300      	movs	r3, #0
}
 8022e42:	0018      	movs	r0, r3
 8022e44:	46bd      	mov	sp, r7
 8022e46:	b004      	add	sp, #16
 8022e48:	bd80      	pop	{r7, pc}

08022e4a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022e4a:	b580      	push	{r7, lr}
 8022e4c:	b082      	sub	sp, #8
 8022e4e:	af00      	add	r7, sp, #0
 8022e50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022e52:	687a      	ldr	r2, [r7, #4]
 8022e54:	23a5      	movs	r3, #165	@ 0xa5
 8022e56:	009b      	lsls	r3, r3, #2
 8022e58:	2104      	movs	r1, #4
 8022e5a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022e5c:	6878      	ldr	r0, [r7, #4]
 8022e5e:	2300      	movs	r3, #0
 8022e60:	2200      	movs	r2, #0
 8022e62:	2100      	movs	r1, #0
 8022e64:	f000 fcef 	bl	8023846 <USBD_LL_Transmit>

  return USBD_OK;
 8022e68:	2300      	movs	r3, #0
}
 8022e6a:	0018      	movs	r0, r3
 8022e6c:	46bd      	mov	sp, r7
 8022e6e:	b002      	add	sp, #8
 8022e70:	bd80      	pop	{r7, pc}

08022e72 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022e72:	b580      	push	{r7, lr}
 8022e74:	b082      	sub	sp, #8
 8022e76:	af00      	add	r7, sp, #0
 8022e78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022e7a:	687a      	ldr	r2, [r7, #4]
 8022e7c:	23a5      	movs	r3, #165	@ 0xa5
 8022e7e:	009b      	lsls	r3, r3, #2
 8022e80:	2105      	movs	r1, #5
 8022e82:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022e84:	6878      	ldr	r0, [r7, #4]
 8022e86:	2300      	movs	r3, #0
 8022e88:	2200      	movs	r2, #0
 8022e8a:	2100      	movs	r1, #0
 8022e8c:	f000 fd12 	bl	80238b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022e90:	2300      	movs	r3, #0
}
 8022e92:	0018      	movs	r0, r3
 8022e94:	46bd      	mov	sp, r7
 8022e96:	b002      	add	sp, #8
 8022e98:	bd80      	pop	{r7, pc}
	...

08022e9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022e9c:	b580      	push	{r7, lr}
 8022e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022ea0:	4914      	ldr	r1, [pc, #80]	@ (8022ef4 <MX_USB_DEVICE_Init+0x58>)
 8022ea2:	4b15      	ldr	r3, [pc, #84]	@ (8022ef8 <MX_USB_DEVICE_Init+0x5c>)
 8022ea4:	2200      	movs	r2, #0
 8022ea6:	0018      	movs	r0, r3
 8022ea8:	f7fe fdec 	bl	8021a84 <USBD_Init>
 8022eac:	1e03      	subs	r3, r0, #0
 8022eae:	d001      	beq.n	8022eb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022eb0:	f7ea fa3a 	bl	800d328 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022eb4:	4a11      	ldr	r2, [pc, #68]	@ (8022efc <MX_USB_DEVICE_Init+0x60>)
 8022eb6:	4b10      	ldr	r3, [pc, #64]	@ (8022ef8 <MX_USB_DEVICE_Init+0x5c>)
 8022eb8:	0011      	movs	r1, r2
 8022eba:	0018      	movs	r0, r3
 8022ebc:	f7fe fe13 	bl	8021ae6 <USBD_RegisterClass>
 8022ec0:	1e03      	subs	r3, r0, #0
 8022ec2:	d001      	beq.n	8022ec8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8022ec4:	f7ea fa30 	bl	800d328 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8022ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8022f00 <MX_USB_DEVICE_Init+0x64>)
 8022eca:	4b0b      	ldr	r3, [pc, #44]	@ (8022ef8 <MX_USB_DEVICE_Init+0x5c>)
 8022ecc:	0011      	movs	r1, r2
 8022ece:	0018      	movs	r0, r3
 8022ed0:	f7fe fd28 	bl	8021924 <USBD_CDC_RegisterInterface>
 8022ed4:	1e03      	subs	r3, r0, #0
 8022ed6:	d001      	beq.n	8022edc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8022ed8:	f7ea fa26 	bl	800d328 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022edc:	4b06      	ldr	r3, [pc, #24]	@ (8022ef8 <MX_USB_DEVICE_Init+0x5c>)
 8022ede:	0018      	movs	r0, r3
 8022ee0:	f7fe fe21 	bl	8021b26 <USBD_Start>
 8022ee4:	1e03      	subs	r3, r0, #0
 8022ee6:	d001      	beq.n	8022eec <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8022ee8:	f7ea fa1e 	bl	800d328 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022eec:	46c0      	nop			@ (mov r8, r8)
 8022eee:	46bd      	mov	sp, r7
 8022ef0:	bd80      	pop	{r7, pc}
 8022ef2:	46c0      	nop			@ (mov r8, r8)
 8022ef4:	20000224 	.word	0x20000224
 8022ef8:	20002538 	.word	0x20002538
 8022efc:	20000110 	.word	0x20000110
 8022f00:	20000214 	.word	0x20000214

08022f04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8022f04:	b580      	push	{r7, lr}
 8022f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8022f08:	4907      	ldr	r1, [pc, #28]	@ (8022f28 <CDC_Init_FS+0x24>)
 8022f0a:	4b08      	ldr	r3, [pc, #32]	@ (8022f2c <CDC_Init_FS+0x28>)
 8022f0c:	2200      	movs	r2, #0
 8022f0e:	0018      	movs	r0, r3
 8022f10:	f7fe fd23 	bl	802195a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022f14:	4a06      	ldr	r2, [pc, #24]	@ (8022f30 <CDC_Init_FS+0x2c>)
 8022f16:	4b05      	ldr	r3, [pc, #20]	@ (8022f2c <CDC_Init_FS+0x28>)
 8022f18:	0011      	movs	r1, r2
 8022f1a:	0018      	movs	r0, r3
 8022f1c:	f7fe fd39 	bl	8021992 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8022f20:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022f22:	0018      	movs	r0, r3
 8022f24:	46bd      	mov	sp, r7
 8022f26:	bd80      	pop	{r7, pc}
 8022f28:	20002cbc 	.word	0x20002cbc
 8022f2c:	20002538 	.word	0x20002538
 8022f30:	200028bc 	.word	0x200028bc

08022f34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8022f34:	b580      	push	{r7, lr}
 8022f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8022f38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8022f3a:	0018      	movs	r0, r3
 8022f3c:	46bd      	mov	sp, r7
 8022f3e:	bd80      	pop	{r7, pc}

08022f40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8022f40:	b580      	push	{r7, lr}
 8022f42:	b084      	sub	sp, #16
 8022f44:	af00      	add	r7, sp, #0
 8022f46:	6039      	str	r1, [r7, #0]
 8022f48:	0011      	movs	r1, r2
 8022f4a:	1dfb      	adds	r3, r7, #7
 8022f4c:	1c02      	adds	r2, r0, #0
 8022f4e:	701a      	strb	r2, [r3, #0]
 8022f50:	1d3b      	adds	r3, r7, #4
 8022f52:	1c0a      	adds	r2, r1, #0
 8022f54:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8022f56:	1dfb      	adds	r3, r7, #7
 8022f58:	781b      	ldrb	r3, [r3, #0]
 8022f5a:	2b23      	cmp	r3, #35	@ 0x23
 8022f5c:	d810      	bhi.n	8022f80 <CDC_Control_FS+0x40>
 8022f5e:	009a      	lsls	r2, r3, #2
 8022f60:	4b0a      	ldr	r3, [pc, #40]	@ (8022f8c <CDC_Control_FS+0x4c>)
 8022f62:	18d3      	adds	r3, r2, r3
 8022f64:	681b      	ldr	r3, [r3, #0]
 8022f66:	469f      	mov	pc, r3

    break;

    case CDC_SET_CONTROL_LINE_STATE:
      // === inserted for detecting USB is ready for dumping USB_LOGGING 28-jul-2025
            USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 8022f68:	683b      	ldr	r3, [r7, #0]
 8022f6a:	60fb      	str	r3, [r7, #12]

            if((req->wValue &0x0001) != 0)
 8022f6c:	68fb      	ldr	r3, [r7, #12]
 8022f6e:	885b      	ldrh	r3, [r3, #2]
 8022f70:	001a      	movs	r2, r3
 8022f72:	2301      	movs	r3, #1
 8022f74:	4013      	ands	r3, r2
 8022f76:	d001      	beq.n	8022f7c <CDC_Control_FS+0x3c>
              return (USBD_FAIL);
 8022f78:	2302      	movs	r3, #2
 8022f7a:	e003      	b.n	8022f84 <CDC_Control_FS+0x44>
              //host_com_port_open = 1;
            else
              return (USBD_OK);
 8022f7c:	2300      	movs	r3, #0
 8022f7e:	e001      	b.n	8022f84 <CDC_Control_FS+0x44>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8022f80:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8022f82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022f84:	0018      	movs	r0, r3
 8022f86:	46bd      	mov	sp, r7
 8022f88:	b004      	add	sp, #16
 8022f8a:	bd80      	pop	{r7, pc}
 8022f8c:	0802e514 	.word	0x0802e514

08022f90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8022f90:	b580      	push	{r7, lr}
 8022f92:	b082      	sub	sp, #8
 8022f94:	af00      	add	r7, sp, #0
 8022f96:	6078      	str	r0, [r7, #4]
 8022f98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8022f9a:	4b12      	ldr	r3, [pc, #72]	@ (8022fe4 <CDC_Receive_FS+0x54>)
 8022f9c:	781b      	ldrb	r3, [r3, #0]
 8022f9e:	2b00      	cmp	r3, #0
 8022fa0:	d013      	beq.n	8022fca <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8022fa2:	683b      	ldr	r3, [r7, #0]
 8022fa4:	681b      	ldr	r3, [r3, #0]
 8022fa6:	b29a      	uxth	r2, r3
 8022fa8:	2301      	movs	r3, #1
 8022faa:	425b      	negs	r3, r3
 8022fac:	6879      	ldr	r1, [r7, #4]
 8022fae:	480e      	ldr	r0, [pc, #56]	@ (8022fe8 <CDC_Receive_FS+0x58>)
 8022fb0:	f7fa fa38 	bl	801d424 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022fb4:	687a      	ldr	r2, [r7, #4]
 8022fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8022fec <CDC_Receive_FS+0x5c>)
 8022fb8:	0011      	movs	r1, r2
 8022fba:	0018      	movs	r0, r3
 8022fbc:	f7fe fce9 	bl	8021992 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8022fec <CDC_Receive_FS+0x5c>)
 8022fc2:	0018      	movs	r0, r3
 8022fc4:	f7fe fd30 	bl	8021a28 <USBD_CDC_ReceivePacket>
 8022fc8:	e006      	b.n	8022fd8 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8022fca:	683b      	ldr	r3, [r7, #0]
 8022fcc:	681a      	ldr	r2, [r3, #0]
 8022fce:	4b08      	ldr	r3, [pc, #32]	@ (8022ff0 <CDC_Receive_FS+0x60>)
 8022fd0:	681b      	ldr	r3, [r3, #0]
 8022fd2:	18d2      	adds	r2, r2, r3
 8022fd4:	4b06      	ldr	r3, [pc, #24]	@ (8022ff0 <CDC_Receive_FS+0x60>)
 8022fd6:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8022fd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8022fda:	0018      	movs	r0, r3
 8022fdc:	46bd      	mov	sp, r7
 8022fde:	b002      	add	sp, #8
 8022fe0:	bd80      	pop	{r7, pc}
 8022fe2:	46c0      	nop			@ (mov r8, r8)
 8022fe4:	200027fc 	.word	0x200027fc
 8022fe8:	20002800 	.word	0x20002800
 8022fec:	20002538 	.word	0x20002538
 8022ff0:	200028b8 	.word	0x200028b8

08022ff4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8022ff4:	b5b0      	push	{r4, r5, r7, lr}
 8022ff6:	b084      	sub	sp, #16
 8022ff8:	af00      	add	r7, sp, #0
 8022ffa:	6078      	str	r0, [r7, #4]
 8022ffc:	000a      	movs	r2, r1
 8022ffe:	1cbb      	adds	r3, r7, #2
 8023000:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8023002:	230f      	movs	r3, #15
 8023004:	18fb      	adds	r3, r7, r3
 8023006:	2200      	movs	r2, #0
 8023008:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 802300a:	4a11      	ldr	r2, [pc, #68]	@ (8023050 <CDC_Transmit_FS+0x5c>)
 802300c:	23ae      	movs	r3, #174	@ 0xae
 802300e:	009b      	lsls	r3, r3, #2
 8023010:	58d3      	ldr	r3, [r2, r3]
 8023012:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8023014:	68ba      	ldr	r2, [r7, #8]
 8023016:	2385      	movs	r3, #133	@ 0x85
 8023018:	009b      	lsls	r3, r3, #2
 802301a:	58d3      	ldr	r3, [r2, r3]
 802301c:	2b00      	cmp	r3, #0
 802301e:	d001      	beq.n	8023024 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8023020:	2301      	movs	r3, #1
 8023022:	e010      	b.n	8023046 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8023024:	1cbb      	adds	r3, r7, #2
 8023026:	881a      	ldrh	r2, [r3, #0]
 8023028:	6879      	ldr	r1, [r7, #4]
 802302a:	4b09      	ldr	r3, [pc, #36]	@ (8023050 <CDC_Transmit_FS+0x5c>)
 802302c:	0018      	movs	r0, r3
 802302e:	f7fe fc94 	bl	802195a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8023032:	250f      	movs	r5, #15
 8023034:	197c      	adds	r4, r7, r5
 8023036:	4b06      	ldr	r3, [pc, #24]	@ (8023050 <CDC_Transmit_FS+0x5c>)
 8023038:	0018      	movs	r0, r3
 802303a:	f7fe fcbe 	bl	80219ba <USBD_CDC_TransmitPacket>
 802303e:	0003      	movs	r3, r0
 8023040:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8023042:	197b      	adds	r3, r7, r5
 8023044:	781b      	ldrb	r3, [r3, #0]
}
 8023046:	0018      	movs	r0, r3
 8023048:	46bd      	mov	sp, r7
 802304a:	b004      	add	sp, #16
 802304c:	bdb0      	pop	{r4, r5, r7, pc}
 802304e:	46c0      	nop			@ (mov r8, r8)
 8023050:	20002538 	.word	0x20002538

08023054 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8023054:	b580      	push	{r7, lr}
 8023056:	af00      	add	r7, sp, #0
  ESPProg = true;
 8023058:	4b02      	ldr	r3, [pc, #8]	@ (8023064 <EnableESPProg+0x10>)
 802305a:	2201      	movs	r2, #1
 802305c:	701a      	strb	r2, [r3, #0]
}
 802305e:	46c0      	nop			@ (mov r8, r8)
 8023060:	46bd      	mov	sp, r7
 8023062:	bd80      	pop	{r7, pc}
 8023064:	200027fc 	.word	0x200027fc

08023068 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8023068:	b580      	push	{r7, lr}
 802306a:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 802306c:	4b01      	ldr	r3, [pc, #4]	@ (8023074 <GetUsbRxPointer+0xc>)
}
 802306e:	0018      	movs	r0, r3
 8023070:	46bd      	mov	sp, r7
 8023072:	bd80      	pop	{r7, pc}
 8023074:	200028bc 	.word	0x200028bc

08023078 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8023078:	b580      	push	{r7, lr}
 802307a:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 802307c:	4b07      	ldr	r3, [pc, #28]	@ (802309c <ResetUsbRxDataSize+0x24>)
 802307e:	2200      	movs	r2, #0
 8023080:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8023082:	4a07      	ldr	r2, [pc, #28]	@ (80230a0 <ResetUsbRxDataSize+0x28>)
 8023084:	4b07      	ldr	r3, [pc, #28]	@ (80230a4 <ResetUsbRxDataSize+0x2c>)
 8023086:	0011      	movs	r1, r2
 8023088:	0018      	movs	r0, r3
 802308a:	f7fe fc82 	bl	8021992 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802308e:	4b05      	ldr	r3, [pc, #20]	@ (80230a4 <ResetUsbRxDataSize+0x2c>)
 8023090:	0018      	movs	r0, r3
 8023092:	f7fe fcc9 	bl	8021a28 <USBD_CDC_ReceivePacket>
}
 8023096:	46c0      	nop			@ (mov r8, r8)
 8023098:	46bd      	mov	sp, r7
 802309a:	bd80      	pop	{r7, pc}
 802309c:	200028b8 	.word	0x200028b8
 80230a0:	200028bc 	.word	0x200028bc
 80230a4:	20002538 	.word	0x20002538

080230a8 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 80230a8:	b580      	push	{r7, lr}
 80230aa:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 80230ac:	4b02      	ldr	r3, [pc, #8]	@ (80230b8 <GetUsbRxDataSize+0x10>)
 80230ae:	681b      	ldr	r3, [r3, #0]
}
 80230b0:	0018      	movs	r0, r3
 80230b2:	46bd      	mov	sp, r7
 80230b4:	bd80      	pop	{r7, pc}
 80230b6:	46c0      	nop			@ (mov r8, r8)
 80230b8:	200028b8 	.word	0x200028b8

080230bc <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 80230bc:	b580      	push	{r7, lr}
 80230be:	b082      	sub	sp, #8
 80230c0:	af00      	add	r7, sp, #0
 80230c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 80230c4:	687a      	ldr	r2, [r7, #4]
 80230c6:	4b07      	ldr	r3, [pc, #28]	@ (80230e4 <GetUsbRxNextChunk+0x28>)
 80230c8:	18d2      	adds	r2, r2, r3
 80230ca:	4b07      	ldr	r3, [pc, #28]	@ (80230e8 <GetUsbRxNextChunk+0x2c>)
 80230cc:	0011      	movs	r1, r2
 80230ce:	0018      	movs	r0, r3
 80230d0:	f7fe fc5f 	bl	8021992 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80230d4:	4b04      	ldr	r3, [pc, #16]	@ (80230e8 <GetUsbRxNextChunk+0x2c>)
 80230d6:	0018      	movs	r0, r3
 80230d8:	f7fe fca6 	bl	8021a28 <USBD_CDC_ReceivePacket>
}
 80230dc:	46c0      	nop			@ (mov r8, r8)
 80230de:	46bd      	mov	sp, r7
 80230e0:	b002      	add	sp, #8
 80230e2:	bd80      	pop	{r7, pc}
 80230e4:	200028bc 	.word	0x200028bc
 80230e8:	20002538 	.word	0x20002538

080230ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80230ec:	b580      	push	{r7, lr}
 80230ee:	b082      	sub	sp, #8
 80230f0:	af00      	add	r7, sp, #0
 80230f2:	0002      	movs	r2, r0
 80230f4:	6039      	str	r1, [r7, #0]
 80230f6:	1dfb      	adds	r3, r7, #7
 80230f8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80230fa:	683b      	ldr	r3, [r7, #0]
 80230fc:	2212      	movs	r2, #18
 80230fe:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8023100:	4b02      	ldr	r3, [pc, #8]	@ (802310c <USBD_FS_DeviceDescriptor+0x20>)
}
 8023102:	0018      	movs	r0, r3
 8023104:	46bd      	mov	sp, r7
 8023106:	b002      	add	sp, #8
 8023108:	bd80      	pop	{r7, pc}
 802310a:	46c0      	nop			@ (mov r8, r8)
 802310c:	20000240 	.word	0x20000240

08023110 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023110:	b580      	push	{r7, lr}
 8023112:	b082      	sub	sp, #8
 8023114:	af00      	add	r7, sp, #0
 8023116:	0002      	movs	r2, r0
 8023118:	6039      	str	r1, [r7, #0]
 802311a:	1dfb      	adds	r3, r7, #7
 802311c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802311e:	683b      	ldr	r3, [r7, #0]
 8023120:	2204      	movs	r2, #4
 8023122:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8023124:	4b02      	ldr	r3, [pc, #8]	@ (8023130 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8023126:	0018      	movs	r0, r3
 8023128:	46bd      	mov	sp, r7
 802312a:	b002      	add	sp, #8
 802312c:	bd80      	pop	{r7, pc}
 802312e:	46c0      	nop			@ (mov r8, r8)
 8023130:	20000254 	.word	0x20000254

08023134 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023134:	b580      	push	{r7, lr}
 8023136:	b082      	sub	sp, #8
 8023138:	af00      	add	r7, sp, #0
 802313a:	0002      	movs	r2, r0
 802313c:	6039      	str	r1, [r7, #0]
 802313e:	1dfb      	adds	r3, r7, #7
 8023140:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8023142:	1dfb      	adds	r3, r7, #7
 8023144:	781b      	ldrb	r3, [r3, #0]
 8023146:	2b00      	cmp	r3, #0
 8023148:	d106      	bne.n	8023158 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802314a:	683a      	ldr	r2, [r7, #0]
 802314c:	4908      	ldr	r1, [pc, #32]	@ (8023170 <USBD_FS_ProductStrDescriptor+0x3c>)
 802314e:	4b09      	ldr	r3, [pc, #36]	@ (8023174 <USBD_FS_ProductStrDescriptor+0x40>)
 8023150:	0018      	movs	r0, r3
 8023152:	f7ff fda5 	bl	8022ca0 <USBD_GetString>
 8023156:	e005      	b.n	8023164 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023158:	683a      	ldr	r2, [r7, #0]
 802315a:	4905      	ldr	r1, [pc, #20]	@ (8023170 <USBD_FS_ProductStrDescriptor+0x3c>)
 802315c:	4b05      	ldr	r3, [pc, #20]	@ (8023174 <USBD_FS_ProductStrDescriptor+0x40>)
 802315e:	0018      	movs	r0, r3
 8023160:	f7ff fd9e 	bl	8022ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8023164:	4b02      	ldr	r3, [pc, #8]	@ (8023170 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8023166:	0018      	movs	r0, r3
 8023168:	46bd      	mov	sp, r7
 802316a:	b002      	add	sp, #8
 802316c:	bd80      	pop	{r7, pc}
 802316e:	46c0      	nop			@ (mov r8, r8)
 8023170:	200030bc 	.word	0x200030bc
 8023174:	0802dbb4 	.word	0x0802dbb4

08023178 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023178:	b580      	push	{r7, lr}
 802317a:	b082      	sub	sp, #8
 802317c:	af00      	add	r7, sp, #0
 802317e:	0002      	movs	r2, r0
 8023180:	6039      	str	r1, [r7, #0]
 8023182:	1dfb      	adds	r3, r7, #7
 8023184:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8023186:	683a      	ldr	r2, [r7, #0]
 8023188:	4904      	ldr	r1, [pc, #16]	@ (802319c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802318a:	4b05      	ldr	r3, [pc, #20]	@ (80231a0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 802318c:	0018      	movs	r0, r3
 802318e:	f7ff fd87 	bl	8022ca0 <USBD_GetString>
  return USBD_StrDesc;
 8023192:	4b02      	ldr	r3, [pc, #8]	@ (802319c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8023194:	0018      	movs	r0, r3
 8023196:	46bd      	mov	sp, r7
 8023198:	b002      	add	sp, #8
 802319a:	bd80      	pop	{r7, pc}
 802319c:	200030bc 	.word	0x200030bc
 80231a0:	0802dbcc 	.word	0x0802dbcc

080231a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80231a4:	b580      	push	{r7, lr}
 80231a6:	b082      	sub	sp, #8
 80231a8:	af00      	add	r7, sp, #0
 80231aa:	0002      	movs	r2, r0
 80231ac:	6039      	str	r1, [r7, #0]
 80231ae:	1dfb      	adds	r3, r7, #7
 80231b0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80231b2:	683b      	ldr	r3, [r7, #0]
 80231b4:	221a      	movs	r2, #26
 80231b6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80231b8:	f000 f84c 	bl	8023254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80231bc:	4b02      	ldr	r3, [pc, #8]	@ (80231c8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80231be:	0018      	movs	r0, r3
 80231c0:	46bd      	mov	sp, r7
 80231c2:	b002      	add	sp, #8
 80231c4:	bd80      	pop	{r7, pc}
 80231c6:	46c0      	nop			@ (mov r8, r8)
 80231c8:	20000258 	.word	0x20000258

080231cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80231cc:	b580      	push	{r7, lr}
 80231ce:	b082      	sub	sp, #8
 80231d0:	af00      	add	r7, sp, #0
 80231d2:	0002      	movs	r2, r0
 80231d4:	6039      	str	r1, [r7, #0]
 80231d6:	1dfb      	adds	r3, r7, #7
 80231d8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80231da:	1dfb      	adds	r3, r7, #7
 80231dc:	781b      	ldrb	r3, [r3, #0]
 80231de:	2b00      	cmp	r3, #0
 80231e0:	d106      	bne.n	80231f0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80231e2:	683a      	ldr	r2, [r7, #0]
 80231e4:	4908      	ldr	r1, [pc, #32]	@ (8023208 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80231e6:	4b09      	ldr	r3, [pc, #36]	@ (802320c <USBD_FS_ConfigStrDescriptor+0x40>)
 80231e8:	0018      	movs	r0, r3
 80231ea:	f7ff fd59 	bl	8022ca0 <USBD_GetString>
 80231ee:	e005      	b.n	80231fc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80231f0:	683a      	ldr	r2, [r7, #0]
 80231f2:	4905      	ldr	r1, [pc, #20]	@ (8023208 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80231f4:	4b05      	ldr	r3, [pc, #20]	@ (802320c <USBD_FS_ConfigStrDescriptor+0x40>)
 80231f6:	0018      	movs	r0, r3
 80231f8:	f7ff fd52 	bl	8022ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80231fc:	4b02      	ldr	r3, [pc, #8]	@ (8023208 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80231fe:	0018      	movs	r0, r3
 8023200:	46bd      	mov	sp, r7
 8023202:	b002      	add	sp, #8
 8023204:	bd80      	pop	{r7, pc}
 8023206:	46c0      	nop			@ (mov r8, r8)
 8023208:	200030bc 	.word	0x200030bc
 802320c:	0802dbe0 	.word	0x0802dbe0

08023210 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023210:	b580      	push	{r7, lr}
 8023212:	b082      	sub	sp, #8
 8023214:	af00      	add	r7, sp, #0
 8023216:	0002      	movs	r2, r0
 8023218:	6039      	str	r1, [r7, #0]
 802321a:	1dfb      	adds	r3, r7, #7
 802321c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802321e:	1dfb      	adds	r3, r7, #7
 8023220:	781b      	ldrb	r3, [r3, #0]
 8023222:	2b00      	cmp	r3, #0
 8023224:	d106      	bne.n	8023234 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023226:	683a      	ldr	r2, [r7, #0]
 8023228:	4908      	ldr	r1, [pc, #32]	@ (802324c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 802322a:	4b09      	ldr	r3, [pc, #36]	@ (8023250 <USBD_FS_InterfaceStrDescriptor+0x40>)
 802322c:	0018      	movs	r0, r3
 802322e:	f7ff fd37 	bl	8022ca0 <USBD_GetString>
 8023232:	e005      	b.n	8023240 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023234:	683a      	ldr	r2, [r7, #0]
 8023236:	4905      	ldr	r1, [pc, #20]	@ (802324c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8023238:	4b05      	ldr	r3, [pc, #20]	@ (8023250 <USBD_FS_InterfaceStrDescriptor+0x40>)
 802323a:	0018      	movs	r0, r3
 802323c:	f7ff fd30 	bl	8022ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8023240:	4b02      	ldr	r3, [pc, #8]	@ (802324c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8023242:	0018      	movs	r0, r3
 8023244:	46bd      	mov	sp, r7
 8023246:	b002      	add	sp, #8
 8023248:	bd80      	pop	{r7, pc}
 802324a:	46c0      	nop			@ (mov r8, r8)
 802324c:	200030bc 	.word	0x200030bc
 8023250:	0802dbec 	.word	0x0802dbec

08023254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8023254:	b580      	push	{r7, lr}
 8023256:	b084      	sub	sp, #16
 8023258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802325a:	4b10      	ldr	r3, [pc, #64]	@ (802329c <Get_SerialNum+0x48>)
 802325c:	681b      	ldr	r3, [r3, #0]
 802325e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8023260:	4b0f      	ldr	r3, [pc, #60]	@ (80232a0 <Get_SerialNum+0x4c>)
 8023262:	681b      	ldr	r3, [r3, #0]
 8023264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8023266:	4b0f      	ldr	r3, [pc, #60]	@ (80232a4 <Get_SerialNum+0x50>)
 8023268:	681b      	ldr	r3, [r3, #0]
 802326a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802326c:	68fa      	ldr	r2, [r7, #12]
 802326e:	687b      	ldr	r3, [r7, #4]
 8023270:	18d3      	adds	r3, r2, r3
 8023272:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8023274:	68fb      	ldr	r3, [r7, #12]
 8023276:	2b00      	cmp	r3, #0
 8023278:	d00b      	beq.n	8023292 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802327a:	490b      	ldr	r1, [pc, #44]	@ (80232a8 <Get_SerialNum+0x54>)
 802327c:	68fb      	ldr	r3, [r7, #12]
 802327e:	2208      	movs	r2, #8
 8023280:	0018      	movs	r0, r3
 8023282:	f000 f815 	bl	80232b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8023286:	4909      	ldr	r1, [pc, #36]	@ (80232ac <Get_SerialNum+0x58>)
 8023288:	68bb      	ldr	r3, [r7, #8]
 802328a:	2204      	movs	r2, #4
 802328c:	0018      	movs	r0, r3
 802328e:	f000 f80f 	bl	80232b0 <IntToUnicode>
  }
}
 8023292:	46c0      	nop			@ (mov r8, r8)
 8023294:	46bd      	mov	sp, r7
 8023296:	b004      	add	sp, #16
 8023298:	bd80      	pop	{r7, pc}
 802329a:	46c0      	nop			@ (mov r8, r8)
 802329c:	1ff80050 	.word	0x1ff80050
 80232a0:	1ff80054 	.word	0x1ff80054
 80232a4:	1ff80058 	.word	0x1ff80058
 80232a8:	2000025a 	.word	0x2000025a
 80232ac:	2000026a 	.word	0x2000026a

080232b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80232b0:	b580      	push	{r7, lr}
 80232b2:	b086      	sub	sp, #24
 80232b4:	af00      	add	r7, sp, #0
 80232b6:	60f8      	str	r0, [r7, #12]
 80232b8:	60b9      	str	r1, [r7, #8]
 80232ba:	1dfb      	adds	r3, r7, #7
 80232bc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80232be:	2117      	movs	r1, #23
 80232c0:	187b      	adds	r3, r7, r1
 80232c2:	2200      	movs	r2, #0
 80232c4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80232c6:	187b      	adds	r3, r7, r1
 80232c8:	2200      	movs	r2, #0
 80232ca:	701a      	strb	r2, [r3, #0]
 80232cc:	e02f      	b.n	802332e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80232ce:	68fb      	ldr	r3, [r7, #12]
 80232d0:	0f1b      	lsrs	r3, r3, #28
 80232d2:	2b09      	cmp	r3, #9
 80232d4:	d80d      	bhi.n	80232f2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80232d6:	68fb      	ldr	r3, [r7, #12]
 80232d8:	0f1b      	lsrs	r3, r3, #28
 80232da:	b2da      	uxtb	r2, r3
 80232dc:	2317      	movs	r3, #23
 80232de:	18fb      	adds	r3, r7, r3
 80232e0:	781b      	ldrb	r3, [r3, #0]
 80232e2:	005b      	lsls	r3, r3, #1
 80232e4:	0019      	movs	r1, r3
 80232e6:	68bb      	ldr	r3, [r7, #8]
 80232e8:	185b      	adds	r3, r3, r1
 80232ea:	3230      	adds	r2, #48	@ 0x30
 80232ec:	b2d2      	uxtb	r2, r2
 80232ee:	701a      	strb	r2, [r3, #0]
 80232f0:	e00c      	b.n	802330c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80232f2:	68fb      	ldr	r3, [r7, #12]
 80232f4:	0f1b      	lsrs	r3, r3, #28
 80232f6:	b2da      	uxtb	r2, r3
 80232f8:	2317      	movs	r3, #23
 80232fa:	18fb      	adds	r3, r7, r3
 80232fc:	781b      	ldrb	r3, [r3, #0]
 80232fe:	005b      	lsls	r3, r3, #1
 8023300:	0019      	movs	r1, r3
 8023302:	68bb      	ldr	r3, [r7, #8]
 8023304:	185b      	adds	r3, r3, r1
 8023306:	3237      	adds	r2, #55	@ 0x37
 8023308:	b2d2      	uxtb	r2, r2
 802330a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802330c:	68fb      	ldr	r3, [r7, #12]
 802330e:	011b      	lsls	r3, r3, #4
 8023310:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8023312:	2117      	movs	r1, #23
 8023314:	187b      	adds	r3, r7, r1
 8023316:	781b      	ldrb	r3, [r3, #0]
 8023318:	005b      	lsls	r3, r3, #1
 802331a:	3301      	adds	r3, #1
 802331c:	68ba      	ldr	r2, [r7, #8]
 802331e:	18d3      	adds	r3, r2, r3
 8023320:	2200      	movs	r2, #0
 8023322:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8023324:	187b      	adds	r3, r7, r1
 8023326:	781a      	ldrb	r2, [r3, #0]
 8023328:	187b      	adds	r3, r7, r1
 802332a:	3201      	adds	r2, #1
 802332c:	701a      	strb	r2, [r3, #0]
 802332e:	2317      	movs	r3, #23
 8023330:	18fa      	adds	r2, r7, r3
 8023332:	1dfb      	adds	r3, r7, #7
 8023334:	7812      	ldrb	r2, [r2, #0]
 8023336:	781b      	ldrb	r3, [r3, #0]
 8023338:	429a      	cmp	r2, r3
 802333a:	d3c8      	bcc.n	80232ce <IntToUnicode+0x1e>
  }
}
 802333c:	46c0      	nop			@ (mov r8, r8)
 802333e:	46c0      	nop			@ (mov r8, r8)
 8023340:	46bd      	mov	sp, r7
 8023342:	b006      	add	sp, #24
 8023344:	bd80      	pop	{r7, pc}
	...

08023348 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8023348:	b580      	push	{r7, lr}
 802334a:	b082      	sub	sp, #8
 802334c:	af00      	add	r7, sp, #0
 802334e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8023350:	687b      	ldr	r3, [r7, #4]
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	4a0a      	ldr	r2, [pc, #40]	@ (8023380 <HAL_PCD_MspInit+0x38>)
 8023356:	4293      	cmp	r3, r2
 8023358:	d10e      	bne.n	8023378 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 802335a:	4b0a      	ldr	r3, [pc, #40]	@ (8023384 <HAL_PCD_MspInit+0x3c>)
 802335c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802335e:	4b09      	ldr	r3, [pc, #36]	@ (8023384 <HAL_PCD_MspInit+0x3c>)
 8023360:	2180      	movs	r1, #128	@ 0x80
 8023362:	0409      	lsls	r1, r1, #16
 8023364:	430a      	orrs	r2, r1
 8023366:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8023368:	2200      	movs	r2, #0
 802336a:	2100      	movs	r1, #0
 802336c:	201f      	movs	r0, #31
 802336e:	f7f1 ff2d 	bl	80151cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8023372:	201f      	movs	r0, #31
 8023374:	f7f1 ff3f 	bl	80151f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8023378:	46c0      	nop			@ (mov r8, r8)
 802337a:	46bd      	mov	sp, r7
 802337c:	b002      	add	sp, #8
 802337e:	bd80      	pop	{r7, pc}
 8023380:	40005c00 	.word	0x40005c00
 8023384:	40021000 	.word	0x40021000

08023388 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023388:	b580      	push	{r7, lr}
 802338a:	b082      	sub	sp, #8
 802338c:	af00      	add	r7, sp, #0
 802338e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8023390:	687a      	ldr	r2, [r7, #4]
 8023392:	23bc      	movs	r3, #188	@ 0xbc
 8023394:	009b      	lsls	r3, r3, #2
 8023396:	58d2      	ldr	r2, [r2, r3]
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	21ac      	movs	r1, #172	@ 0xac
 802339c:	0089      	lsls	r1, r1, #2
 802339e:	468c      	mov	ip, r1
 80233a0:	4463      	add	r3, ip
 80233a2:	0019      	movs	r1, r3
 80233a4:	0010      	movs	r0, r2
 80233a6:	f7fe fc11 	bl	8021bcc <USBD_LL_SetupStage>
}
 80233aa:	46c0      	nop			@ (mov r8, r8)
 80233ac:	46bd      	mov	sp, r7
 80233ae:	b002      	add	sp, #8
 80233b0:	bd80      	pop	{r7, pc}

080233b2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80233b2:	b590      	push	{r4, r7, lr}
 80233b4:	b083      	sub	sp, #12
 80233b6:	af00      	add	r7, sp, #0
 80233b8:	6078      	str	r0, [r7, #4]
 80233ba:	000a      	movs	r2, r1
 80233bc:	1cfb      	adds	r3, r7, #3
 80233be:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80233c0:	687a      	ldr	r2, [r7, #4]
 80233c2:	23bc      	movs	r3, #188	@ 0xbc
 80233c4:	009b      	lsls	r3, r3, #2
 80233c6:	58d4      	ldr	r4, [r2, r3]
 80233c8:	1cfb      	adds	r3, r7, #3
 80233ca:	781a      	ldrb	r2, [r3, #0]
 80233cc:	6878      	ldr	r0, [r7, #4]
 80233ce:	23be      	movs	r3, #190	@ 0xbe
 80233d0:	0059      	lsls	r1, r3, #1
 80233d2:	0013      	movs	r3, r2
 80233d4:	009b      	lsls	r3, r3, #2
 80233d6:	189b      	adds	r3, r3, r2
 80233d8:	00db      	lsls	r3, r3, #3
 80233da:	18c3      	adds	r3, r0, r3
 80233dc:	185b      	adds	r3, r3, r1
 80233de:	681a      	ldr	r2, [r3, #0]
 80233e0:	1cfb      	adds	r3, r7, #3
 80233e2:	781b      	ldrb	r3, [r3, #0]
 80233e4:	0019      	movs	r1, r3
 80233e6:	0020      	movs	r0, r4
 80233e8:	f7fe fc4e 	bl	8021c88 <USBD_LL_DataOutStage>
}
 80233ec:	46c0      	nop			@ (mov r8, r8)
 80233ee:	46bd      	mov	sp, r7
 80233f0:	b003      	add	sp, #12
 80233f2:	bd90      	pop	{r4, r7, pc}

080233f4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80233f4:	b580      	push	{r7, lr}
 80233f6:	b082      	sub	sp, #8
 80233f8:	af00      	add	r7, sp, #0
 80233fa:	6078      	str	r0, [r7, #4]
 80233fc:	000a      	movs	r2, r1
 80233fe:	1cfb      	adds	r3, r7, #3
 8023400:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8023402:	687a      	ldr	r2, [r7, #4]
 8023404:	23bc      	movs	r3, #188	@ 0xbc
 8023406:	009b      	lsls	r3, r3, #2
 8023408:	58d0      	ldr	r0, [r2, r3]
 802340a:	1cfb      	adds	r3, r7, #3
 802340c:	781a      	ldrb	r2, [r3, #0]
 802340e:	6879      	ldr	r1, [r7, #4]
 8023410:	0013      	movs	r3, r2
 8023412:	009b      	lsls	r3, r3, #2
 8023414:	189b      	adds	r3, r3, r2
 8023416:	00db      	lsls	r3, r3, #3
 8023418:	18cb      	adds	r3, r1, r3
 802341a:	333c      	adds	r3, #60	@ 0x3c
 802341c:	681a      	ldr	r2, [r3, #0]
 802341e:	1cfb      	adds	r3, r7, #3
 8023420:	781b      	ldrb	r3, [r3, #0]
 8023422:	0019      	movs	r1, r3
 8023424:	f7fe fcb2 	bl	8021d8c <USBD_LL_DataInStage>
}
 8023428:	46c0      	nop			@ (mov r8, r8)
 802342a:	46bd      	mov	sp, r7
 802342c:	b002      	add	sp, #8
 802342e:	bd80      	pop	{r7, pc}

08023430 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023430:	b580      	push	{r7, lr}
 8023432:	b082      	sub	sp, #8
 8023434:	af00      	add	r7, sp, #0
 8023436:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8023438:	687a      	ldr	r2, [r7, #4]
 802343a:	23bc      	movs	r3, #188	@ 0xbc
 802343c:	009b      	lsls	r3, r3, #2
 802343e:	58d3      	ldr	r3, [r2, r3]
 8023440:	0018      	movs	r0, r3
 8023442:	f7fe fde9 	bl	8022018 <USBD_LL_SOF>
}
 8023446:	46c0      	nop			@ (mov r8, r8)
 8023448:	46bd      	mov	sp, r7
 802344a:	b002      	add	sp, #8
 802344c:	bd80      	pop	{r7, pc}

0802344e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802344e:	b580      	push	{r7, lr}
 8023450:	b084      	sub	sp, #16
 8023452:	af00      	add	r7, sp, #0
 8023454:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8023456:	230f      	movs	r3, #15
 8023458:	18fb      	adds	r3, r7, r3
 802345a:	2201      	movs	r2, #1
 802345c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	689b      	ldr	r3, [r3, #8]
 8023462:	2b02      	cmp	r3, #2
 8023464:	d001      	beq.n	802346a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8023466:	f7e9 ff5f 	bl	800d328 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802346a:	687a      	ldr	r2, [r7, #4]
 802346c:	23bc      	movs	r3, #188	@ 0xbc
 802346e:	009b      	lsls	r3, r3, #2
 8023470:	58d2      	ldr	r2, [r2, r3]
 8023472:	230f      	movs	r3, #15
 8023474:	18fb      	adds	r3, r7, r3
 8023476:	781b      	ldrb	r3, [r3, #0]
 8023478:	0019      	movs	r1, r3
 802347a:	0010      	movs	r0, r2
 802347c:	f7fe fd8b 	bl	8021f96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023480:	687a      	ldr	r2, [r7, #4]
 8023482:	23bc      	movs	r3, #188	@ 0xbc
 8023484:	009b      	lsls	r3, r3, #2
 8023486:	58d3      	ldr	r3, [r2, r3]
 8023488:	0018      	movs	r0, r3
 802348a:	f7fe fd3c 	bl	8021f06 <USBD_LL_Reset>
}
 802348e:	46c0      	nop			@ (mov r8, r8)
 8023490:	46bd      	mov	sp, r7
 8023492:	b004      	add	sp, #16
 8023494:	bd80      	pop	{r7, pc}
	...

08023498 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023498:	b580      	push	{r7, lr}
 802349a:	b082      	sub	sp, #8
 802349c:	af00      	add	r7, sp, #0
 802349e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80234a0:	687a      	ldr	r2, [r7, #4]
 80234a2:	23bc      	movs	r3, #188	@ 0xbc
 80234a4:	009b      	lsls	r3, r3, #2
 80234a6:	58d3      	ldr	r3, [r2, r3]
 80234a8:	0018      	movs	r0, r3
 80234aa:	f7fe fd85 	bl	8021fb8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80234ae:	687b      	ldr	r3, [r7, #4]
 80234b0:	699b      	ldr	r3, [r3, #24]
 80234b2:	2b00      	cmp	r3, #0
 80234b4:	d005      	beq.n	80234c2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80234b6:	4b05      	ldr	r3, [pc, #20]	@ (80234cc <HAL_PCD_SuspendCallback+0x34>)
 80234b8:	691a      	ldr	r2, [r3, #16]
 80234ba:	4b04      	ldr	r3, [pc, #16]	@ (80234cc <HAL_PCD_SuspendCallback+0x34>)
 80234bc:	2106      	movs	r1, #6
 80234be:	430a      	orrs	r2, r1
 80234c0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80234c2:	46c0      	nop			@ (mov r8, r8)
 80234c4:	46bd      	mov	sp, r7
 80234c6:	b002      	add	sp, #8
 80234c8:	bd80      	pop	{r7, pc}
 80234ca:	46c0      	nop			@ (mov r8, r8)
 80234cc:	e000ed00 	.word	0xe000ed00

080234d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80234d0:	b580      	push	{r7, lr}
 80234d2:	b082      	sub	sp, #8
 80234d4:	af00      	add	r7, sp, #0
 80234d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80234d8:	687b      	ldr	r3, [r7, #4]
 80234da:	699b      	ldr	r3, [r3, #24]
 80234dc:	2b00      	cmp	r3, #0
 80234de:	d007      	beq.n	80234f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80234e0:	4b09      	ldr	r3, [pc, #36]	@ (8023508 <HAL_PCD_ResumeCallback+0x38>)
 80234e2:	691a      	ldr	r2, [r3, #16]
 80234e4:	4b08      	ldr	r3, [pc, #32]	@ (8023508 <HAL_PCD_ResumeCallback+0x38>)
 80234e6:	2106      	movs	r1, #6
 80234e8:	438a      	bics	r2, r1
 80234ea:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80234ec:	f000 fa44 	bl	8023978 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80234f0:	687a      	ldr	r2, [r7, #4]
 80234f2:	23bc      	movs	r3, #188	@ 0xbc
 80234f4:	009b      	lsls	r3, r3, #2
 80234f6:	58d3      	ldr	r3, [r2, r3]
 80234f8:	0018      	movs	r0, r3
 80234fa:	f7fe fd75 	bl	8021fe8 <USBD_LL_Resume>
}
 80234fe:	46c0      	nop			@ (mov r8, r8)
 8023500:	46bd      	mov	sp, r7
 8023502:	b002      	add	sp, #8
 8023504:	bd80      	pop	{r7, pc}
 8023506:	46c0      	nop			@ (mov r8, r8)
 8023508:	e000ed00 	.word	0xe000ed00

0802350c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 802350c:	b580      	push	{r7, lr}
 802350e:	b082      	sub	sp, #8
 8023510:	af00      	add	r7, sp, #0
 8023512:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8023514:	4a2d      	ldr	r2, [pc, #180]	@ (80235cc <USBD_LL_Init+0xc0>)
 8023516:	23bc      	movs	r3, #188	@ 0xbc
 8023518:	009b      	lsls	r3, r3, #2
 802351a:	6879      	ldr	r1, [r7, #4]
 802351c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 802351e:	687a      	ldr	r2, [r7, #4]
 8023520:	23b0      	movs	r3, #176	@ 0xb0
 8023522:	009b      	lsls	r3, r3, #2
 8023524:	4929      	ldr	r1, [pc, #164]	@ (80235cc <USBD_LL_Init+0xc0>)
 8023526:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8023528:	4b28      	ldr	r3, [pc, #160]	@ (80235cc <USBD_LL_Init+0xc0>)
 802352a:	4a29      	ldr	r2, [pc, #164]	@ (80235d0 <USBD_LL_Init+0xc4>)
 802352c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 802352e:	4b27      	ldr	r3, [pc, #156]	@ (80235cc <USBD_LL_Init+0xc0>)
 8023530:	2208      	movs	r2, #8
 8023532:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8023534:	4b25      	ldr	r3, [pc, #148]	@ (80235cc <USBD_LL_Init+0xc0>)
 8023536:	2202      	movs	r2, #2
 8023538:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802353a:	4b24      	ldr	r3, [pc, #144]	@ (80235cc <USBD_LL_Init+0xc0>)
 802353c:	2202      	movs	r2, #2
 802353e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8023540:	4b22      	ldr	r3, [pc, #136]	@ (80235cc <USBD_LL_Init+0xc0>)
 8023542:	2200      	movs	r2, #0
 8023544:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8023546:	4b21      	ldr	r3, [pc, #132]	@ (80235cc <USBD_LL_Init+0xc0>)
 8023548:	2200      	movs	r2, #0
 802354a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 802354c:	4b1f      	ldr	r3, [pc, #124]	@ (80235cc <USBD_LL_Init+0xc0>)
 802354e:	2200      	movs	r2, #0
 8023550:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8023552:	4b1e      	ldr	r3, [pc, #120]	@ (80235cc <USBD_LL_Init+0xc0>)
 8023554:	0018      	movs	r0, r3
 8023556:	f7f5 ff7f 	bl	8019458 <HAL_PCD_Init>
 802355a:	1e03      	subs	r3, r0, #0
 802355c:	d001      	beq.n	8023562 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 802355e:	f7e9 fee3 	bl	800d328 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8023562:	687a      	ldr	r2, [r7, #4]
 8023564:	23b0      	movs	r3, #176	@ 0xb0
 8023566:	009b      	lsls	r3, r3, #2
 8023568:	58d0      	ldr	r0, [r2, r3]
 802356a:	2318      	movs	r3, #24
 802356c:	2200      	movs	r2, #0
 802356e:	2100      	movs	r1, #0
 8023570:	f7f7 fd40 	bl	801aff4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8023574:	687a      	ldr	r2, [r7, #4]
 8023576:	23b0      	movs	r3, #176	@ 0xb0
 8023578:	009b      	lsls	r3, r3, #2
 802357a:	58d0      	ldr	r0, [r2, r3]
 802357c:	2358      	movs	r3, #88	@ 0x58
 802357e:	2200      	movs	r2, #0
 8023580:	2180      	movs	r1, #128	@ 0x80
 8023582:	f7f7 fd37 	bl	801aff4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8023586:	687a      	ldr	r2, [r7, #4]
 8023588:	23b0      	movs	r3, #176	@ 0xb0
 802358a:	009b      	lsls	r3, r3, #2
 802358c:	58d0      	ldr	r0, [r2, r3]
 802358e:	23c0      	movs	r3, #192	@ 0xc0
 8023590:	2200      	movs	r2, #0
 8023592:	2181      	movs	r1, #129	@ 0x81
 8023594:	f7f7 fd2e 	bl	801aff4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8023598:	687a      	ldr	r2, [r7, #4]
 802359a:	23b0      	movs	r3, #176	@ 0xb0
 802359c:	009b      	lsls	r3, r3, #2
 802359e:	58d0      	ldr	r0, [r2, r3]
 80235a0:	2388      	movs	r3, #136	@ 0x88
 80235a2:	005b      	lsls	r3, r3, #1
 80235a4:	2200      	movs	r2, #0
 80235a6:	2101      	movs	r1, #1
 80235a8:	f7f7 fd24 	bl	801aff4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80235ac:	687a      	ldr	r2, [r7, #4]
 80235ae:	23b0      	movs	r3, #176	@ 0xb0
 80235b0:	009b      	lsls	r3, r3, #2
 80235b2:	58d0      	ldr	r0, [r2, r3]
 80235b4:	2380      	movs	r3, #128	@ 0x80
 80235b6:	005b      	lsls	r3, r3, #1
 80235b8:	2200      	movs	r2, #0
 80235ba:	2182      	movs	r1, #130	@ 0x82
 80235bc:	f7f7 fd1a 	bl	801aff4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80235c0:	2300      	movs	r3, #0
}
 80235c2:	0018      	movs	r0, r3
 80235c4:	46bd      	mov	sp, r7
 80235c6:	b002      	add	sp, #8
 80235c8:	bd80      	pop	{r7, pc}
 80235ca:	46c0      	nop			@ (mov r8, r8)
 80235cc:	200032bc 	.word	0x200032bc
 80235d0:	40005c00 	.word	0x40005c00

080235d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80235d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80235d6:	b085      	sub	sp, #20
 80235d8:	af00      	add	r7, sp, #0
 80235da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80235dc:	210f      	movs	r1, #15
 80235de:	187b      	adds	r3, r7, r1
 80235e0:	2200      	movs	r2, #0
 80235e2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80235e4:	260e      	movs	r6, #14
 80235e6:	19bb      	adds	r3, r7, r6
 80235e8:	2200      	movs	r2, #0
 80235ea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80235ec:	687a      	ldr	r2, [r7, #4]
 80235ee:	23b0      	movs	r3, #176	@ 0xb0
 80235f0:	009b      	lsls	r3, r3, #2
 80235f2:	58d3      	ldr	r3, [r2, r3]
 80235f4:	000d      	movs	r5, r1
 80235f6:	187c      	adds	r4, r7, r1
 80235f8:	0018      	movs	r0, r3
 80235fa:	f7f6 f82d 	bl	8019658 <HAL_PCD_Start>
 80235fe:	0003      	movs	r3, r0
 8023600:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023602:	19bc      	adds	r4, r7, r6
 8023604:	197b      	adds	r3, r7, r5
 8023606:	781b      	ldrb	r3, [r3, #0]
 8023608:	0018      	movs	r0, r3
 802360a:	f000 f9bc 	bl	8023986 <USBD_Get_USB_Status>
 802360e:	0003      	movs	r3, r0
 8023610:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023612:	19bb      	adds	r3, r7, r6
 8023614:	781b      	ldrb	r3, [r3, #0]
}
 8023616:	0018      	movs	r0, r3
 8023618:	46bd      	mov	sp, r7
 802361a:	b005      	add	sp, #20
 802361c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802361e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802361e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023620:	b085      	sub	sp, #20
 8023622:	af00      	add	r7, sp, #0
 8023624:	6078      	str	r0, [r7, #4]
 8023626:	000c      	movs	r4, r1
 8023628:	0010      	movs	r0, r2
 802362a:	0019      	movs	r1, r3
 802362c:	1cfb      	adds	r3, r7, #3
 802362e:	1c22      	adds	r2, r4, #0
 8023630:	701a      	strb	r2, [r3, #0]
 8023632:	1cbb      	adds	r3, r7, #2
 8023634:	1c02      	adds	r2, r0, #0
 8023636:	701a      	strb	r2, [r3, #0]
 8023638:	003b      	movs	r3, r7
 802363a:	1c0a      	adds	r2, r1, #0
 802363c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802363e:	260f      	movs	r6, #15
 8023640:	19bb      	adds	r3, r7, r6
 8023642:	2200      	movs	r2, #0
 8023644:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023646:	250e      	movs	r5, #14
 8023648:	197b      	adds	r3, r7, r5
 802364a:	2200      	movs	r2, #0
 802364c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802364e:	687a      	ldr	r2, [r7, #4]
 8023650:	23b0      	movs	r3, #176	@ 0xb0
 8023652:	009b      	lsls	r3, r3, #2
 8023654:	58d0      	ldr	r0, [r2, r3]
 8023656:	19bc      	adds	r4, r7, r6
 8023658:	1cbb      	adds	r3, r7, #2
 802365a:	781d      	ldrb	r5, [r3, #0]
 802365c:	003b      	movs	r3, r7
 802365e:	881a      	ldrh	r2, [r3, #0]
 8023660:	1cfb      	adds	r3, r7, #3
 8023662:	7819      	ldrb	r1, [r3, #0]
 8023664:	002b      	movs	r3, r5
 8023666:	f7f6 f98c 	bl	8019982 <HAL_PCD_EP_Open>
 802366a:	0003      	movs	r3, r0
 802366c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802366e:	250e      	movs	r5, #14
 8023670:	197c      	adds	r4, r7, r5
 8023672:	19bb      	adds	r3, r7, r6
 8023674:	781b      	ldrb	r3, [r3, #0]
 8023676:	0018      	movs	r0, r3
 8023678:	f000 f985 	bl	8023986 <USBD_Get_USB_Status>
 802367c:	0003      	movs	r3, r0
 802367e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023680:	197b      	adds	r3, r7, r5
 8023682:	781b      	ldrb	r3, [r3, #0]
}
 8023684:	0018      	movs	r0, r3
 8023686:	46bd      	mov	sp, r7
 8023688:	b005      	add	sp, #20
 802368a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802368c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802368c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802368e:	b085      	sub	sp, #20
 8023690:	af00      	add	r7, sp, #0
 8023692:	6078      	str	r0, [r7, #4]
 8023694:	000a      	movs	r2, r1
 8023696:	1cfb      	adds	r3, r7, #3
 8023698:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802369a:	210f      	movs	r1, #15
 802369c:	187b      	adds	r3, r7, r1
 802369e:	2200      	movs	r2, #0
 80236a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80236a2:	260e      	movs	r6, #14
 80236a4:	19bb      	adds	r3, r7, r6
 80236a6:	2200      	movs	r2, #0
 80236a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80236aa:	687a      	ldr	r2, [r7, #4]
 80236ac:	23b0      	movs	r3, #176	@ 0xb0
 80236ae:	009b      	lsls	r3, r3, #2
 80236b0:	58d2      	ldr	r2, [r2, r3]
 80236b2:	000d      	movs	r5, r1
 80236b4:	187c      	adds	r4, r7, r1
 80236b6:	1cfb      	adds	r3, r7, #3
 80236b8:	781b      	ldrb	r3, [r3, #0]
 80236ba:	0019      	movs	r1, r3
 80236bc:	0010      	movs	r0, r2
 80236be:	f7f6 f9cf 	bl	8019a60 <HAL_PCD_EP_Close>
 80236c2:	0003      	movs	r3, r0
 80236c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80236c6:	19bc      	adds	r4, r7, r6
 80236c8:	197b      	adds	r3, r7, r5
 80236ca:	781b      	ldrb	r3, [r3, #0]
 80236cc:	0018      	movs	r0, r3
 80236ce:	f000 f95a 	bl	8023986 <USBD_Get_USB_Status>
 80236d2:	0003      	movs	r3, r0
 80236d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80236d6:	19bb      	adds	r3, r7, r6
 80236d8:	781b      	ldrb	r3, [r3, #0]
}
 80236da:	0018      	movs	r0, r3
 80236dc:	46bd      	mov	sp, r7
 80236de:	b005      	add	sp, #20
 80236e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080236e2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80236e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80236e4:	b085      	sub	sp, #20
 80236e6:	af00      	add	r7, sp, #0
 80236e8:	6078      	str	r0, [r7, #4]
 80236ea:	000a      	movs	r2, r1
 80236ec:	1cfb      	adds	r3, r7, #3
 80236ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80236f0:	210f      	movs	r1, #15
 80236f2:	187b      	adds	r3, r7, r1
 80236f4:	2200      	movs	r2, #0
 80236f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80236f8:	260e      	movs	r6, #14
 80236fa:	19bb      	adds	r3, r7, r6
 80236fc:	2200      	movs	r2, #0
 80236fe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023700:	687a      	ldr	r2, [r7, #4]
 8023702:	23b0      	movs	r3, #176	@ 0xb0
 8023704:	009b      	lsls	r3, r3, #2
 8023706:	58d2      	ldr	r2, [r2, r3]
 8023708:	000d      	movs	r5, r1
 802370a:	187c      	adds	r4, r7, r1
 802370c:	1cfb      	adds	r3, r7, #3
 802370e:	781b      	ldrb	r3, [r3, #0]
 8023710:	0019      	movs	r1, r3
 8023712:	0010      	movs	r0, r2
 8023714:	f7f6 fa81 	bl	8019c1a <HAL_PCD_EP_SetStall>
 8023718:	0003      	movs	r3, r0
 802371a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802371c:	19bc      	adds	r4, r7, r6
 802371e:	197b      	adds	r3, r7, r5
 8023720:	781b      	ldrb	r3, [r3, #0]
 8023722:	0018      	movs	r0, r3
 8023724:	f000 f92f 	bl	8023986 <USBD_Get_USB_Status>
 8023728:	0003      	movs	r3, r0
 802372a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802372c:	19bb      	adds	r3, r7, r6
 802372e:	781b      	ldrb	r3, [r3, #0]
}
 8023730:	0018      	movs	r0, r3
 8023732:	46bd      	mov	sp, r7
 8023734:	b005      	add	sp, #20
 8023736:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023738 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023738:	b5f0      	push	{r4, r5, r6, r7, lr}
 802373a:	b085      	sub	sp, #20
 802373c:	af00      	add	r7, sp, #0
 802373e:	6078      	str	r0, [r7, #4]
 8023740:	000a      	movs	r2, r1
 8023742:	1cfb      	adds	r3, r7, #3
 8023744:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023746:	210f      	movs	r1, #15
 8023748:	187b      	adds	r3, r7, r1
 802374a:	2200      	movs	r2, #0
 802374c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802374e:	260e      	movs	r6, #14
 8023750:	19bb      	adds	r3, r7, r6
 8023752:	2200      	movs	r2, #0
 8023754:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023756:	687a      	ldr	r2, [r7, #4]
 8023758:	23b0      	movs	r3, #176	@ 0xb0
 802375a:	009b      	lsls	r3, r3, #2
 802375c:	58d2      	ldr	r2, [r2, r3]
 802375e:	000d      	movs	r5, r1
 8023760:	187c      	adds	r4, r7, r1
 8023762:	1cfb      	adds	r3, r7, #3
 8023764:	781b      	ldrb	r3, [r3, #0]
 8023766:	0019      	movs	r1, r3
 8023768:	0010      	movs	r0, r2
 802376a:	f7f6 fab2 	bl	8019cd2 <HAL_PCD_EP_ClrStall>
 802376e:	0003      	movs	r3, r0
 8023770:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023772:	19bc      	adds	r4, r7, r6
 8023774:	197b      	adds	r3, r7, r5
 8023776:	781b      	ldrb	r3, [r3, #0]
 8023778:	0018      	movs	r0, r3
 802377a:	f000 f904 	bl	8023986 <USBD_Get_USB_Status>
 802377e:	0003      	movs	r3, r0
 8023780:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023782:	19bb      	adds	r3, r7, r6
 8023784:	781b      	ldrb	r3, [r3, #0]
}
 8023786:	0018      	movs	r0, r3
 8023788:	46bd      	mov	sp, r7
 802378a:	b005      	add	sp, #20
 802378c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802378e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802378e:	b580      	push	{r7, lr}
 8023790:	b084      	sub	sp, #16
 8023792:	af00      	add	r7, sp, #0
 8023794:	6078      	str	r0, [r7, #4]
 8023796:	000a      	movs	r2, r1
 8023798:	1cfb      	adds	r3, r7, #3
 802379a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 802379c:	687a      	ldr	r2, [r7, #4]
 802379e:	23b0      	movs	r3, #176	@ 0xb0
 80237a0:	009b      	lsls	r3, r3, #2
 80237a2:	58d3      	ldr	r3, [r2, r3]
 80237a4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80237a6:	1cfb      	adds	r3, r7, #3
 80237a8:	781b      	ldrb	r3, [r3, #0]
 80237aa:	b25b      	sxtb	r3, r3
 80237ac:	2b00      	cmp	r3, #0
 80237ae:	da0d      	bge.n	80237cc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80237b0:	1cfb      	adds	r3, r7, #3
 80237b2:	781b      	ldrb	r3, [r3, #0]
 80237b4:	227f      	movs	r2, #127	@ 0x7f
 80237b6:	4013      	ands	r3, r2
 80237b8:	68f9      	ldr	r1, [r7, #12]
 80237ba:	1c5a      	adds	r2, r3, #1
 80237bc:	0013      	movs	r3, r2
 80237be:	009b      	lsls	r3, r3, #2
 80237c0:	189b      	adds	r3, r3, r2
 80237c2:	00db      	lsls	r3, r3, #3
 80237c4:	18cb      	adds	r3, r1, r3
 80237c6:	3302      	adds	r3, #2
 80237c8:	781b      	ldrb	r3, [r3, #0]
 80237ca:	e00d      	b.n	80237e8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80237cc:	1cfb      	adds	r3, r7, #3
 80237ce:	781b      	ldrb	r3, [r3, #0]
 80237d0:	227f      	movs	r2, #127	@ 0x7f
 80237d2:	401a      	ands	r2, r3
 80237d4:	68f8      	ldr	r0, [r7, #12]
 80237d6:	23b5      	movs	r3, #181	@ 0xb5
 80237d8:	0059      	lsls	r1, r3, #1
 80237da:	0013      	movs	r3, r2
 80237dc:	009b      	lsls	r3, r3, #2
 80237de:	189b      	adds	r3, r3, r2
 80237e0:	00db      	lsls	r3, r3, #3
 80237e2:	18c3      	adds	r3, r0, r3
 80237e4:	185b      	adds	r3, r3, r1
 80237e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80237e8:	0018      	movs	r0, r3
 80237ea:	46bd      	mov	sp, r7
 80237ec:	b004      	add	sp, #16
 80237ee:	bd80      	pop	{r7, pc}

080237f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80237f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237f2:	b085      	sub	sp, #20
 80237f4:	af00      	add	r7, sp, #0
 80237f6:	6078      	str	r0, [r7, #4]
 80237f8:	000a      	movs	r2, r1
 80237fa:	1cfb      	adds	r3, r7, #3
 80237fc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80237fe:	210f      	movs	r1, #15
 8023800:	187b      	adds	r3, r7, r1
 8023802:	2200      	movs	r2, #0
 8023804:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023806:	260e      	movs	r6, #14
 8023808:	19bb      	adds	r3, r7, r6
 802380a:	2200      	movs	r2, #0
 802380c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802380e:	687a      	ldr	r2, [r7, #4]
 8023810:	23b0      	movs	r3, #176	@ 0xb0
 8023812:	009b      	lsls	r3, r3, #2
 8023814:	58d2      	ldr	r2, [r2, r3]
 8023816:	000d      	movs	r5, r1
 8023818:	187c      	adds	r4, r7, r1
 802381a:	1cfb      	adds	r3, r7, #3
 802381c:	781b      	ldrb	r3, [r3, #0]
 802381e:	0019      	movs	r1, r3
 8023820:	0010      	movs	r0, r2
 8023822:	f7f6 f883 	bl	801992c <HAL_PCD_SetAddress>
 8023826:	0003      	movs	r3, r0
 8023828:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802382a:	19bc      	adds	r4, r7, r6
 802382c:	197b      	adds	r3, r7, r5
 802382e:	781b      	ldrb	r3, [r3, #0]
 8023830:	0018      	movs	r0, r3
 8023832:	f000 f8a8 	bl	8023986 <USBD_Get_USB_Status>
 8023836:	0003      	movs	r3, r0
 8023838:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802383a:	19bb      	adds	r3, r7, r6
 802383c:	781b      	ldrb	r3, [r3, #0]
}
 802383e:	0018      	movs	r0, r3
 8023840:	46bd      	mov	sp, r7
 8023842:	b005      	add	sp, #20
 8023844:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023846 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023848:	b087      	sub	sp, #28
 802384a:	af00      	add	r7, sp, #0
 802384c:	60f8      	str	r0, [r7, #12]
 802384e:	0008      	movs	r0, r1
 8023850:	607a      	str	r2, [r7, #4]
 8023852:	0019      	movs	r1, r3
 8023854:	230b      	movs	r3, #11
 8023856:	18fb      	adds	r3, r7, r3
 8023858:	1c02      	adds	r2, r0, #0
 802385a:	701a      	strb	r2, [r3, #0]
 802385c:	2408      	movs	r4, #8
 802385e:	193b      	adds	r3, r7, r4
 8023860:	1c0a      	adds	r2, r1, #0
 8023862:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023864:	2117      	movs	r1, #23
 8023866:	187b      	adds	r3, r7, r1
 8023868:	2200      	movs	r2, #0
 802386a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802386c:	2516      	movs	r5, #22
 802386e:	197b      	adds	r3, r7, r5
 8023870:	2200      	movs	r2, #0
 8023872:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023874:	68fa      	ldr	r2, [r7, #12]
 8023876:	23b0      	movs	r3, #176	@ 0xb0
 8023878:	009b      	lsls	r3, r3, #2
 802387a:	58d0      	ldr	r0, [r2, r3]
 802387c:	193b      	adds	r3, r7, r4
 802387e:	881d      	ldrh	r5, [r3, #0]
 8023880:	000e      	movs	r6, r1
 8023882:	187c      	adds	r4, r7, r1
 8023884:	687a      	ldr	r2, [r7, #4]
 8023886:	230b      	movs	r3, #11
 8023888:	18fb      	adds	r3, r7, r3
 802388a:	7819      	ldrb	r1, [r3, #0]
 802388c:	002b      	movs	r3, r5
 802388e:	f7f6 f988 	bl	8019ba2 <HAL_PCD_EP_Transmit>
 8023892:	0003      	movs	r3, r0
 8023894:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023896:	2516      	movs	r5, #22
 8023898:	197c      	adds	r4, r7, r5
 802389a:	19bb      	adds	r3, r7, r6
 802389c:	781b      	ldrb	r3, [r3, #0]
 802389e:	0018      	movs	r0, r3
 80238a0:	f000 f871 	bl	8023986 <USBD_Get_USB_Status>
 80238a4:	0003      	movs	r3, r0
 80238a6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80238a8:	197b      	adds	r3, r7, r5
 80238aa:	781b      	ldrb	r3, [r3, #0]
}
 80238ac:	0018      	movs	r0, r3
 80238ae:	46bd      	mov	sp, r7
 80238b0:	b007      	add	sp, #28
 80238b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080238b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80238b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238b6:	b087      	sub	sp, #28
 80238b8:	af00      	add	r7, sp, #0
 80238ba:	60f8      	str	r0, [r7, #12]
 80238bc:	0008      	movs	r0, r1
 80238be:	607a      	str	r2, [r7, #4]
 80238c0:	0019      	movs	r1, r3
 80238c2:	230b      	movs	r3, #11
 80238c4:	18fb      	adds	r3, r7, r3
 80238c6:	1c02      	adds	r2, r0, #0
 80238c8:	701a      	strb	r2, [r3, #0]
 80238ca:	2408      	movs	r4, #8
 80238cc:	193b      	adds	r3, r7, r4
 80238ce:	1c0a      	adds	r2, r1, #0
 80238d0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80238d2:	2117      	movs	r1, #23
 80238d4:	187b      	adds	r3, r7, r1
 80238d6:	2200      	movs	r2, #0
 80238d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80238da:	2516      	movs	r5, #22
 80238dc:	197b      	adds	r3, r7, r5
 80238de:	2200      	movs	r2, #0
 80238e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80238e2:	68fa      	ldr	r2, [r7, #12]
 80238e4:	23b0      	movs	r3, #176	@ 0xb0
 80238e6:	009b      	lsls	r3, r3, #2
 80238e8:	58d0      	ldr	r0, [r2, r3]
 80238ea:	193b      	adds	r3, r7, r4
 80238ec:	881d      	ldrh	r5, [r3, #0]
 80238ee:	000e      	movs	r6, r1
 80238f0:	187c      	adds	r4, r7, r1
 80238f2:	687a      	ldr	r2, [r7, #4]
 80238f4:	230b      	movs	r3, #11
 80238f6:	18fb      	adds	r3, r7, r3
 80238f8:	7819      	ldrb	r1, [r3, #0]
 80238fa:	002b      	movs	r3, r5
 80238fc:	f7f6 f901 	bl	8019b02 <HAL_PCD_EP_Receive>
 8023900:	0003      	movs	r3, r0
 8023902:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023904:	2516      	movs	r5, #22
 8023906:	197c      	adds	r4, r7, r5
 8023908:	19bb      	adds	r3, r7, r6
 802390a:	781b      	ldrb	r3, [r3, #0]
 802390c:	0018      	movs	r0, r3
 802390e:	f000 f83a 	bl	8023986 <USBD_Get_USB_Status>
 8023912:	0003      	movs	r3, r0
 8023914:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023916:	197b      	adds	r3, r7, r5
 8023918:	781b      	ldrb	r3, [r3, #0]
}
 802391a:	0018      	movs	r0, r3
 802391c:	46bd      	mov	sp, r7
 802391e:	b007      	add	sp, #28
 8023920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023922 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023922:	b580      	push	{r7, lr}
 8023924:	b082      	sub	sp, #8
 8023926:	af00      	add	r7, sp, #0
 8023928:	6078      	str	r0, [r7, #4]
 802392a:	000a      	movs	r2, r1
 802392c:	1cfb      	adds	r3, r7, #3
 802392e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023930:	687a      	ldr	r2, [r7, #4]
 8023932:	23b0      	movs	r3, #176	@ 0xb0
 8023934:	009b      	lsls	r3, r3, #2
 8023936:	58d2      	ldr	r2, [r2, r3]
 8023938:	1cfb      	adds	r3, r7, #3
 802393a:	781b      	ldrb	r3, [r3, #0]
 802393c:	0019      	movs	r1, r3
 802393e:	0010      	movs	r0, r2
 8023940:	f7f6 f916 	bl	8019b70 <HAL_PCD_EP_GetRxCount>
 8023944:	0003      	movs	r3, r0
}
 8023946:	0018      	movs	r0, r3
 8023948:	46bd      	mov	sp, r7
 802394a:	b002      	add	sp, #8
 802394c:	bd80      	pop	{r7, pc}
	...

08023950 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8023950:	b580      	push	{r7, lr}
 8023952:	b082      	sub	sp, #8
 8023954:	af00      	add	r7, sp, #0
 8023956:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8023958:	4b02      	ldr	r3, [pc, #8]	@ (8023964 <USBD_static_malloc+0x14>)
}
 802395a:	0018      	movs	r0, r3
 802395c:	46bd      	mov	sp, r7
 802395e:	b002      	add	sp, #8
 8023960:	bd80      	pop	{r7, pc}
 8023962:	46c0      	nop			@ (mov r8, r8)
 8023964:	200035b0 	.word	0x200035b0

08023968 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8023968:	b580      	push	{r7, lr}
 802396a:	b082      	sub	sp, #8
 802396c:	af00      	add	r7, sp, #0
 802396e:	6078      	str	r0, [r7, #4]

}
 8023970:	46c0      	nop			@ (mov r8, r8)
 8023972:	46bd      	mov	sp, r7
 8023974:	b002      	add	sp, #8
 8023976:	bd80      	pop	{r7, pc}

08023978 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8023978:	b580      	push	{r7, lr}
 802397a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 802397c:	f7e9 fb68 	bl	800d050 <SystemClock_Config>
}
 8023980:	46c0      	nop			@ (mov r8, r8)
 8023982:	46bd      	mov	sp, r7
 8023984:	bd80      	pop	{r7, pc}

08023986 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8023986:	b580      	push	{r7, lr}
 8023988:	b084      	sub	sp, #16
 802398a:	af00      	add	r7, sp, #0
 802398c:	0002      	movs	r2, r0
 802398e:	1dfb      	adds	r3, r7, #7
 8023990:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023992:	230f      	movs	r3, #15
 8023994:	18fb      	adds	r3, r7, r3
 8023996:	2200      	movs	r2, #0
 8023998:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 802399a:	1dfb      	adds	r3, r7, #7
 802399c:	781b      	ldrb	r3, [r3, #0]
 802399e:	2b03      	cmp	r3, #3
 80239a0:	d017      	beq.n	80239d2 <USBD_Get_USB_Status+0x4c>
 80239a2:	dc1b      	bgt.n	80239dc <USBD_Get_USB_Status+0x56>
 80239a4:	2b02      	cmp	r3, #2
 80239a6:	d00f      	beq.n	80239c8 <USBD_Get_USB_Status+0x42>
 80239a8:	dc18      	bgt.n	80239dc <USBD_Get_USB_Status+0x56>
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	d002      	beq.n	80239b4 <USBD_Get_USB_Status+0x2e>
 80239ae:	2b01      	cmp	r3, #1
 80239b0:	d005      	beq.n	80239be <USBD_Get_USB_Status+0x38>
 80239b2:	e013      	b.n	80239dc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80239b4:	230f      	movs	r3, #15
 80239b6:	18fb      	adds	r3, r7, r3
 80239b8:	2200      	movs	r2, #0
 80239ba:	701a      	strb	r2, [r3, #0]
    break;
 80239bc:	e013      	b.n	80239e6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80239be:	230f      	movs	r3, #15
 80239c0:	18fb      	adds	r3, r7, r3
 80239c2:	2202      	movs	r2, #2
 80239c4:	701a      	strb	r2, [r3, #0]
    break;
 80239c6:	e00e      	b.n	80239e6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80239c8:	230f      	movs	r3, #15
 80239ca:	18fb      	adds	r3, r7, r3
 80239cc:	2201      	movs	r2, #1
 80239ce:	701a      	strb	r2, [r3, #0]
    break;
 80239d0:	e009      	b.n	80239e6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80239d2:	230f      	movs	r3, #15
 80239d4:	18fb      	adds	r3, r7, r3
 80239d6:	2202      	movs	r2, #2
 80239d8:	701a      	strb	r2, [r3, #0]
    break;
 80239da:	e004      	b.n	80239e6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80239dc:	230f      	movs	r3, #15
 80239de:	18fb      	adds	r3, r7, r3
 80239e0:	2202      	movs	r2, #2
 80239e2:	701a      	strb	r2, [r3, #0]
    break;
 80239e4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80239e6:	230f      	movs	r3, #15
 80239e8:	18fb      	adds	r3, r7, r3
 80239ea:	781b      	ldrb	r3, [r3, #0]
}
 80239ec:	0018      	movs	r0, r3
 80239ee:	46bd      	mov	sp, r7
 80239f0:	b004      	add	sp, #16
 80239f2:	bd80      	pop	{r7, pc}

080239f4 <arm_cfft_radix4by2_q31>:
 80239f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239f6:	465f      	mov	r7, fp
 80239f8:	4656      	mov	r6, sl
 80239fa:	464d      	mov	r5, r9
 80239fc:	4644      	mov	r4, r8
 80239fe:	000b      	movs	r3, r1
 8023a00:	b4f0      	push	{r4, r5, r6, r7}
 8023a02:	085b      	lsrs	r3, r3, #1
 8023a04:	b08f      	sub	sp, #60	@ 0x3c
 8023a06:	910a      	str	r1, [sp, #40]	@ 0x28
 8023a08:	0007      	movs	r7, r0
 8023a0a:	9009      	str	r0, [sp, #36]	@ 0x24
 8023a0c:	0011      	movs	r1, r2
 8023a0e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023a10:	930c      	str	r3, [sp, #48]	@ 0x30
 8023a12:	2b00      	cmp	r3, #0
 8023a14:	d100      	bne.n	8023a18 <arm_cfft_radix4by2_q31+0x24>
 8023a16:	e0a0      	b.n	8023b5a <arm_cfft_radix4by2_q31+0x166>
 8023a18:	0002      	movs	r2, r0
 8023a1a:	00db      	lsls	r3, r3, #3
 8023a1c:	3204      	adds	r2, #4
 8023a1e:	4691      	mov	r9, r2
 8023a20:	4698      	mov	r8, r3
 8023a22:	000a      	movs	r2, r1
 8023a24:	464e      	mov	r6, r9
 8023a26:	4442      	add	r2, r8
 8023a28:	4699      	mov	r9, r3
 8023a2a:	4688      	mov	r8, r1
 8023a2c:	9208      	str	r2, [sp, #32]
 8023a2e:	900d      	str	r0, [sp, #52]	@ 0x34
 8023a30:	4643      	mov	r3, r8
 8023a32:	681b      	ldr	r3, [r3, #0]
 8023a34:	469b      	mov	fp, r3
 8023a36:	4643      	mov	r3, r8
 8023a38:	685b      	ldr	r3, [r3, #4]
 8023a3a:	469a      	mov	sl, r3
 8023a3c:	683b      	ldr	r3, [r7, #0]
 8023a3e:	109c      	asrs	r4, r3, #2
 8023a40:	464b      	mov	r3, r9
 8023a42:	58fb      	ldr	r3, [r7, r3]
 8023a44:	109a      	asrs	r2, r3, #2
 8023a46:	18a3      	adds	r3, r4, r2
 8023a48:	603b      	str	r3, [r7, #0]
 8023a4a:	6833      	ldr	r3, [r6, #0]
 8023a4c:	1aa4      	subs	r4, r4, r2
 8023a4e:	109d      	asrs	r5, r3, #2
 8023a50:	464b      	mov	r3, r9
 8023a52:	58f3      	ldr	r3, [r6, r3]
 8023a54:	17e2      	asrs	r2, r4, #31
 8023a56:	109b      	asrs	r3, r3, #2
 8023a58:	18e9      	adds	r1, r5, r3
 8023a5a:	6031      	str	r1, [r6, #0]
 8023a5c:	0011      	movs	r1, r2
 8023a5e:	465a      	mov	r2, fp
 8023a60:	17d2      	asrs	r2, r2, #31
 8023a62:	0010      	movs	r0, r2
 8023a64:	4652      	mov	r2, sl
 8023a66:	1aed      	subs	r5, r5, r3
 8023a68:	17eb      	asrs	r3, r5, #31
 8023a6a:	17d2      	asrs	r2, r2, #31
 8023a6c:	9307      	str	r3, [sp, #28]
 8023a6e:	9204      	str	r2, [sp, #16]
 8023a70:	0003      	movs	r3, r0
 8023a72:	465a      	mov	r2, fp
 8023a74:	9006      	str	r0, [sp, #24]
 8023a76:	0020      	movs	r0, r4
 8023a78:	9105      	str	r1, [sp, #20]
 8023a7a:	f7dc fda1 	bl	80005c0 <__aeabi_lmul>
 8023a7e:	2280      	movs	r2, #128	@ 0x80
 8023a80:	2300      	movs	r3, #0
 8023a82:	0612      	lsls	r2, r2, #24
 8023a84:	1880      	adds	r0, r0, r2
 8023a86:	4159      	adcs	r1, r3
 8023a88:	2300      	movs	r3, #0
 8023a8a:	9101      	str	r1, [sp, #4]
 8023a8c:	9300      	str	r3, [sp, #0]
 8023a8e:	4652      	mov	r2, sl
 8023a90:	9b04      	ldr	r3, [sp, #16]
 8023a92:	0028      	movs	r0, r5
 8023a94:	17e9      	asrs	r1, r5, #31
 8023a96:	f7dc fd93 	bl	80005c0 <__aeabi_lmul>
 8023a9a:	9a00      	ldr	r2, [sp, #0]
 8023a9c:	9b01      	ldr	r3, [sp, #4]
 8023a9e:	1880      	adds	r0, r0, r2
 8023aa0:	4159      	adcs	r1, r3
 8023aa2:	2280      	movs	r2, #128	@ 0x80
 8023aa4:	2300      	movs	r3, #0
 8023aa6:	0612      	lsls	r2, r2, #24
 8023aa8:	1880      	adds	r0, r0, r2
 8023aaa:	4159      	adcs	r1, r3
 8023aac:	464a      	mov	r2, r9
 8023aae:	004b      	lsls	r3, r1, #1
 8023ab0:	50bb      	str	r3, [r7, r2]
 8023ab2:	4658      	mov	r0, fp
 8023ab4:	002a      	movs	r2, r5
 8023ab6:	9b07      	ldr	r3, [sp, #28]
 8023ab8:	9906      	ldr	r1, [sp, #24]
 8023aba:	f7dc fd81 	bl	80005c0 <__aeabi_lmul>
 8023abe:	2280      	movs	r2, #128	@ 0x80
 8023ac0:	2300      	movs	r3, #0
 8023ac2:	0612      	lsls	r2, r2, #24
 8023ac4:	1880      	adds	r0, r0, r2
 8023ac6:	4159      	adcs	r1, r3
 8023ac8:	2000      	movs	r0, #0
 8023aca:	9103      	str	r1, [sp, #12]
 8023acc:	9002      	str	r0, [sp, #8]
 8023ace:	4652      	mov	r2, sl
 8023ad0:	9b04      	ldr	r3, [sp, #16]
 8023ad2:	0020      	movs	r0, r4
 8023ad4:	9905      	ldr	r1, [sp, #20]
 8023ad6:	f7dc fd73 	bl	80005c0 <__aeabi_lmul>
 8023ada:	9a02      	ldr	r2, [sp, #8]
 8023adc:	9b03      	ldr	r3, [sp, #12]
 8023ade:	1a12      	subs	r2, r2, r0
 8023ae0:	418b      	sbcs	r3, r1
 8023ae2:	2080      	movs	r0, #128	@ 0x80
 8023ae4:	2100      	movs	r1, #0
 8023ae6:	0600      	lsls	r0, r0, #24
 8023ae8:	1812      	adds	r2, r2, r0
 8023aea:	414b      	adcs	r3, r1
 8023aec:	464a      	mov	r2, r9
 8023aee:	005b      	lsls	r3, r3, #1
 8023af0:	50b3      	str	r3, [r6, r2]
 8023af2:	2308      	movs	r3, #8
 8023af4:	469c      	mov	ip, r3
 8023af6:	9b08      	ldr	r3, [sp, #32]
 8023af8:	44e0      	add	r8, ip
 8023afa:	3708      	adds	r7, #8
 8023afc:	3608      	adds	r6, #8
 8023afe:	4598      	cmp	r8, r3
 8023b00:	d196      	bne.n	8023a30 <arm_cfft_radix4by2_q31+0x3c>
 8023b02:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023b04:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023b06:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023b08:	2302      	movs	r3, #2
 8023b0a:	003a      	movs	r2, r7
 8023b0c:	0029      	movs	r1, r5
 8023b0e:	0020      	movs	r0, r4
 8023b10:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023b12:	f000 f957 	bl	8023dc4 <arm_radix4_butterfly_q31>
 8023b16:	46a4      	mov	ip, r4
 8023b18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023b1a:	2302      	movs	r3, #2
 8023b1c:	0088      	lsls	r0, r1, #2
 8023b1e:	4460      	add	r0, ip
 8023b20:	003a      	movs	r2, r7
 8023b22:	0029      	movs	r1, r5
 8023b24:	f000 f94e 	bl	8023dc4 <arm_radix4_butterfly_q31>
 8023b28:	46a4      	mov	ip, r4
 8023b2a:	0128      	lsls	r0, r5, #4
 8023b2c:	4460      	add	r0, ip
 8023b2e:	6833      	ldr	r3, [r6, #0]
 8023b30:	005b      	lsls	r3, r3, #1
 8023b32:	6033      	str	r3, [r6, #0]
 8023b34:	6873      	ldr	r3, [r6, #4]
 8023b36:	005b      	lsls	r3, r3, #1
 8023b38:	6073      	str	r3, [r6, #4]
 8023b3a:	68b3      	ldr	r3, [r6, #8]
 8023b3c:	005b      	lsls	r3, r3, #1
 8023b3e:	60b3      	str	r3, [r6, #8]
 8023b40:	68f3      	ldr	r3, [r6, #12]
 8023b42:	005b      	lsls	r3, r3, #1
 8023b44:	60f3      	str	r3, [r6, #12]
 8023b46:	3610      	adds	r6, #16
 8023b48:	42b0      	cmp	r0, r6
 8023b4a:	d1f0      	bne.n	8023b2e <arm_cfft_radix4by2_q31+0x13a>
 8023b4c:	b00f      	add	sp, #60	@ 0x3c
 8023b4e:	bc3c      	pop	{r2, r3, r4, r5}
 8023b50:	4690      	mov	r8, r2
 8023b52:	4699      	mov	r9, r3
 8023b54:	46a2      	mov	sl, r4
 8023b56:	46ab      	mov	fp, r5
 8023b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b5a:	2302      	movs	r3, #2
 8023b5c:	2100      	movs	r1, #0
 8023b5e:	0015      	movs	r5, r2
 8023b60:	f000 f930 	bl	8023dc4 <arm_radix4_butterfly_q31>
 8023b64:	46bc      	mov	ip, r7
 8023b66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023b68:	002a      	movs	r2, r5
 8023b6a:	0098      	lsls	r0, r3, #2
 8023b6c:	4460      	add	r0, ip
 8023b6e:	2302      	movs	r3, #2
 8023b70:	2100      	movs	r1, #0
 8023b72:	f000 f927 	bl	8023dc4 <arm_radix4_butterfly_q31>
 8023b76:	e7e9      	b.n	8023b4c <arm_cfft_radix4by2_q31+0x158>

08023b78 <arm_cfft_radix4by2_inverse_q31>:
 8023b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b7a:	465f      	mov	r7, fp
 8023b7c:	4656      	mov	r6, sl
 8023b7e:	464d      	mov	r5, r9
 8023b80:	4644      	mov	r4, r8
 8023b82:	000b      	movs	r3, r1
 8023b84:	b4f0      	push	{r4, r5, r6, r7}
 8023b86:	085b      	lsrs	r3, r3, #1
 8023b88:	b08f      	sub	sp, #60	@ 0x3c
 8023b8a:	910a      	str	r1, [sp, #40]	@ 0x28
 8023b8c:	0007      	movs	r7, r0
 8023b8e:	9009      	str	r0, [sp, #36]	@ 0x24
 8023b90:	0011      	movs	r1, r2
 8023b92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023b94:	930c      	str	r3, [sp, #48]	@ 0x30
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	d100      	bne.n	8023b9c <arm_cfft_radix4by2_inverse_q31+0x24>
 8023b9a:	e0a0      	b.n	8023cde <arm_cfft_radix4by2_inverse_q31+0x166>
 8023b9c:	0002      	movs	r2, r0
 8023b9e:	00db      	lsls	r3, r3, #3
 8023ba0:	3204      	adds	r2, #4
 8023ba2:	4691      	mov	r9, r2
 8023ba4:	4698      	mov	r8, r3
 8023ba6:	000a      	movs	r2, r1
 8023ba8:	464e      	mov	r6, r9
 8023baa:	4442      	add	r2, r8
 8023bac:	4699      	mov	r9, r3
 8023bae:	4688      	mov	r8, r1
 8023bb0:	9208      	str	r2, [sp, #32]
 8023bb2:	900d      	str	r0, [sp, #52]	@ 0x34
 8023bb4:	4643      	mov	r3, r8
 8023bb6:	681b      	ldr	r3, [r3, #0]
 8023bb8:	469b      	mov	fp, r3
 8023bba:	4643      	mov	r3, r8
 8023bbc:	685b      	ldr	r3, [r3, #4]
 8023bbe:	469a      	mov	sl, r3
 8023bc0:	683b      	ldr	r3, [r7, #0]
 8023bc2:	109c      	asrs	r4, r3, #2
 8023bc4:	464b      	mov	r3, r9
 8023bc6:	58fb      	ldr	r3, [r7, r3]
 8023bc8:	109a      	asrs	r2, r3, #2
 8023bca:	18a3      	adds	r3, r4, r2
 8023bcc:	603b      	str	r3, [r7, #0]
 8023bce:	6833      	ldr	r3, [r6, #0]
 8023bd0:	1aa4      	subs	r4, r4, r2
 8023bd2:	109d      	asrs	r5, r3, #2
 8023bd4:	464b      	mov	r3, r9
 8023bd6:	58f3      	ldr	r3, [r6, r3]
 8023bd8:	17e2      	asrs	r2, r4, #31
 8023bda:	109b      	asrs	r3, r3, #2
 8023bdc:	18e9      	adds	r1, r5, r3
 8023bde:	6031      	str	r1, [r6, #0]
 8023be0:	0011      	movs	r1, r2
 8023be2:	465a      	mov	r2, fp
 8023be4:	17d2      	asrs	r2, r2, #31
 8023be6:	0010      	movs	r0, r2
 8023be8:	4652      	mov	r2, sl
 8023bea:	1aed      	subs	r5, r5, r3
 8023bec:	17eb      	asrs	r3, r5, #31
 8023bee:	17d2      	asrs	r2, r2, #31
 8023bf0:	9307      	str	r3, [sp, #28]
 8023bf2:	9204      	str	r2, [sp, #16]
 8023bf4:	0003      	movs	r3, r0
 8023bf6:	465a      	mov	r2, fp
 8023bf8:	9006      	str	r0, [sp, #24]
 8023bfa:	0020      	movs	r0, r4
 8023bfc:	9105      	str	r1, [sp, #20]
 8023bfe:	f7dc fcdf 	bl	80005c0 <__aeabi_lmul>
 8023c02:	2280      	movs	r2, #128	@ 0x80
 8023c04:	2300      	movs	r3, #0
 8023c06:	0612      	lsls	r2, r2, #24
 8023c08:	1880      	adds	r0, r0, r2
 8023c0a:	4159      	adcs	r1, r3
 8023c0c:	2300      	movs	r3, #0
 8023c0e:	9101      	str	r1, [sp, #4]
 8023c10:	9300      	str	r3, [sp, #0]
 8023c12:	4652      	mov	r2, sl
 8023c14:	9b04      	ldr	r3, [sp, #16]
 8023c16:	0028      	movs	r0, r5
 8023c18:	17e9      	asrs	r1, r5, #31
 8023c1a:	f7dc fcd1 	bl	80005c0 <__aeabi_lmul>
 8023c1e:	9a00      	ldr	r2, [sp, #0]
 8023c20:	9b01      	ldr	r3, [sp, #4]
 8023c22:	1a12      	subs	r2, r2, r0
 8023c24:	418b      	sbcs	r3, r1
 8023c26:	2080      	movs	r0, #128	@ 0x80
 8023c28:	2100      	movs	r1, #0
 8023c2a:	0600      	lsls	r0, r0, #24
 8023c2c:	1812      	adds	r2, r2, r0
 8023c2e:	414b      	adcs	r3, r1
 8023c30:	464a      	mov	r2, r9
 8023c32:	005b      	lsls	r3, r3, #1
 8023c34:	50bb      	str	r3, [r7, r2]
 8023c36:	4658      	mov	r0, fp
 8023c38:	002a      	movs	r2, r5
 8023c3a:	9b07      	ldr	r3, [sp, #28]
 8023c3c:	9906      	ldr	r1, [sp, #24]
 8023c3e:	f7dc fcbf 	bl	80005c0 <__aeabi_lmul>
 8023c42:	2280      	movs	r2, #128	@ 0x80
 8023c44:	2300      	movs	r3, #0
 8023c46:	0612      	lsls	r2, r2, #24
 8023c48:	1880      	adds	r0, r0, r2
 8023c4a:	4159      	adcs	r1, r3
 8023c4c:	2000      	movs	r0, #0
 8023c4e:	9103      	str	r1, [sp, #12]
 8023c50:	9002      	str	r0, [sp, #8]
 8023c52:	4652      	mov	r2, sl
 8023c54:	9b04      	ldr	r3, [sp, #16]
 8023c56:	0020      	movs	r0, r4
 8023c58:	9905      	ldr	r1, [sp, #20]
 8023c5a:	f7dc fcb1 	bl	80005c0 <__aeabi_lmul>
 8023c5e:	9b02      	ldr	r3, [sp, #8]
 8023c60:	9c03      	ldr	r4, [sp, #12]
 8023c62:	18c0      	adds	r0, r0, r3
 8023c64:	4161      	adcs	r1, r4
 8023c66:	2380      	movs	r3, #128	@ 0x80
 8023c68:	2400      	movs	r4, #0
 8023c6a:	061b      	lsls	r3, r3, #24
 8023c6c:	18c0      	adds	r0, r0, r3
 8023c6e:	4161      	adcs	r1, r4
 8023c70:	464a      	mov	r2, r9
 8023c72:	004b      	lsls	r3, r1, #1
 8023c74:	50b3      	str	r3, [r6, r2]
 8023c76:	2308      	movs	r3, #8
 8023c78:	469c      	mov	ip, r3
 8023c7a:	9b08      	ldr	r3, [sp, #32]
 8023c7c:	44e0      	add	r8, ip
 8023c7e:	3708      	adds	r7, #8
 8023c80:	3608      	adds	r6, #8
 8023c82:	4598      	cmp	r8, r3
 8023c84:	d196      	bne.n	8023bb4 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8023c86:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023c88:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023c8a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023c8c:	2302      	movs	r3, #2
 8023c8e:	003a      	movs	r2, r7
 8023c90:	0029      	movs	r1, r5
 8023c92:	0020      	movs	r0, r4
 8023c94:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023c96:	f000 fb3b 	bl	8024310 <arm_radix4_butterfly_inverse_q31>
 8023c9a:	46a4      	mov	ip, r4
 8023c9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023c9e:	2302      	movs	r3, #2
 8023ca0:	0088      	lsls	r0, r1, #2
 8023ca2:	4460      	add	r0, ip
 8023ca4:	003a      	movs	r2, r7
 8023ca6:	0029      	movs	r1, r5
 8023ca8:	f000 fb32 	bl	8024310 <arm_radix4_butterfly_inverse_q31>
 8023cac:	46a4      	mov	ip, r4
 8023cae:	0128      	lsls	r0, r5, #4
 8023cb0:	4460      	add	r0, ip
 8023cb2:	6833      	ldr	r3, [r6, #0]
 8023cb4:	005b      	lsls	r3, r3, #1
 8023cb6:	6033      	str	r3, [r6, #0]
 8023cb8:	6873      	ldr	r3, [r6, #4]
 8023cba:	005b      	lsls	r3, r3, #1
 8023cbc:	6073      	str	r3, [r6, #4]
 8023cbe:	68b3      	ldr	r3, [r6, #8]
 8023cc0:	005b      	lsls	r3, r3, #1
 8023cc2:	60b3      	str	r3, [r6, #8]
 8023cc4:	68f3      	ldr	r3, [r6, #12]
 8023cc6:	005b      	lsls	r3, r3, #1
 8023cc8:	60f3      	str	r3, [r6, #12]
 8023cca:	3610      	adds	r6, #16
 8023ccc:	42b0      	cmp	r0, r6
 8023cce:	d1f0      	bne.n	8023cb2 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8023cd0:	b00f      	add	sp, #60	@ 0x3c
 8023cd2:	bc3c      	pop	{r2, r3, r4, r5}
 8023cd4:	4690      	mov	r8, r2
 8023cd6:	4699      	mov	r9, r3
 8023cd8:	46a2      	mov	sl, r4
 8023cda:	46ab      	mov	fp, r5
 8023cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023cde:	2302      	movs	r3, #2
 8023ce0:	2100      	movs	r1, #0
 8023ce2:	0015      	movs	r5, r2
 8023ce4:	f000 fb14 	bl	8024310 <arm_radix4_butterfly_inverse_q31>
 8023ce8:	46bc      	mov	ip, r7
 8023cea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023cec:	002a      	movs	r2, r5
 8023cee:	0098      	lsls	r0, r3, #2
 8023cf0:	4460      	add	r0, ip
 8023cf2:	2302      	movs	r3, #2
 8023cf4:	2100      	movs	r1, #0
 8023cf6:	f000 fb0b 	bl	8024310 <arm_radix4_butterfly_inverse_q31>
 8023cfa:	e7e9      	b.n	8023cd0 <arm_cfft_radix4by2_inverse_q31+0x158>

08023cfc <arm_cfft_q31>:
 8023cfc:	b570      	push	{r4, r5, r6, lr}
 8023cfe:	001e      	movs	r6, r3
 8023d00:	2380      	movs	r3, #128	@ 0x80
 8023d02:	000d      	movs	r5, r1
 8023d04:	0004      	movs	r4, r0
 8023d06:	8801      	ldrh	r1, [r0, #0]
 8023d08:	005b      	lsls	r3, r3, #1
 8023d0a:	2a01      	cmp	r2, #1
 8023d0c:	d028      	beq.n	8023d60 <arm_cfft_q31+0x64>
 8023d0e:	4299      	cmp	r1, r3
 8023d10:	d020      	beq.n	8023d54 <arm_cfft_q31+0x58>
 8023d12:	d812      	bhi.n	8023d3a <arm_cfft_q31+0x3e>
 8023d14:	2920      	cmp	r1, #32
 8023d16:	d004      	beq.n	8023d22 <arm_cfft_q31+0x26>
 8023d18:	d949      	bls.n	8023dae <arm_cfft_q31+0xb2>
 8023d1a:	2940      	cmp	r1, #64	@ 0x40
 8023d1c:	d01a      	beq.n	8023d54 <arm_cfft_q31+0x58>
 8023d1e:	2980      	cmp	r1, #128	@ 0x80
 8023d20:	d103      	bne.n	8023d2a <arm_cfft_q31+0x2e>
 8023d22:	6862      	ldr	r2, [r4, #4]
 8023d24:	0028      	movs	r0, r5
 8023d26:	f7ff fe65 	bl	80239f4 <arm_cfft_radix4by2_q31>
 8023d2a:	2e00      	cmp	r6, #0
 8023d2c:	d004      	beq.n	8023d38 <arm_cfft_q31+0x3c>
 8023d2e:	68a2      	ldr	r2, [r4, #8]
 8023d30:	89a1      	ldrh	r1, [r4, #12]
 8023d32:	0028      	movs	r0, r5
 8023d34:	f7dc f9e8 	bl	8000108 <arm_bitreversal_32>
 8023d38:	bd70      	pop	{r4, r5, r6, pc}
 8023d3a:	2380      	movs	r3, #128	@ 0x80
 8023d3c:	00db      	lsls	r3, r3, #3
 8023d3e:	4299      	cmp	r1, r3
 8023d40:	d008      	beq.n	8023d54 <arm_cfft_q31+0x58>
 8023d42:	d92f      	bls.n	8023da4 <arm_cfft_q31+0xa8>
 8023d44:	2380      	movs	r3, #128	@ 0x80
 8023d46:	011b      	lsls	r3, r3, #4
 8023d48:	4299      	cmp	r1, r3
 8023d4a:	d0ea      	beq.n	8023d22 <arm_cfft_q31+0x26>
 8023d4c:	2380      	movs	r3, #128	@ 0x80
 8023d4e:	015b      	lsls	r3, r3, #5
 8023d50:	4299      	cmp	r1, r3
 8023d52:	d1ea      	bne.n	8023d2a <arm_cfft_q31+0x2e>
 8023d54:	2301      	movs	r3, #1
 8023d56:	6862      	ldr	r2, [r4, #4]
 8023d58:	0028      	movs	r0, r5
 8023d5a:	f000 f833 	bl	8023dc4 <arm_radix4_butterfly_q31>
 8023d5e:	e7e4      	b.n	8023d2a <arm_cfft_q31+0x2e>
 8023d60:	4299      	cmp	r1, r3
 8023d62:	d019      	beq.n	8023d98 <arm_cfft_q31+0x9c>
 8023d64:	d80b      	bhi.n	8023d7e <arm_cfft_q31+0x82>
 8023d66:	2920      	cmp	r1, #32
 8023d68:	d004      	beq.n	8023d74 <arm_cfft_q31+0x78>
 8023d6a:	d928      	bls.n	8023dbe <arm_cfft_q31+0xc2>
 8023d6c:	2940      	cmp	r1, #64	@ 0x40
 8023d6e:	d013      	beq.n	8023d98 <arm_cfft_q31+0x9c>
 8023d70:	2980      	cmp	r1, #128	@ 0x80
 8023d72:	d1da      	bne.n	8023d2a <arm_cfft_q31+0x2e>
 8023d74:	6862      	ldr	r2, [r4, #4]
 8023d76:	0028      	movs	r0, r5
 8023d78:	f7ff fefe 	bl	8023b78 <arm_cfft_radix4by2_inverse_q31>
 8023d7c:	e7d5      	b.n	8023d2a <arm_cfft_q31+0x2e>
 8023d7e:	2380      	movs	r3, #128	@ 0x80
 8023d80:	00db      	lsls	r3, r3, #3
 8023d82:	4299      	cmp	r1, r3
 8023d84:	d008      	beq.n	8023d98 <arm_cfft_q31+0x9c>
 8023d86:	d915      	bls.n	8023db4 <arm_cfft_q31+0xb8>
 8023d88:	2380      	movs	r3, #128	@ 0x80
 8023d8a:	011b      	lsls	r3, r3, #4
 8023d8c:	4299      	cmp	r1, r3
 8023d8e:	d0f1      	beq.n	8023d74 <arm_cfft_q31+0x78>
 8023d90:	2380      	movs	r3, #128	@ 0x80
 8023d92:	015b      	lsls	r3, r3, #5
 8023d94:	4299      	cmp	r1, r3
 8023d96:	d1c8      	bne.n	8023d2a <arm_cfft_q31+0x2e>
 8023d98:	2301      	movs	r3, #1
 8023d9a:	6862      	ldr	r2, [r4, #4]
 8023d9c:	0028      	movs	r0, r5
 8023d9e:	f000 fab7 	bl	8024310 <arm_radix4_butterfly_inverse_q31>
 8023da2:	e7c2      	b.n	8023d2a <arm_cfft_q31+0x2e>
 8023da4:	2380      	movs	r3, #128	@ 0x80
 8023da6:	009b      	lsls	r3, r3, #2
 8023da8:	4299      	cmp	r1, r3
 8023daa:	d0ba      	beq.n	8023d22 <arm_cfft_q31+0x26>
 8023dac:	e7bd      	b.n	8023d2a <arm_cfft_q31+0x2e>
 8023dae:	2910      	cmp	r1, #16
 8023db0:	d1bb      	bne.n	8023d2a <arm_cfft_q31+0x2e>
 8023db2:	e7cf      	b.n	8023d54 <arm_cfft_q31+0x58>
 8023db4:	2380      	movs	r3, #128	@ 0x80
 8023db6:	009b      	lsls	r3, r3, #2
 8023db8:	4299      	cmp	r1, r3
 8023dba:	d0db      	beq.n	8023d74 <arm_cfft_q31+0x78>
 8023dbc:	e7b5      	b.n	8023d2a <arm_cfft_q31+0x2e>
 8023dbe:	2910      	cmp	r1, #16
 8023dc0:	d1b3      	bne.n	8023d2a <arm_cfft_q31+0x2e>
 8023dc2:	e7e9      	b.n	8023d98 <arm_cfft_q31+0x9c>

08023dc4 <arm_radix4_butterfly_q31>:
 8023dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023dc6:	464d      	mov	r5, r9
 8023dc8:	4644      	mov	r4, r8
 8023dca:	465f      	mov	r7, fp
 8023dcc:	4656      	mov	r6, sl
 8023dce:	469c      	mov	ip, r3
 8023dd0:	b4f0      	push	{r4, r5, r6, r7}
 8023dd2:	b0a7      	sub	sp, #156	@ 0x9c
 8023dd4:	9114      	str	r1, [sp, #80]	@ 0x50
 8023dd6:	0889      	lsrs	r1, r1, #2
 8023dd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8023dda:	00cb      	lsls	r3, r1, #3
 8023ddc:	0015      	movs	r5, r2
 8023dde:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023de0:	18c2      	adds	r2, r0, r3
 8023de2:	000c      	movs	r4, r1
 8023de4:	469a      	mov	sl, r3
 8023de6:	9124      	str	r1, [sp, #144]	@ 0x90
 8023de8:	18d1      	adds	r1, r2, r3
 8023dea:	4663      	mov	r3, ip
 8023dec:	468b      	mov	fp, r1
 8023dee:	0119      	lsls	r1, r3, #4
 8023df0:	910d      	str	r1, [sp, #52]	@ 0x34
 8023df2:	00d9      	lsls	r1, r3, #3
 8023df4:	005b      	lsls	r3, r3, #1
 8023df6:	4463      	add	r3, ip
 8023df8:	910e      	str	r1, [sp, #56]	@ 0x38
 8023dfa:	00d9      	lsls	r1, r3, #3
 8023dfc:	465b      	mov	r3, fp
 8023dfe:	44da      	add	sl, fp
 8023e00:	4690      	mov	r8, r2
 8023e02:	4683      	mov	fp, r0
 8023e04:	4699      	mov	r9, r3
 8023e06:	9022      	str	r0, [sp, #136]	@ 0x88
 8023e08:	9025      	str	r0, [sp, #148]	@ 0x94
 8023e0a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023e0c:	9502      	str	r5, [sp, #8]
 8023e0e:	9500      	str	r5, [sp, #0]
 8023e10:	9501      	str	r5, [sp, #4]
 8023e12:	9407      	str	r4, [sp, #28]
 8023e14:	465b      	mov	r3, fp
 8023e16:	681b      	ldr	r3, [r3, #0]
 8023e18:	4642      	mov	r2, r8
 8023e1a:	111c      	asrs	r4, r3, #4
 8023e1c:	464b      	mov	r3, r9
 8023e1e:	4658      	mov	r0, fp
 8023e20:	681b      	ldr	r3, [r3, #0]
 8023e22:	6812      	ldr	r2, [r2, #0]
 8023e24:	111b      	asrs	r3, r3, #4
 8023e26:	18e7      	adds	r7, r4, r3
 8023e28:	1ae3      	subs	r3, r4, r3
 8023e2a:	1114      	asrs	r4, r2, #4
 8023e2c:	4652      	mov	r2, sl
 8023e2e:	6840      	ldr	r0, [r0, #4]
 8023e30:	6812      	ldr	r2, [r2, #0]
 8023e32:	1105      	asrs	r5, r0, #4
 8023e34:	4648      	mov	r0, r9
 8023e36:	9303      	str	r3, [sp, #12]
 8023e38:	1113      	asrs	r3, r2, #4
 8023e3a:	18e2      	adds	r2, r4, r3
 8023e3c:	465c      	mov	r4, fp
 8023e3e:	6840      	ldr	r0, [r0, #4]
 8023e40:	1103      	asrs	r3, r0, #4
 8023e42:	18ee      	adds	r6, r5, r3
 8023e44:	1ae8      	subs	r0, r5, r3
 8023e46:	18bb      	adds	r3, r7, r2
 8023e48:	6023      	str	r3, [r4, #0]
 8023e4a:	4644      	mov	r4, r8
 8023e4c:	6864      	ldr	r4, [r4, #4]
 8023e4e:	9004      	str	r0, [sp, #16]
 8023e50:	1125      	asrs	r5, r4, #4
 8023e52:	4654      	mov	r4, sl
 8023e54:	6864      	ldr	r4, [r4, #4]
 8023e56:	1123      	asrs	r3, r4, #4
 8023e58:	465c      	mov	r4, fp
 8023e5a:	18eb      	adds	r3, r5, r3
 8023e5c:	18f1      	adds	r1, r6, r3
 8023e5e:	6061      	str	r1, [r4, #4]
 8023e60:	4655      	mov	r5, sl
 8023e62:	4644      	mov	r4, r8
 8023e64:	686d      	ldr	r5, [r5, #4]
 8023e66:	6864      	ldr	r4, [r4, #4]
 8023e68:	1129      	asrs	r1, r5, #4
 8023e6a:	1124      	asrs	r4, r4, #4
 8023e6c:	1a64      	subs	r4, r4, r1
 8023e6e:	4641      	mov	r1, r8
 8023e70:	6809      	ldr	r1, [r1, #0]
 8023e72:	9405      	str	r4, [sp, #20]
 8023e74:	1108      	asrs	r0, r1, #4
 8023e76:	4651      	mov	r1, sl
 8023e78:	6809      	ldr	r1, [r1, #0]
 8023e7a:	1abc      	subs	r4, r7, r2
 8023e7c:	1109      	asrs	r1, r1, #4
 8023e7e:	1a41      	subs	r1, r0, r1
 8023e80:	17e2      	asrs	r2, r4, #31
 8023e82:	9106      	str	r1, [sp, #24]
 8023e84:	0011      	movs	r1, r2
 8023e86:	9a01      	ldr	r2, [sp, #4]
 8023e88:	9108      	str	r1, [sp, #32]
 8023e8a:	6817      	ldr	r7, [r2, #0]
 8023e8c:	17fd      	asrs	r5, r7, #31
 8023e8e:	0028      	movs	r0, r5
 8023e90:	1af5      	subs	r5, r6, r3
 8023e92:	17ee      	asrs	r6, r5, #31
 8023e94:	960a      	str	r6, [sp, #40]	@ 0x28
 8023e96:	6856      	ldr	r6, [r2, #4]
 8023e98:	9009      	str	r0, [sp, #36]	@ 0x24
 8023e9a:	17f3      	asrs	r3, r6, #31
 8023e9c:	003a      	movs	r2, r7
 8023e9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023ea0:	0003      	movs	r3, r0
 8023ea2:	0020      	movs	r0, r4
 8023ea4:	f7dc fb8c 	bl	80005c0 <__aeabi_lmul>
 8023ea8:	0032      	movs	r2, r6
 8023eaa:	17f3      	asrs	r3, r6, #31
 8023eac:	910c      	str	r1, [sp, #48]	@ 0x30
 8023eae:	0028      	movs	r0, r5
 8023eb0:	17e9      	asrs	r1, r5, #31
 8023eb2:	f7dc fb85 	bl	80005c0 <__aeabi_lmul>
 8023eb6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023eb8:	002a      	movs	r2, r5
 8023eba:	4684      	mov	ip, r0
 8023ebc:	4640      	mov	r0, r8
 8023ebe:	4461      	add	r1, ip
 8023ec0:	0049      	lsls	r1, r1, #1
 8023ec2:	6001      	str	r1, [r0, #0]
 8023ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ec6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023ec8:	0038      	movs	r0, r7
 8023eca:	f7dc fb79 	bl	80005c0 <__aeabi_lmul>
 8023ece:	0032      	movs	r2, r6
 8023ed0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023ed2:	000d      	movs	r5, r1
 8023ed4:	0020      	movs	r0, r4
 8023ed6:	9908      	ldr	r1, [sp, #32]
 8023ed8:	f7dc fb72 	bl	80005c0 <__aeabi_lmul>
 8023edc:	4646      	mov	r6, r8
 8023ede:	1a6d      	subs	r5, r5, r1
 8023ee0:	006d      	lsls	r5, r5, #1
 8023ee2:	6075      	str	r5, [r6, #4]
 8023ee4:	9903      	ldr	r1, [sp, #12]
 8023ee6:	9d05      	ldr	r5, [sp, #20]
 8023ee8:	000c      	movs	r4, r1
 8023eea:	46ac      	mov	ip, r5
 8023eec:	4464      	add	r4, ip
 8023eee:	17e6      	asrs	r6, r4, #31
 8023ef0:	0031      	movs	r1, r6
 8023ef2:	9b00      	ldr	r3, [sp, #0]
 8023ef4:	9804      	ldr	r0, [sp, #16]
 8023ef6:	681e      	ldr	r6, [r3, #0]
 8023ef8:	17f7      	asrs	r7, r6, #31
 8023efa:	9709      	str	r7, [sp, #36]	@ 0x24
 8023efc:	9f06      	ldr	r7, [sp, #24]
 8023efe:	0032      	movs	r2, r6
 8023f00:	1bc7      	subs	r7, r0, r7
 8023f02:	17fd      	asrs	r5, r7, #31
 8023f04:	950a      	str	r5, [sp, #40]	@ 0x28
 8023f06:	685d      	ldr	r5, [r3, #4]
 8023f08:	17f3      	asrs	r3, r6, #31
 8023f0a:	17e8      	asrs	r0, r5, #31
 8023f0c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8023f0e:	0020      	movs	r0, r4
 8023f10:	9108      	str	r1, [sp, #32]
 8023f12:	f7dc fb55 	bl	80005c0 <__aeabi_lmul>
 8023f16:	002a      	movs	r2, r5
 8023f18:	17eb      	asrs	r3, r5, #31
 8023f1a:	910c      	str	r1, [sp, #48]	@ 0x30
 8023f1c:	0038      	movs	r0, r7
 8023f1e:	17f9      	asrs	r1, r7, #31
 8023f20:	f7dc fb4e 	bl	80005c0 <__aeabi_lmul>
 8023f24:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023f26:	003a      	movs	r2, r7
 8023f28:	4684      	mov	ip, r0
 8023f2a:	4648      	mov	r0, r9
 8023f2c:	4461      	add	r1, ip
 8023f2e:	0049      	lsls	r1, r1, #1
 8023f30:	6001      	str	r1, [r0, #0]
 8023f32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023f34:	0030      	movs	r0, r6
 8023f36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023f38:	f7dc fb42 	bl	80005c0 <__aeabi_lmul>
 8023f3c:	002a      	movs	r2, r5
 8023f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023f40:	000e      	movs	r6, r1
 8023f42:	0020      	movs	r0, r4
 8023f44:	9908      	ldr	r1, [sp, #32]
 8023f46:	f7dc fb3b 	bl	80005c0 <__aeabi_lmul>
 8023f4a:	464c      	mov	r4, r9
 8023f4c:	9d05      	ldr	r5, [sp, #20]
 8023f4e:	1a76      	subs	r6, r6, r1
 8023f50:	9903      	ldr	r1, [sp, #12]
 8023f52:	0076      	lsls	r6, r6, #1
 8023f54:	6066      	str	r6, [r4, #4]
 8023f56:	1b4c      	subs	r4, r1, r5
 8023f58:	9e06      	ldr	r6, [sp, #24]
 8023f5a:	17e1      	asrs	r1, r4, #31
 8023f5c:	9103      	str	r1, [sp, #12]
 8023f5e:	9902      	ldr	r1, [sp, #8]
 8023f60:	46b4      	mov	ip, r6
 8023f62:	680f      	ldr	r7, [r1, #0]
 8023f64:	9804      	ldr	r0, [sp, #16]
 8023f66:	17fd      	asrs	r5, r7, #31
 8023f68:	002b      	movs	r3, r5
 8023f6a:	684e      	ldr	r6, [r1, #4]
 8023f6c:	4460      	add	r0, ip
 8023f6e:	0005      	movs	r5, r0
 8023f70:	17c0      	asrs	r0, r0, #31
 8023f72:	9005      	str	r0, [sp, #20]
 8023f74:	17f0      	asrs	r0, r6, #31
 8023f76:	9006      	str	r0, [sp, #24]
 8023f78:	003a      	movs	r2, r7
 8023f7a:	0020      	movs	r0, r4
 8023f7c:	17e1      	asrs	r1, r4, #31
 8023f7e:	9304      	str	r3, [sp, #16]
 8023f80:	f7dc fb1e 	bl	80005c0 <__aeabi_lmul>
 8023f84:	0032      	movs	r2, r6
 8023f86:	9108      	str	r1, [sp, #32]
 8023f88:	17f3      	asrs	r3, r6, #31
 8023f8a:	0028      	movs	r0, r5
 8023f8c:	17e9      	asrs	r1, r5, #31
 8023f8e:	f7dc fb17 	bl	80005c0 <__aeabi_lmul>
 8023f92:	9808      	ldr	r0, [sp, #32]
 8023f94:	002a      	movs	r2, r5
 8023f96:	4684      	mov	ip, r0
 8023f98:	4650      	mov	r0, sl
 8023f9a:	4461      	add	r1, ip
 8023f9c:	0049      	lsls	r1, r1, #1
 8023f9e:	6001      	str	r1, [r0, #0]
 8023fa0:	9b05      	ldr	r3, [sp, #20]
 8023fa2:	9904      	ldr	r1, [sp, #16]
 8023fa4:	0038      	movs	r0, r7
 8023fa6:	f7dc fb0b 	bl	80005c0 <__aeabi_lmul>
 8023faa:	0020      	movs	r0, r4
 8023fac:	2408      	movs	r4, #8
 8023fae:	000d      	movs	r5, r1
 8023fb0:	0032      	movs	r2, r6
 8023fb2:	9b06      	ldr	r3, [sp, #24]
 8023fb4:	9903      	ldr	r1, [sp, #12]
 8023fb6:	f7dc fb03 	bl	80005c0 <__aeabi_lmul>
 8023fba:	46a4      	mov	ip, r4
 8023fbc:	4650      	mov	r0, sl
 8023fbe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023fc0:	44e3      	add	fp, ip
 8023fc2:	44e0      	add	r8, ip
 8023fc4:	44e1      	add	r9, ip
 8023fc6:	44e2      	add	sl, ip
 8023fc8:	46a4      	mov	ip, r4
 8023fca:	1a6d      	subs	r5, r5, r1
 8023fcc:	006d      	lsls	r5, r5, #1
 8023fce:	9a01      	ldr	r2, [sp, #4]
 8023fd0:	6045      	str	r5, [r0, #4]
 8023fd2:	9807      	ldr	r0, [sp, #28]
 8023fd4:	4462      	add	r2, ip
 8023fd6:	3801      	subs	r0, #1
 8023fd8:	9201      	str	r2, [sp, #4]
 8023fda:	9007      	str	r0, [sp, #28]
 8023fdc:	9b00      	ldr	r3, [sp, #0]
 8023fde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023fe0:	9902      	ldr	r1, [sp, #8]
 8023fe2:	4694      	mov	ip, r2
 8023fe4:	4463      	add	r3, ip
 8023fe6:	9300      	str	r3, [sp, #0]
 8023fe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023fea:	469c      	mov	ip, r3
 8023fec:	4461      	add	r1, ip
 8023fee:	9102      	str	r1, [sp, #8]
 8023ff0:	2800      	cmp	r0, #0
 8023ff2:	d000      	beq.n	8023ff6 <arm_radix4_butterfly_q31+0x232>
 8023ff4:	e70e      	b.n	8023e14 <arm_radix4_butterfly_q31+0x50>
 8023ff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023ff8:	009b      	lsls	r3, r3, #2
 8023ffa:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023ffc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023ffe:	9320      	str	r3, [sp, #128]	@ 0x80
 8024000:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024002:	2b04      	cmp	r3, #4
 8024004:	d800      	bhi.n	8024008 <arm_radix4_butterfly_q31+0x244>
 8024006:	e180      	b.n	802430a <arm_radix4_butterfly_q31+0x546>
 8024008:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802400a:	0893      	lsrs	r3, r2, #2
 802400c:	1e59      	subs	r1, r3, #1
 802400e:	9321      	str	r3, [sp, #132]	@ 0x84
 8024010:	00db      	lsls	r3, r3, #3
 8024012:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024014:	00d3      	lsls	r3, r2, #3
 8024016:	9300      	str	r3, [sp, #0]
 8024018:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802401a:	911a      	str	r1, [sp, #104]	@ 0x68
 802401c:	00da      	lsls	r2, r3, #3
 802401e:	921e      	str	r2, [sp, #120]	@ 0x78
 8024020:	011a      	lsls	r2, r3, #4
 8024022:	921d      	str	r2, [sp, #116]	@ 0x74
 8024024:	001a      	movs	r2, r3
 8024026:	4694      	mov	ip, r2
 8024028:	005b      	lsls	r3, r3, #1
 802402a:	4463      	add	r3, ip
 802402c:	00db      	lsls	r3, r3, #3
 802402e:	931c      	str	r3, [sp, #112]	@ 0x70
 8024030:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024032:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024034:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024036:	9318      	str	r3, [sp, #96]	@ 0x60
 8024038:	9319      	str	r3, [sp, #100]	@ 0x64
 802403a:	9316      	str	r3, [sp, #88]	@ 0x58
 802403c:	2300      	movs	r3, #0
 802403e:	9315      	str	r3, [sp, #84]	@ 0x54
 8024040:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024042:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024044:	681a      	ldr	r2, [r3, #0]
 8024046:	685b      	ldr	r3, [r3, #4]
 8024048:	9205      	str	r2, [sp, #20]
 802404a:	9306      	str	r3, [sp, #24]
 802404c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802404e:	468c      	mov	ip, r1
 8024050:	681a      	ldr	r2, [r3, #0]
 8024052:	685b      	ldr	r3, [r3, #4]
 8024054:	9207      	str	r2, [sp, #28]
 8024056:	9308      	str	r3, [sp, #32]
 8024058:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802405a:	681a      	ldr	r2, [r3, #0]
 802405c:	685b      	ldr	r3, [r3, #4]
 802405e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024060:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024062:	930a      	str	r3, [sp, #40]	@ 0x28
 8024064:	0013      	movs	r3, r2
 8024066:	4463      	add	r3, ip
 8024068:	4698      	mov	r8, r3
 802406a:	0013      	movs	r3, r2
 802406c:	4442      	add	r2, r8
 802406e:	4691      	mov	r9, r2
 8024070:	001a      	movs	r2, r3
 8024072:	444a      	add	r2, r9
 8024074:	4692      	mov	sl, r2
 8024076:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024078:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802407a:	4293      	cmp	r3, r2
 802407c:	d800      	bhi.n	8024080 <arm_radix4_butterfly_q31+0x2bc>
 802407e:	e0dd      	b.n	802423c <arm_radix4_butterfly_q31+0x478>
 8024080:	4694      	mov	ip, r2
 8024082:	468b      	mov	fp, r1
 8024084:	4644      	mov	r4, r8
 8024086:	4655      	mov	r5, sl
 8024088:	9b07      	ldr	r3, [sp, #28]
 802408a:	17db      	asrs	r3, r3, #31
 802408c:	930c      	str	r3, [sp, #48]	@ 0x30
 802408e:	9b08      	ldr	r3, [sp, #32]
 8024090:	17db      	asrs	r3, r3, #31
 8024092:	930d      	str	r3, [sp, #52]	@ 0x34
 8024094:	9b05      	ldr	r3, [sp, #20]
 8024096:	17db      	asrs	r3, r3, #31
 8024098:	930e      	str	r3, [sp, #56]	@ 0x38
 802409a:	9b06      	ldr	r3, [sp, #24]
 802409c:	17db      	asrs	r3, r3, #31
 802409e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80240a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240a2:	17db      	asrs	r3, r3, #31
 80240a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80240a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80240a8:	17db      	asrs	r3, r3, #31
 80240aa:	9311      	str	r3, [sp, #68]	@ 0x44
 80240ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80240ae:	4463      	add	r3, ip
 80240b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80240b2:	465b      	mov	r3, fp
 80240b4:	4659      	mov	r1, fp
 80240b6:	681a      	ldr	r2, [r3, #0]
 80240b8:	464b      	mov	r3, r9
 80240ba:	684f      	ldr	r7, [r1, #4]
 80240bc:	4649      	mov	r1, r9
 80240be:	681b      	ldr	r3, [r3, #0]
 80240c0:	18d6      	adds	r6, r2, r3
 80240c2:	1ad3      	subs	r3, r2, r3
 80240c4:	9301      	str	r3, [sp, #4]
 80240c6:	684b      	ldr	r3, [r1, #4]
 80240c8:	18f8      	adds	r0, r7, r3
 80240ca:	1af9      	subs	r1, r7, r3
 80240cc:	6827      	ldr	r7, [r4, #0]
 80240ce:	9102      	str	r1, [sp, #8]
 80240d0:	003a      	movs	r2, r7
 80240d2:	682f      	ldr	r7, [r5, #0]
 80240d4:	46bc      	mov	ip, r7
 80240d6:	465f      	mov	r7, fp
 80240d8:	4462      	add	r2, ip
 80240da:	18b3      	adds	r3, r6, r2
 80240dc:	109b      	asrs	r3, r3, #2
 80240de:	603b      	str	r3, [r7, #0]
 80240e0:	6867      	ldr	r7, [r4, #4]
 80240e2:	1ab6      	subs	r6, r6, r2
 80240e4:	46b8      	mov	r8, r7
 80240e6:	686f      	ldr	r7, [r5, #4]
 80240e8:	17f2      	asrs	r2, r6, #31
 80240ea:	46bc      	mov	ip, r7
 80240ec:	44e0      	add	r8, ip
 80240ee:	4643      	mov	r3, r8
 80240f0:	465f      	mov	r7, fp
 80240f2:	18c1      	adds	r1, r0, r3
 80240f4:	1089      	asrs	r1, r1, #2
 80240f6:	6079      	str	r1, [r7, #4]
 80240f8:	9900      	ldr	r1, [sp, #0]
 80240fa:	4690      	mov	r8, r2
 80240fc:	468c      	mov	ip, r1
 80240fe:	6867      	ldr	r7, [r4, #4]
 8024100:	6869      	ldr	r1, [r5, #4]
 8024102:	44e3      	add	fp, ip
 8024104:	1a7f      	subs	r7, r7, r1
 8024106:	9703      	str	r7, [sp, #12]
 8024108:	6829      	ldr	r1, [r5, #0]
 802410a:	6827      	ldr	r7, [r4, #0]
 802410c:	1a7f      	subs	r7, r7, r1
 802410e:	9704      	str	r7, [sp, #16]
 8024110:	1ac7      	subs	r7, r0, r3
 8024112:	17fa      	asrs	r2, r7, #31
 8024114:	4692      	mov	sl, r2
 8024116:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024118:	9a07      	ldr	r2, [sp, #28]
 802411a:	0030      	movs	r0, r6
 802411c:	4641      	mov	r1, r8
 802411e:	f7dc fa4f 	bl	80005c0 <__aeabi_lmul>
 8024122:	9a08      	ldr	r2, [sp, #32]
 8024124:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024126:	9112      	str	r1, [sp, #72]	@ 0x48
 8024128:	0038      	movs	r0, r7
 802412a:	4651      	mov	r1, sl
 802412c:	f7dc fa48 	bl	80005c0 <__aeabi_lmul>
 8024130:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024132:	9a07      	ldr	r2, [sp, #28]
 8024134:	4684      	mov	ip, r0
 8024136:	4461      	add	r1, ip
 8024138:	1049      	asrs	r1, r1, #1
 802413a:	6021      	str	r1, [r4, #0]
 802413c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802413e:	0038      	movs	r0, r7
 8024140:	4651      	mov	r1, sl
 8024142:	f7dc fa3d 	bl	80005c0 <__aeabi_lmul>
 8024146:	9a08      	ldr	r2, [sp, #32]
 8024148:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802414a:	000f      	movs	r7, r1
 802414c:	0030      	movs	r0, r6
 802414e:	4641      	mov	r1, r8
 8024150:	f7dc fa36 	bl	80005c0 <__aeabi_lmul>
 8024154:	9b00      	ldr	r3, [sp, #0]
 8024156:	9a01      	ldr	r2, [sp, #4]
 8024158:	469c      	mov	ip, r3
 802415a:	9803      	ldr	r0, [sp, #12]
 802415c:	1a7f      	subs	r7, r7, r1
 802415e:	107f      	asrs	r7, r7, #1
 8024160:	6067      	str	r7, [r4, #4]
 8024162:	0016      	movs	r6, r2
 8024164:	4464      	add	r4, ip
 8024166:	4684      	mov	ip, r0
 8024168:	4466      	add	r6, ip
 802416a:	17f2      	asrs	r2, r6, #31
 802416c:	4690      	mov	r8, r2
 802416e:	9902      	ldr	r1, [sp, #8]
 8024170:	9f04      	ldr	r7, [sp, #16]
 8024172:	0030      	movs	r0, r6
 8024174:	1bcf      	subs	r7, r1, r7
 8024176:	17fa      	asrs	r2, r7, #31
 8024178:	4692      	mov	sl, r2
 802417a:	4641      	mov	r1, r8
 802417c:	9a05      	ldr	r2, [sp, #20]
 802417e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024180:	f7dc fa1e 	bl	80005c0 <__aeabi_lmul>
 8024184:	9a06      	ldr	r2, [sp, #24]
 8024186:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024188:	9112      	str	r1, [sp, #72]	@ 0x48
 802418a:	0038      	movs	r0, r7
 802418c:	4651      	mov	r1, sl
 802418e:	f7dc fa17 	bl	80005c0 <__aeabi_lmul>
 8024192:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024194:	9a05      	ldr	r2, [sp, #20]
 8024196:	4684      	mov	ip, r0
 8024198:	4648      	mov	r0, r9
 802419a:	4461      	add	r1, ip
 802419c:	1049      	asrs	r1, r1, #1
 802419e:	6001      	str	r1, [r0, #0]
 80241a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80241a2:	0038      	movs	r0, r7
 80241a4:	4651      	mov	r1, sl
 80241a6:	f7dc fa0b 	bl	80005c0 <__aeabi_lmul>
 80241aa:	9a06      	ldr	r2, [sp, #24]
 80241ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80241ae:	000f      	movs	r7, r1
 80241b0:	0030      	movs	r0, r6
 80241b2:	4641      	mov	r1, r8
 80241b4:	f7dc fa04 	bl	80005c0 <__aeabi_lmul>
 80241b8:	464e      	mov	r6, r9
 80241ba:	9a00      	ldr	r2, [sp, #0]
 80241bc:	9b01      	ldr	r3, [sp, #4]
 80241be:	4694      	mov	ip, r2
 80241c0:	9803      	ldr	r0, [sp, #12]
 80241c2:	1a7f      	subs	r7, r7, r1
 80241c4:	107f      	asrs	r7, r7, #1
 80241c6:	6077      	str	r7, [r6, #4]
 80241c8:	1a1e      	subs	r6, r3, r0
 80241ca:	9b04      	ldr	r3, [sp, #16]
 80241cc:	44e1      	add	r9, ip
 80241ce:	469c      	mov	ip, r3
 80241d0:	17f0      	asrs	r0, r6, #31
 80241d2:	4680      	mov	r8, r0
 80241d4:	9902      	ldr	r1, [sp, #8]
 80241d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80241d8:	4461      	add	r1, ip
 80241da:	17cb      	asrs	r3, r1, #31
 80241dc:	000f      	movs	r7, r1
 80241de:	469a      	mov	sl, r3
 80241e0:	0030      	movs	r0, r6
 80241e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80241e4:	4641      	mov	r1, r8
 80241e6:	f7dc f9eb 	bl	80005c0 <__aeabi_lmul>
 80241ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80241ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80241ee:	9101      	str	r1, [sp, #4]
 80241f0:	0038      	movs	r0, r7
 80241f2:	4651      	mov	r1, sl
 80241f4:	f7dc f9e4 	bl	80005c0 <__aeabi_lmul>
 80241f8:	9801      	ldr	r0, [sp, #4]
 80241fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80241fc:	4684      	mov	ip, r0
 80241fe:	4461      	add	r1, ip
 8024200:	1049      	asrs	r1, r1, #1
 8024202:	6029      	str	r1, [r5, #0]
 8024204:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024206:	0038      	movs	r0, r7
 8024208:	4651      	mov	r1, sl
 802420a:	f7dc f9d9 	bl	80005c0 <__aeabi_lmul>
 802420e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024210:	000f      	movs	r7, r1
 8024212:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024214:	0030      	movs	r0, r6
 8024216:	4641      	mov	r1, r8
 8024218:	f7dc f9d2 	bl	80005c0 <__aeabi_lmul>
 802421c:	1a7f      	subs	r7, r7, r1
 802421e:	107f      	asrs	r7, r7, #1
 8024220:	606f      	str	r7, [r5, #4]
 8024222:	9a00      	ldr	r2, [sp, #0]
 8024224:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024226:	4694      	mov	ip, r2
 8024228:	4465      	add	r5, ip
 802422a:	468c      	mov	ip, r1
 802422c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802422e:	0013      	movs	r3, r2
 8024230:	4462      	add	r2, ip
 8024232:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024234:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024236:	429a      	cmp	r2, r3
 8024238:	d900      	bls.n	802423c <arm_radix4_butterfly_q31+0x478>
 802423a:	e73a      	b.n	80240b2 <arm_radix4_butterfly_q31+0x2ee>
 802423c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802423e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024240:	468c      	mov	ip, r1
 8024242:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024244:	4462      	add	r2, ip
 8024246:	468c      	mov	ip, r1
 8024248:	9216      	str	r2, [sp, #88]	@ 0x58
 802424a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802424c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802424e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024250:	4462      	add	r2, ip
 8024252:	468c      	mov	ip, r1
 8024254:	9219      	str	r2, [sp, #100]	@ 0x64
 8024256:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024258:	3301      	adds	r3, #1
 802425a:	4462      	add	r2, ip
 802425c:	9218      	str	r2, [sp, #96]	@ 0x60
 802425e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024260:	9315      	str	r3, [sp, #84]	@ 0x54
 8024262:	3208      	adds	r2, #8
 8024264:	9217      	str	r2, [sp, #92]	@ 0x5c
 8024266:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024268:	4293      	cmp	r3, r2
 802426a:	d800      	bhi.n	802426e <arm_radix4_butterfly_q31+0x4aa>
 802426c:	e6e8      	b.n	8024040 <arm_radix4_butterfly_q31+0x27c>
 802426e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024270:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024272:	009b      	lsls	r3, r3, #2
 8024274:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024276:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024278:	9213      	str	r2, [sp, #76]	@ 0x4c
 802427a:	089b      	lsrs	r3, r3, #2
 802427c:	9320      	str	r3, [sp, #128]	@ 0x80
 802427e:	2b04      	cmp	r3, #4
 8024280:	d900      	bls.n	8024284 <arm_radix4_butterfly_q31+0x4c0>
 8024282:	e6c1      	b.n	8024008 <arm_radix4_butterfly_q31+0x244>
 8024284:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024286:	469a      	mov	sl, r3
 8024288:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802428a:	691c      	ldr	r4, [r3, #16]
 802428c:	685a      	ldr	r2, [r3, #4]
 802428e:	46a1      	mov	r9, r4
 8024290:	4690      	mov	r8, r2
 8024292:	6819      	ldr	r1, [r3, #0]
 8024294:	689a      	ldr	r2, [r3, #8]
 8024296:	699f      	ldr	r7, [r3, #24]
 8024298:	188d      	adds	r5, r1, r2
 802429a:	444d      	add	r5, r9
 802429c:	19ed      	adds	r5, r5, r7
 802429e:	69de      	ldr	r6, [r3, #28]
 80242a0:	601d      	str	r5, [r3, #0]
 80242a2:	4645      	mov	r5, r8
 80242a4:	46b4      	mov	ip, r6
 80242a6:	68d8      	ldr	r0, [r3, #12]
 80242a8:	695c      	ldr	r4, [r3, #20]
 80242aa:	182d      	adds	r5, r5, r0
 80242ac:	192d      	adds	r5, r5, r4
 80242ae:	4465      	add	r5, ip
 80242b0:	605d      	str	r5, [r3, #4]
 80242b2:	1a8d      	subs	r5, r1, r2
 80242b4:	444d      	add	r5, r9
 80242b6:	1bed      	subs	r5, r5, r7
 80242b8:	609d      	str	r5, [r3, #8]
 80242ba:	4645      	mov	r5, r8
 80242bc:	1a2d      	subs	r5, r5, r0
 80242be:	192d      	adds	r5, r5, r4
 80242c0:	1bad      	subs	r5, r5, r6
 80242c2:	464e      	mov	r6, r9
 80242c4:	60dd      	str	r5, [r3, #12]
 80242c6:	180d      	adds	r5, r1, r0
 80242c8:	1bad      	subs	r5, r5, r6
 80242ca:	4666      	mov	r6, ip
 80242cc:	1bad      	subs	r5, r5, r6
 80242ce:	611d      	str	r5, [r3, #16]
 80242d0:	4645      	mov	r5, r8
 80242d2:	1aad      	subs	r5, r5, r2
 80242d4:	4442      	add	r2, r8
 80242d6:	1b12      	subs	r2, r2, r4
 80242d8:	1bd2      	subs	r2, r2, r7
 80242da:	1a08      	subs	r0, r1, r0
 80242dc:	61da      	str	r2, [r3, #28]
 80242de:	4649      	mov	r1, r9
 80242e0:	2201      	movs	r2, #1
 80242e2:	1a41      	subs	r1, r0, r1
 80242e4:	4252      	negs	r2, r2
 80242e6:	4461      	add	r1, ip
 80242e8:	4694      	mov	ip, r2
 80242ea:	44e2      	add	sl, ip
 80242ec:	4652      	mov	r2, sl
 80242ee:	1b2d      	subs	r5, r5, r4
 80242f0:	19ed      	adds	r5, r5, r7
 80242f2:	615d      	str	r5, [r3, #20]
 80242f4:	6199      	str	r1, [r3, #24]
 80242f6:	3320      	adds	r3, #32
 80242f8:	2a00      	cmp	r2, #0
 80242fa:	d1c6      	bne.n	802428a <arm_radix4_butterfly_q31+0x4c6>
 80242fc:	b027      	add	sp, #156	@ 0x9c
 80242fe:	bc3c      	pop	{r2, r3, r4, r5}
 8024300:	4690      	mov	r8, r2
 8024302:	4699      	mov	r9, r3
 8024304:	46a2      	mov	sl, r4
 8024306:	46ab      	mov	fp, r5
 8024308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802430a:	469a      	mov	sl, r3
 802430c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802430e:	e7bc      	b.n	802428a <arm_radix4_butterfly_q31+0x4c6>

08024310 <arm_radix4_butterfly_inverse_q31>:
 8024310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024312:	464d      	mov	r5, r9
 8024314:	4644      	mov	r4, r8
 8024316:	465f      	mov	r7, fp
 8024318:	4656      	mov	r6, sl
 802431a:	b4f0      	push	{r4, r5, r6, r7}
 802431c:	b0a7      	sub	sp, #156	@ 0x9c
 802431e:	469c      	mov	ip, r3
 8024320:	9114      	str	r1, [sp, #80]	@ 0x50
 8024322:	0889      	lsrs	r1, r1, #2
 8024324:	9310      	str	r3, [sp, #64]	@ 0x40
 8024326:	00cb      	lsls	r3, r1, #3
 8024328:	0015      	movs	r5, r2
 802432a:	9223      	str	r2, [sp, #140]	@ 0x8c
 802432c:	18c2      	adds	r2, r0, r3
 802432e:	000c      	movs	r4, r1
 8024330:	9124      	str	r1, [sp, #144]	@ 0x90
 8024332:	18d1      	adds	r1, r2, r3
 8024334:	468b      	mov	fp, r1
 8024336:	469a      	mov	sl, r3
 8024338:	4663      	mov	r3, ip
 802433a:	44da      	add	sl, fp
 802433c:	46d0      	mov	r8, sl
 802433e:	4681      	mov	r9, r0
 8024340:	4692      	mov	sl, r2
 8024342:	0119      	lsls	r1, r3, #4
 8024344:	910d      	str	r1, [sp, #52]	@ 0x34
 8024346:	00d9      	lsls	r1, r3, #3
 8024348:	005b      	lsls	r3, r3, #1
 802434a:	4463      	add	r3, ip
 802434c:	910e      	str	r1, [sp, #56]	@ 0x38
 802434e:	00d9      	lsls	r1, r3, #3
 8024350:	9022      	str	r0, [sp, #136]	@ 0x88
 8024352:	9025      	str	r0, [sp, #148]	@ 0x94
 8024354:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024356:	9502      	str	r5, [sp, #8]
 8024358:	9500      	str	r5, [sp, #0]
 802435a:	9501      	str	r5, [sp, #4]
 802435c:	9409      	str	r4, [sp, #36]	@ 0x24
 802435e:	464b      	mov	r3, r9
 8024360:	681b      	ldr	r3, [r3, #0]
 8024362:	4652      	mov	r2, sl
 8024364:	111c      	asrs	r4, r3, #4
 8024366:	465b      	mov	r3, fp
 8024368:	4648      	mov	r0, r9
 802436a:	681b      	ldr	r3, [r3, #0]
 802436c:	6812      	ldr	r2, [r2, #0]
 802436e:	6840      	ldr	r0, [r0, #4]
 8024370:	111b      	asrs	r3, r3, #4
 8024372:	18e7      	adds	r7, r4, r3
 8024374:	1ae3      	subs	r3, r4, r3
 8024376:	1114      	asrs	r4, r2, #4
 8024378:	4642      	mov	r2, r8
 802437a:	1105      	asrs	r5, r0, #4
 802437c:	4658      	mov	r0, fp
 802437e:	6812      	ldr	r2, [r2, #0]
 8024380:	6840      	ldr	r0, [r0, #4]
 8024382:	9303      	str	r3, [sp, #12]
 8024384:	1113      	asrs	r3, r2, #4
 8024386:	18e2      	adds	r2, r4, r3
 8024388:	1103      	asrs	r3, r0, #4
 802438a:	18ee      	adds	r6, r5, r3
 802438c:	1ae8      	subs	r0, r5, r3
 802438e:	464d      	mov	r5, r9
 8024390:	18bb      	adds	r3, r7, r2
 8024392:	602b      	str	r3, [r5, #0]
 8024394:	4641      	mov	r1, r8
 8024396:	4655      	mov	r5, sl
 8024398:	6849      	ldr	r1, [r1, #4]
 802439a:	686d      	ldr	r5, [r5, #4]
 802439c:	110b      	asrs	r3, r1, #4
 802439e:	112d      	asrs	r5, r5, #4
 80243a0:	18eb      	adds	r3, r5, r3
 80243a2:	464d      	mov	r5, r9
 80243a4:	18f1      	adds	r1, r6, r3
 80243a6:	6069      	str	r1, [r5, #4]
 80243a8:	4655      	mov	r5, sl
 80243aa:	686d      	ldr	r5, [r5, #4]
 80243ac:	9004      	str	r0, [sp, #16]
 80243ae:	112c      	asrs	r4, r5, #4
 80243b0:	4645      	mov	r5, r8
 80243b2:	686d      	ldr	r5, [r5, #4]
 80243b4:	1129      	asrs	r1, r5, #4
 80243b6:	1a65      	subs	r5, r4, r1
 80243b8:	4651      	mov	r1, sl
 80243ba:	6809      	ldr	r1, [r1, #0]
 80243bc:	1abc      	subs	r4, r7, r2
 80243be:	1108      	asrs	r0, r1, #4
 80243c0:	4641      	mov	r1, r8
 80243c2:	17e2      	asrs	r2, r4, #31
 80243c4:	6809      	ldr	r1, [r1, #0]
 80243c6:	9207      	str	r2, [sp, #28]
 80243c8:	9a01      	ldr	r2, [sp, #4]
 80243ca:	1109      	asrs	r1, r1, #4
 80243cc:	6817      	ldr	r7, [r2, #0]
 80243ce:	1a41      	subs	r1, r0, r1
 80243d0:	9106      	str	r1, [sp, #24]
 80243d2:	0039      	movs	r1, r7
 80243d4:	17ff      	asrs	r7, r7, #31
 80243d6:	0038      	movs	r0, r7
 80243d8:	9505      	str	r5, [sp, #20]
 80243da:	1af5      	subs	r5, r6, r3
 80243dc:	17ef      	asrs	r7, r5, #31
 80243de:	970b      	str	r7, [sp, #44]	@ 0x2c
 80243e0:	6857      	ldr	r7, [r2, #4]
 80243e2:	0003      	movs	r3, r0
 80243e4:	17fe      	asrs	r6, r7, #31
 80243e6:	000a      	movs	r2, r1
 80243e8:	9108      	str	r1, [sp, #32]
 80243ea:	900a      	str	r0, [sp, #40]	@ 0x28
 80243ec:	17e1      	asrs	r1, r4, #31
 80243ee:	0020      	movs	r0, r4
 80243f0:	960c      	str	r6, [sp, #48]	@ 0x30
 80243f2:	f7dc f8e5 	bl	80005c0 <__aeabi_lmul>
 80243f6:	003a      	movs	r2, r7
 80243f8:	17fb      	asrs	r3, r7, #31
 80243fa:	000e      	movs	r6, r1
 80243fc:	0028      	movs	r0, r5
 80243fe:	17e9      	asrs	r1, r5, #31
 8024400:	f7dc f8de 	bl	80005c0 <__aeabi_lmul>
 8024404:	4653      	mov	r3, sl
 8024406:	1a76      	subs	r6, r6, r1
 8024408:	0076      	lsls	r6, r6, #1
 802440a:	601e      	str	r6, [r3, #0]
 802440c:	002a      	movs	r2, r5
 802440e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024410:	9808      	ldr	r0, [sp, #32]
 8024412:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024414:	f7dc f8d4 	bl	80005c0 <__aeabi_lmul>
 8024418:	003a      	movs	r2, r7
 802441a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802441c:	000d      	movs	r5, r1
 802441e:	0020      	movs	r0, r4
 8024420:	9907      	ldr	r1, [sp, #28]
 8024422:	f7dc f8cd 	bl	80005c0 <__aeabi_lmul>
 8024426:	4657      	mov	r7, sl
 8024428:	186d      	adds	r5, r5, r1
 802442a:	006d      	lsls	r5, r5, #1
 802442c:	607d      	str	r5, [r7, #4]
 802442e:	9b03      	ldr	r3, [sp, #12]
 8024430:	9e06      	ldr	r6, [sp, #24]
 8024432:	9d05      	ldr	r5, [sp, #20]
 8024434:	46b4      	mov	ip, r6
 8024436:	1b5d      	subs	r5, r3, r5
 8024438:	9b00      	ldr	r3, [sp, #0]
 802443a:	17ef      	asrs	r7, r5, #31
 802443c:	0039      	movs	r1, r7
 802443e:	681f      	ldr	r7, [r3, #0]
 8024440:	17fc      	asrs	r4, r7, #31
 8024442:	0020      	movs	r0, r4
 8024444:	9c04      	ldr	r4, [sp, #16]
 8024446:	4464      	add	r4, ip
 8024448:	17e6      	asrs	r6, r4, #31
 802444a:	9407      	str	r4, [sp, #28]
 802444c:	9608      	str	r6, [sp, #32]
 802444e:	685e      	ldr	r6, [r3, #4]
 8024450:	900b      	str	r0, [sp, #44]	@ 0x2c
 8024452:	17f2      	asrs	r2, r6, #31
 8024454:	0003      	movs	r3, r0
 8024456:	920c      	str	r2, [sp, #48]	@ 0x30
 8024458:	0028      	movs	r0, r5
 802445a:	003a      	movs	r2, r7
 802445c:	910a      	str	r1, [sp, #40]	@ 0x28
 802445e:	f7dc f8af 	bl	80005c0 <__aeabi_lmul>
 8024462:	0032      	movs	r2, r6
 8024464:	17f3      	asrs	r3, r6, #31
 8024466:	9807      	ldr	r0, [sp, #28]
 8024468:	000c      	movs	r4, r1
 802446a:	9908      	ldr	r1, [sp, #32]
 802446c:	f7dc f8a8 	bl	80005c0 <__aeabi_lmul>
 8024470:	4658      	mov	r0, fp
 8024472:	1a64      	subs	r4, r4, r1
 8024474:	0064      	lsls	r4, r4, #1
 8024476:	9a07      	ldr	r2, [sp, #28]
 8024478:	6004      	str	r4, [r0, #0]
 802447a:	9b08      	ldr	r3, [sp, #32]
 802447c:	0038      	movs	r0, r7
 802447e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024480:	f7dc f89e 	bl	80005c0 <__aeabi_lmul>
 8024484:	0032      	movs	r2, r6
 8024486:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024488:	000c      	movs	r4, r1
 802448a:	0028      	movs	r0, r5
 802448c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802448e:	f7dc f897 	bl	80005c0 <__aeabi_lmul>
 8024492:	9d05      	ldr	r5, [sp, #20]
 8024494:	465f      	mov	r7, fp
 8024496:	46ac      	mov	ip, r5
 8024498:	1864      	adds	r4, r4, r1
 802449a:	9903      	ldr	r1, [sp, #12]
 802449c:	0064      	lsls	r4, r4, #1
 802449e:	4461      	add	r1, ip
 80244a0:	607c      	str	r4, [r7, #4]
 80244a2:	000c      	movs	r4, r1
 80244a4:	17c9      	asrs	r1, r1, #31
 80244a6:	9105      	str	r1, [sp, #20]
 80244a8:	9902      	ldr	r1, [sp, #8]
 80244aa:	9804      	ldr	r0, [sp, #16]
 80244ac:	680d      	ldr	r5, [r1, #0]
 80244ae:	9e06      	ldr	r6, [sp, #24]
 80244b0:	002b      	movs	r3, r5
 80244b2:	17ed      	asrs	r5, r5, #31
 80244b4:	684f      	ldr	r7, [r1, #4]
 80244b6:	9503      	str	r5, [sp, #12]
 80244b8:	1b85      	subs	r5, r0, r6
 80244ba:	17e8      	asrs	r0, r5, #31
 80244bc:	001a      	movs	r2, r3
 80244be:	9006      	str	r0, [sp, #24]
 80244c0:	17fe      	asrs	r6, r7, #31
 80244c2:	9304      	str	r3, [sp, #16]
 80244c4:	0020      	movs	r0, r4
 80244c6:	9b03      	ldr	r3, [sp, #12]
 80244c8:	17e1      	asrs	r1, r4, #31
 80244ca:	9607      	str	r6, [sp, #28]
 80244cc:	f7dc f878 	bl	80005c0 <__aeabi_lmul>
 80244d0:	003a      	movs	r2, r7
 80244d2:	000e      	movs	r6, r1
 80244d4:	17fb      	asrs	r3, r7, #31
 80244d6:	0028      	movs	r0, r5
 80244d8:	17e9      	asrs	r1, r5, #31
 80244da:	f7dc f871 	bl	80005c0 <__aeabi_lmul>
 80244de:	4640      	mov	r0, r8
 80244e0:	1a76      	subs	r6, r6, r1
 80244e2:	0076      	lsls	r6, r6, #1
 80244e4:	002a      	movs	r2, r5
 80244e6:	9b06      	ldr	r3, [sp, #24]
 80244e8:	6006      	str	r6, [r0, #0]
 80244ea:	9903      	ldr	r1, [sp, #12]
 80244ec:	9804      	ldr	r0, [sp, #16]
 80244ee:	f7dc f867 	bl	80005c0 <__aeabi_lmul>
 80244f2:	0020      	movs	r0, r4
 80244f4:	2408      	movs	r4, #8
 80244f6:	9b07      	ldr	r3, [sp, #28]
 80244f8:	000d      	movs	r5, r1
 80244fa:	003a      	movs	r2, r7
 80244fc:	9905      	ldr	r1, [sp, #20]
 80244fe:	f7dc f85f 	bl	80005c0 <__aeabi_lmul>
 8024502:	4640      	mov	r0, r8
 8024504:	46a4      	mov	ip, r4
 8024506:	186d      	adds	r5, r5, r1
 8024508:	006d      	lsls	r5, r5, #1
 802450a:	6045      	str	r5, [r0, #4]
 802450c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802450e:	44e1      	add	r9, ip
 8024510:	3801      	subs	r0, #1
 8024512:	9009      	str	r0, [sp, #36]	@ 0x24
 8024514:	9a01      	ldr	r2, [sp, #4]
 8024516:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024518:	44e2      	add	sl, ip
 802451a:	44e3      	add	fp, ip
 802451c:	44e0      	add	r8, ip
 802451e:	46a4      	mov	ip, r4
 8024520:	4462      	add	r2, ip
 8024522:	9201      	str	r2, [sp, #4]
 8024524:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024526:	9b00      	ldr	r3, [sp, #0]
 8024528:	4694      	mov	ip, r2
 802452a:	4463      	add	r3, ip
 802452c:	9300      	str	r3, [sp, #0]
 802452e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024530:	9902      	ldr	r1, [sp, #8]
 8024532:	469c      	mov	ip, r3
 8024534:	4461      	add	r1, ip
 8024536:	9102      	str	r1, [sp, #8]
 8024538:	2800      	cmp	r0, #0
 802453a:	d000      	beq.n	802453e <arm_radix4_butterfly_inverse_q31+0x22e>
 802453c:	e70f      	b.n	802435e <arm_radix4_butterfly_inverse_q31+0x4e>
 802453e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024540:	009b      	lsls	r3, r3, #2
 8024542:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024544:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024546:	9320      	str	r3, [sp, #128]	@ 0x80
 8024548:	9313      	str	r3, [sp, #76]	@ 0x4c
 802454a:	2b04      	cmp	r3, #4
 802454c:	d800      	bhi.n	8024550 <arm_radix4_butterfly_inverse_q31+0x240>
 802454e:	e17c      	b.n	802484a <arm_radix4_butterfly_inverse_q31+0x53a>
 8024550:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024552:	0893      	lsrs	r3, r2, #2
 8024554:	1e59      	subs	r1, r3, #1
 8024556:	9321      	str	r3, [sp, #132]	@ 0x84
 8024558:	00db      	lsls	r3, r3, #3
 802455a:	931b      	str	r3, [sp, #108]	@ 0x6c
 802455c:	00d3      	lsls	r3, r2, #3
 802455e:	9300      	str	r3, [sp, #0]
 8024560:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024562:	911a      	str	r1, [sp, #104]	@ 0x68
 8024564:	00da      	lsls	r2, r3, #3
 8024566:	921e      	str	r2, [sp, #120]	@ 0x78
 8024568:	011a      	lsls	r2, r3, #4
 802456a:	921d      	str	r2, [sp, #116]	@ 0x74
 802456c:	001a      	movs	r2, r3
 802456e:	4694      	mov	ip, r2
 8024570:	005b      	lsls	r3, r3, #1
 8024572:	4463      	add	r3, ip
 8024574:	00db      	lsls	r3, r3, #3
 8024576:	931c      	str	r3, [sp, #112]	@ 0x70
 8024578:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802457a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802457c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802457e:	9318      	str	r3, [sp, #96]	@ 0x60
 8024580:	9319      	str	r3, [sp, #100]	@ 0x64
 8024582:	9316      	str	r3, [sp, #88]	@ 0x58
 8024584:	2300      	movs	r3, #0
 8024586:	9315      	str	r3, [sp, #84]	@ 0x54
 8024588:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802458a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802458c:	681a      	ldr	r2, [r3, #0]
 802458e:	685b      	ldr	r3, [r3, #4]
 8024590:	9205      	str	r2, [sp, #20]
 8024592:	9306      	str	r3, [sp, #24]
 8024594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024596:	468c      	mov	ip, r1
 8024598:	681a      	ldr	r2, [r3, #0]
 802459a:	685b      	ldr	r3, [r3, #4]
 802459c:	9207      	str	r2, [sp, #28]
 802459e:	9308      	str	r3, [sp, #32]
 80245a0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80245a2:	681a      	ldr	r2, [r3, #0]
 80245a4:	685b      	ldr	r3, [r3, #4]
 80245a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80245a8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80245aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80245ac:	0013      	movs	r3, r2
 80245ae:	4463      	add	r3, ip
 80245b0:	4698      	mov	r8, r3
 80245b2:	0013      	movs	r3, r2
 80245b4:	4442      	add	r2, r8
 80245b6:	4691      	mov	r9, r2
 80245b8:	001a      	movs	r2, r3
 80245ba:	444a      	add	r2, r9
 80245bc:	4692      	mov	sl, r2
 80245be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80245c0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80245c2:	4293      	cmp	r3, r2
 80245c4:	d800      	bhi.n	80245c8 <arm_radix4_butterfly_inverse_q31+0x2b8>
 80245c6:	e0d9      	b.n	802477c <arm_radix4_butterfly_inverse_q31+0x46c>
 80245c8:	4694      	mov	ip, r2
 80245ca:	4644      	mov	r4, r8
 80245cc:	4655      	mov	r5, sl
 80245ce:	4688      	mov	r8, r1
 80245d0:	9b07      	ldr	r3, [sp, #28]
 80245d2:	17db      	asrs	r3, r3, #31
 80245d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80245d6:	9b08      	ldr	r3, [sp, #32]
 80245d8:	17db      	asrs	r3, r3, #31
 80245da:	930d      	str	r3, [sp, #52]	@ 0x34
 80245dc:	9b05      	ldr	r3, [sp, #20]
 80245de:	17db      	asrs	r3, r3, #31
 80245e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80245e2:	9b06      	ldr	r3, [sp, #24]
 80245e4:	17db      	asrs	r3, r3, #31
 80245e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80245e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80245ea:	17db      	asrs	r3, r3, #31
 80245ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80245ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80245f0:	17db      	asrs	r3, r3, #31
 80245f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80245f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80245f6:	4463      	add	r3, ip
 80245f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80245fa:	4643      	mov	r3, r8
 80245fc:	4641      	mov	r1, r8
 80245fe:	681a      	ldr	r2, [r3, #0]
 8024600:	464b      	mov	r3, r9
 8024602:	684f      	ldr	r7, [r1, #4]
 8024604:	4649      	mov	r1, r9
 8024606:	681b      	ldr	r3, [r3, #0]
 8024608:	18d6      	adds	r6, r2, r3
 802460a:	1ad3      	subs	r3, r2, r3
 802460c:	9301      	str	r3, [sp, #4]
 802460e:	684b      	ldr	r3, [r1, #4]
 8024610:	1af9      	subs	r1, r7, r3
 8024612:	9102      	str	r1, [sp, #8]
 8024614:	6829      	ldr	r1, [r5, #0]
 8024616:	18f8      	adds	r0, r7, r3
 8024618:	468c      	mov	ip, r1
 802461a:	6827      	ldr	r7, [r4, #0]
 802461c:	4467      	add	r7, ip
 802461e:	003a      	movs	r2, r7
 8024620:	19f3      	adds	r3, r6, r7
 8024622:	4647      	mov	r7, r8
 8024624:	109b      	asrs	r3, r3, #2
 8024626:	603b      	str	r3, [r7, #0]
 8024628:	6869      	ldr	r1, [r5, #4]
 802462a:	6867      	ldr	r7, [r4, #4]
 802462c:	468c      	mov	ip, r1
 802462e:	4467      	add	r7, ip
 8024630:	003b      	movs	r3, r7
 8024632:	19c1      	adds	r1, r0, r7
 8024634:	4647      	mov	r7, r8
 8024636:	1ab6      	subs	r6, r6, r2
 8024638:	1089      	asrs	r1, r1, #2
 802463a:	6079      	str	r1, [r7, #4]
 802463c:	17f2      	asrs	r2, r6, #31
 802463e:	9900      	ldr	r1, [sp, #0]
 8024640:	4692      	mov	sl, r2
 8024642:	468c      	mov	ip, r1
 8024644:	6867      	ldr	r7, [r4, #4]
 8024646:	6869      	ldr	r1, [r5, #4]
 8024648:	44e0      	add	r8, ip
 802464a:	1a7f      	subs	r7, r7, r1
 802464c:	9703      	str	r7, [sp, #12]
 802464e:	6821      	ldr	r1, [r4, #0]
 8024650:	682f      	ldr	r7, [r5, #0]
 8024652:	1bc9      	subs	r1, r1, r7
 8024654:	1ac7      	subs	r7, r0, r3
 8024656:	17fa      	asrs	r2, r7, #31
 8024658:	4693      	mov	fp, r2
 802465a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802465c:	9a07      	ldr	r2, [sp, #28]
 802465e:	9104      	str	r1, [sp, #16]
 8024660:	0030      	movs	r0, r6
 8024662:	4651      	mov	r1, sl
 8024664:	f7db ffac 	bl	80005c0 <__aeabi_lmul>
 8024668:	9a08      	ldr	r2, [sp, #32]
 802466a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802466c:	9112      	str	r1, [sp, #72]	@ 0x48
 802466e:	0038      	movs	r0, r7
 8024670:	4659      	mov	r1, fp
 8024672:	f7db ffa5 	bl	80005c0 <__aeabi_lmul>
 8024676:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024678:	9a07      	ldr	r2, [sp, #28]
 802467a:	1a41      	subs	r1, r0, r1
 802467c:	1049      	asrs	r1, r1, #1
 802467e:	6021      	str	r1, [r4, #0]
 8024680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024682:	0038      	movs	r0, r7
 8024684:	4659      	mov	r1, fp
 8024686:	f7db ff9b 	bl	80005c0 <__aeabi_lmul>
 802468a:	9a08      	ldr	r2, [sp, #32]
 802468c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802468e:	000f      	movs	r7, r1
 8024690:	0030      	movs	r0, r6
 8024692:	4651      	mov	r1, sl
 8024694:	f7db ff94 	bl	80005c0 <__aeabi_lmul>
 8024698:	9b00      	ldr	r3, [sp, #0]
 802469a:	187f      	adds	r7, r7, r1
 802469c:	469c      	mov	ip, r3
 802469e:	107f      	asrs	r7, r7, #1
 80246a0:	6067      	str	r7, [r4, #4]
 80246a2:	9a01      	ldr	r2, [sp, #4]
 80246a4:	9f03      	ldr	r7, [sp, #12]
 80246a6:	9802      	ldr	r0, [sp, #8]
 80246a8:	1bd7      	subs	r7, r2, r7
 80246aa:	17fe      	asrs	r6, r7, #31
 80246ac:	0031      	movs	r1, r6
 80246ae:	9e04      	ldr	r6, [sp, #16]
 80246b0:	4682      	mov	sl, r0
 80246b2:	4464      	add	r4, ip
 80246b4:	46b4      	mov	ip, r6
 80246b6:	44e2      	add	sl, ip
 80246b8:	4652      	mov	r2, sl
 80246ba:	17d2      	asrs	r2, r2, #31
 80246bc:	4693      	mov	fp, r2
 80246be:	0038      	movs	r0, r7
 80246c0:	9a05      	ldr	r2, [sp, #20]
 80246c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80246c4:	9112      	str	r1, [sp, #72]	@ 0x48
 80246c6:	f7db ff7b 	bl	80005c0 <__aeabi_lmul>
 80246ca:	9a06      	ldr	r2, [sp, #24]
 80246cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80246ce:	000e      	movs	r6, r1
 80246d0:	4650      	mov	r0, sl
 80246d2:	4659      	mov	r1, fp
 80246d4:	f7db ff74 	bl	80005c0 <__aeabi_lmul>
 80246d8:	4648      	mov	r0, r9
 80246da:	1a76      	subs	r6, r6, r1
 80246dc:	1076      	asrs	r6, r6, #1
 80246de:	6006      	str	r6, [r0, #0]
 80246e0:	9a05      	ldr	r2, [sp, #20]
 80246e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80246e4:	4650      	mov	r0, sl
 80246e6:	4659      	mov	r1, fp
 80246e8:	f7db ff6a 	bl	80005c0 <__aeabi_lmul>
 80246ec:	9a06      	ldr	r2, [sp, #24]
 80246ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80246f0:	000e      	movs	r6, r1
 80246f2:	0038      	movs	r0, r7
 80246f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80246f6:	f7db ff63 	bl	80005c0 <__aeabi_lmul>
 80246fa:	9a00      	ldr	r2, [sp, #0]
 80246fc:	9f03      	ldr	r7, [sp, #12]
 80246fe:	4694      	mov	ip, r2
 8024700:	1876      	adds	r6, r6, r1
 8024702:	4649      	mov	r1, r9
 8024704:	44e1      	add	r9, ip
 8024706:	46bc      	mov	ip, r7
 8024708:	9b01      	ldr	r3, [sp, #4]
 802470a:	1076      	asrs	r6, r6, #1
 802470c:	4463      	add	r3, ip
 802470e:	17df      	asrs	r7, r3, #31
 8024710:	604e      	str	r6, [r1, #4]
 8024712:	46ba      	mov	sl, r7
 8024714:	001e      	movs	r6, r3
 8024716:	9802      	ldr	r0, [sp, #8]
 8024718:	9b04      	ldr	r3, [sp, #16]
 802471a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802471c:	1ac7      	subs	r7, r0, r3
 802471e:	17fb      	asrs	r3, r7, #31
 8024720:	469b      	mov	fp, r3
 8024722:	0030      	movs	r0, r6
 8024724:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024726:	4651      	mov	r1, sl
 8024728:	f7db ff4a 	bl	80005c0 <__aeabi_lmul>
 802472c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802472e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024730:	9101      	str	r1, [sp, #4]
 8024732:	0038      	movs	r0, r7
 8024734:	4659      	mov	r1, fp
 8024736:	f7db ff43 	bl	80005c0 <__aeabi_lmul>
 802473a:	9801      	ldr	r0, [sp, #4]
 802473c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802473e:	1a41      	subs	r1, r0, r1
 8024740:	1049      	asrs	r1, r1, #1
 8024742:	6029      	str	r1, [r5, #0]
 8024744:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024746:	0038      	movs	r0, r7
 8024748:	4659      	mov	r1, fp
 802474a:	f7db ff39 	bl	80005c0 <__aeabi_lmul>
 802474e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024750:	000f      	movs	r7, r1
 8024752:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024754:	0030      	movs	r0, r6
 8024756:	4651      	mov	r1, sl
 8024758:	f7db ff32 	bl	80005c0 <__aeabi_lmul>
 802475c:	187f      	adds	r7, r7, r1
 802475e:	107f      	asrs	r7, r7, #1
 8024760:	606f      	str	r7, [r5, #4]
 8024762:	9a00      	ldr	r2, [sp, #0]
 8024764:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024766:	4694      	mov	ip, r2
 8024768:	4465      	add	r5, ip
 802476a:	468c      	mov	ip, r1
 802476c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802476e:	0013      	movs	r3, r2
 8024770:	4462      	add	r2, ip
 8024772:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024774:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024776:	429a      	cmp	r2, r3
 8024778:	d900      	bls.n	802477c <arm_radix4_butterfly_inverse_q31+0x46c>
 802477a:	e73e      	b.n	80245fa <arm_radix4_butterfly_inverse_q31+0x2ea>
 802477c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802477e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024780:	468c      	mov	ip, r1
 8024782:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024784:	4462      	add	r2, ip
 8024786:	468c      	mov	ip, r1
 8024788:	9216      	str	r2, [sp, #88]	@ 0x58
 802478a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802478c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802478e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024790:	4462      	add	r2, ip
 8024792:	468c      	mov	ip, r1
 8024794:	9219      	str	r2, [sp, #100]	@ 0x64
 8024796:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024798:	3301      	adds	r3, #1
 802479a:	4462      	add	r2, ip
 802479c:	9218      	str	r2, [sp, #96]	@ 0x60
 802479e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80247a0:	9315      	str	r3, [sp, #84]	@ 0x54
 80247a2:	3208      	adds	r2, #8
 80247a4:	9217      	str	r2, [sp, #92]	@ 0x5c
 80247a6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80247a8:	4293      	cmp	r3, r2
 80247aa:	d800      	bhi.n	80247ae <arm_radix4_butterfly_inverse_q31+0x49e>
 80247ac:	e6ec      	b.n	8024588 <arm_radix4_butterfly_inverse_q31+0x278>
 80247ae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80247b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80247b2:	009b      	lsls	r3, r3, #2
 80247b4:	931f      	str	r3, [sp, #124]	@ 0x7c
 80247b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80247b8:	9213      	str	r2, [sp, #76]	@ 0x4c
 80247ba:	089b      	lsrs	r3, r3, #2
 80247bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80247be:	2b04      	cmp	r3, #4
 80247c0:	d900      	bls.n	80247c4 <arm_radix4_butterfly_inverse_q31+0x4b4>
 80247c2:	e6c5      	b.n	8024550 <arm_radix4_butterfly_inverse_q31+0x240>
 80247c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80247c6:	469a      	mov	sl, r3
 80247c8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80247ca:	681a      	ldr	r2, [r3, #0]
 80247cc:	6918      	ldr	r0, [r3, #16]
 80247ce:	4691      	mov	r9, r2
 80247d0:	464c      	mov	r4, r9
 80247d2:	4680      	mov	r8, r0
 80247d4:	69de      	ldr	r6, [r3, #28]
 80247d6:	689d      	ldr	r5, [r3, #8]
 80247d8:	46b4      	mov	ip, r6
 80247da:	6998      	ldr	r0, [r3, #24]
 80247dc:	1964      	adds	r4, r4, r5
 80247de:	6859      	ldr	r1, [r3, #4]
 80247e0:	68da      	ldr	r2, [r3, #12]
 80247e2:	4444      	add	r4, r8
 80247e4:	695f      	ldr	r7, [r3, #20]
 80247e6:	1824      	adds	r4, r4, r0
 80247e8:	601c      	str	r4, [r3, #0]
 80247ea:	188c      	adds	r4, r1, r2
 80247ec:	19e4      	adds	r4, r4, r7
 80247ee:	4464      	add	r4, ip
 80247f0:	605c      	str	r4, [r3, #4]
 80247f2:	464c      	mov	r4, r9
 80247f4:	1b64      	subs	r4, r4, r5
 80247f6:	4444      	add	r4, r8
 80247f8:	1a24      	subs	r4, r4, r0
 80247fa:	609c      	str	r4, [r3, #8]
 80247fc:	1a8c      	subs	r4, r1, r2
 80247fe:	19e4      	adds	r4, r4, r7
 8024800:	1ba4      	subs	r4, r4, r6
 8024802:	60dc      	str	r4, [r3, #12]
 8024804:	464c      	mov	r4, r9
 8024806:	4646      	mov	r6, r8
 8024808:	1aa4      	subs	r4, r4, r2
 802480a:	1ba4      	subs	r4, r4, r6
 802480c:	4464      	add	r4, ip
 802480e:	611c      	str	r4, [r3, #16]
 8024810:	194c      	adds	r4, r1, r5
 8024812:	1be4      	subs	r4, r4, r7
 8024814:	1a24      	subs	r4, r4, r0
 8024816:	615c      	str	r4, [r3, #20]
 8024818:	4644      	mov	r4, r8
 802481a:	4666      	mov	r6, ip
 802481c:	444a      	add	r2, r9
 802481e:	1b12      	subs	r2, r2, r4
 8024820:	1b92      	subs	r2, r2, r6
 8024822:	619a      	str	r2, [r3, #24]
 8024824:	1b4a      	subs	r2, r1, r5
 8024826:	1bd1      	subs	r1, r2, r7
 8024828:	2201      	movs	r2, #1
 802482a:	4252      	negs	r2, r2
 802482c:	4694      	mov	ip, r2
 802482e:	44e2      	add	sl, ip
 8024830:	4652      	mov	r2, sl
 8024832:	1809      	adds	r1, r1, r0
 8024834:	61d9      	str	r1, [r3, #28]
 8024836:	3320      	adds	r3, #32
 8024838:	2a00      	cmp	r2, #0
 802483a:	d1c6      	bne.n	80247ca <arm_radix4_butterfly_inverse_q31+0x4ba>
 802483c:	b027      	add	sp, #156	@ 0x9c
 802483e:	bc3c      	pop	{r2, r3, r4, r5}
 8024840:	4690      	mov	r8, r2
 8024842:	4699      	mov	r9, r3
 8024844:	46a2      	mov	sl, r4
 8024846:	46ab      	mov	fp, r5
 8024848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802484a:	469a      	mov	sl, r3
 802484c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802484e:	e7bc      	b.n	80247ca <arm_radix4_butterfly_inverse_q31+0x4ba>

08024850 <arm_cmplx_mag_squared_q31>:
 8024850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024852:	464f      	mov	r7, r9
 8024854:	4646      	mov	r6, r8
 8024856:	0004      	movs	r4, r0
 8024858:	b4c0      	push	{r6, r7}
 802485a:	0016      	movs	r6, r2
 802485c:	000f      	movs	r7, r1
 802485e:	2a00      	cmp	r2, #0
 8024860:	d018      	beq.n	8024894 <arm_cmplx_mag_squared_q31+0x44>
 8024862:	6823      	ldr	r3, [r4, #0]
 8024864:	6822      	ldr	r2, [r4, #0]
 8024866:	17d9      	asrs	r1, r3, #31
 8024868:	6863      	ldr	r3, [r4, #4]
 802486a:	0010      	movs	r0, r2
 802486c:	4698      	mov	r8, r3
 802486e:	17db      	asrs	r3, r3, #31
 8024870:	4699      	mov	r9, r3
 8024872:	000b      	movs	r3, r1
 8024874:	f7db fea4 	bl	80005c0 <__aeabi_lmul>
 8024878:	4642      	mov	r2, r8
 802487a:	104d      	asrs	r5, r1, #1
 802487c:	464b      	mov	r3, r9
 802487e:	4640      	mov	r0, r8
 8024880:	4649      	mov	r1, r9
 8024882:	f7db fe9d 	bl	80005c0 <__aeabi_lmul>
 8024886:	1049      	asrs	r1, r1, #1
 8024888:	1869      	adds	r1, r5, r1
 802488a:	3e01      	subs	r6, #1
 802488c:	c702      	stmia	r7!, {r1}
 802488e:	3408      	adds	r4, #8
 8024890:	2e00      	cmp	r6, #0
 8024892:	d1e6      	bne.n	8024862 <arm_cmplx_mag_squared_q31+0x12>
 8024894:	bc0c      	pop	{r2, r3}
 8024896:	4690      	mov	r8, r2
 8024898:	4699      	mov	r9, r3
 802489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802489c <arm_mult_q31>:
 802489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802489e:	4646      	mov	r6, r8
 80248a0:	464f      	mov	r7, r9
 80248a2:	4690      	mov	r8, r2
 80248a4:	b4c0      	push	{r6, r7}
 80248a6:	001d      	movs	r5, r3
 80248a8:	0006      	movs	r6, r0
 80248aa:	000f      	movs	r7, r1
 80248ac:	2400      	movs	r4, #0
 80248ae:	2b00      	cmp	r3, #0
 80248b0:	d020      	beq.n	80248f4 <arm_mult_q31+0x58>
 80248b2:	4b12      	ldr	r3, [pc, #72]	@ (80248fc <arm_mult_q31+0x60>)
 80248b4:	4699      	mov	r9, r3
 80248b6:	e007      	b.n	80248c8 <arm_mult_q31+0x2c>
 80248b8:	464b      	mov	r3, r9
 80248ba:	4059      	eors	r1, r3
 80248bc:	4643      	mov	r3, r8
 80248be:	3d01      	subs	r5, #1
 80248c0:	5119      	str	r1, [r3, r4]
 80248c2:	3404      	adds	r4, #4
 80248c4:	2d00      	cmp	r5, #0
 80248c6:	d015      	beq.n	80248f4 <arm_mult_q31+0x58>
 80248c8:	5933      	ldr	r3, [r6, r4]
 80248ca:	593a      	ldr	r2, [r7, r4]
 80248cc:	17d9      	asrs	r1, r3, #31
 80248ce:	593b      	ldr	r3, [r7, r4]
 80248d0:	5930      	ldr	r0, [r6, r4]
 80248d2:	17db      	asrs	r3, r3, #31
 80248d4:	f7db fe74 	bl	80005c0 <__aeabi_lmul>
 80248d8:	004b      	lsls	r3, r1, #1
 80248da:	0fc0      	lsrs	r0, r0, #31
 80248dc:	4318      	orrs	r0, r3
 80248de:	17c9      	asrs	r1, r1, #31
 80248e0:	17c3      	asrs	r3, r0, #31
 80248e2:	428b      	cmp	r3, r1
 80248e4:	d1e8      	bne.n	80248b8 <arm_mult_q31+0x1c>
 80248e6:	0001      	movs	r1, r0
 80248e8:	4643      	mov	r3, r8
 80248ea:	3d01      	subs	r5, #1
 80248ec:	5119      	str	r1, [r3, r4]
 80248ee:	3404      	adds	r4, #4
 80248f0:	2d00      	cmp	r5, #0
 80248f2:	d1e9      	bne.n	80248c8 <arm_mult_q31+0x2c>
 80248f4:	bc0c      	pop	{r2, r3}
 80248f6:	4690      	mov	r8, r2
 80248f8:	4699      	mov	r9, r3
 80248fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80248fc:	7fffffff 	.word	0x7fffffff

08024900 <arm_add_q31>:
 8024900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024902:	465f      	mov	r7, fp
 8024904:	4656      	mov	r6, sl
 8024906:	464d      	mov	r5, r9
 8024908:	4644      	mov	r4, r8
 802490a:	b4f0      	push	{r4, r5, r6, r7}
 802490c:	4693      	mov	fp, r2
 802490e:	b083      	sub	sp, #12
 8024910:	4681      	mov	r9, r0
 8024912:	468a      	mov	sl, r1
 8024914:	4698      	mov	r8, r3
 8024916:	2200      	movs	r2, #0
 8024918:	2b00      	cmp	r3, #0
 802491a:	d020      	beq.n	802495e <arm_add_q31+0x5e>
 802491c:	4649      	mov	r1, r9
 802491e:	4653      	mov	r3, sl
 8024920:	588e      	ldr	r6, [r1, r2]
 8024922:	589b      	ldr	r3, [r3, r2]
 8024924:	17f7      	asrs	r7, r6, #31
 8024926:	001c      	movs	r4, r3
 8024928:	0030      	movs	r0, r6
 802492a:	0039      	movs	r1, r7
 802492c:	17dd      	asrs	r5, r3, #31
 802492e:	46b4      	mov	ip, r6
 8024930:	1900      	adds	r0, r0, r4
 8024932:	4169      	adcs	r1, r5
 8024934:	4463      	add	r3, ip
 8024936:	9000      	str	r0, [sp, #0]
 8024938:	9101      	str	r1, [sp, #4]
 802493a:	17d9      	asrs	r1, r3, #31
 802493c:	468c      	mov	ip, r1
 802493e:	9901      	ldr	r1, [sp, #4]
 8024940:	458c      	cmp	ip, r1
 8024942:	d002      	beq.n	802494a <arm_add_q31+0x4a>
 8024944:	17cb      	asrs	r3, r1, #31
 8024946:	4909      	ldr	r1, [pc, #36]	@ (802496c <arm_add_q31+0x6c>)
 8024948:	404b      	eors	r3, r1
 802494a:	4659      	mov	r1, fp
 802494c:	508b      	str	r3, [r1, r2]
 802494e:	2301      	movs	r3, #1
 8024950:	425b      	negs	r3, r3
 8024952:	469c      	mov	ip, r3
 8024954:	44e0      	add	r8, ip
 8024956:	4643      	mov	r3, r8
 8024958:	3204      	adds	r2, #4
 802495a:	2b00      	cmp	r3, #0
 802495c:	d1de      	bne.n	802491c <arm_add_q31+0x1c>
 802495e:	b003      	add	sp, #12
 8024960:	bc3c      	pop	{r2, r3, r4, r5}
 8024962:	4690      	mov	r8, r2
 8024964:	4699      	mov	r9, r3
 8024966:	46a2      	mov	sl, r4
 8024968:	46ab      	mov	fp, r5
 802496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802496c:	7fffffff 	.word	0x7fffffff

08024970 <atof>:
 8024970:	b510      	push	{r4, lr}
 8024972:	2100      	movs	r1, #0
 8024974:	f000 fe1e 	bl	80255b4 <strtod>
 8024978:	bd10      	pop	{r4, pc}

0802497a <atoi>:
 802497a:	b510      	push	{r4, lr}
 802497c:	220a      	movs	r2, #10
 802497e:	2100      	movs	r1, #0
 8024980:	f000 feb0 	bl	80256e4 <strtol>
 8024984:	bd10      	pop	{r4, pc}
	...

08024988 <sulp>:
 8024988:	b570      	push	{r4, r5, r6, lr}
 802498a:	0016      	movs	r6, r2
 802498c:	000d      	movs	r5, r1
 802498e:	f003 fced 	bl	802836c <__ulp>
 8024992:	2e00      	cmp	r6, #0
 8024994:	d00d      	beq.n	80249b2 <sulp+0x2a>
 8024996:	236b      	movs	r3, #107	@ 0x6b
 8024998:	006a      	lsls	r2, r5, #1
 802499a:	0d52      	lsrs	r2, r2, #21
 802499c:	1a9b      	subs	r3, r3, r2
 802499e:	2b00      	cmp	r3, #0
 80249a0:	dd07      	ble.n	80249b2 <sulp+0x2a>
 80249a2:	2400      	movs	r4, #0
 80249a4:	4a03      	ldr	r2, [pc, #12]	@ (80249b4 <sulp+0x2c>)
 80249a6:	051b      	lsls	r3, r3, #20
 80249a8:	189d      	adds	r5, r3, r2
 80249aa:	002b      	movs	r3, r5
 80249ac:	0022      	movs	r2, r4
 80249ae:	f7dd ffd1 	bl	8002954 <__aeabi_dmul>
 80249b2:	bd70      	pop	{r4, r5, r6, pc}
 80249b4:	3ff00000 	.word	0x3ff00000

080249b8 <_strtod_l>:
 80249b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80249ba:	b0a3      	sub	sp, #140	@ 0x8c
 80249bc:	921b      	str	r2, [sp, #108]	@ 0x6c
 80249be:	2200      	movs	r2, #0
 80249c0:	2600      	movs	r6, #0
 80249c2:	2700      	movs	r7, #0
 80249c4:	9005      	str	r0, [sp, #20]
 80249c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80249c8:	921e      	str	r2, [sp, #120]	@ 0x78
 80249ca:	911d      	str	r1, [sp, #116]	@ 0x74
 80249cc:	780a      	ldrb	r2, [r1, #0]
 80249ce:	2a2b      	cmp	r2, #43	@ 0x2b
 80249d0:	d053      	beq.n	8024a7a <_strtod_l+0xc2>
 80249d2:	d83f      	bhi.n	8024a54 <_strtod_l+0x9c>
 80249d4:	2a0d      	cmp	r2, #13
 80249d6:	d839      	bhi.n	8024a4c <_strtod_l+0x94>
 80249d8:	2a08      	cmp	r2, #8
 80249da:	d839      	bhi.n	8024a50 <_strtod_l+0x98>
 80249dc:	2a00      	cmp	r2, #0
 80249de:	d042      	beq.n	8024a66 <_strtod_l+0xae>
 80249e0:	2200      	movs	r2, #0
 80249e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80249e4:	2100      	movs	r1, #0
 80249e6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80249e8:	910c      	str	r1, [sp, #48]	@ 0x30
 80249ea:	782a      	ldrb	r2, [r5, #0]
 80249ec:	2a30      	cmp	r2, #48	@ 0x30
 80249ee:	d000      	beq.n	80249f2 <_strtod_l+0x3a>
 80249f0:	e083      	b.n	8024afa <_strtod_l+0x142>
 80249f2:	786a      	ldrb	r2, [r5, #1]
 80249f4:	3120      	adds	r1, #32
 80249f6:	438a      	bics	r2, r1
 80249f8:	2a58      	cmp	r2, #88	@ 0x58
 80249fa:	d000      	beq.n	80249fe <_strtod_l+0x46>
 80249fc:	e073      	b.n	8024ae6 <_strtod_l+0x12e>
 80249fe:	9302      	str	r3, [sp, #8]
 8024a00:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024a02:	4a9b      	ldr	r2, [pc, #620]	@ (8024c70 <_strtod_l+0x2b8>)
 8024a04:	9301      	str	r3, [sp, #4]
 8024a06:	ab1e      	add	r3, sp, #120	@ 0x78
 8024a08:	9300      	str	r3, [sp, #0]
 8024a0a:	9805      	ldr	r0, [sp, #20]
 8024a0c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024a0e:	a91d      	add	r1, sp, #116	@ 0x74
 8024a10:	f002 fd64 	bl	80274dc <__gethex>
 8024a14:	230f      	movs	r3, #15
 8024a16:	0002      	movs	r2, r0
 8024a18:	401a      	ands	r2, r3
 8024a1a:	0004      	movs	r4, r0
 8024a1c:	9206      	str	r2, [sp, #24]
 8024a1e:	4218      	tst	r0, r3
 8024a20:	d005      	beq.n	8024a2e <_strtod_l+0x76>
 8024a22:	2a06      	cmp	r2, #6
 8024a24:	d12b      	bne.n	8024a7e <_strtod_l+0xc6>
 8024a26:	2300      	movs	r3, #0
 8024a28:	3501      	adds	r5, #1
 8024a2a:	951d      	str	r5, [sp, #116]	@ 0x74
 8024a2c:	9312      	str	r3, [sp, #72]	@ 0x48
 8024a2e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024a30:	2b00      	cmp	r3, #0
 8024a32:	d002      	beq.n	8024a3a <_strtod_l+0x82>
 8024a34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024a36:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024a38:	6013      	str	r3, [r2, #0]
 8024a3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024a3c:	2b00      	cmp	r3, #0
 8024a3e:	d019      	beq.n	8024a74 <_strtod_l+0xbc>
 8024a40:	2380      	movs	r3, #128	@ 0x80
 8024a42:	0030      	movs	r0, r6
 8024a44:	061b      	lsls	r3, r3, #24
 8024a46:	18f9      	adds	r1, r7, r3
 8024a48:	b023      	add	sp, #140	@ 0x8c
 8024a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a4c:	2a20      	cmp	r2, #32
 8024a4e:	d1c7      	bne.n	80249e0 <_strtod_l+0x28>
 8024a50:	3101      	adds	r1, #1
 8024a52:	e7ba      	b.n	80249ca <_strtod_l+0x12>
 8024a54:	2a2d      	cmp	r2, #45	@ 0x2d
 8024a56:	d1c3      	bne.n	80249e0 <_strtod_l+0x28>
 8024a58:	3a2c      	subs	r2, #44	@ 0x2c
 8024a5a:	9212      	str	r2, [sp, #72]	@ 0x48
 8024a5c:	1c4a      	adds	r2, r1, #1
 8024a5e:	921d      	str	r2, [sp, #116]	@ 0x74
 8024a60:	784a      	ldrb	r2, [r1, #1]
 8024a62:	2a00      	cmp	r2, #0
 8024a64:	d1be      	bne.n	80249e4 <_strtod_l+0x2c>
 8024a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a68:	931d      	str	r3, [sp, #116]	@ 0x74
 8024a6a:	2300      	movs	r3, #0
 8024a6c:	9312      	str	r3, [sp, #72]	@ 0x48
 8024a6e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024a70:	2b00      	cmp	r3, #0
 8024a72:	d1df      	bne.n	8024a34 <_strtod_l+0x7c>
 8024a74:	0030      	movs	r0, r6
 8024a76:	0039      	movs	r1, r7
 8024a78:	e7e6      	b.n	8024a48 <_strtod_l+0x90>
 8024a7a:	2200      	movs	r2, #0
 8024a7c:	e7ed      	b.n	8024a5a <_strtod_l+0xa2>
 8024a7e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024a80:	2a00      	cmp	r2, #0
 8024a82:	d007      	beq.n	8024a94 <_strtod_l+0xdc>
 8024a84:	2135      	movs	r1, #53	@ 0x35
 8024a86:	a820      	add	r0, sp, #128	@ 0x80
 8024a88:	f003 fd66 	bl	8028558 <__copybits>
 8024a8c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024a8e:	9805      	ldr	r0, [sp, #20]
 8024a90:	f003 f928 	bl	8027ce4 <_Bfree>
 8024a94:	9806      	ldr	r0, [sp, #24]
 8024a96:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024a98:	3801      	subs	r0, #1
 8024a9a:	2804      	cmp	r0, #4
 8024a9c:	d806      	bhi.n	8024aac <_strtod_l+0xf4>
 8024a9e:	f7db fb6d 	bl	800017c <__gnu_thumb1_case_uqi>
 8024aa2:	0312      	.short	0x0312
 8024aa4:	1e1c      	.short	0x1e1c
 8024aa6:	12          	.byte	0x12
 8024aa7:	00          	.byte	0x00
 8024aa8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024aaa:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024aac:	05e4      	lsls	r4, r4, #23
 8024aae:	d502      	bpl.n	8024ab6 <_strtod_l+0xfe>
 8024ab0:	2380      	movs	r3, #128	@ 0x80
 8024ab2:	061b      	lsls	r3, r3, #24
 8024ab4:	431f      	orrs	r7, r3
 8024ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8024c74 <_strtod_l+0x2bc>)
 8024ab8:	423b      	tst	r3, r7
 8024aba:	d1b8      	bne.n	8024a2e <_strtod_l+0x76>
 8024abc:	f001 fd9e 	bl	80265fc <__errno>
 8024ac0:	2322      	movs	r3, #34	@ 0x22
 8024ac2:	6003      	str	r3, [r0, #0]
 8024ac4:	e7b3      	b.n	8024a2e <_strtod_l+0x76>
 8024ac6:	496c      	ldr	r1, [pc, #432]	@ (8024c78 <_strtod_l+0x2c0>)
 8024ac8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024aca:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024acc:	400a      	ands	r2, r1
 8024ace:	496b      	ldr	r1, [pc, #428]	@ (8024c7c <_strtod_l+0x2c4>)
 8024ad0:	185b      	adds	r3, r3, r1
 8024ad2:	051b      	lsls	r3, r3, #20
 8024ad4:	431a      	orrs	r2, r3
 8024ad6:	0017      	movs	r7, r2
 8024ad8:	e7e8      	b.n	8024aac <_strtod_l+0xf4>
 8024ada:	4f66      	ldr	r7, [pc, #408]	@ (8024c74 <_strtod_l+0x2bc>)
 8024adc:	e7e6      	b.n	8024aac <_strtod_l+0xf4>
 8024ade:	2601      	movs	r6, #1
 8024ae0:	4f67      	ldr	r7, [pc, #412]	@ (8024c80 <_strtod_l+0x2c8>)
 8024ae2:	4276      	negs	r6, r6
 8024ae4:	e7e2      	b.n	8024aac <_strtod_l+0xf4>
 8024ae6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ae8:	1c5a      	adds	r2, r3, #1
 8024aea:	921d      	str	r2, [sp, #116]	@ 0x74
 8024aec:	785b      	ldrb	r3, [r3, #1]
 8024aee:	2b30      	cmp	r3, #48	@ 0x30
 8024af0:	d0f9      	beq.n	8024ae6 <_strtod_l+0x12e>
 8024af2:	2b00      	cmp	r3, #0
 8024af4:	d09b      	beq.n	8024a2e <_strtod_l+0x76>
 8024af6:	2301      	movs	r3, #1
 8024af8:	930c      	str	r3, [sp, #48]	@ 0x30
 8024afa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024afc:	220a      	movs	r2, #10
 8024afe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024b00:	2300      	movs	r3, #0
 8024b02:	9310      	str	r3, [sp, #64]	@ 0x40
 8024b04:	930d      	str	r3, [sp, #52]	@ 0x34
 8024b06:	9308      	str	r3, [sp, #32]
 8024b08:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024b0a:	7804      	ldrb	r4, [r0, #0]
 8024b0c:	0023      	movs	r3, r4
 8024b0e:	3b30      	subs	r3, #48	@ 0x30
 8024b10:	b2d9      	uxtb	r1, r3
 8024b12:	2909      	cmp	r1, #9
 8024b14:	d927      	bls.n	8024b66 <_strtod_l+0x1ae>
 8024b16:	2201      	movs	r2, #1
 8024b18:	495a      	ldr	r1, [pc, #360]	@ (8024c84 <_strtod_l+0x2cc>)
 8024b1a:	f001 fce1 	bl	80264e0 <strncmp>
 8024b1e:	2800      	cmp	r0, #0
 8024b20:	d033      	beq.n	8024b8a <_strtod_l+0x1d2>
 8024b22:	2000      	movs	r0, #0
 8024b24:	0023      	movs	r3, r4
 8024b26:	4684      	mov	ip, r0
 8024b28:	9a08      	ldr	r2, [sp, #32]
 8024b2a:	900e      	str	r0, [sp, #56]	@ 0x38
 8024b2c:	9206      	str	r2, [sp, #24]
 8024b2e:	2220      	movs	r2, #32
 8024b30:	0019      	movs	r1, r3
 8024b32:	4391      	bics	r1, r2
 8024b34:	000a      	movs	r2, r1
 8024b36:	2100      	movs	r1, #0
 8024b38:	9107      	str	r1, [sp, #28]
 8024b3a:	2a45      	cmp	r2, #69	@ 0x45
 8024b3c:	d000      	beq.n	8024b40 <_strtod_l+0x188>
 8024b3e:	e0cb      	b.n	8024cd8 <_strtod_l+0x320>
 8024b40:	9b06      	ldr	r3, [sp, #24]
 8024b42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024b44:	4303      	orrs	r3, r0
 8024b46:	4313      	orrs	r3, r2
 8024b48:	428b      	cmp	r3, r1
 8024b4a:	d08c      	beq.n	8024a66 <_strtod_l+0xae>
 8024b4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b50:	3301      	adds	r3, #1
 8024b52:	931d      	str	r3, [sp, #116]	@ 0x74
 8024b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b56:	785b      	ldrb	r3, [r3, #1]
 8024b58:	2b2b      	cmp	r3, #43	@ 0x2b
 8024b5a:	d07b      	beq.n	8024c54 <_strtod_l+0x29c>
 8024b5c:	000c      	movs	r4, r1
 8024b5e:	2b2d      	cmp	r3, #45	@ 0x2d
 8024b60:	d17e      	bne.n	8024c60 <_strtod_l+0x2a8>
 8024b62:	2401      	movs	r4, #1
 8024b64:	e077      	b.n	8024c56 <_strtod_l+0x29e>
 8024b66:	9908      	ldr	r1, [sp, #32]
 8024b68:	2908      	cmp	r1, #8
 8024b6a:	dc09      	bgt.n	8024b80 <_strtod_l+0x1c8>
 8024b6c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024b6e:	4351      	muls	r1, r2
 8024b70:	185b      	adds	r3, r3, r1
 8024b72:	930d      	str	r3, [sp, #52]	@ 0x34
 8024b74:	9b08      	ldr	r3, [sp, #32]
 8024b76:	3001      	adds	r0, #1
 8024b78:	3301      	adds	r3, #1
 8024b7a:	9308      	str	r3, [sp, #32]
 8024b7c:	901d      	str	r0, [sp, #116]	@ 0x74
 8024b7e:	e7c3      	b.n	8024b08 <_strtod_l+0x150>
 8024b80:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024b82:	4355      	muls	r5, r2
 8024b84:	195b      	adds	r3, r3, r5
 8024b86:	9310      	str	r3, [sp, #64]	@ 0x40
 8024b88:	e7f4      	b.n	8024b74 <_strtod_l+0x1bc>
 8024b8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024b8c:	1c5a      	adds	r2, r3, #1
 8024b8e:	921d      	str	r2, [sp, #116]	@ 0x74
 8024b90:	9a08      	ldr	r2, [sp, #32]
 8024b92:	785b      	ldrb	r3, [r3, #1]
 8024b94:	2a00      	cmp	r2, #0
 8024b96:	d03e      	beq.n	8024c16 <_strtod_l+0x25e>
 8024b98:	900e      	str	r0, [sp, #56]	@ 0x38
 8024b9a:	9206      	str	r2, [sp, #24]
 8024b9c:	001a      	movs	r2, r3
 8024b9e:	3a30      	subs	r2, #48	@ 0x30
 8024ba0:	2a09      	cmp	r2, #9
 8024ba2:	d912      	bls.n	8024bca <_strtod_l+0x212>
 8024ba4:	2201      	movs	r2, #1
 8024ba6:	4694      	mov	ip, r2
 8024ba8:	e7c1      	b.n	8024b2e <_strtod_l+0x176>
 8024baa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024bac:	3001      	adds	r0, #1
 8024bae:	1c5a      	adds	r2, r3, #1
 8024bb0:	921d      	str	r2, [sp, #116]	@ 0x74
 8024bb2:	785b      	ldrb	r3, [r3, #1]
 8024bb4:	2b30      	cmp	r3, #48	@ 0x30
 8024bb6:	d0f8      	beq.n	8024baa <_strtod_l+0x1f2>
 8024bb8:	001a      	movs	r2, r3
 8024bba:	3a31      	subs	r2, #49	@ 0x31
 8024bbc:	2a08      	cmp	r2, #8
 8024bbe:	d844      	bhi.n	8024c4a <_strtod_l+0x292>
 8024bc0:	900e      	str	r0, [sp, #56]	@ 0x38
 8024bc2:	2000      	movs	r0, #0
 8024bc4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024bc6:	9006      	str	r0, [sp, #24]
 8024bc8:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024bca:	001c      	movs	r4, r3
 8024bcc:	1c42      	adds	r2, r0, #1
 8024bce:	3c30      	subs	r4, #48	@ 0x30
 8024bd0:	2b30      	cmp	r3, #48	@ 0x30
 8024bd2:	d01a      	beq.n	8024c0a <_strtod_l+0x252>
 8024bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024bd6:	9906      	ldr	r1, [sp, #24]
 8024bd8:	189b      	adds	r3, r3, r2
 8024bda:	930e      	str	r3, [sp, #56]	@ 0x38
 8024bdc:	230a      	movs	r3, #10
 8024bde:	469c      	mov	ip, r3
 8024be0:	9d06      	ldr	r5, [sp, #24]
 8024be2:	1c4b      	adds	r3, r1, #1
 8024be4:	1b5d      	subs	r5, r3, r5
 8024be6:	42aa      	cmp	r2, r5
 8024be8:	dc17      	bgt.n	8024c1a <_strtod_l+0x262>
 8024bea:	43c3      	mvns	r3, r0
 8024bec:	9a06      	ldr	r2, [sp, #24]
 8024bee:	17db      	asrs	r3, r3, #31
 8024bf0:	4003      	ands	r3, r0
 8024bf2:	18d1      	adds	r1, r2, r3
 8024bf4:	3201      	adds	r2, #1
 8024bf6:	18d3      	adds	r3, r2, r3
 8024bf8:	9306      	str	r3, [sp, #24]
 8024bfa:	2908      	cmp	r1, #8
 8024bfc:	dc1c      	bgt.n	8024c38 <_strtod_l+0x280>
 8024bfe:	230a      	movs	r3, #10
 8024c00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024c02:	4353      	muls	r3, r2
 8024c04:	2200      	movs	r2, #0
 8024c06:	18e3      	adds	r3, r4, r3
 8024c08:	930d      	str	r3, [sp, #52]	@ 0x34
 8024c0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c0c:	0010      	movs	r0, r2
 8024c0e:	1c59      	adds	r1, r3, #1
 8024c10:	911d      	str	r1, [sp, #116]	@ 0x74
 8024c12:	785b      	ldrb	r3, [r3, #1]
 8024c14:	e7c2      	b.n	8024b9c <_strtod_l+0x1e4>
 8024c16:	9808      	ldr	r0, [sp, #32]
 8024c18:	e7cc      	b.n	8024bb4 <_strtod_l+0x1fc>
 8024c1a:	2908      	cmp	r1, #8
 8024c1c:	dc05      	bgt.n	8024c2a <_strtod_l+0x272>
 8024c1e:	4665      	mov	r5, ip
 8024c20:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024c22:	4369      	muls	r1, r5
 8024c24:	910d      	str	r1, [sp, #52]	@ 0x34
 8024c26:	0019      	movs	r1, r3
 8024c28:	e7da      	b.n	8024be0 <_strtod_l+0x228>
 8024c2a:	2b10      	cmp	r3, #16
 8024c2c:	dcfb      	bgt.n	8024c26 <_strtod_l+0x26e>
 8024c2e:	4661      	mov	r1, ip
 8024c30:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024c32:	434d      	muls	r5, r1
 8024c34:	9510      	str	r5, [sp, #64]	@ 0x40
 8024c36:	e7f6      	b.n	8024c26 <_strtod_l+0x26e>
 8024c38:	2200      	movs	r2, #0
 8024c3a:	290f      	cmp	r1, #15
 8024c3c:	dce5      	bgt.n	8024c0a <_strtod_l+0x252>
 8024c3e:	230a      	movs	r3, #10
 8024c40:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024c42:	435d      	muls	r5, r3
 8024c44:	1963      	adds	r3, r4, r5
 8024c46:	9310      	str	r3, [sp, #64]	@ 0x40
 8024c48:	e7df      	b.n	8024c0a <_strtod_l+0x252>
 8024c4a:	2200      	movs	r2, #0
 8024c4c:	920e      	str	r2, [sp, #56]	@ 0x38
 8024c4e:	9206      	str	r2, [sp, #24]
 8024c50:	3201      	adds	r2, #1
 8024c52:	e7a8      	b.n	8024ba6 <_strtod_l+0x1ee>
 8024c54:	2400      	movs	r4, #0
 8024c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c58:	3302      	adds	r3, #2
 8024c5a:	931d      	str	r3, [sp, #116]	@ 0x74
 8024c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c5e:	789b      	ldrb	r3, [r3, #2]
 8024c60:	001a      	movs	r2, r3
 8024c62:	3a30      	subs	r2, #48	@ 0x30
 8024c64:	2a09      	cmp	r2, #9
 8024c66:	d913      	bls.n	8024c90 <_strtod_l+0x2d8>
 8024c68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024c6a:	921d      	str	r2, [sp, #116]	@ 0x74
 8024c6c:	2200      	movs	r2, #0
 8024c6e:	e032      	b.n	8024cd6 <_strtod_l+0x31e>
 8024c70:	0802eb7c 	.word	0x0802eb7c
 8024c74:	7ff00000 	.word	0x7ff00000
 8024c78:	ffefffff 	.word	0xffefffff
 8024c7c:	00000433 	.word	0x00000433
 8024c80:	7fffffff 	.word	0x7fffffff
 8024c84:	0802e994 	.word	0x0802e994
 8024c88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c8a:	1c5a      	adds	r2, r3, #1
 8024c8c:	921d      	str	r2, [sp, #116]	@ 0x74
 8024c8e:	785b      	ldrb	r3, [r3, #1]
 8024c90:	2b30      	cmp	r3, #48	@ 0x30
 8024c92:	d0f9      	beq.n	8024c88 <_strtod_l+0x2d0>
 8024c94:	2200      	movs	r2, #0
 8024c96:	9207      	str	r2, [sp, #28]
 8024c98:	001a      	movs	r2, r3
 8024c9a:	3a31      	subs	r2, #49	@ 0x31
 8024c9c:	2a08      	cmp	r2, #8
 8024c9e:	d81b      	bhi.n	8024cd8 <_strtod_l+0x320>
 8024ca0:	3b30      	subs	r3, #48	@ 0x30
 8024ca2:	001a      	movs	r2, r3
 8024ca4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ca6:	9307      	str	r3, [sp, #28]
 8024ca8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024caa:	1c59      	adds	r1, r3, #1
 8024cac:	911d      	str	r1, [sp, #116]	@ 0x74
 8024cae:	785b      	ldrb	r3, [r3, #1]
 8024cb0:	001d      	movs	r5, r3
 8024cb2:	3d30      	subs	r5, #48	@ 0x30
 8024cb4:	2d09      	cmp	r5, #9
 8024cb6:	d93a      	bls.n	8024d2e <_strtod_l+0x376>
 8024cb8:	9d07      	ldr	r5, [sp, #28]
 8024cba:	1b49      	subs	r1, r1, r5
 8024cbc:	000d      	movs	r5, r1
 8024cbe:	49b3      	ldr	r1, [pc, #716]	@ (8024f8c <_strtod_l+0x5d4>)
 8024cc0:	9107      	str	r1, [sp, #28]
 8024cc2:	2d08      	cmp	r5, #8
 8024cc4:	dc03      	bgt.n	8024cce <_strtod_l+0x316>
 8024cc6:	9207      	str	r2, [sp, #28]
 8024cc8:	428a      	cmp	r2, r1
 8024cca:	dd00      	ble.n	8024cce <_strtod_l+0x316>
 8024ccc:	9107      	str	r1, [sp, #28]
 8024cce:	2c00      	cmp	r4, #0
 8024cd0:	d002      	beq.n	8024cd8 <_strtod_l+0x320>
 8024cd2:	9a07      	ldr	r2, [sp, #28]
 8024cd4:	4252      	negs	r2, r2
 8024cd6:	9207      	str	r2, [sp, #28]
 8024cd8:	9a06      	ldr	r2, [sp, #24]
 8024cda:	2a00      	cmp	r2, #0
 8024cdc:	d14b      	bne.n	8024d76 <_strtod_l+0x3be>
 8024cde:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024ce0:	4310      	orrs	r0, r2
 8024ce2:	d000      	beq.n	8024ce6 <_strtod_l+0x32e>
 8024ce4:	e6a3      	b.n	8024a2e <_strtod_l+0x76>
 8024ce6:	4662      	mov	r2, ip
 8024ce8:	2a00      	cmp	r2, #0
 8024cea:	d000      	beq.n	8024cee <_strtod_l+0x336>
 8024cec:	e6bb      	b.n	8024a66 <_strtod_l+0xae>
 8024cee:	2b69      	cmp	r3, #105	@ 0x69
 8024cf0:	d025      	beq.n	8024d3e <_strtod_l+0x386>
 8024cf2:	dc21      	bgt.n	8024d38 <_strtod_l+0x380>
 8024cf4:	2b49      	cmp	r3, #73	@ 0x49
 8024cf6:	d022      	beq.n	8024d3e <_strtod_l+0x386>
 8024cf8:	2b4e      	cmp	r3, #78	@ 0x4e
 8024cfa:	d000      	beq.n	8024cfe <_strtod_l+0x346>
 8024cfc:	e6b3      	b.n	8024a66 <_strtod_l+0xae>
 8024cfe:	49a4      	ldr	r1, [pc, #656]	@ (8024f90 <_strtod_l+0x5d8>)
 8024d00:	a81d      	add	r0, sp, #116	@ 0x74
 8024d02:	f002 fe21 	bl	8027948 <__match>
 8024d06:	2800      	cmp	r0, #0
 8024d08:	d100      	bne.n	8024d0c <_strtod_l+0x354>
 8024d0a:	e6ac      	b.n	8024a66 <_strtod_l+0xae>
 8024d0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d0e:	781b      	ldrb	r3, [r3, #0]
 8024d10:	2b28      	cmp	r3, #40	@ 0x28
 8024d12:	d12a      	bne.n	8024d6a <_strtod_l+0x3b2>
 8024d14:	499f      	ldr	r1, [pc, #636]	@ (8024f94 <_strtod_l+0x5dc>)
 8024d16:	aa20      	add	r2, sp, #128	@ 0x80
 8024d18:	a81d      	add	r0, sp, #116	@ 0x74
 8024d1a:	f002 fe29 	bl	8027970 <__hexnan>
 8024d1e:	2805      	cmp	r0, #5
 8024d20:	d123      	bne.n	8024d6a <_strtod_l+0x3b2>
 8024d22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024d24:	4a9c      	ldr	r2, [pc, #624]	@ (8024f98 <_strtod_l+0x5e0>)
 8024d26:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024d28:	431a      	orrs	r2, r3
 8024d2a:	0017      	movs	r7, r2
 8024d2c:	e67f      	b.n	8024a2e <_strtod_l+0x76>
 8024d2e:	210a      	movs	r1, #10
 8024d30:	434a      	muls	r2, r1
 8024d32:	18d2      	adds	r2, r2, r3
 8024d34:	3a30      	subs	r2, #48	@ 0x30
 8024d36:	e7b7      	b.n	8024ca8 <_strtod_l+0x2f0>
 8024d38:	2b6e      	cmp	r3, #110	@ 0x6e
 8024d3a:	d0e0      	beq.n	8024cfe <_strtod_l+0x346>
 8024d3c:	e693      	b.n	8024a66 <_strtod_l+0xae>
 8024d3e:	4997      	ldr	r1, [pc, #604]	@ (8024f9c <_strtod_l+0x5e4>)
 8024d40:	a81d      	add	r0, sp, #116	@ 0x74
 8024d42:	f002 fe01 	bl	8027948 <__match>
 8024d46:	2800      	cmp	r0, #0
 8024d48:	d100      	bne.n	8024d4c <_strtod_l+0x394>
 8024d4a:	e68c      	b.n	8024a66 <_strtod_l+0xae>
 8024d4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d4e:	4994      	ldr	r1, [pc, #592]	@ (8024fa0 <_strtod_l+0x5e8>)
 8024d50:	3b01      	subs	r3, #1
 8024d52:	a81d      	add	r0, sp, #116	@ 0x74
 8024d54:	931d      	str	r3, [sp, #116]	@ 0x74
 8024d56:	f002 fdf7 	bl	8027948 <__match>
 8024d5a:	2800      	cmp	r0, #0
 8024d5c:	d102      	bne.n	8024d64 <_strtod_l+0x3ac>
 8024d5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d60:	3301      	adds	r3, #1
 8024d62:	931d      	str	r3, [sp, #116]	@ 0x74
 8024d64:	2600      	movs	r6, #0
 8024d66:	4f8c      	ldr	r7, [pc, #560]	@ (8024f98 <_strtod_l+0x5e0>)
 8024d68:	e661      	b.n	8024a2e <_strtod_l+0x76>
 8024d6a:	488e      	ldr	r0, [pc, #568]	@ (8024fa4 <_strtod_l+0x5ec>)
 8024d6c:	f001 fc88 	bl	8026680 <nan>
 8024d70:	0006      	movs	r6, r0
 8024d72:	000f      	movs	r7, r1
 8024d74:	e65b      	b.n	8024a2e <_strtod_l+0x76>
 8024d76:	9b07      	ldr	r3, [sp, #28]
 8024d78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024d7a:	1a9b      	subs	r3, r3, r2
 8024d7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8024d7e:	9b08      	ldr	r3, [sp, #32]
 8024d80:	2b00      	cmp	r3, #0
 8024d82:	d101      	bne.n	8024d88 <_strtod_l+0x3d0>
 8024d84:	9b06      	ldr	r3, [sp, #24]
 8024d86:	9308      	str	r3, [sp, #32]
 8024d88:	9c06      	ldr	r4, [sp, #24]
 8024d8a:	2c10      	cmp	r4, #16
 8024d8c:	dd00      	ble.n	8024d90 <_strtod_l+0x3d8>
 8024d8e:	2410      	movs	r4, #16
 8024d90:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024d92:	f7de fd5b 	bl	800384c <__aeabi_ui2d>
 8024d96:	9b06      	ldr	r3, [sp, #24]
 8024d98:	0006      	movs	r6, r0
 8024d9a:	000f      	movs	r7, r1
 8024d9c:	2b09      	cmp	r3, #9
 8024d9e:	dc13      	bgt.n	8024dc8 <_strtod_l+0x410>
 8024da0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024da2:	2b00      	cmp	r3, #0
 8024da4:	d100      	bne.n	8024da8 <_strtod_l+0x3f0>
 8024da6:	e642      	b.n	8024a2e <_strtod_l+0x76>
 8024da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024daa:	2b00      	cmp	r3, #0
 8024dac:	dc00      	bgt.n	8024db0 <_strtod_l+0x3f8>
 8024dae:	e07e      	b.n	8024eae <_strtod_l+0x4f6>
 8024db0:	2b16      	cmp	r3, #22
 8024db2:	dc63      	bgt.n	8024e7c <_strtod_l+0x4c4>
 8024db4:	497c      	ldr	r1, [pc, #496]	@ (8024fa8 <_strtod_l+0x5f0>)
 8024db6:	00db      	lsls	r3, r3, #3
 8024db8:	18c9      	adds	r1, r1, r3
 8024dba:	0032      	movs	r2, r6
 8024dbc:	6808      	ldr	r0, [r1, #0]
 8024dbe:	6849      	ldr	r1, [r1, #4]
 8024dc0:	003b      	movs	r3, r7
 8024dc2:	f7dd fdc7 	bl	8002954 <__aeabi_dmul>
 8024dc6:	e7d3      	b.n	8024d70 <_strtod_l+0x3b8>
 8024dc8:	0022      	movs	r2, r4
 8024dca:	4b77      	ldr	r3, [pc, #476]	@ (8024fa8 <_strtod_l+0x5f0>)
 8024dcc:	3a09      	subs	r2, #9
 8024dce:	00d2      	lsls	r2, r2, #3
 8024dd0:	189b      	adds	r3, r3, r2
 8024dd2:	681a      	ldr	r2, [r3, #0]
 8024dd4:	685b      	ldr	r3, [r3, #4]
 8024dd6:	f7dd fdbd 	bl	8002954 <__aeabi_dmul>
 8024dda:	0006      	movs	r6, r0
 8024ddc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024dde:	000f      	movs	r7, r1
 8024de0:	f7de fd34 	bl	800384c <__aeabi_ui2d>
 8024de4:	000b      	movs	r3, r1
 8024de6:	0002      	movs	r2, r0
 8024de8:	0039      	movs	r1, r7
 8024dea:	0030      	movs	r0, r6
 8024dec:	f7dc fdb2 	bl	8001954 <__aeabi_dadd>
 8024df0:	9b06      	ldr	r3, [sp, #24]
 8024df2:	0006      	movs	r6, r0
 8024df4:	000f      	movs	r7, r1
 8024df6:	2b0f      	cmp	r3, #15
 8024df8:	ddd2      	ble.n	8024da0 <_strtod_l+0x3e8>
 8024dfa:	9b06      	ldr	r3, [sp, #24]
 8024dfc:	1b1c      	subs	r4, r3, r4
 8024dfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e00:	18e4      	adds	r4, r4, r3
 8024e02:	2c00      	cmp	r4, #0
 8024e04:	dc00      	bgt.n	8024e08 <_strtod_l+0x450>
 8024e06:	e09b      	b.n	8024f40 <_strtod_l+0x588>
 8024e08:	220f      	movs	r2, #15
 8024e0a:	0023      	movs	r3, r4
 8024e0c:	4013      	ands	r3, r2
 8024e0e:	4214      	tst	r4, r2
 8024e10:	d00a      	beq.n	8024e28 <_strtod_l+0x470>
 8024e12:	4965      	ldr	r1, [pc, #404]	@ (8024fa8 <_strtod_l+0x5f0>)
 8024e14:	00db      	lsls	r3, r3, #3
 8024e16:	18c9      	adds	r1, r1, r3
 8024e18:	0032      	movs	r2, r6
 8024e1a:	6808      	ldr	r0, [r1, #0]
 8024e1c:	6849      	ldr	r1, [r1, #4]
 8024e1e:	003b      	movs	r3, r7
 8024e20:	f7dd fd98 	bl	8002954 <__aeabi_dmul>
 8024e24:	0006      	movs	r6, r0
 8024e26:	000f      	movs	r7, r1
 8024e28:	230f      	movs	r3, #15
 8024e2a:	439c      	bics	r4, r3
 8024e2c:	d073      	beq.n	8024f16 <_strtod_l+0x55e>
 8024e2e:	3326      	adds	r3, #38	@ 0x26
 8024e30:	33ff      	adds	r3, #255	@ 0xff
 8024e32:	429c      	cmp	r4, r3
 8024e34:	dd4b      	ble.n	8024ece <_strtod_l+0x516>
 8024e36:	2300      	movs	r3, #0
 8024e38:	9306      	str	r3, [sp, #24]
 8024e3a:	9307      	str	r3, [sp, #28]
 8024e3c:	930d      	str	r3, [sp, #52]	@ 0x34
 8024e3e:	9308      	str	r3, [sp, #32]
 8024e40:	2322      	movs	r3, #34	@ 0x22
 8024e42:	2600      	movs	r6, #0
 8024e44:	9a05      	ldr	r2, [sp, #20]
 8024e46:	4f54      	ldr	r7, [pc, #336]	@ (8024f98 <_strtod_l+0x5e0>)
 8024e48:	6013      	str	r3, [r2, #0]
 8024e4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024e4c:	42b3      	cmp	r3, r6
 8024e4e:	d100      	bne.n	8024e52 <_strtod_l+0x49a>
 8024e50:	e5ed      	b.n	8024a2e <_strtod_l+0x76>
 8024e52:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024e54:	9805      	ldr	r0, [sp, #20]
 8024e56:	f002 ff45 	bl	8027ce4 <_Bfree>
 8024e5a:	9908      	ldr	r1, [sp, #32]
 8024e5c:	9805      	ldr	r0, [sp, #20]
 8024e5e:	f002 ff41 	bl	8027ce4 <_Bfree>
 8024e62:	9907      	ldr	r1, [sp, #28]
 8024e64:	9805      	ldr	r0, [sp, #20]
 8024e66:	f002 ff3d 	bl	8027ce4 <_Bfree>
 8024e6a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024e6c:	9805      	ldr	r0, [sp, #20]
 8024e6e:	f002 ff39 	bl	8027ce4 <_Bfree>
 8024e72:	9906      	ldr	r1, [sp, #24]
 8024e74:	9805      	ldr	r0, [sp, #20]
 8024e76:	f002 ff35 	bl	8027ce4 <_Bfree>
 8024e7a:	e5d8      	b.n	8024a2e <_strtod_l+0x76>
 8024e7c:	2325      	movs	r3, #37	@ 0x25
 8024e7e:	9a06      	ldr	r2, [sp, #24]
 8024e80:	1a9b      	subs	r3, r3, r2
 8024e82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024e84:	4293      	cmp	r3, r2
 8024e86:	dbb8      	blt.n	8024dfa <_strtod_l+0x442>
 8024e88:	240f      	movs	r4, #15
 8024e8a:	9b06      	ldr	r3, [sp, #24]
 8024e8c:	4d46      	ldr	r5, [pc, #280]	@ (8024fa8 <_strtod_l+0x5f0>)
 8024e8e:	1ae4      	subs	r4, r4, r3
 8024e90:	00e1      	lsls	r1, r4, #3
 8024e92:	1869      	adds	r1, r5, r1
 8024e94:	0032      	movs	r2, r6
 8024e96:	6808      	ldr	r0, [r1, #0]
 8024e98:	6849      	ldr	r1, [r1, #4]
 8024e9a:	003b      	movs	r3, r7
 8024e9c:	f7dd fd5a 	bl	8002954 <__aeabi_dmul>
 8024ea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ea2:	1b1c      	subs	r4, r3, r4
 8024ea4:	00e4      	lsls	r4, r4, #3
 8024ea6:	192d      	adds	r5, r5, r4
 8024ea8:	682a      	ldr	r2, [r5, #0]
 8024eaa:	686b      	ldr	r3, [r5, #4]
 8024eac:	e789      	b.n	8024dc2 <_strtod_l+0x40a>
 8024eae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024eb0:	3316      	adds	r3, #22
 8024eb2:	dba2      	blt.n	8024dfa <_strtod_l+0x442>
 8024eb4:	9907      	ldr	r1, [sp, #28]
 8024eb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8024fa8 <_strtod_l+0x5f0>)
 8024eba:	1a52      	subs	r2, r2, r1
 8024ebc:	00d2      	lsls	r2, r2, #3
 8024ebe:	189b      	adds	r3, r3, r2
 8024ec0:	0030      	movs	r0, r6
 8024ec2:	681a      	ldr	r2, [r3, #0]
 8024ec4:	685b      	ldr	r3, [r3, #4]
 8024ec6:	0039      	movs	r1, r7
 8024ec8:	f7dd f90a 	bl	80020e0 <__aeabi_ddiv>
 8024ecc:	e750      	b.n	8024d70 <_strtod_l+0x3b8>
 8024ece:	2300      	movs	r3, #0
 8024ed0:	0030      	movs	r0, r6
 8024ed2:	0039      	movs	r1, r7
 8024ed4:	4d35      	ldr	r5, [pc, #212]	@ (8024fac <_strtod_l+0x5f4>)
 8024ed6:	1124      	asrs	r4, r4, #4
 8024ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8024eda:	2c01      	cmp	r4, #1
 8024edc:	dc1e      	bgt.n	8024f1c <_strtod_l+0x564>
 8024ede:	2b00      	cmp	r3, #0
 8024ee0:	d001      	beq.n	8024ee6 <_strtod_l+0x52e>
 8024ee2:	0006      	movs	r6, r0
 8024ee4:	000f      	movs	r7, r1
 8024ee6:	4b32      	ldr	r3, [pc, #200]	@ (8024fb0 <_strtod_l+0x5f8>)
 8024ee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024eea:	18ff      	adds	r7, r7, r3
 8024eec:	4b2f      	ldr	r3, [pc, #188]	@ (8024fac <_strtod_l+0x5f4>)
 8024eee:	00d5      	lsls	r5, r2, #3
 8024ef0:	195d      	adds	r5, r3, r5
 8024ef2:	0032      	movs	r2, r6
 8024ef4:	6828      	ldr	r0, [r5, #0]
 8024ef6:	6869      	ldr	r1, [r5, #4]
 8024ef8:	003b      	movs	r3, r7
 8024efa:	f7dd fd2b 	bl	8002954 <__aeabi_dmul>
 8024efe:	4b26      	ldr	r3, [pc, #152]	@ (8024f98 <_strtod_l+0x5e0>)
 8024f00:	4a2c      	ldr	r2, [pc, #176]	@ (8024fb4 <_strtod_l+0x5fc>)
 8024f02:	0006      	movs	r6, r0
 8024f04:	400b      	ands	r3, r1
 8024f06:	4293      	cmp	r3, r2
 8024f08:	d895      	bhi.n	8024e36 <_strtod_l+0x47e>
 8024f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8024fb8 <_strtod_l+0x600>)
 8024f0c:	4293      	cmp	r3, r2
 8024f0e:	d913      	bls.n	8024f38 <_strtod_l+0x580>
 8024f10:	2601      	movs	r6, #1
 8024f12:	4f2a      	ldr	r7, [pc, #168]	@ (8024fbc <_strtod_l+0x604>)
 8024f14:	4276      	negs	r6, r6
 8024f16:	2300      	movs	r3, #0
 8024f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f1a:	e086      	b.n	802502a <_strtod_l+0x672>
 8024f1c:	2201      	movs	r2, #1
 8024f1e:	4214      	tst	r4, r2
 8024f20:	d004      	beq.n	8024f2c <_strtod_l+0x574>
 8024f22:	682a      	ldr	r2, [r5, #0]
 8024f24:	686b      	ldr	r3, [r5, #4]
 8024f26:	f7dd fd15 	bl	8002954 <__aeabi_dmul>
 8024f2a:	2301      	movs	r3, #1
 8024f2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024f2e:	1064      	asrs	r4, r4, #1
 8024f30:	3201      	adds	r2, #1
 8024f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8024f34:	3508      	adds	r5, #8
 8024f36:	e7d0      	b.n	8024eda <_strtod_l+0x522>
 8024f38:	23d4      	movs	r3, #212	@ 0xd4
 8024f3a:	049b      	lsls	r3, r3, #18
 8024f3c:	18cf      	adds	r7, r1, r3
 8024f3e:	e7ea      	b.n	8024f16 <_strtod_l+0x55e>
 8024f40:	2c00      	cmp	r4, #0
 8024f42:	d0e8      	beq.n	8024f16 <_strtod_l+0x55e>
 8024f44:	4264      	negs	r4, r4
 8024f46:	230f      	movs	r3, #15
 8024f48:	0022      	movs	r2, r4
 8024f4a:	401a      	ands	r2, r3
 8024f4c:	421c      	tst	r4, r3
 8024f4e:	d00a      	beq.n	8024f66 <_strtod_l+0x5ae>
 8024f50:	4b15      	ldr	r3, [pc, #84]	@ (8024fa8 <_strtod_l+0x5f0>)
 8024f52:	00d2      	lsls	r2, r2, #3
 8024f54:	189b      	adds	r3, r3, r2
 8024f56:	0030      	movs	r0, r6
 8024f58:	681a      	ldr	r2, [r3, #0]
 8024f5a:	685b      	ldr	r3, [r3, #4]
 8024f5c:	0039      	movs	r1, r7
 8024f5e:	f7dd f8bf 	bl	80020e0 <__aeabi_ddiv>
 8024f62:	0006      	movs	r6, r0
 8024f64:	000f      	movs	r7, r1
 8024f66:	1124      	asrs	r4, r4, #4
 8024f68:	d0d5      	beq.n	8024f16 <_strtod_l+0x55e>
 8024f6a:	2c1f      	cmp	r4, #31
 8024f6c:	dd28      	ble.n	8024fc0 <_strtod_l+0x608>
 8024f6e:	2300      	movs	r3, #0
 8024f70:	9306      	str	r3, [sp, #24]
 8024f72:	9307      	str	r3, [sp, #28]
 8024f74:	930d      	str	r3, [sp, #52]	@ 0x34
 8024f76:	9308      	str	r3, [sp, #32]
 8024f78:	2322      	movs	r3, #34	@ 0x22
 8024f7a:	9a05      	ldr	r2, [sp, #20]
 8024f7c:	2600      	movs	r6, #0
 8024f7e:	6013      	str	r3, [r2, #0]
 8024f80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024f82:	2700      	movs	r7, #0
 8024f84:	2b00      	cmp	r3, #0
 8024f86:	d000      	beq.n	8024f8a <_strtod_l+0x5d2>
 8024f88:	e763      	b.n	8024e52 <_strtod_l+0x49a>
 8024f8a:	e550      	b.n	8024a2e <_strtod_l+0x76>
 8024f8c:	00004e1f 	.word	0x00004e1f
 8024f90:	0802e9a3 	.word	0x0802e9a3
 8024f94:	0802eb68 	.word	0x0802eb68
 8024f98:	7ff00000 	.word	0x7ff00000
 8024f9c:	0802e99b 	.word	0x0802e99b
 8024fa0:	0802e9d5 	.word	0x0802e9d5
 8024fa4:	0802eb64 	.word	0x0802eb64
 8024fa8:	0802ecf0 	.word	0x0802ecf0
 8024fac:	0802ecc8 	.word	0x0802ecc8
 8024fb0:	fcb00000 	.word	0xfcb00000
 8024fb4:	7ca00000 	.word	0x7ca00000
 8024fb8:	7c900000 	.word	0x7c900000
 8024fbc:	7fefffff 	.word	0x7fefffff
 8024fc0:	2310      	movs	r3, #16
 8024fc2:	0022      	movs	r2, r4
 8024fc4:	401a      	ands	r2, r3
 8024fc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8024fc8:	421c      	tst	r4, r3
 8024fca:	d001      	beq.n	8024fd0 <_strtod_l+0x618>
 8024fcc:	335a      	adds	r3, #90	@ 0x5a
 8024fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8024fd0:	0030      	movs	r0, r6
 8024fd2:	0039      	movs	r1, r7
 8024fd4:	2300      	movs	r3, #0
 8024fd6:	4dc0      	ldr	r5, [pc, #768]	@ (80252d8 <_strtod_l+0x920>)
 8024fd8:	2201      	movs	r2, #1
 8024fda:	4214      	tst	r4, r2
 8024fdc:	d004      	beq.n	8024fe8 <_strtod_l+0x630>
 8024fde:	682a      	ldr	r2, [r5, #0]
 8024fe0:	686b      	ldr	r3, [r5, #4]
 8024fe2:	f7dd fcb7 	bl	8002954 <__aeabi_dmul>
 8024fe6:	2301      	movs	r3, #1
 8024fe8:	1064      	asrs	r4, r4, #1
 8024fea:	3508      	adds	r5, #8
 8024fec:	2c00      	cmp	r4, #0
 8024fee:	d1f3      	bne.n	8024fd8 <_strtod_l+0x620>
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	d001      	beq.n	8024ff8 <_strtod_l+0x640>
 8024ff4:	0006      	movs	r6, r0
 8024ff6:	000f      	movs	r7, r1
 8024ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	d00d      	beq.n	802501a <_strtod_l+0x662>
 8024ffe:	236b      	movs	r3, #107	@ 0x6b
 8025000:	007a      	lsls	r2, r7, #1
 8025002:	0d52      	lsrs	r2, r2, #21
 8025004:	0039      	movs	r1, r7
 8025006:	1a9b      	subs	r3, r3, r2
 8025008:	2b00      	cmp	r3, #0
 802500a:	dd06      	ble.n	802501a <_strtod_l+0x662>
 802500c:	2b1f      	cmp	r3, #31
 802500e:	dd5c      	ble.n	80250ca <_strtod_l+0x712>
 8025010:	2600      	movs	r6, #0
 8025012:	2b34      	cmp	r3, #52	@ 0x34
 8025014:	dd52      	ble.n	80250bc <_strtod_l+0x704>
 8025016:	27dc      	movs	r7, #220	@ 0xdc
 8025018:	04bf      	lsls	r7, r7, #18
 802501a:	2200      	movs	r2, #0
 802501c:	2300      	movs	r3, #0
 802501e:	0030      	movs	r0, r6
 8025020:	0039      	movs	r1, r7
 8025022:	f7db fa45 	bl	80004b0 <__aeabi_dcmpeq>
 8025026:	2800      	cmp	r0, #0
 8025028:	d1a1      	bne.n	8024f6e <_strtod_l+0x5b6>
 802502a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802502c:	9a08      	ldr	r2, [sp, #32]
 802502e:	9300      	str	r3, [sp, #0]
 8025030:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025032:	9b06      	ldr	r3, [sp, #24]
 8025034:	9805      	ldr	r0, [sp, #20]
 8025036:	f002 febd 	bl	8027db4 <__s2b>
 802503a:	900d      	str	r0, [sp, #52]	@ 0x34
 802503c:	2800      	cmp	r0, #0
 802503e:	d100      	bne.n	8025042 <_strtod_l+0x68a>
 8025040:	e6f9      	b.n	8024e36 <_strtod_l+0x47e>
 8025042:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025044:	9907      	ldr	r1, [sp, #28]
 8025046:	43db      	mvns	r3, r3
 8025048:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802504a:	17db      	asrs	r3, r3, #31
 802504c:	1a52      	subs	r2, r2, r1
 802504e:	9214      	str	r2, [sp, #80]	@ 0x50
 8025050:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025052:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8025054:	17d2      	asrs	r2, r2, #31
 8025056:	4011      	ands	r1, r2
 8025058:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802505a:	9114      	str	r1, [sp, #80]	@ 0x50
 802505c:	401a      	ands	r2, r3
 802505e:	2300      	movs	r3, #0
 8025060:	921a      	str	r2, [sp, #104]	@ 0x68
 8025062:	9306      	str	r3, [sp, #24]
 8025064:	9307      	str	r3, [sp, #28]
 8025066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025068:	9805      	ldr	r0, [sp, #20]
 802506a:	6859      	ldr	r1, [r3, #4]
 802506c:	f002 fdf6 	bl	8027c5c <_Balloc>
 8025070:	9008      	str	r0, [sp, #32]
 8025072:	2800      	cmp	r0, #0
 8025074:	d100      	bne.n	8025078 <_strtod_l+0x6c0>
 8025076:	e6e3      	b.n	8024e40 <_strtod_l+0x488>
 8025078:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802507a:	300c      	adds	r0, #12
 802507c:	0019      	movs	r1, r3
 802507e:	691a      	ldr	r2, [r3, #16]
 8025080:	310c      	adds	r1, #12
 8025082:	3202      	adds	r2, #2
 8025084:	0092      	lsls	r2, r2, #2
 8025086:	f001 faf1 	bl	802666c <memcpy>
 802508a:	ab20      	add	r3, sp, #128	@ 0x80
 802508c:	9301      	str	r3, [sp, #4]
 802508e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8025090:	9300      	str	r3, [sp, #0]
 8025092:	0032      	movs	r2, r6
 8025094:	003b      	movs	r3, r7
 8025096:	9805      	ldr	r0, [sp, #20]
 8025098:	9610      	str	r6, [sp, #64]	@ 0x40
 802509a:	9711      	str	r7, [sp, #68]	@ 0x44
 802509c:	f003 f9d2 	bl	8028444 <__d2b>
 80250a0:	901e      	str	r0, [sp, #120]	@ 0x78
 80250a2:	2800      	cmp	r0, #0
 80250a4:	d100      	bne.n	80250a8 <_strtod_l+0x6f0>
 80250a6:	e6cb      	b.n	8024e40 <_strtod_l+0x488>
 80250a8:	2101      	movs	r1, #1
 80250aa:	9805      	ldr	r0, [sp, #20]
 80250ac:	f002 ff1e 	bl	8027eec <__i2b>
 80250b0:	9007      	str	r0, [sp, #28]
 80250b2:	2800      	cmp	r0, #0
 80250b4:	d10e      	bne.n	80250d4 <_strtod_l+0x71c>
 80250b6:	2300      	movs	r3, #0
 80250b8:	9307      	str	r3, [sp, #28]
 80250ba:	e6c1      	b.n	8024e40 <_strtod_l+0x488>
 80250bc:	234b      	movs	r3, #75	@ 0x4b
 80250be:	1a9a      	subs	r2, r3, r2
 80250c0:	3b4c      	subs	r3, #76	@ 0x4c
 80250c2:	4093      	lsls	r3, r2
 80250c4:	4019      	ands	r1, r3
 80250c6:	000f      	movs	r7, r1
 80250c8:	e7a7      	b.n	802501a <_strtod_l+0x662>
 80250ca:	2201      	movs	r2, #1
 80250cc:	4252      	negs	r2, r2
 80250ce:	409a      	lsls	r2, r3
 80250d0:	4016      	ands	r6, r2
 80250d2:	e7a2      	b.n	802501a <_strtod_l+0x662>
 80250d4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80250d6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80250d8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80250da:	1ad4      	subs	r4, r2, r3
 80250dc:	2b00      	cmp	r3, #0
 80250de:	db01      	blt.n	80250e4 <_strtod_l+0x72c>
 80250e0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80250e2:	195d      	adds	r5, r3, r5
 80250e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80250e6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80250e8:	1a5b      	subs	r3, r3, r1
 80250ea:	2136      	movs	r1, #54	@ 0x36
 80250ec:	189b      	adds	r3, r3, r2
 80250ee:	1a8a      	subs	r2, r1, r2
 80250f0:	497a      	ldr	r1, [pc, #488]	@ (80252dc <_strtod_l+0x924>)
 80250f2:	2001      	movs	r0, #1
 80250f4:	468c      	mov	ip, r1
 80250f6:	2100      	movs	r1, #0
 80250f8:	3b01      	subs	r3, #1
 80250fa:	9115      	str	r1, [sp, #84]	@ 0x54
 80250fc:	9016      	str	r0, [sp, #88]	@ 0x58
 80250fe:	4563      	cmp	r3, ip
 8025100:	da06      	bge.n	8025110 <_strtod_l+0x758>
 8025102:	4661      	mov	r1, ip
 8025104:	1ac9      	subs	r1, r1, r3
 8025106:	1a52      	subs	r2, r2, r1
 8025108:	291f      	cmp	r1, #31
 802510a:	dc3f      	bgt.n	802518c <_strtod_l+0x7d4>
 802510c:	4088      	lsls	r0, r1
 802510e:	9016      	str	r0, [sp, #88]	@ 0x58
 8025110:	18ab      	adds	r3, r5, r2
 8025112:	930e      	str	r3, [sp, #56]	@ 0x38
 8025114:	18a4      	adds	r4, r4, r2
 8025116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025118:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802511a:	191c      	adds	r4, r3, r4
 802511c:	002b      	movs	r3, r5
 802511e:	4295      	cmp	r5, r2
 8025120:	dd00      	ble.n	8025124 <_strtod_l+0x76c>
 8025122:	0013      	movs	r3, r2
 8025124:	42a3      	cmp	r3, r4
 8025126:	dd00      	ble.n	802512a <_strtod_l+0x772>
 8025128:	0023      	movs	r3, r4
 802512a:	2b00      	cmp	r3, #0
 802512c:	dd04      	ble.n	8025138 <_strtod_l+0x780>
 802512e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025130:	1ae4      	subs	r4, r4, r3
 8025132:	1ad2      	subs	r2, r2, r3
 8025134:	920e      	str	r2, [sp, #56]	@ 0x38
 8025136:	1aed      	subs	r5, r5, r3
 8025138:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802513a:	2b00      	cmp	r3, #0
 802513c:	dd16      	ble.n	802516c <_strtod_l+0x7b4>
 802513e:	001a      	movs	r2, r3
 8025140:	9907      	ldr	r1, [sp, #28]
 8025142:	9805      	ldr	r0, [sp, #20]
 8025144:	f002 ff94 	bl	8028070 <__pow5mult>
 8025148:	9007      	str	r0, [sp, #28]
 802514a:	2800      	cmp	r0, #0
 802514c:	d0b3      	beq.n	80250b6 <_strtod_l+0x6fe>
 802514e:	0001      	movs	r1, r0
 8025150:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8025152:	9805      	ldr	r0, [sp, #20]
 8025154:	f002 fee2 	bl	8027f1c <__multiply>
 8025158:	9013      	str	r0, [sp, #76]	@ 0x4c
 802515a:	2800      	cmp	r0, #0
 802515c:	d100      	bne.n	8025160 <_strtod_l+0x7a8>
 802515e:	e66f      	b.n	8024e40 <_strtod_l+0x488>
 8025160:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025162:	9805      	ldr	r0, [sp, #20]
 8025164:	f002 fdbe 	bl	8027ce4 <_Bfree>
 8025168:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802516a:	931e      	str	r3, [sp, #120]	@ 0x78
 802516c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802516e:	2b00      	cmp	r3, #0
 8025170:	dc12      	bgt.n	8025198 <_strtod_l+0x7e0>
 8025172:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025174:	2b00      	cmp	r3, #0
 8025176:	dd18      	ble.n	80251aa <_strtod_l+0x7f2>
 8025178:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802517a:	9908      	ldr	r1, [sp, #32]
 802517c:	9805      	ldr	r0, [sp, #20]
 802517e:	f002 ff77 	bl	8028070 <__pow5mult>
 8025182:	9008      	str	r0, [sp, #32]
 8025184:	2800      	cmp	r0, #0
 8025186:	d110      	bne.n	80251aa <_strtod_l+0x7f2>
 8025188:	2300      	movs	r3, #0
 802518a:	e658      	b.n	8024e3e <_strtod_l+0x486>
 802518c:	4954      	ldr	r1, [pc, #336]	@ (80252e0 <_strtod_l+0x928>)
 802518e:	1acb      	subs	r3, r1, r3
 8025190:	0001      	movs	r1, r0
 8025192:	4099      	lsls	r1, r3
 8025194:	9115      	str	r1, [sp, #84]	@ 0x54
 8025196:	e7ba      	b.n	802510e <_strtod_l+0x756>
 8025198:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802519a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802519c:	9805      	ldr	r0, [sp, #20]
 802519e:	f002 ffc3 	bl	8028128 <__lshift>
 80251a2:	901e      	str	r0, [sp, #120]	@ 0x78
 80251a4:	2800      	cmp	r0, #0
 80251a6:	d1e4      	bne.n	8025172 <_strtod_l+0x7ba>
 80251a8:	e64a      	b.n	8024e40 <_strtod_l+0x488>
 80251aa:	2c00      	cmp	r4, #0
 80251ac:	dd07      	ble.n	80251be <_strtod_l+0x806>
 80251ae:	0022      	movs	r2, r4
 80251b0:	9908      	ldr	r1, [sp, #32]
 80251b2:	9805      	ldr	r0, [sp, #20]
 80251b4:	f002 ffb8 	bl	8028128 <__lshift>
 80251b8:	9008      	str	r0, [sp, #32]
 80251ba:	2800      	cmp	r0, #0
 80251bc:	d0e4      	beq.n	8025188 <_strtod_l+0x7d0>
 80251be:	2d00      	cmp	r5, #0
 80251c0:	dd08      	ble.n	80251d4 <_strtod_l+0x81c>
 80251c2:	002a      	movs	r2, r5
 80251c4:	9907      	ldr	r1, [sp, #28]
 80251c6:	9805      	ldr	r0, [sp, #20]
 80251c8:	f002 ffae 	bl	8028128 <__lshift>
 80251cc:	9007      	str	r0, [sp, #28]
 80251ce:	2800      	cmp	r0, #0
 80251d0:	d100      	bne.n	80251d4 <_strtod_l+0x81c>
 80251d2:	e635      	b.n	8024e40 <_strtod_l+0x488>
 80251d4:	9a08      	ldr	r2, [sp, #32]
 80251d6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80251d8:	9805      	ldr	r0, [sp, #20]
 80251da:	f003 f82d 	bl	8028238 <__mdiff>
 80251de:	9006      	str	r0, [sp, #24]
 80251e0:	2800      	cmp	r0, #0
 80251e2:	d100      	bne.n	80251e6 <_strtod_l+0x82e>
 80251e4:	e62c      	b.n	8024e40 <_strtod_l+0x488>
 80251e6:	68c3      	ldr	r3, [r0, #12]
 80251e8:	9907      	ldr	r1, [sp, #28]
 80251ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80251ec:	2300      	movs	r3, #0
 80251ee:	60c3      	str	r3, [r0, #12]
 80251f0:	f003 f806 	bl	8028200 <__mcmp>
 80251f4:	2800      	cmp	r0, #0
 80251f6:	da3b      	bge.n	8025270 <_strtod_l+0x8b8>
 80251f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80251fa:	4333      	orrs	r3, r6
 80251fc:	d167      	bne.n	80252ce <_strtod_l+0x916>
 80251fe:	033b      	lsls	r3, r7, #12
 8025200:	d165      	bne.n	80252ce <_strtod_l+0x916>
 8025202:	22d6      	movs	r2, #214	@ 0xd6
 8025204:	4b37      	ldr	r3, [pc, #220]	@ (80252e4 <_strtod_l+0x92c>)
 8025206:	04d2      	lsls	r2, r2, #19
 8025208:	403b      	ands	r3, r7
 802520a:	4293      	cmp	r3, r2
 802520c:	d95f      	bls.n	80252ce <_strtod_l+0x916>
 802520e:	9b06      	ldr	r3, [sp, #24]
 8025210:	695b      	ldr	r3, [r3, #20]
 8025212:	2b00      	cmp	r3, #0
 8025214:	d103      	bne.n	802521e <_strtod_l+0x866>
 8025216:	9b06      	ldr	r3, [sp, #24]
 8025218:	691b      	ldr	r3, [r3, #16]
 802521a:	2b01      	cmp	r3, #1
 802521c:	dd57      	ble.n	80252ce <_strtod_l+0x916>
 802521e:	9906      	ldr	r1, [sp, #24]
 8025220:	2201      	movs	r2, #1
 8025222:	9805      	ldr	r0, [sp, #20]
 8025224:	f002 ff80 	bl	8028128 <__lshift>
 8025228:	9907      	ldr	r1, [sp, #28]
 802522a:	9006      	str	r0, [sp, #24]
 802522c:	f002 ffe8 	bl	8028200 <__mcmp>
 8025230:	2800      	cmp	r0, #0
 8025232:	dd4c      	ble.n	80252ce <_strtod_l+0x916>
 8025234:	4b2b      	ldr	r3, [pc, #172]	@ (80252e4 <_strtod_l+0x92c>)
 8025236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025238:	403b      	ands	r3, r7
 802523a:	2a00      	cmp	r2, #0
 802523c:	d074      	beq.n	8025328 <_strtod_l+0x970>
 802523e:	22d6      	movs	r2, #214	@ 0xd6
 8025240:	04d2      	lsls	r2, r2, #19
 8025242:	4293      	cmp	r3, r2
 8025244:	d870      	bhi.n	8025328 <_strtod_l+0x970>
 8025246:	22dc      	movs	r2, #220	@ 0xdc
 8025248:	0492      	lsls	r2, r2, #18
 802524a:	4293      	cmp	r3, r2
 802524c:	d800      	bhi.n	8025250 <_strtod_l+0x898>
 802524e:	e693      	b.n	8024f78 <_strtod_l+0x5c0>
 8025250:	0030      	movs	r0, r6
 8025252:	0039      	movs	r1, r7
 8025254:	4b24      	ldr	r3, [pc, #144]	@ (80252e8 <_strtod_l+0x930>)
 8025256:	2200      	movs	r2, #0
 8025258:	f7dd fb7c 	bl	8002954 <__aeabi_dmul>
 802525c:	4b21      	ldr	r3, [pc, #132]	@ (80252e4 <_strtod_l+0x92c>)
 802525e:	0006      	movs	r6, r0
 8025260:	000f      	movs	r7, r1
 8025262:	420b      	tst	r3, r1
 8025264:	d000      	beq.n	8025268 <_strtod_l+0x8b0>
 8025266:	e5f4      	b.n	8024e52 <_strtod_l+0x49a>
 8025268:	2322      	movs	r3, #34	@ 0x22
 802526a:	9a05      	ldr	r2, [sp, #20]
 802526c:	6013      	str	r3, [r2, #0]
 802526e:	e5f0      	b.n	8024e52 <_strtod_l+0x49a>
 8025270:	970e      	str	r7, [sp, #56]	@ 0x38
 8025272:	2800      	cmp	r0, #0
 8025274:	d175      	bne.n	8025362 <_strtod_l+0x9aa>
 8025276:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025278:	033b      	lsls	r3, r7, #12
 802527a:	0b1b      	lsrs	r3, r3, #12
 802527c:	2a00      	cmp	r2, #0
 802527e:	d039      	beq.n	80252f4 <_strtod_l+0x93c>
 8025280:	4a1a      	ldr	r2, [pc, #104]	@ (80252ec <_strtod_l+0x934>)
 8025282:	4293      	cmp	r3, r2
 8025284:	d138      	bne.n	80252f8 <_strtod_l+0x940>
 8025286:	2101      	movs	r1, #1
 8025288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802528a:	4249      	negs	r1, r1
 802528c:	0032      	movs	r2, r6
 802528e:	0008      	movs	r0, r1
 8025290:	2b00      	cmp	r3, #0
 8025292:	d00b      	beq.n	80252ac <_strtod_l+0x8f4>
 8025294:	24d4      	movs	r4, #212	@ 0xd4
 8025296:	4b13      	ldr	r3, [pc, #76]	@ (80252e4 <_strtod_l+0x92c>)
 8025298:	0008      	movs	r0, r1
 802529a:	403b      	ands	r3, r7
 802529c:	04e4      	lsls	r4, r4, #19
 802529e:	42a3      	cmp	r3, r4
 80252a0:	d804      	bhi.n	80252ac <_strtod_l+0x8f4>
 80252a2:	306c      	adds	r0, #108	@ 0x6c
 80252a4:	0d1b      	lsrs	r3, r3, #20
 80252a6:	1ac3      	subs	r3, r0, r3
 80252a8:	4099      	lsls	r1, r3
 80252aa:	0008      	movs	r0, r1
 80252ac:	4282      	cmp	r2, r0
 80252ae:	d123      	bne.n	80252f8 <_strtod_l+0x940>
 80252b0:	4b0f      	ldr	r3, [pc, #60]	@ (80252f0 <_strtod_l+0x938>)
 80252b2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80252b4:	4299      	cmp	r1, r3
 80252b6:	d102      	bne.n	80252be <_strtod_l+0x906>
 80252b8:	3201      	adds	r2, #1
 80252ba:	d100      	bne.n	80252be <_strtod_l+0x906>
 80252bc:	e5c0      	b.n	8024e40 <_strtod_l+0x488>
 80252be:	4b09      	ldr	r3, [pc, #36]	@ (80252e4 <_strtod_l+0x92c>)
 80252c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80252c2:	2600      	movs	r6, #0
 80252c4:	401a      	ands	r2, r3
 80252c6:	0013      	movs	r3, r2
 80252c8:	2280      	movs	r2, #128	@ 0x80
 80252ca:	0352      	lsls	r2, r2, #13
 80252cc:	189f      	adds	r7, r3, r2
 80252ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252d0:	2b00      	cmp	r3, #0
 80252d2:	d1bd      	bne.n	8025250 <_strtod_l+0x898>
 80252d4:	e5bd      	b.n	8024e52 <_strtod_l+0x49a>
 80252d6:	46c0      	nop			@ (mov r8, r8)
 80252d8:	0802eb90 	.word	0x0802eb90
 80252dc:	fffffc02 	.word	0xfffffc02
 80252e0:	fffffbe2 	.word	0xfffffbe2
 80252e4:	7ff00000 	.word	0x7ff00000
 80252e8:	39500000 	.word	0x39500000
 80252ec:	000fffff 	.word	0x000fffff
 80252f0:	7fefffff 	.word	0x7fefffff
 80252f4:	4333      	orrs	r3, r6
 80252f6:	d09d      	beq.n	8025234 <_strtod_l+0x87c>
 80252f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80252fa:	2b00      	cmp	r3, #0
 80252fc:	d01c      	beq.n	8025338 <_strtod_l+0x980>
 80252fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025300:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025302:	4213      	tst	r3, r2
 8025304:	d0e3      	beq.n	80252ce <_strtod_l+0x916>
 8025306:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025308:	0030      	movs	r0, r6
 802530a:	0039      	movs	r1, r7
 802530c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802530e:	2b00      	cmp	r3, #0
 8025310:	d016      	beq.n	8025340 <_strtod_l+0x988>
 8025312:	f7ff fb39 	bl	8024988 <sulp>
 8025316:	0002      	movs	r2, r0
 8025318:	000b      	movs	r3, r1
 802531a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802531c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802531e:	f7dc fb19 	bl	8001954 <__aeabi_dadd>
 8025322:	0006      	movs	r6, r0
 8025324:	000f      	movs	r7, r1
 8025326:	e7d2      	b.n	80252ce <_strtod_l+0x916>
 8025328:	2601      	movs	r6, #1
 802532a:	4a92      	ldr	r2, [pc, #584]	@ (8025574 <_strtod_l+0xbbc>)
 802532c:	4276      	negs	r6, r6
 802532e:	189b      	adds	r3, r3, r2
 8025330:	4a91      	ldr	r2, [pc, #580]	@ (8025578 <_strtod_l+0xbc0>)
 8025332:	431a      	orrs	r2, r3
 8025334:	0017      	movs	r7, r2
 8025336:	e7ca      	b.n	80252ce <_strtod_l+0x916>
 8025338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802533a:	4233      	tst	r3, r6
 802533c:	d0c7      	beq.n	80252ce <_strtod_l+0x916>
 802533e:	e7e2      	b.n	8025306 <_strtod_l+0x94e>
 8025340:	f7ff fb22 	bl	8024988 <sulp>
 8025344:	0002      	movs	r2, r0
 8025346:	000b      	movs	r3, r1
 8025348:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802534a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802534c:	f7dd fde8 	bl	8002f20 <__aeabi_dsub>
 8025350:	2200      	movs	r2, #0
 8025352:	2300      	movs	r3, #0
 8025354:	0006      	movs	r6, r0
 8025356:	000f      	movs	r7, r1
 8025358:	f7db f8aa 	bl	80004b0 <__aeabi_dcmpeq>
 802535c:	2800      	cmp	r0, #0
 802535e:	d0b6      	beq.n	80252ce <_strtod_l+0x916>
 8025360:	e60a      	b.n	8024f78 <_strtod_l+0x5c0>
 8025362:	9907      	ldr	r1, [sp, #28]
 8025364:	9806      	ldr	r0, [sp, #24]
 8025366:	f003 f8cd 	bl	8028504 <__ratio>
 802536a:	2380      	movs	r3, #128	@ 0x80
 802536c:	2200      	movs	r2, #0
 802536e:	05db      	lsls	r3, r3, #23
 8025370:	0004      	movs	r4, r0
 8025372:	000d      	movs	r5, r1
 8025374:	f7db f8ac 	bl	80004d0 <__aeabi_dcmple>
 8025378:	2800      	cmp	r0, #0
 802537a:	d06c      	beq.n	8025456 <_strtod_l+0xa9e>
 802537c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802537e:	2b00      	cmp	r3, #0
 8025380:	d177      	bne.n	8025472 <_strtod_l+0xaba>
 8025382:	2e00      	cmp	r6, #0
 8025384:	d157      	bne.n	8025436 <_strtod_l+0xa7e>
 8025386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025388:	031b      	lsls	r3, r3, #12
 802538a:	d15a      	bne.n	8025442 <_strtod_l+0xa8a>
 802538c:	2200      	movs	r2, #0
 802538e:	0020      	movs	r0, r4
 8025390:	0029      	movs	r1, r5
 8025392:	4b7a      	ldr	r3, [pc, #488]	@ (802557c <_strtod_l+0xbc4>)
 8025394:	f7db f892 	bl	80004bc <__aeabi_dcmplt>
 8025398:	2800      	cmp	r0, #0
 802539a:	d159      	bne.n	8025450 <_strtod_l+0xa98>
 802539c:	0020      	movs	r0, r4
 802539e:	0029      	movs	r1, r5
 80253a0:	2200      	movs	r2, #0
 80253a2:	4b77      	ldr	r3, [pc, #476]	@ (8025580 <_strtod_l+0xbc8>)
 80253a4:	f7dd fad6 	bl	8002954 <__aeabi_dmul>
 80253a8:	0004      	movs	r4, r0
 80253aa:	000d      	movs	r5, r1
 80253ac:	2380      	movs	r3, #128	@ 0x80
 80253ae:	061b      	lsls	r3, r3, #24
 80253b0:	18eb      	adds	r3, r5, r3
 80253b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80253b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80253b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80253b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80253ba:	9216      	str	r2, [sp, #88]	@ 0x58
 80253bc:	9317      	str	r3, [sp, #92]	@ 0x5c
 80253be:	4a71      	ldr	r2, [pc, #452]	@ (8025584 <_strtod_l+0xbcc>)
 80253c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80253c2:	4013      	ands	r3, r2
 80253c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80253c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80253c8:	4b6f      	ldr	r3, [pc, #444]	@ (8025588 <_strtod_l+0xbd0>)
 80253ca:	429a      	cmp	r2, r3
 80253cc:	d000      	beq.n	80253d0 <_strtod_l+0xa18>
 80253ce:	e087      	b.n	80254e0 <_strtod_l+0xb28>
 80253d0:	4a6e      	ldr	r2, [pc, #440]	@ (802558c <_strtod_l+0xbd4>)
 80253d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80253d4:	4694      	mov	ip, r2
 80253d6:	4463      	add	r3, ip
 80253d8:	001f      	movs	r7, r3
 80253da:	0030      	movs	r0, r6
 80253dc:	0019      	movs	r1, r3
 80253de:	f002 ffc5 	bl	802836c <__ulp>
 80253e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80253e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80253e6:	f7dd fab5 	bl	8002954 <__aeabi_dmul>
 80253ea:	0032      	movs	r2, r6
 80253ec:	003b      	movs	r3, r7
 80253ee:	f7dc fab1 	bl	8001954 <__aeabi_dadd>
 80253f2:	4a64      	ldr	r2, [pc, #400]	@ (8025584 <_strtod_l+0xbcc>)
 80253f4:	4b66      	ldr	r3, [pc, #408]	@ (8025590 <_strtod_l+0xbd8>)
 80253f6:	0006      	movs	r6, r0
 80253f8:	400a      	ands	r2, r1
 80253fa:	429a      	cmp	r2, r3
 80253fc:	d940      	bls.n	8025480 <_strtod_l+0xac8>
 80253fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025400:	4a64      	ldr	r2, [pc, #400]	@ (8025594 <_strtod_l+0xbdc>)
 8025402:	4293      	cmp	r3, r2
 8025404:	d103      	bne.n	802540e <_strtod_l+0xa56>
 8025406:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025408:	3301      	adds	r3, #1
 802540a:	d100      	bne.n	802540e <_strtod_l+0xa56>
 802540c:	e518      	b.n	8024e40 <_strtod_l+0x488>
 802540e:	2601      	movs	r6, #1
 8025410:	4f60      	ldr	r7, [pc, #384]	@ (8025594 <_strtod_l+0xbdc>)
 8025412:	4276      	negs	r6, r6
 8025414:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025416:	9805      	ldr	r0, [sp, #20]
 8025418:	f002 fc64 	bl	8027ce4 <_Bfree>
 802541c:	9908      	ldr	r1, [sp, #32]
 802541e:	9805      	ldr	r0, [sp, #20]
 8025420:	f002 fc60 	bl	8027ce4 <_Bfree>
 8025424:	9907      	ldr	r1, [sp, #28]
 8025426:	9805      	ldr	r0, [sp, #20]
 8025428:	f002 fc5c 	bl	8027ce4 <_Bfree>
 802542c:	9906      	ldr	r1, [sp, #24]
 802542e:	9805      	ldr	r0, [sp, #20]
 8025430:	f002 fc58 	bl	8027ce4 <_Bfree>
 8025434:	e617      	b.n	8025066 <_strtod_l+0x6ae>
 8025436:	2e01      	cmp	r6, #1
 8025438:	d103      	bne.n	8025442 <_strtod_l+0xa8a>
 802543a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802543c:	2b00      	cmp	r3, #0
 802543e:	d100      	bne.n	8025442 <_strtod_l+0xa8a>
 8025440:	e59a      	b.n	8024f78 <_strtod_l+0x5c0>
 8025442:	2300      	movs	r3, #0
 8025444:	4c54      	ldr	r4, [pc, #336]	@ (8025598 <_strtod_l+0xbe0>)
 8025446:	4d4d      	ldr	r5, [pc, #308]	@ (802557c <_strtod_l+0xbc4>)
 8025448:	930a      	str	r3, [sp, #40]	@ 0x28
 802544a:	940b      	str	r4, [sp, #44]	@ 0x2c
 802544c:	2400      	movs	r4, #0
 802544e:	e7b2      	b.n	80253b6 <_strtod_l+0x9fe>
 8025450:	2400      	movs	r4, #0
 8025452:	4d4b      	ldr	r5, [pc, #300]	@ (8025580 <_strtod_l+0xbc8>)
 8025454:	e7aa      	b.n	80253ac <_strtod_l+0x9f4>
 8025456:	0020      	movs	r0, r4
 8025458:	0029      	movs	r1, r5
 802545a:	4b49      	ldr	r3, [pc, #292]	@ (8025580 <_strtod_l+0xbc8>)
 802545c:	2200      	movs	r2, #0
 802545e:	f7dd fa79 	bl	8002954 <__aeabi_dmul>
 8025462:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025464:	0004      	movs	r4, r0
 8025466:	000d      	movs	r5, r1
 8025468:	2b00      	cmp	r3, #0
 802546a:	d09f      	beq.n	80253ac <_strtod_l+0x9f4>
 802546c:	940a      	str	r4, [sp, #40]	@ 0x28
 802546e:	950b      	str	r5, [sp, #44]	@ 0x2c
 8025470:	e7a1      	b.n	80253b6 <_strtod_l+0x9fe>
 8025472:	2300      	movs	r3, #0
 8025474:	4c41      	ldr	r4, [pc, #260]	@ (802557c <_strtod_l+0xbc4>)
 8025476:	0025      	movs	r5, r4
 8025478:	930a      	str	r3, [sp, #40]	@ 0x28
 802547a:	940b      	str	r4, [sp, #44]	@ 0x2c
 802547c:	001c      	movs	r4, r3
 802547e:	e79a      	b.n	80253b6 <_strtod_l+0x9fe>
 8025480:	23d4      	movs	r3, #212	@ 0xd4
 8025482:	049b      	lsls	r3, r3, #18
 8025484:	18cf      	adds	r7, r1, r3
 8025486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025488:	9710      	str	r7, [sp, #64]	@ 0x40
 802548a:	2b00      	cmp	r3, #0
 802548c:	d1c2      	bne.n	8025414 <_strtod_l+0xa5c>
 802548e:	4b3d      	ldr	r3, [pc, #244]	@ (8025584 <_strtod_l+0xbcc>)
 8025490:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025492:	403b      	ands	r3, r7
 8025494:	429a      	cmp	r2, r3
 8025496:	d1bd      	bne.n	8025414 <_strtod_l+0xa5c>
 8025498:	0020      	movs	r0, r4
 802549a:	0029      	movs	r1, r5
 802549c:	f7db f8f4 	bl	8000688 <__aeabi_d2lz>
 80254a0:	f7db f92c 	bl	80006fc <__aeabi_l2d>
 80254a4:	0002      	movs	r2, r0
 80254a6:	000b      	movs	r3, r1
 80254a8:	0020      	movs	r0, r4
 80254aa:	0029      	movs	r1, r5
 80254ac:	f7dd fd38 	bl	8002f20 <__aeabi_dsub>
 80254b0:	033c      	lsls	r4, r7, #12
 80254b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254b4:	0b24      	lsrs	r4, r4, #12
 80254b6:	4334      	orrs	r4, r6
 80254b8:	900e      	str	r0, [sp, #56]	@ 0x38
 80254ba:	910f      	str	r1, [sp, #60]	@ 0x3c
 80254bc:	4a37      	ldr	r2, [pc, #220]	@ (802559c <_strtod_l+0xbe4>)
 80254be:	431c      	orrs	r4, r3
 80254c0:	d052      	beq.n	8025568 <_strtod_l+0xbb0>
 80254c2:	4b37      	ldr	r3, [pc, #220]	@ (80255a0 <_strtod_l+0xbe8>)
 80254c4:	f7da fffa 	bl	80004bc <__aeabi_dcmplt>
 80254c8:	2800      	cmp	r0, #0
 80254ca:	d000      	beq.n	80254ce <_strtod_l+0xb16>
 80254cc:	e4c1      	b.n	8024e52 <_strtod_l+0x49a>
 80254ce:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80254d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80254d2:	4a34      	ldr	r2, [pc, #208]	@ (80255a4 <_strtod_l+0xbec>)
 80254d4:	4b2a      	ldr	r3, [pc, #168]	@ (8025580 <_strtod_l+0xbc8>)
 80254d6:	f7db f805 	bl	80004e4 <__aeabi_dcmpgt>
 80254da:	2800      	cmp	r0, #0
 80254dc:	d09a      	beq.n	8025414 <_strtod_l+0xa5c>
 80254de:	e4b8      	b.n	8024e52 <_strtod_l+0x49a>
 80254e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254e2:	2b00      	cmp	r3, #0
 80254e4:	d02a      	beq.n	802553c <_strtod_l+0xb84>
 80254e6:	23d4      	movs	r3, #212	@ 0xd4
 80254e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80254ea:	04db      	lsls	r3, r3, #19
 80254ec:	429a      	cmp	r2, r3
 80254ee:	d825      	bhi.n	802553c <_strtod_l+0xb84>
 80254f0:	0020      	movs	r0, r4
 80254f2:	0029      	movs	r1, r5
 80254f4:	4a2c      	ldr	r2, [pc, #176]	@ (80255a8 <_strtod_l+0xbf0>)
 80254f6:	4b2d      	ldr	r3, [pc, #180]	@ (80255ac <_strtod_l+0xbf4>)
 80254f8:	f7da ffea 	bl	80004d0 <__aeabi_dcmple>
 80254fc:	2800      	cmp	r0, #0
 80254fe:	d016      	beq.n	802552e <_strtod_l+0xb76>
 8025500:	0020      	movs	r0, r4
 8025502:	0029      	movs	r1, r5
 8025504:	f7db f8a2 	bl	800064c <__aeabi_d2uiz>
 8025508:	2800      	cmp	r0, #0
 802550a:	d100      	bne.n	802550e <_strtod_l+0xb56>
 802550c:	3001      	adds	r0, #1
 802550e:	f7de f99d 	bl	800384c <__aeabi_ui2d>
 8025512:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025514:	0004      	movs	r4, r0
 8025516:	000d      	movs	r5, r1
 8025518:	2b00      	cmp	r3, #0
 802551a:	d122      	bne.n	8025562 <_strtod_l+0xbaa>
 802551c:	2380      	movs	r3, #128	@ 0x80
 802551e:	061b      	lsls	r3, r3, #24
 8025520:	18cb      	adds	r3, r1, r3
 8025522:	9018      	str	r0, [sp, #96]	@ 0x60
 8025524:	9319      	str	r3, [sp, #100]	@ 0x64
 8025526:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025528:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802552a:	9216      	str	r2, [sp, #88]	@ 0x58
 802552c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802552e:	22d6      	movs	r2, #214	@ 0xd6
 8025530:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025532:	04d2      	lsls	r2, r2, #19
 8025534:	189b      	adds	r3, r3, r2
 8025536:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025538:	1a9b      	subs	r3, r3, r2
 802553a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802553c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802553e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025540:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8025542:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8025544:	f002 ff12 	bl	802836c <__ulp>
 8025548:	0002      	movs	r2, r0
 802554a:	000b      	movs	r3, r1
 802554c:	0030      	movs	r0, r6
 802554e:	0039      	movs	r1, r7
 8025550:	f7dd fa00 	bl	8002954 <__aeabi_dmul>
 8025554:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025556:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025558:	f7dc f9fc 	bl	8001954 <__aeabi_dadd>
 802555c:	0006      	movs	r6, r0
 802555e:	000f      	movs	r7, r1
 8025560:	e791      	b.n	8025486 <_strtod_l+0xace>
 8025562:	9418      	str	r4, [sp, #96]	@ 0x60
 8025564:	9519      	str	r5, [sp, #100]	@ 0x64
 8025566:	e7de      	b.n	8025526 <_strtod_l+0xb6e>
 8025568:	4b11      	ldr	r3, [pc, #68]	@ (80255b0 <_strtod_l+0xbf8>)
 802556a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802556c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802556e:	f7da ffa5 	bl	80004bc <__aeabi_dcmplt>
 8025572:	e7b2      	b.n	80254da <_strtod_l+0xb22>
 8025574:	fff00000 	.word	0xfff00000
 8025578:	000fffff 	.word	0x000fffff
 802557c:	3ff00000 	.word	0x3ff00000
 8025580:	3fe00000 	.word	0x3fe00000
 8025584:	7ff00000 	.word	0x7ff00000
 8025588:	7fe00000 	.word	0x7fe00000
 802558c:	fcb00000 	.word	0xfcb00000
 8025590:	7c9fffff 	.word	0x7c9fffff
 8025594:	7fefffff 	.word	0x7fefffff
 8025598:	bff00000 	.word	0xbff00000
 802559c:	94a03595 	.word	0x94a03595
 80255a0:	3fdfffff 	.word	0x3fdfffff
 80255a4:	35afe535 	.word	0x35afe535
 80255a8:	ffc00000 	.word	0xffc00000
 80255ac:	41dfffff 	.word	0x41dfffff
 80255b0:	3fcfffff 	.word	0x3fcfffff

080255b4 <strtod>:
 80255b4:	b510      	push	{r4, lr}
 80255b6:	4c04      	ldr	r4, [pc, #16]	@ (80255c8 <strtod+0x14>)
 80255b8:	000a      	movs	r2, r1
 80255ba:	0001      	movs	r1, r0
 80255bc:	4b03      	ldr	r3, [pc, #12]	@ (80255cc <strtod+0x18>)
 80255be:	6820      	ldr	r0, [r4, #0]
 80255c0:	f7ff f9fa 	bl	80249b8 <_strtod_l>
 80255c4:	bd10      	pop	{r4, pc}
 80255c6:	46c0      	nop			@ (mov r8, r8)
 80255c8:	200003ec 	.word	0x200003ec
 80255cc:	20000280 	.word	0x20000280

080255d0 <_strtol_l.isra.0>:
 80255d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80255d2:	b085      	sub	sp, #20
 80255d4:	0017      	movs	r7, r2
 80255d6:	001e      	movs	r6, r3
 80255d8:	9003      	str	r0, [sp, #12]
 80255da:	9101      	str	r1, [sp, #4]
 80255dc:	2b24      	cmp	r3, #36	@ 0x24
 80255de:	d823      	bhi.n	8025628 <_strtol_l.isra.0+0x58>
 80255e0:	000c      	movs	r4, r1
 80255e2:	2b01      	cmp	r3, #1
 80255e4:	d020      	beq.n	8025628 <_strtol_l.isra.0+0x58>
 80255e6:	4b3d      	ldr	r3, [pc, #244]	@ (80256dc <_strtol_l.isra.0+0x10c>)
 80255e8:	2208      	movs	r2, #8
 80255ea:	469c      	mov	ip, r3
 80255ec:	0023      	movs	r3, r4
 80255ee:	4661      	mov	r1, ip
 80255f0:	781d      	ldrb	r5, [r3, #0]
 80255f2:	3401      	adds	r4, #1
 80255f4:	5d48      	ldrb	r0, [r1, r5]
 80255f6:	0001      	movs	r1, r0
 80255f8:	4011      	ands	r1, r2
 80255fa:	4210      	tst	r0, r2
 80255fc:	d1f6      	bne.n	80255ec <_strtol_l.isra.0+0x1c>
 80255fe:	2d2d      	cmp	r5, #45	@ 0x2d
 8025600:	d119      	bne.n	8025636 <_strtol_l.isra.0+0x66>
 8025602:	7825      	ldrb	r5, [r4, #0]
 8025604:	1c9c      	adds	r4, r3, #2
 8025606:	2301      	movs	r3, #1
 8025608:	9300      	str	r3, [sp, #0]
 802560a:	2210      	movs	r2, #16
 802560c:	0033      	movs	r3, r6
 802560e:	4393      	bics	r3, r2
 8025610:	d11d      	bne.n	802564e <_strtol_l.isra.0+0x7e>
 8025612:	2d30      	cmp	r5, #48	@ 0x30
 8025614:	d115      	bne.n	8025642 <_strtol_l.isra.0+0x72>
 8025616:	2120      	movs	r1, #32
 8025618:	7823      	ldrb	r3, [r4, #0]
 802561a:	438b      	bics	r3, r1
 802561c:	2b58      	cmp	r3, #88	@ 0x58
 802561e:	d110      	bne.n	8025642 <_strtol_l.isra.0+0x72>
 8025620:	7865      	ldrb	r5, [r4, #1]
 8025622:	3402      	adds	r4, #2
 8025624:	2610      	movs	r6, #16
 8025626:	e012      	b.n	802564e <_strtol_l.isra.0+0x7e>
 8025628:	f000 ffe8 	bl	80265fc <__errno>
 802562c:	2316      	movs	r3, #22
 802562e:	6003      	str	r3, [r0, #0]
 8025630:	2000      	movs	r0, #0
 8025632:	b005      	add	sp, #20
 8025634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025636:	9100      	str	r1, [sp, #0]
 8025638:	2d2b      	cmp	r5, #43	@ 0x2b
 802563a:	d1e6      	bne.n	802560a <_strtol_l.isra.0+0x3a>
 802563c:	7825      	ldrb	r5, [r4, #0]
 802563e:	1c9c      	adds	r4, r3, #2
 8025640:	e7e3      	b.n	802560a <_strtol_l.isra.0+0x3a>
 8025642:	2e00      	cmp	r6, #0
 8025644:	d1ee      	bne.n	8025624 <_strtol_l.isra.0+0x54>
 8025646:	360a      	adds	r6, #10
 8025648:	2d30      	cmp	r5, #48	@ 0x30
 802564a:	d100      	bne.n	802564e <_strtol_l.isra.0+0x7e>
 802564c:	3e02      	subs	r6, #2
 802564e:	4a24      	ldr	r2, [pc, #144]	@ (80256e0 <_strtol_l.isra.0+0x110>)
 8025650:	9b00      	ldr	r3, [sp, #0]
 8025652:	4694      	mov	ip, r2
 8025654:	4463      	add	r3, ip
 8025656:	0031      	movs	r1, r6
 8025658:	0018      	movs	r0, r3
 802565a:	9302      	str	r3, [sp, #8]
 802565c:	f7da fe28 	bl	80002b0 <__aeabi_uidivmod>
 8025660:	2200      	movs	r2, #0
 8025662:	4684      	mov	ip, r0
 8025664:	0010      	movs	r0, r2
 8025666:	002b      	movs	r3, r5
 8025668:	3b30      	subs	r3, #48	@ 0x30
 802566a:	2b09      	cmp	r3, #9
 802566c:	d811      	bhi.n	8025692 <_strtol_l.isra.0+0xc2>
 802566e:	001d      	movs	r5, r3
 8025670:	42ae      	cmp	r6, r5
 8025672:	dd1d      	ble.n	80256b0 <_strtol_l.isra.0+0xe0>
 8025674:	1c53      	adds	r3, r2, #1
 8025676:	d009      	beq.n	802568c <_strtol_l.isra.0+0xbc>
 8025678:	2201      	movs	r2, #1
 802567a:	4252      	negs	r2, r2
 802567c:	4584      	cmp	ip, r0
 802567e:	d305      	bcc.n	802568c <_strtol_l.isra.0+0xbc>
 8025680:	d101      	bne.n	8025686 <_strtol_l.isra.0+0xb6>
 8025682:	42a9      	cmp	r1, r5
 8025684:	db11      	blt.n	80256aa <_strtol_l.isra.0+0xda>
 8025686:	2201      	movs	r2, #1
 8025688:	4370      	muls	r0, r6
 802568a:	1828      	adds	r0, r5, r0
 802568c:	7825      	ldrb	r5, [r4, #0]
 802568e:	3401      	adds	r4, #1
 8025690:	e7e9      	b.n	8025666 <_strtol_l.isra.0+0x96>
 8025692:	002b      	movs	r3, r5
 8025694:	3b41      	subs	r3, #65	@ 0x41
 8025696:	2b19      	cmp	r3, #25
 8025698:	d801      	bhi.n	802569e <_strtol_l.isra.0+0xce>
 802569a:	3d37      	subs	r5, #55	@ 0x37
 802569c:	e7e8      	b.n	8025670 <_strtol_l.isra.0+0xa0>
 802569e:	002b      	movs	r3, r5
 80256a0:	3b61      	subs	r3, #97	@ 0x61
 80256a2:	2b19      	cmp	r3, #25
 80256a4:	d804      	bhi.n	80256b0 <_strtol_l.isra.0+0xe0>
 80256a6:	3d57      	subs	r5, #87	@ 0x57
 80256a8:	e7e2      	b.n	8025670 <_strtol_l.isra.0+0xa0>
 80256aa:	2201      	movs	r2, #1
 80256ac:	4252      	negs	r2, r2
 80256ae:	e7ed      	b.n	802568c <_strtol_l.isra.0+0xbc>
 80256b0:	1c53      	adds	r3, r2, #1
 80256b2:	d108      	bne.n	80256c6 <_strtol_l.isra.0+0xf6>
 80256b4:	2322      	movs	r3, #34	@ 0x22
 80256b6:	9a03      	ldr	r2, [sp, #12]
 80256b8:	9802      	ldr	r0, [sp, #8]
 80256ba:	6013      	str	r3, [r2, #0]
 80256bc:	2f00      	cmp	r7, #0
 80256be:	d0b8      	beq.n	8025632 <_strtol_l.isra.0+0x62>
 80256c0:	1e63      	subs	r3, r4, #1
 80256c2:	9301      	str	r3, [sp, #4]
 80256c4:	e007      	b.n	80256d6 <_strtol_l.isra.0+0x106>
 80256c6:	9b00      	ldr	r3, [sp, #0]
 80256c8:	2b00      	cmp	r3, #0
 80256ca:	d000      	beq.n	80256ce <_strtol_l.isra.0+0xfe>
 80256cc:	4240      	negs	r0, r0
 80256ce:	2f00      	cmp	r7, #0
 80256d0:	d0af      	beq.n	8025632 <_strtol_l.isra.0+0x62>
 80256d2:	2a00      	cmp	r2, #0
 80256d4:	d1f4      	bne.n	80256c0 <_strtol_l.isra.0+0xf0>
 80256d6:	9b01      	ldr	r3, [sp, #4]
 80256d8:	603b      	str	r3, [r7, #0]
 80256da:	e7aa      	b.n	8025632 <_strtol_l.isra.0+0x62>
 80256dc:	0802ebb9 	.word	0x0802ebb9
 80256e0:	7fffffff 	.word	0x7fffffff

080256e4 <strtol>:
 80256e4:	b510      	push	{r4, lr}
 80256e6:	4c04      	ldr	r4, [pc, #16]	@ (80256f8 <strtol+0x14>)
 80256e8:	0013      	movs	r3, r2
 80256ea:	000a      	movs	r2, r1
 80256ec:	0001      	movs	r1, r0
 80256ee:	6820      	ldr	r0, [r4, #0]
 80256f0:	f7ff ff6e 	bl	80255d0 <_strtol_l.isra.0>
 80256f4:	bd10      	pop	{r4, pc}
 80256f6:	46c0      	nop			@ (mov r8, r8)
 80256f8:	200003ec 	.word	0x200003ec

080256fc <__cvt>:
 80256fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80256fe:	001f      	movs	r7, r3
 8025700:	2300      	movs	r3, #0
 8025702:	0016      	movs	r6, r2
 8025704:	b08b      	sub	sp, #44	@ 0x2c
 8025706:	429f      	cmp	r7, r3
 8025708:	da04      	bge.n	8025714 <__cvt+0x18>
 802570a:	2180      	movs	r1, #128	@ 0x80
 802570c:	0609      	lsls	r1, r1, #24
 802570e:	187b      	adds	r3, r7, r1
 8025710:	001f      	movs	r7, r3
 8025712:	232d      	movs	r3, #45	@ 0x2d
 8025714:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025716:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025718:	7013      	strb	r3, [r2, #0]
 802571a:	2320      	movs	r3, #32
 802571c:	2203      	movs	r2, #3
 802571e:	439d      	bics	r5, r3
 8025720:	2d46      	cmp	r5, #70	@ 0x46
 8025722:	d007      	beq.n	8025734 <__cvt+0x38>
 8025724:	002b      	movs	r3, r5
 8025726:	3b45      	subs	r3, #69	@ 0x45
 8025728:	4259      	negs	r1, r3
 802572a:	414b      	adcs	r3, r1
 802572c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802572e:	3a01      	subs	r2, #1
 8025730:	18cb      	adds	r3, r1, r3
 8025732:	9310      	str	r3, [sp, #64]	@ 0x40
 8025734:	ab09      	add	r3, sp, #36	@ 0x24
 8025736:	9304      	str	r3, [sp, #16]
 8025738:	ab08      	add	r3, sp, #32
 802573a:	9303      	str	r3, [sp, #12]
 802573c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802573e:	9200      	str	r2, [sp, #0]
 8025740:	9302      	str	r3, [sp, #8]
 8025742:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025744:	0032      	movs	r2, r6
 8025746:	9301      	str	r3, [sp, #4]
 8025748:	003b      	movs	r3, r7
 802574a:	f001 f825 	bl	8026798 <_dtoa_r>
 802574e:	0004      	movs	r4, r0
 8025750:	2d47      	cmp	r5, #71	@ 0x47
 8025752:	d11b      	bne.n	802578c <__cvt+0x90>
 8025754:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025756:	07db      	lsls	r3, r3, #31
 8025758:	d511      	bpl.n	802577e <__cvt+0x82>
 802575a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802575c:	18c3      	adds	r3, r0, r3
 802575e:	9307      	str	r3, [sp, #28]
 8025760:	2200      	movs	r2, #0
 8025762:	2300      	movs	r3, #0
 8025764:	0030      	movs	r0, r6
 8025766:	0039      	movs	r1, r7
 8025768:	f7da fea2 	bl	80004b0 <__aeabi_dcmpeq>
 802576c:	2800      	cmp	r0, #0
 802576e:	d001      	beq.n	8025774 <__cvt+0x78>
 8025770:	9b07      	ldr	r3, [sp, #28]
 8025772:	9309      	str	r3, [sp, #36]	@ 0x24
 8025774:	2230      	movs	r2, #48	@ 0x30
 8025776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025778:	9907      	ldr	r1, [sp, #28]
 802577a:	428b      	cmp	r3, r1
 802577c:	d320      	bcc.n	80257c0 <__cvt+0xc4>
 802577e:	0020      	movs	r0, r4
 8025780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025782:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025784:	1b1b      	subs	r3, r3, r4
 8025786:	6013      	str	r3, [r2, #0]
 8025788:	b00b      	add	sp, #44	@ 0x2c
 802578a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802578c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802578e:	18c3      	adds	r3, r0, r3
 8025790:	9307      	str	r3, [sp, #28]
 8025792:	2d46      	cmp	r5, #70	@ 0x46
 8025794:	d1e4      	bne.n	8025760 <__cvt+0x64>
 8025796:	7803      	ldrb	r3, [r0, #0]
 8025798:	2b30      	cmp	r3, #48	@ 0x30
 802579a:	d10c      	bne.n	80257b6 <__cvt+0xba>
 802579c:	2200      	movs	r2, #0
 802579e:	2300      	movs	r3, #0
 80257a0:	0030      	movs	r0, r6
 80257a2:	0039      	movs	r1, r7
 80257a4:	f7da fe84 	bl	80004b0 <__aeabi_dcmpeq>
 80257a8:	2800      	cmp	r0, #0
 80257aa:	d104      	bne.n	80257b6 <__cvt+0xba>
 80257ac:	2301      	movs	r3, #1
 80257ae:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80257b0:	1a9b      	subs	r3, r3, r2
 80257b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80257b4:	6013      	str	r3, [r2, #0]
 80257b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80257b8:	9a07      	ldr	r2, [sp, #28]
 80257ba:	681b      	ldr	r3, [r3, #0]
 80257bc:	18d3      	adds	r3, r2, r3
 80257be:	e7ce      	b.n	802575e <__cvt+0x62>
 80257c0:	1c59      	adds	r1, r3, #1
 80257c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80257c4:	701a      	strb	r2, [r3, #0]
 80257c6:	e7d6      	b.n	8025776 <__cvt+0x7a>

080257c8 <__exponent>:
 80257c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80257ca:	232b      	movs	r3, #43	@ 0x2b
 80257cc:	b085      	sub	sp, #20
 80257ce:	0005      	movs	r5, r0
 80257d0:	1e0c      	subs	r4, r1, #0
 80257d2:	7002      	strb	r2, [r0, #0]
 80257d4:	da01      	bge.n	80257da <__exponent+0x12>
 80257d6:	424c      	negs	r4, r1
 80257d8:	3302      	adds	r3, #2
 80257da:	706b      	strb	r3, [r5, #1]
 80257dc:	2c09      	cmp	r4, #9
 80257de:	dd2c      	ble.n	802583a <__exponent+0x72>
 80257e0:	ab02      	add	r3, sp, #8
 80257e2:	1dde      	adds	r6, r3, #7
 80257e4:	0020      	movs	r0, r4
 80257e6:	210a      	movs	r1, #10
 80257e8:	f7da fe4c 	bl	8000484 <__aeabi_idivmod>
 80257ec:	0037      	movs	r7, r6
 80257ee:	3130      	adds	r1, #48	@ 0x30
 80257f0:	3e01      	subs	r6, #1
 80257f2:	0020      	movs	r0, r4
 80257f4:	7031      	strb	r1, [r6, #0]
 80257f6:	210a      	movs	r1, #10
 80257f8:	9401      	str	r4, [sp, #4]
 80257fa:	f7da fd5d 	bl	80002b8 <__divsi3>
 80257fe:	9b01      	ldr	r3, [sp, #4]
 8025800:	0004      	movs	r4, r0
 8025802:	2b63      	cmp	r3, #99	@ 0x63
 8025804:	dcee      	bgt.n	80257e4 <__exponent+0x1c>
 8025806:	1eba      	subs	r2, r7, #2
 8025808:	1ca8      	adds	r0, r5, #2
 802580a:	0001      	movs	r1, r0
 802580c:	0013      	movs	r3, r2
 802580e:	3430      	adds	r4, #48	@ 0x30
 8025810:	7014      	strb	r4, [r2, #0]
 8025812:	ac02      	add	r4, sp, #8
 8025814:	3407      	adds	r4, #7
 8025816:	429c      	cmp	r4, r3
 8025818:	d80a      	bhi.n	8025830 <__exponent+0x68>
 802581a:	2300      	movs	r3, #0
 802581c:	4294      	cmp	r4, r2
 802581e:	d303      	bcc.n	8025828 <__exponent+0x60>
 8025820:	3309      	adds	r3, #9
 8025822:	aa02      	add	r2, sp, #8
 8025824:	189b      	adds	r3, r3, r2
 8025826:	1bdb      	subs	r3, r3, r7
 8025828:	18c0      	adds	r0, r0, r3
 802582a:	1b40      	subs	r0, r0, r5
 802582c:	b005      	add	sp, #20
 802582e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025830:	781c      	ldrb	r4, [r3, #0]
 8025832:	3301      	adds	r3, #1
 8025834:	700c      	strb	r4, [r1, #0]
 8025836:	3101      	adds	r1, #1
 8025838:	e7eb      	b.n	8025812 <__exponent+0x4a>
 802583a:	2330      	movs	r3, #48	@ 0x30
 802583c:	18e4      	adds	r4, r4, r3
 802583e:	70ab      	strb	r3, [r5, #2]
 8025840:	1d28      	adds	r0, r5, #4
 8025842:	70ec      	strb	r4, [r5, #3]
 8025844:	e7f1      	b.n	802582a <__exponent+0x62>
	...

08025848 <_printf_float>:
 8025848:	b5f0      	push	{r4, r5, r6, r7, lr}
 802584a:	b097      	sub	sp, #92	@ 0x5c
 802584c:	000d      	movs	r5, r1
 802584e:	920a      	str	r2, [sp, #40]	@ 0x28
 8025850:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025852:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025854:	9009      	str	r0, [sp, #36]	@ 0x24
 8025856:	f000 fe7f 	bl	8026558 <_localeconv_r>
 802585a:	6803      	ldr	r3, [r0, #0]
 802585c:	0018      	movs	r0, r3
 802585e:	930d      	str	r3, [sp, #52]	@ 0x34
 8025860:	f7da fc84 	bl	800016c <strlen>
 8025864:	2300      	movs	r3, #0
 8025866:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025868:	9314      	str	r3, [sp, #80]	@ 0x50
 802586a:	7e2b      	ldrb	r3, [r5, #24]
 802586c:	2207      	movs	r2, #7
 802586e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025870:	682b      	ldr	r3, [r5, #0]
 8025872:	930e      	str	r3, [sp, #56]	@ 0x38
 8025874:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025876:	6823      	ldr	r3, [r4, #0]
 8025878:	05c9      	lsls	r1, r1, #23
 802587a:	d545      	bpl.n	8025908 <_printf_float+0xc0>
 802587c:	189b      	adds	r3, r3, r2
 802587e:	4393      	bics	r3, r2
 8025880:	001a      	movs	r2, r3
 8025882:	3208      	adds	r2, #8
 8025884:	6022      	str	r2, [r4, #0]
 8025886:	2201      	movs	r2, #1
 8025888:	681e      	ldr	r6, [r3, #0]
 802588a:	685f      	ldr	r7, [r3, #4]
 802588c:	007b      	lsls	r3, r7, #1
 802588e:	085b      	lsrs	r3, r3, #1
 8025890:	9311      	str	r3, [sp, #68]	@ 0x44
 8025892:	9610      	str	r6, [sp, #64]	@ 0x40
 8025894:	64ae      	str	r6, [r5, #72]	@ 0x48
 8025896:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8025898:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802589a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802589c:	4ba7      	ldr	r3, [pc, #668]	@ (8025b3c <_printf_float+0x2f4>)
 802589e:	4252      	negs	r2, r2
 80258a0:	f7dd ff48 	bl	8003734 <__aeabi_dcmpun>
 80258a4:	2800      	cmp	r0, #0
 80258a6:	d131      	bne.n	802590c <_printf_float+0xc4>
 80258a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80258aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80258ac:	2201      	movs	r2, #1
 80258ae:	4ba3      	ldr	r3, [pc, #652]	@ (8025b3c <_printf_float+0x2f4>)
 80258b0:	4252      	negs	r2, r2
 80258b2:	f7da fe0d 	bl	80004d0 <__aeabi_dcmple>
 80258b6:	2800      	cmp	r0, #0
 80258b8:	d128      	bne.n	802590c <_printf_float+0xc4>
 80258ba:	2200      	movs	r2, #0
 80258bc:	2300      	movs	r3, #0
 80258be:	0030      	movs	r0, r6
 80258c0:	0039      	movs	r1, r7
 80258c2:	f7da fdfb 	bl	80004bc <__aeabi_dcmplt>
 80258c6:	2800      	cmp	r0, #0
 80258c8:	d003      	beq.n	80258d2 <_printf_float+0x8a>
 80258ca:	002b      	movs	r3, r5
 80258cc:	222d      	movs	r2, #45	@ 0x2d
 80258ce:	3343      	adds	r3, #67	@ 0x43
 80258d0:	701a      	strb	r2, [r3, #0]
 80258d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80258d4:	4f9a      	ldr	r7, [pc, #616]	@ (8025b40 <_printf_float+0x2f8>)
 80258d6:	2b47      	cmp	r3, #71	@ 0x47
 80258d8:	d800      	bhi.n	80258dc <_printf_float+0x94>
 80258da:	4f9a      	ldr	r7, [pc, #616]	@ (8025b44 <_printf_float+0x2fc>)
 80258dc:	2303      	movs	r3, #3
 80258de:	2400      	movs	r4, #0
 80258e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80258e2:	612b      	str	r3, [r5, #16]
 80258e4:	3301      	adds	r3, #1
 80258e6:	439a      	bics	r2, r3
 80258e8:	602a      	str	r2, [r5, #0]
 80258ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80258ec:	0029      	movs	r1, r5
 80258ee:	9300      	str	r3, [sp, #0]
 80258f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80258f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80258f4:	aa15      	add	r2, sp, #84	@ 0x54
 80258f6:	f000 f9e5 	bl	8025cc4 <_printf_common>
 80258fa:	3001      	adds	r0, #1
 80258fc:	d000      	beq.n	8025900 <_printf_float+0xb8>
 80258fe:	e09e      	b.n	8025a3e <_printf_float+0x1f6>
 8025900:	2001      	movs	r0, #1
 8025902:	4240      	negs	r0, r0
 8025904:	b017      	add	sp, #92	@ 0x5c
 8025906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025908:	3307      	adds	r3, #7
 802590a:	e7b8      	b.n	802587e <_printf_float+0x36>
 802590c:	0032      	movs	r2, r6
 802590e:	003b      	movs	r3, r7
 8025910:	0030      	movs	r0, r6
 8025912:	0039      	movs	r1, r7
 8025914:	f7dd ff0e 	bl	8003734 <__aeabi_dcmpun>
 8025918:	2800      	cmp	r0, #0
 802591a:	d00b      	beq.n	8025934 <_printf_float+0xec>
 802591c:	2f00      	cmp	r7, #0
 802591e:	da03      	bge.n	8025928 <_printf_float+0xe0>
 8025920:	002b      	movs	r3, r5
 8025922:	222d      	movs	r2, #45	@ 0x2d
 8025924:	3343      	adds	r3, #67	@ 0x43
 8025926:	701a      	strb	r2, [r3, #0]
 8025928:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802592a:	4f87      	ldr	r7, [pc, #540]	@ (8025b48 <_printf_float+0x300>)
 802592c:	2b47      	cmp	r3, #71	@ 0x47
 802592e:	d8d5      	bhi.n	80258dc <_printf_float+0x94>
 8025930:	4f86      	ldr	r7, [pc, #536]	@ (8025b4c <_printf_float+0x304>)
 8025932:	e7d3      	b.n	80258dc <_printf_float+0x94>
 8025934:	2220      	movs	r2, #32
 8025936:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025938:	686b      	ldr	r3, [r5, #4]
 802593a:	4394      	bics	r4, r2
 802593c:	1c5a      	adds	r2, r3, #1
 802593e:	d146      	bne.n	80259ce <_printf_float+0x186>
 8025940:	3307      	adds	r3, #7
 8025942:	606b      	str	r3, [r5, #4]
 8025944:	2380      	movs	r3, #128	@ 0x80
 8025946:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025948:	00db      	lsls	r3, r3, #3
 802594a:	4313      	orrs	r3, r2
 802594c:	2200      	movs	r2, #0
 802594e:	602b      	str	r3, [r5, #0]
 8025950:	9206      	str	r2, [sp, #24]
 8025952:	aa14      	add	r2, sp, #80	@ 0x50
 8025954:	9205      	str	r2, [sp, #20]
 8025956:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025958:	a90a      	add	r1, sp, #40	@ 0x28
 802595a:	9204      	str	r2, [sp, #16]
 802595c:	aa13      	add	r2, sp, #76	@ 0x4c
 802595e:	9203      	str	r2, [sp, #12]
 8025960:	2223      	movs	r2, #35	@ 0x23
 8025962:	1852      	adds	r2, r2, r1
 8025964:	9202      	str	r2, [sp, #8]
 8025966:	9301      	str	r3, [sp, #4]
 8025968:	686b      	ldr	r3, [r5, #4]
 802596a:	0032      	movs	r2, r6
 802596c:	9300      	str	r3, [sp, #0]
 802596e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025970:	003b      	movs	r3, r7
 8025972:	f7ff fec3 	bl	80256fc <__cvt>
 8025976:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025978:	0007      	movs	r7, r0
 802597a:	2c47      	cmp	r4, #71	@ 0x47
 802597c:	d12d      	bne.n	80259da <_printf_float+0x192>
 802597e:	1cd3      	adds	r3, r2, #3
 8025980:	db02      	blt.n	8025988 <_printf_float+0x140>
 8025982:	686b      	ldr	r3, [r5, #4]
 8025984:	429a      	cmp	r2, r3
 8025986:	dd47      	ble.n	8025a18 <_printf_float+0x1d0>
 8025988:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802598a:	3b02      	subs	r3, #2
 802598c:	b2db      	uxtb	r3, r3
 802598e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025990:	0028      	movs	r0, r5
 8025992:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025994:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025996:	3901      	subs	r1, #1
 8025998:	3050      	adds	r0, #80	@ 0x50
 802599a:	9113      	str	r1, [sp, #76]	@ 0x4c
 802599c:	f7ff ff14 	bl	80257c8 <__exponent>
 80259a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80259a2:	0004      	movs	r4, r0
 80259a4:	1813      	adds	r3, r2, r0
 80259a6:	612b      	str	r3, [r5, #16]
 80259a8:	2a01      	cmp	r2, #1
 80259aa:	dc02      	bgt.n	80259b2 <_printf_float+0x16a>
 80259ac:	682a      	ldr	r2, [r5, #0]
 80259ae:	07d2      	lsls	r2, r2, #31
 80259b0:	d501      	bpl.n	80259b6 <_printf_float+0x16e>
 80259b2:	3301      	adds	r3, #1
 80259b4:	612b      	str	r3, [r5, #16]
 80259b6:	2323      	movs	r3, #35	@ 0x23
 80259b8:	aa0a      	add	r2, sp, #40	@ 0x28
 80259ba:	189b      	adds	r3, r3, r2
 80259bc:	781b      	ldrb	r3, [r3, #0]
 80259be:	2b00      	cmp	r3, #0
 80259c0:	d100      	bne.n	80259c4 <_printf_float+0x17c>
 80259c2:	e792      	b.n	80258ea <_printf_float+0xa2>
 80259c4:	002b      	movs	r3, r5
 80259c6:	222d      	movs	r2, #45	@ 0x2d
 80259c8:	3343      	adds	r3, #67	@ 0x43
 80259ca:	701a      	strb	r2, [r3, #0]
 80259cc:	e78d      	b.n	80258ea <_printf_float+0xa2>
 80259ce:	2c47      	cmp	r4, #71	@ 0x47
 80259d0:	d1b8      	bne.n	8025944 <_printf_float+0xfc>
 80259d2:	2b00      	cmp	r3, #0
 80259d4:	d1b6      	bne.n	8025944 <_printf_float+0xfc>
 80259d6:	3301      	adds	r3, #1
 80259d8:	e7b3      	b.n	8025942 <_printf_float+0xfa>
 80259da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80259dc:	2b65      	cmp	r3, #101	@ 0x65
 80259de:	d9d7      	bls.n	8025990 <_printf_float+0x148>
 80259e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80259e2:	2b66      	cmp	r3, #102	@ 0x66
 80259e4:	d11a      	bne.n	8025a1c <_printf_float+0x1d4>
 80259e6:	686b      	ldr	r3, [r5, #4]
 80259e8:	2a00      	cmp	r2, #0
 80259ea:	dd09      	ble.n	8025a00 <_printf_float+0x1b8>
 80259ec:	612a      	str	r2, [r5, #16]
 80259ee:	2b00      	cmp	r3, #0
 80259f0:	d102      	bne.n	80259f8 <_printf_float+0x1b0>
 80259f2:	6829      	ldr	r1, [r5, #0]
 80259f4:	07c9      	lsls	r1, r1, #31
 80259f6:	d50b      	bpl.n	8025a10 <_printf_float+0x1c8>
 80259f8:	3301      	adds	r3, #1
 80259fa:	189b      	adds	r3, r3, r2
 80259fc:	612b      	str	r3, [r5, #16]
 80259fe:	e007      	b.n	8025a10 <_printf_float+0x1c8>
 8025a00:	2b00      	cmp	r3, #0
 8025a02:	d103      	bne.n	8025a0c <_printf_float+0x1c4>
 8025a04:	2201      	movs	r2, #1
 8025a06:	6829      	ldr	r1, [r5, #0]
 8025a08:	4211      	tst	r1, r2
 8025a0a:	d000      	beq.n	8025a0e <_printf_float+0x1c6>
 8025a0c:	1c9a      	adds	r2, r3, #2
 8025a0e:	612a      	str	r2, [r5, #16]
 8025a10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a12:	2400      	movs	r4, #0
 8025a14:	65ab      	str	r3, [r5, #88]	@ 0x58
 8025a16:	e7ce      	b.n	80259b6 <_printf_float+0x16e>
 8025a18:	2367      	movs	r3, #103	@ 0x67
 8025a1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8025a1c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025a1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025a20:	4299      	cmp	r1, r3
 8025a22:	db06      	blt.n	8025a32 <_printf_float+0x1ea>
 8025a24:	682b      	ldr	r3, [r5, #0]
 8025a26:	6129      	str	r1, [r5, #16]
 8025a28:	07db      	lsls	r3, r3, #31
 8025a2a:	d5f1      	bpl.n	8025a10 <_printf_float+0x1c8>
 8025a2c:	3101      	adds	r1, #1
 8025a2e:	6129      	str	r1, [r5, #16]
 8025a30:	e7ee      	b.n	8025a10 <_printf_float+0x1c8>
 8025a32:	2201      	movs	r2, #1
 8025a34:	2900      	cmp	r1, #0
 8025a36:	dce0      	bgt.n	80259fa <_printf_float+0x1b2>
 8025a38:	1892      	adds	r2, r2, r2
 8025a3a:	1a52      	subs	r2, r2, r1
 8025a3c:	e7dd      	b.n	80259fa <_printf_float+0x1b2>
 8025a3e:	682a      	ldr	r2, [r5, #0]
 8025a40:	0553      	lsls	r3, r2, #21
 8025a42:	d408      	bmi.n	8025a56 <_printf_float+0x20e>
 8025a44:	692b      	ldr	r3, [r5, #16]
 8025a46:	003a      	movs	r2, r7
 8025a48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025a4c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a4e:	47a0      	blx	r4
 8025a50:	3001      	adds	r0, #1
 8025a52:	d129      	bne.n	8025aa8 <_printf_float+0x260>
 8025a54:	e754      	b.n	8025900 <_printf_float+0xb8>
 8025a56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025a58:	2b65      	cmp	r3, #101	@ 0x65
 8025a5a:	d800      	bhi.n	8025a5e <_printf_float+0x216>
 8025a5c:	e0db      	b.n	8025c16 <_printf_float+0x3ce>
 8025a5e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025a60:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025a62:	2200      	movs	r2, #0
 8025a64:	2300      	movs	r3, #0
 8025a66:	f7da fd23 	bl	80004b0 <__aeabi_dcmpeq>
 8025a6a:	2800      	cmp	r0, #0
 8025a6c:	d033      	beq.n	8025ad6 <_printf_float+0x28e>
 8025a6e:	2301      	movs	r3, #1
 8025a70:	4a37      	ldr	r2, [pc, #220]	@ (8025b50 <_printf_float+0x308>)
 8025a72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025a74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025a76:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a78:	47a0      	blx	r4
 8025a7a:	3001      	adds	r0, #1
 8025a7c:	d100      	bne.n	8025a80 <_printf_float+0x238>
 8025a7e:	e73f      	b.n	8025900 <_printf_float+0xb8>
 8025a80:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025a82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a84:	42b3      	cmp	r3, r6
 8025a86:	db02      	blt.n	8025a8e <_printf_float+0x246>
 8025a88:	682b      	ldr	r3, [r5, #0]
 8025a8a:	07db      	lsls	r3, r3, #31
 8025a8c:	d50c      	bpl.n	8025aa8 <_printf_float+0x260>
 8025a8e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025a92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025a94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025a98:	47a0      	blx	r4
 8025a9a:	2400      	movs	r4, #0
 8025a9c:	3001      	adds	r0, #1
 8025a9e:	d100      	bne.n	8025aa2 <_printf_float+0x25a>
 8025aa0:	e72e      	b.n	8025900 <_printf_float+0xb8>
 8025aa2:	1e73      	subs	r3, r6, #1
 8025aa4:	42a3      	cmp	r3, r4
 8025aa6:	dc0a      	bgt.n	8025abe <_printf_float+0x276>
 8025aa8:	682b      	ldr	r3, [r5, #0]
 8025aaa:	079b      	lsls	r3, r3, #30
 8025aac:	d500      	bpl.n	8025ab0 <_printf_float+0x268>
 8025aae:	e106      	b.n	8025cbe <_printf_float+0x476>
 8025ab0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025ab2:	68e8      	ldr	r0, [r5, #12]
 8025ab4:	4298      	cmp	r0, r3
 8025ab6:	db00      	blt.n	8025aba <_printf_float+0x272>
 8025ab8:	e724      	b.n	8025904 <_printf_float+0xbc>
 8025aba:	0018      	movs	r0, r3
 8025abc:	e722      	b.n	8025904 <_printf_float+0xbc>
 8025abe:	002a      	movs	r2, r5
 8025ac0:	2301      	movs	r3, #1
 8025ac2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ac4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ac6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025ac8:	321a      	adds	r2, #26
 8025aca:	47b8      	blx	r7
 8025acc:	3001      	adds	r0, #1
 8025ace:	d100      	bne.n	8025ad2 <_printf_float+0x28a>
 8025ad0:	e716      	b.n	8025900 <_printf_float+0xb8>
 8025ad2:	3401      	adds	r4, #1
 8025ad4:	e7e5      	b.n	8025aa2 <_printf_float+0x25a>
 8025ad6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025ad8:	2b00      	cmp	r3, #0
 8025ada:	dc3b      	bgt.n	8025b54 <_printf_float+0x30c>
 8025adc:	2301      	movs	r3, #1
 8025ade:	4a1c      	ldr	r2, [pc, #112]	@ (8025b50 <_printf_float+0x308>)
 8025ae0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ae4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025ae6:	47a0      	blx	r4
 8025ae8:	3001      	adds	r0, #1
 8025aea:	d100      	bne.n	8025aee <_printf_float+0x2a6>
 8025aec:	e708      	b.n	8025900 <_printf_float+0xb8>
 8025aee:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025af0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025af2:	4333      	orrs	r3, r6
 8025af4:	d102      	bne.n	8025afc <_printf_float+0x2b4>
 8025af6:	682b      	ldr	r3, [r5, #0]
 8025af8:	07db      	lsls	r3, r3, #31
 8025afa:	d5d5      	bpl.n	8025aa8 <_printf_float+0x260>
 8025afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025afe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025b00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b04:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b06:	47a0      	blx	r4
 8025b08:	2300      	movs	r3, #0
 8025b0a:	3001      	adds	r0, #1
 8025b0c:	d100      	bne.n	8025b10 <_printf_float+0x2c8>
 8025b0e:	e6f7      	b.n	8025900 <_printf_float+0xb8>
 8025b10:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b14:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b16:	425b      	negs	r3, r3
 8025b18:	4293      	cmp	r3, r2
 8025b1a:	dc01      	bgt.n	8025b20 <_printf_float+0x2d8>
 8025b1c:	0033      	movs	r3, r6
 8025b1e:	e792      	b.n	8025a46 <_printf_float+0x1fe>
 8025b20:	002a      	movs	r2, r5
 8025b22:	2301      	movs	r3, #1
 8025b24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b28:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b2a:	321a      	adds	r2, #26
 8025b2c:	47a0      	blx	r4
 8025b2e:	3001      	adds	r0, #1
 8025b30:	d100      	bne.n	8025b34 <_printf_float+0x2ec>
 8025b32:	e6e5      	b.n	8025900 <_printf_float+0xb8>
 8025b34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b36:	3301      	adds	r3, #1
 8025b38:	e7ea      	b.n	8025b10 <_printf_float+0x2c8>
 8025b3a:	46c0      	nop			@ (mov r8, r8)
 8025b3c:	7fefffff 	.word	0x7fefffff
 8025b40:	0802e99a 	.word	0x0802e99a
 8025b44:	0802e996 	.word	0x0802e996
 8025b48:	0802e9a2 	.word	0x0802e9a2
 8025b4c:	0802e99e 	.word	0x0802e99e
 8025b50:	0802e9a6 	.word	0x0802e9a6
 8025b54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025b56:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025b58:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b5a:	429e      	cmp	r6, r3
 8025b5c:	dd00      	ble.n	8025b60 <_printf_float+0x318>
 8025b5e:	001e      	movs	r6, r3
 8025b60:	2e00      	cmp	r6, #0
 8025b62:	dc31      	bgt.n	8025bc8 <_printf_float+0x380>
 8025b64:	43f3      	mvns	r3, r6
 8025b66:	2400      	movs	r4, #0
 8025b68:	17db      	asrs	r3, r3, #31
 8025b6a:	4033      	ands	r3, r6
 8025b6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8025b6e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025b70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025b72:	1af3      	subs	r3, r6, r3
 8025b74:	42a3      	cmp	r3, r4
 8025b76:	dc30      	bgt.n	8025bda <_printf_float+0x392>
 8025b78:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b7c:	429a      	cmp	r2, r3
 8025b7e:	dc38      	bgt.n	8025bf2 <_printf_float+0x3aa>
 8025b80:	682b      	ldr	r3, [r5, #0]
 8025b82:	07db      	lsls	r3, r3, #31
 8025b84:	d435      	bmi.n	8025bf2 <_printf_float+0x3aa>
 8025b86:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b8c:	1b9b      	subs	r3, r3, r6
 8025b8e:	1b14      	subs	r4, r2, r4
 8025b90:	429c      	cmp	r4, r3
 8025b92:	dd00      	ble.n	8025b96 <_printf_float+0x34e>
 8025b94:	001c      	movs	r4, r3
 8025b96:	2c00      	cmp	r4, #0
 8025b98:	dc34      	bgt.n	8025c04 <_printf_float+0x3bc>
 8025b9a:	43e3      	mvns	r3, r4
 8025b9c:	2600      	movs	r6, #0
 8025b9e:	17db      	asrs	r3, r3, #31
 8025ba0:	401c      	ands	r4, r3
 8025ba2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025ba4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025ba6:	1ad3      	subs	r3, r2, r3
 8025ba8:	1b1b      	subs	r3, r3, r4
 8025baa:	42b3      	cmp	r3, r6
 8025bac:	dc00      	bgt.n	8025bb0 <_printf_float+0x368>
 8025bae:	e77b      	b.n	8025aa8 <_printf_float+0x260>
 8025bb0:	002a      	movs	r2, r5
 8025bb2:	2301      	movs	r3, #1
 8025bb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025bb8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025bba:	321a      	adds	r2, #26
 8025bbc:	47b8      	blx	r7
 8025bbe:	3001      	adds	r0, #1
 8025bc0:	d100      	bne.n	8025bc4 <_printf_float+0x37c>
 8025bc2:	e69d      	b.n	8025900 <_printf_float+0xb8>
 8025bc4:	3601      	adds	r6, #1
 8025bc6:	e7ec      	b.n	8025ba2 <_printf_float+0x35a>
 8025bc8:	0033      	movs	r3, r6
 8025bca:	003a      	movs	r2, r7
 8025bcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025bd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025bd2:	47a0      	blx	r4
 8025bd4:	3001      	adds	r0, #1
 8025bd6:	d1c5      	bne.n	8025b64 <_printf_float+0x31c>
 8025bd8:	e692      	b.n	8025900 <_printf_float+0xb8>
 8025bda:	002a      	movs	r2, r5
 8025bdc:	2301      	movs	r3, #1
 8025bde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025be0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025be2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025be4:	321a      	adds	r2, #26
 8025be6:	47b0      	blx	r6
 8025be8:	3001      	adds	r0, #1
 8025bea:	d100      	bne.n	8025bee <_printf_float+0x3a6>
 8025bec:	e688      	b.n	8025900 <_printf_float+0xb8>
 8025bee:	3401      	adds	r4, #1
 8025bf0:	e7bd      	b.n	8025b6e <_printf_float+0x326>
 8025bf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025bf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025bf6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025bf8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025bfa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025bfc:	47a0      	blx	r4
 8025bfe:	3001      	adds	r0, #1
 8025c00:	d1c1      	bne.n	8025b86 <_printf_float+0x33e>
 8025c02:	e67d      	b.n	8025900 <_printf_float+0xb8>
 8025c04:	19ba      	adds	r2, r7, r6
 8025c06:	0023      	movs	r3, r4
 8025c08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c0c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c0e:	47b0      	blx	r6
 8025c10:	3001      	adds	r0, #1
 8025c12:	d1c2      	bne.n	8025b9a <_printf_float+0x352>
 8025c14:	e674      	b.n	8025900 <_printf_float+0xb8>
 8025c16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025c18:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c1a:	2b01      	cmp	r3, #1
 8025c1c:	dc02      	bgt.n	8025c24 <_printf_float+0x3dc>
 8025c1e:	2301      	movs	r3, #1
 8025c20:	421a      	tst	r2, r3
 8025c22:	d039      	beq.n	8025c98 <_printf_float+0x450>
 8025c24:	2301      	movs	r3, #1
 8025c26:	003a      	movs	r2, r7
 8025c28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c2e:	47b0      	blx	r6
 8025c30:	3001      	adds	r0, #1
 8025c32:	d100      	bne.n	8025c36 <_printf_float+0x3ee>
 8025c34:	e664      	b.n	8025900 <_printf_float+0xb8>
 8025c36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025c38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025c3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c3e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c40:	47b0      	blx	r6
 8025c42:	3001      	adds	r0, #1
 8025c44:	d100      	bne.n	8025c48 <_printf_float+0x400>
 8025c46:	e65b      	b.n	8025900 <_printf_float+0xb8>
 8025c48:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025c4a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025c4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c4e:	2200      	movs	r2, #0
 8025c50:	3b01      	subs	r3, #1
 8025c52:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c54:	2300      	movs	r3, #0
 8025c56:	f7da fc2b 	bl	80004b0 <__aeabi_dcmpeq>
 8025c5a:	2800      	cmp	r0, #0
 8025c5c:	d11a      	bne.n	8025c94 <_printf_float+0x44c>
 8025c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c60:	1c7a      	adds	r2, r7, #1
 8025c62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c66:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025c68:	47b0      	blx	r6
 8025c6a:	3001      	adds	r0, #1
 8025c6c:	d10e      	bne.n	8025c8c <_printf_float+0x444>
 8025c6e:	e647      	b.n	8025900 <_printf_float+0xb8>
 8025c70:	002a      	movs	r2, r5
 8025c72:	2301      	movs	r3, #1
 8025c74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c78:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025c7a:	321a      	adds	r2, #26
 8025c7c:	47b8      	blx	r7
 8025c7e:	3001      	adds	r0, #1
 8025c80:	d100      	bne.n	8025c84 <_printf_float+0x43c>
 8025c82:	e63d      	b.n	8025900 <_printf_float+0xb8>
 8025c84:	3601      	adds	r6, #1
 8025c86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c88:	429e      	cmp	r6, r3
 8025c8a:	dbf1      	blt.n	8025c70 <_printf_float+0x428>
 8025c8c:	002a      	movs	r2, r5
 8025c8e:	0023      	movs	r3, r4
 8025c90:	3250      	adds	r2, #80	@ 0x50
 8025c92:	e6d9      	b.n	8025a48 <_printf_float+0x200>
 8025c94:	2600      	movs	r6, #0
 8025c96:	e7f6      	b.n	8025c86 <_printf_float+0x43e>
 8025c98:	003a      	movs	r2, r7
 8025c9a:	e7e2      	b.n	8025c62 <_printf_float+0x41a>
 8025c9c:	002a      	movs	r2, r5
 8025c9e:	2301      	movs	r3, #1
 8025ca0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ca4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025ca6:	3219      	adds	r2, #25
 8025ca8:	47b0      	blx	r6
 8025caa:	3001      	adds	r0, #1
 8025cac:	d100      	bne.n	8025cb0 <_printf_float+0x468>
 8025cae:	e627      	b.n	8025900 <_printf_float+0xb8>
 8025cb0:	3401      	adds	r4, #1
 8025cb2:	68eb      	ldr	r3, [r5, #12]
 8025cb4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025cb6:	1a9b      	subs	r3, r3, r2
 8025cb8:	42a3      	cmp	r3, r4
 8025cba:	dcef      	bgt.n	8025c9c <_printf_float+0x454>
 8025cbc:	e6f8      	b.n	8025ab0 <_printf_float+0x268>
 8025cbe:	2400      	movs	r4, #0
 8025cc0:	e7f7      	b.n	8025cb2 <_printf_float+0x46a>
 8025cc2:	46c0      	nop			@ (mov r8, r8)

08025cc4 <_printf_common>:
 8025cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025cc6:	0016      	movs	r6, r2
 8025cc8:	9301      	str	r3, [sp, #4]
 8025cca:	688a      	ldr	r2, [r1, #8]
 8025ccc:	690b      	ldr	r3, [r1, #16]
 8025cce:	000c      	movs	r4, r1
 8025cd0:	9000      	str	r0, [sp, #0]
 8025cd2:	4293      	cmp	r3, r2
 8025cd4:	da00      	bge.n	8025cd8 <_printf_common+0x14>
 8025cd6:	0013      	movs	r3, r2
 8025cd8:	0022      	movs	r2, r4
 8025cda:	6033      	str	r3, [r6, #0]
 8025cdc:	3243      	adds	r2, #67	@ 0x43
 8025cde:	7812      	ldrb	r2, [r2, #0]
 8025ce0:	2a00      	cmp	r2, #0
 8025ce2:	d001      	beq.n	8025ce8 <_printf_common+0x24>
 8025ce4:	3301      	adds	r3, #1
 8025ce6:	6033      	str	r3, [r6, #0]
 8025ce8:	6823      	ldr	r3, [r4, #0]
 8025cea:	069b      	lsls	r3, r3, #26
 8025cec:	d502      	bpl.n	8025cf4 <_printf_common+0x30>
 8025cee:	6833      	ldr	r3, [r6, #0]
 8025cf0:	3302      	adds	r3, #2
 8025cf2:	6033      	str	r3, [r6, #0]
 8025cf4:	6822      	ldr	r2, [r4, #0]
 8025cf6:	2306      	movs	r3, #6
 8025cf8:	0015      	movs	r5, r2
 8025cfa:	401d      	ands	r5, r3
 8025cfc:	421a      	tst	r2, r3
 8025cfe:	d027      	beq.n	8025d50 <_printf_common+0x8c>
 8025d00:	0023      	movs	r3, r4
 8025d02:	3343      	adds	r3, #67	@ 0x43
 8025d04:	781b      	ldrb	r3, [r3, #0]
 8025d06:	1e5a      	subs	r2, r3, #1
 8025d08:	4193      	sbcs	r3, r2
 8025d0a:	6822      	ldr	r2, [r4, #0]
 8025d0c:	0692      	lsls	r2, r2, #26
 8025d0e:	d430      	bmi.n	8025d72 <_printf_common+0xae>
 8025d10:	0022      	movs	r2, r4
 8025d12:	9901      	ldr	r1, [sp, #4]
 8025d14:	9800      	ldr	r0, [sp, #0]
 8025d16:	9d08      	ldr	r5, [sp, #32]
 8025d18:	3243      	adds	r2, #67	@ 0x43
 8025d1a:	47a8      	blx	r5
 8025d1c:	3001      	adds	r0, #1
 8025d1e:	d025      	beq.n	8025d6c <_printf_common+0xa8>
 8025d20:	2206      	movs	r2, #6
 8025d22:	6823      	ldr	r3, [r4, #0]
 8025d24:	2500      	movs	r5, #0
 8025d26:	4013      	ands	r3, r2
 8025d28:	2b04      	cmp	r3, #4
 8025d2a:	d105      	bne.n	8025d38 <_printf_common+0x74>
 8025d2c:	6833      	ldr	r3, [r6, #0]
 8025d2e:	68e5      	ldr	r5, [r4, #12]
 8025d30:	1aed      	subs	r5, r5, r3
 8025d32:	43eb      	mvns	r3, r5
 8025d34:	17db      	asrs	r3, r3, #31
 8025d36:	401d      	ands	r5, r3
 8025d38:	68a3      	ldr	r3, [r4, #8]
 8025d3a:	6922      	ldr	r2, [r4, #16]
 8025d3c:	4293      	cmp	r3, r2
 8025d3e:	dd01      	ble.n	8025d44 <_printf_common+0x80>
 8025d40:	1a9b      	subs	r3, r3, r2
 8025d42:	18ed      	adds	r5, r5, r3
 8025d44:	2600      	movs	r6, #0
 8025d46:	42b5      	cmp	r5, r6
 8025d48:	d120      	bne.n	8025d8c <_printf_common+0xc8>
 8025d4a:	2000      	movs	r0, #0
 8025d4c:	e010      	b.n	8025d70 <_printf_common+0xac>
 8025d4e:	3501      	adds	r5, #1
 8025d50:	68e3      	ldr	r3, [r4, #12]
 8025d52:	6832      	ldr	r2, [r6, #0]
 8025d54:	1a9b      	subs	r3, r3, r2
 8025d56:	42ab      	cmp	r3, r5
 8025d58:	ddd2      	ble.n	8025d00 <_printf_common+0x3c>
 8025d5a:	0022      	movs	r2, r4
 8025d5c:	2301      	movs	r3, #1
 8025d5e:	9901      	ldr	r1, [sp, #4]
 8025d60:	9800      	ldr	r0, [sp, #0]
 8025d62:	9f08      	ldr	r7, [sp, #32]
 8025d64:	3219      	adds	r2, #25
 8025d66:	47b8      	blx	r7
 8025d68:	3001      	adds	r0, #1
 8025d6a:	d1f0      	bne.n	8025d4e <_printf_common+0x8a>
 8025d6c:	2001      	movs	r0, #1
 8025d6e:	4240      	negs	r0, r0
 8025d70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025d72:	2030      	movs	r0, #48	@ 0x30
 8025d74:	18e1      	adds	r1, r4, r3
 8025d76:	3143      	adds	r1, #67	@ 0x43
 8025d78:	7008      	strb	r0, [r1, #0]
 8025d7a:	0021      	movs	r1, r4
 8025d7c:	1c5a      	adds	r2, r3, #1
 8025d7e:	3145      	adds	r1, #69	@ 0x45
 8025d80:	7809      	ldrb	r1, [r1, #0]
 8025d82:	18a2      	adds	r2, r4, r2
 8025d84:	3243      	adds	r2, #67	@ 0x43
 8025d86:	3302      	adds	r3, #2
 8025d88:	7011      	strb	r1, [r2, #0]
 8025d8a:	e7c1      	b.n	8025d10 <_printf_common+0x4c>
 8025d8c:	0022      	movs	r2, r4
 8025d8e:	2301      	movs	r3, #1
 8025d90:	9901      	ldr	r1, [sp, #4]
 8025d92:	9800      	ldr	r0, [sp, #0]
 8025d94:	9f08      	ldr	r7, [sp, #32]
 8025d96:	321a      	adds	r2, #26
 8025d98:	47b8      	blx	r7
 8025d9a:	3001      	adds	r0, #1
 8025d9c:	d0e6      	beq.n	8025d6c <_printf_common+0xa8>
 8025d9e:	3601      	adds	r6, #1
 8025da0:	e7d1      	b.n	8025d46 <_printf_common+0x82>
	...

08025da4 <_printf_i>:
 8025da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025da6:	b08b      	sub	sp, #44	@ 0x2c
 8025da8:	9206      	str	r2, [sp, #24]
 8025daa:	000a      	movs	r2, r1
 8025dac:	3243      	adds	r2, #67	@ 0x43
 8025dae:	9307      	str	r3, [sp, #28]
 8025db0:	9005      	str	r0, [sp, #20]
 8025db2:	9203      	str	r2, [sp, #12]
 8025db4:	7e0a      	ldrb	r2, [r1, #24]
 8025db6:	000c      	movs	r4, r1
 8025db8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025dba:	2a78      	cmp	r2, #120	@ 0x78
 8025dbc:	d809      	bhi.n	8025dd2 <_printf_i+0x2e>
 8025dbe:	2a62      	cmp	r2, #98	@ 0x62
 8025dc0:	d80b      	bhi.n	8025dda <_printf_i+0x36>
 8025dc2:	2a00      	cmp	r2, #0
 8025dc4:	d100      	bne.n	8025dc8 <_printf_i+0x24>
 8025dc6:	e0ba      	b.n	8025f3e <_printf_i+0x19a>
 8025dc8:	497a      	ldr	r1, [pc, #488]	@ (8025fb4 <_printf_i+0x210>)
 8025dca:	9104      	str	r1, [sp, #16]
 8025dcc:	2a58      	cmp	r2, #88	@ 0x58
 8025dce:	d100      	bne.n	8025dd2 <_printf_i+0x2e>
 8025dd0:	e08e      	b.n	8025ef0 <_printf_i+0x14c>
 8025dd2:	0025      	movs	r5, r4
 8025dd4:	3542      	adds	r5, #66	@ 0x42
 8025dd6:	702a      	strb	r2, [r5, #0]
 8025dd8:	e022      	b.n	8025e20 <_printf_i+0x7c>
 8025dda:	0010      	movs	r0, r2
 8025ddc:	3863      	subs	r0, #99	@ 0x63
 8025dde:	2815      	cmp	r0, #21
 8025de0:	d8f7      	bhi.n	8025dd2 <_printf_i+0x2e>
 8025de2:	f7da f9d5 	bl	8000190 <__gnu_thumb1_case_shi>
 8025de6:	0016      	.short	0x0016
 8025de8:	fff6001f 	.word	0xfff6001f
 8025dec:	fff6fff6 	.word	0xfff6fff6
 8025df0:	001ffff6 	.word	0x001ffff6
 8025df4:	fff6fff6 	.word	0xfff6fff6
 8025df8:	fff6fff6 	.word	0xfff6fff6
 8025dfc:	0036009f 	.word	0x0036009f
 8025e00:	fff6007e 	.word	0xfff6007e
 8025e04:	00b0fff6 	.word	0x00b0fff6
 8025e08:	0036fff6 	.word	0x0036fff6
 8025e0c:	fff6fff6 	.word	0xfff6fff6
 8025e10:	0082      	.short	0x0082
 8025e12:	0025      	movs	r5, r4
 8025e14:	681a      	ldr	r2, [r3, #0]
 8025e16:	3542      	adds	r5, #66	@ 0x42
 8025e18:	1d11      	adds	r1, r2, #4
 8025e1a:	6019      	str	r1, [r3, #0]
 8025e1c:	6813      	ldr	r3, [r2, #0]
 8025e1e:	702b      	strb	r3, [r5, #0]
 8025e20:	2301      	movs	r3, #1
 8025e22:	e09e      	b.n	8025f62 <_printf_i+0x1be>
 8025e24:	6818      	ldr	r0, [r3, #0]
 8025e26:	6809      	ldr	r1, [r1, #0]
 8025e28:	1d02      	adds	r2, r0, #4
 8025e2a:	060d      	lsls	r5, r1, #24
 8025e2c:	d50b      	bpl.n	8025e46 <_printf_i+0xa2>
 8025e2e:	6806      	ldr	r6, [r0, #0]
 8025e30:	601a      	str	r2, [r3, #0]
 8025e32:	2e00      	cmp	r6, #0
 8025e34:	da03      	bge.n	8025e3e <_printf_i+0x9a>
 8025e36:	232d      	movs	r3, #45	@ 0x2d
 8025e38:	9a03      	ldr	r2, [sp, #12]
 8025e3a:	4276      	negs	r6, r6
 8025e3c:	7013      	strb	r3, [r2, #0]
 8025e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8025fb4 <_printf_i+0x210>)
 8025e40:	270a      	movs	r7, #10
 8025e42:	9304      	str	r3, [sp, #16]
 8025e44:	e018      	b.n	8025e78 <_printf_i+0xd4>
 8025e46:	6806      	ldr	r6, [r0, #0]
 8025e48:	601a      	str	r2, [r3, #0]
 8025e4a:	0649      	lsls	r1, r1, #25
 8025e4c:	d5f1      	bpl.n	8025e32 <_printf_i+0x8e>
 8025e4e:	b236      	sxth	r6, r6
 8025e50:	e7ef      	b.n	8025e32 <_printf_i+0x8e>
 8025e52:	6808      	ldr	r0, [r1, #0]
 8025e54:	6819      	ldr	r1, [r3, #0]
 8025e56:	c940      	ldmia	r1!, {r6}
 8025e58:	0605      	lsls	r5, r0, #24
 8025e5a:	d402      	bmi.n	8025e62 <_printf_i+0xbe>
 8025e5c:	0640      	lsls	r0, r0, #25
 8025e5e:	d500      	bpl.n	8025e62 <_printf_i+0xbe>
 8025e60:	b2b6      	uxth	r6, r6
 8025e62:	6019      	str	r1, [r3, #0]
 8025e64:	4b53      	ldr	r3, [pc, #332]	@ (8025fb4 <_printf_i+0x210>)
 8025e66:	270a      	movs	r7, #10
 8025e68:	9304      	str	r3, [sp, #16]
 8025e6a:	2a6f      	cmp	r2, #111	@ 0x6f
 8025e6c:	d100      	bne.n	8025e70 <_printf_i+0xcc>
 8025e6e:	3f02      	subs	r7, #2
 8025e70:	0023      	movs	r3, r4
 8025e72:	2200      	movs	r2, #0
 8025e74:	3343      	adds	r3, #67	@ 0x43
 8025e76:	701a      	strb	r2, [r3, #0]
 8025e78:	6863      	ldr	r3, [r4, #4]
 8025e7a:	60a3      	str	r3, [r4, #8]
 8025e7c:	2b00      	cmp	r3, #0
 8025e7e:	db06      	blt.n	8025e8e <_printf_i+0xea>
 8025e80:	2104      	movs	r1, #4
 8025e82:	6822      	ldr	r2, [r4, #0]
 8025e84:	9d03      	ldr	r5, [sp, #12]
 8025e86:	438a      	bics	r2, r1
 8025e88:	6022      	str	r2, [r4, #0]
 8025e8a:	4333      	orrs	r3, r6
 8025e8c:	d00c      	beq.n	8025ea8 <_printf_i+0x104>
 8025e8e:	9d03      	ldr	r5, [sp, #12]
 8025e90:	0030      	movs	r0, r6
 8025e92:	0039      	movs	r1, r7
 8025e94:	f7da fa0c 	bl	80002b0 <__aeabi_uidivmod>
 8025e98:	9b04      	ldr	r3, [sp, #16]
 8025e9a:	3d01      	subs	r5, #1
 8025e9c:	5c5b      	ldrb	r3, [r3, r1]
 8025e9e:	702b      	strb	r3, [r5, #0]
 8025ea0:	0033      	movs	r3, r6
 8025ea2:	0006      	movs	r6, r0
 8025ea4:	429f      	cmp	r7, r3
 8025ea6:	d9f3      	bls.n	8025e90 <_printf_i+0xec>
 8025ea8:	2f08      	cmp	r7, #8
 8025eaa:	d109      	bne.n	8025ec0 <_printf_i+0x11c>
 8025eac:	6823      	ldr	r3, [r4, #0]
 8025eae:	07db      	lsls	r3, r3, #31
 8025eb0:	d506      	bpl.n	8025ec0 <_printf_i+0x11c>
 8025eb2:	6862      	ldr	r2, [r4, #4]
 8025eb4:	6923      	ldr	r3, [r4, #16]
 8025eb6:	429a      	cmp	r2, r3
 8025eb8:	dc02      	bgt.n	8025ec0 <_printf_i+0x11c>
 8025eba:	2330      	movs	r3, #48	@ 0x30
 8025ebc:	3d01      	subs	r5, #1
 8025ebe:	702b      	strb	r3, [r5, #0]
 8025ec0:	9b03      	ldr	r3, [sp, #12]
 8025ec2:	1b5b      	subs	r3, r3, r5
 8025ec4:	6123      	str	r3, [r4, #16]
 8025ec6:	9b07      	ldr	r3, [sp, #28]
 8025ec8:	0021      	movs	r1, r4
 8025eca:	9300      	str	r3, [sp, #0]
 8025ecc:	9805      	ldr	r0, [sp, #20]
 8025ece:	9b06      	ldr	r3, [sp, #24]
 8025ed0:	aa09      	add	r2, sp, #36	@ 0x24
 8025ed2:	f7ff fef7 	bl	8025cc4 <_printf_common>
 8025ed6:	3001      	adds	r0, #1
 8025ed8:	d148      	bne.n	8025f6c <_printf_i+0x1c8>
 8025eda:	2001      	movs	r0, #1
 8025edc:	4240      	negs	r0, r0
 8025ede:	b00b      	add	sp, #44	@ 0x2c
 8025ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025ee2:	2220      	movs	r2, #32
 8025ee4:	6809      	ldr	r1, [r1, #0]
 8025ee6:	430a      	orrs	r2, r1
 8025ee8:	6022      	str	r2, [r4, #0]
 8025eea:	2278      	movs	r2, #120	@ 0x78
 8025eec:	4932      	ldr	r1, [pc, #200]	@ (8025fb8 <_printf_i+0x214>)
 8025eee:	9104      	str	r1, [sp, #16]
 8025ef0:	0021      	movs	r1, r4
 8025ef2:	3145      	adds	r1, #69	@ 0x45
 8025ef4:	700a      	strb	r2, [r1, #0]
 8025ef6:	6819      	ldr	r1, [r3, #0]
 8025ef8:	6822      	ldr	r2, [r4, #0]
 8025efa:	c940      	ldmia	r1!, {r6}
 8025efc:	0610      	lsls	r0, r2, #24
 8025efe:	d402      	bmi.n	8025f06 <_printf_i+0x162>
 8025f00:	0650      	lsls	r0, r2, #25
 8025f02:	d500      	bpl.n	8025f06 <_printf_i+0x162>
 8025f04:	b2b6      	uxth	r6, r6
 8025f06:	6019      	str	r1, [r3, #0]
 8025f08:	07d3      	lsls	r3, r2, #31
 8025f0a:	d502      	bpl.n	8025f12 <_printf_i+0x16e>
 8025f0c:	2320      	movs	r3, #32
 8025f0e:	4313      	orrs	r3, r2
 8025f10:	6023      	str	r3, [r4, #0]
 8025f12:	2e00      	cmp	r6, #0
 8025f14:	d001      	beq.n	8025f1a <_printf_i+0x176>
 8025f16:	2710      	movs	r7, #16
 8025f18:	e7aa      	b.n	8025e70 <_printf_i+0xcc>
 8025f1a:	2220      	movs	r2, #32
 8025f1c:	6823      	ldr	r3, [r4, #0]
 8025f1e:	4393      	bics	r3, r2
 8025f20:	6023      	str	r3, [r4, #0]
 8025f22:	e7f8      	b.n	8025f16 <_printf_i+0x172>
 8025f24:	681a      	ldr	r2, [r3, #0]
 8025f26:	680d      	ldr	r5, [r1, #0]
 8025f28:	1d10      	adds	r0, r2, #4
 8025f2a:	6949      	ldr	r1, [r1, #20]
 8025f2c:	6018      	str	r0, [r3, #0]
 8025f2e:	6813      	ldr	r3, [r2, #0]
 8025f30:	062e      	lsls	r6, r5, #24
 8025f32:	d501      	bpl.n	8025f38 <_printf_i+0x194>
 8025f34:	6019      	str	r1, [r3, #0]
 8025f36:	e002      	b.n	8025f3e <_printf_i+0x19a>
 8025f38:	066d      	lsls	r5, r5, #25
 8025f3a:	d5fb      	bpl.n	8025f34 <_printf_i+0x190>
 8025f3c:	8019      	strh	r1, [r3, #0]
 8025f3e:	2300      	movs	r3, #0
 8025f40:	9d03      	ldr	r5, [sp, #12]
 8025f42:	6123      	str	r3, [r4, #16]
 8025f44:	e7bf      	b.n	8025ec6 <_printf_i+0x122>
 8025f46:	681a      	ldr	r2, [r3, #0]
 8025f48:	1d11      	adds	r1, r2, #4
 8025f4a:	6019      	str	r1, [r3, #0]
 8025f4c:	6815      	ldr	r5, [r2, #0]
 8025f4e:	2100      	movs	r1, #0
 8025f50:	0028      	movs	r0, r5
 8025f52:	6862      	ldr	r2, [r4, #4]
 8025f54:	f000 fb7f 	bl	8026656 <memchr>
 8025f58:	2800      	cmp	r0, #0
 8025f5a:	d001      	beq.n	8025f60 <_printf_i+0x1bc>
 8025f5c:	1b40      	subs	r0, r0, r5
 8025f5e:	6060      	str	r0, [r4, #4]
 8025f60:	6863      	ldr	r3, [r4, #4]
 8025f62:	6123      	str	r3, [r4, #16]
 8025f64:	2300      	movs	r3, #0
 8025f66:	9a03      	ldr	r2, [sp, #12]
 8025f68:	7013      	strb	r3, [r2, #0]
 8025f6a:	e7ac      	b.n	8025ec6 <_printf_i+0x122>
 8025f6c:	002a      	movs	r2, r5
 8025f6e:	6923      	ldr	r3, [r4, #16]
 8025f70:	9906      	ldr	r1, [sp, #24]
 8025f72:	9805      	ldr	r0, [sp, #20]
 8025f74:	9d07      	ldr	r5, [sp, #28]
 8025f76:	47a8      	blx	r5
 8025f78:	3001      	adds	r0, #1
 8025f7a:	d0ae      	beq.n	8025eda <_printf_i+0x136>
 8025f7c:	6823      	ldr	r3, [r4, #0]
 8025f7e:	079b      	lsls	r3, r3, #30
 8025f80:	d415      	bmi.n	8025fae <_printf_i+0x20a>
 8025f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f84:	68e0      	ldr	r0, [r4, #12]
 8025f86:	4298      	cmp	r0, r3
 8025f88:	daa9      	bge.n	8025ede <_printf_i+0x13a>
 8025f8a:	0018      	movs	r0, r3
 8025f8c:	e7a7      	b.n	8025ede <_printf_i+0x13a>
 8025f8e:	0022      	movs	r2, r4
 8025f90:	2301      	movs	r3, #1
 8025f92:	9906      	ldr	r1, [sp, #24]
 8025f94:	9805      	ldr	r0, [sp, #20]
 8025f96:	9e07      	ldr	r6, [sp, #28]
 8025f98:	3219      	adds	r2, #25
 8025f9a:	47b0      	blx	r6
 8025f9c:	3001      	adds	r0, #1
 8025f9e:	d09c      	beq.n	8025eda <_printf_i+0x136>
 8025fa0:	3501      	adds	r5, #1
 8025fa2:	68e3      	ldr	r3, [r4, #12]
 8025fa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025fa6:	1a9b      	subs	r3, r3, r2
 8025fa8:	42ab      	cmp	r3, r5
 8025faa:	dcf0      	bgt.n	8025f8e <_printf_i+0x1ea>
 8025fac:	e7e9      	b.n	8025f82 <_printf_i+0x1de>
 8025fae:	2500      	movs	r5, #0
 8025fb0:	e7f7      	b.n	8025fa2 <_printf_i+0x1fe>
 8025fb2:	46c0      	nop			@ (mov r8, r8)
 8025fb4:	0802e9a8 	.word	0x0802e9a8
 8025fb8:	0802e9b9 	.word	0x0802e9b9

08025fbc <std>:
 8025fbc:	2300      	movs	r3, #0
 8025fbe:	b510      	push	{r4, lr}
 8025fc0:	0004      	movs	r4, r0
 8025fc2:	6003      	str	r3, [r0, #0]
 8025fc4:	6043      	str	r3, [r0, #4]
 8025fc6:	6083      	str	r3, [r0, #8]
 8025fc8:	8181      	strh	r1, [r0, #12]
 8025fca:	6643      	str	r3, [r0, #100]	@ 0x64
 8025fcc:	81c2      	strh	r2, [r0, #14]
 8025fce:	6103      	str	r3, [r0, #16]
 8025fd0:	6143      	str	r3, [r0, #20]
 8025fd2:	6183      	str	r3, [r0, #24]
 8025fd4:	0019      	movs	r1, r3
 8025fd6:	2208      	movs	r2, #8
 8025fd8:	305c      	adds	r0, #92	@ 0x5c
 8025fda:	f000 fa6b 	bl	80264b4 <memset>
 8025fde:	4b0b      	ldr	r3, [pc, #44]	@ (802600c <std+0x50>)
 8025fe0:	6224      	str	r4, [r4, #32]
 8025fe2:	6263      	str	r3, [r4, #36]	@ 0x24
 8025fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8026010 <std+0x54>)
 8025fe6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8026014 <std+0x58>)
 8025fea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025fec:	4b0a      	ldr	r3, [pc, #40]	@ (8026018 <std+0x5c>)
 8025fee:	6323      	str	r3, [r4, #48]	@ 0x30
 8025ff0:	4b0a      	ldr	r3, [pc, #40]	@ (802601c <std+0x60>)
 8025ff2:	429c      	cmp	r4, r3
 8025ff4:	d005      	beq.n	8026002 <std+0x46>
 8025ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8026020 <std+0x64>)
 8025ff8:	429c      	cmp	r4, r3
 8025ffa:	d002      	beq.n	8026002 <std+0x46>
 8025ffc:	4b09      	ldr	r3, [pc, #36]	@ (8026024 <std+0x68>)
 8025ffe:	429c      	cmp	r4, r3
 8026000:	d103      	bne.n	802600a <std+0x4e>
 8026002:	0020      	movs	r0, r4
 8026004:	3058      	adds	r0, #88	@ 0x58
 8026006:	f000 fb23 	bl	8026650 <__retarget_lock_init_recursive>
 802600a:	bd10      	pop	{r4, pc}
 802600c:	08026269 	.word	0x08026269
 8026010:	08026291 	.word	0x08026291
 8026014:	080262c9 	.word	0x080262c9
 8026018:	080262f5 	.word	0x080262f5
 802601c:	200037d0 	.word	0x200037d0
 8026020:	20003838 	.word	0x20003838
 8026024:	200038a0 	.word	0x200038a0

08026028 <stdio_exit_handler>:
 8026028:	b510      	push	{r4, lr}
 802602a:	4a03      	ldr	r2, [pc, #12]	@ (8026038 <stdio_exit_handler+0x10>)
 802602c:	4903      	ldr	r1, [pc, #12]	@ (802603c <stdio_exit_handler+0x14>)
 802602e:	4804      	ldr	r0, [pc, #16]	@ (8026040 <stdio_exit_handler+0x18>)
 8026030:	f000 f86c 	bl	802610c <_fwalk_sglue>
 8026034:	bd10      	pop	{r4, pc}
 8026036:	46c0      	nop			@ (mov r8, r8)
 8026038:	20000274 	.word	0x20000274
 802603c:	08028c4d 	.word	0x08028c4d
 8026040:	200003f0 	.word	0x200003f0

08026044 <cleanup_stdio>:
 8026044:	6841      	ldr	r1, [r0, #4]
 8026046:	4b0b      	ldr	r3, [pc, #44]	@ (8026074 <cleanup_stdio+0x30>)
 8026048:	b510      	push	{r4, lr}
 802604a:	0004      	movs	r4, r0
 802604c:	4299      	cmp	r1, r3
 802604e:	d001      	beq.n	8026054 <cleanup_stdio+0x10>
 8026050:	f002 fdfc 	bl	8028c4c <_fflush_r>
 8026054:	68a1      	ldr	r1, [r4, #8]
 8026056:	4b08      	ldr	r3, [pc, #32]	@ (8026078 <cleanup_stdio+0x34>)
 8026058:	4299      	cmp	r1, r3
 802605a:	d002      	beq.n	8026062 <cleanup_stdio+0x1e>
 802605c:	0020      	movs	r0, r4
 802605e:	f002 fdf5 	bl	8028c4c <_fflush_r>
 8026062:	68e1      	ldr	r1, [r4, #12]
 8026064:	4b05      	ldr	r3, [pc, #20]	@ (802607c <cleanup_stdio+0x38>)
 8026066:	4299      	cmp	r1, r3
 8026068:	d002      	beq.n	8026070 <cleanup_stdio+0x2c>
 802606a:	0020      	movs	r0, r4
 802606c:	f002 fdee 	bl	8028c4c <_fflush_r>
 8026070:	bd10      	pop	{r4, pc}
 8026072:	46c0      	nop			@ (mov r8, r8)
 8026074:	200037d0 	.word	0x200037d0
 8026078:	20003838 	.word	0x20003838
 802607c:	200038a0 	.word	0x200038a0

08026080 <global_stdio_init.part.0>:
 8026080:	b510      	push	{r4, lr}
 8026082:	4b09      	ldr	r3, [pc, #36]	@ (80260a8 <global_stdio_init.part.0+0x28>)
 8026084:	4a09      	ldr	r2, [pc, #36]	@ (80260ac <global_stdio_init.part.0+0x2c>)
 8026086:	2104      	movs	r1, #4
 8026088:	601a      	str	r2, [r3, #0]
 802608a:	4809      	ldr	r0, [pc, #36]	@ (80260b0 <global_stdio_init.part.0+0x30>)
 802608c:	2200      	movs	r2, #0
 802608e:	f7ff ff95 	bl	8025fbc <std>
 8026092:	2201      	movs	r2, #1
 8026094:	2109      	movs	r1, #9
 8026096:	4807      	ldr	r0, [pc, #28]	@ (80260b4 <global_stdio_init.part.0+0x34>)
 8026098:	f7ff ff90 	bl	8025fbc <std>
 802609c:	2202      	movs	r2, #2
 802609e:	2112      	movs	r1, #18
 80260a0:	4805      	ldr	r0, [pc, #20]	@ (80260b8 <global_stdio_init.part.0+0x38>)
 80260a2:	f7ff ff8b 	bl	8025fbc <std>
 80260a6:	bd10      	pop	{r4, pc}
 80260a8:	20003908 	.word	0x20003908
 80260ac:	08026029 	.word	0x08026029
 80260b0:	200037d0 	.word	0x200037d0
 80260b4:	20003838 	.word	0x20003838
 80260b8:	200038a0 	.word	0x200038a0

080260bc <__sfp_lock_acquire>:
 80260bc:	b510      	push	{r4, lr}
 80260be:	4802      	ldr	r0, [pc, #8]	@ (80260c8 <__sfp_lock_acquire+0xc>)
 80260c0:	f000 fac7 	bl	8026652 <__retarget_lock_acquire_recursive>
 80260c4:	bd10      	pop	{r4, pc}
 80260c6:	46c0      	nop			@ (mov r8, r8)
 80260c8:	20003911 	.word	0x20003911

080260cc <__sfp_lock_release>:
 80260cc:	b510      	push	{r4, lr}
 80260ce:	4802      	ldr	r0, [pc, #8]	@ (80260d8 <__sfp_lock_release+0xc>)
 80260d0:	f000 fac0 	bl	8026654 <__retarget_lock_release_recursive>
 80260d4:	bd10      	pop	{r4, pc}
 80260d6:	46c0      	nop			@ (mov r8, r8)
 80260d8:	20003911 	.word	0x20003911

080260dc <__sinit>:
 80260dc:	b510      	push	{r4, lr}
 80260de:	0004      	movs	r4, r0
 80260e0:	f7ff ffec 	bl	80260bc <__sfp_lock_acquire>
 80260e4:	6a23      	ldr	r3, [r4, #32]
 80260e6:	2b00      	cmp	r3, #0
 80260e8:	d002      	beq.n	80260f0 <__sinit+0x14>
 80260ea:	f7ff ffef 	bl	80260cc <__sfp_lock_release>
 80260ee:	bd10      	pop	{r4, pc}
 80260f0:	4b04      	ldr	r3, [pc, #16]	@ (8026104 <__sinit+0x28>)
 80260f2:	6223      	str	r3, [r4, #32]
 80260f4:	4b04      	ldr	r3, [pc, #16]	@ (8026108 <__sinit+0x2c>)
 80260f6:	681b      	ldr	r3, [r3, #0]
 80260f8:	2b00      	cmp	r3, #0
 80260fa:	d1f6      	bne.n	80260ea <__sinit+0xe>
 80260fc:	f7ff ffc0 	bl	8026080 <global_stdio_init.part.0>
 8026100:	e7f3      	b.n	80260ea <__sinit+0xe>
 8026102:	46c0      	nop			@ (mov r8, r8)
 8026104:	08026045 	.word	0x08026045
 8026108:	20003908 	.word	0x20003908

0802610c <_fwalk_sglue>:
 802610c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802610e:	0014      	movs	r4, r2
 8026110:	2600      	movs	r6, #0
 8026112:	9000      	str	r0, [sp, #0]
 8026114:	9101      	str	r1, [sp, #4]
 8026116:	68a5      	ldr	r5, [r4, #8]
 8026118:	6867      	ldr	r7, [r4, #4]
 802611a:	3f01      	subs	r7, #1
 802611c:	d504      	bpl.n	8026128 <_fwalk_sglue+0x1c>
 802611e:	6824      	ldr	r4, [r4, #0]
 8026120:	2c00      	cmp	r4, #0
 8026122:	d1f8      	bne.n	8026116 <_fwalk_sglue+0xa>
 8026124:	0030      	movs	r0, r6
 8026126:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026128:	89ab      	ldrh	r3, [r5, #12]
 802612a:	2b01      	cmp	r3, #1
 802612c:	d908      	bls.n	8026140 <_fwalk_sglue+0x34>
 802612e:	220e      	movs	r2, #14
 8026130:	5eab      	ldrsh	r3, [r5, r2]
 8026132:	3301      	adds	r3, #1
 8026134:	d004      	beq.n	8026140 <_fwalk_sglue+0x34>
 8026136:	0029      	movs	r1, r5
 8026138:	9800      	ldr	r0, [sp, #0]
 802613a:	9b01      	ldr	r3, [sp, #4]
 802613c:	4798      	blx	r3
 802613e:	4306      	orrs	r6, r0
 8026140:	3568      	adds	r5, #104	@ 0x68
 8026142:	e7ea      	b.n	802611a <_fwalk_sglue+0xe>

08026144 <iprintf>:
 8026144:	b40f      	push	{r0, r1, r2, r3}
 8026146:	b507      	push	{r0, r1, r2, lr}
 8026148:	4905      	ldr	r1, [pc, #20]	@ (8026160 <iprintf+0x1c>)
 802614a:	ab04      	add	r3, sp, #16
 802614c:	6808      	ldr	r0, [r1, #0]
 802614e:	cb04      	ldmia	r3!, {r2}
 8026150:	6881      	ldr	r1, [r0, #8]
 8026152:	9301      	str	r3, [sp, #4]
 8026154:	f002 fbd8 	bl	8028908 <_vfiprintf_r>
 8026158:	b003      	add	sp, #12
 802615a:	bc08      	pop	{r3}
 802615c:	b004      	add	sp, #16
 802615e:	4718      	bx	r3
 8026160:	200003ec 	.word	0x200003ec

08026164 <_puts_r>:
 8026164:	6a03      	ldr	r3, [r0, #32]
 8026166:	b570      	push	{r4, r5, r6, lr}
 8026168:	0005      	movs	r5, r0
 802616a:	000e      	movs	r6, r1
 802616c:	6884      	ldr	r4, [r0, #8]
 802616e:	2b00      	cmp	r3, #0
 8026170:	d101      	bne.n	8026176 <_puts_r+0x12>
 8026172:	f7ff ffb3 	bl	80260dc <__sinit>
 8026176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026178:	07db      	lsls	r3, r3, #31
 802617a:	d405      	bmi.n	8026188 <_puts_r+0x24>
 802617c:	89a3      	ldrh	r3, [r4, #12]
 802617e:	059b      	lsls	r3, r3, #22
 8026180:	d402      	bmi.n	8026188 <_puts_r+0x24>
 8026182:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026184:	f000 fa65 	bl	8026652 <__retarget_lock_acquire_recursive>
 8026188:	89a3      	ldrh	r3, [r4, #12]
 802618a:	071b      	lsls	r3, r3, #28
 802618c:	d502      	bpl.n	8026194 <_puts_r+0x30>
 802618e:	6923      	ldr	r3, [r4, #16]
 8026190:	2b00      	cmp	r3, #0
 8026192:	d11f      	bne.n	80261d4 <_puts_r+0x70>
 8026194:	0021      	movs	r1, r4
 8026196:	0028      	movs	r0, r5
 8026198:	f000 f92e 	bl	80263f8 <__swsetup_r>
 802619c:	2800      	cmp	r0, #0
 802619e:	d019      	beq.n	80261d4 <_puts_r+0x70>
 80261a0:	2501      	movs	r5, #1
 80261a2:	426d      	negs	r5, r5
 80261a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80261a6:	07db      	lsls	r3, r3, #31
 80261a8:	d405      	bmi.n	80261b6 <_puts_r+0x52>
 80261aa:	89a3      	ldrh	r3, [r4, #12]
 80261ac:	059b      	lsls	r3, r3, #22
 80261ae:	d402      	bmi.n	80261b6 <_puts_r+0x52>
 80261b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80261b2:	f000 fa4f 	bl	8026654 <__retarget_lock_release_recursive>
 80261b6:	0028      	movs	r0, r5
 80261b8:	bd70      	pop	{r4, r5, r6, pc}
 80261ba:	3601      	adds	r6, #1
 80261bc:	60a3      	str	r3, [r4, #8]
 80261be:	2b00      	cmp	r3, #0
 80261c0:	da04      	bge.n	80261cc <_puts_r+0x68>
 80261c2:	69a2      	ldr	r2, [r4, #24]
 80261c4:	429a      	cmp	r2, r3
 80261c6:	dc16      	bgt.n	80261f6 <_puts_r+0x92>
 80261c8:	290a      	cmp	r1, #10
 80261ca:	d014      	beq.n	80261f6 <_puts_r+0x92>
 80261cc:	6823      	ldr	r3, [r4, #0]
 80261ce:	1c5a      	adds	r2, r3, #1
 80261d0:	6022      	str	r2, [r4, #0]
 80261d2:	7019      	strb	r1, [r3, #0]
 80261d4:	68a3      	ldr	r3, [r4, #8]
 80261d6:	7831      	ldrb	r1, [r6, #0]
 80261d8:	3b01      	subs	r3, #1
 80261da:	2900      	cmp	r1, #0
 80261dc:	d1ed      	bne.n	80261ba <_puts_r+0x56>
 80261de:	60a3      	str	r3, [r4, #8]
 80261e0:	2b00      	cmp	r3, #0
 80261e2:	da0f      	bge.n	8026204 <_puts_r+0xa0>
 80261e4:	0022      	movs	r2, r4
 80261e6:	0028      	movs	r0, r5
 80261e8:	310a      	adds	r1, #10
 80261ea:	f000 f8c3 	bl	8026374 <__swbuf_r>
 80261ee:	3001      	adds	r0, #1
 80261f0:	d0d6      	beq.n	80261a0 <_puts_r+0x3c>
 80261f2:	250a      	movs	r5, #10
 80261f4:	e7d6      	b.n	80261a4 <_puts_r+0x40>
 80261f6:	0022      	movs	r2, r4
 80261f8:	0028      	movs	r0, r5
 80261fa:	f000 f8bb 	bl	8026374 <__swbuf_r>
 80261fe:	3001      	adds	r0, #1
 8026200:	d1e8      	bne.n	80261d4 <_puts_r+0x70>
 8026202:	e7cd      	b.n	80261a0 <_puts_r+0x3c>
 8026204:	6823      	ldr	r3, [r4, #0]
 8026206:	1c5a      	adds	r2, r3, #1
 8026208:	6022      	str	r2, [r4, #0]
 802620a:	220a      	movs	r2, #10
 802620c:	701a      	strb	r2, [r3, #0]
 802620e:	e7f0      	b.n	80261f2 <_puts_r+0x8e>

08026210 <puts>:
 8026210:	b510      	push	{r4, lr}
 8026212:	4b03      	ldr	r3, [pc, #12]	@ (8026220 <puts+0x10>)
 8026214:	0001      	movs	r1, r0
 8026216:	6818      	ldr	r0, [r3, #0]
 8026218:	f7ff ffa4 	bl	8026164 <_puts_r>
 802621c:	bd10      	pop	{r4, pc}
 802621e:	46c0      	nop			@ (mov r8, r8)
 8026220:	200003ec 	.word	0x200003ec

08026224 <siprintf>:
 8026224:	b40e      	push	{r1, r2, r3}
 8026226:	b510      	push	{r4, lr}
 8026228:	2400      	movs	r4, #0
 802622a:	490c      	ldr	r1, [pc, #48]	@ (802625c <siprintf+0x38>)
 802622c:	b09d      	sub	sp, #116	@ 0x74
 802622e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8026230:	9002      	str	r0, [sp, #8]
 8026232:	9006      	str	r0, [sp, #24]
 8026234:	9107      	str	r1, [sp, #28]
 8026236:	9104      	str	r1, [sp, #16]
 8026238:	4809      	ldr	r0, [pc, #36]	@ (8026260 <siprintf+0x3c>)
 802623a:	490a      	ldr	r1, [pc, #40]	@ (8026264 <siprintf+0x40>)
 802623c:	cb04      	ldmia	r3!, {r2}
 802623e:	9105      	str	r1, [sp, #20]
 8026240:	6800      	ldr	r0, [r0, #0]
 8026242:	a902      	add	r1, sp, #8
 8026244:	9301      	str	r3, [sp, #4]
 8026246:	941b      	str	r4, [sp, #108]	@ 0x6c
 8026248:	f002 fa38 	bl	80286bc <_svfiprintf_r>
 802624c:	9b02      	ldr	r3, [sp, #8]
 802624e:	701c      	strb	r4, [r3, #0]
 8026250:	b01d      	add	sp, #116	@ 0x74
 8026252:	bc10      	pop	{r4}
 8026254:	bc08      	pop	{r3}
 8026256:	b003      	add	sp, #12
 8026258:	4718      	bx	r3
 802625a:	46c0      	nop			@ (mov r8, r8)
 802625c:	7fffffff 	.word	0x7fffffff
 8026260:	200003ec 	.word	0x200003ec
 8026264:	ffff0208 	.word	0xffff0208

08026268 <__sread>:
 8026268:	b570      	push	{r4, r5, r6, lr}
 802626a:	000c      	movs	r4, r1
 802626c:	250e      	movs	r5, #14
 802626e:	5f49      	ldrsh	r1, [r1, r5]
 8026270:	f000 f99c 	bl	80265ac <_read_r>
 8026274:	2800      	cmp	r0, #0
 8026276:	db03      	blt.n	8026280 <__sread+0x18>
 8026278:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802627a:	181b      	adds	r3, r3, r0
 802627c:	6563      	str	r3, [r4, #84]	@ 0x54
 802627e:	bd70      	pop	{r4, r5, r6, pc}
 8026280:	89a3      	ldrh	r3, [r4, #12]
 8026282:	4a02      	ldr	r2, [pc, #8]	@ (802628c <__sread+0x24>)
 8026284:	4013      	ands	r3, r2
 8026286:	81a3      	strh	r3, [r4, #12]
 8026288:	e7f9      	b.n	802627e <__sread+0x16>
 802628a:	46c0      	nop			@ (mov r8, r8)
 802628c:	ffffefff 	.word	0xffffefff

08026290 <__swrite>:
 8026290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026292:	001f      	movs	r7, r3
 8026294:	898b      	ldrh	r3, [r1, #12]
 8026296:	0005      	movs	r5, r0
 8026298:	000c      	movs	r4, r1
 802629a:	0016      	movs	r6, r2
 802629c:	05db      	lsls	r3, r3, #23
 802629e:	d505      	bpl.n	80262ac <__swrite+0x1c>
 80262a0:	230e      	movs	r3, #14
 80262a2:	5ec9      	ldrsh	r1, [r1, r3]
 80262a4:	2200      	movs	r2, #0
 80262a6:	2302      	movs	r3, #2
 80262a8:	f000 f96c 	bl	8026584 <_lseek_r>
 80262ac:	89a3      	ldrh	r3, [r4, #12]
 80262ae:	4a05      	ldr	r2, [pc, #20]	@ (80262c4 <__swrite+0x34>)
 80262b0:	0028      	movs	r0, r5
 80262b2:	4013      	ands	r3, r2
 80262b4:	81a3      	strh	r3, [r4, #12]
 80262b6:	0032      	movs	r2, r6
 80262b8:	230e      	movs	r3, #14
 80262ba:	5ee1      	ldrsh	r1, [r4, r3]
 80262bc:	003b      	movs	r3, r7
 80262be:	f000 f989 	bl	80265d4 <_write_r>
 80262c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80262c4:	ffffefff 	.word	0xffffefff

080262c8 <__sseek>:
 80262c8:	b570      	push	{r4, r5, r6, lr}
 80262ca:	000c      	movs	r4, r1
 80262cc:	250e      	movs	r5, #14
 80262ce:	5f49      	ldrsh	r1, [r1, r5]
 80262d0:	f000 f958 	bl	8026584 <_lseek_r>
 80262d4:	89a3      	ldrh	r3, [r4, #12]
 80262d6:	1c42      	adds	r2, r0, #1
 80262d8:	d103      	bne.n	80262e2 <__sseek+0x1a>
 80262da:	4a05      	ldr	r2, [pc, #20]	@ (80262f0 <__sseek+0x28>)
 80262dc:	4013      	ands	r3, r2
 80262de:	81a3      	strh	r3, [r4, #12]
 80262e0:	bd70      	pop	{r4, r5, r6, pc}
 80262e2:	2280      	movs	r2, #128	@ 0x80
 80262e4:	0152      	lsls	r2, r2, #5
 80262e6:	4313      	orrs	r3, r2
 80262e8:	81a3      	strh	r3, [r4, #12]
 80262ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80262ec:	e7f8      	b.n	80262e0 <__sseek+0x18>
 80262ee:	46c0      	nop			@ (mov r8, r8)
 80262f0:	ffffefff 	.word	0xffffefff

080262f4 <__sclose>:
 80262f4:	b510      	push	{r4, lr}
 80262f6:	230e      	movs	r3, #14
 80262f8:	5ec9      	ldrsh	r1, [r1, r3]
 80262fa:	f000 f931 	bl	8026560 <_close_r>
 80262fe:	bd10      	pop	{r4, pc}

08026300 <_vsniprintf_r>:
 8026300:	b530      	push	{r4, r5, lr}
 8026302:	0005      	movs	r5, r0
 8026304:	0014      	movs	r4, r2
 8026306:	0008      	movs	r0, r1
 8026308:	001a      	movs	r2, r3
 802630a:	b09b      	sub	sp, #108	@ 0x6c
 802630c:	2c00      	cmp	r4, #0
 802630e:	da05      	bge.n	802631c <_vsniprintf_r+0x1c>
 8026310:	238b      	movs	r3, #139	@ 0x8b
 8026312:	2001      	movs	r0, #1
 8026314:	602b      	str	r3, [r5, #0]
 8026316:	4240      	negs	r0, r0
 8026318:	b01b      	add	sp, #108	@ 0x6c
 802631a:	bd30      	pop	{r4, r5, pc}
 802631c:	2382      	movs	r3, #130	@ 0x82
 802631e:	4669      	mov	r1, sp
 8026320:	009b      	lsls	r3, r3, #2
 8026322:	818b      	strh	r3, [r1, #12]
 8026324:	2100      	movs	r1, #0
 8026326:	9000      	str	r0, [sp, #0]
 8026328:	9119      	str	r1, [sp, #100]	@ 0x64
 802632a:	9004      	str	r0, [sp, #16]
 802632c:	428c      	cmp	r4, r1
 802632e:	d000      	beq.n	8026332 <_vsniprintf_r+0x32>
 8026330:	1e61      	subs	r1, r4, #1
 8026332:	2301      	movs	r3, #1
 8026334:	9102      	str	r1, [sp, #8]
 8026336:	9105      	str	r1, [sp, #20]
 8026338:	4669      	mov	r1, sp
 802633a:	425b      	negs	r3, r3
 802633c:	81cb      	strh	r3, [r1, #14]
 802633e:	0028      	movs	r0, r5
 8026340:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026342:	f002 f9bb 	bl	80286bc <_svfiprintf_r>
 8026346:	1c43      	adds	r3, r0, #1
 8026348:	da01      	bge.n	802634e <_vsniprintf_r+0x4e>
 802634a:	238b      	movs	r3, #139	@ 0x8b
 802634c:	602b      	str	r3, [r5, #0]
 802634e:	2c00      	cmp	r4, #0
 8026350:	d0e2      	beq.n	8026318 <_vsniprintf_r+0x18>
 8026352:	2200      	movs	r2, #0
 8026354:	9b00      	ldr	r3, [sp, #0]
 8026356:	701a      	strb	r2, [r3, #0]
 8026358:	e7de      	b.n	8026318 <_vsniprintf_r+0x18>
	...

0802635c <vsniprintf>:
 802635c:	b513      	push	{r0, r1, r4, lr}
 802635e:	4c04      	ldr	r4, [pc, #16]	@ (8026370 <vsniprintf+0x14>)
 8026360:	9300      	str	r3, [sp, #0]
 8026362:	0013      	movs	r3, r2
 8026364:	000a      	movs	r2, r1
 8026366:	0001      	movs	r1, r0
 8026368:	6820      	ldr	r0, [r4, #0]
 802636a:	f7ff ffc9 	bl	8026300 <_vsniprintf_r>
 802636e:	bd16      	pop	{r1, r2, r4, pc}
 8026370:	200003ec 	.word	0x200003ec

08026374 <__swbuf_r>:
 8026374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026376:	0006      	movs	r6, r0
 8026378:	000d      	movs	r5, r1
 802637a:	0014      	movs	r4, r2
 802637c:	2800      	cmp	r0, #0
 802637e:	d004      	beq.n	802638a <__swbuf_r+0x16>
 8026380:	6a03      	ldr	r3, [r0, #32]
 8026382:	2b00      	cmp	r3, #0
 8026384:	d101      	bne.n	802638a <__swbuf_r+0x16>
 8026386:	f7ff fea9 	bl	80260dc <__sinit>
 802638a:	69a3      	ldr	r3, [r4, #24]
 802638c:	60a3      	str	r3, [r4, #8]
 802638e:	89a3      	ldrh	r3, [r4, #12]
 8026390:	071b      	lsls	r3, r3, #28
 8026392:	d502      	bpl.n	802639a <__swbuf_r+0x26>
 8026394:	6923      	ldr	r3, [r4, #16]
 8026396:	2b00      	cmp	r3, #0
 8026398:	d109      	bne.n	80263ae <__swbuf_r+0x3a>
 802639a:	0021      	movs	r1, r4
 802639c:	0030      	movs	r0, r6
 802639e:	f000 f82b 	bl	80263f8 <__swsetup_r>
 80263a2:	2800      	cmp	r0, #0
 80263a4:	d003      	beq.n	80263ae <__swbuf_r+0x3a>
 80263a6:	2501      	movs	r5, #1
 80263a8:	426d      	negs	r5, r5
 80263aa:	0028      	movs	r0, r5
 80263ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80263ae:	6923      	ldr	r3, [r4, #16]
 80263b0:	6820      	ldr	r0, [r4, #0]
 80263b2:	b2ef      	uxtb	r7, r5
 80263b4:	1ac0      	subs	r0, r0, r3
 80263b6:	6963      	ldr	r3, [r4, #20]
 80263b8:	b2ed      	uxtb	r5, r5
 80263ba:	4283      	cmp	r3, r0
 80263bc:	dc05      	bgt.n	80263ca <__swbuf_r+0x56>
 80263be:	0021      	movs	r1, r4
 80263c0:	0030      	movs	r0, r6
 80263c2:	f002 fc43 	bl	8028c4c <_fflush_r>
 80263c6:	2800      	cmp	r0, #0
 80263c8:	d1ed      	bne.n	80263a6 <__swbuf_r+0x32>
 80263ca:	68a3      	ldr	r3, [r4, #8]
 80263cc:	3001      	adds	r0, #1
 80263ce:	3b01      	subs	r3, #1
 80263d0:	60a3      	str	r3, [r4, #8]
 80263d2:	6823      	ldr	r3, [r4, #0]
 80263d4:	1c5a      	adds	r2, r3, #1
 80263d6:	6022      	str	r2, [r4, #0]
 80263d8:	701f      	strb	r7, [r3, #0]
 80263da:	6963      	ldr	r3, [r4, #20]
 80263dc:	4283      	cmp	r3, r0
 80263de:	d004      	beq.n	80263ea <__swbuf_r+0x76>
 80263e0:	89a3      	ldrh	r3, [r4, #12]
 80263e2:	07db      	lsls	r3, r3, #31
 80263e4:	d5e1      	bpl.n	80263aa <__swbuf_r+0x36>
 80263e6:	2d0a      	cmp	r5, #10
 80263e8:	d1df      	bne.n	80263aa <__swbuf_r+0x36>
 80263ea:	0021      	movs	r1, r4
 80263ec:	0030      	movs	r0, r6
 80263ee:	f002 fc2d 	bl	8028c4c <_fflush_r>
 80263f2:	2800      	cmp	r0, #0
 80263f4:	d0d9      	beq.n	80263aa <__swbuf_r+0x36>
 80263f6:	e7d6      	b.n	80263a6 <__swbuf_r+0x32>

080263f8 <__swsetup_r>:
 80263f8:	4b2d      	ldr	r3, [pc, #180]	@ (80264b0 <__swsetup_r+0xb8>)
 80263fa:	b570      	push	{r4, r5, r6, lr}
 80263fc:	0005      	movs	r5, r0
 80263fe:	6818      	ldr	r0, [r3, #0]
 8026400:	000c      	movs	r4, r1
 8026402:	2800      	cmp	r0, #0
 8026404:	d004      	beq.n	8026410 <__swsetup_r+0x18>
 8026406:	6a03      	ldr	r3, [r0, #32]
 8026408:	2b00      	cmp	r3, #0
 802640a:	d101      	bne.n	8026410 <__swsetup_r+0x18>
 802640c:	f7ff fe66 	bl	80260dc <__sinit>
 8026410:	220c      	movs	r2, #12
 8026412:	5ea3      	ldrsh	r3, [r4, r2]
 8026414:	071a      	lsls	r2, r3, #28
 8026416:	d423      	bmi.n	8026460 <__swsetup_r+0x68>
 8026418:	06da      	lsls	r2, r3, #27
 802641a:	d407      	bmi.n	802642c <__swsetup_r+0x34>
 802641c:	2209      	movs	r2, #9
 802641e:	602a      	str	r2, [r5, #0]
 8026420:	2240      	movs	r2, #64	@ 0x40
 8026422:	2001      	movs	r0, #1
 8026424:	4313      	orrs	r3, r2
 8026426:	81a3      	strh	r3, [r4, #12]
 8026428:	4240      	negs	r0, r0
 802642a:	e03a      	b.n	80264a2 <__swsetup_r+0xaa>
 802642c:	075b      	lsls	r3, r3, #29
 802642e:	d513      	bpl.n	8026458 <__swsetup_r+0x60>
 8026430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026432:	2900      	cmp	r1, #0
 8026434:	d008      	beq.n	8026448 <__swsetup_r+0x50>
 8026436:	0023      	movs	r3, r4
 8026438:	3344      	adds	r3, #68	@ 0x44
 802643a:	4299      	cmp	r1, r3
 802643c:	d002      	beq.n	8026444 <__swsetup_r+0x4c>
 802643e:	0028      	movs	r0, r5
 8026440:	f000 ff9a 	bl	8027378 <_free_r>
 8026444:	2300      	movs	r3, #0
 8026446:	6363      	str	r3, [r4, #52]	@ 0x34
 8026448:	2224      	movs	r2, #36	@ 0x24
 802644a:	89a3      	ldrh	r3, [r4, #12]
 802644c:	4393      	bics	r3, r2
 802644e:	81a3      	strh	r3, [r4, #12]
 8026450:	2300      	movs	r3, #0
 8026452:	6063      	str	r3, [r4, #4]
 8026454:	6923      	ldr	r3, [r4, #16]
 8026456:	6023      	str	r3, [r4, #0]
 8026458:	2308      	movs	r3, #8
 802645a:	89a2      	ldrh	r2, [r4, #12]
 802645c:	4313      	orrs	r3, r2
 802645e:	81a3      	strh	r3, [r4, #12]
 8026460:	6923      	ldr	r3, [r4, #16]
 8026462:	2b00      	cmp	r3, #0
 8026464:	d10b      	bne.n	802647e <__swsetup_r+0x86>
 8026466:	21a0      	movs	r1, #160	@ 0xa0
 8026468:	2280      	movs	r2, #128	@ 0x80
 802646a:	89a3      	ldrh	r3, [r4, #12]
 802646c:	0089      	lsls	r1, r1, #2
 802646e:	0092      	lsls	r2, r2, #2
 8026470:	400b      	ands	r3, r1
 8026472:	4293      	cmp	r3, r2
 8026474:	d003      	beq.n	802647e <__swsetup_r+0x86>
 8026476:	0021      	movs	r1, r4
 8026478:	0028      	movs	r0, r5
 802647a:	f002 fc3d 	bl	8028cf8 <__smakebuf_r>
 802647e:	220c      	movs	r2, #12
 8026480:	5ea3      	ldrsh	r3, [r4, r2]
 8026482:	2101      	movs	r1, #1
 8026484:	001a      	movs	r2, r3
 8026486:	400a      	ands	r2, r1
 8026488:	420b      	tst	r3, r1
 802648a:	d00b      	beq.n	80264a4 <__swsetup_r+0xac>
 802648c:	2200      	movs	r2, #0
 802648e:	60a2      	str	r2, [r4, #8]
 8026490:	6962      	ldr	r2, [r4, #20]
 8026492:	4252      	negs	r2, r2
 8026494:	61a2      	str	r2, [r4, #24]
 8026496:	2000      	movs	r0, #0
 8026498:	6922      	ldr	r2, [r4, #16]
 802649a:	4282      	cmp	r2, r0
 802649c:	d101      	bne.n	80264a2 <__swsetup_r+0xaa>
 802649e:	061a      	lsls	r2, r3, #24
 80264a0:	d4be      	bmi.n	8026420 <__swsetup_r+0x28>
 80264a2:	bd70      	pop	{r4, r5, r6, pc}
 80264a4:	0799      	lsls	r1, r3, #30
 80264a6:	d400      	bmi.n	80264aa <__swsetup_r+0xb2>
 80264a8:	6962      	ldr	r2, [r4, #20]
 80264aa:	60a2      	str	r2, [r4, #8]
 80264ac:	e7f3      	b.n	8026496 <__swsetup_r+0x9e>
 80264ae:	46c0      	nop			@ (mov r8, r8)
 80264b0:	200003ec 	.word	0x200003ec

080264b4 <memset>:
 80264b4:	0003      	movs	r3, r0
 80264b6:	1882      	adds	r2, r0, r2
 80264b8:	4293      	cmp	r3, r2
 80264ba:	d100      	bne.n	80264be <memset+0xa>
 80264bc:	4770      	bx	lr
 80264be:	7019      	strb	r1, [r3, #0]
 80264c0:	3301      	adds	r3, #1
 80264c2:	e7f9      	b.n	80264b8 <memset+0x4>

080264c4 <strchr>:
 80264c4:	b2c9      	uxtb	r1, r1
 80264c6:	7803      	ldrb	r3, [r0, #0]
 80264c8:	2b00      	cmp	r3, #0
 80264ca:	d004      	beq.n	80264d6 <strchr+0x12>
 80264cc:	428b      	cmp	r3, r1
 80264ce:	d100      	bne.n	80264d2 <strchr+0xe>
 80264d0:	4770      	bx	lr
 80264d2:	3001      	adds	r0, #1
 80264d4:	e7f7      	b.n	80264c6 <strchr+0x2>
 80264d6:	424b      	negs	r3, r1
 80264d8:	4159      	adcs	r1, r3
 80264da:	4249      	negs	r1, r1
 80264dc:	4008      	ands	r0, r1
 80264de:	e7f7      	b.n	80264d0 <strchr+0xc>

080264e0 <strncmp>:
 80264e0:	b530      	push	{r4, r5, lr}
 80264e2:	0005      	movs	r5, r0
 80264e4:	1e10      	subs	r0, r2, #0
 80264e6:	d00b      	beq.n	8026500 <strncmp+0x20>
 80264e8:	2400      	movs	r4, #0
 80264ea:	3a01      	subs	r2, #1
 80264ec:	5d2b      	ldrb	r3, [r5, r4]
 80264ee:	5d08      	ldrb	r0, [r1, r4]
 80264f0:	4283      	cmp	r3, r0
 80264f2:	d104      	bne.n	80264fe <strncmp+0x1e>
 80264f4:	4294      	cmp	r4, r2
 80264f6:	d002      	beq.n	80264fe <strncmp+0x1e>
 80264f8:	3401      	adds	r4, #1
 80264fa:	2b00      	cmp	r3, #0
 80264fc:	d1f6      	bne.n	80264ec <strncmp+0xc>
 80264fe:	1a18      	subs	r0, r3, r0
 8026500:	bd30      	pop	{r4, r5, pc}

08026502 <strncpy>:
 8026502:	0003      	movs	r3, r0
 8026504:	b530      	push	{r4, r5, lr}
 8026506:	001d      	movs	r5, r3
 8026508:	2a00      	cmp	r2, #0
 802650a:	d006      	beq.n	802651a <strncpy+0x18>
 802650c:	780c      	ldrb	r4, [r1, #0]
 802650e:	3a01      	subs	r2, #1
 8026510:	3301      	adds	r3, #1
 8026512:	702c      	strb	r4, [r5, #0]
 8026514:	3101      	adds	r1, #1
 8026516:	2c00      	cmp	r4, #0
 8026518:	d1f5      	bne.n	8026506 <strncpy+0x4>
 802651a:	2100      	movs	r1, #0
 802651c:	189a      	adds	r2, r3, r2
 802651e:	4293      	cmp	r3, r2
 8026520:	d100      	bne.n	8026524 <strncpy+0x22>
 8026522:	bd30      	pop	{r4, r5, pc}
 8026524:	7019      	strb	r1, [r3, #0]
 8026526:	3301      	adds	r3, #1
 8026528:	e7f9      	b.n	802651e <strncpy+0x1c>

0802652a <strstr>:
 802652a:	780a      	ldrb	r2, [r1, #0]
 802652c:	b530      	push	{r4, r5, lr}
 802652e:	2a00      	cmp	r2, #0
 8026530:	d10c      	bne.n	802654c <strstr+0x22>
 8026532:	bd30      	pop	{r4, r5, pc}
 8026534:	429a      	cmp	r2, r3
 8026536:	d108      	bne.n	802654a <strstr+0x20>
 8026538:	2301      	movs	r3, #1
 802653a:	5ccc      	ldrb	r4, [r1, r3]
 802653c:	2c00      	cmp	r4, #0
 802653e:	d0f8      	beq.n	8026532 <strstr+0x8>
 8026540:	5cc5      	ldrb	r5, [r0, r3]
 8026542:	42a5      	cmp	r5, r4
 8026544:	d101      	bne.n	802654a <strstr+0x20>
 8026546:	3301      	adds	r3, #1
 8026548:	e7f7      	b.n	802653a <strstr+0x10>
 802654a:	3001      	adds	r0, #1
 802654c:	7803      	ldrb	r3, [r0, #0]
 802654e:	2b00      	cmp	r3, #0
 8026550:	d1f0      	bne.n	8026534 <strstr+0xa>
 8026552:	0018      	movs	r0, r3
 8026554:	e7ed      	b.n	8026532 <strstr+0x8>
	...

08026558 <_localeconv_r>:
 8026558:	4800      	ldr	r0, [pc, #0]	@ (802655c <_localeconv_r+0x4>)
 802655a:	4770      	bx	lr
 802655c:	20000370 	.word	0x20000370

08026560 <_close_r>:
 8026560:	2300      	movs	r3, #0
 8026562:	b570      	push	{r4, r5, r6, lr}
 8026564:	4d06      	ldr	r5, [pc, #24]	@ (8026580 <_close_r+0x20>)
 8026566:	0004      	movs	r4, r0
 8026568:	0008      	movs	r0, r1
 802656a:	602b      	str	r3, [r5, #0]
 802656c:	f7ec ffd2 	bl	8013514 <_close>
 8026570:	1c43      	adds	r3, r0, #1
 8026572:	d103      	bne.n	802657c <_close_r+0x1c>
 8026574:	682b      	ldr	r3, [r5, #0]
 8026576:	2b00      	cmp	r3, #0
 8026578:	d000      	beq.n	802657c <_close_r+0x1c>
 802657a:	6023      	str	r3, [r4, #0]
 802657c:	bd70      	pop	{r4, r5, r6, pc}
 802657e:	46c0      	nop			@ (mov r8, r8)
 8026580:	2000390c 	.word	0x2000390c

08026584 <_lseek_r>:
 8026584:	b570      	push	{r4, r5, r6, lr}
 8026586:	0004      	movs	r4, r0
 8026588:	0008      	movs	r0, r1
 802658a:	0011      	movs	r1, r2
 802658c:	001a      	movs	r2, r3
 802658e:	2300      	movs	r3, #0
 8026590:	4d05      	ldr	r5, [pc, #20]	@ (80265a8 <_lseek_r+0x24>)
 8026592:	602b      	str	r3, [r5, #0]
 8026594:	f7ec ffdf 	bl	8013556 <_lseek>
 8026598:	1c43      	adds	r3, r0, #1
 802659a:	d103      	bne.n	80265a4 <_lseek_r+0x20>
 802659c:	682b      	ldr	r3, [r5, #0]
 802659e:	2b00      	cmp	r3, #0
 80265a0:	d000      	beq.n	80265a4 <_lseek_r+0x20>
 80265a2:	6023      	str	r3, [r4, #0]
 80265a4:	bd70      	pop	{r4, r5, r6, pc}
 80265a6:	46c0      	nop			@ (mov r8, r8)
 80265a8:	2000390c 	.word	0x2000390c

080265ac <_read_r>:
 80265ac:	b570      	push	{r4, r5, r6, lr}
 80265ae:	0004      	movs	r4, r0
 80265b0:	0008      	movs	r0, r1
 80265b2:	0011      	movs	r1, r2
 80265b4:	001a      	movs	r2, r3
 80265b6:	2300      	movs	r3, #0
 80265b8:	4d05      	ldr	r5, [pc, #20]	@ (80265d0 <_read_r+0x24>)
 80265ba:	602b      	str	r3, [r5, #0]
 80265bc:	f7ec ff8d 	bl	80134da <_read>
 80265c0:	1c43      	adds	r3, r0, #1
 80265c2:	d103      	bne.n	80265cc <_read_r+0x20>
 80265c4:	682b      	ldr	r3, [r5, #0]
 80265c6:	2b00      	cmp	r3, #0
 80265c8:	d000      	beq.n	80265cc <_read_r+0x20>
 80265ca:	6023      	str	r3, [r4, #0]
 80265cc:	bd70      	pop	{r4, r5, r6, pc}
 80265ce:	46c0      	nop			@ (mov r8, r8)
 80265d0:	2000390c 	.word	0x2000390c

080265d4 <_write_r>:
 80265d4:	b570      	push	{r4, r5, r6, lr}
 80265d6:	0004      	movs	r4, r0
 80265d8:	0008      	movs	r0, r1
 80265da:	0011      	movs	r1, r2
 80265dc:	001a      	movs	r2, r3
 80265de:	2300      	movs	r3, #0
 80265e0:	4d05      	ldr	r5, [pc, #20]	@ (80265f8 <_write_r+0x24>)
 80265e2:	602b      	str	r3, [r5, #0]
 80265e4:	f7ed fc5a 	bl	8013e9c <_write>
 80265e8:	1c43      	adds	r3, r0, #1
 80265ea:	d103      	bne.n	80265f4 <_write_r+0x20>
 80265ec:	682b      	ldr	r3, [r5, #0]
 80265ee:	2b00      	cmp	r3, #0
 80265f0:	d000      	beq.n	80265f4 <_write_r+0x20>
 80265f2:	6023      	str	r3, [r4, #0]
 80265f4:	bd70      	pop	{r4, r5, r6, pc}
 80265f6:	46c0      	nop			@ (mov r8, r8)
 80265f8:	2000390c 	.word	0x2000390c

080265fc <__errno>:
 80265fc:	4b01      	ldr	r3, [pc, #4]	@ (8026604 <__errno+0x8>)
 80265fe:	6818      	ldr	r0, [r3, #0]
 8026600:	4770      	bx	lr
 8026602:	46c0      	nop			@ (mov r8, r8)
 8026604:	200003ec 	.word	0x200003ec

08026608 <__libc_init_array>:
 8026608:	b570      	push	{r4, r5, r6, lr}
 802660a:	2600      	movs	r6, #0
 802660c:	4c0c      	ldr	r4, [pc, #48]	@ (8026640 <__libc_init_array+0x38>)
 802660e:	4d0d      	ldr	r5, [pc, #52]	@ (8026644 <__libc_init_array+0x3c>)
 8026610:	1b64      	subs	r4, r4, r5
 8026612:	10a4      	asrs	r4, r4, #2
 8026614:	42a6      	cmp	r6, r4
 8026616:	d109      	bne.n	802662c <__libc_init_array+0x24>
 8026618:	2600      	movs	r6, #0
 802661a:	f003 ffcb 	bl	802a5b4 <_init>
 802661e:	4c0a      	ldr	r4, [pc, #40]	@ (8026648 <__libc_init_array+0x40>)
 8026620:	4d0a      	ldr	r5, [pc, #40]	@ (802664c <__libc_init_array+0x44>)
 8026622:	1b64      	subs	r4, r4, r5
 8026624:	10a4      	asrs	r4, r4, #2
 8026626:	42a6      	cmp	r6, r4
 8026628:	d105      	bne.n	8026636 <__libc_init_array+0x2e>
 802662a:	bd70      	pop	{r4, r5, r6, pc}
 802662c:	00b3      	lsls	r3, r6, #2
 802662e:	58eb      	ldr	r3, [r5, r3]
 8026630:	4798      	blx	r3
 8026632:	3601      	adds	r6, #1
 8026634:	e7ee      	b.n	8026614 <__libc_init_array+0xc>
 8026636:	00b3      	lsls	r3, r6, #2
 8026638:	58eb      	ldr	r3, [r5, r3]
 802663a:	4798      	blx	r3
 802663c:	3601      	adds	r6, #1
 802663e:	e7f2      	b.n	8026626 <__libc_init_array+0x1e>
 8026640:	0802ee20 	.word	0x0802ee20
 8026644:	0802ee20 	.word	0x0802ee20
 8026648:	0802ee24 	.word	0x0802ee24
 802664c:	0802ee20 	.word	0x0802ee20

08026650 <__retarget_lock_init_recursive>:
 8026650:	4770      	bx	lr

08026652 <__retarget_lock_acquire_recursive>:
 8026652:	4770      	bx	lr

08026654 <__retarget_lock_release_recursive>:
 8026654:	4770      	bx	lr

08026656 <memchr>:
 8026656:	b2c9      	uxtb	r1, r1
 8026658:	1882      	adds	r2, r0, r2
 802665a:	4290      	cmp	r0, r2
 802665c:	d101      	bne.n	8026662 <memchr+0xc>
 802665e:	2000      	movs	r0, #0
 8026660:	4770      	bx	lr
 8026662:	7803      	ldrb	r3, [r0, #0]
 8026664:	428b      	cmp	r3, r1
 8026666:	d0fb      	beq.n	8026660 <memchr+0xa>
 8026668:	3001      	adds	r0, #1
 802666a:	e7f6      	b.n	802665a <memchr+0x4>

0802666c <memcpy>:
 802666c:	2300      	movs	r3, #0
 802666e:	b510      	push	{r4, lr}
 8026670:	429a      	cmp	r2, r3
 8026672:	d100      	bne.n	8026676 <memcpy+0xa>
 8026674:	bd10      	pop	{r4, pc}
 8026676:	5ccc      	ldrb	r4, [r1, r3]
 8026678:	54c4      	strb	r4, [r0, r3]
 802667a:	3301      	adds	r3, #1
 802667c:	e7f8      	b.n	8026670 <memcpy+0x4>
	...

08026680 <nan>:
 8026680:	2000      	movs	r0, #0
 8026682:	4901      	ldr	r1, [pc, #4]	@ (8026688 <nan+0x8>)
 8026684:	4770      	bx	lr
 8026686:	46c0      	nop			@ (mov r8, r8)
 8026688:	7ff80000 	.word	0x7ff80000

0802668c <quorem>:
 802668c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802668e:	6903      	ldr	r3, [r0, #16]
 8026690:	690c      	ldr	r4, [r1, #16]
 8026692:	b089      	sub	sp, #36	@ 0x24
 8026694:	9003      	str	r0, [sp, #12]
 8026696:	9106      	str	r1, [sp, #24]
 8026698:	2000      	movs	r0, #0
 802669a:	42a3      	cmp	r3, r4
 802669c:	db63      	blt.n	8026766 <quorem+0xda>
 802669e:	000b      	movs	r3, r1
 80266a0:	3c01      	subs	r4, #1
 80266a2:	3314      	adds	r3, #20
 80266a4:	00a5      	lsls	r5, r4, #2
 80266a6:	9304      	str	r3, [sp, #16]
 80266a8:	195b      	adds	r3, r3, r5
 80266aa:	9305      	str	r3, [sp, #20]
 80266ac:	9b03      	ldr	r3, [sp, #12]
 80266ae:	3314      	adds	r3, #20
 80266b0:	9301      	str	r3, [sp, #4]
 80266b2:	195d      	adds	r5, r3, r5
 80266b4:	9b05      	ldr	r3, [sp, #20]
 80266b6:	682f      	ldr	r7, [r5, #0]
 80266b8:	681e      	ldr	r6, [r3, #0]
 80266ba:	0038      	movs	r0, r7
 80266bc:	3601      	adds	r6, #1
 80266be:	0031      	movs	r1, r6
 80266c0:	f7d9 fd70 	bl	80001a4 <__udivsi3>
 80266c4:	9002      	str	r0, [sp, #8]
 80266c6:	42b7      	cmp	r7, r6
 80266c8:	d327      	bcc.n	802671a <quorem+0x8e>
 80266ca:	9b04      	ldr	r3, [sp, #16]
 80266cc:	2700      	movs	r7, #0
 80266ce:	469c      	mov	ip, r3
 80266d0:	9e01      	ldr	r6, [sp, #4]
 80266d2:	9707      	str	r7, [sp, #28]
 80266d4:	4662      	mov	r2, ip
 80266d6:	ca08      	ldmia	r2!, {r3}
 80266d8:	6830      	ldr	r0, [r6, #0]
 80266da:	4694      	mov	ip, r2
 80266dc:	9a02      	ldr	r2, [sp, #8]
 80266de:	b299      	uxth	r1, r3
 80266e0:	4351      	muls	r1, r2
 80266e2:	0c1b      	lsrs	r3, r3, #16
 80266e4:	4353      	muls	r3, r2
 80266e6:	19c9      	adds	r1, r1, r7
 80266e8:	0c0a      	lsrs	r2, r1, #16
 80266ea:	189b      	adds	r3, r3, r2
 80266ec:	b289      	uxth	r1, r1
 80266ee:	b282      	uxth	r2, r0
 80266f0:	1a52      	subs	r2, r2, r1
 80266f2:	9907      	ldr	r1, [sp, #28]
 80266f4:	0c1f      	lsrs	r7, r3, #16
 80266f6:	1852      	adds	r2, r2, r1
 80266f8:	0c00      	lsrs	r0, r0, #16
 80266fa:	b29b      	uxth	r3, r3
 80266fc:	1411      	asrs	r1, r2, #16
 80266fe:	1ac3      	subs	r3, r0, r3
 8026700:	185b      	adds	r3, r3, r1
 8026702:	1419      	asrs	r1, r3, #16
 8026704:	b292      	uxth	r2, r2
 8026706:	041b      	lsls	r3, r3, #16
 8026708:	431a      	orrs	r2, r3
 802670a:	9b05      	ldr	r3, [sp, #20]
 802670c:	9107      	str	r1, [sp, #28]
 802670e:	c604      	stmia	r6!, {r2}
 8026710:	4563      	cmp	r3, ip
 8026712:	d2df      	bcs.n	80266d4 <quorem+0x48>
 8026714:	682b      	ldr	r3, [r5, #0]
 8026716:	2b00      	cmp	r3, #0
 8026718:	d02b      	beq.n	8026772 <quorem+0xe6>
 802671a:	9906      	ldr	r1, [sp, #24]
 802671c:	9803      	ldr	r0, [sp, #12]
 802671e:	f001 fd6f 	bl	8028200 <__mcmp>
 8026722:	2800      	cmp	r0, #0
 8026724:	db1e      	blt.n	8026764 <quorem+0xd8>
 8026726:	2600      	movs	r6, #0
 8026728:	9d01      	ldr	r5, [sp, #4]
 802672a:	9904      	ldr	r1, [sp, #16]
 802672c:	c901      	ldmia	r1!, {r0}
 802672e:	682b      	ldr	r3, [r5, #0]
 8026730:	b287      	uxth	r7, r0
 8026732:	b29a      	uxth	r2, r3
 8026734:	1bd2      	subs	r2, r2, r7
 8026736:	1992      	adds	r2, r2, r6
 8026738:	0c00      	lsrs	r0, r0, #16
 802673a:	0c1b      	lsrs	r3, r3, #16
 802673c:	1a1b      	subs	r3, r3, r0
 802673e:	1410      	asrs	r0, r2, #16
 8026740:	181b      	adds	r3, r3, r0
 8026742:	141e      	asrs	r6, r3, #16
 8026744:	b292      	uxth	r2, r2
 8026746:	041b      	lsls	r3, r3, #16
 8026748:	431a      	orrs	r2, r3
 802674a:	9b05      	ldr	r3, [sp, #20]
 802674c:	c504      	stmia	r5!, {r2}
 802674e:	428b      	cmp	r3, r1
 8026750:	d2ec      	bcs.n	802672c <quorem+0xa0>
 8026752:	9a01      	ldr	r2, [sp, #4]
 8026754:	00a3      	lsls	r3, r4, #2
 8026756:	18d3      	adds	r3, r2, r3
 8026758:	681a      	ldr	r2, [r3, #0]
 802675a:	2a00      	cmp	r2, #0
 802675c:	d014      	beq.n	8026788 <quorem+0xfc>
 802675e:	9b02      	ldr	r3, [sp, #8]
 8026760:	3301      	adds	r3, #1
 8026762:	9302      	str	r3, [sp, #8]
 8026764:	9802      	ldr	r0, [sp, #8]
 8026766:	b009      	add	sp, #36	@ 0x24
 8026768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802676a:	682b      	ldr	r3, [r5, #0]
 802676c:	2b00      	cmp	r3, #0
 802676e:	d104      	bne.n	802677a <quorem+0xee>
 8026770:	3c01      	subs	r4, #1
 8026772:	9b01      	ldr	r3, [sp, #4]
 8026774:	3d04      	subs	r5, #4
 8026776:	42ab      	cmp	r3, r5
 8026778:	d3f7      	bcc.n	802676a <quorem+0xde>
 802677a:	9b03      	ldr	r3, [sp, #12]
 802677c:	611c      	str	r4, [r3, #16]
 802677e:	e7cc      	b.n	802671a <quorem+0x8e>
 8026780:	681a      	ldr	r2, [r3, #0]
 8026782:	2a00      	cmp	r2, #0
 8026784:	d104      	bne.n	8026790 <quorem+0x104>
 8026786:	3c01      	subs	r4, #1
 8026788:	9a01      	ldr	r2, [sp, #4]
 802678a:	3b04      	subs	r3, #4
 802678c:	429a      	cmp	r2, r3
 802678e:	d3f7      	bcc.n	8026780 <quorem+0xf4>
 8026790:	9b03      	ldr	r3, [sp, #12]
 8026792:	611c      	str	r4, [r3, #16]
 8026794:	e7e3      	b.n	802675e <quorem+0xd2>
	...

08026798 <_dtoa_r>:
 8026798:	b5f0      	push	{r4, r5, r6, r7, lr}
 802679a:	0014      	movs	r4, r2
 802679c:	001d      	movs	r5, r3
 802679e:	69c6      	ldr	r6, [r0, #28]
 80267a0:	b09d      	sub	sp, #116	@ 0x74
 80267a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80267a4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80267a6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80267a8:	9003      	str	r0, [sp, #12]
 80267aa:	2e00      	cmp	r6, #0
 80267ac:	d10f      	bne.n	80267ce <_dtoa_r+0x36>
 80267ae:	2010      	movs	r0, #16
 80267b0:	f001 f986 	bl	8027ac0 <malloc>
 80267b4:	9b03      	ldr	r3, [sp, #12]
 80267b6:	1e02      	subs	r2, r0, #0
 80267b8:	61d8      	str	r0, [r3, #28]
 80267ba:	d104      	bne.n	80267c6 <_dtoa_r+0x2e>
 80267bc:	21ef      	movs	r1, #239	@ 0xef
 80267be:	4bc7      	ldr	r3, [pc, #796]	@ (8026adc <_dtoa_r+0x344>)
 80267c0:	48c7      	ldr	r0, [pc, #796]	@ (8026ae0 <_dtoa_r+0x348>)
 80267c2:	f002 fb23 	bl	8028e0c <__assert_func>
 80267c6:	6046      	str	r6, [r0, #4]
 80267c8:	6086      	str	r6, [r0, #8]
 80267ca:	6006      	str	r6, [r0, #0]
 80267cc:	60c6      	str	r6, [r0, #12]
 80267ce:	9b03      	ldr	r3, [sp, #12]
 80267d0:	69db      	ldr	r3, [r3, #28]
 80267d2:	6819      	ldr	r1, [r3, #0]
 80267d4:	2900      	cmp	r1, #0
 80267d6:	d00b      	beq.n	80267f0 <_dtoa_r+0x58>
 80267d8:	685a      	ldr	r2, [r3, #4]
 80267da:	2301      	movs	r3, #1
 80267dc:	4093      	lsls	r3, r2
 80267de:	604a      	str	r2, [r1, #4]
 80267e0:	608b      	str	r3, [r1, #8]
 80267e2:	9803      	ldr	r0, [sp, #12]
 80267e4:	f001 fa7e 	bl	8027ce4 <_Bfree>
 80267e8:	2200      	movs	r2, #0
 80267ea:	9b03      	ldr	r3, [sp, #12]
 80267ec:	69db      	ldr	r3, [r3, #28]
 80267ee:	601a      	str	r2, [r3, #0]
 80267f0:	2d00      	cmp	r5, #0
 80267f2:	da1e      	bge.n	8026832 <_dtoa_r+0x9a>
 80267f4:	2301      	movs	r3, #1
 80267f6:	603b      	str	r3, [r7, #0]
 80267f8:	006b      	lsls	r3, r5, #1
 80267fa:	085b      	lsrs	r3, r3, #1
 80267fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80267fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026800:	4bb8      	ldr	r3, [pc, #736]	@ (8026ae4 <_dtoa_r+0x34c>)
 8026802:	4ab8      	ldr	r2, [pc, #736]	@ (8026ae4 <_dtoa_r+0x34c>)
 8026804:	403b      	ands	r3, r7
 8026806:	4293      	cmp	r3, r2
 8026808:	d116      	bne.n	8026838 <_dtoa_r+0xa0>
 802680a:	4bb7      	ldr	r3, [pc, #732]	@ (8026ae8 <_dtoa_r+0x350>)
 802680c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802680e:	6013      	str	r3, [r2, #0]
 8026810:	033b      	lsls	r3, r7, #12
 8026812:	0b1b      	lsrs	r3, r3, #12
 8026814:	4323      	orrs	r3, r4
 8026816:	d101      	bne.n	802681c <_dtoa_r+0x84>
 8026818:	f000 fd80 	bl	802731c <_dtoa_r+0xb84>
 802681c:	4bb3      	ldr	r3, [pc, #716]	@ (8026aec <_dtoa_r+0x354>)
 802681e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026820:	9308      	str	r3, [sp, #32]
 8026822:	2a00      	cmp	r2, #0
 8026824:	d002      	beq.n	802682c <_dtoa_r+0x94>
 8026826:	4bb2      	ldr	r3, [pc, #712]	@ (8026af0 <_dtoa_r+0x358>)
 8026828:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802682a:	6013      	str	r3, [r2, #0]
 802682c:	9808      	ldr	r0, [sp, #32]
 802682e:	b01d      	add	sp, #116	@ 0x74
 8026830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026832:	2300      	movs	r3, #0
 8026834:	603b      	str	r3, [r7, #0]
 8026836:	e7e2      	b.n	80267fe <_dtoa_r+0x66>
 8026838:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802683a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802683c:	9212      	str	r2, [sp, #72]	@ 0x48
 802683e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026840:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026842:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026844:	2200      	movs	r2, #0
 8026846:	2300      	movs	r3, #0
 8026848:	f7d9 fe32 	bl	80004b0 <__aeabi_dcmpeq>
 802684c:	1e06      	subs	r6, r0, #0
 802684e:	d00b      	beq.n	8026868 <_dtoa_r+0xd0>
 8026850:	2301      	movs	r3, #1
 8026852:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026854:	6013      	str	r3, [r2, #0]
 8026856:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026858:	2b00      	cmp	r3, #0
 802685a:	d002      	beq.n	8026862 <_dtoa_r+0xca>
 802685c:	4ba5      	ldr	r3, [pc, #660]	@ (8026af4 <_dtoa_r+0x35c>)
 802685e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026860:	6013      	str	r3, [r2, #0]
 8026862:	4ba5      	ldr	r3, [pc, #660]	@ (8026af8 <_dtoa_r+0x360>)
 8026864:	9308      	str	r3, [sp, #32]
 8026866:	e7e1      	b.n	802682c <_dtoa_r+0x94>
 8026868:	ab1a      	add	r3, sp, #104	@ 0x68
 802686a:	9301      	str	r3, [sp, #4]
 802686c:	ab1b      	add	r3, sp, #108	@ 0x6c
 802686e:	9300      	str	r3, [sp, #0]
 8026870:	9803      	ldr	r0, [sp, #12]
 8026872:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026874:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026876:	f001 fde5 	bl	8028444 <__d2b>
 802687a:	007a      	lsls	r2, r7, #1
 802687c:	9005      	str	r0, [sp, #20]
 802687e:	0d52      	lsrs	r2, r2, #21
 8026880:	d100      	bne.n	8026884 <_dtoa_r+0xec>
 8026882:	e07b      	b.n	802697c <_dtoa_r+0x1e4>
 8026884:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026886:	9618      	str	r6, [sp, #96]	@ 0x60
 8026888:	0319      	lsls	r1, r3, #12
 802688a:	4b9c      	ldr	r3, [pc, #624]	@ (8026afc <_dtoa_r+0x364>)
 802688c:	0b09      	lsrs	r1, r1, #12
 802688e:	430b      	orrs	r3, r1
 8026890:	499b      	ldr	r1, [pc, #620]	@ (8026b00 <_dtoa_r+0x368>)
 8026892:	1857      	adds	r7, r2, r1
 8026894:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026896:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026898:	0019      	movs	r1, r3
 802689a:	2200      	movs	r2, #0
 802689c:	4b99      	ldr	r3, [pc, #612]	@ (8026b04 <_dtoa_r+0x36c>)
 802689e:	f7dc fb3f 	bl	8002f20 <__aeabi_dsub>
 80268a2:	4a99      	ldr	r2, [pc, #612]	@ (8026b08 <_dtoa_r+0x370>)
 80268a4:	4b99      	ldr	r3, [pc, #612]	@ (8026b0c <_dtoa_r+0x374>)
 80268a6:	f7dc f855 	bl	8002954 <__aeabi_dmul>
 80268aa:	4a99      	ldr	r2, [pc, #612]	@ (8026b10 <_dtoa_r+0x378>)
 80268ac:	4b99      	ldr	r3, [pc, #612]	@ (8026b14 <_dtoa_r+0x37c>)
 80268ae:	f7db f851 	bl	8001954 <__aeabi_dadd>
 80268b2:	0004      	movs	r4, r0
 80268b4:	0038      	movs	r0, r7
 80268b6:	000d      	movs	r5, r1
 80268b8:	f7dc ff9a 	bl	80037f0 <__aeabi_i2d>
 80268bc:	4a96      	ldr	r2, [pc, #600]	@ (8026b18 <_dtoa_r+0x380>)
 80268be:	4b97      	ldr	r3, [pc, #604]	@ (8026b1c <_dtoa_r+0x384>)
 80268c0:	f7dc f848 	bl	8002954 <__aeabi_dmul>
 80268c4:	0002      	movs	r2, r0
 80268c6:	000b      	movs	r3, r1
 80268c8:	0020      	movs	r0, r4
 80268ca:	0029      	movs	r1, r5
 80268cc:	f7db f842 	bl	8001954 <__aeabi_dadd>
 80268d0:	0004      	movs	r4, r0
 80268d2:	000d      	movs	r5, r1
 80268d4:	f7dc ff50 	bl	8003778 <__aeabi_d2iz>
 80268d8:	2200      	movs	r2, #0
 80268da:	9004      	str	r0, [sp, #16]
 80268dc:	2300      	movs	r3, #0
 80268de:	0020      	movs	r0, r4
 80268e0:	0029      	movs	r1, r5
 80268e2:	f7d9 fdeb 	bl	80004bc <__aeabi_dcmplt>
 80268e6:	2800      	cmp	r0, #0
 80268e8:	d00b      	beq.n	8026902 <_dtoa_r+0x16a>
 80268ea:	9804      	ldr	r0, [sp, #16]
 80268ec:	f7dc ff80 	bl	80037f0 <__aeabi_i2d>
 80268f0:	002b      	movs	r3, r5
 80268f2:	0022      	movs	r2, r4
 80268f4:	f7d9 fddc 	bl	80004b0 <__aeabi_dcmpeq>
 80268f8:	4243      	negs	r3, r0
 80268fa:	4158      	adcs	r0, r3
 80268fc:	9b04      	ldr	r3, [sp, #16]
 80268fe:	1a1b      	subs	r3, r3, r0
 8026900:	9304      	str	r3, [sp, #16]
 8026902:	2301      	movs	r3, #1
 8026904:	9315      	str	r3, [sp, #84]	@ 0x54
 8026906:	9b04      	ldr	r3, [sp, #16]
 8026908:	2b16      	cmp	r3, #22
 802690a:	d810      	bhi.n	802692e <_dtoa_r+0x196>
 802690c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802690e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026910:	9a04      	ldr	r2, [sp, #16]
 8026912:	4b83      	ldr	r3, [pc, #524]	@ (8026b20 <_dtoa_r+0x388>)
 8026914:	00d2      	lsls	r2, r2, #3
 8026916:	189b      	adds	r3, r3, r2
 8026918:	681a      	ldr	r2, [r3, #0]
 802691a:	685b      	ldr	r3, [r3, #4]
 802691c:	f7d9 fdce 	bl	80004bc <__aeabi_dcmplt>
 8026920:	2800      	cmp	r0, #0
 8026922:	d047      	beq.n	80269b4 <_dtoa_r+0x21c>
 8026924:	9b04      	ldr	r3, [sp, #16]
 8026926:	3b01      	subs	r3, #1
 8026928:	9304      	str	r3, [sp, #16]
 802692a:	2300      	movs	r3, #0
 802692c:	9315      	str	r3, [sp, #84]	@ 0x54
 802692e:	2200      	movs	r2, #0
 8026930:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026932:	9206      	str	r2, [sp, #24]
 8026934:	1bdb      	subs	r3, r3, r7
 8026936:	1e5a      	subs	r2, r3, #1
 8026938:	d53e      	bpl.n	80269b8 <_dtoa_r+0x220>
 802693a:	2201      	movs	r2, #1
 802693c:	1ad3      	subs	r3, r2, r3
 802693e:	9306      	str	r3, [sp, #24]
 8026940:	2300      	movs	r3, #0
 8026942:	930d      	str	r3, [sp, #52]	@ 0x34
 8026944:	9b04      	ldr	r3, [sp, #16]
 8026946:	2b00      	cmp	r3, #0
 8026948:	db38      	blt.n	80269bc <_dtoa_r+0x224>
 802694a:	9a04      	ldr	r2, [sp, #16]
 802694c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802694e:	4694      	mov	ip, r2
 8026950:	4463      	add	r3, ip
 8026952:	930d      	str	r3, [sp, #52]	@ 0x34
 8026954:	2300      	movs	r3, #0
 8026956:	9214      	str	r2, [sp, #80]	@ 0x50
 8026958:	930f      	str	r3, [sp, #60]	@ 0x3c
 802695a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802695c:	2401      	movs	r4, #1
 802695e:	2b09      	cmp	r3, #9
 8026960:	d862      	bhi.n	8026a28 <_dtoa_r+0x290>
 8026962:	2b05      	cmp	r3, #5
 8026964:	dd02      	ble.n	802696c <_dtoa_r+0x1d4>
 8026966:	2400      	movs	r4, #0
 8026968:	3b04      	subs	r3, #4
 802696a:	9322      	str	r3, [sp, #136]	@ 0x88
 802696c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802696e:	1e98      	subs	r0, r3, #2
 8026970:	2803      	cmp	r0, #3
 8026972:	d863      	bhi.n	8026a3c <_dtoa_r+0x2a4>
 8026974:	f7d9 fc02 	bl	800017c <__gnu_thumb1_case_uqi>
 8026978:	2b385654 	.word	0x2b385654
 802697c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802697e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8026980:	18f6      	adds	r6, r6, r3
 8026982:	4b68      	ldr	r3, [pc, #416]	@ (8026b24 <_dtoa_r+0x38c>)
 8026984:	18f2      	adds	r2, r6, r3
 8026986:	2a20      	cmp	r2, #32
 8026988:	dd0f      	ble.n	80269aa <_dtoa_r+0x212>
 802698a:	2340      	movs	r3, #64	@ 0x40
 802698c:	1a9b      	subs	r3, r3, r2
 802698e:	409f      	lsls	r7, r3
 8026990:	4b65      	ldr	r3, [pc, #404]	@ (8026b28 <_dtoa_r+0x390>)
 8026992:	0038      	movs	r0, r7
 8026994:	18f3      	adds	r3, r6, r3
 8026996:	40dc      	lsrs	r4, r3
 8026998:	4320      	orrs	r0, r4
 802699a:	f7dc ff57 	bl	800384c <__aeabi_ui2d>
 802699e:	2201      	movs	r2, #1
 80269a0:	4b62      	ldr	r3, [pc, #392]	@ (8026b2c <_dtoa_r+0x394>)
 80269a2:	1e77      	subs	r7, r6, #1
 80269a4:	18cb      	adds	r3, r1, r3
 80269a6:	9218      	str	r2, [sp, #96]	@ 0x60
 80269a8:	e776      	b.n	8026898 <_dtoa_r+0x100>
 80269aa:	2320      	movs	r3, #32
 80269ac:	0020      	movs	r0, r4
 80269ae:	1a9b      	subs	r3, r3, r2
 80269b0:	4098      	lsls	r0, r3
 80269b2:	e7f2      	b.n	802699a <_dtoa_r+0x202>
 80269b4:	9015      	str	r0, [sp, #84]	@ 0x54
 80269b6:	e7ba      	b.n	802692e <_dtoa_r+0x196>
 80269b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80269ba:	e7c3      	b.n	8026944 <_dtoa_r+0x1ac>
 80269bc:	9b06      	ldr	r3, [sp, #24]
 80269be:	9a04      	ldr	r2, [sp, #16]
 80269c0:	1a9b      	subs	r3, r3, r2
 80269c2:	9306      	str	r3, [sp, #24]
 80269c4:	4253      	negs	r3, r2
 80269c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80269c8:	2300      	movs	r3, #0
 80269ca:	9314      	str	r3, [sp, #80]	@ 0x50
 80269cc:	e7c5      	b.n	802695a <_dtoa_r+0x1c2>
 80269ce:	2301      	movs	r3, #1
 80269d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80269d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80269d4:	4694      	mov	ip, r2
 80269d6:	9b04      	ldr	r3, [sp, #16]
 80269d8:	4463      	add	r3, ip
 80269da:	930e      	str	r3, [sp, #56]	@ 0x38
 80269dc:	3301      	adds	r3, #1
 80269de:	9309      	str	r3, [sp, #36]	@ 0x24
 80269e0:	2b00      	cmp	r3, #0
 80269e2:	dc08      	bgt.n	80269f6 <_dtoa_r+0x25e>
 80269e4:	2301      	movs	r3, #1
 80269e6:	e006      	b.n	80269f6 <_dtoa_r+0x25e>
 80269e8:	2301      	movs	r3, #1
 80269ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80269ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80269ee:	2b00      	cmp	r3, #0
 80269f0:	dd28      	ble.n	8026a44 <_dtoa_r+0x2ac>
 80269f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80269f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80269f6:	9a03      	ldr	r2, [sp, #12]
 80269f8:	2100      	movs	r1, #0
 80269fa:	69d0      	ldr	r0, [r2, #28]
 80269fc:	2204      	movs	r2, #4
 80269fe:	0015      	movs	r5, r2
 8026a00:	3514      	adds	r5, #20
 8026a02:	429d      	cmp	r5, r3
 8026a04:	d923      	bls.n	8026a4e <_dtoa_r+0x2b6>
 8026a06:	6041      	str	r1, [r0, #4]
 8026a08:	9803      	ldr	r0, [sp, #12]
 8026a0a:	f001 f927 	bl	8027c5c <_Balloc>
 8026a0e:	9008      	str	r0, [sp, #32]
 8026a10:	2800      	cmp	r0, #0
 8026a12:	d11f      	bne.n	8026a54 <_dtoa_r+0x2bc>
 8026a14:	21b0      	movs	r1, #176	@ 0xb0
 8026a16:	4b46      	ldr	r3, [pc, #280]	@ (8026b30 <_dtoa_r+0x398>)
 8026a18:	4831      	ldr	r0, [pc, #196]	@ (8026ae0 <_dtoa_r+0x348>)
 8026a1a:	9a08      	ldr	r2, [sp, #32]
 8026a1c:	31ff      	adds	r1, #255	@ 0xff
 8026a1e:	e6d0      	b.n	80267c2 <_dtoa_r+0x2a>
 8026a20:	2300      	movs	r3, #0
 8026a22:	e7e2      	b.n	80269ea <_dtoa_r+0x252>
 8026a24:	2300      	movs	r3, #0
 8026a26:	e7d3      	b.n	80269d0 <_dtoa_r+0x238>
 8026a28:	2300      	movs	r3, #0
 8026a2a:	9410      	str	r4, [sp, #64]	@ 0x40
 8026a2c:	9322      	str	r3, [sp, #136]	@ 0x88
 8026a2e:	3b01      	subs	r3, #1
 8026a30:	2200      	movs	r2, #0
 8026a32:	930e      	str	r3, [sp, #56]	@ 0x38
 8026a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a36:	3313      	adds	r3, #19
 8026a38:	9223      	str	r2, [sp, #140]	@ 0x8c
 8026a3a:	e7dc      	b.n	80269f6 <_dtoa_r+0x25e>
 8026a3c:	2301      	movs	r3, #1
 8026a3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8026a40:	3b02      	subs	r3, #2
 8026a42:	e7f5      	b.n	8026a30 <_dtoa_r+0x298>
 8026a44:	2301      	movs	r3, #1
 8026a46:	001a      	movs	r2, r3
 8026a48:	930e      	str	r3, [sp, #56]	@ 0x38
 8026a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a4c:	e7f4      	b.n	8026a38 <_dtoa_r+0x2a0>
 8026a4e:	3101      	adds	r1, #1
 8026a50:	0052      	lsls	r2, r2, #1
 8026a52:	e7d4      	b.n	80269fe <_dtoa_r+0x266>
 8026a54:	9b03      	ldr	r3, [sp, #12]
 8026a56:	9a08      	ldr	r2, [sp, #32]
 8026a58:	69db      	ldr	r3, [r3, #28]
 8026a5a:	601a      	str	r2, [r3, #0]
 8026a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a5e:	2b0e      	cmp	r3, #14
 8026a60:	d900      	bls.n	8026a64 <_dtoa_r+0x2cc>
 8026a62:	e0d6      	b.n	8026c12 <_dtoa_r+0x47a>
 8026a64:	2c00      	cmp	r4, #0
 8026a66:	d100      	bne.n	8026a6a <_dtoa_r+0x2d2>
 8026a68:	e0d3      	b.n	8026c12 <_dtoa_r+0x47a>
 8026a6a:	9b04      	ldr	r3, [sp, #16]
 8026a6c:	2b00      	cmp	r3, #0
 8026a6e:	dd63      	ble.n	8026b38 <_dtoa_r+0x3a0>
 8026a70:	210f      	movs	r1, #15
 8026a72:	9a04      	ldr	r2, [sp, #16]
 8026a74:	4b2a      	ldr	r3, [pc, #168]	@ (8026b20 <_dtoa_r+0x388>)
 8026a76:	400a      	ands	r2, r1
 8026a78:	00d2      	lsls	r2, r2, #3
 8026a7a:	189b      	adds	r3, r3, r2
 8026a7c:	681e      	ldr	r6, [r3, #0]
 8026a7e:	685f      	ldr	r7, [r3, #4]
 8026a80:	9b04      	ldr	r3, [sp, #16]
 8026a82:	2402      	movs	r4, #2
 8026a84:	111d      	asrs	r5, r3, #4
 8026a86:	05db      	lsls	r3, r3, #23
 8026a88:	d50a      	bpl.n	8026aa0 <_dtoa_r+0x308>
 8026a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8026b34 <_dtoa_r+0x39c>)
 8026a8c:	400d      	ands	r5, r1
 8026a8e:	6a1a      	ldr	r2, [r3, #32]
 8026a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026a92:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026a94:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026a96:	f7db fb23 	bl	80020e0 <__aeabi_ddiv>
 8026a9a:	900a      	str	r0, [sp, #40]	@ 0x28
 8026a9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026a9e:	3401      	adds	r4, #1
 8026aa0:	4b24      	ldr	r3, [pc, #144]	@ (8026b34 <_dtoa_r+0x39c>)
 8026aa2:	930c      	str	r3, [sp, #48]	@ 0x30
 8026aa4:	2d00      	cmp	r5, #0
 8026aa6:	d108      	bne.n	8026aba <_dtoa_r+0x322>
 8026aa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026aaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026aac:	0032      	movs	r2, r6
 8026aae:	003b      	movs	r3, r7
 8026ab0:	f7db fb16 	bl	80020e0 <__aeabi_ddiv>
 8026ab4:	900a      	str	r0, [sp, #40]	@ 0x28
 8026ab6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026ab8:	e059      	b.n	8026b6e <_dtoa_r+0x3d6>
 8026aba:	2301      	movs	r3, #1
 8026abc:	421d      	tst	r5, r3
 8026abe:	d009      	beq.n	8026ad4 <_dtoa_r+0x33c>
 8026ac0:	18e4      	adds	r4, r4, r3
 8026ac2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026ac4:	0030      	movs	r0, r6
 8026ac6:	681a      	ldr	r2, [r3, #0]
 8026ac8:	685b      	ldr	r3, [r3, #4]
 8026aca:	0039      	movs	r1, r7
 8026acc:	f7db ff42 	bl	8002954 <__aeabi_dmul>
 8026ad0:	0006      	movs	r6, r0
 8026ad2:	000f      	movs	r7, r1
 8026ad4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026ad6:	106d      	asrs	r5, r5, #1
 8026ad8:	3308      	adds	r3, #8
 8026ada:	e7e2      	b.n	8026aa2 <_dtoa_r+0x30a>
 8026adc:	0802e9df 	.word	0x0802e9df
 8026ae0:	0802e9f6 	.word	0x0802e9f6
 8026ae4:	7ff00000 	.word	0x7ff00000
 8026ae8:	0000270f 	.word	0x0000270f
 8026aec:	0802e9db 	.word	0x0802e9db
 8026af0:	0802e9de 	.word	0x0802e9de
 8026af4:	0802e9a7 	.word	0x0802e9a7
 8026af8:	0802e9a6 	.word	0x0802e9a6
 8026afc:	3ff00000 	.word	0x3ff00000
 8026b00:	fffffc01 	.word	0xfffffc01
 8026b04:	3ff80000 	.word	0x3ff80000
 8026b08:	636f4361 	.word	0x636f4361
 8026b0c:	3fd287a7 	.word	0x3fd287a7
 8026b10:	8b60c8b3 	.word	0x8b60c8b3
 8026b14:	3fc68a28 	.word	0x3fc68a28
 8026b18:	509f79fb 	.word	0x509f79fb
 8026b1c:	3fd34413 	.word	0x3fd34413
 8026b20:	0802ecf0 	.word	0x0802ecf0
 8026b24:	00000432 	.word	0x00000432
 8026b28:	00000412 	.word	0x00000412
 8026b2c:	fe100000 	.word	0xfe100000
 8026b30:	0802ea4e 	.word	0x0802ea4e
 8026b34:	0802ecc8 	.word	0x0802ecc8
 8026b38:	9b04      	ldr	r3, [sp, #16]
 8026b3a:	2402      	movs	r4, #2
 8026b3c:	2b00      	cmp	r3, #0
 8026b3e:	d016      	beq.n	8026b6e <_dtoa_r+0x3d6>
 8026b40:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026b42:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026b44:	220f      	movs	r2, #15
 8026b46:	425d      	negs	r5, r3
 8026b48:	402a      	ands	r2, r5
 8026b4a:	4bd5      	ldr	r3, [pc, #852]	@ (8026ea0 <_dtoa_r+0x708>)
 8026b4c:	00d2      	lsls	r2, r2, #3
 8026b4e:	189b      	adds	r3, r3, r2
 8026b50:	681a      	ldr	r2, [r3, #0]
 8026b52:	685b      	ldr	r3, [r3, #4]
 8026b54:	f7db fefe 	bl	8002954 <__aeabi_dmul>
 8026b58:	2701      	movs	r7, #1
 8026b5a:	2300      	movs	r3, #0
 8026b5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8026b5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026b60:	4ed0      	ldr	r6, [pc, #832]	@ (8026ea4 <_dtoa_r+0x70c>)
 8026b62:	112d      	asrs	r5, r5, #4
 8026b64:	2d00      	cmp	r5, #0
 8026b66:	d000      	beq.n	8026b6a <_dtoa_r+0x3d2>
 8026b68:	e095      	b.n	8026c96 <_dtoa_r+0x4fe>
 8026b6a:	2b00      	cmp	r3, #0
 8026b6c:	d1a2      	bne.n	8026ab4 <_dtoa_r+0x31c>
 8026b6e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026b70:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026b72:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026b74:	2b00      	cmp	r3, #0
 8026b76:	d100      	bne.n	8026b7a <_dtoa_r+0x3e2>
 8026b78:	e098      	b.n	8026cac <_dtoa_r+0x514>
 8026b7a:	2200      	movs	r2, #0
 8026b7c:	0030      	movs	r0, r6
 8026b7e:	0039      	movs	r1, r7
 8026b80:	4bc9      	ldr	r3, [pc, #804]	@ (8026ea8 <_dtoa_r+0x710>)
 8026b82:	f7d9 fc9b 	bl	80004bc <__aeabi_dcmplt>
 8026b86:	2800      	cmp	r0, #0
 8026b88:	d100      	bne.n	8026b8c <_dtoa_r+0x3f4>
 8026b8a:	e08f      	b.n	8026cac <_dtoa_r+0x514>
 8026b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b8e:	2b00      	cmp	r3, #0
 8026b90:	d100      	bne.n	8026b94 <_dtoa_r+0x3fc>
 8026b92:	e08b      	b.n	8026cac <_dtoa_r+0x514>
 8026b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026b96:	2b00      	cmp	r3, #0
 8026b98:	dd37      	ble.n	8026c0a <_dtoa_r+0x472>
 8026b9a:	9b04      	ldr	r3, [sp, #16]
 8026b9c:	2200      	movs	r2, #0
 8026b9e:	3b01      	subs	r3, #1
 8026ba0:	930c      	str	r3, [sp, #48]	@ 0x30
 8026ba2:	0030      	movs	r0, r6
 8026ba4:	4bc1      	ldr	r3, [pc, #772]	@ (8026eac <_dtoa_r+0x714>)
 8026ba6:	0039      	movs	r1, r7
 8026ba8:	f7db fed4 	bl	8002954 <__aeabi_dmul>
 8026bac:	900a      	str	r0, [sp, #40]	@ 0x28
 8026bae:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026bb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026bb2:	3401      	adds	r4, #1
 8026bb4:	0020      	movs	r0, r4
 8026bb6:	9311      	str	r3, [sp, #68]	@ 0x44
 8026bb8:	f7dc fe1a 	bl	80037f0 <__aeabi_i2d>
 8026bbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026bc0:	f7db fec8 	bl	8002954 <__aeabi_dmul>
 8026bc4:	4bba      	ldr	r3, [pc, #744]	@ (8026eb0 <_dtoa_r+0x718>)
 8026bc6:	2200      	movs	r2, #0
 8026bc8:	f7da fec4 	bl	8001954 <__aeabi_dadd>
 8026bcc:	4bb9      	ldr	r3, [pc, #740]	@ (8026eb4 <_dtoa_r+0x71c>)
 8026bce:	0006      	movs	r6, r0
 8026bd0:	18cf      	adds	r7, r1, r3
 8026bd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026bd4:	2b00      	cmp	r3, #0
 8026bd6:	d16d      	bne.n	8026cb4 <_dtoa_r+0x51c>
 8026bd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026bda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026bdc:	2200      	movs	r2, #0
 8026bde:	4bb6      	ldr	r3, [pc, #728]	@ (8026eb8 <_dtoa_r+0x720>)
 8026be0:	f7dc f99e 	bl	8002f20 <__aeabi_dsub>
 8026be4:	0032      	movs	r2, r6
 8026be6:	003b      	movs	r3, r7
 8026be8:	0004      	movs	r4, r0
 8026bea:	000d      	movs	r5, r1
 8026bec:	f7d9 fc7a 	bl	80004e4 <__aeabi_dcmpgt>
 8026bf0:	2800      	cmp	r0, #0
 8026bf2:	d000      	beq.n	8026bf6 <_dtoa_r+0x45e>
 8026bf4:	e2b6      	b.n	8027164 <_dtoa_r+0x9cc>
 8026bf6:	2180      	movs	r1, #128	@ 0x80
 8026bf8:	0609      	lsls	r1, r1, #24
 8026bfa:	187b      	adds	r3, r7, r1
 8026bfc:	0032      	movs	r2, r6
 8026bfe:	0020      	movs	r0, r4
 8026c00:	0029      	movs	r1, r5
 8026c02:	f7d9 fc5b 	bl	80004bc <__aeabi_dcmplt>
 8026c06:	2800      	cmp	r0, #0
 8026c08:	d128      	bne.n	8026c5c <_dtoa_r+0x4c4>
 8026c0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026c0c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026c10:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026c12:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026c14:	2b00      	cmp	r3, #0
 8026c16:	da00      	bge.n	8026c1a <_dtoa_r+0x482>
 8026c18:	e174      	b.n	8026f04 <_dtoa_r+0x76c>
 8026c1a:	9a04      	ldr	r2, [sp, #16]
 8026c1c:	2a0e      	cmp	r2, #14
 8026c1e:	dd00      	ble.n	8026c22 <_dtoa_r+0x48a>
 8026c20:	e170      	b.n	8026f04 <_dtoa_r+0x76c>
 8026c22:	4b9f      	ldr	r3, [pc, #636]	@ (8026ea0 <_dtoa_r+0x708>)
 8026c24:	00d2      	lsls	r2, r2, #3
 8026c26:	189b      	adds	r3, r3, r2
 8026c28:	685c      	ldr	r4, [r3, #4]
 8026c2a:	681b      	ldr	r3, [r3, #0]
 8026c2c:	9306      	str	r3, [sp, #24]
 8026c2e:	9407      	str	r4, [sp, #28]
 8026c30:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026c32:	2b00      	cmp	r3, #0
 8026c34:	db00      	blt.n	8026c38 <_dtoa_r+0x4a0>
 8026c36:	e0e7      	b.n	8026e08 <_dtoa_r+0x670>
 8026c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c3a:	2b00      	cmp	r3, #0
 8026c3c:	dd00      	ble.n	8026c40 <_dtoa_r+0x4a8>
 8026c3e:	e0e3      	b.n	8026e08 <_dtoa_r+0x670>
 8026c40:	d10c      	bne.n	8026c5c <_dtoa_r+0x4c4>
 8026c42:	9806      	ldr	r0, [sp, #24]
 8026c44:	9907      	ldr	r1, [sp, #28]
 8026c46:	2200      	movs	r2, #0
 8026c48:	4b9b      	ldr	r3, [pc, #620]	@ (8026eb8 <_dtoa_r+0x720>)
 8026c4a:	f7db fe83 	bl	8002954 <__aeabi_dmul>
 8026c4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026c50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026c52:	f7d9 fc51 	bl	80004f8 <__aeabi_dcmpge>
 8026c56:	2800      	cmp	r0, #0
 8026c58:	d100      	bne.n	8026c5c <_dtoa_r+0x4c4>
 8026c5a:	e286      	b.n	802716a <_dtoa_r+0x9d2>
 8026c5c:	2600      	movs	r6, #0
 8026c5e:	0037      	movs	r7, r6
 8026c60:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026c62:	9c08      	ldr	r4, [sp, #32]
 8026c64:	43db      	mvns	r3, r3
 8026c66:	930c      	str	r3, [sp, #48]	@ 0x30
 8026c68:	9704      	str	r7, [sp, #16]
 8026c6a:	2700      	movs	r7, #0
 8026c6c:	0031      	movs	r1, r6
 8026c6e:	9803      	ldr	r0, [sp, #12]
 8026c70:	f001 f838 	bl	8027ce4 <_Bfree>
 8026c74:	9b04      	ldr	r3, [sp, #16]
 8026c76:	2b00      	cmp	r3, #0
 8026c78:	d100      	bne.n	8026c7c <_dtoa_r+0x4e4>
 8026c7a:	e0bb      	b.n	8026df4 <_dtoa_r+0x65c>
 8026c7c:	2f00      	cmp	r7, #0
 8026c7e:	d005      	beq.n	8026c8c <_dtoa_r+0x4f4>
 8026c80:	429f      	cmp	r7, r3
 8026c82:	d003      	beq.n	8026c8c <_dtoa_r+0x4f4>
 8026c84:	0039      	movs	r1, r7
 8026c86:	9803      	ldr	r0, [sp, #12]
 8026c88:	f001 f82c 	bl	8027ce4 <_Bfree>
 8026c8c:	9904      	ldr	r1, [sp, #16]
 8026c8e:	9803      	ldr	r0, [sp, #12]
 8026c90:	f001 f828 	bl	8027ce4 <_Bfree>
 8026c94:	e0ae      	b.n	8026df4 <_dtoa_r+0x65c>
 8026c96:	423d      	tst	r5, r7
 8026c98:	d005      	beq.n	8026ca6 <_dtoa_r+0x50e>
 8026c9a:	6832      	ldr	r2, [r6, #0]
 8026c9c:	6873      	ldr	r3, [r6, #4]
 8026c9e:	f7db fe59 	bl	8002954 <__aeabi_dmul>
 8026ca2:	003b      	movs	r3, r7
 8026ca4:	3401      	adds	r4, #1
 8026ca6:	106d      	asrs	r5, r5, #1
 8026ca8:	3608      	adds	r6, #8
 8026caa:	e75b      	b.n	8026b64 <_dtoa_r+0x3cc>
 8026cac:	9b04      	ldr	r3, [sp, #16]
 8026cae:	930c      	str	r3, [sp, #48]	@ 0x30
 8026cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026cb2:	e77f      	b.n	8026bb4 <_dtoa_r+0x41c>
 8026cb4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8026ea0 <_dtoa_r+0x708>)
 8026cb8:	3a01      	subs	r2, #1
 8026cba:	00d2      	lsls	r2, r2, #3
 8026cbc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8026cbe:	189b      	adds	r3, r3, r2
 8026cc0:	681a      	ldr	r2, [r3, #0]
 8026cc2:	685b      	ldr	r3, [r3, #4]
 8026cc4:	2900      	cmp	r1, #0
 8026cc6:	d04c      	beq.n	8026d62 <_dtoa_r+0x5ca>
 8026cc8:	2000      	movs	r0, #0
 8026cca:	497c      	ldr	r1, [pc, #496]	@ (8026ebc <_dtoa_r+0x724>)
 8026ccc:	f7db fa08 	bl	80020e0 <__aeabi_ddiv>
 8026cd0:	0032      	movs	r2, r6
 8026cd2:	003b      	movs	r3, r7
 8026cd4:	f7dc f924 	bl	8002f20 <__aeabi_dsub>
 8026cd8:	9a08      	ldr	r2, [sp, #32]
 8026cda:	0006      	movs	r6, r0
 8026cdc:	4694      	mov	ip, r2
 8026cde:	000f      	movs	r7, r1
 8026ce0:	9b08      	ldr	r3, [sp, #32]
 8026ce2:	9316      	str	r3, [sp, #88]	@ 0x58
 8026ce4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026ce6:	4463      	add	r3, ip
 8026ce8:	9311      	str	r3, [sp, #68]	@ 0x44
 8026cea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026cec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026cee:	f7dc fd43 	bl	8003778 <__aeabi_d2iz>
 8026cf2:	0005      	movs	r5, r0
 8026cf4:	f7dc fd7c 	bl	80037f0 <__aeabi_i2d>
 8026cf8:	0002      	movs	r2, r0
 8026cfa:	000b      	movs	r3, r1
 8026cfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026cfe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d00:	f7dc f90e 	bl	8002f20 <__aeabi_dsub>
 8026d04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026d06:	3530      	adds	r5, #48	@ 0x30
 8026d08:	1c5c      	adds	r4, r3, #1
 8026d0a:	701d      	strb	r5, [r3, #0]
 8026d0c:	0032      	movs	r2, r6
 8026d0e:	003b      	movs	r3, r7
 8026d10:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d12:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d14:	f7d9 fbd2 	bl	80004bc <__aeabi_dcmplt>
 8026d18:	2800      	cmp	r0, #0
 8026d1a:	d16b      	bne.n	8026df4 <_dtoa_r+0x65c>
 8026d1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026d20:	2000      	movs	r0, #0
 8026d22:	4961      	ldr	r1, [pc, #388]	@ (8026ea8 <_dtoa_r+0x710>)
 8026d24:	f7dc f8fc 	bl	8002f20 <__aeabi_dsub>
 8026d28:	0032      	movs	r2, r6
 8026d2a:	003b      	movs	r3, r7
 8026d2c:	f7d9 fbc6 	bl	80004bc <__aeabi_dcmplt>
 8026d30:	2800      	cmp	r0, #0
 8026d32:	d000      	beq.n	8026d36 <_dtoa_r+0x59e>
 8026d34:	e0c6      	b.n	8026ec4 <_dtoa_r+0x72c>
 8026d36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d38:	42a3      	cmp	r3, r4
 8026d3a:	d100      	bne.n	8026d3e <_dtoa_r+0x5a6>
 8026d3c:	e765      	b.n	8026c0a <_dtoa_r+0x472>
 8026d3e:	2200      	movs	r2, #0
 8026d40:	0030      	movs	r0, r6
 8026d42:	0039      	movs	r1, r7
 8026d44:	4b59      	ldr	r3, [pc, #356]	@ (8026eac <_dtoa_r+0x714>)
 8026d46:	f7db fe05 	bl	8002954 <__aeabi_dmul>
 8026d4a:	2200      	movs	r2, #0
 8026d4c:	0006      	movs	r6, r0
 8026d4e:	000f      	movs	r7, r1
 8026d50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d54:	4b55      	ldr	r3, [pc, #340]	@ (8026eac <_dtoa_r+0x714>)
 8026d56:	f7db fdfd 	bl	8002954 <__aeabi_dmul>
 8026d5a:	9416      	str	r4, [sp, #88]	@ 0x58
 8026d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d60:	e7c3      	b.n	8026cea <_dtoa_r+0x552>
 8026d62:	0030      	movs	r0, r6
 8026d64:	0039      	movs	r1, r7
 8026d66:	f7db fdf5 	bl	8002954 <__aeabi_dmul>
 8026d6a:	9d08      	ldr	r5, [sp, #32]
 8026d6c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026d6e:	002b      	movs	r3, r5
 8026d70:	4694      	mov	ip, r2
 8026d72:	9016      	str	r0, [sp, #88]	@ 0x58
 8026d74:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026d76:	4463      	add	r3, ip
 8026d78:	9319      	str	r3, [sp, #100]	@ 0x64
 8026d7a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d7e:	f7dc fcfb 	bl	8003778 <__aeabi_d2iz>
 8026d82:	0004      	movs	r4, r0
 8026d84:	f7dc fd34 	bl	80037f0 <__aeabi_i2d>
 8026d88:	000b      	movs	r3, r1
 8026d8a:	0002      	movs	r2, r0
 8026d8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d8e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d90:	f7dc f8c6 	bl	8002f20 <__aeabi_dsub>
 8026d94:	3430      	adds	r4, #48	@ 0x30
 8026d96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026d98:	702c      	strb	r4, [r5, #0]
 8026d9a:	3501      	adds	r5, #1
 8026d9c:	0006      	movs	r6, r0
 8026d9e:	000f      	movs	r7, r1
 8026da0:	42ab      	cmp	r3, r5
 8026da2:	d12a      	bne.n	8026dfa <_dtoa_r+0x662>
 8026da4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8026da6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8026da8:	9b08      	ldr	r3, [sp, #32]
 8026daa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026dac:	469c      	mov	ip, r3
 8026dae:	2200      	movs	r2, #0
 8026db0:	4b42      	ldr	r3, [pc, #264]	@ (8026ebc <_dtoa_r+0x724>)
 8026db2:	4464      	add	r4, ip
 8026db4:	f7da fdce 	bl	8001954 <__aeabi_dadd>
 8026db8:	0002      	movs	r2, r0
 8026dba:	000b      	movs	r3, r1
 8026dbc:	0030      	movs	r0, r6
 8026dbe:	0039      	movs	r1, r7
 8026dc0:	f7d9 fb90 	bl	80004e4 <__aeabi_dcmpgt>
 8026dc4:	2800      	cmp	r0, #0
 8026dc6:	d000      	beq.n	8026dca <_dtoa_r+0x632>
 8026dc8:	e07c      	b.n	8026ec4 <_dtoa_r+0x72c>
 8026dca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026dcc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026dce:	2000      	movs	r0, #0
 8026dd0:	493a      	ldr	r1, [pc, #232]	@ (8026ebc <_dtoa_r+0x724>)
 8026dd2:	f7dc f8a5 	bl	8002f20 <__aeabi_dsub>
 8026dd6:	0002      	movs	r2, r0
 8026dd8:	000b      	movs	r3, r1
 8026dda:	0030      	movs	r0, r6
 8026ddc:	0039      	movs	r1, r7
 8026dde:	f7d9 fb6d 	bl	80004bc <__aeabi_dcmplt>
 8026de2:	2800      	cmp	r0, #0
 8026de4:	d100      	bne.n	8026de8 <_dtoa_r+0x650>
 8026de6:	e710      	b.n	8026c0a <_dtoa_r+0x472>
 8026de8:	0023      	movs	r3, r4
 8026dea:	3c01      	subs	r4, #1
 8026dec:	7822      	ldrb	r2, [r4, #0]
 8026dee:	2a30      	cmp	r2, #48	@ 0x30
 8026df0:	d0fa      	beq.n	8026de8 <_dtoa_r+0x650>
 8026df2:	001c      	movs	r4, r3
 8026df4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026df6:	9304      	str	r3, [sp, #16]
 8026df8:	e042      	b.n	8026e80 <_dtoa_r+0x6e8>
 8026dfa:	2200      	movs	r2, #0
 8026dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8026eac <_dtoa_r+0x714>)
 8026dfe:	f7db fda9 	bl	8002954 <__aeabi_dmul>
 8026e02:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e06:	e7b8      	b.n	8026d7a <_dtoa_r+0x5e2>
 8026e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e0a:	9d08      	ldr	r5, [sp, #32]
 8026e0c:	3b01      	subs	r3, #1
 8026e0e:	195b      	adds	r3, r3, r5
 8026e10:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026e12:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026e14:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e16:	9a06      	ldr	r2, [sp, #24]
 8026e18:	9b07      	ldr	r3, [sp, #28]
 8026e1a:	0030      	movs	r0, r6
 8026e1c:	0039      	movs	r1, r7
 8026e1e:	f7db f95f 	bl	80020e0 <__aeabi_ddiv>
 8026e22:	f7dc fca9 	bl	8003778 <__aeabi_d2iz>
 8026e26:	9009      	str	r0, [sp, #36]	@ 0x24
 8026e28:	f7dc fce2 	bl	80037f0 <__aeabi_i2d>
 8026e2c:	9a06      	ldr	r2, [sp, #24]
 8026e2e:	9b07      	ldr	r3, [sp, #28]
 8026e30:	f7db fd90 	bl	8002954 <__aeabi_dmul>
 8026e34:	0002      	movs	r2, r0
 8026e36:	000b      	movs	r3, r1
 8026e38:	0030      	movs	r0, r6
 8026e3a:	0039      	movs	r1, r7
 8026e3c:	f7dc f870 	bl	8002f20 <__aeabi_dsub>
 8026e40:	002b      	movs	r3, r5
 8026e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026e44:	3501      	adds	r5, #1
 8026e46:	3230      	adds	r2, #48	@ 0x30
 8026e48:	701a      	strb	r2, [r3, #0]
 8026e4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026e4c:	002c      	movs	r4, r5
 8026e4e:	429a      	cmp	r2, r3
 8026e50:	d14b      	bne.n	8026eea <_dtoa_r+0x752>
 8026e52:	0002      	movs	r2, r0
 8026e54:	000b      	movs	r3, r1
 8026e56:	f7da fd7d 	bl	8001954 <__aeabi_dadd>
 8026e5a:	9a06      	ldr	r2, [sp, #24]
 8026e5c:	9b07      	ldr	r3, [sp, #28]
 8026e5e:	0006      	movs	r6, r0
 8026e60:	000f      	movs	r7, r1
 8026e62:	f7d9 fb3f 	bl	80004e4 <__aeabi_dcmpgt>
 8026e66:	2800      	cmp	r0, #0
 8026e68:	d12a      	bne.n	8026ec0 <_dtoa_r+0x728>
 8026e6a:	9a06      	ldr	r2, [sp, #24]
 8026e6c:	9b07      	ldr	r3, [sp, #28]
 8026e6e:	0030      	movs	r0, r6
 8026e70:	0039      	movs	r1, r7
 8026e72:	f7d9 fb1d 	bl	80004b0 <__aeabi_dcmpeq>
 8026e76:	2800      	cmp	r0, #0
 8026e78:	d002      	beq.n	8026e80 <_dtoa_r+0x6e8>
 8026e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e7c:	07dd      	lsls	r5, r3, #31
 8026e7e:	d41f      	bmi.n	8026ec0 <_dtoa_r+0x728>
 8026e80:	9905      	ldr	r1, [sp, #20]
 8026e82:	9803      	ldr	r0, [sp, #12]
 8026e84:	f000 ff2e 	bl	8027ce4 <_Bfree>
 8026e88:	2300      	movs	r3, #0
 8026e8a:	7023      	strb	r3, [r4, #0]
 8026e8c:	9b04      	ldr	r3, [sp, #16]
 8026e8e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026e90:	3301      	adds	r3, #1
 8026e92:	6013      	str	r3, [r2, #0]
 8026e94:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026e96:	2b00      	cmp	r3, #0
 8026e98:	d100      	bne.n	8026e9c <_dtoa_r+0x704>
 8026e9a:	e4c7      	b.n	802682c <_dtoa_r+0x94>
 8026e9c:	601c      	str	r4, [r3, #0]
 8026e9e:	e4c5      	b.n	802682c <_dtoa_r+0x94>
 8026ea0:	0802ecf0 	.word	0x0802ecf0
 8026ea4:	0802ecc8 	.word	0x0802ecc8
 8026ea8:	3ff00000 	.word	0x3ff00000
 8026eac:	40240000 	.word	0x40240000
 8026eb0:	401c0000 	.word	0x401c0000
 8026eb4:	fcc00000 	.word	0xfcc00000
 8026eb8:	40140000 	.word	0x40140000
 8026ebc:	3fe00000 	.word	0x3fe00000
 8026ec0:	9b04      	ldr	r3, [sp, #16]
 8026ec2:	930c      	str	r3, [sp, #48]	@ 0x30
 8026ec4:	0023      	movs	r3, r4
 8026ec6:	001c      	movs	r4, r3
 8026ec8:	3b01      	subs	r3, #1
 8026eca:	781a      	ldrb	r2, [r3, #0]
 8026ecc:	2a39      	cmp	r2, #57	@ 0x39
 8026ece:	d108      	bne.n	8026ee2 <_dtoa_r+0x74a>
 8026ed0:	9a08      	ldr	r2, [sp, #32]
 8026ed2:	429a      	cmp	r2, r3
 8026ed4:	d1f7      	bne.n	8026ec6 <_dtoa_r+0x72e>
 8026ed6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026ed8:	9908      	ldr	r1, [sp, #32]
 8026eda:	3201      	adds	r2, #1
 8026edc:	920c      	str	r2, [sp, #48]	@ 0x30
 8026ede:	2230      	movs	r2, #48	@ 0x30
 8026ee0:	700a      	strb	r2, [r1, #0]
 8026ee2:	781a      	ldrb	r2, [r3, #0]
 8026ee4:	3201      	adds	r2, #1
 8026ee6:	701a      	strb	r2, [r3, #0]
 8026ee8:	e784      	b.n	8026df4 <_dtoa_r+0x65c>
 8026eea:	2200      	movs	r2, #0
 8026eec:	4bc6      	ldr	r3, [pc, #792]	@ (8027208 <_dtoa_r+0xa70>)
 8026eee:	f7db fd31 	bl	8002954 <__aeabi_dmul>
 8026ef2:	2200      	movs	r2, #0
 8026ef4:	2300      	movs	r3, #0
 8026ef6:	0006      	movs	r6, r0
 8026ef8:	000f      	movs	r7, r1
 8026efa:	f7d9 fad9 	bl	80004b0 <__aeabi_dcmpeq>
 8026efe:	2800      	cmp	r0, #0
 8026f00:	d089      	beq.n	8026e16 <_dtoa_r+0x67e>
 8026f02:	e7bd      	b.n	8026e80 <_dtoa_r+0x6e8>
 8026f04:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026f06:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026f08:	9c06      	ldr	r4, [sp, #24]
 8026f0a:	2f00      	cmp	r7, #0
 8026f0c:	d014      	beq.n	8026f38 <_dtoa_r+0x7a0>
 8026f0e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026f10:	2a01      	cmp	r2, #1
 8026f12:	dd00      	ble.n	8026f16 <_dtoa_r+0x77e>
 8026f14:	e0e4      	b.n	80270e0 <_dtoa_r+0x948>
 8026f16:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026f18:	2a00      	cmp	r2, #0
 8026f1a:	d100      	bne.n	8026f1e <_dtoa_r+0x786>
 8026f1c:	e0da      	b.n	80270d4 <_dtoa_r+0x93c>
 8026f1e:	4abb      	ldr	r2, [pc, #748]	@ (802720c <_dtoa_r+0xa74>)
 8026f20:	189b      	adds	r3, r3, r2
 8026f22:	9a06      	ldr	r2, [sp, #24]
 8026f24:	2101      	movs	r1, #1
 8026f26:	18d2      	adds	r2, r2, r3
 8026f28:	9206      	str	r2, [sp, #24]
 8026f2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026f2c:	9803      	ldr	r0, [sp, #12]
 8026f2e:	18d3      	adds	r3, r2, r3
 8026f30:	930d      	str	r3, [sp, #52]	@ 0x34
 8026f32:	f000 ffdb 	bl	8027eec <__i2b>
 8026f36:	0007      	movs	r7, r0
 8026f38:	2c00      	cmp	r4, #0
 8026f3a:	d00e      	beq.n	8026f5a <_dtoa_r+0x7c2>
 8026f3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026f3e:	2b00      	cmp	r3, #0
 8026f40:	dd0b      	ble.n	8026f5a <_dtoa_r+0x7c2>
 8026f42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026f44:	0023      	movs	r3, r4
 8026f46:	4294      	cmp	r4, r2
 8026f48:	dd00      	ble.n	8026f4c <_dtoa_r+0x7b4>
 8026f4a:	0013      	movs	r3, r2
 8026f4c:	9a06      	ldr	r2, [sp, #24]
 8026f4e:	1ae4      	subs	r4, r4, r3
 8026f50:	1ad2      	subs	r2, r2, r3
 8026f52:	9206      	str	r2, [sp, #24]
 8026f54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026f56:	1ad3      	subs	r3, r2, r3
 8026f58:	930d      	str	r3, [sp, #52]	@ 0x34
 8026f5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026f5c:	2b00      	cmp	r3, #0
 8026f5e:	d021      	beq.n	8026fa4 <_dtoa_r+0x80c>
 8026f60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026f62:	2b00      	cmp	r3, #0
 8026f64:	d100      	bne.n	8026f68 <_dtoa_r+0x7d0>
 8026f66:	e0d3      	b.n	8027110 <_dtoa_r+0x978>
 8026f68:	9e05      	ldr	r6, [sp, #20]
 8026f6a:	2d00      	cmp	r5, #0
 8026f6c:	d014      	beq.n	8026f98 <_dtoa_r+0x800>
 8026f6e:	0039      	movs	r1, r7
 8026f70:	002a      	movs	r2, r5
 8026f72:	9803      	ldr	r0, [sp, #12]
 8026f74:	f001 f87c 	bl	8028070 <__pow5mult>
 8026f78:	9a05      	ldr	r2, [sp, #20]
 8026f7a:	0001      	movs	r1, r0
 8026f7c:	0007      	movs	r7, r0
 8026f7e:	9803      	ldr	r0, [sp, #12]
 8026f80:	f000 ffcc 	bl	8027f1c <__multiply>
 8026f84:	0006      	movs	r6, r0
 8026f86:	9905      	ldr	r1, [sp, #20]
 8026f88:	9803      	ldr	r0, [sp, #12]
 8026f8a:	f000 feab 	bl	8027ce4 <_Bfree>
 8026f8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026f90:	9605      	str	r6, [sp, #20]
 8026f92:	1b5b      	subs	r3, r3, r5
 8026f94:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026f96:	d005      	beq.n	8026fa4 <_dtoa_r+0x80c>
 8026f98:	0031      	movs	r1, r6
 8026f9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026f9c:	9803      	ldr	r0, [sp, #12]
 8026f9e:	f001 f867 	bl	8028070 <__pow5mult>
 8026fa2:	9005      	str	r0, [sp, #20]
 8026fa4:	2101      	movs	r1, #1
 8026fa6:	9803      	ldr	r0, [sp, #12]
 8026fa8:	f000 ffa0 	bl	8027eec <__i2b>
 8026fac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026fae:	0006      	movs	r6, r0
 8026fb0:	2b00      	cmp	r3, #0
 8026fb2:	d100      	bne.n	8026fb6 <_dtoa_r+0x81e>
 8026fb4:	e1bc      	b.n	8027330 <_dtoa_r+0xb98>
 8026fb6:	001a      	movs	r2, r3
 8026fb8:	0001      	movs	r1, r0
 8026fba:	9803      	ldr	r0, [sp, #12]
 8026fbc:	f001 f858 	bl	8028070 <__pow5mult>
 8026fc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026fc2:	0006      	movs	r6, r0
 8026fc4:	2500      	movs	r5, #0
 8026fc6:	2b01      	cmp	r3, #1
 8026fc8:	dc16      	bgt.n	8026ff8 <_dtoa_r+0x860>
 8026fca:	2500      	movs	r5, #0
 8026fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026fce:	42ab      	cmp	r3, r5
 8026fd0:	d10e      	bne.n	8026ff0 <_dtoa_r+0x858>
 8026fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026fd4:	031b      	lsls	r3, r3, #12
 8026fd6:	42ab      	cmp	r3, r5
 8026fd8:	d10a      	bne.n	8026ff0 <_dtoa_r+0x858>
 8026fda:	4b8d      	ldr	r3, [pc, #564]	@ (8027210 <_dtoa_r+0xa78>)
 8026fdc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026fde:	4213      	tst	r3, r2
 8026fe0:	d006      	beq.n	8026ff0 <_dtoa_r+0x858>
 8026fe2:	9b06      	ldr	r3, [sp, #24]
 8026fe4:	3501      	adds	r5, #1
 8026fe6:	3301      	adds	r3, #1
 8026fe8:	9306      	str	r3, [sp, #24]
 8026fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026fec:	3301      	adds	r3, #1
 8026fee:	930d      	str	r3, [sp, #52]	@ 0x34
 8026ff0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026ff2:	2001      	movs	r0, #1
 8026ff4:	2b00      	cmp	r3, #0
 8026ff6:	d008      	beq.n	802700a <_dtoa_r+0x872>
 8026ff8:	6933      	ldr	r3, [r6, #16]
 8026ffa:	3303      	adds	r3, #3
 8026ffc:	009b      	lsls	r3, r3, #2
 8026ffe:	18f3      	adds	r3, r6, r3
 8027000:	6858      	ldr	r0, [r3, #4]
 8027002:	f000 ff23 	bl	8027e4c <__hi0bits>
 8027006:	2320      	movs	r3, #32
 8027008:	1a18      	subs	r0, r3, r0
 802700a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802700c:	1818      	adds	r0, r3, r0
 802700e:	0002      	movs	r2, r0
 8027010:	231f      	movs	r3, #31
 8027012:	401a      	ands	r2, r3
 8027014:	4218      	tst	r0, r3
 8027016:	d100      	bne.n	802701a <_dtoa_r+0x882>
 8027018:	e081      	b.n	802711e <_dtoa_r+0x986>
 802701a:	3301      	adds	r3, #1
 802701c:	1a9b      	subs	r3, r3, r2
 802701e:	2b04      	cmp	r3, #4
 8027020:	dd79      	ble.n	8027116 <_dtoa_r+0x97e>
 8027022:	231c      	movs	r3, #28
 8027024:	1a9b      	subs	r3, r3, r2
 8027026:	9a06      	ldr	r2, [sp, #24]
 8027028:	18e4      	adds	r4, r4, r3
 802702a:	18d2      	adds	r2, r2, r3
 802702c:	9206      	str	r2, [sp, #24]
 802702e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027030:	18d3      	adds	r3, r2, r3
 8027032:	930d      	str	r3, [sp, #52]	@ 0x34
 8027034:	9b06      	ldr	r3, [sp, #24]
 8027036:	2b00      	cmp	r3, #0
 8027038:	dd05      	ble.n	8027046 <_dtoa_r+0x8ae>
 802703a:	001a      	movs	r2, r3
 802703c:	9905      	ldr	r1, [sp, #20]
 802703e:	9803      	ldr	r0, [sp, #12]
 8027040:	f001 f872 	bl	8028128 <__lshift>
 8027044:	9005      	str	r0, [sp, #20]
 8027046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027048:	2b00      	cmp	r3, #0
 802704a:	dd05      	ble.n	8027058 <_dtoa_r+0x8c0>
 802704c:	0031      	movs	r1, r6
 802704e:	001a      	movs	r2, r3
 8027050:	9803      	ldr	r0, [sp, #12]
 8027052:	f001 f869 	bl	8028128 <__lshift>
 8027056:	0006      	movs	r6, r0
 8027058:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802705a:	2b00      	cmp	r3, #0
 802705c:	d061      	beq.n	8027122 <_dtoa_r+0x98a>
 802705e:	0031      	movs	r1, r6
 8027060:	9805      	ldr	r0, [sp, #20]
 8027062:	f001 f8cd 	bl	8028200 <__mcmp>
 8027066:	2800      	cmp	r0, #0
 8027068:	da5b      	bge.n	8027122 <_dtoa_r+0x98a>
 802706a:	9b04      	ldr	r3, [sp, #16]
 802706c:	220a      	movs	r2, #10
 802706e:	3b01      	subs	r3, #1
 8027070:	930c      	str	r3, [sp, #48]	@ 0x30
 8027072:	9905      	ldr	r1, [sp, #20]
 8027074:	2300      	movs	r3, #0
 8027076:	9803      	ldr	r0, [sp, #12]
 8027078:	f000 fe58 	bl	8027d2c <__multadd>
 802707c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802707e:	9005      	str	r0, [sp, #20]
 8027080:	2b00      	cmp	r3, #0
 8027082:	d100      	bne.n	8027086 <_dtoa_r+0x8ee>
 8027084:	e15b      	b.n	802733e <_dtoa_r+0xba6>
 8027086:	2300      	movs	r3, #0
 8027088:	0039      	movs	r1, r7
 802708a:	220a      	movs	r2, #10
 802708c:	9803      	ldr	r0, [sp, #12]
 802708e:	f000 fe4d 	bl	8027d2c <__multadd>
 8027092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027094:	0007      	movs	r7, r0
 8027096:	2b00      	cmp	r3, #0
 8027098:	dc4d      	bgt.n	8027136 <_dtoa_r+0x99e>
 802709a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802709c:	2b02      	cmp	r3, #2
 802709e:	dd46      	ble.n	802712e <_dtoa_r+0x996>
 80270a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80270a2:	2b00      	cmp	r3, #0
 80270a4:	d000      	beq.n	80270a8 <_dtoa_r+0x910>
 80270a6:	e5db      	b.n	8026c60 <_dtoa_r+0x4c8>
 80270a8:	0031      	movs	r1, r6
 80270aa:	2205      	movs	r2, #5
 80270ac:	9803      	ldr	r0, [sp, #12]
 80270ae:	f000 fe3d 	bl	8027d2c <__multadd>
 80270b2:	0006      	movs	r6, r0
 80270b4:	0001      	movs	r1, r0
 80270b6:	9805      	ldr	r0, [sp, #20]
 80270b8:	f001 f8a2 	bl	8028200 <__mcmp>
 80270bc:	2800      	cmp	r0, #0
 80270be:	dc00      	bgt.n	80270c2 <_dtoa_r+0x92a>
 80270c0:	e5ce      	b.n	8026c60 <_dtoa_r+0x4c8>
 80270c2:	9b08      	ldr	r3, [sp, #32]
 80270c4:	9a08      	ldr	r2, [sp, #32]
 80270c6:	1c5c      	adds	r4, r3, #1
 80270c8:	2331      	movs	r3, #49	@ 0x31
 80270ca:	7013      	strb	r3, [r2, #0]
 80270cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80270ce:	3301      	adds	r3, #1
 80270d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80270d2:	e5c9      	b.n	8026c68 <_dtoa_r+0x4d0>
 80270d4:	2336      	movs	r3, #54	@ 0x36
 80270d6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80270d8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80270da:	1a9b      	subs	r3, r3, r2
 80270dc:	9c06      	ldr	r4, [sp, #24]
 80270de:	e720      	b.n	8026f22 <_dtoa_r+0x78a>
 80270e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270e2:	1e5d      	subs	r5, r3, #1
 80270e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80270e6:	42ab      	cmp	r3, r5
 80270e8:	db08      	blt.n	80270fc <_dtoa_r+0x964>
 80270ea:	1b5d      	subs	r5, r3, r5
 80270ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	daf4      	bge.n	80270dc <_dtoa_r+0x944>
 80270f2:	9b06      	ldr	r3, [sp, #24]
 80270f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80270f6:	1a9c      	subs	r4, r3, r2
 80270f8:	2300      	movs	r3, #0
 80270fa:	e712      	b.n	8026f22 <_dtoa_r+0x78a>
 80270fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80270fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027100:	1aeb      	subs	r3, r5, r3
 8027102:	18d3      	adds	r3, r2, r3
 8027104:	9314      	str	r3, [sp, #80]	@ 0x50
 8027106:	950f      	str	r5, [sp, #60]	@ 0x3c
 8027108:	9c06      	ldr	r4, [sp, #24]
 802710a:	2500      	movs	r5, #0
 802710c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802710e:	e708      	b.n	8026f22 <_dtoa_r+0x78a>
 8027110:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027112:	9905      	ldr	r1, [sp, #20]
 8027114:	e742      	b.n	8026f9c <_dtoa_r+0x804>
 8027116:	2b04      	cmp	r3, #4
 8027118:	d08c      	beq.n	8027034 <_dtoa_r+0x89c>
 802711a:	331c      	adds	r3, #28
 802711c:	e783      	b.n	8027026 <_dtoa_r+0x88e>
 802711e:	0013      	movs	r3, r2
 8027120:	e7fb      	b.n	802711a <_dtoa_r+0x982>
 8027122:	9b04      	ldr	r3, [sp, #16]
 8027124:	930c      	str	r3, [sp, #48]	@ 0x30
 8027126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027128:	930e      	str	r3, [sp, #56]	@ 0x38
 802712a:	2b00      	cmp	r3, #0
 802712c:	ddb5      	ble.n	802709a <_dtoa_r+0x902>
 802712e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027130:	2b00      	cmp	r3, #0
 8027132:	d100      	bne.n	8027136 <_dtoa_r+0x99e>
 8027134:	e107      	b.n	8027346 <_dtoa_r+0xbae>
 8027136:	2c00      	cmp	r4, #0
 8027138:	dd05      	ble.n	8027146 <_dtoa_r+0x9ae>
 802713a:	0039      	movs	r1, r7
 802713c:	0022      	movs	r2, r4
 802713e:	9803      	ldr	r0, [sp, #12]
 8027140:	f000 fff2 	bl	8028128 <__lshift>
 8027144:	0007      	movs	r7, r0
 8027146:	9704      	str	r7, [sp, #16]
 8027148:	2d00      	cmp	r5, #0
 802714a:	d020      	beq.n	802718e <_dtoa_r+0x9f6>
 802714c:	6879      	ldr	r1, [r7, #4]
 802714e:	9803      	ldr	r0, [sp, #12]
 8027150:	f000 fd84 	bl	8027c5c <_Balloc>
 8027154:	1e04      	subs	r4, r0, #0
 8027156:	d10c      	bne.n	8027172 <_dtoa_r+0x9da>
 8027158:	0022      	movs	r2, r4
 802715a:	4b2e      	ldr	r3, [pc, #184]	@ (8027214 <_dtoa_r+0xa7c>)
 802715c:	482e      	ldr	r0, [pc, #184]	@ (8027218 <_dtoa_r+0xa80>)
 802715e:	492f      	ldr	r1, [pc, #188]	@ (802721c <_dtoa_r+0xa84>)
 8027160:	f7ff fb2f 	bl	80267c2 <_dtoa_r+0x2a>
 8027164:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8027166:	0037      	movs	r7, r6
 8027168:	e7ab      	b.n	80270c2 <_dtoa_r+0x92a>
 802716a:	9b04      	ldr	r3, [sp, #16]
 802716c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802716e:	930c      	str	r3, [sp, #48]	@ 0x30
 8027170:	e7f9      	b.n	8027166 <_dtoa_r+0x9ce>
 8027172:	0039      	movs	r1, r7
 8027174:	693a      	ldr	r2, [r7, #16]
 8027176:	310c      	adds	r1, #12
 8027178:	3202      	adds	r2, #2
 802717a:	0092      	lsls	r2, r2, #2
 802717c:	300c      	adds	r0, #12
 802717e:	f7ff fa75 	bl	802666c <memcpy>
 8027182:	2201      	movs	r2, #1
 8027184:	0021      	movs	r1, r4
 8027186:	9803      	ldr	r0, [sp, #12]
 8027188:	f000 ffce 	bl	8028128 <__lshift>
 802718c:	9004      	str	r0, [sp, #16]
 802718e:	9b08      	ldr	r3, [sp, #32]
 8027190:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027192:	9306      	str	r3, [sp, #24]
 8027194:	3b01      	subs	r3, #1
 8027196:	189b      	adds	r3, r3, r2
 8027198:	2201      	movs	r2, #1
 802719a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802719c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802719e:	4013      	ands	r3, r2
 80271a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80271a2:	0031      	movs	r1, r6
 80271a4:	9805      	ldr	r0, [sp, #20]
 80271a6:	f7ff fa71 	bl	802668c <quorem>
 80271aa:	0039      	movs	r1, r7
 80271ac:	0005      	movs	r5, r0
 80271ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80271b0:	9805      	ldr	r0, [sp, #20]
 80271b2:	f001 f825 	bl	8028200 <__mcmp>
 80271b6:	9a04      	ldr	r2, [sp, #16]
 80271b8:	900d      	str	r0, [sp, #52]	@ 0x34
 80271ba:	0031      	movs	r1, r6
 80271bc:	9803      	ldr	r0, [sp, #12]
 80271be:	f001 f83b 	bl	8028238 <__mdiff>
 80271c2:	2201      	movs	r2, #1
 80271c4:	68c3      	ldr	r3, [r0, #12]
 80271c6:	0004      	movs	r4, r0
 80271c8:	3530      	adds	r5, #48	@ 0x30
 80271ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80271cc:	2b00      	cmp	r3, #0
 80271ce:	d104      	bne.n	80271da <_dtoa_r+0xa42>
 80271d0:	0001      	movs	r1, r0
 80271d2:	9805      	ldr	r0, [sp, #20]
 80271d4:	f001 f814 	bl	8028200 <__mcmp>
 80271d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80271da:	0021      	movs	r1, r4
 80271dc:	9803      	ldr	r0, [sp, #12]
 80271de:	f000 fd81 	bl	8027ce4 <_Bfree>
 80271e2:	9b06      	ldr	r3, [sp, #24]
 80271e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80271e6:	1c5c      	adds	r4, r3, #1
 80271e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80271ea:	4313      	orrs	r3, r2
 80271ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80271ee:	4313      	orrs	r3, r2
 80271f0:	d116      	bne.n	8027220 <_dtoa_r+0xa88>
 80271f2:	2d39      	cmp	r5, #57	@ 0x39
 80271f4:	d02f      	beq.n	8027256 <_dtoa_r+0xabe>
 80271f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80271f8:	2b00      	cmp	r3, #0
 80271fa:	dd01      	ble.n	8027200 <_dtoa_r+0xa68>
 80271fc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80271fe:	3531      	adds	r5, #49	@ 0x31
 8027200:	9b06      	ldr	r3, [sp, #24]
 8027202:	701d      	strb	r5, [r3, #0]
 8027204:	e532      	b.n	8026c6c <_dtoa_r+0x4d4>
 8027206:	46c0      	nop			@ (mov r8, r8)
 8027208:	40240000 	.word	0x40240000
 802720c:	00000433 	.word	0x00000433
 8027210:	7ff00000 	.word	0x7ff00000
 8027214:	0802ea4e 	.word	0x0802ea4e
 8027218:	0802e9f6 	.word	0x0802e9f6
 802721c:	000002ef 	.word	0x000002ef
 8027220:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027222:	2b00      	cmp	r3, #0
 8027224:	db04      	blt.n	8027230 <_dtoa_r+0xa98>
 8027226:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027228:	4313      	orrs	r3, r2
 802722a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802722c:	4313      	orrs	r3, r2
 802722e:	d11e      	bne.n	802726e <_dtoa_r+0xad6>
 8027230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027232:	2b00      	cmp	r3, #0
 8027234:	dde4      	ble.n	8027200 <_dtoa_r+0xa68>
 8027236:	9905      	ldr	r1, [sp, #20]
 8027238:	2201      	movs	r2, #1
 802723a:	9803      	ldr	r0, [sp, #12]
 802723c:	f000 ff74 	bl	8028128 <__lshift>
 8027240:	0031      	movs	r1, r6
 8027242:	9005      	str	r0, [sp, #20]
 8027244:	f000 ffdc 	bl	8028200 <__mcmp>
 8027248:	2800      	cmp	r0, #0
 802724a:	dc02      	bgt.n	8027252 <_dtoa_r+0xaba>
 802724c:	d1d8      	bne.n	8027200 <_dtoa_r+0xa68>
 802724e:	07eb      	lsls	r3, r5, #31
 8027250:	d5d6      	bpl.n	8027200 <_dtoa_r+0xa68>
 8027252:	2d39      	cmp	r5, #57	@ 0x39
 8027254:	d1d2      	bne.n	80271fc <_dtoa_r+0xa64>
 8027256:	2339      	movs	r3, #57	@ 0x39
 8027258:	9a06      	ldr	r2, [sp, #24]
 802725a:	7013      	strb	r3, [r2, #0]
 802725c:	0023      	movs	r3, r4
 802725e:	001c      	movs	r4, r3
 8027260:	3b01      	subs	r3, #1
 8027262:	781a      	ldrb	r2, [r3, #0]
 8027264:	2a39      	cmp	r2, #57	@ 0x39
 8027266:	d050      	beq.n	802730a <_dtoa_r+0xb72>
 8027268:	3201      	adds	r2, #1
 802726a:	701a      	strb	r2, [r3, #0]
 802726c:	e4fe      	b.n	8026c6c <_dtoa_r+0x4d4>
 802726e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027270:	2b00      	cmp	r3, #0
 8027272:	dd03      	ble.n	802727c <_dtoa_r+0xae4>
 8027274:	2d39      	cmp	r5, #57	@ 0x39
 8027276:	d0ee      	beq.n	8027256 <_dtoa_r+0xabe>
 8027278:	3501      	adds	r5, #1
 802727a:	e7c1      	b.n	8027200 <_dtoa_r+0xa68>
 802727c:	9b06      	ldr	r3, [sp, #24]
 802727e:	9a06      	ldr	r2, [sp, #24]
 8027280:	701d      	strb	r5, [r3, #0]
 8027282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027284:	4293      	cmp	r3, r2
 8027286:	d02b      	beq.n	80272e0 <_dtoa_r+0xb48>
 8027288:	2300      	movs	r3, #0
 802728a:	220a      	movs	r2, #10
 802728c:	9905      	ldr	r1, [sp, #20]
 802728e:	9803      	ldr	r0, [sp, #12]
 8027290:	f000 fd4c 	bl	8027d2c <__multadd>
 8027294:	9b04      	ldr	r3, [sp, #16]
 8027296:	9005      	str	r0, [sp, #20]
 8027298:	429f      	cmp	r7, r3
 802729a:	d109      	bne.n	80272b0 <_dtoa_r+0xb18>
 802729c:	0039      	movs	r1, r7
 802729e:	2300      	movs	r3, #0
 80272a0:	220a      	movs	r2, #10
 80272a2:	9803      	ldr	r0, [sp, #12]
 80272a4:	f000 fd42 	bl	8027d2c <__multadd>
 80272a8:	0007      	movs	r7, r0
 80272aa:	9004      	str	r0, [sp, #16]
 80272ac:	9406      	str	r4, [sp, #24]
 80272ae:	e778      	b.n	80271a2 <_dtoa_r+0xa0a>
 80272b0:	0039      	movs	r1, r7
 80272b2:	2300      	movs	r3, #0
 80272b4:	220a      	movs	r2, #10
 80272b6:	9803      	ldr	r0, [sp, #12]
 80272b8:	f000 fd38 	bl	8027d2c <__multadd>
 80272bc:	2300      	movs	r3, #0
 80272be:	0007      	movs	r7, r0
 80272c0:	220a      	movs	r2, #10
 80272c2:	9904      	ldr	r1, [sp, #16]
 80272c4:	9803      	ldr	r0, [sp, #12]
 80272c6:	f000 fd31 	bl	8027d2c <__multadd>
 80272ca:	9004      	str	r0, [sp, #16]
 80272cc:	e7ee      	b.n	80272ac <_dtoa_r+0xb14>
 80272ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80272d0:	2401      	movs	r4, #1
 80272d2:	2b00      	cmp	r3, #0
 80272d4:	dd00      	ble.n	80272d8 <_dtoa_r+0xb40>
 80272d6:	001c      	movs	r4, r3
 80272d8:	9704      	str	r7, [sp, #16]
 80272da:	2700      	movs	r7, #0
 80272dc:	9b08      	ldr	r3, [sp, #32]
 80272de:	191c      	adds	r4, r3, r4
 80272e0:	9905      	ldr	r1, [sp, #20]
 80272e2:	2201      	movs	r2, #1
 80272e4:	9803      	ldr	r0, [sp, #12]
 80272e6:	f000 ff1f 	bl	8028128 <__lshift>
 80272ea:	0031      	movs	r1, r6
 80272ec:	9005      	str	r0, [sp, #20]
 80272ee:	f000 ff87 	bl	8028200 <__mcmp>
 80272f2:	2800      	cmp	r0, #0
 80272f4:	dcb2      	bgt.n	802725c <_dtoa_r+0xac4>
 80272f6:	d101      	bne.n	80272fc <_dtoa_r+0xb64>
 80272f8:	07ed      	lsls	r5, r5, #31
 80272fa:	d4af      	bmi.n	802725c <_dtoa_r+0xac4>
 80272fc:	0023      	movs	r3, r4
 80272fe:	001c      	movs	r4, r3
 8027300:	3b01      	subs	r3, #1
 8027302:	781a      	ldrb	r2, [r3, #0]
 8027304:	2a30      	cmp	r2, #48	@ 0x30
 8027306:	d0fa      	beq.n	80272fe <_dtoa_r+0xb66>
 8027308:	e4b0      	b.n	8026c6c <_dtoa_r+0x4d4>
 802730a:	9a08      	ldr	r2, [sp, #32]
 802730c:	429a      	cmp	r2, r3
 802730e:	d1a6      	bne.n	802725e <_dtoa_r+0xac6>
 8027310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027312:	3301      	adds	r3, #1
 8027314:	930c      	str	r3, [sp, #48]	@ 0x30
 8027316:	2331      	movs	r3, #49	@ 0x31
 8027318:	7013      	strb	r3, [r2, #0]
 802731a:	e4a7      	b.n	8026c6c <_dtoa_r+0x4d4>
 802731c:	4b14      	ldr	r3, [pc, #80]	@ (8027370 <_dtoa_r+0xbd8>)
 802731e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8027320:	9308      	str	r3, [sp, #32]
 8027322:	4b14      	ldr	r3, [pc, #80]	@ (8027374 <_dtoa_r+0xbdc>)
 8027324:	2a00      	cmp	r2, #0
 8027326:	d001      	beq.n	802732c <_dtoa_r+0xb94>
 8027328:	f7ff fa7e 	bl	8026828 <_dtoa_r+0x90>
 802732c:	f7ff fa7e 	bl	802682c <_dtoa_r+0x94>
 8027330:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027332:	2b01      	cmp	r3, #1
 8027334:	dc00      	bgt.n	8027338 <_dtoa_r+0xba0>
 8027336:	e648      	b.n	8026fca <_dtoa_r+0x832>
 8027338:	2001      	movs	r0, #1
 802733a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802733c:	e665      	b.n	802700a <_dtoa_r+0x872>
 802733e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027340:	2b00      	cmp	r3, #0
 8027342:	dc00      	bgt.n	8027346 <_dtoa_r+0xbae>
 8027344:	e6a9      	b.n	802709a <_dtoa_r+0x902>
 8027346:	2400      	movs	r4, #0
 8027348:	0031      	movs	r1, r6
 802734a:	9805      	ldr	r0, [sp, #20]
 802734c:	f7ff f99e 	bl	802668c <quorem>
 8027350:	9b08      	ldr	r3, [sp, #32]
 8027352:	3030      	adds	r0, #48	@ 0x30
 8027354:	5518      	strb	r0, [r3, r4]
 8027356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027358:	3401      	adds	r4, #1
 802735a:	0005      	movs	r5, r0
 802735c:	42a3      	cmp	r3, r4
 802735e:	ddb6      	ble.n	80272ce <_dtoa_r+0xb36>
 8027360:	2300      	movs	r3, #0
 8027362:	220a      	movs	r2, #10
 8027364:	9905      	ldr	r1, [sp, #20]
 8027366:	9803      	ldr	r0, [sp, #12]
 8027368:	f000 fce0 	bl	8027d2c <__multadd>
 802736c:	9005      	str	r0, [sp, #20]
 802736e:	e7eb      	b.n	8027348 <_dtoa_r+0xbb0>
 8027370:	0802e9d2 	.word	0x0802e9d2
 8027374:	0802e9da 	.word	0x0802e9da

08027378 <_free_r>:
 8027378:	b570      	push	{r4, r5, r6, lr}
 802737a:	0005      	movs	r5, r0
 802737c:	1e0c      	subs	r4, r1, #0
 802737e:	d010      	beq.n	80273a2 <_free_r+0x2a>
 8027380:	3c04      	subs	r4, #4
 8027382:	6823      	ldr	r3, [r4, #0]
 8027384:	2b00      	cmp	r3, #0
 8027386:	da00      	bge.n	802738a <_free_r+0x12>
 8027388:	18e4      	adds	r4, r4, r3
 802738a:	0028      	movs	r0, r5
 802738c:	f000 fc56 	bl	8027c3c <__malloc_lock>
 8027390:	4a1d      	ldr	r2, [pc, #116]	@ (8027408 <_free_r+0x90>)
 8027392:	6813      	ldr	r3, [r2, #0]
 8027394:	2b00      	cmp	r3, #0
 8027396:	d105      	bne.n	80273a4 <_free_r+0x2c>
 8027398:	6063      	str	r3, [r4, #4]
 802739a:	6014      	str	r4, [r2, #0]
 802739c:	0028      	movs	r0, r5
 802739e:	f000 fc55 	bl	8027c4c <__malloc_unlock>
 80273a2:	bd70      	pop	{r4, r5, r6, pc}
 80273a4:	42a3      	cmp	r3, r4
 80273a6:	d908      	bls.n	80273ba <_free_r+0x42>
 80273a8:	6820      	ldr	r0, [r4, #0]
 80273aa:	1821      	adds	r1, r4, r0
 80273ac:	428b      	cmp	r3, r1
 80273ae:	d1f3      	bne.n	8027398 <_free_r+0x20>
 80273b0:	6819      	ldr	r1, [r3, #0]
 80273b2:	685b      	ldr	r3, [r3, #4]
 80273b4:	1809      	adds	r1, r1, r0
 80273b6:	6021      	str	r1, [r4, #0]
 80273b8:	e7ee      	b.n	8027398 <_free_r+0x20>
 80273ba:	001a      	movs	r2, r3
 80273bc:	685b      	ldr	r3, [r3, #4]
 80273be:	2b00      	cmp	r3, #0
 80273c0:	d001      	beq.n	80273c6 <_free_r+0x4e>
 80273c2:	42a3      	cmp	r3, r4
 80273c4:	d9f9      	bls.n	80273ba <_free_r+0x42>
 80273c6:	6811      	ldr	r1, [r2, #0]
 80273c8:	1850      	adds	r0, r2, r1
 80273ca:	42a0      	cmp	r0, r4
 80273cc:	d10b      	bne.n	80273e6 <_free_r+0x6e>
 80273ce:	6820      	ldr	r0, [r4, #0]
 80273d0:	1809      	adds	r1, r1, r0
 80273d2:	1850      	adds	r0, r2, r1
 80273d4:	6011      	str	r1, [r2, #0]
 80273d6:	4283      	cmp	r3, r0
 80273d8:	d1e0      	bne.n	802739c <_free_r+0x24>
 80273da:	6818      	ldr	r0, [r3, #0]
 80273dc:	685b      	ldr	r3, [r3, #4]
 80273de:	1841      	adds	r1, r0, r1
 80273e0:	6011      	str	r1, [r2, #0]
 80273e2:	6053      	str	r3, [r2, #4]
 80273e4:	e7da      	b.n	802739c <_free_r+0x24>
 80273e6:	42a0      	cmp	r0, r4
 80273e8:	d902      	bls.n	80273f0 <_free_r+0x78>
 80273ea:	230c      	movs	r3, #12
 80273ec:	602b      	str	r3, [r5, #0]
 80273ee:	e7d5      	b.n	802739c <_free_r+0x24>
 80273f0:	6820      	ldr	r0, [r4, #0]
 80273f2:	1821      	adds	r1, r4, r0
 80273f4:	428b      	cmp	r3, r1
 80273f6:	d103      	bne.n	8027400 <_free_r+0x88>
 80273f8:	6819      	ldr	r1, [r3, #0]
 80273fa:	685b      	ldr	r3, [r3, #4]
 80273fc:	1809      	adds	r1, r1, r0
 80273fe:	6021      	str	r1, [r4, #0]
 8027400:	6063      	str	r3, [r4, #4]
 8027402:	6054      	str	r4, [r2, #4]
 8027404:	e7ca      	b.n	802739c <_free_r+0x24>
 8027406:	46c0      	nop			@ (mov r8, r8)
 8027408:	20003918 	.word	0x20003918

0802740c <rshift>:
 802740c:	0002      	movs	r2, r0
 802740e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027410:	6904      	ldr	r4, [r0, #16]
 8027412:	b085      	sub	sp, #20
 8027414:	3214      	adds	r2, #20
 8027416:	114b      	asrs	r3, r1, #5
 8027418:	0016      	movs	r6, r2
 802741a:	9302      	str	r3, [sp, #8]
 802741c:	429c      	cmp	r4, r3
 802741e:	dd31      	ble.n	8027484 <rshift+0x78>
 8027420:	261f      	movs	r6, #31
 8027422:	000f      	movs	r7, r1
 8027424:	009b      	lsls	r3, r3, #2
 8027426:	00a5      	lsls	r5, r4, #2
 8027428:	18d3      	adds	r3, r2, r3
 802742a:	4037      	ands	r7, r6
 802742c:	1955      	adds	r5, r2, r5
 802742e:	9300      	str	r3, [sp, #0]
 8027430:	9701      	str	r7, [sp, #4]
 8027432:	4231      	tst	r1, r6
 8027434:	d10d      	bne.n	8027452 <rshift+0x46>
 8027436:	0016      	movs	r6, r2
 8027438:	0019      	movs	r1, r3
 802743a:	428d      	cmp	r5, r1
 802743c:	d836      	bhi.n	80274ac <rshift+0xa0>
 802743e:	9b00      	ldr	r3, [sp, #0]
 8027440:	2600      	movs	r6, #0
 8027442:	3b03      	subs	r3, #3
 8027444:	429d      	cmp	r5, r3
 8027446:	d302      	bcc.n	802744e <rshift+0x42>
 8027448:	9b02      	ldr	r3, [sp, #8]
 802744a:	1ae4      	subs	r4, r4, r3
 802744c:	00a6      	lsls	r6, r4, #2
 802744e:	1996      	adds	r6, r2, r6
 8027450:	e018      	b.n	8027484 <rshift+0x78>
 8027452:	2120      	movs	r1, #32
 8027454:	9e01      	ldr	r6, [sp, #4]
 8027456:	9f01      	ldr	r7, [sp, #4]
 8027458:	1b89      	subs	r1, r1, r6
 802745a:	9e00      	ldr	r6, [sp, #0]
 802745c:	9103      	str	r1, [sp, #12]
 802745e:	ce02      	ldmia	r6!, {r1}
 8027460:	4694      	mov	ip, r2
 8027462:	40f9      	lsrs	r1, r7
 8027464:	42b5      	cmp	r5, r6
 8027466:	d816      	bhi.n	8027496 <rshift+0x8a>
 8027468:	9b00      	ldr	r3, [sp, #0]
 802746a:	2600      	movs	r6, #0
 802746c:	3301      	adds	r3, #1
 802746e:	429d      	cmp	r5, r3
 8027470:	d303      	bcc.n	802747a <rshift+0x6e>
 8027472:	9b02      	ldr	r3, [sp, #8]
 8027474:	1ae4      	subs	r4, r4, r3
 8027476:	00a6      	lsls	r6, r4, #2
 8027478:	3e04      	subs	r6, #4
 802747a:	1996      	adds	r6, r2, r6
 802747c:	6031      	str	r1, [r6, #0]
 802747e:	2900      	cmp	r1, #0
 8027480:	d000      	beq.n	8027484 <rshift+0x78>
 8027482:	3604      	adds	r6, #4
 8027484:	1ab1      	subs	r1, r6, r2
 8027486:	1089      	asrs	r1, r1, #2
 8027488:	6101      	str	r1, [r0, #16]
 802748a:	4296      	cmp	r6, r2
 802748c:	d101      	bne.n	8027492 <rshift+0x86>
 802748e:	2300      	movs	r3, #0
 8027490:	6143      	str	r3, [r0, #20]
 8027492:	b005      	add	sp, #20
 8027494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027496:	6837      	ldr	r7, [r6, #0]
 8027498:	9b03      	ldr	r3, [sp, #12]
 802749a:	409f      	lsls	r7, r3
 802749c:	430f      	orrs	r7, r1
 802749e:	4661      	mov	r1, ip
 80274a0:	c180      	stmia	r1!, {r7}
 80274a2:	468c      	mov	ip, r1
 80274a4:	9b01      	ldr	r3, [sp, #4]
 80274a6:	ce02      	ldmia	r6!, {r1}
 80274a8:	40d9      	lsrs	r1, r3
 80274aa:	e7db      	b.n	8027464 <rshift+0x58>
 80274ac:	c980      	ldmia	r1!, {r7}
 80274ae:	c680      	stmia	r6!, {r7}
 80274b0:	e7c3      	b.n	802743a <rshift+0x2e>

080274b2 <__hexdig_fun>:
 80274b2:	0002      	movs	r2, r0
 80274b4:	3a30      	subs	r2, #48	@ 0x30
 80274b6:	0003      	movs	r3, r0
 80274b8:	2a09      	cmp	r2, #9
 80274ba:	d802      	bhi.n	80274c2 <__hexdig_fun+0x10>
 80274bc:	3b20      	subs	r3, #32
 80274be:	b2d8      	uxtb	r0, r3
 80274c0:	4770      	bx	lr
 80274c2:	0002      	movs	r2, r0
 80274c4:	3a61      	subs	r2, #97	@ 0x61
 80274c6:	2a05      	cmp	r2, #5
 80274c8:	d801      	bhi.n	80274ce <__hexdig_fun+0x1c>
 80274ca:	3b47      	subs	r3, #71	@ 0x47
 80274cc:	e7f7      	b.n	80274be <__hexdig_fun+0xc>
 80274ce:	001a      	movs	r2, r3
 80274d0:	3a41      	subs	r2, #65	@ 0x41
 80274d2:	2000      	movs	r0, #0
 80274d4:	2a05      	cmp	r2, #5
 80274d6:	d8f3      	bhi.n	80274c0 <__hexdig_fun+0xe>
 80274d8:	3b27      	subs	r3, #39	@ 0x27
 80274da:	e7f0      	b.n	80274be <__hexdig_fun+0xc>

080274dc <__gethex>:
 80274dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80274de:	b089      	sub	sp, #36	@ 0x24
 80274e0:	9307      	str	r3, [sp, #28]
 80274e2:	680b      	ldr	r3, [r1, #0]
 80274e4:	9201      	str	r2, [sp, #4]
 80274e6:	9003      	str	r0, [sp, #12]
 80274e8:	9106      	str	r1, [sp, #24]
 80274ea:	1c9a      	adds	r2, r3, #2
 80274ec:	0011      	movs	r1, r2
 80274ee:	3201      	adds	r2, #1
 80274f0:	1e50      	subs	r0, r2, #1
 80274f2:	7800      	ldrb	r0, [r0, #0]
 80274f4:	2830      	cmp	r0, #48	@ 0x30
 80274f6:	d0f9      	beq.n	80274ec <__gethex+0x10>
 80274f8:	1acb      	subs	r3, r1, r3
 80274fa:	3b02      	subs	r3, #2
 80274fc:	9305      	str	r3, [sp, #20]
 80274fe:	9100      	str	r1, [sp, #0]
 8027500:	f7ff ffd7 	bl	80274b2 <__hexdig_fun>
 8027504:	2300      	movs	r3, #0
 8027506:	001d      	movs	r5, r3
 8027508:	9302      	str	r3, [sp, #8]
 802750a:	4298      	cmp	r0, r3
 802750c:	d11e      	bne.n	802754c <__gethex+0x70>
 802750e:	2201      	movs	r2, #1
 8027510:	49a6      	ldr	r1, [pc, #664]	@ (80277ac <__gethex+0x2d0>)
 8027512:	9800      	ldr	r0, [sp, #0]
 8027514:	f7fe ffe4 	bl	80264e0 <strncmp>
 8027518:	0007      	movs	r7, r0
 802751a:	42a8      	cmp	r0, r5
 802751c:	d000      	beq.n	8027520 <__gethex+0x44>
 802751e:	e06a      	b.n	80275f6 <__gethex+0x11a>
 8027520:	9b00      	ldr	r3, [sp, #0]
 8027522:	7858      	ldrb	r0, [r3, #1]
 8027524:	1c5c      	adds	r4, r3, #1
 8027526:	f7ff ffc4 	bl	80274b2 <__hexdig_fun>
 802752a:	2301      	movs	r3, #1
 802752c:	9302      	str	r3, [sp, #8]
 802752e:	42a8      	cmp	r0, r5
 8027530:	d02f      	beq.n	8027592 <__gethex+0xb6>
 8027532:	9400      	str	r4, [sp, #0]
 8027534:	9b00      	ldr	r3, [sp, #0]
 8027536:	7818      	ldrb	r0, [r3, #0]
 8027538:	2830      	cmp	r0, #48	@ 0x30
 802753a:	d009      	beq.n	8027550 <__gethex+0x74>
 802753c:	f7ff ffb9 	bl	80274b2 <__hexdig_fun>
 8027540:	4242      	negs	r2, r0
 8027542:	4142      	adcs	r2, r0
 8027544:	2301      	movs	r3, #1
 8027546:	0025      	movs	r5, r4
 8027548:	9202      	str	r2, [sp, #8]
 802754a:	9305      	str	r3, [sp, #20]
 802754c:	9c00      	ldr	r4, [sp, #0]
 802754e:	e004      	b.n	802755a <__gethex+0x7e>
 8027550:	9b00      	ldr	r3, [sp, #0]
 8027552:	3301      	adds	r3, #1
 8027554:	9300      	str	r3, [sp, #0]
 8027556:	e7ed      	b.n	8027534 <__gethex+0x58>
 8027558:	3401      	adds	r4, #1
 802755a:	7820      	ldrb	r0, [r4, #0]
 802755c:	f7ff ffa9 	bl	80274b2 <__hexdig_fun>
 8027560:	1e07      	subs	r7, r0, #0
 8027562:	d1f9      	bne.n	8027558 <__gethex+0x7c>
 8027564:	2201      	movs	r2, #1
 8027566:	0020      	movs	r0, r4
 8027568:	4990      	ldr	r1, [pc, #576]	@ (80277ac <__gethex+0x2d0>)
 802756a:	f7fe ffb9 	bl	80264e0 <strncmp>
 802756e:	2800      	cmp	r0, #0
 8027570:	d10d      	bne.n	802758e <__gethex+0xb2>
 8027572:	2d00      	cmp	r5, #0
 8027574:	d106      	bne.n	8027584 <__gethex+0xa8>
 8027576:	3401      	adds	r4, #1
 8027578:	0025      	movs	r5, r4
 802757a:	7820      	ldrb	r0, [r4, #0]
 802757c:	f7ff ff99 	bl	80274b2 <__hexdig_fun>
 8027580:	2800      	cmp	r0, #0
 8027582:	d102      	bne.n	802758a <__gethex+0xae>
 8027584:	1b2d      	subs	r5, r5, r4
 8027586:	00af      	lsls	r7, r5, #2
 8027588:	e003      	b.n	8027592 <__gethex+0xb6>
 802758a:	3401      	adds	r4, #1
 802758c:	e7f5      	b.n	802757a <__gethex+0x9e>
 802758e:	2d00      	cmp	r5, #0
 8027590:	d1f8      	bne.n	8027584 <__gethex+0xa8>
 8027592:	2220      	movs	r2, #32
 8027594:	7823      	ldrb	r3, [r4, #0]
 8027596:	0026      	movs	r6, r4
 8027598:	4393      	bics	r3, r2
 802759a:	2b50      	cmp	r3, #80	@ 0x50
 802759c:	d11d      	bne.n	80275da <__gethex+0xfe>
 802759e:	7863      	ldrb	r3, [r4, #1]
 80275a0:	2b2b      	cmp	r3, #43	@ 0x2b
 80275a2:	d02d      	beq.n	8027600 <__gethex+0x124>
 80275a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80275a6:	d02f      	beq.n	8027608 <__gethex+0x12c>
 80275a8:	2300      	movs	r3, #0
 80275aa:	1c66      	adds	r6, r4, #1
 80275ac:	9304      	str	r3, [sp, #16]
 80275ae:	7830      	ldrb	r0, [r6, #0]
 80275b0:	f7ff ff7f 	bl	80274b2 <__hexdig_fun>
 80275b4:	1e43      	subs	r3, r0, #1
 80275b6:	b2db      	uxtb	r3, r3
 80275b8:	0005      	movs	r5, r0
 80275ba:	2b18      	cmp	r3, #24
 80275bc:	d82a      	bhi.n	8027614 <__gethex+0x138>
 80275be:	7870      	ldrb	r0, [r6, #1]
 80275c0:	f7ff ff77 	bl	80274b2 <__hexdig_fun>
 80275c4:	1e43      	subs	r3, r0, #1
 80275c6:	b2db      	uxtb	r3, r3
 80275c8:	3601      	adds	r6, #1
 80275ca:	3d10      	subs	r5, #16
 80275cc:	2b18      	cmp	r3, #24
 80275ce:	d91d      	bls.n	802760c <__gethex+0x130>
 80275d0:	9b04      	ldr	r3, [sp, #16]
 80275d2:	2b00      	cmp	r3, #0
 80275d4:	d000      	beq.n	80275d8 <__gethex+0xfc>
 80275d6:	426d      	negs	r5, r5
 80275d8:	197f      	adds	r7, r7, r5
 80275da:	9b06      	ldr	r3, [sp, #24]
 80275dc:	601e      	str	r6, [r3, #0]
 80275de:	9b02      	ldr	r3, [sp, #8]
 80275e0:	2b00      	cmp	r3, #0
 80275e2:	d019      	beq.n	8027618 <__gethex+0x13c>
 80275e4:	9b05      	ldr	r3, [sp, #20]
 80275e6:	2606      	movs	r6, #6
 80275e8:	425a      	negs	r2, r3
 80275ea:	4153      	adcs	r3, r2
 80275ec:	425b      	negs	r3, r3
 80275ee:	401e      	ands	r6, r3
 80275f0:	0030      	movs	r0, r6
 80275f2:	b009      	add	sp, #36	@ 0x24
 80275f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80275f6:	2301      	movs	r3, #1
 80275f8:	2700      	movs	r7, #0
 80275fa:	9c00      	ldr	r4, [sp, #0]
 80275fc:	9302      	str	r3, [sp, #8]
 80275fe:	e7c8      	b.n	8027592 <__gethex+0xb6>
 8027600:	2300      	movs	r3, #0
 8027602:	9304      	str	r3, [sp, #16]
 8027604:	1ca6      	adds	r6, r4, #2
 8027606:	e7d2      	b.n	80275ae <__gethex+0xd2>
 8027608:	2301      	movs	r3, #1
 802760a:	e7fa      	b.n	8027602 <__gethex+0x126>
 802760c:	230a      	movs	r3, #10
 802760e:	435d      	muls	r5, r3
 8027610:	182d      	adds	r5, r5, r0
 8027612:	e7d4      	b.n	80275be <__gethex+0xe2>
 8027614:	0026      	movs	r6, r4
 8027616:	e7e0      	b.n	80275da <__gethex+0xfe>
 8027618:	9b00      	ldr	r3, [sp, #0]
 802761a:	9902      	ldr	r1, [sp, #8]
 802761c:	1ae3      	subs	r3, r4, r3
 802761e:	3b01      	subs	r3, #1
 8027620:	2b07      	cmp	r3, #7
 8027622:	dc0a      	bgt.n	802763a <__gethex+0x15e>
 8027624:	9803      	ldr	r0, [sp, #12]
 8027626:	f000 fb19 	bl	8027c5c <_Balloc>
 802762a:	1e05      	subs	r5, r0, #0
 802762c:	d108      	bne.n	8027640 <__gethex+0x164>
 802762e:	002a      	movs	r2, r5
 8027630:	21e4      	movs	r1, #228	@ 0xe4
 8027632:	4b5f      	ldr	r3, [pc, #380]	@ (80277b0 <__gethex+0x2d4>)
 8027634:	485f      	ldr	r0, [pc, #380]	@ (80277b4 <__gethex+0x2d8>)
 8027636:	f001 fbe9 	bl	8028e0c <__assert_func>
 802763a:	3101      	adds	r1, #1
 802763c:	105b      	asrs	r3, r3, #1
 802763e:	e7ef      	b.n	8027620 <__gethex+0x144>
 8027640:	0003      	movs	r3, r0
 8027642:	3314      	adds	r3, #20
 8027644:	9302      	str	r3, [sp, #8]
 8027646:	9305      	str	r3, [sp, #20]
 8027648:	2300      	movs	r3, #0
 802764a:	001e      	movs	r6, r3
 802764c:	9304      	str	r3, [sp, #16]
 802764e:	9b00      	ldr	r3, [sp, #0]
 8027650:	42a3      	cmp	r3, r4
 8027652:	d338      	bcc.n	80276c6 <__gethex+0x1ea>
 8027654:	9c05      	ldr	r4, [sp, #20]
 8027656:	9b02      	ldr	r3, [sp, #8]
 8027658:	c440      	stmia	r4!, {r6}
 802765a:	1ae4      	subs	r4, r4, r3
 802765c:	10a4      	asrs	r4, r4, #2
 802765e:	0030      	movs	r0, r6
 8027660:	612c      	str	r4, [r5, #16]
 8027662:	f000 fbf3 	bl	8027e4c <__hi0bits>
 8027666:	9b01      	ldr	r3, [sp, #4]
 8027668:	0164      	lsls	r4, r4, #5
 802766a:	681b      	ldr	r3, [r3, #0]
 802766c:	1a26      	subs	r6, r4, r0
 802766e:	9300      	str	r3, [sp, #0]
 8027670:	429e      	cmp	r6, r3
 8027672:	dd52      	ble.n	802771a <__gethex+0x23e>
 8027674:	1af6      	subs	r6, r6, r3
 8027676:	0031      	movs	r1, r6
 8027678:	0028      	movs	r0, r5
 802767a:	f000 ff8e 	bl	802859a <__any_on>
 802767e:	1e04      	subs	r4, r0, #0
 8027680:	d00f      	beq.n	80276a2 <__gethex+0x1c6>
 8027682:	2401      	movs	r4, #1
 8027684:	211f      	movs	r1, #31
 8027686:	0020      	movs	r0, r4
 8027688:	1e73      	subs	r3, r6, #1
 802768a:	4019      	ands	r1, r3
 802768c:	4088      	lsls	r0, r1
 802768e:	0001      	movs	r1, r0
 8027690:	115a      	asrs	r2, r3, #5
 8027692:	9802      	ldr	r0, [sp, #8]
 8027694:	0092      	lsls	r2, r2, #2
 8027696:	5812      	ldr	r2, [r2, r0]
 8027698:	420a      	tst	r2, r1
 802769a:	d002      	beq.n	80276a2 <__gethex+0x1c6>
 802769c:	42a3      	cmp	r3, r4
 802769e:	dc34      	bgt.n	802770a <__gethex+0x22e>
 80276a0:	2402      	movs	r4, #2
 80276a2:	0031      	movs	r1, r6
 80276a4:	0028      	movs	r0, r5
 80276a6:	f7ff feb1 	bl	802740c <rshift>
 80276aa:	19bf      	adds	r7, r7, r6
 80276ac:	9b01      	ldr	r3, [sp, #4]
 80276ae:	689b      	ldr	r3, [r3, #8]
 80276b0:	42bb      	cmp	r3, r7
 80276b2:	da42      	bge.n	802773a <__gethex+0x25e>
 80276b4:	0029      	movs	r1, r5
 80276b6:	9803      	ldr	r0, [sp, #12]
 80276b8:	f000 fb14 	bl	8027ce4 <_Bfree>
 80276bc:	2300      	movs	r3, #0
 80276be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80276c0:	26a3      	movs	r6, #163	@ 0xa3
 80276c2:	6013      	str	r3, [r2, #0]
 80276c4:	e794      	b.n	80275f0 <__gethex+0x114>
 80276c6:	3c01      	subs	r4, #1
 80276c8:	7823      	ldrb	r3, [r4, #0]
 80276ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80276cc:	d012      	beq.n	80276f4 <__gethex+0x218>
 80276ce:	9b04      	ldr	r3, [sp, #16]
 80276d0:	2b20      	cmp	r3, #32
 80276d2:	d104      	bne.n	80276de <__gethex+0x202>
 80276d4:	9b05      	ldr	r3, [sp, #20]
 80276d6:	c340      	stmia	r3!, {r6}
 80276d8:	2600      	movs	r6, #0
 80276da:	9305      	str	r3, [sp, #20]
 80276dc:	9604      	str	r6, [sp, #16]
 80276de:	7820      	ldrb	r0, [r4, #0]
 80276e0:	f7ff fee7 	bl	80274b2 <__hexdig_fun>
 80276e4:	230f      	movs	r3, #15
 80276e6:	4018      	ands	r0, r3
 80276e8:	9b04      	ldr	r3, [sp, #16]
 80276ea:	4098      	lsls	r0, r3
 80276ec:	3304      	adds	r3, #4
 80276ee:	4306      	orrs	r6, r0
 80276f0:	9304      	str	r3, [sp, #16]
 80276f2:	e7ac      	b.n	802764e <__gethex+0x172>
 80276f4:	9b00      	ldr	r3, [sp, #0]
 80276f6:	42a3      	cmp	r3, r4
 80276f8:	d8e9      	bhi.n	80276ce <__gethex+0x1f2>
 80276fa:	2201      	movs	r2, #1
 80276fc:	0020      	movs	r0, r4
 80276fe:	492b      	ldr	r1, [pc, #172]	@ (80277ac <__gethex+0x2d0>)
 8027700:	f7fe feee 	bl	80264e0 <strncmp>
 8027704:	2800      	cmp	r0, #0
 8027706:	d1e2      	bne.n	80276ce <__gethex+0x1f2>
 8027708:	e7a1      	b.n	802764e <__gethex+0x172>
 802770a:	0028      	movs	r0, r5
 802770c:	1eb1      	subs	r1, r6, #2
 802770e:	f000 ff44 	bl	802859a <__any_on>
 8027712:	2800      	cmp	r0, #0
 8027714:	d0c4      	beq.n	80276a0 <__gethex+0x1c4>
 8027716:	2403      	movs	r4, #3
 8027718:	e7c3      	b.n	80276a2 <__gethex+0x1c6>
 802771a:	9b00      	ldr	r3, [sp, #0]
 802771c:	2400      	movs	r4, #0
 802771e:	429e      	cmp	r6, r3
 8027720:	dac4      	bge.n	80276ac <__gethex+0x1d0>
 8027722:	1b9e      	subs	r6, r3, r6
 8027724:	0029      	movs	r1, r5
 8027726:	0032      	movs	r2, r6
 8027728:	9803      	ldr	r0, [sp, #12]
 802772a:	f000 fcfd 	bl	8028128 <__lshift>
 802772e:	0003      	movs	r3, r0
 8027730:	3314      	adds	r3, #20
 8027732:	0005      	movs	r5, r0
 8027734:	1bbf      	subs	r7, r7, r6
 8027736:	9302      	str	r3, [sp, #8]
 8027738:	e7b8      	b.n	80276ac <__gethex+0x1d0>
 802773a:	9b01      	ldr	r3, [sp, #4]
 802773c:	685e      	ldr	r6, [r3, #4]
 802773e:	42be      	cmp	r6, r7
 8027740:	dd6f      	ble.n	8027822 <__gethex+0x346>
 8027742:	9b00      	ldr	r3, [sp, #0]
 8027744:	1bf6      	subs	r6, r6, r7
 8027746:	42b3      	cmp	r3, r6
 8027748:	dc36      	bgt.n	80277b8 <__gethex+0x2dc>
 802774a:	9b01      	ldr	r3, [sp, #4]
 802774c:	68db      	ldr	r3, [r3, #12]
 802774e:	2b02      	cmp	r3, #2
 8027750:	d024      	beq.n	802779c <__gethex+0x2c0>
 8027752:	2b03      	cmp	r3, #3
 8027754:	d026      	beq.n	80277a4 <__gethex+0x2c8>
 8027756:	2b01      	cmp	r3, #1
 8027758:	d117      	bne.n	802778a <__gethex+0x2ae>
 802775a:	9b00      	ldr	r3, [sp, #0]
 802775c:	42b3      	cmp	r3, r6
 802775e:	d114      	bne.n	802778a <__gethex+0x2ae>
 8027760:	2b01      	cmp	r3, #1
 8027762:	d10b      	bne.n	802777c <__gethex+0x2a0>
 8027764:	9b01      	ldr	r3, [sp, #4]
 8027766:	9a07      	ldr	r2, [sp, #28]
 8027768:	685b      	ldr	r3, [r3, #4]
 802776a:	2662      	movs	r6, #98	@ 0x62
 802776c:	6013      	str	r3, [r2, #0]
 802776e:	2301      	movs	r3, #1
 8027770:	9a02      	ldr	r2, [sp, #8]
 8027772:	612b      	str	r3, [r5, #16]
 8027774:	6013      	str	r3, [r2, #0]
 8027776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027778:	601d      	str	r5, [r3, #0]
 802777a:	e739      	b.n	80275f0 <__gethex+0x114>
 802777c:	9900      	ldr	r1, [sp, #0]
 802777e:	0028      	movs	r0, r5
 8027780:	3901      	subs	r1, #1
 8027782:	f000 ff0a 	bl	802859a <__any_on>
 8027786:	2800      	cmp	r0, #0
 8027788:	d1ec      	bne.n	8027764 <__gethex+0x288>
 802778a:	0029      	movs	r1, r5
 802778c:	9803      	ldr	r0, [sp, #12]
 802778e:	f000 faa9 	bl	8027ce4 <_Bfree>
 8027792:	2300      	movs	r3, #0
 8027794:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027796:	2650      	movs	r6, #80	@ 0x50
 8027798:	6013      	str	r3, [r2, #0]
 802779a:	e729      	b.n	80275f0 <__gethex+0x114>
 802779c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802779e:	2b00      	cmp	r3, #0
 80277a0:	d1f3      	bne.n	802778a <__gethex+0x2ae>
 80277a2:	e7df      	b.n	8027764 <__gethex+0x288>
 80277a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80277a6:	2b00      	cmp	r3, #0
 80277a8:	d1dc      	bne.n	8027764 <__gethex+0x288>
 80277aa:	e7ee      	b.n	802778a <__gethex+0x2ae>
 80277ac:	0802e994 	.word	0x0802e994
 80277b0:	0802ea4e 	.word	0x0802ea4e
 80277b4:	0802ea5f 	.word	0x0802ea5f
 80277b8:	1e77      	subs	r7, r6, #1
 80277ba:	2c00      	cmp	r4, #0
 80277bc:	d12f      	bne.n	802781e <__gethex+0x342>
 80277be:	2f00      	cmp	r7, #0
 80277c0:	d004      	beq.n	80277cc <__gethex+0x2f0>
 80277c2:	0039      	movs	r1, r7
 80277c4:	0028      	movs	r0, r5
 80277c6:	f000 fee8 	bl	802859a <__any_on>
 80277ca:	0004      	movs	r4, r0
 80277cc:	231f      	movs	r3, #31
 80277ce:	117a      	asrs	r2, r7, #5
 80277d0:	401f      	ands	r7, r3
 80277d2:	3b1e      	subs	r3, #30
 80277d4:	40bb      	lsls	r3, r7
 80277d6:	9902      	ldr	r1, [sp, #8]
 80277d8:	0092      	lsls	r2, r2, #2
 80277da:	5852      	ldr	r2, [r2, r1]
 80277dc:	421a      	tst	r2, r3
 80277de:	d001      	beq.n	80277e4 <__gethex+0x308>
 80277e0:	2302      	movs	r3, #2
 80277e2:	431c      	orrs	r4, r3
 80277e4:	9b00      	ldr	r3, [sp, #0]
 80277e6:	0031      	movs	r1, r6
 80277e8:	1b9b      	subs	r3, r3, r6
 80277ea:	2602      	movs	r6, #2
 80277ec:	0028      	movs	r0, r5
 80277ee:	9300      	str	r3, [sp, #0]
 80277f0:	f7ff fe0c 	bl	802740c <rshift>
 80277f4:	9b01      	ldr	r3, [sp, #4]
 80277f6:	685f      	ldr	r7, [r3, #4]
 80277f8:	2c00      	cmp	r4, #0
 80277fa:	d03f      	beq.n	802787c <__gethex+0x3a0>
 80277fc:	9b01      	ldr	r3, [sp, #4]
 80277fe:	68db      	ldr	r3, [r3, #12]
 8027800:	2b02      	cmp	r3, #2
 8027802:	d010      	beq.n	8027826 <__gethex+0x34a>
 8027804:	2b03      	cmp	r3, #3
 8027806:	d012      	beq.n	802782e <__gethex+0x352>
 8027808:	2b01      	cmp	r3, #1
 802780a:	d106      	bne.n	802781a <__gethex+0x33e>
 802780c:	07a2      	lsls	r2, r4, #30
 802780e:	d504      	bpl.n	802781a <__gethex+0x33e>
 8027810:	9a02      	ldr	r2, [sp, #8]
 8027812:	6812      	ldr	r2, [r2, #0]
 8027814:	4314      	orrs	r4, r2
 8027816:	421c      	tst	r4, r3
 8027818:	d10c      	bne.n	8027834 <__gethex+0x358>
 802781a:	2310      	movs	r3, #16
 802781c:	e02d      	b.n	802787a <__gethex+0x39e>
 802781e:	2401      	movs	r4, #1
 8027820:	e7d4      	b.n	80277cc <__gethex+0x2f0>
 8027822:	2601      	movs	r6, #1
 8027824:	e7e8      	b.n	80277f8 <__gethex+0x31c>
 8027826:	2301      	movs	r3, #1
 8027828:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802782a:	1a9b      	subs	r3, r3, r2
 802782c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802782e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027830:	2b00      	cmp	r3, #0
 8027832:	d0f2      	beq.n	802781a <__gethex+0x33e>
 8027834:	692b      	ldr	r3, [r5, #16]
 8027836:	2000      	movs	r0, #0
 8027838:	9302      	str	r3, [sp, #8]
 802783a:	009b      	lsls	r3, r3, #2
 802783c:	9304      	str	r3, [sp, #16]
 802783e:	002b      	movs	r3, r5
 8027840:	9a04      	ldr	r2, [sp, #16]
 8027842:	3314      	adds	r3, #20
 8027844:	1899      	adds	r1, r3, r2
 8027846:	681a      	ldr	r2, [r3, #0]
 8027848:	1c54      	adds	r4, r2, #1
 802784a:	d01c      	beq.n	8027886 <__gethex+0x3aa>
 802784c:	3201      	adds	r2, #1
 802784e:	601a      	str	r2, [r3, #0]
 8027850:	002b      	movs	r3, r5
 8027852:	3314      	adds	r3, #20
 8027854:	2e02      	cmp	r6, #2
 8027856:	d13f      	bne.n	80278d8 <__gethex+0x3fc>
 8027858:	9a01      	ldr	r2, [sp, #4]
 802785a:	9900      	ldr	r1, [sp, #0]
 802785c:	6812      	ldr	r2, [r2, #0]
 802785e:	3a01      	subs	r2, #1
 8027860:	428a      	cmp	r2, r1
 8027862:	d109      	bne.n	8027878 <__gethex+0x39c>
 8027864:	000a      	movs	r2, r1
 8027866:	201f      	movs	r0, #31
 8027868:	4010      	ands	r0, r2
 802786a:	2201      	movs	r2, #1
 802786c:	4082      	lsls	r2, r0
 802786e:	1149      	asrs	r1, r1, #5
 8027870:	0089      	lsls	r1, r1, #2
 8027872:	58cb      	ldr	r3, [r1, r3]
 8027874:	4213      	tst	r3, r2
 8027876:	d13d      	bne.n	80278f4 <__gethex+0x418>
 8027878:	2320      	movs	r3, #32
 802787a:	431e      	orrs	r6, r3
 802787c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802787e:	601d      	str	r5, [r3, #0]
 8027880:	9b07      	ldr	r3, [sp, #28]
 8027882:	601f      	str	r7, [r3, #0]
 8027884:	e6b4      	b.n	80275f0 <__gethex+0x114>
 8027886:	c301      	stmia	r3!, {r0}
 8027888:	4299      	cmp	r1, r3
 802788a:	d8dc      	bhi.n	8027846 <__gethex+0x36a>
 802788c:	68ab      	ldr	r3, [r5, #8]
 802788e:	9a02      	ldr	r2, [sp, #8]
 8027890:	429a      	cmp	r2, r3
 8027892:	db18      	blt.n	80278c6 <__gethex+0x3ea>
 8027894:	6869      	ldr	r1, [r5, #4]
 8027896:	9803      	ldr	r0, [sp, #12]
 8027898:	3101      	adds	r1, #1
 802789a:	f000 f9df 	bl	8027c5c <_Balloc>
 802789e:	1e04      	subs	r4, r0, #0
 80278a0:	d104      	bne.n	80278ac <__gethex+0x3d0>
 80278a2:	0022      	movs	r2, r4
 80278a4:	2184      	movs	r1, #132	@ 0x84
 80278a6:	4b1d      	ldr	r3, [pc, #116]	@ (802791c <__gethex+0x440>)
 80278a8:	481d      	ldr	r0, [pc, #116]	@ (8027920 <__gethex+0x444>)
 80278aa:	e6c4      	b.n	8027636 <__gethex+0x15a>
 80278ac:	0029      	movs	r1, r5
 80278ae:	692a      	ldr	r2, [r5, #16]
 80278b0:	310c      	adds	r1, #12
 80278b2:	3202      	adds	r2, #2
 80278b4:	0092      	lsls	r2, r2, #2
 80278b6:	300c      	adds	r0, #12
 80278b8:	f7fe fed8 	bl	802666c <memcpy>
 80278bc:	0029      	movs	r1, r5
 80278be:	9803      	ldr	r0, [sp, #12]
 80278c0:	f000 fa10 	bl	8027ce4 <_Bfree>
 80278c4:	0025      	movs	r5, r4
 80278c6:	692b      	ldr	r3, [r5, #16]
 80278c8:	1c5a      	adds	r2, r3, #1
 80278ca:	612a      	str	r2, [r5, #16]
 80278cc:	2201      	movs	r2, #1
 80278ce:	3304      	adds	r3, #4
 80278d0:	009b      	lsls	r3, r3, #2
 80278d2:	18eb      	adds	r3, r5, r3
 80278d4:	605a      	str	r2, [r3, #4]
 80278d6:	e7bb      	b.n	8027850 <__gethex+0x374>
 80278d8:	692a      	ldr	r2, [r5, #16]
 80278da:	9902      	ldr	r1, [sp, #8]
 80278dc:	428a      	cmp	r2, r1
 80278de:	dd0b      	ble.n	80278f8 <__gethex+0x41c>
 80278e0:	2101      	movs	r1, #1
 80278e2:	0028      	movs	r0, r5
 80278e4:	f7ff fd92 	bl	802740c <rshift>
 80278e8:	9b01      	ldr	r3, [sp, #4]
 80278ea:	3701      	adds	r7, #1
 80278ec:	689b      	ldr	r3, [r3, #8]
 80278ee:	42bb      	cmp	r3, r7
 80278f0:	da00      	bge.n	80278f4 <__gethex+0x418>
 80278f2:	e6df      	b.n	80276b4 <__gethex+0x1d8>
 80278f4:	2601      	movs	r6, #1
 80278f6:	e7bf      	b.n	8027878 <__gethex+0x39c>
 80278f8:	221f      	movs	r2, #31
 80278fa:	9c00      	ldr	r4, [sp, #0]
 80278fc:	9900      	ldr	r1, [sp, #0]
 80278fe:	4014      	ands	r4, r2
 8027900:	4211      	tst	r1, r2
 8027902:	d0f7      	beq.n	80278f4 <__gethex+0x418>
 8027904:	9a04      	ldr	r2, [sp, #16]
 8027906:	189b      	adds	r3, r3, r2
 8027908:	3b04      	subs	r3, #4
 802790a:	6818      	ldr	r0, [r3, #0]
 802790c:	f000 fa9e 	bl	8027e4c <__hi0bits>
 8027910:	2320      	movs	r3, #32
 8027912:	1b1b      	subs	r3, r3, r4
 8027914:	4298      	cmp	r0, r3
 8027916:	dbe3      	blt.n	80278e0 <__gethex+0x404>
 8027918:	e7ec      	b.n	80278f4 <__gethex+0x418>
 802791a:	46c0      	nop			@ (mov r8, r8)
 802791c:	0802ea4e 	.word	0x0802ea4e
 8027920:	0802ea5f 	.word	0x0802ea5f

08027924 <L_shift>:
 8027924:	2308      	movs	r3, #8
 8027926:	b570      	push	{r4, r5, r6, lr}
 8027928:	2520      	movs	r5, #32
 802792a:	1a9a      	subs	r2, r3, r2
 802792c:	0092      	lsls	r2, r2, #2
 802792e:	1aad      	subs	r5, r5, r2
 8027930:	6843      	ldr	r3, [r0, #4]
 8027932:	6804      	ldr	r4, [r0, #0]
 8027934:	001e      	movs	r6, r3
 8027936:	40ae      	lsls	r6, r5
 8027938:	40d3      	lsrs	r3, r2
 802793a:	4334      	orrs	r4, r6
 802793c:	6004      	str	r4, [r0, #0]
 802793e:	6043      	str	r3, [r0, #4]
 8027940:	3004      	adds	r0, #4
 8027942:	4288      	cmp	r0, r1
 8027944:	d3f4      	bcc.n	8027930 <L_shift+0xc>
 8027946:	bd70      	pop	{r4, r5, r6, pc}

08027948 <__match>:
 8027948:	b530      	push	{r4, r5, lr}
 802794a:	6803      	ldr	r3, [r0, #0]
 802794c:	780c      	ldrb	r4, [r1, #0]
 802794e:	3301      	adds	r3, #1
 8027950:	2c00      	cmp	r4, #0
 8027952:	d102      	bne.n	802795a <__match+0x12>
 8027954:	6003      	str	r3, [r0, #0]
 8027956:	2001      	movs	r0, #1
 8027958:	bd30      	pop	{r4, r5, pc}
 802795a:	781a      	ldrb	r2, [r3, #0]
 802795c:	0015      	movs	r5, r2
 802795e:	3d41      	subs	r5, #65	@ 0x41
 8027960:	2d19      	cmp	r5, #25
 8027962:	d800      	bhi.n	8027966 <__match+0x1e>
 8027964:	3220      	adds	r2, #32
 8027966:	3101      	adds	r1, #1
 8027968:	42a2      	cmp	r2, r4
 802796a:	d0ef      	beq.n	802794c <__match+0x4>
 802796c:	2000      	movs	r0, #0
 802796e:	e7f3      	b.n	8027958 <__match+0x10>

08027970 <__hexnan>:
 8027970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027972:	680b      	ldr	r3, [r1, #0]
 8027974:	b08b      	sub	sp, #44	@ 0x2c
 8027976:	9201      	str	r2, [sp, #4]
 8027978:	9901      	ldr	r1, [sp, #4]
 802797a:	115a      	asrs	r2, r3, #5
 802797c:	0092      	lsls	r2, r2, #2
 802797e:	188a      	adds	r2, r1, r2
 8027980:	9202      	str	r2, [sp, #8]
 8027982:	0019      	movs	r1, r3
 8027984:	221f      	movs	r2, #31
 8027986:	4011      	ands	r1, r2
 8027988:	9008      	str	r0, [sp, #32]
 802798a:	9106      	str	r1, [sp, #24]
 802798c:	4213      	tst	r3, r2
 802798e:	d002      	beq.n	8027996 <__hexnan+0x26>
 8027990:	9b02      	ldr	r3, [sp, #8]
 8027992:	3304      	adds	r3, #4
 8027994:	9302      	str	r3, [sp, #8]
 8027996:	9b02      	ldr	r3, [sp, #8]
 8027998:	2500      	movs	r5, #0
 802799a:	1f1f      	subs	r7, r3, #4
 802799c:	003e      	movs	r6, r7
 802799e:	003c      	movs	r4, r7
 80279a0:	9b08      	ldr	r3, [sp, #32]
 80279a2:	603d      	str	r5, [r7, #0]
 80279a4:	681b      	ldr	r3, [r3, #0]
 80279a6:	9507      	str	r5, [sp, #28]
 80279a8:	9305      	str	r3, [sp, #20]
 80279aa:	9503      	str	r5, [sp, #12]
 80279ac:	9b05      	ldr	r3, [sp, #20]
 80279ae:	3301      	adds	r3, #1
 80279b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80279b2:	9b05      	ldr	r3, [sp, #20]
 80279b4:	785b      	ldrb	r3, [r3, #1]
 80279b6:	9304      	str	r3, [sp, #16]
 80279b8:	2b00      	cmp	r3, #0
 80279ba:	d028      	beq.n	8027a0e <__hexnan+0x9e>
 80279bc:	9804      	ldr	r0, [sp, #16]
 80279be:	f7ff fd78 	bl	80274b2 <__hexdig_fun>
 80279c2:	2800      	cmp	r0, #0
 80279c4:	d155      	bne.n	8027a72 <__hexnan+0x102>
 80279c6:	9b04      	ldr	r3, [sp, #16]
 80279c8:	2b20      	cmp	r3, #32
 80279ca:	d819      	bhi.n	8027a00 <__hexnan+0x90>
 80279cc:	9b03      	ldr	r3, [sp, #12]
 80279ce:	9a07      	ldr	r2, [sp, #28]
 80279d0:	4293      	cmp	r3, r2
 80279d2:	dd12      	ble.n	80279fa <__hexnan+0x8a>
 80279d4:	42b4      	cmp	r4, r6
 80279d6:	d206      	bcs.n	80279e6 <__hexnan+0x76>
 80279d8:	2d07      	cmp	r5, #7
 80279da:	dc04      	bgt.n	80279e6 <__hexnan+0x76>
 80279dc:	002a      	movs	r2, r5
 80279de:	0031      	movs	r1, r6
 80279e0:	0020      	movs	r0, r4
 80279e2:	f7ff ff9f 	bl	8027924 <L_shift>
 80279e6:	9b01      	ldr	r3, [sp, #4]
 80279e8:	2508      	movs	r5, #8
 80279ea:	429c      	cmp	r4, r3
 80279ec:	d905      	bls.n	80279fa <__hexnan+0x8a>
 80279ee:	1f26      	subs	r6, r4, #4
 80279f0:	2500      	movs	r5, #0
 80279f2:	0034      	movs	r4, r6
 80279f4:	9b03      	ldr	r3, [sp, #12]
 80279f6:	6035      	str	r5, [r6, #0]
 80279f8:	9307      	str	r3, [sp, #28]
 80279fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80279fc:	9305      	str	r3, [sp, #20]
 80279fe:	e7d5      	b.n	80279ac <__hexnan+0x3c>
 8027a00:	9b04      	ldr	r3, [sp, #16]
 8027a02:	2b29      	cmp	r3, #41	@ 0x29
 8027a04:	d15a      	bne.n	8027abc <__hexnan+0x14c>
 8027a06:	9b05      	ldr	r3, [sp, #20]
 8027a08:	9a08      	ldr	r2, [sp, #32]
 8027a0a:	3302      	adds	r3, #2
 8027a0c:	6013      	str	r3, [r2, #0]
 8027a0e:	9b03      	ldr	r3, [sp, #12]
 8027a10:	2b00      	cmp	r3, #0
 8027a12:	d053      	beq.n	8027abc <__hexnan+0x14c>
 8027a14:	42b4      	cmp	r4, r6
 8027a16:	d206      	bcs.n	8027a26 <__hexnan+0xb6>
 8027a18:	2d07      	cmp	r5, #7
 8027a1a:	dc04      	bgt.n	8027a26 <__hexnan+0xb6>
 8027a1c:	002a      	movs	r2, r5
 8027a1e:	0031      	movs	r1, r6
 8027a20:	0020      	movs	r0, r4
 8027a22:	f7ff ff7f 	bl	8027924 <L_shift>
 8027a26:	9b01      	ldr	r3, [sp, #4]
 8027a28:	429c      	cmp	r4, r3
 8027a2a:	d936      	bls.n	8027a9a <__hexnan+0x12a>
 8027a2c:	001a      	movs	r2, r3
 8027a2e:	0023      	movs	r3, r4
 8027a30:	cb02      	ldmia	r3!, {r1}
 8027a32:	c202      	stmia	r2!, {r1}
 8027a34:	429f      	cmp	r7, r3
 8027a36:	d2fb      	bcs.n	8027a30 <__hexnan+0xc0>
 8027a38:	9b02      	ldr	r3, [sp, #8]
 8027a3a:	1c62      	adds	r2, r4, #1
 8027a3c:	1ed9      	subs	r1, r3, #3
 8027a3e:	2304      	movs	r3, #4
 8027a40:	4291      	cmp	r1, r2
 8027a42:	d305      	bcc.n	8027a50 <__hexnan+0xe0>
 8027a44:	9b02      	ldr	r3, [sp, #8]
 8027a46:	3b04      	subs	r3, #4
 8027a48:	1b1b      	subs	r3, r3, r4
 8027a4a:	089b      	lsrs	r3, r3, #2
 8027a4c:	3301      	adds	r3, #1
 8027a4e:	009b      	lsls	r3, r3, #2
 8027a50:	9a01      	ldr	r2, [sp, #4]
 8027a52:	18d3      	adds	r3, r2, r3
 8027a54:	2200      	movs	r2, #0
 8027a56:	c304      	stmia	r3!, {r2}
 8027a58:	429f      	cmp	r7, r3
 8027a5a:	d2fc      	bcs.n	8027a56 <__hexnan+0xe6>
 8027a5c:	683b      	ldr	r3, [r7, #0]
 8027a5e:	2b00      	cmp	r3, #0
 8027a60:	d104      	bne.n	8027a6c <__hexnan+0xfc>
 8027a62:	9b01      	ldr	r3, [sp, #4]
 8027a64:	429f      	cmp	r7, r3
 8027a66:	d127      	bne.n	8027ab8 <__hexnan+0x148>
 8027a68:	2301      	movs	r3, #1
 8027a6a:	603b      	str	r3, [r7, #0]
 8027a6c:	2005      	movs	r0, #5
 8027a6e:	b00b      	add	sp, #44	@ 0x2c
 8027a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027a72:	9b03      	ldr	r3, [sp, #12]
 8027a74:	3501      	adds	r5, #1
 8027a76:	3301      	adds	r3, #1
 8027a78:	9303      	str	r3, [sp, #12]
 8027a7a:	2d08      	cmp	r5, #8
 8027a7c:	dd06      	ble.n	8027a8c <__hexnan+0x11c>
 8027a7e:	9b01      	ldr	r3, [sp, #4]
 8027a80:	429c      	cmp	r4, r3
 8027a82:	d9ba      	bls.n	80279fa <__hexnan+0x8a>
 8027a84:	2300      	movs	r3, #0
 8027a86:	2501      	movs	r5, #1
 8027a88:	3c04      	subs	r4, #4
 8027a8a:	6023      	str	r3, [r4, #0]
 8027a8c:	220f      	movs	r2, #15
 8027a8e:	6823      	ldr	r3, [r4, #0]
 8027a90:	4010      	ands	r0, r2
 8027a92:	011b      	lsls	r3, r3, #4
 8027a94:	4303      	orrs	r3, r0
 8027a96:	6023      	str	r3, [r4, #0]
 8027a98:	e7af      	b.n	80279fa <__hexnan+0x8a>
 8027a9a:	9b06      	ldr	r3, [sp, #24]
 8027a9c:	2b00      	cmp	r3, #0
 8027a9e:	d0dd      	beq.n	8027a5c <__hexnan+0xec>
 8027aa0:	2320      	movs	r3, #32
 8027aa2:	9a06      	ldr	r2, [sp, #24]
 8027aa4:	9902      	ldr	r1, [sp, #8]
 8027aa6:	1a9b      	subs	r3, r3, r2
 8027aa8:	2201      	movs	r2, #1
 8027aaa:	4252      	negs	r2, r2
 8027aac:	40da      	lsrs	r2, r3
 8027aae:	3904      	subs	r1, #4
 8027ab0:	680b      	ldr	r3, [r1, #0]
 8027ab2:	4013      	ands	r3, r2
 8027ab4:	600b      	str	r3, [r1, #0]
 8027ab6:	e7d1      	b.n	8027a5c <__hexnan+0xec>
 8027ab8:	3f04      	subs	r7, #4
 8027aba:	e7cf      	b.n	8027a5c <__hexnan+0xec>
 8027abc:	2004      	movs	r0, #4
 8027abe:	e7d6      	b.n	8027a6e <__hexnan+0xfe>

08027ac0 <malloc>:
 8027ac0:	b510      	push	{r4, lr}
 8027ac2:	4b03      	ldr	r3, [pc, #12]	@ (8027ad0 <malloc+0x10>)
 8027ac4:	0001      	movs	r1, r0
 8027ac6:	6818      	ldr	r0, [r3, #0]
 8027ac8:	f000 f826 	bl	8027b18 <_malloc_r>
 8027acc:	bd10      	pop	{r4, pc}
 8027ace:	46c0      	nop			@ (mov r8, r8)
 8027ad0:	200003ec 	.word	0x200003ec

08027ad4 <sbrk_aligned>:
 8027ad4:	b570      	push	{r4, r5, r6, lr}
 8027ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8027b14 <sbrk_aligned+0x40>)
 8027ad8:	000d      	movs	r5, r1
 8027ada:	6831      	ldr	r1, [r6, #0]
 8027adc:	0004      	movs	r4, r0
 8027ade:	2900      	cmp	r1, #0
 8027ae0:	d102      	bne.n	8027ae8 <sbrk_aligned+0x14>
 8027ae2:	f001 f981 	bl	8028de8 <_sbrk_r>
 8027ae6:	6030      	str	r0, [r6, #0]
 8027ae8:	0029      	movs	r1, r5
 8027aea:	0020      	movs	r0, r4
 8027aec:	f001 f97c 	bl	8028de8 <_sbrk_r>
 8027af0:	1c43      	adds	r3, r0, #1
 8027af2:	d103      	bne.n	8027afc <sbrk_aligned+0x28>
 8027af4:	2501      	movs	r5, #1
 8027af6:	426d      	negs	r5, r5
 8027af8:	0028      	movs	r0, r5
 8027afa:	bd70      	pop	{r4, r5, r6, pc}
 8027afc:	2303      	movs	r3, #3
 8027afe:	1cc5      	adds	r5, r0, #3
 8027b00:	439d      	bics	r5, r3
 8027b02:	42a8      	cmp	r0, r5
 8027b04:	d0f8      	beq.n	8027af8 <sbrk_aligned+0x24>
 8027b06:	1a29      	subs	r1, r5, r0
 8027b08:	0020      	movs	r0, r4
 8027b0a:	f001 f96d 	bl	8028de8 <_sbrk_r>
 8027b0e:	3001      	adds	r0, #1
 8027b10:	d1f2      	bne.n	8027af8 <sbrk_aligned+0x24>
 8027b12:	e7ef      	b.n	8027af4 <sbrk_aligned+0x20>
 8027b14:	20003914 	.word	0x20003914

08027b18 <_malloc_r>:
 8027b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027b1a:	2203      	movs	r2, #3
 8027b1c:	1ccb      	adds	r3, r1, #3
 8027b1e:	4393      	bics	r3, r2
 8027b20:	3308      	adds	r3, #8
 8027b22:	0005      	movs	r5, r0
 8027b24:	001f      	movs	r7, r3
 8027b26:	2b0c      	cmp	r3, #12
 8027b28:	d234      	bcs.n	8027b94 <_malloc_r+0x7c>
 8027b2a:	270c      	movs	r7, #12
 8027b2c:	42b9      	cmp	r1, r7
 8027b2e:	d833      	bhi.n	8027b98 <_malloc_r+0x80>
 8027b30:	0028      	movs	r0, r5
 8027b32:	f000 f883 	bl	8027c3c <__malloc_lock>
 8027b36:	4e37      	ldr	r6, [pc, #220]	@ (8027c14 <_malloc_r+0xfc>)
 8027b38:	6833      	ldr	r3, [r6, #0]
 8027b3a:	001c      	movs	r4, r3
 8027b3c:	2c00      	cmp	r4, #0
 8027b3e:	d12f      	bne.n	8027ba0 <_malloc_r+0x88>
 8027b40:	0039      	movs	r1, r7
 8027b42:	0028      	movs	r0, r5
 8027b44:	f7ff ffc6 	bl	8027ad4 <sbrk_aligned>
 8027b48:	0004      	movs	r4, r0
 8027b4a:	1c43      	adds	r3, r0, #1
 8027b4c:	d15f      	bne.n	8027c0e <_malloc_r+0xf6>
 8027b4e:	6834      	ldr	r4, [r6, #0]
 8027b50:	9400      	str	r4, [sp, #0]
 8027b52:	9b00      	ldr	r3, [sp, #0]
 8027b54:	2b00      	cmp	r3, #0
 8027b56:	d14a      	bne.n	8027bee <_malloc_r+0xd6>
 8027b58:	2c00      	cmp	r4, #0
 8027b5a:	d052      	beq.n	8027c02 <_malloc_r+0xea>
 8027b5c:	6823      	ldr	r3, [r4, #0]
 8027b5e:	0028      	movs	r0, r5
 8027b60:	18e3      	adds	r3, r4, r3
 8027b62:	9900      	ldr	r1, [sp, #0]
 8027b64:	9301      	str	r3, [sp, #4]
 8027b66:	f001 f93f 	bl	8028de8 <_sbrk_r>
 8027b6a:	9b01      	ldr	r3, [sp, #4]
 8027b6c:	4283      	cmp	r3, r0
 8027b6e:	d148      	bne.n	8027c02 <_malloc_r+0xea>
 8027b70:	6823      	ldr	r3, [r4, #0]
 8027b72:	0028      	movs	r0, r5
 8027b74:	1aff      	subs	r7, r7, r3
 8027b76:	0039      	movs	r1, r7
 8027b78:	f7ff ffac 	bl	8027ad4 <sbrk_aligned>
 8027b7c:	3001      	adds	r0, #1
 8027b7e:	d040      	beq.n	8027c02 <_malloc_r+0xea>
 8027b80:	6823      	ldr	r3, [r4, #0]
 8027b82:	19db      	adds	r3, r3, r7
 8027b84:	6023      	str	r3, [r4, #0]
 8027b86:	6833      	ldr	r3, [r6, #0]
 8027b88:	685a      	ldr	r2, [r3, #4]
 8027b8a:	2a00      	cmp	r2, #0
 8027b8c:	d133      	bne.n	8027bf6 <_malloc_r+0xde>
 8027b8e:	9b00      	ldr	r3, [sp, #0]
 8027b90:	6033      	str	r3, [r6, #0]
 8027b92:	e019      	b.n	8027bc8 <_malloc_r+0xb0>
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	dac9      	bge.n	8027b2c <_malloc_r+0x14>
 8027b98:	230c      	movs	r3, #12
 8027b9a:	602b      	str	r3, [r5, #0]
 8027b9c:	2000      	movs	r0, #0
 8027b9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027ba0:	6821      	ldr	r1, [r4, #0]
 8027ba2:	1bc9      	subs	r1, r1, r7
 8027ba4:	d420      	bmi.n	8027be8 <_malloc_r+0xd0>
 8027ba6:	290b      	cmp	r1, #11
 8027ba8:	d90a      	bls.n	8027bc0 <_malloc_r+0xa8>
 8027baa:	19e2      	adds	r2, r4, r7
 8027bac:	6027      	str	r7, [r4, #0]
 8027bae:	42a3      	cmp	r3, r4
 8027bb0:	d104      	bne.n	8027bbc <_malloc_r+0xa4>
 8027bb2:	6032      	str	r2, [r6, #0]
 8027bb4:	6863      	ldr	r3, [r4, #4]
 8027bb6:	6011      	str	r1, [r2, #0]
 8027bb8:	6053      	str	r3, [r2, #4]
 8027bba:	e005      	b.n	8027bc8 <_malloc_r+0xb0>
 8027bbc:	605a      	str	r2, [r3, #4]
 8027bbe:	e7f9      	b.n	8027bb4 <_malloc_r+0x9c>
 8027bc0:	6862      	ldr	r2, [r4, #4]
 8027bc2:	42a3      	cmp	r3, r4
 8027bc4:	d10e      	bne.n	8027be4 <_malloc_r+0xcc>
 8027bc6:	6032      	str	r2, [r6, #0]
 8027bc8:	0028      	movs	r0, r5
 8027bca:	f000 f83f 	bl	8027c4c <__malloc_unlock>
 8027bce:	0020      	movs	r0, r4
 8027bd0:	2207      	movs	r2, #7
 8027bd2:	300b      	adds	r0, #11
 8027bd4:	1d23      	adds	r3, r4, #4
 8027bd6:	4390      	bics	r0, r2
 8027bd8:	1ac2      	subs	r2, r0, r3
 8027bda:	4298      	cmp	r0, r3
 8027bdc:	d0df      	beq.n	8027b9e <_malloc_r+0x86>
 8027bde:	1a1b      	subs	r3, r3, r0
 8027be0:	50a3      	str	r3, [r4, r2]
 8027be2:	e7dc      	b.n	8027b9e <_malloc_r+0x86>
 8027be4:	605a      	str	r2, [r3, #4]
 8027be6:	e7ef      	b.n	8027bc8 <_malloc_r+0xb0>
 8027be8:	0023      	movs	r3, r4
 8027bea:	6864      	ldr	r4, [r4, #4]
 8027bec:	e7a6      	b.n	8027b3c <_malloc_r+0x24>
 8027bee:	9c00      	ldr	r4, [sp, #0]
 8027bf0:	6863      	ldr	r3, [r4, #4]
 8027bf2:	9300      	str	r3, [sp, #0]
 8027bf4:	e7ad      	b.n	8027b52 <_malloc_r+0x3a>
 8027bf6:	001a      	movs	r2, r3
 8027bf8:	685b      	ldr	r3, [r3, #4]
 8027bfa:	42a3      	cmp	r3, r4
 8027bfc:	d1fb      	bne.n	8027bf6 <_malloc_r+0xde>
 8027bfe:	2300      	movs	r3, #0
 8027c00:	e7da      	b.n	8027bb8 <_malloc_r+0xa0>
 8027c02:	230c      	movs	r3, #12
 8027c04:	0028      	movs	r0, r5
 8027c06:	602b      	str	r3, [r5, #0]
 8027c08:	f000 f820 	bl	8027c4c <__malloc_unlock>
 8027c0c:	e7c6      	b.n	8027b9c <_malloc_r+0x84>
 8027c0e:	6007      	str	r7, [r0, #0]
 8027c10:	e7da      	b.n	8027bc8 <_malloc_r+0xb0>
 8027c12:	46c0      	nop			@ (mov r8, r8)
 8027c14:	20003918 	.word	0x20003918

08027c18 <__ascii_mbtowc>:
 8027c18:	b082      	sub	sp, #8
 8027c1a:	2900      	cmp	r1, #0
 8027c1c:	d100      	bne.n	8027c20 <__ascii_mbtowc+0x8>
 8027c1e:	a901      	add	r1, sp, #4
 8027c20:	1e10      	subs	r0, r2, #0
 8027c22:	d006      	beq.n	8027c32 <__ascii_mbtowc+0x1a>
 8027c24:	2b00      	cmp	r3, #0
 8027c26:	d006      	beq.n	8027c36 <__ascii_mbtowc+0x1e>
 8027c28:	7813      	ldrb	r3, [r2, #0]
 8027c2a:	600b      	str	r3, [r1, #0]
 8027c2c:	7810      	ldrb	r0, [r2, #0]
 8027c2e:	1e43      	subs	r3, r0, #1
 8027c30:	4198      	sbcs	r0, r3
 8027c32:	b002      	add	sp, #8
 8027c34:	4770      	bx	lr
 8027c36:	2002      	movs	r0, #2
 8027c38:	4240      	negs	r0, r0
 8027c3a:	e7fa      	b.n	8027c32 <__ascii_mbtowc+0x1a>

08027c3c <__malloc_lock>:
 8027c3c:	b510      	push	{r4, lr}
 8027c3e:	4802      	ldr	r0, [pc, #8]	@ (8027c48 <__malloc_lock+0xc>)
 8027c40:	f7fe fd07 	bl	8026652 <__retarget_lock_acquire_recursive>
 8027c44:	bd10      	pop	{r4, pc}
 8027c46:	46c0      	nop			@ (mov r8, r8)
 8027c48:	20003910 	.word	0x20003910

08027c4c <__malloc_unlock>:
 8027c4c:	b510      	push	{r4, lr}
 8027c4e:	4802      	ldr	r0, [pc, #8]	@ (8027c58 <__malloc_unlock+0xc>)
 8027c50:	f7fe fd00 	bl	8026654 <__retarget_lock_release_recursive>
 8027c54:	bd10      	pop	{r4, pc}
 8027c56:	46c0      	nop			@ (mov r8, r8)
 8027c58:	20003910 	.word	0x20003910

08027c5c <_Balloc>:
 8027c5c:	b570      	push	{r4, r5, r6, lr}
 8027c5e:	69c5      	ldr	r5, [r0, #28]
 8027c60:	0006      	movs	r6, r0
 8027c62:	000c      	movs	r4, r1
 8027c64:	2d00      	cmp	r5, #0
 8027c66:	d10e      	bne.n	8027c86 <_Balloc+0x2a>
 8027c68:	2010      	movs	r0, #16
 8027c6a:	f7ff ff29 	bl	8027ac0 <malloc>
 8027c6e:	1e02      	subs	r2, r0, #0
 8027c70:	61f0      	str	r0, [r6, #28]
 8027c72:	d104      	bne.n	8027c7e <_Balloc+0x22>
 8027c74:	216b      	movs	r1, #107	@ 0x6b
 8027c76:	4b19      	ldr	r3, [pc, #100]	@ (8027cdc <_Balloc+0x80>)
 8027c78:	4819      	ldr	r0, [pc, #100]	@ (8027ce0 <_Balloc+0x84>)
 8027c7a:	f001 f8c7 	bl	8028e0c <__assert_func>
 8027c7e:	6045      	str	r5, [r0, #4]
 8027c80:	6085      	str	r5, [r0, #8]
 8027c82:	6005      	str	r5, [r0, #0]
 8027c84:	60c5      	str	r5, [r0, #12]
 8027c86:	69f5      	ldr	r5, [r6, #28]
 8027c88:	68eb      	ldr	r3, [r5, #12]
 8027c8a:	2b00      	cmp	r3, #0
 8027c8c:	d013      	beq.n	8027cb6 <_Balloc+0x5a>
 8027c8e:	69f3      	ldr	r3, [r6, #28]
 8027c90:	00a2      	lsls	r2, r4, #2
 8027c92:	68db      	ldr	r3, [r3, #12]
 8027c94:	189b      	adds	r3, r3, r2
 8027c96:	6818      	ldr	r0, [r3, #0]
 8027c98:	2800      	cmp	r0, #0
 8027c9a:	d118      	bne.n	8027cce <_Balloc+0x72>
 8027c9c:	2101      	movs	r1, #1
 8027c9e:	000d      	movs	r5, r1
 8027ca0:	40a5      	lsls	r5, r4
 8027ca2:	1d6a      	adds	r2, r5, #5
 8027ca4:	0030      	movs	r0, r6
 8027ca6:	0092      	lsls	r2, r2, #2
 8027ca8:	f001 f8ce 	bl	8028e48 <_calloc_r>
 8027cac:	2800      	cmp	r0, #0
 8027cae:	d00c      	beq.n	8027cca <_Balloc+0x6e>
 8027cb0:	6044      	str	r4, [r0, #4]
 8027cb2:	6085      	str	r5, [r0, #8]
 8027cb4:	e00d      	b.n	8027cd2 <_Balloc+0x76>
 8027cb6:	2221      	movs	r2, #33	@ 0x21
 8027cb8:	2104      	movs	r1, #4
 8027cba:	0030      	movs	r0, r6
 8027cbc:	f001 f8c4 	bl	8028e48 <_calloc_r>
 8027cc0:	69f3      	ldr	r3, [r6, #28]
 8027cc2:	60e8      	str	r0, [r5, #12]
 8027cc4:	68db      	ldr	r3, [r3, #12]
 8027cc6:	2b00      	cmp	r3, #0
 8027cc8:	d1e1      	bne.n	8027c8e <_Balloc+0x32>
 8027cca:	2000      	movs	r0, #0
 8027ccc:	bd70      	pop	{r4, r5, r6, pc}
 8027cce:	6802      	ldr	r2, [r0, #0]
 8027cd0:	601a      	str	r2, [r3, #0]
 8027cd2:	2300      	movs	r3, #0
 8027cd4:	6103      	str	r3, [r0, #16]
 8027cd6:	60c3      	str	r3, [r0, #12]
 8027cd8:	e7f8      	b.n	8027ccc <_Balloc+0x70>
 8027cda:	46c0      	nop			@ (mov r8, r8)
 8027cdc:	0802e9df 	.word	0x0802e9df
 8027ce0:	0802eabf 	.word	0x0802eabf

08027ce4 <_Bfree>:
 8027ce4:	b570      	push	{r4, r5, r6, lr}
 8027ce6:	69c6      	ldr	r6, [r0, #28]
 8027ce8:	0005      	movs	r5, r0
 8027cea:	000c      	movs	r4, r1
 8027cec:	2e00      	cmp	r6, #0
 8027cee:	d10e      	bne.n	8027d0e <_Bfree+0x2a>
 8027cf0:	2010      	movs	r0, #16
 8027cf2:	f7ff fee5 	bl	8027ac0 <malloc>
 8027cf6:	1e02      	subs	r2, r0, #0
 8027cf8:	61e8      	str	r0, [r5, #28]
 8027cfa:	d104      	bne.n	8027d06 <_Bfree+0x22>
 8027cfc:	218f      	movs	r1, #143	@ 0x8f
 8027cfe:	4b09      	ldr	r3, [pc, #36]	@ (8027d24 <_Bfree+0x40>)
 8027d00:	4809      	ldr	r0, [pc, #36]	@ (8027d28 <_Bfree+0x44>)
 8027d02:	f001 f883 	bl	8028e0c <__assert_func>
 8027d06:	6046      	str	r6, [r0, #4]
 8027d08:	6086      	str	r6, [r0, #8]
 8027d0a:	6006      	str	r6, [r0, #0]
 8027d0c:	60c6      	str	r6, [r0, #12]
 8027d0e:	2c00      	cmp	r4, #0
 8027d10:	d007      	beq.n	8027d22 <_Bfree+0x3e>
 8027d12:	69eb      	ldr	r3, [r5, #28]
 8027d14:	6862      	ldr	r2, [r4, #4]
 8027d16:	68db      	ldr	r3, [r3, #12]
 8027d18:	0092      	lsls	r2, r2, #2
 8027d1a:	189b      	adds	r3, r3, r2
 8027d1c:	681a      	ldr	r2, [r3, #0]
 8027d1e:	6022      	str	r2, [r4, #0]
 8027d20:	601c      	str	r4, [r3, #0]
 8027d22:	bd70      	pop	{r4, r5, r6, pc}
 8027d24:	0802e9df 	.word	0x0802e9df
 8027d28:	0802eabf 	.word	0x0802eabf

08027d2c <__multadd>:
 8027d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027d2e:	000f      	movs	r7, r1
 8027d30:	9001      	str	r0, [sp, #4]
 8027d32:	000c      	movs	r4, r1
 8027d34:	001e      	movs	r6, r3
 8027d36:	2000      	movs	r0, #0
 8027d38:	690d      	ldr	r5, [r1, #16]
 8027d3a:	3714      	adds	r7, #20
 8027d3c:	683b      	ldr	r3, [r7, #0]
 8027d3e:	3001      	adds	r0, #1
 8027d40:	b299      	uxth	r1, r3
 8027d42:	4351      	muls	r1, r2
 8027d44:	0c1b      	lsrs	r3, r3, #16
 8027d46:	4353      	muls	r3, r2
 8027d48:	1989      	adds	r1, r1, r6
 8027d4a:	0c0e      	lsrs	r6, r1, #16
 8027d4c:	199b      	adds	r3, r3, r6
 8027d4e:	0c1e      	lsrs	r6, r3, #16
 8027d50:	b289      	uxth	r1, r1
 8027d52:	041b      	lsls	r3, r3, #16
 8027d54:	185b      	adds	r3, r3, r1
 8027d56:	c708      	stmia	r7!, {r3}
 8027d58:	4285      	cmp	r5, r0
 8027d5a:	dcef      	bgt.n	8027d3c <__multadd+0x10>
 8027d5c:	2e00      	cmp	r6, #0
 8027d5e:	d022      	beq.n	8027da6 <__multadd+0x7a>
 8027d60:	68a3      	ldr	r3, [r4, #8]
 8027d62:	42ab      	cmp	r3, r5
 8027d64:	dc19      	bgt.n	8027d9a <__multadd+0x6e>
 8027d66:	6861      	ldr	r1, [r4, #4]
 8027d68:	9801      	ldr	r0, [sp, #4]
 8027d6a:	3101      	adds	r1, #1
 8027d6c:	f7ff ff76 	bl	8027c5c <_Balloc>
 8027d70:	1e07      	subs	r7, r0, #0
 8027d72:	d105      	bne.n	8027d80 <__multadd+0x54>
 8027d74:	003a      	movs	r2, r7
 8027d76:	21ba      	movs	r1, #186	@ 0xba
 8027d78:	4b0c      	ldr	r3, [pc, #48]	@ (8027dac <__multadd+0x80>)
 8027d7a:	480d      	ldr	r0, [pc, #52]	@ (8027db0 <__multadd+0x84>)
 8027d7c:	f001 f846 	bl	8028e0c <__assert_func>
 8027d80:	0021      	movs	r1, r4
 8027d82:	6922      	ldr	r2, [r4, #16]
 8027d84:	310c      	adds	r1, #12
 8027d86:	3202      	adds	r2, #2
 8027d88:	0092      	lsls	r2, r2, #2
 8027d8a:	300c      	adds	r0, #12
 8027d8c:	f7fe fc6e 	bl	802666c <memcpy>
 8027d90:	0021      	movs	r1, r4
 8027d92:	9801      	ldr	r0, [sp, #4]
 8027d94:	f7ff ffa6 	bl	8027ce4 <_Bfree>
 8027d98:	003c      	movs	r4, r7
 8027d9a:	1d2b      	adds	r3, r5, #4
 8027d9c:	009b      	lsls	r3, r3, #2
 8027d9e:	18e3      	adds	r3, r4, r3
 8027da0:	3501      	adds	r5, #1
 8027da2:	605e      	str	r6, [r3, #4]
 8027da4:	6125      	str	r5, [r4, #16]
 8027da6:	0020      	movs	r0, r4
 8027da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027daa:	46c0      	nop			@ (mov r8, r8)
 8027dac:	0802ea4e 	.word	0x0802ea4e
 8027db0:	0802eabf 	.word	0x0802eabf

08027db4 <__s2b>:
 8027db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027db6:	0007      	movs	r7, r0
 8027db8:	0018      	movs	r0, r3
 8027dba:	000c      	movs	r4, r1
 8027dbc:	3008      	adds	r0, #8
 8027dbe:	2109      	movs	r1, #9
 8027dc0:	9301      	str	r3, [sp, #4]
 8027dc2:	0015      	movs	r5, r2
 8027dc4:	f7d8 fa78 	bl	80002b8 <__divsi3>
 8027dc8:	2301      	movs	r3, #1
 8027dca:	2100      	movs	r1, #0
 8027dcc:	4283      	cmp	r3, r0
 8027dce:	db0a      	blt.n	8027de6 <__s2b+0x32>
 8027dd0:	0038      	movs	r0, r7
 8027dd2:	f7ff ff43 	bl	8027c5c <_Balloc>
 8027dd6:	1e01      	subs	r1, r0, #0
 8027dd8:	d108      	bne.n	8027dec <__s2b+0x38>
 8027dda:	000a      	movs	r2, r1
 8027ddc:	4b19      	ldr	r3, [pc, #100]	@ (8027e44 <__s2b+0x90>)
 8027dde:	481a      	ldr	r0, [pc, #104]	@ (8027e48 <__s2b+0x94>)
 8027de0:	31d3      	adds	r1, #211	@ 0xd3
 8027de2:	f001 f813 	bl	8028e0c <__assert_func>
 8027de6:	005b      	lsls	r3, r3, #1
 8027de8:	3101      	adds	r1, #1
 8027dea:	e7ef      	b.n	8027dcc <__s2b+0x18>
 8027dec:	9b08      	ldr	r3, [sp, #32]
 8027dee:	6143      	str	r3, [r0, #20]
 8027df0:	2301      	movs	r3, #1
 8027df2:	6103      	str	r3, [r0, #16]
 8027df4:	2d09      	cmp	r5, #9
 8027df6:	dd18      	ble.n	8027e2a <__s2b+0x76>
 8027df8:	0023      	movs	r3, r4
 8027dfa:	3309      	adds	r3, #9
 8027dfc:	001e      	movs	r6, r3
 8027dfe:	9300      	str	r3, [sp, #0]
 8027e00:	1964      	adds	r4, r4, r5
 8027e02:	7833      	ldrb	r3, [r6, #0]
 8027e04:	220a      	movs	r2, #10
 8027e06:	0038      	movs	r0, r7
 8027e08:	3b30      	subs	r3, #48	@ 0x30
 8027e0a:	f7ff ff8f 	bl	8027d2c <__multadd>
 8027e0e:	3601      	adds	r6, #1
 8027e10:	0001      	movs	r1, r0
 8027e12:	42a6      	cmp	r6, r4
 8027e14:	d1f5      	bne.n	8027e02 <__s2b+0x4e>
 8027e16:	002c      	movs	r4, r5
 8027e18:	9b00      	ldr	r3, [sp, #0]
 8027e1a:	3c08      	subs	r4, #8
 8027e1c:	191c      	adds	r4, r3, r4
 8027e1e:	002e      	movs	r6, r5
 8027e20:	9b01      	ldr	r3, [sp, #4]
 8027e22:	429e      	cmp	r6, r3
 8027e24:	db04      	blt.n	8027e30 <__s2b+0x7c>
 8027e26:	0008      	movs	r0, r1
 8027e28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027e2a:	2509      	movs	r5, #9
 8027e2c:	340a      	adds	r4, #10
 8027e2e:	e7f6      	b.n	8027e1e <__s2b+0x6a>
 8027e30:	1b63      	subs	r3, r4, r5
 8027e32:	5d9b      	ldrb	r3, [r3, r6]
 8027e34:	220a      	movs	r2, #10
 8027e36:	0038      	movs	r0, r7
 8027e38:	3b30      	subs	r3, #48	@ 0x30
 8027e3a:	f7ff ff77 	bl	8027d2c <__multadd>
 8027e3e:	3601      	adds	r6, #1
 8027e40:	0001      	movs	r1, r0
 8027e42:	e7ed      	b.n	8027e20 <__s2b+0x6c>
 8027e44:	0802ea4e 	.word	0x0802ea4e
 8027e48:	0802eabf 	.word	0x0802eabf

08027e4c <__hi0bits>:
 8027e4c:	2280      	movs	r2, #128	@ 0x80
 8027e4e:	0003      	movs	r3, r0
 8027e50:	0252      	lsls	r2, r2, #9
 8027e52:	2000      	movs	r0, #0
 8027e54:	4293      	cmp	r3, r2
 8027e56:	d201      	bcs.n	8027e5c <__hi0bits+0x10>
 8027e58:	041b      	lsls	r3, r3, #16
 8027e5a:	3010      	adds	r0, #16
 8027e5c:	2280      	movs	r2, #128	@ 0x80
 8027e5e:	0452      	lsls	r2, r2, #17
 8027e60:	4293      	cmp	r3, r2
 8027e62:	d201      	bcs.n	8027e68 <__hi0bits+0x1c>
 8027e64:	3008      	adds	r0, #8
 8027e66:	021b      	lsls	r3, r3, #8
 8027e68:	2280      	movs	r2, #128	@ 0x80
 8027e6a:	0552      	lsls	r2, r2, #21
 8027e6c:	4293      	cmp	r3, r2
 8027e6e:	d201      	bcs.n	8027e74 <__hi0bits+0x28>
 8027e70:	3004      	adds	r0, #4
 8027e72:	011b      	lsls	r3, r3, #4
 8027e74:	2280      	movs	r2, #128	@ 0x80
 8027e76:	05d2      	lsls	r2, r2, #23
 8027e78:	4293      	cmp	r3, r2
 8027e7a:	d201      	bcs.n	8027e80 <__hi0bits+0x34>
 8027e7c:	3002      	adds	r0, #2
 8027e7e:	009b      	lsls	r3, r3, #2
 8027e80:	2b00      	cmp	r3, #0
 8027e82:	db03      	blt.n	8027e8c <__hi0bits+0x40>
 8027e84:	3001      	adds	r0, #1
 8027e86:	4213      	tst	r3, r2
 8027e88:	d100      	bne.n	8027e8c <__hi0bits+0x40>
 8027e8a:	2020      	movs	r0, #32
 8027e8c:	4770      	bx	lr

08027e8e <__lo0bits>:
 8027e8e:	6803      	ldr	r3, [r0, #0]
 8027e90:	0001      	movs	r1, r0
 8027e92:	2207      	movs	r2, #7
 8027e94:	0018      	movs	r0, r3
 8027e96:	4010      	ands	r0, r2
 8027e98:	4213      	tst	r3, r2
 8027e9a:	d00d      	beq.n	8027eb8 <__lo0bits+0x2a>
 8027e9c:	3a06      	subs	r2, #6
 8027e9e:	2000      	movs	r0, #0
 8027ea0:	4213      	tst	r3, r2
 8027ea2:	d105      	bne.n	8027eb0 <__lo0bits+0x22>
 8027ea4:	3002      	adds	r0, #2
 8027ea6:	4203      	tst	r3, r0
 8027ea8:	d003      	beq.n	8027eb2 <__lo0bits+0x24>
 8027eaa:	40d3      	lsrs	r3, r2
 8027eac:	0010      	movs	r0, r2
 8027eae:	600b      	str	r3, [r1, #0]
 8027eb0:	4770      	bx	lr
 8027eb2:	089b      	lsrs	r3, r3, #2
 8027eb4:	600b      	str	r3, [r1, #0]
 8027eb6:	e7fb      	b.n	8027eb0 <__lo0bits+0x22>
 8027eb8:	b29a      	uxth	r2, r3
 8027eba:	2a00      	cmp	r2, #0
 8027ebc:	d101      	bne.n	8027ec2 <__lo0bits+0x34>
 8027ebe:	2010      	movs	r0, #16
 8027ec0:	0c1b      	lsrs	r3, r3, #16
 8027ec2:	b2da      	uxtb	r2, r3
 8027ec4:	2a00      	cmp	r2, #0
 8027ec6:	d101      	bne.n	8027ecc <__lo0bits+0x3e>
 8027ec8:	3008      	adds	r0, #8
 8027eca:	0a1b      	lsrs	r3, r3, #8
 8027ecc:	071a      	lsls	r2, r3, #28
 8027ece:	d101      	bne.n	8027ed4 <__lo0bits+0x46>
 8027ed0:	3004      	adds	r0, #4
 8027ed2:	091b      	lsrs	r3, r3, #4
 8027ed4:	079a      	lsls	r2, r3, #30
 8027ed6:	d101      	bne.n	8027edc <__lo0bits+0x4e>
 8027ed8:	3002      	adds	r0, #2
 8027eda:	089b      	lsrs	r3, r3, #2
 8027edc:	07da      	lsls	r2, r3, #31
 8027ede:	d4e9      	bmi.n	8027eb4 <__lo0bits+0x26>
 8027ee0:	3001      	adds	r0, #1
 8027ee2:	085b      	lsrs	r3, r3, #1
 8027ee4:	d1e6      	bne.n	8027eb4 <__lo0bits+0x26>
 8027ee6:	2020      	movs	r0, #32
 8027ee8:	e7e2      	b.n	8027eb0 <__lo0bits+0x22>
	...

08027eec <__i2b>:
 8027eec:	b510      	push	{r4, lr}
 8027eee:	000c      	movs	r4, r1
 8027ef0:	2101      	movs	r1, #1
 8027ef2:	f7ff feb3 	bl	8027c5c <_Balloc>
 8027ef6:	2800      	cmp	r0, #0
 8027ef8:	d107      	bne.n	8027f0a <__i2b+0x1e>
 8027efa:	2146      	movs	r1, #70	@ 0x46
 8027efc:	4c05      	ldr	r4, [pc, #20]	@ (8027f14 <__i2b+0x28>)
 8027efe:	0002      	movs	r2, r0
 8027f00:	4b05      	ldr	r3, [pc, #20]	@ (8027f18 <__i2b+0x2c>)
 8027f02:	0020      	movs	r0, r4
 8027f04:	31ff      	adds	r1, #255	@ 0xff
 8027f06:	f000 ff81 	bl	8028e0c <__assert_func>
 8027f0a:	2301      	movs	r3, #1
 8027f0c:	6144      	str	r4, [r0, #20]
 8027f0e:	6103      	str	r3, [r0, #16]
 8027f10:	bd10      	pop	{r4, pc}
 8027f12:	46c0      	nop			@ (mov r8, r8)
 8027f14:	0802eabf 	.word	0x0802eabf
 8027f18:	0802ea4e 	.word	0x0802ea4e

08027f1c <__multiply>:
 8027f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027f1e:	0014      	movs	r4, r2
 8027f20:	690a      	ldr	r2, [r1, #16]
 8027f22:	6923      	ldr	r3, [r4, #16]
 8027f24:	000d      	movs	r5, r1
 8027f26:	b089      	sub	sp, #36	@ 0x24
 8027f28:	429a      	cmp	r2, r3
 8027f2a:	db02      	blt.n	8027f32 <__multiply+0x16>
 8027f2c:	0023      	movs	r3, r4
 8027f2e:	000c      	movs	r4, r1
 8027f30:	001d      	movs	r5, r3
 8027f32:	6927      	ldr	r7, [r4, #16]
 8027f34:	692e      	ldr	r6, [r5, #16]
 8027f36:	6861      	ldr	r1, [r4, #4]
 8027f38:	19bb      	adds	r3, r7, r6
 8027f3a:	9300      	str	r3, [sp, #0]
 8027f3c:	68a3      	ldr	r3, [r4, #8]
 8027f3e:	19ba      	adds	r2, r7, r6
 8027f40:	4293      	cmp	r3, r2
 8027f42:	da00      	bge.n	8027f46 <__multiply+0x2a>
 8027f44:	3101      	adds	r1, #1
 8027f46:	f7ff fe89 	bl	8027c5c <_Balloc>
 8027f4a:	4684      	mov	ip, r0
 8027f4c:	2800      	cmp	r0, #0
 8027f4e:	d106      	bne.n	8027f5e <__multiply+0x42>
 8027f50:	21b1      	movs	r1, #177	@ 0xb1
 8027f52:	4662      	mov	r2, ip
 8027f54:	4b44      	ldr	r3, [pc, #272]	@ (8028068 <__multiply+0x14c>)
 8027f56:	4845      	ldr	r0, [pc, #276]	@ (802806c <__multiply+0x150>)
 8027f58:	0049      	lsls	r1, r1, #1
 8027f5a:	f000 ff57 	bl	8028e0c <__assert_func>
 8027f5e:	0002      	movs	r2, r0
 8027f60:	19bb      	adds	r3, r7, r6
 8027f62:	3214      	adds	r2, #20
 8027f64:	009b      	lsls	r3, r3, #2
 8027f66:	18d3      	adds	r3, r2, r3
 8027f68:	9301      	str	r3, [sp, #4]
 8027f6a:	2100      	movs	r1, #0
 8027f6c:	0013      	movs	r3, r2
 8027f6e:	9801      	ldr	r0, [sp, #4]
 8027f70:	4283      	cmp	r3, r0
 8027f72:	d328      	bcc.n	8027fc6 <__multiply+0xaa>
 8027f74:	0023      	movs	r3, r4
 8027f76:	00bf      	lsls	r7, r7, #2
 8027f78:	3314      	adds	r3, #20
 8027f7a:	9304      	str	r3, [sp, #16]
 8027f7c:	3514      	adds	r5, #20
 8027f7e:	19db      	adds	r3, r3, r7
 8027f80:	00b6      	lsls	r6, r6, #2
 8027f82:	9302      	str	r3, [sp, #8]
 8027f84:	19ab      	adds	r3, r5, r6
 8027f86:	9307      	str	r3, [sp, #28]
 8027f88:	2304      	movs	r3, #4
 8027f8a:	9305      	str	r3, [sp, #20]
 8027f8c:	0023      	movs	r3, r4
 8027f8e:	9902      	ldr	r1, [sp, #8]
 8027f90:	3315      	adds	r3, #21
 8027f92:	4299      	cmp	r1, r3
 8027f94:	d305      	bcc.n	8027fa2 <__multiply+0x86>
 8027f96:	1b0c      	subs	r4, r1, r4
 8027f98:	3c15      	subs	r4, #21
 8027f9a:	08a4      	lsrs	r4, r4, #2
 8027f9c:	3401      	adds	r4, #1
 8027f9e:	00a3      	lsls	r3, r4, #2
 8027fa0:	9305      	str	r3, [sp, #20]
 8027fa2:	9b07      	ldr	r3, [sp, #28]
 8027fa4:	429d      	cmp	r5, r3
 8027fa6:	d310      	bcc.n	8027fca <__multiply+0xae>
 8027fa8:	9b00      	ldr	r3, [sp, #0]
 8027faa:	2b00      	cmp	r3, #0
 8027fac:	dd05      	ble.n	8027fba <__multiply+0x9e>
 8027fae:	9b01      	ldr	r3, [sp, #4]
 8027fb0:	3b04      	subs	r3, #4
 8027fb2:	9301      	str	r3, [sp, #4]
 8027fb4:	681b      	ldr	r3, [r3, #0]
 8027fb6:	2b00      	cmp	r3, #0
 8027fb8:	d052      	beq.n	8028060 <__multiply+0x144>
 8027fba:	4663      	mov	r3, ip
 8027fbc:	4660      	mov	r0, ip
 8027fbe:	9a00      	ldr	r2, [sp, #0]
 8027fc0:	611a      	str	r2, [r3, #16]
 8027fc2:	b009      	add	sp, #36	@ 0x24
 8027fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027fc6:	c302      	stmia	r3!, {r1}
 8027fc8:	e7d1      	b.n	8027f6e <__multiply+0x52>
 8027fca:	682c      	ldr	r4, [r5, #0]
 8027fcc:	b2a4      	uxth	r4, r4
 8027fce:	2c00      	cmp	r4, #0
 8027fd0:	d01f      	beq.n	8028012 <__multiply+0xf6>
 8027fd2:	2300      	movs	r3, #0
 8027fd4:	0017      	movs	r7, r2
 8027fd6:	9e04      	ldr	r6, [sp, #16]
 8027fd8:	9303      	str	r3, [sp, #12]
 8027fda:	ce08      	ldmia	r6!, {r3}
 8027fdc:	6839      	ldr	r1, [r7, #0]
 8027fde:	9306      	str	r3, [sp, #24]
 8027fe0:	466b      	mov	r3, sp
 8027fe2:	8b1b      	ldrh	r3, [r3, #24]
 8027fe4:	b288      	uxth	r0, r1
 8027fe6:	4363      	muls	r3, r4
 8027fe8:	181b      	adds	r3, r3, r0
 8027fea:	9803      	ldr	r0, [sp, #12]
 8027fec:	0c09      	lsrs	r1, r1, #16
 8027fee:	181b      	adds	r3, r3, r0
 8027ff0:	9806      	ldr	r0, [sp, #24]
 8027ff2:	0c00      	lsrs	r0, r0, #16
 8027ff4:	4360      	muls	r0, r4
 8027ff6:	1840      	adds	r0, r0, r1
 8027ff8:	0c19      	lsrs	r1, r3, #16
 8027ffa:	1841      	adds	r1, r0, r1
 8027ffc:	0c08      	lsrs	r0, r1, #16
 8027ffe:	b29b      	uxth	r3, r3
 8028000:	0409      	lsls	r1, r1, #16
 8028002:	4319      	orrs	r1, r3
 8028004:	9b02      	ldr	r3, [sp, #8]
 8028006:	9003      	str	r0, [sp, #12]
 8028008:	c702      	stmia	r7!, {r1}
 802800a:	42b3      	cmp	r3, r6
 802800c:	d8e5      	bhi.n	8027fda <__multiply+0xbe>
 802800e:	9b05      	ldr	r3, [sp, #20]
 8028010:	50d0      	str	r0, [r2, r3]
 8028012:	682c      	ldr	r4, [r5, #0]
 8028014:	0c24      	lsrs	r4, r4, #16
 8028016:	d020      	beq.n	802805a <__multiply+0x13e>
 8028018:	2100      	movs	r1, #0
 802801a:	0010      	movs	r0, r2
 802801c:	6813      	ldr	r3, [r2, #0]
 802801e:	9e04      	ldr	r6, [sp, #16]
 8028020:	9103      	str	r1, [sp, #12]
 8028022:	6831      	ldr	r1, [r6, #0]
 8028024:	6807      	ldr	r7, [r0, #0]
 8028026:	b289      	uxth	r1, r1
 8028028:	4361      	muls	r1, r4
 802802a:	0c3f      	lsrs	r7, r7, #16
 802802c:	19c9      	adds	r1, r1, r7
 802802e:	9f03      	ldr	r7, [sp, #12]
 8028030:	b29b      	uxth	r3, r3
 8028032:	19c9      	adds	r1, r1, r7
 8028034:	040f      	lsls	r7, r1, #16
 8028036:	431f      	orrs	r7, r3
 8028038:	6007      	str	r7, [r0, #0]
 802803a:	ce80      	ldmia	r6!, {r7}
 802803c:	6843      	ldr	r3, [r0, #4]
 802803e:	0c3f      	lsrs	r7, r7, #16
 8028040:	4367      	muls	r7, r4
 8028042:	b29b      	uxth	r3, r3
 8028044:	0c09      	lsrs	r1, r1, #16
 8028046:	18fb      	adds	r3, r7, r3
 8028048:	185b      	adds	r3, r3, r1
 802804a:	0c19      	lsrs	r1, r3, #16
 802804c:	9103      	str	r1, [sp, #12]
 802804e:	9902      	ldr	r1, [sp, #8]
 8028050:	3004      	adds	r0, #4
 8028052:	42b1      	cmp	r1, r6
 8028054:	d8e5      	bhi.n	8028022 <__multiply+0x106>
 8028056:	9905      	ldr	r1, [sp, #20]
 8028058:	5053      	str	r3, [r2, r1]
 802805a:	3504      	adds	r5, #4
 802805c:	3204      	adds	r2, #4
 802805e:	e7a0      	b.n	8027fa2 <__multiply+0x86>
 8028060:	9b00      	ldr	r3, [sp, #0]
 8028062:	3b01      	subs	r3, #1
 8028064:	9300      	str	r3, [sp, #0]
 8028066:	e79f      	b.n	8027fa8 <__multiply+0x8c>
 8028068:	0802ea4e 	.word	0x0802ea4e
 802806c:	0802eabf 	.word	0x0802eabf

08028070 <__pow5mult>:
 8028070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028072:	2303      	movs	r3, #3
 8028074:	0015      	movs	r5, r2
 8028076:	0007      	movs	r7, r0
 8028078:	000e      	movs	r6, r1
 802807a:	401a      	ands	r2, r3
 802807c:	421d      	tst	r5, r3
 802807e:	d008      	beq.n	8028092 <__pow5mult+0x22>
 8028080:	4925      	ldr	r1, [pc, #148]	@ (8028118 <__pow5mult+0xa8>)
 8028082:	3a01      	subs	r2, #1
 8028084:	0092      	lsls	r2, r2, #2
 8028086:	5852      	ldr	r2, [r2, r1]
 8028088:	2300      	movs	r3, #0
 802808a:	0031      	movs	r1, r6
 802808c:	f7ff fe4e 	bl	8027d2c <__multadd>
 8028090:	0006      	movs	r6, r0
 8028092:	10ad      	asrs	r5, r5, #2
 8028094:	d03d      	beq.n	8028112 <__pow5mult+0xa2>
 8028096:	69fc      	ldr	r4, [r7, #28]
 8028098:	2c00      	cmp	r4, #0
 802809a:	d10f      	bne.n	80280bc <__pow5mult+0x4c>
 802809c:	2010      	movs	r0, #16
 802809e:	f7ff fd0f 	bl	8027ac0 <malloc>
 80280a2:	1e02      	subs	r2, r0, #0
 80280a4:	61f8      	str	r0, [r7, #28]
 80280a6:	d105      	bne.n	80280b4 <__pow5mult+0x44>
 80280a8:	21b4      	movs	r1, #180	@ 0xb4
 80280aa:	4b1c      	ldr	r3, [pc, #112]	@ (802811c <__pow5mult+0xac>)
 80280ac:	481c      	ldr	r0, [pc, #112]	@ (8028120 <__pow5mult+0xb0>)
 80280ae:	31ff      	adds	r1, #255	@ 0xff
 80280b0:	f000 feac 	bl	8028e0c <__assert_func>
 80280b4:	6044      	str	r4, [r0, #4]
 80280b6:	6084      	str	r4, [r0, #8]
 80280b8:	6004      	str	r4, [r0, #0]
 80280ba:	60c4      	str	r4, [r0, #12]
 80280bc:	69fb      	ldr	r3, [r7, #28]
 80280be:	689c      	ldr	r4, [r3, #8]
 80280c0:	9301      	str	r3, [sp, #4]
 80280c2:	2c00      	cmp	r4, #0
 80280c4:	d108      	bne.n	80280d8 <__pow5mult+0x68>
 80280c6:	0038      	movs	r0, r7
 80280c8:	4916      	ldr	r1, [pc, #88]	@ (8028124 <__pow5mult+0xb4>)
 80280ca:	f7ff ff0f 	bl	8027eec <__i2b>
 80280ce:	9b01      	ldr	r3, [sp, #4]
 80280d0:	0004      	movs	r4, r0
 80280d2:	6098      	str	r0, [r3, #8]
 80280d4:	2300      	movs	r3, #0
 80280d6:	6003      	str	r3, [r0, #0]
 80280d8:	2301      	movs	r3, #1
 80280da:	421d      	tst	r5, r3
 80280dc:	d00a      	beq.n	80280f4 <__pow5mult+0x84>
 80280de:	0031      	movs	r1, r6
 80280e0:	0022      	movs	r2, r4
 80280e2:	0038      	movs	r0, r7
 80280e4:	f7ff ff1a 	bl	8027f1c <__multiply>
 80280e8:	0031      	movs	r1, r6
 80280ea:	9001      	str	r0, [sp, #4]
 80280ec:	0038      	movs	r0, r7
 80280ee:	f7ff fdf9 	bl	8027ce4 <_Bfree>
 80280f2:	9e01      	ldr	r6, [sp, #4]
 80280f4:	106d      	asrs	r5, r5, #1
 80280f6:	d00c      	beq.n	8028112 <__pow5mult+0xa2>
 80280f8:	6820      	ldr	r0, [r4, #0]
 80280fa:	2800      	cmp	r0, #0
 80280fc:	d107      	bne.n	802810e <__pow5mult+0x9e>
 80280fe:	0022      	movs	r2, r4
 8028100:	0021      	movs	r1, r4
 8028102:	0038      	movs	r0, r7
 8028104:	f7ff ff0a 	bl	8027f1c <__multiply>
 8028108:	2300      	movs	r3, #0
 802810a:	6020      	str	r0, [r4, #0]
 802810c:	6003      	str	r3, [r0, #0]
 802810e:	0004      	movs	r4, r0
 8028110:	e7e2      	b.n	80280d8 <__pow5mult+0x68>
 8028112:	0030      	movs	r0, r6
 8028114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028116:	46c0      	nop			@ (mov r8, r8)
 8028118:	0802ecbc 	.word	0x0802ecbc
 802811c:	0802e9df 	.word	0x0802e9df
 8028120:	0802eabf 	.word	0x0802eabf
 8028124:	00000271 	.word	0x00000271

08028128 <__lshift>:
 8028128:	b5f0      	push	{r4, r5, r6, r7, lr}
 802812a:	000c      	movs	r4, r1
 802812c:	0016      	movs	r6, r2
 802812e:	6923      	ldr	r3, [r4, #16]
 8028130:	1157      	asrs	r7, r2, #5
 8028132:	b085      	sub	sp, #20
 8028134:	18fb      	adds	r3, r7, r3
 8028136:	9301      	str	r3, [sp, #4]
 8028138:	3301      	adds	r3, #1
 802813a:	9300      	str	r3, [sp, #0]
 802813c:	6849      	ldr	r1, [r1, #4]
 802813e:	68a3      	ldr	r3, [r4, #8]
 8028140:	9002      	str	r0, [sp, #8]
 8028142:	9a00      	ldr	r2, [sp, #0]
 8028144:	4293      	cmp	r3, r2
 8028146:	db10      	blt.n	802816a <__lshift+0x42>
 8028148:	9802      	ldr	r0, [sp, #8]
 802814a:	f7ff fd87 	bl	8027c5c <_Balloc>
 802814e:	2300      	movs	r3, #0
 8028150:	0001      	movs	r1, r0
 8028152:	0005      	movs	r5, r0
 8028154:	001a      	movs	r2, r3
 8028156:	3114      	adds	r1, #20
 8028158:	4298      	cmp	r0, r3
 802815a:	d10c      	bne.n	8028176 <__lshift+0x4e>
 802815c:	21ef      	movs	r1, #239	@ 0xef
 802815e:	002a      	movs	r2, r5
 8028160:	4b25      	ldr	r3, [pc, #148]	@ (80281f8 <__lshift+0xd0>)
 8028162:	4826      	ldr	r0, [pc, #152]	@ (80281fc <__lshift+0xd4>)
 8028164:	0049      	lsls	r1, r1, #1
 8028166:	f000 fe51 	bl	8028e0c <__assert_func>
 802816a:	3101      	adds	r1, #1
 802816c:	005b      	lsls	r3, r3, #1
 802816e:	e7e8      	b.n	8028142 <__lshift+0x1a>
 8028170:	0098      	lsls	r0, r3, #2
 8028172:	500a      	str	r2, [r1, r0]
 8028174:	3301      	adds	r3, #1
 8028176:	42bb      	cmp	r3, r7
 8028178:	dbfa      	blt.n	8028170 <__lshift+0x48>
 802817a:	43fb      	mvns	r3, r7
 802817c:	17db      	asrs	r3, r3, #31
 802817e:	401f      	ands	r7, r3
 8028180:	00bf      	lsls	r7, r7, #2
 8028182:	0023      	movs	r3, r4
 8028184:	201f      	movs	r0, #31
 8028186:	19c9      	adds	r1, r1, r7
 8028188:	0037      	movs	r7, r6
 802818a:	6922      	ldr	r2, [r4, #16]
 802818c:	3314      	adds	r3, #20
 802818e:	0092      	lsls	r2, r2, #2
 8028190:	189a      	adds	r2, r3, r2
 8028192:	4007      	ands	r7, r0
 8028194:	4206      	tst	r6, r0
 8028196:	d029      	beq.n	80281ec <__lshift+0xc4>
 8028198:	3001      	adds	r0, #1
 802819a:	1bc0      	subs	r0, r0, r7
 802819c:	9003      	str	r0, [sp, #12]
 802819e:	468c      	mov	ip, r1
 80281a0:	2000      	movs	r0, #0
 80281a2:	681e      	ldr	r6, [r3, #0]
 80281a4:	40be      	lsls	r6, r7
 80281a6:	4306      	orrs	r6, r0
 80281a8:	4660      	mov	r0, ip
 80281aa:	c040      	stmia	r0!, {r6}
 80281ac:	4684      	mov	ip, r0
 80281ae:	9e03      	ldr	r6, [sp, #12]
 80281b0:	cb01      	ldmia	r3!, {r0}
 80281b2:	40f0      	lsrs	r0, r6
 80281b4:	429a      	cmp	r2, r3
 80281b6:	d8f4      	bhi.n	80281a2 <__lshift+0x7a>
 80281b8:	0026      	movs	r6, r4
 80281ba:	3615      	adds	r6, #21
 80281bc:	2304      	movs	r3, #4
 80281be:	42b2      	cmp	r2, r6
 80281c0:	d304      	bcc.n	80281cc <__lshift+0xa4>
 80281c2:	1b13      	subs	r3, r2, r4
 80281c4:	3b15      	subs	r3, #21
 80281c6:	089b      	lsrs	r3, r3, #2
 80281c8:	3301      	adds	r3, #1
 80281ca:	009b      	lsls	r3, r3, #2
 80281cc:	50c8      	str	r0, [r1, r3]
 80281ce:	2800      	cmp	r0, #0
 80281d0:	d002      	beq.n	80281d8 <__lshift+0xb0>
 80281d2:	9b01      	ldr	r3, [sp, #4]
 80281d4:	3302      	adds	r3, #2
 80281d6:	9300      	str	r3, [sp, #0]
 80281d8:	9b00      	ldr	r3, [sp, #0]
 80281da:	9802      	ldr	r0, [sp, #8]
 80281dc:	3b01      	subs	r3, #1
 80281de:	0021      	movs	r1, r4
 80281e0:	612b      	str	r3, [r5, #16]
 80281e2:	f7ff fd7f 	bl	8027ce4 <_Bfree>
 80281e6:	0028      	movs	r0, r5
 80281e8:	b005      	add	sp, #20
 80281ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80281ec:	cb01      	ldmia	r3!, {r0}
 80281ee:	c101      	stmia	r1!, {r0}
 80281f0:	429a      	cmp	r2, r3
 80281f2:	d8fb      	bhi.n	80281ec <__lshift+0xc4>
 80281f4:	e7f0      	b.n	80281d8 <__lshift+0xb0>
 80281f6:	46c0      	nop			@ (mov r8, r8)
 80281f8:	0802ea4e 	.word	0x0802ea4e
 80281fc:	0802eabf 	.word	0x0802eabf

08028200 <__mcmp>:
 8028200:	b530      	push	{r4, r5, lr}
 8028202:	690b      	ldr	r3, [r1, #16]
 8028204:	6904      	ldr	r4, [r0, #16]
 8028206:	0002      	movs	r2, r0
 8028208:	1ae0      	subs	r0, r4, r3
 802820a:	429c      	cmp	r4, r3
 802820c:	d10f      	bne.n	802822e <__mcmp+0x2e>
 802820e:	3214      	adds	r2, #20
 8028210:	009b      	lsls	r3, r3, #2
 8028212:	3114      	adds	r1, #20
 8028214:	0014      	movs	r4, r2
 8028216:	18c9      	adds	r1, r1, r3
 8028218:	18d2      	adds	r2, r2, r3
 802821a:	3a04      	subs	r2, #4
 802821c:	3904      	subs	r1, #4
 802821e:	6815      	ldr	r5, [r2, #0]
 8028220:	680b      	ldr	r3, [r1, #0]
 8028222:	429d      	cmp	r5, r3
 8028224:	d004      	beq.n	8028230 <__mcmp+0x30>
 8028226:	2001      	movs	r0, #1
 8028228:	429d      	cmp	r5, r3
 802822a:	d200      	bcs.n	802822e <__mcmp+0x2e>
 802822c:	3802      	subs	r0, #2
 802822e:	bd30      	pop	{r4, r5, pc}
 8028230:	4294      	cmp	r4, r2
 8028232:	d3f2      	bcc.n	802821a <__mcmp+0x1a>
 8028234:	e7fb      	b.n	802822e <__mcmp+0x2e>
	...

08028238 <__mdiff>:
 8028238:	b5f0      	push	{r4, r5, r6, r7, lr}
 802823a:	000c      	movs	r4, r1
 802823c:	b087      	sub	sp, #28
 802823e:	9000      	str	r0, [sp, #0]
 8028240:	0011      	movs	r1, r2
 8028242:	0020      	movs	r0, r4
 8028244:	0017      	movs	r7, r2
 8028246:	f7ff ffdb 	bl	8028200 <__mcmp>
 802824a:	1e05      	subs	r5, r0, #0
 802824c:	d110      	bne.n	8028270 <__mdiff+0x38>
 802824e:	0001      	movs	r1, r0
 8028250:	9800      	ldr	r0, [sp, #0]
 8028252:	f7ff fd03 	bl	8027c5c <_Balloc>
 8028256:	1e02      	subs	r2, r0, #0
 8028258:	d104      	bne.n	8028264 <__mdiff+0x2c>
 802825a:	4b40      	ldr	r3, [pc, #256]	@ (802835c <__mdiff+0x124>)
 802825c:	4840      	ldr	r0, [pc, #256]	@ (8028360 <__mdiff+0x128>)
 802825e:	4941      	ldr	r1, [pc, #260]	@ (8028364 <__mdiff+0x12c>)
 8028260:	f000 fdd4 	bl	8028e0c <__assert_func>
 8028264:	2301      	movs	r3, #1
 8028266:	6145      	str	r5, [r0, #20]
 8028268:	6103      	str	r3, [r0, #16]
 802826a:	0010      	movs	r0, r2
 802826c:	b007      	add	sp, #28
 802826e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028270:	2600      	movs	r6, #0
 8028272:	42b0      	cmp	r0, r6
 8028274:	da03      	bge.n	802827e <__mdiff+0x46>
 8028276:	0023      	movs	r3, r4
 8028278:	003c      	movs	r4, r7
 802827a:	001f      	movs	r7, r3
 802827c:	3601      	adds	r6, #1
 802827e:	6861      	ldr	r1, [r4, #4]
 8028280:	9800      	ldr	r0, [sp, #0]
 8028282:	f7ff fceb 	bl	8027c5c <_Balloc>
 8028286:	1e02      	subs	r2, r0, #0
 8028288:	d103      	bne.n	8028292 <__mdiff+0x5a>
 802828a:	4b34      	ldr	r3, [pc, #208]	@ (802835c <__mdiff+0x124>)
 802828c:	4834      	ldr	r0, [pc, #208]	@ (8028360 <__mdiff+0x128>)
 802828e:	4936      	ldr	r1, [pc, #216]	@ (8028368 <__mdiff+0x130>)
 8028290:	e7e6      	b.n	8028260 <__mdiff+0x28>
 8028292:	6923      	ldr	r3, [r4, #16]
 8028294:	3414      	adds	r4, #20
 8028296:	9300      	str	r3, [sp, #0]
 8028298:	009b      	lsls	r3, r3, #2
 802829a:	18e3      	adds	r3, r4, r3
 802829c:	0021      	movs	r1, r4
 802829e:	9401      	str	r4, [sp, #4]
 80282a0:	003c      	movs	r4, r7
 80282a2:	9302      	str	r3, [sp, #8]
 80282a4:	693b      	ldr	r3, [r7, #16]
 80282a6:	3414      	adds	r4, #20
 80282a8:	009b      	lsls	r3, r3, #2
 80282aa:	18e3      	adds	r3, r4, r3
 80282ac:	9303      	str	r3, [sp, #12]
 80282ae:	0003      	movs	r3, r0
 80282b0:	60c6      	str	r6, [r0, #12]
 80282b2:	468c      	mov	ip, r1
 80282b4:	2000      	movs	r0, #0
 80282b6:	3314      	adds	r3, #20
 80282b8:	9304      	str	r3, [sp, #16]
 80282ba:	9305      	str	r3, [sp, #20]
 80282bc:	4663      	mov	r3, ip
 80282be:	cb20      	ldmia	r3!, {r5}
 80282c0:	b2a9      	uxth	r1, r5
 80282c2:	000e      	movs	r6, r1
 80282c4:	469c      	mov	ip, r3
 80282c6:	cc08      	ldmia	r4!, {r3}
 80282c8:	0c2d      	lsrs	r5, r5, #16
 80282ca:	b299      	uxth	r1, r3
 80282cc:	1a71      	subs	r1, r6, r1
 80282ce:	1809      	adds	r1, r1, r0
 80282d0:	0c1b      	lsrs	r3, r3, #16
 80282d2:	1408      	asrs	r0, r1, #16
 80282d4:	1aeb      	subs	r3, r5, r3
 80282d6:	181b      	adds	r3, r3, r0
 80282d8:	1418      	asrs	r0, r3, #16
 80282da:	b289      	uxth	r1, r1
 80282dc:	041b      	lsls	r3, r3, #16
 80282de:	4319      	orrs	r1, r3
 80282e0:	9b05      	ldr	r3, [sp, #20]
 80282e2:	c302      	stmia	r3!, {r1}
 80282e4:	9305      	str	r3, [sp, #20]
 80282e6:	9b03      	ldr	r3, [sp, #12]
 80282e8:	42a3      	cmp	r3, r4
 80282ea:	d8e7      	bhi.n	80282bc <__mdiff+0x84>
 80282ec:	0039      	movs	r1, r7
 80282ee:	9c03      	ldr	r4, [sp, #12]
 80282f0:	3115      	adds	r1, #21
 80282f2:	2304      	movs	r3, #4
 80282f4:	428c      	cmp	r4, r1
 80282f6:	d304      	bcc.n	8028302 <__mdiff+0xca>
 80282f8:	1be3      	subs	r3, r4, r7
 80282fa:	3b15      	subs	r3, #21
 80282fc:	089b      	lsrs	r3, r3, #2
 80282fe:	3301      	adds	r3, #1
 8028300:	009b      	lsls	r3, r3, #2
 8028302:	9901      	ldr	r1, [sp, #4]
 8028304:	18cd      	adds	r5, r1, r3
 8028306:	9904      	ldr	r1, [sp, #16]
 8028308:	002e      	movs	r6, r5
 802830a:	18cb      	adds	r3, r1, r3
 802830c:	001f      	movs	r7, r3
 802830e:	9902      	ldr	r1, [sp, #8]
 8028310:	428e      	cmp	r6, r1
 8028312:	d311      	bcc.n	8028338 <__mdiff+0x100>
 8028314:	9c02      	ldr	r4, [sp, #8]
 8028316:	1ee9      	subs	r1, r5, #3
 8028318:	2000      	movs	r0, #0
 802831a:	428c      	cmp	r4, r1
 802831c:	d304      	bcc.n	8028328 <__mdiff+0xf0>
 802831e:	0021      	movs	r1, r4
 8028320:	3103      	adds	r1, #3
 8028322:	1b49      	subs	r1, r1, r5
 8028324:	0889      	lsrs	r1, r1, #2
 8028326:	0088      	lsls	r0, r1, #2
 8028328:	181b      	adds	r3, r3, r0
 802832a:	3b04      	subs	r3, #4
 802832c:	6819      	ldr	r1, [r3, #0]
 802832e:	2900      	cmp	r1, #0
 8028330:	d010      	beq.n	8028354 <__mdiff+0x11c>
 8028332:	9b00      	ldr	r3, [sp, #0]
 8028334:	6113      	str	r3, [r2, #16]
 8028336:	e798      	b.n	802826a <__mdiff+0x32>
 8028338:	4684      	mov	ip, r0
 802833a:	ce02      	ldmia	r6!, {r1}
 802833c:	b288      	uxth	r0, r1
 802833e:	4460      	add	r0, ip
 8028340:	1400      	asrs	r0, r0, #16
 8028342:	0c0c      	lsrs	r4, r1, #16
 8028344:	1904      	adds	r4, r0, r4
 8028346:	4461      	add	r1, ip
 8028348:	1420      	asrs	r0, r4, #16
 802834a:	b289      	uxth	r1, r1
 802834c:	0424      	lsls	r4, r4, #16
 802834e:	4321      	orrs	r1, r4
 8028350:	c702      	stmia	r7!, {r1}
 8028352:	e7dc      	b.n	802830e <__mdiff+0xd6>
 8028354:	9900      	ldr	r1, [sp, #0]
 8028356:	3901      	subs	r1, #1
 8028358:	9100      	str	r1, [sp, #0]
 802835a:	e7e6      	b.n	802832a <__mdiff+0xf2>
 802835c:	0802ea4e 	.word	0x0802ea4e
 8028360:	0802eabf 	.word	0x0802eabf
 8028364:	00000237 	.word	0x00000237
 8028368:	00000245 	.word	0x00000245

0802836c <__ulp>:
 802836c:	b510      	push	{r4, lr}
 802836e:	2400      	movs	r4, #0
 8028370:	4b0c      	ldr	r3, [pc, #48]	@ (80283a4 <__ulp+0x38>)
 8028372:	4a0d      	ldr	r2, [pc, #52]	@ (80283a8 <__ulp+0x3c>)
 8028374:	400b      	ands	r3, r1
 8028376:	189b      	adds	r3, r3, r2
 8028378:	42a3      	cmp	r3, r4
 802837a:	dc06      	bgt.n	802838a <__ulp+0x1e>
 802837c:	425b      	negs	r3, r3
 802837e:	151a      	asrs	r2, r3, #20
 8028380:	2a13      	cmp	r2, #19
 8028382:	dc05      	bgt.n	8028390 <__ulp+0x24>
 8028384:	2380      	movs	r3, #128	@ 0x80
 8028386:	031b      	lsls	r3, r3, #12
 8028388:	4113      	asrs	r3, r2
 802838a:	0019      	movs	r1, r3
 802838c:	0020      	movs	r0, r4
 802838e:	bd10      	pop	{r4, pc}
 8028390:	3a14      	subs	r2, #20
 8028392:	2401      	movs	r4, #1
 8028394:	2a1e      	cmp	r2, #30
 8028396:	dc02      	bgt.n	802839e <__ulp+0x32>
 8028398:	2480      	movs	r4, #128	@ 0x80
 802839a:	0624      	lsls	r4, r4, #24
 802839c:	40d4      	lsrs	r4, r2
 802839e:	2300      	movs	r3, #0
 80283a0:	e7f3      	b.n	802838a <__ulp+0x1e>
 80283a2:	46c0      	nop			@ (mov r8, r8)
 80283a4:	7ff00000 	.word	0x7ff00000
 80283a8:	fcc00000 	.word	0xfcc00000

080283ac <__b2d>:
 80283ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80283ae:	0006      	movs	r6, r0
 80283b0:	6903      	ldr	r3, [r0, #16]
 80283b2:	3614      	adds	r6, #20
 80283b4:	009b      	lsls	r3, r3, #2
 80283b6:	18f3      	adds	r3, r6, r3
 80283b8:	1f1d      	subs	r5, r3, #4
 80283ba:	682c      	ldr	r4, [r5, #0]
 80283bc:	000f      	movs	r7, r1
 80283be:	0020      	movs	r0, r4
 80283c0:	9301      	str	r3, [sp, #4]
 80283c2:	f7ff fd43 	bl	8027e4c <__hi0bits>
 80283c6:	2220      	movs	r2, #32
 80283c8:	1a12      	subs	r2, r2, r0
 80283ca:	603a      	str	r2, [r7, #0]
 80283cc:	0003      	movs	r3, r0
 80283ce:	4a1c      	ldr	r2, [pc, #112]	@ (8028440 <__b2d+0x94>)
 80283d0:	280a      	cmp	r0, #10
 80283d2:	dc15      	bgt.n	8028400 <__b2d+0x54>
 80283d4:	210b      	movs	r1, #11
 80283d6:	0027      	movs	r7, r4
 80283d8:	1a09      	subs	r1, r1, r0
 80283da:	40cf      	lsrs	r7, r1
 80283dc:	433a      	orrs	r2, r7
 80283de:	468c      	mov	ip, r1
 80283e0:	0011      	movs	r1, r2
 80283e2:	2200      	movs	r2, #0
 80283e4:	42ae      	cmp	r6, r5
 80283e6:	d202      	bcs.n	80283ee <__b2d+0x42>
 80283e8:	9a01      	ldr	r2, [sp, #4]
 80283ea:	3a08      	subs	r2, #8
 80283ec:	6812      	ldr	r2, [r2, #0]
 80283ee:	3315      	adds	r3, #21
 80283f0:	409c      	lsls	r4, r3
 80283f2:	4663      	mov	r3, ip
 80283f4:	0027      	movs	r7, r4
 80283f6:	40da      	lsrs	r2, r3
 80283f8:	4317      	orrs	r7, r2
 80283fa:	0038      	movs	r0, r7
 80283fc:	b003      	add	sp, #12
 80283fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028400:	2700      	movs	r7, #0
 8028402:	42ae      	cmp	r6, r5
 8028404:	d202      	bcs.n	802840c <__b2d+0x60>
 8028406:	9d01      	ldr	r5, [sp, #4]
 8028408:	3d08      	subs	r5, #8
 802840a:	682f      	ldr	r7, [r5, #0]
 802840c:	210b      	movs	r1, #11
 802840e:	4249      	negs	r1, r1
 8028410:	468c      	mov	ip, r1
 8028412:	449c      	add	ip, r3
 8028414:	2b0b      	cmp	r3, #11
 8028416:	d010      	beq.n	802843a <__b2d+0x8e>
 8028418:	4661      	mov	r1, ip
 802841a:	2320      	movs	r3, #32
 802841c:	408c      	lsls	r4, r1
 802841e:	1a5b      	subs	r3, r3, r1
 8028420:	0039      	movs	r1, r7
 8028422:	40d9      	lsrs	r1, r3
 8028424:	430c      	orrs	r4, r1
 8028426:	4322      	orrs	r2, r4
 8028428:	0011      	movs	r1, r2
 802842a:	2200      	movs	r2, #0
 802842c:	42b5      	cmp	r5, r6
 802842e:	d901      	bls.n	8028434 <__b2d+0x88>
 8028430:	3d04      	subs	r5, #4
 8028432:	682a      	ldr	r2, [r5, #0]
 8028434:	4664      	mov	r4, ip
 8028436:	40a7      	lsls	r7, r4
 8028438:	e7dd      	b.n	80283f6 <__b2d+0x4a>
 802843a:	4322      	orrs	r2, r4
 802843c:	0011      	movs	r1, r2
 802843e:	e7dc      	b.n	80283fa <__b2d+0x4e>
 8028440:	3ff00000 	.word	0x3ff00000

08028444 <__d2b>:
 8028444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028446:	2101      	movs	r1, #1
 8028448:	0016      	movs	r6, r2
 802844a:	001f      	movs	r7, r3
 802844c:	f7ff fc06 	bl	8027c5c <_Balloc>
 8028450:	1e04      	subs	r4, r0, #0
 8028452:	d105      	bne.n	8028460 <__d2b+0x1c>
 8028454:	0022      	movs	r2, r4
 8028456:	4b25      	ldr	r3, [pc, #148]	@ (80284ec <__d2b+0xa8>)
 8028458:	4825      	ldr	r0, [pc, #148]	@ (80284f0 <__d2b+0xac>)
 802845a:	4926      	ldr	r1, [pc, #152]	@ (80284f4 <__d2b+0xb0>)
 802845c:	f000 fcd6 	bl	8028e0c <__assert_func>
 8028460:	033b      	lsls	r3, r7, #12
 8028462:	007d      	lsls	r5, r7, #1
 8028464:	0b1b      	lsrs	r3, r3, #12
 8028466:	0d6d      	lsrs	r5, r5, #21
 8028468:	d002      	beq.n	8028470 <__d2b+0x2c>
 802846a:	2280      	movs	r2, #128	@ 0x80
 802846c:	0352      	lsls	r2, r2, #13
 802846e:	4313      	orrs	r3, r2
 8028470:	9301      	str	r3, [sp, #4]
 8028472:	2e00      	cmp	r6, #0
 8028474:	d025      	beq.n	80284c2 <__d2b+0x7e>
 8028476:	4668      	mov	r0, sp
 8028478:	9600      	str	r6, [sp, #0]
 802847a:	f7ff fd08 	bl	8027e8e <__lo0bits>
 802847e:	9b01      	ldr	r3, [sp, #4]
 8028480:	9900      	ldr	r1, [sp, #0]
 8028482:	2800      	cmp	r0, #0
 8028484:	d01b      	beq.n	80284be <__d2b+0x7a>
 8028486:	2220      	movs	r2, #32
 8028488:	001e      	movs	r6, r3
 802848a:	1a12      	subs	r2, r2, r0
 802848c:	4096      	lsls	r6, r2
 802848e:	0032      	movs	r2, r6
 8028490:	40c3      	lsrs	r3, r0
 8028492:	430a      	orrs	r2, r1
 8028494:	6162      	str	r2, [r4, #20]
 8028496:	9301      	str	r3, [sp, #4]
 8028498:	9e01      	ldr	r6, [sp, #4]
 802849a:	61a6      	str	r6, [r4, #24]
 802849c:	1e73      	subs	r3, r6, #1
 802849e:	419e      	sbcs	r6, r3
 80284a0:	3601      	adds	r6, #1
 80284a2:	6126      	str	r6, [r4, #16]
 80284a4:	2d00      	cmp	r5, #0
 80284a6:	d014      	beq.n	80284d2 <__d2b+0x8e>
 80284a8:	2635      	movs	r6, #53	@ 0x35
 80284aa:	4b13      	ldr	r3, [pc, #76]	@ (80284f8 <__d2b+0xb4>)
 80284ac:	18ed      	adds	r5, r5, r3
 80284ae:	9b08      	ldr	r3, [sp, #32]
 80284b0:	182d      	adds	r5, r5, r0
 80284b2:	601d      	str	r5, [r3, #0]
 80284b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80284b6:	1a36      	subs	r6, r6, r0
 80284b8:	601e      	str	r6, [r3, #0]
 80284ba:	0020      	movs	r0, r4
 80284bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80284be:	6161      	str	r1, [r4, #20]
 80284c0:	e7ea      	b.n	8028498 <__d2b+0x54>
 80284c2:	a801      	add	r0, sp, #4
 80284c4:	f7ff fce3 	bl	8027e8e <__lo0bits>
 80284c8:	9b01      	ldr	r3, [sp, #4]
 80284ca:	2601      	movs	r6, #1
 80284cc:	6163      	str	r3, [r4, #20]
 80284ce:	3020      	adds	r0, #32
 80284d0:	e7e7      	b.n	80284a2 <__d2b+0x5e>
 80284d2:	4b0a      	ldr	r3, [pc, #40]	@ (80284fc <__d2b+0xb8>)
 80284d4:	18c0      	adds	r0, r0, r3
 80284d6:	9b08      	ldr	r3, [sp, #32]
 80284d8:	6018      	str	r0, [r3, #0]
 80284da:	4b09      	ldr	r3, [pc, #36]	@ (8028500 <__d2b+0xbc>)
 80284dc:	18f3      	adds	r3, r6, r3
 80284de:	009b      	lsls	r3, r3, #2
 80284e0:	18e3      	adds	r3, r4, r3
 80284e2:	6958      	ldr	r0, [r3, #20]
 80284e4:	f7ff fcb2 	bl	8027e4c <__hi0bits>
 80284e8:	0176      	lsls	r6, r6, #5
 80284ea:	e7e3      	b.n	80284b4 <__d2b+0x70>
 80284ec:	0802ea4e 	.word	0x0802ea4e
 80284f0:	0802eabf 	.word	0x0802eabf
 80284f4:	0000030f 	.word	0x0000030f
 80284f8:	fffffbcd 	.word	0xfffffbcd
 80284fc:	fffffbce 	.word	0xfffffbce
 8028500:	3fffffff 	.word	0x3fffffff

08028504 <__ratio>:
 8028504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028506:	b087      	sub	sp, #28
 8028508:	000f      	movs	r7, r1
 802850a:	a904      	add	r1, sp, #16
 802850c:	0006      	movs	r6, r0
 802850e:	f7ff ff4d 	bl	80283ac <__b2d>
 8028512:	9000      	str	r0, [sp, #0]
 8028514:	9101      	str	r1, [sp, #4]
 8028516:	9b00      	ldr	r3, [sp, #0]
 8028518:	9c01      	ldr	r4, [sp, #4]
 802851a:	0038      	movs	r0, r7
 802851c:	a905      	add	r1, sp, #20
 802851e:	9302      	str	r3, [sp, #8]
 8028520:	9403      	str	r4, [sp, #12]
 8028522:	f7ff ff43 	bl	80283ac <__b2d>
 8028526:	000d      	movs	r5, r1
 8028528:	0002      	movs	r2, r0
 802852a:	000b      	movs	r3, r1
 802852c:	6930      	ldr	r0, [r6, #16]
 802852e:	6939      	ldr	r1, [r7, #16]
 8028530:	9e04      	ldr	r6, [sp, #16]
 8028532:	1a40      	subs	r0, r0, r1
 8028534:	9905      	ldr	r1, [sp, #20]
 8028536:	0140      	lsls	r0, r0, #5
 8028538:	1a71      	subs	r1, r6, r1
 802853a:	1841      	adds	r1, r0, r1
 802853c:	0508      	lsls	r0, r1, #20
 802853e:	2900      	cmp	r1, #0
 8028540:	dd08      	ble.n	8028554 <__ratio+0x50>
 8028542:	9901      	ldr	r1, [sp, #4]
 8028544:	1841      	adds	r1, r0, r1
 8028546:	9103      	str	r1, [sp, #12]
 8028548:	9802      	ldr	r0, [sp, #8]
 802854a:	9903      	ldr	r1, [sp, #12]
 802854c:	f7d9 fdc8 	bl	80020e0 <__aeabi_ddiv>
 8028550:	b007      	add	sp, #28
 8028552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028554:	1a2b      	subs	r3, r5, r0
 8028556:	e7f7      	b.n	8028548 <__ratio+0x44>

08028558 <__copybits>:
 8028558:	b570      	push	{r4, r5, r6, lr}
 802855a:	0014      	movs	r4, r2
 802855c:	0005      	movs	r5, r0
 802855e:	3901      	subs	r1, #1
 8028560:	6913      	ldr	r3, [r2, #16]
 8028562:	1149      	asrs	r1, r1, #5
 8028564:	3101      	adds	r1, #1
 8028566:	0089      	lsls	r1, r1, #2
 8028568:	3414      	adds	r4, #20
 802856a:	009b      	lsls	r3, r3, #2
 802856c:	1841      	adds	r1, r0, r1
 802856e:	18e3      	adds	r3, r4, r3
 8028570:	42a3      	cmp	r3, r4
 8028572:	d80d      	bhi.n	8028590 <__copybits+0x38>
 8028574:	0014      	movs	r4, r2
 8028576:	3411      	adds	r4, #17
 8028578:	2500      	movs	r5, #0
 802857a:	42a3      	cmp	r3, r4
 802857c:	d303      	bcc.n	8028586 <__copybits+0x2e>
 802857e:	1a9b      	subs	r3, r3, r2
 8028580:	3b11      	subs	r3, #17
 8028582:	089b      	lsrs	r3, r3, #2
 8028584:	009d      	lsls	r5, r3, #2
 8028586:	2300      	movs	r3, #0
 8028588:	1940      	adds	r0, r0, r5
 802858a:	4281      	cmp	r1, r0
 802858c:	d803      	bhi.n	8028596 <__copybits+0x3e>
 802858e:	bd70      	pop	{r4, r5, r6, pc}
 8028590:	cc40      	ldmia	r4!, {r6}
 8028592:	c540      	stmia	r5!, {r6}
 8028594:	e7ec      	b.n	8028570 <__copybits+0x18>
 8028596:	c008      	stmia	r0!, {r3}
 8028598:	e7f7      	b.n	802858a <__copybits+0x32>

0802859a <__any_on>:
 802859a:	0002      	movs	r2, r0
 802859c:	6900      	ldr	r0, [r0, #16]
 802859e:	b510      	push	{r4, lr}
 80285a0:	3214      	adds	r2, #20
 80285a2:	114b      	asrs	r3, r1, #5
 80285a4:	4298      	cmp	r0, r3
 80285a6:	db13      	blt.n	80285d0 <__any_on+0x36>
 80285a8:	dd0c      	ble.n	80285c4 <__any_on+0x2a>
 80285aa:	241f      	movs	r4, #31
 80285ac:	0008      	movs	r0, r1
 80285ae:	4020      	ands	r0, r4
 80285b0:	4221      	tst	r1, r4
 80285b2:	d007      	beq.n	80285c4 <__any_on+0x2a>
 80285b4:	0099      	lsls	r1, r3, #2
 80285b6:	588c      	ldr	r4, [r1, r2]
 80285b8:	0021      	movs	r1, r4
 80285ba:	40c1      	lsrs	r1, r0
 80285bc:	4081      	lsls	r1, r0
 80285be:	2001      	movs	r0, #1
 80285c0:	428c      	cmp	r4, r1
 80285c2:	d104      	bne.n	80285ce <__any_on+0x34>
 80285c4:	009b      	lsls	r3, r3, #2
 80285c6:	18d3      	adds	r3, r2, r3
 80285c8:	4293      	cmp	r3, r2
 80285ca:	d803      	bhi.n	80285d4 <__any_on+0x3a>
 80285cc:	2000      	movs	r0, #0
 80285ce:	bd10      	pop	{r4, pc}
 80285d0:	0003      	movs	r3, r0
 80285d2:	e7f7      	b.n	80285c4 <__any_on+0x2a>
 80285d4:	3b04      	subs	r3, #4
 80285d6:	6819      	ldr	r1, [r3, #0]
 80285d8:	2900      	cmp	r1, #0
 80285da:	d0f5      	beq.n	80285c8 <__any_on+0x2e>
 80285dc:	2001      	movs	r0, #1
 80285de:	e7f6      	b.n	80285ce <__any_on+0x34>

080285e0 <__ascii_wctomb>:
 80285e0:	0003      	movs	r3, r0
 80285e2:	1e08      	subs	r0, r1, #0
 80285e4:	d005      	beq.n	80285f2 <__ascii_wctomb+0x12>
 80285e6:	2aff      	cmp	r2, #255	@ 0xff
 80285e8:	d904      	bls.n	80285f4 <__ascii_wctomb+0x14>
 80285ea:	228a      	movs	r2, #138	@ 0x8a
 80285ec:	2001      	movs	r0, #1
 80285ee:	601a      	str	r2, [r3, #0]
 80285f0:	4240      	negs	r0, r0
 80285f2:	4770      	bx	lr
 80285f4:	2001      	movs	r0, #1
 80285f6:	700a      	strb	r2, [r1, #0]
 80285f8:	e7fb      	b.n	80285f2 <__ascii_wctomb+0x12>
	...

080285fc <__ssputs_r>:
 80285fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80285fe:	688e      	ldr	r6, [r1, #8]
 8028600:	b085      	sub	sp, #20
 8028602:	001f      	movs	r7, r3
 8028604:	000c      	movs	r4, r1
 8028606:	680b      	ldr	r3, [r1, #0]
 8028608:	9002      	str	r0, [sp, #8]
 802860a:	9203      	str	r2, [sp, #12]
 802860c:	42be      	cmp	r6, r7
 802860e:	d830      	bhi.n	8028672 <__ssputs_r+0x76>
 8028610:	210c      	movs	r1, #12
 8028612:	5e62      	ldrsh	r2, [r4, r1]
 8028614:	2190      	movs	r1, #144	@ 0x90
 8028616:	00c9      	lsls	r1, r1, #3
 8028618:	420a      	tst	r2, r1
 802861a:	d028      	beq.n	802866e <__ssputs_r+0x72>
 802861c:	2003      	movs	r0, #3
 802861e:	6921      	ldr	r1, [r4, #16]
 8028620:	1a5b      	subs	r3, r3, r1
 8028622:	9301      	str	r3, [sp, #4]
 8028624:	6963      	ldr	r3, [r4, #20]
 8028626:	4343      	muls	r3, r0
 8028628:	9801      	ldr	r0, [sp, #4]
 802862a:	0fdd      	lsrs	r5, r3, #31
 802862c:	18ed      	adds	r5, r5, r3
 802862e:	1c7b      	adds	r3, r7, #1
 8028630:	181b      	adds	r3, r3, r0
 8028632:	106d      	asrs	r5, r5, #1
 8028634:	42ab      	cmp	r3, r5
 8028636:	d900      	bls.n	802863a <__ssputs_r+0x3e>
 8028638:	001d      	movs	r5, r3
 802863a:	0552      	lsls	r2, r2, #21
 802863c:	d528      	bpl.n	8028690 <__ssputs_r+0x94>
 802863e:	0029      	movs	r1, r5
 8028640:	9802      	ldr	r0, [sp, #8]
 8028642:	f7ff fa69 	bl	8027b18 <_malloc_r>
 8028646:	1e06      	subs	r6, r0, #0
 8028648:	d02c      	beq.n	80286a4 <__ssputs_r+0xa8>
 802864a:	9a01      	ldr	r2, [sp, #4]
 802864c:	6921      	ldr	r1, [r4, #16]
 802864e:	f7fe f80d 	bl	802666c <memcpy>
 8028652:	89a2      	ldrh	r2, [r4, #12]
 8028654:	4b18      	ldr	r3, [pc, #96]	@ (80286b8 <__ssputs_r+0xbc>)
 8028656:	401a      	ands	r2, r3
 8028658:	2380      	movs	r3, #128	@ 0x80
 802865a:	4313      	orrs	r3, r2
 802865c:	81a3      	strh	r3, [r4, #12]
 802865e:	9b01      	ldr	r3, [sp, #4]
 8028660:	6126      	str	r6, [r4, #16]
 8028662:	18f6      	adds	r6, r6, r3
 8028664:	6026      	str	r6, [r4, #0]
 8028666:	003e      	movs	r6, r7
 8028668:	6165      	str	r5, [r4, #20]
 802866a:	1aed      	subs	r5, r5, r3
 802866c:	60a5      	str	r5, [r4, #8]
 802866e:	42be      	cmp	r6, r7
 8028670:	d900      	bls.n	8028674 <__ssputs_r+0x78>
 8028672:	003e      	movs	r6, r7
 8028674:	0032      	movs	r2, r6
 8028676:	9903      	ldr	r1, [sp, #12]
 8028678:	6820      	ldr	r0, [r4, #0]
 802867a:	f000 fb7e 	bl	8028d7a <memmove>
 802867e:	2000      	movs	r0, #0
 8028680:	68a3      	ldr	r3, [r4, #8]
 8028682:	1b9b      	subs	r3, r3, r6
 8028684:	60a3      	str	r3, [r4, #8]
 8028686:	6823      	ldr	r3, [r4, #0]
 8028688:	199b      	adds	r3, r3, r6
 802868a:	6023      	str	r3, [r4, #0]
 802868c:	b005      	add	sp, #20
 802868e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028690:	002a      	movs	r2, r5
 8028692:	9802      	ldr	r0, [sp, #8]
 8028694:	f000 fc05 	bl	8028ea2 <_realloc_r>
 8028698:	1e06      	subs	r6, r0, #0
 802869a:	d1e0      	bne.n	802865e <__ssputs_r+0x62>
 802869c:	6921      	ldr	r1, [r4, #16]
 802869e:	9802      	ldr	r0, [sp, #8]
 80286a0:	f7fe fe6a 	bl	8027378 <_free_r>
 80286a4:	230c      	movs	r3, #12
 80286a6:	2001      	movs	r0, #1
 80286a8:	9a02      	ldr	r2, [sp, #8]
 80286aa:	4240      	negs	r0, r0
 80286ac:	6013      	str	r3, [r2, #0]
 80286ae:	89a2      	ldrh	r2, [r4, #12]
 80286b0:	3334      	adds	r3, #52	@ 0x34
 80286b2:	4313      	orrs	r3, r2
 80286b4:	81a3      	strh	r3, [r4, #12]
 80286b6:	e7e9      	b.n	802868c <__ssputs_r+0x90>
 80286b8:	fffffb7f 	.word	0xfffffb7f

080286bc <_svfiprintf_r>:
 80286bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80286be:	b0a1      	sub	sp, #132	@ 0x84
 80286c0:	9003      	str	r0, [sp, #12]
 80286c2:	001d      	movs	r5, r3
 80286c4:	898b      	ldrh	r3, [r1, #12]
 80286c6:	000f      	movs	r7, r1
 80286c8:	0016      	movs	r6, r2
 80286ca:	061b      	lsls	r3, r3, #24
 80286cc:	d511      	bpl.n	80286f2 <_svfiprintf_r+0x36>
 80286ce:	690b      	ldr	r3, [r1, #16]
 80286d0:	2b00      	cmp	r3, #0
 80286d2:	d10e      	bne.n	80286f2 <_svfiprintf_r+0x36>
 80286d4:	2140      	movs	r1, #64	@ 0x40
 80286d6:	f7ff fa1f 	bl	8027b18 <_malloc_r>
 80286da:	6038      	str	r0, [r7, #0]
 80286dc:	6138      	str	r0, [r7, #16]
 80286de:	2800      	cmp	r0, #0
 80286e0:	d105      	bne.n	80286ee <_svfiprintf_r+0x32>
 80286e2:	230c      	movs	r3, #12
 80286e4:	9a03      	ldr	r2, [sp, #12]
 80286e6:	6013      	str	r3, [r2, #0]
 80286e8:	2001      	movs	r0, #1
 80286ea:	4240      	negs	r0, r0
 80286ec:	e0cf      	b.n	802888e <_svfiprintf_r+0x1d2>
 80286ee:	2340      	movs	r3, #64	@ 0x40
 80286f0:	617b      	str	r3, [r7, #20]
 80286f2:	2300      	movs	r3, #0
 80286f4:	ac08      	add	r4, sp, #32
 80286f6:	6163      	str	r3, [r4, #20]
 80286f8:	3320      	adds	r3, #32
 80286fa:	7663      	strb	r3, [r4, #25]
 80286fc:	3310      	adds	r3, #16
 80286fe:	76a3      	strb	r3, [r4, #26]
 8028700:	9507      	str	r5, [sp, #28]
 8028702:	0035      	movs	r5, r6
 8028704:	782b      	ldrb	r3, [r5, #0]
 8028706:	2b00      	cmp	r3, #0
 8028708:	d001      	beq.n	802870e <_svfiprintf_r+0x52>
 802870a:	2b25      	cmp	r3, #37	@ 0x25
 802870c:	d148      	bne.n	80287a0 <_svfiprintf_r+0xe4>
 802870e:	1bab      	subs	r3, r5, r6
 8028710:	9305      	str	r3, [sp, #20]
 8028712:	42b5      	cmp	r5, r6
 8028714:	d00b      	beq.n	802872e <_svfiprintf_r+0x72>
 8028716:	0032      	movs	r2, r6
 8028718:	0039      	movs	r1, r7
 802871a:	9803      	ldr	r0, [sp, #12]
 802871c:	f7ff ff6e 	bl	80285fc <__ssputs_r>
 8028720:	3001      	adds	r0, #1
 8028722:	d100      	bne.n	8028726 <_svfiprintf_r+0x6a>
 8028724:	e0ae      	b.n	8028884 <_svfiprintf_r+0x1c8>
 8028726:	6963      	ldr	r3, [r4, #20]
 8028728:	9a05      	ldr	r2, [sp, #20]
 802872a:	189b      	adds	r3, r3, r2
 802872c:	6163      	str	r3, [r4, #20]
 802872e:	782b      	ldrb	r3, [r5, #0]
 8028730:	2b00      	cmp	r3, #0
 8028732:	d100      	bne.n	8028736 <_svfiprintf_r+0x7a>
 8028734:	e0a6      	b.n	8028884 <_svfiprintf_r+0x1c8>
 8028736:	2201      	movs	r2, #1
 8028738:	2300      	movs	r3, #0
 802873a:	4252      	negs	r2, r2
 802873c:	6062      	str	r2, [r4, #4]
 802873e:	a904      	add	r1, sp, #16
 8028740:	3254      	adds	r2, #84	@ 0x54
 8028742:	1852      	adds	r2, r2, r1
 8028744:	1c6e      	adds	r6, r5, #1
 8028746:	6023      	str	r3, [r4, #0]
 8028748:	60e3      	str	r3, [r4, #12]
 802874a:	60a3      	str	r3, [r4, #8]
 802874c:	7013      	strb	r3, [r2, #0]
 802874e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028750:	4b54      	ldr	r3, [pc, #336]	@ (80288a4 <_svfiprintf_r+0x1e8>)
 8028752:	2205      	movs	r2, #5
 8028754:	0018      	movs	r0, r3
 8028756:	7831      	ldrb	r1, [r6, #0]
 8028758:	9305      	str	r3, [sp, #20]
 802875a:	f7fd ff7c 	bl	8026656 <memchr>
 802875e:	1c75      	adds	r5, r6, #1
 8028760:	2800      	cmp	r0, #0
 8028762:	d11f      	bne.n	80287a4 <_svfiprintf_r+0xe8>
 8028764:	6822      	ldr	r2, [r4, #0]
 8028766:	06d3      	lsls	r3, r2, #27
 8028768:	d504      	bpl.n	8028774 <_svfiprintf_r+0xb8>
 802876a:	2353      	movs	r3, #83	@ 0x53
 802876c:	a904      	add	r1, sp, #16
 802876e:	185b      	adds	r3, r3, r1
 8028770:	2120      	movs	r1, #32
 8028772:	7019      	strb	r1, [r3, #0]
 8028774:	0713      	lsls	r3, r2, #28
 8028776:	d504      	bpl.n	8028782 <_svfiprintf_r+0xc6>
 8028778:	2353      	movs	r3, #83	@ 0x53
 802877a:	a904      	add	r1, sp, #16
 802877c:	185b      	adds	r3, r3, r1
 802877e:	212b      	movs	r1, #43	@ 0x2b
 8028780:	7019      	strb	r1, [r3, #0]
 8028782:	7833      	ldrb	r3, [r6, #0]
 8028784:	2b2a      	cmp	r3, #42	@ 0x2a
 8028786:	d016      	beq.n	80287b6 <_svfiprintf_r+0xfa>
 8028788:	0035      	movs	r5, r6
 802878a:	2100      	movs	r1, #0
 802878c:	200a      	movs	r0, #10
 802878e:	68e3      	ldr	r3, [r4, #12]
 8028790:	782a      	ldrb	r2, [r5, #0]
 8028792:	1c6e      	adds	r6, r5, #1
 8028794:	3a30      	subs	r2, #48	@ 0x30
 8028796:	2a09      	cmp	r2, #9
 8028798:	d950      	bls.n	802883c <_svfiprintf_r+0x180>
 802879a:	2900      	cmp	r1, #0
 802879c:	d111      	bne.n	80287c2 <_svfiprintf_r+0x106>
 802879e:	e017      	b.n	80287d0 <_svfiprintf_r+0x114>
 80287a0:	3501      	adds	r5, #1
 80287a2:	e7af      	b.n	8028704 <_svfiprintf_r+0x48>
 80287a4:	9b05      	ldr	r3, [sp, #20]
 80287a6:	6822      	ldr	r2, [r4, #0]
 80287a8:	1ac0      	subs	r0, r0, r3
 80287aa:	2301      	movs	r3, #1
 80287ac:	4083      	lsls	r3, r0
 80287ae:	4313      	orrs	r3, r2
 80287b0:	002e      	movs	r6, r5
 80287b2:	6023      	str	r3, [r4, #0]
 80287b4:	e7cc      	b.n	8028750 <_svfiprintf_r+0x94>
 80287b6:	9b07      	ldr	r3, [sp, #28]
 80287b8:	1d19      	adds	r1, r3, #4
 80287ba:	681b      	ldr	r3, [r3, #0]
 80287bc:	9107      	str	r1, [sp, #28]
 80287be:	2b00      	cmp	r3, #0
 80287c0:	db01      	blt.n	80287c6 <_svfiprintf_r+0x10a>
 80287c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80287c4:	e004      	b.n	80287d0 <_svfiprintf_r+0x114>
 80287c6:	425b      	negs	r3, r3
 80287c8:	60e3      	str	r3, [r4, #12]
 80287ca:	2302      	movs	r3, #2
 80287cc:	4313      	orrs	r3, r2
 80287ce:	6023      	str	r3, [r4, #0]
 80287d0:	782b      	ldrb	r3, [r5, #0]
 80287d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80287d4:	d10c      	bne.n	80287f0 <_svfiprintf_r+0x134>
 80287d6:	786b      	ldrb	r3, [r5, #1]
 80287d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80287da:	d134      	bne.n	8028846 <_svfiprintf_r+0x18a>
 80287dc:	9b07      	ldr	r3, [sp, #28]
 80287de:	3502      	adds	r5, #2
 80287e0:	1d1a      	adds	r2, r3, #4
 80287e2:	681b      	ldr	r3, [r3, #0]
 80287e4:	9207      	str	r2, [sp, #28]
 80287e6:	2b00      	cmp	r3, #0
 80287e8:	da01      	bge.n	80287ee <_svfiprintf_r+0x132>
 80287ea:	2301      	movs	r3, #1
 80287ec:	425b      	negs	r3, r3
 80287ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80287f0:	4e2d      	ldr	r6, [pc, #180]	@ (80288a8 <_svfiprintf_r+0x1ec>)
 80287f2:	2203      	movs	r2, #3
 80287f4:	0030      	movs	r0, r6
 80287f6:	7829      	ldrb	r1, [r5, #0]
 80287f8:	f7fd ff2d 	bl	8026656 <memchr>
 80287fc:	2800      	cmp	r0, #0
 80287fe:	d006      	beq.n	802880e <_svfiprintf_r+0x152>
 8028800:	2340      	movs	r3, #64	@ 0x40
 8028802:	1b80      	subs	r0, r0, r6
 8028804:	4083      	lsls	r3, r0
 8028806:	6822      	ldr	r2, [r4, #0]
 8028808:	3501      	adds	r5, #1
 802880a:	4313      	orrs	r3, r2
 802880c:	6023      	str	r3, [r4, #0]
 802880e:	7829      	ldrb	r1, [r5, #0]
 8028810:	2206      	movs	r2, #6
 8028812:	4826      	ldr	r0, [pc, #152]	@ (80288ac <_svfiprintf_r+0x1f0>)
 8028814:	1c6e      	adds	r6, r5, #1
 8028816:	7621      	strb	r1, [r4, #24]
 8028818:	f7fd ff1d 	bl	8026656 <memchr>
 802881c:	2800      	cmp	r0, #0
 802881e:	d038      	beq.n	8028892 <_svfiprintf_r+0x1d6>
 8028820:	4b23      	ldr	r3, [pc, #140]	@ (80288b0 <_svfiprintf_r+0x1f4>)
 8028822:	2b00      	cmp	r3, #0
 8028824:	d122      	bne.n	802886c <_svfiprintf_r+0x1b0>
 8028826:	2207      	movs	r2, #7
 8028828:	9b07      	ldr	r3, [sp, #28]
 802882a:	3307      	adds	r3, #7
 802882c:	4393      	bics	r3, r2
 802882e:	3308      	adds	r3, #8
 8028830:	9307      	str	r3, [sp, #28]
 8028832:	6963      	ldr	r3, [r4, #20]
 8028834:	9a04      	ldr	r2, [sp, #16]
 8028836:	189b      	adds	r3, r3, r2
 8028838:	6163      	str	r3, [r4, #20]
 802883a:	e762      	b.n	8028702 <_svfiprintf_r+0x46>
 802883c:	4343      	muls	r3, r0
 802883e:	0035      	movs	r5, r6
 8028840:	2101      	movs	r1, #1
 8028842:	189b      	adds	r3, r3, r2
 8028844:	e7a4      	b.n	8028790 <_svfiprintf_r+0xd4>
 8028846:	2300      	movs	r3, #0
 8028848:	200a      	movs	r0, #10
 802884a:	0019      	movs	r1, r3
 802884c:	3501      	adds	r5, #1
 802884e:	6063      	str	r3, [r4, #4]
 8028850:	782a      	ldrb	r2, [r5, #0]
 8028852:	1c6e      	adds	r6, r5, #1
 8028854:	3a30      	subs	r2, #48	@ 0x30
 8028856:	2a09      	cmp	r2, #9
 8028858:	d903      	bls.n	8028862 <_svfiprintf_r+0x1a6>
 802885a:	2b00      	cmp	r3, #0
 802885c:	d0c8      	beq.n	80287f0 <_svfiprintf_r+0x134>
 802885e:	9109      	str	r1, [sp, #36]	@ 0x24
 8028860:	e7c6      	b.n	80287f0 <_svfiprintf_r+0x134>
 8028862:	4341      	muls	r1, r0
 8028864:	0035      	movs	r5, r6
 8028866:	2301      	movs	r3, #1
 8028868:	1889      	adds	r1, r1, r2
 802886a:	e7f1      	b.n	8028850 <_svfiprintf_r+0x194>
 802886c:	aa07      	add	r2, sp, #28
 802886e:	9200      	str	r2, [sp, #0]
 8028870:	0021      	movs	r1, r4
 8028872:	003a      	movs	r2, r7
 8028874:	4b0f      	ldr	r3, [pc, #60]	@ (80288b4 <_svfiprintf_r+0x1f8>)
 8028876:	9803      	ldr	r0, [sp, #12]
 8028878:	f7fc ffe6 	bl	8025848 <_printf_float>
 802887c:	9004      	str	r0, [sp, #16]
 802887e:	9b04      	ldr	r3, [sp, #16]
 8028880:	3301      	adds	r3, #1
 8028882:	d1d6      	bne.n	8028832 <_svfiprintf_r+0x176>
 8028884:	89bb      	ldrh	r3, [r7, #12]
 8028886:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028888:	065b      	lsls	r3, r3, #25
 802888a:	d500      	bpl.n	802888e <_svfiprintf_r+0x1d2>
 802888c:	e72c      	b.n	80286e8 <_svfiprintf_r+0x2c>
 802888e:	b021      	add	sp, #132	@ 0x84
 8028890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028892:	aa07      	add	r2, sp, #28
 8028894:	9200      	str	r2, [sp, #0]
 8028896:	0021      	movs	r1, r4
 8028898:	003a      	movs	r2, r7
 802889a:	4b06      	ldr	r3, [pc, #24]	@ (80288b4 <_svfiprintf_r+0x1f8>)
 802889c:	9803      	ldr	r0, [sp, #12]
 802889e:	f7fd fa81 	bl	8025da4 <_printf_i>
 80288a2:	e7eb      	b.n	802887c <_svfiprintf_r+0x1c0>
 80288a4:	0802eb18 	.word	0x0802eb18
 80288a8:	0802eb1e 	.word	0x0802eb1e
 80288ac:	0802eb22 	.word	0x0802eb22
 80288b0:	08025849 	.word	0x08025849
 80288b4:	080285fd 	.word	0x080285fd

080288b8 <__sfputc_r>:
 80288b8:	6893      	ldr	r3, [r2, #8]
 80288ba:	b510      	push	{r4, lr}
 80288bc:	3b01      	subs	r3, #1
 80288be:	6093      	str	r3, [r2, #8]
 80288c0:	2b00      	cmp	r3, #0
 80288c2:	da04      	bge.n	80288ce <__sfputc_r+0x16>
 80288c4:	6994      	ldr	r4, [r2, #24]
 80288c6:	42a3      	cmp	r3, r4
 80288c8:	db07      	blt.n	80288da <__sfputc_r+0x22>
 80288ca:	290a      	cmp	r1, #10
 80288cc:	d005      	beq.n	80288da <__sfputc_r+0x22>
 80288ce:	6813      	ldr	r3, [r2, #0]
 80288d0:	1c58      	adds	r0, r3, #1
 80288d2:	6010      	str	r0, [r2, #0]
 80288d4:	7019      	strb	r1, [r3, #0]
 80288d6:	0008      	movs	r0, r1
 80288d8:	bd10      	pop	{r4, pc}
 80288da:	f7fd fd4b 	bl	8026374 <__swbuf_r>
 80288de:	0001      	movs	r1, r0
 80288e0:	e7f9      	b.n	80288d6 <__sfputc_r+0x1e>

080288e2 <__sfputs_r>:
 80288e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288e4:	0006      	movs	r6, r0
 80288e6:	000f      	movs	r7, r1
 80288e8:	0014      	movs	r4, r2
 80288ea:	18d5      	adds	r5, r2, r3
 80288ec:	42ac      	cmp	r4, r5
 80288ee:	d101      	bne.n	80288f4 <__sfputs_r+0x12>
 80288f0:	2000      	movs	r0, #0
 80288f2:	e007      	b.n	8028904 <__sfputs_r+0x22>
 80288f4:	7821      	ldrb	r1, [r4, #0]
 80288f6:	003a      	movs	r2, r7
 80288f8:	0030      	movs	r0, r6
 80288fa:	f7ff ffdd 	bl	80288b8 <__sfputc_r>
 80288fe:	3401      	adds	r4, #1
 8028900:	1c43      	adds	r3, r0, #1
 8028902:	d1f3      	bne.n	80288ec <__sfputs_r+0xa>
 8028904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028908 <_vfiprintf_r>:
 8028908:	b5f0      	push	{r4, r5, r6, r7, lr}
 802890a:	b0a1      	sub	sp, #132	@ 0x84
 802890c:	000f      	movs	r7, r1
 802890e:	0015      	movs	r5, r2
 8028910:	001e      	movs	r6, r3
 8028912:	9003      	str	r0, [sp, #12]
 8028914:	2800      	cmp	r0, #0
 8028916:	d004      	beq.n	8028922 <_vfiprintf_r+0x1a>
 8028918:	6a03      	ldr	r3, [r0, #32]
 802891a:	2b00      	cmp	r3, #0
 802891c:	d101      	bne.n	8028922 <_vfiprintf_r+0x1a>
 802891e:	f7fd fbdd 	bl	80260dc <__sinit>
 8028922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028924:	07db      	lsls	r3, r3, #31
 8028926:	d405      	bmi.n	8028934 <_vfiprintf_r+0x2c>
 8028928:	89bb      	ldrh	r3, [r7, #12]
 802892a:	059b      	lsls	r3, r3, #22
 802892c:	d402      	bmi.n	8028934 <_vfiprintf_r+0x2c>
 802892e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028930:	f7fd fe8f 	bl	8026652 <__retarget_lock_acquire_recursive>
 8028934:	89bb      	ldrh	r3, [r7, #12]
 8028936:	071b      	lsls	r3, r3, #28
 8028938:	d502      	bpl.n	8028940 <_vfiprintf_r+0x38>
 802893a:	693b      	ldr	r3, [r7, #16]
 802893c:	2b00      	cmp	r3, #0
 802893e:	d113      	bne.n	8028968 <_vfiprintf_r+0x60>
 8028940:	0039      	movs	r1, r7
 8028942:	9803      	ldr	r0, [sp, #12]
 8028944:	f7fd fd58 	bl	80263f8 <__swsetup_r>
 8028948:	2800      	cmp	r0, #0
 802894a:	d00d      	beq.n	8028968 <_vfiprintf_r+0x60>
 802894c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802894e:	07db      	lsls	r3, r3, #31
 8028950:	d503      	bpl.n	802895a <_vfiprintf_r+0x52>
 8028952:	2001      	movs	r0, #1
 8028954:	4240      	negs	r0, r0
 8028956:	b021      	add	sp, #132	@ 0x84
 8028958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802895a:	89bb      	ldrh	r3, [r7, #12]
 802895c:	059b      	lsls	r3, r3, #22
 802895e:	d4f8      	bmi.n	8028952 <_vfiprintf_r+0x4a>
 8028960:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028962:	f7fd fe77 	bl	8026654 <__retarget_lock_release_recursive>
 8028966:	e7f4      	b.n	8028952 <_vfiprintf_r+0x4a>
 8028968:	2300      	movs	r3, #0
 802896a:	ac08      	add	r4, sp, #32
 802896c:	6163      	str	r3, [r4, #20]
 802896e:	3320      	adds	r3, #32
 8028970:	7663      	strb	r3, [r4, #25]
 8028972:	3310      	adds	r3, #16
 8028974:	76a3      	strb	r3, [r4, #26]
 8028976:	9607      	str	r6, [sp, #28]
 8028978:	002e      	movs	r6, r5
 802897a:	7833      	ldrb	r3, [r6, #0]
 802897c:	2b00      	cmp	r3, #0
 802897e:	d001      	beq.n	8028984 <_vfiprintf_r+0x7c>
 8028980:	2b25      	cmp	r3, #37	@ 0x25
 8028982:	d148      	bne.n	8028a16 <_vfiprintf_r+0x10e>
 8028984:	1b73      	subs	r3, r6, r5
 8028986:	9305      	str	r3, [sp, #20]
 8028988:	42ae      	cmp	r6, r5
 802898a:	d00b      	beq.n	80289a4 <_vfiprintf_r+0x9c>
 802898c:	002a      	movs	r2, r5
 802898e:	0039      	movs	r1, r7
 8028990:	9803      	ldr	r0, [sp, #12]
 8028992:	f7ff ffa6 	bl	80288e2 <__sfputs_r>
 8028996:	3001      	adds	r0, #1
 8028998:	d100      	bne.n	802899c <_vfiprintf_r+0x94>
 802899a:	e0ae      	b.n	8028afa <_vfiprintf_r+0x1f2>
 802899c:	6963      	ldr	r3, [r4, #20]
 802899e:	9a05      	ldr	r2, [sp, #20]
 80289a0:	189b      	adds	r3, r3, r2
 80289a2:	6163      	str	r3, [r4, #20]
 80289a4:	7833      	ldrb	r3, [r6, #0]
 80289a6:	2b00      	cmp	r3, #0
 80289a8:	d100      	bne.n	80289ac <_vfiprintf_r+0xa4>
 80289aa:	e0a6      	b.n	8028afa <_vfiprintf_r+0x1f2>
 80289ac:	2201      	movs	r2, #1
 80289ae:	2300      	movs	r3, #0
 80289b0:	4252      	negs	r2, r2
 80289b2:	6062      	str	r2, [r4, #4]
 80289b4:	a904      	add	r1, sp, #16
 80289b6:	3254      	adds	r2, #84	@ 0x54
 80289b8:	1852      	adds	r2, r2, r1
 80289ba:	1c75      	adds	r5, r6, #1
 80289bc:	6023      	str	r3, [r4, #0]
 80289be:	60e3      	str	r3, [r4, #12]
 80289c0:	60a3      	str	r3, [r4, #8]
 80289c2:	7013      	strb	r3, [r2, #0]
 80289c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80289c6:	4b59      	ldr	r3, [pc, #356]	@ (8028b2c <_vfiprintf_r+0x224>)
 80289c8:	2205      	movs	r2, #5
 80289ca:	0018      	movs	r0, r3
 80289cc:	7829      	ldrb	r1, [r5, #0]
 80289ce:	9305      	str	r3, [sp, #20]
 80289d0:	f7fd fe41 	bl	8026656 <memchr>
 80289d4:	1c6e      	adds	r6, r5, #1
 80289d6:	2800      	cmp	r0, #0
 80289d8:	d11f      	bne.n	8028a1a <_vfiprintf_r+0x112>
 80289da:	6822      	ldr	r2, [r4, #0]
 80289dc:	06d3      	lsls	r3, r2, #27
 80289de:	d504      	bpl.n	80289ea <_vfiprintf_r+0xe2>
 80289e0:	2353      	movs	r3, #83	@ 0x53
 80289e2:	a904      	add	r1, sp, #16
 80289e4:	185b      	adds	r3, r3, r1
 80289e6:	2120      	movs	r1, #32
 80289e8:	7019      	strb	r1, [r3, #0]
 80289ea:	0713      	lsls	r3, r2, #28
 80289ec:	d504      	bpl.n	80289f8 <_vfiprintf_r+0xf0>
 80289ee:	2353      	movs	r3, #83	@ 0x53
 80289f0:	a904      	add	r1, sp, #16
 80289f2:	185b      	adds	r3, r3, r1
 80289f4:	212b      	movs	r1, #43	@ 0x2b
 80289f6:	7019      	strb	r1, [r3, #0]
 80289f8:	782b      	ldrb	r3, [r5, #0]
 80289fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80289fc:	d016      	beq.n	8028a2c <_vfiprintf_r+0x124>
 80289fe:	002e      	movs	r6, r5
 8028a00:	2100      	movs	r1, #0
 8028a02:	200a      	movs	r0, #10
 8028a04:	68e3      	ldr	r3, [r4, #12]
 8028a06:	7832      	ldrb	r2, [r6, #0]
 8028a08:	1c75      	adds	r5, r6, #1
 8028a0a:	3a30      	subs	r2, #48	@ 0x30
 8028a0c:	2a09      	cmp	r2, #9
 8028a0e:	d950      	bls.n	8028ab2 <_vfiprintf_r+0x1aa>
 8028a10:	2900      	cmp	r1, #0
 8028a12:	d111      	bne.n	8028a38 <_vfiprintf_r+0x130>
 8028a14:	e017      	b.n	8028a46 <_vfiprintf_r+0x13e>
 8028a16:	3601      	adds	r6, #1
 8028a18:	e7af      	b.n	802897a <_vfiprintf_r+0x72>
 8028a1a:	9b05      	ldr	r3, [sp, #20]
 8028a1c:	6822      	ldr	r2, [r4, #0]
 8028a1e:	1ac0      	subs	r0, r0, r3
 8028a20:	2301      	movs	r3, #1
 8028a22:	4083      	lsls	r3, r0
 8028a24:	4313      	orrs	r3, r2
 8028a26:	0035      	movs	r5, r6
 8028a28:	6023      	str	r3, [r4, #0]
 8028a2a:	e7cc      	b.n	80289c6 <_vfiprintf_r+0xbe>
 8028a2c:	9b07      	ldr	r3, [sp, #28]
 8028a2e:	1d19      	adds	r1, r3, #4
 8028a30:	681b      	ldr	r3, [r3, #0]
 8028a32:	9107      	str	r1, [sp, #28]
 8028a34:	2b00      	cmp	r3, #0
 8028a36:	db01      	blt.n	8028a3c <_vfiprintf_r+0x134>
 8028a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028a3a:	e004      	b.n	8028a46 <_vfiprintf_r+0x13e>
 8028a3c:	425b      	negs	r3, r3
 8028a3e:	60e3      	str	r3, [r4, #12]
 8028a40:	2302      	movs	r3, #2
 8028a42:	4313      	orrs	r3, r2
 8028a44:	6023      	str	r3, [r4, #0]
 8028a46:	7833      	ldrb	r3, [r6, #0]
 8028a48:	2b2e      	cmp	r3, #46	@ 0x2e
 8028a4a:	d10c      	bne.n	8028a66 <_vfiprintf_r+0x15e>
 8028a4c:	7873      	ldrb	r3, [r6, #1]
 8028a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8028a50:	d134      	bne.n	8028abc <_vfiprintf_r+0x1b4>
 8028a52:	9b07      	ldr	r3, [sp, #28]
 8028a54:	3602      	adds	r6, #2
 8028a56:	1d1a      	adds	r2, r3, #4
 8028a58:	681b      	ldr	r3, [r3, #0]
 8028a5a:	9207      	str	r2, [sp, #28]
 8028a5c:	2b00      	cmp	r3, #0
 8028a5e:	da01      	bge.n	8028a64 <_vfiprintf_r+0x15c>
 8028a60:	2301      	movs	r3, #1
 8028a62:	425b      	negs	r3, r3
 8028a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8028a66:	4d32      	ldr	r5, [pc, #200]	@ (8028b30 <_vfiprintf_r+0x228>)
 8028a68:	2203      	movs	r2, #3
 8028a6a:	0028      	movs	r0, r5
 8028a6c:	7831      	ldrb	r1, [r6, #0]
 8028a6e:	f7fd fdf2 	bl	8026656 <memchr>
 8028a72:	2800      	cmp	r0, #0
 8028a74:	d006      	beq.n	8028a84 <_vfiprintf_r+0x17c>
 8028a76:	2340      	movs	r3, #64	@ 0x40
 8028a78:	1b40      	subs	r0, r0, r5
 8028a7a:	4083      	lsls	r3, r0
 8028a7c:	6822      	ldr	r2, [r4, #0]
 8028a7e:	3601      	adds	r6, #1
 8028a80:	4313      	orrs	r3, r2
 8028a82:	6023      	str	r3, [r4, #0]
 8028a84:	7831      	ldrb	r1, [r6, #0]
 8028a86:	2206      	movs	r2, #6
 8028a88:	482a      	ldr	r0, [pc, #168]	@ (8028b34 <_vfiprintf_r+0x22c>)
 8028a8a:	1c75      	adds	r5, r6, #1
 8028a8c:	7621      	strb	r1, [r4, #24]
 8028a8e:	f7fd fde2 	bl	8026656 <memchr>
 8028a92:	2800      	cmp	r0, #0
 8028a94:	d040      	beq.n	8028b18 <_vfiprintf_r+0x210>
 8028a96:	4b28      	ldr	r3, [pc, #160]	@ (8028b38 <_vfiprintf_r+0x230>)
 8028a98:	2b00      	cmp	r3, #0
 8028a9a:	d122      	bne.n	8028ae2 <_vfiprintf_r+0x1da>
 8028a9c:	2207      	movs	r2, #7
 8028a9e:	9b07      	ldr	r3, [sp, #28]
 8028aa0:	3307      	adds	r3, #7
 8028aa2:	4393      	bics	r3, r2
 8028aa4:	3308      	adds	r3, #8
 8028aa6:	9307      	str	r3, [sp, #28]
 8028aa8:	6963      	ldr	r3, [r4, #20]
 8028aaa:	9a04      	ldr	r2, [sp, #16]
 8028aac:	189b      	adds	r3, r3, r2
 8028aae:	6163      	str	r3, [r4, #20]
 8028ab0:	e762      	b.n	8028978 <_vfiprintf_r+0x70>
 8028ab2:	4343      	muls	r3, r0
 8028ab4:	002e      	movs	r6, r5
 8028ab6:	2101      	movs	r1, #1
 8028ab8:	189b      	adds	r3, r3, r2
 8028aba:	e7a4      	b.n	8028a06 <_vfiprintf_r+0xfe>
 8028abc:	2300      	movs	r3, #0
 8028abe:	200a      	movs	r0, #10
 8028ac0:	0019      	movs	r1, r3
 8028ac2:	3601      	adds	r6, #1
 8028ac4:	6063      	str	r3, [r4, #4]
 8028ac6:	7832      	ldrb	r2, [r6, #0]
 8028ac8:	1c75      	adds	r5, r6, #1
 8028aca:	3a30      	subs	r2, #48	@ 0x30
 8028acc:	2a09      	cmp	r2, #9
 8028ace:	d903      	bls.n	8028ad8 <_vfiprintf_r+0x1d0>
 8028ad0:	2b00      	cmp	r3, #0
 8028ad2:	d0c8      	beq.n	8028a66 <_vfiprintf_r+0x15e>
 8028ad4:	9109      	str	r1, [sp, #36]	@ 0x24
 8028ad6:	e7c6      	b.n	8028a66 <_vfiprintf_r+0x15e>
 8028ad8:	4341      	muls	r1, r0
 8028ada:	002e      	movs	r6, r5
 8028adc:	2301      	movs	r3, #1
 8028ade:	1889      	adds	r1, r1, r2
 8028ae0:	e7f1      	b.n	8028ac6 <_vfiprintf_r+0x1be>
 8028ae2:	aa07      	add	r2, sp, #28
 8028ae4:	9200      	str	r2, [sp, #0]
 8028ae6:	0021      	movs	r1, r4
 8028ae8:	003a      	movs	r2, r7
 8028aea:	4b14      	ldr	r3, [pc, #80]	@ (8028b3c <_vfiprintf_r+0x234>)
 8028aec:	9803      	ldr	r0, [sp, #12]
 8028aee:	f7fc feab 	bl	8025848 <_printf_float>
 8028af2:	9004      	str	r0, [sp, #16]
 8028af4:	9b04      	ldr	r3, [sp, #16]
 8028af6:	3301      	adds	r3, #1
 8028af8:	d1d6      	bne.n	8028aa8 <_vfiprintf_r+0x1a0>
 8028afa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028afc:	07db      	lsls	r3, r3, #31
 8028afe:	d405      	bmi.n	8028b0c <_vfiprintf_r+0x204>
 8028b00:	89bb      	ldrh	r3, [r7, #12]
 8028b02:	059b      	lsls	r3, r3, #22
 8028b04:	d402      	bmi.n	8028b0c <_vfiprintf_r+0x204>
 8028b06:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028b08:	f7fd fda4 	bl	8026654 <__retarget_lock_release_recursive>
 8028b0c:	89bb      	ldrh	r3, [r7, #12]
 8028b0e:	065b      	lsls	r3, r3, #25
 8028b10:	d500      	bpl.n	8028b14 <_vfiprintf_r+0x20c>
 8028b12:	e71e      	b.n	8028952 <_vfiprintf_r+0x4a>
 8028b14:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028b16:	e71e      	b.n	8028956 <_vfiprintf_r+0x4e>
 8028b18:	aa07      	add	r2, sp, #28
 8028b1a:	9200      	str	r2, [sp, #0]
 8028b1c:	0021      	movs	r1, r4
 8028b1e:	003a      	movs	r2, r7
 8028b20:	4b06      	ldr	r3, [pc, #24]	@ (8028b3c <_vfiprintf_r+0x234>)
 8028b22:	9803      	ldr	r0, [sp, #12]
 8028b24:	f7fd f93e 	bl	8025da4 <_printf_i>
 8028b28:	e7e3      	b.n	8028af2 <_vfiprintf_r+0x1ea>
 8028b2a:	46c0      	nop			@ (mov r8, r8)
 8028b2c:	0802eb18 	.word	0x0802eb18
 8028b30:	0802eb1e 	.word	0x0802eb1e
 8028b34:	0802eb22 	.word	0x0802eb22
 8028b38:	08025849 	.word	0x08025849
 8028b3c:	080288e3 	.word	0x080288e3

08028b40 <__sflush_r>:
 8028b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028b42:	220c      	movs	r2, #12
 8028b44:	5e8b      	ldrsh	r3, [r1, r2]
 8028b46:	0005      	movs	r5, r0
 8028b48:	000c      	movs	r4, r1
 8028b4a:	071a      	lsls	r2, r3, #28
 8028b4c:	d456      	bmi.n	8028bfc <__sflush_r+0xbc>
 8028b4e:	684a      	ldr	r2, [r1, #4]
 8028b50:	2a00      	cmp	r2, #0
 8028b52:	dc02      	bgt.n	8028b5a <__sflush_r+0x1a>
 8028b54:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8028b56:	2a00      	cmp	r2, #0
 8028b58:	dd4e      	ble.n	8028bf8 <__sflush_r+0xb8>
 8028b5a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028b5c:	2f00      	cmp	r7, #0
 8028b5e:	d04b      	beq.n	8028bf8 <__sflush_r+0xb8>
 8028b60:	2200      	movs	r2, #0
 8028b62:	2080      	movs	r0, #128	@ 0x80
 8028b64:	682e      	ldr	r6, [r5, #0]
 8028b66:	602a      	str	r2, [r5, #0]
 8028b68:	001a      	movs	r2, r3
 8028b6a:	0140      	lsls	r0, r0, #5
 8028b6c:	6a21      	ldr	r1, [r4, #32]
 8028b6e:	4002      	ands	r2, r0
 8028b70:	4203      	tst	r3, r0
 8028b72:	d033      	beq.n	8028bdc <__sflush_r+0x9c>
 8028b74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028b76:	89a3      	ldrh	r3, [r4, #12]
 8028b78:	075b      	lsls	r3, r3, #29
 8028b7a:	d506      	bpl.n	8028b8a <__sflush_r+0x4a>
 8028b7c:	6863      	ldr	r3, [r4, #4]
 8028b7e:	1ad2      	subs	r2, r2, r3
 8028b80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028b82:	2b00      	cmp	r3, #0
 8028b84:	d001      	beq.n	8028b8a <__sflush_r+0x4a>
 8028b86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028b88:	1ad2      	subs	r2, r2, r3
 8028b8a:	2300      	movs	r3, #0
 8028b8c:	0028      	movs	r0, r5
 8028b8e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028b90:	6a21      	ldr	r1, [r4, #32]
 8028b92:	47b8      	blx	r7
 8028b94:	89a2      	ldrh	r2, [r4, #12]
 8028b96:	1c43      	adds	r3, r0, #1
 8028b98:	d106      	bne.n	8028ba8 <__sflush_r+0x68>
 8028b9a:	6829      	ldr	r1, [r5, #0]
 8028b9c:	291d      	cmp	r1, #29
 8028b9e:	d846      	bhi.n	8028c2e <__sflush_r+0xee>
 8028ba0:	4b29      	ldr	r3, [pc, #164]	@ (8028c48 <__sflush_r+0x108>)
 8028ba2:	40cb      	lsrs	r3, r1
 8028ba4:	07db      	lsls	r3, r3, #31
 8028ba6:	d542      	bpl.n	8028c2e <__sflush_r+0xee>
 8028ba8:	2300      	movs	r3, #0
 8028baa:	6063      	str	r3, [r4, #4]
 8028bac:	6923      	ldr	r3, [r4, #16]
 8028bae:	6023      	str	r3, [r4, #0]
 8028bb0:	04d2      	lsls	r2, r2, #19
 8028bb2:	d505      	bpl.n	8028bc0 <__sflush_r+0x80>
 8028bb4:	1c43      	adds	r3, r0, #1
 8028bb6:	d102      	bne.n	8028bbe <__sflush_r+0x7e>
 8028bb8:	682b      	ldr	r3, [r5, #0]
 8028bba:	2b00      	cmp	r3, #0
 8028bbc:	d100      	bne.n	8028bc0 <__sflush_r+0x80>
 8028bbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8028bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028bc2:	602e      	str	r6, [r5, #0]
 8028bc4:	2900      	cmp	r1, #0
 8028bc6:	d017      	beq.n	8028bf8 <__sflush_r+0xb8>
 8028bc8:	0023      	movs	r3, r4
 8028bca:	3344      	adds	r3, #68	@ 0x44
 8028bcc:	4299      	cmp	r1, r3
 8028bce:	d002      	beq.n	8028bd6 <__sflush_r+0x96>
 8028bd0:	0028      	movs	r0, r5
 8028bd2:	f7fe fbd1 	bl	8027378 <_free_r>
 8028bd6:	2300      	movs	r3, #0
 8028bd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8028bda:	e00d      	b.n	8028bf8 <__sflush_r+0xb8>
 8028bdc:	2301      	movs	r3, #1
 8028bde:	0028      	movs	r0, r5
 8028be0:	47b8      	blx	r7
 8028be2:	0002      	movs	r2, r0
 8028be4:	1c43      	adds	r3, r0, #1
 8028be6:	d1c6      	bne.n	8028b76 <__sflush_r+0x36>
 8028be8:	682b      	ldr	r3, [r5, #0]
 8028bea:	2b00      	cmp	r3, #0
 8028bec:	d0c3      	beq.n	8028b76 <__sflush_r+0x36>
 8028bee:	2b1d      	cmp	r3, #29
 8028bf0:	d001      	beq.n	8028bf6 <__sflush_r+0xb6>
 8028bf2:	2b16      	cmp	r3, #22
 8028bf4:	d11a      	bne.n	8028c2c <__sflush_r+0xec>
 8028bf6:	602e      	str	r6, [r5, #0]
 8028bf8:	2000      	movs	r0, #0
 8028bfa:	e01e      	b.n	8028c3a <__sflush_r+0xfa>
 8028bfc:	690e      	ldr	r6, [r1, #16]
 8028bfe:	2e00      	cmp	r6, #0
 8028c00:	d0fa      	beq.n	8028bf8 <__sflush_r+0xb8>
 8028c02:	680f      	ldr	r7, [r1, #0]
 8028c04:	600e      	str	r6, [r1, #0]
 8028c06:	1bba      	subs	r2, r7, r6
 8028c08:	9201      	str	r2, [sp, #4]
 8028c0a:	2200      	movs	r2, #0
 8028c0c:	079b      	lsls	r3, r3, #30
 8028c0e:	d100      	bne.n	8028c12 <__sflush_r+0xd2>
 8028c10:	694a      	ldr	r2, [r1, #20]
 8028c12:	60a2      	str	r2, [r4, #8]
 8028c14:	9b01      	ldr	r3, [sp, #4]
 8028c16:	2b00      	cmp	r3, #0
 8028c18:	ddee      	ble.n	8028bf8 <__sflush_r+0xb8>
 8028c1a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028c1c:	0032      	movs	r2, r6
 8028c1e:	001f      	movs	r7, r3
 8028c20:	0028      	movs	r0, r5
 8028c22:	9b01      	ldr	r3, [sp, #4]
 8028c24:	6a21      	ldr	r1, [r4, #32]
 8028c26:	47b8      	blx	r7
 8028c28:	2800      	cmp	r0, #0
 8028c2a:	dc07      	bgt.n	8028c3c <__sflush_r+0xfc>
 8028c2c:	89a2      	ldrh	r2, [r4, #12]
 8028c2e:	2340      	movs	r3, #64	@ 0x40
 8028c30:	2001      	movs	r0, #1
 8028c32:	4313      	orrs	r3, r2
 8028c34:	b21b      	sxth	r3, r3
 8028c36:	81a3      	strh	r3, [r4, #12]
 8028c38:	4240      	negs	r0, r0
 8028c3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028c3c:	9b01      	ldr	r3, [sp, #4]
 8028c3e:	1836      	adds	r6, r6, r0
 8028c40:	1a1b      	subs	r3, r3, r0
 8028c42:	9301      	str	r3, [sp, #4]
 8028c44:	e7e6      	b.n	8028c14 <__sflush_r+0xd4>
 8028c46:	46c0      	nop			@ (mov r8, r8)
 8028c48:	20400001 	.word	0x20400001

08028c4c <_fflush_r>:
 8028c4c:	690b      	ldr	r3, [r1, #16]
 8028c4e:	b570      	push	{r4, r5, r6, lr}
 8028c50:	0005      	movs	r5, r0
 8028c52:	000c      	movs	r4, r1
 8028c54:	2b00      	cmp	r3, #0
 8028c56:	d102      	bne.n	8028c5e <_fflush_r+0x12>
 8028c58:	2500      	movs	r5, #0
 8028c5a:	0028      	movs	r0, r5
 8028c5c:	bd70      	pop	{r4, r5, r6, pc}
 8028c5e:	2800      	cmp	r0, #0
 8028c60:	d004      	beq.n	8028c6c <_fflush_r+0x20>
 8028c62:	6a03      	ldr	r3, [r0, #32]
 8028c64:	2b00      	cmp	r3, #0
 8028c66:	d101      	bne.n	8028c6c <_fflush_r+0x20>
 8028c68:	f7fd fa38 	bl	80260dc <__sinit>
 8028c6c:	220c      	movs	r2, #12
 8028c6e:	5ea3      	ldrsh	r3, [r4, r2]
 8028c70:	2b00      	cmp	r3, #0
 8028c72:	d0f1      	beq.n	8028c58 <_fflush_r+0xc>
 8028c74:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028c76:	07d2      	lsls	r2, r2, #31
 8028c78:	d404      	bmi.n	8028c84 <_fflush_r+0x38>
 8028c7a:	059b      	lsls	r3, r3, #22
 8028c7c:	d402      	bmi.n	8028c84 <_fflush_r+0x38>
 8028c7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028c80:	f7fd fce7 	bl	8026652 <__retarget_lock_acquire_recursive>
 8028c84:	0028      	movs	r0, r5
 8028c86:	0021      	movs	r1, r4
 8028c88:	f7ff ff5a 	bl	8028b40 <__sflush_r>
 8028c8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028c8e:	0005      	movs	r5, r0
 8028c90:	07db      	lsls	r3, r3, #31
 8028c92:	d4e2      	bmi.n	8028c5a <_fflush_r+0xe>
 8028c94:	89a3      	ldrh	r3, [r4, #12]
 8028c96:	059b      	lsls	r3, r3, #22
 8028c98:	d4df      	bmi.n	8028c5a <_fflush_r+0xe>
 8028c9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028c9c:	f7fd fcda 	bl	8026654 <__retarget_lock_release_recursive>
 8028ca0:	e7db      	b.n	8028c5a <_fflush_r+0xe>
	...

08028ca4 <__swhatbuf_r>:
 8028ca4:	b570      	push	{r4, r5, r6, lr}
 8028ca6:	000e      	movs	r6, r1
 8028ca8:	001d      	movs	r5, r3
 8028caa:	230e      	movs	r3, #14
 8028cac:	5ec9      	ldrsh	r1, [r1, r3]
 8028cae:	0014      	movs	r4, r2
 8028cb0:	b096      	sub	sp, #88	@ 0x58
 8028cb2:	2900      	cmp	r1, #0
 8028cb4:	da0c      	bge.n	8028cd0 <__swhatbuf_r+0x2c>
 8028cb6:	89b2      	ldrh	r2, [r6, #12]
 8028cb8:	2380      	movs	r3, #128	@ 0x80
 8028cba:	0011      	movs	r1, r2
 8028cbc:	4019      	ands	r1, r3
 8028cbe:	421a      	tst	r2, r3
 8028cc0:	d114      	bne.n	8028cec <__swhatbuf_r+0x48>
 8028cc2:	2380      	movs	r3, #128	@ 0x80
 8028cc4:	00db      	lsls	r3, r3, #3
 8028cc6:	2000      	movs	r0, #0
 8028cc8:	6029      	str	r1, [r5, #0]
 8028cca:	6023      	str	r3, [r4, #0]
 8028ccc:	b016      	add	sp, #88	@ 0x58
 8028cce:	bd70      	pop	{r4, r5, r6, pc}
 8028cd0:	466a      	mov	r2, sp
 8028cd2:	f000 f865 	bl	8028da0 <_fstat_r>
 8028cd6:	2800      	cmp	r0, #0
 8028cd8:	dbed      	blt.n	8028cb6 <__swhatbuf_r+0x12>
 8028cda:	23f0      	movs	r3, #240	@ 0xf0
 8028cdc:	9901      	ldr	r1, [sp, #4]
 8028cde:	021b      	lsls	r3, r3, #8
 8028ce0:	4019      	ands	r1, r3
 8028ce2:	4b04      	ldr	r3, [pc, #16]	@ (8028cf4 <__swhatbuf_r+0x50>)
 8028ce4:	18c9      	adds	r1, r1, r3
 8028ce6:	424b      	negs	r3, r1
 8028ce8:	4159      	adcs	r1, r3
 8028cea:	e7ea      	b.n	8028cc2 <__swhatbuf_r+0x1e>
 8028cec:	2100      	movs	r1, #0
 8028cee:	2340      	movs	r3, #64	@ 0x40
 8028cf0:	e7e9      	b.n	8028cc6 <__swhatbuf_r+0x22>
 8028cf2:	46c0      	nop			@ (mov r8, r8)
 8028cf4:	ffffe000 	.word	0xffffe000

08028cf8 <__smakebuf_r>:
 8028cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028cfa:	2602      	movs	r6, #2
 8028cfc:	898b      	ldrh	r3, [r1, #12]
 8028cfe:	0005      	movs	r5, r0
 8028d00:	000c      	movs	r4, r1
 8028d02:	b085      	sub	sp, #20
 8028d04:	4233      	tst	r3, r6
 8028d06:	d007      	beq.n	8028d18 <__smakebuf_r+0x20>
 8028d08:	0023      	movs	r3, r4
 8028d0a:	3347      	adds	r3, #71	@ 0x47
 8028d0c:	6023      	str	r3, [r4, #0]
 8028d0e:	6123      	str	r3, [r4, #16]
 8028d10:	2301      	movs	r3, #1
 8028d12:	6163      	str	r3, [r4, #20]
 8028d14:	b005      	add	sp, #20
 8028d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028d18:	ab03      	add	r3, sp, #12
 8028d1a:	aa02      	add	r2, sp, #8
 8028d1c:	f7ff ffc2 	bl	8028ca4 <__swhatbuf_r>
 8028d20:	9f02      	ldr	r7, [sp, #8]
 8028d22:	9001      	str	r0, [sp, #4]
 8028d24:	0039      	movs	r1, r7
 8028d26:	0028      	movs	r0, r5
 8028d28:	f7fe fef6 	bl	8027b18 <_malloc_r>
 8028d2c:	2800      	cmp	r0, #0
 8028d2e:	d108      	bne.n	8028d42 <__smakebuf_r+0x4a>
 8028d30:	220c      	movs	r2, #12
 8028d32:	5ea3      	ldrsh	r3, [r4, r2]
 8028d34:	059a      	lsls	r2, r3, #22
 8028d36:	d4ed      	bmi.n	8028d14 <__smakebuf_r+0x1c>
 8028d38:	2203      	movs	r2, #3
 8028d3a:	4393      	bics	r3, r2
 8028d3c:	431e      	orrs	r6, r3
 8028d3e:	81a6      	strh	r6, [r4, #12]
 8028d40:	e7e2      	b.n	8028d08 <__smakebuf_r+0x10>
 8028d42:	2380      	movs	r3, #128	@ 0x80
 8028d44:	89a2      	ldrh	r2, [r4, #12]
 8028d46:	6020      	str	r0, [r4, #0]
 8028d48:	4313      	orrs	r3, r2
 8028d4a:	81a3      	strh	r3, [r4, #12]
 8028d4c:	9b03      	ldr	r3, [sp, #12]
 8028d4e:	6120      	str	r0, [r4, #16]
 8028d50:	6167      	str	r7, [r4, #20]
 8028d52:	2b00      	cmp	r3, #0
 8028d54:	d00c      	beq.n	8028d70 <__smakebuf_r+0x78>
 8028d56:	0028      	movs	r0, r5
 8028d58:	230e      	movs	r3, #14
 8028d5a:	5ee1      	ldrsh	r1, [r4, r3]
 8028d5c:	f000 f832 	bl	8028dc4 <_isatty_r>
 8028d60:	2800      	cmp	r0, #0
 8028d62:	d005      	beq.n	8028d70 <__smakebuf_r+0x78>
 8028d64:	2303      	movs	r3, #3
 8028d66:	89a2      	ldrh	r2, [r4, #12]
 8028d68:	439a      	bics	r2, r3
 8028d6a:	3b02      	subs	r3, #2
 8028d6c:	4313      	orrs	r3, r2
 8028d6e:	81a3      	strh	r3, [r4, #12]
 8028d70:	89a3      	ldrh	r3, [r4, #12]
 8028d72:	9a01      	ldr	r2, [sp, #4]
 8028d74:	4313      	orrs	r3, r2
 8028d76:	81a3      	strh	r3, [r4, #12]
 8028d78:	e7cc      	b.n	8028d14 <__smakebuf_r+0x1c>

08028d7a <memmove>:
 8028d7a:	b510      	push	{r4, lr}
 8028d7c:	4288      	cmp	r0, r1
 8028d7e:	d902      	bls.n	8028d86 <memmove+0xc>
 8028d80:	188b      	adds	r3, r1, r2
 8028d82:	4298      	cmp	r0, r3
 8028d84:	d308      	bcc.n	8028d98 <memmove+0x1e>
 8028d86:	2300      	movs	r3, #0
 8028d88:	429a      	cmp	r2, r3
 8028d8a:	d007      	beq.n	8028d9c <memmove+0x22>
 8028d8c:	5ccc      	ldrb	r4, [r1, r3]
 8028d8e:	54c4      	strb	r4, [r0, r3]
 8028d90:	3301      	adds	r3, #1
 8028d92:	e7f9      	b.n	8028d88 <memmove+0xe>
 8028d94:	5c8b      	ldrb	r3, [r1, r2]
 8028d96:	5483      	strb	r3, [r0, r2]
 8028d98:	3a01      	subs	r2, #1
 8028d9a:	d2fb      	bcs.n	8028d94 <memmove+0x1a>
 8028d9c:	bd10      	pop	{r4, pc}
	...

08028da0 <_fstat_r>:
 8028da0:	2300      	movs	r3, #0
 8028da2:	b570      	push	{r4, r5, r6, lr}
 8028da4:	4d06      	ldr	r5, [pc, #24]	@ (8028dc0 <_fstat_r+0x20>)
 8028da6:	0004      	movs	r4, r0
 8028da8:	0008      	movs	r0, r1
 8028daa:	0011      	movs	r1, r2
 8028dac:	602b      	str	r3, [r5, #0]
 8028dae:	f7ea fbbb 	bl	8013528 <_fstat>
 8028db2:	1c43      	adds	r3, r0, #1
 8028db4:	d103      	bne.n	8028dbe <_fstat_r+0x1e>
 8028db6:	682b      	ldr	r3, [r5, #0]
 8028db8:	2b00      	cmp	r3, #0
 8028dba:	d000      	beq.n	8028dbe <_fstat_r+0x1e>
 8028dbc:	6023      	str	r3, [r4, #0]
 8028dbe:	bd70      	pop	{r4, r5, r6, pc}
 8028dc0:	2000390c 	.word	0x2000390c

08028dc4 <_isatty_r>:
 8028dc4:	2300      	movs	r3, #0
 8028dc6:	b570      	push	{r4, r5, r6, lr}
 8028dc8:	4d06      	ldr	r5, [pc, #24]	@ (8028de4 <_isatty_r+0x20>)
 8028dca:	0004      	movs	r4, r0
 8028dcc:	0008      	movs	r0, r1
 8028dce:	602b      	str	r3, [r5, #0]
 8028dd0:	f7ea fbb8 	bl	8013544 <_isatty>
 8028dd4:	1c43      	adds	r3, r0, #1
 8028dd6:	d103      	bne.n	8028de0 <_isatty_r+0x1c>
 8028dd8:	682b      	ldr	r3, [r5, #0]
 8028dda:	2b00      	cmp	r3, #0
 8028ddc:	d000      	beq.n	8028de0 <_isatty_r+0x1c>
 8028dde:	6023      	str	r3, [r4, #0]
 8028de0:	bd70      	pop	{r4, r5, r6, pc}
 8028de2:	46c0      	nop			@ (mov r8, r8)
 8028de4:	2000390c 	.word	0x2000390c

08028de8 <_sbrk_r>:
 8028de8:	2300      	movs	r3, #0
 8028dea:	b570      	push	{r4, r5, r6, lr}
 8028dec:	4d06      	ldr	r5, [pc, #24]	@ (8028e08 <_sbrk_r+0x20>)
 8028dee:	0004      	movs	r4, r0
 8028df0:	0008      	movs	r0, r1
 8028df2:	602b      	str	r3, [r5, #0]
 8028df4:	f7ea fbba 	bl	801356c <_sbrk>
 8028df8:	1c43      	adds	r3, r0, #1
 8028dfa:	d103      	bne.n	8028e04 <_sbrk_r+0x1c>
 8028dfc:	682b      	ldr	r3, [r5, #0]
 8028dfe:	2b00      	cmp	r3, #0
 8028e00:	d000      	beq.n	8028e04 <_sbrk_r+0x1c>
 8028e02:	6023      	str	r3, [r4, #0]
 8028e04:	bd70      	pop	{r4, r5, r6, pc}
 8028e06:	46c0      	nop			@ (mov r8, r8)
 8028e08:	2000390c 	.word	0x2000390c

08028e0c <__assert_func>:
 8028e0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028e0e:	0014      	movs	r4, r2
 8028e10:	001a      	movs	r2, r3
 8028e12:	4b09      	ldr	r3, [pc, #36]	@ (8028e38 <__assert_func+0x2c>)
 8028e14:	0005      	movs	r5, r0
 8028e16:	681b      	ldr	r3, [r3, #0]
 8028e18:	000e      	movs	r6, r1
 8028e1a:	68d8      	ldr	r0, [r3, #12]
 8028e1c:	4b07      	ldr	r3, [pc, #28]	@ (8028e3c <__assert_func+0x30>)
 8028e1e:	2c00      	cmp	r4, #0
 8028e20:	d101      	bne.n	8028e26 <__assert_func+0x1a>
 8028e22:	4b07      	ldr	r3, [pc, #28]	@ (8028e40 <__assert_func+0x34>)
 8028e24:	001c      	movs	r4, r3
 8028e26:	4907      	ldr	r1, [pc, #28]	@ (8028e44 <__assert_func+0x38>)
 8028e28:	9301      	str	r3, [sp, #4]
 8028e2a:	9402      	str	r4, [sp, #8]
 8028e2c:	002b      	movs	r3, r5
 8028e2e:	9600      	str	r6, [sp, #0]
 8028e30:	f000 f868 	bl	8028f04 <fiprintf>
 8028e34:	f000 f876 	bl	8028f24 <abort>
 8028e38:	200003ec 	.word	0x200003ec
 8028e3c:	0802eb29 	.word	0x0802eb29
 8028e40:	0802eb64 	.word	0x0802eb64
 8028e44:	0802eb36 	.word	0x0802eb36

08028e48 <_calloc_r>:
 8028e48:	b570      	push	{r4, r5, r6, lr}
 8028e4a:	0c0b      	lsrs	r3, r1, #16
 8028e4c:	0c15      	lsrs	r5, r2, #16
 8028e4e:	2b00      	cmp	r3, #0
 8028e50:	d11e      	bne.n	8028e90 <_calloc_r+0x48>
 8028e52:	2d00      	cmp	r5, #0
 8028e54:	d10c      	bne.n	8028e70 <_calloc_r+0x28>
 8028e56:	b289      	uxth	r1, r1
 8028e58:	b294      	uxth	r4, r2
 8028e5a:	434c      	muls	r4, r1
 8028e5c:	0021      	movs	r1, r4
 8028e5e:	f7fe fe5b 	bl	8027b18 <_malloc_r>
 8028e62:	1e05      	subs	r5, r0, #0
 8028e64:	d01b      	beq.n	8028e9e <_calloc_r+0x56>
 8028e66:	0022      	movs	r2, r4
 8028e68:	2100      	movs	r1, #0
 8028e6a:	f7fd fb23 	bl	80264b4 <memset>
 8028e6e:	e016      	b.n	8028e9e <_calloc_r+0x56>
 8028e70:	1c2b      	adds	r3, r5, #0
 8028e72:	1c0c      	adds	r4, r1, #0
 8028e74:	b289      	uxth	r1, r1
 8028e76:	b292      	uxth	r2, r2
 8028e78:	434a      	muls	r2, r1
 8028e7a:	b29b      	uxth	r3, r3
 8028e7c:	b2a1      	uxth	r1, r4
 8028e7e:	4359      	muls	r1, r3
 8028e80:	0c14      	lsrs	r4, r2, #16
 8028e82:	190c      	adds	r4, r1, r4
 8028e84:	0c23      	lsrs	r3, r4, #16
 8028e86:	d107      	bne.n	8028e98 <_calloc_r+0x50>
 8028e88:	0424      	lsls	r4, r4, #16
 8028e8a:	b292      	uxth	r2, r2
 8028e8c:	4314      	orrs	r4, r2
 8028e8e:	e7e5      	b.n	8028e5c <_calloc_r+0x14>
 8028e90:	2d00      	cmp	r5, #0
 8028e92:	d101      	bne.n	8028e98 <_calloc_r+0x50>
 8028e94:	1c14      	adds	r4, r2, #0
 8028e96:	e7ed      	b.n	8028e74 <_calloc_r+0x2c>
 8028e98:	230c      	movs	r3, #12
 8028e9a:	2500      	movs	r5, #0
 8028e9c:	6003      	str	r3, [r0, #0]
 8028e9e:	0028      	movs	r0, r5
 8028ea0:	bd70      	pop	{r4, r5, r6, pc}

08028ea2 <_realloc_r>:
 8028ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028ea4:	0006      	movs	r6, r0
 8028ea6:	000c      	movs	r4, r1
 8028ea8:	0015      	movs	r5, r2
 8028eaa:	2900      	cmp	r1, #0
 8028eac:	d105      	bne.n	8028eba <_realloc_r+0x18>
 8028eae:	0011      	movs	r1, r2
 8028eb0:	f7fe fe32 	bl	8027b18 <_malloc_r>
 8028eb4:	0004      	movs	r4, r0
 8028eb6:	0020      	movs	r0, r4
 8028eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028eba:	2a00      	cmp	r2, #0
 8028ebc:	d103      	bne.n	8028ec6 <_realloc_r+0x24>
 8028ebe:	f7fe fa5b 	bl	8027378 <_free_r>
 8028ec2:	002c      	movs	r4, r5
 8028ec4:	e7f7      	b.n	8028eb6 <_realloc_r+0x14>
 8028ec6:	f000 f834 	bl	8028f32 <_malloc_usable_size_r>
 8028eca:	0007      	movs	r7, r0
 8028ecc:	4285      	cmp	r5, r0
 8028ece:	d802      	bhi.n	8028ed6 <_realloc_r+0x34>
 8028ed0:	0843      	lsrs	r3, r0, #1
 8028ed2:	42ab      	cmp	r3, r5
 8028ed4:	d3ef      	bcc.n	8028eb6 <_realloc_r+0x14>
 8028ed6:	0029      	movs	r1, r5
 8028ed8:	0030      	movs	r0, r6
 8028eda:	f7fe fe1d 	bl	8027b18 <_malloc_r>
 8028ede:	9001      	str	r0, [sp, #4]
 8028ee0:	2800      	cmp	r0, #0
 8028ee2:	d101      	bne.n	8028ee8 <_realloc_r+0x46>
 8028ee4:	9c01      	ldr	r4, [sp, #4]
 8028ee6:	e7e6      	b.n	8028eb6 <_realloc_r+0x14>
 8028ee8:	002a      	movs	r2, r5
 8028eea:	42bd      	cmp	r5, r7
 8028eec:	d900      	bls.n	8028ef0 <_realloc_r+0x4e>
 8028eee:	003a      	movs	r2, r7
 8028ef0:	0021      	movs	r1, r4
 8028ef2:	9801      	ldr	r0, [sp, #4]
 8028ef4:	f7fd fbba 	bl	802666c <memcpy>
 8028ef8:	0021      	movs	r1, r4
 8028efa:	0030      	movs	r0, r6
 8028efc:	f7fe fa3c 	bl	8027378 <_free_r>
 8028f00:	e7f0      	b.n	8028ee4 <_realloc_r+0x42>
	...

08028f04 <fiprintf>:
 8028f04:	b40e      	push	{r1, r2, r3}
 8028f06:	b517      	push	{r0, r1, r2, r4, lr}
 8028f08:	4c05      	ldr	r4, [pc, #20]	@ (8028f20 <fiprintf+0x1c>)
 8028f0a:	ab05      	add	r3, sp, #20
 8028f0c:	cb04      	ldmia	r3!, {r2}
 8028f0e:	0001      	movs	r1, r0
 8028f10:	6820      	ldr	r0, [r4, #0]
 8028f12:	9301      	str	r3, [sp, #4]
 8028f14:	f7ff fcf8 	bl	8028908 <_vfiprintf_r>
 8028f18:	bc1e      	pop	{r1, r2, r3, r4}
 8028f1a:	bc08      	pop	{r3}
 8028f1c:	b003      	add	sp, #12
 8028f1e:	4718      	bx	r3
 8028f20:	200003ec 	.word	0x200003ec

08028f24 <abort>:
 8028f24:	2006      	movs	r0, #6
 8028f26:	b510      	push	{r4, lr}
 8028f28:	f000 f834 	bl	8028f94 <raise>
 8028f2c:	2001      	movs	r0, #1
 8028f2e:	f7ea fac7 	bl	80134c0 <_exit>

08028f32 <_malloc_usable_size_r>:
 8028f32:	1f0b      	subs	r3, r1, #4
 8028f34:	681b      	ldr	r3, [r3, #0]
 8028f36:	1f18      	subs	r0, r3, #4
 8028f38:	2b00      	cmp	r3, #0
 8028f3a:	da01      	bge.n	8028f40 <_malloc_usable_size_r+0xe>
 8028f3c:	580b      	ldr	r3, [r1, r0]
 8028f3e:	18c0      	adds	r0, r0, r3
 8028f40:	4770      	bx	lr

08028f42 <_raise_r>:
 8028f42:	b570      	push	{r4, r5, r6, lr}
 8028f44:	0004      	movs	r4, r0
 8028f46:	000d      	movs	r5, r1
 8028f48:	291f      	cmp	r1, #31
 8028f4a:	d904      	bls.n	8028f56 <_raise_r+0x14>
 8028f4c:	2316      	movs	r3, #22
 8028f4e:	6003      	str	r3, [r0, #0]
 8028f50:	2001      	movs	r0, #1
 8028f52:	4240      	negs	r0, r0
 8028f54:	bd70      	pop	{r4, r5, r6, pc}
 8028f56:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8028f58:	2b00      	cmp	r3, #0
 8028f5a:	d004      	beq.n	8028f66 <_raise_r+0x24>
 8028f5c:	008a      	lsls	r2, r1, #2
 8028f5e:	189b      	adds	r3, r3, r2
 8028f60:	681a      	ldr	r2, [r3, #0]
 8028f62:	2a00      	cmp	r2, #0
 8028f64:	d108      	bne.n	8028f78 <_raise_r+0x36>
 8028f66:	0020      	movs	r0, r4
 8028f68:	f000 f830 	bl	8028fcc <_getpid_r>
 8028f6c:	002a      	movs	r2, r5
 8028f6e:	0001      	movs	r1, r0
 8028f70:	0020      	movs	r0, r4
 8028f72:	f000 f819 	bl	8028fa8 <_kill_r>
 8028f76:	e7ed      	b.n	8028f54 <_raise_r+0x12>
 8028f78:	2a01      	cmp	r2, #1
 8028f7a:	d009      	beq.n	8028f90 <_raise_r+0x4e>
 8028f7c:	1c51      	adds	r1, r2, #1
 8028f7e:	d103      	bne.n	8028f88 <_raise_r+0x46>
 8028f80:	2316      	movs	r3, #22
 8028f82:	6003      	str	r3, [r0, #0]
 8028f84:	2001      	movs	r0, #1
 8028f86:	e7e5      	b.n	8028f54 <_raise_r+0x12>
 8028f88:	2100      	movs	r1, #0
 8028f8a:	0028      	movs	r0, r5
 8028f8c:	6019      	str	r1, [r3, #0]
 8028f8e:	4790      	blx	r2
 8028f90:	2000      	movs	r0, #0
 8028f92:	e7df      	b.n	8028f54 <_raise_r+0x12>

08028f94 <raise>:
 8028f94:	b510      	push	{r4, lr}
 8028f96:	4b03      	ldr	r3, [pc, #12]	@ (8028fa4 <raise+0x10>)
 8028f98:	0001      	movs	r1, r0
 8028f9a:	6818      	ldr	r0, [r3, #0]
 8028f9c:	f7ff ffd1 	bl	8028f42 <_raise_r>
 8028fa0:	bd10      	pop	{r4, pc}
 8028fa2:	46c0      	nop			@ (mov r8, r8)
 8028fa4:	200003ec 	.word	0x200003ec

08028fa8 <_kill_r>:
 8028fa8:	2300      	movs	r3, #0
 8028faa:	b570      	push	{r4, r5, r6, lr}
 8028fac:	4d06      	ldr	r5, [pc, #24]	@ (8028fc8 <_kill_r+0x20>)
 8028fae:	0004      	movs	r4, r0
 8028fb0:	0008      	movs	r0, r1
 8028fb2:	0011      	movs	r1, r2
 8028fb4:	602b      	str	r3, [r5, #0]
 8028fb6:	f7ea fa73 	bl	80134a0 <_kill>
 8028fba:	1c43      	adds	r3, r0, #1
 8028fbc:	d103      	bne.n	8028fc6 <_kill_r+0x1e>
 8028fbe:	682b      	ldr	r3, [r5, #0]
 8028fc0:	2b00      	cmp	r3, #0
 8028fc2:	d000      	beq.n	8028fc6 <_kill_r+0x1e>
 8028fc4:	6023      	str	r3, [r4, #0]
 8028fc6:	bd70      	pop	{r4, r5, r6, pc}
 8028fc8:	2000390c 	.word	0x2000390c

08028fcc <_getpid_r>:
 8028fcc:	b510      	push	{r4, lr}
 8028fce:	f7ea fa61 	bl	8013494 <_getpid>
 8028fd2:	bd10      	pop	{r4, pc}

08028fd4 <log>:
 8028fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028fd6:	0004      	movs	r4, r0
 8028fd8:	000d      	movs	r5, r1
 8028fda:	f000 f98d 	bl	80292f8 <__ieee754_log>
 8028fde:	0022      	movs	r2, r4
 8028fe0:	0006      	movs	r6, r0
 8028fe2:	000f      	movs	r7, r1
 8028fe4:	002b      	movs	r3, r5
 8028fe6:	0020      	movs	r0, r4
 8028fe8:	0029      	movs	r1, r5
 8028fea:	f7da fba3 	bl	8003734 <__aeabi_dcmpun>
 8028fee:	2800      	cmp	r0, #0
 8028ff0:	d115      	bne.n	802901e <log+0x4a>
 8028ff2:	2200      	movs	r2, #0
 8028ff4:	2300      	movs	r3, #0
 8028ff6:	0020      	movs	r0, r4
 8028ff8:	0029      	movs	r1, r5
 8028ffa:	f7d7 fa73 	bl	80004e4 <__aeabi_dcmpgt>
 8028ffe:	2800      	cmp	r0, #0
 8029000:	d10d      	bne.n	802901e <log+0x4a>
 8029002:	2200      	movs	r2, #0
 8029004:	2300      	movs	r3, #0
 8029006:	0020      	movs	r0, r4
 8029008:	0029      	movs	r1, r5
 802900a:	f7d7 fa51 	bl	80004b0 <__aeabi_dcmpeq>
 802900e:	2800      	cmp	r0, #0
 8029010:	d008      	beq.n	8029024 <log+0x50>
 8029012:	f7fd faf3 	bl	80265fc <__errno>
 8029016:	2322      	movs	r3, #34	@ 0x22
 8029018:	2600      	movs	r6, #0
 802901a:	4f07      	ldr	r7, [pc, #28]	@ (8029038 <log+0x64>)
 802901c:	6003      	str	r3, [r0, #0]
 802901e:	0030      	movs	r0, r6
 8029020:	0039      	movs	r1, r7
 8029022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029024:	f7fd faea 	bl	80265fc <__errno>
 8029028:	2321      	movs	r3, #33	@ 0x21
 802902a:	6003      	str	r3, [r0, #0]
 802902c:	4803      	ldr	r0, [pc, #12]	@ (802903c <log+0x68>)
 802902e:	f7fd fb27 	bl	8026680 <nan>
 8029032:	0006      	movs	r6, r0
 8029034:	000f      	movs	r7, r1
 8029036:	e7f2      	b.n	802901e <log+0x4a>
 8029038:	fff00000 	.word	0xfff00000
 802903c:	0802eb64 	.word	0x0802eb64

08029040 <pow>:
 8029040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029042:	0014      	movs	r4, r2
 8029044:	001d      	movs	r5, r3
 8029046:	9000      	str	r0, [sp, #0]
 8029048:	9101      	str	r1, [sp, #4]
 802904a:	f000 fb07 	bl	802965c <__ieee754_pow>
 802904e:	0022      	movs	r2, r4
 8029050:	0006      	movs	r6, r0
 8029052:	000f      	movs	r7, r1
 8029054:	002b      	movs	r3, r5
 8029056:	0020      	movs	r0, r4
 8029058:	0029      	movs	r1, r5
 802905a:	f7da fb6b 	bl	8003734 <__aeabi_dcmpun>
 802905e:	2800      	cmp	r0, #0
 8029060:	d13f      	bne.n	80290e2 <pow+0xa2>
 8029062:	9800      	ldr	r0, [sp, #0]
 8029064:	9901      	ldr	r1, [sp, #4]
 8029066:	2200      	movs	r2, #0
 8029068:	2300      	movs	r3, #0
 802906a:	f7d7 fa21 	bl	80004b0 <__aeabi_dcmpeq>
 802906e:	2800      	cmp	r0, #0
 8029070:	d019      	beq.n	80290a6 <pow+0x66>
 8029072:	2200      	movs	r2, #0
 8029074:	2300      	movs	r3, #0
 8029076:	0020      	movs	r0, r4
 8029078:	0029      	movs	r1, r5
 802907a:	f7d7 fa19 	bl	80004b0 <__aeabi_dcmpeq>
 802907e:	2800      	cmp	r0, #0
 8029080:	d146      	bne.n	8029110 <pow+0xd0>
 8029082:	0020      	movs	r0, r4
 8029084:	0029      	movs	r1, r5
 8029086:	f000 f88d 	bl	80291a4 <finite>
 802908a:	2800      	cmp	r0, #0
 802908c:	d029      	beq.n	80290e2 <pow+0xa2>
 802908e:	2200      	movs	r2, #0
 8029090:	2300      	movs	r3, #0
 8029092:	0020      	movs	r0, r4
 8029094:	0029      	movs	r1, r5
 8029096:	f7d7 fa11 	bl	80004bc <__aeabi_dcmplt>
 802909a:	2800      	cmp	r0, #0
 802909c:	d021      	beq.n	80290e2 <pow+0xa2>
 802909e:	f7fd faad 	bl	80265fc <__errno>
 80290a2:	2322      	movs	r3, #34	@ 0x22
 80290a4:	e01c      	b.n	80290e0 <pow+0xa0>
 80290a6:	0030      	movs	r0, r6
 80290a8:	0039      	movs	r1, r7
 80290aa:	f000 f87b 	bl	80291a4 <finite>
 80290ae:	2800      	cmp	r0, #0
 80290b0:	d11b      	bne.n	80290ea <pow+0xaa>
 80290b2:	9800      	ldr	r0, [sp, #0]
 80290b4:	9901      	ldr	r1, [sp, #4]
 80290b6:	f000 f875 	bl	80291a4 <finite>
 80290ba:	2800      	cmp	r0, #0
 80290bc:	d015      	beq.n	80290ea <pow+0xaa>
 80290be:	0020      	movs	r0, r4
 80290c0:	0029      	movs	r1, r5
 80290c2:	f000 f86f 	bl	80291a4 <finite>
 80290c6:	2800      	cmp	r0, #0
 80290c8:	d00f      	beq.n	80290ea <pow+0xaa>
 80290ca:	0032      	movs	r2, r6
 80290cc:	003b      	movs	r3, r7
 80290ce:	0030      	movs	r0, r6
 80290d0:	0039      	movs	r1, r7
 80290d2:	f7da fb2f 	bl	8003734 <__aeabi_dcmpun>
 80290d6:	2800      	cmp	r0, #0
 80290d8:	d0e1      	beq.n	802909e <pow+0x5e>
 80290da:	f7fd fa8f 	bl	80265fc <__errno>
 80290de:	2321      	movs	r3, #33	@ 0x21
 80290e0:	6003      	str	r3, [r0, #0]
 80290e2:	0030      	movs	r0, r6
 80290e4:	0039      	movs	r1, r7
 80290e6:	b003      	add	sp, #12
 80290e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80290ea:	2200      	movs	r2, #0
 80290ec:	2300      	movs	r3, #0
 80290ee:	0030      	movs	r0, r6
 80290f0:	0039      	movs	r1, r7
 80290f2:	f7d7 f9dd 	bl	80004b0 <__aeabi_dcmpeq>
 80290f6:	2800      	cmp	r0, #0
 80290f8:	d0f3      	beq.n	80290e2 <pow+0xa2>
 80290fa:	9800      	ldr	r0, [sp, #0]
 80290fc:	9901      	ldr	r1, [sp, #4]
 80290fe:	f000 f851 	bl	80291a4 <finite>
 8029102:	2800      	cmp	r0, #0
 8029104:	d0ed      	beq.n	80290e2 <pow+0xa2>
 8029106:	0020      	movs	r0, r4
 8029108:	0029      	movs	r1, r5
 802910a:	f000 f84b 	bl	80291a4 <finite>
 802910e:	e7c4      	b.n	802909a <pow+0x5a>
 8029110:	2600      	movs	r6, #0
 8029112:	4f01      	ldr	r7, [pc, #4]	@ (8029118 <pow+0xd8>)
 8029114:	e7e5      	b.n	80290e2 <pow+0xa2>
 8029116:	46c0      	nop			@ (mov r8, r8)
 8029118:	3ff00000 	.word	0x3ff00000

0802911c <expf>:
 802911c:	b570      	push	{r4, r5, r6, lr}
 802911e:	1c04      	adds	r4, r0, #0
 8029120:	f000 ffb8 	bl	802a094 <__ieee754_expf>
 8029124:	1c05      	adds	r5, r0, #0
 8029126:	1c20      	adds	r0, r4, #0
 8029128:	f000 f844 	bl	80291b4 <finitef>
 802912c:	2800      	cmp	r0, #0
 802912e:	d00b      	beq.n	8029148 <expf+0x2c>
 8029130:	490c      	ldr	r1, [pc, #48]	@ (8029164 <expf+0x48>)
 8029132:	1c20      	adds	r0, r4, #0
 8029134:	f7d7 fa10 	bl	8000558 <__aeabi_fcmpgt>
 8029138:	2800      	cmp	r0, #0
 802913a:	d007      	beq.n	802914c <expf+0x30>
 802913c:	f7fd fa5e 	bl	80265fc <__errno>
 8029140:	25ff      	movs	r5, #255	@ 0xff
 8029142:	2322      	movs	r3, #34	@ 0x22
 8029144:	05ed      	lsls	r5, r5, #23
 8029146:	6003      	str	r3, [r0, #0]
 8029148:	1c28      	adds	r0, r5, #0
 802914a:	bd70      	pop	{r4, r5, r6, pc}
 802914c:	4906      	ldr	r1, [pc, #24]	@ (8029168 <expf+0x4c>)
 802914e:	1c20      	adds	r0, r4, #0
 8029150:	f7d7 f9ee 	bl	8000530 <__aeabi_fcmplt>
 8029154:	2800      	cmp	r0, #0
 8029156:	d0f7      	beq.n	8029148 <expf+0x2c>
 8029158:	f7fd fa50 	bl	80265fc <__errno>
 802915c:	2322      	movs	r3, #34	@ 0x22
 802915e:	2500      	movs	r5, #0
 8029160:	6003      	str	r3, [r0, #0]
 8029162:	e7f1      	b.n	8029148 <expf+0x2c>
 8029164:	42b17217 	.word	0x42b17217
 8029168:	c2cff1b5 	.word	0xc2cff1b5

0802916c <sqrtf>:
 802916c:	b570      	push	{r4, r5, r6, lr}
 802916e:	1c05      	adds	r5, r0, #0
 8029170:	f000 f82a 	bl	80291c8 <__ieee754_sqrtf>
 8029174:	1c29      	adds	r1, r5, #0
 8029176:	1c04      	adds	r4, r0, #0
 8029178:	1c28      	adds	r0, r5, #0
 802917a:	f7d8 fb1f 	bl	80017bc <__aeabi_fcmpun>
 802917e:	2800      	cmp	r0, #0
 8029180:	d10e      	bne.n	80291a0 <sqrtf+0x34>
 8029182:	2100      	movs	r1, #0
 8029184:	1c28      	adds	r0, r5, #0
 8029186:	f7d7 f9d3 	bl	8000530 <__aeabi_fcmplt>
 802918a:	2800      	cmp	r0, #0
 802918c:	d008      	beq.n	80291a0 <sqrtf+0x34>
 802918e:	f7fd fa35 	bl	80265fc <__errno>
 8029192:	2321      	movs	r3, #33	@ 0x21
 8029194:	2100      	movs	r1, #0
 8029196:	6003      	str	r3, [r0, #0]
 8029198:	1c08      	adds	r0, r1, #0
 802919a:	f7d7 fd83 	bl	8000ca4 <__aeabi_fdiv>
 802919e:	1c04      	adds	r4, r0, #0
 80291a0:	1c20      	adds	r0, r4, #0
 80291a2:	bd70      	pop	{r4, r5, r6, pc}

080291a4 <finite>:
 80291a4:	4b02      	ldr	r3, [pc, #8]	@ (80291b0 <finite+0xc>)
 80291a6:	0048      	lsls	r0, r1, #1
 80291a8:	0840      	lsrs	r0, r0, #1
 80291aa:	18c0      	adds	r0, r0, r3
 80291ac:	0fc0      	lsrs	r0, r0, #31
 80291ae:	4770      	bx	lr
 80291b0:	80100000 	.word	0x80100000

080291b4 <finitef>:
 80291b4:	22ff      	movs	r2, #255	@ 0xff
 80291b6:	0043      	lsls	r3, r0, #1
 80291b8:	085b      	lsrs	r3, r3, #1
 80291ba:	2001      	movs	r0, #1
 80291bc:	05d2      	lsls	r2, r2, #23
 80291be:	4293      	cmp	r3, r2
 80291c0:	db00      	blt.n	80291c4 <finitef+0x10>
 80291c2:	2000      	movs	r0, #0
 80291c4:	4770      	bx	lr
	...

080291c8 <__ieee754_sqrtf>:
 80291c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80291ca:	21ff      	movs	r1, #255	@ 0xff
 80291cc:	0042      	lsls	r2, r0, #1
 80291ce:	0003      	movs	r3, r0
 80291d0:	1c04      	adds	r4, r0, #0
 80291d2:	0852      	lsrs	r2, r2, #1
 80291d4:	05c9      	lsls	r1, r1, #23
 80291d6:	428a      	cmp	r2, r1
 80291d8:	d309      	bcc.n	80291ee <__ieee754_sqrtf+0x26>
 80291da:	1c01      	adds	r1, r0, #0
 80291dc:	f7d7 ff30 	bl	8001040 <__aeabi_fmul>
 80291e0:	1c01      	adds	r1, r0, #0
 80291e2:	1c20      	adds	r0, r4, #0
 80291e4:	f7d7 fb6c 	bl	80008c0 <__aeabi_fadd>
 80291e8:	1c04      	adds	r4, r0, #0
 80291ea:	1c20      	adds	r0, r4, #0
 80291ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80291ee:	2a00      	cmp	r2, #0
 80291f0:	d0fb      	beq.n	80291ea <__ieee754_sqrtf+0x22>
 80291f2:	2800      	cmp	r0, #0
 80291f4:	da06      	bge.n	8029204 <__ieee754_sqrtf+0x3c>
 80291f6:	1c01      	adds	r1, r0, #0
 80291f8:	f7d8 f87c 	bl	80012f4 <__aeabi_fsub>
 80291fc:	1c01      	adds	r1, r0, #0
 80291fe:	f7d7 fd51 	bl	8000ca4 <__aeabi_fdiv>
 8029202:	e7f1      	b.n	80291e8 <__ieee754_sqrtf+0x20>
 8029204:	0002      	movs	r2, r0
 8029206:	400a      	ands	r2, r1
 8029208:	4208      	tst	r0, r1
 802920a:	d040      	beq.n	802928e <__ieee754_sqrtf+0xc6>
 802920c:	15c1      	asrs	r1, r0, #23
 802920e:	2280      	movs	r2, #128	@ 0x80
 8029210:	000f      	movs	r7, r1
 8029212:	025b      	lsls	r3, r3, #9
 8029214:	0a5b      	lsrs	r3, r3, #9
 8029216:	0412      	lsls	r2, r2, #16
 8029218:	3f7f      	subs	r7, #127	@ 0x7f
 802921a:	4313      	orrs	r3, r2
 802921c:	07c9      	lsls	r1, r1, #31
 802921e:	d400      	bmi.n	8029222 <__ieee754_sqrtf+0x5a>
 8029220:	005b      	lsls	r3, r3, #1
 8029222:	2400      	movs	r4, #0
 8029224:	2180      	movs	r1, #128	@ 0x80
 8029226:	2019      	movs	r0, #25
 8029228:	0026      	movs	r6, r4
 802922a:	107f      	asrs	r7, r7, #1
 802922c:	005b      	lsls	r3, r3, #1
 802922e:	0449      	lsls	r1, r1, #17
 8029230:	1875      	adds	r5, r6, r1
 8029232:	001a      	movs	r2, r3
 8029234:	429d      	cmp	r5, r3
 8029236:	dc02      	bgt.n	802923e <__ieee754_sqrtf+0x76>
 8029238:	186e      	adds	r6, r5, r1
 802923a:	1b5a      	subs	r2, r3, r5
 802923c:	1864      	adds	r4, r4, r1
 802923e:	3801      	subs	r0, #1
 8029240:	0053      	lsls	r3, r2, #1
 8029242:	0849      	lsrs	r1, r1, #1
 8029244:	2800      	cmp	r0, #0
 8029246:	d1f3      	bne.n	8029230 <__ieee754_sqrtf+0x68>
 8029248:	2a00      	cmp	r2, #0
 802924a:	d019      	beq.n	8029280 <__ieee754_sqrtf+0xb8>
 802924c:	4d16      	ldr	r5, [pc, #88]	@ (80292a8 <__ieee754_sqrtf+0xe0>)
 802924e:	4e17      	ldr	r6, [pc, #92]	@ (80292ac <__ieee754_sqrtf+0xe4>)
 8029250:	6828      	ldr	r0, [r5, #0]
 8029252:	6831      	ldr	r1, [r6, #0]
 8029254:	682b      	ldr	r3, [r5, #0]
 8029256:	9301      	str	r3, [sp, #4]
 8029258:	f7d8 f84c 	bl	80012f4 <__aeabi_fsub>
 802925c:	1c01      	adds	r1, r0, #0
 802925e:	9801      	ldr	r0, [sp, #4]
 8029260:	f7d7 f970 	bl	8000544 <__aeabi_fcmple>
 8029264:	2800      	cmp	r0, #0
 8029266:	d00b      	beq.n	8029280 <__ieee754_sqrtf+0xb8>
 8029268:	6828      	ldr	r0, [r5, #0]
 802926a:	6831      	ldr	r1, [r6, #0]
 802926c:	f7d7 fb28 	bl	80008c0 <__aeabi_fadd>
 8029270:	682d      	ldr	r5, [r5, #0]
 8029272:	1c01      	adds	r1, r0, #0
 8029274:	1c28      	adds	r0, r5, #0
 8029276:	f7d7 f95b 	bl	8000530 <__aeabi_fcmplt>
 802927a:	2800      	cmp	r0, #0
 802927c:	d010      	beq.n	80292a0 <__ieee754_sqrtf+0xd8>
 802927e:	3402      	adds	r4, #2
 8029280:	23fc      	movs	r3, #252	@ 0xfc
 8029282:	1064      	asrs	r4, r4, #1
 8029284:	059b      	lsls	r3, r3, #22
 8029286:	18e3      	adds	r3, r4, r3
 8029288:	05fc      	lsls	r4, r7, #23
 802928a:	18e4      	adds	r4, r4, r3
 802928c:	e7ad      	b.n	80291ea <__ieee754_sqrtf+0x22>
 802928e:	2080      	movs	r0, #128	@ 0x80
 8029290:	0400      	lsls	r0, r0, #16
 8029292:	005b      	lsls	r3, r3, #1
 8029294:	0011      	movs	r1, r2
 8029296:	3201      	adds	r2, #1
 8029298:	4203      	tst	r3, r0
 802929a:	d0fa      	beq.n	8029292 <__ieee754_sqrtf+0xca>
 802929c:	4249      	negs	r1, r1
 802929e:	e7b6      	b.n	802920e <__ieee754_sqrtf+0x46>
 80292a0:	2301      	movs	r3, #1
 80292a2:	3401      	adds	r4, #1
 80292a4:	439c      	bics	r4, r3
 80292a6:	e7eb      	b.n	8029280 <__ieee754_sqrtf+0xb8>
 80292a8:	0802edbc 	.word	0x0802edbc
 80292ac:	0802edb8 	.word	0x0802edb8

080292b0 <roundf>:
 80292b0:	0dc3      	lsrs	r3, r0, #23
 80292b2:	b2db      	uxtb	r3, r3
 80292b4:	3b7f      	subs	r3, #127	@ 0x7f
 80292b6:	0002      	movs	r2, r0
 80292b8:	b510      	push	{r4, lr}
 80292ba:	2b16      	cmp	r3, #22
 80292bc:	dc13      	bgt.n	80292e6 <roundf+0x36>
 80292be:	2b00      	cmp	r3, #0
 80292c0:	da07      	bge.n	80292d2 <roundf+0x22>
 80292c2:	0fc2      	lsrs	r2, r0, #31
 80292c4:	07d0      	lsls	r0, r2, #31
 80292c6:	3301      	adds	r3, #1
 80292c8:	d102      	bne.n	80292d0 <roundf+0x20>
 80292ca:	23fe      	movs	r3, #254	@ 0xfe
 80292cc:	059b      	lsls	r3, r3, #22
 80292ce:	4318      	orrs	r0, r3
 80292d0:	bd10      	pop	{r4, pc}
 80292d2:	4908      	ldr	r1, [pc, #32]	@ (80292f4 <roundf+0x44>)
 80292d4:	4119      	asrs	r1, r3
 80292d6:	4208      	tst	r0, r1
 80292d8:	d0fa      	beq.n	80292d0 <roundf+0x20>
 80292da:	2080      	movs	r0, #128	@ 0x80
 80292dc:	03c0      	lsls	r0, r0, #15
 80292de:	4118      	asrs	r0, r3
 80292e0:	1880      	adds	r0, r0, r2
 80292e2:	4388      	bics	r0, r1
 80292e4:	e7f4      	b.n	80292d0 <roundf+0x20>
 80292e6:	2b80      	cmp	r3, #128	@ 0x80
 80292e8:	d1f2      	bne.n	80292d0 <roundf+0x20>
 80292ea:	1c01      	adds	r1, r0, #0
 80292ec:	f7d7 fae8 	bl	80008c0 <__aeabi_fadd>
 80292f0:	e7ee      	b.n	80292d0 <roundf+0x20>
 80292f2:	46c0      	nop			@ (mov r8, r8)
 80292f4:	007fffff 	.word	0x007fffff

080292f8 <__ieee754_log>:
 80292f8:	2380      	movs	r3, #128	@ 0x80
 80292fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80292fc:	035b      	lsls	r3, r3, #13
 80292fe:	000e      	movs	r6, r1
 8029300:	b08d      	sub	sp, #52	@ 0x34
 8029302:	4299      	cmp	r1, r3
 8029304:	da23      	bge.n	802934e <__ieee754_log+0x56>
 8029306:	004b      	lsls	r3, r1, #1
 8029308:	085b      	lsrs	r3, r3, #1
 802930a:	4303      	orrs	r3, r0
 802930c:	d107      	bne.n	802931e <__ieee754_log+0x26>
 802930e:	2200      	movs	r2, #0
 8029310:	2300      	movs	r3, #0
 8029312:	2000      	movs	r0, #0
 8029314:	49b4      	ldr	r1, [pc, #720]	@ (80295e8 <__ieee754_log+0x2f0>)
 8029316:	f7d8 fee3 	bl	80020e0 <__aeabi_ddiv>
 802931a:	b00d      	add	sp, #52	@ 0x34
 802931c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802931e:	2900      	cmp	r1, #0
 8029320:	da06      	bge.n	8029330 <__ieee754_log+0x38>
 8029322:	0002      	movs	r2, r0
 8029324:	000b      	movs	r3, r1
 8029326:	f7d9 fdfb 	bl	8002f20 <__aeabi_dsub>
 802932a:	2200      	movs	r2, #0
 802932c:	2300      	movs	r3, #0
 802932e:	e7f2      	b.n	8029316 <__ieee754_log+0x1e>
 8029330:	4bae      	ldr	r3, [pc, #696]	@ (80295ec <__ieee754_log+0x2f4>)
 8029332:	2200      	movs	r2, #0
 8029334:	f7d9 fb0e 	bl	8002954 <__aeabi_dmul>
 8029338:	2336      	movs	r3, #54	@ 0x36
 802933a:	000e      	movs	r6, r1
 802933c:	425b      	negs	r3, r3
 802933e:	4aac      	ldr	r2, [pc, #688]	@ (80295f0 <__ieee754_log+0x2f8>)
 8029340:	4296      	cmp	r6, r2
 8029342:	dd06      	ble.n	8029352 <__ieee754_log+0x5a>
 8029344:	0002      	movs	r2, r0
 8029346:	000b      	movs	r3, r1
 8029348:	f7d8 fb04 	bl	8001954 <__aeabi_dadd>
 802934c:	e7e5      	b.n	802931a <__ieee754_log+0x22>
 802934e:	2300      	movs	r3, #0
 8029350:	e7f5      	b.n	802933e <__ieee754_log+0x46>
 8029352:	4ca8      	ldr	r4, [pc, #672]	@ (80295f4 <__ieee754_log+0x2fc>)
 8029354:	1532      	asrs	r2, r6, #20
 8029356:	1912      	adds	r2, r2, r4
 8029358:	0336      	lsls	r6, r6, #12
 802935a:	4ca7      	ldr	r4, [pc, #668]	@ (80295f8 <__ieee754_log+0x300>)
 802935c:	18d2      	adds	r2, r2, r3
 802935e:	0b33      	lsrs	r3, r6, #12
 8029360:	9302      	str	r3, [sp, #8]
 8029362:	191b      	adds	r3, r3, r4
 8029364:	2480      	movs	r4, #128	@ 0x80
 8029366:	0364      	lsls	r4, r4, #13
 8029368:	4023      	ands	r3, r4
 802936a:	4ca4      	ldr	r4, [pc, #656]	@ (80295fc <__ieee754_log+0x304>)
 802936c:	9d02      	ldr	r5, [sp, #8]
 802936e:	405c      	eors	r4, r3
 8029370:	151b      	asrs	r3, r3, #20
 8029372:	189b      	adds	r3, r3, r2
 8029374:	4325      	orrs	r5, r4
 8029376:	2200      	movs	r2, #0
 8029378:	9300      	str	r3, [sp, #0]
 802937a:	0029      	movs	r1, r5
 802937c:	4b9f      	ldr	r3, [pc, #636]	@ (80295fc <__ieee754_log+0x304>)
 802937e:	f7d9 fdcf 	bl	8002f20 <__aeabi_dsub>
 8029382:	9b02      	ldr	r3, [sp, #8]
 8029384:	0006      	movs	r6, r0
 8029386:	3302      	adds	r3, #2
 8029388:	031b      	lsls	r3, r3, #12
 802938a:	000f      	movs	r7, r1
 802938c:	2200      	movs	r2, #0
 802938e:	0b1b      	lsrs	r3, r3, #12
 8029390:	2b02      	cmp	r3, #2
 8029392:	dc64      	bgt.n	802945e <__ieee754_log+0x166>
 8029394:	2300      	movs	r3, #0
 8029396:	f7d7 f88b 	bl	80004b0 <__aeabi_dcmpeq>
 802939a:	2800      	cmp	r0, #0
 802939c:	d019      	beq.n	80293d2 <__ieee754_log+0xda>
 802939e:	9b00      	ldr	r3, [sp, #0]
 80293a0:	2b00      	cmp	r3, #0
 80293a2:	d100      	bne.n	80293a6 <__ieee754_log+0xae>
 80293a4:	e11c      	b.n	80295e0 <__ieee754_log+0x2e8>
 80293a6:	0018      	movs	r0, r3
 80293a8:	f7da fa22 	bl	80037f0 <__aeabi_i2d>
 80293ac:	4a94      	ldr	r2, [pc, #592]	@ (8029600 <__ieee754_log+0x308>)
 80293ae:	4b95      	ldr	r3, [pc, #596]	@ (8029604 <__ieee754_log+0x30c>)
 80293b0:	0004      	movs	r4, r0
 80293b2:	000d      	movs	r5, r1
 80293b4:	f7d9 face 	bl	8002954 <__aeabi_dmul>
 80293b8:	4a93      	ldr	r2, [pc, #588]	@ (8029608 <__ieee754_log+0x310>)
 80293ba:	0006      	movs	r6, r0
 80293bc:	000f      	movs	r7, r1
 80293be:	4b93      	ldr	r3, [pc, #588]	@ (802960c <__ieee754_log+0x314>)
 80293c0:	0020      	movs	r0, r4
 80293c2:	0029      	movs	r1, r5
 80293c4:	f7d9 fac6 	bl	8002954 <__aeabi_dmul>
 80293c8:	0002      	movs	r2, r0
 80293ca:	000b      	movs	r3, r1
 80293cc:	0030      	movs	r0, r6
 80293ce:	0039      	movs	r1, r7
 80293d0:	e7ba      	b.n	8029348 <__ieee754_log+0x50>
 80293d2:	4a8f      	ldr	r2, [pc, #572]	@ (8029610 <__ieee754_log+0x318>)
 80293d4:	4b8f      	ldr	r3, [pc, #572]	@ (8029614 <__ieee754_log+0x31c>)
 80293d6:	0030      	movs	r0, r6
 80293d8:	0039      	movs	r1, r7
 80293da:	f7d9 fabb 	bl	8002954 <__aeabi_dmul>
 80293de:	0002      	movs	r2, r0
 80293e0:	000b      	movs	r3, r1
 80293e2:	2000      	movs	r0, #0
 80293e4:	498c      	ldr	r1, [pc, #560]	@ (8029618 <__ieee754_log+0x320>)
 80293e6:	f7d9 fd9b 	bl	8002f20 <__aeabi_dsub>
 80293ea:	0032      	movs	r2, r6
 80293ec:	0004      	movs	r4, r0
 80293ee:	000d      	movs	r5, r1
 80293f0:	003b      	movs	r3, r7
 80293f2:	0030      	movs	r0, r6
 80293f4:	0039      	movs	r1, r7
 80293f6:	f7d9 faad 	bl	8002954 <__aeabi_dmul>
 80293fa:	000b      	movs	r3, r1
 80293fc:	0002      	movs	r2, r0
 80293fe:	0029      	movs	r1, r5
 8029400:	0020      	movs	r0, r4
 8029402:	f7d9 faa7 	bl	8002954 <__aeabi_dmul>
 8029406:	9b00      	ldr	r3, [sp, #0]
 8029408:	9002      	str	r0, [sp, #8]
 802940a:	9103      	str	r1, [sp, #12]
 802940c:	2b00      	cmp	r3, #0
 802940e:	d106      	bne.n	802941e <__ieee754_log+0x126>
 8029410:	0002      	movs	r2, r0
 8029412:	000b      	movs	r3, r1
 8029414:	0030      	movs	r0, r6
 8029416:	0039      	movs	r1, r7
 8029418:	f7d9 fd82 	bl	8002f20 <__aeabi_dsub>
 802941c:	e77d      	b.n	802931a <__ieee754_log+0x22>
 802941e:	9800      	ldr	r0, [sp, #0]
 8029420:	f7da f9e6 	bl	80037f0 <__aeabi_i2d>
 8029424:	4a76      	ldr	r2, [pc, #472]	@ (8029600 <__ieee754_log+0x308>)
 8029426:	4b77      	ldr	r3, [pc, #476]	@ (8029604 <__ieee754_log+0x30c>)
 8029428:	0004      	movs	r4, r0
 802942a:	000d      	movs	r5, r1
 802942c:	f7d9 fa92 	bl	8002954 <__aeabi_dmul>
 8029430:	4a75      	ldr	r2, [pc, #468]	@ (8029608 <__ieee754_log+0x310>)
 8029432:	9000      	str	r0, [sp, #0]
 8029434:	9101      	str	r1, [sp, #4]
 8029436:	4b75      	ldr	r3, [pc, #468]	@ (802960c <__ieee754_log+0x314>)
 8029438:	0020      	movs	r0, r4
 802943a:	0029      	movs	r1, r5
 802943c:	f7d9 fa8a 	bl	8002954 <__aeabi_dmul>
 8029440:	0002      	movs	r2, r0
 8029442:	000b      	movs	r3, r1
 8029444:	9802      	ldr	r0, [sp, #8]
 8029446:	9903      	ldr	r1, [sp, #12]
 8029448:	f7d9 fd6a 	bl	8002f20 <__aeabi_dsub>
 802944c:	0032      	movs	r2, r6
 802944e:	003b      	movs	r3, r7
 8029450:	f7d9 fd66 	bl	8002f20 <__aeabi_dsub>
 8029454:	0002      	movs	r2, r0
 8029456:	000b      	movs	r3, r1
 8029458:	9800      	ldr	r0, [sp, #0]
 802945a:	9901      	ldr	r1, [sp, #4]
 802945c:	e7dc      	b.n	8029418 <__ieee754_log+0x120>
 802945e:	2380      	movs	r3, #128	@ 0x80
 8029460:	05db      	lsls	r3, r3, #23
 8029462:	f7d8 fa77 	bl	8001954 <__aeabi_dadd>
 8029466:	0002      	movs	r2, r0
 8029468:	000b      	movs	r3, r1
 802946a:	0030      	movs	r0, r6
 802946c:	0039      	movs	r1, r7
 802946e:	f7d8 fe37 	bl	80020e0 <__aeabi_ddiv>
 8029472:	9004      	str	r0, [sp, #16]
 8029474:	9105      	str	r1, [sp, #20]
 8029476:	9800      	ldr	r0, [sp, #0]
 8029478:	f7da f9ba 	bl	80037f0 <__aeabi_i2d>
 802947c:	9a04      	ldr	r2, [sp, #16]
 802947e:	9b05      	ldr	r3, [sp, #20]
 8029480:	9006      	str	r0, [sp, #24]
 8029482:	9107      	str	r1, [sp, #28]
 8029484:	0010      	movs	r0, r2
 8029486:	0019      	movs	r1, r3
 8029488:	f7d9 fa64 	bl	8002954 <__aeabi_dmul>
 802948c:	4a63      	ldr	r2, [pc, #396]	@ (802961c <__ieee754_log+0x324>)
 802948e:	9b02      	ldr	r3, [sp, #8]
 8029490:	4694      	mov	ip, r2
 8029492:	4463      	add	r3, ip
 8029494:	0002      	movs	r2, r0
 8029496:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029498:	000b      	movs	r3, r1
 802949a:	9008      	str	r0, [sp, #32]
 802949c:	9109      	str	r1, [sp, #36]	@ 0x24
 802949e:	f7d9 fa59 	bl	8002954 <__aeabi_dmul>
 80294a2:	0004      	movs	r4, r0
 80294a4:	000d      	movs	r5, r1
 80294a6:	4a5e      	ldr	r2, [pc, #376]	@ (8029620 <__ieee754_log+0x328>)
 80294a8:	4b5e      	ldr	r3, [pc, #376]	@ (8029624 <__ieee754_log+0x32c>)
 80294aa:	f7d9 fa53 	bl	8002954 <__aeabi_dmul>
 80294ae:	4a5e      	ldr	r2, [pc, #376]	@ (8029628 <__ieee754_log+0x330>)
 80294b0:	4b5e      	ldr	r3, [pc, #376]	@ (802962c <__ieee754_log+0x334>)
 80294b2:	f7d8 fa4f 	bl	8001954 <__aeabi_dadd>
 80294b6:	0022      	movs	r2, r4
 80294b8:	002b      	movs	r3, r5
 80294ba:	f7d9 fa4b 	bl	8002954 <__aeabi_dmul>
 80294be:	4a5c      	ldr	r2, [pc, #368]	@ (8029630 <__ieee754_log+0x338>)
 80294c0:	4b5c      	ldr	r3, [pc, #368]	@ (8029634 <__ieee754_log+0x33c>)
 80294c2:	f7d8 fa47 	bl	8001954 <__aeabi_dadd>
 80294c6:	0022      	movs	r2, r4
 80294c8:	002b      	movs	r3, r5
 80294ca:	f7d9 fa43 	bl	8002954 <__aeabi_dmul>
 80294ce:	4a5a      	ldr	r2, [pc, #360]	@ (8029638 <__ieee754_log+0x340>)
 80294d0:	4b5a      	ldr	r3, [pc, #360]	@ (802963c <__ieee754_log+0x344>)
 80294d2:	f7d8 fa3f 	bl	8001954 <__aeabi_dadd>
 80294d6:	9a08      	ldr	r2, [sp, #32]
 80294d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80294da:	f7d9 fa3b 	bl	8002954 <__aeabi_dmul>
 80294de:	4a58      	ldr	r2, [pc, #352]	@ (8029640 <__ieee754_log+0x348>)
 80294e0:	9008      	str	r0, [sp, #32]
 80294e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80294e4:	4b57      	ldr	r3, [pc, #348]	@ (8029644 <__ieee754_log+0x34c>)
 80294e6:	0020      	movs	r0, r4
 80294e8:	0029      	movs	r1, r5
 80294ea:	f7d9 fa33 	bl	8002954 <__aeabi_dmul>
 80294ee:	4a56      	ldr	r2, [pc, #344]	@ (8029648 <__ieee754_log+0x350>)
 80294f0:	4b56      	ldr	r3, [pc, #344]	@ (802964c <__ieee754_log+0x354>)
 80294f2:	f7d8 fa2f 	bl	8001954 <__aeabi_dadd>
 80294f6:	0022      	movs	r2, r4
 80294f8:	002b      	movs	r3, r5
 80294fa:	f7d9 fa2b 	bl	8002954 <__aeabi_dmul>
 80294fe:	4a54      	ldr	r2, [pc, #336]	@ (8029650 <__ieee754_log+0x358>)
 8029500:	4b54      	ldr	r3, [pc, #336]	@ (8029654 <__ieee754_log+0x35c>)
 8029502:	f7d8 fa27 	bl	8001954 <__aeabi_dadd>
 8029506:	0022      	movs	r2, r4
 8029508:	002b      	movs	r3, r5
 802950a:	f7d9 fa23 	bl	8002954 <__aeabi_dmul>
 802950e:	0002      	movs	r2, r0
 8029510:	000b      	movs	r3, r1
 8029512:	9808      	ldr	r0, [sp, #32]
 8029514:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029516:	f7d8 fa1d 	bl	8001954 <__aeabi_dadd>
 802951a:	9a02      	ldr	r2, [sp, #8]
 802951c:	4b4e      	ldr	r3, [pc, #312]	@ (8029658 <__ieee754_log+0x360>)
 802951e:	0004      	movs	r4, r0
 8029520:	1a9b      	subs	r3, r3, r2
 8029522:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029524:	000d      	movs	r5, r1
 8029526:	4313      	orrs	r3, r2
 8029528:	2b00      	cmp	r3, #0
 802952a:	dd34      	ble.n	8029596 <__ieee754_log+0x29e>
 802952c:	2200      	movs	r2, #0
 802952e:	4b3a      	ldr	r3, [pc, #232]	@ (8029618 <__ieee754_log+0x320>)
 8029530:	0030      	movs	r0, r6
 8029532:	0039      	movs	r1, r7
 8029534:	f7d9 fa0e 	bl	8002954 <__aeabi_dmul>
 8029538:	0032      	movs	r2, r6
 802953a:	003b      	movs	r3, r7
 802953c:	f7d9 fa0a 	bl	8002954 <__aeabi_dmul>
 8029540:	0002      	movs	r2, r0
 8029542:	000b      	movs	r3, r1
 8029544:	9002      	str	r0, [sp, #8]
 8029546:	9103      	str	r1, [sp, #12]
 8029548:	0020      	movs	r0, r4
 802954a:	0029      	movs	r1, r5
 802954c:	f7d8 fa02 	bl	8001954 <__aeabi_dadd>
 8029550:	9a04      	ldr	r2, [sp, #16]
 8029552:	9b05      	ldr	r3, [sp, #20]
 8029554:	f7d9 f9fe 	bl	8002954 <__aeabi_dmul>
 8029558:	9b00      	ldr	r3, [sp, #0]
 802955a:	0004      	movs	r4, r0
 802955c:	000d      	movs	r5, r1
 802955e:	2b00      	cmp	r3, #0
 8029560:	d106      	bne.n	8029570 <__ieee754_log+0x278>
 8029562:	0002      	movs	r2, r0
 8029564:	000b      	movs	r3, r1
 8029566:	9802      	ldr	r0, [sp, #8]
 8029568:	9903      	ldr	r1, [sp, #12]
 802956a:	f7d9 fcd9 	bl	8002f20 <__aeabi_dsub>
 802956e:	e74f      	b.n	8029410 <__ieee754_log+0x118>
 8029570:	4a23      	ldr	r2, [pc, #140]	@ (8029600 <__ieee754_log+0x308>)
 8029572:	4b24      	ldr	r3, [pc, #144]	@ (8029604 <__ieee754_log+0x30c>)
 8029574:	9806      	ldr	r0, [sp, #24]
 8029576:	9907      	ldr	r1, [sp, #28]
 8029578:	f7d9 f9ec 	bl	8002954 <__aeabi_dmul>
 802957c:	4a22      	ldr	r2, [pc, #136]	@ (8029608 <__ieee754_log+0x310>)
 802957e:	9000      	str	r0, [sp, #0]
 8029580:	9101      	str	r1, [sp, #4]
 8029582:	9806      	ldr	r0, [sp, #24]
 8029584:	9907      	ldr	r1, [sp, #28]
 8029586:	4b21      	ldr	r3, [pc, #132]	@ (802960c <__ieee754_log+0x314>)
 8029588:	f7d9 f9e4 	bl	8002954 <__aeabi_dmul>
 802958c:	0022      	movs	r2, r4
 802958e:	002b      	movs	r3, r5
 8029590:	f7d8 f9e0 	bl	8001954 <__aeabi_dadd>
 8029594:	e754      	b.n	8029440 <__ieee754_log+0x148>
 8029596:	0002      	movs	r2, r0
 8029598:	000b      	movs	r3, r1
 802959a:	0030      	movs	r0, r6
 802959c:	0039      	movs	r1, r7
 802959e:	f7d9 fcbf 	bl	8002f20 <__aeabi_dsub>
 80295a2:	9a04      	ldr	r2, [sp, #16]
 80295a4:	9b05      	ldr	r3, [sp, #20]
 80295a6:	f7d9 f9d5 	bl	8002954 <__aeabi_dmul>
 80295aa:	9b00      	ldr	r3, [sp, #0]
 80295ac:	0004      	movs	r4, r0
 80295ae:	000d      	movs	r5, r1
 80295b0:	2b00      	cmp	r3, #0
 80295b2:	d102      	bne.n	80295ba <__ieee754_log+0x2c2>
 80295b4:	0002      	movs	r2, r0
 80295b6:	000b      	movs	r3, r1
 80295b8:	e72c      	b.n	8029414 <__ieee754_log+0x11c>
 80295ba:	4a11      	ldr	r2, [pc, #68]	@ (8029600 <__ieee754_log+0x308>)
 80295bc:	4b11      	ldr	r3, [pc, #68]	@ (8029604 <__ieee754_log+0x30c>)
 80295be:	9806      	ldr	r0, [sp, #24]
 80295c0:	9907      	ldr	r1, [sp, #28]
 80295c2:	f7d9 f9c7 	bl	8002954 <__aeabi_dmul>
 80295c6:	4a10      	ldr	r2, [pc, #64]	@ (8029608 <__ieee754_log+0x310>)
 80295c8:	9000      	str	r0, [sp, #0]
 80295ca:	9101      	str	r1, [sp, #4]
 80295cc:	9806      	ldr	r0, [sp, #24]
 80295ce:	9907      	ldr	r1, [sp, #28]
 80295d0:	4b0e      	ldr	r3, [pc, #56]	@ (802960c <__ieee754_log+0x314>)
 80295d2:	f7d9 f9bf 	bl	8002954 <__aeabi_dmul>
 80295d6:	0002      	movs	r2, r0
 80295d8:	000b      	movs	r3, r1
 80295da:	0020      	movs	r0, r4
 80295dc:	0029      	movs	r1, r5
 80295de:	e733      	b.n	8029448 <__ieee754_log+0x150>
 80295e0:	2000      	movs	r0, #0
 80295e2:	2100      	movs	r1, #0
 80295e4:	e699      	b.n	802931a <__ieee754_log+0x22>
 80295e6:	46c0      	nop			@ (mov r8, r8)
 80295e8:	c3500000 	.word	0xc3500000
 80295ec:	43500000 	.word	0x43500000
 80295f0:	7fefffff 	.word	0x7fefffff
 80295f4:	fffffc01 	.word	0xfffffc01
 80295f8:	00095f64 	.word	0x00095f64
 80295fc:	3ff00000 	.word	0x3ff00000
 8029600:	fee00000 	.word	0xfee00000
 8029604:	3fe62e42 	.word	0x3fe62e42
 8029608:	35793c76 	.word	0x35793c76
 802960c:	3dea39ef 	.word	0x3dea39ef
 8029610:	55555555 	.word	0x55555555
 8029614:	3fd55555 	.word	0x3fd55555
 8029618:	3fe00000 	.word	0x3fe00000
 802961c:	fff9eb86 	.word	0xfff9eb86
 8029620:	df3e5244 	.word	0xdf3e5244
 8029624:	3fc2f112 	.word	0x3fc2f112
 8029628:	96cb03de 	.word	0x96cb03de
 802962c:	3fc74664 	.word	0x3fc74664
 8029630:	94229359 	.word	0x94229359
 8029634:	3fd24924 	.word	0x3fd24924
 8029638:	55555593 	.word	0x55555593
 802963c:	3fe55555 	.word	0x3fe55555
 8029640:	d078c69f 	.word	0xd078c69f
 8029644:	3fc39a09 	.word	0x3fc39a09
 8029648:	1d8e78af 	.word	0x1d8e78af
 802964c:	3fcc71c5 	.word	0x3fcc71c5
 8029650:	9997fa04 	.word	0x9997fa04
 8029654:	3fd99999 	.word	0x3fd99999
 8029658:	0006b851 	.word	0x0006b851

0802965c <__ieee754_pow>:
 802965c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802965e:	b095      	sub	sp, #84	@ 0x54
 8029660:	9204      	str	r2, [sp, #16]
 8029662:	9305      	str	r3, [sp, #20]
 8029664:	9b04      	ldr	r3, [sp, #16]
 8029666:	9f05      	ldr	r7, [sp, #20]
 8029668:	001a      	movs	r2, r3
 802966a:	007d      	lsls	r5, r7, #1
 802966c:	086d      	lsrs	r5, r5, #1
 802966e:	9002      	str	r0, [sp, #8]
 8029670:	9103      	str	r1, [sp, #12]
 8029672:	432a      	orrs	r2, r5
 8029674:	d11a      	bne.n	80296ac <__ieee754_pow+0x50>
 8029676:	2180      	movs	r1, #128	@ 0x80
 8029678:	9a02      	ldr	r2, [sp, #8]
 802967a:	9803      	ldr	r0, [sp, #12]
 802967c:	0309      	lsls	r1, r1, #12
 802967e:	4048      	eors	r0, r1
 8029680:	0003      	movs	r3, r0
 8029682:	1892      	adds	r2, r2, r2
 8029684:	415b      	adcs	r3, r3
 8029686:	4996      	ldr	r1, [pc, #600]	@ (80298e0 <__ieee754_pow+0x284>)
 8029688:	428b      	cmp	r3, r1
 802968a:	d806      	bhi.n	802969a <__ieee754_pow+0x3e>
 802968c:	d001      	beq.n	8029692 <__ieee754_pow+0x36>
 802968e:	f000 fcce 	bl	802a02e <__ieee754_pow+0x9d2>
 8029692:	2a00      	cmp	r2, #0
 8029694:	d101      	bne.n	802969a <__ieee754_pow+0x3e>
 8029696:	f000 fcca 	bl	802a02e <__ieee754_pow+0x9d2>
 802969a:	9a04      	ldr	r2, [sp, #16]
 802969c:	9b05      	ldr	r3, [sp, #20]
 802969e:	9802      	ldr	r0, [sp, #8]
 80296a0:	9903      	ldr	r1, [sp, #12]
 80296a2:	f7d8 f957 	bl	8001954 <__aeabi_dadd>
 80296a6:	9000      	str	r0, [sp, #0]
 80296a8:	9101      	str	r1, [sp, #4]
 80296aa:	e08e      	b.n	80297ca <__ieee754_pow+0x16e>
 80296ac:	9a03      	ldr	r2, [sp, #12]
 80296ae:	9206      	str	r2, [sp, #24]
 80296b0:	9a02      	ldr	r2, [sp, #8]
 80296b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80296b4:	9a03      	ldr	r2, [sp, #12]
 80296b6:	0054      	lsls	r4, r2, #1
 80296b8:	4a8a      	ldr	r2, [pc, #552]	@ (80298e4 <__ieee754_pow+0x288>)
 80296ba:	0864      	lsrs	r4, r4, #1
 80296bc:	4294      	cmp	r4, r2
 80296be:	d80e      	bhi.n	80296de <__ieee754_pow+0x82>
 80296c0:	d105      	bne.n	80296ce <__ieee754_pow+0x72>
 80296c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80296c4:	2a00      	cmp	r2, #0
 80296c6:	d1e8      	bne.n	802969a <__ieee754_pow+0x3e>
 80296c8:	42a5      	cmp	r5, r4
 80296ca:	d8e6      	bhi.n	802969a <__ieee754_pow+0x3e>
 80296cc:	e002      	b.n	80296d4 <__ieee754_pow+0x78>
 80296ce:	4a85      	ldr	r2, [pc, #532]	@ (80298e4 <__ieee754_pow+0x288>)
 80296d0:	4295      	cmp	r5, r2
 80296d2:	d804      	bhi.n	80296de <__ieee754_pow+0x82>
 80296d4:	4a83      	ldr	r2, [pc, #524]	@ (80298e4 <__ieee754_pow+0x288>)
 80296d6:	4295      	cmp	r5, r2
 80296d8:	d10c      	bne.n	80296f4 <__ieee754_pow+0x98>
 80296da:	2b00      	cmp	r3, #0
 80296dc:	d00a      	beq.n	80296f4 <__ieee754_pow+0x98>
 80296de:	4a82      	ldr	r2, [pc, #520]	@ (80298e8 <__ieee754_pow+0x28c>)
 80296e0:	9b03      	ldr	r3, [sp, #12]
 80296e2:	189b      	adds	r3, r3, r2
 80296e4:	9a02      	ldr	r2, [sp, #8]
 80296e6:	4313      	orrs	r3, r2
 80296e8:	d1d7      	bne.n	802969a <__ieee754_pow+0x3e>
 80296ea:	2180      	movs	r1, #128	@ 0x80
 80296ec:	9a04      	ldr	r2, [sp, #16]
 80296ee:	9805      	ldr	r0, [sp, #20]
 80296f0:	0309      	lsls	r1, r1, #12
 80296f2:	e7c4      	b.n	802967e <__ieee754_pow+0x22>
 80296f4:	2600      	movs	r6, #0
 80296f6:	9a06      	ldr	r2, [sp, #24]
 80296f8:	9408      	str	r4, [sp, #32]
 80296fa:	42b2      	cmp	r2, r6
 80296fc:	da42      	bge.n	8029784 <__ieee754_pow+0x128>
 80296fe:	4a7b      	ldr	r2, [pc, #492]	@ (80298ec <__ieee754_pow+0x290>)
 8029700:	4295      	cmp	r5, r2
 8029702:	d83e      	bhi.n	8029782 <__ieee754_pow+0x126>
 8029704:	4a7a      	ldr	r2, [pc, #488]	@ (80298f0 <__ieee754_pow+0x294>)
 8029706:	4295      	cmp	r5, r2
 8029708:	d910      	bls.n	802972c <__ieee754_pow+0xd0>
 802970a:	497a      	ldr	r1, [pc, #488]	@ (80298f4 <__ieee754_pow+0x298>)
 802970c:	152a      	asrs	r2, r5, #20
 802970e:	1852      	adds	r2, r2, r1
 8029710:	2a14      	cmp	r2, #20
 8029712:	dd18      	ble.n	8029746 <__ieee754_pow+0xea>
 8029714:	2134      	movs	r1, #52	@ 0x34
 8029716:	1a89      	subs	r1, r1, r2
 8029718:	9a04      	ldr	r2, [sp, #16]
 802971a:	40ca      	lsrs	r2, r1
 802971c:	0010      	movs	r0, r2
 802971e:	4088      	lsls	r0, r1
 8029720:	4298      	cmp	r0, r3
 8029722:	d103      	bne.n	802972c <__ieee754_pow+0xd0>
 8029724:	2101      	movs	r1, #1
 8029726:	3602      	adds	r6, #2
 8029728:	400a      	ands	r2, r1
 802972a:	1ab6      	subs	r6, r6, r2
 802972c:	2b00      	cmp	r3, #0
 802972e:	d15b      	bne.n	80297e8 <__ieee754_pow+0x18c>
 8029730:	2380      	movs	r3, #128	@ 0x80
 8029732:	05db      	lsls	r3, r3, #23
 8029734:	429f      	cmp	r7, r3
 8029736:	d14c      	bne.n	80297d2 <__ieee754_pow+0x176>
 8029738:	9a02      	ldr	r2, [sp, #8]
 802973a:	9b03      	ldr	r3, [sp, #12]
 802973c:	0010      	movs	r0, r2
 802973e:	0019      	movs	r1, r3
 8029740:	f7d9 f908 	bl	8002954 <__aeabi_dmul>
 8029744:	e7af      	b.n	80296a6 <__ieee754_pow+0x4a>
 8029746:	2b00      	cmp	r3, #0
 8029748:	d14e      	bne.n	80297e8 <__ieee754_pow+0x18c>
 802974a:	3314      	adds	r3, #20
 802974c:	1a9a      	subs	r2, r3, r2
 802974e:	002b      	movs	r3, r5
 8029750:	4113      	asrs	r3, r2
 8029752:	0019      	movs	r1, r3
 8029754:	4091      	lsls	r1, r2
 8029756:	42a9      	cmp	r1, r5
 8029758:	d103      	bne.n	8029762 <__ieee754_pow+0x106>
 802975a:	2201      	movs	r2, #1
 802975c:	2602      	movs	r6, #2
 802975e:	4013      	ands	r3, r2
 8029760:	1af6      	subs	r6, r6, r3
 8029762:	4b65      	ldr	r3, [pc, #404]	@ (80298f8 <__ieee754_pow+0x29c>)
 8029764:	429d      	cmp	r5, r3
 8029766:	d1e3      	bne.n	8029730 <__ieee754_pow+0xd4>
 8029768:	9b02      	ldr	r3, [sp, #8]
 802976a:	9c03      	ldr	r4, [sp, #12]
 802976c:	9300      	str	r3, [sp, #0]
 802976e:	9401      	str	r4, [sp, #4]
 8029770:	2f00      	cmp	r7, #0
 8029772:	da2a      	bge.n	80297ca <__ieee754_pow+0x16e>
 8029774:	001a      	movs	r2, r3
 8029776:	2000      	movs	r0, #0
 8029778:	0023      	movs	r3, r4
 802977a:	495f      	ldr	r1, [pc, #380]	@ (80298f8 <__ieee754_pow+0x29c>)
 802977c:	f7d8 fcb0 	bl	80020e0 <__aeabi_ddiv>
 8029780:	e791      	b.n	80296a6 <__ieee754_pow+0x4a>
 8029782:	2602      	movs	r6, #2
 8029784:	2b00      	cmp	r3, #0
 8029786:	d12f      	bne.n	80297e8 <__ieee754_pow+0x18c>
 8029788:	4b56      	ldr	r3, [pc, #344]	@ (80298e4 <__ieee754_pow+0x288>)
 802978a:	429d      	cmp	r5, r3
 802978c:	d1e9      	bne.n	8029762 <__ieee754_pow+0x106>
 802978e:	4b56      	ldr	r3, [pc, #344]	@ (80298e8 <__ieee754_pow+0x28c>)
 8029790:	9a02      	ldr	r2, [sp, #8]
 8029792:	18e3      	adds	r3, r4, r3
 8029794:	4313      	orrs	r3, r2
 8029796:	d101      	bne.n	802979c <__ieee754_pow+0x140>
 8029798:	f000 fc49 	bl	802a02e <__ieee754_pow+0x9d2>
 802979c:	4b54      	ldr	r3, [pc, #336]	@ (80298f0 <__ieee754_pow+0x294>)
 802979e:	429c      	cmp	r4, r3
 80297a0:	d909      	bls.n	80297b6 <__ieee754_pow+0x15a>
 80297a2:	9b04      	ldr	r3, [sp, #16]
 80297a4:	9c05      	ldr	r4, [sp, #20]
 80297a6:	9300      	str	r3, [sp, #0]
 80297a8:	9401      	str	r4, [sp, #4]
 80297aa:	2f00      	cmp	r7, #0
 80297ac:	da0d      	bge.n	80297ca <__ieee754_pow+0x16e>
 80297ae:	2300      	movs	r3, #0
 80297b0:	2400      	movs	r4, #0
 80297b2:	f000 fc3e 	bl	802a032 <__ieee754_pow+0x9d6>
 80297b6:	2f00      	cmp	r7, #0
 80297b8:	daf9      	bge.n	80297ae <__ieee754_pow+0x152>
 80297ba:	2280      	movs	r2, #128	@ 0x80
 80297bc:	0612      	lsls	r2, r2, #24
 80297be:	4694      	mov	ip, r2
 80297c0:	9b04      	ldr	r3, [sp, #16]
 80297c2:	9300      	str	r3, [sp, #0]
 80297c4:	9b05      	ldr	r3, [sp, #20]
 80297c6:	4463      	add	r3, ip
 80297c8:	9301      	str	r3, [sp, #4]
 80297ca:	9800      	ldr	r0, [sp, #0]
 80297cc:	9901      	ldr	r1, [sp, #4]
 80297ce:	b015      	add	sp, #84	@ 0x54
 80297d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80297d2:	4b4a      	ldr	r3, [pc, #296]	@ (80298fc <__ieee754_pow+0x2a0>)
 80297d4:	429f      	cmp	r7, r3
 80297d6:	d107      	bne.n	80297e8 <__ieee754_pow+0x18c>
 80297d8:	9b06      	ldr	r3, [sp, #24]
 80297da:	2b00      	cmp	r3, #0
 80297dc:	db04      	blt.n	80297e8 <__ieee754_pow+0x18c>
 80297de:	9802      	ldr	r0, [sp, #8]
 80297e0:	9903      	ldr	r1, [sp, #12]
 80297e2:	f000 fe03 	bl	802a3ec <__ieee754_sqrt>
 80297e6:	e75e      	b.n	80296a6 <__ieee754_pow+0x4a>
 80297e8:	9802      	ldr	r0, [sp, #8]
 80297ea:	9903      	ldr	r1, [sp, #12]
 80297ec:	f000 fc4e 	bl	802a08c <fabs>
 80297f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80297f2:	9000      	str	r0, [sp, #0]
 80297f4:	9101      	str	r1, [sp, #4]
 80297f6:	2b00      	cmp	r3, #0
 80297f8:	d12c      	bne.n	8029854 <__ieee754_pow+0x1f8>
 80297fa:	9b03      	ldr	r3, [sp, #12]
 80297fc:	4a3e      	ldr	r2, [pc, #248]	@ (80298f8 <__ieee754_pow+0x29c>)
 80297fe:	009b      	lsls	r3, r3, #2
 8029800:	089b      	lsrs	r3, r3, #2
 8029802:	4293      	cmp	r3, r2
 8029804:	d001      	beq.n	802980a <__ieee754_pow+0x1ae>
 8029806:	2c00      	cmp	r4, #0
 8029808:	d124      	bne.n	8029854 <__ieee754_pow+0x1f8>
 802980a:	2f00      	cmp	r7, #0
 802980c:	da07      	bge.n	802981e <__ieee754_pow+0x1c2>
 802980e:	9a00      	ldr	r2, [sp, #0]
 8029810:	9b01      	ldr	r3, [sp, #4]
 8029812:	2000      	movs	r0, #0
 8029814:	4938      	ldr	r1, [pc, #224]	@ (80298f8 <__ieee754_pow+0x29c>)
 8029816:	f7d8 fc63 	bl	80020e0 <__aeabi_ddiv>
 802981a:	9000      	str	r0, [sp, #0]
 802981c:	9101      	str	r1, [sp, #4]
 802981e:	9b06      	ldr	r3, [sp, #24]
 8029820:	2b00      	cmp	r3, #0
 8029822:	dad2      	bge.n	80297ca <__ieee754_pow+0x16e>
 8029824:	4b30      	ldr	r3, [pc, #192]	@ (80298e8 <__ieee754_pow+0x28c>)
 8029826:	18e4      	adds	r4, r4, r3
 8029828:	4334      	orrs	r4, r6
 802982a:	d108      	bne.n	802983e <__ieee754_pow+0x1e2>
 802982c:	9a00      	ldr	r2, [sp, #0]
 802982e:	9b01      	ldr	r3, [sp, #4]
 8029830:	0010      	movs	r0, r2
 8029832:	0019      	movs	r1, r3
 8029834:	f7d9 fb74 	bl	8002f20 <__aeabi_dsub>
 8029838:	0002      	movs	r2, r0
 802983a:	000b      	movs	r3, r1
 802983c:	e79e      	b.n	802977c <__ieee754_pow+0x120>
 802983e:	2e01      	cmp	r6, #1
 8029840:	d1c3      	bne.n	80297ca <__ieee754_pow+0x16e>
 8029842:	9800      	ldr	r0, [sp, #0]
 8029844:	2180      	movs	r1, #128	@ 0x80
 8029846:	0002      	movs	r2, r0
 8029848:	9801      	ldr	r0, [sp, #4]
 802984a:	0609      	lsls	r1, r1, #24
 802984c:	1843      	adds	r3, r0, r1
 802984e:	9200      	str	r2, [sp, #0]
 8029850:	9301      	str	r3, [sp, #4]
 8029852:	e7ba      	b.n	80297ca <__ieee754_pow+0x16e>
 8029854:	9b03      	ldr	r3, [sp, #12]
 8029856:	0fdb      	lsrs	r3, r3, #31
 8029858:	3b01      	subs	r3, #1
 802985a:	001a      	movs	r2, r3
 802985c:	4332      	orrs	r2, r6
 802985e:	d102      	bne.n	8029866 <__ieee754_pow+0x20a>
 8029860:	9a02      	ldr	r2, [sp, #8]
 8029862:	9b03      	ldr	r3, [sp, #12]
 8029864:	e7e4      	b.n	8029830 <__ieee754_pow+0x1d4>
 8029866:	3e01      	subs	r6, #1
 8029868:	2200      	movs	r2, #0
 802986a:	431e      	orrs	r6, r3
 802986c:	d013      	beq.n	8029896 <__ieee754_pow+0x23a>
 802986e:	4b22      	ldr	r3, [pc, #136]	@ (80298f8 <__ieee754_pow+0x29c>)
 8029870:	9206      	str	r2, [sp, #24]
 8029872:	9307      	str	r3, [sp, #28]
 8029874:	2384      	movs	r3, #132	@ 0x84
 8029876:	05db      	lsls	r3, r3, #23
 8029878:	429d      	cmp	r5, r3
 802987a:	d800      	bhi.n	802987e <__ieee754_pow+0x222>
 802987c:	e0fa      	b.n	8029a74 <__ieee754_pow+0x418>
 802987e:	4b20      	ldr	r3, [pc, #128]	@ (8029900 <__ieee754_pow+0x2a4>)
 8029880:	429d      	cmp	r5, r3
 8029882:	d910      	bls.n	80298a6 <__ieee754_pow+0x24a>
 8029884:	4b1a      	ldr	r3, [pc, #104]	@ (80298f0 <__ieee754_pow+0x294>)
 8029886:	429c      	cmp	r4, r3
 8029888:	d807      	bhi.n	802989a <__ieee754_pow+0x23e>
 802988a:	2f00      	cmp	r7, #0
 802988c:	da07      	bge.n	802989e <__ieee754_pow+0x242>
 802988e:	2000      	movs	r0, #0
 8029890:	f000 fd82 	bl	802a398 <__math_oflow>
 8029894:	e707      	b.n	80296a6 <__ieee754_pow+0x4a>
 8029896:	4b1b      	ldr	r3, [pc, #108]	@ (8029904 <__ieee754_pow+0x2a8>)
 8029898:	e7ea      	b.n	8029870 <__ieee754_pow+0x214>
 802989a:	2f00      	cmp	r7, #0
 802989c:	dcf7      	bgt.n	802988e <__ieee754_pow+0x232>
 802989e:	2000      	movs	r0, #0
 80298a0:	f000 fd73 	bl	802a38a <__math_uflow>
 80298a4:	e6ff      	b.n	80296a6 <__ieee754_pow+0x4a>
 80298a6:	4b18      	ldr	r3, [pc, #96]	@ (8029908 <__ieee754_pow+0x2ac>)
 80298a8:	429c      	cmp	r4, r3
 80298aa:	d80a      	bhi.n	80298c2 <__ieee754_pow+0x266>
 80298ac:	9806      	ldr	r0, [sp, #24]
 80298ae:	9907      	ldr	r1, [sp, #28]
 80298b0:	2300      	movs	r3, #0
 80298b2:	2200      	movs	r2, #0
 80298b4:	f7d6 fe02 	bl	80004bc <__aeabi_dcmplt>
 80298b8:	1e43      	subs	r3, r0, #1
 80298ba:	4198      	sbcs	r0, r3
 80298bc:	2f00      	cmp	r7, #0
 80298be:	daef      	bge.n	80298a0 <__ieee754_pow+0x244>
 80298c0:	e7e6      	b.n	8029890 <__ieee754_pow+0x234>
 80298c2:	4b0d      	ldr	r3, [pc, #52]	@ (80298f8 <__ieee754_pow+0x29c>)
 80298c4:	2200      	movs	r2, #0
 80298c6:	429c      	cmp	r4, r3
 80298c8:	d920      	bls.n	802990c <__ieee754_pow+0x2b0>
 80298ca:	9806      	ldr	r0, [sp, #24]
 80298cc:	9907      	ldr	r1, [sp, #28]
 80298ce:	2300      	movs	r3, #0
 80298d0:	f7d6 fdf4 	bl	80004bc <__aeabi_dcmplt>
 80298d4:	1e43      	subs	r3, r0, #1
 80298d6:	4198      	sbcs	r0, r3
 80298d8:	2f00      	cmp	r7, #0
 80298da:	dcd9      	bgt.n	8029890 <__ieee754_pow+0x234>
 80298dc:	e7e0      	b.n	80298a0 <__ieee754_pow+0x244>
 80298de:	46c0      	nop			@ (mov r8, r8)
 80298e0:	fff00000 	.word	0xfff00000
 80298e4:	7ff00000 	.word	0x7ff00000
 80298e8:	c0100000 	.word	0xc0100000
 80298ec:	433fffff 	.word	0x433fffff
 80298f0:	3fefffff 	.word	0x3fefffff
 80298f4:	fffffc01 	.word	0xfffffc01
 80298f8:	3ff00000 	.word	0x3ff00000
 80298fc:	3fe00000 	.word	0x3fe00000
 8029900:	43f00000 	.word	0x43f00000
 8029904:	bff00000 	.word	0xbff00000
 8029908:	3feffffe 	.word	0x3feffffe
 802990c:	9800      	ldr	r0, [sp, #0]
 802990e:	9901      	ldr	r1, [sp, #4]
 8029910:	4b4d      	ldr	r3, [pc, #308]	@ (8029a48 <__ieee754_pow+0x3ec>)
 8029912:	f7d9 fb05 	bl	8002f20 <__aeabi_dsub>
 8029916:	22c0      	movs	r2, #192	@ 0xc0
 8029918:	4b4c      	ldr	r3, [pc, #304]	@ (8029a4c <__ieee754_pow+0x3f0>)
 802991a:	05d2      	lsls	r2, r2, #23
 802991c:	0006      	movs	r6, r0
 802991e:	000f      	movs	r7, r1
 8029920:	f7d9 f818 	bl	8002954 <__aeabi_dmul>
 8029924:	4a4a      	ldr	r2, [pc, #296]	@ (8029a50 <__ieee754_pow+0x3f4>)
 8029926:	9002      	str	r0, [sp, #8]
 8029928:	9103      	str	r1, [sp, #12]
 802992a:	4b4a      	ldr	r3, [pc, #296]	@ (8029a54 <__ieee754_pow+0x3f8>)
 802992c:	0030      	movs	r0, r6
 802992e:	0039      	movs	r1, r7
 8029930:	f7d9 f810 	bl	8002954 <__aeabi_dmul>
 8029934:	2200      	movs	r2, #0
 8029936:	9000      	str	r0, [sp, #0]
 8029938:	9101      	str	r1, [sp, #4]
 802993a:	4b47      	ldr	r3, [pc, #284]	@ (8029a58 <__ieee754_pow+0x3fc>)
 802993c:	0030      	movs	r0, r6
 802993e:	0039      	movs	r1, r7
 8029940:	f7d9 f808 	bl	8002954 <__aeabi_dmul>
 8029944:	0002      	movs	r2, r0
 8029946:	000b      	movs	r3, r1
 8029948:	4844      	ldr	r0, [pc, #272]	@ (8029a5c <__ieee754_pow+0x400>)
 802994a:	4945      	ldr	r1, [pc, #276]	@ (8029a60 <__ieee754_pow+0x404>)
 802994c:	f7d9 fae8 	bl	8002f20 <__aeabi_dsub>
 8029950:	0032      	movs	r2, r6
 8029952:	003b      	movs	r3, r7
 8029954:	f7d8 fffe 	bl	8002954 <__aeabi_dmul>
 8029958:	0002      	movs	r2, r0
 802995a:	000b      	movs	r3, r1
 802995c:	2000      	movs	r0, #0
 802995e:	4941      	ldr	r1, [pc, #260]	@ (8029a64 <__ieee754_pow+0x408>)
 8029960:	f7d9 fade 	bl	8002f20 <__aeabi_dsub>
 8029964:	0032      	movs	r2, r6
 8029966:	0004      	movs	r4, r0
 8029968:	000d      	movs	r5, r1
 802996a:	003b      	movs	r3, r7
 802996c:	0030      	movs	r0, r6
 802996e:	0039      	movs	r1, r7
 8029970:	f7d8 fff0 	bl	8002954 <__aeabi_dmul>
 8029974:	0002      	movs	r2, r0
 8029976:	000b      	movs	r3, r1
 8029978:	0020      	movs	r0, r4
 802997a:	0029      	movs	r1, r5
 802997c:	f7d8 ffea 	bl	8002954 <__aeabi_dmul>
 8029980:	4a39      	ldr	r2, [pc, #228]	@ (8029a68 <__ieee754_pow+0x40c>)
 8029982:	4b32      	ldr	r3, [pc, #200]	@ (8029a4c <__ieee754_pow+0x3f0>)
 8029984:	f7d8 ffe6 	bl	8002954 <__aeabi_dmul>
 8029988:	0002      	movs	r2, r0
 802998a:	000b      	movs	r3, r1
 802998c:	9800      	ldr	r0, [sp, #0]
 802998e:	9901      	ldr	r1, [sp, #4]
 8029990:	f7d9 fac6 	bl	8002f20 <__aeabi_dsub>
 8029994:	0002      	movs	r2, r0
 8029996:	000b      	movs	r3, r1
 8029998:	0004      	movs	r4, r0
 802999a:	000d      	movs	r5, r1
 802999c:	9802      	ldr	r0, [sp, #8]
 802999e:	9903      	ldr	r1, [sp, #12]
 80299a0:	f7d7 ffd8 	bl	8001954 <__aeabi_dadd>
 80299a4:	9a02      	ldr	r2, [sp, #8]
 80299a6:	9b03      	ldr	r3, [sp, #12]
 80299a8:	2000      	movs	r0, #0
 80299aa:	9000      	str	r0, [sp, #0]
 80299ac:	9101      	str	r1, [sp, #4]
 80299ae:	f7d9 fab7 	bl	8002f20 <__aeabi_dsub>
 80299b2:	0002      	movs	r2, r0
 80299b4:	000b      	movs	r3, r1
 80299b6:	0020      	movs	r0, r4
 80299b8:	0029      	movs	r1, r5
 80299ba:	f7d9 fab1 	bl	8002f20 <__aeabi_dsub>
 80299be:	9c04      	ldr	r4, [sp, #16]
 80299c0:	9d05      	ldr	r5, [sp, #20]
 80299c2:	2400      	movs	r4, #0
 80299c4:	0006      	movs	r6, r0
 80299c6:	000f      	movs	r7, r1
 80299c8:	9804      	ldr	r0, [sp, #16]
 80299ca:	9905      	ldr	r1, [sp, #20]
 80299cc:	0022      	movs	r2, r4
 80299ce:	002b      	movs	r3, r5
 80299d0:	9402      	str	r4, [sp, #8]
 80299d2:	9503      	str	r5, [sp, #12]
 80299d4:	f7d9 faa4 	bl	8002f20 <__aeabi_dsub>
 80299d8:	9a00      	ldr	r2, [sp, #0]
 80299da:	9b01      	ldr	r3, [sp, #4]
 80299dc:	f7d8 ffba 	bl	8002954 <__aeabi_dmul>
 80299e0:	9a04      	ldr	r2, [sp, #16]
 80299e2:	9b05      	ldr	r3, [sp, #20]
 80299e4:	9008      	str	r0, [sp, #32]
 80299e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80299e8:	0030      	movs	r0, r6
 80299ea:	0039      	movs	r1, r7
 80299ec:	f7d8 ffb2 	bl	8002954 <__aeabi_dmul>
 80299f0:	0002      	movs	r2, r0
 80299f2:	000b      	movs	r3, r1
 80299f4:	9808      	ldr	r0, [sp, #32]
 80299f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80299f8:	f7d7 ffac 	bl	8001954 <__aeabi_dadd>
 80299fc:	0022      	movs	r2, r4
 80299fe:	002b      	movs	r3, r5
 8029a00:	9004      	str	r0, [sp, #16]
 8029a02:	9105      	str	r1, [sp, #20]
 8029a04:	9800      	ldr	r0, [sp, #0]
 8029a06:	9901      	ldr	r1, [sp, #4]
 8029a08:	f7d8 ffa4 	bl	8002954 <__aeabi_dmul>
 8029a0c:	000b      	movs	r3, r1
 8029a0e:	0002      	movs	r2, r0
 8029a10:	9000      	str	r0, [sp, #0]
 8029a12:	9101      	str	r1, [sp, #4]
 8029a14:	9804      	ldr	r0, [sp, #16]
 8029a16:	9905      	ldr	r1, [sp, #20]
 8029a18:	f7d7 ff9c 	bl	8001954 <__aeabi_dadd>
 8029a1c:	4b13      	ldr	r3, [pc, #76]	@ (8029a6c <__ieee754_pow+0x410>)
 8029a1e:	0006      	movs	r6, r0
 8029a20:	000f      	movs	r7, r1
 8029a22:	9108      	str	r1, [sp, #32]
 8029a24:	4299      	cmp	r1, r3
 8029a26:	dc00      	bgt.n	8029a2a <__ieee754_pow+0x3ce>
 8029a28:	e1c0      	b.n	8029dac <__ieee754_pow+0x750>
 8029a2a:	4b11      	ldr	r3, [pc, #68]	@ (8029a70 <__ieee754_pow+0x414>)
 8029a2c:	18cb      	adds	r3, r1, r3
 8029a2e:	4303      	orrs	r3, r0
 8029a30:	42a3      	cmp	r3, r4
 8029a32:	d100      	bne.n	8029a36 <__ieee754_pow+0x3da>
 8029a34:	e1a1      	b.n	8029d7a <__ieee754_pow+0x71e>
 8029a36:	9806      	ldr	r0, [sp, #24]
 8029a38:	9907      	ldr	r1, [sp, #28]
 8029a3a:	2300      	movs	r3, #0
 8029a3c:	2200      	movs	r2, #0
 8029a3e:	f7d6 fd3d 	bl	80004bc <__aeabi_dcmplt>
 8029a42:	1e43      	subs	r3, r0, #1
 8029a44:	4198      	sbcs	r0, r3
 8029a46:	e723      	b.n	8029890 <__ieee754_pow+0x234>
 8029a48:	3ff00000 	.word	0x3ff00000
 8029a4c:	3ff71547 	.word	0x3ff71547
 8029a50:	f85ddf44 	.word	0xf85ddf44
 8029a54:	3e54ae0b 	.word	0x3e54ae0b
 8029a58:	3fd00000 	.word	0x3fd00000
 8029a5c:	55555555 	.word	0x55555555
 8029a60:	3fd55555 	.word	0x3fd55555
 8029a64:	3fe00000 	.word	0x3fe00000
 8029a68:	652b82fe 	.word	0x652b82fe
 8029a6c:	408fffff 	.word	0x408fffff
 8029a70:	bf700000 	.word	0xbf700000
 8029a74:	4bdc      	ldr	r3, [pc, #880]	@ (8029de8 <__ieee754_pow+0x78c>)
 8029a76:	9903      	ldr	r1, [sp, #12]
 8029a78:	2200      	movs	r2, #0
 8029a7a:	420b      	tst	r3, r1
 8029a7c:	d10b      	bne.n	8029a96 <__ieee754_pow+0x43a>
 8029a7e:	9800      	ldr	r0, [sp, #0]
 8029a80:	9901      	ldr	r1, [sp, #4]
 8029a82:	2200      	movs	r2, #0
 8029a84:	4bd9      	ldr	r3, [pc, #868]	@ (8029dec <__ieee754_pow+0x790>)
 8029a86:	f7d8 ff65 	bl	8002954 <__aeabi_dmul>
 8029a8a:	2235      	movs	r2, #53	@ 0x35
 8029a8c:	9000      	str	r0, [sp, #0]
 8029a8e:	9101      	str	r1, [sp, #4]
 8029a90:	9b01      	ldr	r3, [sp, #4]
 8029a92:	4252      	negs	r2, r2
 8029a94:	9308      	str	r3, [sp, #32]
 8029a96:	9b08      	ldr	r3, [sp, #32]
 8029a98:	49d5      	ldr	r1, [pc, #852]	@ (8029df0 <__ieee754_pow+0x794>)
 8029a9a:	151b      	asrs	r3, r3, #20
 8029a9c:	185b      	adds	r3, r3, r1
 8029a9e:	189b      	adds	r3, r3, r2
 8029aa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8029aa2:	9b08      	ldr	r3, [sp, #32]
 8029aa4:	4dd3      	ldr	r5, [pc, #844]	@ (8029df4 <__ieee754_pow+0x798>)
 8029aa6:	031b      	lsls	r3, r3, #12
 8029aa8:	4ad3      	ldr	r2, [pc, #844]	@ (8029df8 <__ieee754_pow+0x79c>)
 8029aaa:	0b1b      	lsrs	r3, r3, #12
 8029aac:	2600      	movs	r6, #0
 8029aae:	431d      	orrs	r5, r3
 8029ab0:	4293      	cmp	r3, r2
 8029ab2:	dd09      	ble.n	8029ac8 <__ieee754_pow+0x46c>
 8029ab4:	4ad1      	ldr	r2, [pc, #836]	@ (8029dfc <__ieee754_pow+0x7a0>)
 8029ab6:	3601      	adds	r6, #1
 8029ab8:	4293      	cmp	r3, r2
 8029aba:	dd05      	ble.n	8029ac8 <__ieee754_pow+0x46c>
 8029abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029abe:	199b      	adds	r3, r3, r6
 8029ac0:	2600      	movs	r6, #0
 8029ac2:	930e      	str	r3, [sp, #56]	@ 0x38
 8029ac4:	4bce      	ldr	r3, [pc, #824]	@ (8029e00 <__ieee754_pow+0x7a4>)
 8029ac6:	18ed      	adds	r5, r5, r3
 8029ac8:	9800      	ldr	r0, [sp, #0]
 8029aca:	9901      	ldr	r1, [sp, #4]
 8029acc:	0029      	movs	r1, r5
 8029ace:	4bcd      	ldr	r3, [pc, #820]	@ (8029e04 <__ieee754_pow+0x7a8>)
 8029ad0:	00f2      	lsls	r2, r6, #3
 8029ad2:	189b      	adds	r3, r3, r2
 8029ad4:	685c      	ldr	r4, [r3, #4]
 8029ad6:	681b      	ldr	r3, [r3, #0]
 8029ad8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029ada:	930a      	str	r3, [sp, #40]	@ 0x28
 8029adc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029ade:	001a      	movs	r2, r3
 8029ae0:	0023      	movs	r3, r4
 8029ae2:	900c      	str	r0, [sp, #48]	@ 0x30
 8029ae4:	910d      	str	r1, [sp, #52]	@ 0x34
 8029ae6:	f7d9 fa1b 	bl	8002f20 <__aeabi_dsub>
 8029aea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029aec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029aee:	9010      	str	r0, [sp, #64]	@ 0x40
 8029af0:	9111      	str	r1, [sp, #68]	@ 0x44
 8029af2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029af4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029af6:	f7d7 ff2d 	bl	8001954 <__aeabi_dadd>
 8029afa:	0002      	movs	r2, r0
 8029afc:	000b      	movs	r3, r1
 8029afe:	2000      	movs	r0, #0
 8029b00:	49bc      	ldr	r1, [pc, #752]	@ (8029df4 <__ieee754_pow+0x798>)
 8029b02:	f7d8 faed 	bl	80020e0 <__aeabi_ddiv>
 8029b06:	0002      	movs	r2, r0
 8029b08:	000b      	movs	r3, r1
 8029b0a:	9012      	str	r0, [sp, #72]	@ 0x48
 8029b0c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8029b0e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029b10:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029b12:	f7d8 ff1f 	bl	8002954 <__aeabi_dmul>
 8029b16:	9008      	str	r0, [sp, #32]
 8029b18:	9109      	str	r1, [sp, #36]	@ 0x24
 8029b1a:	9b08      	ldr	r3, [sp, #32]
 8029b1c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029b1e:	2180      	movs	r1, #128	@ 0x80
 8029b20:	9302      	str	r3, [sp, #8]
 8029b22:	9403      	str	r4, [sp, #12]
 8029b24:	2080      	movs	r0, #128	@ 0x80
 8029b26:	2300      	movs	r3, #0
 8029b28:	2200      	movs	r2, #0
 8029b2a:	106d      	asrs	r5, r5, #1
 8029b2c:	0589      	lsls	r1, r1, #22
 8029b2e:	9302      	str	r3, [sp, #8]
 8029b30:	4329      	orrs	r1, r5
 8029b32:	0300      	lsls	r0, r0, #12
 8029b34:	9b02      	ldr	r3, [sp, #8]
 8029b36:	9c03      	ldr	r4, [sp, #12]
 8029b38:	1809      	adds	r1, r1, r0
 8029b3a:	9300      	str	r3, [sp, #0]
 8029b3c:	9401      	str	r4, [sp, #4]
 8029b3e:	04b6      	lsls	r6, r6, #18
 8029b40:	198b      	adds	r3, r1, r6
 8029b42:	9800      	ldr	r0, [sp, #0]
 8029b44:	9901      	ldr	r1, [sp, #4]
 8029b46:	0014      	movs	r4, r2
 8029b48:	001d      	movs	r5, r3
 8029b4a:	f7d8 ff03 	bl	8002954 <__aeabi_dmul>
 8029b4e:	0002      	movs	r2, r0
 8029b50:	000b      	movs	r3, r1
 8029b52:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029b54:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029b56:	f7d9 f9e3 	bl	8002f20 <__aeabi_dsub>
 8029b5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029b5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029b5e:	0006      	movs	r6, r0
 8029b60:	000f      	movs	r7, r1
 8029b62:	0020      	movs	r0, r4
 8029b64:	0029      	movs	r1, r5
 8029b66:	f7d9 f9db 	bl	8002f20 <__aeabi_dsub>
 8029b6a:	0002      	movs	r2, r0
 8029b6c:	000b      	movs	r3, r1
 8029b6e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029b70:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029b72:	f7d9 f9d5 	bl	8002f20 <__aeabi_dsub>
 8029b76:	9a00      	ldr	r2, [sp, #0]
 8029b78:	9b01      	ldr	r3, [sp, #4]
 8029b7a:	f7d8 feeb 	bl	8002954 <__aeabi_dmul>
 8029b7e:	0002      	movs	r2, r0
 8029b80:	000b      	movs	r3, r1
 8029b82:	0030      	movs	r0, r6
 8029b84:	0039      	movs	r1, r7
 8029b86:	f7d9 f9cb 	bl	8002f20 <__aeabi_dsub>
 8029b8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029b8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029b8e:	f7d8 fee1 	bl	8002954 <__aeabi_dmul>
 8029b92:	9a08      	ldr	r2, [sp, #32]
 8029b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b96:	900a      	str	r0, [sp, #40]	@ 0x28
 8029b98:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029b9a:	0010      	movs	r0, r2
 8029b9c:	0019      	movs	r1, r3
 8029b9e:	f7d8 fed9 	bl	8002954 <__aeabi_dmul>
 8029ba2:	0006      	movs	r6, r0
 8029ba4:	000f      	movs	r7, r1
 8029ba6:	4a98      	ldr	r2, [pc, #608]	@ (8029e08 <__ieee754_pow+0x7ac>)
 8029ba8:	4b98      	ldr	r3, [pc, #608]	@ (8029e0c <__ieee754_pow+0x7b0>)
 8029baa:	f7d8 fed3 	bl	8002954 <__aeabi_dmul>
 8029bae:	4a98      	ldr	r2, [pc, #608]	@ (8029e10 <__ieee754_pow+0x7b4>)
 8029bb0:	4b98      	ldr	r3, [pc, #608]	@ (8029e14 <__ieee754_pow+0x7b8>)
 8029bb2:	f7d7 fecf 	bl	8001954 <__aeabi_dadd>
 8029bb6:	0032      	movs	r2, r6
 8029bb8:	003b      	movs	r3, r7
 8029bba:	f7d8 fecb 	bl	8002954 <__aeabi_dmul>
 8029bbe:	4a96      	ldr	r2, [pc, #600]	@ (8029e18 <__ieee754_pow+0x7bc>)
 8029bc0:	4b96      	ldr	r3, [pc, #600]	@ (8029e1c <__ieee754_pow+0x7c0>)
 8029bc2:	f7d7 fec7 	bl	8001954 <__aeabi_dadd>
 8029bc6:	0032      	movs	r2, r6
 8029bc8:	003b      	movs	r3, r7
 8029bca:	f7d8 fec3 	bl	8002954 <__aeabi_dmul>
 8029bce:	4a94      	ldr	r2, [pc, #592]	@ (8029e20 <__ieee754_pow+0x7c4>)
 8029bd0:	4b94      	ldr	r3, [pc, #592]	@ (8029e24 <__ieee754_pow+0x7c8>)
 8029bd2:	f7d7 febf 	bl	8001954 <__aeabi_dadd>
 8029bd6:	0032      	movs	r2, r6
 8029bd8:	003b      	movs	r3, r7
 8029bda:	f7d8 febb 	bl	8002954 <__aeabi_dmul>
 8029bde:	4a92      	ldr	r2, [pc, #584]	@ (8029e28 <__ieee754_pow+0x7cc>)
 8029be0:	4b92      	ldr	r3, [pc, #584]	@ (8029e2c <__ieee754_pow+0x7d0>)
 8029be2:	f7d7 feb7 	bl	8001954 <__aeabi_dadd>
 8029be6:	0032      	movs	r2, r6
 8029be8:	003b      	movs	r3, r7
 8029bea:	f7d8 feb3 	bl	8002954 <__aeabi_dmul>
 8029bee:	4a90      	ldr	r2, [pc, #576]	@ (8029e30 <__ieee754_pow+0x7d4>)
 8029bf0:	4b90      	ldr	r3, [pc, #576]	@ (8029e34 <__ieee754_pow+0x7d8>)
 8029bf2:	f7d7 feaf 	bl	8001954 <__aeabi_dadd>
 8029bf6:	0032      	movs	r2, r6
 8029bf8:	0004      	movs	r4, r0
 8029bfa:	000d      	movs	r5, r1
 8029bfc:	003b      	movs	r3, r7
 8029bfe:	0030      	movs	r0, r6
 8029c00:	0039      	movs	r1, r7
 8029c02:	f7d8 fea7 	bl	8002954 <__aeabi_dmul>
 8029c06:	0002      	movs	r2, r0
 8029c08:	000b      	movs	r3, r1
 8029c0a:	0020      	movs	r0, r4
 8029c0c:	0029      	movs	r1, r5
 8029c0e:	f7d8 fea1 	bl	8002954 <__aeabi_dmul>
 8029c12:	9a00      	ldr	r2, [sp, #0]
 8029c14:	9b01      	ldr	r3, [sp, #4]
 8029c16:	0004      	movs	r4, r0
 8029c18:	000d      	movs	r5, r1
 8029c1a:	9808      	ldr	r0, [sp, #32]
 8029c1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029c1e:	f7d7 fe99 	bl	8001954 <__aeabi_dadd>
 8029c22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029c24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029c26:	f7d8 fe95 	bl	8002954 <__aeabi_dmul>
 8029c2a:	0022      	movs	r2, r4
 8029c2c:	002b      	movs	r3, r5
 8029c2e:	f7d7 fe91 	bl	8001954 <__aeabi_dadd>
 8029c32:	9a00      	ldr	r2, [sp, #0]
 8029c34:	9b01      	ldr	r3, [sp, #4]
 8029c36:	900c      	str	r0, [sp, #48]	@ 0x30
 8029c38:	910d      	str	r1, [sp, #52]	@ 0x34
 8029c3a:	0010      	movs	r0, r2
 8029c3c:	0019      	movs	r1, r3
 8029c3e:	f7d8 fe89 	bl	8002954 <__aeabi_dmul>
 8029c42:	2200      	movs	r2, #0
 8029c44:	4b7c      	ldr	r3, [pc, #496]	@ (8029e38 <__ieee754_pow+0x7dc>)
 8029c46:	0004      	movs	r4, r0
 8029c48:	000d      	movs	r5, r1
 8029c4a:	f7d7 fe83 	bl	8001954 <__aeabi_dadd>
 8029c4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029c50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029c52:	f7d7 fe7f 	bl	8001954 <__aeabi_dadd>
 8029c56:	2000      	movs	r0, #0
 8029c58:	000f      	movs	r7, r1
 8029c5a:	0006      	movs	r6, r0
 8029c5c:	0002      	movs	r2, r0
 8029c5e:	000b      	movs	r3, r1
 8029c60:	9800      	ldr	r0, [sp, #0]
 8029c62:	9901      	ldr	r1, [sp, #4]
 8029c64:	f7d8 fe76 	bl	8002954 <__aeabi_dmul>
 8029c68:	2200      	movs	r2, #0
 8029c6a:	9000      	str	r0, [sp, #0]
 8029c6c:	9101      	str	r1, [sp, #4]
 8029c6e:	4b72      	ldr	r3, [pc, #456]	@ (8029e38 <__ieee754_pow+0x7dc>)
 8029c70:	0030      	movs	r0, r6
 8029c72:	0039      	movs	r1, r7
 8029c74:	f7d9 f954 	bl	8002f20 <__aeabi_dsub>
 8029c78:	0022      	movs	r2, r4
 8029c7a:	002b      	movs	r3, r5
 8029c7c:	f7d9 f950 	bl	8002f20 <__aeabi_dsub>
 8029c80:	0002      	movs	r2, r0
 8029c82:	000b      	movs	r3, r1
 8029c84:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029c86:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029c88:	f7d9 f94a 	bl	8002f20 <__aeabi_dsub>
 8029c8c:	9a08      	ldr	r2, [sp, #32]
 8029c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c90:	f7d8 fe60 	bl	8002954 <__aeabi_dmul>
 8029c94:	0032      	movs	r2, r6
 8029c96:	0004      	movs	r4, r0
 8029c98:	000d      	movs	r5, r1
 8029c9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029c9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029c9e:	003b      	movs	r3, r7
 8029ca0:	f7d8 fe58 	bl	8002954 <__aeabi_dmul>
 8029ca4:	0002      	movs	r2, r0
 8029ca6:	000b      	movs	r3, r1
 8029ca8:	0020      	movs	r0, r4
 8029caa:	0029      	movs	r1, r5
 8029cac:	f7d7 fe52 	bl	8001954 <__aeabi_dadd>
 8029cb0:	0004      	movs	r4, r0
 8029cb2:	000d      	movs	r5, r1
 8029cb4:	0002      	movs	r2, r0
 8029cb6:	000b      	movs	r3, r1
 8029cb8:	9800      	ldr	r0, [sp, #0]
 8029cba:	9901      	ldr	r1, [sp, #4]
 8029cbc:	f7d7 fe4a 	bl	8001954 <__aeabi_dadd>
 8029cc0:	22e0      	movs	r2, #224	@ 0xe0
 8029cc2:	2000      	movs	r0, #0
 8029cc4:	4b5d      	ldr	r3, [pc, #372]	@ (8029e3c <__ieee754_pow+0x7e0>)
 8029cc6:	0612      	lsls	r2, r2, #24
 8029cc8:	0006      	movs	r6, r0
 8029cca:	000f      	movs	r7, r1
 8029ccc:	f7d8 fe42 	bl	8002954 <__aeabi_dmul>
 8029cd0:	9008      	str	r0, [sp, #32]
 8029cd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8029cd4:	9a00      	ldr	r2, [sp, #0]
 8029cd6:	9b01      	ldr	r3, [sp, #4]
 8029cd8:	0030      	movs	r0, r6
 8029cda:	0039      	movs	r1, r7
 8029cdc:	f7d9 f920 	bl	8002f20 <__aeabi_dsub>
 8029ce0:	0002      	movs	r2, r0
 8029ce2:	000b      	movs	r3, r1
 8029ce4:	0020      	movs	r0, r4
 8029ce6:	0029      	movs	r1, r5
 8029ce8:	f7d9 f91a 	bl	8002f20 <__aeabi_dsub>
 8029cec:	4a54      	ldr	r2, [pc, #336]	@ (8029e40 <__ieee754_pow+0x7e4>)
 8029cee:	4b53      	ldr	r3, [pc, #332]	@ (8029e3c <__ieee754_pow+0x7e0>)
 8029cf0:	f7d8 fe30 	bl	8002954 <__aeabi_dmul>
 8029cf4:	4a53      	ldr	r2, [pc, #332]	@ (8029e44 <__ieee754_pow+0x7e8>)
 8029cf6:	0004      	movs	r4, r0
 8029cf8:	000d      	movs	r5, r1
 8029cfa:	0030      	movs	r0, r6
 8029cfc:	0039      	movs	r1, r7
 8029cfe:	4b52      	ldr	r3, [pc, #328]	@ (8029e48 <__ieee754_pow+0x7ec>)
 8029d00:	f7d8 fe28 	bl	8002954 <__aeabi_dmul>
 8029d04:	0002      	movs	r2, r0
 8029d06:	000b      	movs	r3, r1
 8029d08:	0020      	movs	r0, r4
 8029d0a:	0029      	movs	r1, r5
 8029d0c:	f7d7 fe22 	bl	8001954 <__aeabi_dadd>
 8029d10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029d12:	4b4e      	ldr	r3, [pc, #312]	@ (8029e4c <__ieee754_pow+0x7f0>)
 8029d14:	189b      	adds	r3, r3, r2
 8029d16:	681a      	ldr	r2, [r3, #0]
 8029d18:	685b      	ldr	r3, [r3, #4]
 8029d1a:	f7d7 fe1b 	bl	8001954 <__aeabi_dadd>
 8029d1e:	900a      	str	r0, [sp, #40]	@ 0x28
 8029d20:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029d22:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029d24:	f7d9 fd64 	bl	80037f0 <__aeabi_i2d>
 8029d28:	0004      	movs	r4, r0
 8029d2a:	000d      	movs	r5, r1
 8029d2c:	9808      	ldr	r0, [sp, #32]
 8029d2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029d30:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029d32:	4b47      	ldr	r3, [pc, #284]	@ (8029e50 <__ieee754_pow+0x7f4>)
 8029d34:	189b      	adds	r3, r3, r2
 8029d36:	681e      	ldr	r6, [r3, #0]
 8029d38:	685f      	ldr	r7, [r3, #4]
 8029d3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029d3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029d3e:	f7d7 fe09 	bl	8001954 <__aeabi_dadd>
 8029d42:	0032      	movs	r2, r6
 8029d44:	003b      	movs	r3, r7
 8029d46:	f7d7 fe05 	bl	8001954 <__aeabi_dadd>
 8029d4a:	0022      	movs	r2, r4
 8029d4c:	002b      	movs	r3, r5
 8029d4e:	f7d7 fe01 	bl	8001954 <__aeabi_dadd>
 8029d52:	2000      	movs	r0, #0
 8029d54:	0022      	movs	r2, r4
 8029d56:	002b      	movs	r3, r5
 8029d58:	9000      	str	r0, [sp, #0]
 8029d5a:	9101      	str	r1, [sp, #4]
 8029d5c:	f7d9 f8e0 	bl	8002f20 <__aeabi_dsub>
 8029d60:	0032      	movs	r2, r6
 8029d62:	003b      	movs	r3, r7
 8029d64:	f7d9 f8dc 	bl	8002f20 <__aeabi_dsub>
 8029d68:	9a08      	ldr	r2, [sp, #32]
 8029d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029d6c:	f7d9 f8d8 	bl	8002f20 <__aeabi_dsub>
 8029d70:	0002      	movs	r2, r0
 8029d72:	000b      	movs	r3, r1
 8029d74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029d76:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029d78:	e61f      	b.n	80299ba <__ieee754_pow+0x35e>
 8029d7a:	4a36      	ldr	r2, [pc, #216]	@ (8029e54 <__ieee754_pow+0x7f8>)
 8029d7c:	4b36      	ldr	r3, [pc, #216]	@ (8029e58 <__ieee754_pow+0x7fc>)
 8029d7e:	9804      	ldr	r0, [sp, #16]
 8029d80:	9905      	ldr	r1, [sp, #20]
 8029d82:	f7d7 fde7 	bl	8001954 <__aeabi_dadd>
 8029d86:	9a00      	ldr	r2, [sp, #0]
 8029d88:	9b01      	ldr	r3, [sp, #4]
 8029d8a:	0004      	movs	r4, r0
 8029d8c:	000d      	movs	r5, r1
 8029d8e:	0030      	movs	r0, r6
 8029d90:	0039      	movs	r1, r7
 8029d92:	f7d9 f8c5 	bl	8002f20 <__aeabi_dsub>
 8029d96:	0002      	movs	r2, r0
 8029d98:	000b      	movs	r3, r1
 8029d9a:	0020      	movs	r0, r4
 8029d9c:	0029      	movs	r1, r5
 8029d9e:	f7d6 fba1 	bl	80004e4 <__aeabi_dcmpgt>
 8029da2:	2800      	cmp	r0, #0
 8029da4:	d000      	beq.n	8029da8 <__ieee754_pow+0x74c>
 8029da6:	e646      	b.n	8029a36 <__ieee754_pow+0x3da>
 8029da8:	4b2c      	ldr	r3, [pc, #176]	@ (8029e5c <__ieee754_pow+0x800>)
 8029daa:	e063      	b.n	8029e74 <__ieee754_pow+0x818>
 8029dac:	4a2c      	ldr	r2, [pc, #176]	@ (8029e60 <__ieee754_pow+0x804>)
 8029dae:	004b      	lsls	r3, r1, #1
 8029db0:	085b      	lsrs	r3, r3, #1
 8029db2:	4293      	cmp	r3, r2
 8029db4:	d95a      	bls.n	8029e6c <__ieee754_pow+0x810>
 8029db6:	4b2b      	ldr	r3, [pc, #172]	@ (8029e64 <__ieee754_pow+0x808>)
 8029db8:	18cb      	adds	r3, r1, r3
 8029dba:	4303      	orrs	r3, r0
 8029dbc:	d008      	beq.n	8029dd0 <__ieee754_pow+0x774>
 8029dbe:	9806      	ldr	r0, [sp, #24]
 8029dc0:	9907      	ldr	r1, [sp, #28]
 8029dc2:	2300      	movs	r3, #0
 8029dc4:	2200      	movs	r2, #0
 8029dc6:	f7d6 fb79 	bl	80004bc <__aeabi_dcmplt>
 8029dca:	1e43      	subs	r3, r0, #1
 8029dcc:	4198      	sbcs	r0, r3
 8029dce:	e567      	b.n	80298a0 <__ieee754_pow+0x244>
 8029dd0:	9a00      	ldr	r2, [sp, #0]
 8029dd2:	9b01      	ldr	r3, [sp, #4]
 8029dd4:	f7d9 f8a4 	bl	8002f20 <__aeabi_dsub>
 8029dd8:	9a04      	ldr	r2, [sp, #16]
 8029dda:	9b05      	ldr	r3, [sp, #20]
 8029ddc:	f7d6 fb8c 	bl	80004f8 <__aeabi_dcmpge>
 8029de0:	2800      	cmp	r0, #0
 8029de2:	d1ec      	bne.n	8029dbe <__ieee754_pow+0x762>
 8029de4:	4b20      	ldr	r3, [pc, #128]	@ (8029e68 <__ieee754_pow+0x80c>)
 8029de6:	e045      	b.n	8029e74 <__ieee754_pow+0x818>
 8029de8:	7ff00000 	.word	0x7ff00000
 8029dec:	43400000 	.word	0x43400000
 8029df0:	fffffc01 	.word	0xfffffc01
 8029df4:	3ff00000 	.word	0x3ff00000
 8029df8:	0003988e 	.word	0x0003988e
 8029dfc:	000bb679 	.word	0x000bb679
 8029e00:	fff00000 	.word	0xfff00000
 8029e04:	0802ede0 	.word	0x0802ede0
 8029e08:	4a454eef 	.word	0x4a454eef
 8029e0c:	3fca7e28 	.word	0x3fca7e28
 8029e10:	93c9db65 	.word	0x93c9db65
 8029e14:	3fcd864a 	.word	0x3fcd864a
 8029e18:	a91d4101 	.word	0xa91d4101
 8029e1c:	3fd17460 	.word	0x3fd17460
 8029e20:	518f264d 	.word	0x518f264d
 8029e24:	3fd55555 	.word	0x3fd55555
 8029e28:	db6fabff 	.word	0xdb6fabff
 8029e2c:	3fdb6db6 	.word	0x3fdb6db6
 8029e30:	33333303 	.word	0x33333303
 8029e34:	3fe33333 	.word	0x3fe33333
 8029e38:	40080000 	.word	0x40080000
 8029e3c:	3feec709 	.word	0x3feec709
 8029e40:	dc3a03fd 	.word	0xdc3a03fd
 8029e44:	145b01f5 	.word	0x145b01f5
 8029e48:	be3e2fe0 	.word	0xbe3e2fe0
 8029e4c:	0802edc0 	.word	0x0802edc0
 8029e50:	0802edd0 	.word	0x0802edd0
 8029e54:	652b82fe 	.word	0x652b82fe
 8029e58:	3c971547 	.word	0x3c971547
 8029e5c:	40900000 	.word	0x40900000
 8029e60:	4090cbff 	.word	0x4090cbff
 8029e64:	3f6f3400 	.word	0x3f6f3400
 8029e68:	4090cc00 	.word	0x4090cc00
 8029e6c:	4a73      	ldr	r2, [pc, #460]	@ (802a03c <__ieee754_pow+0x9e0>)
 8029e6e:	9402      	str	r4, [sp, #8]
 8029e70:	4293      	cmp	r3, r2
 8029e72:	d925      	bls.n	8029ec0 <__ieee754_pow+0x864>
 8029e74:	4a72      	ldr	r2, [pc, #456]	@ (802a040 <__ieee754_pow+0x9e4>)
 8029e76:	151b      	asrs	r3, r3, #20
 8029e78:	189b      	adds	r3, r3, r2
 8029e7a:	2280      	movs	r2, #128	@ 0x80
 8029e7c:	0352      	lsls	r2, r2, #13
 8029e7e:	0011      	movs	r1, r2
 8029e80:	4119      	asrs	r1, r3
 8029e82:	19cb      	adds	r3, r1, r7
 8029e84:	005c      	lsls	r4, r3, #1
 8029e86:	496f      	ldr	r1, [pc, #444]	@ (802a044 <__ieee754_pow+0x9e8>)
 8029e88:	4d6f      	ldr	r5, [pc, #444]	@ (802a048 <__ieee754_pow+0x9ec>)
 8029e8a:	0d64      	lsrs	r4, r4, #21
 8029e8c:	1864      	adds	r4, r4, r1
 8029e8e:	4125      	asrs	r5, r4
 8029e90:	401d      	ands	r5, r3
 8029e92:	031b      	lsls	r3, r3, #12
 8029e94:	0b1b      	lsrs	r3, r3, #12
 8029e96:	4313      	orrs	r3, r2
 8029e98:	2214      	movs	r2, #20
 8029e9a:	1b12      	subs	r2, r2, r4
 8029e9c:	4113      	asrs	r3, r2
 8029e9e:	9302      	str	r3, [sp, #8]
 8029ea0:	9b08      	ldr	r3, [sp, #32]
 8029ea2:	2000      	movs	r0, #0
 8029ea4:	0029      	movs	r1, r5
 8029ea6:	2b00      	cmp	r3, #0
 8029ea8:	da02      	bge.n	8029eb0 <__ieee754_pow+0x854>
 8029eaa:	9b02      	ldr	r3, [sp, #8]
 8029eac:	425b      	negs	r3, r3
 8029eae:	9302      	str	r3, [sp, #8]
 8029eb0:	0002      	movs	r2, r0
 8029eb2:	000b      	movs	r3, r1
 8029eb4:	9800      	ldr	r0, [sp, #0]
 8029eb6:	9901      	ldr	r1, [sp, #4]
 8029eb8:	f7d9 f832 	bl	8002f20 <__aeabi_dsub>
 8029ebc:	9000      	str	r0, [sp, #0]
 8029ebe:	9101      	str	r1, [sp, #4]
 8029ec0:	9a04      	ldr	r2, [sp, #16]
 8029ec2:	9b05      	ldr	r3, [sp, #20]
 8029ec4:	9800      	ldr	r0, [sp, #0]
 8029ec6:	9901      	ldr	r1, [sp, #4]
 8029ec8:	f7d7 fd44 	bl	8001954 <__aeabi_dadd>
 8029ecc:	2000      	movs	r0, #0
 8029ece:	2200      	movs	r2, #0
 8029ed0:	4b5e      	ldr	r3, [pc, #376]	@ (802a04c <__ieee754_pow+0x9f0>)
 8029ed2:	0006      	movs	r6, r0
 8029ed4:	000f      	movs	r7, r1
 8029ed6:	f7d8 fd3d 	bl	8002954 <__aeabi_dmul>
 8029eda:	9a00      	ldr	r2, [sp, #0]
 8029edc:	9b01      	ldr	r3, [sp, #4]
 8029ede:	9008      	str	r0, [sp, #32]
 8029ee0:	9109      	str	r1, [sp, #36]	@ 0x24
 8029ee2:	0030      	movs	r0, r6
 8029ee4:	0039      	movs	r1, r7
 8029ee6:	f7d9 f81b 	bl	8002f20 <__aeabi_dsub>
 8029eea:	0002      	movs	r2, r0
 8029eec:	000b      	movs	r3, r1
 8029eee:	9804      	ldr	r0, [sp, #16]
 8029ef0:	9905      	ldr	r1, [sp, #20]
 8029ef2:	f7d9 f815 	bl	8002f20 <__aeabi_dsub>
 8029ef6:	4a56      	ldr	r2, [pc, #344]	@ (802a050 <__ieee754_pow+0x9f4>)
 8029ef8:	4b56      	ldr	r3, [pc, #344]	@ (802a054 <__ieee754_pow+0x9f8>)
 8029efa:	f7d8 fd2b 	bl	8002954 <__aeabi_dmul>
 8029efe:	4a56      	ldr	r2, [pc, #344]	@ (802a058 <__ieee754_pow+0x9fc>)
 8029f00:	0004      	movs	r4, r0
 8029f02:	000d      	movs	r5, r1
 8029f04:	0030      	movs	r0, r6
 8029f06:	0039      	movs	r1, r7
 8029f08:	4b54      	ldr	r3, [pc, #336]	@ (802a05c <__ieee754_pow+0xa00>)
 8029f0a:	f7d8 fd23 	bl	8002954 <__aeabi_dmul>
 8029f0e:	0002      	movs	r2, r0
 8029f10:	000b      	movs	r3, r1
 8029f12:	0020      	movs	r0, r4
 8029f14:	0029      	movs	r1, r5
 8029f16:	f7d7 fd1d 	bl	8001954 <__aeabi_dadd>
 8029f1a:	0004      	movs	r4, r0
 8029f1c:	000d      	movs	r5, r1
 8029f1e:	0002      	movs	r2, r0
 8029f20:	000b      	movs	r3, r1
 8029f22:	9808      	ldr	r0, [sp, #32]
 8029f24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029f26:	f7d7 fd15 	bl	8001954 <__aeabi_dadd>
 8029f2a:	9a08      	ldr	r2, [sp, #32]
 8029f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f2e:	0006      	movs	r6, r0
 8029f30:	000f      	movs	r7, r1
 8029f32:	f7d8 fff5 	bl	8002f20 <__aeabi_dsub>
 8029f36:	0002      	movs	r2, r0
 8029f38:	000b      	movs	r3, r1
 8029f3a:	0020      	movs	r0, r4
 8029f3c:	0029      	movs	r1, r5
 8029f3e:	f7d8 ffef 	bl	8002f20 <__aeabi_dsub>
 8029f42:	0032      	movs	r2, r6
 8029f44:	9000      	str	r0, [sp, #0]
 8029f46:	9101      	str	r1, [sp, #4]
 8029f48:	003b      	movs	r3, r7
 8029f4a:	0030      	movs	r0, r6
 8029f4c:	0039      	movs	r1, r7
 8029f4e:	f7d8 fd01 	bl	8002954 <__aeabi_dmul>
 8029f52:	0004      	movs	r4, r0
 8029f54:	000d      	movs	r5, r1
 8029f56:	4a42      	ldr	r2, [pc, #264]	@ (802a060 <__ieee754_pow+0xa04>)
 8029f58:	4b42      	ldr	r3, [pc, #264]	@ (802a064 <__ieee754_pow+0xa08>)
 8029f5a:	f7d8 fcfb 	bl	8002954 <__aeabi_dmul>
 8029f5e:	4a42      	ldr	r2, [pc, #264]	@ (802a068 <__ieee754_pow+0xa0c>)
 8029f60:	4b42      	ldr	r3, [pc, #264]	@ (802a06c <__ieee754_pow+0xa10>)
 8029f62:	f7d8 ffdd 	bl	8002f20 <__aeabi_dsub>
 8029f66:	0022      	movs	r2, r4
 8029f68:	002b      	movs	r3, r5
 8029f6a:	f7d8 fcf3 	bl	8002954 <__aeabi_dmul>
 8029f6e:	4a40      	ldr	r2, [pc, #256]	@ (802a070 <__ieee754_pow+0xa14>)
 8029f70:	4b40      	ldr	r3, [pc, #256]	@ (802a074 <__ieee754_pow+0xa18>)
 8029f72:	f7d7 fcef 	bl	8001954 <__aeabi_dadd>
 8029f76:	0022      	movs	r2, r4
 8029f78:	002b      	movs	r3, r5
 8029f7a:	f7d8 fceb 	bl	8002954 <__aeabi_dmul>
 8029f7e:	4a3e      	ldr	r2, [pc, #248]	@ (802a078 <__ieee754_pow+0xa1c>)
 8029f80:	4b3e      	ldr	r3, [pc, #248]	@ (802a07c <__ieee754_pow+0xa20>)
 8029f82:	f7d8 ffcd 	bl	8002f20 <__aeabi_dsub>
 8029f86:	0022      	movs	r2, r4
 8029f88:	002b      	movs	r3, r5
 8029f8a:	f7d8 fce3 	bl	8002954 <__aeabi_dmul>
 8029f8e:	4a3c      	ldr	r2, [pc, #240]	@ (802a080 <__ieee754_pow+0xa24>)
 8029f90:	4b3c      	ldr	r3, [pc, #240]	@ (802a084 <__ieee754_pow+0xa28>)
 8029f92:	f7d7 fcdf 	bl	8001954 <__aeabi_dadd>
 8029f96:	0022      	movs	r2, r4
 8029f98:	002b      	movs	r3, r5
 8029f9a:	f7d8 fcdb 	bl	8002954 <__aeabi_dmul>
 8029f9e:	0002      	movs	r2, r0
 8029fa0:	000b      	movs	r3, r1
 8029fa2:	0030      	movs	r0, r6
 8029fa4:	0039      	movs	r1, r7
 8029fa6:	f7d8 ffbb 	bl	8002f20 <__aeabi_dsub>
 8029faa:	0004      	movs	r4, r0
 8029fac:	000d      	movs	r5, r1
 8029fae:	0002      	movs	r2, r0
 8029fb0:	000b      	movs	r3, r1
 8029fb2:	0030      	movs	r0, r6
 8029fb4:	0039      	movs	r1, r7
 8029fb6:	f7d8 fccd 	bl	8002954 <__aeabi_dmul>
 8029fba:	2380      	movs	r3, #128	@ 0x80
 8029fbc:	9004      	str	r0, [sp, #16]
 8029fbe:	9105      	str	r1, [sp, #20]
 8029fc0:	2200      	movs	r2, #0
 8029fc2:	0020      	movs	r0, r4
 8029fc4:	0029      	movs	r1, r5
 8029fc6:	05db      	lsls	r3, r3, #23
 8029fc8:	f7d8 ffaa 	bl	8002f20 <__aeabi_dsub>
 8029fcc:	0002      	movs	r2, r0
 8029fce:	000b      	movs	r3, r1
 8029fd0:	9804      	ldr	r0, [sp, #16]
 8029fd2:	9905      	ldr	r1, [sp, #20]
 8029fd4:	f7d8 f884 	bl	80020e0 <__aeabi_ddiv>
 8029fd8:	9a00      	ldr	r2, [sp, #0]
 8029fda:	9b01      	ldr	r3, [sp, #4]
 8029fdc:	0004      	movs	r4, r0
 8029fde:	000d      	movs	r5, r1
 8029fe0:	0030      	movs	r0, r6
 8029fe2:	0039      	movs	r1, r7
 8029fe4:	f7d8 fcb6 	bl	8002954 <__aeabi_dmul>
 8029fe8:	9a00      	ldr	r2, [sp, #0]
 8029fea:	9b01      	ldr	r3, [sp, #4]
 8029fec:	f7d7 fcb2 	bl	8001954 <__aeabi_dadd>
 8029ff0:	0002      	movs	r2, r0
 8029ff2:	000b      	movs	r3, r1
 8029ff4:	0020      	movs	r0, r4
 8029ff6:	0029      	movs	r1, r5
 8029ff8:	f7d8 ff92 	bl	8002f20 <__aeabi_dsub>
 8029ffc:	0032      	movs	r2, r6
 8029ffe:	003b      	movs	r3, r7
 802a000:	f7d8 ff8e 	bl	8002f20 <__aeabi_dsub>
 802a004:	0002      	movs	r2, r0
 802a006:	000b      	movs	r3, r1
 802a008:	2000      	movs	r0, #0
 802a00a:	491f      	ldr	r1, [pc, #124]	@ (802a088 <__ieee754_pow+0xa2c>)
 802a00c:	f7d8 ff88 	bl	8002f20 <__aeabi_dsub>
 802a010:	9b02      	ldr	r3, [sp, #8]
 802a012:	051b      	lsls	r3, r3, #20
 802a014:	185b      	adds	r3, r3, r1
 802a016:	151a      	asrs	r2, r3, #20
 802a018:	2a00      	cmp	r2, #0
 802a01a:	dc06      	bgt.n	802a02a <__ieee754_pow+0x9ce>
 802a01c:	9a02      	ldr	r2, [sp, #8]
 802a01e:	f000 f929 	bl	802a274 <scalbn>
 802a022:	9a06      	ldr	r2, [sp, #24]
 802a024:	9b07      	ldr	r3, [sp, #28]
 802a026:	f7ff fb8b 	bl	8029740 <__ieee754_pow+0xe4>
 802a02a:	0019      	movs	r1, r3
 802a02c:	e7f9      	b.n	802a022 <__ieee754_pow+0x9c6>
 802a02e:	2300      	movs	r3, #0
 802a030:	4c15      	ldr	r4, [pc, #84]	@ (802a088 <__ieee754_pow+0xa2c>)
 802a032:	9300      	str	r3, [sp, #0]
 802a034:	9401      	str	r4, [sp, #4]
 802a036:	f7ff fbc8 	bl	80297ca <__ieee754_pow+0x16e>
 802a03a:	46c0      	nop			@ (mov r8, r8)
 802a03c:	3fe00000 	.word	0x3fe00000
 802a040:	fffffc02 	.word	0xfffffc02
 802a044:	fffffc01 	.word	0xfffffc01
 802a048:	fff00000 	.word	0xfff00000
 802a04c:	3fe62e43 	.word	0x3fe62e43
 802a050:	fefa39ef 	.word	0xfefa39ef
 802a054:	3fe62e42 	.word	0x3fe62e42
 802a058:	0ca86c39 	.word	0x0ca86c39
 802a05c:	be205c61 	.word	0xbe205c61
 802a060:	72bea4d0 	.word	0x72bea4d0
 802a064:	3e663769 	.word	0x3e663769
 802a068:	c5d26bf1 	.word	0xc5d26bf1
 802a06c:	3ebbbd41 	.word	0x3ebbbd41
 802a070:	af25de2c 	.word	0xaf25de2c
 802a074:	3f11566a 	.word	0x3f11566a
 802a078:	16bebd93 	.word	0x16bebd93
 802a07c:	3f66c16c 	.word	0x3f66c16c
 802a080:	5555553e 	.word	0x5555553e
 802a084:	3fc55555 	.word	0x3fc55555
 802a088:	3ff00000 	.word	0x3ff00000

0802a08c <fabs>:
 802a08c:	0049      	lsls	r1, r1, #1
 802a08e:	084b      	lsrs	r3, r1, #1
 802a090:	0019      	movs	r1, r3
 802a092:	4770      	bx	lr

0802a094 <__ieee754_expf>:
 802a094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a096:	21ff      	movs	r1, #255	@ 0xff
 802a098:	0043      	lsls	r3, r0, #1
 802a09a:	1c04      	adds	r4, r0, #0
 802a09c:	085b      	lsrs	r3, r3, #1
 802a09e:	05c9      	lsls	r1, r1, #23
 802a0a0:	428b      	cmp	r3, r1
 802a0a2:	d904      	bls.n	802a0ae <__ieee754_expf+0x1a>
 802a0a4:	1c01      	adds	r1, r0, #0
 802a0a6:	1c20      	adds	r0, r4, #0
 802a0a8:	f7d6 fc0a 	bl	80008c0 <__aeabi_fadd>
 802a0ac:	e00d      	b.n	802a0ca <__ieee754_expf+0x36>
 802a0ae:	0fc6      	lsrs	r6, r0, #31
 802a0b0:	428b      	cmp	r3, r1
 802a0b2:	d104      	bne.n	802a0be <__ieee754_expf+0x2a>
 802a0b4:	2e00      	cmp	r6, #0
 802a0b6:	d000      	beq.n	802a0ba <__ieee754_expf+0x26>
 802a0b8:	e0ba      	b.n	802a230 <__ieee754_expf+0x19c>
 802a0ba:	1c20      	adds	r0, r4, #0
 802a0bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802a0be:	495d      	ldr	r1, [pc, #372]	@ (802a234 <__ieee754_expf+0x1a0>)
 802a0c0:	4288      	cmp	r0, r1
 802a0c2:	dd04      	ble.n	802a0ce <__ieee754_expf+0x3a>
 802a0c4:	2000      	movs	r0, #0
 802a0c6:	f000 f98a 	bl	802a3de <__math_oflowf>
 802a0ca:	1c04      	adds	r4, r0, #0
 802a0cc:	e7f5      	b.n	802a0ba <__ieee754_expf+0x26>
 802a0ce:	2800      	cmp	r0, #0
 802a0d0:	da06      	bge.n	802a0e0 <__ieee754_expf+0x4c>
 802a0d2:	4a59      	ldr	r2, [pc, #356]	@ (802a238 <__ieee754_expf+0x1a4>)
 802a0d4:	4293      	cmp	r3, r2
 802a0d6:	d903      	bls.n	802a0e0 <__ieee754_expf+0x4c>
 802a0d8:	2000      	movs	r0, #0
 802a0da:	f000 f97a 	bl	802a3d2 <__math_uflowf>
 802a0de:	e7f4      	b.n	802a0ca <__ieee754_expf+0x36>
 802a0e0:	4a56      	ldr	r2, [pc, #344]	@ (802a23c <__ieee754_expf+0x1a8>)
 802a0e2:	4293      	cmp	r3, r2
 802a0e4:	d96e      	bls.n	802a1c4 <__ieee754_expf+0x130>
 802a0e6:	4a56      	ldr	r2, [pc, #344]	@ (802a240 <__ieee754_expf+0x1ac>)
 802a0e8:	00b5      	lsls	r5, r6, #2
 802a0ea:	4293      	cmp	r3, r2
 802a0ec:	d84e      	bhi.n	802a18c <__ieee754_expf+0xf8>
 802a0ee:	4b55      	ldr	r3, [pc, #340]	@ (802a244 <__ieee754_expf+0x1b0>)
 802a0f0:	1c20      	adds	r0, r4, #0
 802a0f2:	5959      	ldr	r1, [r3, r5]
 802a0f4:	f7d7 f8fe 	bl	80012f4 <__aeabi_fsub>
 802a0f8:	4b53      	ldr	r3, [pc, #332]	@ (802a248 <__ieee754_expf+0x1b4>)
 802a0fa:	1c07      	adds	r7, r0, #0
 802a0fc:	595b      	ldr	r3, [r3, r5]
 802a0fe:	2501      	movs	r5, #1
 802a100:	4075      	eors	r5, r6
 802a102:	9300      	str	r3, [sp, #0]
 802a104:	1bad      	subs	r5, r5, r6
 802a106:	9900      	ldr	r1, [sp, #0]
 802a108:	1c38      	adds	r0, r7, #0
 802a10a:	f7d7 f8f3 	bl	80012f4 <__aeabi_fsub>
 802a10e:	1c04      	adds	r4, r0, #0
 802a110:	1c21      	adds	r1, r4, #0
 802a112:	1c20      	adds	r0, r4, #0
 802a114:	f7d6 ff94 	bl	8001040 <__aeabi_fmul>
 802a118:	494c      	ldr	r1, [pc, #304]	@ (802a24c <__ieee754_expf+0x1b8>)
 802a11a:	1c06      	adds	r6, r0, #0
 802a11c:	f7d6 ff90 	bl	8001040 <__aeabi_fmul>
 802a120:	494b      	ldr	r1, [pc, #300]	@ (802a250 <__ieee754_expf+0x1bc>)
 802a122:	f7d7 f8e7 	bl	80012f4 <__aeabi_fsub>
 802a126:	1c31      	adds	r1, r6, #0
 802a128:	f7d6 ff8a 	bl	8001040 <__aeabi_fmul>
 802a12c:	4949      	ldr	r1, [pc, #292]	@ (802a254 <__ieee754_expf+0x1c0>)
 802a12e:	f7d6 fbc7 	bl	80008c0 <__aeabi_fadd>
 802a132:	1c31      	adds	r1, r6, #0
 802a134:	f7d6 ff84 	bl	8001040 <__aeabi_fmul>
 802a138:	4947      	ldr	r1, [pc, #284]	@ (802a258 <__ieee754_expf+0x1c4>)
 802a13a:	f7d7 f8db 	bl	80012f4 <__aeabi_fsub>
 802a13e:	1c31      	adds	r1, r6, #0
 802a140:	f7d6 ff7e 	bl	8001040 <__aeabi_fmul>
 802a144:	4945      	ldr	r1, [pc, #276]	@ (802a25c <__ieee754_expf+0x1c8>)
 802a146:	f7d6 fbbb 	bl	80008c0 <__aeabi_fadd>
 802a14a:	1c31      	adds	r1, r6, #0
 802a14c:	f7d6 ff78 	bl	8001040 <__aeabi_fmul>
 802a150:	1c01      	adds	r1, r0, #0
 802a152:	1c20      	adds	r0, r4, #0
 802a154:	f7d7 f8ce 	bl	80012f4 <__aeabi_fsub>
 802a158:	1c01      	adds	r1, r0, #0
 802a15a:	1c06      	adds	r6, r0, #0
 802a15c:	1c20      	adds	r0, r4, #0
 802a15e:	f7d6 ff6f 	bl	8001040 <__aeabi_fmul>
 802a162:	9001      	str	r0, [sp, #4]
 802a164:	2d00      	cmp	r5, #0
 802a166:	d140      	bne.n	802a1ea <__ieee754_expf+0x156>
 802a168:	2180      	movs	r1, #128	@ 0x80
 802a16a:	1c30      	adds	r0, r6, #0
 802a16c:	05c9      	lsls	r1, r1, #23
 802a16e:	f7d7 f8c1 	bl	80012f4 <__aeabi_fsub>
 802a172:	1c01      	adds	r1, r0, #0
 802a174:	9801      	ldr	r0, [sp, #4]
 802a176:	f7d6 fd95 	bl	8000ca4 <__aeabi_fdiv>
 802a17a:	1c21      	adds	r1, r4, #0
 802a17c:	f7d7 f8ba 	bl	80012f4 <__aeabi_fsub>
 802a180:	1c01      	adds	r1, r0, #0
 802a182:	20fe      	movs	r0, #254	@ 0xfe
 802a184:	0580      	lsls	r0, r0, #22
 802a186:	f7d7 f8b5 	bl	80012f4 <__aeabi_fsub>
 802a18a:	e79e      	b.n	802a0ca <__ieee754_expf+0x36>
 802a18c:	4934      	ldr	r1, [pc, #208]	@ (802a260 <__ieee754_expf+0x1cc>)
 802a18e:	1c20      	adds	r0, r4, #0
 802a190:	f7d6 ff56 	bl	8001040 <__aeabi_fmul>
 802a194:	4b33      	ldr	r3, [pc, #204]	@ (802a264 <__ieee754_expf+0x1d0>)
 802a196:	5959      	ldr	r1, [r3, r5]
 802a198:	f7d6 fb92 	bl	80008c0 <__aeabi_fadd>
 802a19c:	f7d7 fb24 	bl	80017e8 <__aeabi_f2iz>
 802a1a0:	0005      	movs	r5, r0
 802a1a2:	f7d7 fb41 	bl	8001828 <__aeabi_i2f>
 802a1a6:	4930      	ldr	r1, [pc, #192]	@ (802a268 <__ieee754_expf+0x1d4>)
 802a1a8:	1c06      	adds	r6, r0, #0
 802a1aa:	f7d6 ff49 	bl	8001040 <__aeabi_fmul>
 802a1ae:	1c01      	adds	r1, r0, #0
 802a1b0:	1c20      	adds	r0, r4, #0
 802a1b2:	f7d7 f89f 	bl	80012f4 <__aeabi_fsub>
 802a1b6:	492d      	ldr	r1, [pc, #180]	@ (802a26c <__ieee754_expf+0x1d8>)
 802a1b8:	1c07      	adds	r7, r0, #0
 802a1ba:	1c30      	adds	r0, r6, #0
 802a1bc:	f7d6 ff40 	bl	8001040 <__aeabi_fmul>
 802a1c0:	9000      	str	r0, [sp, #0]
 802a1c2:	e7a0      	b.n	802a106 <__ieee754_expf+0x72>
 802a1c4:	22d0      	movs	r2, #208	@ 0xd0
 802a1c6:	0592      	lsls	r2, r2, #22
 802a1c8:	4293      	cmp	r3, r2
 802a1ca:	d20c      	bcs.n	802a1e6 <__ieee754_expf+0x152>
 802a1cc:	4928      	ldr	r1, [pc, #160]	@ (802a270 <__ieee754_expf+0x1dc>)
 802a1ce:	1c20      	adds	r0, r4, #0
 802a1d0:	f7d6 fb76 	bl	80008c0 <__aeabi_fadd>
 802a1d4:	21fe      	movs	r1, #254	@ 0xfe
 802a1d6:	0589      	lsls	r1, r1, #22
 802a1d8:	f7d6 f9be 	bl	8000558 <__aeabi_fcmpgt>
 802a1dc:	1e05      	subs	r5, r0, #0
 802a1de:	d097      	beq.n	802a110 <__ieee754_expf+0x7c>
 802a1e0:	21fe      	movs	r1, #254	@ 0xfe
 802a1e2:	0589      	lsls	r1, r1, #22
 802a1e4:	e75f      	b.n	802a0a6 <__ieee754_expf+0x12>
 802a1e6:	2500      	movs	r5, #0
 802a1e8:	e792      	b.n	802a110 <__ieee754_expf+0x7c>
 802a1ea:	2080      	movs	r0, #128	@ 0x80
 802a1ec:	1c31      	adds	r1, r6, #0
 802a1ee:	05c0      	lsls	r0, r0, #23
 802a1f0:	f7d7 f880 	bl	80012f4 <__aeabi_fsub>
 802a1f4:	1c01      	adds	r1, r0, #0
 802a1f6:	9801      	ldr	r0, [sp, #4]
 802a1f8:	f7d6 fd54 	bl	8000ca4 <__aeabi_fdiv>
 802a1fc:	1c01      	adds	r1, r0, #0
 802a1fe:	9800      	ldr	r0, [sp, #0]
 802a200:	f7d7 f878 	bl	80012f4 <__aeabi_fsub>
 802a204:	1c39      	adds	r1, r7, #0
 802a206:	f7d7 f875 	bl	80012f4 <__aeabi_fsub>
 802a20a:	1c01      	adds	r1, r0, #0
 802a20c:	20fe      	movs	r0, #254	@ 0xfe
 802a20e:	0580      	lsls	r0, r0, #22
 802a210:	f7d7 f870 	bl	80012f4 <__aeabi_fsub>
 802a214:	002b      	movs	r3, r5
 802a216:	337d      	adds	r3, #125	@ 0x7d
 802a218:	db02      	blt.n	802a220 <__ieee754_expf+0x18c>
 802a21a:	05ec      	lsls	r4, r5, #23
 802a21c:	1824      	adds	r4, r4, r0
 802a21e:	e74c      	b.n	802a0ba <__ieee754_expf+0x26>
 802a220:	21d8      	movs	r1, #216	@ 0xd8
 802a222:	3564      	adds	r5, #100	@ 0x64
 802a224:	05ed      	lsls	r5, r5, #23
 802a226:	1828      	adds	r0, r5, r0
 802a228:	0509      	lsls	r1, r1, #20
 802a22a:	f7d6 ff09 	bl	8001040 <__aeabi_fmul>
 802a22e:	e74c      	b.n	802a0ca <__ieee754_expf+0x36>
 802a230:	2400      	movs	r4, #0
 802a232:	e742      	b.n	802a0ba <__ieee754_expf+0x26>
 802a234:	42b17217 	.word	0x42b17217
 802a238:	42cff1b5 	.word	0x42cff1b5
 802a23c:	3eb17218 	.word	0x3eb17218
 802a240:	3f851591 	.word	0x3f851591
 802a244:	0802edf8 	.word	0x0802edf8
 802a248:	0802edf0 	.word	0x0802edf0
 802a24c:	3331bb4c 	.word	0x3331bb4c
 802a250:	35ddea0e 	.word	0x35ddea0e
 802a254:	388ab355 	.word	0x388ab355
 802a258:	3b360b61 	.word	0x3b360b61
 802a25c:	3e2aaaab 	.word	0x3e2aaaab
 802a260:	3fb8aa3b 	.word	0x3fb8aa3b
 802a264:	0802ee00 	.word	0x0802ee00
 802a268:	3f317180 	.word	0x3f317180
 802a26c:	3717f7d1 	.word	0x3717f7d1
 802a270:	7149f2ca 	.word	0x7149f2ca

0802a274 <scalbn>:
 802a274:	004b      	lsls	r3, r1, #1
 802a276:	b570      	push	{r4, r5, r6, lr}
 802a278:	0d5b      	lsrs	r3, r3, #21
 802a27a:	0014      	movs	r4, r2
 802a27c:	000d      	movs	r5, r1
 802a27e:	2b00      	cmp	r3, #0
 802a280:	d10f      	bne.n	802a2a2 <scalbn+0x2e>
 802a282:	004b      	lsls	r3, r1, #1
 802a284:	085b      	lsrs	r3, r3, #1
 802a286:	4303      	orrs	r3, r0
 802a288:	d012      	beq.n	802a2b0 <scalbn+0x3c>
 802a28a:	4b23      	ldr	r3, [pc, #140]	@ (802a318 <scalbn+0xa4>)
 802a28c:	2200      	movs	r2, #0
 802a28e:	f7d8 fb61 	bl	8002954 <__aeabi_dmul>
 802a292:	4b22      	ldr	r3, [pc, #136]	@ (802a31c <scalbn+0xa8>)
 802a294:	429c      	cmp	r4, r3
 802a296:	da0c      	bge.n	802a2b2 <scalbn+0x3e>
 802a298:	4a21      	ldr	r2, [pc, #132]	@ (802a320 <scalbn+0xac>)
 802a29a:	4b22      	ldr	r3, [pc, #136]	@ (802a324 <scalbn+0xb0>)
 802a29c:	f7d8 fb5a 	bl	8002954 <__aeabi_dmul>
 802a2a0:	e006      	b.n	802a2b0 <scalbn+0x3c>
 802a2a2:	4a21      	ldr	r2, [pc, #132]	@ (802a328 <scalbn+0xb4>)
 802a2a4:	4293      	cmp	r3, r2
 802a2a6:	d108      	bne.n	802a2ba <scalbn+0x46>
 802a2a8:	0002      	movs	r2, r0
 802a2aa:	000b      	movs	r3, r1
 802a2ac:	f7d7 fb52 	bl	8001954 <__aeabi_dadd>
 802a2b0:	bd70      	pop	{r4, r5, r6, pc}
 802a2b2:	000d      	movs	r5, r1
 802a2b4:	004b      	lsls	r3, r1, #1
 802a2b6:	0d5b      	lsrs	r3, r3, #21
 802a2b8:	3b36      	subs	r3, #54	@ 0x36
 802a2ba:	4a1c      	ldr	r2, [pc, #112]	@ (802a32c <scalbn+0xb8>)
 802a2bc:	4294      	cmp	r4, r2
 802a2be:	dd0a      	ble.n	802a2d6 <scalbn+0x62>
 802a2c0:	4c1b      	ldr	r4, [pc, #108]	@ (802a330 <scalbn+0xbc>)
 802a2c2:	4d1c      	ldr	r5, [pc, #112]	@ (802a334 <scalbn+0xc0>)
 802a2c4:	2900      	cmp	r1, #0
 802a2c6:	da01      	bge.n	802a2cc <scalbn+0x58>
 802a2c8:	4c19      	ldr	r4, [pc, #100]	@ (802a330 <scalbn+0xbc>)
 802a2ca:	4d1b      	ldr	r5, [pc, #108]	@ (802a338 <scalbn+0xc4>)
 802a2cc:	4a18      	ldr	r2, [pc, #96]	@ (802a330 <scalbn+0xbc>)
 802a2ce:	4b19      	ldr	r3, [pc, #100]	@ (802a334 <scalbn+0xc0>)
 802a2d0:	0020      	movs	r0, r4
 802a2d2:	0029      	movs	r1, r5
 802a2d4:	e7e2      	b.n	802a29c <scalbn+0x28>
 802a2d6:	18e2      	adds	r2, r4, r3
 802a2d8:	4b18      	ldr	r3, [pc, #96]	@ (802a33c <scalbn+0xc8>)
 802a2da:	429a      	cmp	r2, r3
 802a2dc:	dcf0      	bgt.n	802a2c0 <scalbn+0x4c>
 802a2de:	2a00      	cmp	r2, #0
 802a2e0:	dd05      	ble.n	802a2ee <scalbn+0x7a>
 802a2e2:	4b17      	ldr	r3, [pc, #92]	@ (802a340 <scalbn+0xcc>)
 802a2e4:	0512      	lsls	r2, r2, #20
 802a2e6:	402b      	ands	r3, r5
 802a2e8:	4313      	orrs	r3, r2
 802a2ea:	0019      	movs	r1, r3
 802a2ec:	e7e0      	b.n	802a2b0 <scalbn+0x3c>
 802a2ee:	0013      	movs	r3, r2
 802a2f0:	3335      	adds	r3, #53	@ 0x35
 802a2f2:	da08      	bge.n	802a306 <scalbn+0x92>
 802a2f4:	4c0a      	ldr	r4, [pc, #40]	@ (802a320 <scalbn+0xac>)
 802a2f6:	4d0b      	ldr	r5, [pc, #44]	@ (802a324 <scalbn+0xb0>)
 802a2f8:	2900      	cmp	r1, #0
 802a2fa:	da01      	bge.n	802a300 <scalbn+0x8c>
 802a2fc:	4c08      	ldr	r4, [pc, #32]	@ (802a320 <scalbn+0xac>)
 802a2fe:	4d11      	ldr	r5, [pc, #68]	@ (802a344 <scalbn+0xd0>)
 802a300:	4a07      	ldr	r2, [pc, #28]	@ (802a320 <scalbn+0xac>)
 802a302:	4b08      	ldr	r3, [pc, #32]	@ (802a324 <scalbn+0xb0>)
 802a304:	e7e4      	b.n	802a2d0 <scalbn+0x5c>
 802a306:	4b0e      	ldr	r3, [pc, #56]	@ (802a340 <scalbn+0xcc>)
 802a308:	3236      	adds	r2, #54	@ 0x36
 802a30a:	401d      	ands	r5, r3
 802a30c:	0512      	lsls	r2, r2, #20
 802a30e:	432a      	orrs	r2, r5
 802a310:	0011      	movs	r1, r2
 802a312:	4b0d      	ldr	r3, [pc, #52]	@ (802a348 <scalbn+0xd4>)
 802a314:	2200      	movs	r2, #0
 802a316:	e7c1      	b.n	802a29c <scalbn+0x28>
 802a318:	43500000 	.word	0x43500000
 802a31c:	ffff3cb0 	.word	0xffff3cb0
 802a320:	c2f8f359 	.word	0xc2f8f359
 802a324:	01a56e1f 	.word	0x01a56e1f
 802a328:	000007ff 	.word	0x000007ff
 802a32c:	0000c350 	.word	0x0000c350
 802a330:	8800759c 	.word	0x8800759c
 802a334:	7e37e43c 	.word	0x7e37e43c
 802a338:	fe37e43c 	.word	0xfe37e43c
 802a33c:	000007fe 	.word	0x000007fe
 802a340:	800fffff 	.word	0x800fffff
 802a344:	81a56e1f 	.word	0x81a56e1f
 802a348:	3c900000 	.word	0x3c900000

0802a34c <with_errno>:
 802a34c:	b570      	push	{r4, r5, r6, lr}
 802a34e:	000d      	movs	r5, r1
 802a350:	0016      	movs	r6, r2
 802a352:	0004      	movs	r4, r0
 802a354:	f7fc f952 	bl	80265fc <__errno>
 802a358:	0029      	movs	r1, r5
 802a35a:	6006      	str	r6, [r0, #0]
 802a35c:	0020      	movs	r0, r4
 802a35e:	bd70      	pop	{r4, r5, r6, pc}

0802a360 <xflow>:
 802a360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a362:	0014      	movs	r4, r2
 802a364:	001d      	movs	r5, r3
 802a366:	2800      	cmp	r0, #0
 802a368:	d002      	beq.n	802a370 <xflow+0x10>
 802a36a:	2180      	movs	r1, #128	@ 0x80
 802a36c:	0609      	lsls	r1, r1, #24
 802a36e:	185b      	adds	r3, r3, r1
 802a370:	9200      	str	r2, [sp, #0]
 802a372:	9301      	str	r3, [sp, #4]
 802a374:	9a00      	ldr	r2, [sp, #0]
 802a376:	9b01      	ldr	r3, [sp, #4]
 802a378:	0020      	movs	r0, r4
 802a37a:	0029      	movs	r1, r5
 802a37c:	f7d8 faea 	bl	8002954 <__aeabi_dmul>
 802a380:	2222      	movs	r2, #34	@ 0x22
 802a382:	f7ff ffe3 	bl	802a34c <with_errno>
 802a386:	b003      	add	sp, #12
 802a388:	bd30      	pop	{r4, r5, pc}

0802a38a <__math_uflow>:
 802a38a:	2380      	movs	r3, #128	@ 0x80
 802a38c:	b510      	push	{r4, lr}
 802a38e:	2200      	movs	r2, #0
 802a390:	055b      	lsls	r3, r3, #21
 802a392:	f7ff ffe5 	bl	802a360 <xflow>
 802a396:	bd10      	pop	{r4, pc}

0802a398 <__math_oflow>:
 802a398:	23e0      	movs	r3, #224	@ 0xe0
 802a39a:	b510      	push	{r4, lr}
 802a39c:	2200      	movs	r2, #0
 802a39e:	05db      	lsls	r3, r3, #23
 802a3a0:	f7ff ffde 	bl	802a360 <xflow>
 802a3a4:	bd10      	pop	{r4, pc}

0802a3a6 <with_errnof>:
 802a3a6:	b570      	push	{r4, r5, r6, lr}
 802a3a8:	000d      	movs	r5, r1
 802a3aa:	1c04      	adds	r4, r0, #0
 802a3ac:	f7fc f926 	bl	80265fc <__errno>
 802a3b0:	6005      	str	r5, [r0, #0]
 802a3b2:	1c20      	adds	r0, r4, #0
 802a3b4:	bd70      	pop	{r4, r5, r6, pc}

0802a3b6 <xflowf>:
 802a3b6:	b510      	push	{r4, lr}
 802a3b8:	1c0b      	adds	r3, r1, #0
 802a3ba:	2800      	cmp	r0, #0
 802a3bc:	d002      	beq.n	802a3c4 <xflowf+0xe>
 802a3be:	2380      	movs	r3, #128	@ 0x80
 802a3c0:	061b      	lsls	r3, r3, #24
 802a3c2:	18cb      	adds	r3, r1, r3
 802a3c4:	1c18      	adds	r0, r3, #0
 802a3c6:	f7d6 fe3b 	bl	8001040 <__aeabi_fmul>
 802a3ca:	2122      	movs	r1, #34	@ 0x22
 802a3cc:	f7ff ffeb 	bl	802a3a6 <with_errnof>
 802a3d0:	bd10      	pop	{r4, pc}

0802a3d2 <__math_uflowf>:
 802a3d2:	2180      	movs	r1, #128	@ 0x80
 802a3d4:	b510      	push	{r4, lr}
 802a3d6:	0549      	lsls	r1, r1, #21
 802a3d8:	f7ff ffed 	bl	802a3b6 <xflowf>
 802a3dc:	bd10      	pop	{r4, pc}

0802a3de <__math_oflowf>:
 802a3de:	21e0      	movs	r1, #224	@ 0xe0
 802a3e0:	b510      	push	{r4, lr}
 802a3e2:	05c9      	lsls	r1, r1, #23
 802a3e4:	f7ff ffe7 	bl	802a3b6 <xflowf>
 802a3e8:	bd10      	pop	{r4, pc}
	...

0802a3ec <__ieee754_sqrt>:
 802a3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a3ee:	000a      	movs	r2, r1
 802a3f0:	000d      	movs	r5, r1
 802a3f2:	496b      	ldr	r1, [pc, #428]	@ (802a5a0 <__ieee754_sqrt+0x1b4>)
 802a3f4:	0004      	movs	r4, r0
 802a3f6:	0003      	movs	r3, r0
 802a3f8:	0008      	movs	r0, r1
 802a3fa:	b087      	sub	sp, #28
 802a3fc:	4028      	ands	r0, r5
 802a3fe:	4288      	cmp	r0, r1
 802a400:	d111      	bne.n	802a426 <__ieee754_sqrt+0x3a>
 802a402:	0022      	movs	r2, r4
 802a404:	002b      	movs	r3, r5
 802a406:	0020      	movs	r0, r4
 802a408:	0029      	movs	r1, r5
 802a40a:	f7d8 faa3 	bl	8002954 <__aeabi_dmul>
 802a40e:	0002      	movs	r2, r0
 802a410:	000b      	movs	r3, r1
 802a412:	0020      	movs	r0, r4
 802a414:	0029      	movs	r1, r5
 802a416:	f7d7 fa9d 	bl	8001954 <__aeabi_dadd>
 802a41a:	0004      	movs	r4, r0
 802a41c:	000d      	movs	r5, r1
 802a41e:	0020      	movs	r0, r4
 802a420:	0029      	movs	r1, r5
 802a422:	b007      	add	sp, #28
 802a424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a426:	2d00      	cmp	r5, #0
 802a428:	dc11      	bgt.n	802a44e <__ieee754_sqrt+0x62>
 802a42a:	0069      	lsls	r1, r5, #1
 802a42c:	0849      	lsrs	r1, r1, #1
 802a42e:	4321      	orrs	r1, r4
 802a430:	d0f5      	beq.n	802a41e <__ieee754_sqrt+0x32>
 802a432:	2000      	movs	r0, #0
 802a434:	4285      	cmp	r5, r0
 802a436:	d010      	beq.n	802a45a <__ieee754_sqrt+0x6e>
 802a438:	0022      	movs	r2, r4
 802a43a:	002b      	movs	r3, r5
 802a43c:	0020      	movs	r0, r4
 802a43e:	0029      	movs	r1, r5
 802a440:	f7d8 fd6e 	bl	8002f20 <__aeabi_dsub>
 802a444:	0002      	movs	r2, r0
 802a446:	000b      	movs	r3, r1
 802a448:	f7d7 fe4a 	bl	80020e0 <__aeabi_ddiv>
 802a44c:	e7e5      	b.n	802a41a <__ieee754_sqrt+0x2e>
 802a44e:	1528      	asrs	r0, r5, #20
 802a450:	d115      	bne.n	802a47e <__ieee754_sqrt+0x92>
 802a452:	2480      	movs	r4, #128	@ 0x80
 802a454:	2100      	movs	r1, #0
 802a456:	0364      	lsls	r4, r4, #13
 802a458:	e007      	b.n	802a46a <__ieee754_sqrt+0x7e>
 802a45a:	0ada      	lsrs	r2, r3, #11
 802a45c:	3815      	subs	r0, #21
 802a45e:	055b      	lsls	r3, r3, #21
 802a460:	2a00      	cmp	r2, #0
 802a462:	d0fa      	beq.n	802a45a <__ieee754_sqrt+0x6e>
 802a464:	e7f5      	b.n	802a452 <__ieee754_sqrt+0x66>
 802a466:	0052      	lsls	r2, r2, #1
 802a468:	3101      	adds	r1, #1
 802a46a:	4222      	tst	r2, r4
 802a46c:	d0fb      	beq.n	802a466 <__ieee754_sqrt+0x7a>
 802a46e:	1e4c      	subs	r4, r1, #1
 802a470:	1b00      	subs	r0, r0, r4
 802a472:	2420      	movs	r4, #32
 802a474:	001d      	movs	r5, r3
 802a476:	1a64      	subs	r4, r4, r1
 802a478:	40e5      	lsrs	r5, r4
 802a47a:	408b      	lsls	r3, r1
 802a47c:	432a      	orrs	r2, r5
 802a47e:	4949      	ldr	r1, [pc, #292]	@ (802a5a4 <__ieee754_sqrt+0x1b8>)
 802a480:	0312      	lsls	r2, r2, #12
 802a482:	1844      	adds	r4, r0, r1
 802a484:	2180      	movs	r1, #128	@ 0x80
 802a486:	0b12      	lsrs	r2, r2, #12
 802a488:	0349      	lsls	r1, r1, #13
 802a48a:	4311      	orrs	r1, r2
 802a48c:	07c0      	lsls	r0, r0, #31
 802a48e:	d403      	bmi.n	802a498 <__ieee754_sqrt+0xac>
 802a490:	0fda      	lsrs	r2, r3, #31
 802a492:	0049      	lsls	r1, r1, #1
 802a494:	1851      	adds	r1, r2, r1
 802a496:	005b      	lsls	r3, r3, #1
 802a498:	2500      	movs	r5, #0
 802a49a:	1062      	asrs	r2, r4, #1
 802a49c:	0049      	lsls	r1, r1, #1
 802a49e:	2480      	movs	r4, #128	@ 0x80
 802a4a0:	9205      	str	r2, [sp, #20]
 802a4a2:	0fda      	lsrs	r2, r3, #31
 802a4a4:	1852      	adds	r2, r2, r1
 802a4a6:	2016      	movs	r0, #22
 802a4a8:	0029      	movs	r1, r5
 802a4aa:	005b      	lsls	r3, r3, #1
 802a4ac:	03a4      	lsls	r4, r4, #14
 802a4ae:	190e      	adds	r6, r1, r4
 802a4b0:	4296      	cmp	r6, r2
 802a4b2:	dc02      	bgt.n	802a4ba <__ieee754_sqrt+0xce>
 802a4b4:	1931      	adds	r1, r6, r4
 802a4b6:	1b92      	subs	r2, r2, r6
 802a4b8:	192d      	adds	r5, r5, r4
 802a4ba:	0fde      	lsrs	r6, r3, #31
 802a4bc:	0052      	lsls	r2, r2, #1
 802a4be:	3801      	subs	r0, #1
 802a4c0:	1992      	adds	r2, r2, r6
 802a4c2:	005b      	lsls	r3, r3, #1
 802a4c4:	0864      	lsrs	r4, r4, #1
 802a4c6:	2800      	cmp	r0, #0
 802a4c8:	d1f1      	bne.n	802a4ae <__ieee754_sqrt+0xc2>
 802a4ca:	2620      	movs	r6, #32
 802a4cc:	2780      	movs	r7, #128	@ 0x80
 802a4ce:	0004      	movs	r4, r0
 802a4d0:	9604      	str	r6, [sp, #16]
 802a4d2:	063f      	lsls	r7, r7, #24
 802a4d4:	183e      	adds	r6, r7, r0
 802a4d6:	46b4      	mov	ip, r6
 802a4d8:	428a      	cmp	r2, r1
 802a4da:	dc02      	bgt.n	802a4e2 <__ieee754_sqrt+0xf6>
 802a4dc:	d114      	bne.n	802a508 <__ieee754_sqrt+0x11c>
 802a4de:	429e      	cmp	r6, r3
 802a4e0:	d812      	bhi.n	802a508 <__ieee754_sqrt+0x11c>
 802a4e2:	4660      	mov	r0, ip
 802a4e4:	4666      	mov	r6, ip
 802a4e6:	19c0      	adds	r0, r0, r7
 802a4e8:	9100      	str	r1, [sp, #0]
 802a4ea:	2e00      	cmp	r6, #0
 802a4ec:	da03      	bge.n	802a4f6 <__ieee754_sqrt+0x10a>
 802a4ee:	43c6      	mvns	r6, r0
 802a4f0:	0ff6      	lsrs	r6, r6, #31
 802a4f2:	198e      	adds	r6, r1, r6
 802a4f4:	9600      	str	r6, [sp, #0]
 802a4f6:	1a52      	subs	r2, r2, r1
 802a4f8:	4563      	cmp	r3, ip
 802a4fa:	4189      	sbcs	r1, r1
 802a4fc:	4249      	negs	r1, r1
 802a4fe:	1a52      	subs	r2, r2, r1
 802a500:	4661      	mov	r1, ip
 802a502:	1a5b      	subs	r3, r3, r1
 802a504:	9900      	ldr	r1, [sp, #0]
 802a506:	19e4      	adds	r4, r4, r7
 802a508:	0fde      	lsrs	r6, r3, #31
 802a50a:	0052      	lsls	r2, r2, #1
 802a50c:	1992      	adds	r2, r2, r6
 802a50e:	9e04      	ldr	r6, [sp, #16]
 802a510:	005b      	lsls	r3, r3, #1
 802a512:	3e01      	subs	r6, #1
 802a514:	087f      	lsrs	r7, r7, #1
 802a516:	9604      	str	r6, [sp, #16]
 802a518:	2e00      	cmp	r6, #0
 802a51a:	d1db      	bne.n	802a4d4 <__ieee754_sqrt+0xe8>
 802a51c:	431a      	orrs	r2, r3
 802a51e:	d01f      	beq.n	802a560 <__ieee754_sqrt+0x174>
 802a520:	4e21      	ldr	r6, [pc, #132]	@ (802a5a8 <__ieee754_sqrt+0x1bc>)
 802a522:	4f22      	ldr	r7, [pc, #136]	@ (802a5ac <__ieee754_sqrt+0x1c0>)
 802a524:	6830      	ldr	r0, [r6, #0]
 802a526:	6871      	ldr	r1, [r6, #4]
 802a528:	683a      	ldr	r2, [r7, #0]
 802a52a:	687b      	ldr	r3, [r7, #4]
 802a52c:	9200      	str	r2, [sp, #0]
 802a52e:	9301      	str	r3, [sp, #4]
 802a530:	6832      	ldr	r2, [r6, #0]
 802a532:	6873      	ldr	r3, [r6, #4]
 802a534:	9202      	str	r2, [sp, #8]
 802a536:	9303      	str	r3, [sp, #12]
 802a538:	9a00      	ldr	r2, [sp, #0]
 802a53a:	9b01      	ldr	r3, [sp, #4]
 802a53c:	f7d8 fcf0 	bl	8002f20 <__aeabi_dsub>
 802a540:	0002      	movs	r2, r0
 802a542:	000b      	movs	r3, r1
 802a544:	9802      	ldr	r0, [sp, #8]
 802a546:	9903      	ldr	r1, [sp, #12]
 802a548:	f7d5 ffc2 	bl	80004d0 <__aeabi_dcmple>
 802a54c:	2800      	cmp	r0, #0
 802a54e:	d007      	beq.n	802a560 <__ieee754_sqrt+0x174>
 802a550:	6830      	ldr	r0, [r6, #0]
 802a552:	6871      	ldr	r1, [r6, #4]
 802a554:	683a      	ldr	r2, [r7, #0]
 802a556:	687b      	ldr	r3, [r7, #4]
 802a558:	1c67      	adds	r7, r4, #1
 802a55a:	d10c      	bne.n	802a576 <__ieee754_sqrt+0x18a>
 802a55c:	9c04      	ldr	r4, [sp, #16]
 802a55e:	3501      	adds	r5, #1
 802a560:	4a13      	ldr	r2, [pc, #76]	@ (802a5b0 <__ieee754_sqrt+0x1c4>)
 802a562:	106b      	asrs	r3, r5, #1
 802a564:	189b      	adds	r3, r3, r2
 802a566:	9a05      	ldr	r2, [sp, #20]
 802a568:	07ed      	lsls	r5, r5, #31
 802a56a:	0864      	lsrs	r4, r4, #1
 802a56c:	0512      	lsls	r2, r2, #20
 802a56e:	4325      	orrs	r5, r4
 802a570:	0028      	movs	r0, r5
 802a572:	18d1      	adds	r1, r2, r3
 802a574:	e751      	b.n	802a41a <__ieee754_sqrt+0x2e>
 802a576:	f7d7 f9ed 	bl	8001954 <__aeabi_dadd>
 802a57a:	6877      	ldr	r7, [r6, #4]
 802a57c:	6836      	ldr	r6, [r6, #0]
 802a57e:	0002      	movs	r2, r0
 802a580:	000b      	movs	r3, r1
 802a582:	0030      	movs	r0, r6
 802a584:	0039      	movs	r1, r7
 802a586:	f7d5 ff99 	bl	80004bc <__aeabi_dcmplt>
 802a58a:	2800      	cmp	r0, #0
 802a58c:	d004      	beq.n	802a598 <__ieee754_sqrt+0x1ac>
 802a58e:	3402      	adds	r4, #2
 802a590:	4263      	negs	r3, r4
 802a592:	4163      	adcs	r3, r4
 802a594:	18ed      	adds	r5, r5, r3
 802a596:	e7e3      	b.n	802a560 <__ieee754_sqrt+0x174>
 802a598:	2301      	movs	r3, #1
 802a59a:	3401      	adds	r4, #1
 802a59c:	439c      	bics	r4, r3
 802a59e:	e7df      	b.n	802a560 <__ieee754_sqrt+0x174>
 802a5a0:	7ff00000 	.word	0x7ff00000
 802a5a4:	fffffc01 	.word	0xfffffc01
 802a5a8:	0802ee10 	.word	0x0802ee10
 802a5ac:	0802ee08 	.word	0x0802ee08
 802a5b0:	3fe00000 	.word	0x3fe00000

0802a5b4 <_init>:
 802a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a5b6:	46c0      	nop			@ (mov r8, r8)
 802a5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a5ba:	bc08      	pop	{r3}
 802a5bc:	469e      	mov	lr, r3
 802a5be:	4770      	bx	lr

0802a5c0 <_fini>:
 802a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a5c2:	46c0      	nop			@ (mov r8, r8)
 802a5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a5c6:	bc08      	pop	{r3}
 802a5c8:	469e      	mov	lr, r3
 802a5ca:	4770      	bx	lr
